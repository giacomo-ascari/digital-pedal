
mcu-test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d530  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d0  0800d6c0  0800d6c0  0001d6c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800da90  0800da90  00020334  2**0
                  CONTENTS
  4 .ARM          00000008  0800da90  0800da90  0001da90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800da98  0800da98  00020334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800da98  0800da98  0001da98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800da9c  0800da9c  0001da9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000334  20000000  0800daa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020334  2**0
                  CONTENTS
 10 .bss          000057fc  20000334  20000334  00020334  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005b30  20005b30  00020334  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020334  2**0
                  CONTENTS, READONLY
 13 .debug_info   00028219  00000000  00000000  00020364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000565e  00000000  00000000  0004857d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014e8  00000000  00000000  0004dbe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001448  00000000  00000000  0004f0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000277ac  00000000  00000000  00050510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e979  00000000  00000000  00077cbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd535  00000000  00000000  00096635  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00163b6a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005984  00000000  00000000  00163bc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00000182  00000000  00000000  00169544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000334 	.word	0x20000334
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d6a8 	.word	0x0800d6a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000338 	.word	0x20000338
 80001cc:	0800d6a8 	.word	0x0800d6a8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a70:	f000 b96e 	b.w	8000d50 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	468c      	mov	ip, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	f040 8083 	bne.w	8000ba2 <__udivmoddi4+0x116>
 8000a9c:	428a      	cmp	r2, r1
 8000a9e:	4617      	mov	r7, r2
 8000aa0:	d947      	bls.n	8000b32 <__udivmoddi4+0xa6>
 8000aa2:	fab2 f282 	clz	r2, r2
 8000aa6:	b142      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa8:	f1c2 0020 	rsb	r0, r2, #32
 8000aac:	fa24 f000 	lsr.w	r0, r4, r0
 8000ab0:	4091      	lsls	r1, r2
 8000ab2:	4097      	lsls	r7, r2
 8000ab4:	ea40 0c01 	orr.w	ip, r0, r1
 8000ab8:	4094      	lsls	r4, r2
 8000aba:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000abe:	0c23      	lsrs	r3, r4, #16
 8000ac0:	fbbc f6f8 	udiv	r6, ip, r8
 8000ac4:	fa1f fe87 	uxth.w	lr, r7
 8000ac8:	fb08 c116 	mls	r1, r8, r6, ip
 8000acc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad0:	fb06 f10e 	mul.w	r1, r6, lr
 8000ad4:	4299      	cmp	r1, r3
 8000ad6:	d909      	bls.n	8000aec <__udivmoddi4+0x60>
 8000ad8:	18fb      	adds	r3, r7, r3
 8000ada:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000ade:	f080 8119 	bcs.w	8000d14 <__udivmoddi4+0x288>
 8000ae2:	4299      	cmp	r1, r3
 8000ae4:	f240 8116 	bls.w	8000d14 <__udivmoddi4+0x288>
 8000ae8:	3e02      	subs	r6, #2
 8000aea:	443b      	add	r3, r7
 8000aec:	1a5b      	subs	r3, r3, r1
 8000aee:	b2a4      	uxth	r4, r4
 8000af0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af4:	fb08 3310 	mls	r3, r8, r0, r3
 8000af8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000afc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b00:	45a6      	cmp	lr, r4
 8000b02:	d909      	bls.n	8000b18 <__udivmoddi4+0x8c>
 8000b04:	193c      	adds	r4, r7, r4
 8000b06:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b0a:	f080 8105 	bcs.w	8000d18 <__udivmoddi4+0x28c>
 8000b0e:	45a6      	cmp	lr, r4
 8000b10:	f240 8102 	bls.w	8000d18 <__udivmoddi4+0x28c>
 8000b14:	3802      	subs	r0, #2
 8000b16:	443c      	add	r4, r7
 8000b18:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b1c:	eba4 040e 	sub.w	r4, r4, lr
 8000b20:	2600      	movs	r6, #0
 8000b22:	b11d      	cbz	r5, 8000b2c <__udivmoddi4+0xa0>
 8000b24:	40d4      	lsrs	r4, r2
 8000b26:	2300      	movs	r3, #0
 8000b28:	e9c5 4300 	strd	r4, r3, [r5]
 8000b2c:	4631      	mov	r1, r6
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	b902      	cbnz	r2, 8000b36 <__udivmoddi4+0xaa>
 8000b34:	deff      	udf	#255	; 0xff
 8000b36:	fab2 f282 	clz	r2, r2
 8000b3a:	2a00      	cmp	r2, #0
 8000b3c:	d150      	bne.n	8000be0 <__udivmoddi4+0x154>
 8000b3e:	1bcb      	subs	r3, r1, r7
 8000b40:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b44:	fa1f f887 	uxth.w	r8, r7
 8000b48:	2601      	movs	r6, #1
 8000b4a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b4e:	0c21      	lsrs	r1, r4, #16
 8000b50:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b58:	fb08 f30c 	mul.w	r3, r8, ip
 8000b5c:	428b      	cmp	r3, r1
 8000b5e:	d907      	bls.n	8000b70 <__udivmoddi4+0xe4>
 8000b60:	1879      	adds	r1, r7, r1
 8000b62:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0xe2>
 8000b68:	428b      	cmp	r3, r1
 8000b6a:	f200 80e9 	bhi.w	8000d40 <__udivmoddi4+0x2b4>
 8000b6e:	4684      	mov	ip, r0
 8000b70:	1ac9      	subs	r1, r1, r3
 8000b72:	b2a3      	uxth	r3, r4
 8000b74:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b78:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b7c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b80:	fb08 f800 	mul.w	r8, r8, r0
 8000b84:	45a0      	cmp	r8, r4
 8000b86:	d907      	bls.n	8000b98 <__udivmoddi4+0x10c>
 8000b88:	193c      	adds	r4, r7, r4
 8000b8a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b8e:	d202      	bcs.n	8000b96 <__udivmoddi4+0x10a>
 8000b90:	45a0      	cmp	r8, r4
 8000b92:	f200 80d9 	bhi.w	8000d48 <__udivmoddi4+0x2bc>
 8000b96:	4618      	mov	r0, r3
 8000b98:	eba4 0408 	sub.w	r4, r4, r8
 8000b9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ba0:	e7bf      	b.n	8000b22 <__udivmoddi4+0x96>
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d909      	bls.n	8000bba <__udivmoddi4+0x12e>
 8000ba6:	2d00      	cmp	r5, #0
 8000ba8:	f000 80b1 	beq.w	8000d0e <__udivmoddi4+0x282>
 8000bac:	2600      	movs	r6, #0
 8000bae:	e9c5 0100 	strd	r0, r1, [r5]
 8000bb2:	4630      	mov	r0, r6
 8000bb4:	4631      	mov	r1, r6
 8000bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bba:	fab3 f683 	clz	r6, r3
 8000bbe:	2e00      	cmp	r6, #0
 8000bc0:	d14a      	bne.n	8000c58 <__udivmoddi4+0x1cc>
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d302      	bcc.n	8000bcc <__udivmoddi4+0x140>
 8000bc6:	4282      	cmp	r2, r0
 8000bc8:	f200 80b8 	bhi.w	8000d3c <__udivmoddi4+0x2b0>
 8000bcc:	1a84      	subs	r4, r0, r2
 8000bce:	eb61 0103 	sbc.w	r1, r1, r3
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	468c      	mov	ip, r1
 8000bd6:	2d00      	cmp	r5, #0
 8000bd8:	d0a8      	beq.n	8000b2c <__udivmoddi4+0xa0>
 8000bda:	e9c5 4c00 	strd	r4, ip, [r5]
 8000bde:	e7a5      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000be0:	f1c2 0320 	rsb	r3, r2, #32
 8000be4:	fa20 f603 	lsr.w	r6, r0, r3
 8000be8:	4097      	lsls	r7, r2
 8000bea:	fa01 f002 	lsl.w	r0, r1, r2
 8000bee:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bf2:	40d9      	lsrs	r1, r3
 8000bf4:	4330      	orrs	r0, r6
 8000bf6:	0c03      	lsrs	r3, r0, #16
 8000bf8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000bfc:	fa1f f887 	uxth.w	r8, r7
 8000c00:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c08:	fb06 f108 	mul.w	r1, r6, r8
 8000c0c:	4299      	cmp	r1, r3
 8000c0e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x19c>
 8000c14:	18fb      	adds	r3, r7, r3
 8000c16:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000c1a:	f080 808d 	bcs.w	8000d38 <__udivmoddi4+0x2ac>
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	f240 808a 	bls.w	8000d38 <__udivmoddi4+0x2ac>
 8000c24:	3e02      	subs	r6, #2
 8000c26:	443b      	add	r3, r7
 8000c28:	1a5b      	subs	r3, r3, r1
 8000c2a:	b281      	uxth	r1, r0
 8000c2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c38:	fb00 f308 	mul.w	r3, r0, r8
 8000c3c:	428b      	cmp	r3, r1
 8000c3e:	d907      	bls.n	8000c50 <__udivmoddi4+0x1c4>
 8000c40:	1879      	adds	r1, r7, r1
 8000c42:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000c46:	d273      	bcs.n	8000d30 <__udivmoddi4+0x2a4>
 8000c48:	428b      	cmp	r3, r1
 8000c4a:	d971      	bls.n	8000d30 <__udivmoddi4+0x2a4>
 8000c4c:	3802      	subs	r0, #2
 8000c4e:	4439      	add	r1, r7
 8000c50:	1acb      	subs	r3, r1, r3
 8000c52:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c56:	e778      	b.n	8000b4a <__udivmoddi4+0xbe>
 8000c58:	f1c6 0c20 	rsb	ip, r6, #32
 8000c5c:	fa03 f406 	lsl.w	r4, r3, r6
 8000c60:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c64:	431c      	orrs	r4, r3
 8000c66:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c6e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c72:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c76:	431f      	orrs	r7, r3
 8000c78:	0c3b      	lsrs	r3, r7, #16
 8000c7a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c7e:	fa1f f884 	uxth.w	r8, r4
 8000c82:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c86:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c8a:	fb09 fa08 	mul.w	sl, r9, r8
 8000c8e:	458a      	cmp	sl, r1
 8000c90:	fa02 f206 	lsl.w	r2, r2, r6
 8000c94:	fa00 f306 	lsl.w	r3, r0, r6
 8000c98:	d908      	bls.n	8000cac <__udivmoddi4+0x220>
 8000c9a:	1861      	adds	r1, r4, r1
 8000c9c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ca0:	d248      	bcs.n	8000d34 <__udivmoddi4+0x2a8>
 8000ca2:	458a      	cmp	sl, r1
 8000ca4:	d946      	bls.n	8000d34 <__udivmoddi4+0x2a8>
 8000ca6:	f1a9 0902 	sub.w	r9, r9, #2
 8000caa:	4421      	add	r1, r4
 8000cac:	eba1 010a 	sub.w	r1, r1, sl
 8000cb0:	b2bf      	uxth	r7, r7
 8000cb2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cb6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cba:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000cbe:	fb00 f808 	mul.w	r8, r0, r8
 8000cc2:	45b8      	cmp	r8, r7
 8000cc4:	d907      	bls.n	8000cd6 <__udivmoddi4+0x24a>
 8000cc6:	19e7      	adds	r7, r4, r7
 8000cc8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ccc:	d22e      	bcs.n	8000d2c <__udivmoddi4+0x2a0>
 8000cce:	45b8      	cmp	r8, r7
 8000cd0:	d92c      	bls.n	8000d2c <__udivmoddi4+0x2a0>
 8000cd2:	3802      	subs	r0, #2
 8000cd4:	4427      	add	r7, r4
 8000cd6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cda:	eba7 0708 	sub.w	r7, r7, r8
 8000cde:	fba0 8902 	umull	r8, r9, r0, r2
 8000ce2:	454f      	cmp	r7, r9
 8000ce4:	46c6      	mov	lr, r8
 8000ce6:	4649      	mov	r1, r9
 8000ce8:	d31a      	bcc.n	8000d20 <__udivmoddi4+0x294>
 8000cea:	d017      	beq.n	8000d1c <__udivmoddi4+0x290>
 8000cec:	b15d      	cbz	r5, 8000d06 <__udivmoddi4+0x27a>
 8000cee:	ebb3 020e 	subs.w	r2, r3, lr
 8000cf2:	eb67 0701 	sbc.w	r7, r7, r1
 8000cf6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000cfa:	40f2      	lsrs	r2, r6
 8000cfc:	ea4c 0202 	orr.w	r2, ip, r2
 8000d00:	40f7      	lsrs	r7, r6
 8000d02:	e9c5 2700 	strd	r2, r7, [r5]
 8000d06:	2600      	movs	r6, #0
 8000d08:	4631      	mov	r1, r6
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	462e      	mov	r6, r5
 8000d10:	4628      	mov	r0, r5
 8000d12:	e70b      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000d14:	4606      	mov	r6, r0
 8000d16:	e6e9      	b.n	8000aec <__udivmoddi4+0x60>
 8000d18:	4618      	mov	r0, r3
 8000d1a:	e6fd      	b.n	8000b18 <__udivmoddi4+0x8c>
 8000d1c:	4543      	cmp	r3, r8
 8000d1e:	d2e5      	bcs.n	8000cec <__udivmoddi4+0x260>
 8000d20:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d24:	eb69 0104 	sbc.w	r1, r9, r4
 8000d28:	3801      	subs	r0, #1
 8000d2a:	e7df      	b.n	8000cec <__udivmoddi4+0x260>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	e7d2      	b.n	8000cd6 <__udivmoddi4+0x24a>
 8000d30:	4660      	mov	r0, ip
 8000d32:	e78d      	b.n	8000c50 <__udivmoddi4+0x1c4>
 8000d34:	4681      	mov	r9, r0
 8000d36:	e7b9      	b.n	8000cac <__udivmoddi4+0x220>
 8000d38:	4666      	mov	r6, ip
 8000d3a:	e775      	b.n	8000c28 <__udivmoddi4+0x19c>
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	e74a      	b.n	8000bd6 <__udivmoddi4+0x14a>
 8000d40:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d44:	4439      	add	r1, r7
 8000d46:	e713      	b.n	8000b70 <__udivmoddi4+0xe4>
 8000d48:	3802      	subs	r0, #2
 8000d4a:	443c      	add	r4, r7
 8000d4c:	e724      	b.n	8000b98 <__udivmoddi4+0x10c>
 8000d4e:	bf00      	nop

08000d50 <__aeabi_idiv0>:
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop

08000d54 <write_register>:

//(1): Functions definitions
//-------------- Static Functions ---------------//
// Function(1): Write to register
static void write_register(uint8_t reg, uint8_t *data)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af02      	add	r7, sp, #8
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	6039      	str	r1, [r7, #0]
 8000d5e:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 8000d60:	4a09      	ldr	r2, [pc, #36]	; (8000d88 <write_register+0x34>)
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	7013      	strb	r3, [r2, #0]
	iData[1] = data[0];
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	781a      	ldrb	r2, [r3, #0]
 8000d6a:	4b07      	ldr	r3, [pc, #28]	; (8000d88 <write_register+0x34>)
 8000d6c:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100);
 8000d6e:	2364      	movs	r3, #100	; 0x64
 8000d70:	9300      	str	r3, [sp, #0]
 8000d72:	2302      	movs	r3, #2
 8000d74:	4a04      	ldr	r2, [pc, #16]	; (8000d88 <write_register+0x34>)
 8000d76:	2194      	movs	r1, #148	; 0x94
 8000d78:	4804      	ldr	r0, [pc, #16]	; (8000d8c <write_register+0x38>)
 8000d7a:	f004 ffd1 	bl	8005d20 <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, data, size, 100);
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000350 	.word	0x20000350
 8000d8c:	20000354 	.word	0x20000354

08000d90 <read_register>:
// Function(2): Read from register
static void read_register(uint8_t reg, uint8_t *data)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af02      	add	r7, sp, #8
 8000d96:	4603      	mov	r3, r0
 8000d98:	6039      	str	r1, [r7, #0]
 8000d9a:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 8000d9c:	4a0b      	ldr	r2, [pc, #44]	; (8000dcc <read_register+0x3c>)
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100);
 8000da2:	2364      	movs	r3, #100	; 0x64
 8000da4:	9300      	str	r3, [sp, #0]
 8000da6:	2301      	movs	r3, #1
 8000da8:	4a08      	ldr	r2, [pc, #32]	; (8000dcc <read_register+0x3c>)
 8000daa:	2194      	movs	r1, #148	; 0x94
 8000dac:	4808      	ldr	r0, [pc, #32]	; (8000dd0 <read_register+0x40>)
 8000dae:	f004 ffb7 	bl	8005d20 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100);
 8000db2:	2364      	movs	r3, #100	; 0x64
 8000db4:	9300      	str	r3, [sp, #0]
 8000db6:	2301      	movs	r3, #1
 8000db8:	683a      	ldr	r2, [r7, #0]
 8000dba:	2194      	movs	r1, #148	; 0x94
 8000dbc:	4804      	ldr	r0, [pc, #16]	; (8000dd0 <read_register+0x40>)
 8000dbe:	f005 f8ad 	bl	8005f1c <HAL_I2C_Master_Receive>
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000350 	.word	0x20000350
 8000dd0:	20000354 	.word	0x20000354

08000dd4 <CS43_Init>:

//-------------- Public Functions ----------------//
// Function(1): Initialisation
void CS43_Init(I2C_HandleTypeDef i2c_handle, CS43_MODE outputMode)
{
 8000dd4:	b084      	sub	sp, #16
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	f107 0c08 	add.w	ip, r7, #8
 8000dde:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000de2:	4b81      	ldr	r3, [pc, #516]	; (8000fe8 <CS43_Init+0x214>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000dea:	4b7f      	ldr	r3, [pc, #508]	; (8000fe8 <CS43_Init+0x214>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	69da      	ldr	r2, [r3, #28]
 8000df0:	4b7d      	ldr	r3, [pc, #500]	; (8000fe8 <CS43_Init+0x214>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000df8:	61da      	str	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	2110      	movs	r1, #16
 8000dfe:	487b      	ldr	r0, [pc, #492]	; (8000fec <CS43_Init+0x218>)
 8000e00:	f003 f8c0 	bl	8003f84 <HAL_GPIO_WritePin>
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 8000e04:	4b7a      	ldr	r3, [pc, #488]	; (8000ff0 <CS43_Init+0x21c>)
 8000e06:	4618      	mov	r0, r3
 8000e08:	f107 0308 	add.w	r3, r7, #8
 8000e0c:	2254      	movs	r2, #84	; 0x54
 8000e0e:	4619      	mov	r1, r3
 8000e10:	f00c f814 	bl	800ce3c <memcpy>
	//(2): Power down
	iData[1] = 0x01;
 8000e14:	4b77      	ldr	r3, [pc, #476]	; (8000ff4 <CS43_Init+0x220>)
 8000e16:	2201      	movs	r2, #1
 8000e18:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,iData);
 8000e1a:	4976      	ldr	r1, [pc, #472]	; (8000ff4 <CS43_Init+0x220>)
 8000e1c:	2002      	movs	r0, #2
 8000e1e:	f7ff ff99 	bl	8000d54 <write_register>
	//(3): Enable Right and Left headphones
	iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000e22:	4b74      	ldr	r3, [pc, #464]	; (8000ff4 <CS43_Init+0x220>)
 8000e24:	2280      	movs	r2, #128	; 0x80
 8000e26:	705a      	strb	r2, [r3, #1]
	iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000e28:	4b72      	ldr	r3, [pc, #456]	; (8000ff4 <CS43_Init+0x220>)
 8000e2a:	785b      	ldrb	r3, [r3, #1]
 8000e2c:	f043 0320 	orr.w	r3, r3, #32
 8000e30:	b2da      	uxtb	r2, r3
 8000e32:	4b70      	ldr	r3, [pc, #448]	; (8000ff4 <CS43_Init+0x220>)
 8000e34:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 8000e36:	4b6f      	ldr	r3, [pc, #444]	; (8000ff4 <CS43_Init+0x220>)
 8000e38:	785b      	ldrb	r3, [r3, #1]
 8000e3a:	f043 030c 	orr.w	r3, r3, #12
 8000e3e:	b2da      	uxtb	r2, r3
 8000e40:	4b6c      	ldr	r3, [pc, #432]	; (8000ff4 <CS43_Init+0x220>)
 8000e42:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 8000e44:	4b6b      	ldr	r3, [pc, #428]	; (8000ff4 <CS43_Init+0x220>)
 8000e46:	785b      	ldrb	r3, [r3, #1]
 8000e48:	f043 0303 	orr.w	r3, r3, #3
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	4b69      	ldr	r3, [pc, #420]	; (8000ff4 <CS43_Init+0x220>)
 8000e50:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 8000e52:	4969      	ldr	r1, [pc, #420]	; (8000ff8 <CS43_Init+0x224>)
 8000e54:	2004      	movs	r0, #4
 8000e56:	f7ff ff7d 	bl	8000d54 <write_register>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
 8000e5a:	4b66      	ldr	r3, [pc, #408]	; (8000ff4 <CS43_Init+0x220>)
 8000e5c:	2280      	movs	r2, #128	; 0x80
 8000e5e:	705a      	strb	r2, [r3, #1]
	write_register(CLOCKING_CONTROL,&iData[1]);
 8000e60:	4965      	ldr	r1, [pc, #404]	; (8000ff8 <CS43_Init+0x224>)
 8000e62:	2005      	movs	r0, #5
 8000e64:	f7ff ff76 	bl	8000d54 <write_register>
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
 8000e68:	4962      	ldr	r1, [pc, #392]	; (8000ff4 <CS43_Init+0x220>)
 8000e6a:	2006      	movs	r0, #6
 8000e6c:	f7ff ff90 	bl	8000d90 <read_register>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 8000e70:	4b60      	ldr	r3, [pc, #384]	; (8000ff4 <CS43_Init+0x220>)
 8000e72:	785b      	ldrb	r3, [r3, #1]
 8000e74:	f003 0320 	and.w	r3, r3, #32
 8000e78:	b2da      	uxtb	r2, r3
 8000e7a:	4b5e      	ldr	r3, [pc, #376]	; (8000ff4 <CS43_Init+0x220>)
 8000e7c:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 7);  // Slave
 8000e7e:	4b5d      	ldr	r3, [pc, #372]	; (8000ff4 <CS43_Init+0x220>)
 8000e80:	785b      	ldrb	r3, [r3, #1]
 8000e82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e86:	b2da      	uxtb	r2, r3
 8000e88:	4b5a      	ldr	r3, [pc, #360]	; (8000ff4 <CS43_Init+0x220>)
 8000e8a:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
 8000e8c:	4b59      	ldr	r3, [pc, #356]	; (8000ff4 <CS43_Init+0x220>)
 8000e8e:	785b      	ldrb	r3, [r3, #1]
 8000e90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000e94:	b2da      	uxtb	r2, r3
 8000e96:	4b57      	ldr	r3, [pc, #348]	; (8000ff4 <CS43_Init+0x220>)
 8000e98:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 4);  // No DSP mode
 8000e9a:	4b56      	ldr	r3, [pc, #344]	; (8000ff4 <CS43_Init+0x220>)
 8000e9c:	785b      	ldrb	r3, [r3, #1]
 8000e9e:	f023 0310 	bic.w	r3, r3, #16
 8000ea2:	b2da      	uxtb	r2, r3
 8000ea4:	4b53      	ldr	r3, [pc, #332]	; (8000ff4 <CS43_Init+0x220>)
 8000ea6:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
 8000ea8:	4b52      	ldr	r3, [pc, #328]	; (8000ff4 <CS43_Init+0x220>)
 8000eaa:	785b      	ldrb	r3, [r3, #1]
 8000eac:	f023 0304 	bic.w	r3, r3, #4
 8000eb0:	b2da      	uxtb	r2, r3
 8000eb2:	4b50      	ldr	r3, [pc, #320]	; (8000ff4 <CS43_Init+0x220>)
 8000eb4:	705a      	strb	r2, [r3, #1]
	iData[1] |= (1 << 2);
 8000eb6:	4b4f      	ldr	r3, [pc, #316]	; (8000ff4 <CS43_Init+0x220>)
 8000eb8:	785b      	ldrb	r3, [r3, #1]
 8000eba:	f043 0304 	orr.w	r3, r3, #4
 8000ebe:	b2da      	uxtb	r2, r3
 8000ec0:	4b4c      	ldr	r3, [pc, #304]	; (8000ff4 <CS43_Init+0x220>)
 8000ec2:	705a      	strb	r2, [r3, #1]

	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 8000ec4:	4b4b      	ldr	r3, [pc, #300]	; (8000ff4 <CS43_Init+0x220>)
 8000ec6:	785b      	ldrb	r3, [r3, #1]
 8000ec8:	f043 0303 	orr.w	r3, r3, #3
 8000ecc:	b2da      	uxtb	r2, r3
 8000ece:	4b49      	ldr	r3, [pc, #292]	; (8000ff4 <CS43_Init+0x220>)
 8000ed0:	705a      	strb	r2, [r3, #1]
	write_register(INTERFACE_CONTROL1,&iData[1]);
 8000ed2:	4949      	ldr	r1, [pc, #292]	; (8000ff8 <CS43_Init+0x224>)
 8000ed4:	2006      	movs	r0, #6
 8000ed6:	f7ff ff3d 	bl	8000d54 <write_register>
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
 8000eda:	4947      	ldr	r1, [pc, #284]	; (8000ff8 <CS43_Init+0x224>)
 8000edc:	2008      	movs	r0, #8
 8000ede:	f7ff ff57 	bl	8000d90 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8000ee2:	4b44      	ldr	r3, [pc, #272]	; (8000ff4 <CS43_Init+0x220>)
 8000ee4:	785b      	ldrb	r3, [r3, #1]
 8000ee6:	f023 030f 	bic.w	r3, r3, #15
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	4b41      	ldr	r3, [pc, #260]	; (8000ff4 <CS43_Init+0x220>)
 8000eee:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 8000ef0:	4b40      	ldr	r3, [pc, #256]	; (8000ff4 <CS43_Init+0x220>)
 8000ef2:	785b      	ldrb	r3, [r3, #1]
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	4b3e      	ldr	r3, [pc, #248]	; (8000ff4 <CS43_Init+0x220>)
 8000efc:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_A,&iData[1]);
 8000efe:	493e      	ldr	r1, [pc, #248]	; (8000ff8 <CS43_Init+0x224>)
 8000f00:	2008      	movs	r0, #8
 8000f02:	f7ff ff27 	bl	8000d54 <write_register>
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
 8000f06:	493c      	ldr	r1, [pc, #240]	; (8000ff8 <CS43_Init+0x224>)
 8000f08:	2009      	movs	r0, #9
 8000f0a:	f7ff ff41 	bl	8000d90 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8000f0e:	4b39      	ldr	r3, [pc, #228]	; (8000ff4 <CS43_Init+0x220>)
 8000f10:	785b      	ldrb	r3, [r3, #1]
 8000f12:	f023 030f 	bic.w	r3, r3, #15
 8000f16:	b2da      	uxtb	r2, r3
 8000f18:	4b36      	ldr	r3, [pc, #216]	; (8000ff4 <CS43_Init+0x220>)
 8000f1a:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 8000f1c:	4b35      	ldr	r3, [pc, #212]	; (8000ff4 <CS43_Init+0x220>)
 8000f1e:	785b      	ldrb	r3, [r3, #1]
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	4b33      	ldr	r3, [pc, #204]	; (8000ff4 <CS43_Init+0x220>)
 8000f28:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_B,&iData[1]);
 8000f2a:	4933      	ldr	r1, [pc, #204]	; (8000ff8 <CS43_Init+0x224>)
 8000f2c:	2009      	movs	r0, #9
 8000f2e:	f7ff ff11 	bl	8000d54 <write_register>
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
 8000f32:	4931      	ldr	r1, [pc, #196]	; (8000ff8 <CS43_Init+0x224>)
 8000f34:	200e      	movs	r0, #14
 8000f36:	f7ff ff2b 	bl	8000d90 <read_register>
	if(outputMode == MODE_ANAL)
 8000f3a:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d123      	bne.n	8000f8a <CS43_Init+0x1b6>
	{
		iData[1] |=  (1 << 7);   // Enable passthrough for AIN-A
 8000f42:	4b2c      	ldr	r3, [pc, #176]	; (8000ff4 <CS43_Init+0x220>)
 8000f44:	785b      	ldrb	r3, [r3, #1]
 8000f46:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f4a:	b2da      	uxtb	r2, r3
 8000f4c:	4b29      	ldr	r3, [pc, #164]	; (8000ff4 <CS43_Init+0x220>)
 8000f4e:	705a      	strb	r2, [r3, #1]
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
 8000f50:	4b28      	ldr	r3, [pc, #160]	; (8000ff4 <CS43_Init+0x220>)
 8000f52:	785b      	ldrb	r3, [r3, #1]
 8000f54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f58:	b2da      	uxtb	r2, r3
 8000f5a:	4b26      	ldr	r3, [pc, #152]	; (8000ff4 <CS43_Init+0x220>)
 8000f5c:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
 8000f5e:	4b25      	ldr	r3, [pc, #148]	; (8000ff4 <CS43_Init+0x220>)
 8000f60:	785b      	ldrb	r3, [r3, #1]
 8000f62:	f023 0320 	bic.w	r3, r3, #32
 8000f66:	b2da      	uxtb	r2, r3
 8000f68:	4b22      	ldr	r3, [pc, #136]	; (8000ff4 <CS43_Init+0x220>)
 8000f6a:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
 8000f6c:	4b21      	ldr	r3, [pc, #132]	; (8000ff4 <CS43_Init+0x220>)
 8000f6e:	785b      	ldrb	r3, [r3, #1]
 8000f70:	f023 0310 	bic.w	r3, r3, #16
 8000f74:	b2da      	uxtb	r2, r3
 8000f76:	4b1f      	ldr	r3, [pc, #124]	; (8000ff4 <CS43_Init+0x220>)
 8000f78:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 8000f7a:	4b1e      	ldr	r3, [pc, #120]	; (8000ff4 <CS43_Init+0x220>)
 8000f7c:	785b      	ldrb	r3, [r3, #1]
 8000f7e:	f023 0308 	bic.w	r3, r3, #8
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	4b1b      	ldr	r3, [pc, #108]	; (8000ff4 <CS43_Init+0x220>)
 8000f86:	705a      	strb	r2, [r3, #1]
 8000f88:	e006      	b.n	8000f98 <CS43_Init+0x1c4>
	}
	else if(outputMode == MODE_I2S)
 8000f8a:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d102      	bne.n	8000f98 <CS43_Init+0x1c4>
	{
		iData[1] = 0x02;
 8000f92:	4b18      	ldr	r3, [pc, #96]	; (8000ff4 <CS43_Init+0x220>)
 8000f94:	2202      	movs	r2, #2
 8000f96:	705a      	strb	r2, [r3, #1]
	}
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 8000f98:	4917      	ldr	r1, [pc, #92]	; (8000ff8 <CS43_Init+0x224>)
 8000f9a:	200e      	movs	r0, #14
 8000f9c:	f7ff feda 	bl	8000d54 <write_register>
	//(9): Unmute headphone and speaker
	read_register(PLAYBACK_CONTROL, &iData[1]);
 8000fa0:	4915      	ldr	r1, [pc, #84]	; (8000ff8 <CS43_Init+0x224>)
 8000fa2:	200f      	movs	r0, #15
 8000fa4:	f7ff fef4 	bl	8000d90 <read_register>
	iData[1] = 0x00;
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <CS43_Init+0x220>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	705a      	strb	r2, [r3, #1]
	write_register(PLAYBACK_CONTROL,&iData[1]);
 8000fae:	4912      	ldr	r1, [pc, #72]	; (8000ff8 <CS43_Init+0x224>)
 8000fb0:	200f      	movs	r0, #15
 8000fb2:	f7ff fecf 	bl	8000d54 <write_register>
	//(10): Set volume to default (0dB)
	iData[1] = 0x00;
 8000fb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <CS43_Init+0x220>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 8000fbc:	490e      	ldr	r1, [pc, #56]	; (8000ff8 <CS43_Init+0x224>)
 8000fbe:	2014      	movs	r0, #20
 8000fc0:	f7ff fec8 	bl	8000d54 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 8000fc4:	490c      	ldr	r1, [pc, #48]	; (8000ff8 <CS43_Init+0x224>)
 8000fc6:	2015      	movs	r0, #21
 8000fc8:	f7ff fec4 	bl	8000d54 <write_register>
	write_register(PCM_VOLUME_A,&iData[1]);
 8000fcc:	490a      	ldr	r1, [pc, #40]	; (8000ff8 <CS43_Init+0x224>)
 8000fce:	201a      	movs	r0, #26
 8000fd0:	f7ff fec0 	bl	8000d54 <write_register>
	write_register(PCM_VOLUME_B,&iData[1]);
 8000fd4:	4908      	ldr	r1, [pc, #32]	; (8000ff8 <CS43_Init+0x224>)
 8000fd6:	201b      	movs	r0, #27
 8000fd8:	f7ff febc 	bl	8000d54 <write_register>
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000fe4:	b004      	add	sp, #16
 8000fe6:	4770      	bx	lr
 8000fe8:	20002eec 	.word	0x20002eec
 8000fec:	40020c00 	.word	0x40020c00
 8000ff0:	20000354 	.word	0x20000354
 8000ff4:	20000350 	.word	0x20000350
 8000ff8:	20000351 	.word	0x20000351

08000ffc <CS43_Enable_RightLeft>:

// Function(2): Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
	switch (side)
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	2b03      	cmp	r3, #3
 800100a:	d837      	bhi.n	800107c <CS43_Enable_RightLeft+0x80>
 800100c:	a201      	add	r2, pc, #4	; (adr r2, 8001014 <CS43_Enable_RightLeft+0x18>)
 800100e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001012:	bf00      	nop
 8001014:	08001025 	.word	0x08001025
 8001018:	0800103b 	.word	0x0800103b
 800101c:	08001051 	.word	0x08001051
 8001020:	08001067 	.word	0x08001067
	{
		case 0:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8001024:	4b21      	ldr	r3, [pc, #132]	; (80010ac <CS43_Enable_RightLeft+0xb0>)
 8001026:	22c0      	movs	r2, #192	; 0xc0
 8001028:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 800102a:	4b20      	ldr	r3, [pc, #128]	; (80010ac <CS43_Enable_RightLeft+0xb0>)
 800102c:	785b      	ldrb	r3, [r3, #1]
 800102e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001032:	b2da      	uxtb	r2, r3
 8001034:	4b1d      	ldr	r3, [pc, #116]	; (80010ac <CS43_Enable_RightLeft+0xb0>)
 8001036:	705a      	strb	r2, [r3, #1]
			break;
 8001038:	e021      	b.n	800107e <CS43_Enable_RightLeft+0x82>
		case 1:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 800103a:	4b1c      	ldr	r3, [pc, #112]	; (80010ac <CS43_Enable_RightLeft+0xb0>)
 800103c:	2280      	movs	r2, #128	; 0x80
 800103e:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8001040:	4b1a      	ldr	r3, [pc, #104]	; (80010ac <CS43_Enable_RightLeft+0xb0>)
 8001042:	785b      	ldrb	r3, [r3, #1]
 8001044:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001048:	b2da      	uxtb	r2, r3
 800104a:	4b18      	ldr	r3, [pc, #96]	; (80010ac <CS43_Enable_RightLeft+0xb0>)
 800104c:	705a      	strb	r2, [r3, #1]
			break;
 800104e:	e016      	b.n	800107e <CS43_Enable_RightLeft+0x82>
		case 2:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8001050:	4b16      	ldr	r3, [pc, #88]	; (80010ac <CS43_Enable_RightLeft+0xb0>)
 8001052:	22c0      	movs	r2, #192	; 0xc0
 8001054:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8001056:	4b15      	ldr	r3, [pc, #84]	; (80010ac <CS43_Enable_RightLeft+0xb0>)
 8001058:	785b      	ldrb	r3, [r3, #1]
 800105a:	f043 0320 	orr.w	r3, r3, #32
 800105e:	b2da      	uxtb	r2, r3
 8001060:	4b12      	ldr	r3, [pc, #72]	; (80010ac <CS43_Enable_RightLeft+0xb0>)
 8001062:	705a      	strb	r2, [r3, #1]
			break;
 8001064:	e00b      	b.n	800107e <CS43_Enable_RightLeft+0x82>
		case 3:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8001066:	4b11      	ldr	r3, [pc, #68]	; (80010ac <CS43_Enable_RightLeft+0xb0>)
 8001068:	2280      	movs	r2, #128	; 0x80
 800106a:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 800106c:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <CS43_Enable_RightLeft+0xb0>)
 800106e:	785b      	ldrb	r3, [r3, #1]
 8001070:	f043 0320 	orr.w	r3, r3, #32
 8001074:	b2da      	uxtb	r2, r3
 8001076:	4b0d      	ldr	r3, [pc, #52]	; (80010ac <CS43_Enable_RightLeft+0xb0>)
 8001078:	705a      	strb	r2, [r3, #1]
			break;
 800107a:	e000      	b.n	800107e <CS43_Enable_RightLeft+0x82>
		default:
			break;
 800107c:	bf00      	nop
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 800107e:	4b0b      	ldr	r3, [pc, #44]	; (80010ac <CS43_Enable_RightLeft+0xb0>)
 8001080:	785b      	ldrb	r3, [r3, #1]
 8001082:	f043 030c 	orr.w	r3, r3, #12
 8001086:	b2da      	uxtb	r2, r3
 8001088:	4b08      	ldr	r3, [pc, #32]	; (80010ac <CS43_Enable_RightLeft+0xb0>)
 800108a:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 800108c:	4b07      	ldr	r3, [pc, #28]	; (80010ac <CS43_Enable_RightLeft+0xb0>)
 800108e:	785b      	ldrb	r3, [r3, #1]
 8001090:	f043 0303 	orr.w	r3, r3, #3
 8001094:	b2da      	uxtb	r2, r3
 8001096:	4b05      	ldr	r3, [pc, #20]	; (80010ac <CS43_Enable_RightLeft+0xb0>)
 8001098:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 800109a:	4905      	ldr	r1, [pc, #20]	; (80010b0 <CS43_Enable_RightLeft+0xb4>)
 800109c:	2004      	movs	r0, #4
 800109e:	f7ff fe59 	bl	8000d54 <write_register>
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000350 	.word	0x20000350
 80010b0:	20000351 	.word	0x20000351

080010b4 <CS43_SetVolume>:

// Function(3): Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
	int8_t tempVol = volume - 50;
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	3b32      	subs	r3, #50	; 0x32
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	73fb      	strb	r3, [r7, #15]
	tempVol = tempVol*(127/50);
 80010c6:	7bfb      	ldrb	r3, [r7, #15]
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	73fb      	strb	r3, [r7, #15]
	uint8_t myVolume =  (uint8_t )tempVol;
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
 80010d0:	73bb      	strb	r3, [r7, #14]
	iData[1] = myVolume;
 80010d2:	4a16      	ldr	r2, [pc, #88]	; (800112c <CS43_SetVolume+0x78>)
 80010d4:	7bbb      	ldrb	r3, [r7, #14]
 80010d6:	7053      	strb	r3, [r2, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 80010d8:	4915      	ldr	r1, [pc, #84]	; (8001130 <CS43_SetVolume+0x7c>)
 80010da:	2014      	movs	r0, #20
 80010dc:	f7ff fe3a 	bl	8000d54 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 80010e0:	4913      	ldr	r1, [pc, #76]	; (8001130 <CS43_SetVolume+0x7c>)
 80010e2:	2015      	movs	r0, #21
 80010e4:	f7ff fe36 	bl	8000d54 <write_register>

	iData[1] = VOLUME_CONVERT_D(volume);
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	2b64      	cmp	r3, #100	; 0x64
 80010ec:	d80e      	bhi.n	800110c <CS43_SetVolume+0x58>
 80010ee:	79fa      	ldrb	r2, [r7, #7]
 80010f0:	4613      	mov	r3, r2
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	4413      	add	r3, r2
 80010f6:	011b      	lsls	r3, r3, #4
 80010f8:	4a0e      	ldr	r2, [pc, #56]	; (8001134 <CS43_SetVolume+0x80>)
 80010fa:	fb82 1203 	smull	r1, r2, r2, r3
 80010fe:	1152      	asrs	r2, r2, #5
 8001100:	17db      	asrs	r3, r3, #31
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	b2db      	uxtb	r3, r3
 8001106:	3b18      	subs	r3, #24
 8001108:	b2db      	uxtb	r3, r3
 800110a:	e000      	b.n	800110e <CS43_SetVolume+0x5a>
 800110c:	2318      	movs	r3, #24
 800110e:	4a07      	ldr	r2, [pc, #28]	; (800112c <CS43_SetVolume+0x78>)
 8001110:	7053      	strb	r3, [r2, #1]

	/* Set the Master volume */
	write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
 8001112:	4907      	ldr	r1, [pc, #28]	; (8001130 <CS43_SetVolume+0x7c>)
 8001114:	2020      	movs	r0, #32
 8001116:	f7ff fe1d 	bl	8000d54 <write_register>
	write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
 800111a:	4905      	ldr	r1, [pc, #20]	; (8001130 <CS43_SetVolume+0x7c>)
 800111c:	2021      	movs	r0, #33	; 0x21
 800111e:	f7ff fe19 	bl	8000d54 <write_register>
}
 8001122:	bf00      	nop
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000350 	.word	0x20000350
 8001130:	20000351 	.word	0x20000351
 8001134:	51eb851f 	.word	0x51eb851f

08001138 <CS43_Start>:

// Function(4): Start the Audio DAC
void CS43_Start(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
	// Write 0x99 to register 0x00.
	iData[1] = 0x99;
 800113c:	4b1d      	ldr	r3, [pc, #116]	; (80011b4 <CS43_Start+0x7c>)
 800113e:	2299      	movs	r2, #153	; 0x99
 8001140:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 8001142:	491d      	ldr	r1, [pc, #116]	; (80011b8 <CS43_Start+0x80>)
 8001144:	2000      	movs	r0, #0
 8001146:	f7ff fe05 	bl	8000d54 <write_register>
	// Write 0x80 to register 0x47.
	iData[1] = 0x80;
 800114a:	4b1a      	ldr	r3, [pc, #104]	; (80011b4 <CS43_Start+0x7c>)
 800114c:	2280      	movs	r2, #128	; 0x80
 800114e:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_47,&iData[1]);
 8001150:	4919      	ldr	r1, [pc, #100]	; (80011b8 <CS43_Start+0x80>)
 8001152:	2047      	movs	r0, #71	; 0x47
 8001154:	f7ff fdfe 	bl	8000d54 <write_register>
	// Write '1'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 8001158:	4917      	ldr	r1, [pc, #92]	; (80011b8 <CS43_Start+0x80>)
 800115a:	2032      	movs	r0, #50	; 0x32
 800115c:	f7ff fe18 	bl	8000d90 <read_register>
	iData[1] |= 0x80;
 8001160:	4b14      	ldr	r3, [pc, #80]	; (80011b4 <CS43_Start+0x7c>)
 8001162:	785b      	ldrb	r3, [r3, #1]
 8001164:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001168:	b2da      	uxtb	r2, r3
 800116a:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <CS43_Start+0x7c>)
 800116c:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 800116e:	4912      	ldr	r1, [pc, #72]	; (80011b8 <CS43_Start+0x80>)
 8001170:	2032      	movs	r0, #50	; 0x32
 8001172:	f7ff fdef 	bl	8000d54 <write_register>
	// Write '0'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 8001176:	4910      	ldr	r1, [pc, #64]	; (80011b8 <CS43_Start+0x80>)
 8001178:	2032      	movs	r0, #50	; 0x32
 800117a:	f7ff fe09 	bl	8000d90 <read_register>
	iData[1] &= ~(0x80);
 800117e:	4b0d      	ldr	r3, [pc, #52]	; (80011b4 <CS43_Start+0x7c>)
 8001180:	785b      	ldrb	r3, [r3, #1]
 8001182:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001186:	b2da      	uxtb	r2, r3
 8001188:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <CS43_Start+0x7c>)
 800118a:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 800118c:	490a      	ldr	r1, [pc, #40]	; (80011b8 <CS43_Start+0x80>)
 800118e:	2032      	movs	r0, #50	; 0x32
 8001190:	f7ff fde0 	bl	8000d54 <write_register>
	// Write 0x00 to register 0x00.
	iData[1] = 0x00;
 8001194:	4b07      	ldr	r3, [pc, #28]	; (80011b4 <CS43_Start+0x7c>)
 8001196:	2200      	movs	r2, #0
 8001198:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 800119a:	4907      	ldr	r1, [pc, #28]	; (80011b8 <CS43_Start+0x80>)
 800119c:	2000      	movs	r0, #0
 800119e:	f7ff fdd9 	bl	8000d54 <write_register>
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	iData[1] = 0x9E;
 80011a2:	4b04      	ldr	r3, [pc, #16]	; (80011b4 <CS43_Start+0x7c>)
 80011a4:	229e      	movs	r2, #158	; 0x9e
 80011a6:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,&iData[1]);
 80011a8:	4903      	ldr	r1, [pc, #12]	; (80011b8 <CS43_Start+0x80>)
 80011aa:	2002      	movs	r0, #2
 80011ac:	f7ff fdd2 	bl	8000d54 <write_register>
}
 80011b0:	bf00      	nop
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20000350 	.word	0x20000350
 80011b8:	20000351 	.word	0x20000351

080011bc <_EPD_Reset>:

uint8_t WS_20_30[159] = { 0x80,0x66,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x10,0x66,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x0,0x80,0x66,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x10,0x66,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x14,0x8,0x0,0x0,0x0,0x0,0x1,0xA,0xA,0x0,0xA,0xA,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x14,0x8,0x0,0x1,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x44,0x44,0x44,0x44,0x44,0x44,0x0,0x0,0x0,0x22,0x17,0x41,0x0,0x32,0x36 };

extern SPI_HandleTypeDef hspi1;

static void _EPD_Reset(void) {
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, GPIO_PIN_SET);
 80011c0:	2201      	movs	r2, #1
 80011c2:	2102      	movs	r1, #2
 80011c4:	480b      	ldr	r0, [pc, #44]	; (80011f4 <_EPD_Reset+0x38>)
 80011c6:	f002 fedd 	bl	8003f84 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80011ca:	2064      	movs	r0, #100	; 0x64
 80011cc:	f002 f880 	bl	80032d0 <HAL_Delay>
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, GPIO_PIN_RESET);
 80011d0:	2200      	movs	r2, #0
 80011d2:	2102      	movs	r1, #2
 80011d4:	4807      	ldr	r0, [pc, #28]	; (80011f4 <_EPD_Reset+0x38>)
 80011d6:	f002 fed5 	bl	8003f84 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 80011da:	2002      	movs	r0, #2
 80011dc:	f002 f878 	bl	80032d0 <HAL_Delay>
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, GPIO_PIN_SET);
 80011e0:	2201      	movs	r2, #1
 80011e2:	2102      	movs	r1, #2
 80011e4:	4803      	ldr	r0, [pc, #12]	; (80011f4 <_EPD_Reset+0x38>)
 80011e6:	f002 fecd 	bl	8003f84 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80011ea:	2064      	movs	r0, #100	; 0x64
 80011ec:	f002 f870 	bl	80032d0 <HAL_Delay>
}
 80011f0:	bf00      	nop
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40020000 	.word	0x40020000

080011f8 <_EPD_SendCommand>:

static void _EPD_SendCommand(uint8_t reg) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(EPD_DC_GPIO_Port, EPD_DC_Pin, GPIO_PIN_RESET);
 8001202:	2200      	movs	r2, #0
 8001204:	2104      	movs	r1, #4
 8001206:	480c      	ldr	r0, [pc, #48]	; (8001238 <_EPD_SendCommand+0x40>)
 8001208:	f002 febc 	bl	8003f84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, GPIO_PIN_RESET);
 800120c:	2200      	movs	r2, #0
 800120e:	2140      	movs	r1, #64	; 0x40
 8001210:	4809      	ldr	r0, [pc, #36]	; (8001238 <_EPD_SendCommand+0x40>)
 8001212:	f002 feb7 	bl	8003f84 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg, 1, 1000);
 8001216:	1df9      	adds	r1, r7, #7
 8001218:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800121c:	2201      	movs	r2, #1
 800121e:	4807      	ldr	r0, [pc, #28]	; (800123c <_EPD_SendCommand+0x44>)
 8001220:	f007 f879 	bl	8008316 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, GPIO_PIN_SET);
 8001224:	2201      	movs	r2, #1
 8001226:	2140      	movs	r1, #64	; 0x40
 8001228:	4803      	ldr	r0, [pc, #12]	; (8001238 <_EPD_SendCommand+0x40>)
 800122a:	f002 feab 	bl	8003f84 <HAL_GPIO_WritePin>
}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40020000 	.word	0x40020000
 800123c:	20002e28 	.word	0x20002e28

08001240 <_EPD_SendData>:

static void _EPD_SendData(uint8_t data) {
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(EPD_DC_GPIO_Port, EPD_DC_Pin, GPIO_PIN_SET);
 800124a:	2201      	movs	r2, #1
 800124c:	2104      	movs	r1, #4
 800124e:	480c      	ldr	r0, [pc, #48]	; (8001280 <_EPD_SendData+0x40>)
 8001250:	f002 fe98 	bl	8003f84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, GPIO_PIN_RESET);
 8001254:	2200      	movs	r2, #0
 8001256:	2140      	movs	r1, #64	; 0x40
 8001258:	4809      	ldr	r0, [pc, #36]	; (8001280 <_EPD_SendData+0x40>)
 800125a:	f002 fe93 	bl	8003f84 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 800125e:	1df9      	adds	r1, r7, #7
 8001260:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001264:	2201      	movs	r2, #1
 8001266:	4807      	ldr	r0, [pc, #28]	; (8001284 <_EPD_SendData+0x44>)
 8001268:	f007 f855 	bl	8008316 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, GPIO_PIN_SET);
 800126c:	2201      	movs	r2, #1
 800126e:	2140      	movs	r1, #64	; 0x40
 8001270:	4803      	ldr	r0, [pc, #12]	; (8001280 <_EPD_SendData+0x40>)
 8001272:	f002 fe87 	bl	8003f84 <HAL_GPIO_WritePin>
}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40020000 	.word	0x40020000
 8001284:	20002e28 	.word	0x20002e28

08001288 <_EPD_ReadBusy>:

void _EPD_ReadBusy(void) {
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
	while(1) {
		if(HAL_GPIO_ReadPin(EPD_BUSY_GPIO_Port, EPD_BUSY_Pin) == GPIO_PIN_RESET)
 800128c:	2108      	movs	r1, #8
 800128e:	4806      	ldr	r0, [pc, #24]	; (80012a8 <_EPD_ReadBusy+0x20>)
 8001290:	f002 fe60 	bl	8003f54 <HAL_GPIO_ReadPin>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <_EPD_ReadBusy+0x1a>
			break;
		HAL_Delay(5);
 800129a:	2005      	movs	r0, #5
 800129c:	f002 f818 	bl	80032d0 <HAL_Delay>
		if(HAL_GPIO_ReadPin(EPD_BUSY_GPIO_Port, EPD_BUSY_Pin) == GPIO_PIN_RESET)
 80012a0:	e7f4      	b.n	800128c <_EPD_ReadBusy+0x4>
			break;
 80012a2:	bf00      	nop
	}
}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40020000 	.word	0x40020000

080012ac <_EPD_LUT>:

static void _EPD_LUT(uint8_t *lut) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
	uint8_t count;
	_EPD_SendCommand(0x32);
 80012b4:	2032      	movs	r0, #50	; 0x32
 80012b6:	f7ff ff9f 	bl	80011f8 <_EPD_SendCommand>
	for(count=0; count<153; count++)
 80012ba:	2300      	movs	r3, #0
 80012bc:	73fb      	strb	r3, [r7, #15]
 80012be:	e009      	b.n	80012d4 <_EPD_LUT+0x28>
		_EPD_SendData(lut[count]);
 80012c0:	7bfb      	ldrb	r3, [r7, #15]
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	4413      	add	r3, r2
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff ffb9 	bl	8001240 <_EPD_SendData>
	for(count=0; count<153; count++)
 80012ce:	7bfb      	ldrb	r3, [r7, #15]
 80012d0:	3301      	adds	r3, #1
 80012d2:	73fb      	strb	r3, [r7, #15]
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
 80012d6:	2b98      	cmp	r3, #152	; 0x98
 80012d8:	d9f2      	bls.n	80012c0 <_EPD_LUT+0x14>
	_EPD_ReadBusy();
 80012da:	f7ff ffd5 	bl	8001288 <_EPD_ReadBusy>
}
 80012de:	bf00      	nop
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <_EPD_LUT_by_host>:

static void _EPD_LUT_by_host(uint8_t *lut) {
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b082      	sub	sp, #8
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
	_EPD_LUT((uint8_t *)lut);			//lut
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7ff ffdc 	bl	80012ac <_EPD_LUT>
	_EPD_SendCommand(0x3f);
 80012f4:	203f      	movs	r0, #63	; 0x3f
 80012f6:	f7ff ff7f 	bl	80011f8 <_EPD_SendCommand>
	_EPD_SendData(*(lut+153));
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	3399      	adds	r3, #153	; 0x99
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff ff9d 	bl	8001240 <_EPD_SendData>
	_EPD_SendCommand(0x03);	// gate voltage
 8001306:	2003      	movs	r0, #3
 8001308:	f7ff ff76 	bl	80011f8 <_EPD_SendCommand>
	_EPD_SendData(*(lut+154));
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	339a      	adds	r3, #154	; 0x9a
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff ff94 	bl	8001240 <_EPD_SendData>
	_EPD_SendCommand(0x04);	// source voltage
 8001318:	2004      	movs	r0, #4
 800131a:	f7ff ff6d 	bl	80011f8 <_EPD_SendCommand>
	_EPD_SendData(*(lut+155));	// VSH
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	339b      	adds	r3, #155	; 0x9b
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ff8b 	bl	8001240 <_EPD_SendData>
	_EPD_SendData(*(lut+156));	// VSH2
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	339c      	adds	r3, #156	; 0x9c
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff ff85 	bl	8001240 <_EPD_SendData>
	_EPD_SendData(*(lut+157));	// VSL
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	339d      	adds	r3, #157	; 0x9d
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff ff7f 	bl	8001240 <_EPD_SendData>
	_EPD_SendCommand(0x2c);		// VCOM
 8001342:	202c      	movs	r0, #44	; 0x2c
 8001344:	f7ff ff58 	bl	80011f8 <_EPD_SendCommand>
	_EPD_SendData(*(lut+158));
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	339e      	adds	r3, #158	; 0x9e
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff ff76 	bl	8001240 <_EPD_SendData>
}
 8001354:	bf00      	nop
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}

0800135c <_EPD_TurnOnDisplay>:

static void _EPD_TurnOnDisplay(void) {
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
	_EPD_SendCommand(0x22); //Display Update Control
 8001360:	2022      	movs	r0, #34	; 0x22
 8001362:	f7ff ff49 	bl	80011f8 <_EPD_SendCommand>
	_EPD_SendData(0xc7);
 8001366:	20c7      	movs	r0, #199	; 0xc7
 8001368:	f7ff ff6a 	bl	8001240 <_EPD_SendData>
	_EPD_SendCommand(0x20); //Activate Display Update Sequence
 800136c:	2020      	movs	r0, #32
 800136e:	f7ff ff43 	bl	80011f8 <_EPD_SendCommand>
	_EPD_ReadBusy();
 8001372:	f7ff ff89 	bl	8001288 <_EPD_ReadBusy>
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}

0800137a <_EPD_SetWindows>:
	_EPD_SendData(0x0F);
	_EPD_SendCommand(0x20); //Activate Display Update Sequence
	_EPD_ReadBusy();
}

static void _EPD_SetWindows(uint16_t Xstart, uint16_t Ystart, uint16_t Xend, uint16_t Yend) {
 800137a:	b590      	push	{r4, r7, lr}
 800137c:	b083      	sub	sp, #12
 800137e:	af00      	add	r7, sp, #0
 8001380:	4604      	mov	r4, r0
 8001382:	4608      	mov	r0, r1
 8001384:	4611      	mov	r1, r2
 8001386:	461a      	mov	r2, r3
 8001388:	4623      	mov	r3, r4
 800138a:	80fb      	strh	r3, [r7, #6]
 800138c:	4603      	mov	r3, r0
 800138e:	80bb      	strh	r3, [r7, #4]
 8001390:	460b      	mov	r3, r1
 8001392:	807b      	strh	r3, [r7, #2]
 8001394:	4613      	mov	r3, r2
 8001396:	803b      	strh	r3, [r7, #0]
	_EPD_SendCommand(0x44); // SET_RAM_X_ADDRESS_START_END_POSITION
 8001398:	2044      	movs	r0, #68	; 0x44
 800139a:	f7ff ff2d 	bl	80011f8 <_EPD_SendCommand>
	_EPD_SendData((Xstart>>3) & 0xFF);
 800139e:	88fb      	ldrh	r3, [r7, #6]
 80013a0:	08db      	lsrs	r3, r3, #3
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff ff4a 	bl	8001240 <_EPD_SendData>
	_EPD_SendData((Xend>>3) & 0xFF);
 80013ac:	887b      	ldrh	r3, [r7, #2]
 80013ae:	08db      	lsrs	r3, r3, #3
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff ff43 	bl	8001240 <_EPD_SendData>

	_EPD_SendCommand(0x45); // SET_RAM_Y_ADDRESS_START_END_POSITION
 80013ba:	2045      	movs	r0, #69	; 0x45
 80013bc:	f7ff ff1c 	bl	80011f8 <_EPD_SendCommand>
	_EPD_SendData(Ystart & 0xFF);
 80013c0:	88bb      	ldrh	r3, [r7, #4]
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff ff3b 	bl	8001240 <_EPD_SendData>
	_EPD_SendData((Ystart >> 8) & 0xFF);
 80013ca:	88bb      	ldrh	r3, [r7, #4]
 80013cc:	0a1b      	lsrs	r3, r3, #8
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff ff34 	bl	8001240 <_EPD_SendData>
	_EPD_SendData(Yend & 0xFF);
 80013d8:	883b      	ldrh	r3, [r7, #0]
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff ff2f 	bl	8001240 <_EPD_SendData>
	_EPD_SendData((Yend >> 8) & 0xFF);
 80013e2:	883b      	ldrh	r3, [r7, #0]
 80013e4:	0a1b      	lsrs	r3, r3, #8
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff ff28 	bl	8001240 <_EPD_SendData>
}
 80013f0:	bf00      	nop
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd90      	pop	{r4, r7, pc}

080013f8 <_EPD_SetCursor>:

static void _EPD_SetCursor(uint16_t Xstart, uint16_t Ystart) {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	460a      	mov	r2, r1
 8001402:	80fb      	strh	r3, [r7, #6]
 8001404:	4613      	mov	r3, r2
 8001406:	80bb      	strh	r3, [r7, #4]
	_EPD_SendCommand(0x4E); // SET_RAM_X_ADDRESS_COUNTER
 8001408:	204e      	movs	r0, #78	; 0x4e
 800140a:	f7ff fef5 	bl	80011f8 <_EPD_SendCommand>
	_EPD_SendData(Xstart & 0xFF);
 800140e:	88fb      	ldrh	r3, [r7, #6]
 8001410:	b2db      	uxtb	r3, r3
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff ff14 	bl	8001240 <_EPD_SendData>

	_EPD_SendCommand(0x4F); // SET_RAM_Y_ADDRESS_COUNTER
 8001418:	204f      	movs	r0, #79	; 0x4f
 800141a:	f7ff feed 	bl	80011f8 <_EPD_SendCommand>
	_EPD_SendData(Ystart & 0xFF);
 800141e:	88bb      	ldrh	r3, [r7, #4]
 8001420:	b2db      	uxtb	r3, r3
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff ff0c 	bl	8001240 <_EPD_SendData>
	_EPD_SendData((Ystart >> 8) & 0xFF);
 8001428:	88bb      	ldrh	r3, [r7, #4]
 800142a:	0a1b      	lsrs	r3, r3, #8
 800142c:	b29b      	uxth	r3, r3
 800142e:	b2db      	uxtb	r3, r3
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff ff05 	bl	8001240 <_EPD_SendData>
}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <EPD_Init>:



void EPD_Init(void) {
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EPD_DC_GPIO_Port, EPD_DC_Pin, GPIO_PIN_RESET);
 8001444:	2200      	movs	r2, #0
 8001446:	2104      	movs	r1, #4
 8001448:	4822      	ldr	r0, [pc, #136]	; (80014d4 <EPD_Init+0x94>)
 800144a:	f002 fd9b 	bl	8003f84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, GPIO_PIN_RESET);
 800144e:	2200      	movs	r2, #0
 8001450:	2140      	movs	r1, #64	; 0x40
 8001452:	4820      	ldr	r0, [pc, #128]	; (80014d4 <EPD_Init+0x94>)
 8001454:	f002 fd96 	bl	8003f84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, GPIO_PIN_SET);
 8001458:	2201      	movs	r2, #1
 800145a:	2102      	movs	r1, #2
 800145c:	481d      	ldr	r0, [pc, #116]	; (80014d4 <EPD_Init+0x94>)
 800145e:	f002 fd91 	bl	8003f84 <HAL_GPIO_WritePin>

	_EPD_Reset();
 8001462:	f7ff feab 	bl	80011bc <_EPD_Reset>
	HAL_Delay(100);
 8001466:	2064      	movs	r0, #100	; 0x64
 8001468:	f001 ff32 	bl	80032d0 <HAL_Delay>

	_EPD_ReadBusy();
 800146c:	f7ff ff0c 	bl	8001288 <_EPD_ReadBusy>
	_EPD_SendCommand(0x12);  //SWRESET
 8001470:	2012      	movs	r0, #18
 8001472:	f7ff fec1 	bl	80011f8 <_EPD_SendCommand>
	_EPD_ReadBusy();
 8001476:	f7ff ff07 	bl	8001288 <_EPD_ReadBusy>

	_EPD_SendCommand(0x01); //Driver output control
 800147a:	2001      	movs	r0, #1
 800147c:	f7ff febc 	bl	80011f8 <_EPD_SendCommand>
	_EPD_SendData(0x27);
 8001480:	2027      	movs	r0, #39	; 0x27
 8001482:	f7ff fedd 	bl	8001240 <_EPD_SendData>
	_EPD_SendData(0x01);
 8001486:	2001      	movs	r0, #1
 8001488:	f7ff feda 	bl	8001240 <_EPD_SendData>
	_EPD_SendData(0x00);
 800148c:	2000      	movs	r0, #0
 800148e:	f7ff fed7 	bl	8001240 <_EPD_SendData>

	_EPD_SendCommand(0x11); //data entry mode
 8001492:	2011      	movs	r0, #17
 8001494:	f7ff feb0 	bl	80011f8 <_EPD_SendCommand>
	_EPD_SendData(0x03);
 8001498:	2003      	movs	r0, #3
 800149a:	f7ff fed1 	bl	8001240 <_EPD_SendData>

	_EPD_SetWindows(0, 0, EPD_WIDTH-1, EPD_HEIGHT-1);
 800149e:	f240 1327 	movw	r3, #295	; 0x127
 80014a2:	227f      	movs	r2, #127	; 0x7f
 80014a4:	2100      	movs	r1, #0
 80014a6:	2000      	movs	r0, #0
 80014a8:	f7ff ff67 	bl	800137a <_EPD_SetWindows>

	_EPD_SendCommand(0x21); //  Display update control
 80014ac:	2021      	movs	r0, #33	; 0x21
 80014ae:	f7ff fea3 	bl	80011f8 <_EPD_SendCommand>
	_EPD_SendData(0x00);
 80014b2:	2000      	movs	r0, #0
 80014b4:	f7ff fec4 	bl	8001240 <_EPD_SendData>
	_EPD_SendData(0x80);
 80014b8:	2080      	movs	r0, #128	; 0x80
 80014ba:	f7ff fec1 	bl	8001240 <_EPD_SendData>

	_EPD_SetCursor(0, 0);
 80014be:	2100      	movs	r1, #0
 80014c0:	2000      	movs	r0, #0
 80014c2:	f7ff ff99 	bl	80013f8 <_EPD_SetCursor>
	_EPD_ReadBusy();
 80014c6:	f7ff fedf 	bl	8001288 <_EPD_ReadBusy>

	_EPD_LUT_by_host(WS_20_30);
 80014ca:	4803      	ldr	r0, [pc, #12]	; (80014d8 <EPD_Init+0x98>)
 80014cc:	f7ff ff0b 	bl	80012e6 <_EPD_LUT_by_host>
}
 80014d0:	bf00      	nop
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40020000 	.word	0x40020000
 80014d8:	20000000 	.word	0x20000000

080014dc <EPD_Clear>:

void EPD_Clear(void) {
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
	uint16_t i;
	_EPD_SendCommand(0x24);   //write RAM for black(0)/white (1)
 80014e2:	2024      	movs	r0, #36	; 0x24
 80014e4:	f7ff fe88 	bl	80011f8 <_EPD_SendCommand>
	for(i = 0; i < EPD_BYTES; i++) {
 80014e8:	2300      	movs	r3, #0
 80014ea:	80fb      	strh	r3, [r7, #6]
 80014ec:	e005      	b.n	80014fa <EPD_Clear+0x1e>
		_EPD_SendData(0xff);
 80014ee:	20ff      	movs	r0, #255	; 0xff
 80014f0:	f7ff fea6 	bl	8001240 <_EPD_SendData>
	for(i = 0; i < EPD_BYTES; i++) {
 80014f4:	88fb      	ldrh	r3, [r7, #6]
 80014f6:	3301      	adds	r3, #1
 80014f8:	80fb      	strh	r3, [r7, #6]
 80014fa:	88fb      	ldrh	r3, [r7, #6]
 80014fc:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 8001500:	d3f5      	bcc.n	80014ee <EPD_Clear+0x12>
	}
	_EPD_TurnOnDisplay();
 8001502:	f7ff ff2b 	bl	800135c <_EPD_TurnOnDisplay>
}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <EPD_Display>:

void EPD_Display(uint8_t *image) {
 800150e:	b580      	push	{r7, lr}
 8001510:	b084      	sub	sp, #16
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
	uint16_t i;
	_EPD_SendCommand(0x24);   //write RAM for black(0)/white (1)
 8001516:	2024      	movs	r0, #36	; 0x24
 8001518:	f7ff fe6e 	bl	80011f8 <_EPD_SendCommand>
	for(i=0; i<EPD_BYTES; i++) {
 800151c:	2300      	movs	r3, #0
 800151e:	81fb      	strh	r3, [r7, #14]
 8001520:	e009      	b.n	8001536 <EPD_Display+0x28>
		_EPD_SendData(image[i]);
 8001522:	89fb      	ldrh	r3, [r7, #14]
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	4413      	add	r3, r2
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff fe88 	bl	8001240 <_EPD_SendData>
	for(i=0; i<EPD_BYTES; i++) {
 8001530:	89fb      	ldrh	r3, [r7, #14]
 8001532:	3301      	adds	r3, #1
 8001534:	81fb      	strh	r3, [r7, #14]
 8001536:	89fb      	ldrh	r3, [r7, #14]
 8001538:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 800153c:	d3f1      	bcc.n	8001522 <EPD_Display+0x14>
	}
	_EPD_TurnOnDisplay();
 800153e:	f7ff ff0d 	bl	800135c <_EPD_TurnOnDisplay>
}
 8001542:	bf00      	nop
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <EPD_Sleep>:
		_EPD_SendData(image[i]);
	}
	_EPD_TurnOnDisplay_Partial();
}

void EPD_Sleep(void) {
 800154a:	b580      	push	{r7, lr}
 800154c:	af00      	add	r7, sp, #0
	_EPD_SendCommand(0x10); //enter deep sleep
 800154e:	2010      	movs	r0, #16
 8001550:	f7ff fe52 	bl	80011f8 <_EPD_SendCommand>
	_EPD_SendData(0x01);
 8001554:	2001      	movs	r0, #1
 8001556:	f7ff fe73 	bl	8001240 <_EPD_SendData>
	HAL_Delay(100);
 800155a:	2064      	movs	r0, #100	; 0x64
 800155c:	f001 feb8 	bl	80032d0 <HAL_Delay>
}
 8001560:	bf00      	nop
 8001562:	bd80      	pop	{r7, pc}

08001564 <Conv_ADC>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Conv_ADC(uint8_t *buf, int32_t *result) {
 8001564:	b410      	push	{r4}
	*result = 0xFF000000 * ((buf[1] >> 7) & 1) + (buf[1] << 16) + (buf[0] << 8) + buf[3];
 8001566:	7843      	ldrb	r3, [r0, #1]
 8001568:	09dc      	lsrs	r4, r3, #7
 800156a:	0222      	lsls	r2, r4, #8
 800156c:	1b12      	subs	r2, r2, r4
 800156e:	041b      	lsls	r3, r3, #16
 8001570:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 8001574:	78c2      	ldrb	r2, [r0, #3]
 8001576:	4413      	add	r3, r2
 8001578:	7802      	ldrb	r2, [r0, #0]
 800157a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800157e:	600b      	str	r3, [r1, #0]
}
 8001580:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001584:	4770      	bx	lr
	...

08001588 <HAL_I2S_RxHalfCpltCallback>:

uint32_t rxHalfCpltCounter = 0;
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001588:	b538      	push	{r3, r4, r5, lr}
	if (hi2s->Instance == SPI2)
 800158a:	6802      	ldr	r2, [r0, #0]
 800158c:	4b16      	ldr	r3, [pc, #88]	; (80015e8 <HAL_I2S_RxHalfCpltCallback+0x60>)
 800158e:	429a      	cmp	r2, r3
 8001590:	d000      	beq.n	8001594 <HAL_I2S_RxHalfCpltCallback+0xc>
		if (display_counter < 296) {
			display_array[display_counter] = BUFF_CONV[0];
			display_counter++;
		}
	}
}
 8001592:	bd38      	pop	{r3, r4, r5, pc}
		Conv_ADC(&ADC_BUFF.ADC8[0], &BUFF_CONV[0]); // LEFT
 8001594:	4c15      	ldr	r4, [pc, #84]	; (80015ec <HAL_I2S_RxHalfCpltCallback+0x64>)
 8001596:	4d16      	ldr	r5, [pc, #88]	; (80015f0 <HAL_I2S_RxHalfCpltCallback+0x68>)
 8001598:	4621      	mov	r1, r4
 800159a:	4628      	mov	r0, r5
 800159c:	f7ff ffe2 	bl	8001564 <Conv_ADC>
		Conv_ADC(&ADC_BUFF.ADC8[4], &BUFF_CONV[1]); // RIGHT
 80015a0:	1d21      	adds	r1, r4, #4
 80015a2:	1d28      	adds	r0, r5, #4
 80015a4:	f7ff ffde 	bl	8001564 <Conv_ADC>
		RAW_SAMPLES[0] = (float)BUFF_CONV[0];
 80015a8:	edd4 7a00 	vldr	s15, [r4]
 80015ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015b0:	4b10      	ldr	r3, [pc, #64]	; (80015f4 <HAL_I2S_RxHalfCpltCallback+0x6c>)
 80015b2:	edc3 7a00 	vstr	s15, [r3]
		RAW_SAMPLES[1] = (float)BUFF_CONV[1];
 80015b6:	ed94 7a01 	vldr	s14, [r4, #4]
 80015ba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80015be:	ed83 7a01 	vstr	s14, [r3, #4]
		rxHalfCpltCounter++;
 80015c2:	4a0d      	ldr	r2, [pc, #52]	; (80015f8 <HAL_I2S_RxHalfCpltCallback+0x70>)
 80015c4:	6813      	ldr	r3, [r2, #0]
 80015c6:	3301      	adds	r3, #1
 80015c8:	6013      	str	r3, [r2, #0]
		if (display_counter < 296) {
 80015ca:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <HAL_I2S_RxHalfCpltCallback+0x74>)
 80015cc:	881b      	ldrh	r3, [r3, #0]
 80015ce:	f5b3 7f94 	cmp.w	r3, #296	; 0x128
 80015d2:	d2de      	bcs.n	8001592 <HAL_I2S_RxHalfCpltCallback+0xa>
			display_array[display_counter] = BUFF_CONV[0];
 80015d4:	4a0a      	ldr	r2, [pc, #40]	; (8001600 <HAL_I2S_RxHalfCpltCallback+0x78>)
 80015d6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80015da:	edc2 7a00 	vstr	s15, [r2]
			display_counter++;
 80015de:	3301      	adds	r3, #1
 80015e0:	4a06      	ldr	r2, [pc, #24]	; (80015fc <HAL_I2S_RxHalfCpltCallback+0x74>)
 80015e2:	8013      	strh	r3, [r2, #0]
}
 80015e4:	e7d5      	b.n	8001592 <HAL_I2S_RxHalfCpltCallback+0xa>
 80015e6:	bf00      	nop
 80015e8:	40003800 	.word	0x40003800
 80015ec:	200027b4 	.word	0x200027b4
 80015f0:	20002e84 	.word	0x20002e84
 80015f4:	20001710 	.word	0x20001710
 80015f8:	200003b0 	.word	0x200003b0
 80015fc:	200003a8 	.word	0x200003a8
 8001600:	20002f34 	.word	0x20002f34

08001604 <HAL_I2S_RxCpltCallback>:

uint32_t rxCpltCounter = 0;
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001604:	b538      	push	{r3, r4, r5, lr}
	if (hi2s->Instance == SPI2)
 8001606:	6802      	ldr	r2, [r0, #0]
 8001608:	4b16      	ldr	r3, [pc, #88]	; (8001664 <HAL_I2S_RxCpltCallback+0x60>)
 800160a:	429a      	cmp	r2, r3
 800160c:	d000      	beq.n	8001610 <HAL_I2S_RxCpltCallback+0xc>
		if (display_counter < 296) {
			display_array[display_counter] = BUFF_CONV[2];
			display_counter++;
		}
	}
}
 800160e:	bd38      	pop	{r3, r4, r5, pc}
		Conv_ADC(&ADC_BUFF.ADC8[8], &BUFF_CONV[2]); // LEFT
 8001610:	4c15      	ldr	r4, [pc, #84]	; (8001668 <HAL_I2S_RxCpltCallback+0x64>)
 8001612:	4d16      	ldr	r5, [pc, #88]	; (800166c <HAL_I2S_RxCpltCallback+0x68>)
 8001614:	4621      	mov	r1, r4
 8001616:	4628      	mov	r0, r5
 8001618:	f7ff ffa4 	bl	8001564 <Conv_ADC>
		Conv_ADC(&ADC_BUFF.ADC8[12], &BUFF_CONV[3]); // RIGHT
 800161c:	1d21      	adds	r1, r4, #4
 800161e:	1d28      	adds	r0, r5, #4
 8001620:	f7ff ffa0 	bl	8001564 <Conv_ADC>
		RAW_SAMPLES[0] = (float)BUFF_CONV[2];
 8001624:	edd4 7a00 	vldr	s15, [r4]
 8001628:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800162c:	4b10      	ldr	r3, [pc, #64]	; (8001670 <HAL_I2S_RxCpltCallback+0x6c>)
 800162e:	edc3 7a00 	vstr	s15, [r3]
		RAW_SAMPLES[1] = (float)BUFF_CONV[3];
 8001632:	ed94 7a01 	vldr	s14, [r4, #4]
 8001636:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800163a:	ed83 7a01 	vstr	s14, [r3, #4]
		rxCpltCounter++;
 800163e:	4a0d      	ldr	r2, [pc, #52]	; (8001674 <HAL_I2S_RxCpltCallback+0x70>)
 8001640:	6813      	ldr	r3, [r2, #0]
 8001642:	3301      	adds	r3, #1
 8001644:	6013      	str	r3, [r2, #0]
		if (display_counter < 296) {
 8001646:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <HAL_I2S_RxCpltCallback+0x74>)
 8001648:	881b      	ldrh	r3, [r3, #0]
 800164a:	f5b3 7f94 	cmp.w	r3, #296	; 0x128
 800164e:	d2de      	bcs.n	800160e <HAL_I2S_RxCpltCallback+0xa>
			display_array[display_counter] = BUFF_CONV[2];
 8001650:	4a0a      	ldr	r2, [pc, #40]	; (800167c <HAL_I2S_RxCpltCallback+0x78>)
 8001652:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001656:	edc2 7a00 	vstr	s15, [r2]
			display_counter++;
 800165a:	3301      	adds	r3, #1
 800165c:	4a06      	ldr	r2, [pc, #24]	; (8001678 <HAL_I2S_RxCpltCallback+0x74>)
 800165e:	8013      	strh	r3, [r2, #0]
}
 8001660:	e7d5      	b.n	800160e <HAL_I2S_RxCpltCallback+0xa>
 8001662:	bf00      	nop
 8001664:	40003800 	.word	0x40003800
 8001668:	200027bc 	.word	0x200027bc
 800166c:	20002e8c 	.word	0x20002e8c
 8001670:	20001710 	.word	0x20001710
 8001674:	200003ac 	.word	0x200003ac
 8001678:	200003a8 	.word	0x200003a8
 800167c:	20002f34 	.word	0x20002f34

08001680 <HAL_I2S_TxHalfCpltCallback>:

uint32_t txHalfCpltCounter = 0;
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
	if (hi2s->Instance == SPI3)
 8001680:	6802      	ldr	r2, [r0, #0]
 8001682:	4b04      	ldr	r3, [pc, #16]	; (8001694 <HAL_I2S_TxHalfCpltCallback+0x14>)
 8001684:	429a      	cmp	r2, r3
 8001686:	d000      	beq.n	800168a <HAL_I2S_TxHalfCpltCallback+0xa>
		//PROC_SAMPLES[0] = RAW_SAMPLES[0] * 10;
		//PROC_SAMPLES[0] = wave_gen('s', txHalfCpltCounter, 440.0F) * 10000;
		//DAC_BUFF.DAC16[__HAL_DMA_GET_COUNTER(hi2s->hdmatx)] = (int16_t)PROC_SAMPLES[0];
		txHalfCpltCounter++;
	}
}
 8001688:	4770      	bx	lr
		txHalfCpltCounter++;
 800168a:	4a03      	ldr	r2, [pc, #12]	; (8001698 <HAL_I2S_TxHalfCpltCallback+0x18>)
 800168c:	6813      	ldr	r3, [r2, #0]
 800168e:	3301      	adds	r3, #1
 8001690:	6013      	str	r3, [r2, #0]
}
 8001692:	e7f9      	b.n	8001688 <HAL_I2S_TxHalfCpltCallback+0x8>
 8001694:	40003c00 	.word	0x40003c00
 8001698:	200003b8 	.word	0x200003b8

0800169c <HAL_I2S_TxCpltCallback>:

uint32_t txCpltCounter = 0;
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
	if (hi2s->Instance == SPI3)
 800169c:	6802      	ldr	r2, [r0, #0]
 800169e:	4b04      	ldr	r3, [pc, #16]	; (80016b0 <HAL_I2S_TxCpltCallback+0x14>)
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d000      	beq.n	80016a6 <HAL_I2S_TxCpltCallback+0xa>
	{
		//PROC_SAMPLES[1] = wave_gen('s', txCpltCounter, 440.0F) * 10000;
		//DAC_BUFF.DAC16[__HAL_DMA_GET_COUNTER(hi2s->hdmatx)] = (int16_t)PROC_SAMPLES[1];
		txCpltCounter++;
	}
}
 80016a4:	4770      	bx	lr
		txCpltCounter++;
 80016a6:	4a03      	ldr	r2, [pc, #12]	; (80016b4 <HAL_I2S_TxCpltCallback+0x18>)
 80016a8:	6813      	ldr	r3, [r2, #0]
 80016aa:	3301      	adds	r3, #1
 80016ac:	6013      	str	r3, [r2, #0]
}
 80016ae:	e7f9      	b.n	80016a4 <HAL_I2S_TxCpltCallback+0x8>
 80016b0:	40003c00 	.word	0x40003c00
 80016b4:	200003b4 	.word	0x200003b4

080016b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016b8:	b500      	push	{lr}
 80016ba:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016bc:	2230      	movs	r2, #48	; 0x30
 80016be:	2100      	movs	r1, #0
 80016c0:	a808      	add	r0, sp, #32
 80016c2:	f00b fbc9 	bl	800ce58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016c6:	2300      	movs	r3, #0
 80016c8:	9303      	str	r3, [sp, #12]
 80016ca:	9304      	str	r3, [sp, #16]
 80016cc:	9305      	str	r3, [sp, #20]
 80016ce:	9306      	str	r3, [sp, #24]
 80016d0:	9307      	str	r3, [sp, #28]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016d2:	9301      	str	r3, [sp, #4]
 80016d4:	4a21      	ldr	r2, [pc, #132]	; (800175c <SystemClock_Config+0xa4>)
 80016d6:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80016d8:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80016dc:	6411      	str	r1, [r2, #64]	; 0x40
 80016de:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80016e0:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80016e4:	9201      	str	r2, [sp, #4]
 80016e6:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016e8:	9302      	str	r3, [sp, #8]
 80016ea:	4b1d      	ldr	r3, [pc, #116]	; (8001760 <SystemClock_Config+0xa8>)
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016fa:	9302      	str	r3, [sp, #8]
 80016fc:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016fe:	2301      	movs	r3, #1
 8001700:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001702:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001706:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001708:	2302      	movs	r3, #2
 800170a:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800170c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001710:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001712:	2208      	movs	r2, #8
 8001714:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001716:	f44f 72a8 	mov.w	r2, #336	; 0x150
 800171a:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800171c:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800171e:	2307      	movs	r3, #7
 8001720:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001722:	a808      	add	r0, sp, #32
 8001724:	f005 ffce 	bl	80076c4 <HAL_RCC_OscConfig>
 8001728:	b998      	cbnz	r0, 8001752 <SystemClock_Config+0x9a>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800172a:	230f      	movs	r3, #15
 800172c:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800172e:	2302      	movs	r3, #2
 8001730:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001732:	2300      	movs	r3, #0
 8001734:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001736:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800173a:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800173c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001740:	9307      	str	r3, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001742:	2105      	movs	r1, #5
 8001744:	a803      	add	r0, sp, #12
 8001746:	f006 fa35 	bl	8007bb4 <HAL_RCC_ClockConfig>
 800174a:	b920      	cbnz	r0, 8001756 <SystemClock_Config+0x9e>
  {
    Error_Handler();
  }
}
 800174c:	b015      	add	sp, #84	; 0x54
 800174e:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001752:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001754:	e7fe      	b.n	8001754 <SystemClock_Config+0x9c>
 8001756:	b672      	cpsid	i
 8001758:	e7fe      	b.n	8001758 <SystemClock_Config+0xa0>
 800175a:	bf00      	nop
 800175c:	40023800 	.word	0x40023800
 8001760:	40007000 	.word	0x40007000

08001764 <PeriphCommonClock_Config>:
{
 8001764:	b500      	push	{lr}
 8001766:	b085      	sub	sp, #20
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001768:	2300      	movs	r3, #0
 800176a:	9303      	str	r3, [sp, #12]
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800176c:	2301      	movs	r3, #1
 800176e:	9300      	str	r3, [sp, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 181;
 8001770:	23b5      	movs	r3, #181	; 0xb5
 8001772:	9301      	str	r3, [sp, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001774:	2302      	movs	r3, #2
 8001776:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001778:	4668      	mov	r0, sp
 800177a:	f006 fc03 	bl	8007f84 <HAL_RCCEx_PeriphCLKConfig>
 800177e:	b910      	cbnz	r0, 8001786 <PeriphCommonClock_Config+0x22>
}
 8001780:	b005      	add	sp, #20
 8001782:	f85d fb04 	ldr.w	pc, [sp], #4
 8001786:	b672      	cpsid	i
	while (1)
 8001788:	e7fe      	b.n	8001788 <PeriphCommonClock_Config+0x24>
 800178a:	0000      	movs	r0, r0
 800178c:	0000      	movs	r0, r0
	...

08001790 <main>:
{
 8001790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001794:	b0a5      	sub	sp, #148	; 0x94
  HAL_Init();
 8001796:	f001 fd29 	bl	80031ec <HAL_Init>
  SystemClock_Config();
 800179a:	f7ff ff8d 	bl	80016b8 <SystemClock_Config>
  PeriphCommonClock_Config();
 800179e:	f7ff ffe1 	bl	8001764 <PeriphCommonClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a2:	2400      	movs	r4, #0
 80017a4:	941a      	str	r4, [sp, #104]	; 0x68
 80017a6:	941b      	str	r4, [sp, #108]	; 0x6c
 80017a8:	941c      	str	r4, [sp, #112]	; 0x70
 80017aa:	941d      	str	r4, [sp, #116]	; 0x74
 80017ac:	941e      	str	r4, [sp, #120]	; 0x78
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017ae:	9415      	str	r4, [sp, #84]	; 0x54
 80017b0:	4db4      	ldr	r5, [pc, #720]	; (8001a84 <main+0x2f4>)
 80017b2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80017b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017b8:	632b      	str	r3, [r5, #48]	; 0x30
 80017ba:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80017bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017c0:	9315      	str	r3, [sp, #84]	; 0x54
 80017c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017c4:	9416      	str	r4, [sp, #88]	; 0x58
 80017c6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80017c8:	f043 0304 	orr.w	r3, r3, #4
 80017cc:	632b      	str	r3, [r5, #48]	; 0x30
 80017ce:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80017d0:	f003 0304 	and.w	r3, r3, #4
 80017d4:	9316      	str	r3, [sp, #88]	; 0x58
 80017d6:	9b16      	ldr	r3, [sp, #88]	; 0x58
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d8:	9417      	str	r4, [sp, #92]	; 0x5c
 80017da:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	632b      	str	r3, [r5, #48]	; 0x30
 80017e2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80017e4:	f003 0301 	and.w	r3, r3, #1
 80017e8:	9317      	str	r3, [sp, #92]	; 0x5c
 80017ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ec:	9418      	str	r4, [sp, #96]	; 0x60
 80017ee:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80017f0:	f043 0302 	orr.w	r3, r3, #2
 80017f4:	632b      	str	r3, [r5, #48]	; 0x30
 80017f6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	9318      	str	r3, [sp, #96]	; 0x60
 80017fe:	9b18      	ldr	r3, [sp, #96]	; 0x60
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001800:	9419      	str	r4, [sp, #100]	; 0x64
 8001802:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001804:	f043 0308 	orr.w	r3, r3, #8
 8001808:	632b      	str	r3, [r5, #48]	; 0x30
 800180a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800180c:	f003 0308 	and.w	r3, r3, #8
 8001810:	9319      	str	r3, [sp, #100]	; 0x64
 8001812:	9b19      	ldr	r3, [sp, #100]	; 0x64
  HAL_GPIO_WritePin(OtgPower_GPIO_Port, OtgPower_Pin, GPIO_PIN_RESET);
 8001814:	f8df 92bc 	ldr.w	r9, [pc, #700]	; 8001ad4 <main+0x344>
 8001818:	4622      	mov	r2, r4
 800181a:	2101      	movs	r1, #1
 800181c:	4648      	mov	r0, r9
 800181e:	f002 fbb1 	bl	8003f84 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, EPD_RST_Pin|EPD_DC_Pin|EPD_CS_Pin, GPIO_PIN_RESET);
 8001822:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 8001ad8 <main+0x348>
 8001826:	4622      	mov	r2, r4
 8001828:	2146      	movs	r1, #70	; 0x46
 800182a:	4640      	mov	r0, r8
 800182c:	f002 fbaa 	bl	8003f84 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, Led1_Pin|Led2_Pin|Led3_Pin|Led4_Pin, GPIO_PIN_RESET);
 8001830:	4f95      	ldr	r7, [pc, #596]	; (8001a88 <main+0x2f8>)
 8001832:	4622      	mov	r2, r4
 8001834:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001838:	4638      	mov	r0, r7
 800183a:	f002 fba3 	bl	8003f84 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(AudioPower_GPIO_Port, AudioPower_Pin, GPIO_PIN_SET);
 800183e:	2201      	movs	r2, #1
 8001840:	2110      	movs	r1, #16
 8001842:	4638      	mov	r0, r7
 8001844:	f002 fb9e 	bl	8003f84 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = OtgPower_Pin;
 8001848:	2601      	movs	r6, #1
 800184a:	961a      	str	r6, [sp, #104]	; 0x68
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184c:	961b      	str	r6, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001850:	941d      	str	r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(OtgPower_GPIO_Port, &GPIO_InitStruct);
 8001852:	a91a      	add	r1, sp, #104	; 0x68
 8001854:	4648      	mov	r0, r9
 8001856:	f002 f9e1 	bl	8003c1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = EncB_Pin|EncA_Pin;
 800185a:	230c      	movs	r3, #12
 800185c:	931a      	str	r3, [sp, #104]	; 0x68
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800185e:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	941c      	str	r4, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001862:	a91a      	add	r1, sp, #104	; 0x68
 8001864:	4648      	mov	r0, r9
 8001866:	f002 f9d9 	bl	8003c1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Btn0_Pin|EPD_BUSY_Pin;
 800186a:	2309      	movs	r3, #9
 800186c:	931a      	str	r3, [sp, #104]	; 0x68
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800186e:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	941c      	str	r4, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001872:	a91a      	add	r1, sp, #104	; 0x68
 8001874:	4640      	mov	r0, r8
 8001876:	f002 f9d1 	bl	8003c1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = EPD_RST_Pin|EPD_DC_Pin|EPD_CS_Pin;
 800187a:	2346      	movs	r3, #70	; 0x46
 800187c:	931a      	str	r3, [sp, #104]	; 0x68
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800187e:	961b      	str	r6, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001882:	941d      	str	r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001884:	a91a      	add	r1, sp, #104	; 0x68
 8001886:	4640      	mov	r0, r8
 8001888:	f002 f9c8 	bl	8003c1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Btn3_Pin|Btn2_Pin;
 800188c:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8001890:	931a      	str	r3, [sp, #104]	; 0x68
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001892:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001894:	961c      	str	r6, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001896:	a91a      	add	r1, sp, #104	; 0x68
 8001898:	487c      	ldr	r0, [pc, #496]	; (8001a8c <main+0x2fc>)
 800189a:	f002 f9bf 	bl	8003c1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Btn1_Pin;
 800189e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018a2:	931a      	str	r3, [sp, #104]	; 0x68
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018a4:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018a6:	961c      	str	r6, [sp, #112]	; 0x70
  HAL_GPIO_Init(Btn1_GPIO_Port, &GPIO_InitStruct);
 80018a8:	a91a      	add	r1, sp, #104	; 0x68
 80018aa:	4638      	mov	r0, r7
 80018ac:	f002 f9b6 	bl	8003c1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Led1_Pin|Led2_Pin|Led3_Pin|Led4_Pin
 80018b0:	f24f 0310 	movw	r3, #61456	; 0xf010
 80018b4:	931a      	str	r3, [sp, #104]	; 0x68
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b6:	961b      	str	r6, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b8:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ba:	941d      	str	r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018bc:	a91a      	add	r1, sp, #104	; 0x68
 80018be:	4638      	mov	r0, r7
 80018c0:	f002 f9ac 	bl	8003c1c <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018c4:	941a      	str	r4, [sp, #104]	; 0x68
 80018c6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80018c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018cc:	632b      	str	r3, [r5, #48]	; 0x30
 80018ce:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80018d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018d4:	931a      	str	r3, [sp, #104]	; 0x68
 80018d6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80018d8:	4622      	mov	r2, r4
 80018da:	4621      	mov	r1, r4
 80018dc:	200e      	movs	r0, #14
 80018de:	f001 fdf6 	bl	80034ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80018e2:	200e      	movs	r0, #14
 80018e4:	f001 fe0f 	bl	8003506 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80018e8:	4622      	mov	r2, r4
 80018ea:	4621      	mov	r1, r4
 80018ec:	2010      	movs	r0, #16
 80018ee:	f001 fdee 	bl	80034ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80018f2:	2010      	movs	r0, #16
 80018f4:	f001 fe07 	bl	8003506 <HAL_NVIC_EnableIRQ>
  hi2c1.Instance = I2C1;
 80018f8:	4865      	ldr	r0, [pc, #404]	; (8001a90 <main+0x300>)
 80018fa:	4b66      	ldr	r3, [pc, #408]	; (8001a94 <main+0x304>)
 80018fc:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80018fe:	4b66      	ldr	r3, [pc, #408]	; (8001a98 <main+0x308>)
 8001900:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001902:	6084      	str	r4, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001904:	60c4      	str	r4, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001906:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800190a:	6103      	str	r3, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800190c:	6144      	str	r4, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800190e:	6184      	str	r4, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001910:	61c4      	str	r4, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001912:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001914:	f004 f8c0 	bl	8005a98 <HAL_I2C_Init>
 8001918:	2800      	cmp	r0, #0
 800191a:	f040 80e8 	bne.w	8001aee <main+0x35e>
  hi2s2.Instance = SPI2;
 800191e:	485f      	ldr	r0, [pc, #380]	; (8001a9c <main+0x30c>)
 8001920:	4b5f      	ldr	r3, [pc, #380]	; (8001aa0 <main+0x310>)
 8001922:	6003      	str	r3, [r0, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8001924:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001928:	6043      	str	r3, [r0, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800192a:	2300      	movs	r3, #0
 800192c:	6083      	str	r3, [r0, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 800192e:	2203      	movs	r2, #3
 8001930:	60c2      	str	r2, [r0, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001932:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001936:	6102      	str	r2, [r0, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8001938:	f64a 4244 	movw	r2, #44100	; 0xac44
 800193c:	6142      	str	r2, [r0, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800193e:	6183      	str	r3, [r0, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001940:	61c3      	str	r3, [r0, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001942:	6203      	str	r3, [r0, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001944:	f005 f83e 	bl	80069c4 <HAL_I2S_Init>
 8001948:	2800      	cmp	r0, #0
 800194a:	f040 80d2 	bne.w	8001af2 <main+0x362>
  hi2s3.Instance = SPI3;
 800194e:	4855      	ldr	r0, [pc, #340]	; (8001aa4 <main+0x314>)
 8001950:	4b55      	ldr	r3, [pc, #340]	; (8001aa8 <main+0x318>)
 8001952:	6003      	str	r3, [r0, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001954:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001958:	6042      	str	r2, [r0, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800195a:	2300      	movs	r3, #0
 800195c:	6083      	str	r3, [r0, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800195e:	60c3      	str	r3, [r0, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001960:	6102      	str	r2, [r0, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8001962:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001966:	6142      	str	r2, [r0, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001968:	6183      	str	r3, [r0, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800196a:	61c3      	str	r3, [r0, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800196c:	6203      	str	r3, [r0, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800196e:	f005 f829 	bl	80069c4 <HAL_I2S_Init>
 8001972:	2800      	cmp	r0, #0
 8001974:	f040 80bf 	bne.w	8001af6 <main+0x366>
  MX_USB_HOST_Init();
 8001978:	f00a feee 	bl	800c758 <MX_USB_HOST_Init>
  MX_FATFS_Init();
 800197c:	f007 fe8a 	bl	8009694 <MX_FATFS_Init>
  hspi1.Instance = SPI1;
 8001980:	484a      	ldr	r0, [pc, #296]	; (8001aac <main+0x31c>)
 8001982:	4b4b      	ldr	r3, [pc, #300]	; (8001ab0 <main+0x320>)
 8001984:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001986:	f44f 7382 	mov.w	r3, #260	; 0x104
 800198a:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800198c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001990:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001992:	2300      	movs	r3, #0
 8001994:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001996:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001998:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800199a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800199e:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80019a0:	2228      	movs	r2, #40	; 0x28
 80019a2:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019a4:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019a6:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019a8:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80019aa:	230a      	movs	r3, #10
 80019ac:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019ae:	f006 fc29 	bl	8008204 <HAL_SPI_Init>
 80019b2:	2800      	cmp	r0, #0
 80019b4:	f040 80a1 	bne.w	8001afa <main+0x36a>
	HAL_GPIO_WritePin(Led2_GPIO_Port, Led2_Pin, GPIO_PIN_SET);
 80019b8:	4f33      	ldr	r7, [pc, #204]	; (8001a88 <main+0x2f8>)
 80019ba:	2201      	movs	r2, #1
 80019bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019c0:	4638      	mov	r0, r7
 80019c2:	f002 fadf 	bl	8003f84 <HAL_GPIO_WritePin>
	pedalboard.active_pedals = 0;
 80019c6:	483b      	ldr	r0, [pc, #236]	; (8001ab4 <main+0x324>)
 80019c8:	2400      	movs	r4, #0
 80019ca:	7004      	strb	r4, [r0, #0]
	pedalboard_append(&pedalboard, LPF);
 80019cc:	2105      	movs	r1, #5
 80019ce:	f001 f83b 	bl	8002a48 <pedalboard_append>
	CS43_Init(hi2c1, MODE_I2S);
 80019d2:	4d2f      	ldr	r5, [pc, #188]	; (8001a90 <main+0x300>)
 80019d4:	9411      	str	r4, [sp, #68]	; 0x44
 80019d6:	2244      	movs	r2, #68	; 0x44
 80019d8:	f105 0110 	add.w	r1, r5, #16
 80019dc:	4668      	mov	r0, sp
 80019de:	f00b fa2d 	bl	800ce3c <memcpy>
 80019e2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80019e6:	f7ff f9f5 	bl	8000dd4 <CS43_Init>
	CS43_SetVolume(0);
 80019ea:	4620      	mov	r0, r4
 80019ec:	f7ff fb62 	bl	80010b4 <CS43_SetVolume>
	CS43_Enable_RightLeft(CS43_RIGHT_LEFT);
 80019f0:	2003      	movs	r0, #3
 80019f2:	f7ff fb03 	bl	8000ffc <CS43_Enable_RightLeft>
	CS43_Start();
 80019f6:	f7ff fb9f 	bl	8001138 <CS43_Start>
	HAL_I2S_Receive_DMA(&hi2s2, &ADC_BUFF.ADC16[0], 4);
 80019fa:	2204      	movs	r2, #4
 80019fc:	492e      	ldr	r1, [pc, #184]	; (8001ab8 <main+0x328>)
 80019fe:	4827      	ldr	r0, [pc, #156]	; (8001a9c <main+0x30c>)
 8001a00:	f005 f9c8 	bl	8006d94 <HAL_I2S_Receive_DMA>
	HAL_I2S_Transmit_DMA(&hi2s3, &DAC_BUFF.DAC16[0], 2);
 8001a04:	2202      	movs	r2, #2
 8001a06:	492d      	ldr	r1, [pc, #180]	; (8001abc <main+0x32c>)
 8001a08:	4826      	ldr	r0, [pc, #152]	; (8001aa4 <main+0x314>)
 8001a0a:	f005 f91b 	bl	8006c44 <HAL_I2S_Transmit_DMA>
	EPD_Init();
 8001a0e:	f7ff fd17 	bl	8001440 <EPD_Init>
	EPD_Clear();
 8001a12:	f7ff fd63 	bl	80014dc <EPD_Clear>
	draw_clean(image);
 8001a16:	4e2a      	ldr	r6, [pc, #168]	; (8001ac0 <main+0x330>)
 8001a18:	4630      	mov	r0, r6
 8001a1a:	f000 faff 	bl	800201c <draw_clean>
	draw_rectangle(image, 36, 56, 88, 20);
 8001a1e:	f04f 0814 	mov.w	r8, #20
 8001a22:	f8cd 8000 	str.w	r8, [sp]
 8001a26:	2358      	movs	r3, #88	; 0x58
 8001a28:	2238      	movs	r2, #56	; 0x38
 8001a2a:	2124      	movs	r1, #36	; 0x24
 8001a2c:	4630      	mov	r0, r6
 8001a2e:	f000 fa04 	bl	8001e3a <draw_rectangle>
	sprintf(row, "g33ky toad");
 8001a32:	4a24      	ldr	r2, [pc, #144]	; (8001ac4 <main+0x334>)
 8001a34:	ab1f      	add	r3, sp, #124	; 0x7c
 8001a36:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a38:	c303      	stmia	r3!, {r0, r1}
 8001a3a:	f823 2b02 	strh.w	r2, [r3], #2
 8001a3e:	0c12      	lsrs	r2, r2, #16
 8001a40:	701a      	strb	r2, [r3, #0]
	draw_text(image, row, 40, 60);
 8001a42:	233c      	movs	r3, #60	; 0x3c
 8001a44:	2228      	movs	r2, #40	; 0x28
 8001a46:	a91f      	add	r1, sp, #124	; 0x7c
 8001a48:	4630      	mov	r0, r6
 8001a4a:	f000 fab8 	bl	8001fbe <draw_text>
	sprintf(row, "digital pedal");
 8001a4e:	4b1e      	ldr	r3, [pc, #120]	; (8001ac8 <main+0x338>)
 8001a50:	ad1f      	add	r5, sp, #124	; 0x7c
 8001a52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a54:	c507      	stmia	r5!, {r0, r1, r2}
 8001a56:	802b      	strh	r3, [r5, #0]
	draw_text(image, row, 20, 90);
 8001a58:	235a      	movs	r3, #90	; 0x5a
 8001a5a:	4642      	mov	r2, r8
 8001a5c:	a91f      	add	r1, sp, #124	; 0x7c
 8001a5e:	4630      	mov	r0, r6
 8001a60:	f000 faad 	bl	8001fbe <draw_text>
	EPD_Display(image);
 8001a64:	4630      	mov	r0, r6
 8001a66:	f7ff fd52 	bl	800150e <EPD_Display>
	EPD_Sleep();
 8001a6a:	f7ff fd6e 	bl	800154a <EPD_Sleep>
	encoderA.current = 0;
 8001a6e:	4b17      	ldr	r3, [pc, #92]	; (8001acc <main+0x33c>)
 8001a70:	805c      	strh	r4, [r3, #2]
	encoderB.current = 0;
 8001a72:	4b17      	ldr	r3, [pc, #92]	; (8001ad0 <main+0x340>)
 8001a74:	805c      	strh	r4, [r3, #2]
	HAL_GPIO_WritePin(Led2_GPIO_Port, Led2_Pin, GPIO_PIN_RESET);
 8001a76:	4622      	mov	r2, r4
 8001a78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a7c:	4638      	mov	r0, r7
 8001a7e:	f002 fa81 	bl	8003f84 <HAL_GPIO_WritePin>
 8001a82:	e02b      	b.n	8001adc <main+0x34c>
 8001a84:	40023800 	.word	0x40023800
 8001a88:	40020c00 	.word	0x40020c00
 8001a8c:	40020400 	.word	0x40020400
 8001a90:	200003d8 	.word	0x200003d8
 8001a94:	40005400 	.word	0x40005400
 8001a98:	000186a0 	.word	0x000186a0
 8001a9c:	20002ea4 	.word	0x20002ea4
 8001aa0:	40003800 	.word	0x40003800
 8001aa4:	20002eec 	.word	0x20002eec
 8001aa8:	40003c00 	.word	0x40003c00
 8001aac:	20002e28 	.word	0x20002e28
 8001ab0:	40013000 	.word	0x40013000
 8001ab4:	200027e4 	.word	0x200027e4
 8001ab8:	20002e84 	.word	0x20002e84
 8001abc:	200027c4 	.word	0x200027c4
 8001ac0:	20000490 	.word	0x20000490
 8001ac4:	0800d9d4 	.word	0x0800d9d4
 8001ac8:	0800d9e0 	.word	0x0800d9e0
 8001acc:	20002e80 	.word	0x20002e80
 8001ad0:	2000048c 	.word	0x2000048c
 8001ad4:	40020800 	.word	0x40020800
 8001ad8:	40020000 	.word	0x40020000
	uint32_t lasttick = 0;
 8001adc:	9413      	str	r4, [sp, #76]	; 0x4c
				toggle_single_pixel(image, 64 + (int)((float)display_array[i] / 17000.0 * 64.0), i);
 8001ade:	a5a4      	add	r5, pc, #656	; (adr r5, 8001d70 <main+0x5e0>)
 8001ae0:	e9d5 4500 	ldrd	r4, r5, [r5]
 8001ae4:	f04f 0a00 	mov.w	sl, #0
 8001ae8:	f8df b28c 	ldr.w	fp, [pc, #652]	; 8001d78 <main+0x5e8>
 8001aec:	e081      	b.n	8001bf2 <main+0x462>
 8001aee:	b672      	cpsid	i
	while (1)
 8001af0:	e7fe      	b.n	8001af0 <main+0x360>
 8001af2:	b672      	cpsid	i
 8001af4:	e7fe      	b.n	8001af4 <main+0x364>
 8001af6:	b672      	cpsid	i
 8001af8:	e7fe      	b.n	8001af8 <main+0x368>
 8001afa:	b672      	cpsid	i
 8001afc:	e7fe      	b.n	8001afc <main+0x36c>
			lasttick = HAL_GetTick();
 8001afe:	f001 fbdb 	bl	80032b8 <HAL_GetTick>
 8001b02:	9013      	str	r0, [sp, #76]	; 0x4c
			encoderA.last = encoderA.current;
 8001b04:	4e88      	ldr	r6, [pc, #544]	; (8001d28 <main+0x598>)
 8001b06:	8873      	ldrh	r3, [r6, #2]
 8001b08:	8033      	strh	r3, [r6, #0]
			encoderB.last = encoderB.current;
 8001b0a:	4b88      	ldr	r3, [pc, #544]	; (8001d2c <main+0x59c>)
 8001b0c:	885a      	ldrh	r2, [r3, #2]
 8001b0e:	801a      	strh	r2, [r3, #0]
			temp = HAL_GPIO_ReadPin(EncA_GPIO_Port, EncA_Pin) == GPIO_PIN_SET ? ceil : 0;
 8001b10:	2108      	movs	r1, #8
 8001b12:	4887      	ldr	r0, [pc, #540]	; (8001d30 <main+0x5a0>)
 8001b14:	f002 fa1e 	bl	8003f54 <HAL_GPIO_ReadPin>
 8001b18:	2801      	cmp	r0, #1
 8001b1a:	f242 7210 	movw	r2, #10000	; 0x2710
 8001b1e:	bf18      	it	ne
 8001b20:	2200      	movne	r2, #0
			encoderA.current = (encoderA.last * alpha / 100) + (temp * (100 - alpha) / 100);
 8001b22:	8833      	ldrh	r3, [r6, #0]
 8001b24:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001b28:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8001b2c:	4f81      	ldr	r7, [pc, #516]	; (8001d34 <main+0x5a4>)
 8001b2e:	fb87 0103 	smull	r0, r1, r7, r3
 8001b32:	17db      	asrs	r3, r3, #31
 8001b34:	ebc3 1361 	rsb	r3, r3, r1, asr #5
 8001b38:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001b3c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001b40:	fb87 1202 	smull	r1, r2, r7, r2
 8001b44:	eb03 1362 	add.w	r3, r3, r2, asr #5
 8001b48:	8073      	strh	r3, [r6, #2]
			temp = HAL_GPIO_ReadPin(EncB_GPIO_Port, EncB_Pin) == GPIO_PIN_SET ? ceil : 0;
 8001b4a:	2104      	movs	r1, #4
 8001b4c:	4878      	ldr	r0, [pc, #480]	; (8001d30 <main+0x5a0>)
 8001b4e:	f002 fa01 	bl	8003f54 <HAL_GPIO_ReadPin>
 8001b52:	2801      	cmp	r0, #1
 8001b54:	f242 7210 	movw	r2, #10000	; 0x2710
 8001b58:	bf18      	it	ne
 8001b5a:	2200      	movne	r2, #0
			encoderB.current = (encoderB.last * alpha / 100) + (temp * (100 - alpha) / 100);
 8001b5c:	4973      	ldr	r1, [pc, #460]	; (8001d2c <main+0x59c>)
 8001b5e:	880b      	ldrh	r3, [r1, #0]
 8001b60:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001b64:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8001b68:	fb87 c003 	smull	ip, r0, r7, r3
 8001b6c:	17db      	asrs	r3, r3, #31
 8001b6e:	ebc3 1360 	rsb	r3, r3, r0, asr #5
 8001b72:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001b76:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001b7a:	fb87 0202 	smull	r0, r2, r7, r2
 8001b7e:	eb03 1362 	add.w	r3, r3, r2, asr #5
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	804b      	strh	r3, [r1, #2]
			if (encoderA.last < thr && encoderA.current >= thr) {
 8001b86:	8832      	ldrh	r2, [r6, #0]
 8001b88:	f241 3187 	movw	r1, #4999	; 0x1387
 8001b8c:	428a      	cmp	r2, r1
 8001b8e:	d80f      	bhi.n	8001bb0 <main+0x420>
 8001b90:	8871      	ldrh	r1, [r6, #2]
 8001b92:	f241 3287 	movw	r2, #4999	; 0x1387
 8001b96:	4291      	cmp	r1, r2
 8001b98:	d938      	bls.n	8001c0c <main+0x47c>
				if (encoderB.current > thr) {
 8001b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b9e:	4293      	cmp	r3, r2
					encoderCounter--;
 8001ba0:	4a65      	ldr	r2, [pc, #404]	; (8001d38 <main+0x5a8>)
 8001ba2:	8813      	ldrh	r3, [r2, #0]
 8001ba4:	bf8c      	ite	hi
 8001ba6:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
					encoderCounter++;
 8001baa:	3301      	addls	r3, #1
 8001bac:	8013      	strh	r3, [r2, #0]
 8001bae:	e02d      	b.n	8001c0c <main+0x47c>
			} else if (encoderA.last > thr && encoderA.current <= thr) {
 8001bb0:	f241 3188 	movw	r1, #5000	; 0x1388
 8001bb4:	428a      	cmp	r2, r1
 8001bb6:	d929      	bls.n	8001c0c <main+0x47c>
 8001bb8:	4a5b      	ldr	r2, [pc, #364]	; (8001d28 <main+0x598>)
 8001bba:	8851      	ldrh	r1, [r2, #2]
 8001bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc0:	4291      	cmp	r1, r2
 8001bc2:	d823      	bhi.n	8001c0c <main+0x47c>
				if (encoderB.current > thr) {
 8001bc4:	4293      	cmp	r3, r2
					encoderCounter++;
 8001bc6:	4a5c      	ldr	r2, [pc, #368]	; (8001d38 <main+0x5a8>)
 8001bc8:	8813      	ldrh	r3, [r2, #0]
 8001bca:	bf8c      	ite	hi
 8001bcc:	3301      	addhi	r3, #1
					encoderCounter--;
 8001bce:	f103 33ff 	addls.w	r3, r3, #4294967295	; 0xffffffff
 8001bd2:	8013      	strh	r3, [r2, #0]
 8001bd4:	e01a      	b.n	8001c0c <main+0x47c>
			display_counter = 0;
 8001bd6:	2600      	movs	r6, #0
 8001bd8:	4b58      	ldr	r3, [pc, #352]	; (8001d3c <main+0x5ac>)
 8001bda:	801e      	strh	r6, [r3, #0]
			EPD_Display(image);
 8001bdc:	4858      	ldr	r0, [pc, #352]	; (8001d40 <main+0x5b0>)
 8001bde:	f7ff fc96 	bl	800150e <EPD_Display>
			EPD_Sleep();
 8001be2:	f7ff fcb2 	bl	800154a <EPD_Sleep>
			HAL_GPIO_WritePin(Led3_GPIO_Port, Led3_Pin, GPIO_PIN_RESET);
 8001be6:	4632      	mov	r2, r6
 8001be8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bec:	4855      	ldr	r0, [pc, #340]	; (8001d44 <main+0x5b4>)
 8001bee:	f002 f9c9 	bl	8003f84 <HAL_GPIO_WritePin>
    MX_USB_HOST_Process();
 8001bf2:	f00a fdd7 	bl	800c7a4 <MX_USB_HOST_Process>
		HAL_GPIO_WritePin(OtgPower_GPIO_Port, OtgPower_Pin, GPIO_PIN_RESET);
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2101      	movs	r1, #1
 8001bfa:	484d      	ldr	r0, [pc, #308]	; (8001d30 <main+0x5a0>)
 8001bfc:	f002 f9c2 	bl	8003f84 <HAL_GPIO_WritePin>
		if (HAL_GetTick() != lasttick) {
 8001c00:	f001 fb5a 	bl	80032b8 <HAL_GetTick>
 8001c04:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8001c06:	4298      	cmp	r0, r3
 8001c08:	f47f af79 	bne.w	8001afe <main+0x36e>
		if (HAL_GetTick() % (interval * 1000) == 0) {
 8001c0c:	f001 fb54 	bl	80032b8 <HAL_GetTick>
 8001c10:	4b4d      	ldr	r3, [pc, #308]	; (8001d48 <main+0x5b8>)
 8001c12:	fba3 2300 	umull	r2, r3, r3, r0
 8001c16:	0b1b      	lsrs	r3, r3, #12
 8001c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c1c:	fb02 0313 	mls	r3, r2, r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d1e6      	bne.n	8001bf2 <main+0x462>
			HAL_GPIO_WritePin(Led3_GPIO_Port, Led3_Pin, GPIO_PIN_SET);
 8001c24:	2201      	movs	r2, #1
 8001c26:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c2a:	4846      	ldr	r0, [pc, #280]	; (8001d44 <main+0x5b4>)
 8001c2c:	f002 f9aa 	bl	8003f84 <HAL_GPIO_WritePin>
			EPD_Init();
 8001c30:	f7ff fc06 	bl	8001440 <EPD_Init>
			draw_clean(image);
 8001c34:	4e42      	ldr	r6, [pc, #264]	; (8001d40 <main+0x5b0>)
 8001c36:	4630      	mov	r0, r6
 8001c38:	f000 f9f0 	bl	800201c <draw_clean>
			sprintf(row, "RxH %d LR", rxHalfCpltCounter / interval);
 8001c3c:	4b43      	ldr	r3, [pc, #268]	; (8001d4c <main+0x5bc>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4f43      	ldr	r7, [pc, #268]	; (8001d50 <main+0x5c0>)
 8001c42:	fba7 2303 	umull	r2, r3, r7, r3
 8001c46:	089a      	lsrs	r2, r3, #2
 8001c48:	4942      	ldr	r1, [pc, #264]	; (8001d54 <main+0x5c4>)
 8001c4a:	a81f      	add	r0, sp, #124	; 0x7c
 8001c4c:	f00b f9c6 	bl	800cfdc <siprintf>
			draw_text(image, row, 0, 0);
 8001c50:	2300      	movs	r3, #0
 8001c52:	461a      	mov	r2, r3
 8001c54:	a91f      	add	r1, sp, #124	; 0x7c
 8001c56:	4630      	mov	r0, r6
 8001c58:	f000 f9b1 	bl	8001fbe <draw_text>
			sprintf(row, "RxC %d LR", rxCpltCounter / interval);
 8001c5c:	f8df 911c 	ldr.w	r9, [pc, #284]	; 8001d7c <main+0x5ec>
 8001c60:	f8d9 3000 	ldr.w	r3, [r9]
 8001c64:	fba7 2303 	umull	r2, r3, r7, r3
 8001c68:	089a      	lsrs	r2, r3, #2
 8001c6a:	493b      	ldr	r1, [pc, #236]	; (8001d58 <main+0x5c8>)
 8001c6c:	a81f      	add	r0, sp, #124	; 0x7c
 8001c6e:	f00b f9b5 	bl	800cfdc <siprintf>
			draw_text(image, row, 0, 20);
 8001c72:	2314      	movs	r3, #20
 8001c74:	2200      	movs	r2, #0
 8001c76:	a91f      	add	r1, sp, #124	; 0x7c
 8001c78:	4630      	mov	r0, r6
 8001c7a:	f000 f9a0 	bl	8001fbe <draw_text>
			sprintf(row, "TxH %d L", txHalfCpltCounter / interval);
 8001c7e:	f8df 8100 	ldr.w	r8, [pc, #256]	; 8001d80 <main+0x5f0>
 8001c82:	f8d8 3000 	ldr.w	r3, [r8]
 8001c86:	fba7 2303 	umull	r2, r3, r7, r3
 8001c8a:	089a      	lsrs	r2, r3, #2
 8001c8c:	4933      	ldr	r1, [pc, #204]	; (8001d5c <main+0x5cc>)
 8001c8e:	a81f      	add	r0, sp, #124	; 0x7c
 8001c90:	f00b f9a4 	bl	800cfdc <siprintf>
			draw_text(image, row, 0, 40);
 8001c94:	2328      	movs	r3, #40	; 0x28
 8001c96:	2200      	movs	r2, #0
 8001c98:	a91f      	add	r1, sp, #124	; 0x7c
 8001c9a:	4630      	mov	r0, r6
 8001c9c:	f000 f98f 	bl	8001fbe <draw_text>
			sprintf(row, "TxC %d R", txCpltCounter / interval);
 8001ca0:	4a2f      	ldr	r2, [pc, #188]	; (8001d60 <main+0x5d0>)
 8001ca2:	6813      	ldr	r3, [r2, #0]
 8001ca4:	fba7 1303 	umull	r1, r3, r7, r3
 8001ca8:	089a      	lsrs	r2, r3, #2
 8001caa:	492e      	ldr	r1, [pc, #184]	; (8001d64 <main+0x5d4>)
 8001cac:	a81f      	add	r0, sp, #124	; 0x7c
 8001cae:	f00b f995 	bl	800cfdc <siprintf>
			draw_text(image, row, 0, 60);
 8001cb2:	233c      	movs	r3, #60	; 0x3c
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	a91f      	add	r1, sp, #124	; 0x7c
 8001cb8:	4630      	mov	r0, r6
 8001cba:	f000 f980 	bl	8001fbe <draw_text>
			sprintf(row, "Enc %d", encoderCounter);
 8001cbe:	4b1e      	ldr	r3, [pc, #120]	; (8001d38 <main+0x5a8>)
 8001cc0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001cc4:	4928      	ldr	r1, [pc, #160]	; (8001d68 <main+0x5d8>)
 8001cc6:	a81f      	add	r0, sp, #124	; 0x7c
 8001cc8:	f00b f988 	bl	800cfdc <siprintf>
			draw_text(image, row, 0, 80);
 8001ccc:	2350      	movs	r3, #80	; 0x50
 8001cce:	2200      	movs	r2, #0
 8001cd0:	a91f      	add	r1, sp, #124	; 0x7c
 8001cd2:	4630      	mov	r0, r6
 8001cd4:	f000 f973 	bl	8001fbe <draw_text>
			rxHalfCpltCounter = 0;
 8001cd8:	2600      	movs	r6, #0
 8001cda:	4b1c      	ldr	r3, [pc, #112]	; (8001d4c <main+0x5bc>)
 8001cdc:	601e      	str	r6, [r3, #0]
			rxCpltCounter = 0;
 8001cde:	f8c9 6000 	str.w	r6, [r9]
			txHalfCpltCounter = 0;
 8001ce2:	f8c8 6000 	str.w	r6, [r8]
			txCpltCounter = 0;
 8001ce6:	4a1e      	ldr	r2, [pc, #120]	; (8001d60 <main+0x5d0>)
 8001ce8:	6016      	str	r6, [r2, #0]
			for (int i = 0; i < 296; i++) {
 8001cea:	4f20      	ldr	r7, [pc, #128]	; (8001d6c <main+0x5dc>)
				toggle_single_pixel(image, 64 + (int)((float)display_array[i] / 17000.0 * 64.0), i);
 8001cec:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8001d40 <main+0x5b0>
 8001cf0:	fa1f f886 	uxth.w	r8, r6
 8001cf4:	f857 0b04 	ldr.w	r0, [r7], #4
 8001cf8:	f7fe fc1e 	bl	8000538 <__aeabi_f2d>
 8001cfc:	4622      	mov	r2, r4
 8001cfe:	462b      	mov	r3, r5
 8001d00:	f7fe fd9c 	bl	800083c <__aeabi_ddiv>
 8001d04:	4652      	mov	r2, sl
 8001d06:	465b      	mov	r3, fp
 8001d08:	f7fe fc6e 	bl	80005e8 <__aeabi_dmul>
 8001d0c:	f7fe fe7e 	bl	8000a0c <__aeabi_d2iz>
 8001d10:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8001d14:	4642      	mov	r2, r8
 8001d16:	b289      	uxth	r1, r1
 8001d18:	4648      	mov	r0, r9
 8001d1a:	f000 f85c 	bl	8001dd6 <toggle_single_pixel>
			for (int i = 0; i < 296; i++) {
 8001d1e:	3601      	adds	r6, #1
 8001d20:	f5b6 7f94 	cmp.w	r6, #296	; 0x128
 8001d24:	d1e4      	bne.n	8001cf0 <main+0x560>
 8001d26:	e756      	b.n	8001bd6 <main+0x446>
 8001d28:	20002e80 	.word	0x20002e80
 8001d2c:	2000048c 	.word	0x2000048c
 8001d30:	40020800 	.word	0x40020800
 8001d34:	51eb851f 	.word	0x51eb851f
 8001d38:	200003aa 	.word	0x200003aa
 8001d3c:	200003a8 	.word	0x200003a8
 8001d40:	20000490 	.word	0x20000490
 8001d44:	40020c00 	.word	0x40020c00
 8001d48:	d1b71759 	.word	0xd1b71759
 8001d4c:	200003b0 	.word	0x200003b0
 8001d50:	cccccccd 	.word	0xcccccccd
 8001d54:	0800d9f0 	.word	0x0800d9f0
 8001d58:	0800d9fc 	.word	0x0800d9fc
 8001d5c:	0800da08 	.word	0x0800da08
 8001d60:	200003b4 	.word	0x200003b4
 8001d64:	0800da14 	.word	0x0800da14
 8001d68:	0800da20 	.word	0x0800da20
 8001d6c:	20002f34 	.word	0x20002f34
 8001d70:	00000000 	.word	0x00000000
 8001d74:	40d09a00 	.word	0x40d09a00
 8001d78:	40500000 	.word	0x40500000
 8001d7c:	200003ac 	.word	0x200003ac
 8001d80:	200003b8 	.word	0x200003b8

08001d84 <Error_Handler>:
 8001d84:	b672      	cpsid	i
	while (1)
 8001d86:	e7fe      	b.n	8001d86 <Error_Handler+0x2>

08001d88 <read_font_pixel>:
#define CANVAS_WIDTH 128
#define CANVAS_HEIGHT 296

uint8_t font[516] = { 0x0, 0x18, 0x3C, 0x66, 0x66, 0x66, 0x7E, 0x66, 0x66, 0x66, 0x0, 0x0, 0x0, 0x7C, 0x66, 0x66, 0x66, 0x7C, 0x66, 0x66, 0x66, 0x7C, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x60, 0x60, 0x60, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x78, 0x6C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6C, 0x78, 0x0, 0x0, 0x0, 0x7E, 0x60, 0x60, 0x60, 0x78, 0x60, 0x60, 0x60, 0x7E, 0x0, 0x0, 0x0, 0x7E, 0x60, 0x60, 0x60, 0x78, 0x60, 0x60, 0x60, 0x60, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x60, 0x60, 0x6E, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x66, 0x66, 0x66, 0x66, 0x7E, 0x66, 0x66, 0x66, 0x66, 0x0, 0x0, 0x0, 0x3C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x0, 0x0, 0x0, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x66, 0x66, 0x6C, 0x6C, 0x78, 0x6C, 0x6C, 0x66, 0x66, 0x0, 0x0, 0x0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x7E, 0x0, 0x0, 0x0, 0x63, 0x63, 0x77, 0x7F, 0x6B, 0x6B, 0x63, 0x63, 0x63, 0x0, 0x0, 0x0, 0x63, 0x63, 0x73, 0x7B, 0x6F, 0x67, 0x63, 0x63, 0x63, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x7C, 0x66, 0x66, 0x66, 0x7C, 0x60, 0x60, 0x60, 0x60, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0xC, 0x6, 0x0, 0x7C, 0x66, 0x66, 0x66, 0x7C, 0x6C, 0x66, 0x66, 0x64, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x60, 0x30, 0x18, 0xC, 0x6, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x7E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x0, 0x0, 0x0, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x0, 0x0, 0x0, 0x63, 0x63, 0x63, 0x63, 0x6B, 0x6B, 0x36, 0x36, 0x36, 0x0, 0x0, 0x0, 0x66, 0x66, 0x34, 0x18, 0x18, 0x2C, 0x66, 0x66, 0x66, 0x0, 0x0, 0x0, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x18, 0x18, 0x18, 0x0, 0x0, 0x0, 0x7E, 0x6, 0x6, 0xC, 0x18, 0x30, 0x60, 0x60, 0x7E, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x6E, 0x6E, 0x66, 0x76, 0x76, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x6, 0xE, 0x3E, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x6, 0xC, 0x18, 0x30, 0x60, 0x7E, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x6, 0x1C, 0x6, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x30, 0x30, 0x36, 0x36, 0x36, 0x66, 0x7F, 0x6, 0x6, 0x0, 0x0, 0x0, 0x7E, 0x60, 0x60, 0x60, 0x7C, 0x6, 0x6, 0xC, 0x78, 0x0, 0x0, 0x0, 0x1C, 0x38, 0x30, 0x7C, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x7E, 0x6, 0xC, 0xC, 0x18, 0x18, 0x30, 0x30, 0x30, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x76, 0x3C, 0x6E, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x66, 0x66, 0x3E, 0xC, 0x1C, 0x38, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0x38, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0x38, 0x18, 0x30, 0x0, 0x0, 0x0, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7E, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0xC, 0x18, 0x30, 0x60, 0x30, 0x18, 0xC, 0x6, 0x0, 0x0, 0x0, 0x60, 0x30, 0x18, 0xC, 0x6, 0xC, 0x18, 0x30, 0x60, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};

uint8_t read_font_pixel(uint8_t *image, uint16_t x, uint16_t y) {
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	460b      	mov	r3, r1
 8001d92:	807b      	strh	r3, [r7, #2]
 8001d94:	4613      	mov	r3, r2
 8001d96:	803b      	strh	r3, [r7, #0]
	uint16_t i = (x +  y * FONT_WIDTH) / 8;
 8001d98:	887a      	ldrh	r2, [r7, #2]
 8001d9a:	883b      	ldrh	r3, [r7, #0]
 8001d9c:	00db      	lsls	r3, r3, #3
 8001d9e:	4413      	add	r3, r2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	da00      	bge.n	8001da6 <read_font_pixel+0x1e>
 8001da4:	3307      	adds	r3, #7
 8001da6:	10db      	asrs	r3, r3, #3
 8001da8:	81fb      	strh	r3, [r7, #14]
	uint8_t pixel_group = image[i];
 8001daa:	89fb      	ldrh	r3, [r7, #14]
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	4413      	add	r3, r2
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	737b      	strb	r3, [r7, #13]
	return ((pixel_group >> (7 - x % 8)) & 0x01);
 8001db4:	7b7a      	ldrb	r2, [r7, #13]
 8001db6:	887b      	ldrh	r3, [r7, #2]
 8001db8:	43db      	mvns	r3, r3
 8001dba:	f003 0307 	and.w	r3, r3, #7
 8001dbe:	fa42 f303 	asr.w	r3, r2, r3
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	b2db      	uxtb	r3, r3
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <toggle_single_pixel>:

void toggle_single_pixel(uint8_t *image, uint16_t x, uint16_t y) {
 8001dd6:	b480      	push	{r7}
 8001dd8:	b085      	sub	sp, #20
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
 8001dde:	460b      	mov	r3, r1
 8001de0:	807b      	strh	r3, [r7, #2]
 8001de2:	4613      	mov	r3, r2
 8001de4:	803b      	strh	r3, [r7, #0]
	uint16_t i = (x +  y * CANVAS_WIDTH) / 8;
 8001de6:	887a      	ldrh	r2, [r7, #2]
 8001de8:	883b      	ldrh	r3, [r7, #0]
 8001dea:	01db      	lsls	r3, r3, #7
 8001dec:	4413      	add	r3, r2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	da00      	bge.n	8001df4 <toggle_single_pixel+0x1e>
 8001df2:	3307      	adds	r3, #7
 8001df4:	10db      	asrs	r3, r3, #3
 8001df6:	81fb      	strh	r3, [r7, #14]
	if (x < CANVAS_WIDTH && y < CANVAS_HEIGHT) image[i] ^= (0x01 << (7 - x % 8));
 8001df8:	887b      	ldrh	r3, [r7, #2]
 8001dfa:	2b7f      	cmp	r3, #127	; 0x7f
 8001dfc:	d817      	bhi.n	8001e2e <toggle_single_pixel+0x58>
 8001dfe:	883b      	ldrh	r3, [r7, #0]
 8001e00:	f5b3 7f94 	cmp.w	r3, #296	; 0x128
 8001e04:	d213      	bcs.n	8001e2e <toggle_single_pixel+0x58>
 8001e06:	89fb      	ldrh	r3, [r7, #14]
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	b25a      	sxtb	r2, r3
 8001e10:	887b      	ldrh	r3, [r7, #2]
 8001e12:	43db      	mvns	r3, r3
 8001e14:	f003 0307 	and.w	r3, r3, #7
 8001e18:	2101      	movs	r1, #1
 8001e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1e:	b25b      	sxtb	r3, r3
 8001e20:	4053      	eors	r3, r2
 8001e22:	b259      	sxtb	r1, r3
 8001e24:	89fb      	ldrh	r3, [r7, #14]
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	4413      	add	r3, r2
 8001e2a:	b2ca      	uxtb	r2, r1
 8001e2c:	701a      	strb	r2, [r3, #0]
}
 8001e2e:	bf00      	nop
 8001e30:	3714      	adds	r7, #20
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <draw_rectangle>:
	for (uint16_t i = 0; i < CANVAS_WIDTH * CANVAS_HEIGHT / 8; i++) {
		image[i] = ~image[i];
	}
}

void draw_rectangle(uint8_t *image, uint16_t x, uint16_t y, uint16_t w, uint16_t h) {
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b086      	sub	sp, #24
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	60f8      	str	r0, [r7, #12]
 8001e42:	4608      	mov	r0, r1
 8001e44:	4611      	mov	r1, r2
 8001e46:	461a      	mov	r2, r3
 8001e48:	4603      	mov	r3, r0
 8001e4a:	817b      	strh	r3, [r7, #10]
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	813b      	strh	r3, [r7, #8]
 8001e50:	4613      	mov	r3, r2
 8001e52:	80fb      	strh	r3, [r7, #6]
	for (uint16_t i = 0; i < h; i++) {
 8001e54:	2300      	movs	r3, #0
 8001e56:	82fb      	strh	r3, [r7, #22]
 8001e58:	e018      	b.n	8001e8c <draw_rectangle+0x52>
		for (uint16_t j = 0; j < w; j++) {
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	82bb      	strh	r3, [r7, #20]
 8001e5e:	e00e      	b.n	8001e7e <draw_rectangle+0x44>
			toggle_single_pixel(image, x + j, y + i);
 8001e60:	897a      	ldrh	r2, [r7, #10]
 8001e62:	8abb      	ldrh	r3, [r7, #20]
 8001e64:	4413      	add	r3, r2
 8001e66:	b299      	uxth	r1, r3
 8001e68:	893a      	ldrh	r2, [r7, #8]
 8001e6a:	8afb      	ldrh	r3, [r7, #22]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	461a      	mov	r2, r3
 8001e72:	68f8      	ldr	r0, [r7, #12]
 8001e74:	f7ff ffaf 	bl	8001dd6 <toggle_single_pixel>
		for (uint16_t j = 0; j < w; j++) {
 8001e78:	8abb      	ldrh	r3, [r7, #20]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	82bb      	strh	r3, [r7, #20]
 8001e7e:	8aba      	ldrh	r2, [r7, #20]
 8001e80:	88fb      	ldrh	r3, [r7, #6]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d3ec      	bcc.n	8001e60 <draw_rectangle+0x26>
	for (uint16_t i = 0; i < h; i++) {
 8001e86:	8afb      	ldrh	r3, [r7, #22]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	82fb      	strh	r3, [r7, #22]
 8001e8c:	8afa      	ldrh	r2, [r7, #22]
 8001e8e:	8c3b      	ldrh	r3, [r7, #32]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d3e2      	bcc.n	8001e5a <draw_rectangle+0x20>
		}
	}
}
 8001e94:	bf00      	nop
 8001e96:	bf00      	nop
 8001e98:	3718      	adds	r7, #24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
	...

08001ea0 <draw_char>:

void draw_char(uint8_t *image, uint16_t x, uint16_t y, uint16_t c) {
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	4608      	mov	r0, r1
 8001eaa:	4611      	mov	r1, r2
 8001eac:	461a      	mov	r2, r3
 8001eae:	4603      	mov	r3, r0
 8001eb0:	817b      	strh	r3, [r7, #10]
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	813b      	strh	r3, [r7, #8]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	80fb      	strh	r3, [r7, #6]
	uint16_t font_offset = c * FONT_HEIGHT;
 8001eba:	88fb      	ldrh	r3, [r7, #6]
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	0052      	lsls	r2, r2, #1
 8001ec0:	4413      	add	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	827b      	strh	r3, [r7, #18]
	for (uint16_t i = 0; i < FONT_HEIGHT; i++) {
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	82fb      	strh	r3, [r7, #22]
 8001eca:	e023      	b.n	8001f14 <draw_char+0x74>
		for (uint16_t j = 0; j < FONT_WIDTH; j++) {
 8001ecc:	2300      	movs	r3, #0
 8001ece:	82bb      	strh	r3, [r7, #20]
 8001ed0:	e01a      	b.n	8001f08 <draw_char+0x68>
			if (read_font_pixel(font, j, i + font_offset)) {
 8001ed2:	8afa      	ldrh	r2, [r7, #22]
 8001ed4:	8a7b      	ldrh	r3, [r7, #18]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	8abb      	ldrh	r3, [r7, #20]
 8001edc:	4619      	mov	r1, r3
 8001ede:	4811      	ldr	r0, [pc, #68]	; (8001f24 <draw_char+0x84>)
 8001ee0:	f7ff ff52 	bl	8001d88 <read_font_pixel>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d00b      	beq.n	8001f02 <draw_char+0x62>
				toggle_single_pixel(image, x + j, y + i);
 8001eea:	897a      	ldrh	r2, [r7, #10]
 8001eec:	8abb      	ldrh	r3, [r7, #20]
 8001eee:	4413      	add	r3, r2
 8001ef0:	b299      	uxth	r1, r3
 8001ef2:	893a      	ldrh	r2, [r7, #8]
 8001ef4:	8afb      	ldrh	r3, [r7, #22]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	461a      	mov	r2, r3
 8001efc:	68f8      	ldr	r0, [r7, #12]
 8001efe:	f7ff ff6a 	bl	8001dd6 <toggle_single_pixel>
		for (uint16_t j = 0; j < FONT_WIDTH; j++) {
 8001f02:	8abb      	ldrh	r3, [r7, #20]
 8001f04:	3301      	adds	r3, #1
 8001f06:	82bb      	strh	r3, [r7, #20]
 8001f08:	8abb      	ldrh	r3, [r7, #20]
 8001f0a:	2b07      	cmp	r3, #7
 8001f0c:	d9e1      	bls.n	8001ed2 <draw_char+0x32>
	for (uint16_t i = 0; i < FONT_HEIGHT; i++) {
 8001f0e:	8afb      	ldrh	r3, [r7, #22]
 8001f10:	3301      	adds	r3, #1
 8001f12:	82fb      	strh	r3, [r7, #22]
 8001f14:	8afb      	ldrh	r3, [r7, #22]
 8001f16:	2b0b      	cmp	r3, #11
 8001f18:	d9d8      	bls.n	8001ecc <draw_char+0x2c>
			}
		}
	}
}
 8001f1a:	bf00      	nop
 8001f1c:	bf00      	nop
 8001f1e:	3718      	adds	r7, #24
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	200000a0 	.word	0x200000a0

08001f28 <translate>:

uint16_t translate(char c) {
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	4603      	mov	r3, r0
 8001f30:	71fb      	strb	r3, [r7, #7]
	if (c >= 'A' && c <= 'Z') {
 8001f32:	79fb      	ldrb	r3, [r7, #7]
 8001f34:	2b40      	cmp	r3, #64	; 0x40
 8001f36:	d907      	bls.n	8001f48 <translate+0x20>
 8001f38:	79fb      	ldrb	r3, [r7, #7]
 8001f3a:	2b5a      	cmp	r3, #90	; 0x5a
 8001f3c:	d804      	bhi.n	8001f48 <translate+0x20>
		return c - 'A';
 8001f3e:	79fb      	ldrb	r3, [r7, #7]
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	3b41      	subs	r3, #65	; 0x41
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	e034      	b.n	8001fb2 <translate+0x8a>
	} else if (c >= 'a' && c <= 'z') {
 8001f48:	79fb      	ldrb	r3, [r7, #7]
 8001f4a:	2b60      	cmp	r3, #96	; 0x60
 8001f4c:	d907      	bls.n	8001f5e <translate+0x36>
 8001f4e:	79fb      	ldrb	r3, [r7, #7]
 8001f50:	2b7a      	cmp	r3, #122	; 0x7a
 8001f52:	d804      	bhi.n	8001f5e <translate+0x36>
		return c - 'a';
 8001f54:	79fb      	ldrb	r3, [r7, #7]
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	3b61      	subs	r3, #97	; 0x61
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	e029      	b.n	8001fb2 <translate+0x8a>
	} else if (c >= '0' && c <= '9') {
 8001f5e:	79fb      	ldrb	r3, [r7, #7]
 8001f60:	2b2f      	cmp	r3, #47	; 0x2f
 8001f62:	d907      	bls.n	8001f74 <translate+0x4c>
 8001f64:	79fb      	ldrb	r3, [r7, #7]
 8001f66:	2b39      	cmp	r3, #57	; 0x39
 8001f68:	d804      	bhi.n	8001f74 <translate+0x4c>
		return c - '0' + 26;
 8001f6a:	79fb      	ldrb	r3, [r7, #7]
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	3b16      	subs	r3, #22
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	e01e      	b.n	8001fb2 <translate+0x8a>
	} else if (c == '.') {
 8001f74:	79fb      	ldrb	r3, [r7, #7]
 8001f76:	2b2e      	cmp	r3, #46	; 0x2e
 8001f78:	d101      	bne.n	8001f7e <translate+0x56>
		return 36;
 8001f7a:	2324      	movs	r3, #36	; 0x24
 8001f7c:	e019      	b.n	8001fb2 <translate+0x8a>
	} else if (c == ',') {
 8001f7e:	79fb      	ldrb	r3, [r7, #7]
 8001f80:	2b2c      	cmp	r3, #44	; 0x2c
 8001f82:	d101      	bne.n	8001f88 <translate+0x60>
		return 37;
 8001f84:	2325      	movs	r3, #37	; 0x25
 8001f86:	e014      	b.n	8001fb2 <translate+0x8a>
	} else if (c == '+') {
 8001f88:	79fb      	ldrb	r3, [r7, #7]
 8001f8a:	2b2b      	cmp	r3, #43	; 0x2b
 8001f8c:	d101      	bne.n	8001f92 <translate+0x6a>
		return 38;
 8001f8e:	2326      	movs	r3, #38	; 0x26
 8001f90:	e00f      	b.n	8001fb2 <translate+0x8a>
	} else if (c == '-') {
 8001f92:	79fb      	ldrb	r3, [r7, #7]
 8001f94:	2b2d      	cmp	r3, #45	; 0x2d
 8001f96:	d101      	bne.n	8001f9c <translate+0x74>
		return 39;
 8001f98:	2327      	movs	r3, #39	; 0x27
 8001f9a:	e00a      	b.n	8001fb2 <translate+0x8a>
	} else if (c == '<') {
 8001f9c:	79fb      	ldrb	r3, [r7, #7]
 8001f9e:	2b3c      	cmp	r3, #60	; 0x3c
 8001fa0:	d101      	bne.n	8001fa6 <translate+0x7e>
		return 40;
 8001fa2:	2328      	movs	r3, #40	; 0x28
 8001fa4:	e005      	b.n	8001fb2 <translate+0x8a>
	} else if (c == '>') {
 8001fa6:	79fb      	ldrb	r3, [r7, #7]
 8001fa8:	2b3e      	cmp	r3, #62	; 0x3e
 8001faa:	d101      	bne.n	8001fb0 <translate+0x88>
		return 41;
 8001fac:	2329      	movs	r3, #41	; 0x29
 8001fae:	e000      	b.n	8001fb2 <translate+0x8a>
	} else {
		return 42; // ' '
 8001fb0:	232a      	movs	r3, #42	; 0x2a
	}
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr

08001fbe <draw_text>:

void draw_text(uint8_t *image, char *text, uint16_t x, uint16_t y) {
 8001fbe:	b590      	push	{r4, r7, lr}
 8001fc0:	b087      	sub	sp, #28
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	60f8      	str	r0, [r7, #12]
 8001fc6:	60b9      	str	r1, [r7, #8]
 8001fc8:	4611      	mov	r1, r2
 8001fca:	461a      	mov	r2, r3
 8001fcc:	460b      	mov	r3, r1
 8001fce:	80fb      	strh	r3, [r7, #6]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	80bb      	strh	r3, [r7, #4]
	uint16_t i = 0;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	82fb      	strh	r3, [r7, #22]
	while(text[i] > 0) {
 8001fd8:	e015      	b.n	8002006 <draw_text+0x48>
		draw_char(image, x + FONT_WIDTH * i, y, translate(text[i]));
 8001fda:	8afb      	ldrh	r3, [r7, #22]
 8001fdc:	00db      	lsls	r3, r3, #3
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	88fb      	ldrh	r3, [r7, #6]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	b29c      	uxth	r4, r3
 8001fe6:	8afb      	ldrh	r3, [r7, #22]
 8001fe8:	68ba      	ldr	r2, [r7, #8]
 8001fea:	4413      	add	r3, r2
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff ff9a 	bl	8001f28 <translate>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	88ba      	ldrh	r2, [r7, #4]
 8001ff8:	4621      	mov	r1, r4
 8001ffa:	68f8      	ldr	r0, [r7, #12]
 8001ffc:	f7ff ff50 	bl	8001ea0 <draw_char>
		i++;
 8002000:	8afb      	ldrh	r3, [r7, #22]
 8002002:	3301      	adds	r3, #1
 8002004:	82fb      	strh	r3, [r7, #22]
	while(text[i] > 0) {
 8002006:	8afb      	ldrh	r3, [r7, #22]
 8002008:	68ba      	ldr	r2, [r7, #8]
 800200a:	4413      	add	r3, r2
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1e3      	bne.n	8001fda <draw_text+0x1c>
	}
}
 8002012:	bf00      	nop
 8002014:	bf00      	nop
 8002016:	371c      	adds	r7, #28
 8002018:	46bd      	mov	sp, r7
 800201a:	bd90      	pop	{r4, r7, pc}

0800201c <draw_clean>:

void draw_clean(uint8_t *image) {
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
	uint16_t bytes = CANVAS_WIDTH * CANVAS_HEIGHT / 8;
 8002024:	f44f 5394 	mov.w	r3, #4736	; 0x1280
 8002028:	81bb      	strh	r3, [r7, #12]
	for (uint16_t i = 0; i < bytes; i++) image[i] = 0xFF;
 800202a:	2300      	movs	r3, #0
 800202c:	81fb      	strh	r3, [r7, #14]
 800202e:	e007      	b.n	8002040 <draw_clean+0x24>
 8002030:	89fb      	ldrh	r3, [r7, #14]
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	4413      	add	r3, r2
 8002036:	22ff      	movs	r2, #255	; 0xff
 8002038:	701a      	strb	r2, [r3, #0]
 800203a:	89fb      	ldrh	r3, [r7, #14]
 800203c:	3301      	adds	r3, #1
 800203e:	81fb      	strh	r3, [r7, #14]
 8002040:	89fa      	ldrh	r2, [r7, #14]
 8002042:	89bb      	ldrh	r3, [r7, #12]
 8002044:	429a      	cmp	r2, r3
 8002046:	d3f3      	bcc.n	8002030 <draw_clean+0x14>
}
 8002048:	bf00      	nop
 800204a:	bf00      	nop
 800204c:	3714      	adds	r7, #20
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
	...

08002058 <overdrive_pedal_init>:
#include "pedalboard_min.h"

// OVERDRIVE

void overdrive_pedal_init(pedal_config_t *conf) {
 8002058:	b490      	push	{r4, r7}
 800205a:	b09a      	sub	sp, #104	; 0x68
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
    conf->float_params[INTENSITY] = (float_parameter_t){4.F, 1.F, 10.F, 0.5F};
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a1a      	ldr	r2, [pc, #104]	; (80020cc <overdrive_pedal_init+0x74>)
 8002064:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8002068:	4613      	mov	r3, r2
 800206a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800206c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[THRESHOLD_HIGH] = (float_parameter_t){32767.F, 0.F, 32767.F, 1.F};
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a17      	ldr	r2, [pc, #92]	; (80020d0 <overdrive_pedal_init+0x78>)
 8002074:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8002078:	4613      	mov	r3, r2
 800207a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800207c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[THRESHOLD_LOW] = (float_parameter_t){28000.F, 0.F, 32767.F, 1.F};
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a14      	ldr	r2, [pc, #80]	; (80020d4 <overdrive_pedal_init+0x7c>)
 8002084:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8002088:	4613      	mov	r3, r2
 800208a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800208c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[SOFTENER] = (float_parameter_t){4.F, 1.F, 10.F, 0.5F};
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a0e      	ldr	r2, [pc, #56]	; (80020cc <overdrive_pedal_init+0x74>)
 8002094:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8002098:	4613      	mov	r3, r2
 800209a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800209c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_1] = (float_parameter_t){1.F, 0.F, 1.F, 0.1F};
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a0d      	ldr	r2, [pc, #52]	; (80020d8 <overdrive_pedal_init+0x80>)
 80020a4:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80020a8:	4613      	mov	r3, r2
 80020aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_2] = (float_parameter_t){0.F, 0.F, 1.F, 0.1F};
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a0a      	ldr	r2, [pc, #40]	; (80020dc <overdrive_pedal_init+0x84>)
 80020b4:	f103 0480 	add.w	r4, r3, #128	; 0x80
 80020b8:	4613      	mov	r3, r2
 80020ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80020c0:	bf00      	nop
 80020c2:	3768      	adds	r7, #104	; 0x68
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bc90      	pop	{r4, r7}
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	0800d6c0 	.word	0x0800d6c0
 80020d0:	0800d6d0 	.word	0x0800d6d0
 80020d4:	0800d6e0 	.word	0x0800d6e0
 80020d8:	0800d6f0 	.word	0x0800d6f0
 80020dc:	0800d700 	.word	0x0800d700

080020e0 <overdrive_process>:

float overdrive_process(float in, pedal_config_t *conf) {
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	ed87 0a01 	vstr	s0, [r7, #4]
 80020ea:	6038      	str	r0, [r7, #0]
    float out = in *  conf->float_params[INTENSITY].value;
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80020f2:	ed97 7a01 	vldr	s14, [r7, #4]
 80020f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020fa:	edc7 7a03 	vstr	s15, [r7, #12]
    out = soft_clip(out, conf->float_params[THRESHOLD_LOW].value, conf->float_params[SOFTENER].value);
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 800210a:	eeb0 1a47 	vmov.f32	s2, s14
 800210e:	eef0 0a67 	vmov.f32	s1, s15
 8002112:	ed97 0a03 	vldr	s0, [r7, #12]
 8002116:	f000 fbab 	bl	8002870 <soft_clip>
 800211a:	ed87 0a03 	vstr	s0, [r7, #12]
    out = hard_clip(out, conf->float_params[THRESHOLD_HIGH].value);
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002124:	eef0 0a67 	vmov.f32	s1, s15
 8002128:	ed97 0a03 	vldr	s0, [r7, #12]
 800212c:	f000 fb70 	bl	8002810 <hard_clip>
 8002130:	ed87 0a03 	vstr	s0, [r7, #12]
    out = mix(out, in, conf->float_params[BALANCE_1].value, conf->float_params[BALANCE_2].value);
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8002140:	eef0 1a47 	vmov.f32	s3, s14
 8002144:	eeb0 1a67 	vmov.f32	s2, s15
 8002148:	edd7 0a01 	vldr	s1, [r7, #4]
 800214c:	ed97 0a03 	vldr	s0, [r7, #12]
 8002150:	f000 fb3e 	bl	80027d0 <mix>
 8002154:	ed87 0a03 	vstr	s0, [r7, #12]
    return out;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	ee07 3a90 	vmov	s15, r3
}
 800215e:	eeb0 0a67 	vmov.f32	s0, s15
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <bitcrusher_rs_pedal_init>:

// BITCRUSHER resolution

void bitcrusher_rs_pedal_init(pedal_config_t *conf) {
 8002168:	b490      	push	{r4, r7}
 800216a:	b08e      	sub	sp, #56	; 0x38
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
    conf->int_params[REDUCT_INTENSITY] = (int_parameter_t){12, 1, 16, 1};
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a0e      	ldr	r2, [pc, #56]	; (80021ac <bitcrusher_rs_pedal_init+0x44>)
 8002174:	f103 0420 	add.w	r4, r3, #32
 8002178:	4613      	mov	r3, r2
 800217a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800217c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_1] = (float_parameter_t){0.5F, 0.F, 1.F, 0.1F};
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a0b      	ldr	r2, [pc, #44]	; (80021b0 <bitcrusher_rs_pedal_init+0x48>)
 8002184:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8002188:	4613      	mov	r3, r2
 800218a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800218c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_2] = (float_parameter_t){0.5F, 0.F, 1.F, 0.1F};
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a07      	ldr	r2, [pc, #28]	; (80021b0 <bitcrusher_rs_pedal_init+0x48>)
 8002194:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8002198:	4613      	mov	r3, r2
 800219a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800219c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80021a0:	bf00      	nop
 80021a2:	3738      	adds	r7, #56	; 0x38
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bc90      	pop	{r4, r7}
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	0800d710 	.word	0x0800d710
 80021b0:	0800d720 	.word	0x0800d720

080021b4 <bitcrusher_rs_process>:

float bitcrusher_rs_process(float in, pedal_config_t *conf) {
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	ed87 0a01 	vstr	s0, [r7, #4]
 80021be:	6038      	str	r0, [r7, #0]
    int16_t shift = conf->int_params[REDUCT_INTENSITY].value;
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	81fb      	strh	r3, [r7, #14]
    int16_t _out = (int16_t)in;
 80021c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80021ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021ce:	ee17 3a90 	vmov	r3, s15
 80021d2:	81bb      	strh	r3, [r7, #12]
    _out = _out >> shift;
 80021d4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80021d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021dc:	fa42 f303 	asr.w	r3, r2, r3
 80021e0:	81bb      	strh	r3, [r7, #12]
    _out = _out << shift;
 80021e2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80021e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	81bb      	strh	r3, [r7, #12]
    _out += (2 << shift -2);
 80021f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021f4:	3b02      	subs	r3, #2
 80021f6:	2202      	movs	r2, #2
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	b29a      	uxth	r2, r3
 80021fe:	89bb      	ldrh	r3, [r7, #12]
 8002200:	4413      	add	r3, r2
 8002202:	b29b      	uxth	r3, r3
 8002204:	81bb      	strh	r3, [r7, #12]
    float out = (float)_out;
 8002206:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800220a:	ee07 3a90 	vmov	s15, r3
 800220e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002212:	edc7 7a02 	vstr	s15, [r7, #8]
    out = mix(out, in, conf->float_params[BALANCE_1].value, conf->float_params[BALANCE_2].value);
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8002222:	eef0 1a47 	vmov.f32	s3, s14
 8002226:	eeb0 1a67 	vmov.f32	s2, s15
 800222a:	edd7 0a01 	vldr	s1, [r7, #4]
 800222e:	ed97 0a02 	vldr	s0, [r7, #8]
 8002232:	f000 facd 	bl	80027d0 <mix>
 8002236:	ed87 0a02 	vstr	s0, [r7, #8]
    return out;
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	ee07 3a90 	vmov	s15, r3
}
 8002240:	eeb0 0a67 	vmov.f32	s0, s15
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
	...

0800224c <tremolo_pedal_init>:

// TREMOLO

void tremolo_pedal_init(pedal_config_t *conf) {
 800224c:	b490      	push	{r4, r7}
 800224e:	b092      	sub	sp, #72	; 0x48
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
    conf->int_params[COUNTER] = (int_parameter_t){0, 1, 0, 0};
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	611a      	str	r2, [r3, #16]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2201      	movs	r2, #1
 800225e:	615a      	str	r2, [r3, #20]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	619a      	str	r2, [r3, #24]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	61da      	str	r2, [r3, #28]
    conf->float_params[SPEED] = (float_parameter_t){2.F, 0.1F, 10.F, 0.1F};
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4a0e      	ldr	r2, [pc, #56]	; (80022a8 <tremolo_pedal_init+0x5c>)
 8002270:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8002274:	4613      	mov	r3, r2
 8002276:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002278:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_1] = (float_parameter_t){0.2F, 0.F, 1.F, 0.1F};
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a0b      	ldr	r2, [pc, #44]	; (80022ac <tremolo_pedal_init+0x60>)
 8002280:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8002284:	4613      	mov	r3, r2
 8002286:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002288:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_2] = (float_parameter_t){0.8F, 0.F, 1.F, 0.1F};
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4a08      	ldr	r2, [pc, #32]	; (80022b0 <tremolo_pedal_init+0x64>)
 8002290:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8002294:	4613      	mov	r3, r2
 8002296:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002298:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800229c:	bf00      	nop
 800229e:	3748      	adds	r7, #72	; 0x48
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bc90      	pop	{r4, r7}
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	0800d730 	.word	0x0800d730
 80022ac:	0800d740 	.word	0x0800d740
 80022b0:	0800d750 	.word	0x0800d750

080022b4 <tremolo_process>:

float tremolo_process(float in, pedal_config_t *conf) {
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	ed87 0a01 	vstr	s0, [r7, #4]
 80022be:	6038      	str	r0, [r7, #0]
    float tone = 440.0F;
 80022c0:	4b1c      	ldr	r3, [pc, #112]	; (8002334 <tremolo_process+0x80>)
 80022c2:	60fb      	str	r3, [r7, #12]
    float out = in * wave_gen('s', conf->int_params[COUNTER].value, tone * conf->float_params[SPEED].value);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	461a      	mov	r2, r3
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 80022d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80022d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022d8:	eeb0 0a67 	vmov.f32	s0, s15
 80022dc:	4611      	mov	r1, r2
 80022de:	2073      	movs	r0, #115	; 0x73
 80022e0:	f000 fb42 	bl	8002968 <wave_gen>
 80022e4:	eeb0 7a40 	vmov.f32	s14, s0
 80022e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80022ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022f0:	edc7 7a02 	vstr	s15, [r7, #8]
    conf->int_params[COUNTER].value++;
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	1c5a      	adds	r2, r3, #1
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	611a      	str	r2, [r3, #16]
    out = mix(out, in, conf->float_params[BALANCE_1].value, conf->float_params[BALANCE_2].value);
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 800230a:	eef0 1a47 	vmov.f32	s3, s14
 800230e:	eeb0 1a67 	vmov.f32	s2, s15
 8002312:	edd7 0a01 	vldr	s1, [r7, #4]
 8002316:	ed97 0a02 	vldr	s0, [r7, #8]
 800231a:	f000 fa59 	bl	80027d0 <mix>
 800231e:	ed87 0a02 	vstr	s0, [r7, #8]
    return out;
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	ee07 3a90 	vmov	s15, r3
}
 8002328:	eeb0 0a67 	vmov.f32	s0, s15
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	43dc0000 	.word	0x43dc0000

08002338 <overdrive_sqrt_pedal_init>:

// OVERDRIVE_SQRT

void overdrive_sqrt_pedal_init(pedal_config_t *conf) {
 8002338:	b490      	push	{r4, r7}
 800233a:	b092      	sub	sp, #72	; 0x48
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
    conf->float_params[INTENSITY] = (float_parameter_t){500.F, 0.F, 2000.F, 100.F};
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a12      	ldr	r2, [pc, #72]	; (800238c <overdrive_sqrt_pedal_init+0x54>)
 8002344:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8002348:	4613      	mov	r3, r2
 800234a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800234c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[THRESHOLD_HIGH] = (float_parameter_t){32767.F, 0.F, 32767.F, 1.F};
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a0f      	ldr	r2, [pc, #60]	; (8002390 <overdrive_sqrt_pedal_init+0x58>)
 8002354:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8002358:	4613      	mov	r3, r2
 800235a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800235c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_1] = (float_parameter_t){0.25F, 0.F, 1.F, 0.1F};
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4a0c      	ldr	r2, [pc, #48]	; (8002394 <overdrive_sqrt_pedal_init+0x5c>)
 8002364:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8002368:	4613      	mov	r3, r2
 800236a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800236c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_2] = (float_parameter_t){0.75F, 0.F, 1.F, 0.1F};
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a09      	ldr	r2, [pc, #36]	; (8002398 <overdrive_sqrt_pedal_init+0x60>)
 8002374:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8002378:	4613      	mov	r3, r2
 800237a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800237c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002380:	bf00      	nop
 8002382:	3748      	adds	r7, #72	; 0x48
 8002384:	46bd      	mov	sp, r7
 8002386:	bc90      	pop	{r4, r7}
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	0800d760 	.word	0x0800d760
 8002390:	0800d6d0 	.word	0x0800d6d0
 8002394:	0800d770 	.word	0x0800d770
 8002398:	0800d780 	.word	0x0800d780

0800239c <overdrive_sqrt_process>:

float overdrive_sqrt_process(float in, pedal_config_t *conf) {
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	ed87 0a01 	vstr	s0, [r7, #4]
 80023a6:	6038      	str	r0, [r7, #0]
    float out;
    if (in > 0.0F) {
 80023a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80023ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023b4:	dd06      	ble.n	80023c4 <overdrive_sqrt_process+0x28>
        out = square_root(in);
 80023b6:	ed97 0a01 	vldr	s0, [r7, #4]
 80023ba:	f000 faa4 	bl	8002906 <square_root>
 80023be:	ed87 0a03 	vstr	s0, [r7, #12]
 80023c2:	e00d      	b.n	80023e0 <overdrive_sqrt_process+0x44>
    } else {
        out = -square_root(-in);
 80023c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80023c8:	eef1 7a67 	vneg.f32	s15, s15
 80023cc:	eeb0 0a67 	vmov.f32	s0, s15
 80023d0:	f000 fa99 	bl	8002906 <square_root>
 80023d4:	eef0 7a40 	vmov.f32	s15, s0
 80023d8:	eef1 7a67 	vneg.f32	s15, s15
 80023dc:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    out = out * conf->float_params[INTENSITY].value;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80023e6:	ed97 7a03 	vldr	s14, [r7, #12]
 80023ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023ee:	edc7 7a03 	vstr	s15, [r7, #12]
    out = hard_clip(out, conf->float_params[THRESHOLD_HIGH].value);
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80023f8:	eef0 0a67 	vmov.f32	s1, s15
 80023fc:	ed97 0a03 	vldr	s0, [r7, #12]
 8002400:	f000 fa06 	bl	8002810 <hard_clip>
 8002404:	ed87 0a03 	vstr	s0, [r7, #12]
    out = mix(out, in, conf->float_params[BALANCE_1].value, conf->float_params[BALANCE_2].value);
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8002414:	eef0 1a47 	vmov.f32	s3, s14
 8002418:	eeb0 1a67 	vmov.f32	s2, s15
 800241c:	edd7 0a01 	vldr	s1, [r7, #4]
 8002420:	ed97 0a03 	vldr	s0, [r7, #12]
 8002424:	f000 f9d4 	bl	80027d0 <mix>
 8002428:	ed87 0a03 	vstr	s0, [r7, #12]
    return out;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	ee07 3a90 	vmov	s15, r3
}
 8002432:	eeb0 0a67 	vmov.f32	s0, s15
 8002436:	3710      	adds	r7, #16
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <amplifier_pedal_init>:

// AMPLIFIER

void amplifier_pedal_init(pedal_config_t *conf) {
 800243c:	b490      	push	{r4, r7}
 800243e:	b08a      	sub	sp, #40	; 0x28
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
    conf->float_params[INTENSITY] = (float_parameter_t){0.5F, 0.1F, 10.F, 0.1F};
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4a0a      	ldr	r2, [pc, #40]	; (8002470 <amplifier_pedal_init+0x34>)
 8002448:	f103 0430 	add.w	r4, r3, #48	; 0x30
 800244c:	4613      	mov	r3, r2
 800244e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002450:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[THRESHOLD_HIGH] = (float_parameter_t){32767.F, 0.F, 32767.F, 1.F};
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a07      	ldr	r2, [pc, #28]	; (8002474 <amplifier_pedal_init+0x38>)
 8002458:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800245c:	4613      	mov	r3, r2
 800245e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002460:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002464:	bf00      	nop
 8002466:	3728      	adds	r7, #40	; 0x28
 8002468:	46bd      	mov	sp, r7
 800246a:	bc90      	pop	{r4, r7}
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	0800d790 	.word	0x0800d790
 8002474:	0800d6d0 	.word	0x0800d6d0

08002478 <amplifier_process>:

float amplifier_process(float in, pedal_config_t *conf) {
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002482:	6038      	str	r0, [r7, #0]
    float out = in * conf->float_params[INTENSITY].value;
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800248a:	ed97 7a01 	vldr	s14, [r7, #4]
 800248e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002492:	edc7 7a03 	vstr	s15, [r7, #12]
    out = hard_clip(out, conf->float_params[THRESHOLD_HIGH].value);
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800249c:	eef0 0a67 	vmov.f32	s1, s15
 80024a0:	ed97 0a03 	vldr	s0, [r7, #12]
 80024a4:	f000 f9b4 	bl	8002810 <hard_clip>
 80024a8:	ed87 0a03 	vstr	s0, [r7, #12]
    return out;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	ee07 3a90 	vmov	s15, r3
}
 80024b2:	eeb0 0a67 	vmov.f32	s0, s15
 80024b6:	3710      	adds	r7, #16
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <dyn_amplifier_pedal_init>:

// DYN_AMPLIFIER

void dyn_amplifier_pedal_init(pedal_config_t *conf) {
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
    //conf->float_params[GAIN_INTENSITY] = (float_parameter_t){1000, 0.1, 10, 0.1};
    //conf->float_params[CLIP_THRESHOLD] = (float_parameter_t){32767, 0, 32767, 1};
    //conf->float_params[SOFT_THRESHOLD] = (float_parameter_t){28000, 0, 32767, 1};
    //conf->float_params[BALANCE] = (float_parameter_t){0.5, 0, 1, 0.1};
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <dyn_amplifier_process>:

float dyn_amplifier_process(float in, pedal_config_t *conf) {
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	ed87 0a01 	vstr	s0, [r7, #4]
 80024da:	6038      	str	r0, [r7, #0]
    //    else if (max < conf->float_params[SOFT_THRESHOLD].value) dyn += 0.01;
    //    max = 0;
    //}
    //out = hard_clip(out, conf->float_params[CLIP_THRESHOLD].value);
    //return out;
    return in;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	ee07 3a90 	vmov	s15, r3
}
 80024e2:	eeb0 0a67 	vmov.f32	s0, s15
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <low_pass_filter_pedal_init>:

// LPF

void low_pass_filter_pedal_init(pedal_config_t *conf) {
 80024f0:	b490      	push	{r4, r7}
 80024f2:	b092      	sub	sp, #72	; 0x48
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
    conf->float_params[INTENSITY] = (float_parameter_t){0.9F, 0.0F, 1.0F, 0.01F};
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a11      	ldr	r2, [pc, #68]	; (8002540 <low_pass_filter_pedal_init+0x50>)
 80024fc:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8002500:	4613      	mov	r3, r2
 8002502:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002504:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_1] = (float_parameter_t){1.F, 0.F, 1.F, 0.1F};
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a0e      	ldr	r2, [pc, #56]	; (8002544 <low_pass_filter_pedal_init+0x54>)
 800250c:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8002510:	4613      	mov	r3, r2
 8002512:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002514:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_2] = (float_parameter_t){0.F, 0.F, 1.F, 0.1F};
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a0b      	ldr	r2, [pc, #44]	; (8002548 <low_pass_filter_pedal_init+0x58>)
 800251c:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8002520:	4613      	mov	r3, r2
 8002522:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002524:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[PAST] = (float_parameter_t){0.F, 0.F, 0.F, 0.F};
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	33b0      	adds	r3, #176	; 0xb0
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	605a      	str	r2, [r3, #4]
 8002532:	609a      	str	r2, [r3, #8]
 8002534:	60da      	str	r2, [r3, #12]
}
 8002536:	bf00      	nop
 8002538:	3748      	adds	r7, #72	; 0x48
 800253a:	46bd      	mov	sp, r7
 800253c:	bc90      	pop	{r4, r7}
 800253e:	4770      	bx	lr
 8002540:	0800d7a0 	.word	0x0800d7a0
 8002544:	0800d6f0 	.word	0x0800d6f0
 8002548:	0800d700 	.word	0x0800d700

0800254c <low_pass_filter_process>:

float low_pass_filter_process(float in, pedal_config_t *conf) {
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	ed87 0a01 	vstr	s0, [r7, #4]
 8002556:	6038      	str	r0, [r7, #0]
    float alpha = conf->float_params[INTENSITY].value;
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255c:	60fb      	str	r3, [r7, #12]
    float out = conf->float_params[PAST].value * alpha + (1.F - alpha) * in;
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 8002564:	edd7 7a03 	vldr	s15, [r7, #12]
 8002568:	ee27 7a27 	vmul.f32	s14, s14, s15
 800256c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002570:	edd7 7a03 	vldr	s15, [r7, #12]
 8002574:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002578:	edd7 7a01 	vldr	s15, [r7, #4]
 800257c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002580:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002584:	edc7 7a02 	vstr	s15, [r7, #8]
    conf->float_params[PAST].value = out;
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	68ba      	ldr	r2, [r7, #8]
 800258c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    out = mix(out, in, conf->float_params[BALANCE_1].value, conf->float_params[BALANCE_2].value);
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 800259c:	eef0 1a47 	vmov.f32	s3, s14
 80025a0:	eeb0 1a67 	vmov.f32	s2, s15
 80025a4:	edd7 0a01 	vldr	s1, [r7, #4]
 80025a8:	ed97 0a02 	vldr	s0, [r7, #8]
 80025ac:	f000 f910 	bl	80027d0 <mix>
 80025b0:	ed87 0a02 	vstr	s0, [r7, #8]
    return out;
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	ee07 3a90 	vmov	s15, r3
}
 80025ba:	eeb0 0a67 	vmov.f32	s0, s15
 80025be:	3710      	adds	r7, #16
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <fuzz_pedal_init>:

// FUZZ

void fuzz_pedal_init(pedal_config_t *conf) {
 80025c4:	b490      	push	{r4, r7}
 80025c6:	b09e      	sub	sp, #120	; 0x78
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
    conf->int_params[COUNTER] = (int_parameter_t){0, 1, 0, 0};
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	611a      	str	r2, [r3, #16]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2201      	movs	r2, #1
 80025d6:	615a      	str	r2, [r3, #20]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	619a      	str	r2, [r3, #24]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	61da      	str	r2, [r3, #28]
    conf->float_params[INTENSITY] = (float_parameter_t){4.F, 1.F, 10.F, 0.5F};
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a1a      	ldr	r2, [pc, #104]	; (8002650 <fuzz_pedal_init+0x8c>)
 80025e8:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80025ec:	4613      	mov	r3, r2
 80025ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[THRESHOLD_HIGH] = (float_parameter_t){32767.F, 0.F, 32767.F, 1.F};
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a17      	ldr	r2, [pc, #92]	; (8002654 <fuzz_pedal_init+0x90>)
 80025f8:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80025fc:	4613      	mov	r3, r2
 80025fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002600:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[HEIGHT] = (float_parameter_t){2048.F, 0.F, 8192.F, 32.F};
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a14      	ldr	r2, [pc, #80]	; (8002658 <fuzz_pedal_init+0x94>)
 8002608:	f103 0490 	add.w	r4, r3, #144	; 0x90
 800260c:	4613      	mov	r3, r2
 800260e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002610:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[SPEED] = (float_parameter_t){1.F, 0.1F, 10.F, 0.1F};
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4a11      	ldr	r2, [pc, #68]	; (800265c <fuzz_pedal_init+0x98>)
 8002618:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 800261c:	4613      	mov	r3, r2
 800261e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002620:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_1] = (float_parameter_t){1.F, 0.F, 1.F, 0.1F};
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	4a0e      	ldr	r2, [pc, #56]	; (8002660 <fuzz_pedal_init+0x9c>)
 8002628:	f103 0470 	add.w	r4, r3, #112	; 0x70
 800262c:	4613      	mov	r3, r2
 800262e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002630:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_2] = (float_parameter_t){0.F, 0.F, 1.F, 0.1F};
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4a0b      	ldr	r2, [pc, #44]	; (8002664 <fuzz_pedal_init+0xa0>)
 8002638:	f103 0480 	add.w	r4, r3, #128	; 0x80
 800263c:	4613      	mov	r3, r2
 800263e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002640:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002644:	bf00      	nop
 8002646:	3778      	adds	r7, #120	; 0x78
 8002648:	46bd      	mov	sp, r7
 800264a:	bc90      	pop	{r4, r7}
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	0800d6c0 	.word	0x0800d6c0
 8002654:	0800d6d0 	.word	0x0800d6d0
 8002658:	0800d7b0 	.word	0x0800d7b0
 800265c:	0800d7c0 	.word	0x0800d7c0
 8002660:	0800d6f0 	.word	0x0800d6f0
 8002664:	0800d700 	.word	0x0800d700

08002668 <fuzz_process>:

float fuzz_process(float in, pedal_config_t *conf) {
 8002668:	b580      	push	{r7, lr}
 800266a:	b088      	sub	sp, #32
 800266c:	af00      	add	r7, sp, #0
 800266e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002672:	6038      	str	r0, [r7, #0]
    float out = in * conf->float_params[INTENSITY].value;
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800267a:	ed97 7a01 	vldr	s14, [r7, #4]
 800267e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002682:	edc7 7a07 	vstr	s15, [r7, #28]
    float threshold_high = conf->float_params[THRESHOLD_HIGH].value;
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	61bb      	str	r3, [r7, #24]
    float height = conf->float_params[HEIGHT].value;
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002692:	617b      	str	r3, [r7, #20]
    float speed = conf->float_params[SPEED].value;
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800269a:	613b      	str	r3, [r7, #16]
    float tone = 440.0F;
 800269c:	4b3e      	ldr	r3, [pc, #248]	; (8002798 <fuzz_process+0x130>)
 800269e:	60fb      	str	r3, [r7, #12]

    out = hard_clip(out, threshold_high);
 80026a0:	edd7 0a06 	vldr	s1, [r7, #24]
 80026a4:	ed97 0a07 	vldr	s0, [r7, #28]
 80026a8:	f000 f8b2 	bl	8002810 <hard_clip>
 80026ac:	ed87 0a07 	vstr	s0, [r7, #28]
    if (out == threshold_high) {
 80026b0:	ed97 7a07 	vldr	s14, [r7, #28]
 80026b4:	edd7 7a06 	vldr	s15, [r7, #24]
 80026b8:	eeb4 7a67 	vcmp.f32	s14, s15
 80026bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026c0:	d11e      	bne.n	8002700 <fuzz_process+0x98>
        out += (wave_gen('s', conf->int_params[COUNTER].value, tone * speed) - 1) * height;
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	ed97 7a03 	vldr	s14, [r7, #12]
 80026ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80026ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026d2:	eeb0 0a67 	vmov.f32	s0, s15
 80026d6:	4619      	mov	r1, r3
 80026d8:	2073      	movs	r0, #115	; 0x73
 80026da:	f000 f945 	bl	8002968 <wave_gen>
 80026de:	eef0 7a40 	vmov.f32	s15, s0
 80026e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80026e6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80026ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80026ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026f2:	ed97 7a07 	vldr	s14, [r7, #28]
 80026f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026fa:	edc7 7a07 	vstr	s15, [r7, #28]
 80026fe:	e02c      	b.n	800275a <fuzz_process+0xf2>
    } else if (out == - threshold_high - 1.F) {
 8002700:	edd7 7a06 	vldr	s15, [r7, #24]
 8002704:	eef1 7a67 	vneg.f32	s15, s15
 8002708:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800270c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002710:	ed97 7a07 	vldr	s14, [r7, #28]
 8002714:	eeb4 7a67 	vcmp.f32	s14, s15
 8002718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800271c:	d11d      	bne.n	800275a <fuzz_process+0xf2>
        out += (wave_gen('s', conf->int_params[COUNTER].value, tone * speed) + 1) * height;
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	ed97 7a03 	vldr	s14, [r7, #12]
 8002726:	edd7 7a04 	vldr	s15, [r7, #16]
 800272a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800272e:	eeb0 0a67 	vmov.f32	s0, s15
 8002732:	4619      	mov	r1, r3
 8002734:	2073      	movs	r0, #115	; 0x73
 8002736:	f000 f917 	bl	8002968 <wave_gen>
 800273a:	eef0 7a40 	vmov.f32	s15, s0
 800273e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002742:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002746:	edd7 7a05 	vldr	s15, [r7, #20]
 800274a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800274e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002752:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002756:	edc7 7a07 	vstr	s15, [r7, #28]
    }
    conf->int_params[COUNTER].value++;
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	1c5a      	adds	r2, r3, #1
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	611a      	str	r2, [r3, #16]
    out = mix(out, in, conf->float_params[BALANCE_1].value, conf->float_params[BALANCE_2].value);
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8002770:	eef0 1a47 	vmov.f32	s3, s14
 8002774:	eeb0 1a67 	vmov.f32	s2, s15
 8002778:	edd7 0a01 	vldr	s1, [r7, #4]
 800277c:	ed97 0a07 	vldr	s0, [r7, #28]
 8002780:	f000 f826 	bl	80027d0 <mix>
 8002784:	ed87 0a07 	vstr	s0, [r7, #28]
    return out;
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	ee07 3a90 	vmov	s15, r3
}
 800278e:	eeb0 0a67 	vmov.f32	s0, s15
 8002792:	3720      	adds	r7, #32
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	43dc0000 	.word	0x43dc0000

0800279c <bypass_pedal_init>:

// BYPASS

void bypass_pedal_init(pedal_config_t *conf) {
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
    return;
 80027a4:	bf00      	nop
}
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <bypass_process>:

float bypass_process(float in, pedal_config_t *conf) {
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	ed87 0a01 	vstr	s0, [r7, #4]
 80027ba:	6038      	str	r0, [r7, #0]
    return in;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	ee07 3a90 	vmov	s15, r3
}
 80027c2:	eeb0 0a67 	vmov.f32	s0, s15
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <mix>:


float mix(float in_1, float in_2, float balance_1, float balance_2) {
 80027d0:	b480      	push	{r7}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	ed87 0a03 	vstr	s0, [r7, #12]
 80027da:	edc7 0a02 	vstr	s1, [r7, #8]
 80027de:	ed87 1a01 	vstr	s2, [r7, #4]
 80027e2:	edc7 1a00 	vstr	s3, [r7]
    return in_1 * balance_1 + in_2 * balance_2;
 80027e6:	ed97 7a03 	vldr	s14, [r7, #12]
 80027ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80027ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027f2:	edd7 6a02 	vldr	s13, [r7, #8]
 80027f6:	edd7 7a00 	vldr	s15, [r7]
 80027fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027fe:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8002802:	eeb0 0a67 	vmov.f32	s0, s15
 8002806:	3714      	adds	r7, #20
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <hard_clip>:

float hard_clip(float in, float clip_threshold) {
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	ed87 0a01 	vstr	s0, [r7, #4]
 800281a:	edc7 0a00 	vstr	s1, [r7]
    if (in > clip_threshold) {
 800281e:	ed97 7a01 	vldr	s14, [r7, #4]
 8002822:	edd7 7a00 	vldr	s15, [r7]
 8002826:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800282a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800282e:	dd02      	ble.n	8002836 <hard_clip+0x26>
        return clip_threshold;
 8002830:	edd7 7a00 	vldr	s15, [r7]
 8002834:	e015      	b.n	8002862 <hard_clip+0x52>
    } else if (in < -clip_threshold) {
 8002836:	edd7 7a00 	vldr	s15, [r7]
 800283a:	eef1 7a67 	vneg.f32	s15, s15
 800283e:	ed97 7a01 	vldr	s14, [r7, #4]
 8002842:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800284a:	d508      	bpl.n	800285e <hard_clip+0x4e>
        return -clip_threshold - 1;
 800284c:	edd7 7a00 	vldr	s15, [r7]
 8002850:	eef1 7a67 	vneg.f32	s15, s15
 8002854:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002858:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800285c:	e001      	b.n	8002862 <hard_clip+0x52>
    }
    return in;
 800285e:	edd7 7a01 	vldr	s15, [r7, #4]
}
 8002862:	eeb0 0a67 	vmov.f32	s0, s15
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <soft_clip>:

float soft_clip(float in, float soft_threshold, float softener) {
 8002870:	b480      	push	{r7}
 8002872:	b087      	sub	sp, #28
 8002874:	af00      	add	r7, sp, #0
 8002876:	ed87 0a03 	vstr	s0, [r7, #12]
 800287a:	edc7 0a02 	vstr	s1, [r7, #8]
 800287e:	ed87 1a01 	vstr	s2, [r7, #4]
    float out;
    if (in > soft_threshold) {
 8002882:	ed97 7a03 	vldr	s14, [r7, #12]
 8002886:	edd7 7a02 	vldr	s15, [r7, #8]
 800288a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800288e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002892:	dd10      	ble.n	80028b6 <soft_clip+0x46>
        out = soft_threshold + (in - soft_threshold) / softener;
 8002894:	ed97 7a03 	vldr	s14, [r7, #12]
 8002898:	edd7 7a02 	vldr	s15, [r7, #8]
 800289c:	ee77 6a67 	vsub.f32	s13, s14, s15
 80028a0:	ed97 7a01 	vldr	s14, [r7, #4]
 80028a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028a8:	ed97 7a02 	vldr	s14, [r7, #8]
 80028ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028b0:	edc7 7a05 	vstr	s15, [r7, #20]
 80028b4:	e01d      	b.n	80028f2 <soft_clip+0x82>
    } else if (in < -soft_threshold) {
 80028b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80028ba:	eef1 7a67 	vneg.f32	s15, s15
 80028be:	ed97 7a03 	vldr	s14, [r7, #12]
 80028c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ca:	d510      	bpl.n	80028ee <soft_clip+0x7e>
        out = -soft_threshold + (in + soft_threshold) / softener;
 80028cc:	ed97 7a03 	vldr	s14, [r7, #12]
 80028d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80028d4:	ee77 6a27 	vadd.f32	s13, s14, s15
 80028d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80028dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80028e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028e8:	edc7 7a05 	vstr	s15, [r7, #20]
 80028ec:	e001      	b.n	80028f2 <soft_clip+0x82>
    } else {
        out = in;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	617b      	str	r3, [r7, #20]
    }
    return out;
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	ee07 3a90 	vmov	s15, r3
}
 80028f8:	eeb0 0a67 	vmov.f32	s0, s15
 80028fc:	371c      	adds	r7, #28
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <square_root>:

float square_root(float in) {
 8002906:	b480      	push	{r7}
 8002908:	b085      	sub	sp, #20
 800290a:	af00      	add	r7, sp, #0
 800290c:	ed87 0a01 	vstr	s0, [r7, #4]
    float out;
    out = in * 0.5F;
 8002910:	edd7 7a01 	vldr	s15, [r7, #4]
 8002914:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002918:	ee67 7a87 	vmul.f32	s15, s15, s14
 800291c:	edc7 7a03 	vstr	s15, [r7, #12]
    for (u_int8_t i = 0; i < 8; i++) {
 8002920:	2300      	movs	r3, #0
 8002922:	72fb      	strb	r3, [r7, #11]
 8002924:	e012      	b.n	800294c <square_root+0x46>
        out = 0.5F * (out + (in / out));
 8002926:	edd7 6a01 	vldr	s13, [r7, #4]
 800292a:	edd7 7a03 	vldr	s15, [r7, #12]
 800292e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002932:	edd7 7a03 	vldr	s15, [r7, #12]
 8002936:	ee77 7a27 	vadd.f32	s15, s14, s15
 800293a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800293e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002942:	edc7 7a03 	vstr	s15, [r7, #12]
    for (u_int8_t i = 0; i < 8; i++) {
 8002946:	7afb      	ldrb	r3, [r7, #11]
 8002948:	3301      	adds	r3, #1
 800294a:	72fb      	strb	r3, [r7, #11]
 800294c:	7afb      	ldrb	r3, [r7, #11]
 800294e:	2b07      	cmp	r3, #7
 8002950:	d9e9      	bls.n	8002926 <square_root+0x20>
    }
    return out;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	ee07 3a90 	vmov	s15, r3
}
 8002958:	eeb0 0a67 	vmov.f32	s0, s15
 800295c:	3714      	adds	r7, #20
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
	...

08002968 <wave_gen>:

float wave_gen(char t, u_int32_t i, float tone) {
 8002968:	b580      	push	{r7, lr}
 800296a:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 800296e:	af00      	add	r7, sp, #0
 8002970:	4602      	mov	r2, r0
 8002972:	f107 0308 	add.w	r3, r7, #8
 8002976:	6019      	str	r1, [r3, #0]
 8002978:	1d3b      	adds	r3, r7, #4
 800297a:	ed83 0a00 	vstr	s0, [r3]
 800297e:	f107 030f 	add.w	r3, r7, #15
 8002982:	701a      	strb	r2, [r3, #0]

    float sin_table[128] = { 0.000000F, 0.024541F, 0.049068F, 0.073565F, 0.098017F, 0.122411F, 0.146730F, 0.170962F, 0.195090F, 0.219101F, 0.242980F, 0.266713F, 0.290284F, 0.313681F, 0.336890F, 0.359895F, 0.382683F, 0.405241F, 0.427555F, 0.449611F, 0.471396F, 0.492898F, 0.514102F, 0.534997F, 0.555570F, 0.575808F, 0.595699F, 0.615231F, 0.634393F, 0.653172F, 0.671559F, 0.689540F, 0.707106F, 0.724247F, 0.740951F, 0.757208F, 0.773010F, 0.788346F, 0.803207F, 0.817584F, 0.831469F, 0.844853F, 0.857728F, 0.870087F, 0.881921F, 0.893224F, 0.903989F, 0.914209F, 0.923879F, 0.932992F, 0.941544F, 0.949528F, 0.956940F, 0.963776F, 0.970031F, 0.975702F, 0.980785F, 0.985277F, 0.989176F, 0.992479F, 0.995185F, 0.997290F, 0.998795F, 0.999699F, 1.000000F, 0.999699F, 0.998796F, 0.997291F, 0.995185F, 0.992480F, 0.989177F, 0.985278F, 0.980786F, 0.975702F, 0.970032F, 0.963776F, 0.956941F, 0.949529F, 0.941545F, 0.932993F, 0.923880F, 0.914210F, 0.903990F, 0.893225F, 0.881922F, 0.870088F, 0.857729F, 0.844855F, 0.831471F, 0.817586F, 0.803209F, 0.788348F, 0.773012F, 0.757210F, 0.740952F, 0.724248F, 0.707108F, 0.689542F, 0.671560F, 0.653174F, 0.634395F, 0.615233F, 0.595701F, 0.575810F, 0.555572F, 0.534999F, 0.514105F, 0.492900F, 0.471399F, 0.449613F, 0.427557F, 0.405243F, 0.382685F, 0.359897F, 0.336892F, 0.313684F, 0.290287F, 0.266715F, 0.242982F, 0.219104F, 0.195093F, 0.170964F, 0.146733F, 0.122413F, 0.098019F, 0.073567F, 0.049070F, 0.024544F };
 8002984:	f107 0314 	add.w	r3, r7, #20
 8002988:	4a2c      	ldr	r2, [pc, #176]	; (8002a3c <wave_gen+0xd4>)
 800298a:	4618      	mov	r0, r3
 800298c:	4611      	mov	r1, r2
 800298e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002992:	461a      	mov	r2, r3
 8002994:	f00a fa52 	bl	800ce3c <memcpy>
    float period_f = 44180.F / tone;
 8002998:	1d3b      	adds	r3, r7, #4
 800299a:	eddf 6a29 	vldr	s13, [pc, #164]	; 8002a40 <wave_gen+0xd8>
 800299e:	ed93 7a00 	vldr	s14, [r3]
 80029a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029a6:	edc7 7a87 	vstr	s15, [r7, #540]	; 0x21c
    u_int32_t period_i = period_f;
 80029aa:	edd7 7a87 	vldr	s15, [r7, #540]	; 0x21c
 80029ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029b2:	ee17 3a90 	vmov	r3, s15
 80029b6:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
    u_int32_t table_index = (i * 256 / period_i) % 256;
 80029ba:	f107 0308 	add.w	r3, r7, #8
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	021a      	lsls	r2, r3, #8
 80029c2:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80029c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214

    if (t == 's') {
 80029d0:	f107 030f 	add.w	r3, r7, #15
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	2b73      	cmp	r3, #115	; 0x73
 80029d8:	d118      	bne.n	8002a0c <wave_gen+0xa4>
        if (table_index <= 127) {
 80029da:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80029de:	2b7f      	cmp	r3, #127	; 0x7f
 80029e0:	d808      	bhi.n	80029f4 <wave_gen+0x8c>
            return sin_table[table_index];
 80029e2:	f107 0214 	add.w	r2, r7, #20
 80029e6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	4413      	add	r3, r2
 80029ee:	edd3 7a00 	vldr	s15, [r3]
 80029f2:	e01c      	b.n	8002a2e <wave_gen+0xc6>
        } else {
            return -sin_table[table_index - 128];
 80029f4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80029f8:	3b80      	subs	r3, #128	; 0x80
 80029fa:	f107 0214 	add.w	r2, r7, #20
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	4413      	add	r3, r2
 8002a02:	edd3 7a00 	vldr	s15, [r3]
 8002a06:	eef1 7a67 	vneg.f32	s15, s15
 8002a0a:	e010      	b.n	8002a2e <wave_gen+0xc6>
        }
    } else if (t == 'q') {
 8002a0c:	f107 030f 	add.w	r3, r7, #15
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	2b71      	cmp	r3, #113	; 0x71
 8002a14:	d109      	bne.n	8002a2a <wave_gen+0xc2>
        if (table_index <= 127) {
 8002a16:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8002a1a:	2b7f      	cmp	r3, #127	; 0x7f
 8002a1c:	d802      	bhi.n	8002a24 <wave_gen+0xbc>
            return -1.F;
 8002a1e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8002a22:	e004      	b.n	8002a2e <wave_gen+0xc6>
        } else {
            return 1.F;
 8002a24:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002a28:	e001      	b.n	8002a2e <wave_gen+0xc6>
        }
    } else {
        return 0;
 8002a2a:	eddf 7a06 	vldr	s15, [pc, #24]	; 8002a44 <wave_gen+0xdc>
    }
}
 8002a2e:	eeb0 0a67 	vmov.f32	s0, s15
 8002a32:	f507 7708 	add.w	r7, r7, #544	; 0x220
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	0800d7d0 	.word	0x0800d7d0
 8002a40:	472c9400 	.word	0x472c9400
 8002a44:	00000000 	.word	0x00000000

08002a48 <pedalboard_append>:



// PEDALBOARD

void pedalboard_append(pedalboard_t *p_pb, enum pedal_types type) {
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	460b      	mov	r3, r1
 8002a52:	70fb      	strb	r3, [r7, #3]
    u_int8_t i = p_pb->active_pedals;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	73fb      	strb	r3, [r7, #15]

    if (p_pb->active_pedals < MAX_PEDALS_COUNT) {
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	2b07      	cmp	r3, #7
 8002a60:	f200 80dd 	bhi.w	8002c1e <pedalboard_append+0x1d6>
        u_int8_t i = p_pb->active_pedals;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	73bb      	strb	r3, [r7, #14]
        p_pb->pedals[i].type = type;
 8002a6a:	7bbb      	ldrb	r3, [r7, #14]
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	21c8      	movs	r1, #200	; 0xc8
 8002a70:	fb01 f303 	mul.w	r3, r1, r3
 8002a74:	4413      	add	r3, r2
 8002a76:	33c4      	adds	r3, #196	; 0xc4
 8002a78:	78fa      	ldrb	r2, [r7, #3]
 8002a7a:	701a      	strb	r2, [r3, #0]

        if (type == AMPLIFIER)
 8002a7c:	78fb      	ldrb	r3, [r7, #3]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d113      	bne.n	8002aaa <pedalboard_append+0x62>
        {
            amplifier_pedal_init(&(p_pb->pedals[i].config));
 8002a82:	7bbb      	ldrb	r3, [r7, #14]
 8002a84:	22c8      	movs	r2, #200	; 0xc8
 8002a86:	fb02 f303 	mul.w	r3, r2, r3
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	3304      	adds	r3, #4
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff fcd3 	bl	800243c <amplifier_pedal_init>
            p_pb->pedals[i].pedal_process = amplifier_process;
 8002a96:	7bbb      	ldrb	r3, [r7, #14]
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	21c8      	movs	r1, #200	; 0xc8
 8002a9c:	fb01 f303 	mul.w	r3, r1, r3
 8002aa0:	4413      	add	r3, r2
 8002aa2:	33c8      	adds	r3, #200	; 0xc8
 8002aa4:	4a60      	ldr	r2, [pc, #384]	; (8002c28 <pedalboard_append+0x1e0>)
 8002aa6:	601a      	str	r2, [r3, #0]
 8002aa8:	e0b3      	b.n	8002c12 <pedalboard_append+0x1ca>
        }
        else if (type == BITCRUSHER_RS)
 8002aaa:	78fb      	ldrb	r3, [r7, #3]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d113      	bne.n	8002ad8 <pedalboard_append+0x90>
        {
            bitcrusher_rs_pedal_init(&(p_pb->pedals[i].config));
 8002ab0:	7bbb      	ldrb	r3, [r7, #14]
 8002ab2:	22c8      	movs	r2, #200	; 0xc8
 8002ab4:	fb02 f303 	mul.w	r3, r2, r3
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	4413      	add	r3, r2
 8002abc:	3304      	adds	r3, #4
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7ff fb52 	bl	8002168 <bitcrusher_rs_pedal_init>
            p_pb->pedals[i].pedal_process = bitcrusher_rs_process;
 8002ac4:	7bbb      	ldrb	r3, [r7, #14]
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	21c8      	movs	r1, #200	; 0xc8
 8002aca:	fb01 f303 	mul.w	r3, r1, r3
 8002ace:	4413      	add	r3, r2
 8002ad0:	33c8      	adds	r3, #200	; 0xc8
 8002ad2:	4a56      	ldr	r2, [pc, #344]	; (8002c2c <pedalboard_append+0x1e4>)
 8002ad4:	601a      	str	r2, [r3, #0]
 8002ad6:	e09c      	b.n	8002c12 <pedalboard_append+0x1ca>
        }
        else if (type == DYN_AMPLIFIER)
 8002ad8:	78fb      	ldrb	r3, [r7, #3]
 8002ada:	2b03      	cmp	r3, #3
 8002adc:	d113      	bne.n	8002b06 <pedalboard_append+0xbe>
        {
            dyn_amplifier_pedal_init(&(p_pb->pedals[i].config));
 8002ade:	7bbb      	ldrb	r3, [r7, #14]
 8002ae0:	22c8      	movs	r2, #200	; 0xc8
 8002ae2:	fb02 f303 	mul.w	r3, r2, r3
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	4413      	add	r3, r2
 8002aea:	3304      	adds	r3, #4
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7ff fce5 	bl	80024bc <dyn_amplifier_pedal_init>
            p_pb->pedals[i].pedal_process = dyn_amplifier_process;
 8002af2:	7bbb      	ldrb	r3, [r7, #14]
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	21c8      	movs	r1, #200	; 0xc8
 8002af8:	fb01 f303 	mul.w	r3, r1, r3
 8002afc:	4413      	add	r3, r2
 8002afe:	33c8      	adds	r3, #200	; 0xc8
 8002b00:	4a4b      	ldr	r2, [pc, #300]	; (8002c30 <pedalboard_append+0x1e8>)
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	e085      	b.n	8002c12 <pedalboard_append+0x1ca>
        }
        else if (type == FUZZ)
 8002b06:	78fb      	ldrb	r3, [r7, #3]
 8002b08:	2b04      	cmp	r3, #4
 8002b0a:	d113      	bne.n	8002b34 <pedalboard_append+0xec>
        {
            fuzz_pedal_init(&(p_pb->pedals[i].config));
 8002b0c:	7bbb      	ldrb	r3, [r7, #14]
 8002b0e:	22c8      	movs	r2, #200	; 0xc8
 8002b10:	fb02 f303 	mul.w	r3, r2, r3
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	4413      	add	r3, r2
 8002b18:	3304      	adds	r3, #4
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7ff fd52 	bl	80025c4 <fuzz_pedal_init>
            p_pb->pedals[i].pedal_process = fuzz_process;
 8002b20:	7bbb      	ldrb	r3, [r7, #14]
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	21c8      	movs	r1, #200	; 0xc8
 8002b26:	fb01 f303 	mul.w	r3, r1, r3
 8002b2a:	4413      	add	r3, r2
 8002b2c:	33c8      	adds	r3, #200	; 0xc8
 8002b2e:	4a41      	ldr	r2, [pc, #260]	; (8002c34 <pedalboard_append+0x1ec>)
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	e06e      	b.n	8002c12 <pedalboard_append+0x1ca>
        }
        else if (type == LPF)
 8002b34:	78fb      	ldrb	r3, [r7, #3]
 8002b36:	2b05      	cmp	r3, #5
 8002b38:	d113      	bne.n	8002b62 <pedalboard_append+0x11a>
        {
            low_pass_filter_pedal_init(&(p_pb->pedals[i].config));
 8002b3a:	7bbb      	ldrb	r3, [r7, #14]
 8002b3c:	22c8      	movs	r2, #200	; 0xc8
 8002b3e:	fb02 f303 	mul.w	r3, r2, r3
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	4413      	add	r3, r2
 8002b46:	3304      	adds	r3, #4
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7ff fcd1 	bl	80024f0 <low_pass_filter_pedal_init>
            p_pb->pedals[i].pedal_process = low_pass_filter_process;
 8002b4e:	7bbb      	ldrb	r3, [r7, #14]
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	21c8      	movs	r1, #200	; 0xc8
 8002b54:	fb01 f303 	mul.w	r3, r1, r3
 8002b58:	4413      	add	r3, r2
 8002b5a:	33c8      	adds	r3, #200	; 0xc8
 8002b5c:	4a36      	ldr	r2, [pc, #216]	; (8002c38 <pedalboard_append+0x1f0>)
 8002b5e:	601a      	str	r2, [r3, #0]
 8002b60:	e057      	b.n	8002c12 <pedalboard_append+0x1ca>
        }
        else if (type == OVERDRIVE)
 8002b62:	78fb      	ldrb	r3, [r7, #3]
 8002b64:	2b06      	cmp	r3, #6
 8002b66:	d113      	bne.n	8002b90 <pedalboard_append+0x148>
        {
            overdrive_pedal_init(&(p_pb->pedals[i].config));
 8002b68:	7bbb      	ldrb	r3, [r7, #14]
 8002b6a:	22c8      	movs	r2, #200	; 0xc8
 8002b6c:	fb02 f303 	mul.w	r3, r2, r3
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	4413      	add	r3, r2
 8002b74:	3304      	adds	r3, #4
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7ff fa6e 	bl	8002058 <overdrive_pedal_init>
            p_pb->pedals[i].pedal_process = overdrive_process;
 8002b7c:	7bbb      	ldrb	r3, [r7, #14]
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	21c8      	movs	r1, #200	; 0xc8
 8002b82:	fb01 f303 	mul.w	r3, r1, r3
 8002b86:	4413      	add	r3, r2
 8002b88:	33c8      	adds	r3, #200	; 0xc8
 8002b8a:	4a2c      	ldr	r2, [pc, #176]	; (8002c3c <pedalboard_append+0x1f4>)
 8002b8c:	601a      	str	r2, [r3, #0]
 8002b8e:	e040      	b.n	8002c12 <pedalboard_append+0x1ca>
        }
        else if (type == OVERDRIVE_SQRT)
 8002b90:	78fb      	ldrb	r3, [r7, #3]
 8002b92:	2b07      	cmp	r3, #7
 8002b94:	d113      	bne.n	8002bbe <pedalboard_append+0x176>
        {
            overdrive_sqrt_pedal_init(&(p_pb->pedals[i].config));
 8002b96:	7bbb      	ldrb	r3, [r7, #14]
 8002b98:	22c8      	movs	r2, #200	; 0xc8
 8002b9a:	fb02 f303 	mul.w	r3, r2, r3
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	3304      	adds	r3, #4
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7ff fbc7 	bl	8002338 <overdrive_sqrt_pedal_init>
            p_pb->pedals[i].pedal_process = overdrive_sqrt_process;
 8002baa:	7bbb      	ldrb	r3, [r7, #14]
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	21c8      	movs	r1, #200	; 0xc8
 8002bb0:	fb01 f303 	mul.w	r3, r1, r3
 8002bb4:	4413      	add	r3, r2
 8002bb6:	33c8      	adds	r3, #200	; 0xc8
 8002bb8:	4a21      	ldr	r2, [pc, #132]	; (8002c40 <pedalboard_append+0x1f8>)
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	e029      	b.n	8002c12 <pedalboard_append+0x1ca>
        }
        else if (type == TREMOLO)
 8002bbe:	78fb      	ldrb	r3, [r7, #3]
 8002bc0:	2b08      	cmp	r3, #8
 8002bc2:	d113      	bne.n	8002bec <pedalboard_append+0x1a4>
        {
            tremolo_pedal_init(&(p_pb->pedals[i].config));
 8002bc4:	7bbb      	ldrb	r3, [r7, #14]
 8002bc6:	22c8      	movs	r2, #200	; 0xc8
 8002bc8:	fb02 f303 	mul.w	r3, r2, r3
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	4413      	add	r3, r2
 8002bd0:	3304      	adds	r3, #4
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7ff fb3a 	bl	800224c <tremolo_pedal_init>
            p_pb->pedals[i].pedal_process = tremolo_process;
 8002bd8:	7bbb      	ldrb	r3, [r7, #14]
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	21c8      	movs	r1, #200	; 0xc8
 8002bde:	fb01 f303 	mul.w	r3, r1, r3
 8002be2:	4413      	add	r3, r2
 8002be4:	33c8      	adds	r3, #200	; 0xc8
 8002be6:	4a17      	ldr	r2, [pc, #92]	; (8002c44 <pedalboard_append+0x1fc>)
 8002be8:	601a      	str	r2, [r3, #0]
 8002bea:	e012      	b.n	8002c12 <pedalboard_append+0x1ca>
        }
        else
        {
            // BYPASS AS DEFAULT
            bypass_pedal_init(&(p_pb->pedals[i].config));
 8002bec:	7bbb      	ldrb	r3, [r7, #14]
 8002bee:	22c8      	movs	r2, #200	; 0xc8
 8002bf0:	fb02 f303 	mul.w	r3, r2, r3
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	3304      	adds	r3, #4
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7ff fdce 	bl	800279c <bypass_pedal_init>
            p_pb->pedals[i].pedal_process = bypass_process;
 8002c00:	7bbb      	ldrb	r3, [r7, #14]
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	21c8      	movs	r1, #200	; 0xc8
 8002c06:	fb01 f303 	mul.w	r3, r1, r3
 8002c0a:	4413      	add	r3, r2
 8002c0c:	33c8      	adds	r3, #200	; 0xc8
 8002c0e:	4a0e      	ldr	r2, [pc, #56]	; (8002c48 <pedalboard_append+0x200>)
 8002c10:	601a      	str	r2, [r3, #0]
        }
        p_pb->active_pedals++;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	3301      	adds	r3, #1
 8002c18:	b2da      	uxtb	r2, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	701a      	strb	r2, [r3, #0]
    }
}
 8002c1e:	bf00      	nop
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	08002479 	.word	0x08002479
 8002c2c:	080021b5 	.word	0x080021b5
 8002c30:	080024d1 	.word	0x080024d1
 8002c34:	08002669 	.word	0x08002669
 8002c38:	0800254d 	.word	0x0800254d
 8002c3c:	080020e1 	.word	0x080020e1
 8002c40:	0800239d 	.word	0x0800239d
 8002c44:	080022b5 	.word	0x080022b5
 8002c48:	080027b1 	.word	0x080027b1

08002c4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c52:	2300      	movs	r3, #0
 8002c54:	607b      	str	r3, [r7, #4]
 8002c56:	4b10      	ldr	r3, [pc, #64]	; (8002c98 <HAL_MspInit+0x4c>)
 8002c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5a:	4a0f      	ldr	r2, [pc, #60]	; (8002c98 <HAL_MspInit+0x4c>)
 8002c5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c60:	6453      	str	r3, [r2, #68]	; 0x44
 8002c62:	4b0d      	ldr	r3, [pc, #52]	; (8002c98 <HAL_MspInit+0x4c>)
 8002c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c6a:	607b      	str	r3, [r7, #4]
 8002c6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c6e:	2300      	movs	r3, #0
 8002c70:	603b      	str	r3, [r7, #0]
 8002c72:	4b09      	ldr	r3, [pc, #36]	; (8002c98 <HAL_MspInit+0x4c>)
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	4a08      	ldr	r2, [pc, #32]	; (8002c98 <HAL_MspInit+0x4c>)
 8002c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c7e:	4b06      	ldr	r3, [pc, #24]	; (8002c98 <HAL_MspInit+0x4c>)
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c86:	603b      	str	r3, [r7, #0]
 8002c88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c8a:	bf00      	nop
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	40023800 	.word	0x40023800

08002c9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b08a      	sub	sp, #40	; 0x28
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca4:	f107 0314 	add.w	r3, r7, #20
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	605a      	str	r2, [r3, #4]
 8002cae:	609a      	str	r2, [r3, #8]
 8002cb0:	60da      	str	r2, [r3, #12]
 8002cb2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a19      	ldr	r2, [pc, #100]	; (8002d20 <HAL_I2C_MspInit+0x84>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d12c      	bne.n	8002d18 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	613b      	str	r3, [r7, #16]
 8002cc2:	4b18      	ldr	r3, [pc, #96]	; (8002d24 <HAL_I2C_MspInit+0x88>)
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc6:	4a17      	ldr	r2, [pc, #92]	; (8002d24 <HAL_I2C_MspInit+0x88>)
 8002cc8:	f043 0302 	orr.w	r3, r3, #2
 8002ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cce:	4b15      	ldr	r3, [pc, #84]	; (8002d24 <HAL_I2C_MspInit+0x88>)
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	613b      	str	r3, [r7, #16]
 8002cd8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8002cda:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002cde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ce0:	2312      	movs	r3, #18
 8002ce2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002cec:	2304      	movs	r3, #4
 8002cee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cf0:	f107 0314 	add.w	r3, r7, #20
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	480c      	ldr	r0, [pc, #48]	; (8002d28 <HAL_I2C_MspInit+0x8c>)
 8002cf8:	f000 ff90 	bl	8003c1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	60fb      	str	r3, [r7, #12]
 8002d00:	4b08      	ldr	r3, [pc, #32]	; (8002d24 <HAL_I2C_MspInit+0x88>)
 8002d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d04:	4a07      	ldr	r2, [pc, #28]	; (8002d24 <HAL_I2C_MspInit+0x88>)
 8002d06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d0a:	6413      	str	r3, [r2, #64]	; 0x40
 8002d0c:	4b05      	ldr	r3, [pc, #20]	; (8002d24 <HAL_I2C_MspInit+0x88>)
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d14:	60fb      	str	r3, [r7, #12]
 8002d16:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002d18:	bf00      	nop
 8002d1a:	3728      	adds	r7, #40	; 0x28
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	40005400 	.word	0x40005400
 8002d24:	40023800 	.word	0x40023800
 8002d28:	40020400 	.word	0x40020400

08002d2c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b08e      	sub	sp, #56	; 0x38
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d38:	2200      	movs	r2, #0
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	605a      	str	r2, [r3, #4]
 8002d3e:	609a      	str	r2, [r3, #8]
 8002d40:	60da      	str	r2, [r3, #12]
 8002d42:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a93      	ldr	r2, [pc, #588]	; (8002f98 <HAL_I2S_MspInit+0x26c>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	f040 808d 	bne.w	8002e6a <HAL_I2S_MspInit+0x13e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002d50:	2300      	movs	r3, #0
 8002d52:	623b      	str	r3, [r7, #32]
 8002d54:	4b91      	ldr	r3, [pc, #580]	; (8002f9c <HAL_I2S_MspInit+0x270>)
 8002d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d58:	4a90      	ldr	r2, [pc, #576]	; (8002f9c <HAL_I2S_MspInit+0x270>)
 8002d5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d5e:	6413      	str	r3, [r2, #64]	; 0x40
 8002d60:	4b8e      	ldr	r3, [pc, #568]	; (8002f9c <HAL_I2S_MspInit+0x270>)
 8002d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d68:	623b      	str	r3, [r7, #32]
 8002d6a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	61fb      	str	r3, [r7, #28]
 8002d70:	4b8a      	ldr	r3, [pc, #552]	; (8002f9c <HAL_I2S_MspInit+0x270>)
 8002d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d74:	4a89      	ldr	r2, [pc, #548]	; (8002f9c <HAL_I2S_MspInit+0x270>)
 8002d76:	f043 0302 	orr.w	r3, r3, #2
 8002d7a:	6313      	str	r3, [r2, #48]	; 0x30
 8002d7c:	4b87      	ldr	r3, [pc, #540]	; (8002f9c <HAL_I2S_MspInit+0x270>)
 8002d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	61fb      	str	r3, [r7, #28]
 8002d86:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d88:	2300      	movs	r3, #0
 8002d8a:	61bb      	str	r3, [r7, #24]
 8002d8c:	4b83      	ldr	r3, [pc, #524]	; (8002f9c <HAL_I2S_MspInit+0x270>)
 8002d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d90:	4a82      	ldr	r2, [pc, #520]	; (8002f9c <HAL_I2S_MspInit+0x270>)
 8002d92:	f043 0304 	orr.w	r3, r3, #4
 8002d96:	6313      	str	r3, [r2, #48]	; 0x30
 8002d98:	4b80      	ldr	r3, [pc, #512]	; (8002f9c <HAL_I2S_MspInit+0x270>)
 8002d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9c:	f003 0304 	and.w	r3, r3, #4
 8002da0:	61bb      	str	r3, [r7, #24]
 8002da2:	69bb      	ldr	r3, [r7, #24]
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8002da4:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8002da8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002daa:	2302      	movs	r3, #2
 8002dac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dae:	2300      	movs	r3, #0
 8002db0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002db2:	2301      	movs	r3, #1
 8002db4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002db6:	2305      	movs	r3, #5
 8002db8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	4877      	ldr	r0, [pc, #476]	; (8002fa0 <HAL_I2S_MspInit+0x274>)
 8002dc2:	f000 ff2b 	bl	8003c1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002dc6:	2340      	movs	r3, #64	; 0x40
 8002dc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dca:	2302      	movs	r3, #2
 8002dcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002dd6:	2305      	movs	r3, #5
 8002dd8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dde:	4619      	mov	r1, r3
 8002de0:	4870      	ldr	r0, [pc, #448]	; (8002fa4 <HAL_I2S_MspInit+0x278>)
 8002de2:	f000 ff1b 	bl	8003c1c <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8002de6:	4b70      	ldr	r3, [pc, #448]	; (8002fa8 <HAL_I2S_MspInit+0x27c>)
 8002de8:	4a70      	ldr	r2, [pc, #448]	; (8002fac <HAL_I2S_MspInit+0x280>)
 8002dea:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8002dec:	4b6e      	ldr	r3, [pc, #440]	; (8002fa8 <HAL_I2S_MspInit+0x27c>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002df2:	4b6d      	ldr	r3, [pc, #436]	; (8002fa8 <HAL_I2S_MspInit+0x27c>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002df8:	4b6b      	ldr	r3, [pc, #428]	; (8002fa8 <HAL_I2S_MspInit+0x27c>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002dfe:	4b6a      	ldr	r3, [pc, #424]	; (8002fa8 <HAL_I2S_MspInit+0x27c>)
 8002e00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e04:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002e06:	4b68      	ldr	r3, [pc, #416]	; (8002fa8 <HAL_I2S_MspInit+0x27c>)
 8002e08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e0c:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002e0e:	4b66      	ldr	r3, [pc, #408]	; (8002fa8 <HAL_I2S_MspInit+0x27c>)
 8002e10:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e14:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8002e16:	4b64      	ldr	r3, [pc, #400]	; (8002fa8 <HAL_I2S_MspInit+0x27c>)
 8002e18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e1c:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002e1e:	4b62      	ldr	r3, [pc, #392]	; (8002fa8 <HAL_I2S_MspInit+0x27c>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002e24:	4b60      	ldr	r3, [pc, #384]	; (8002fa8 <HAL_I2S_MspInit+0x27c>)
 8002e26:	2204      	movs	r2, #4
 8002e28:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8002e2a:	4b5f      	ldr	r3, [pc, #380]	; (8002fa8 <HAL_I2S_MspInit+0x27c>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002e30:	4b5d      	ldr	r3, [pc, #372]	; (8002fa8 <HAL_I2S_MspInit+0x27c>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002e36:	4b5c      	ldr	r3, [pc, #368]	; (8002fa8 <HAL_I2S_MspInit+0x27c>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002e3c:	485a      	ldr	r0, [pc, #360]	; (8002fa8 <HAL_I2S_MspInit+0x27c>)
 8002e3e:	f000 fb7d 	bl	800353c <HAL_DMA_Init>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d001      	beq.n	8002e4c <HAL_I2S_MspInit+0x120>
    {
      Error_Handler();
 8002e48:	f7fe ff9c 	bl	8001d84 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a56      	ldr	r2, [pc, #344]	; (8002fa8 <HAL_I2S_MspInit+0x27c>)
 8002e50:	63da      	str	r2, [r3, #60]	; 0x3c
 8002e52:	4a55      	ldr	r2, [pc, #340]	; (8002fa8 <HAL_I2S_MspInit+0x27c>)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2S2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002e58:	2200      	movs	r2, #0
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	2024      	movs	r0, #36	; 0x24
 8002e5e:	f000 fb36 	bl	80034ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002e62:	2024      	movs	r0, #36	; 0x24
 8002e64:	f000 fb4f 	bl	8003506 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002e68:	e091      	b.n	8002f8e <HAL_I2S_MspInit+0x262>
  else if(hi2s->Instance==SPI3)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a50      	ldr	r2, [pc, #320]	; (8002fb0 <HAL_I2S_MspInit+0x284>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	f040 808c 	bne.w	8002f8e <HAL_I2S_MspInit+0x262>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002e76:	2300      	movs	r3, #0
 8002e78:	617b      	str	r3, [r7, #20]
 8002e7a:	4b48      	ldr	r3, [pc, #288]	; (8002f9c <HAL_I2S_MspInit+0x270>)
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	4a47      	ldr	r2, [pc, #284]	; (8002f9c <HAL_I2S_MspInit+0x270>)
 8002e80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e84:	6413      	str	r3, [r2, #64]	; 0x40
 8002e86:	4b45      	ldr	r3, [pc, #276]	; (8002f9c <HAL_I2S_MspInit+0x270>)
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e8e:	617b      	str	r3, [r7, #20]
 8002e90:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e92:	2300      	movs	r3, #0
 8002e94:	613b      	str	r3, [r7, #16]
 8002e96:	4b41      	ldr	r3, [pc, #260]	; (8002f9c <HAL_I2S_MspInit+0x270>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9a:	4a40      	ldr	r2, [pc, #256]	; (8002f9c <HAL_I2S_MspInit+0x270>)
 8002e9c:	f043 0301 	orr.w	r3, r3, #1
 8002ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ea2:	4b3e      	ldr	r3, [pc, #248]	; (8002f9c <HAL_I2S_MspInit+0x270>)
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	613b      	str	r3, [r7, #16]
 8002eac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002eae:	2300      	movs	r3, #0
 8002eb0:	60fb      	str	r3, [r7, #12]
 8002eb2:	4b3a      	ldr	r3, [pc, #232]	; (8002f9c <HAL_I2S_MspInit+0x270>)
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb6:	4a39      	ldr	r2, [pc, #228]	; (8002f9c <HAL_I2S_MspInit+0x270>)
 8002eb8:	f043 0304 	orr.w	r3, r3, #4
 8002ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ebe:	4b37      	ldr	r3, [pc, #220]	; (8002f9c <HAL_I2S_MspInit+0x270>)
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec2:	f003 0304 	and.w	r3, r3, #4
 8002ec6:	60fb      	str	r3, [r7, #12]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002eca:	2310      	movs	r3, #16
 8002ecc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ece:	2302      	movs	r3, #2
 8002ed0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002eda:	2306      	movs	r3, #6
 8002edc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ede:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	4833      	ldr	r0, [pc, #204]	; (8002fb4 <HAL_I2S_MspInit+0x288>)
 8002ee6:	f000 fe99 	bl	8003c1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8002eea:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8002eee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002efc:	2306      	movs	r3, #6
 8002efe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f04:	4619      	mov	r1, r3
 8002f06:	4827      	ldr	r0, [pc, #156]	; (8002fa4 <HAL_I2S_MspInit+0x278>)
 8002f08:	f000 fe88 	bl	8003c1c <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8002f0c:	4b2a      	ldr	r3, [pc, #168]	; (8002fb8 <HAL_I2S_MspInit+0x28c>)
 8002f0e:	4a2b      	ldr	r2, [pc, #172]	; (8002fbc <HAL_I2S_MspInit+0x290>)
 8002f10:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8002f12:	4b29      	ldr	r3, [pc, #164]	; (8002fb8 <HAL_I2S_MspInit+0x28c>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f18:	4b27      	ldr	r3, [pc, #156]	; (8002fb8 <HAL_I2S_MspInit+0x28c>)
 8002f1a:	2240      	movs	r2, #64	; 0x40
 8002f1c:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f1e:	4b26      	ldr	r3, [pc, #152]	; (8002fb8 <HAL_I2S_MspInit+0x28c>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f24:	4b24      	ldr	r3, [pc, #144]	; (8002fb8 <HAL_I2S_MspInit+0x28c>)
 8002f26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f2a:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002f2c:	4b22      	ldr	r3, [pc, #136]	; (8002fb8 <HAL_I2S_MspInit+0x28c>)
 8002f2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f32:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002f34:	4b20      	ldr	r3, [pc, #128]	; (8002fb8 <HAL_I2S_MspInit+0x28c>)
 8002f36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f3a:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8002f3c:	4b1e      	ldr	r3, [pc, #120]	; (8002fb8 <HAL_I2S_MspInit+0x28c>)
 8002f3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f42:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f44:	4b1c      	ldr	r3, [pc, #112]	; (8002fb8 <HAL_I2S_MspInit+0x28c>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002f4a:	4b1b      	ldr	r3, [pc, #108]	; (8002fb8 <HAL_I2S_MspInit+0x28c>)
 8002f4c:	2204      	movs	r2, #4
 8002f4e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8002f50:	4b19      	ldr	r3, [pc, #100]	; (8002fb8 <HAL_I2S_MspInit+0x28c>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002f56:	4b18      	ldr	r3, [pc, #96]	; (8002fb8 <HAL_I2S_MspInit+0x28c>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002f5c:	4b16      	ldr	r3, [pc, #88]	; (8002fb8 <HAL_I2S_MspInit+0x28c>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8002f62:	4815      	ldr	r0, [pc, #84]	; (8002fb8 <HAL_I2S_MspInit+0x28c>)
 8002f64:	f000 faea 	bl	800353c <HAL_DMA_Init>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <HAL_I2S_MspInit+0x246>
      Error_Handler();
 8002f6e:	f7fe ff09 	bl	8001d84 <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a10      	ldr	r2, [pc, #64]	; (8002fb8 <HAL_I2S_MspInit+0x28c>)
 8002f76:	639a      	str	r2, [r3, #56]	; 0x38
 8002f78:	4a0f      	ldr	r2, [pc, #60]	; (8002fb8 <HAL_I2S_MspInit+0x28c>)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8002f7e:	2200      	movs	r2, #0
 8002f80:	2100      	movs	r1, #0
 8002f82:	2033      	movs	r0, #51	; 0x33
 8002f84:	f000 faa3 	bl	80034ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8002f88:	2033      	movs	r0, #51	; 0x33
 8002f8a:	f000 fabc 	bl	8003506 <HAL_NVIC_EnableIRQ>
}
 8002f8e:	bf00      	nop
 8002f90:	3738      	adds	r7, #56	; 0x38
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	40003800 	.word	0x40003800
 8002f9c:	40023800 	.word	0x40023800
 8002fa0:	40020400 	.word	0x40020400
 8002fa4:	40020800 	.word	0x40020800
 8002fa8:	2000042c 	.word	0x2000042c
 8002fac:	40026058 	.word	0x40026058
 8002fb0:	40003c00 	.word	0x40003c00
 8002fb4:	40020000 	.word	0x40020000
 8002fb8:	20001720 	.word	0x20001720
 8002fbc:	40026088 	.word	0x40026088

08002fc0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b08a      	sub	sp, #40	; 0x28
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fc8:	f107 0314 	add.w	r3, r7, #20
 8002fcc:	2200      	movs	r2, #0
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	605a      	str	r2, [r3, #4]
 8002fd2:	609a      	str	r2, [r3, #8]
 8002fd4:	60da      	str	r2, [r3, #12]
 8002fd6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a19      	ldr	r2, [pc, #100]	; (8003044 <HAL_SPI_MspInit+0x84>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d12b      	bne.n	800303a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	613b      	str	r3, [r7, #16]
 8002fe6:	4b18      	ldr	r3, [pc, #96]	; (8003048 <HAL_SPI_MspInit+0x88>)
 8002fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fea:	4a17      	ldr	r2, [pc, #92]	; (8003048 <HAL_SPI_MspInit+0x88>)
 8002fec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ff0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ff2:	4b15      	ldr	r3, [pc, #84]	; (8003048 <HAL_SPI_MspInit+0x88>)
 8002ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ffa:	613b      	str	r3, [r7, #16]
 8002ffc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ffe:	2300      	movs	r3, #0
 8003000:	60fb      	str	r3, [r7, #12]
 8003002:	4b11      	ldr	r3, [pc, #68]	; (8003048 <HAL_SPI_MspInit+0x88>)
 8003004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003006:	4a10      	ldr	r2, [pc, #64]	; (8003048 <HAL_SPI_MspInit+0x88>)
 8003008:	f043 0301 	orr.w	r3, r3, #1
 800300c:	6313      	str	r3, [r2, #48]	; 0x30
 800300e:	4b0e      	ldr	r3, [pc, #56]	; (8003048 <HAL_SPI_MspInit+0x88>)
 8003010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	60fb      	str	r3, [r7, #12]
 8003018:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800301a:	23a0      	movs	r3, #160	; 0xa0
 800301c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800301e:	2302      	movs	r3, #2
 8003020:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003022:	2300      	movs	r3, #0
 8003024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003026:	2303      	movs	r3, #3
 8003028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800302a:	2305      	movs	r3, #5
 800302c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800302e:	f107 0314 	add.w	r3, r7, #20
 8003032:	4619      	mov	r1, r3
 8003034:	4805      	ldr	r0, [pc, #20]	; (800304c <HAL_SPI_MspInit+0x8c>)
 8003036:	f000 fdf1 	bl	8003c1c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800303a:	bf00      	nop
 800303c:	3728      	adds	r7, #40	; 0x28
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	40013000 	.word	0x40013000
 8003048:	40023800 	.word	0x40023800
 800304c:	40020000 	.word	0x40020000

08003050 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003054:	e7fe      	b.n	8003054 <NMI_Handler+0x4>

08003056 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003056:	b480      	push	{r7}
 8003058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800305a:	e7fe      	b.n	800305a <HardFault_Handler+0x4>

0800305c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003060:	e7fe      	b.n	8003060 <MemManage_Handler+0x4>

08003062 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003062:	b480      	push	{r7}
 8003064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003066:	e7fe      	b.n	8003066 <BusFault_Handler+0x4>

08003068 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800306c:	e7fe      	b.n	800306c <UsageFault_Handler+0x4>

0800306e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800306e:	b480      	push	{r7}
 8003070:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003072:	bf00      	nop
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003080:	bf00      	nop
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr

0800308a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800308a:	b480      	push	{r7}
 800308c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800308e:	bf00      	nop
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800309c:	f000 f8f8 	bl	8003290 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030a0:	bf00      	nop
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80030a8:	4802      	ldr	r0, [pc, #8]	; (80030b4 <DMA1_Stream3_IRQHandler+0x10>)
 80030aa:	f000 fb4d 	bl	8003748 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80030ae:	bf00      	nop
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	2000042c 	.word	0x2000042c

080030b8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80030bc:	4802      	ldr	r0, [pc, #8]	; (80030c8 <DMA1_Stream5_IRQHandler+0x10>)
 80030be:	f000 fb43 	bl	8003748 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80030c2:	bf00      	nop
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	20001720 	.word	0x20001720

080030cc <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 80030d0:	4802      	ldr	r0, [pc, #8]	; (80030dc <SPI2_IRQHandler+0x10>)
 80030d2:	f003 ff1b 	bl	8006f0c <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80030d6:	bf00      	nop
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	20002ea4 	.word	0x20002ea4

080030e0 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s3);
 80030e4:	4802      	ldr	r0, [pc, #8]	; (80030f0 <SPI3_IRQHandler+0x10>)
 80030e6:	f003 ff11 	bl	8006f0c <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80030ea:	bf00      	nop
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	20002eec 	.word	0x20002eec

080030f4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80030f8:	4802      	ldr	r0, [pc, #8]	; (8003104 <OTG_FS_IRQHandler+0x10>)
 80030fa:	f001 f9c7 	bl	800448c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80030fe:	bf00      	nop
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	2000581c 	.word	0x2000581c

08003108 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003110:	4a14      	ldr	r2, [pc, #80]	; (8003164 <_sbrk+0x5c>)
 8003112:	4b15      	ldr	r3, [pc, #84]	; (8003168 <_sbrk+0x60>)
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800311c:	4b13      	ldr	r3, [pc, #76]	; (800316c <_sbrk+0x64>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d102      	bne.n	800312a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003124:	4b11      	ldr	r3, [pc, #68]	; (800316c <_sbrk+0x64>)
 8003126:	4a12      	ldr	r2, [pc, #72]	; (8003170 <_sbrk+0x68>)
 8003128:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800312a:	4b10      	ldr	r3, [pc, #64]	; (800316c <_sbrk+0x64>)
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4413      	add	r3, r2
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	429a      	cmp	r2, r3
 8003136:	d207      	bcs.n	8003148 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003138:	f009 fe46 	bl	800cdc8 <__errno>
 800313c:	4603      	mov	r3, r0
 800313e:	220c      	movs	r2, #12
 8003140:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003142:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003146:	e009      	b.n	800315c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003148:	4b08      	ldr	r3, [pc, #32]	; (800316c <_sbrk+0x64>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800314e:	4b07      	ldr	r3, [pc, #28]	; (800316c <_sbrk+0x64>)
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4413      	add	r3, r2
 8003156:	4a05      	ldr	r2, [pc, #20]	; (800316c <_sbrk+0x64>)
 8003158:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800315a:	68fb      	ldr	r3, [r7, #12]
}
 800315c:	4618      	mov	r0, r3
 800315e:	3718      	adds	r7, #24
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	20020000 	.word	0x20020000
 8003168:	00000400 	.word	0x00000400
 800316c:	200003bc 	.word	0x200003bc
 8003170:	20005b30 	.word	0x20005b30

08003174 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003178:	4b06      	ldr	r3, [pc, #24]	; (8003194 <SystemInit+0x20>)
 800317a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800317e:	4a05      	ldr	r2, [pc, #20]	; (8003194 <SystemInit+0x20>)
 8003180:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003184:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003188:	bf00      	nop
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	e000ed00 	.word	0xe000ed00

08003198 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003198:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800319c:	480d      	ldr	r0, [pc, #52]	; (80031d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800319e:	490e      	ldr	r1, [pc, #56]	; (80031d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80031a0:	4a0e      	ldr	r2, [pc, #56]	; (80031dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80031a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031a4:	e002      	b.n	80031ac <LoopCopyDataInit>

080031a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031aa:	3304      	adds	r3, #4

080031ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031b0:	d3f9      	bcc.n	80031a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031b2:	4a0b      	ldr	r2, [pc, #44]	; (80031e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80031b4:	4c0b      	ldr	r4, [pc, #44]	; (80031e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80031b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031b8:	e001      	b.n	80031be <LoopFillZerobss>

080031ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031bc:	3204      	adds	r2, #4

080031be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031c0:	d3fb      	bcc.n	80031ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80031c2:	f7ff ffd7 	bl	8003174 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031c6:	f009 fe05 	bl	800cdd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031ca:	f7fe fae1 	bl	8001790 <main>
  bx  lr    
 80031ce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80031d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80031d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031d8:	20000334 	.word	0x20000334
  ldr r2, =_sidata
 80031dc:	0800daa0 	.word	0x0800daa0
  ldr r2, =_sbss
 80031e0:	20000334 	.word	0x20000334
  ldr r4, =_ebss
 80031e4:	20005b30 	.word	0x20005b30

080031e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031e8:	e7fe      	b.n	80031e8 <ADC_IRQHandler>
	...

080031ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031f0:	4b0e      	ldr	r3, [pc, #56]	; (800322c <HAL_Init+0x40>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a0d      	ldr	r2, [pc, #52]	; (800322c <HAL_Init+0x40>)
 80031f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80031fc:	4b0b      	ldr	r3, [pc, #44]	; (800322c <HAL_Init+0x40>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a0a      	ldr	r2, [pc, #40]	; (800322c <HAL_Init+0x40>)
 8003202:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003206:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003208:	4b08      	ldr	r3, [pc, #32]	; (800322c <HAL_Init+0x40>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a07      	ldr	r2, [pc, #28]	; (800322c <HAL_Init+0x40>)
 800320e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003212:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003214:	2003      	movs	r0, #3
 8003216:	f000 f94f 	bl	80034b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800321a:	200f      	movs	r0, #15
 800321c:	f000 f808 	bl	8003230 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003220:	f7ff fd14 	bl	8002c4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	40023c00 	.word	0x40023c00

08003230 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003238:	4b12      	ldr	r3, [pc, #72]	; (8003284 <HAL_InitTick+0x54>)
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	4b12      	ldr	r3, [pc, #72]	; (8003288 <HAL_InitTick+0x58>)
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	4619      	mov	r1, r3
 8003242:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003246:	fbb3 f3f1 	udiv	r3, r3, r1
 800324a:	fbb2 f3f3 	udiv	r3, r2, r3
 800324e:	4618      	mov	r0, r3
 8003250:	f000 f967 	bl	8003522 <HAL_SYSTICK_Config>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e00e      	b.n	800327c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2b0f      	cmp	r3, #15
 8003262:	d80a      	bhi.n	800327a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003264:	2200      	movs	r2, #0
 8003266:	6879      	ldr	r1, [r7, #4]
 8003268:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800326c:	f000 f92f 	bl	80034ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003270:	4a06      	ldr	r2, [pc, #24]	; (800328c <HAL_InitTick+0x5c>)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003276:	2300      	movs	r3, #0
 8003278:	e000      	b.n	800327c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
}
 800327c:	4618      	mov	r0, r3
 800327e:	3708      	adds	r7, #8
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	200002a4 	.word	0x200002a4
 8003288:	200002ac 	.word	0x200002ac
 800328c:	200002a8 	.word	0x200002a8

08003290 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003294:	4b06      	ldr	r3, [pc, #24]	; (80032b0 <HAL_IncTick+0x20>)
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	461a      	mov	r2, r3
 800329a:	4b06      	ldr	r3, [pc, #24]	; (80032b4 <HAL_IncTick+0x24>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4413      	add	r3, r2
 80032a0:	4a04      	ldr	r2, [pc, #16]	; (80032b4 <HAL_IncTick+0x24>)
 80032a2:	6013      	str	r3, [r2, #0]
}
 80032a4:	bf00      	nop
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	200002ac 	.word	0x200002ac
 80032b4:	200033d4 	.word	0x200033d4

080032b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
  return uwTick;
 80032bc:	4b03      	ldr	r3, [pc, #12]	; (80032cc <HAL_GetTick+0x14>)
 80032be:	681b      	ldr	r3, [r3, #0]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	200033d4 	.word	0x200033d4

080032d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032d8:	f7ff ffee 	bl	80032b8 <HAL_GetTick>
 80032dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032e8:	d005      	beq.n	80032f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032ea:	4b0a      	ldr	r3, [pc, #40]	; (8003314 <HAL_Delay+0x44>)
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	461a      	mov	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	4413      	add	r3, r2
 80032f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80032f6:	bf00      	nop
 80032f8:	f7ff ffde 	bl	80032b8 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	429a      	cmp	r2, r3
 8003306:	d8f7      	bhi.n	80032f8 <HAL_Delay+0x28>
  {
  }
}
 8003308:	bf00      	nop
 800330a:	bf00      	nop
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	200002ac 	.word	0x200002ac

08003318 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f003 0307 	and.w	r3, r3, #7
 8003326:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003328:	4b0c      	ldr	r3, [pc, #48]	; (800335c <__NVIC_SetPriorityGrouping+0x44>)
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800332e:	68ba      	ldr	r2, [r7, #8]
 8003330:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003334:	4013      	ands	r3, r2
 8003336:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003340:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003344:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003348:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800334a:	4a04      	ldr	r2, [pc, #16]	; (800335c <__NVIC_SetPriorityGrouping+0x44>)
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	60d3      	str	r3, [r2, #12]
}
 8003350:	bf00      	nop
 8003352:	3714      	adds	r7, #20
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr
 800335c:	e000ed00 	.word	0xe000ed00

08003360 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003364:	4b04      	ldr	r3, [pc, #16]	; (8003378 <__NVIC_GetPriorityGrouping+0x18>)
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	0a1b      	lsrs	r3, r3, #8
 800336a:	f003 0307 	and.w	r3, r3, #7
}
 800336e:	4618      	mov	r0, r3
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr
 8003378:	e000ed00 	.word	0xe000ed00

0800337c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	4603      	mov	r3, r0
 8003384:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800338a:	2b00      	cmp	r3, #0
 800338c:	db0b      	blt.n	80033a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800338e:	79fb      	ldrb	r3, [r7, #7]
 8003390:	f003 021f 	and.w	r2, r3, #31
 8003394:	4907      	ldr	r1, [pc, #28]	; (80033b4 <__NVIC_EnableIRQ+0x38>)
 8003396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800339a:	095b      	lsrs	r3, r3, #5
 800339c:	2001      	movs	r0, #1
 800339e:	fa00 f202 	lsl.w	r2, r0, r2
 80033a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033a6:	bf00      	nop
 80033a8:	370c      	adds	r7, #12
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	e000e100 	.word	0xe000e100

080033b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	4603      	mov	r3, r0
 80033c0:	6039      	str	r1, [r7, #0]
 80033c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	db0a      	blt.n	80033e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	b2da      	uxtb	r2, r3
 80033d0:	490c      	ldr	r1, [pc, #48]	; (8003404 <__NVIC_SetPriority+0x4c>)
 80033d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d6:	0112      	lsls	r2, r2, #4
 80033d8:	b2d2      	uxtb	r2, r2
 80033da:	440b      	add	r3, r1
 80033dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033e0:	e00a      	b.n	80033f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	b2da      	uxtb	r2, r3
 80033e6:	4908      	ldr	r1, [pc, #32]	; (8003408 <__NVIC_SetPriority+0x50>)
 80033e8:	79fb      	ldrb	r3, [r7, #7]
 80033ea:	f003 030f 	and.w	r3, r3, #15
 80033ee:	3b04      	subs	r3, #4
 80033f0:	0112      	lsls	r2, r2, #4
 80033f2:	b2d2      	uxtb	r2, r2
 80033f4:	440b      	add	r3, r1
 80033f6:	761a      	strb	r2, [r3, #24]
}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr
 8003404:	e000e100 	.word	0xe000e100
 8003408:	e000ed00 	.word	0xe000ed00

0800340c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800340c:	b480      	push	{r7}
 800340e:	b089      	sub	sp, #36	; 0x24
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f003 0307 	and.w	r3, r3, #7
 800341e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	f1c3 0307 	rsb	r3, r3, #7
 8003426:	2b04      	cmp	r3, #4
 8003428:	bf28      	it	cs
 800342a:	2304      	movcs	r3, #4
 800342c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	3304      	adds	r3, #4
 8003432:	2b06      	cmp	r3, #6
 8003434:	d902      	bls.n	800343c <NVIC_EncodePriority+0x30>
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	3b03      	subs	r3, #3
 800343a:	e000      	b.n	800343e <NVIC_EncodePriority+0x32>
 800343c:	2300      	movs	r3, #0
 800343e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003440:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	fa02 f303 	lsl.w	r3, r2, r3
 800344a:	43da      	mvns	r2, r3
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	401a      	ands	r2, r3
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003454:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	fa01 f303 	lsl.w	r3, r1, r3
 800345e:	43d9      	mvns	r1, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003464:	4313      	orrs	r3, r2
         );
}
 8003466:	4618      	mov	r0, r3
 8003468:	3724      	adds	r7, #36	; 0x24
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
	...

08003474 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	3b01      	subs	r3, #1
 8003480:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003484:	d301      	bcc.n	800348a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003486:	2301      	movs	r3, #1
 8003488:	e00f      	b.n	80034aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800348a:	4a0a      	ldr	r2, [pc, #40]	; (80034b4 <SysTick_Config+0x40>)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	3b01      	subs	r3, #1
 8003490:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003492:	210f      	movs	r1, #15
 8003494:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003498:	f7ff ff8e 	bl	80033b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800349c:	4b05      	ldr	r3, [pc, #20]	; (80034b4 <SysTick_Config+0x40>)
 800349e:	2200      	movs	r2, #0
 80034a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034a2:	4b04      	ldr	r3, [pc, #16]	; (80034b4 <SysTick_Config+0x40>)
 80034a4:	2207      	movs	r2, #7
 80034a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	e000e010 	.word	0xe000e010

080034b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f7ff ff29 	bl	8003318 <__NVIC_SetPriorityGrouping>
}
 80034c6:	bf00      	nop
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b086      	sub	sp, #24
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	4603      	mov	r3, r0
 80034d6:	60b9      	str	r1, [r7, #8]
 80034d8:	607a      	str	r2, [r7, #4]
 80034da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034dc:	2300      	movs	r3, #0
 80034de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034e0:	f7ff ff3e 	bl	8003360 <__NVIC_GetPriorityGrouping>
 80034e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	68b9      	ldr	r1, [r7, #8]
 80034ea:	6978      	ldr	r0, [r7, #20]
 80034ec:	f7ff ff8e 	bl	800340c <NVIC_EncodePriority>
 80034f0:	4602      	mov	r2, r0
 80034f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034f6:	4611      	mov	r1, r2
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7ff ff5d 	bl	80033b8 <__NVIC_SetPriority>
}
 80034fe:	bf00      	nop
 8003500:	3718      	adds	r7, #24
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b082      	sub	sp, #8
 800350a:	af00      	add	r7, sp, #0
 800350c:	4603      	mov	r3, r0
 800350e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003514:	4618      	mov	r0, r3
 8003516:	f7ff ff31 	bl	800337c <__NVIC_EnableIRQ>
}
 800351a:	bf00      	nop
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003522:	b580      	push	{r7, lr}
 8003524:	b082      	sub	sp, #8
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7ff ffa2 	bl	8003474 <SysTick_Config>
 8003530:	4603      	mov	r3, r0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
	...

0800353c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003544:	2300      	movs	r3, #0
 8003546:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003548:	f7ff feb6 	bl	80032b8 <HAL_GetTick>
 800354c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d101      	bne.n	8003558 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e099      	b.n	800368c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2202      	movs	r2, #2
 800355c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f022 0201 	bic.w	r2, r2, #1
 8003576:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003578:	e00f      	b.n	800359a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800357a:	f7ff fe9d 	bl	80032b8 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b05      	cmp	r3, #5
 8003586:	d908      	bls.n	800359a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2220      	movs	r2, #32
 800358c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2203      	movs	r2, #3
 8003592:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e078      	b.n	800368c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0301 	and.w	r3, r3, #1
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d1e8      	bne.n	800357a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80035b0:	697a      	ldr	r2, [r7, #20]
 80035b2:	4b38      	ldr	r3, [pc, #224]	; (8003694 <HAL_DMA_Init+0x158>)
 80035b4:	4013      	ands	r3, r2
 80035b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685a      	ldr	r2, [r3, #4]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a1b      	ldr	r3, [r3, #32]
 80035e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035e6:	697a      	ldr	r2, [r7, #20]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f0:	2b04      	cmp	r3, #4
 80035f2:	d107      	bne.n	8003604 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fc:	4313      	orrs	r3, r2
 80035fe:	697a      	ldr	r2, [r7, #20]
 8003600:	4313      	orrs	r3, r2
 8003602:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	697a      	ldr	r2, [r7, #20]
 800360a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	f023 0307 	bic.w	r3, r3, #7
 800361a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003620:	697a      	ldr	r2, [r7, #20]
 8003622:	4313      	orrs	r3, r2
 8003624:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362a:	2b04      	cmp	r3, #4
 800362c:	d117      	bne.n	800365e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	4313      	orrs	r3, r2
 8003636:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00e      	beq.n	800365e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 fa6f 	bl	8003b24 <DMA_CheckFifoParam>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d008      	beq.n	800365e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2240      	movs	r2, #64	; 0x40
 8003650:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800365a:	2301      	movs	r3, #1
 800365c:	e016      	b.n	800368c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 fa26 	bl	8003ab8 <DMA_CalcBaseAndBitshift>
 800366c:	4603      	mov	r3, r0
 800366e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003674:	223f      	movs	r2, #63	; 0x3f
 8003676:	409a      	lsls	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	3718      	adds	r7, #24
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	f010803f 	.word	0xf010803f

08003698 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b086      	sub	sp, #24
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
 80036a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036a6:	2300      	movs	r3, #0
 80036a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d101      	bne.n	80036be <HAL_DMA_Start_IT+0x26>
 80036ba:	2302      	movs	r3, #2
 80036bc:	e040      	b.n	8003740 <HAL_DMA_Start_IT+0xa8>
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2201      	movs	r2, #1
 80036c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d12f      	bne.n	8003732 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2202      	movs	r2, #2
 80036d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	68b9      	ldr	r1, [r7, #8]
 80036e6:	68f8      	ldr	r0, [r7, #12]
 80036e8:	f000 f9b8 	bl	8003a5c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036f0:	223f      	movs	r2, #63	; 0x3f
 80036f2:	409a      	lsls	r2, r3
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f042 0216 	orr.w	r2, r2, #22
 8003706:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370c:	2b00      	cmp	r3, #0
 800370e:	d007      	beq.n	8003720 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f042 0208 	orr.w	r2, r2, #8
 800371e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f042 0201 	orr.w	r2, r2, #1
 800372e:	601a      	str	r2, [r3, #0]
 8003730:	e005      	b.n	800373e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800373a:	2302      	movs	r3, #2
 800373c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800373e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003740:	4618      	mov	r0, r3
 8003742:	3718      	adds	r7, #24
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b086      	sub	sp, #24
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003750:	2300      	movs	r3, #0
 8003752:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003754:	4b92      	ldr	r3, [pc, #584]	; (80039a0 <HAL_DMA_IRQHandler+0x258>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a92      	ldr	r2, [pc, #584]	; (80039a4 <HAL_DMA_IRQHandler+0x25c>)
 800375a:	fba2 2303 	umull	r2, r3, r2, r3
 800375e:	0a9b      	lsrs	r3, r3, #10
 8003760:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003766:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003772:	2208      	movs	r2, #8
 8003774:	409a      	lsls	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	4013      	ands	r3, r2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d01a      	beq.n	80037b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0304 	and.w	r3, r3, #4
 8003788:	2b00      	cmp	r3, #0
 800378a:	d013      	beq.n	80037b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f022 0204 	bic.w	r2, r2, #4
 800379a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a0:	2208      	movs	r2, #8
 80037a2:	409a      	lsls	r2, r3
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ac:	f043 0201 	orr.w	r2, r3, #1
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037b8:	2201      	movs	r2, #1
 80037ba:	409a      	lsls	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	4013      	ands	r3, r2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d012      	beq.n	80037ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00b      	beq.n	80037ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d6:	2201      	movs	r2, #1
 80037d8:	409a      	lsls	r2, r3
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e2:	f043 0202 	orr.w	r2, r3, #2
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ee:	2204      	movs	r2, #4
 80037f0:	409a      	lsls	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	4013      	ands	r3, r2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d012      	beq.n	8003820 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0302 	and.w	r3, r3, #2
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00b      	beq.n	8003820 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800380c:	2204      	movs	r2, #4
 800380e:	409a      	lsls	r2, r3
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003818:	f043 0204 	orr.w	r2, r3, #4
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003824:	2210      	movs	r2, #16
 8003826:	409a      	lsls	r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	4013      	ands	r3, r2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d043      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0308 	and.w	r3, r3, #8
 800383a:	2b00      	cmp	r3, #0
 800383c:	d03c      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003842:	2210      	movs	r2, #16
 8003844:	409a      	lsls	r2, r3
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d018      	beq.n	800388a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d108      	bne.n	8003878 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386a:	2b00      	cmp	r3, #0
 800386c:	d024      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	4798      	blx	r3
 8003876:	e01f      	b.n	80038b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800387c:	2b00      	cmp	r3, #0
 800387e:	d01b      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	4798      	blx	r3
 8003888:	e016      	b.n	80038b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003894:	2b00      	cmp	r3, #0
 8003896:	d107      	bne.n	80038a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f022 0208 	bic.w	r2, r2, #8
 80038a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d003      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038bc:	2220      	movs	r2, #32
 80038be:	409a      	lsls	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	4013      	ands	r3, r2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f000 808e 	beq.w	80039e6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0310 	and.w	r3, r3, #16
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f000 8086 	beq.w	80039e6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038de:	2220      	movs	r2, #32
 80038e0:	409a      	lsls	r2, r3
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b05      	cmp	r3, #5
 80038f0:	d136      	bne.n	8003960 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f022 0216 	bic.w	r2, r2, #22
 8003900:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	695a      	ldr	r2, [r3, #20]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003910:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003916:	2b00      	cmp	r3, #0
 8003918:	d103      	bne.n	8003922 <HAL_DMA_IRQHandler+0x1da>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800391e:	2b00      	cmp	r3, #0
 8003920:	d007      	beq.n	8003932 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f022 0208 	bic.w	r2, r2, #8
 8003930:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003936:	223f      	movs	r2, #63	; 0x3f
 8003938:	409a      	lsls	r2, r3
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003952:	2b00      	cmp	r3, #0
 8003954:	d07d      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	4798      	blx	r3
        }
        return;
 800395e:	e078      	b.n	8003a52 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d01c      	beq.n	80039a8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d108      	bne.n	800398e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003980:	2b00      	cmp	r3, #0
 8003982:	d030      	beq.n	80039e6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	4798      	blx	r3
 800398c:	e02b      	b.n	80039e6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003992:	2b00      	cmp	r3, #0
 8003994:	d027      	beq.n	80039e6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	4798      	blx	r3
 800399e:	e022      	b.n	80039e6 <HAL_DMA_IRQHandler+0x29e>
 80039a0:	200002a4 	.word	0x200002a4
 80039a4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d10f      	bne.n	80039d6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f022 0210 	bic.w	r2, r2, #16
 80039c4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2201      	movs	r2, #1
 80039ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d003      	beq.n	80039e6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d032      	beq.n	8003a54 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d022      	beq.n	8003a40 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2205      	movs	r2, #5
 80039fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f022 0201 	bic.w	r2, r2, #1
 8003a10:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	3301      	adds	r3, #1
 8003a16:	60bb      	str	r3, [r7, #8]
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d307      	bcc.n	8003a2e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0301 	and.w	r3, r3, #1
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1f2      	bne.n	8003a12 <HAL_DMA_IRQHandler+0x2ca>
 8003a2c:	e000      	b.n	8003a30 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003a2e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d005      	beq.n	8003a54 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	4798      	blx	r3
 8003a50:	e000      	b.n	8003a54 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003a52:	bf00      	nop
    }
  }
}
 8003a54:	3718      	adds	r7, #24
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop

08003a5c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
 8003a68:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a78:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	2b40      	cmp	r3, #64	; 0x40
 8003a88:	d108      	bne.n	8003a9c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68ba      	ldr	r2, [r7, #8]
 8003a98:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003a9a:	e007      	b.n	8003aac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68ba      	ldr	r2, [r7, #8]
 8003aa2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	60da      	str	r2, [r3, #12]
}
 8003aac:	bf00      	nop
 8003aae:	3714      	adds	r7, #20
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b085      	sub	sp, #20
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	3b10      	subs	r3, #16
 8003ac8:	4a14      	ldr	r2, [pc, #80]	; (8003b1c <DMA_CalcBaseAndBitshift+0x64>)
 8003aca:	fba2 2303 	umull	r2, r3, r2, r3
 8003ace:	091b      	lsrs	r3, r3, #4
 8003ad0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003ad2:	4a13      	ldr	r2, [pc, #76]	; (8003b20 <DMA_CalcBaseAndBitshift+0x68>)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	461a      	mov	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2b03      	cmp	r3, #3
 8003ae4:	d909      	bls.n	8003afa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003aee:	f023 0303 	bic.w	r3, r3, #3
 8003af2:	1d1a      	adds	r2, r3, #4
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	659a      	str	r2, [r3, #88]	; 0x58
 8003af8:	e007      	b.n	8003b0a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b02:	f023 0303 	bic.w	r3, r3, #3
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3714      	adds	r7, #20
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	aaaaaaab 	.word	0xaaaaaaab
 8003b20:	0800da40 	.word	0x0800da40

08003b24 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b085      	sub	sp, #20
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b34:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d11f      	bne.n	8003b7e <DMA_CheckFifoParam+0x5a>
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	2b03      	cmp	r3, #3
 8003b42:	d856      	bhi.n	8003bf2 <DMA_CheckFifoParam+0xce>
 8003b44:	a201      	add	r2, pc, #4	; (adr r2, 8003b4c <DMA_CheckFifoParam+0x28>)
 8003b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b4a:	bf00      	nop
 8003b4c:	08003b5d 	.word	0x08003b5d
 8003b50:	08003b6f 	.word	0x08003b6f
 8003b54:	08003b5d 	.word	0x08003b5d
 8003b58:	08003bf3 	.word	0x08003bf3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d046      	beq.n	8003bf6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b6c:	e043      	b.n	8003bf6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b72:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b76:	d140      	bne.n	8003bfa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b7c:	e03d      	b.n	8003bfa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b86:	d121      	bne.n	8003bcc <DMA_CheckFifoParam+0xa8>
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	2b03      	cmp	r3, #3
 8003b8c:	d837      	bhi.n	8003bfe <DMA_CheckFifoParam+0xda>
 8003b8e:	a201      	add	r2, pc, #4	; (adr r2, 8003b94 <DMA_CheckFifoParam+0x70>)
 8003b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b94:	08003ba5 	.word	0x08003ba5
 8003b98:	08003bab 	.word	0x08003bab
 8003b9c:	08003ba5 	.word	0x08003ba5
 8003ba0:	08003bbd 	.word	0x08003bbd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ba8:	e030      	b.n	8003c0c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d025      	beq.n	8003c02 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bba:	e022      	b.n	8003c02 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003bc4:	d11f      	bne.n	8003c06 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003bca:	e01c      	b.n	8003c06 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d903      	bls.n	8003bda <DMA_CheckFifoParam+0xb6>
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	2b03      	cmp	r3, #3
 8003bd6:	d003      	beq.n	8003be0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003bd8:	e018      	b.n	8003c0c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	73fb      	strb	r3, [r7, #15]
      break;
 8003bde:	e015      	b.n	8003c0c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00e      	beq.n	8003c0a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	73fb      	strb	r3, [r7, #15]
      break;
 8003bf0:	e00b      	b.n	8003c0a <DMA_CheckFifoParam+0xe6>
      break;
 8003bf2:	bf00      	nop
 8003bf4:	e00a      	b.n	8003c0c <DMA_CheckFifoParam+0xe8>
      break;
 8003bf6:	bf00      	nop
 8003bf8:	e008      	b.n	8003c0c <DMA_CheckFifoParam+0xe8>
      break;
 8003bfa:	bf00      	nop
 8003bfc:	e006      	b.n	8003c0c <DMA_CheckFifoParam+0xe8>
      break;
 8003bfe:	bf00      	nop
 8003c00:	e004      	b.n	8003c0c <DMA_CheckFifoParam+0xe8>
      break;
 8003c02:	bf00      	nop
 8003c04:	e002      	b.n	8003c0c <DMA_CheckFifoParam+0xe8>
      break;   
 8003c06:	bf00      	nop
 8003c08:	e000      	b.n	8003c0c <DMA_CheckFifoParam+0xe8>
      break;
 8003c0a:	bf00      	nop
    }
  } 
  
  return status; 
 8003c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3714      	adds	r7, #20
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop

08003c1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b089      	sub	sp, #36	; 0x24
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c26:	2300      	movs	r3, #0
 8003c28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c32:	2300      	movs	r3, #0
 8003c34:	61fb      	str	r3, [r7, #28]
 8003c36:	e16b      	b.n	8003f10 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c38:	2201      	movs	r2, #1
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	697a      	ldr	r2, [r7, #20]
 8003c48:	4013      	ands	r3, r2
 8003c4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	f040 815a 	bne.w	8003f0a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f003 0303 	and.w	r3, r3, #3
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d005      	beq.n	8003c6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d130      	bne.n	8003cd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	005b      	lsls	r3, r3, #1
 8003c78:	2203      	movs	r2, #3
 8003c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7e:	43db      	mvns	r3, r3
 8003c80:	69ba      	ldr	r2, [r7, #24]
 8003c82:	4013      	ands	r3, r2
 8003c84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	68da      	ldr	r2, [r3, #12]
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	005b      	lsls	r3, r3, #1
 8003c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c92:	69ba      	ldr	r2, [r7, #24]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cac:	43db      	mvns	r3, r3
 8003cae:	69ba      	ldr	r2, [r7, #24]
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	091b      	lsrs	r3, r3, #4
 8003cba:	f003 0201 	and.w	r2, r3, #1
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc4:	69ba      	ldr	r2, [r7, #24]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	69ba      	ldr	r2, [r7, #24]
 8003cce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f003 0303 	and.w	r3, r3, #3
 8003cd8:	2b03      	cmp	r3, #3
 8003cda:	d017      	beq.n	8003d0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	005b      	lsls	r3, r3, #1
 8003ce6:	2203      	movs	r2, #3
 8003ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cec:	43db      	mvns	r3, r3
 8003cee:	69ba      	ldr	r2, [r7, #24]
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	689a      	ldr	r2, [r3, #8]
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	005b      	lsls	r3, r3, #1
 8003cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f003 0303 	and.w	r3, r3, #3
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d123      	bne.n	8003d60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	08da      	lsrs	r2, r3, #3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	3208      	adds	r2, #8
 8003d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	f003 0307 	and.w	r3, r3, #7
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	220f      	movs	r2, #15
 8003d30:	fa02 f303 	lsl.w	r3, r2, r3
 8003d34:	43db      	mvns	r3, r3
 8003d36:	69ba      	ldr	r2, [r7, #24]
 8003d38:	4013      	ands	r3, r2
 8003d3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	691a      	ldr	r2, [r3, #16]
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	f003 0307 	and.w	r3, r3, #7
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4c:	69ba      	ldr	r2, [r7, #24]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	08da      	lsrs	r2, r3, #3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	3208      	adds	r2, #8
 8003d5a:	69b9      	ldr	r1, [r7, #24]
 8003d5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	005b      	lsls	r3, r3, #1
 8003d6a:	2203      	movs	r2, #3
 8003d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d70:	43db      	mvns	r3, r3
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	4013      	ands	r3, r2
 8003d76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f003 0203 	and.w	r2, r3, #3
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	005b      	lsls	r3, r3, #1
 8003d84:	fa02 f303 	lsl.w	r3, r2, r3
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	69ba      	ldr	r2, [r7, #24]
 8003d92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f000 80b4 	beq.w	8003f0a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003da2:	2300      	movs	r3, #0
 8003da4:	60fb      	str	r3, [r7, #12]
 8003da6:	4b60      	ldr	r3, [pc, #384]	; (8003f28 <HAL_GPIO_Init+0x30c>)
 8003da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003daa:	4a5f      	ldr	r2, [pc, #380]	; (8003f28 <HAL_GPIO_Init+0x30c>)
 8003dac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003db0:	6453      	str	r3, [r2, #68]	; 0x44
 8003db2:	4b5d      	ldr	r3, [pc, #372]	; (8003f28 <HAL_GPIO_Init+0x30c>)
 8003db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dba:	60fb      	str	r3, [r7, #12]
 8003dbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003dbe:	4a5b      	ldr	r2, [pc, #364]	; (8003f2c <HAL_GPIO_Init+0x310>)
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	089b      	lsrs	r3, r3, #2
 8003dc4:	3302      	adds	r3, #2
 8003dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	f003 0303 	and.w	r3, r3, #3
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	220f      	movs	r2, #15
 8003dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dda:	43db      	mvns	r3, r3
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	4013      	ands	r3, r2
 8003de0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a52      	ldr	r2, [pc, #328]	; (8003f30 <HAL_GPIO_Init+0x314>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d02b      	beq.n	8003e42 <HAL_GPIO_Init+0x226>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a51      	ldr	r2, [pc, #324]	; (8003f34 <HAL_GPIO_Init+0x318>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d025      	beq.n	8003e3e <HAL_GPIO_Init+0x222>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a50      	ldr	r2, [pc, #320]	; (8003f38 <HAL_GPIO_Init+0x31c>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d01f      	beq.n	8003e3a <HAL_GPIO_Init+0x21e>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a4f      	ldr	r2, [pc, #316]	; (8003f3c <HAL_GPIO_Init+0x320>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d019      	beq.n	8003e36 <HAL_GPIO_Init+0x21a>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a4e      	ldr	r2, [pc, #312]	; (8003f40 <HAL_GPIO_Init+0x324>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d013      	beq.n	8003e32 <HAL_GPIO_Init+0x216>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a4d      	ldr	r2, [pc, #308]	; (8003f44 <HAL_GPIO_Init+0x328>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d00d      	beq.n	8003e2e <HAL_GPIO_Init+0x212>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a4c      	ldr	r2, [pc, #304]	; (8003f48 <HAL_GPIO_Init+0x32c>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d007      	beq.n	8003e2a <HAL_GPIO_Init+0x20e>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a4b      	ldr	r2, [pc, #300]	; (8003f4c <HAL_GPIO_Init+0x330>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d101      	bne.n	8003e26 <HAL_GPIO_Init+0x20a>
 8003e22:	2307      	movs	r3, #7
 8003e24:	e00e      	b.n	8003e44 <HAL_GPIO_Init+0x228>
 8003e26:	2308      	movs	r3, #8
 8003e28:	e00c      	b.n	8003e44 <HAL_GPIO_Init+0x228>
 8003e2a:	2306      	movs	r3, #6
 8003e2c:	e00a      	b.n	8003e44 <HAL_GPIO_Init+0x228>
 8003e2e:	2305      	movs	r3, #5
 8003e30:	e008      	b.n	8003e44 <HAL_GPIO_Init+0x228>
 8003e32:	2304      	movs	r3, #4
 8003e34:	e006      	b.n	8003e44 <HAL_GPIO_Init+0x228>
 8003e36:	2303      	movs	r3, #3
 8003e38:	e004      	b.n	8003e44 <HAL_GPIO_Init+0x228>
 8003e3a:	2302      	movs	r3, #2
 8003e3c:	e002      	b.n	8003e44 <HAL_GPIO_Init+0x228>
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e000      	b.n	8003e44 <HAL_GPIO_Init+0x228>
 8003e42:	2300      	movs	r3, #0
 8003e44:	69fa      	ldr	r2, [r7, #28]
 8003e46:	f002 0203 	and.w	r2, r2, #3
 8003e4a:	0092      	lsls	r2, r2, #2
 8003e4c:	4093      	lsls	r3, r2
 8003e4e:	69ba      	ldr	r2, [r7, #24]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e54:	4935      	ldr	r1, [pc, #212]	; (8003f2c <HAL_GPIO_Init+0x310>)
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	089b      	lsrs	r3, r3, #2
 8003e5a:	3302      	adds	r3, #2
 8003e5c:	69ba      	ldr	r2, [r7, #24]
 8003e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e62:	4b3b      	ldr	r3, [pc, #236]	; (8003f50 <HAL_GPIO_Init+0x334>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	43db      	mvns	r3, r3
 8003e6c:	69ba      	ldr	r2, [r7, #24]
 8003e6e:	4013      	ands	r3, r2
 8003e70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d003      	beq.n	8003e86 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003e7e:	69ba      	ldr	r2, [r7, #24]
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e86:	4a32      	ldr	r2, [pc, #200]	; (8003f50 <HAL_GPIO_Init+0x334>)
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003e8c:	4b30      	ldr	r3, [pc, #192]	; (8003f50 <HAL_GPIO_Init+0x334>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	43db      	mvns	r3, r3
 8003e96:	69ba      	ldr	r2, [r7, #24]
 8003e98:	4013      	ands	r3, r2
 8003e9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d003      	beq.n	8003eb0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003ea8:	69ba      	ldr	r2, [r7, #24]
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003eb0:	4a27      	ldr	r2, [pc, #156]	; (8003f50 <HAL_GPIO_Init+0x334>)
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003eb6:	4b26      	ldr	r3, [pc, #152]	; (8003f50 <HAL_GPIO_Init+0x334>)
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	43db      	mvns	r3, r3
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d003      	beq.n	8003eda <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003ed2:	69ba      	ldr	r2, [r7, #24]
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003eda:	4a1d      	ldr	r2, [pc, #116]	; (8003f50 <HAL_GPIO_Init+0x334>)
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ee0:	4b1b      	ldr	r3, [pc, #108]	; (8003f50 <HAL_GPIO_Init+0x334>)
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	43db      	mvns	r3, r3
 8003eea:	69ba      	ldr	r2, [r7, #24]
 8003eec:	4013      	ands	r3, r2
 8003eee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d003      	beq.n	8003f04 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f04:	4a12      	ldr	r2, [pc, #72]	; (8003f50 <HAL_GPIO_Init+0x334>)
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	61fb      	str	r3, [r7, #28]
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	2b0f      	cmp	r3, #15
 8003f14:	f67f ae90 	bls.w	8003c38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f18:	bf00      	nop
 8003f1a:	bf00      	nop
 8003f1c:	3724      	adds	r7, #36	; 0x24
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	40023800 	.word	0x40023800
 8003f2c:	40013800 	.word	0x40013800
 8003f30:	40020000 	.word	0x40020000
 8003f34:	40020400 	.word	0x40020400
 8003f38:	40020800 	.word	0x40020800
 8003f3c:	40020c00 	.word	0x40020c00
 8003f40:	40021000 	.word	0x40021000
 8003f44:	40021400 	.word	0x40021400
 8003f48:	40021800 	.word	0x40021800
 8003f4c:	40021c00 	.word	0x40021c00
 8003f50:	40013c00 	.word	0x40013c00

08003f54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	691a      	ldr	r2, [r3, #16]
 8003f64:	887b      	ldrh	r3, [r7, #2]
 8003f66:	4013      	ands	r3, r2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d002      	beq.n	8003f72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	73fb      	strb	r3, [r7, #15]
 8003f70:	e001      	b.n	8003f76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f72:	2300      	movs	r3, #0
 8003f74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3714      	adds	r7, #20
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	807b      	strh	r3, [r7, #2]
 8003f90:	4613      	mov	r3, r2
 8003f92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f94:	787b      	ldrb	r3, [r7, #1]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d003      	beq.n	8003fa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f9a:	887a      	ldrh	r2, [r7, #2]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003fa0:	e003      	b.n	8003faa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003fa2:	887b      	ldrh	r3, [r7, #2]
 8003fa4:	041a      	lsls	r2, r3, #16
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	619a      	str	r2, [r3, #24]
}
 8003faa:	bf00      	nop
 8003fac:	370c      	adds	r7, #12
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr

08003fb6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003fb6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fb8:	b08f      	sub	sp, #60	; 0x3c
 8003fba:	af0a      	add	r7, sp, #40	; 0x28
 8003fbc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d101      	bne.n	8003fc8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e054      	b.n	8004072 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d106      	bne.n	8003fe8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f008 fc16 	bl	800c814 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2203      	movs	r2, #3
 8003fec:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d102      	bne.n	8004002 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4618      	mov	r0, r3
 8004008:	f004 fbfe 	bl	8008808 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	603b      	str	r3, [r7, #0]
 8004012:	687e      	ldr	r6, [r7, #4]
 8004014:	466d      	mov	r5, sp
 8004016:	f106 0410 	add.w	r4, r6, #16
 800401a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800401c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800401e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004020:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004022:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004026:	e885 0003 	stmia.w	r5, {r0, r1}
 800402a:	1d33      	adds	r3, r6, #4
 800402c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800402e:	6838      	ldr	r0, [r7, #0]
 8004030:	f004 fb78 	bl	8008724 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2101      	movs	r1, #1
 800403a:	4618      	mov	r0, r3
 800403c:	f004 fbf5 	bl	800882a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	603b      	str	r3, [r7, #0]
 8004046:	687e      	ldr	r6, [r7, #4]
 8004048:	466d      	mov	r5, sp
 800404a:	f106 0410 	add.w	r4, r6, #16
 800404e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004050:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004052:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004054:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004056:	e894 0003 	ldmia.w	r4, {r0, r1}
 800405a:	e885 0003 	stmia.w	r5, {r0, r1}
 800405e:	1d33      	adds	r3, r6, #4
 8004060:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004062:	6838      	ldr	r0, [r7, #0]
 8004064:	f004 fd5c 	bl	8008b20 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3714      	adds	r7, #20
 8004076:	46bd      	mov	sp, r7
 8004078:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800407a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800407a:	b590      	push	{r4, r7, lr}
 800407c:	b089      	sub	sp, #36	; 0x24
 800407e:	af04      	add	r7, sp, #16
 8004080:	6078      	str	r0, [r7, #4]
 8004082:	4608      	mov	r0, r1
 8004084:	4611      	mov	r1, r2
 8004086:	461a      	mov	r2, r3
 8004088:	4603      	mov	r3, r0
 800408a:	70fb      	strb	r3, [r7, #3]
 800408c:	460b      	mov	r3, r1
 800408e:	70bb      	strb	r3, [r7, #2]
 8004090:	4613      	mov	r3, r2
 8004092:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800409a:	2b01      	cmp	r3, #1
 800409c:	d101      	bne.n	80040a2 <HAL_HCD_HC_Init+0x28>
 800409e:	2302      	movs	r3, #2
 80040a0:	e076      	b.n	8004190 <HAL_HCD_HC_Init+0x116>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2201      	movs	r2, #1
 80040a6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80040aa:	78fb      	ldrb	r3, [r7, #3]
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	212c      	movs	r1, #44	; 0x2c
 80040b0:	fb01 f303 	mul.w	r3, r1, r3
 80040b4:	4413      	add	r3, r2
 80040b6:	333d      	adds	r3, #61	; 0x3d
 80040b8:	2200      	movs	r2, #0
 80040ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80040bc:	78fb      	ldrb	r3, [r7, #3]
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	212c      	movs	r1, #44	; 0x2c
 80040c2:	fb01 f303 	mul.w	r3, r1, r3
 80040c6:	4413      	add	r3, r2
 80040c8:	3338      	adds	r3, #56	; 0x38
 80040ca:	787a      	ldrb	r2, [r7, #1]
 80040cc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80040ce:	78fb      	ldrb	r3, [r7, #3]
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	212c      	movs	r1, #44	; 0x2c
 80040d4:	fb01 f303 	mul.w	r3, r1, r3
 80040d8:	4413      	add	r3, r2
 80040da:	3340      	adds	r3, #64	; 0x40
 80040dc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80040de:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80040e0:	78fb      	ldrb	r3, [r7, #3]
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	212c      	movs	r1, #44	; 0x2c
 80040e6:	fb01 f303 	mul.w	r3, r1, r3
 80040ea:	4413      	add	r3, r2
 80040ec:	3339      	adds	r3, #57	; 0x39
 80040ee:	78fa      	ldrb	r2, [r7, #3]
 80040f0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80040f2:	78fb      	ldrb	r3, [r7, #3]
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	212c      	movs	r1, #44	; 0x2c
 80040f8:	fb01 f303 	mul.w	r3, r1, r3
 80040fc:	4413      	add	r3, r2
 80040fe:	333f      	adds	r3, #63	; 0x3f
 8004100:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004104:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004106:	78fb      	ldrb	r3, [r7, #3]
 8004108:	78ba      	ldrb	r2, [r7, #2]
 800410a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800410e:	b2d0      	uxtb	r0, r2
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	212c      	movs	r1, #44	; 0x2c
 8004114:	fb01 f303 	mul.w	r3, r1, r3
 8004118:	4413      	add	r3, r2
 800411a:	333a      	adds	r3, #58	; 0x3a
 800411c:	4602      	mov	r2, r0
 800411e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8004120:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004124:	2b00      	cmp	r3, #0
 8004126:	da09      	bge.n	800413c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004128:	78fb      	ldrb	r3, [r7, #3]
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	212c      	movs	r1, #44	; 0x2c
 800412e:	fb01 f303 	mul.w	r3, r1, r3
 8004132:	4413      	add	r3, r2
 8004134:	333b      	adds	r3, #59	; 0x3b
 8004136:	2201      	movs	r2, #1
 8004138:	701a      	strb	r2, [r3, #0]
 800413a:	e008      	b.n	800414e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800413c:	78fb      	ldrb	r3, [r7, #3]
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	212c      	movs	r1, #44	; 0x2c
 8004142:	fb01 f303 	mul.w	r3, r1, r3
 8004146:	4413      	add	r3, r2
 8004148:	333b      	adds	r3, #59	; 0x3b
 800414a:	2200      	movs	r2, #0
 800414c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800414e:	78fb      	ldrb	r3, [r7, #3]
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	212c      	movs	r1, #44	; 0x2c
 8004154:	fb01 f303 	mul.w	r3, r1, r3
 8004158:	4413      	add	r3, r2
 800415a:	333c      	adds	r3, #60	; 0x3c
 800415c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004160:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6818      	ldr	r0, [r3, #0]
 8004166:	787c      	ldrb	r4, [r7, #1]
 8004168:	78ba      	ldrb	r2, [r7, #2]
 800416a:	78f9      	ldrb	r1, [r7, #3]
 800416c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800416e:	9302      	str	r3, [sp, #8]
 8004170:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004174:	9301      	str	r3, [sp, #4]
 8004176:	f897 3020 	ldrb.w	r3, [r7, #32]
 800417a:	9300      	str	r3, [sp, #0]
 800417c:	4623      	mov	r3, r4
 800417e:	f004 fe49 	bl	8008e14 <USB_HC_Init>
 8004182:	4603      	mov	r3, r0
 8004184:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800418e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004190:	4618      	mov	r0, r3
 8004192:	3714      	adds	r7, #20
 8004194:	46bd      	mov	sp, r7
 8004196:	bd90      	pop	{r4, r7, pc}

08004198 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	460b      	mov	r3, r1
 80041a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80041a4:	2300      	movs	r3, #0
 80041a6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d101      	bne.n	80041b6 <HAL_HCD_HC_Halt+0x1e>
 80041b2:	2302      	movs	r3, #2
 80041b4:	e00f      	b.n	80041d6 <HAL_HCD_HC_Halt+0x3e>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2201      	movs	r2, #1
 80041ba:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	78fa      	ldrb	r2, [r7, #3]
 80041c4:	4611      	mov	r1, r2
 80041c6:	4618      	mov	r0, r3
 80041c8:	f005 f885 	bl	80092d6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80041d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
	...

080041e0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	4608      	mov	r0, r1
 80041ea:	4611      	mov	r1, r2
 80041ec:	461a      	mov	r2, r3
 80041ee:	4603      	mov	r3, r0
 80041f0:	70fb      	strb	r3, [r7, #3]
 80041f2:	460b      	mov	r3, r1
 80041f4:	70bb      	strb	r3, [r7, #2]
 80041f6:	4613      	mov	r3, r2
 80041f8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80041fa:	78fb      	ldrb	r3, [r7, #3]
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	212c      	movs	r1, #44	; 0x2c
 8004200:	fb01 f303 	mul.w	r3, r1, r3
 8004204:	4413      	add	r3, r2
 8004206:	333b      	adds	r3, #59	; 0x3b
 8004208:	78ba      	ldrb	r2, [r7, #2]
 800420a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800420c:	78fb      	ldrb	r3, [r7, #3]
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	212c      	movs	r1, #44	; 0x2c
 8004212:	fb01 f303 	mul.w	r3, r1, r3
 8004216:	4413      	add	r3, r2
 8004218:	333f      	adds	r3, #63	; 0x3f
 800421a:	787a      	ldrb	r2, [r7, #1]
 800421c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800421e:	7c3b      	ldrb	r3, [r7, #16]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d112      	bne.n	800424a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004224:	78fb      	ldrb	r3, [r7, #3]
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	212c      	movs	r1, #44	; 0x2c
 800422a:	fb01 f303 	mul.w	r3, r1, r3
 800422e:	4413      	add	r3, r2
 8004230:	3342      	adds	r3, #66	; 0x42
 8004232:	2203      	movs	r2, #3
 8004234:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004236:	78fb      	ldrb	r3, [r7, #3]
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	212c      	movs	r1, #44	; 0x2c
 800423c:	fb01 f303 	mul.w	r3, r1, r3
 8004240:	4413      	add	r3, r2
 8004242:	333d      	adds	r3, #61	; 0x3d
 8004244:	7f3a      	ldrb	r2, [r7, #28]
 8004246:	701a      	strb	r2, [r3, #0]
 8004248:	e008      	b.n	800425c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800424a:	78fb      	ldrb	r3, [r7, #3]
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	212c      	movs	r1, #44	; 0x2c
 8004250:	fb01 f303 	mul.w	r3, r1, r3
 8004254:	4413      	add	r3, r2
 8004256:	3342      	adds	r3, #66	; 0x42
 8004258:	2202      	movs	r2, #2
 800425a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800425c:	787b      	ldrb	r3, [r7, #1]
 800425e:	2b03      	cmp	r3, #3
 8004260:	f200 80c6 	bhi.w	80043f0 <HAL_HCD_HC_SubmitRequest+0x210>
 8004264:	a201      	add	r2, pc, #4	; (adr r2, 800426c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8004266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800426a:	bf00      	nop
 800426c:	0800427d 	.word	0x0800427d
 8004270:	080043dd 	.word	0x080043dd
 8004274:	080042e1 	.word	0x080042e1
 8004278:	0800435f 	.word	0x0800435f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800427c:	7c3b      	ldrb	r3, [r7, #16]
 800427e:	2b01      	cmp	r3, #1
 8004280:	f040 80b8 	bne.w	80043f4 <HAL_HCD_HC_SubmitRequest+0x214>
 8004284:	78bb      	ldrb	r3, [r7, #2]
 8004286:	2b00      	cmp	r3, #0
 8004288:	f040 80b4 	bne.w	80043f4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800428c:	8b3b      	ldrh	r3, [r7, #24]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d108      	bne.n	80042a4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8004292:	78fb      	ldrb	r3, [r7, #3]
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	212c      	movs	r1, #44	; 0x2c
 8004298:	fb01 f303 	mul.w	r3, r1, r3
 800429c:	4413      	add	r3, r2
 800429e:	3355      	adds	r3, #85	; 0x55
 80042a0:	2201      	movs	r2, #1
 80042a2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80042a4:	78fb      	ldrb	r3, [r7, #3]
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	212c      	movs	r1, #44	; 0x2c
 80042aa:	fb01 f303 	mul.w	r3, r1, r3
 80042ae:	4413      	add	r3, r2
 80042b0:	3355      	adds	r3, #85	; 0x55
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d109      	bne.n	80042cc <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80042b8:	78fb      	ldrb	r3, [r7, #3]
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	212c      	movs	r1, #44	; 0x2c
 80042be:	fb01 f303 	mul.w	r3, r1, r3
 80042c2:	4413      	add	r3, r2
 80042c4:	3342      	adds	r3, #66	; 0x42
 80042c6:	2200      	movs	r2, #0
 80042c8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80042ca:	e093      	b.n	80043f4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80042cc:	78fb      	ldrb	r3, [r7, #3]
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	212c      	movs	r1, #44	; 0x2c
 80042d2:	fb01 f303 	mul.w	r3, r1, r3
 80042d6:	4413      	add	r3, r2
 80042d8:	3342      	adds	r3, #66	; 0x42
 80042da:	2202      	movs	r2, #2
 80042dc:	701a      	strb	r2, [r3, #0]
      break;
 80042de:	e089      	b.n	80043f4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80042e0:	78bb      	ldrb	r3, [r7, #2]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d11d      	bne.n	8004322 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80042e6:	78fb      	ldrb	r3, [r7, #3]
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	212c      	movs	r1, #44	; 0x2c
 80042ec:	fb01 f303 	mul.w	r3, r1, r3
 80042f0:	4413      	add	r3, r2
 80042f2:	3355      	adds	r3, #85	; 0x55
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d109      	bne.n	800430e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80042fa:	78fb      	ldrb	r3, [r7, #3]
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	212c      	movs	r1, #44	; 0x2c
 8004300:	fb01 f303 	mul.w	r3, r1, r3
 8004304:	4413      	add	r3, r2
 8004306:	3342      	adds	r3, #66	; 0x42
 8004308:	2200      	movs	r2, #0
 800430a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800430c:	e073      	b.n	80043f6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800430e:	78fb      	ldrb	r3, [r7, #3]
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	212c      	movs	r1, #44	; 0x2c
 8004314:	fb01 f303 	mul.w	r3, r1, r3
 8004318:	4413      	add	r3, r2
 800431a:	3342      	adds	r3, #66	; 0x42
 800431c:	2202      	movs	r2, #2
 800431e:	701a      	strb	r2, [r3, #0]
      break;
 8004320:	e069      	b.n	80043f6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004322:	78fb      	ldrb	r3, [r7, #3]
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	212c      	movs	r1, #44	; 0x2c
 8004328:	fb01 f303 	mul.w	r3, r1, r3
 800432c:	4413      	add	r3, r2
 800432e:	3354      	adds	r3, #84	; 0x54
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d109      	bne.n	800434a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004336:	78fb      	ldrb	r3, [r7, #3]
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	212c      	movs	r1, #44	; 0x2c
 800433c:	fb01 f303 	mul.w	r3, r1, r3
 8004340:	4413      	add	r3, r2
 8004342:	3342      	adds	r3, #66	; 0x42
 8004344:	2200      	movs	r2, #0
 8004346:	701a      	strb	r2, [r3, #0]
      break;
 8004348:	e055      	b.n	80043f6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800434a:	78fb      	ldrb	r3, [r7, #3]
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	212c      	movs	r1, #44	; 0x2c
 8004350:	fb01 f303 	mul.w	r3, r1, r3
 8004354:	4413      	add	r3, r2
 8004356:	3342      	adds	r3, #66	; 0x42
 8004358:	2202      	movs	r2, #2
 800435a:	701a      	strb	r2, [r3, #0]
      break;
 800435c:	e04b      	b.n	80043f6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800435e:	78bb      	ldrb	r3, [r7, #2]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d11d      	bne.n	80043a0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004364:	78fb      	ldrb	r3, [r7, #3]
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	212c      	movs	r1, #44	; 0x2c
 800436a:	fb01 f303 	mul.w	r3, r1, r3
 800436e:	4413      	add	r3, r2
 8004370:	3355      	adds	r3, #85	; 0x55
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d109      	bne.n	800438c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004378:	78fb      	ldrb	r3, [r7, #3]
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	212c      	movs	r1, #44	; 0x2c
 800437e:	fb01 f303 	mul.w	r3, r1, r3
 8004382:	4413      	add	r3, r2
 8004384:	3342      	adds	r3, #66	; 0x42
 8004386:	2200      	movs	r2, #0
 8004388:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800438a:	e034      	b.n	80043f6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800438c:	78fb      	ldrb	r3, [r7, #3]
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	212c      	movs	r1, #44	; 0x2c
 8004392:	fb01 f303 	mul.w	r3, r1, r3
 8004396:	4413      	add	r3, r2
 8004398:	3342      	adds	r3, #66	; 0x42
 800439a:	2202      	movs	r2, #2
 800439c:	701a      	strb	r2, [r3, #0]
      break;
 800439e:	e02a      	b.n	80043f6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80043a0:	78fb      	ldrb	r3, [r7, #3]
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	212c      	movs	r1, #44	; 0x2c
 80043a6:	fb01 f303 	mul.w	r3, r1, r3
 80043aa:	4413      	add	r3, r2
 80043ac:	3354      	adds	r3, #84	; 0x54
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d109      	bne.n	80043c8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80043b4:	78fb      	ldrb	r3, [r7, #3]
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	212c      	movs	r1, #44	; 0x2c
 80043ba:	fb01 f303 	mul.w	r3, r1, r3
 80043be:	4413      	add	r3, r2
 80043c0:	3342      	adds	r3, #66	; 0x42
 80043c2:	2200      	movs	r2, #0
 80043c4:	701a      	strb	r2, [r3, #0]
      break;
 80043c6:	e016      	b.n	80043f6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80043c8:	78fb      	ldrb	r3, [r7, #3]
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	212c      	movs	r1, #44	; 0x2c
 80043ce:	fb01 f303 	mul.w	r3, r1, r3
 80043d2:	4413      	add	r3, r2
 80043d4:	3342      	adds	r3, #66	; 0x42
 80043d6:	2202      	movs	r2, #2
 80043d8:	701a      	strb	r2, [r3, #0]
      break;
 80043da:	e00c      	b.n	80043f6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80043dc:	78fb      	ldrb	r3, [r7, #3]
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	212c      	movs	r1, #44	; 0x2c
 80043e2:	fb01 f303 	mul.w	r3, r1, r3
 80043e6:	4413      	add	r3, r2
 80043e8:	3342      	adds	r3, #66	; 0x42
 80043ea:	2200      	movs	r2, #0
 80043ec:	701a      	strb	r2, [r3, #0]
      break;
 80043ee:	e002      	b.n	80043f6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80043f0:	bf00      	nop
 80043f2:	e000      	b.n	80043f6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80043f4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80043f6:	78fb      	ldrb	r3, [r7, #3]
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	212c      	movs	r1, #44	; 0x2c
 80043fc:	fb01 f303 	mul.w	r3, r1, r3
 8004400:	4413      	add	r3, r2
 8004402:	3344      	adds	r3, #68	; 0x44
 8004404:	697a      	ldr	r2, [r7, #20]
 8004406:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004408:	78fb      	ldrb	r3, [r7, #3]
 800440a:	8b3a      	ldrh	r2, [r7, #24]
 800440c:	6879      	ldr	r1, [r7, #4]
 800440e:	202c      	movs	r0, #44	; 0x2c
 8004410:	fb00 f303 	mul.w	r3, r0, r3
 8004414:	440b      	add	r3, r1
 8004416:	334c      	adds	r3, #76	; 0x4c
 8004418:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800441a:	78fb      	ldrb	r3, [r7, #3]
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	212c      	movs	r1, #44	; 0x2c
 8004420:	fb01 f303 	mul.w	r3, r1, r3
 8004424:	4413      	add	r3, r2
 8004426:	3360      	adds	r3, #96	; 0x60
 8004428:	2200      	movs	r2, #0
 800442a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800442c:	78fb      	ldrb	r3, [r7, #3]
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	212c      	movs	r1, #44	; 0x2c
 8004432:	fb01 f303 	mul.w	r3, r1, r3
 8004436:	4413      	add	r3, r2
 8004438:	3350      	adds	r3, #80	; 0x50
 800443a:	2200      	movs	r2, #0
 800443c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800443e:	78fb      	ldrb	r3, [r7, #3]
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	212c      	movs	r1, #44	; 0x2c
 8004444:	fb01 f303 	mul.w	r3, r1, r3
 8004448:	4413      	add	r3, r2
 800444a:	3339      	adds	r3, #57	; 0x39
 800444c:	78fa      	ldrb	r2, [r7, #3]
 800444e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004450:	78fb      	ldrb	r3, [r7, #3]
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	212c      	movs	r1, #44	; 0x2c
 8004456:	fb01 f303 	mul.w	r3, r1, r3
 800445a:	4413      	add	r3, r2
 800445c:	3361      	adds	r3, #97	; 0x61
 800445e:	2200      	movs	r2, #0
 8004460:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6818      	ldr	r0, [r3, #0]
 8004466:	78fb      	ldrb	r3, [r7, #3]
 8004468:	222c      	movs	r2, #44	; 0x2c
 800446a:	fb02 f303 	mul.w	r3, r2, r3
 800446e:	3338      	adds	r3, #56	; 0x38
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	18d1      	adds	r1, r2, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	b2db      	uxtb	r3, r3
 800447a:	461a      	mov	r2, r3
 800447c:	f004 fdd8 	bl	8009030 <USB_HC_StartXfer>
 8004480:	4603      	mov	r3, r0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3708      	adds	r7, #8
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop

0800448c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b086      	sub	sp, #24
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f004 fafb 	bl	8008a9e <USB_GetMode>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	f040 80f6 	bne.w	800469c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4618      	mov	r0, r3
 80044b6:	f004 fadf 	bl	8008a78 <USB_ReadInterrupts>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f000 80ec 	beq.w	800469a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4618      	mov	r0, r3
 80044c8:	f004 fad6 	bl	8008a78 <USB_ReadInterrupts>
 80044cc:	4603      	mov	r3, r0
 80044ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044d6:	d104      	bne.n	80044e2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80044e0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f004 fac6 	bl	8008a78 <USB_ReadInterrupts>
 80044ec:	4603      	mov	r3, r0
 80044ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044f6:	d104      	bne.n	8004502 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004500:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4618      	mov	r0, r3
 8004508:	f004 fab6 	bl	8008a78 <USB_ReadInterrupts>
 800450c:	4603      	mov	r3, r0
 800450e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004512:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004516:	d104      	bne.n	8004522 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004520:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4618      	mov	r0, r3
 8004528:	f004 faa6 	bl	8008a78 <USB_ReadInterrupts>
 800452c:	4603      	mov	r3, r0
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b02      	cmp	r3, #2
 8004534:	d103      	bne.n	800453e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2202      	movs	r2, #2
 800453c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4618      	mov	r0, r3
 8004544:	f004 fa98 	bl	8008a78 <USB_ReadInterrupts>
 8004548:	4603      	mov	r3, r0
 800454a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800454e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004552:	d11c      	bne.n	800458e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800455c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0301 	and.w	r3, r3, #1
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10f      	bne.n	800458e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800456e:	2110      	movs	r1, #16
 8004570:	6938      	ldr	r0, [r7, #16]
 8004572:	f004 f9a7 	bl	80088c4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004576:	6938      	ldr	r0, [r7, #16]
 8004578:	f004 f9c8 	bl	800890c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2101      	movs	r1, #1
 8004582:	4618      	mov	r0, r3
 8004584:	f004 fb80 	bl	8008c88 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f008 f9c1 	bl	800c910 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4618      	mov	r0, r3
 8004594:	f004 fa70 	bl	8008a78 <USB_ReadInterrupts>
 8004598:	4603      	mov	r3, r0
 800459a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800459e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045a2:	d102      	bne.n	80045aa <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f001 fa03 	bl	80059b0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f004 fa62 	bl	8008a78 <USB_ReadInterrupts>
 80045b4:	4603      	mov	r3, r0
 80045b6:	f003 0308 	and.w	r3, r3, #8
 80045ba:	2b08      	cmp	r3, #8
 80045bc:	d106      	bne.n	80045cc <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f008 f98a 	bl	800c8d8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2208      	movs	r2, #8
 80045ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4618      	mov	r0, r3
 80045d2:	f004 fa51 	bl	8008a78 <USB_ReadInterrupts>
 80045d6:	4603      	mov	r3, r0
 80045d8:	f003 0310 	and.w	r3, r3, #16
 80045dc:	2b10      	cmp	r3, #16
 80045de:	d101      	bne.n	80045e4 <HAL_HCD_IRQHandler+0x158>
 80045e0:	2301      	movs	r3, #1
 80045e2:	e000      	b.n	80045e6 <HAL_HCD_IRQHandler+0x15a>
 80045e4:	2300      	movs	r3, #0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d012      	beq.n	8004610 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	699a      	ldr	r2, [r3, #24]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f022 0210 	bic.w	r2, r2, #16
 80045f8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f001 f906 	bl	800580c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	699a      	ldr	r2, [r3, #24]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f042 0210 	orr.w	r2, r2, #16
 800460e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4618      	mov	r0, r3
 8004616:	f004 fa2f 	bl	8008a78 <USB_ReadInterrupts>
 800461a:	4603      	mov	r3, r0
 800461c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004620:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004624:	d13a      	bne.n	800469c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4618      	mov	r0, r3
 800462c:	f004 fe42 	bl	80092b4 <USB_HC_ReadInterrupt>
 8004630:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004632:	2300      	movs	r3, #0
 8004634:	617b      	str	r3, [r7, #20]
 8004636:	e025      	b.n	8004684 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	f003 030f 	and.w	r3, r3, #15
 800463e:	68ba      	ldr	r2, [r7, #8]
 8004640:	fa22 f303 	lsr.w	r3, r2, r3
 8004644:	f003 0301 	and.w	r3, r3, #1
 8004648:	2b00      	cmp	r3, #0
 800464a:	d018      	beq.n	800467e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	015a      	lsls	r2, r3, #5
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	4413      	add	r3, r2
 8004654:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800465e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004662:	d106      	bne.n	8004672 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	b2db      	uxtb	r3, r3
 8004668:	4619      	mov	r1, r3
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 f8ab 	bl	80047c6 <HCD_HC_IN_IRQHandler>
 8004670:	e005      	b.n	800467e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	b2db      	uxtb	r3, r3
 8004676:	4619      	mov	r1, r3
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 fcc6 	bl	800500a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	3301      	adds	r3, #1
 8004682:	617b      	str	r3, [r7, #20]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	697a      	ldr	r2, [r7, #20]
 800468a:	429a      	cmp	r2, r3
 800468c:	d3d4      	bcc.n	8004638 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004696:	615a      	str	r2, [r3, #20]
 8004698:	e000      	b.n	800469c <HAL_HCD_IRQHandler+0x210>
      return;
 800469a:	bf00      	nop
    }
  }
}
 800469c:	3718      	adds	r7, #24
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}

080046a2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80046a2:	b580      	push	{r7, lr}
 80046a4:	b082      	sub	sp, #8
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d101      	bne.n	80046b8 <HAL_HCD_Start+0x16>
 80046b4:	2302      	movs	r3, #2
 80046b6:	e013      	b.n	80046e0 <HAL_HCD_Start+0x3e>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2101      	movs	r1, #1
 80046c6:	4618      	mov	r0, r3
 80046c8:	f004 fb42 	bl	8008d50 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4618      	mov	r0, r3
 80046d2:	f004 f888 	bl	80087e6 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3708      	adds	r7, #8
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d101      	bne.n	80046fe <HAL_HCD_Stop+0x16>
 80046fa:	2302      	movs	r3, #2
 80046fc:	e00d      	b.n	800471a <HAL_HCD_Stop+0x32>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2201      	movs	r2, #1
 8004702:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4618      	mov	r0, r3
 800470c:	f004 ff3c 	bl	8009588 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3708      	adds	r7, #8
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}

08004722 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004722:	b580      	push	{r7, lr}
 8004724:	b082      	sub	sp, #8
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4618      	mov	r0, r3
 8004730:	f004 fae4 	bl	8008cfc <USB_ResetPort>
 8004734:	4603      	mov	r3, r0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3708      	adds	r7, #8
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}

0800473e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800473e:	b480      	push	{r7}
 8004740:	b083      	sub	sp, #12
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
 8004746:	460b      	mov	r3, r1
 8004748:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800474a:	78fb      	ldrb	r3, [r7, #3]
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	212c      	movs	r1, #44	; 0x2c
 8004750:	fb01 f303 	mul.w	r3, r1, r3
 8004754:	4413      	add	r3, r2
 8004756:	3360      	adds	r3, #96	; 0x60
 8004758:	781b      	ldrb	r3, [r3, #0]
}
 800475a:	4618      	mov	r0, r3
 800475c:	370c      	adds	r7, #12
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr

08004766 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004766:	b480      	push	{r7}
 8004768:	b083      	sub	sp, #12
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
 800476e:	460b      	mov	r3, r1
 8004770:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004772:	78fb      	ldrb	r3, [r7, #3]
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	212c      	movs	r1, #44	; 0x2c
 8004778:	fb01 f303 	mul.w	r3, r1, r3
 800477c:	4413      	add	r3, r2
 800477e:	3350      	adds	r3, #80	; 0x50
 8004780:	681b      	ldr	r3, [r3, #0]
}
 8004782:	4618      	mov	r0, r3
 8004784:	370c      	adds	r7, #12
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr

0800478e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800478e:	b580      	push	{r7, lr}
 8004790:	b082      	sub	sp, #8
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4618      	mov	r0, r3
 800479c:	f004 fb28 	bl	8008df0 <USB_GetCurrentFrame>
 80047a0:	4603      	mov	r3, r0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3708      	adds	r7, #8
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b082      	sub	sp, #8
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4618      	mov	r0, r3
 80047b8:	f004 fb03 	bl	8008dc2 <USB_GetHostSpeed>
 80047bc:	4603      	mov	r3, r0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3708      	adds	r7, #8
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b086      	sub	sp, #24
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
 80047ce:	460b      	mov	r3, r1
 80047d0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80047dc:	78fb      	ldrb	r3, [r7, #3]
 80047de:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	015a      	lsls	r2, r3, #5
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	4413      	add	r3, r2
 80047e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f003 0304 	and.w	r3, r3, #4
 80047f2:	2b04      	cmp	r3, #4
 80047f4:	d119      	bne.n	800482a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	015a      	lsls	r2, r3, #5
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	4413      	add	r3, r2
 80047fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004802:	461a      	mov	r2, r3
 8004804:	2304      	movs	r3, #4
 8004806:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	015a      	lsls	r2, r3, #5
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	4413      	add	r3, r2
 8004810:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	0151      	lsls	r1, r2, #5
 800481a:	693a      	ldr	r2, [r7, #16]
 800481c:	440a      	add	r2, r1
 800481e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004822:	f043 0302 	orr.w	r3, r3, #2
 8004826:	60d3      	str	r3, [r2, #12]
 8004828:	e101      	b.n	8004a2e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	015a      	lsls	r2, r3, #5
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	4413      	add	r3, r2
 8004832:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800483c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004840:	d12b      	bne.n	800489a <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	015a      	lsls	r2, r3, #5
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	4413      	add	r3, r2
 800484a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800484e:	461a      	mov	r2, r3
 8004850:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004854:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	212c      	movs	r1, #44	; 0x2c
 800485c:	fb01 f303 	mul.w	r3, r1, r3
 8004860:	4413      	add	r3, r2
 8004862:	3361      	adds	r3, #97	; 0x61
 8004864:	2207      	movs	r2, #7
 8004866:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	015a      	lsls	r2, r3, #5
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	4413      	add	r3, r2
 8004870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	68fa      	ldr	r2, [r7, #12]
 8004878:	0151      	lsls	r1, r2, #5
 800487a:	693a      	ldr	r2, [r7, #16]
 800487c:	440a      	add	r2, r1
 800487e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004882:	f043 0302 	orr.w	r3, r3, #2
 8004886:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	b2d2      	uxtb	r2, r2
 8004890:	4611      	mov	r1, r2
 8004892:	4618      	mov	r0, r3
 8004894:	f004 fd1f 	bl	80092d6 <USB_HC_Halt>
 8004898:	e0c9      	b.n	8004a2e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	015a      	lsls	r2, r3, #5
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	4413      	add	r3, r2
 80048a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	f003 0320 	and.w	r3, r3, #32
 80048ac:	2b20      	cmp	r3, #32
 80048ae:	d109      	bne.n	80048c4 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	015a      	lsls	r2, r3, #5
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	4413      	add	r3, r2
 80048b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048bc:	461a      	mov	r2, r3
 80048be:	2320      	movs	r3, #32
 80048c0:	6093      	str	r3, [r2, #8]
 80048c2:	e0b4      	b.n	8004a2e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	015a      	lsls	r2, r3, #5
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	4413      	add	r3, r2
 80048cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f003 0308 	and.w	r3, r3, #8
 80048d6:	2b08      	cmp	r3, #8
 80048d8:	d133      	bne.n	8004942 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	015a      	lsls	r2, r3, #5
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	4413      	add	r3, r2
 80048e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	0151      	lsls	r1, r2, #5
 80048ec:	693a      	ldr	r2, [r7, #16]
 80048ee:	440a      	add	r2, r1
 80048f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048f4:	f043 0302 	orr.w	r3, r3, #2
 80048f8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	212c      	movs	r1, #44	; 0x2c
 8004900:	fb01 f303 	mul.w	r3, r1, r3
 8004904:	4413      	add	r3, r2
 8004906:	3361      	adds	r3, #97	; 0x61
 8004908:	2205      	movs	r2, #5
 800490a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	015a      	lsls	r2, r3, #5
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	4413      	add	r3, r2
 8004914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004918:	461a      	mov	r2, r3
 800491a:	2310      	movs	r3, #16
 800491c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	015a      	lsls	r2, r3, #5
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	4413      	add	r3, r2
 8004926:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800492a:	461a      	mov	r2, r3
 800492c:	2308      	movs	r3, #8
 800492e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	b2d2      	uxtb	r2, r2
 8004938:	4611      	mov	r1, r2
 800493a:	4618      	mov	r0, r3
 800493c:	f004 fccb 	bl	80092d6 <USB_HC_Halt>
 8004940:	e075      	b.n	8004a2e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	015a      	lsls	r2, r3, #5
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	4413      	add	r3, r2
 800494a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004954:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004958:	d134      	bne.n	80049c4 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	015a      	lsls	r2, r3, #5
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	4413      	add	r3, r2
 8004962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	0151      	lsls	r1, r2, #5
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	440a      	add	r2, r1
 8004970:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004974:	f043 0302 	orr.w	r3, r3, #2
 8004978:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	212c      	movs	r1, #44	; 0x2c
 8004980:	fb01 f303 	mul.w	r3, r1, r3
 8004984:	4413      	add	r3, r2
 8004986:	3361      	adds	r3, #97	; 0x61
 8004988:	2208      	movs	r2, #8
 800498a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	015a      	lsls	r2, r3, #5
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	4413      	add	r3, r2
 8004994:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004998:	461a      	mov	r2, r3
 800499a:	2310      	movs	r3, #16
 800499c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	015a      	lsls	r2, r3, #5
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	4413      	add	r3, r2
 80049a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049aa:	461a      	mov	r2, r3
 80049ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049b0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	b2d2      	uxtb	r2, r2
 80049ba:	4611      	mov	r1, r2
 80049bc:	4618      	mov	r0, r3
 80049be:	f004 fc8a 	bl	80092d6 <USB_HC_Halt>
 80049c2:	e034      	b.n	8004a2e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	015a      	lsls	r2, r3, #5
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	4413      	add	r3, r2
 80049cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d6:	2b80      	cmp	r3, #128	; 0x80
 80049d8:	d129      	bne.n	8004a2e <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	015a      	lsls	r2, r3, #5
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	4413      	add	r3, r2
 80049e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	0151      	lsls	r1, r2, #5
 80049ec:	693a      	ldr	r2, [r7, #16]
 80049ee:	440a      	add	r2, r1
 80049f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049f4:	f043 0302 	orr.w	r3, r3, #2
 80049f8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	212c      	movs	r1, #44	; 0x2c
 8004a00:	fb01 f303 	mul.w	r3, r1, r3
 8004a04:	4413      	add	r3, r2
 8004a06:	3361      	adds	r3, #97	; 0x61
 8004a08:	2206      	movs	r2, #6
 8004a0a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	b2d2      	uxtb	r2, r2
 8004a14:	4611      	mov	r1, r2
 8004a16:	4618      	mov	r0, r3
 8004a18:	f004 fc5d 	bl	80092d6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	015a      	lsls	r2, r3, #5
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	4413      	add	r3, r2
 8004a24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a28:	461a      	mov	r2, r3
 8004a2a:	2380      	movs	r3, #128	; 0x80
 8004a2c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	015a      	lsls	r2, r3, #5
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	4413      	add	r3, r2
 8004a36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a44:	d122      	bne.n	8004a8c <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	015a      	lsls	r2, r3, #5
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	68fa      	ldr	r2, [r7, #12]
 8004a56:	0151      	lsls	r1, r2, #5
 8004a58:	693a      	ldr	r2, [r7, #16]
 8004a5a:	440a      	add	r2, r1
 8004a5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a60:	f043 0302 	orr.w	r3, r3, #2
 8004a64:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	b2d2      	uxtb	r2, r2
 8004a6e:	4611      	mov	r1, r2
 8004a70:	4618      	mov	r0, r3
 8004a72:	f004 fc30 	bl	80092d6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	015a      	lsls	r2, r3, #5
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a82:	461a      	mov	r2, r3
 8004a84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a88:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004a8a:	e2ba      	b.n	8005002 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	015a      	lsls	r2, r3, #5
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	4413      	add	r3, r2
 8004a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f003 0301 	and.w	r3, r3, #1
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	f040 811b 	bne.w	8004cda <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d019      	beq.n	8004ae0 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	212c      	movs	r1, #44	; 0x2c
 8004ab2:	fb01 f303 	mul.w	r3, r1, r3
 8004ab6:	4413      	add	r3, r2
 8004ab8:	3348      	adds	r3, #72	; 0x48
 8004aba:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	0159      	lsls	r1, r3, #5
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	440b      	add	r3, r1
 8004ac4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004ace:	1ad2      	subs	r2, r2, r3
 8004ad0:	6879      	ldr	r1, [r7, #4]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	202c      	movs	r0, #44	; 0x2c
 8004ad6:	fb00 f303 	mul.w	r3, r0, r3
 8004ada:	440b      	add	r3, r1
 8004adc:	3350      	adds	r3, #80	; 0x50
 8004ade:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	212c      	movs	r1, #44	; 0x2c
 8004ae6:	fb01 f303 	mul.w	r3, r1, r3
 8004aea:	4413      	add	r3, r2
 8004aec:	3361      	adds	r3, #97	; 0x61
 8004aee:	2201      	movs	r2, #1
 8004af0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	212c      	movs	r1, #44	; 0x2c
 8004af8:	fb01 f303 	mul.w	r3, r1, r3
 8004afc:	4413      	add	r3, r2
 8004afe:	335c      	adds	r3, #92	; 0x5c
 8004b00:	2200      	movs	r2, #0
 8004b02:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	015a      	lsls	r2, r3, #5
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b10:	461a      	mov	r2, r3
 8004b12:	2301      	movs	r3, #1
 8004b14:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	212c      	movs	r1, #44	; 0x2c
 8004b1c:	fb01 f303 	mul.w	r3, r1, r3
 8004b20:	4413      	add	r3, r2
 8004b22:	333f      	adds	r3, #63	; 0x3f
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d009      	beq.n	8004b3e <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	212c      	movs	r1, #44	; 0x2c
 8004b30:	fb01 f303 	mul.w	r3, r1, r3
 8004b34:	4413      	add	r3, r2
 8004b36:	333f      	adds	r3, #63	; 0x3f
 8004b38:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d121      	bne.n	8004b82 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	015a      	lsls	r2, r3, #5
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	4413      	add	r3, r2
 8004b46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	68fa      	ldr	r2, [r7, #12]
 8004b4e:	0151      	lsls	r1, r2, #5
 8004b50:	693a      	ldr	r2, [r7, #16]
 8004b52:	440a      	add	r2, r1
 8004b54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b58:	f043 0302 	orr.w	r3, r3, #2
 8004b5c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	b2d2      	uxtb	r2, r2
 8004b66:	4611      	mov	r1, r2
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f004 fbb4 	bl	80092d6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	015a      	lsls	r2, r3, #5
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	4413      	add	r3, r2
 8004b76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	2310      	movs	r3, #16
 8004b7e:	6093      	str	r3, [r2, #8]
 8004b80:	e066      	b.n	8004c50 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	212c      	movs	r1, #44	; 0x2c
 8004b88:	fb01 f303 	mul.w	r3, r1, r3
 8004b8c:	4413      	add	r3, r2
 8004b8e:	333f      	adds	r3, #63	; 0x3f
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	2b03      	cmp	r3, #3
 8004b94:	d127      	bne.n	8004be6 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	015a      	lsls	r2, r3, #5
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	0151      	lsls	r1, r2, #5
 8004ba8:	693a      	ldr	r2, [r7, #16]
 8004baa:	440a      	add	r2, r1
 8004bac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004bb0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004bb4:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	212c      	movs	r1, #44	; 0x2c
 8004bbc:	fb01 f303 	mul.w	r3, r1, r3
 8004bc0:	4413      	add	r3, r2
 8004bc2:	3360      	adds	r3, #96	; 0x60
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	b2d9      	uxtb	r1, r3
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	202c      	movs	r0, #44	; 0x2c
 8004bd2:	fb00 f303 	mul.w	r3, r0, r3
 8004bd6:	4413      	add	r3, r2
 8004bd8:	3360      	adds	r3, #96	; 0x60
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	461a      	mov	r2, r3
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f007 fea4 	bl	800c92c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004be4:	e034      	b.n	8004c50 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	212c      	movs	r1, #44	; 0x2c
 8004bec:	fb01 f303 	mul.w	r3, r1, r3
 8004bf0:	4413      	add	r3, r2
 8004bf2:	333f      	adds	r3, #63	; 0x3f
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d12a      	bne.n	8004c50 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	212c      	movs	r1, #44	; 0x2c
 8004c00:	fb01 f303 	mul.w	r3, r1, r3
 8004c04:	4413      	add	r3, r2
 8004c06:	3360      	adds	r3, #96	; 0x60
 8004c08:	2201      	movs	r2, #1
 8004c0a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	212c      	movs	r1, #44	; 0x2c
 8004c12:	fb01 f303 	mul.w	r3, r1, r3
 8004c16:	4413      	add	r3, r2
 8004c18:	3354      	adds	r3, #84	; 0x54
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	f083 0301 	eor.w	r3, r3, #1
 8004c20:	b2d8      	uxtb	r0, r3
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	212c      	movs	r1, #44	; 0x2c
 8004c28:	fb01 f303 	mul.w	r3, r1, r3
 8004c2c:	4413      	add	r3, r2
 8004c2e:	3354      	adds	r3, #84	; 0x54
 8004c30:	4602      	mov	r2, r0
 8004c32:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	b2d9      	uxtb	r1, r3
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	202c      	movs	r0, #44	; 0x2c
 8004c3e:	fb00 f303 	mul.w	r3, r0, r3
 8004c42:	4413      	add	r3, r2
 8004c44:	3360      	adds	r3, #96	; 0x60
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	461a      	mov	r2, r3
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f007 fe6e 	bl	800c92c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d12b      	bne.n	8004cb0 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	212c      	movs	r1, #44	; 0x2c
 8004c5e:	fb01 f303 	mul.w	r3, r1, r3
 8004c62:	4413      	add	r3, r2
 8004c64:	3348      	adds	r3, #72	; 0x48
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	6879      	ldr	r1, [r7, #4]
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	202c      	movs	r0, #44	; 0x2c
 8004c6e:	fb00 f202 	mul.w	r2, r0, r2
 8004c72:	440a      	add	r2, r1
 8004c74:	3240      	adds	r2, #64	; 0x40
 8004c76:	8812      	ldrh	r2, [r2, #0]
 8004c78:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c7c:	f003 0301 	and.w	r3, r3, #1
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	f000 81be 	beq.w	8005002 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	212c      	movs	r1, #44	; 0x2c
 8004c8c:	fb01 f303 	mul.w	r3, r1, r3
 8004c90:	4413      	add	r3, r2
 8004c92:	3354      	adds	r3, #84	; 0x54
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	f083 0301 	eor.w	r3, r3, #1
 8004c9a:	b2d8      	uxtb	r0, r3
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	212c      	movs	r1, #44	; 0x2c
 8004ca2:	fb01 f303 	mul.w	r3, r1, r3
 8004ca6:	4413      	add	r3, r2
 8004ca8:	3354      	adds	r3, #84	; 0x54
 8004caa:	4602      	mov	r2, r0
 8004cac:	701a      	strb	r2, [r3, #0]
}
 8004cae:	e1a8      	b.n	8005002 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	212c      	movs	r1, #44	; 0x2c
 8004cb6:	fb01 f303 	mul.w	r3, r1, r3
 8004cba:	4413      	add	r3, r2
 8004cbc:	3354      	adds	r3, #84	; 0x54
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	f083 0301 	eor.w	r3, r3, #1
 8004cc4:	b2d8      	uxtb	r0, r3
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	212c      	movs	r1, #44	; 0x2c
 8004ccc:	fb01 f303 	mul.w	r3, r1, r3
 8004cd0:	4413      	add	r3, r2
 8004cd2:	3354      	adds	r3, #84	; 0x54
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	701a      	strb	r2, [r3, #0]
}
 8004cd8:	e193      	b.n	8005002 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	015a      	lsls	r2, r3, #5
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	4413      	add	r3, r2
 8004ce2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	f003 0302 	and.w	r3, r3, #2
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	f040 8106 	bne.w	8004efe <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	015a      	lsls	r2, r3, #5
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	68fa      	ldr	r2, [r7, #12]
 8004d02:	0151      	lsls	r1, r2, #5
 8004d04:	693a      	ldr	r2, [r7, #16]
 8004d06:	440a      	add	r2, r1
 8004d08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d0c:	f023 0302 	bic.w	r3, r3, #2
 8004d10:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	212c      	movs	r1, #44	; 0x2c
 8004d18:	fb01 f303 	mul.w	r3, r1, r3
 8004d1c:	4413      	add	r3, r2
 8004d1e:	3361      	adds	r3, #97	; 0x61
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d109      	bne.n	8004d3a <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	212c      	movs	r1, #44	; 0x2c
 8004d2c:	fb01 f303 	mul.w	r3, r1, r3
 8004d30:	4413      	add	r3, r2
 8004d32:	3360      	adds	r3, #96	; 0x60
 8004d34:	2201      	movs	r2, #1
 8004d36:	701a      	strb	r2, [r3, #0]
 8004d38:	e0c9      	b.n	8004ece <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	212c      	movs	r1, #44	; 0x2c
 8004d40:	fb01 f303 	mul.w	r3, r1, r3
 8004d44:	4413      	add	r3, r2
 8004d46:	3361      	adds	r3, #97	; 0x61
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	2b05      	cmp	r3, #5
 8004d4c:	d109      	bne.n	8004d62 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	212c      	movs	r1, #44	; 0x2c
 8004d54:	fb01 f303 	mul.w	r3, r1, r3
 8004d58:	4413      	add	r3, r2
 8004d5a:	3360      	adds	r3, #96	; 0x60
 8004d5c:	2205      	movs	r2, #5
 8004d5e:	701a      	strb	r2, [r3, #0]
 8004d60:	e0b5      	b.n	8004ece <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	212c      	movs	r1, #44	; 0x2c
 8004d68:	fb01 f303 	mul.w	r3, r1, r3
 8004d6c:	4413      	add	r3, r2
 8004d6e:	3361      	adds	r3, #97	; 0x61
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	2b06      	cmp	r3, #6
 8004d74:	d009      	beq.n	8004d8a <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	212c      	movs	r1, #44	; 0x2c
 8004d7c:	fb01 f303 	mul.w	r3, r1, r3
 8004d80:	4413      	add	r3, r2
 8004d82:	3361      	adds	r3, #97	; 0x61
 8004d84:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004d86:	2b08      	cmp	r3, #8
 8004d88:	d150      	bne.n	8004e2c <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	212c      	movs	r1, #44	; 0x2c
 8004d90:	fb01 f303 	mul.w	r3, r1, r3
 8004d94:	4413      	add	r3, r2
 8004d96:	335c      	adds	r3, #92	; 0x5c
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	1c5a      	adds	r2, r3, #1
 8004d9c:	6879      	ldr	r1, [r7, #4]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	202c      	movs	r0, #44	; 0x2c
 8004da2:	fb00 f303 	mul.w	r3, r0, r3
 8004da6:	440b      	add	r3, r1
 8004da8:	335c      	adds	r3, #92	; 0x5c
 8004daa:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	212c      	movs	r1, #44	; 0x2c
 8004db2:	fb01 f303 	mul.w	r3, r1, r3
 8004db6:	4413      	add	r3, r2
 8004db8:	335c      	adds	r3, #92	; 0x5c
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d912      	bls.n	8004de6 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	212c      	movs	r1, #44	; 0x2c
 8004dc6:	fb01 f303 	mul.w	r3, r1, r3
 8004dca:	4413      	add	r3, r2
 8004dcc:	335c      	adds	r3, #92	; 0x5c
 8004dce:	2200      	movs	r2, #0
 8004dd0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	212c      	movs	r1, #44	; 0x2c
 8004dd8:	fb01 f303 	mul.w	r3, r1, r3
 8004ddc:	4413      	add	r3, r2
 8004dde:	3360      	adds	r3, #96	; 0x60
 8004de0:	2204      	movs	r2, #4
 8004de2:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004de4:	e073      	b.n	8004ece <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	212c      	movs	r1, #44	; 0x2c
 8004dec:	fb01 f303 	mul.w	r3, r1, r3
 8004df0:	4413      	add	r3, r2
 8004df2:	3360      	adds	r3, #96	; 0x60
 8004df4:	2202      	movs	r2, #2
 8004df6:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	015a      	lsls	r2, r3, #5
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	4413      	add	r3, r2
 8004e00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004e0e:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e16:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	015a      	lsls	r2, r3, #5
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	4413      	add	r3, r2
 8004e20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e24:	461a      	mov	r2, r3
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004e2a:	e050      	b.n	8004ece <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	212c      	movs	r1, #44	; 0x2c
 8004e32:	fb01 f303 	mul.w	r3, r1, r3
 8004e36:	4413      	add	r3, r2
 8004e38:	3361      	adds	r3, #97	; 0x61
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	2b03      	cmp	r3, #3
 8004e3e:	d122      	bne.n	8004e86 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	212c      	movs	r1, #44	; 0x2c
 8004e46:	fb01 f303 	mul.w	r3, r1, r3
 8004e4a:	4413      	add	r3, r2
 8004e4c:	3360      	adds	r3, #96	; 0x60
 8004e4e:	2202      	movs	r2, #2
 8004e50:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	015a      	lsls	r2, r3, #5
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	4413      	add	r3, r2
 8004e5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004e68:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e70:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	015a      	lsls	r2, r3, #5
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	4413      	add	r3, r2
 8004e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e7e:	461a      	mov	r2, r3
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	6013      	str	r3, [r2, #0]
 8004e84:	e023      	b.n	8004ece <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	212c      	movs	r1, #44	; 0x2c
 8004e8c:	fb01 f303 	mul.w	r3, r1, r3
 8004e90:	4413      	add	r3, r2
 8004e92:	3361      	adds	r3, #97	; 0x61
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	2b07      	cmp	r3, #7
 8004e98:	d119      	bne.n	8004ece <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	212c      	movs	r1, #44	; 0x2c
 8004ea0:	fb01 f303 	mul.w	r3, r1, r3
 8004ea4:	4413      	add	r3, r2
 8004ea6:	335c      	adds	r3, #92	; 0x5c
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	1c5a      	adds	r2, r3, #1
 8004eac:	6879      	ldr	r1, [r7, #4]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	202c      	movs	r0, #44	; 0x2c
 8004eb2:	fb00 f303 	mul.w	r3, r0, r3
 8004eb6:	440b      	add	r3, r1
 8004eb8:	335c      	adds	r3, #92	; 0x5c
 8004eba:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	212c      	movs	r1, #44	; 0x2c
 8004ec2:	fb01 f303 	mul.w	r3, r1, r3
 8004ec6:	4413      	add	r3, r2
 8004ec8:	3360      	adds	r3, #96	; 0x60
 8004eca:	2204      	movs	r2, #4
 8004ecc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	015a      	lsls	r2, r3, #5
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eda:	461a      	mov	r2, r3
 8004edc:	2302      	movs	r3, #2
 8004ede:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	b2d9      	uxtb	r1, r3
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	202c      	movs	r0, #44	; 0x2c
 8004eea:	fb00 f303 	mul.w	r3, r0, r3
 8004eee:	4413      	add	r3, r2
 8004ef0:	3360      	adds	r3, #96	; 0x60
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f007 fd18 	bl	800c92c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004efc:	e081      	b.n	8005002 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	015a      	lsls	r2, r3, #5
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	4413      	add	r3, r2
 8004f06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	f003 0310 	and.w	r3, r3, #16
 8004f10:	2b10      	cmp	r3, #16
 8004f12:	d176      	bne.n	8005002 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	212c      	movs	r1, #44	; 0x2c
 8004f1a:	fb01 f303 	mul.w	r3, r1, r3
 8004f1e:	4413      	add	r3, r2
 8004f20:	333f      	adds	r3, #63	; 0x3f
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	2b03      	cmp	r3, #3
 8004f26:	d121      	bne.n	8004f6c <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	212c      	movs	r1, #44	; 0x2c
 8004f2e:	fb01 f303 	mul.w	r3, r1, r3
 8004f32:	4413      	add	r3, r2
 8004f34:	335c      	adds	r3, #92	; 0x5c
 8004f36:	2200      	movs	r2, #0
 8004f38:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	015a      	lsls	r2, r3, #5
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	4413      	add	r3, r2
 8004f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	68fa      	ldr	r2, [r7, #12]
 8004f4a:	0151      	lsls	r1, r2, #5
 8004f4c:	693a      	ldr	r2, [r7, #16]
 8004f4e:	440a      	add	r2, r1
 8004f50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f54:	f043 0302 	orr.w	r3, r3, #2
 8004f58:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	b2d2      	uxtb	r2, r2
 8004f62:	4611      	mov	r1, r2
 8004f64:	4618      	mov	r0, r3
 8004f66:	f004 f9b6 	bl	80092d6 <USB_HC_Halt>
 8004f6a:	e041      	b.n	8004ff0 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	212c      	movs	r1, #44	; 0x2c
 8004f72:	fb01 f303 	mul.w	r3, r1, r3
 8004f76:	4413      	add	r3, r2
 8004f78:	333f      	adds	r3, #63	; 0x3f
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d009      	beq.n	8004f94 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	212c      	movs	r1, #44	; 0x2c
 8004f86:	fb01 f303 	mul.w	r3, r1, r3
 8004f8a:	4413      	add	r3, r2
 8004f8c:	333f      	adds	r3, #63	; 0x3f
 8004f8e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d12d      	bne.n	8004ff0 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	212c      	movs	r1, #44	; 0x2c
 8004f9a:	fb01 f303 	mul.w	r3, r1, r3
 8004f9e:	4413      	add	r3, r2
 8004fa0:	335c      	adds	r3, #92	; 0x5c
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d120      	bne.n	8004ff0 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	212c      	movs	r1, #44	; 0x2c
 8004fb4:	fb01 f303 	mul.w	r3, r1, r3
 8004fb8:	4413      	add	r3, r2
 8004fba:	3361      	adds	r3, #97	; 0x61
 8004fbc:	2203      	movs	r2, #3
 8004fbe:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	015a      	lsls	r2, r3, #5
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	0151      	lsls	r1, r2, #5
 8004fd2:	693a      	ldr	r2, [r7, #16]
 8004fd4:	440a      	add	r2, r1
 8004fd6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fda:	f043 0302 	orr.w	r3, r3, #2
 8004fde:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	b2d2      	uxtb	r2, r2
 8004fe8:	4611      	mov	r1, r2
 8004fea:	4618      	mov	r0, r3
 8004fec:	f004 f973 	bl	80092d6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	015a      	lsls	r2, r3, #5
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	4413      	add	r3, r2
 8004ff8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	2310      	movs	r3, #16
 8005000:	6093      	str	r3, [r2, #8]
}
 8005002:	bf00      	nop
 8005004:	3718      	adds	r7, #24
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}

0800500a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800500a:	b580      	push	{r7, lr}
 800500c:	b088      	sub	sp, #32
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
 8005012:	460b      	mov	r3, r1
 8005014:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8005020:	78fb      	ldrb	r3, [r7, #3]
 8005022:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	015a      	lsls	r2, r3, #5
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	4413      	add	r3, r2
 800502c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	f003 0304 	and.w	r3, r3, #4
 8005036:	2b04      	cmp	r3, #4
 8005038:	d119      	bne.n	800506e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	015a      	lsls	r2, r3, #5
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	4413      	add	r3, r2
 8005042:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005046:	461a      	mov	r2, r3
 8005048:	2304      	movs	r3, #4
 800504a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	015a      	lsls	r2, r3, #5
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	4413      	add	r3, r2
 8005054:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	697a      	ldr	r2, [r7, #20]
 800505c:	0151      	lsls	r1, r2, #5
 800505e:	69ba      	ldr	r2, [r7, #24]
 8005060:	440a      	add	r2, r1
 8005062:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005066:	f043 0302 	orr.w	r3, r3, #2
 800506a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800506c:	e3ca      	b.n	8005804 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	015a      	lsls	r2, r3, #5
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	4413      	add	r3, r2
 8005076:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	f003 0320 	and.w	r3, r3, #32
 8005080:	2b20      	cmp	r3, #32
 8005082:	d13e      	bne.n	8005102 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	015a      	lsls	r2, r3, #5
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	4413      	add	r3, r2
 800508c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005090:	461a      	mov	r2, r3
 8005092:	2320      	movs	r3, #32
 8005094:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	212c      	movs	r1, #44	; 0x2c
 800509c:	fb01 f303 	mul.w	r3, r1, r3
 80050a0:	4413      	add	r3, r2
 80050a2:	333d      	adds	r3, #61	; 0x3d
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	f040 83ac 	bne.w	8005804 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	212c      	movs	r1, #44	; 0x2c
 80050b2:	fb01 f303 	mul.w	r3, r1, r3
 80050b6:	4413      	add	r3, r2
 80050b8:	333d      	adds	r3, #61	; 0x3d
 80050ba:	2200      	movs	r2, #0
 80050bc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	212c      	movs	r1, #44	; 0x2c
 80050c4:	fb01 f303 	mul.w	r3, r1, r3
 80050c8:	4413      	add	r3, r2
 80050ca:	3360      	adds	r3, #96	; 0x60
 80050cc:	2202      	movs	r2, #2
 80050ce:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	015a      	lsls	r2, r3, #5
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	4413      	add	r3, r2
 80050d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	0151      	lsls	r1, r2, #5
 80050e2:	69ba      	ldr	r2, [r7, #24]
 80050e4:	440a      	add	r2, r1
 80050e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050ea:	f043 0302 	orr.w	r3, r3, #2
 80050ee:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	697a      	ldr	r2, [r7, #20]
 80050f6:	b2d2      	uxtb	r2, r2
 80050f8:	4611      	mov	r1, r2
 80050fa:	4618      	mov	r0, r3
 80050fc:	f004 f8eb 	bl	80092d6 <USB_HC_Halt>
}
 8005100:	e380      	b.n	8005804 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	015a      	lsls	r2, r3, #5
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	4413      	add	r3, r2
 800510a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005114:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005118:	d122      	bne.n	8005160 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	015a      	lsls	r2, r3, #5
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	4413      	add	r3, r2
 8005122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	697a      	ldr	r2, [r7, #20]
 800512a:	0151      	lsls	r1, r2, #5
 800512c:	69ba      	ldr	r2, [r7, #24]
 800512e:	440a      	add	r2, r1
 8005130:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005134:	f043 0302 	orr.w	r3, r3, #2
 8005138:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	697a      	ldr	r2, [r7, #20]
 8005140:	b2d2      	uxtb	r2, r2
 8005142:	4611      	mov	r1, r2
 8005144:	4618      	mov	r0, r3
 8005146:	f004 f8c6 	bl	80092d6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	015a      	lsls	r2, r3, #5
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	4413      	add	r3, r2
 8005152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005156:	461a      	mov	r2, r3
 8005158:	f44f 7300 	mov.w	r3, #512	; 0x200
 800515c:	6093      	str	r3, [r2, #8]
}
 800515e:	e351      	b.n	8005804 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	015a      	lsls	r2, r3, #5
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	4413      	add	r3, r2
 8005168:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f003 0301 	and.w	r3, r3, #1
 8005172:	2b01      	cmp	r3, #1
 8005174:	d150      	bne.n	8005218 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	212c      	movs	r1, #44	; 0x2c
 800517c:	fb01 f303 	mul.w	r3, r1, r3
 8005180:	4413      	add	r3, r2
 8005182:	335c      	adds	r3, #92	; 0x5c
 8005184:	2200      	movs	r2, #0
 8005186:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	015a      	lsls	r2, r3, #5
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	4413      	add	r3, r2
 8005190:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800519a:	2b40      	cmp	r3, #64	; 0x40
 800519c:	d111      	bne.n	80051c2 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	212c      	movs	r1, #44	; 0x2c
 80051a4:	fb01 f303 	mul.w	r3, r1, r3
 80051a8:	4413      	add	r3, r2
 80051aa:	333d      	adds	r3, #61	; 0x3d
 80051ac:	2201      	movs	r2, #1
 80051ae:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	015a      	lsls	r2, r3, #5
 80051b4:	69bb      	ldr	r3, [r7, #24]
 80051b6:	4413      	add	r3, r2
 80051b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051bc:	461a      	mov	r2, r3
 80051be:	2340      	movs	r3, #64	; 0x40
 80051c0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	015a      	lsls	r2, r3, #5
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	4413      	add	r3, r2
 80051ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	697a      	ldr	r2, [r7, #20]
 80051d2:	0151      	lsls	r1, r2, #5
 80051d4:	69ba      	ldr	r2, [r7, #24]
 80051d6:	440a      	add	r2, r1
 80051d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051dc:	f043 0302 	orr.w	r3, r3, #2
 80051e0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	697a      	ldr	r2, [r7, #20]
 80051e8:	b2d2      	uxtb	r2, r2
 80051ea:	4611      	mov	r1, r2
 80051ec:	4618      	mov	r0, r3
 80051ee:	f004 f872 	bl	80092d6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	015a      	lsls	r2, r3, #5
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	4413      	add	r3, r2
 80051fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051fe:	461a      	mov	r2, r3
 8005200:	2301      	movs	r3, #1
 8005202:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	212c      	movs	r1, #44	; 0x2c
 800520a:	fb01 f303 	mul.w	r3, r1, r3
 800520e:	4413      	add	r3, r2
 8005210:	3361      	adds	r3, #97	; 0x61
 8005212:	2201      	movs	r2, #1
 8005214:	701a      	strb	r2, [r3, #0]
}
 8005216:	e2f5      	b.n	8005804 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	015a      	lsls	r2, r3, #5
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	4413      	add	r3, r2
 8005220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800522a:	2b40      	cmp	r3, #64	; 0x40
 800522c:	d13c      	bne.n	80052a8 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	212c      	movs	r1, #44	; 0x2c
 8005234:	fb01 f303 	mul.w	r3, r1, r3
 8005238:	4413      	add	r3, r2
 800523a:	3361      	adds	r3, #97	; 0x61
 800523c:	2204      	movs	r2, #4
 800523e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	212c      	movs	r1, #44	; 0x2c
 8005246:	fb01 f303 	mul.w	r3, r1, r3
 800524a:	4413      	add	r3, r2
 800524c:	333d      	adds	r3, #61	; 0x3d
 800524e:	2201      	movs	r2, #1
 8005250:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	212c      	movs	r1, #44	; 0x2c
 8005258:	fb01 f303 	mul.w	r3, r1, r3
 800525c:	4413      	add	r3, r2
 800525e:	335c      	adds	r3, #92	; 0x5c
 8005260:	2200      	movs	r2, #0
 8005262:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	015a      	lsls	r2, r3, #5
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	4413      	add	r3, r2
 800526c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	0151      	lsls	r1, r2, #5
 8005276:	69ba      	ldr	r2, [r7, #24]
 8005278:	440a      	add	r2, r1
 800527a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800527e:	f043 0302 	orr.w	r3, r3, #2
 8005282:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	697a      	ldr	r2, [r7, #20]
 800528a:	b2d2      	uxtb	r2, r2
 800528c:	4611      	mov	r1, r2
 800528e:	4618      	mov	r0, r3
 8005290:	f004 f821 	bl	80092d6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	015a      	lsls	r2, r3, #5
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	4413      	add	r3, r2
 800529c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052a0:	461a      	mov	r2, r3
 80052a2:	2340      	movs	r3, #64	; 0x40
 80052a4:	6093      	str	r3, [r2, #8]
}
 80052a6:	e2ad      	b.n	8005804 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	015a      	lsls	r2, r3, #5
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	4413      	add	r3, r2
 80052b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	f003 0308 	and.w	r3, r3, #8
 80052ba:	2b08      	cmp	r3, #8
 80052bc:	d12a      	bne.n	8005314 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	015a      	lsls	r2, r3, #5
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	4413      	add	r3, r2
 80052c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ca:	461a      	mov	r2, r3
 80052cc:	2308      	movs	r3, #8
 80052ce:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	015a      	lsls	r2, r3, #5
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	4413      	add	r3, r2
 80052d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	697a      	ldr	r2, [r7, #20]
 80052e0:	0151      	lsls	r1, r2, #5
 80052e2:	69ba      	ldr	r2, [r7, #24]
 80052e4:	440a      	add	r2, r1
 80052e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052ea:	f043 0302 	orr.w	r3, r3, #2
 80052ee:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	697a      	ldr	r2, [r7, #20]
 80052f6:	b2d2      	uxtb	r2, r2
 80052f8:	4611      	mov	r1, r2
 80052fa:	4618      	mov	r0, r3
 80052fc:	f003 ffeb 	bl	80092d6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	212c      	movs	r1, #44	; 0x2c
 8005306:	fb01 f303 	mul.w	r3, r1, r3
 800530a:	4413      	add	r3, r2
 800530c:	3361      	adds	r3, #97	; 0x61
 800530e:	2205      	movs	r2, #5
 8005310:	701a      	strb	r2, [r3, #0]
}
 8005312:	e277      	b.n	8005804 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	015a      	lsls	r2, r3, #5
 8005318:	69bb      	ldr	r3, [r7, #24]
 800531a:	4413      	add	r3, r2
 800531c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	f003 0310 	and.w	r3, r3, #16
 8005326:	2b10      	cmp	r3, #16
 8005328:	d150      	bne.n	80053cc <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	212c      	movs	r1, #44	; 0x2c
 8005330:	fb01 f303 	mul.w	r3, r1, r3
 8005334:	4413      	add	r3, r2
 8005336:	335c      	adds	r3, #92	; 0x5c
 8005338:	2200      	movs	r2, #0
 800533a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	212c      	movs	r1, #44	; 0x2c
 8005342:	fb01 f303 	mul.w	r3, r1, r3
 8005346:	4413      	add	r3, r2
 8005348:	3361      	adds	r3, #97	; 0x61
 800534a:	2203      	movs	r2, #3
 800534c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	212c      	movs	r1, #44	; 0x2c
 8005354:	fb01 f303 	mul.w	r3, r1, r3
 8005358:	4413      	add	r3, r2
 800535a:	333d      	adds	r3, #61	; 0x3d
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d112      	bne.n	8005388 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	212c      	movs	r1, #44	; 0x2c
 8005368:	fb01 f303 	mul.w	r3, r1, r3
 800536c:	4413      	add	r3, r2
 800536e:	333c      	adds	r3, #60	; 0x3c
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d108      	bne.n	8005388 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	212c      	movs	r1, #44	; 0x2c
 800537c:	fb01 f303 	mul.w	r3, r1, r3
 8005380:	4413      	add	r3, r2
 8005382:	333d      	adds	r3, #61	; 0x3d
 8005384:	2201      	movs	r2, #1
 8005386:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	015a      	lsls	r2, r3, #5
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	4413      	add	r3, r2
 8005390:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	697a      	ldr	r2, [r7, #20]
 8005398:	0151      	lsls	r1, r2, #5
 800539a:	69ba      	ldr	r2, [r7, #24]
 800539c:	440a      	add	r2, r1
 800539e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053a2:	f043 0302 	orr.w	r3, r3, #2
 80053a6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	697a      	ldr	r2, [r7, #20]
 80053ae:	b2d2      	uxtb	r2, r2
 80053b0:	4611      	mov	r1, r2
 80053b2:	4618      	mov	r0, r3
 80053b4:	f003 ff8f 	bl	80092d6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	015a      	lsls	r2, r3, #5
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	4413      	add	r3, r2
 80053c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053c4:	461a      	mov	r2, r3
 80053c6:	2310      	movs	r3, #16
 80053c8:	6093      	str	r3, [r2, #8]
}
 80053ca:	e21b      	b.n	8005804 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	015a      	lsls	r2, r3, #5
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	4413      	add	r3, r2
 80053d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053de:	2b80      	cmp	r3, #128	; 0x80
 80053e0:	d174      	bne.n	80054cc <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d121      	bne.n	800542e <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	212c      	movs	r1, #44	; 0x2c
 80053f0:	fb01 f303 	mul.w	r3, r1, r3
 80053f4:	4413      	add	r3, r2
 80053f6:	3361      	adds	r3, #97	; 0x61
 80053f8:	2206      	movs	r2, #6
 80053fa:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	015a      	lsls	r2, r3, #5
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	4413      	add	r3, r2
 8005404:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	697a      	ldr	r2, [r7, #20]
 800540c:	0151      	lsls	r1, r2, #5
 800540e:	69ba      	ldr	r2, [r7, #24]
 8005410:	440a      	add	r2, r1
 8005412:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005416:	f043 0302 	orr.w	r3, r3, #2
 800541a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	697a      	ldr	r2, [r7, #20]
 8005422:	b2d2      	uxtb	r2, r2
 8005424:	4611      	mov	r1, r2
 8005426:	4618      	mov	r0, r3
 8005428:	f003 ff55 	bl	80092d6 <USB_HC_Halt>
 800542c:	e044      	b.n	80054b8 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	212c      	movs	r1, #44	; 0x2c
 8005434:	fb01 f303 	mul.w	r3, r1, r3
 8005438:	4413      	add	r3, r2
 800543a:	335c      	adds	r3, #92	; 0x5c
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	1c5a      	adds	r2, r3, #1
 8005440:	6879      	ldr	r1, [r7, #4]
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	202c      	movs	r0, #44	; 0x2c
 8005446:	fb00 f303 	mul.w	r3, r0, r3
 800544a:	440b      	add	r3, r1
 800544c:	335c      	adds	r3, #92	; 0x5c
 800544e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	212c      	movs	r1, #44	; 0x2c
 8005456:	fb01 f303 	mul.w	r3, r1, r3
 800545a:	4413      	add	r3, r2
 800545c:	335c      	adds	r3, #92	; 0x5c
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2b02      	cmp	r3, #2
 8005462:	d920      	bls.n	80054a6 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	212c      	movs	r1, #44	; 0x2c
 800546a:	fb01 f303 	mul.w	r3, r1, r3
 800546e:	4413      	add	r3, r2
 8005470:	335c      	adds	r3, #92	; 0x5c
 8005472:	2200      	movs	r2, #0
 8005474:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	212c      	movs	r1, #44	; 0x2c
 800547c:	fb01 f303 	mul.w	r3, r1, r3
 8005480:	4413      	add	r3, r2
 8005482:	3360      	adds	r3, #96	; 0x60
 8005484:	2204      	movs	r2, #4
 8005486:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	b2d9      	uxtb	r1, r3
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	202c      	movs	r0, #44	; 0x2c
 8005492:	fb00 f303 	mul.w	r3, r0, r3
 8005496:	4413      	add	r3, r2
 8005498:	3360      	adds	r3, #96	; 0x60
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	461a      	mov	r2, r3
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f007 fa44 	bl	800c92c <HAL_HCD_HC_NotifyURBChange_Callback>
 80054a4:	e008      	b.n	80054b8 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	212c      	movs	r1, #44	; 0x2c
 80054ac:	fb01 f303 	mul.w	r3, r1, r3
 80054b0:	4413      	add	r3, r2
 80054b2:	3360      	adds	r3, #96	; 0x60
 80054b4:	2202      	movs	r2, #2
 80054b6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	015a      	lsls	r2, r3, #5
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	4413      	add	r3, r2
 80054c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054c4:	461a      	mov	r2, r3
 80054c6:	2380      	movs	r3, #128	; 0x80
 80054c8:	6093      	str	r3, [r2, #8]
}
 80054ca:	e19b      	b.n	8005804 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	015a      	lsls	r2, r3, #5
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	4413      	add	r3, r2
 80054d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054e2:	d134      	bne.n	800554e <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	015a      	lsls	r2, r3, #5
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	4413      	add	r3, r2
 80054ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	697a      	ldr	r2, [r7, #20]
 80054f4:	0151      	lsls	r1, r2, #5
 80054f6:	69ba      	ldr	r2, [r7, #24]
 80054f8:	440a      	add	r2, r1
 80054fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054fe:	f043 0302 	orr.w	r3, r3, #2
 8005502:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	697a      	ldr	r2, [r7, #20]
 800550a:	b2d2      	uxtb	r2, r2
 800550c:	4611      	mov	r1, r2
 800550e:	4618      	mov	r0, r3
 8005510:	f003 fee1 	bl	80092d6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	015a      	lsls	r2, r3, #5
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	4413      	add	r3, r2
 800551c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005520:	461a      	mov	r2, r3
 8005522:	2310      	movs	r3, #16
 8005524:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	015a      	lsls	r2, r3, #5
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	4413      	add	r3, r2
 800552e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005532:	461a      	mov	r2, r3
 8005534:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005538:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	212c      	movs	r1, #44	; 0x2c
 8005540:	fb01 f303 	mul.w	r3, r1, r3
 8005544:	4413      	add	r3, r2
 8005546:	3361      	adds	r3, #97	; 0x61
 8005548:	2208      	movs	r2, #8
 800554a:	701a      	strb	r2, [r3, #0]
}
 800554c:	e15a      	b.n	8005804 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	015a      	lsls	r2, r3, #5
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	4413      	add	r3, r2
 8005556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f003 0302 	and.w	r3, r3, #2
 8005560:	2b02      	cmp	r3, #2
 8005562:	f040 814f 	bne.w	8005804 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	015a      	lsls	r2, r3, #5
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	4413      	add	r3, r2
 800556e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	697a      	ldr	r2, [r7, #20]
 8005576:	0151      	lsls	r1, r2, #5
 8005578:	69ba      	ldr	r2, [r7, #24]
 800557a:	440a      	add	r2, r1
 800557c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005580:	f023 0302 	bic.w	r3, r3, #2
 8005584:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	212c      	movs	r1, #44	; 0x2c
 800558c:	fb01 f303 	mul.w	r3, r1, r3
 8005590:	4413      	add	r3, r2
 8005592:	3361      	adds	r3, #97	; 0x61
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	2b01      	cmp	r3, #1
 8005598:	d17d      	bne.n	8005696 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	212c      	movs	r1, #44	; 0x2c
 80055a0:	fb01 f303 	mul.w	r3, r1, r3
 80055a4:	4413      	add	r3, r2
 80055a6:	3360      	adds	r3, #96	; 0x60
 80055a8:	2201      	movs	r2, #1
 80055aa:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	212c      	movs	r1, #44	; 0x2c
 80055b2:	fb01 f303 	mul.w	r3, r1, r3
 80055b6:	4413      	add	r3, r2
 80055b8:	333f      	adds	r3, #63	; 0x3f
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	2b02      	cmp	r3, #2
 80055be:	d00a      	beq.n	80055d6 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	212c      	movs	r1, #44	; 0x2c
 80055c6:	fb01 f303 	mul.w	r3, r1, r3
 80055ca:	4413      	add	r3, r2
 80055cc:	333f      	adds	r3, #63	; 0x3f
 80055ce:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80055d0:	2b03      	cmp	r3, #3
 80055d2:	f040 8100 	bne.w	80057d6 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d113      	bne.n	8005606 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	212c      	movs	r1, #44	; 0x2c
 80055e4:	fb01 f303 	mul.w	r3, r1, r3
 80055e8:	4413      	add	r3, r2
 80055ea:	3355      	adds	r3, #85	; 0x55
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	f083 0301 	eor.w	r3, r3, #1
 80055f2:	b2d8      	uxtb	r0, r3
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	212c      	movs	r1, #44	; 0x2c
 80055fa:	fb01 f303 	mul.w	r3, r1, r3
 80055fe:	4413      	add	r3, r2
 8005600:	3355      	adds	r3, #85	; 0x55
 8005602:	4602      	mov	r2, r0
 8005604:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	2b01      	cmp	r3, #1
 800560c:	f040 80e3 	bne.w	80057d6 <HCD_HC_OUT_IRQHandler+0x7cc>
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	212c      	movs	r1, #44	; 0x2c
 8005616:	fb01 f303 	mul.w	r3, r1, r3
 800561a:	4413      	add	r3, r2
 800561c:	334c      	adds	r3, #76	; 0x4c
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2b00      	cmp	r3, #0
 8005622:	f000 80d8 	beq.w	80057d6 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	212c      	movs	r1, #44	; 0x2c
 800562c:	fb01 f303 	mul.w	r3, r1, r3
 8005630:	4413      	add	r3, r2
 8005632:	334c      	adds	r3, #76	; 0x4c
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	6879      	ldr	r1, [r7, #4]
 8005638:	697a      	ldr	r2, [r7, #20]
 800563a:	202c      	movs	r0, #44	; 0x2c
 800563c:	fb00 f202 	mul.w	r2, r0, r2
 8005640:	440a      	add	r2, r1
 8005642:	3240      	adds	r2, #64	; 0x40
 8005644:	8812      	ldrh	r2, [r2, #0]
 8005646:	4413      	add	r3, r2
 8005648:	3b01      	subs	r3, #1
 800564a:	6879      	ldr	r1, [r7, #4]
 800564c:	697a      	ldr	r2, [r7, #20]
 800564e:	202c      	movs	r0, #44	; 0x2c
 8005650:	fb00 f202 	mul.w	r2, r0, r2
 8005654:	440a      	add	r2, r1
 8005656:	3240      	adds	r2, #64	; 0x40
 8005658:	8812      	ldrh	r2, [r2, #0]
 800565a:	fbb3 f3f2 	udiv	r3, r3, r2
 800565e:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f003 0301 	and.w	r3, r3, #1
 8005666:	2b00      	cmp	r3, #0
 8005668:	f000 80b5 	beq.w	80057d6 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	212c      	movs	r1, #44	; 0x2c
 8005672:	fb01 f303 	mul.w	r3, r1, r3
 8005676:	4413      	add	r3, r2
 8005678:	3355      	adds	r3, #85	; 0x55
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	f083 0301 	eor.w	r3, r3, #1
 8005680:	b2d8      	uxtb	r0, r3
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	212c      	movs	r1, #44	; 0x2c
 8005688:	fb01 f303 	mul.w	r3, r1, r3
 800568c:	4413      	add	r3, r2
 800568e:	3355      	adds	r3, #85	; 0x55
 8005690:	4602      	mov	r2, r0
 8005692:	701a      	strb	r2, [r3, #0]
 8005694:	e09f      	b.n	80057d6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	212c      	movs	r1, #44	; 0x2c
 800569c:	fb01 f303 	mul.w	r3, r1, r3
 80056a0:	4413      	add	r3, r2
 80056a2:	3361      	adds	r3, #97	; 0x61
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	2b03      	cmp	r3, #3
 80056a8:	d109      	bne.n	80056be <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	212c      	movs	r1, #44	; 0x2c
 80056b0:	fb01 f303 	mul.w	r3, r1, r3
 80056b4:	4413      	add	r3, r2
 80056b6:	3360      	adds	r3, #96	; 0x60
 80056b8:	2202      	movs	r2, #2
 80056ba:	701a      	strb	r2, [r3, #0]
 80056bc:	e08b      	b.n	80057d6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	212c      	movs	r1, #44	; 0x2c
 80056c4:	fb01 f303 	mul.w	r3, r1, r3
 80056c8:	4413      	add	r3, r2
 80056ca:	3361      	adds	r3, #97	; 0x61
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	2b04      	cmp	r3, #4
 80056d0:	d109      	bne.n	80056e6 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	212c      	movs	r1, #44	; 0x2c
 80056d8:	fb01 f303 	mul.w	r3, r1, r3
 80056dc:	4413      	add	r3, r2
 80056de:	3360      	adds	r3, #96	; 0x60
 80056e0:	2202      	movs	r2, #2
 80056e2:	701a      	strb	r2, [r3, #0]
 80056e4:	e077      	b.n	80057d6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	212c      	movs	r1, #44	; 0x2c
 80056ec:	fb01 f303 	mul.w	r3, r1, r3
 80056f0:	4413      	add	r3, r2
 80056f2:	3361      	adds	r3, #97	; 0x61
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	2b05      	cmp	r3, #5
 80056f8:	d109      	bne.n	800570e <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	212c      	movs	r1, #44	; 0x2c
 8005700:	fb01 f303 	mul.w	r3, r1, r3
 8005704:	4413      	add	r3, r2
 8005706:	3360      	adds	r3, #96	; 0x60
 8005708:	2205      	movs	r2, #5
 800570a:	701a      	strb	r2, [r3, #0]
 800570c:	e063      	b.n	80057d6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	212c      	movs	r1, #44	; 0x2c
 8005714:	fb01 f303 	mul.w	r3, r1, r3
 8005718:	4413      	add	r3, r2
 800571a:	3361      	adds	r3, #97	; 0x61
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	2b06      	cmp	r3, #6
 8005720:	d009      	beq.n	8005736 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	212c      	movs	r1, #44	; 0x2c
 8005728:	fb01 f303 	mul.w	r3, r1, r3
 800572c:	4413      	add	r3, r2
 800572e:	3361      	adds	r3, #97	; 0x61
 8005730:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005732:	2b08      	cmp	r3, #8
 8005734:	d14f      	bne.n	80057d6 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	212c      	movs	r1, #44	; 0x2c
 800573c:	fb01 f303 	mul.w	r3, r1, r3
 8005740:	4413      	add	r3, r2
 8005742:	335c      	adds	r3, #92	; 0x5c
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	1c5a      	adds	r2, r3, #1
 8005748:	6879      	ldr	r1, [r7, #4]
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	202c      	movs	r0, #44	; 0x2c
 800574e:	fb00 f303 	mul.w	r3, r0, r3
 8005752:	440b      	add	r3, r1
 8005754:	335c      	adds	r3, #92	; 0x5c
 8005756:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	212c      	movs	r1, #44	; 0x2c
 800575e:	fb01 f303 	mul.w	r3, r1, r3
 8005762:	4413      	add	r3, r2
 8005764:	335c      	adds	r3, #92	; 0x5c
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2b02      	cmp	r3, #2
 800576a:	d912      	bls.n	8005792 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	212c      	movs	r1, #44	; 0x2c
 8005772:	fb01 f303 	mul.w	r3, r1, r3
 8005776:	4413      	add	r3, r2
 8005778:	335c      	adds	r3, #92	; 0x5c
 800577a:	2200      	movs	r2, #0
 800577c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	212c      	movs	r1, #44	; 0x2c
 8005784:	fb01 f303 	mul.w	r3, r1, r3
 8005788:	4413      	add	r3, r2
 800578a:	3360      	adds	r3, #96	; 0x60
 800578c:	2204      	movs	r2, #4
 800578e:	701a      	strb	r2, [r3, #0]
 8005790:	e021      	b.n	80057d6 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	212c      	movs	r1, #44	; 0x2c
 8005798:	fb01 f303 	mul.w	r3, r1, r3
 800579c:	4413      	add	r3, r2
 800579e:	3360      	adds	r3, #96	; 0x60
 80057a0:	2202      	movs	r2, #2
 80057a2:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	015a      	lsls	r2, r3, #5
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	4413      	add	r3, r2
 80057ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80057ba:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80057c2:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	015a      	lsls	r2, r3, #5
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	4413      	add	r3, r2
 80057cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057d0:	461a      	mov	r2, r3
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	015a      	lsls	r2, r3, #5
 80057da:	69bb      	ldr	r3, [r7, #24]
 80057dc:	4413      	add	r3, r2
 80057de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057e2:	461a      	mov	r2, r3
 80057e4:	2302      	movs	r3, #2
 80057e6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	b2d9      	uxtb	r1, r3
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	202c      	movs	r0, #44	; 0x2c
 80057f2:	fb00 f303 	mul.w	r3, r0, r3
 80057f6:	4413      	add	r3, r2
 80057f8:	3360      	adds	r3, #96	; 0x60
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	461a      	mov	r2, r3
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f007 f894 	bl	800c92c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005804:	bf00      	nop
 8005806:	3720      	adds	r7, #32
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b08a      	sub	sp, #40	; 0x28
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800581a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581c:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	6a1b      	ldr	r3, [r3, #32]
 8005824:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	f003 030f 	and.w	r3, r3, #15
 800582c:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800582e:	69fb      	ldr	r3, [r7, #28]
 8005830:	0c5b      	lsrs	r3, r3, #17
 8005832:	f003 030f 	and.w	r3, r3, #15
 8005836:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	091b      	lsrs	r3, r3, #4
 800583c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005840:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	2b02      	cmp	r3, #2
 8005846:	d004      	beq.n	8005852 <HCD_RXQLVL_IRQHandler+0x46>
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	2b05      	cmp	r3, #5
 800584c:	f000 80a9 	beq.w	80059a2 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005850:	e0aa      	b.n	80059a8 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	2b00      	cmp	r3, #0
 8005856:	f000 80a6 	beq.w	80059a6 <HCD_RXQLVL_IRQHandler+0x19a>
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	212c      	movs	r1, #44	; 0x2c
 8005860:	fb01 f303 	mul.w	r3, r1, r3
 8005864:	4413      	add	r3, r2
 8005866:	3344      	adds	r3, #68	; 0x44
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2b00      	cmp	r3, #0
 800586c:	f000 809b 	beq.w	80059a6 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	212c      	movs	r1, #44	; 0x2c
 8005876:	fb01 f303 	mul.w	r3, r1, r3
 800587a:	4413      	add	r3, r2
 800587c:	3350      	adds	r3, #80	; 0x50
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	441a      	add	r2, r3
 8005884:	6879      	ldr	r1, [r7, #4]
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	202c      	movs	r0, #44	; 0x2c
 800588a:	fb00 f303 	mul.w	r3, r0, r3
 800588e:	440b      	add	r3, r1
 8005890:	334c      	adds	r3, #76	; 0x4c
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	429a      	cmp	r2, r3
 8005896:	d87a      	bhi.n	800598e <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6818      	ldr	r0, [r3, #0]
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	212c      	movs	r1, #44	; 0x2c
 80058a2:	fb01 f303 	mul.w	r3, r1, r3
 80058a6:	4413      	add	r3, r2
 80058a8:	3344      	adds	r3, #68	; 0x44
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	693a      	ldr	r2, [r7, #16]
 80058ae:	b292      	uxth	r2, r2
 80058b0:	4619      	mov	r1, r3
 80058b2:	f003 f889 	bl	80089c8 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	212c      	movs	r1, #44	; 0x2c
 80058bc:	fb01 f303 	mul.w	r3, r1, r3
 80058c0:	4413      	add	r3, r2
 80058c2:	3344      	adds	r3, #68	; 0x44
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	441a      	add	r2, r3
 80058ca:	6879      	ldr	r1, [r7, #4]
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	202c      	movs	r0, #44	; 0x2c
 80058d0:	fb00 f303 	mul.w	r3, r0, r3
 80058d4:	440b      	add	r3, r1
 80058d6:	3344      	adds	r3, #68	; 0x44
 80058d8:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	212c      	movs	r1, #44	; 0x2c
 80058e0:	fb01 f303 	mul.w	r3, r1, r3
 80058e4:	4413      	add	r3, r2
 80058e6:	3350      	adds	r3, #80	; 0x50
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	441a      	add	r2, r3
 80058ee:	6879      	ldr	r1, [r7, #4]
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	202c      	movs	r0, #44	; 0x2c
 80058f4:	fb00 f303 	mul.w	r3, r0, r3
 80058f8:	440b      	add	r3, r1
 80058fa:	3350      	adds	r3, #80	; 0x50
 80058fc:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	015a      	lsls	r2, r3, #5
 8005902:	6a3b      	ldr	r3, [r7, #32]
 8005904:	4413      	add	r3, r2
 8005906:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800590a:	691b      	ldr	r3, [r3, #16]
 800590c:	0cdb      	lsrs	r3, r3, #19
 800590e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005912:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	212c      	movs	r1, #44	; 0x2c
 800591a:	fb01 f303 	mul.w	r3, r1, r3
 800591e:	4413      	add	r3, r2
 8005920:	3340      	adds	r3, #64	; 0x40
 8005922:	881b      	ldrh	r3, [r3, #0]
 8005924:	461a      	mov	r2, r3
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	4293      	cmp	r3, r2
 800592a:	d13c      	bne.n	80059a6 <HCD_RXQLVL_IRQHandler+0x19a>
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d039      	beq.n	80059a6 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	015a      	lsls	r2, r3, #5
 8005936:	6a3b      	ldr	r3, [r7, #32]
 8005938:	4413      	add	r3, r2
 800593a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005948:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005950:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	015a      	lsls	r2, r3, #5
 8005956:	6a3b      	ldr	r3, [r7, #32]
 8005958:	4413      	add	r3, r2
 800595a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800595e:	461a      	mov	r2, r3
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	212c      	movs	r1, #44	; 0x2c
 800596a:	fb01 f303 	mul.w	r3, r1, r3
 800596e:	4413      	add	r3, r2
 8005970:	3354      	adds	r3, #84	; 0x54
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	f083 0301 	eor.w	r3, r3, #1
 8005978:	b2d8      	uxtb	r0, r3
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	212c      	movs	r1, #44	; 0x2c
 8005980:	fb01 f303 	mul.w	r3, r1, r3
 8005984:	4413      	add	r3, r2
 8005986:	3354      	adds	r3, #84	; 0x54
 8005988:	4602      	mov	r2, r0
 800598a:	701a      	strb	r2, [r3, #0]
      break;
 800598c:	e00b      	b.n	80059a6 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	69bb      	ldr	r3, [r7, #24]
 8005992:	212c      	movs	r1, #44	; 0x2c
 8005994:	fb01 f303 	mul.w	r3, r1, r3
 8005998:	4413      	add	r3, r2
 800599a:	3360      	adds	r3, #96	; 0x60
 800599c:	2204      	movs	r2, #4
 800599e:	701a      	strb	r2, [r3, #0]
      break;
 80059a0:	e001      	b.n	80059a6 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80059a2:	bf00      	nop
 80059a4:	e000      	b.n	80059a8 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80059a6:	bf00      	nop
  }
}
 80059a8:	bf00      	nop
 80059aa:	3728      	adds	r7, #40	; 0x28
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b086      	sub	sp, #24
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80059dc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f003 0302 	and.w	r3, r3, #2
 80059e4:	2b02      	cmp	r3, #2
 80059e6:	d10b      	bne.n	8005a00 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f003 0301 	and.w	r3, r3, #1
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d102      	bne.n	80059f8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f006 ff7e 	bl	800c8f4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	f043 0302 	orr.w	r3, r3, #2
 80059fe:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f003 0308 	and.w	r3, r3, #8
 8005a06:	2b08      	cmp	r3, #8
 8005a08:	d132      	bne.n	8005a70 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	f043 0308 	orr.w	r3, r3, #8
 8005a10:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f003 0304 	and.w	r3, r3, #4
 8005a18:	2b04      	cmp	r3, #4
 8005a1a:	d126      	bne.n	8005a6a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	699b      	ldr	r3, [r3, #24]
 8005a20:	2b02      	cmp	r3, #2
 8005a22:	d113      	bne.n	8005a4c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005a2a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a2e:	d106      	bne.n	8005a3e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	2102      	movs	r1, #2
 8005a36:	4618      	mov	r0, r3
 8005a38:	f003 f926 	bl	8008c88 <USB_InitFSLSPClkSel>
 8005a3c:	e011      	b.n	8005a62 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2101      	movs	r1, #1
 8005a44:	4618      	mov	r0, r3
 8005a46:	f003 f91f 	bl	8008c88 <USB_InitFSLSPClkSel>
 8005a4a:	e00a      	b.n	8005a62 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d106      	bne.n	8005a62 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005a60:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f006 ff70 	bl	800c948 <HAL_HCD_PortEnabled_Callback>
 8005a68:	e002      	b.n	8005a70 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f006 ff7a 	bl	800c964 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f003 0320 	and.w	r3, r3, #32
 8005a76:	2b20      	cmp	r3, #32
 8005a78:	d103      	bne.n	8005a82 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	f043 0320 	orr.w	r3, r3, #32
 8005a80:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005a88:	461a      	mov	r2, r3
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	6013      	str	r3, [r2, #0]
}
 8005a8e:	bf00      	nop
 8005a90:	3718      	adds	r7, #24
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
	...

08005a98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d101      	bne.n	8005aaa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e12b      	b.n	8005d02 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d106      	bne.n	8005ac4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f7fd f8ec 	bl	8002c9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2224      	movs	r2, #36	; 0x24
 8005ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f022 0201 	bic.w	r2, r2, #1
 8005ada:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005aea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005afa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005afc:	f002 fa2e 	bl	8007f5c <HAL_RCC_GetPCLK1Freq>
 8005b00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	4a81      	ldr	r2, [pc, #516]	; (8005d0c <HAL_I2C_Init+0x274>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d807      	bhi.n	8005b1c <HAL_I2C_Init+0x84>
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	4a80      	ldr	r2, [pc, #512]	; (8005d10 <HAL_I2C_Init+0x278>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	bf94      	ite	ls
 8005b14:	2301      	movls	r3, #1
 8005b16:	2300      	movhi	r3, #0
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	e006      	b.n	8005b2a <HAL_I2C_Init+0x92>
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	4a7d      	ldr	r2, [pc, #500]	; (8005d14 <HAL_I2C_Init+0x27c>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	bf94      	ite	ls
 8005b24:	2301      	movls	r3, #1
 8005b26:	2300      	movhi	r3, #0
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d001      	beq.n	8005b32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e0e7      	b.n	8005d02 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	4a78      	ldr	r2, [pc, #480]	; (8005d18 <HAL_I2C_Init+0x280>)
 8005b36:	fba2 2303 	umull	r2, r3, r2, r3
 8005b3a:	0c9b      	lsrs	r3, r3, #18
 8005b3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68ba      	ldr	r2, [r7, #8]
 8005b4e:	430a      	orrs	r2, r1
 8005b50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	6a1b      	ldr	r3, [r3, #32]
 8005b58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	4a6a      	ldr	r2, [pc, #424]	; (8005d0c <HAL_I2C_Init+0x274>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d802      	bhi.n	8005b6c <HAL_I2C_Init+0xd4>
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	3301      	adds	r3, #1
 8005b6a:	e009      	b.n	8005b80 <HAL_I2C_Init+0xe8>
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005b72:	fb02 f303 	mul.w	r3, r2, r3
 8005b76:	4a69      	ldr	r2, [pc, #420]	; (8005d1c <HAL_I2C_Init+0x284>)
 8005b78:	fba2 2303 	umull	r2, r3, r2, r3
 8005b7c:	099b      	lsrs	r3, r3, #6
 8005b7e:	3301      	adds	r3, #1
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	6812      	ldr	r2, [r2, #0]
 8005b84:	430b      	orrs	r3, r1
 8005b86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	69db      	ldr	r3, [r3, #28]
 8005b8e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005b92:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	495c      	ldr	r1, [pc, #368]	; (8005d0c <HAL_I2C_Init+0x274>)
 8005b9c:	428b      	cmp	r3, r1
 8005b9e:	d819      	bhi.n	8005bd4 <HAL_I2C_Init+0x13c>
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	1e59      	subs	r1, r3, #1
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	005b      	lsls	r3, r3, #1
 8005baa:	fbb1 f3f3 	udiv	r3, r1, r3
 8005bae:	1c59      	adds	r1, r3, #1
 8005bb0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005bb4:	400b      	ands	r3, r1
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d00a      	beq.n	8005bd0 <HAL_I2C_Init+0x138>
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	1e59      	subs	r1, r3, #1
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	005b      	lsls	r3, r3, #1
 8005bc4:	fbb1 f3f3 	udiv	r3, r1, r3
 8005bc8:	3301      	adds	r3, #1
 8005bca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bce:	e051      	b.n	8005c74 <HAL_I2C_Init+0x1dc>
 8005bd0:	2304      	movs	r3, #4
 8005bd2:	e04f      	b.n	8005c74 <HAL_I2C_Init+0x1dc>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d111      	bne.n	8005c00 <HAL_I2C_Init+0x168>
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	1e58      	subs	r0, r3, #1
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6859      	ldr	r1, [r3, #4]
 8005be4:	460b      	mov	r3, r1
 8005be6:	005b      	lsls	r3, r3, #1
 8005be8:	440b      	add	r3, r1
 8005bea:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bee:	3301      	adds	r3, #1
 8005bf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	bf0c      	ite	eq
 8005bf8:	2301      	moveq	r3, #1
 8005bfa:	2300      	movne	r3, #0
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	e012      	b.n	8005c26 <HAL_I2C_Init+0x18e>
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	1e58      	subs	r0, r3, #1
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6859      	ldr	r1, [r3, #4]
 8005c08:	460b      	mov	r3, r1
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	440b      	add	r3, r1
 8005c0e:	0099      	lsls	r1, r3, #2
 8005c10:	440b      	add	r3, r1
 8005c12:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c16:	3301      	adds	r3, #1
 8005c18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	bf0c      	ite	eq
 8005c20:	2301      	moveq	r3, #1
 8005c22:	2300      	movne	r3, #0
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d001      	beq.n	8005c2e <HAL_I2C_Init+0x196>
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e022      	b.n	8005c74 <HAL_I2C_Init+0x1dc>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d10e      	bne.n	8005c54 <HAL_I2C_Init+0x1bc>
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	1e58      	subs	r0, r3, #1
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6859      	ldr	r1, [r3, #4]
 8005c3e:	460b      	mov	r3, r1
 8005c40:	005b      	lsls	r3, r3, #1
 8005c42:	440b      	add	r3, r1
 8005c44:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c48:	3301      	adds	r3, #1
 8005c4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c52:	e00f      	b.n	8005c74 <HAL_I2C_Init+0x1dc>
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	1e58      	subs	r0, r3, #1
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6859      	ldr	r1, [r3, #4]
 8005c5c:	460b      	mov	r3, r1
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	440b      	add	r3, r1
 8005c62:	0099      	lsls	r1, r3, #2
 8005c64:	440b      	add	r3, r1
 8005c66:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c74:	6879      	ldr	r1, [r7, #4]
 8005c76:	6809      	ldr	r1, [r1, #0]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	69da      	ldr	r2, [r3, #28]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a1b      	ldr	r3, [r3, #32]
 8005c8e:	431a      	orrs	r2, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	430a      	orrs	r2, r1
 8005c96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005ca2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	6911      	ldr	r1, [r2, #16]
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	68d2      	ldr	r2, [r2, #12]
 8005cae:	4311      	orrs	r1, r2
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	6812      	ldr	r2, [r2, #0]
 8005cb4:	430b      	orrs	r3, r1
 8005cb6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	695a      	ldr	r2, [r3, #20]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	699b      	ldr	r3, [r3, #24]
 8005cca:	431a      	orrs	r2, r3
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	430a      	orrs	r2, r1
 8005cd2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f042 0201 	orr.w	r2, r2, #1
 8005ce2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2220      	movs	r2, #32
 8005cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d00:	2300      	movs	r3, #0
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3710      	adds	r7, #16
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	000186a0 	.word	0x000186a0
 8005d10:	001e847f 	.word	0x001e847f
 8005d14:	003d08ff 	.word	0x003d08ff
 8005d18:	431bde83 	.word	0x431bde83
 8005d1c:	10624dd3 	.word	0x10624dd3

08005d20 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b088      	sub	sp, #32
 8005d24:	af02      	add	r7, sp, #8
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	607a      	str	r2, [r7, #4]
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	817b      	strh	r3, [r7, #10]
 8005d30:	4613      	mov	r3, r2
 8005d32:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005d34:	f7fd fac0 	bl	80032b8 <HAL_GetTick>
 8005d38:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	2b20      	cmp	r3, #32
 8005d44:	f040 80e0 	bne.w	8005f08 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	9300      	str	r3, [sp, #0]
 8005d4c:	2319      	movs	r3, #25
 8005d4e:	2201      	movs	r2, #1
 8005d50:	4970      	ldr	r1, [pc, #448]	; (8005f14 <HAL_I2C_Master_Transmit+0x1f4>)
 8005d52:	68f8      	ldr	r0, [r7, #12]
 8005d54:	f000 fc58 	bl	8006608 <I2C_WaitOnFlagUntilTimeout>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d001      	beq.n	8005d62 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005d5e:	2302      	movs	r3, #2
 8005d60:	e0d3      	b.n	8005f0a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d101      	bne.n	8005d70 <HAL_I2C_Master_Transmit+0x50>
 8005d6c:	2302      	movs	r3, #2
 8005d6e:	e0cc      	b.n	8005f0a <HAL_I2C_Master_Transmit+0x1ea>
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 0301 	and.w	r3, r3, #1
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d007      	beq.n	8005d96 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f042 0201 	orr.w	r2, r2, #1
 8005d94:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005da4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2221      	movs	r2, #33	; 0x21
 8005daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2210      	movs	r2, #16
 8005db2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2200      	movs	r2, #0
 8005dba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	893a      	ldrh	r2, [r7, #8]
 8005dc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dcc:	b29a      	uxth	r2, r3
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	4a50      	ldr	r2, [pc, #320]	; (8005f18 <HAL_I2C_Master_Transmit+0x1f8>)
 8005dd6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005dd8:	8979      	ldrh	r1, [r7, #10]
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	6a3a      	ldr	r2, [r7, #32]
 8005dde:	68f8      	ldr	r0, [r7, #12]
 8005de0:	f000 fac2 	bl	8006368 <I2C_MasterRequestWrite>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d001      	beq.n	8005dee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e08d      	b.n	8005f0a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dee:	2300      	movs	r3, #0
 8005df0:	613b      	str	r3, [r7, #16]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	695b      	ldr	r3, [r3, #20]
 8005df8:	613b      	str	r3, [r7, #16]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	699b      	ldr	r3, [r3, #24]
 8005e00:	613b      	str	r3, [r7, #16]
 8005e02:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005e04:	e066      	b.n	8005ed4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e06:	697a      	ldr	r2, [r7, #20]
 8005e08:	6a39      	ldr	r1, [r7, #32]
 8005e0a:	68f8      	ldr	r0, [r7, #12]
 8005e0c:	f000 fcd2 	bl	80067b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d00d      	beq.n	8005e32 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1a:	2b04      	cmp	r3, #4
 8005e1c:	d107      	bne.n	8005e2e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e2c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e06b      	b.n	8005f0a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e36:	781a      	ldrb	r2, [r3, #0]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e42:	1c5a      	adds	r2, r3, #1
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	b29a      	uxth	r2, r3
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	b29a      	uxth	r2, r3
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	695b      	ldr	r3, [r3, #20]
 8005e68:	f003 0304 	and.w	r3, r3, #4
 8005e6c:	2b04      	cmp	r3, #4
 8005e6e:	d11b      	bne.n	8005ea8 <HAL_I2C_Master_Transmit+0x188>
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d017      	beq.n	8005ea8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7c:	781a      	ldrb	r2, [r3, #0]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e88:	1c5a      	adds	r2, r3, #1
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	3b01      	subs	r3, #1
 8005e96:	b29a      	uxth	r2, r3
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ea0:	3b01      	subs	r3, #1
 8005ea2:	b29a      	uxth	r2, r3
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ea8:	697a      	ldr	r2, [r7, #20]
 8005eaa:	6a39      	ldr	r1, [r7, #32]
 8005eac:	68f8      	ldr	r0, [r7, #12]
 8005eae:	f000 fcc2 	bl	8006836 <I2C_WaitOnBTFFlagUntilTimeout>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d00d      	beq.n	8005ed4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ebc:	2b04      	cmp	r3, #4
 8005ebe:	d107      	bne.n	8005ed0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ece:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e01a      	b.n	8005f0a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d194      	bne.n	8005e06 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005eea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2220      	movs	r2, #32
 8005ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005f04:	2300      	movs	r3, #0
 8005f06:	e000      	b.n	8005f0a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005f08:	2302      	movs	r3, #2
  }
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3718      	adds	r7, #24
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	00100002 	.word	0x00100002
 8005f18:	ffff0000 	.word	0xffff0000

08005f1c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b08c      	sub	sp, #48	; 0x30
 8005f20:	af02      	add	r7, sp, #8
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	607a      	str	r2, [r7, #4]
 8005f26:	461a      	mov	r2, r3
 8005f28:	460b      	mov	r3, r1
 8005f2a:	817b      	strh	r3, [r7, #10]
 8005f2c:	4613      	mov	r3, r2
 8005f2e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005f30:	f7fd f9c2 	bl	80032b8 <HAL_GetTick>
 8005f34:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	2b20      	cmp	r3, #32
 8005f40:	f040 820b 	bne.w	800635a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f46:	9300      	str	r3, [sp, #0]
 8005f48:	2319      	movs	r3, #25
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	497c      	ldr	r1, [pc, #496]	; (8006140 <HAL_I2C_Master_Receive+0x224>)
 8005f4e:	68f8      	ldr	r0, [r7, #12]
 8005f50:	f000 fb5a 	bl	8006608 <I2C_WaitOnFlagUntilTimeout>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d001      	beq.n	8005f5e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005f5a:	2302      	movs	r3, #2
 8005f5c:	e1fe      	b.n	800635c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d101      	bne.n	8005f6c <HAL_I2C_Master_Receive+0x50>
 8005f68:	2302      	movs	r3, #2
 8005f6a:	e1f7      	b.n	800635c <HAL_I2C_Master_Receive+0x440>
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f003 0301 	and.w	r3, r3, #1
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d007      	beq.n	8005f92 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f042 0201 	orr.w	r2, r2, #1
 8005f90:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fa0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2222      	movs	r2, #34	; 0x22
 8005fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2210      	movs	r2, #16
 8005fae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	893a      	ldrh	r2, [r7, #8]
 8005fc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fc8:	b29a      	uxth	r2, r3
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	4a5c      	ldr	r2, [pc, #368]	; (8006144 <HAL_I2C_Master_Receive+0x228>)
 8005fd2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005fd4:	8979      	ldrh	r1, [r7, #10]
 8005fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fda:	68f8      	ldr	r0, [r7, #12]
 8005fdc:	f000 fa46 	bl	800646c <I2C_MasterRequestRead>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d001      	beq.n	8005fea <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e1b8      	b.n	800635c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d113      	bne.n	800601a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	623b      	str	r3, [r7, #32]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	695b      	ldr	r3, [r3, #20]
 8005ffc:	623b      	str	r3, [r7, #32]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	699b      	ldr	r3, [r3, #24]
 8006004:	623b      	str	r3, [r7, #32]
 8006006:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006016:	601a      	str	r2, [r3, #0]
 8006018:	e18c      	b.n	8006334 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800601e:	2b01      	cmp	r3, #1
 8006020:	d11b      	bne.n	800605a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006030:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006032:	2300      	movs	r3, #0
 8006034:	61fb      	str	r3, [r7, #28]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	695b      	ldr	r3, [r3, #20]
 800603c:	61fb      	str	r3, [r7, #28]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	699b      	ldr	r3, [r3, #24]
 8006044:	61fb      	str	r3, [r7, #28]
 8006046:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006056:	601a      	str	r2, [r3, #0]
 8006058:	e16c      	b.n	8006334 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800605e:	2b02      	cmp	r3, #2
 8006060:	d11b      	bne.n	800609a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006070:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006080:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006082:	2300      	movs	r3, #0
 8006084:	61bb      	str	r3, [r7, #24]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	695b      	ldr	r3, [r3, #20]
 800608c:	61bb      	str	r3, [r7, #24]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	699b      	ldr	r3, [r3, #24]
 8006094:	61bb      	str	r3, [r7, #24]
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	e14c      	b.n	8006334 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80060a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060aa:	2300      	movs	r3, #0
 80060ac:	617b      	str	r3, [r7, #20]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	695b      	ldr	r3, [r3, #20]
 80060b4:	617b      	str	r3, [r7, #20]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	699b      	ldr	r3, [r3, #24]
 80060bc:	617b      	str	r3, [r7, #20]
 80060be:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80060c0:	e138      	b.n	8006334 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060c6:	2b03      	cmp	r3, #3
 80060c8:	f200 80f1 	bhi.w	80062ae <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d123      	bne.n	800611c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80060d8:	68f8      	ldr	r0, [r7, #12]
 80060da:	f000 fbed 	bl	80068b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d001      	beq.n	80060e8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	e139      	b.n	800635c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	691a      	ldr	r2, [r3, #16]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f2:	b2d2      	uxtb	r2, r2
 80060f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fa:	1c5a      	adds	r2, r3, #1
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006104:	3b01      	subs	r3, #1
 8006106:	b29a      	uxth	r2, r3
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006110:	b29b      	uxth	r3, r3
 8006112:	3b01      	subs	r3, #1
 8006114:	b29a      	uxth	r2, r3
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	855a      	strh	r2, [r3, #42]	; 0x2a
 800611a:	e10b      	b.n	8006334 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006120:	2b02      	cmp	r3, #2
 8006122:	d14e      	bne.n	80061c2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006126:	9300      	str	r3, [sp, #0]
 8006128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800612a:	2200      	movs	r2, #0
 800612c:	4906      	ldr	r1, [pc, #24]	; (8006148 <HAL_I2C_Master_Receive+0x22c>)
 800612e:	68f8      	ldr	r0, [r7, #12]
 8006130:	f000 fa6a 	bl	8006608 <I2C_WaitOnFlagUntilTimeout>
 8006134:	4603      	mov	r3, r0
 8006136:	2b00      	cmp	r3, #0
 8006138:	d008      	beq.n	800614c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e10e      	b.n	800635c <HAL_I2C_Master_Receive+0x440>
 800613e:	bf00      	nop
 8006140:	00100002 	.word	0x00100002
 8006144:	ffff0000 	.word	0xffff0000
 8006148:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800615a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	691a      	ldr	r2, [r3, #16]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006166:	b2d2      	uxtb	r2, r2
 8006168:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616e:	1c5a      	adds	r2, r3, #1
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006178:	3b01      	subs	r3, #1
 800617a:	b29a      	uxth	r2, r3
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006184:	b29b      	uxth	r3, r3
 8006186:	3b01      	subs	r3, #1
 8006188:	b29a      	uxth	r2, r3
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	691a      	ldr	r2, [r3, #16]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006198:	b2d2      	uxtb	r2, r2
 800619a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a0:	1c5a      	adds	r2, r3, #1
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061aa:	3b01      	subs	r3, #1
 80061ac:	b29a      	uxth	r2, r3
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	3b01      	subs	r3, #1
 80061ba:	b29a      	uxth	r2, r3
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80061c0:	e0b8      	b.n	8006334 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80061c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c4:	9300      	str	r3, [sp, #0]
 80061c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c8:	2200      	movs	r2, #0
 80061ca:	4966      	ldr	r1, [pc, #408]	; (8006364 <HAL_I2C_Master_Receive+0x448>)
 80061cc:	68f8      	ldr	r0, [r7, #12]
 80061ce:	f000 fa1b 	bl	8006608 <I2C_WaitOnFlagUntilTimeout>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d001      	beq.n	80061dc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	e0bf      	b.n	800635c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	691a      	ldr	r2, [r3, #16]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f6:	b2d2      	uxtb	r2, r2
 80061f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fe:	1c5a      	adds	r2, r3, #1
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006208:	3b01      	subs	r3, #1
 800620a:	b29a      	uxth	r2, r3
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006214:	b29b      	uxth	r3, r3
 8006216:	3b01      	subs	r3, #1
 8006218:	b29a      	uxth	r2, r3
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800621e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006220:	9300      	str	r3, [sp, #0]
 8006222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006224:	2200      	movs	r2, #0
 8006226:	494f      	ldr	r1, [pc, #316]	; (8006364 <HAL_I2C_Master_Receive+0x448>)
 8006228:	68f8      	ldr	r0, [r7, #12]
 800622a:	f000 f9ed 	bl	8006608 <I2C_WaitOnFlagUntilTimeout>
 800622e:	4603      	mov	r3, r0
 8006230:	2b00      	cmp	r3, #0
 8006232:	d001      	beq.n	8006238 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	e091      	b.n	800635c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006246:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	691a      	ldr	r2, [r3, #16]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006252:	b2d2      	uxtb	r2, r2
 8006254:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625a:	1c5a      	adds	r2, r3, #1
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006264:	3b01      	subs	r3, #1
 8006266:	b29a      	uxth	r2, r3
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006270:	b29b      	uxth	r3, r3
 8006272:	3b01      	subs	r3, #1
 8006274:	b29a      	uxth	r2, r3
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	691a      	ldr	r2, [r3, #16]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006284:	b2d2      	uxtb	r2, r2
 8006286:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628c:	1c5a      	adds	r2, r3, #1
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006296:	3b01      	subs	r3, #1
 8006298:	b29a      	uxth	r2, r3
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	3b01      	subs	r3, #1
 80062a6:	b29a      	uxth	r2, r3
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80062ac:	e042      	b.n	8006334 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80062b2:	68f8      	ldr	r0, [r7, #12]
 80062b4:	f000 fb00 	bl	80068b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80062b8:	4603      	mov	r3, r0
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d001      	beq.n	80062c2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	e04c      	b.n	800635c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	691a      	ldr	r2, [r3, #16]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062cc:	b2d2      	uxtb	r2, r2
 80062ce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d4:	1c5a      	adds	r2, r3, #1
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062de:	3b01      	subs	r3, #1
 80062e0:	b29a      	uxth	r2, r3
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	3b01      	subs	r3, #1
 80062ee:	b29a      	uxth	r2, r3
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	695b      	ldr	r3, [r3, #20]
 80062fa:	f003 0304 	and.w	r3, r3, #4
 80062fe:	2b04      	cmp	r3, #4
 8006300:	d118      	bne.n	8006334 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	691a      	ldr	r2, [r3, #16]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630c:	b2d2      	uxtb	r2, r2
 800630e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006314:	1c5a      	adds	r2, r3, #1
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800631e:	3b01      	subs	r3, #1
 8006320:	b29a      	uxth	r2, r3
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800632a:	b29b      	uxth	r3, r3
 800632c:	3b01      	subs	r3, #1
 800632e:	b29a      	uxth	r2, r3
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006338:	2b00      	cmp	r3, #0
 800633a:	f47f aec2 	bne.w	80060c2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2220      	movs	r2, #32
 8006342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2200      	movs	r2, #0
 800634a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2200      	movs	r2, #0
 8006352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006356:	2300      	movs	r3, #0
 8006358:	e000      	b.n	800635c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800635a:	2302      	movs	r3, #2
  }
}
 800635c:	4618      	mov	r0, r3
 800635e:	3728      	adds	r7, #40	; 0x28
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}
 8006364:	00010004 	.word	0x00010004

08006368 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b088      	sub	sp, #32
 800636c:	af02      	add	r7, sp, #8
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	607a      	str	r2, [r7, #4]
 8006372:	603b      	str	r3, [r7, #0]
 8006374:	460b      	mov	r3, r1
 8006376:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800637c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	2b08      	cmp	r3, #8
 8006382:	d006      	beq.n	8006392 <I2C_MasterRequestWrite+0x2a>
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	2b01      	cmp	r3, #1
 8006388:	d003      	beq.n	8006392 <I2C_MasterRequestWrite+0x2a>
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006390:	d108      	bne.n	80063a4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063a0:	601a      	str	r2, [r3, #0]
 80063a2:	e00b      	b.n	80063bc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a8:	2b12      	cmp	r3, #18
 80063aa:	d107      	bne.n	80063bc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063ba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	9300      	str	r3, [sp, #0]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80063c8:	68f8      	ldr	r0, [r7, #12]
 80063ca:	f000 f91d 	bl	8006608 <I2C_WaitOnFlagUntilTimeout>
 80063ce:	4603      	mov	r3, r0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d00d      	beq.n	80063f0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063e2:	d103      	bne.n	80063ec <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80063ec:	2303      	movs	r3, #3
 80063ee:	e035      	b.n	800645c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063f8:	d108      	bne.n	800640c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80063fa:	897b      	ldrh	r3, [r7, #10]
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	461a      	mov	r2, r3
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006408:	611a      	str	r2, [r3, #16]
 800640a:	e01b      	b.n	8006444 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800640c:	897b      	ldrh	r3, [r7, #10]
 800640e:	11db      	asrs	r3, r3, #7
 8006410:	b2db      	uxtb	r3, r3
 8006412:	f003 0306 	and.w	r3, r3, #6
 8006416:	b2db      	uxtb	r3, r3
 8006418:	f063 030f 	orn	r3, r3, #15
 800641c:	b2da      	uxtb	r2, r3
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	490e      	ldr	r1, [pc, #56]	; (8006464 <I2C_MasterRequestWrite+0xfc>)
 800642a:	68f8      	ldr	r0, [r7, #12]
 800642c:	f000 f943 	bl	80066b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006430:	4603      	mov	r3, r0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d001      	beq.n	800643a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	e010      	b.n	800645c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800643a:	897b      	ldrh	r3, [r7, #10]
 800643c:	b2da      	uxtb	r2, r3
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	4907      	ldr	r1, [pc, #28]	; (8006468 <I2C_MasterRequestWrite+0x100>)
 800644a:	68f8      	ldr	r0, [r7, #12]
 800644c:	f000 f933 	bl	80066b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006450:	4603      	mov	r3, r0
 8006452:	2b00      	cmp	r3, #0
 8006454:	d001      	beq.n	800645a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	e000      	b.n	800645c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800645a:	2300      	movs	r3, #0
}
 800645c:	4618      	mov	r0, r3
 800645e:	3718      	adds	r7, #24
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}
 8006464:	00010008 	.word	0x00010008
 8006468:	00010002 	.word	0x00010002

0800646c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b088      	sub	sp, #32
 8006470:	af02      	add	r7, sp, #8
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	607a      	str	r2, [r7, #4]
 8006476:	603b      	str	r3, [r7, #0]
 8006478:	460b      	mov	r3, r1
 800647a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006480:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006490:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	2b08      	cmp	r3, #8
 8006496:	d006      	beq.n	80064a6 <I2C_MasterRequestRead+0x3a>
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	2b01      	cmp	r3, #1
 800649c:	d003      	beq.n	80064a6 <I2C_MasterRequestRead+0x3a>
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80064a4:	d108      	bne.n	80064b8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064b4:	601a      	str	r2, [r3, #0]
 80064b6:	e00b      	b.n	80064d0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064bc:	2b11      	cmp	r3, #17
 80064be:	d107      	bne.n	80064d0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	9300      	str	r3, [sp, #0]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80064dc:	68f8      	ldr	r0, [r7, #12]
 80064de:	f000 f893 	bl	8006608 <I2C_WaitOnFlagUntilTimeout>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d00d      	beq.n	8006504 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064f6:	d103      	bne.n	8006500 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006500:	2303      	movs	r3, #3
 8006502:	e079      	b.n	80065f8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800650c:	d108      	bne.n	8006520 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800650e:	897b      	ldrh	r3, [r7, #10]
 8006510:	b2db      	uxtb	r3, r3
 8006512:	f043 0301 	orr.w	r3, r3, #1
 8006516:	b2da      	uxtb	r2, r3
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	611a      	str	r2, [r3, #16]
 800651e:	e05f      	b.n	80065e0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006520:	897b      	ldrh	r3, [r7, #10]
 8006522:	11db      	asrs	r3, r3, #7
 8006524:	b2db      	uxtb	r3, r3
 8006526:	f003 0306 	and.w	r3, r3, #6
 800652a:	b2db      	uxtb	r3, r3
 800652c:	f063 030f 	orn	r3, r3, #15
 8006530:	b2da      	uxtb	r2, r3
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	4930      	ldr	r1, [pc, #192]	; (8006600 <I2C_MasterRequestRead+0x194>)
 800653e:	68f8      	ldr	r0, [r7, #12]
 8006540:	f000 f8b9 	bl	80066b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006544:	4603      	mov	r3, r0
 8006546:	2b00      	cmp	r3, #0
 8006548:	d001      	beq.n	800654e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	e054      	b.n	80065f8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800654e:	897b      	ldrh	r3, [r7, #10]
 8006550:	b2da      	uxtb	r2, r3
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	4929      	ldr	r1, [pc, #164]	; (8006604 <I2C_MasterRequestRead+0x198>)
 800655e:	68f8      	ldr	r0, [r7, #12]
 8006560:	f000 f8a9 	bl	80066b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d001      	beq.n	800656e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e044      	b.n	80065f8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800656e:	2300      	movs	r3, #0
 8006570:	613b      	str	r3, [r7, #16]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	695b      	ldr	r3, [r3, #20]
 8006578:	613b      	str	r3, [r7, #16]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	699b      	ldr	r3, [r3, #24]
 8006580:	613b      	str	r3, [r7, #16]
 8006582:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006592:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	9300      	str	r3, [sp, #0]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2200      	movs	r2, #0
 800659c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80065a0:	68f8      	ldr	r0, [r7, #12]
 80065a2:	f000 f831 	bl	8006608 <I2C_WaitOnFlagUntilTimeout>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d00d      	beq.n	80065c8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065ba:	d103      	bne.n	80065c4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065c2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80065c4:	2303      	movs	r3, #3
 80065c6:	e017      	b.n	80065f8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80065c8:	897b      	ldrh	r3, [r7, #10]
 80065ca:	11db      	asrs	r3, r3, #7
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	f003 0306 	and.w	r3, r3, #6
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	f063 030e 	orn	r3, r3, #14
 80065d8:	b2da      	uxtb	r2, r3
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	4907      	ldr	r1, [pc, #28]	; (8006604 <I2C_MasterRequestRead+0x198>)
 80065e6:	68f8      	ldr	r0, [r7, #12]
 80065e8:	f000 f865 	bl	80066b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d001      	beq.n	80065f6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e000      	b.n	80065f8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80065f6:	2300      	movs	r3, #0
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3718      	adds	r7, #24
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}
 8006600:	00010008 	.word	0x00010008
 8006604:	00010002 	.word	0x00010002

08006608 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b084      	sub	sp, #16
 800660c:	af00      	add	r7, sp, #0
 800660e:	60f8      	str	r0, [r7, #12]
 8006610:	60b9      	str	r1, [r7, #8]
 8006612:	603b      	str	r3, [r7, #0]
 8006614:	4613      	mov	r3, r2
 8006616:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006618:	e025      	b.n	8006666 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006620:	d021      	beq.n	8006666 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006622:	f7fc fe49 	bl	80032b8 <HAL_GetTick>
 8006626:	4602      	mov	r2, r0
 8006628:	69bb      	ldr	r3, [r7, #24]
 800662a:	1ad3      	subs	r3, r2, r3
 800662c:	683a      	ldr	r2, [r7, #0]
 800662e:	429a      	cmp	r2, r3
 8006630:	d302      	bcc.n	8006638 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d116      	bne.n	8006666 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2200      	movs	r2, #0
 800663c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2220      	movs	r2, #32
 8006642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2200      	movs	r2, #0
 800664a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006652:	f043 0220 	orr.w	r2, r3, #32
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2200      	movs	r2, #0
 800665e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	e023      	b.n	80066ae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	0c1b      	lsrs	r3, r3, #16
 800666a:	b2db      	uxtb	r3, r3
 800666c:	2b01      	cmp	r3, #1
 800666e:	d10d      	bne.n	800668c <I2C_WaitOnFlagUntilTimeout+0x84>
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	695b      	ldr	r3, [r3, #20]
 8006676:	43da      	mvns	r2, r3
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	4013      	ands	r3, r2
 800667c:	b29b      	uxth	r3, r3
 800667e:	2b00      	cmp	r3, #0
 8006680:	bf0c      	ite	eq
 8006682:	2301      	moveq	r3, #1
 8006684:	2300      	movne	r3, #0
 8006686:	b2db      	uxtb	r3, r3
 8006688:	461a      	mov	r2, r3
 800668a:	e00c      	b.n	80066a6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	699b      	ldr	r3, [r3, #24]
 8006692:	43da      	mvns	r2, r3
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	4013      	ands	r3, r2
 8006698:	b29b      	uxth	r3, r3
 800669a:	2b00      	cmp	r3, #0
 800669c:	bf0c      	ite	eq
 800669e:	2301      	moveq	r3, #1
 80066a0:	2300      	movne	r3, #0
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	461a      	mov	r2, r3
 80066a6:	79fb      	ldrb	r3, [r7, #7]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d0b6      	beq.n	800661a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3710      	adds	r7, #16
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}

080066b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80066b6:	b580      	push	{r7, lr}
 80066b8:	b084      	sub	sp, #16
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	60f8      	str	r0, [r7, #12]
 80066be:	60b9      	str	r1, [r7, #8]
 80066c0:	607a      	str	r2, [r7, #4]
 80066c2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80066c4:	e051      	b.n	800676a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	695b      	ldr	r3, [r3, #20]
 80066cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066d4:	d123      	bne.n	800671e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066e4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80066ee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2200      	movs	r2, #0
 80066f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2220      	movs	r2, #32
 80066fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2200      	movs	r2, #0
 8006702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800670a:	f043 0204 	orr.w	r2, r3, #4
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2200      	movs	r2, #0
 8006716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e046      	b.n	80067ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006724:	d021      	beq.n	800676a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006726:	f7fc fdc7 	bl	80032b8 <HAL_GetTick>
 800672a:	4602      	mov	r2, r0
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	1ad3      	subs	r3, r2, r3
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	429a      	cmp	r2, r3
 8006734:	d302      	bcc.n	800673c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d116      	bne.n	800676a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2200      	movs	r2, #0
 8006740:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2220      	movs	r2, #32
 8006746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2200      	movs	r2, #0
 800674e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006756:	f043 0220 	orr.w	r2, r3, #32
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2200      	movs	r2, #0
 8006762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	e020      	b.n	80067ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	0c1b      	lsrs	r3, r3, #16
 800676e:	b2db      	uxtb	r3, r3
 8006770:	2b01      	cmp	r3, #1
 8006772:	d10c      	bne.n	800678e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	695b      	ldr	r3, [r3, #20]
 800677a:	43da      	mvns	r2, r3
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	4013      	ands	r3, r2
 8006780:	b29b      	uxth	r3, r3
 8006782:	2b00      	cmp	r3, #0
 8006784:	bf14      	ite	ne
 8006786:	2301      	movne	r3, #1
 8006788:	2300      	moveq	r3, #0
 800678a:	b2db      	uxtb	r3, r3
 800678c:	e00b      	b.n	80067a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	699b      	ldr	r3, [r3, #24]
 8006794:	43da      	mvns	r2, r3
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	4013      	ands	r3, r2
 800679a:	b29b      	uxth	r3, r3
 800679c:	2b00      	cmp	r3, #0
 800679e:	bf14      	ite	ne
 80067a0:	2301      	movne	r3, #1
 80067a2:	2300      	moveq	r3, #0
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d18d      	bne.n	80066c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80067aa:	2300      	movs	r3, #0
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3710      	adds	r7, #16
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80067c0:	e02d      	b.n	800681e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80067c2:	68f8      	ldr	r0, [r7, #12]
 80067c4:	f000 f8ce 	bl	8006964 <I2C_IsAcknowledgeFailed>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d001      	beq.n	80067d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	e02d      	b.n	800682e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067d8:	d021      	beq.n	800681e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067da:	f7fc fd6d 	bl	80032b8 <HAL_GetTick>
 80067de:	4602      	mov	r2, r0
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	1ad3      	subs	r3, r2, r3
 80067e4:	68ba      	ldr	r2, [r7, #8]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d302      	bcc.n	80067f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d116      	bne.n	800681e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2200      	movs	r2, #0
 80067f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2220      	movs	r2, #32
 80067fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2200      	movs	r2, #0
 8006802:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800680a:	f043 0220 	orr.w	r2, r3, #32
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2200      	movs	r2, #0
 8006816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	e007      	b.n	800682e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	695b      	ldr	r3, [r3, #20]
 8006824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006828:	2b80      	cmp	r3, #128	; 0x80
 800682a:	d1ca      	bne.n	80067c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	3710      	adds	r7, #16
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006836:	b580      	push	{r7, lr}
 8006838:	b084      	sub	sp, #16
 800683a:	af00      	add	r7, sp, #0
 800683c:	60f8      	str	r0, [r7, #12]
 800683e:	60b9      	str	r1, [r7, #8]
 8006840:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006842:	e02d      	b.n	80068a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006844:	68f8      	ldr	r0, [r7, #12]
 8006846:	f000 f88d 	bl	8006964 <I2C_IsAcknowledgeFailed>
 800684a:	4603      	mov	r3, r0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d001      	beq.n	8006854 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	e02d      	b.n	80068b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800685a:	d021      	beq.n	80068a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800685c:	f7fc fd2c 	bl	80032b8 <HAL_GetTick>
 8006860:	4602      	mov	r2, r0
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	1ad3      	subs	r3, r2, r3
 8006866:	68ba      	ldr	r2, [r7, #8]
 8006868:	429a      	cmp	r2, r3
 800686a:	d302      	bcc.n	8006872 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d116      	bne.n	80068a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2200      	movs	r2, #0
 8006876:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2220      	movs	r2, #32
 800687c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2200      	movs	r2, #0
 8006884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800688c:	f043 0220 	orr.w	r2, r3, #32
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2200      	movs	r2, #0
 8006898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	e007      	b.n	80068b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	695b      	ldr	r3, [r3, #20]
 80068a6:	f003 0304 	and.w	r3, r3, #4
 80068aa:	2b04      	cmp	r3, #4
 80068ac:	d1ca      	bne.n	8006844 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80068ae:	2300      	movs	r3, #0
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3710      	adds	r7, #16
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
 80068be:	60f8      	str	r0, [r7, #12]
 80068c0:	60b9      	str	r1, [r7, #8]
 80068c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80068c4:	e042      	b.n	800694c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	695b      	ldr	r3, [r3, #20]
 80068cc:	f003 0310 	and.w	r3, r3, #16
 80068d0:	2b10      	cmp	r3, #16
 80068d2:	d119      	bne.n	8006908 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f06f 0210 	mvn.w	r2, #16
 80068dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2200      	movs	r2, #0
 80068e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2220      	movs	r2, #32
 80068e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2200      	movs	r2, #0
 8006900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	e029      	b.n	800695c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006908:	f7fc fcd6 	bl	80032b8 <HAL_GetTick>
 800690c:	4602      	mov	r2, r0
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	1ad3      	subs	r3, r2, r3
 8006912:	68ba      	ldr	r2, [r7, #8]
 8006914:	429a      	cmp	r2, r3
 8006916:	d302      	bcc.n	800691e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d116      	bne.n	800694c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2200      	movs	r2, #0
 8006922:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2220      	movs	r2, #32
 8006928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2200      	movs	r2, #0
 8006930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006938:	f043 0220 	orr.w	r2, r3, #32
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2200      	movs	r2, #0
 8006944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	e007      	b.n	800695c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	695b      	ldr	r3, [r3, #20]
 8006952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006956:	2b40      	cmp	r3, #64	; 0x40
 8006958:	d1b5      	bne.n	80068c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800695a:	2300      	movs	r3, #0
}
 800695c:	4618      	mov	r0, r3
 800695e:	3710      	adds	r7, #16
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006964:	b480      	push	{r7}
 8006966:	b083      	sub	sp, #12
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	695b      	ldr	r3, [r3, #20]
 8006972:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006976:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800697a:	d11b      	bne.n	80069b4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006984:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2220      	movs	r2, #32
 8006990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a0:	f043 0204 	orr.w	r2, r3, #4
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	e000      	b.n	80069b6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	370c      	adds	r7, #12
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr
	...

080069c4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b088      	sub	sp, #32
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d101      	bne.n	80069d6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e128      	b.n	8006c28 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d109      	bne.n	80069f6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2200      	movs	r2, #0
 80069e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	4a90      	ldr	r2, [pc, #576]	; (8006c30 <HAL_I2S_Init+0x26c>)
 80069ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f7fc f99b 	bl	8002d2c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2202      	movs	r2, #2
 80069fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	69db      	ldr	r3, [r3, #28]
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	6812      	ldr	r2, [r2, #0]
 8006a08:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006a0c:	f023 030f 	bic.w	r3, r3, #15
 8006a10:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	2202      	movs	r2, #2
 8006a18:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	695b      	ldr	r3, [r3, #20]
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	d060      	beq.n	8006ae4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d102      	bne.n	8006a30 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8006a2a:	2310      	movs	r3, #16
 8006a2c:	617b      	str	r3, [r7, #20]
 8006a2e:	e001      	b.n	8006a34 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006a30:	2320      	movs	r3, #32
 8006a32:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	2b20      	cmp	r3, #32
 8006a3a:	d802      	bhi.n	8006a42 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	005b      	lsls	r3, r3, #1
 8006a40:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8006a42:	2001      	movs	r0, #1
 8006a44:	f001 fb80 	bl	8008148 <HAL_RCCEx_GetPeriphCLKFreq>
 8006a48:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	691b      	ldr	r3, [r3, #16]
 8006a4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a52:	d125      	bne.n	8006aa0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d010      	beq.n	8006a7e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	68fa      	ldr	r2, [r7, #12]
 8006a62:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a66:	4613      	mov	r3, r2
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	4413      	add	r3, r2
 8006a6c:	005b      	lsls	r3, r3, #1
 8006a6e:	461a      	mov	r2, r3
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	695b      	ldr	r3, [r3, #20]
 8006a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a78:	3305      	adds	r3, #5
 8006a7a:	613b      	str	r3, [r7, #16]
 8006a7c:	e01f      	b.n	8006abe <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	00db      	lsls	r3, r3, #3
 8006a82:	68fa      	ldr	r2, [r7, #12]
 8006a84:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a88:	4613      	mov	r3, r2
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	4413      	add	r3, r2
 8006a8e:	005b      	lsls	r3, r3, #1
 8006a90:	461a      	mov	r2, r3
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	695b      	ldr	r3, [r3, #20]
 8006a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a9a:	3305      	adds	r3, #5
 8006a9c:	613b      	str	r3, [r7, #16]
 8006a9e:	e00e      	b.n	8006abe <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006aa0:	68fa      	ldr	r2, [r7, #12]
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	fbb2 f2f3 	udiv	r2, r2, r3
 8006aa8:	4613      	mov	r3, r2
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	4413      	add	r3, r2
 8006aae:	005b      	lsls	r3, r3, #1
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	695b      	ldr	r3, [r3, #20]
 8006ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aba:	3305      	adds	r3, #5
 8006abc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	4a5c      	ldr	r2, [pc, #368]	; (8006c34 <HAL_I2S_Init+0x270>)
 8006ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ac6:	08db      	lsrs	r3, r3, #3
 8006ac8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	f003 0301 	and.w	r3, r3, #1
 8006ad0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8006ad2:	693a      	ldr	r2, [r7, #16]
 8006ad4:	69bb      	ldr	r3, [r7, #24]
 8006ad6:	1ad3      	subs	r3, r2, r3
 8006ad8:	085b      	lsrs	r3, r3, #1
 8006ada:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8006adc:	69bb      	ldr	r3, [r7, #24]
 8006ade:	021b      	lsls	r3, r3, #8
 8006ae0:	61bb      	str	r3, [r7, #24]
 8006ae2:	e003      	b.n	8006aec <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8006ae4:	2302      	movs	r3, #2
 8006ae6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d902      	bls.n	8006af8 <HAL_I2S_Init+0x134>
 8006af2:	69fb      	ldr	r3, [r7, #28]
 8006af4:	2bff      	cmp	r3, #255	; 0xff
 8006af6:	d907      	bls.n	8006b08 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006afc:	f043 0210 	orr.w	r2, r3, #16
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	e08f      	b.n	8006c28 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	691a      	ldr	r2, [r3, #16]
 8006b0c:	69bb      	ldr	r3, [r7, #24]
 8006b0e:	ea42 0103 	orr.w	r1, r2, r3
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	69fa      	ldr	r2, [r7, #28]
 8006b18:	430a      	orrs	r2, r1
 8006b1a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	69db      	ldr	r3, [r3, #28]
 8006b22:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006b26:	f023 030f 	bic.w	r3, r3, #15
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	6851      	ldr	r1, [r2, #4]
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	6892      	ldr	r2, [r2, #8]
 8006b32:	4311      	orrs	r1, r2
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	68d2      	ldr	r2, [r2, #12]
 8006b38:	4311      	orrs	r1, r2
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	6992      	ldr	r2, [r2, #24]
 8006b3e:	430a      	orrs	r2, r1
 8006b40:	431a      	orrs	r2, r3
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b4a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6a1b      	ldr	r3, [r3, #32]
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d161      	bne.n	8006c18 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	4a38      	ldr	r2, [pc, #224]	; (8006c38 <HAL_I2S_Init+0x274>)
 8006b58:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a37      	ldr	r2, [pc, #220]	; (8006c3c <HAL_I2S_Init+0x278>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d101      	bne.n	8006b68 <HAL_I2S_Init+0x1a4>
 8006b64:	4b36      	ldr	r3, [pc, #216]	; (8006c40 <HAL_I2S_Init+0x27c>)
 8006b66:	e001      	b.n	8006b6c <HAL_I2S_Init+0x1a8>
 8006b68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006b6c:	69db      	ldr	r3, [r3, #28]
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	6812      	ldr	r2, [r2, #0]
 8006b72:	4932      	ldr	r1, [pc, #200]	; (8006c3c <HAL_I2S_Init+0x278>)
 8006b74:	428a      	cmp	r2, r1
 8006b76:	d101      	bne.n	8006b7c <HAL_I2S_Init+0x1b8>
 8006b78:	4a31      	ldr	r2, [pc, #196]	; (8006c40 <HAL_I2S_Init+0x27c>)
 8006b7a:	e001      	b.n	8006b80 <HAL_I2S_Init+0x1bc>
 8006b7c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8006b80:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006b84:	f023 030f 	bic.w	r3, r3, #15
 8006b88:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a2b      	ldr	r2, [pc, #172]	; (8006c3c <HAL_I2S_Init+0x278>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d101      	bne.n	8006b98 <HAL_I2S_Init+0x1d4>
 8006b94:	4b2a      	ldr	r3, [pc, #168]	; (8006c40 <HAL_I2S_Init+0x27c>)
 8006b96:	e001      	b.n	8006b9c <HAL_I2S_Init+0x1d8>
 8006b98:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006b9c:	2202      	movs	r2, #2
 8006b9e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a25      	ldr	r2, [pc, #148]	; (8006c3c <HAL_I2S_Init+0x278>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d101      	bne.n	8006bae <HAL_I2S_Init+0x1ea>
 8006baa:	4b25      	ldr	r3, [pc, #148]	; (8006c40 <HAL_I2S_Init+0x27c>)
 8006bac:	e001      	b.n	8006bb2 <HAL_I2S_Init+0x1ee>
 8006bae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006bb2:	69db      	ldr	r3, [r3, #28]
 8006bb4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bbe:	d003      	beq.n	8006bc8 <HAL_I2S_Init+0x204>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d103      	bne.n	8006bd0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8006bc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006bcc:	613b      	str	r3, [r7, #16]
 8006bce:	e001      	b.n	8006bd4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006bde:	4313      	orrs	r3, r2
 8006be0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	68db      	ldr	r3, [r3, #12]
 8006be6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006be8:	4313      	orrs	r3, r2
 8006bea:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	699b      	ldr	r3, [r3, #24]
 8006bf0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	b29a      	uxth	r2, r3
 8006bf6:	897b      	ldrh	r3, [r7, #10]
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006c00:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a0d      	ldr	r2, [pc, #52]	; (8006c3c <HAL_I2S_Init+0x278>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d101      	bne.n	8006c10 <HAL_I2S_Init+0x24c>
 8006c0c:	4b0c      	ldr	r3, [pc, #48]	; (8006c40 <HAL_I2S_Init+0x27c>)
 8006c0e:	e001      	b.n	8006c14 <HAL_I2S_Init+0x250>
 8006c10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006c14:	897a      	ldrh	r2, [r7, #10]
 8006c16:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2201      	movs	r2, #1
 8006c22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8006c26:	2300      	movs	r3, #0
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3720      	adds	r7, #32
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}
 8006c30:	080070fb 	.word	0x080070fb
 8006c34:	cccccccd 	.word	0xcccccccd
 8006c38:	08007211 	.word	0x08007211
 8006c3c:	40003800 	.word	0x40003800
 8006c40:	40003400 	.word	0x40003400

08006c44 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b086      	sub	sp, #24
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	60b9      	str	r1, [r7, #8]
 8006c4e:	4613      	mov	r3, r2
 8006c50:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d002      	beq.n	8006c5e <HAL_I2S_Transmit_DMA+0x1a>
 8006c58:	88fb      	ldrh	r3, [r7, #6]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d101      	bne.n	8006c62 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e08e      	b.n	8006d80 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d101      	bne.n	8006c72 <HAL_I2S_Transmit_DMA+0x2e>
 8006c6e:	2302      	movs	r3, #2
 8006c70:	e086      	b.n	8006d80 <HAL_I2S_Transmit_DMA+0x13c>
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2201      	movs	r2, #1
 8006c76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d005      	beq.n	8006c92 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8006c8e:	2302      	movs	r3, #2
 8006c90:	e076      	b.n	8006d80 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2203      	movs	r2, #3
 8006c96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	68ba      	ldr	r2, [r7, #8]
 8006ca4:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	69db      	ldr	r3, [r3, #28]
 8006cac:	f003 0307 	and.w	r3, r3, #7
 8006cb0:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	2b03      	cmp	r3, #3
 8006cb6:	d002      	beq.n	8006cbe <HAL_I2S_Transmit_DMA+0x7a>
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	2b05      	cmp	r3, #5
 8006cbc:	d10a      	bne.n	8006cd4 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8006cbe:	88fb      	ldrh	r3, [r7, #6]
 8006cc0:	005b      	lsls	r3, r3, #1
 8006cc2:	b29a      	uxth	r2, r3
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8006cc8:	88fb      	ldrh	r3, [r7, #6]
 8006cca:	005b      	lsls	r3, r3, #1
 8006ccc:	b29a      	uxth	r2, r3
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006cd2:	e005      	b.n	8006ce0 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	88fa      	ldrh	r2, [r7, #6]
 8006cd8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	88fa      	ldrh	r2, [r7, #6]
 8006cde:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce4:	4a28      	ldr	r2, [pc, #160]	; (8006d88 <HAL_I2S_Transmit_DMA+0x144>)
 8006ce6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cec:	4a27      	ldr	r2, [pc, #156]	; (8006d8c <HAL_I2S_Transmit_DMA+0x148>)
 8006cee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf4:	4a26      	ldr	r2, [pc, #152]	; (8006d90 <HAL_I2S_Transmit_DMA+0x14c>)
 8006cf6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8006d00:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8006d08:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d0e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8006d10:	f7fc fcc2 	bl	8003698 <HAL_DMA_Start_IT>
 8006d14:	4603      	mov	r3, r0
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d00f      	beq.n	8006d3a <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d1e:	f043 0208 	orr.w	r2, r3, #8
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2200      	movs	r2, #0
 8006d32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	e022      	b.n	8006d80 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	69db      	ldr	r3, [r3, #28]
 8006d40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d107      	bne.n	8006d58 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	69da      	ldr	r2, [r3, #28]
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006d56:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	f003 0302 	and.w	r3, r3, #2
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d107      	bne.n	8006d76 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	685a      	ldr	r2, [r3, #4]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f042 0202 	orr.w	r2, r2, #2
 8006d74:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8006d7e:	2300      	movs	r3, #0
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3718      	adds	r7, #24
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	08006f7b 	.word	0x08006f7b
 8006d8c:	08006f39 	.word	0x08006f39
 8006d90:	08006ff5 	.word	0x08006ff5

08006d94 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b086      	sub	sp, #24
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	60f8      	str	r0, [r7, #12]
 8006d9c:	60b9      	str	r1, [r7, #8]
 8006d9e:	4613      	mov	r3, r2
 8006da0:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d002      	beq.n	8006dae <HAL_I2S_Receive_DMA+0x1a>
 8006da8:	88fb      	ldrh	r3, [r7, #6]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d101      	bne.n	8006db2 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	e0a1      	b.n	8006ef6 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d101      	bne.n	8006dc2 <HAL_I2S_Receive_DMA+0x2e>
 8006dbe:	2302      	movs	r3, #2
 8006dc0:	e099      	b.n	8006ef6 <HAL_I2S_Receive_DMA+0x162>
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	d005      	beq.n	8006de2 <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8006dde:	2302      	movs	r3, #2
 8006de0:	e089      	b.n	8006ef6 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2204      	movs	r2, #4
 8006de6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2200      	movs	r2, #0
 8006dee:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	68ba      	ldr	r2, [r7, #8]
 8006df4:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	69db      	ldr	r3, [r3, #28]
 8006dfc:	f003 0307 	and.w	r3, r3, #7
 8006e00:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	2b03      	cmp	r3, #3
 8006e06:	d002      	beq.n	8006e0e <HAL_I2S_Receive_DMA+0x7a>
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	2b05      	cmp	r3, #5
 8006e0c:	d10a      	bne.n	8006e24 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 8006e0e:	88fb      	ldrh	r3, [r7, #6]
 8006e10:	005b      	lsls	r3, r3, #1
 8006e12:	b29a      	uxth	r2, r3
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8006e18:	88fb      	ldrh	r3, [r7, #6]
 8006e1a:	005b      	lsls	r3, r3, #1
 8006e1c:	b29a      	uxth	r2, r3
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	865a      	strh	r2, [r3, #50]	; 0x32
 8006e22:	e005      	b.n	8006e30 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	88fa      	ldrh	r2, [r7, #6]
 8006e28:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	88fa      	ldrh	r2, [r7, #6]
 8006e2e:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e34:	4a32      	ldr	r2, [pc, #200]	; (8006f00 <HAL_I2S_Receive_DMA+0x16c>)
 8006e36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e3c:	4a31      	ldr	r2, [pc, #196]	; (8006f04 <HAL_I2S_Receive_DMA+0x170>)
 8006e3e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e44:	4a30      	ldr	r2, [pc, #192]	; (8006f08 <HAL_I2S_Receive_DMA+0x174>)
 8006e46:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	69db      	ldr	r3, [r3, #28]
 8006e4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e56:	d10a      	bne.n	8006e6e <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006e58:	2300      	movs	r3, #0
 8006e5a:	613b      	str	r3, [r7, #16]
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	68db      	ldr	r3, [r3, #12]
 8006e62:	613b      	str	r3, [r7, #16]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	613b      	str	r3, [r7, #16]
 8006e6c:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	330c      	adds	r3, #12
 8006e78:	4619      	mov	r1, r3
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e7e:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8006e84:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8006e86:	f7fc fc07 	bl	8003698 <HAL_DMA_Start_IT>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d00f      	beq.n	8006eb0 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e94:	f043 0208 	orr.w	r2, r3, #8
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8006eac:	2301      	movs	r3, #1
 8006eae:	e022      	b.n	8006ef6 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	69db      	ldr	r3, [r3, #28]
 8006eb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d107      	bne.n	8006ece <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	69da      	ldr	r2, [r3, #28]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006ecc:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	f003 0301 	and.w	r3, r3, #1
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d107      	bne.n	8006eec <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	685a      	ldr	r2, [r3, #4]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f042 0201 	orr.w	r2, r2, #1
 8006eea:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8006ef4:	2300      	movs	r3, #0
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3718      	adds	r7, #24
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	bf00      	nop
 8006f00:	08006fd9 	.word	0x08006fd9
 8006f04:	08006f97 	.word	0x08006f97
 8006f08:	08006ff5 	.word	0x08006ff5

08006f0c <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b082      	sub	sp, #8
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	4798      	blx	r3
}
 8006f1c:	bf00      	nop
 8006f1e:	3708      	adds	r7, #8
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8006f2c:	bf00      	nop
 8006f2e:	370c      	adds	r7, #12
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b084      	sub	sp, #16
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f44:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	69db      	ldr	r3, [r3, #28]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d10e      	bne.n	8006f6c <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	685a      	ldr	r2, [r3, #4]
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f022 0202 	bic.w	r2, r2, #2
 8006f5c:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2200      	movs	r2, #0
 8006f62:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2201      	movs	r2, #1
 8006f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8006f6c:	68f8      	ldr	r0, [r7, #12]
 8006f6e:	f7fa fb95 	bl	800169c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006f72:	bf00      	nop
 8006f74:	3710      	adds	r7, #16
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}

08006f7a <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006f7a:	b580      	push	{r7, lr}
 8006f7c:	b084      	sub	sp, #16
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f86:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8006f88:	68f8      	ldr	r0, [r7, #12]
 8006f8a:	f7fa fb79 	bl	8001680 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006f8e:	bf00      	nop
 8006f90:	3710      	adds	r7, #16
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}

08006f96 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8006f96:	b580      	push	{r7, lr}
 8006f98:	b084      	sub	sp, #16
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa2:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	69db      	ldr	r3, [r3, #28]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d10e      	bne.n	8006fca <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	685a      	ldr	r2, [r3, #4]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f022 0201 	bic.w	r2, r2, #1
 8006fba:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8006fca:	68f8      	ldr	r0, [r7, #12]
 8006fcc:	f7fa fb1a 	bl	8001604 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006fd0:	bf00      	nop
 8006fd2:	3710      	adds	r7, #16
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b084      	sub	sp, #16
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe4:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8006fe6:	68f8      	ldr	r0, [r7, #12]
 8006fe8:	f7fa face 	bl	8001588 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006fec:	bf00      	nop
 8006fee:	3710      	adds	r7, #16
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b084      	sub	sp, #16
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007000:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	685a      	ldr	r2, [r3, #4]
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f022 0203 	bic.w	r2, r2, #3
 8007010:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2200      	movs	r2, #0
 8007016:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2200      	movs	r2, #0
 800701c:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2201      	movs	r2, #1
 8007022:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800702a:	f043 0208 	orr.w	r2, r3, #8
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8007032:	68f8      	ldr	r0, [r7, #12]
 8007034:	f7ff ff76 	bl	8006f24 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8007038:	bf00      	nop
 800703a:	3710      	adds	r7, #16
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}

08007040 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b082      	sub	sp, #8
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800704c:	881a      	ldrh	r2, [r3, #0]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007058:	1c9a      	adds	r2, r3, #2
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007062:	b29b      	uxth	r3, r3
 8007064:	3b01      	subs	r3, #1
 8007066:	b29a      	uxth	r2, r3
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007070:	b29b      	uxth	r3, r3
 8007072:	2b00      	cmp	r3, #0
 8007074:	d10e      	bne.n	8007094 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	685a      	ldr	r2, [r3, #4]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007084:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2201      	movs	r2, #1
 800708a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f7fa fb04 	bl	800169c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007094:	bf00      	nop
 8007096:	3708      	adds	r7, #8
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	68da      	ldr	r2, [r3, #12]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ae:	b292      	uxth	r2, r2
 80070b0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b6:	1c9a      	adds	r2, r3, #2
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	3b01      	subs	r3, #1
 80070c4:	b29a      	uxth	r2, r3
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d10e      	bne.n	80070f2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	685a      	ldr	r2, [r3, #4]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80070e2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f7fa fa89 	bl	8001604 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80070f2:	bf00      	nop
 80070f4:	3708      	adds	r7, #8
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}

080070fa <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80070fa:	b580      	push	{r7, lr}
 80070fc:	b086      	sub	sp, #24
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007110:	b2db      	uxtb	r3, r3
 8007112:	2b04      	cmp	r3, #4
 8007114:	d13a      	bne.n	800718c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	f003 0301 	and.w	r3, r3, #1
 800711c:	2b01      	cmp	r3, #1
 800711e:	d109      	bne.n	8007134 <I2S_IRQHandler+0x3a>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800712a:	2b40      	cmp	r3, #64	; 0x40
 800712c:	d102      	bne.n	8007134 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f7ff ffb4 	bl	800709c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800713a:	2b40      	cmp	r3, #64	; 0x40
 800713c:	d126      	bne.n	800718c <I2S_IRQHandler+0x92>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	f003 0320 	and.w	r3, r3, #32
 8007148:	2b20      	cmp	r3, #32
 800714a:	d11f      	bne.n	800718c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	685a      	ldr	r2, [r3, #4]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800715a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800715c:	2300      	movs	r3, #0
 800715e:	613b      	str	r3, [r7, #16]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	68db      	ldr	r3, [r3, #12]
 8007166:	613b      	str	r3, [r7, #16]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	613b      	str	r3, [r7, #16]
 8007170:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2201      	movs	r2, #1
 8007176:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800717e:	f043 0202 	orr.w	r2, r3, #2
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f7ff fecc 	bl	8006f24 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007192:	b2db      	uxtb	r3, r3
 8007194:	2b03      	cmp	r3, #3
 8007196:	d136      	bne.n	8007206 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	f003 0302 	and.w	r3, r3, #2
 800719e:	2b02      	cmp	r3, #2
 80071a0:	d109      	bne.n	80071b6 <I2S_IRQHandler+0xbc>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071ac:	2b80      	cmp	r3, #128	; 0x80
 80071ae:	d102      	bne.n	80071b6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f7ff ff45 	bl	8007040 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	f003 0308 	and.w	r3, r3, #8
 80071bc:	2b08      	cmp	r3, #8
 80071be:	d122      	bne.n	8007206 <I2S_IRQHandler+0x10c>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	f003 0320 	and.w	r3, r3, #32
 80071ca:	2b20      	cmp	r3, #32
 80071cc:	d11b      	bne.n	8007206 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	685a      	ldr	r2, [r3, #4]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80071dc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80071de:	2300      	movs	r3, #0
 80071e0:	60fb      	str	r3, [r7, #12]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	60fb      	str	r3, [r7, #12]
 80071ea:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071f8:	f043 0204 	orr.w	r2, r3, #4
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f7ff fe8f 	bl	8006f24 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007206:	bf00      	nop
 8007208:	3718      	adds	r7, #24
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
	...

08007210 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b088      	sub	sp, #32
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	689b      	ldr	r3, [r3, #8]
 800721e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4aa2      	ldr	r2, [pc, #648]	; (80074b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d101      	bne.n	800722e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800722a:	4ba2      	ldr	r3, [pc, #648]	; (80074b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800722c:	e001      	b.n	8007232 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800722e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a9b      	ldr	r2, [pc, #620]	; (80074b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d101      	bne.n	800724c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8007248:	4b9a      	ldr	r3, [pc, #616]	; (80074b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800724a:	e001      	b.n	8007250 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800724c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800725c:	d004      	beq.n	8007268 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	2b00      	cmp	r3, #0
 8007264:	f040 8099 	bne.w	800739a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8007268:	69fb      	ldr	r3, [r7, #28]
 800726a:	f003 0302 	and.w	r3, r3, #2
 800726e:	2b02      	cmp	r3, #2
 8007270:	d107      	bne.n	8007282 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007278:	2b00      	cmp	r3, #0
 800727a:	d002      	beq.n	8007282 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f000 f925 	bl	80074cc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8007282:	69bb      	ldr	r3, [r7, #24]
 8007284:	f003 0301 	and.w	r3, r3, #1
 8007288:	2b01      	cmp	r3, #1
 800728a:	d107      	bne.n	800729c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007292:	2b00      	cmp	r3, #0
 8007294:	d002      	beq.n	800729c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 f9c8 	bl	800762c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800729c:	69bb      	ldr	r3, [r7, #24]
 800729e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072a2:	2b40      	cmp	r3, #64	; 0x40
 80072a4:	d13a      	bne.n	800731c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	f003 0320 	and.w	r3, r3, #32
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d035      	beq.n	800731c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a7e      	ldr	r2, [pc, #504]	; (80074b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d101      	bne.n	80072be <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80072ba:	4b7e      	ldr	r3, [pc, #504]	; (80074b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80072bc:	e001      	b.n	80072c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80072be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80072c2:	685a      	ldr	r2, [r3, #4]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4979      	ldr	r1, [pc, #484]	; (80074b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80072ca:	428b      	cmp	r3, r1
 80072cc:	d101      	bne.n	80072d2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80072ce:	4b79      	ldr	r3, [pc, #484]	; (80074b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80072d0:	e001      	b.n	80072d6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80072d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80072d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80072da:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	685a      	ldr	r2, [r3, #4]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80072ea:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80072ec:	2300      	movs	r3, #0
 80072ee:	60fb      	str	r3, [r7, #12]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	68db      	ldr	r3, [r3, #12]
 80072f6:	60fb      	str	r3, [r7, #12]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	60fb      	str	r3, [r7, #12]
 8007300:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2201      	movs	r2, #1
 8007306:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800730e:	f043 0202 	orr.w	r2, r3, #2
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f7ff fe04 	bl	8006f24 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800731c:	69fb      	ldr	r3, [r7, #28]
 800731e:	f003 0308 	and.w	r3, r3, #8
 8007322:	2b08      	cmp	r3, #8
 8007324:	f040 80be 	bne.w	80074a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	f003 0320 	and.w	r3, r3, #32
 800732e:	2b00      	cmp	r3, #0
 8007330:	f000 80b8 	beq.w	80074a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	685a      	ldr	r2, [r3, #4]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007342:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a59      	ldr	r2, [pc, #356]	; (80074b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d101      	bne.n	8007352 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800734e:	4b59      	ldr	r3, [pc, #356]	; (80074b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007350:	e001      	b.n	8007356 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8007352:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007356:	685a      	ldr	r2, [r3, #4]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4954      	ldr	r1, [pc, #336]	; (80074b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800735e:	428b      	cmp	r3, r1
 8007360:	d101      	bne.n	8007366 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8007362:	4b54      	ldr	r3, [pc, #336]	; (80074b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007364:	e001      	b.n	800736a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8007366:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800736a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800736e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007370:	2300      	movs	r3, #0
 8007372:	60bb      	str	r3, [r7, #8]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	60bb      	str	r3, [r7, #8]
 800737c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2201      	movs	r2, #1
 8007382:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800738a:	f043 0204 	orr.w	r2, r3, #4
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f7ff fdc6 	bl	8006f24 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007398:	e084      	b.n	80074a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800739a:	69bb      	ldr	r3, [r7, #24]
 800739c:	f003 0302 	and.w	r3, r3, #2
 80073a0:	2b02      	cmp	r3, #2
 80073a2:	d107      	bne.n	80073b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d002      	beq.n	80073b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 f8be 	bl	8007530 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80073b4:	69fb      	ldr	r3, [r7, #28]
 80073b6:	f003 0301 	and.w	r3, r3, #1
 80073ba:	2b01      	cmp	r3, #1
 80073bc:	d107      	bne.n	80073ce <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d002      	beq.n	80073ce <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 f8fd 	bl	80075c8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80073ce:	69fb      	ldr	r3, [r7, #28]
 80073d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073d4:	2b40      	cmp	r3, #64	; 0x40
 80073d6:	d12f      	bne.n	8007438 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	f003 0320 	and.w	r3, r3, #32
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d02a      	beq.n	8007438 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	685a      	ldr	r2, [r3, #4]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80073f0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a2e      	ldr	r2, [pc, #184]	; (80074b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d101      	bne.n	8007400 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80073fc:	4b2d      	ldr	r3, [pc, #180]	; (80074b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80073fe:	e001      	b.n	8007404 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8007400:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007404:	685a      	ldr	r2, [r3, #4]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4929      	ldr	r1, [pc, #164]	; (80074b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800740c:	428b      	cmp	r3, r1
 800740e:	d101      	bne.n	8007414 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8007410:	4b28      	ldr	r3, [pc, #160]	; (80074b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007412:	e001      	b.n	8007418 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8007414:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007418:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800741c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2201      	movs	r2, #1
 8007422:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800742a:	f043 0202 	orr.w	r2, r3, #2
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f7ff fd76 	bl	8006f24 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007438:	69bb      	ldr	r3, [r7, #24]
 800743a:	f003 0308 	and.w	r3, r3, #8
 800743e:	2b08      	cmp	r3, #8
 8007440:	d131      	bne.n	80074a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	f003 0320 	and.w	r3, r3, #32
 8007448:	2b00      	cmp	r3, #0
 800744a:	d02c      	beq.n	80074a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a17      	ldr	r2, [pc, #92]	; (80074b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d101      	bne.n	800745a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8007456:	4b17      	ldr	r3, [pc, #92]	; (80074b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007458:	e001      	b.n	800745e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800745a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800745e:	685a      	ldr	r2, [r3, #4]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4912      	ldr	r1, [pc, #72]	; (80074b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007466:	428b      	cmp	r3, r1
 8007468:	d101      	bne.n	800746e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800746a:	4b12      	ldr	r3, [pc, #72]	; (80074b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800746c:	e001      	b.n	8007472 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800746e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007472:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007476:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	685a      	ldr	r2, [r3, #4]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007486:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2201      	movs	r2, #1
 800748c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007494:	f043 0204 	orr.w	r2, r3, #4
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f7ff fd41 	bl	8006f24 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80074a2:	e000      	b.n	80074a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80074a4:	bf00      	nop
}
 80074a6:	bf00      	nop
 80074a8:	3720      	adds	r7, #32
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
 80074ae:	bf00      	nop
 80074b0:	40003800 	.word	0x40003800
 80074b4:	40003400 	.word	0x40003400

080074b8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b083      	sub	sp, #12
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80074c0:	bf00      	nop
 80074c2:	370c      	adds	r7, #12
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr

080074cc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b082      	sub	sp, #8
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d8:	1c99      	adds	r1, r3, #2
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	6251      	str	r1, [r2, #36]	; 0x24
 80074de:	881a      	ldrh	r2, [r3, #0]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	3b01      	subs	r3, #1
 80074ee:	b29a      	uxth	r2, r3
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d113      	bne.n	8007526 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	685a      	ldr	r2, [r3, #4]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800750c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007512:	b29b      	uxth	r3, r3
 8007514:	2b00      	cmp	r3, #0
 8007516:	d106      	bne.n	8007526 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2201      	movs	r2, #1
 800751c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f7ff ffc9 	bl	80074b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007526:	bf00      	nop
 8007528:	3708      	adds	r7, #8
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}
	...

08007530 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b082      	sub	sp, #8
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800753c:	1c99      	adds	r1, r3, #2
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	6251      	str	r1, [r2, #36]	; 0x24
 8007542:	8819      	ldrh	r1, [r3, #0]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a1d      	ldr	r2, [pc, #116]	; (80075c0 <I2SEx_TxISR_I2SExt+0x90>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d101      	bne.n	8007552 <I2SEx_TxISR_I2SExt+0x22>
 800754e:	4b1d      	ldr	r3, [pc, #116]	; (80075c4 <I2SEx_TxISR_I2SExt+0x94>)
 8007550:	e001      	b.n	8007556 <I2SEx_TxISR_I2SExt+0x26>
 8007552:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007556:	460a      	mov	r2, r1
 8007558:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800755e:	b29b      	uxth	r3, r3
 8007560:	3b01      	subs	r3, #1
 8007562:	b29a      	uxth	r2, r3
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800756c:	b29b      	uxth	r3, r3
 800756e:	2b00      	cmp	r3, #0
 8007570:	d121      	bne.n	80075b6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a12      	ldr	r2, [pc, #72]	; (80075c0 <I2SEx_TxISR_I2SExt+0x90>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d101      	bne.n	8007580 <I2SEx_TxISR_I2SExt+0x50>
 800757c:	4b11      	ldr	r3, [pc, #68]	; (80075c4 <I2SEx_TxISR_I2SExt+0x94>)
 800757e:	e001      	b.n	8007584 <I2SEx_TxISR_I2SExt+0x54>
 8007580:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007584:	685a      	ldr	r2, [r3, #4]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	490d      	ldr	r1, [pc, #52]	; (80075c0 <I2SEx_TxISR_I2SExt+0x90>)
 800758c:	428b      	cmp	r3, r1
 800758e:	d101      	bne.n	8007594 <I2SEx_TxISR_I2SExt+0x64>
 8007590:	4b0c      	ldr	r3, [pc, #48]	; (80075c4 <I2SEx_TxISR_I2SExt+0x94>)
 8007592:	e001      	b.n	8007598 <I2SEx_TxISR_I2SExt+0x68>
 8007594:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007598:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800759c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d106      	bne.n	80075b6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f7ff ff81 	bl	80074b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80075b6:	bf00      	nop
 80075b8:	3708      	adds	r7, #8
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}
 80075be:	bf00      	nop
 80075c0:	40003800 	.word	0x40003800
 80075c4:	40003400 	.word	0x40003400

080075c8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b082      	sub	sp, #8
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	68d8      	ldr	r0, [r3, #12]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075da:	1c99      	adds	r1, r3, #2
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	62d1      	str	r1, [r2, #44]	; 0x2c
 80075e0:	b282      	uxth	r2, r0
 80075e2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	3b01      	subs	r3, #1
 80075ec:	b29a      	uxth	r2, r3
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d113      	bne.n	8007624 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	685a      	ldr	r2, [r3, #4]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800760a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007610:	b29b      	uxth	r3, r3
 8007612:	2b00      	cmp	r3, #0
 8007614:	d106      	bne.n	8007624 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2201      	movs	r2, #1
 800761a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f7ff ff4a 	bl	80074b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007624:	bf00      	nop
 8007626:	3708      	adds	r7, #8
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}

0800762c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b082      	sub	sp, #8
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a20      	ldr	r2, [pc, #128]	; (80076bc <I2SEx_RxISR_I2SExt+0x90>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d101      	bne.n	8007642 <I2SEx_RxISR_I2SExt+0x16>
 800763e:	4b20      	ldr	r3, [pc, #128]	; (80076c0 <I2SEx_RxISR_I2SExt+0x94>)
 8007640:	e001      	b.n	8007646 <I2SEx_RxISR_I2SExt+0x1a>
 8007642:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007646:	68d8      	ldr	r0, [r3, #12]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800764c:	1c99      	adds	r1, r3, #2
 800764e:	687a      	ldr	r2, [r7, #4]
 8007650:	62d1      	str	r1, [r2, #44]	; 0x2c
 8007652:	b282      	uxth	r2, r0
 8007654:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800765a:	b29b      	uxth	r3, r3
 800765c:	3b01      	subs	r3, #1
 800765e:	b29a      	uxth	r2, r3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007668:	b29b      	uxth	r3, r3
 800766a:	2b00      	cmp	r3, #0
 800766c:	d121      	bne.n	80076b2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a12      	ldr	r2, [pc, #72]	; (80076bc <I2SEx_RxISR_I2SExt+0x90>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d101      	bne.n	800767c <I2SEx_RxISR_I2SExt+0x50>
 8007678:	4b11      	ldr	r3, [pc, #68]	; (80076c0 <I2SEx_RxISR_I2SExt+0x94>)
 800767a:	e001      	b.n	8007680 <I2SEx_RxISR_I2SExt+0x54>
 800767c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007680:	685a      	ldr	r2, [r3, #4]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	490d      	ldr	r1, [pc, #52]	; (80076bc <I2SEx_RxISR_I2SExt+0x90>)
 8007688:	428b      	cmp	r3, r1
 800768a:	d101      	bne.n	8007690 <I2SEx_RxISR_I2SExt+0x64>
 800768c:	4b0c      	ldr	r3, [pc, #48]	; (80076c0 <I2SEx_RxISR_I2SExt+0x94>)
 800768e:	e001      	b.n	8007694 <I2SEx_RxISR_I2SExt+0x68>
 8007690:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007694:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007698:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800769e:	b29b      	uxth	r3, r3
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d106      	bne.n	80076b2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2201      	movs	r2, #1
 80076a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f7ff ff03 	bl	80074b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80076b2:	bf00      	nop
 80076b4:	3708      	adds	r7, #8
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}
 80076ba:	bf00      	nop
 80076bc:	40003800 	.word	0x40003800
 80076c0:	40003400 	.word	0x40003400

080076c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b086      	sub	sp, #24
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d101      	bne.n	80076d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	e264      	b.n	8007ba0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f003 0301 	and.w	r3, r3, #1
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d075      	beq.n	80077ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80076e2:	4ba3      	ldr	r3, [pc, #652]	; (8007970 <HAL_RCC_OscConfig+0x2ac>)
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	f003 030c 	and.w	r3, r3, #12
 80076ea:	2b04      	cmp	r3, #4
 80076ec:	d00c      	beq.n	8007708 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80076ee:	4ba0      	ldr	r3, [pc, #640]	; (8007970 <HAL_RCC_OscConfig+0x2ac>)
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80076f6:	2b08      	cmp	r3, #8
 80076f8:	d112      	bne.n	8007720 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80076fa:	4b9d      	ldr	r3, [pc, #628]	; (8007970 <HAL_RCC_OscConfig+0x2ac>)
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007702:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007706:	d10b      	bne.n	8007720 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007708:	4b99      	ldr	r3, [pc, #612]	; (8007970 <HAL_RCC_OscConfig+0x2ac>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007710:	2b00      	cmp	r3, #0
 8007712:	d05b      	beq.n	80077cc <HAL_RCC_OscConfig+0x108>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d157      	bne.n	80077cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800771c:	2301      	movs	r3, #1
 800771e:	e23f      	b.n	8007ba0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007728:	d106      	bne.n	8007738 <HAL_RCC_OscConfig+0x74>
 800772a:	4b91      	ldr	r3, [pc, #580]	; (8007970 <HAL_RCC_OscConfig+0x2ac>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a90      	ldr	r2, [pc, #576]	; (8007970 <HAL_RCC_OscConfig+0x2ac>)
 8007730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007734:	6013      	str	r3, [r2, #0]
 8007736:	e01d      	b.n	8007774 <HAL_RCC_OscConfig+0xb0>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007740:	d10c      	bne.n	800775c <HAL_RCC_OscConfig+0x98>
 8007742:	4b8b      	ldr	r3, [pc, #556]	; (8007970 <HAL_RCC_OscConfig+0x2ac>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a8a      	ldr	r2, [pc, #552]	; (8007970 <HAL_RCC_OscConfig+0x2ac>)
 8007748:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800774c:	6013      	str	r3, [r2, #0]
 800774e:	4b88      	ldr	r3, [pc, #544]	; (8007970 <HAL_RCC_OscConfig+0x2ac>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a87      	ldr	r2, [pc, #540]	; (8007970 <HAL_RCC_OscConfig+0x2ac>)
 8007754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007758:	6013      	str	r3, [r2, #0]
 800775a:	e00b      	b.n	8007774 <HAL_RCC_OscConfig+0xb0>
 800775c:	4b84      	ldr	r3, [pc, #528]	; (8007970 <HAL_RCC_OscConfig+0x2ac>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a83      	ldr	r2, [pc, #524]	; (8007970 <HAL_RCC_OscConfig+0x2ac>)
 8007762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007766:	6013      	str	r3, [r2, #0]
 8007768:	4b81      	ldr	r3, [pc, #516]	; (8007970 <HAL_RCC_OscConfig+0x2ac>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a80      	ldr	r2, [pc, #512]	; (8007970 <HAL_RCC_OscConfig+0x2ac>)
 800776e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007772:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d013      	beq.n	80077a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800777c:	f7fb fd9c 	bl	80032b8 <HAL_GetTick>
 8007780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007782:	e008      	b.n	8007796 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007784:	f7fb fd98 	bl	80032b8 <HAL_GetTick>
 8007788:	4602      	mov	r2, r0
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	1ad3      	subs	r3, r2, r3
 800778e:	2b64      	cmp	r3, #100	; 0x64
 8007790:	d901      	bls.n	8007796 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007792:	2303      	movs	r3, #3
 8007794:	e204      	b.n	8007ba0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007796:	4b76      	ldr	r3, [pc, #472]	; (8007970 <HAL_RCC_OscConfig+0x2ac>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d0f0      	beq.n	8007784 <HAL_RCC_OscConfig+0xc0>
 80077a2:	e014      	b.n	80077ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077a4:	f7fb fd88 	bl	80032b8 <HAL_GetTick>
 80077a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80077aa:	e008      	b.n	80077be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80077ac:	f7fb fd84 	bl	80032b8 <HAL_GetTick>
 80077b0:	4602      	mov	r2, r0
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	1ad3      	subs	r3, r2, r3
 80077b6:	2b64      	cmp	r3, #100	; 0x64
 80077b8:	d901      	bls.n	80077be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80077ba:	2303      	movs	r3, #3
 80077bc:	e1f0      	b.n	8007ba0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80077be:	4b6c      	ldr	r3, [pc, #432]	; (8007970 <HAL_RCC_OscConfig+0x2ac>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d1f0      	bne.n	80077ac <HAL_RCC_OscConfig+0xe8>
 80077ca:	e000      	b.n	80077ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f003 0302 	and.w	r3, r3, #2
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d063      	beq.n	80078a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80077da:	4b65      	ldr	r3, [pc, #404]	; (8007970 <HAL_RCC_OscConfig+0x2ac>)
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	f003 030c 	and.w	r3, r3, #12
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d00b      	beq.n	80077fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80077e6:	4b62      	ldr	r3, [pc, #392]	; (8007970 <HAL_RCC_OscConfig+0x2ac>)
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80077ee:	2b08      	cmp	r3, #8
 80077f0:	d11c      	bne.n	800782c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80077f2:	4b5f      	ldr	r3, [pc, #380]	; (8007970 <HAL_RCC_OscConfig+0x2ac>)
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d116      	bne.n	800782c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80077fe:	4b5c      	ldr	r3, [pc, #368]	; (8007970 <HAL_RCC_OscConfig+0x2ac>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f003 0302 	and.w	r3, r3, #2
 8007806:	2b00      	cmp	r3, #0
 8007808:	d005      	beq.n	8007816 <HAL_RCC_OscConfig+0x152>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	68db      	ldr	r3, [r3, #12]
 800780e:	2b01      	cmp	r3, #1
 8007810:	d001      	beq.n	8007816 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007812:	2301      	movs	r3, #1
 8007814:	e1c4      	b.n	8007ba0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007816:	4b56      	ldr	r3, [pc, #344]	; (8007970 <HAL_RCC_OscConfig+0x2ac>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	691b      	ldr	r3, [r3, #16]
 8007822:	00db      	lsls	r3, r3, #3
 8007824:	4952      	ldr	r1, [pc, #328]	; (8007970 <HAL_RCC_OscConfig+0x2ac>)
 8007826:	4313      	orrs	r3, r2
 8007828:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800782a:	e03a      	b.n	80078a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	68db      	ldr	r3, [r3, #12]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d020      	beq.n	8007876 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007834:	4b4f      	ldr	r3, [pc, #316]	; (8007974 <HAL_RCC_OscConfig+0x2b0>)
 8007836:	2201      	movs	r2, #1
 8007838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800783a:	f7fb fd3d 	bl	80032b8 <HAL_GetTick>
 800783e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007840:	e008      	b.n	8007854 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007842:	f7fb fd39 	bl	80032b8 <HAL_GetTick>
 8007846:	4602      	mov	r2, r0
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	1ad3      	subs	r3, r2, r3
 800784c:	2b02      	cmp	r3, #2
 800784e:	d901      	bls.n	8007854 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007850:	2303      	movs	r3, #3
 8007852:	e1a5      	b.n	8007ba0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007854:	4b46      	ldr	r3, [pc, #280]	; (8007970 <HAL_RCC_OscConfig+0x2ac>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f003 0302 	and.w	r3, r3, #2
 800785c:	2b00      	cmp	r3, #0
 800785e:	d0f0      	beq.n	8007842 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007860:	4b43      	ldr	r3, [pc, #268]	; (8007970 <HAL_RCC_OscConfig+0x2ac>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	691b      	ldr	r3, [r3, #16]
 800786c:	00db      	lsls	r3, r3, #3
 800786e:	4940      	ldr	r1, [pc, #256]	; (8007970 <HAL_RCC_OscConfig+0x2ac>)
 8007870:	4313      	orrs	r3, r2
 8007872:	600b      	str	r3, [r1, #0]
 8007874:	e015      	b.n	80078a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007876:	4b3f      	ldr	r3, [pc, #252]	; (8007974 <HAL_RCC_OscConfig+0x2b0>)
 8007878:	2200      	movs	r2, #0
 800787a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800787c:	f7fb fd1c 	bl	80032b8 <HAL_GetTick>
 8007880:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007882:	e008      	b.n	8007896 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007884:	f7fb fd18 	bl	80032b8 <HAL_GetTick>
 8007888:	4602      	mov	r2, r0
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	1ad3      	subs	r3, r2, r3
 800788e:	2b02      	cmp	r3, #2
 8007890:	d901      	bls.n	8007896 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007892:	2303      	movs	r3, #3
 8007894:	e184      	b.n	8007ba0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007896:	4b36      	ldr	r3, [pc, #216]	; (8007970 <HAL_RCC_OscConfig+0x2ac>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f003 0302 	and.w	r3, r3, #2
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d1f0      	bne.n	8007884 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f003 0308 	and.w	r3, r3, #8
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d030      	beq.n	8007910 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	695b      	ldr	r3, [r3, #20]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d016      	beq.n	80078e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80078b6:	4b30      	ldr	r3, [pc, #192]	; (8007978 <HAL_RCC_OscConfig+0x2b4>)
 80078b8:	2201      	movs	r2, #1
 80078ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078bc:	f7fb fcfc 	bl	80032b8 <HAL_GetTick>
 80078c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80078c2:	e008      	b.n	80078d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80078c4:	f7fb fcf8 	bl	80032b8 <HAL_GetTick>
 80078c8:	4602      	mov	r2, r0
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	1ad3      	subs	r3, r2, r3
 80078ce:	2b02      	cmp	r3, #2
 80078d0:	d901      	bls.n	80078d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80078d2:	2303      	movs	r3, #3
 80078d4:	e164      	b.n	8007ba0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80078d6:	4b26      	ldr	r3, [pc, #152]	; (8007970 <HAL_RCC_OscConfig+0x2ac>)
 80078d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078da:	f003 0302 	and.w	r3, r3, #2
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d0f0      	beq.n	80078c4 <HAL_RCC_OscConfig+0x200>
 80078e2:	e015      	b.n	8007910 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80078e4:	4b24      	ldr	r3, [pc, #144]	; (8007978 <HAL_RCC_OscConfig+0x2b4>)
 80078e6:	2200      	movs	r2, #0
 80078e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80078ea:	f7fb fce5 	bl	80032b8 <HAL_GetTick>
 80078ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80078f0:	e008      	b.n	8007904 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80078f2:	f7fb fce1 	bl	80032b8 <HAL_GetTick>
 80078f6:	4602      	mov	r2, r0
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	1ad3      	subs	r3, r2, r3
 80078fc:	2b02      	cmp	r3, #2
 80078fe:	d901      	bls.n	8007904 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007900:	2303      	movs	r3, #3
 8007902:	e14d      	b.n	8007ba0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007904:	4b1a      	ldr	r3, [pc, #104]	; (8007970 <HAL_RCC_OscConfig+0x2ac>)
 8007906:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007908:	f003 0302 	and.w	r3, r3, #2
 800790c:	2b00      	cmp	r3, #0
 800790e:	d1f0      	bne.n	80078f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f003 0304 	and.w	r3, r3, #4
 8007918:	2b00      	cmp	r3, #0
 800791a:	f000 80a0 	beq.w	8007a5e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800791e:	2300      	movs	r3, #0
 8007920:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007922:	4b13      	ldr	r3, [pc, #76]	; (8007970 <HAL_RCC_OscConfig+0x2ac>)
 8007924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800792a:	2b00      	cmp	r3, #0
 800792c:	d10f      	bne.n	800794e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800792e:	2300      	movs	r3, #0
 8007930:	60bb      	str	r3, [r7, #8]
 8007932:	4b0f      	ldr	r3, [pc, #60]	; (8007970 <HAL_RCC_OscConfig+0x2ac>)
 8007934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007936:	4a0e      	ldr	r2, [pc, #56]	; (8007970 <HAL_RCC_OscConfig+0x2ac>)
 8007938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800793c:	6413      	str	r3, [r2, #64]	; 0x40
 800793e:	4b0c      	ldr	r3, [pc, #48]	; (8007970 <HAL_RCC_OscConfig+0x2ac>)
 8007940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007946:	60bb      	str	r3, [r7, #8]
 8007948:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800794a:	2301      	movs	r3, #1
 800794c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800794e:	4b0b      	ldr	r3, [pc, #44]	; (800797c <HAL_RCC_OscConfig+0x2b8>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007956:	2b00      	cmp	r3, #0
 8007958:	d121      	bne.n	800799e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800795a:	4b08      	ldr	r3, [pc, #32]	; (800797c <HAL_RCC_OscConfig+0x2b8>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a07      	ldr	r2, [pc, #28]	; (800797c <HAL_RCC_OscConfig+0x2b8>)
 8007960:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007964:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007966:	f7fb fca7 	bl	80032b8 <HAL_GetTick>
 800796a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800796c:	e011      	b.n	8007992 <HAL_RCC_OscConfig+0x2ce>
 800796e:	bf00      	nop
 8007970:	40023800 	.word	0x40023800
 8007974:	42470000 	.word	0x42470000
 8007978:	42470e80 	.word	0x42470e80
 800797c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007980:	f7fb fc9a 	bl	80032b8 <HAL_GetTick>
 8007984:	4602      	mov	r2, r0
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	1ad3      	subs	r3, r2, r3
 800798a:	2b02      	cmp	r3, #2
 800798c:	d901      	bls.n	8007992 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800798e:	2303      	movs	r3, #3
 8007990:	e106      	b.n	8007ba0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007992:	4b85      	ldr	r3, [pc, #532]	; (8007ba8 <HAL_RCC_OscConfig+0x4e4>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800799a:	2b00      	cmp	r3, #0
 800799c:	d0f0      	beq.n	8007980 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	d106      	bne.n	80079b4 <HAL_RCC_OscConfig+0x2f0>
 80079a6:	4b81      	ldr	r3, [pc, #516]	; (8007bac <HAL_RCC_OscConfig+0x4e8>)
 80079a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079aa:	4a80      	ldr	r2, [pc, #512]	; (8007bac <HAL_RCC_OscConfig+0x4e8>)
 80079ac:	f043 0301 	orr.w	r3, r3, #1
 80079b0:	6713      	str	r3, [r2, #112]	; 0x70
 80079b2:	e01c      	b.n	80079ee <HAL_RCC_OscConfig+0x32a>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	2b05      	cmp	r3, #5
 80079ba:	d10c      	bne.n	80079d6 <HAL_RCC_OscConfig+0x312>
 80079bc:	4b7b      	ldr	r3, [pc, #492]	; (8007bac <HAL_RCC_OscConfig+0x4e8>)
 80079be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079c0:	4a7a      	ldr	r2, [pc, #488]	; (8007bac <HAL_RCC_OscConfig+0x4e8>)
 80079c2:	f043 0304 	orr.w	r3, r3, #4
 80079c6:	6713      	str	r3, [r2, #112]	; 0x70
 80079c8:	4b78      	ldr	r3, [pc, #480]	; (8007bac <HAL_RCC_OscConfig+0x4e8>)
 80079ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079cc:	4a77      	ldr	r2, [pc, #476]	; (8007bac <HAL_RCC_OscConfig+0x4e8>)
 80079ce:	f043 0301 	orr.w	r3, r3, #1
 80079d2:	6713      	str	r3, [r2, #112]	; 0x70
 80079d4:	e00b      	b.n	80079ee <HAL_RCC_OscConfig+0x32a>
 80079d6:	4b75      	ldr	r3, [pc, #468]	; (8007bac <HAL_RCC_OscConfig+0x4e8>)
 80079d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079da:	4a74      	ldr	r2, [pc, #464]	; (8007bac <HAL_RCC_OscConfig+0x4e8>)
 80079dc:	f023 0301 	bic.w	r3, r3, #1
 80079e0:	6713      	str	r3, [r2, #112]	; 0x70
 80079e2:	4b72      	ldr	r3, [pc, #456]	; (8007bac <HAL_RCC_OscConfig+0x4e8>)
 80079e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079e6:	4a71      	ldr	r2, [pc, #452]	; (8007bac <HAL_RCC_OscConfig+0x4e8>)
 80079e8:	f023 0304 	bic.w	r3, r3, #4
 80079ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d015      	beq.n	8007a22 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079f6:	f7fb fc5f 	bl	80032b8 <HAL_GetTick>
 80079fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079fc:	e00a      	b.n	8007a14 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80079fe:	f7fb fc5b 	bl	80032b8 <HAL_GetTick>
 8007a02:	4602      	mov	r2, r0
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	1ad3      	subs	r3, r2, r3
 8007a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d901      	bls.n	8007a14 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007a10:	2303      	movs	r3, #3
 8007a12:	e0c5      	b.n	8007ba0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a14:	4b65      	ldr	r3, [pc, #404]	; (8007bac <HAL_RCC_OscConfig+0x4e8>)
 8007a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a18:	f003 0302 	and.w	r3, r3, #2
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d0ee      	beq.n	80079fe <HAL_RCC_OscConfig+0x33a>
 8007a20:	e014      	b.n	8007a4c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a22:	f7fb fc49 	bl	80032b8 <HAL_GetTick>
 8007a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a28:	e00a      	b.n	8007a40 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a2a:	f7fb fc45 	bl	80032b8 <HAL_GetTick>
 8007a2e:	4602      	mov	r2, r0
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	1ad3      	subs	r3, r2, r3
 8007a34:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d901      	bls.n	8007a40 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007a3c:	2303      	movs	r3, #3
 8007a3e:	e0af      	b.n	8007ba0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a40:	4b5a      	ldr	r3, [pc, #360]	; (8007bac <HAL_RCC_OscConfig+0x4e8>)
 8007a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a44:	f003 0302 	and.w	r3, r3, #2
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d1ee      	bne.n	8007a2a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007a4c:	7dfb      	ldrb	r3, [r7, #23]
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d105      	bne.n	8007a5e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a52:	4b56      	ldr	r3, [pc, #344]	; (8007bac <HAL_RCC_OscConfig+0x4e8>)
 8007a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a56:	4a55      	ldr	r2, [pc, #340]	; (8007bac <HAL_RCC_OscConfig+0x4e8>)
 8007a58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a5c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	699b      	ldr	r3, [r3, #24]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	f000 809b 	beq.w	8007b9e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007a68:	4b50      	ldr	r3, [pc, #320]	; (8007bac <HAL_RCC_OscConfig+0x4e8>)
 8007a6a:	689b      	ldr	r3, [r3, #8]
 8007a6c:	f003 030c 	and.w	r3, r3, #12
 8007a70:	2b08      	cmp	r3, #8
 8007a72:	d05c      	beq.n	8007b2e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	699b      	ldr	r3, [r3, #24]
 8007a78:	2b02      	cmp	r3, #2
 8007a7a:	d141      	bne.n	8007b00 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a7c:	4b4c      	ldr	r3, [pc, #304]	; (8007bb0 <HAL_RCC_OscConfig+0x4ec>)
 8007a7e:	2200      	movs	r2, #0
 8007a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a82:	f7fb fc19 	bl	80032b8 <HAL_GetTick>
 8007a86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a88:	e008      	b.n	8007a9c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a8a:	f7fb fc15 	bl	80032b8 <HAL_GetTick>
 8007a8e:	4602      	mov	r2, r0
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	1ad3      	subs	r3, r2, r3
 8007a94:	2b02      	cmp	r3, #2
 8007a96:	d901      	bls.n	8007a9c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007a98:	2303      	movs	r3, #3
 8007a9a:	e081      	b.n	8007ba0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a9c:	4b43      	ldr	r3, [pc, #268]	; (8007bac <HAL_RCC_OscConfig+0x4e8>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d1f0      	bne.n	8007a8a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	69da      	ldr	r2, [r3, #28]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6a1b      	ldr	r3, [r3, #32]
 8007ab0:	431a      	orrs	r2, r3
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab6:	019b      	lsls	r3, r3, #6
 8007ab8:	431a      	orrs	r2, r3
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007abe:	085b      	lsrs	r3, r3, #1
 8007ac0:	3b01      	subs	r3, #1
 8007ac2:	041b      	lsls	r3, r3, #16
 8007ac4:	431a      	orrs	r2, r3
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aca:	061b      	lsls	r3, r3, #24
 8007acc:	4937      	ldr	r1, [pc, #220]	; (8007bac <HAL_RCC_OscConfig+0x4e8>)
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007ad2:	4b37      	ldr	r3, [pc, #220]	; (8007bb0 <HAL_RCC_OscConfig+0x4ec>)
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ad8:	f7fb fbee 	bl	80032b8 <HAL_GetTick>
 8007adc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ade:	e008      	b.n	8007af2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ae0:	f7fb fbea 	bl	80032b8 <HAL_GetTick>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	1ad3      	subs	r3, r2, r3
 8007aea:	2b02      	cmp	r3, #2
 8007aec:	d901      	bls.n	8007af2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007aee:	2303      	movs	r3, #3
 8007af0:	e056      	b.n	8007ba0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007af2:	4b2e      	ldr	r3, [pc, #184]	; (8007bac <HAL_RCC_OscConfig+0x4e8>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d0f0      	beq.n	8007ae0 <HAL_RCC_OscConfig+0x41c>
 8007afe:	e04e      	b.n	8007b9e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b00:	4b2b      	ldr	r3, [pc, #172]	; (8007bb0 <HAL_RCC_OscConfig+0x4ec>)
 8007b02:	2200      	movs	r2, #0
 8007b04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b06:	f7fb fbd7 	bl	80032b8 <HAL_GetTick>
 8007b0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b0c:	e008      	b.n	8007b20 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b0e:	f7fb fbd3 	bl	80032b8 <HAL_GetTick>
 8007b12:	4602      	mov	r2, r0
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	1ad3      	subs	r3, r2, r3
 8007b18:	2b02      	cmp	r3, #2
 8007b1a:	d901      	bls.n	8007b20 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007b1c:	2303      	movs	r3, #3
 8007b1e:	e03f      	b.n	8007ba0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b20:	4b22      	ldr	r3, [pc, #136]	; (8007bac <HAL_RCC_OscConfig+0x4e8>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d1f0      	bne.n	8007b0e <HAL_RCC_OscConfig+0x44a>
 8007b2c:	e037      	b.n	8007b9e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	699b      	ldr	r3, [r3, #24]
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d101      	bne.n	8007b3a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007b36:	2301      	movs	r3, #1
 8007b38:	e032      	b.n	8007ba0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007b3a:	4b1c      	ldr	r3, [pc, #112]	; (8007bac <HAL_RCC_OscConfig+0x4e8>)
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	699b      	ldr	r3, [r3, #24]
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d028      	beq.n	8007b9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d121      	bne.n	8007b9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d11a      	bne.n	8007b9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007b64:	68fa      	ldr	r2, [r7, #12]
 8007b66:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007b6a:	4013      	ands	r3, r2
 8007b6c:	687a      	ldr	r2, [r7, #4]
 8007b6e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007b70:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d111      	bne.n	8007b9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b80:	085b      	lsrs	r3, r3, #1
 8007b82:	3b01      	subs	r3, #1
 8007b84:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007b86:	429a      	cmp	r2, r3
 8007b88:	d107      	bne.n	8007b9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b94:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d001      	beq.n	8007b9e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e000      	b.n	8007ba0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8007b9e:	2300      	movs	r3, #0
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3718      	adds	r7, #24
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}
 8007ba8:	40007000 	.word	0x40007000
 8007bac:	40023800 	.word	0x40023800
 8007bb0:	42470060 	.word	0x42470060

08007bb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b084      	sub	sp, #16
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d101      	bne.n	8007bc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	e0cc      	b.n	8007d62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007bc8:	4b68      	ldr	r3, [pc, #416]	; (8007d6c <HAL_RCC_ClockConfig+0x1b8>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f003 0307 	and.w	r3, r3, #7
 8007bd0:	683a      	ldr	r2, [r7, #0]
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d90c      	bls.n	8007bf0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007bd6:	4b65      	ldr	r3, [pc, #404]	; (8007d6c <HAL_RCC_ClockConfig+0x1b8>)
 8007bd8:	683a      	ldr	r2, [r7, #0]
 8007bda:	b2d2      	uxtb	r2, r2
 8007bdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bde:	4b63      	ldr	r3, [pc, #396]	; (8007d6c <HAL_RCC_ClockConfig+0x1b8>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f003 0307 	and.w	r3, r3, #7
 8007be6:	683a      	ldr	r2, [r7, #0]
 8007be8:	429a      	cmp	r2, r3
 8007bea:	d001      	beq.n	8007bf0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007bec:	2301      	movs	r3, #1
 8007bee:	e0b8      	b.n	8007d62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f003 0302 	and.w	r3, r3, #2
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d020      	beq.n	8007c3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f003 0304 	and.w	r3, r3, #4
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d005      	beq.n	8007c14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007c08:	4b59      	ldr	r3, [pc, #356]	; (8007d70 <HAL_RCC_ClockConfig+0x1bc>)
 8007c0a:	689b      	ldr	r3, [r3, #8]
 8007c0c:	4a58      	ldr	r2, [pc, #352]	; (8007d70 <HAL_RCC_ClockConfig+0x1bc>)
 8007c0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007c12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f003 0308 	and.w	r3, r3, #8
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d005      	beq.n	8007c2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007c20:	4b53      	ldr	r3, [pc, #332]	; (8007d70 <HAL_RCC_ClockConfig+0x1bc>)
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	4a52      	ldr	r2, [pc, #328]	; (8007d70 <HAL_RCC_ClockConfig+0x1bc>)
 8007c26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007c2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c2c:	4b50      	ldr	r3, [pc, #320]	; (8007d70 <HAL_RCC_ClockConfig+0x1bc>)
 8007c2e:	689b      	ldr	r3, [r3, #8]
 8007c30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	494d      	ldr	r1, [pc, #308]	; (8007d70 <HAL_RCC_ClockConfig+0x1bc>)
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f003 0301 	and.w	r3, r3, #1
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d044      	beq.n	8007cd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d107      	bne.n	8007c62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c52:	4b47      	ldr	r3, [pc, #284]	; (8007d70 <HAL_RCC_ClockConfig+0x1bc>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d119      	bne.n	8007c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	e07f      	b.n	8007d62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	2b02      	cmp	r3, #2
 8007c68:	d003      	beq.n	8007c72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007c6e:	2b03      	cmp	r3, #3
 8007c70:	d107      	bne.n	8007c82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c72:	4b3f      	ldr	r3, [pc, #252]	; (8007d70 <HAL_RCC_ClockConfig+0x1bc>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d109      	bne.n	8007c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e06f      	b.n	8007d62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c82:	4b3b      	ldr	r3, [pc, #236]	; (8007d70 <HAL_RCC_ClockConfig+0x1bc>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f003 0302 	and.w	r3, r3, #2
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d101      	bne.n	8007c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	e067      	b.n	8007d62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007c92:	4b37      	ldr	r3, [pc, #220]	; (8007d70 <HAL_RCC_ClockConfig+0x1bc>)
 8007c94:	689b      	ldr	r3, [r3, #8]
 8007c96:	f023 0203 	bic.w	r2, r3, #3
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	4934      	ldr	r1, [pc, #208]	; (8007d70 <HAL_RCC_ClockConfig+0x1bc>)
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007ca4:	f7fb fb08 	bl	80032b8 <HAL_GetTick>
 8007ca8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007caa:	e00a      	b.n	8007cc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007cac:	f7fb fb04 	bl	80032b8 <HAL_GetTick>
 8007cb0:	4602      	mov	r2, r0
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	1ad3      	subs	r3, r2, r3
 8007cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d901      	bls.n	8007cc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007cbe:	2303      	movs	r3, #3
 8007cc0:	e04f      	b.n	8007d62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cc2:	4b2b      	ldr	r3, [pc, #172]	; (8007d70 <HAL_RCC_ClockConfig+0x1bc>)
 8007cc4:	689b      	ldr	r3, [r3, #8]
 8007cc6:	f003 020c 	and.w	r2, r3, #12
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	d1eb      	bne.n	8007cac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007cd4:	4b25      	ldr	r3, [pc, #148]	; (8007d6c <HAL_RCC_ClockConfig+0x1b8>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f003 0307 	and.w	r3, r3, #7
 8007cdc:	683a      	ldr	r2, [r7, #0]
 8007cde:	429a      	cmp	r2, r3
 8007ce0:	d20c      	bcs.n	8007cfc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ce2:	4b22      	ldr	r3, [pc, #136]	; (8007d6c <HAL_RCC_ClockConfig+0x1b8>)
 8007ce4:	683a      	ldr	r2, [r7, #0]
 8007ce6:	b2d2      	uxtb	r2, r2
 8007ce8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cea:	4b20      	ldr	r3, [pc, #128]	; (8007d6c <HAL_RCC_ClockConfig+0x1b8>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f003 0307 	and.w	r3, r3, #7
 8007cf2:	683a      	ldr	r2, [r7, #0]
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d001      	beq.n	8007cfc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	e032      	b.n	8007d62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f003 0304 	and.w	r3, r3, #4
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d008      	beq.n	8007d1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007d08:	4b19      	ldr	r3, [pc, #100]	; (8007d70 <HAL_RCC_ClockConfig+0x1bc>)
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	68db      	ldr	r3, [r3, #12]
 8007d14:	4916      	ldr	r1, [pc, #88]	; (8007d70 <HAL_RCC_ClockConfig+0x1bc>)
 8007d16:	4313      	orrs	r3, r2
 8007d18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f003 0308 	and.w	r3, r3, #8
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d009      	beq.n	8007d3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007d26:	4b12      	ldr	r3, [pc, #72]	; (8007d70 <HAL_RCC_ClockConfig+0x1bc>)
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	691b      	ldr	r3, [r3, #16]
 8007d32:	00db      	lsls	r3, r3, #3
 8007d34:	490e      	ldr	r1, [pc, #56]	; (8007d70 <HAL_RCC_ClockConfig+0x1bc>)
 8007d36:	4313      	orrs	r3, r2
 8007d38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007d3a:	f000 f821 	bl	8007d80 <HAL_RCC_GetSysClockFreq>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	4b0b      	ldr	r3, [pc, #44]	; (8007d70 <HAL_RCC_ClockConfig+0x1bc>)
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	091b      	lsrs	r3, r3, #4
 8007d46:	f003 030f 	and.w	r3, r3, #15
 8007d4a:	490a      	ldr	r1, [pc, #40]	; (8007d74 <HAL_RCC_ClockConfig+0x1c0>)
 8007d4c:	5ccb      	ldrb	r3, [r1, r3]
 8007d4e:	fa22 f303 	lsr.w	r3, r2, r3
 8007d52:	4a09      	ldr	r2, [pc, #36]	; (8007d78 <HAL_RCC_ClockConfig+0x1c4>)
 8007d54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007d56:	4b09      	ldr	r3, [pc, #36]	; (8007d7c <HAL_RCC_ClockConfig+0x1c8>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f7fb fa68 	bl	8003230 <HAL_InitTick>

  return HAL_OK;
 8007d60:	2300      	movs	r3, #0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3710      	adds	r7, #16
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
 8007d6a:	bf00      	nop
 8007d6c:	40023c00 	.word	0x40023c00
 8007d70:	40023800 	.word	0x40023800
 8007d74:	0800da28 	.word	0x0800da28
 8007d78:	200002a4 	.word	0x200002a4
 8007d7c:	200002a8 	.word	0x200002a8

08007d80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d80:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007d84:	b084      	sub	sp, #16
 8007d86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	607b      	str	r3, [r7, #4]
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	60fb      	str	r3, [r7, #12]
 8007d90:	2300      	movs	r3, #0
 8007d92:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007d94:	2300      	movs	r3, #0
 8007d96:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007d98:	4b67      	ldr	r3, [pc, #412]	; (8007f38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	f003 030c 	and.w	r3, r3, #12
 8007da0:	2b08      	cmp	r3, #8
 8007da2:	d00d      	beq.n	8007dc0 <HAL_RCC_GetSysClockFreq+0x40>
 8007da4:	2b08      	cmp	r3, #8
 8007da6:	f200 80bd 	bhi.w	8007f24 <HAL_RCC_GetSysClockFreq+0x1a4>
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d002      	beq.n	8007db4 <HAL_RCC_GetSysClockFreq+0x34>
 8007dae:	2b04      	cmp	r3, #4
 8007db0:	d003      	beq.n	8007dba <HAL_RCC_GetSysClockFreq+0x3a>
 8007db2:	e0b7      	b.n	8007f24 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007db4:	4b61      	ldr	r3, [pc, #388]	; (8007f3c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007db6:	60bb      	str	r3, [r7, #8]
       break;
 8007db8:	e0b7      	b.n	8007f2a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007dba:	4b61      	ldr	r3, [pc, #388]	; (8007f40 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007dbc:	60bb      	str	r3, [r7, #8]
      break;
 8007dbe:	e0b4      	b.n	8007f2a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007dc0:	4b5d      	ldr	r3, [pc, #372]	; (8007f38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007dc8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007dca:	4b5b      	ldr	r3, [pc, #364]	; (8007f38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d04d      	beq.n	8007e72 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007dd6:	4b58      	ldr	r3, [pc, #352]	; (8007f38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	099b      	lsrs	r3, r3, #6
 8007ddc:	461a      	mov	r2, r3
 8007dde:	f04f 0300 	mov.w	r3, #0
 8007de2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007de6:	f04f 0100 	mov.w	r1, #0
 8007dea:	ea02 0800 	and.w	r8, r2, r0
 8007dee:	ea03 0901 	and.w	r9, r3, r1
 8007df2:	4640      	mov	r0, r8
 8007df4:	4649      	mov	r1, r9
 8007df6:	f04f 0200 	mov.w	r2, #0
 8007dfa:	f04f 0300 	mov.w	r3, #0
 8007dfe:	014b      	lsls	r3, r1, #5
 8007e00:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007e04:	0142      	lsls	r2, r0, #5
 8007e06:	4610      	mov	r0, r2
 8007e08:	4619      	mov	r1, r3
 8007e0a:	ebb0 0008 	subs.w	r0, r0, r8
 8007e0e:	eb61 0109 	sbc.w	r1, r1, r9
 8007e12:	f04f 0200 	mov.w	r2, #0
 8007e16:	f04f 0300 	mov.w	r3, #0
 8007e1a:	018b      	lsls	r3, r1, #6
 8007e1c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007e20:	0182      	lsls	r2, r0, #6
 8007e22:	1a12      	subs	r2, r2, r0
 8007e24:	eb63 0301 	sbc.w	r3, r3, r1
 8007e28:	f04f 0000 	mov.w	r0, #0
 8007e2c:	f04f 0100 	mov.w	r1, #0
 8007e30:	00d9      	lsls	r1, r3, #3
 8007e32:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007e36:	00d0      	lsls	r0, r2, #3
 8007e38:	4602      	mov	r2, r0
 8007e3a:	460b      	mov	r3, r1
 8007e3c:	eb12 0208 	adds.w	r2, r2, r8
 8007e40:	eb43 0309 	adc.w	r3, r3, r9
 8007e44:	f04f 0000 	mov.w	r0, #0
 8007e48:	f04f 0100 	mov.w	r1, #0
 8007e4c:	0259      	lsls	r1, r3, #9
 8007e4e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007e52:	0250      	lsls	r0, r2, #9
 8007e54:	4602      	mov	r2, r0
 8007e56:	460b      	mov	r3, r1
 8007e58:	4610      	mov	r0, r2
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	461a      	mov	r2, r3
 8007e60:	f04f 0300 	mov.w	r3, #0
 8007e64:	f7f8 fdfa 	bl	8000a5c <__aeabi_uldivmod>
 8007e68:	4602      	mov	r2, r0
 8007e6a:	460b      	mov	r3, r1
 8007e6c:	4613      	mov	r3, r2
 8007e6e:	60fb      	str	r3, [r7, #12]
 8007e70:	e04a      	b.n	8007f08 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e72:	4b31      	ldr	r3, [pc, #196]	; (8007f38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	099b      	lsrs	r3, r3, #6
 8007e78:	461a      	mov	r2, r3
 8007e7a:	f04f 0300 	mov.w	r3, #0
 8007e7e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007e82:	f04f 0100 	mov.w	r1, #0
 8007e86:	ea02 0400 	and.w	r4, r2, r0
 8007e8a:	ea03 0501 	and.w	r5, r3, r1
 8007e8e:	4620      	mov	r0, r4
 8007e90:	4629      	mov	r1, r5
 8007e92:	f04f 0200 	mov.w	r2, #0
 8007e96:	f04f 0300 	mov.w	r3, #0
 8007e9a:	014b      	lsls	r3, r1, #5
 8007e9c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007ea0:	0142      	lsls	r2, r0, #5
 8007ea2:	4610      	mov	r0, r2
 8007ea4:	4619      	mov	r1, r3
 8007ea6:	1b00      	subs	r0, r0, r4
 8007ea8:	eb61 0105 	sbc.w	r1, r1, r5
 8007eac:	f04f 0200 	mov.w	r2, #0
 8007eb0:	f04f 0300 	mov.w	r3, #0
 8007eb4:	018b      	lsls	r3, r1, #6
 8007eb6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007eba:	0182      	lsls	r2, r0, #6
 8007ebc:	1a12      	subs	r2, r2, r0
 8007ebe:	eb63 0301 	sbc.w	r3, r3, r1
 8007ec2:	f04f 0000 	mov.w	r0, #0
 8007ec6:	f04f 0100 	mov.w	r1, #0
 8007eca:	00d9      	lsls	r1, r3, #3
 8007ecc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007ed0:	00d0      	lsls	r0, r2, #3
 8007ed2:	4602      	mov	r2, r0
 8007ed4:	460b      	mov	r3, r1
 8007ed6:	1912      	adds	r2, r2, r4
 8007ed8:	eb45 0303 	adc.w	r3, r5, r3
 8007edc:	f04f 0000 	mov.w	r0, #0
 8007ee0:	f04f 0100 	mov.w	r1, #0
 8007ee4:	0299      	lsls	r1, r3, #10
 8007ee6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007eea:	0290      	lsls	r0, r2, #10
 8007eec:	4602      	mov	r2, r0
 8007eee:	460b      	mov	r3, r1
 8007ef0:	4610      	mov	r0, r2
 8007ef2:	4619      	mov	r1, r3
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	f04f 0300 	mov.w	r3, #0
 8007efc:	f7f8 fdae 	bl	8000a5c <__aeabi_uldivmod>
 8007f00:	4602      	mov	r2, r0
 8007f02:	460b      	mov	r3, r1
 8007f04:	4613      	mov	r3, r2
 8007f06:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007f08:	4b0b      	ldr	r3, [pc, #44]	; (8007f38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	0c1b      	lsrs	r3, r3, #16
 8007f0e:	f003 0303 	and.w	r3, r3, #3
 8007f12:	3301      	adds	r3, #1
 8007f14:	005b      	lsls	r3, r3, #1
 8007f16:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007f18:	68fa      	ldr	r2, [r7, #12]
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f20:	60bb      	str	r3, [r7, #8]
      break;
 8007f22:	e002      	b.n	8007f2a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007f24:	4b05      	ldr	r3, [pc, #20]	; (8007f3c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007f26:	60bb      	str	r3, [r7, #8]
      break;
 8007f28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007f2a:	68bb      	ldr	r3, [r7, #8]
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3710      	adds	r7, #16
 8007f30:	46bd      	mov	sp, r7
 8007f32:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007f36:	bf00      	nop
 8007f38:	40023800 	.word	0x40023800
 8007f3c:	00f42400 	.word	0x00f42400
 8007f40:	007a1200 	.word	0x007a1200

08007f44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007f44:	b480      	push	{r7}
 8007f46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007f48:	4b03      	ldr	r3, [pc, #12]	; (8007f58 <HAL_RCC_GetHCLKFreq+0x14>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f54:	4770      	bx	lr
 8007f56:	bf00      	nop
 8007f58:	200002a4 	.word	0x200002a4

08007f5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007f60:	f7ff fff0 	bl	8007f44 <HAL_RCC_GetHCLKFreq>
 8007f64:	4602      	mov	r2, r0
 8007f66:	4b05      	ldr	r3, [pc, #20]	; (8007f7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	0a9b      	lsrs	r3, r3, #10
 8007f6c:	f003 0307 	and.w	r3, r3, #7
 8007f70:	4903      	ldr	r1, [pc, #12]	; (8007f80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007f72:	5ccb      	ldrb	r3, [r1, r3]
 8007f74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	bd80      	pop	{r7, pc}
 8007f7c:	40023800 	.word	0x40023800
 8007f80:	0800da38 	.word	0x0800da38

08007f84 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b086      	sub	sp, #24
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007f90:	2300      	movs	r3, #0
 8007f92:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f003 0301 	and.w	r3, r3, #1
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d105      	bne.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d035      	beq.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007fac:	4b62      	ldr	r3, [pc, #392]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007fae:	2200      	movs	r2, #0
 8007fb0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007fb2:	f7fb f981 	bl	80032b8 <HAL_GetTick>
 8007fb6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007fb8:	e008      	b.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007fba:	f7fb f97d 	bl	80032b8 <HAL_GetTick>
 8007fbe:	4602      	mov	r2, r0
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	1ad3      	subs	r3, r2, r3
 8007fc4:	2b02      	cmp	r3, #2
 8007fc6:	d901      	bls.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007fc8:	2303      	movs	r3, #3
 8007fca:	e0b0      	b.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007fcc:	4b5b      	ldr	r3, [pc, #364]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d1f0      	bne.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	019a      	lsls	r2, r3, #6
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	689b      	ldr	r3, [r3, #8]
 8007fe2:	071b      	lsls	r3, r3, #28
 8007fe4:	4955      	ldr	r1, [pc, #340]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007fec:	4b52      	ldr	r3, [pc, #328]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007fee:	2201      	movs	r2, #1
 8007ff0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007ff2:	f7fb f961 	bl	80032b8 <HAL_GetTick>
 8007ff6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007ff8:	e008      	b.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007ffa:	f7fb f95d 	bl	80032b8 <HAL_GetTick>
 8007ffe:	4602      	mov	r2, r0
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	1ad3      	subs	r3, r2, r3
 8008004:	2b02      	cmp	r3, #2
 8008006:	d901      	bls.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008008:	2303      	movs	r3, #3
 800800a:	e090      	b.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800800c:	4b4b      	ldr	r3, [pc, #300]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008014:	2b00      	cmp	r3, #0
 8008016:	d0f0      	beq.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f003 0302 	and.w	r3, r3, #2
 8008020:	2b00      	cmp	r3, #0
 8008022:	f000 8083 	beq.w	800812c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008026:	2300      	movs	r3, #0
 8008028:	60fb      	str	r3, [r7, #12]
 800802a:	4b44      	ldr	r3, [pc, #272]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800802c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800802e:	4a43      	ldr	r2, [pc, #268]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008034:	6413      	str	r3, [r2, #64]	; 0x40
 8008036:	4b41      	ldr	r3, [pc, #260]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800803a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800803e:	60fb      	str	r3, [r7, #12]
 8008040:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008042:	4b3f      	ldr	r3, [pc, #252]	; (8008140 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a3e      	ldr	r2, [pc, #248]	; (8008140 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008048:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800804c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800804e:	f7fb f933 	bl	80032b8 <HAL_GetTick>
 8008052:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008054:	e008      	b.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008056:	f7fb f92f 	bl	80032b8 <HAL_GetTick>
 800805a:	4602      	mov	r2, r0
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	1ad3      	subs	r3, r2, r3
 8008060:	2b02      	cmp	r3, #2
 8008062:	d901      	bls.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8008064:	2303      	movs	r3, #3
 8008066:	e062      	b.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008068:	4b35      	ldr	r3, [pc, #212]	; (8008140 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008070:	2b00      	cmp	r3, #0
 8008072:	d0f0      	beq.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008074:	4b31      	ldr	r3, [pc, #196]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008078:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800807c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d02f      	beq.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	68db      	ldr	r3, [r3, #12]
 8008088:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800808c:	693a      	ldr	r2, [r7, #16]
 800808e:	429a      	cmp	r2, r3
 8008090:	d028      	beq.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008092:	4b2a      	ldr	r3, [pc, #168]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008096:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800809a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800809c:	4b29      	ldr	r3, [pc, #164]	; (8008144 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800809e:	2201      	movs	r2, #1
 80080a0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80080a2:	4b28      	ldr	r3, [pc, #160]	; (8008144 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80080a4:	2200      	movs	r2, #0
 80080a6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80080a8:	4a24      	ldr	r2, [pc, #144]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80080ae:	4b23      	ldr	r3, [pc, #140]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80080b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080b2:	f003 0301 	and.w	r3, r3, #1
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	d114      	bne.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80080ba:	f7fb f8fd 	bl	80032b8 <HAL_GetTick>
 80080be:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80080c0:	e00a      	b.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80080c2:	f7fb f8f9 	bl	80032b8 <HAL_GetTick>
 80080c6:	4602      	mov	r2, r0
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	1ad3      	subs	r3, r2, r3
 80080cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d901      	bls.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80080d4:	2303      	movs	r3, #3
 80080d6:	e02a      	b.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80080d8:	4b18      	ldr	r3, [pc, #96]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80080da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080dc:	f003 0302 	and.w	r3, r3, #2
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d0ee      	beq.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	68db      	ldr	r3, [r3, #12]
 80080e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080f0:	d10d      	bne.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80080f2:	4b12      	ldr	r3, [pc, #72]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80080f4:	689b      	ldr	r3, [r3, #8]
 80080f6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	68db      	ldr	r3, [r3, #12]
 80080fe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008102:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008106:	490d      	ldr	r1, [pc, #52]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008108:	4313      	orrs	r3, r2
 800810a:	608b      	str	r3, [r1, #8]
 800810c:	e005      	b.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800810e:	4b0b      	ldr	r3, [pc, #44]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008110:	689b      	ldr	r3, [r3, #8]
 8008112:	4a0a      	ldr	r2, [pc, #40]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008114:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008118:	6093      	str	r3, [r2, #8]
 800811a:	4b08      	ldr	r3, [pc, #32]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800811c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	68db      	ldr	r3, [r3, #12]
 8008122:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008126:	4905      	ldr	r1, [pc, #20]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008128:	4313      	orrs	r3, r2
 800812a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800812c:	2300      	movs	r3, #0
}
 800812e:	4618      	mov	r0, r3
 8008130:	3718      	adds	r7, #24
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}
 8008136:	bf00      	nop
 8008138:	42470068 	.word	0x42470068
 800813c:	40023800 	.word	0x40023800
 8008140:	40007000 	.word	0x40007000
 8008144:	42470e40 	.word	0x42470e40

08008148 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008148:	b480      	push	{r7}
 800814a:	b087      	sub	sp, #28
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8008150:	2300      	movs	r3, #0
 8008152:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8008154:	2300      	movs	r3, #0
 8008156:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8008158:	2300      	movs	r3, #0
 800815a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800815c:	2300      	movs	r3, #0
 800815e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2b01      	cmp	r3, #1
 8008164:	d13e      	bne.n	80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8008166:	4b23      	ldr	r3, [pc, #140]	; (80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800816e:	60fb      	str	r3, [r7, #12]
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d005      	beq.n	8008182 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2b01      	cmp	r3, #1
 800817a:	d12f      	bne.n	80081dc <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800817c:	4b1e      	ldr	r3, [pc, #120]	; (80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800817e:	617b      	str	r3, [r7, #20]
          break;
 8008180:	e02f      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8008182:	4b1c      	ldr	r3, [pc, #112]	; (80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800818a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800818e:	d108      	bne.n	80081a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008190:	4b18      	ldr	r3, [pc, #96]	; (80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008198:	4a18      	ldr	r2, [pc, #96]	; (80081fc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800819a:	fbb2 f3f3 	udiv	r3, r2, r3
 800819e:	613b      	str	r3, [r7, #16]
 80081a0:	e007      	b.n	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80081a2:	4b14      	ldr	r3, [pc, #80]	; (80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081aa:	4a15      	ldr	r2, [pc, #84]	; (8008200 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80081ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80081b0:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80081b2:	4b10      	ldr	r3, [pc, #64]	; (80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80081b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081b8:	099b      	lsrs	r3, r3, #6
 80081ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	fb02 f303 	mul.w	r3, r2, r3
 80081c4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80081c6:	4b0b      	ldr	r3, [pc, #44]	; (80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80081c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081cc:	0f1b      	lsrs	r3, r3, #28
 80081ce:	f003 0307 	and.w	r3, r3, #7
 80081d2:	68ba      	ldr	r2, [r7, #8]
 80081d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80081d8:	617b      	str	r3, [r7, #20]
          break;
 80081da:	e002      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80081dc:	2300      	movs	r3, #0
 80081de:	617b      	str	r3, [r7, #20]
          break;
 80081e0:	bf00      	nop
        }
      }
      break;
 80081e2:	bf00      	nop
    }
  }
  return frequency;
 80081e4:	697b      	ldr	r3, [r7, #20]
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	371c      	adds	r7, #28
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr
 80081f2:	bf00      	nop
 80081f4:	40023800 	.word	0x40023800
 80081f8:	00bb8000 	.word	0x00bb8000
 80081fc:	007a1200 	.word	0x007a1200
 8008200:	00f42400 	.word	0x00f42400

08008204 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b082      	sub	sp, #8
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d101      	bne.n	8008216 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008212:	2301      	movs	r3, #1
 8008214:	e07b      	b.n	800830e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800821a:	2b00      	cmp	r3, #0
 800821c:	d108      	bne.n	8008230 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008226:	d009      	beq.n	800823c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2200      	movs	r2, #0
 800822c:	61da      	str	r2, [r3, #28]
 800822e:	e005      	b.n	800823c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2200      	movs	r2, #0
 800823a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008248:	b2db      	uxtb	r3, r3
 800824a:	2b00      	cmp	r3, #0
 800824c:	d106      	bne.n	800825c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2200      	movs	r2, #0
 8008252:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f7fa feb2 	bl	8002fc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2202      	movs	r2, #2
 8008260:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	681a      	ldr	r2, [r3, #0]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008272:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	689b      	ldr	r3, [r3, #8]
 8008280:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008284:	431a      	orrs	r2, r3
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	68db      	ldr	r3, [r3, #12]
 800828a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800828e:	431a      	orrs	r2, r3
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	691b      	ldr	r3, [r3, #16]
 8008294:	f003 0302 	and.w	r3, r3, #2
 8008298:	431a      	orrs	r2, r3
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	695b      	ldr	r3, [r3, #20]
 800829e:	f003 0301 	and.w	r3, r3, #1
 80082a2:	431a      	orrs	r2, r3
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	699b      	ldr	r3, [r3, #24]
 80082a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80082ac:	431a      	orrs	r2, r3
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	69db      	ldr	r3, [r3, #28]
 80082b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80082b6:	431a      	orrs	r2, r3
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6a1b      	ldr	r3, [r3, #32]
 80082bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082c0:	ea42 0103 	orr.w	r1, r2, r3
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082c8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	430a      	orrs	r2, r1
 80082d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	699b      	ldr	r3, [r3, #24]
 80082d8:	0c1b      	lsrs	r3, r3, #16
 80082da:	f003 0104 	and.w	r1, r3, #4
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e2:	f003 0210 	and.w	r2, r3, #16
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	430a      	orrs	r2, r1
 80082ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	69da      	ldr	r2, [r3, #28]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80082fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2200      	movs	r2, #0
 8008302:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2201      	movs	r2, #1
 8008308:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800830c:	2300      	movs	r3, #0
}
 800830e:	4618      	mov	r0, r3
 8008310:	3708      	adds	r7, #8
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}

08008316 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008316:	b580      	push	{r7, lr}
 8008318:	b088      	sub	sp, #32
 800831a:	af00      	add	r7, sp, #0
 800831c:	60f8      	str	r0, [r7, #12]
 800831e:	60b9      	str	r1, [r7, #8]
 8008320:	603b      	str	r3, [r7, #0]
 8008322:	4613      	mov	r3, r2
 8008324:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008326:	2300      	movs	r3, #0
 8008328:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008330:	2b01      	cmp	r3, #1
 8008332:	d101      	bne.n	8008338 <HAL_SPI_Transmit+0x22>
 8008334:	2302      	movs	r3, #2
 8008336:	e126      	b.n	8008586 <HAL_SPI_Transmit+0x270>
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2201      	movs	r2, #1
 800833c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008340:	f7fa ffba 	bl	80032b8 <HAL_GetTick>
 8008344:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008346:	88fb      	ldrh	r3, [r7, #6]
 8008348:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008350:	b2db      	uxtb	r3, r3
 8008352:	2b01      	cmp	r3, #1
 8008354:	d002      	beq.n	800835c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008356:	2302      	movs	r3, #2
 8008358:	77fb      	strb	r3, [r7, #31]
    goto error;
 800835a:	e10b      	b.n	8008574 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d002      	beq.n	8008368 <HAL_SPI_Transmit+0x52>
 8008362:	88fb      	ldrh	r3, [r7, #6]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d102      	bne.n	800836e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008368:	2301      	movs	r3, #1
 800836a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800836c:	e102      	b.n	8008574 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2203      	movs	r2, #3
 8008372:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2200      	movs	r2, #0
 800837a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	68ba      	ldr	r2, [r7, #8]
 8008380:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	88fa      	ldrh	r2, [r7, #6]
 8008386:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	88fa      	ldrh	r2, [r7, #6]
 800838c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2200      	movs	r2, #0
 8008392:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2200      	movs	r2, #0
 8008398:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2200      	movs	r2, #0
 800839e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2200      	movs	r2, #0
 80083a4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2200      	movs	r2, #0
 80083aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	689b      	ldr	r3, [r3, #8]
 80083b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083b4:	d10f      	bne.n	80083d6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	681a      	ldr	r2, [r3, #0]
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80083c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	681a      	ldr	r2, [r3, #0]
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80083d4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083e0:	2b40      	cmp	r3, #64	; 0x40
 80083e2:	d007      	beq.n	80083f4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	681a      	ldr	r2, [r3, #0]
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80083f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	68db      	ldr	r3, [r3, #12]
 80083f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083fc:	d14b      	bne.n	8008496 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d002      	beq.n	800840c <HAL_SPI_Transmit+0xf6>
 8008406:	8afb      	ldrh	r3, [r7, #22]
 8008408:	2b01      	cmp	r3, #1
 800840a:	d13e      	bne.n	800848a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008410:	881a      	ldrh	r2, [r3, #0]
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800841c:	1c9a      	adds	r2, r3, #2
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008426:	b29b      	uxth	r3, r3
 8008428:	3b01      	subs	r3, #1
 800842a:	b29a      	uxth	r2, r3
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008430:	e02b      	b.n	800848a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	689b      	ldr	r3, [r3, #8]
 8008438:	f003 0302 	and.w	r3, r3, #2
 800843c:	2b02      	cmp	r3, #2
 800843e:	d112      	bne.n	8008466 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008444:	881a      	ldrh	r2, [r3, #0]
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008450:	1c9a      	adds	r2, r3, #2
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800845a:	b29b      	uxth	r3, r3
 800845c:	3b01      	subs	r3, #1
 800845e:	b29a      	uxth	r2, r3
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	86da      	strh	r2, [r3, #54]	; 0x36
 8008464:	e011      	b.n	800848a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008466:	f7fa ff27 	bl	80032b8 <HAL_GetTick>
 800846a:	4602      	mov	r2, r0
 800846c:	69bb      	ldr	r3, [r7, #24]
 800846e:	1ad3      	subs	r3, r2, r3
 8008470:	683a      	ldr	r2, [r7, #0]
 8008472:	429a      	cmp	r2, r3
 8008474:	d803      	bhi.n	800847e <HAL_SPI_Transmit+0x168>
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800847c:	d102      	bne.n	8008484 <HAL_SPI_Transmit+0x16e>
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d102      	bne.n	800848a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008484:	2303      	movs	r3, #3
 8008486:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008488:	e074      	b.n	8008574 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800848e:	b29b      	uxth	r3, r3
 8008490:	2b00      	cmp	r3, #0
 8008492:	d1ce      	bne.n	8008432 <HAL_SPI_Transmit+0x11c>
 8008494:	e04c      	b.n	8008530 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d002      	beq.n	80084a4 <HAL_SPI_Transmit+0x18e>
 800849e:	8afb      	ldrh	r3, [r7, #22]
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d140      	bne.n	8008526 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	330c      	adds	r3, #12
 80084ae:	7812      	ldrb	r2, [r2, #0]
 80084b0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084b6:	1c5a      	adds	r2, r3, #1
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084c0:	b29b      	uxth	r3, r3
 80084c2:	3b01      	subs	r3, #1
 80084c4:	b29a      	uxth	r2, r3
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80084ca:	e02c      	b.n	8008526 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	f003 0302 	and.w	r3, r3, #2
 80084d6:	2b02      	cmp	r3, #2
 80084d8:	d113      	bne.n	8008502 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	330c      	adds	r3, #12
 80084e4:	7812      	ldrb	r2, [r2, #0]
 80084e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ec:	1c5a      	adds	r2, r3, #1
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	3b01      	subs	r3, #1
 80084fa:	b29a      	uxth	r2, r3
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	86da      	strh	r2, [r3, #54]	; 0x36
 8008500:	e011      	b.n	8008526 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008502:	f7fa fed9 	bl	80032b8 <HAL_GetTick>
 8008506:	4602      	mov	r2, r0
 8008508:	69bb      	ldr	r3, [r7, #24]
 800850a:	1ad3      	subs	r3, r2, r3
 800850c:	683a      	ldr	r2, [r7, #0]
 800850e:	429a      	cmp	r2, r3
 8008510:	d803      	bhi.n	800851a <HAL_SPI_Transmit+0x204>
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008518:	d102      	bne.n	8008520 <HAL_SPI_Transmit+0x20a>
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d102      	bne.n	8008526 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008520:	2303      	movs	r3, #3
 8008522:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008524:	e026      	b.n	8008574 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800852a:	b29b      	uxth	r3, r3
 800852c:	2b00      	cmp	r3, #0
 800852e:	d1cd      	bne.n	80084cc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008530:	69ba      	ldr	r2, [r7, #24]
 8008532:	6839      	ldr	r1, [r7, #0]
 8008534:	68f8      	ldr	r0, [r7, #12]
 8008536:	f000 f8b3 	bl	80086a0 <SPI_EndRxTxTransaction>
 800853a:	4603      	mov	r3, r0
 800853c:	2b00      	cmp	r3, #0
 800853e:	d002      	beq.n	8008546 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2220      	movs	r2, #32
 8008544:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	689b      	ldr	r3, [r3, #8]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d10a      	bne.n	8008564 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800854e:	2300      	movs	r3, #0
 8008550:	613b      	str	r3, [r7, #16]
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	68db      	ldr	r3, [r3, #12]
 8008558:	613b      	str	r3, [r7, #16]
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	689b      	ldr	r3, [r3, #8]
 8008560:	613b      	str	r3, [r7, #16]
 8008562:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008568:	2b00      	cmp	r3, #0
 800856a:	d002      	beq.n	8008572 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800856c:	2301      	movs	r3, #1
 800856e:	77fb      	strb	r3, [r7, #31]
 8008570:	e000      	b.n	8008574 <HAL_SPI_Transmit+0x25e>
  }

error:
 8008572:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2201      	movs	r2, #1
 8008578:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2200      	movs	r2, #0
 8008580:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008584:	7ffb      	ldrb	r3, [r7, #31]
}
 8008586:	4618      	mov	r0, r3
 8008588:	3720      	adds	r7, #32
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}
	...

08008590 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b088      	sub	sp, #32
 8008594:	af00      	add	r7, sp, #0
 8008596:	60f8      	str	r0, [r7, #12]
 8008598:	60b9      	str	r1, [r7, #8]
 800859a:	603b      	str	r3, [r7, #0]
 800859c:	4613      	mov	r3, r2
 800859e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80085a0:	f7fa fe8a 	bl	80032b8 <HAL_GetTick>
 80085a4:	4602      	mov	r2, r0
 80085a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a8:	1a9b      	subs	r3, r3, r2
 80085aa:	683a      	ldr	r2, [r7, #0]
 80085ac:	4413      	add	r3, r2
 80085ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80085b0:	f7fa fe82 	bl	80032b8 <HAL_GetTick>
 80085b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80085b6:	4b39      	ldr	r3, [pc, #228]	; (800869c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	015b      	lsls	r3, r3, #5
 80085bc:	0d1b      	lsrs	r3, r3, #20
 80085be:	69fa      	ldr	r2, [r7, #28]
 80085c0:	fb02 f303 	mul.w	r3, r2, r3
 80085c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80085c6:	e054      	b.n	8008672 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085ce:	d050      	beq.n	8008672 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80085d0:	f7fa fe72 	bl	80032b8 <HAL_GetTick>
 80085d4:	4602      	mov	r2, r0
 80085d6:	69bb      	ldr	r3, [r7, #24]
 80085d8:	1ad3      	subs	r3, r2, r3
 80085da:	69fa      	ldr	r2, [r7, #28]
 80085dc:	429a      	cmp	r2, r3
 80085de:	d902      	bls.n	80085e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80085e0:	69fb      	ldr	r3, [r7, #28]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d13d      	bne.n	8008662 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	685a      	ldr	r2, [r3, #4]
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80085f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	685b      	ldr	r3, [r3, #4]
 80085fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80085fe:	d111      	bne.n	8008624 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	689b      	ldr	r3, [r3, #8]
 8008604:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008608:	d004      	beq.n	8008614 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	689b      	ldr	r3, [r3, #8]
 800860e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008612:	d107      	bne.n	8008624 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	681a      	ldr	r2, [r3, #0]
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008622:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008628:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800862c:	d10f      	bne.n	800864e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	681a      	ldr	r2, [r3, #0]
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800863c:	601a      	str	r2, [r3, #0]
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	681a      	ldr	r2, [r3, #0]
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800864c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2201      	movs	r2, #1
 8008652:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2200      	movs	r2, #0
 800865a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800865e:	2303      	movs	r3, #3
 8008660:	e017      	b.n	8008692 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d101      	bne.n	800866c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008668:	2300      	movs	r3, #0
 800866a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	3b01      	subs	r3, #1
 8008670:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	689a      	ldr	r2, [r3, #8]
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	4013      	ands	r3, r2
 800867c:	68ba      	ldr	r2, [r7, #8]
 800867e:	429a      	cmp	r2, r3
 8008680:	bf0c      	ite	eq
 8008682:	2301      	moveq	r3, #1
 8008684:	2300      	movne	r3, #0
 8008686:	b2db      	uxtb	r3, r3
 8008688:	461a      	mov	r2, r3
 800868a:	79fb      	ldrb	r3, [r7, #7]
 800868c:	429a      	cmp	r2, r3
 800868e:	d19b      	bne.n	80085c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008690:	2300      	movs	r3, #0
}
 8008692:	4618      	mov	r0, r3
 8008694:	3720      	adds	r7, #32
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}
 800869a:	bf00      	nop
 800869c:	200002a4 	.word	0x200002a4

080086a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b088      	sub	sp, #32
 80086a4:	af02      	add	r7, sp, #8
 80086a6:	60f8      	str	r0, [r7, #12]
 80086a8:	60b9      	str	r1, [r7, #8]
 80086aa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80086ac:	4b1b      	ldr	r3, [pc, #108]	; (800871c <SPI_EndRxTxTransaction+0x7c>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4a1b      	ldr	r2, [pc, #108]	; (8008720 <SPI_EndRxTxTransaction+0x80>)
 80086b2:	fba2 2303 	umull	r2, r3, r2, r3
 80086b6:	0d5b      	lsrs	r3, r3, #21
 80086b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80086bc:	fb02 f303 	mul.w	r3, r2, r3
 80086c0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	685b      	ldr	r3, [r3, #4]
 80086c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80086ca:	d112      	bne.n	80086f2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	9300      	str	r3, [sp, #0]
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	2200      	movs	r2, #0
 80086d4:	2180      	movs	r1, #128	; 0x80
 80086d6:	68f8      	ldr	r0, [r7, #12]
 80086d8:	f7ff ff5a 	bl	8008590 <SPI_WaitFlagStateUntilTimeout>
 80086dc:	4603      	mov	r3, r0
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d016      	beq.n	8008710 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086e6:	f043 0220 	orr.w	r2, r3, #32
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80086ee:	2303      	movs	r3, #3
 80086f0:	e00f      	b.n	8008712 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d00a      	beq.n	800870e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	3b01      	subs	r3, #1
 80086fc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	689b      	ldr	r3, [r3, #8]
 8008704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008708:	2b80      	cmp	r3, #128	; 0x80
 800870a:	d0f2      	beq.n	80086f2 <SPI_EndRxTxTransaction+0x52>
 800870c:	e000      	b.n	8008710 <SPI_EndRxTxTransaction+0x70>
        break;
 800870e:	bf00      	nop
  }

  return HAL_OK;
 8008710:	2300      	movs	r3, #0
}
 8008712:	4618      	mov	r0, r3
 8008714:	3718      	adds	r7, #24
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}
 800871a:	bf00      	nop
 800871c:	200002a4 	.word	0x200002a4
 8008720:	165e9f81 	.word	0x165e9f81

08008724 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008724:	b084      	sub	sp, #16
 8008726:	b580      	push	{r7, lr}
 8008728:	b084      	sub	sp, #16
 800872a:	af00      	add	r7, sp, #0
 800872c:	6078      	str	r0, [r7, #4]
 800872e:	f107 001c 	add.w	r0, r7, #28
 8008732:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008738:	2b01      	cmp	r3, #1
 800873a:	d122      	bne.n	8008782 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008740:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	68db      	ldr	r3, [r3, #12]
 800874c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008750:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008754:	687a      	ldr	r2, [r7, #4]
 8008756:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	68db      	ldr	r3, [r3, #12]
 800875c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008764:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008766:	2b01      	cmp	r3, #1
 8008768:	d105      	bne.n	8008776 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	68db      	ldr	r3, [r3, #12]
 800876e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 f9a0 	bl	8008abc <USB_CoreReset>
 800877c:	4603      	mov	r3, r0
 800877e:	73fb      	strb	r3, [r7, #15]
 8008780:	e01a      	b.n	80087b8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	68db      	ldr	r3, [r3, #12]
 8008786:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f000 f994 	bl	8008abc <USB_CoreReset>
 8008794:	4603      	mov	r3, r0
 8008796:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008798:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800879a:	2b00      	cmp	r3, #0
 800879c:	d106      	bne.n	80087ac <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	639a      	str	r2, [r3, #56]	; 0x38
 80087aa:	e005      	b.n	80087b8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80087b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ba:	2b01      	cmp	r3, #1
 80087bc:	d10b      	bne.n	80087d6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	689b      	ldr	r3, [r3, #8]
 80087c2:	f043 0206 	orr.w	r2, r3, #6
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	689b      	ldr	r3, [r3, #8]
 80087ce:	f043 0220 	orr.w	r2, r3, #32
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80087d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80087d8:	4618      	mov	r0, r3
 80087da:	3710      	adds	r7, #16
 80087dc:	46bd      	mov	sp, r7
 80087de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80087e2:	b004      	add	sp, #16
 80087e4:	4770      	bx	lr

080087e6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80087e6:	b480      	push	{r7}
 80087e8:	b083      	sub	sp, #12
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	689b      	ldr	r3, [r3, #8]
 80087f2:	f043 0201 	orr.w	r2, r3, #1
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80087fa:	2300      	movs	r3, #0
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	370c      	adds	r7, #12
 8008800:	46bd      	mov	sp, r7
 8008802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008806:	4770      	bx	lr

08008808 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008808:	b480      	push	{r7}
 800880a:	b083      	sub	sp, #12
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	689b      	ldr	r3, [r3, #8]
 8008814:	f023 0201 	bic.w	r2, r3, #1
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800881c:	2300      	movs	r3, #0
}
 800881e:	4618      	mov	r0, r3
 8008820:	370c      	adds	r7, #12
 8008822:	46bd      	mov	sp, r7
 8008824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008828:	4770      	bx	lr

0800882a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800882a:	b580      	push	{r7, lr}
 800882c:	b084      	sub	sp, #16
 800882e:	af00      	add	r7, sp, #0
 8008830:	6078      	str	r0, [r7, #4]
 8008832:	460b      	mov	r3, r1
 8008834:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008836:	2300      	movs	r3, #0
 8008838:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	68db      	ldr	r3, [r3, #12]
 800883e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008846:	78fb      	ldrb	r3, [r7, #3]
 8008848:	2b01      	cmp	r3, #1
 800884a:	d115      	bne.n	8008878 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	68db      	ldr	r3, [r3, #12]
 8008850:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008858:	2001      	movs	r0, #1
 800885a:	f7fa fd39 	bl	80032d0 <HAL_Delay>
      ms++;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	3301      	adds	r3, #1
 8008862:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f000 f91a 	bl	8008a9e <USB_GetMode>
 800886a:	4603      	mov	r3, r0
 800886c:	2b01      	cmp	r3, #1
 800886e:	d01e      	beq.n	80088ae <USB_SetCurrentMode+0x84>
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2b31      	cmp	r3, #49	; 0x31
 8008874:	d9f0      	bls.n	8008858 <USB_SetCurrentMode+0x2e>
 8008876:	e01a      	b.n	80088ae <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008878:	78fb      	ldrb	r3, [r7, #3]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d115      	bne.n	80088aa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	68db      	ldr	r3, [r3, #12]
 8008882:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800888a:	2001      	movs	r0, #1
 800888c:	f7fa fd20 	bl	80032d0 <HAL_Delay>
      ms++;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	3301      	adds	r3, #1
 8008894:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f000 f901 	bl	8008a9e <USB_GetMode>
 800889c:	4603      	mov	r3, r0
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d005      	beq.n	80088ae <USB_SetCurrentMode+0x84>
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2b31      	cmp	r3, #49	; 0x31
 80088a6:	d9f0      	bls.n	800888a <USB_SetCurrentMode+0x60>
 80088a8:	e001      	b.n	80088ae <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80088aa:	2301      	movs	r3, #1
 80088ac:	e005      	b.n	80088ba <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2b32      	cmp	r3, #50	; 0x32
 80088b2:	d101      	bne.n	80088b8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80088b4:	2301      	movs	r3, #1
 80088b6:	e000      	b.n	80088ba <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80088b8:	2300      	movs	r3, #0
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3710      	adds	r7, #16
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
	...

080088c4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b085      	sub	sp, #20
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
 80088cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80088ce:	2300      	movs	r3, #0
 80088d0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	019b      	lsls	r3, r3, #6
 80088d6:	f043 0220 	orr.w	r2, r3, #32
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	3301      	adds	r3, #1
 80088e2:	60fb      	str	r3, [r7, #12]
 80088e4:	4a08      	ldr	r2, [pc, #32]	; (8008908 <USB_FlushTxFifo+0x44>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d901      	bls.n	80088ee <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80088ea:	2303      	movs	r3, #3
 80088ec:	e006      	b.n	80088fc <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	691b      	ldr	r3, [r3, #16]
 80088f2:	f003 0320 	and.w	r3, r3, #32
 80088f6:	2b20      	cmp	r3, #32
 80088f8:	d0f1      	beq.n	80088de <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80088fa:	2300      	movs	r3, #0
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3714      	adds	r7, #20
 8008900:	46bd      	mov	sp, r7
 8008902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008906:	4770      	bx	lr
 8008908:	00030d40 	.word	0x00030d40

0800890c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800890c:	b480      	push	{r7}
 800890e:	b085      	sub	sp, #20
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008914:	2300      	movs	r3, #0
 8008916:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2210      	movs	r2, #16
 800891c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	3301      	adds	r3, #1
 8008922:	60fb      	str	r3, [r7, #12]
 8008924:	4a08      	ldr	r2, [pc, #32]	; (8008948 <USB_FlushRxFifo+0x3c>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d901      	bls.n	800892e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800892a:	2303      	movs	r3, #3
 800892c:	e006      	b.n	800893c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	691b      	ldr	r3, [r3, #16]
 8008932:	f003 0310 	and.w	r3, r3, #16
 8008936:	2b10      	cmp	r3, #16
 8008938:	d0f1      	beq.n	800891e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800893a:	2300      	movs	r3, #0
}
 800893c:	4618      	mov	r0, r3
 800893e:	3714      	adds	r7, #20
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr
 8008948:	00030d40 	.word	0x00030d40

0800894c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800894c:	b480      	push	{r7}
 800894e:	b089      	sub	sp, #36	; 0x24
 8008950:	af00      	add	r7, sp, #0
 8008952:	60f8      	str	r0, [r7, #12]
 8008954:	60b9      	str	r1, [r7, #8]
 8008956:	4611      	mov	r1, r2
 8008958:	461a      	mov	r2, r3
 800895a:	460b      	mov	r3, r1
 800895c:	71fb      	strb	r3, [r7, #7]
 800895e:	4613      	mov	r3, r2
 8008960:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800896a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800896e:	2b00      	cmp	r3, #0
 8008970:	d123      	bne.n	80089ba <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008972:	88bb      	ldrh	r3, [r7, #4]
 8008974:	3303      	adds	r3, #3
 8008976:	089b      	lsrs	r3, r3, #2
 8008978:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800897a:	2300      	movs	r3, #0
 800897c:	61bb      	str	r3, [r7, #24]
 800897e:	e018      	b.n	80089b2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008980:	79fb      	ldrb	r3, [r7, #7]
 8008982:	031a      	lsls	r2, r3, #12
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	4413      	add	r3, r2
 8008988:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800898c:	461a      	mov	r2, r3
 800898e:	69fb      	ldr	r3, [r7, #28]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008994:	69fb      	ldr	r3, [r7, #28]
 8008996:	3301      	adds	r3, #1
 8008998:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800899a:	69fb      	ldr	r3, [r7, #28]
 800899c:	3301      	adds	r3, #1
 800899e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80089a0:	69fb      	ldr	r3, [r7, #28]
 80089a2:	3301      	adds	r3, #1
 80089a4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80089a6:	69fb      	ldr	r3, [r7, #28]
 80089a8:	3301      	adds	r3, #1
 80089aa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80089ac:	69bb      	ldr	r3, [r7, #24]
 80089ae:	3301      	adds	r3, #1
 80089b0:	61bb      	str	r3, [r7, #24]
 80089b2:	69ba      	ldr	r2, [r7, #24]
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	429a      	cmp	r2, r3
 80089b8:	d3e2      	bcc.n	8008980 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80089ba:	2300      	movs	r3, #0
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3724      	adds	r7, #36	; 0x24
 80089c0:	46bd      	mov	sp, r7
 80089c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c6:	4770      	bx	lr

080089c8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b08b      	sub	sp, #44	; 0x2c
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	60f8      	str	r0, [r7, #12]
 80089d0:	60b9      	str	r1, [r7, #8]
 80089d2:	4613      	mov	r3, r2
 80089d4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80089de:	88fb      	ldrh	r3, [r7, #6]
 80089e0:	089b      	lsrs	r3, r3, #2
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80089e6:	88fb      	ldrh	r3, [r7, #6]
 80089e8:	f003 0303 	and.w	r3, r3, #3
 80089ec:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80089ee:	2300      	movs	r3, #0
 80089f0:	623b      	str	r3, [r7, #32]
 80089f2:	e014      	b.n	8008a1e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80089f4:	69bb      	ldr	r3, [r7, #24]
 80089f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089fa:	681a      	ldr	r2, [r3, #0]
 80089fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089fe:	601a      	str	r2, [r3, #0]
    pDest++;
 8008a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a02:	3301      	adds	r3, #1
 8008a04:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a08:	3301      	adds	r3, #1
 8008a0a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a0e:	3301      	adds	r3, #1
 8008a10:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a14:	3301      	adds	r3, #1
 8008a16:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008a18:	6a3b      	ldr	r3, [r7, #32]
 8008a1a:	3301      	adds	r3, #1
 8008a1c:	623b      	str	r3, [r7, #32]
 8008a1e:	6a3a      	ldr	r2, [r7, #32]
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	429a      	cmp	r2, r3
 8008a24:	d3e6      	bcc.n	80089f4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008a26:	8bfb      	ldrh	r3, [r7, #30]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d01e      	beq.n	8008a6a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008a30:	69bb      	ldr	r3, [r7, #24]
 8008a32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a36:	461a      	mov	r2, r3
 8008a38:	f107 0310 	add.w	r3, r7, #16
 8008a3c:	6812      	ldr	r2, [r2, #0]
 8008a3e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008a40:	693a      	ldr	r2, [r7, #16]
 8008a42:	6a3b      	ldr	r3, [r7, #32]
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	00db      	lsls	r3, r3, #3
 8008a48:	fa22 f303 	lsr.w	r3, r2, r3
 8008a4c:	b2da      	uxtb	r2, r3
 8008a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a50:	701a      	strb	r2, [r3, #0]
      i++;
 8008a52:	6a3b      	ldr	r3, [r7, #32]
 8008a54:	3301      	adds	r3, #1
 8008a56:	623b      	str	r3, [r7, #32]
      pDest++;
 8008a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a5a:	3301      	adds	r3, #1
 8008a5c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008a5e:	8bfb      	ldrh	r3, [r7, #30]
 8008a60:	3b01      	subs	r3, #1
 8008a62:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008a64:	8bfb      	ldrh	r3, [r7, #30]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d1ea      	bne.n	8008a40 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	372c      	adds	r7, #44	; 0x2c
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr

08008a78 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b085      	sub	sp, #20
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	695b      	ldr	r3, [r3, #20]
 8008a84:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	699b      	ldr	r3, [r3, #24]
 8008a8a:	68fa      	ldr	r2, [r7, #12]
 8008a8c:	4013      	ands	r3, r2
 8008a8e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008a90:	68fb      	ldr	r3, [r7, #12]
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3714      	adds	r7, #20
 8008a96:	46bd      	mov	sp, r7
 8008a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9c:	4770      	bx	lr

08008a9e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008a9e:	b480      	push	{r7}
 8008aa0:	b083      	sub	sp, #12
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	695b      	ldr	r3, [r3, #20]
 8008aaa:	f003 0301 	and.w	r3, r3, #1
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	370c      	adds	r7, #12
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr
	...

08008abc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b085      	sub	sp, #20
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	3301      	adds	r3, #1
 8008acc:	60fb      	str	r3, [r7, #12]
 8008ace:	4a13      	ldr	r2, [pc, #76]	; (8008b1c <USB_CoreReset+0x60>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d901      	bls.n	8008ad8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8008ad4:	2303      	movs	r3, #3
 8008ad6:	e01a      	b.n	8008b0e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	691b      	ldr	r3, [r3, #16]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	daf3      	bge.n	8008ac8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	691b      	ldr	r3, [r3, #16]
 8008ae8:	f043 0201 	orr.w	r2, r3, #1
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	3301      	adds	r3, #1
 8008af4:	60fb      	str	r3, [r7, #12]
 8008af6:	4a09      	ldr	r2, [pc, #36]	; (8008b1c <USB_CoreReset+0x60>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d901      	bls.n	8008b00 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8008afc:	2303      	movs	r3, #3
 8008afe:	e006      	b.n	8008b0e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	691b      	ldr	r3, [r3, #16]
 8008b04:	f003 0301 	and.w	r3, r3, #1
 8008b08:	2b01      	cmp	r3, #1
 8008b0a:	d0f1      	beq.n	8008af0 <USB_CoreReset+0x34>

  return HAL_OK;
 8008b0c:	2300      	movs	r3, #0
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3714      	adds	r7, #20
 8008b12:	46bd      	mov	sp, r7
 8008b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b18:	4770      	bx	lr
 8008b1a:	bf00      	nop
 8008b1c:	00030d40 	.word	0x00030d40

08008b20 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008b20:	b084      	sub	sp, #16
 8008b22:	b580      	push	{r7, lr}
 8008b24:	b084      	sub	sp, #16
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	6078      	str	r0, [r7, #4]
 8008b2a:	f107 001c 	add.w	r0, r7, #28
 8008b2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008b3c:	461a      	mov	r2, r3
 8008b3e:	2300      	movs	r3, #0
 8008b40:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b46:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b52:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b5e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d018      	beq.n	8008ba4 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b74:	2b01      	cmp	r3, #1
 8008b76:	d10a      	bne.n	8008b8e <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	68ba      	ldr	r2, [r7, #8]
 8008b82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008b86:	f043 0304 	orr.w	r3, r3, #4
 8008b8a:	6013      	str	r3, [r2, #0]
 8008b8c:	e014      	b.n	8008bb8 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	68ba      	ldr	r2, [r7, #8]
 8008b98:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008b9c:	f023 0304 	bic.w	r3, r3, #4
 8008ba0:	6013      	str	r3, [r2, #0]
 8008ba2:	e009      	b.n	8008bb8 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	68ba      	ldr	r2, [r7, #8]
 8008bae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008bb2:	f023 0304 	bic.w	r3, r3, #4
 8008bb6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8008bb8:	2110      	movs	r1, #16
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f7ff fe82 	bl	80088c4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f7ff fea3 	bl	800890c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	60fb      	str	r3, [r7, #12]
 8008bca:	e015      	b.n	8008bf8 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	015a      	lsls	r2, r3, #5
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	4413      	add	r3, r2
 8008bd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bd8:	461a      	mov	r2, r3
 8008bda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008bde:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	015a      	lsls	r2, r3, #5
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	4413      	add	r3, r2
 8008be8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bec:	461a      	mov	r2, r3
 8008bee:	2300      	movs	r3, #0
 8008bf0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	3301      	adds	r3, #1
 8008bf6:	60fb      	str	r3, [r7, #12]
 8008bf8:	6a3b      	ldr	r3, [r7, #32]
 8008bfa:	68fa      	ldr	r2, [r7, #12]
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	d3e5      	bcc.n	8008bcc <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2200      	movs	r2, #0
 8008c04:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c0c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d00b      	beq.n	8008c32 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008c20:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	4a13      	ldr	r2, [pc, #76]	; (8008c74 <USB_HostInit+0x154>)
 8008c26:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	4a13      	ldr	r2, [pc, #76]	; (8008c78 <USB_HostInit+0x158>)
 8008c2c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8008c30:	e009      	b.n	8008c46 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2280      	movs	r2, #128	; 0x80
 8008c36:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	4a10      	ldr	r2, [pc, #64]	; (8008c7c <USB_HostInit+0x15c>)
 8008c3c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	4a0f      	ldr	r2, [pc, #60]	; (8008c80 <USB_HostInit+0x160>)
 8008c42:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d105      	bne.n	8008c58 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	699b      	ldr	r3, [r3, #24]
 8008c50:	f043 0210 	orr.w	r2, r3, #16
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	699a      	ldr	r2, [r3, #24]
 8008c5c:	4b09      	ldr	r3, [pc, #36]	; (8008c84 <USB_HostInit+0x164>)
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	687a      	ldr	r2, [r7, #4]
 8008c62:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8008c64:	2300      	movs	r3, #0
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3710      	adds	r7, #16
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008c70:	b004      	add	sp, #16
 8008c72:	4770      	bx	lr
 8008c74:	01000200 	.word	0x01000200
 8008c78:	00e00300 	.word	0x00e00300
 8008c7c:	00600080 	.word	0x00600080
 8008c80:	004000e0 	.word	0x004000e0
 8008c84:	a3200008 	.word	0xa3200008

08008c88 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b085      	sub	sp, #20
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	460b      	mov	r3, r1
 8008c92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	68fa      	ldr	r2, [r7, #12]
 8008ca2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008ca6:	f023 0303 	bic.w	r3, r3, #3
 8008caa:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008cb2:	681a      	ldr	r2, [r3, #0]
 8008cb4:	78fb      	ldrb	r3, [r7, #3]
 8008cb6:	f003 0303 	and.w	r3, r3, #3
 8008cba:	68f9      	ldr	r1, [r7, #12]
 8008cbc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008cc4:	78fb      	ldrb	r3, [r7, #3]
 8008cc6:	2b01      	cmp	r3, #1
 8008cc8:	d107      	bne.n	8008cda <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008cd0:	461a      	mov	r2, r3
 8008cd2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008cd6:	6053      	str	r3, [r2, #4]
 8008cd8:	e009      	b.n	8008cee <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8008cda:	78fb      	ldrb	r3, [r7, #3]
 8008cdc:	2b02      	cmp	r3, #2
 8008cde:	d106      	bne.n	8008cee <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ce6:	461a      	mov	r2, r3
 8008ce8:	f241 7370 	movw	r3, #6000	; 0x1770
 8008cec:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008cee:	2300      	movs	r3, #0
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3714      	adds	r7, #20
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr

08008cfc <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b084      	sub	sp, #16
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008d08:	2300      	movs	r3, #0
 8008d0a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008d1c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	68fa      	ldr	r2, [r7, #12]
 8008d22:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008d26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d2a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008d2c:	2064      	movs	r0, #100	; 0x64
 8008d2e:	f7fa facf 	bl	80032d0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	68fa      	ldr	r2, [r7, #12]
 8008d36:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008d3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d3e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008d40:	200a      	movs	r0, #10
 8008d42:	f7fa fac5 	bl	80032d0 <HAL_Delay>

  return HAL_OK;
 8008d46:	2300      	movs	r3, #0
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3710      	adds	r7, #16
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}

08008d50 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b085      	sub	sp, #20
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	460b      	mov	r3, r1
 8008d5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008d60:	2300      	movs	r3, #0
 8008d62:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008d74:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d109      	bne.n	8008d94 <USB_DriveVbus+0x44>
 8008d80:	78fb      	ldrb	r3, [r7, #3]
 8008d82:	2b01      	cmp	r3, #1
 8008d84:	d106      	bne.n	8008d94 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	68fa      	ldr	r2, [r7, #12]
 8008d8a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008d8e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008d92:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008d9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d9e:	d109      	bne.n	8008db4 <USB_DriveVbus+0x64>
 8008da0:	78fb      	ldrb	r3, [r7, #3]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d106      	bne.n	8008db4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	68fa      	ldr	r2, [r7, #12]
 8008daa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008dae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008db2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008db4:	2300      	movs	r3, #0
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3714      	adds	r7, #20
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc0:	4770      	bx	lr

08008dc2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008dc2:	b480      	push	{r7}
 8008dc4:	b085      	sub	sp, #20
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	0c5b      	lsrs	r3, r3, #17
 8008de0:	f003 0303 	and.w	r3, r3, #3
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3714      	adds	r7, #20
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr

08008df0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b085      	sub	sp, #20
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e02:	689b      	ldr	r3, [r3, #8]
 8008e04:	b29b      	uxth	r3, r3
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3714      	adds	r7, #20
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e10:	4770      	bx	lr
	...

08008e14 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b088      	sub	sp, #32
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	4608      	mov	r0, r1
 8008e1e:	4611      	mov	r1, r2
 8008e20:	461a      	mov	r2, r3
 8008e22:	4603      	mov	r3, r0
 8008e24:	70fb      	strb	r3, [r7, #3]
 8008e26:	460b      	mov	r3, r1
 8008e28:	70bb      	strb	r3, [r7, #2]
 8008e2a:	4613      	mov	r3, r2
 8008e2c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8008e36:	78fb      	ldrb	r3, [r7, #3]
 8008e38:	015a      	lsls	r2, r3, #5
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	4413      	add	r3, r2
 8008e3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e42:	461a      	mov	r2, r3
 8008e44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008e48:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008e4a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008e4e:	2b03      	cmp	r3, #3
 8008e50:	d87e      	bhi.n	8008f50 <USB_HC_Init+0x13c>
 8008e52:	a201      	add	r2, pc, #4	; (adr r2, 8008e58 <USB_HC_Init+0x44>)
 8008e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e58:	08008e69 	.word	0x08008e69
 8008e5c:	08008f13 	.word	0x08008f13
 8008e60:	08008e69 	.word	0x08008e69
 8008e64:	08008ed5 	.word	0x08008ed5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008e68:	78fb      	ldrb	r3, [r7, #3]
 8008e6a:	015a      	lsls	r2, r3, #5
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	4413      	add	r3, r2
 8008e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e74:	461a      	mov	r2, r3
 8008e76:	f240 439d 	movw	r3, #1181	; 0x49d
 8008e7a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008e7c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	da10      	bge.n	8008ea6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008e84:	78fb      	ldrb	r3, [r7, #3]
 8008e86:	015a      	lsls	r2, r3, #5
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	4413      	add	r3, r2
 8008e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e90:	68db      	ldr	r3, [r3, #12]
 8008e92:	78fa      	ldrb	r2, [r7, #3]
 8008e94:	0151      	lsls	r1, r2, #5
 8008e96:	693a      	ldr	r2, [r7, #16]
 8008e98:	440a      	add	r2, r1
 8008e9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ea2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8008ea4:	e057      	b.n	8008f56 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d051      	beq.n	8008f56 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8008eb2:	78fb      	ldrb	r3, [r7, #3]
 8008eb4:	015a      	lsls	r2, r3, #5
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	4413      	add	r3, r2
 8008eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ebe:	68db      	ldr	r3, [r3, #12]
 8008ec0:	78fa      	ldrb	r2, [r7, #3]
 8008ec2:	0151      	lsls	r1, r2, #5
 8008ec4:	693a      	ldr	r2, [r7, #16]
 8008ec6:	440a      	add	r2, r1
 8008ec8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ecc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008ed0:	60d3      	str	r3, [r2, #12]
      break;
 8008ed2:	e040      	b.n	8008f56 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008ed4:	78fb      	ldrb	r3, [r7, #3]
 8008ed6:	015a      	lsls	r2, r3, #5
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	4413      	add	r3, r2
 8008edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	f240 639d 	movw	r3, #1693	; 0x69d
 8008ee6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008ee8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	da34      	bge.n	8008f5a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008ef0:	78fb      	ldrb	r3, [r7, #3]
 8008ef2:	015a      	lsls	r2, r3, #5
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	4413      	add	r3, r2
 8008ef8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008efc:	68db      	ldr	r3, [r3, #12]
 8008efe:	78fa      	ldrb	r2, [r7, #3]
 8008f00:	0151      	lsls	r1, r2, #5
 8008f02:	693a      	ldr	r2, [r7, #16]
 8008f04:	440a      	add	r2, r1
 8008f06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f0e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008f10:	e023      	b.n	8008f5a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008f12:	78fb      	ldrb	r3, [r7, #3]
 8008f14:	015a      	lsls	r2, r3, #5
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	4413      	add	r3, r2
 8008f1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f1e:	461a      	mov	r2, r3
 8008f20:	f240 2325 	movw	r3, #549	; 0x225
 8008f24:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008f26:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	da17      	bge.n	8008f5e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008f2e:	78fb      	ldrb	r3, [r7, #3]
 8008f30:	015a      	lsls	r2, r3, #5
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	4413      	add	r3, r2
 8008f36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f3a:	68db      	ldr	r3, [r3, #12]
 8008f3c:	78fa      	ldrb	r2, [r7, #3]
 8008f3e:	0151      	lsls	r1, r2, #5
 8008f40:	693a      	ldr	r2, [r7, #16]
 8008f42:	440a      	add	r2, r1
 8008f44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f48:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008f4c:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008f4e:	e006      	b.n	8008f5e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8008f50:	2301      	movs	r3, #1
 8008f52:	77fb      	strb	r3, [r7, #31]
      break;
 8008f54:	e004      	b.n	8008f60 <USB_HC_Init+0x14c>
      break;
 8008f56:	bf00      	nop
 8008f58:	e002      	b.n	8008f60 <USB_HC_Init+0x14c>
      break;
 8008f5a:	bf00      	nop
 8008f5c:	e000      	b.n	8008f60 <USB_HC_Init+0x14c>
      break;
 8008f5e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f66:	699a      	ldr	r2, [r3, #24]
 8008f68:	78fb      	ldrb	r3, [r7, #3]
 8008f6a:	f003 030f 	and.w	r3, r3, #15
 8008f6e:	2101      	movs	r1, #1
 8008f70:	fa01 f303 	lsl.w	r3, r1, r3
 8008f74:	6939      	ldr	r1, [r7, #16]
 8008f76:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	699b      	ldr	r3, [r3, #24]
 8008f82:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008f8a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	da03      	bge.n	8008f9a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008f92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f96:	61bb      	str	r3, [r7, #24]
 8008f98:	e001      	b.n	8008f9e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f7ff ff0f 	bl	8008dc2 <USB_GetHostSpeed>
 8008fa4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008fa6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008faa:	2b02      	cmp	r3, #2
 8008fac:	d106      	bne.n	8008fbc <USB_HC_Init+0x1a8>
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2b02      	cmp	r3, #2
 8008fb2:	d003      	beq.n	8008fbc <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008fb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008fb8:	617b      	str	r3, [r7, #20]
 8008fba:	e001      	b.n	8008fc0 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008fc0:	787b      	ldrb	r3, [r7, #1]
 8008fc2:	059b      	lsls	r3, r3, #22
 8008fc4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008fc8:	78bb      	ldrb	r3, [r7, #2]
 8008fca:	02db      	lsls	r3, r3, #11
 8008fcc:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008fd0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008fd2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008fd6:	049b      	lsls	r3, r3, #18
 8008fd8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008fdc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008fde:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008fe0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008fe4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008fe6:	69bb      	ldr	r3, [r7, #24]
 8008fe8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008fea:	78fb      	ldrb	r3, [r7, #3]
 8008fec:	0159      	lsls	r1, r3, #5
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	440b      	add	r3, r1
 8008ff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ff6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008ffc:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8008ffe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009002:	2b03      	cmp	r3, #3
 8009004:	d10f      	bne.n	8009026 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8009006:	78fb      	ldrb	r3, [r7, #3]
 8009008:	015a      	lsls	r2, r3, #5
 800900a:	693b      	ldr	r3, [r7, #16]
 800900c:	4413      	add	r3, r2
 800900e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	78fa      	ldrb	r2, [r7, #3]
 8009016:	0151      	lsls	r1, r2, #5
 8009018:	693a      	ldr	r2, [r7, #16]
 800901a:	440a      	add	r2, r1
 800901c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009020:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009024:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8009026:	7ffb      	ldrb	r3, [r7, #31]
}
 8009028:	4618      	mov	r0, r3
 800902a:	3720      	adds	r7, #32
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}

08009030 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b08c      	sub	sp, #48	; 0x30
 8009034:	af02      	add	r7, sp, #8
 8009036:	60f8      	str	r0, [r7, #12]
 8009038:	60b9      	str	r1, [r7, #8]
 800903a:	4613      	mov	r3, r2
 800903c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	785b      	ldrb	r3, [r3, #1]
 8009046:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8009048:	f44f 7380 	mov.w	r3, #256	; 0x100
 800904c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009056:	2b00      	cmp	r3, #0
 8009058:	d02d      	beq.n	80090b6 <USB_HC_StartXfer+0x86>
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	791b      	ldrb	r3, [r3, #4]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d129      	bne.n	80090b6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8009062:	79fb      	ldrb	r3, [r7, #7]
 8009064:	2b01      	cmp	r3, #1
 8009066:	d117      	bne.n	8009098 <USB_HC_StartXfer+0x68>
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	79db      	ldrb	r3, [r3, #7]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d003      	beq.n	8009078 <USB_HC_StartXfer+0x48>
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	79db      	ldrb	r3, [r3, #7]
 8009074:	2b02      	cmp	r3, #2
 8009076:	d10f      	bne.n	8009098 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8009078:	69fb      	ldr	r3, [r7, #28]
 800907a:	015a      	lsls	r2, r3, #5
 800907c:	6a3b      	ldr	r3, [r7, #32]
 800907e:	4413      	add	r3, r2
 8009080:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009084:	68db      	ldr	r3, [r3, #12]
 8009086:	69fa      	ldr	r2, [r7, #28]
 8009088:	0151      	lsls	r1, r2, #5
 800908a:	6a3a      	ldr	r2, [r7, #32]
 800908c:	440a      	add	r2, r1
 800908e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009096:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8009098:	79fb      	ldrb	r3, [r7, #7]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d10b      	bne.n	80090b6 <USB_HC_StartXfer+0x86>
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	795b      	ldrb	r3, [r3, #5]
 80090a2:	2b01      	cmp	r3, #1
 80090a4:	d107      	bne.n	80090b6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	785b      	ldrb	r3, [r3, #1]
 80090aa:	4619      	mov	r1, r3
 80090ac:	68f8      	ldr	r0, [r7, #12]
 80090ae:	f000 fa2f 	bl	8009510 <USB_DoPing>
      return HAL_OK;
 80090b2:	2300      	movs	r3, #0
 80090b4:	e0f8      	b.n	80092a8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	695b      	ldr	r3, [r3, #20]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d018      	beq.n	80090f0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	695b      	ldr	r3, [r3, #20]
 80090c2:	68ba      	ldr	r2, [r7, #8]
 80090c4:	8912      	ldrh	r2, [r2, #8]
 80090c6:	4413      	add	r3, r2
 80090c8:	3b01      	subs	r3, #1
 80090ca:	68ba      	ldr	r2, [r7, #8]
 80090cc:	8912      	ldrh	r2, [r2, #8]
 80090ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80090d2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80090d4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80090d6:	8b7b      	ldrh	r3, [r7, #26]
 80090d8:	429a      	cmp	r2, r3
 80090da:	d90b      	bls.n	80090f4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80090dc:	8b7b      	ldrh	r3, [r7, #26]
 80090de:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80090e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80090e2:	68ba      	ldr	r2, [r7, #8]
 80090e4:	8912      	ldrh	r2, [r2, #8]
 80090e6:	fb02 f203 	mul.w	r2, r2, r3
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	611a      	str	r2, [r3, #16]
 80090ee:	e001      	b.n	80090f4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80090f0:	2301      	movs	r3, #1
 80090f2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	78db      	ldrb	r3, [r3, #3]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d007      	beq.n	800910c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80090fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80090fe:	68ba      	ldr	r2, [r7, #8]
 8009100:	8912      	ldrh	r2, [r2, #8]
 8009102:	fb02 f203 	mul.w	r2, r2, r3
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	611a      	str	r2, [r3, #16]
 800910a:	e003      	b.n	8009114 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	695a      	ldr	r2, [r3, #20]
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	691b      	ldr	r3, [r3, #16]
 8009118:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800911c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800911e:	04d9      	lsls	r1, r3, #19
 8009120:	4b63      	ldr	r3, [pc, #396]	; (80092b0 <USB_HC_StartXfer+0x280>)
 8009122:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009124:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	7a9b      	ldrb	r3, [r3, #10]
 800912a:	075b      	lsls	r3, r3, #29
 800912c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009130:	69f9      	ldr	r1, [r7, #28]
 8009132:	0148      	lsls	r0, r1, #5
 8009134:	6a39      	ldr	r1, [r7, #32]
 8009136:	4401      	add	r1, r0
 8009138:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800913c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800913e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8009140:	79fb      	ldrb	r3, [r7, #7]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d009      	beq.n	800915a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	68d9      	ldr	r1, [r3, #12]
 800914a:	69fb      	ldr	r3, [r7, #28]
 800914c:	015a      	lsls	r2, r3, #5
 800914e:	6a3b      	ldr	r3, [r7, #32]
 8009150:	4413      	add	r3, r2
 8009152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009156:	460a      	mov	r2, r1
 8009158:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800915a:	6a3b      	ldr	r3, [r7, #32]
 800915c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009160:	689b      	ldr	r3, [r3, #8]
 8009162:	f003 0301 	and.w	r3, r3, #1
 8009166:	2b00      	cmp	r3, #0
 8009168:	bf0c      	ite	eq
 800916a:	2301      	moveq	r3, #1
 800916c:	2300      	movne	r3, #0
 800916e:	b2db      	uxtb	r3, r3
 8009170:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8009172:	69fb      	ldr	r3, [r7, #28]
 8009174:	015a      	lsls	r2, r3, #5
 8009176:	6a3b      	ldr	r3, [r7, #32]
 8009178:	4413      	add	r3, r2
 800917a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	69fa      	ldr	r2, [r7, #28]
 8009182:	0151      	lsls	r1, r2, #5
 8009184:	6a3a      	ldr	r2, [r7, #32]
 8009186:	440a      	add	r2, r1
 8009188:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800918c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009190:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8009192:	69fb      	ldr	r3, [r7, #28]
 8009194:	015a      	lsls	r2, r3, #5
 8009196:	6a3b      	ldr	r3, [r7, #32]
 8009198:	4413      	add	r3, r2
 800919a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800919e:	681a      	ldr	r2, [r3, #0]
 80091a0:	7e7b      	ldrb	r3, [r7, #25]
 80091a2:	075b      	lsls	r3, r3, #29
 80091a4:	69f9      	ldr	r1, [r7, #28]
 80091a6:	0148      	lsls	r0, r1, #5
 80091a8:	6a39      	ldr	r1, [r7, #32]
 80091aa:	4401      	add	r1, r0
 80091ac:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80091b0:	4313      	orrs	r3, r2
 80091b2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80091b4:	69fb      	ldr	r3, [r7, #28]
 80091b6:	015a      	lsls	r2, r3, #5
 80091b8:	6a3b      	ldr	r3, [r7, #32]
 80091ba:	4413      	add	r3, r2
 80091bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80091ca:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	78db      	ldrb	r3, [r3, #3]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d004      	beq.n	80091de <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091da:	613b      	str	r3, [r7, #16]
 80091dc:	e003      	b.n	80091e6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80091e4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80091e6:	693b      	ldr	r3, [r7, #16]
 80091e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80091ec:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80091ee:	69fb      	ldr	r3, [r7, #28]
 80091f0:	015a      	lsls	r2, r3, #5
 80091f2:	6a3b      	ldr	r3, [r7, #32]
 80091f4:	4413      	add	r3, r2
 80091f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091fa:	461a      	mov	r2, r3
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009200:	79fb      	ldrb	r3, [r7, #7]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d001      	beq.n	800920a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8009206:	2300      	movs	r3, #0
 8009208:	e04e      	b.n	80092a8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	78db      	ldrb	r3, [r3, #3]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d149      	bne.n	80092a6 <USB_HC_StartXfer+0x276>
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	695b      	ldr	r3, [r3, #20]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d045      	beq.n	80092a6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	79db      	ldrb	r3, [r3, #7]
 800921e:	2b03      	cmp	r3, #3
 8009220:	d830      	bhi.n	8009284 <USB_HC_StartXfer+0x254>
 8009222:	a201      	add	r2, pc, #4	; (adr r2, 8009228 <USB_HC_StartXfer+0x1f8>)
 8009224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009228:	08009239 	.word	0x08009239
 800922c:	0800925d 	.word	0x0800925d
 8009230:	08009239 	.word	0x08009239
 8009234:	0800925d 	.word	0x0800925d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	695b      	ldr	r3, [r3, #20]
 800923c:	3303      	adds	r3, #3
 800923e:	089b      	lsrs	r3, r3, #2
 8009240:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8009242:	8afa      	ldrh	r2, [r7, #22]
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009248:	b29b      	uxth	r3, r3
 800924a:	429a      	cmp	r2, r3
 800924c:	d91c      	bls.n	8009288 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	699b      	ldr	r3, [r3, #24]
 8009252:	f043 0220 	orr.w	r2, r3, #32
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	619a      	str	r2, [r3, #24]
        }
        break;
 800925a:	e015      	b.n	8009288 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	695b      	ldr	r3, [r3, #20]
 8009260:	3303      	adds	r3, #3
 8009262:	089b      	lsrs	r3, r3, #2
 8009264:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8009266:	8afa      	ldrh	r2, [r7, #22]
 8009268:	6a3b      	ldr	r3, [r7, #32]
 800926a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800926e:	691b      	ldr	r3, [r3, #16]
 8009270:	b29b      	uxth	r3, r3
 8009272:	429a      	cmp	r2, r3
 8009274:	d90a      	bls.n	800928c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	699b      	ldr	r3, [r3, #24]
 800927a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	619a      	str	r2, [r3, #24]
        }
        break;
 8009282:	e003      	b.n	800928c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8009284:	bf00      	nop
 8009286:	e002      	b.n	800928e <USB_HC_StartXfer+0x25e>
        break;
 8009288:	bf00      	nop
 800928a:	e000      	b.n	800928e <USB_HC_StartXfer+0x25e>
        break;
 800928c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	68d9      	ldr	r1, [r3, #12]
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	785a      	ldrb	r2, [r3, #1]
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	695b      	ldr	r3, [r3, #20]
 800929a:	b29b      	uxth	r3, r3
 800929c:	2000      	movs	r0, #0
 800929e:	9000      	str	r0, [sp, #0]
 80092a0:	68f8      	ldr	r0, [r7, #12]
 80092a2:	f7ff fb53 	bl	800894c <USB_WritePacket>
  }

  return HAL_OK;
 80092a6:	2300      	movs	r3, #0
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	3728      	adds	r7, #40	; 0x28
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}
 80092b0:	1ff80000 	.word	0x1ff80000

080092b4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80092b4:	b480      	push	{r7}
 80092b6:	b085      	sub	sp, #20
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80092c6:	695b      	ldr	r3, [r3, #20]
 80092c8:	b29b      	uxth	r3, r3
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3714      	adds	r7, #20
 80092ce:	46bd      	mov	sp, r7
 80092d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d4:	4770      	bx	lr

080092d6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80092d6:	b480      	push	{r7}
 80092d8:	b089      	sub	sp, #36	; 0x24
 80092da:	af00      	add	r7, sp, #0
 80092dc:	6078      	str	r0, [r7, #4]
 80092de:	460b      	mov	r3, r1
 80092e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80092e6:	78fb      	ldrb	r3, [r7, #3]
 80092e8:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80092ea:	2300      	movs	r3, #0
 80092ec:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	015a      	lsls	r2, r3, #5
 80092f2:	69bb      	ldr	r3, [r7, #24]
 80092f4:	4413      	add	r3, r2
 80092f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	0c9b      	lsrs	r3, r3, #18
 80092fe:	f003 0303 	and.w	r3, r3, #3
 8009302:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	015a      	lsls	r2, r3, #5
 8009308:	69bb      	ldr	r3, [r7, #24]
 800930a:	4413      	add	r3, r2
 800930c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	0fdb      	lsrs	r3, r3, #31
 8009314:	f003 0301 	and.w	r3, r3, #1
 8009318:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	689b      	ldr	r3, [r3, #8]
 800931e:	f003 0320 	and.w	r3, r3, #32
 8009322:	2b20      	cmp	r3, #32
 8009324:	d104      	bne.n	8009330 <USB_HC_Halt+0x5a>
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d101      	bne.n	8009330 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800932c:	2300      	movs	r3, #0
 800932e:	e0e8      	b.n	8009502 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d002      	beq.n	800933c <USB_HC_Halt+0x66>
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	2b02      	cmp	r3, #2
 800933a:	d173      	bne.n	8009424 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	015a      	lsls	r2, r3, #5
 8009340:	69bb      	ldr	r3, [r7, #24]
 8009342:	4413      	add	r3, r2
 8009344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	697a      	ldr	r2, [r7, #20]
 800934c:	0151      	lsls	r1, r2, #5
 800934e:	69ba      	ldr	r2, [r7, #24]
 8009350:	440a      	add	r2, r1
 8009352:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009356:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800935a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	689b      	ldr	r3, [r3, #8]
 8009360:	f003 0320 	and.w	r3, r3, #32
 8009364:	2b00      	cmp	r3, #0
 8009366:	f040 80cb 	bne.w	8009500 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800936e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009372:	2b00      	cmp	r3, #0
 8009374:	d143      	bne.n	80093fe <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	015a      	lsls	r2, r3, #5
 800937a:	69bb      	ldr	r3, [r7, #24]
 800937c:	4413      	add	r3, r2
 800937e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	697a      	ldr	r2, [r7, #20]
 8009386:	0151      	lsls	r1, r2, #5
 8009388:	69ba      	ldr	r2, [r7, #24]
 800938a:	440a      	add	r2, r1
 800938c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009390:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009394:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	015a      	lsls	r2, r3, #5
 800939a:	69bb      	ldr	r3, [r7, #24]
 800939c:	4413      	add	r3, r2
 800939e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	697a      	ldr	r2, [r7, #20]
 80093a6:	0151      	lsls	r1, r2, #5
 80093a8:	69ba      	ldr	r2, [r7, #24]
 80093aa:	440a      	add	r2, r1
 80093ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80093b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80093b4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	015a      	lsls	r2, r3, #5
 80093ba:	69bb      	ldr	r3, [r7, #24]
 80093bc:	4413      	add	r3, r2
 80093be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	697a      	ldr	r2, [r7, #20]
 80093c6:	0151      	lsls	r1, r2, #5
 80093c8:	69ba      	ldr	r2, [r7, #24]
 80093ca:	440a      	add	r2, r1
 80093cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80093d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80093d4:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 80093d6:	69fb      	ldr	r3, [r7, #28]
 80093d8:	3301      	adds	r3, #1
 80093da:	61fb      	str	r3, [r7, #28]
 80093dc:	69fb      	ldr	r3, [r7, #28]
 80093de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80093e2:	d81d      	bhi.n	8009420 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	015a      	lsls	r2, r3, #5
 80093e8:	69bb      	ldr	r3, [r7, #24]
 80093ea:	4413      	add	r3, r2
 80093ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80093f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80093fa:	d0ec      	beq.n	80093d6 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80093fc:	e080      	b.n	8009500 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	015a      	lsls	r2, r3, #5
 8009402:	69bb      	ldr	r3, [r7, #24]
 8009404:	4413      	add	r3, r2
 8009406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	697a      	ldr	r2, [r7, #20]
 800940e:	0151      	lsls	r1, r2, #5
 8009410:	69ba      	ldr	r2, [r7, #24]
 8009412:	440a      	add	r2, r1
 8009414:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009418:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800941c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800941e:	e06f      	b.n	8009500 <USB_HC_Halt+0x22a>
            break;
 8009420:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009422:	e06d      	b.n	8009500 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	015a      	lsls	r2, r3, #5
 8009428:	69bb      	ldr	r3, [r7, #24]
 800942a:	4413      	add	r3, r2
 800942c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	697a      	ldr	r2, [r7, #20]
 8009434:	0151      	lsls	r1, r2, #5
 8009436:	69ba      	ldr	r2, [r7, #24]
 8009438:	440a      	add	r2, r1
 800943a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800943e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009442:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009444:	69bb      	ldr	r3, [r7, #24]
 8009446:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800944a:	691b      	ldr	r3, [r3, #16]
 800944c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009450:	2b00      	cmp	r3, #0
 8009452:	d143      	bne.n	80094dc <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009454:	697b      	ldr	r3, [r7, #20]
 8009456:	015a      	lsls	r2, r3, #5
 8009458:	69bb      	ldr	r3, [r7, #24]
 800945a:	4413      	add	r3, r2
 800945c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	697a      	ldr	r2, [r7, #20]
 8009464:	0151      	lsls	r1, r2, #5
 8009466:	69ba      	ldr	r2, [r7, #24]
 8009468:	440a      	add	r2, r1
 800946a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800946e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009472:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	015a      	lsls	r2, r3, #5
 8009478:	69bb      	ldr	r3, [r7, #24]
 800947a:	4413      	add	r3, r2
 800947c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	697a      	ldr	r2, [r7, #20]
 8009484:	0151      	lsls	r1, r2, #5
 8009486:	69ba      	ldr	r2, [r7, #24]
 8009488:	440a      	add	r2, r1
 800948a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800948e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009492:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	015a      	lsls	r2, r3, #5
 8009498:	69bb      	ldr	r3, [r7, #24]
 800949a:	4413      	add	r3, r2
 800949c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	697a      	ldr	r2, [r7, #20]
 80094a4:	0151      	lsls	r1, r2, #5
 80094a6:	69ba      	ldr	r2, [r7, #24]
 80094a8:	440a      	add	r2, r1
 80094aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80094ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80094b2:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80094b4:	69fb      	ldr	r3, [r7, #28]
 80094b6:	3301      	adds	r3, #1
 80094b8:	61fb      	str	r3, [r7, #28]
 80094ba:	69fb      	ldr	r3, [r7, #28]
 80094bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80094c0:	d81d      	bhi.n	80094fe <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	015a      	lsls	r2, r3, #5
 80094c6:	69bb      	ldr	r3, [r7, #24]
 80094c8:	4413      	add	r3, r2
 80094ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80094d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80094d8:	d0ec      	beq.n	80094b4 <USB_HC_Halt+0x1de>
 80094da:	e011      	b.n	8009500 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	015a      	lsls	r2, r3, #5
 80094e0:	69bb      	ldr	r3, [r7, #24]
 80094e2:	4413      	add	r3, r2
 80094e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	697a      	ldr	r2, [r7, #20]
 80094ec:	0151      	lsls	r1, r2, #5
 80094ee:	69ba      	ldr	r2, [r7, #24]
 80094f0:	440a      	add	r2, r1
 80094f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80094f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80094fa:	6013      	str	r3, [r2, #0]
 80094fc:	e000      	b.n	8009500 <USB_HC_Halt+0x22a>
          break;
 80094fe:	bf00      	nop
    }
  }

  return HAL_OK;
 8009500:	2300      	movs	r3, #0
}
 8009502:	4618      	mov	r0, r3
 8009504:	3724      	adds	r7, #36	; 0x24
 8009506:	46bd      	mov	sp, r7
 8009508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950c:	4770      	bx	lr
	...

08009510 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009510:	b480      	push	{r7}
 8009512:	b087      	sub	sp, #28
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	460b      	mov	r3, r1
 800951a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009520:	78fb      	ldrb	r3, [r7, #3]
 8009522:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8009524:	2301      	movs	r3, #1
 8009526:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	04da      	lsls	r2, r3, #19
 800952c:	4b15      	ldr	r3, [pc, #84]	; (8009584 <USB_DoPing+0x74>)
 800952e:	4013      	ands	r3, r2
 8009530:	693a      	ldr	r2, [r7, #16]
 8009532:	0151      	lsls	r1, r2, #5
 8009534:	697a      	ldr	r2, [r7, #20]
 8009536:	440a      	add	r2, r1
 8009538:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800953c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009540:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	015a      	lsls	r2, r3, #5
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	4413      	add	r3, r2
 800954a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009558:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009560:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8009562:	693b      	ldr	r3, [r7, #16]
 8009564:	015a      	lsls	r2, r3, #5
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	4413      	add	r3, r2
 800956a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800956e:	461a      	mov	r2, r3
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009574:	2300      	movs	r3, #0
}
 8009576:	4618      	mov	r0, r3
 8009578:	371c      	adds	r7, #28
 800957a:	46bd      	mov	sp, r7
 800957c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009580:	4770      	bx	lr
 8009582:	bf00      	nop
 8009584:	1ff80000 	.word	0x1ff80000

08009588 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b086      	sub	sp, #24
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8009594:	2300      	movs	r3, #0
 8009596:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f7ff f935 	bl	8008808 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800959e:	2110      	movs	r1, #16
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f7ff f98f 	bl	80088c4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f7ff f9b0 	bl	800890c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80095ac:	2300      	movs	r3, #0
 80095ae:	613b      	str	r3, [r7, #16]
 80095b0:	e01f      	b.n	80095f2 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	015a      	lsls	r2, r3, #5
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	4413      	add	r3, r2
 80095ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80095c8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80095d0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80095d8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	015a      	lsls	r2, r3, #5
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	4413      	add	r3, r2
 80095e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095e6:	461a      	mov	r2, r3
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	3301      	adds	r3, #1
 80095f0:	613b      	str	r3, [r7, #16]
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	2b0f      	cmp	r3, #15
 80095f6:	d9dc      	bls.n	80095b2 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80095f8:	2300      	movs	r3, #0
 80095fa:	613b      	str	r3, [r7, #16]
 80095fc:	e034      	b.n	8009668 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80095fe:	693b      	ldr	r3, [r7, #16]
 8009600:	015a      	lsls	r2, r3, #5
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	4413      	add	r3, r2
 8009606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009614:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800961c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009624:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	015a      	lsls	r2, r3, #5
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	4413      	add	r3, r2
 800962e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009632:	461a      	mov	r2, r3
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	3301      	adds	r3, #1
 800963c:	617b      	str	r3, [r7, #20]
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009644:	d80c      	bhi.n	8009660 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009646:	693b      	ldr	r3, [r7, #16]
 8009648:	015a      	lsls	r2, r3, #5
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	4413      	add	r3, r2
 800964e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009658:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800965c:	d0ec      	beq.n	8009638 <USB_StopHost+0xb0>
 800965e:	e000      	b.n	8009662 <USB_StopHost+0xda>
        break;
 8009660:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	3301      	adds	r3, #1
 8009666:	613b      	str	r3, [r7, #16]
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	2b0f      	cmp	r3, #15
 800966c:	d9c7      	bls.n	80095fe <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009674:	461a      	mov	r2, r3
 8009676:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800967a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009682:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f7ff f8ae 	bl	80087e6 <USB_EnableGlobalInt>

  return HAL_OK;
 800968a:	2300      	movs	r3, #0
}
 800968c:	4618      	mov	r0, r3
 800968e:	3718      	adds	r7, #24
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}

08009694 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8009698:	4904      	ldr	r1, [pc, #16]	; (80096ac <MX_FATFS_Init+0x18>)
 800969a:	4805      	ldr	r0, [pc, #20]	; (80096b0 <MX_FATFS_Init+0x1c>)
 800969c:	f003 f84c 	bl	800c738 <FATFS_LinkDriver>
 80096a0:	4603      	mov	r3, r0
 80096a2:	461a      	mov	r2, r3
 80096a4:	4b03      	ldr	r3, [pc, #12]	; (80096b4 <MX_FATFS_Init+0x20>)
 80096a6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80096a8:	bf00      	nop
 80096aa:	bd80      	pop	{r7, pc}
 80096ac:	200033d8 	.word	0x200033d8
 80096b0:	0800da48 	.word	0x0800da48
 80096b4:	20005440 	.word	0x20005440

080096b8 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 80096b8:	b480      	push	{r7}
 80096ba:	b083      	sub	sp, #12
 80096bc:	af00      	add	r7, sp, #0
 80096be:	4603      	mov	r3, r0
 80096c0:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 80096c2:	2300      	movs	r3, #0
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	370c      	adds	r7, #12
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr

080096d0 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b084      	sub	sp, #16
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	4603      	mov	r3, r0
 80096d8:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 80096da:	2301      	movs	r3, #1
 80096dc:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 80096de:	79fb      	ldrb	r3, [r7, #7]
 80096e0:	4619      	mov	r1, r3
 80096e2:	4808      	ldr	r0, [pc, #32]	; (8009704 <USBH_status+0x34>)
 80096e4:	f000 fe1a 	bl	800a31c <USBH_MSC_UnitIsReady>
 80096e8:	4603      	mov	r3, r0
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d002      	beq.n	80096f4 <USBH_status+0x24>
  {
    res = RES_OK;
 80096ee:	2300      	movs	r3, #0
 80096f0:	73fb      	strb	r3, [r7, #15]
 80096f2:	e001      	b.n	80096f8 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 80096f4:	2301      	movs	r3, #1
 80096f6:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80096f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	3710      	adds	r7, #16
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}
 8009702:	bf00      	nop
 8009704:	20005444 	.word	0x20005444

08009708 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b094      	sub	sp, #80	; 0x50
 800970c:	af02      	add	r7, sp, #8
 800970e:	60b9      	str	r1, [r7, #8]
 8009710:	607a      	str	r2, [r7, #4]
 8009712:	603b      	str	r3, [r7, #0]
 8009714:	4603      	mov	r3, r0
 8009716:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009718:	2301      	movs	r3, #1
 800971a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800971e:	7bf9      	ldrb	r1, [r7, #15]
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	9300      	str	r3, [sp, #0]
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	687a      	ldr	r2, [r7, #4]
 8009728:	4813      	ldr	r0, [pc, #76]	; (8009778 <USBH_read+0x70>)
 800972a:	f000 fe41 	bl	800a3b0 <USBH_MSC_Read>
 800972e:	4603      	mov	r3, r0
 8009730:	2b00      	cmp	r3, #0
 8009732:	d103      	bne.n	800973c <USBH_read+0x34>
  {
    res = RES_OK;
 8009734:	2300      	movs	r3, #0
 8009736:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800973a:	e017      	b.n	800976c <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800973c:	f107 0210 	add.w	r2, r7, #16
 8009740:	7bfb      	ldrb	r3, [r7, #15]
 8009742:	4619      	mov	r1, r3
 8009744:	480c      	ldr	r0, [pc, #48]	; (8009778 <USBH_read+0x70>)
 8009746:	f000 fe0f 	bl	800a368 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800974a:	7f7b      	ldrb	r3, [r7, #29]
 800974c:	2b3a      	cmp	r3, #58	; 0x3a
 800974e:	d005      	beq.n	800975c <USBH_read+0x54>
 8009750:	2b3a      	cmp	r3, #58	; 0x3a
 8009752:	dc07      	bgt.n	8009764 <USBH_read+0x5c>
 8009754:	2b04      	cmp	r3, #4
 8009756:	d001      	beq.n	800975c <USBH_read+0x54>
 8009758:	2b28      	cmp	r3, #40	; 0x28
 800975a:	d103      	bne.n	8009764 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 800975c:	2303      	movs	r3, #3
 800975e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009762:	e003      	b.n	800976c <USBH_read+0x64>

    default:
      res = RES_ERROR;
 8009764:	2301      	movs	r3, #1
 8009766:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800976a:	bf00      	nop
    }
  }

  return res;
 800976c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009770:	4618      	mov	r0, r3
 8009772:	3748      	adds	r7, #72	; 0x48
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}
 8009778:	20005444 	.word	0x20005444

0800977c <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b094      	sub	sp, #80	; 0x50
 8009780:	af02      	add	r7, sp, #8
 8009782:	60b9      	str	r1, [r7, #8]
 8009784:	607a      	str	r2, [r7, #4]
 8009786:	603b      	str	r3, [r7, #0]
 8009788:	4603      	mov	r3, r0
 800978a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800978c:	2301      	movs	r3, #1
 800978e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8009792:	7bf9      	ldrb	r1, [r7, #15]
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	9300      	str	r3, [sp, #0]
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	687a      	ldr	r2, [r7, #4]
 800979c:	4817      	ldr	r0, [pc, #92]	; (80097fc <USBH_write+0x80>)
 800979e:	f000 fe70 	bl	800a482 <USBH_MSC_Write>
 80097a2:	4603      	mov	r3, r0
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d103      	bne.n	80097b0 <USBH_write+0x34>
  {
    res = RES_OK;
 80097a8:	2300      	movs	r3, #0
 80097aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80097ae:	e01f      	b.n	80097f0 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80097b0:	f107 0210 	add.w	r2, r7, #16
 80097b4:	7bfb      	ldrb	r3, [r7, #15]
 80097b6:	4619      	mov	r1, r3
 80097b8:	4810      	ldr	r0, [pc, #64]	; (80097fc <USBH_write+0x80>)
 80097ba:	f000 fdd5 	bl	800a368 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80097be:	7f7b      	ldrb	r3, [r7, #29]
 80097c0:	2b3a      	cmp	r3, #58	; 0x3a
 80097c2:	d00d      	beq.n	80097e0 <USBH_write+0x64>
 80097c4:	2b3a      	cmp	r3, #58	; 0x3a
 80097c6:	dc0f      	bgt.n	80097e8 <USBH_write+0x6c>
 80097c8:	2b28      	cmp	r3, #40	; 0x28
 80097ca:	d009      	beq.n	80097e0 <USBH_write+0x64>
 80097cc:	2b28      	cmp	r3, #40	; 0x28
 80097ce:	dc0b      	bgt.n	80097e8 <USBH_write+0x6c>
 80097d0:	2b04      	cmp	r3, #4
 80097d2:	d005      	beq.n	80097e0 <USBH_write+0x64>
 80097d4:	2b27      	cmp	r3, #39	; 0x27
 80097d6:	d107      	bne.n	80097e8 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 80097d8:	2302      	movs	r3, #2
 80097da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80097de:	e007      	b.n	80097f0 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 80097e0:	2303      	movs	r3, #3
 80097e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80097e6:	e003      	b.n	80097f0 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 80097e8:	2301      	movs	r3, #1
 80097ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80097ee:	bf00      	nop
    }
  }

  return res;
 80097f0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	3748      	adds	r7, #72	; 0x48
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bd80      	pop	{r7, pc}
 80097fc:	20005444 	.word	0x20005444

08009800 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b090      	sub	sp, #64	; 0x40
 8009804:	af00      	add	r7, sp, #0
 8009806:	4603      	mov	r3, r0
 8009808:	603a      	str	r2, [r7, #0]
 800980a:	71fb      	strb	r3, [r7, #7]
 800980c:	460b      	mov	r3, r1
 800980e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009810:	2301      	movs	r3, #1
 8009812:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8009816:	79bb      	ldrb	r3, [r7, #6]
 8009818:	2b03      	cmp	r3, #3
 800981a:	d852      	bhi.n	80098c2 <USBH_ioctl+0xc2>
 800981c:	a201      	add	r2, pc, #4	; (adr r2, 8009824 <USBH_ioctl+0x24>)
 800981e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009822:	bf00      	nop
 8009824:	08009835 	.word	0x08009835
 8009828:	0800983d 	.word	0x0800983d
 800982c:	08009867 	.word	0x08009867
 8009830:	08009893 	.word	0x08009893
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8009834:	2300      	movs	r3, #0
 8009836:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800983a:	e045      	b.n	80098c8 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800983c:	f107 0208 	add.w	r2, r7, #8
 8009840:	79fb      	ldrb	r3, [r7, #7]
 8009842:	4619      	mov	r1, r3
 8009844:	4823      	ldr	r0, [pc, #140]	; (80098d4 <USBH_ioctl+0xd4>)
 8009846:	f000 fd8f 	bl	800a368 <USBH_MSC_GetLUNInfo>
 800984a:	4603      	mov	r3, r0
 800984c:	2b00      	cmp	r3, #0
 800984e:	d106      	bne.n	800985e <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8009850:	68fa      	ldr	r2, [r7, #12]
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8009856:	2300      	movs	r3, #0
 8009858:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800985c:	e034      	b.n	80098c8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800985e:	2301      	movs	r3, #1
 8009860:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009864:	e030      	b.n	80098c8 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8009866:	f107 0208 	add.w	r2, r7, #8
 800986a:	79fb      	ldrb	r3, [r7, #7]
 800986c:	4619      	mov	r1, r3
 800986e:	4819      	ldr	r0, [pc, #100]	; (80098d4 <USBH_ioctl+0xd4>)
 8009870:	f000 fd7a 	bl	800a368 <USBH_MSC_GetLUNInfo>
 8009874:	4603      	mov	r3, r0
 8009876:	2b00      	cmp	r3, #0
 8009878:	d107      	bne.n	800988a <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800987a:	8a3b      	ldrh	r3, [r7, #16]
 800987c:	461a      	mov	r2, r3
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8009882:	2300      	movs	r3, #0
 8009884:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8009888:	e01e      	b.n	80098c8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800988a:	2301      	movs	r3, #1
 800988c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009890:	e01a      	b.n	80098c8 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8009892:	f107 0208 	add.w	r2, r7, #8
 8009896:	79fb      	ldrb	r3, [r7, #7]
 8009898:	4619      	mov	r1, r3
 800989a:	480e      	ldr	r0, [pc, #56]	; (80098d4 <USBH_ioctl+0xd4>)
 800989c:	f000 fd64 	bl	800a368 <USBH_MSC_GetLUNInfo>
 80098a0:	4603      	mov	r3, r0
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d109      	bne.n	80098ba <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 80098a6:	8a3b      	ldrh	r3, [r7, #16]
 80098a8:	0a5b      	lsrs	r3, r3, #9
 80098aa:	b29b      	uxth	r3, r3
 80098ac:	461a      	mov	r2, r3
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80098b2:	2300      	movs	r3, #0
 80098b4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80098b8:	e006      	b.n	80098c8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80098ba:	2301      	movs	r3, #1
 80098bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80098c0:	e002      	b.n	80098c8 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 80098c2:	2304      	movs	r3, #4
 80098c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 80098c8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3740      	adds	r7, #64	; 0x40
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}
 80098d4:	20005444 	.word	0x20005444

080098d8 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80098d8:	b590      	push	{r4, r7, lr}
 80098da:	b089      	sub	sp, #36	; 0x24
 80098dc:	af04      	add	r7, sp, #16
 80098de:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80098e6:	7919      	ldrb	r1, [r3, #4]
 80098e8:	2350      	movs	r3, #80	; 0x50
 80098ea:	2206      	movs	r2, #6
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f001 fc53 	bl	800b198 <USBH_FindInterface>
 80098f2:	4603      	mov	r3, r0
 80098f4:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 80098f6:	7bfb      	ldrb	r3, [r7, #15]
 80098f8:	2bff      	cmp	r3, #255	; 0xff
 80098fa:	d002      	beq.n	8009902 <USBH_MSC_InterfaceInit+0x2a>
 80098fc:	7bfb      	ldrb	r3, [r7, #15]
 80098fe:	2b01      	cmp	r3, #1
 8009900:	d901      	bls.n	8009906 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009902:	2302      	movs	r3, #2
 8009904:	e0ef      	b.n	8009ae6 <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 8009906:	7bfb      	ldrb	r3, [r7, #15]
 8009908:	4619      	mov	r1, r3
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f001 fc28 	bl	800b160 <USBH_SelectInterface>
 8009910:	4603      	mov	r3, r0
 8009912:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009914:	7bbb      	ldrb	r3, [r7, #14]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d001      	beq.n	800991e <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800991a:	2302      	movs	r3, #2
 800991c:	e0e3      	b.n	8009ae6 <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8009924:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009928:	f003 fa78 	bl	800ce1c <malloc>
 800992c:	4603      	mov	r3, r0
 800992e:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009936:	69db      	ldr	r3, [r3, #28]
 8009938:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800993a:	68bb      	ldr	r3, [r7, #8]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d101      	bne.n	8009944 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8009940:	2302      	movs	r3, #2
 8009942:	e0d0      	b.n	8009ae6 <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8009944:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009948:	2100      	movs	r1, #0
 800994a:	68b8      	ldr	r0, [r7, #8]
 800994c:	f003 fa84 	bl	800ce58 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8009950:	7bfb      	ldrb	r3, [r7, #15]
 8009952:	687a      	ldr	r2, [r7, #4]
 8009954:	211a      	movs	r1, #26
 8009956:	fb01 f303 	mul.w	r3, r1, r3
 800995a:	4413      	add	r3, r2
 800995c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009960:	781b      	ldrb	r3, [r3, #0]
 8009962:	b25b      	sxtb	r3, r3
 8009964:	2b00      	cmp	r3, #0
 8009966:	da16      	bge.n	8009996 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8009968:	7bfb      	ldrb	r3, [r7, #15]
 800996a:	687a      	ldr	r2, [r7, #4]
 800996c:	211a      	movs	r1, #26
 800996e:	fb01 f303 	mul.w	r3, r1, r3
 8009972:	4413      	add	r3, r2
 8009974:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009978:	781a      	ldrb	r2, [r3, #0]
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800997e:	7bfb      	ldrb	r3, [r7, #15]
 8009980:	687a      	ldr	r2, [r7, #4]
 8009982:	211a      	movs	r1, #26
 8009984:	fb01 f303 	mul.w	r3, r1, r3
 8009988:	4413      	add	r3, r2
 800998a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800998e:	881a      	ldrh	r2, [r3, #0]
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	815a      	strh	r2, [r3, #10]
 8009994:	e015      	b.n	80099c2 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8009996:	7bfb      	ldrb	r3, [r7, #15]
 8009998:	687a      	ldr	r2, [r7, #4]
 800999a:	211a      	movs	r1, #26
 800999c:	fb01 f303 	mul.w	r3, r1, r3
 80099a0:	4413      	add	r3, r2
 80099a2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80099a6:	781a      	ldrb	r2, [r3, #0]
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80099ac:	7bfb      	ldrb	r3, [r7, #15]
 80099ae:	687a      	ldr	r2, [r7, #4]
 80099b0:	211a      	movs	r1, #26
 80099b2:	fb01 f303 	mul.w	r3, r1, r3
 80099b6:	4413      	add	r3, r2
 80099b8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80099bc:	881a      	ldrh	r2, [r3, #0]
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80099c2:	7bfb      	ldrb	r3, [r7, #15]
 80099c4:	687a      	ldr	r2, [r7, #4]
 80099c6:	211a      	movs	r1, #26
 80099c8:	fb01 f303 	mul.w	r3, r1, r3
 80099cc:	4413      	add	r3, r2
 80099ce:	f203 3356 	addw	r3, r3, #854	; 0x356
 80099d2:	781b      	ldrb	r3, [r3, #0]
 80099d4:	b25b      	sxtb	r3, r3
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	da16      	bge.n	8009a08 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 80099da:	7bfb      	ldrb	r3, [r7, #15]
 80099dc:	687a      	ldr	r2, [r7, #4]
 80099de:	211a      	movs	r1, #26
 80099e0:	fb01 f303 	mul.w	r3, r1, r3
 80099e4:	4413      	add	r3, r2
 80099e6:	f203 3356 	addw	r3, r3, #854	; 0x356
 80099ea:	781a      	ldrb	r2, [r3, #0]
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80099f0:	7bfb      	ldrb	r3, [r7, #15]
 80099f2:	687a      	ldr	r2, [r7, #4]
 80099f4:	211a      	movs	r1, #26
 80099f6:	fb01 f303 	mul.w	r3, r1, r3
 80099fa:	4413      	add	r3, r2
 80099fc:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009a00:	881a      	ldrh	r2, [r3, #0]
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	815a      	strh	r2, [r3, #10]
 8009a06:	e015      	b.n	8009a34 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8009a08:	7bfb      	ldrb	r3, [r7, #15]
 8009a0a:	687a      	ldr	r2, [r7, #4]
 8009a0c:	211a      	movs	r1, #26
 8009a0e:	fb01 f303 	mul.w	r3, r1, r3
 8009a12:	4413      	add	r3, r2
 8009a14:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009a18:	781a      	ldrb	r2, [r3, #0]
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009a1e:	7bfb      	ldrb	r3, [r7, #15]
 8009a20:	687a      	ldr	r2, [r7, #4]
 8009a22:	211a      	movs	r1, #26
 8009a24:	fb01 f303 	mul.w	r3, r1, r3
 8009a28:	4413      	add	r3, r2
 8009a2a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009a2e:	881a      	ldrh	r2, [r3, #0]
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	2200      	movs	r2, #0
 8009a38:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	2200      	movs	r2, #0
 8009a44:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	799b      	ldrb	r3, [r3, #6]
 8009a4a:	4619      	mov	r1, r3
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f002 fdc4 	bl	800c5da <USBH_AllocPipe>
 8009a52:	4603      	mov	r3, r0
 8009a54:	461a      	mov	r2, r3
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	79db      	ldrb	r3, [r3, #7]
 8009a5e:	4619      	mov	r1, r3
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f002 fdba 	bl	800c5da <USBH_AllocPipe>
 8009a66:	4603      	mov	r3, r0
 8009a68:	461a      	mov	r2, r3
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f000 fdac 	bl	800a5cc <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	7959      	ldrb	r1, [r3, #5]
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	7998      	ldrb	r0, [r3, #6]
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009a88:	68ba      	ldr	r2, [r7, #8]
 8009a8a:	8912      	ldrh	r2, [r2, #8]
 8009a8c:	9202      	str	r2, [sp, #8]
 8009a8e:	2202      	movs	r2, #2
 8009a90:	9201      	str	r2, [sp, #4]
 8009a92:	9300      	str	r3, [sp, #0]
 8009a94:	4623      	mov	r3, r4
 8009a96:	4602      	mov	r2, r0
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f002 fd6f 	bl	800c57c <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	7919      	ldrb	r1, [r3, #4]
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	79d8      	ldrb	r0, [r3, #7]
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009ab2:	68ba      	ldr	r2, [r7, #8]
 8009ab4:	8952      	ldrh	r2, [r2, #10]
 8009ab6:	9202      	str	r2, [sp, #8]
 8009ab8:	2202      	movs	r2, #2
 8009aba:	9201      	str	r2, [sp, #4]
 8009abc:	9300      	str	r3, [sp, #0]
 8009abe:	4623      	mov	r3, r4
 8009ac0:	4602      	mov	r2, r0
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f002 fd5a 	bl	800c57c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	791b      	ldrb	r3, [r3, #4]
 8009acc:	2200      	movs	r2, #0
 8009ace:	4619      	mov	r1, r3
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f003 f8c5 	bl	800cc60 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	795b      	ldrb	r3, [r3, #5]
 8009ada:	2200      	movs	r2, #0
 8009adc:	4619      	mov	r1, r3
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f003 f8be 	bl	800cc60 <USBH_LL_SetToggle>

  return USBH_OK;
 8009ae4:	2300      	movs	r3, #0
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3714      	adds	r7, #20
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd90      	pop	{r4, r7, pc}

08009aee <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009aee:	b580      	push	{r7, lr}
 8009af0:	b084      	sub	sp, #16
 8009af2:	af00      	add	r7, sp, #0
 8009af4:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009afc:	69db      	ldr	r3, [r3, #28]
 8009afe:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	795b      	ldrb	r3, [r3, #5]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d00e      	beq.n	8009b26 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	795b      	ldrb	r3, [r3, #5]
 8009b0c:	4619      	mov	r1, r3
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f002 fd53 	bl	800c5ba <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	795b      	ldrb	r3, [r3, #5]
 8009b18:	4619      	mov	r1, r3
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f002 fd7e 	bl	800c61c <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	2200      	movs	r2, #0
 8009b24:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	791b      	ldrb	r3, [r3, #4]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d00e      	beq.n	8009b4c <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	791b      	ldrb	r3, [r3, #4]
 8009b32:	4619      	mov	r1, r3
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f002 fd40 	bl	800c5ba <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	791b      	ldrb	r3, [r3, #4]
 8009b3e:	4619      	mov	r1, r3
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f002 fd6b 	bl	800c61c <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b52:	69db      	ldr	r3, [r3, #28]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d00b      	beq.n	8009b70 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b5e:	69db      	ldr	r3, [r3, #28]
 8009b60:	4618      	mov	r0, r3
 8009b62:	f003 f963 	bl	800ce2c <free>
    phost->pActiveClass->pData = 0U;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009b70:	2300      	movs	r3, #0
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	3710      	adds	r7, #16
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}

08009b7a <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009b7a:	b580      	push	{r7, lr}
 8009b7c:	b084      	sub	sp, #16
 8009b7e:	af00      	add	r7, sp, #0
 8009b80:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b88:	69db      	ldr	r3, [r3, #28]
 8009b8a:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	7b9b      	ldrb	r3, [r3, #14]
 8009b94:	2b03      	cmp	r3, #3
 8009b96:	d041      	beq.n	8009c1c <USBH_MSC_ClassRequest+0xa2>
 8009b98:	2b03      	cmp	r3, #3
 8009b9a:	dc4b      	bgt.n	8009c34 <USBH_MSC_ClassRequest+0xba>
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d001      	beq.n	8009ba4 <USBH_MSC_ClassRequest+0x2a>
 8009ba0:	2b02      	cmp	r3, #2
 8009ba2:	d147      	bne.n	8009c34 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	4619      	mov	r1, r3
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f000 fcf0 	bl	800a58e <USBH_MSC_BOT_REQ_GetMaxLUN>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8009bb2:	7bfb      	ldrb	r3, [r7, #15]
 8009bb4:	2b03      	cmp	r3, #3
 8009bb6:	d104      	bne.n	8009bc2 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8009bc2:	7bfb      	ldrb	r3, [r7, #15]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d137      	bne.n	8009c38 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	781b      	ldrb	r3, [r3, #0]
 8009bcc:	2b02      	cmp	r3, #2
 8009bce:	d804      	bhi.n	8009bda <USBH_MSC_ClassRequest+0x60>
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	781b      	ldrb	r3, [r3, #0]
 8009bd4:	3301      	adds	r3, #1
 8009bd6:	b2da      	uxtb	r2, r3
 8009bd8:	e000      	b.n	8009bdc <USBH_MSC_ClassRequest+0x62>
 8009bda:	2202      	movs	r2, #2
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8009be0:	2300      	movs	r3, #0
 8009be2:	73bb      	strb	r3, [r7, #14]
 8009be4:	e014      	b.n	8009c10 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8009be6:	7bbb      	ldrb	r3, [r7, #14]
 8009be8:	68ba      	ldr	r2, [r7, #8]
 8009bea:	2134      	movs	r1, #52	; 0x34
 8009bec:	fb01 f303 	mul.w	r3, r1, r3
 8009bf0:	4413      	add	r3, r2
 8009bf2:	3392      	adds	r3, #146	; 0x92
 8009bf4:	2202      	movs	r2, #2
 8009bf6:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8009bf8:	7bbb      	ldrb	r3, [r7, #14]
 8009bfa:	68ba      	ldr	r2, [r7, #8]
 8009bfc:	2134      	movs	r1, #52	; 0x34
 8009bfe:	fb01 f303 	mul.w	r3, r1, r3
 8009c02:	4413      	add	r3, r2
 8009c04:	33c1      	adds	r3, #193	; 0xc1
 8009c06:	2200      	movs	r2, #0
 8009c08:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8009c0a:	7bbb      	ldrb	r3, [r7, #14]
 8009c0c:	3301      	adds	r3, #1
 8009c0e:	73bb      	strb	r3, [r7, #14]
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	781b      	ldrb	r3, [r3, #0]
 8009c14:	7bba      	ldrb	r2, [r7, #14]
 8009c16:	429a      	cmp	r2, r3
 8009c18:	d3e5      	bcc.n	8009be6 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8009c1a:	e00d      	b.n	8009c38 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8009c1c:	2100      	movs	r1, #0
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f002 f87b 	bl	800bd1a <USBH_ClrFeature>
 8009c24:	4603      	mov	r3, r0
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d108      	bne.n	8009c3c <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	7bda      	ldrb	r2, [r3, #15]
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	739a      	strb	r2, [r3, #14]
      }
      break;
 8009c32:	e003      	b.n	8009c3c <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 8009c34:	bf00      	nop
 8009c36:	e002      	b.n	8009c3e <USBH_MSC_ClassRequest+0xc4>
      break;
 8009c38:	bf00      	nop
 8009c3a:	e000      	b.n	8009c3e <USBH_MSC_ClassRequest+0xc4>
      break;
 8009c3c:	bf00      	nop
  }

  return status;
 8009c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3710      	adds	r7, #16
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}

08009c48 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b086      	sub	sp, #24
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c56:	69db      	ldr	r3, [r3, #28]
 8009c58:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8009c5e:	2301      	movs	r3, #1
 8009c60:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8009c62:	2301      	movs	r3, #1
 8009c64:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8009c66:	693b      	ldr	r3, [r7, #16]
 8009c68:	7b1b      	ldrb	r3, [r3, #12]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d003      	beq.n	8009c76 <USBH_MSC_Process+0x2e>
 8009c6e:	2b01      	cmp	r3, #1
 8009c70:	f000 8271 	beq.w	800a156 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8009c74:	e272      	b.n	800a15c <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8009c76:	693b      	ldr	r3, [r7, #16]
 8009c78:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8009c7c:	693b      	ldr	r3, [r7, #16]
 8009c7e:	781b      	ldrb	r3, [r3, #0]
 8009c80:	b29b      	uxth	r3, r3
 8009c82:	429a      	cmp	r2, r3
 8009c84:	f080 824f 	bcs.w	800a126 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8009c88:	693b      	ldr	r3, [r7, #16]
 8009c8a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009c8e:	4619      	mov	r1, r3
 8009c90:	693a      	ldr	r2, [r7, #16]
 8009c92:	2334      	movs	r3, #52	; 0x34
 8009c94:	fb03 f301 	mul.w	r3, r3, r1
 8009c98:	4413      	add	r3, r2
 8009c9a:	3391      	adds	r3, #145	; 0x91
 8009c9c:	2201      	movs	r2, #1
 8009c9e:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009ca6:	4619      	mov	r1, r3
 8009ca8:	693a      	ldr	r2, [r7, #16]
 8009caa:	2334      	movs	r3, #52	; 0x34
 8009cac:	fb03 f301 	mul.w	r3, r3, r1
 8009cb0:	4413      	add	r3, r2
 8009cb2:	3390      	adds	r3, #144	; 0x90
 8009cb4:	781b      	ldrb	r3, [r3, #0]
 8009cb6:	2b08      	cmp	r3, #8
 8009cb8:	f200 8243 	bhi.w	800a142 <USBH_MSC_Process+0x4fa>
 8009cbc:	a201      	add	r2, pc, #4	; (adr r2, 8009cc4 <USBH_MSC_Process+0x7c>)
 8009cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cc2:	bf00      	nop
 8009cc4:	08009ce9 	.word	0x08009ce9
 8009cc8:	0800a143 	.word	0x0800a143
 8009ccc:	08009db1 	.word	0x08009db1
 8009cd0:	08009f35 	.word	0x08009f35
 8009cd4:	08009d0f 	.word	0x08009d0f
 8009cd8:	0800a001 	.word	0x0800a001
 8009cdc:	0800a143 	.word	0x0800a143
 8009ce0:	0800a143 	.word	0x0800a143
 8009ce4:	0800a115 	.word	0x0800a115
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009cee:	4619      	mov	r1, r3
 8009cf0:	693a      	ldr	r2, [r7, #16]
 8009cf2:	2334      	movs	r3, #52	; 0x34
 8009cf4:	fb03 f301 	mul.w	r3, r3, r1
 8009cf8:	4413      	add	r3, r2
 8009cfa:	3390      	adds	r3, #144	; 0x90
 8009cfc:	2204      	movs	r2, #4
 8009cfe:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8009d0c:	e222      	b.n	800a154 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009d14:	b2d9      	uxtb	r1, r3
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009d1c:	461a      	mov	r2, r3
 8009d1e:	2334      	movs	r3, #52	; 0x34
 8009d20:	fb03 f302 	mul.w	r3, r3, r2
 8009d24:	3398      	adds	r3, #152	; 0x98
 8009d26:	693a      	ldr	r2, [r7, #16]
 8009d28:	4413      	add	r3, r2
 8009d2a:	3307      	adds	r3, #7
 8009d2c:	461a      	mov	r2, r3
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f000 ff6a 	bl	800ac08 <USBH_MSC_SCSI_Inquiry>
 8009d34:	4603      	mov	r3, r0
 8009d36:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009d38:	7bfb      	ldrb	r3, [r7, #15]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d10b      	bne.n	8009d56 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8009d3e:	693b      	ldr	r3, [r7, #16]
 8009d40:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009d44:	4619      	mov	r1, r3
 8009d46:	693a      	ldr	r2, [r7, #16]
 8009d48:	2334      	movs	r3, #52	; 0x34
 8009d4a:	fb03 f301 	mul.w	r3, r3, r1
 8009d4e:	4413      	add	r3, r2
 8009d50:	3390      	adds	r3, #144	; 0x90
 8009d52:	2202      	movs	r2, #2
 8009d54:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8009d56:	7bfb      	ldrb	r3, [r7, #15]
 8009d58:	2b02      	cmp	r3, #2
 8009d5a:	d10c      	bne.n	8009d76 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009d5c:	693b      	ldr	r3, [r7, #16]
 8009d5e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009d62:	4619      	mov	r1, r3
 8009d64:	693a      	ldr	r2, [r7, #16]
 8009d66:	2334      	movs	r3, #52	; 0x34
 8009d68:	fb03 f301 	mul.w	r3, r3, r1
 8009d6c:	4413      	add	r3, r2
 8009d6e:	3390      	adds	r3, #144	; 0x90
 8009d70:	2205      	movs	r2, #5
 8009d72:	701a      	strb	r2, [r3, #0]
            break;
 8009d74:	e1e7      	b.n	800a146 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009d76:	7bfb      	ldrb	r3, [r7, #15]
 8009d78:	2b04      	cmp	r3, #4
 8009d7a:	f040 81e4 	bne.w	800a146 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009d7e:	693b      	ldr	r3, [r7, #16]
 8009d80:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009d84:	4619      	mov	r1, r3
 8009d86:	693a      	ldr	r2, [r7, #16]
 8009d88:	2334      	movs	r3, #52	; 0x34
 8009d8a:	fb03 f301 	mul.w	r3, r3, r1
 8009d8e:	4413      	add	r3, r2
 8009d90:	3390      	adds	r3, #144	; 0x90
 8009d92:	2201      	movs	r2, #1
 8009d94:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009d96:	693b      	ldr	r3, [r7, #16]
 8009d98:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009d9c:	4619      	mov	r1, r3
 8009d9e:	693a      	ldr	r2, [r7, #16]
 8009da0:	2334      	movs	r3, #52	; 0x34
 8009da2:	fb03 f301 	mul.w	r3, r3, r1
 8009da6:	4413      	add	r3, r2
 8009da8:	3391      	adds	r3, #145	; 0x91
 8009daa:	2202      	movs	r2, #2
 8009dac:	701a      	strb	r2, [r3, #0]
            break;
 8009dae:	e1ca      	b.n	800a146 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8009db0:	693b      	ldr	r3, [r7, #16]
 8009db2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009db6:	b2db      	uxtb	r3, r3
 8009db8:	4619      	mov	r1, r3
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f000 fe66 	bl	800aa8c <USBH_MSC_SCSI_TestUnitReady>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8009dc4:	7bbb      	ldrb	r3, [r7, #14]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d149      	bne.n	8009e5e <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8009dca:	693b      	ldr	r3, [r7, #16]
 8009dcc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009dd0:	4619      	mov	r1, r3
 8009dd2:	693a      	ldr	r2, [r7, #16]
 8009dd4:	2334      	movs	r3, #52	; 0x34
 8009dd6:	fb03 f301 	mul.w	r3, r3, r1
 8009dda:	4413      	add	r3, r2
 8009ddc:	3392      	adds	r3, #146	; 0x92
 8009dde:	781b      	ldrb	r3, [r3, #0]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d00c      	beq.n	8009dfe <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8009de4:	693b      	ldr	r3, [r7, #16]
 8009de6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009dea:	4619      	mov	r1, r3
 8009dec:	693a      	ldr	r2, [r7, #16]
 8009dee:	2334      	movs	r3, #52	; 0x34
 8009df0:	fb03 f301 	mul.w	r3, r3, r1
 8009df4:	4413      	add	r3, r2
 8009df6:	33c1      	adds	r3, #193	; 0xc1
 8009df8:	2201      	movs	r2, #1
 8009dfa:	701a      	strb	r2, [r3, #0]
 8009dfc:	e00b      	b.n	8009e16 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e04:	4619      	mov	r1, r3
 8009e06:	693a      	ldr	r2, [r7, #16]
 8009e08:	2334      	movs	r3, #52	; 0x34
 8009e0a:	fb03 f301 	mul.w	r3, r3, r1
 8009e0e:	4413      	add	r3, r2
 8009e10:	33c1      	adds	r3, #193	; 0xc1
 8009e12:	2200      	movs	r2, #0
 8009e14:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e1c:	4619      	mov	r1, r3
 8009e1e:	693a      	ldr	r2, [r7, #16]
 8009e20:	2334      	movs	r3, #52	; 0x34
 8009e22:	fb03 f301 	mul.w	r3, r3, r1
 8009e26:	4413      	add	r3, r2
 8009e28:	3390      	adds	r3, #144	; 0x90
 8009e2a:	2203      	movs	r2, #3
 8009e2c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8009e2e:	693b      	ldr	r3, [r7, #16]
 8009e30:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e34:	4619      	mov	r1, r3
 8009e36:	693a      	ldr	r2, [r7, #16]
 8009e38:	2334      	movs	r3, #52	; 0x34
 8009e3a:	fb03 f301 	mul.w	r3, r3, r1
 8009e3e:	4413      	add	r3, r2
 8009e40:	3391      	adds	r3, #145	; 0x91
 8009e42:	2200      	movs	r2, #0
 8009e44:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8009e46:	693b      	ldr	r3, [r7, #16]
 8009e48:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e4c:	4619      	mov	r1, r3
 8009e4e:	693a      	ldr	r2, [r7, #16]
 8009e50:	2334      	movs	r3, #52	; 0x34
 8009e52:	fb03 f301 	mul.w	r3, r3, r1
 8009e56:	4413      	add	r3, r2
 8009e58:	3392      	adds	r3, #146	; 0x92
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8009e5e:	7bbb      	ldrb	r3, [r7, #14]
 8009e60:	2b02      	cmp	r3, #2
 8009e62:	d14a      	bne.n	8009efa <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8009e64:	693b      	ldr	r3, [r7, #16]
 8009e66:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e6a:	4619      	mov	r1, r3
 8009e6c:	693a      	ldr	r2, [r7, #16]
 8009e6e:	2334      	movs	r3, #52	; 0x34
 8009e70:	fb03 f301 	mul.w	r3, r3, r1
 8009e74:	4413      	add	r3, r2
 8009e76:	3392      	adds	r3, #146	; 0x92
 8009e78:	781b      	ldrb	r3, [r3, #0]
 8009e7a:	2b02      	cmp	r3, #2
 8009e7c:	d00c      	beq.n	8009e98 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8009e7e:	693b      	ldr	r3, [r7, #16]
 8009e80:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e84:	4619      	mov	r1, r3
 8009e86:	693a      	ldr	r2, [r7, #16]
 8009e88:	2334      	movs	r3, #52	; 0x34
 8009e8a:	fb03 f301 	mul.w	r3, r3, r1
 8009e8e:	4413      	add	r3, r2
 8009e90:	33c1      	adds	r3, #193	; 0xc1
 8009e92:	2201      	movs	r2, #1
 8009e94:	701a      	strb	r2, [r3, #0]
 8009e96:	e00b      	b.n	8009eb0 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8009e98:	693b      	ldr	r3, [r7, #16]
 8009e9a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e9e:	4619      	mov	r1, r3
 8009ea0:	693a      	ldr	r2, [r7, #16]
 8009ea2:	2334      	movs	r3, #52	; 0x34
 8009ea4:	fb03 f301 	mul.w	r3, r3, r1
 8009ea8:	4413      	add	r3, r2
 8009eaa:	33c1      	adds	r3, #193	; 0xc1
 8009eac:	2200      	movs	r2, #0
 8009eae:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009eb0:	693b      	ldr	r3, [r7, #16]
 8009eb2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009eb6:	4619      	mov	r1, r3
 8009eb8:	693a      	ldr	r2, [r7, #16]
 8009eba:	2334      	movs	r3, #52	; 0x34
 8009ebc:	fb03 f301 	mul.w	r3, r3, r1
 8009ec0:	4413      	add	r3, r2
 8009ec2:	3390      	adds	r3, #144	; 0x90
 8009ec4:	2205      	movs	r2, #5
 8009ec6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8009ec8:	693b      	ldr	r3, [r7, #16]
 8009eca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009ece:	4619      	mov	r1, r3
 8009ed0:	693a      	ldr	r2, [r7, #16]
 8009ed2:	2334      	movs	r3, #52	; 0x34
 8009ed4:	fb03 f301 	mul.w	r3, r3, r1
 8009ed8:	4413      	add	r3, r2
 8009eda:	3391      	adds	r3, #145	; 0x91
 8009edc:	2201      	movs	r2, #1
 8009ede:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009ee6:	4619      	mov	r1, r3
 8009ee8:	693a      	ldr	r2, [r7, #16]
 8009eea:	2334      	movs	r3, #52	; 0x34
 8009eec:	fb03 f301 	mul.w	r3, r3, r1
 8009ef0:	4413      	add	r3, r2
 8009ef2:	3392      	adds	r3, #146	; 0x92
 8009ef4:	2202      	movs	r2, #2
 8009ef6:	701a      	strb	r2, [r3, #0]
            break;
 8009ef8:	e127      	b.n	800a14a <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8009efa:	7bbb      	ldrb	r3, [r7, #14]
 8009efc:	2b04      	cmp	r3, #4
 8009efe:	f040 8124 	bne.w	800a14a <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f08:	4619      	mov	r1, r3
 8009f0a:	693a      	ldr	r2, [r7, #16]
 8009f0c:	2334      	movs	r3, #52	; 0x34
 8009f0e:	fb03 f301 	mul.w	r3, r3, r1
 8009f12:	4413      	add	r3, r2
 8009f14:	3390      	adds	r3, #144	; 0x90
 8009f16:	2201      	movs	r2, #1
 8009f18:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f20:	4619      	mov	r1, r3
 8009f22:	693a      	ldr	r2, [r7, #16]
 8009f24:	2334      	movs	r3, #52	; 0x34
 8009f26:	fb03 f301 	mul.w	r3, r3, r1
 8009f2a:	4413      	add	r3, r2
 8009f2c:	3391      	adds	r3, #145	; 0x91
 8009f2e:	2202      	movs	r2, #2
 8009f30:	701a      	strb	r2, [r3, #0]
            break;
 8009f32:	e10a      	b.n	800a14a <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8009f34:	693b      	ldr	r3, [r7, #16]
 8009f36:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f3a:	b2d9      	uxtb	r1, r3
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f42:	461a      	mov	r2, r3
 8009f44:	2334      	movs	r3, #52	; 0x34
 8009f46:	fb03 f302 	mul.w	r3, r3, r2
 8009f4a:	3390      	adds	r3, #144	; 0x90
 8009f4c:	693a      	ldr	r2, [r7, #16]
 8009f4e:	4413      	add	r3, r2
 8009f50:	3304      	adds	r3, #4
 8009f52:	461a      	mov	r2, r3
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f000 fddc 	bl	800ab12 <USBH_MSC_SCSI_ReadCapacity>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009f5e:	7bfb      	ldrb	r3, [r7, #15]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d120      	bne.n	8009fa6 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009f64:	693b      	ldr	r3, [r7, #16]
 8009f66:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f6a:	4619      	mov	r1, r3
 8009f6c:	693a      	ldr	r2, [r7, #16]
 8009f6e:	2334      	movs	r3, #52	; 0x34
 8009f70:	fb03 f301 	mul.w	r3, r3, r1
 8009f74:	4413      	add	r3, r2
 8009f76:	3390      	adds	r3, #144	; 0x90
 8009f78:	2201      	movs	r2, #1
 8009f7a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8009f7c:	693b      	ldr	r3, [r7, #16]
 8009f7e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f82:	4619      	mov	r1, r3
 8009f84:	693a      	ldr	r2, [r7, #16]
 8009f86:	2334      	movs	r3, #52	; 0x34
 8009f88:	fb03 f301 	mul.w	r3, r3, r1
 8009f8c:	4413      	add	r3, r2
 8009f8e:	3391      	adds	r3, #145	; 0x91
 8009f90:	2200      	movs	r2, #0
 8009f92:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8009f94:	693b      	ldr	r3, [r7, #16]
 8009f96:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f9a:	3301      	adds	r3, #1
 8009f9c:	b29a      	uxth	r2, r3
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8009fa4:	e0d3      	b.n	800a14e <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 8009fa6:	7bfb      	ldrb	r3, [r7, #15]
 8009fa8:	2b02      	cmp	r3, #2
 8009faa:	d10c      	bne.n	8009fc6 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009fac:	693b      	ldr	r3, [r7, #16]
 8009fae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009fb2:	4619      	mov	r1, r3
 8009fb4:	693a      	ldr	r2, [r7, #16]
 8009fb6:	2334      	movs	r3, #52	; 0x34
 8009fb8:	fb03 f301 	mul.w	r3, r3, r1
 8009fbc:	4413      	add	r3, r2
 8009fbe:	3390      	adds	r3, #144	; 0x90
 8009fc0:	2205      	movs	r2, #5
 8009fc2:	701a      	strb	r2, [r3, #0]
            break;
 8009fc4:	e0c3      	b.n	800a14e <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009fc6:	7bfb      	ldrb	r3, [r7, #15]
 8009fc8:	2b04      	cmp	r3, #4
 8009fca:	f040 80c0 	bne.w	800a14e <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009fce:	693b      	ldr	r3, [r7, #16]
 8009fd0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009fd4:	4619      	mov	r1, r3
 8009fd6:	693a      	ldr	r2, [r7, #16]
 8009fd8:	2334      	movs	r3, #52	; 0x34
 8009fda:	fb03 f301 	mul.w	r3, r3, r1
 8009fde:	4413      	add	r3, r2
 8009fe0:	3390      	adds	r3, #144	; 0x90
 8009fe2:	2201      	movs	r2, #1
 8009fe4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009fe6:	693b      	ldr	r3, [r7, #16]
 8009fe8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009fec:	4619      	mov	r1, r3
 8009fee:	693a      	ldr	r2, [r7, #16]
 8009ff0:	2334      	movs	r3, #52	; 0x34
 8009ff2:	fb03 f301 	mul.w	r3, r3, r1
 8009ff6:	4413      	add	r3, r2
 8009ff8:	3391      	adds	r3, #145	; 0x91
 8009ffa:	2202      	movs	r2, #2
 8009ffc:	701a      	strb	r2, [r3, #0]
            break;
 8009ffe:	e0a6      	b.n	800a14e <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800a000:	693b      	ldr	r3, [r7, #16]
 800a002:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a006:	b2d9      	uxtb	r1, r3
 800a008:	693b      	ldr	r3, [r7, #16]
 800a00a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a00e:	461a      	mov	r2, r3
 800a010:	2334      	movs	r3, #52	; 0x34
 800a012:	fb03 f302 	mul.w	r3, r3, r2
 800a016:	3398      	adds	r3, #152	; 0x98
 800a018:	693a      	ldr	r2, [r7, #16]
 800a01a:	4413      	add	r3, r2
 800a01c:	3304      	adds	r3, #4
 800a01e:	461a      	mov	r2, r3
 800a020:	6878      	ldr	r0, [r7, #4]
 800a022:	f000 fe96 	bl	800ad52 <USBH_MSC_SCSI_RequestSense>
 800a026:	4603      	mov	r3, r0
 800a028:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800a02a:	7bfb      	ldrb	r3, [r7, #15]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d145      	bne.n	800a0bc <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800a030:	693b      	ldr	r3, [r7, #16]
 800a032:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a036:	4619      	mov	r1, r3
 800a038:	693a      	ldr	r2, [r7, #16]
 800a03a:	2334      	movs	r3, #52	; 0x34
 800a03c:	fb03 f301 	mul.w	r3, r3, r1
 800a040:	4413      	add	r3, r2
 800a042:	339c      	adds	r3, #156	; 0x9c
 800a044:	781b      	ldrb	r3, [r3, #0]
 800a046:	2b06      	cmp	r3, #6
 800a048:	d00c      	beq.n	800a064 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800a04a:	693b      	ldr	r3, [r7, #16]
 800a04c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a050:	4619      	mov	r1, r3
 800a052:	693a      	ldr	r2, [r7, #16]
 800a054:	2334      	movs	r3, #52	; 0x34
 800a056:	fb03 f301 	mul.w	r3, r3, r1
 800a05a:	4413      	add	r3, r2
 800a05c:	339c      	adds	r3, #156	; 0x9c
 800a05e:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800a060:	2b02      	cmp	r3, #2
 800a062:	d117      	bne.n	800a094 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a06a:	693b      	ldr	r3, [r7, #16]
 800a06c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800a070:	1ad3      	subs	r3, r2, r3
 800a072:	f242 720f 	movw	r2, #9999	; 0x270f
 800a076:	4293      	cmp	r3, r2
 800a078:	d80c      	bhi.n	800a094 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800a07a:	693b      	ldr	r3, [r7, #16]
 800a07c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a080:	4619      	mov	r1, r3
 800a082:	693a      	ldr	r2, [r7, #16]
 800a084:	2334      	movs	r3, #52	; 0x34
 800a086:	fb03 f301 	mul.w	r3, r3, r1
 800a08a:	4413      	add	r3, r2
 800a08c:	3390      	adds	r3, #144	; 0x90
 800a08e:	2202      	movs	r2, #2
 800a090:	701a      	strb	r2, [r3, #0]
                  break;
 800a092:	e05f      	b.n	800a154 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a09a:	4619      	mov	r1, r3
 800a09c:	693a      	ldr	r2, [r7, #16]
 800a09e:	2334      	movs	r3, #52	; 0x34
 800a0a0:	fb03 f301 	mul.w	r3, r3, r1
 800a0a4:	4413      	add	r3, r2
 800a0a6:	3390      	adds	r3, #144	; 0x90
 800a0a8:	2201      	movs	r2, #1
 800a0aa:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800a0ac:	693b      	ldr	r3, [r7, #16]
 800a0ae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a0b2:	3301      	adds	r3, #1
 800a0b4:	b29a      	uxth	r2, r3
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800a0bc:	7bfb      	ldrb	r3, [r7, #15]
 800a0be:	2b02      	cmp	r3, #2
 800a0c0:	d10c      	bne.n	800a0dc <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800a0c2:	693b      	ldr	r3, [r7, #16]
 800a0c4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a0c8:	4619      	mov	r1, r3
 800a0ca:	693a      	ldr	r2, [r7, #16]
 800a0cc:	2334      	movs	r3, #52	; 0x34
 800a0ce:	fb03 f301 	mul.w	r3, r3, r1
 800a0d2:	4413      	add	r3, r2
 800a0d4:	3390      	adds	r3, #144	; 0x90
 800a0d6:	2208      	movs	r2, #8
 800a0d8:	701a      	strb	r2, [r3, #0]
            break;
 800a0da:	e03a      	b.n	800a152 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a0dc:	7bfb      	ldrb	r3, [r7, #15]
 800a0de:	2b04      	cmp	r3, #4
 800a0e0:	d137      	bne.n	800a152 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a0e8:	4619      	mov	r1, r3
 800a0ea:	693a      	ldr	r2, [r7, #16]
 800a0ec:	2334      	movs	r3, #52	; 0x34
 800a0ee:	fb03 f301 	mul.w	r3, r3, r1
 800a0f2:	4413      	add	r3, r2
 800a0f4:	3390      	adds	r3, #144	; 0x90
 800a0f6:	2201      	movs	r2, #1
 800a0f8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a0fa:	693b      	ldr	r3, [r7, #16]
 800a0fc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a100:	4619      	mov	r1, r3
 800a102:	693a      	ldr	r2, [r7, #16]
 800a104:	2334      	movs	r3, #52	; 0x34
 800a106:	fb03 f301 	mul.w	r3, r3, r1
 800a10a:	4413      	add	r3, r2
 800a10c:	3391      	adds	r3, #145	; 0x91
 800a10e:	2202      	movs	r2, #2
 800a110:	701a      	strb	r2, [r3, #0]
            break;
 800a112:	e01e      	b.n	800a152 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 800a114:	693b      	ldr	r3, [r7, #16]
 800a116:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a11a:	3301      	adds	r3, #1
 800a11c:	b29a      	uxth	r2, r3
 800a11e:	693b      	ldr	r3, [r7, #16]
 800a120:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800a124:	e016      	b.n	800a154 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 800a126:	693b      	ldr	r3, [r7, #16]
 800a128:	2200      	movs	r2, #0
 800a12a:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800a12e:	693b      	ldr	r3, [r7, #16]
 800a130:	2201      	movs	r2, #1
 800a132:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a13a:	2102      	movs	r1, #2
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	4798      	blx	r3
      break;
 800a140:	e00c      	b.n	800a15c <USBH_MSC_Process+0x514>
            break;
 800a142:	bf00      	nop
 800a144:	e00a      	b.n	800a15c <USBH_MSC_Process+0x514>
            break;
 800a146:	bf00      	nop
 800a148:	e008      	b.n	800a15c <USBH_MSC_Process+0x514>
            break;
 800a14a:	bf00      	nop
 800a14c:	e006      	b.n	800a15c <USBH_MSC_Process+0x514>
            break;
 800a14e:	bf00      	nop
 800a150:	e004      	b.n	800a15c <USBH_MSC_Process+0x514>
            break;
 800a152:	bf00      	nop
      break;
 800a154:	e002      	b.n	800a15c <USBH_MSC_Process+0x514>
      error = USBH_OK;
 800a156:	2300      	movs	r3, #0
 800a158:	75fb      	strb	r3, [r7, #23]
      break;
 800a15a:	bf00      	nop
  }
  return error;
 800a15c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a15e:	4618      	mov	r0, r3
 800a160:	3718      	adds	r7, #24
 800a162:	46bd      	mov	sp, r7
 800a164:	bd80      	pop	{r7, pc}
 800a166:	bf00      	nop

0800a168 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800a168:	b480      	push	{r7}
 800a16a:	b083      	sub	sp, #12
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800a170:	2300      	movs	r3, #0
}
 800a172:	4618      	mov	r0, r3
 800a174:	370c      	adds	r7, #12
 800a176:	46bd      	mov	sp, r7
 800a178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17c:	4770      	bx	lr

0800a17e <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800a17e:	b580      	push	{r7, lr}
 800a180:	b088      	sub	sp, #32
 800a182:	af02      	add	r7, sp, #8
 800a184:	6078      	str	r0, [r7, #4]
 800a186:	460b      	mov	r3, r1
 800a188:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a190:	69db      	ldr	r3, [r3, #28]
 800a192:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 800a194:	2301      	movs	r3, #1
 800a196:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800a198:	2301      	movs	r3, #1
 800a19a:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800a19c:	78fb      	ldrb	r3, [r7, #3]
 800a19e:	693a      	ldr	r2, [r7, #16]
 800a1a0:	2134      	movs	r1, #52	; 0x34
 800a1a2:	fb01 f303 	mul.w	r3, r1, r3
 800a1a6:	4413      	add	r3, r2
 800a1a8:	3390      	adds	r3, #144	; 0x90
 800a1aa:	781b      	ldrb	r3, [r3, #0]
 800a1ac:	2b07      	cmp	r3, #7
 800a1ae:	d03c      	beq.n	800a22a <USBH_MSC_RdWrProcess+0xac>
 800a1b0:	2b07      	cmp	r3, #7
 800a1b2:	f300 80a7 	bgt.w	800a304 <USBH_MSC_RdWrProcess+0x186>
 800a1b6:	2b05      	cmp	r3, #5
 800a1b8:	d06c      	beq.n	800a294 <USBH_MSC_RdWrProcess+0x116>
 800a1ba:	2b06      	cmp	r3, #6
 800a1bc:	f040 80a2 	bne.w	800a304 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800a1c0:	78f9      	ldrb	r1, [r7, #3]
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	9300      	str	r3, [sp, #0]
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f000 fea5 	bl	800af1a <USBH_MSC_SCSI_Read>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800a1d4:	7bfb      	ldrb	r3, [r7, #15]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d10b      	bne.n	800a1f2 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a1da:	78fb      	ldrb	r3, [r7, #3]
 800a1dc:	693a      	ldr	r2, [r7, #16]
 800a1de:	2134      	movs	r1, #52	; 0x34
 800a1e0:	fb01 f303 	mul.w	r3, r1, r3
 800a1e4:	4413      	add	r3, r2
 800a1e6:	3390      	adds	r3, #144	; 0x90
 800a1e8:	2201      	movs	r2, #1
 800a1ea:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a1f0:	e08a      	b.n	800a308 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 800a1f2:	7bfb      	ldrb	r3, [r7, #15]
 800a1f4:	2b02      	cmp	r3, #2
 800a1f6:	d109      	bne.n	800a20c <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800a1f8:	78fb      	ldrb	r3, [r7, #3]
 800a1fa:	693a      	ldr	r2, [r7, #16]
 800a1fc:	2134      	movs	r1, #52	; 0x34
 800a1fe:	fb01 f303 	mul.w	r3, r1, r3
 800a202:	4413      	add	r3, r2
 800a204:	3390      	adds	r3, #144	; 0x90
 800a206:	2205      	movs	r2, #5
 800a208:	701a      	strb	r2, [r3, #0]
      break;
 800a20a:	e07d      	b.n	800a308 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a20c:	7bfb      	ldrb	r3, [r7, #15]
 800a20e:	2b04      	cmp	r3, #4
 800a210:	d17a      	bne.n	800a308 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800a212:	78fb      	ldrb	r3, [r7, #3]
 800a214:	693a      	ldr	r2, [r7, #16]
 800a216:	2134      	movs	r1, #52	; 0x34
 800a218:	fb01 f303 	mul.w	r3, r1, r3
 800a21c:	4413      	add	r3, r2
 800a21e:	3390      	adds	r3, #144	; 0x90
 800a220:	2208      	movs	r2, #8
 800a222:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800a224:	2302      	movs	r3, #2
 800a226:	75fb      	strb	r3, [r7, #23]
      break;
 800a228:	e06e      	b.n	800a308 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800a22a:	78f9      	ldrb	r1, [r7, #3]
 800a22c:	2300      	movs	r3, #0
 800a22e:	9300      	str	r3, [sp, #0]
 800a230:	2300      	movs	r3, #0
 800a232:	2200      	movs	r2, #0
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f000 fe05 	bl	800ae44 <USBH_MSC_SCSI_Write>
 800a23a:	4603      	mov	r3, r0
 800a23c:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800a23e:	7bfb      	ldrb	r3, [r7, #15]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d10b      	bne.n	800a25c <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a244:	78fb      	ldrb	r3, [r7, #3]
 800a246:	693a      	ldr	r2, [r7, #16]
 800a248:	2134      	movs	r1, #52	; 0x34
 800a24a:	fb01 f303 	mul.w	r3, r1, r3
 800a24e:	4413      	add	r3, r2
 800a250:	3390      	adds	r3, #144	; 0x90
 800a252:	2201      	movs	r2, #1
 800a254:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800a256:	2300      	movs	r3, #0
 800a258:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a25a:	e057      	b.n	800a30c <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 800a25c:	7bfb      	ldrb	r3, [r7, #15]
 800a25e:	2b02      	cmp	r3, #2
 800a260:	d109      	bne.n	800a276 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800a262:	78fb      	ldrb	r3, [r7, #3]
 800a264:	693a      	ldr	r2, [r7, #16]
 800a266:	2134      	movs	r1, #52	; 0x34
 800a268:	fb01 f303 	mul.w	r3, r1, r3
 800a26c:	4413      	add	r3, r2
 800a26e:	3390      	adds	r3, #144	; 0x90
 800a270:	2205      	movs	r2, #5
 800a272:	701a      	strb	r2, [r3, #0]
      break;
 800a274:	e04a      	b.n	800a30c <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a276:	7bfb      	ldrb	r3, [r7, #15]
 800a278:	2b04      	cmp	r3, #4
 800a27a:	d147      	bne.n	800a30c <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800a27c:	78fb      	ldrb	r3, [r7, #3]
 800a27e:	693a      	ldr	r2, [r7, #16]
 800a280:	2134      	movs	r1, #52	; 0x34
 800a282:	fb01 f303 	mul.w	r3, r1, r3
 800a286:	4413      	add	r3, r2
 800a288:	3390      	adds	r3, #144	; 0x90
 800a28a:	2208      	movs	r2, #8
 800a28c:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800a28e:	2302      	movs	r3, #2
 800a290:	75fb      	strb	r3, [r7, #23]
      break;
 800a292:	e03b      	b.n	800a30c <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800a294:	78fb      	ldrb	r3, [r7, #3]
 800a296:	2234      	movs	r2, #52	; 0x34
 800a298:	fb02 f303 	mul.w	r3, r2, r3
 800a29c:	3398      	adds	r3, #152	; 0x98
 800a29e:	693a      	ldr	r2, [r7, #16]
 800a2a0:	4413      	add	r3, r2
 800a2a2:	1d1a      	adds	r2, r3, #4
 800a2a4:	78fb      	ldrb	r3, [r7, #3]
 800a2a6:	4619      	mov	r1, r3
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f000 fd52 	bl	800ad52 <USBH_MSC_SCSI_RequestSense>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800a2b2:	7bfb      	ldrb	r3, [r7, #15]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d113      	bne.n	800a2e0 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a2b8:	78fb      	ldrb	r3, [r7, #3]
 800a2ba:	693a      	ldr	r2, [r7, #16]
 800a2bc:	2134      	movs	r1, #52	; 0x34
 800a2be:	fb01 f303 	mul.w	r3, r1, r3
 800a2c2:	4413      	add	r3, r2
 800a2c4:	3390      	adds	r3, #144	; 0x90
 800a2c6:	2201      	movs	r2, #1
 800a2c8:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800a2ca:	78fb      	ldrb	r3, [r7, #3]
 800a2cc:	693a      	ldr	r2, [r7, #16]
 800a2ce:	2134      	movs	r1, #52	; 0x34
 800a2d0:	fb01 f303 	mul.w	r3, r1, r3
 800a2d4:	4413      	add	r3, r2
 800a2d6:	3391      	adds	r3, #145	; 0x91
 800a2d8:	2202      	movs	r2, #2
 800a2da:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 800a2dc:	2302      	movs	r3, #2
 800a2de:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800a2e0:	7bfb      	ldrb	r3, [r7, #15]
 800a2e2:	2b02      	cmp	r3, #2
 800a2e4:	d014      	beq.n	800a310 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a2e6:	7bfb      	ldrb	r3, [r7, #15]
 800a2e8:	2b04      	cmp	r3, #4
 800a2ea:	d111      	bne.n	800a310 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800a2ec:	78fb      	ldrb	r3, [r7, #3]
 800a2ee:	693a      	ldr	r2, [r7, #16]
 800a2f0:	2134      	movs	r1, #52	; 0x34
 800a2f2:	fb01 f303 	mul.w	r3, r1, r3
 800a2f6:	4413      	add	r3, r2
 800a2f8:	3390      	adds	r3, #144	; 0x90
 800a2fa:	2208      	movs	r2, #8
 800a2fc:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800a2fe:	2302      	movs	r3, #2
 800a300:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a302:	e005      	b.n	800a310 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 800a304:	bf00      	nop
 800a306:	e004      	b.n	800a312 <USBH_MSC_RdWrProcess+0x194>
      break;
 800a308:	bf00      	nop
 800a30a:	e002      	b.n	800a312 <USBH_MSC_RdWrProcess+0x194>
      break;
 800a30c:	bf00      	nop
 800a30e:	e000      	b.n	800a312 <USBH_MSC_RdWrProcess+0x194>
      break;
 800a310:	bf00      	nop

  }
  return error;
 800a312:	7dfb      	ldrb	r3, [r7, #23]
}
 800a314:	4618      	mov	r0, r3
 800a316:	3718      	adds	r7, #24
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}

0800a31c <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800a31c:	b480      	push	{r7}
 800a31e:	b085      	sub	sp, #20
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
 800a324:	460b      	mov	r3, r1
 800a326:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a32e:	69db      	ldr	r3, [r3, #28]
 800a330:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	781b      	ldrb	r3, [r3, #0]
 800a336:	b2db      	uxtb	r3, r3
 800a338:	2b0b      	cmp	r3, #11
 800a33a:	d10c      	bne.n	800a356 <USBH_MSC_UnitIsReady+0x3a>
 800a33c:	78fb      	ldrb	r3, [r7, #3]
 800a33e:	68ba      	ldr	r2, [r7, #8]
 800a340:	2134      	movs	r1, #52	; 0x34
 800a342:	fb01 f303 	mul.w	r3, r1, r3
 800a346:	4413      	add	r3, r2
 800a348:	3391      	adds	r3, #145	; 0x91
 800a34a:	781b      	ldrb	r3, [r3, #0]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d102      	bne.n	800a356 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800a350:	2301      	movs	r3, #1
 800a352:	73fb      	strb	r3, [r7, #15]
 800a354:	e001      	b.n	800a35a <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800a356:	2300      	movs	r3, #0
 800a358:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800a35a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	3714      	adds	r7, #20
 800a360:	46bd      	mov	sp, r7
 800a362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a366:	4770      	bx	lr

0800a368 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b086      	sub	sp, #24
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	60f8      	str	r0, [r7, #12]
 800a370:	460b      	mov	r3, r1
 800a372:	607a      	str	r2, [r7, #4]
 800a374:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a37c:	69db      	ldr	r3, [r3, #28]
 800a37e:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	781b      	ldrb	r3, [r3, #0]
 800a384:	b2db      	uxtb	r3, r3
 800a386:	2b0b      	cmp	r3, #11
 800a388:	d10d      	bne.n	800a3a6 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800a38a:	7afb      	ldrb	r3, [r7, #11]
 800a38c:	2234      	movs	r2, #52	; 0x34
 800a38e:	fb02 f303 	mul.w	r3, r2, r3
 800a392:	3390      	adds	r3, #144	; 0x90
 800a394:	697a      	ldr	r2, [r7, #20]
 800a396:	4413      	add	r3, r2
 800a398:	2234      	movs	r2, #52	; 0x34
 800a39a:	4619      	mov	r1, r3
 800a39c:	6878      	ldr	r0, [r7, #4]
 800a39e:	f002 fd4d 	bl	800ce3c <memcpy>
    return USBH_OK;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	e000      	b.n	800a3a8 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800a3a6:	2302      	movs	r3, #2
  }
}
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	3718      	adds	r7, #24
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bd80      	pop	{r7, pc}

0800a3b0 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b088      	sub	sp, #32
 800a3b4:	af02      	add	r7, sp, #8
 800a3b6:	60f8      	str	r0, [r7, #12]
 800a3b8:	607a      	str	r2, [r7, #4]
 800a3ba:	603b      	str	r3, [r7, #0]
 800a3bc:	460b      	mov	r3, r1
 800a3be:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a3c6:	69db      	ldr	r3, [r3, #28]
 800a3c8:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a3d0:	b2db      	uxtb	r3, r3
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d00e      	beq.n	800a3f4 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	781b      	ldrb	r3, [r3, #0]
 800a3da:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800a3dc:	2b0b      	cmp	r3, #11
 800a3de:	d109      	bne.n	800a3f4 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800a3e0:	7afb      	ldrb	r3, [r7, #11]
 800a3e2:	697a      	ldr	r2, [r7, #20]
 800a3e4:	2134      	movs	r1, #52	; 0x34
 800a3e6:	fb01 f303 	mul.w	r3, r1, r3
 800a3ea:	4413      	add	r3, r2
 800a3ec:	3390      	adds	r3, #144	; 0x90
 800a3ee:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800a3f0:	2b01      	cmp	r3, #1
 800a3f2:	d001      	beq.n	800a3f8 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800a3f4:	2302      	movs	r3, #2
 800a3f6:	e040      	b.n	800a47a <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800a3f8:	697b      	ldr	r3, [r7, #20]
 800a3fa:	2206      	movs	r2, #6
 800a3fc:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800a3fe:	7afb      	ldrb	r3, [r7, #11]
 800a400:	697a      	ldr	r2, [r7, #20]
 800a402:	2134      	movs	r1, #52	; 0x34
 800a404:	fb01 f303 	mul.w	r3, r1, r3
 800a408:	4413      	add	r3, r2
 800a40a:	3390      	adds	r3, #144	; 0x90
 800a40c:	2206      	movs	r2, #6
 800a40e:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800a410:	7afb      	ldrb	r3, [r7, #11]
 800a412:	b29a      	uxth	r2, r3
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800a41a:	7af9      	ldrb	r1, [r7, #11]
 800a41c:	6a3b      	ldr	r3, [r7, #32]
 800a41e:	9300      	str	r3, [sp, #0]
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	687a      	ldr	r2, [r7, #4]
 800a424:	68f8      	ldr	r0, [r7, #12]
 800a426:	f000 fd78 	bl	800af1a <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a430:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a432:	e016      	b.n	800a462 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a43a:	693b      	ldr	r3, [r7, #16]
 800a43c:	1ad2      	subs	r2, r2, r3
 800a43e:	6a3b      	ldr	r3, [r7, #32]
 800a440:	f242 7110 	movw	r1, #10000	; 0x2710
 800a444:	fb01 f303 	mul.w	r3, r1, r3
 800a448:	429a      	cmp	r2, r3
 800a44a:	d805      	bhi.n	800a458 <USBH_MSC_Read+0xa8>
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a452:	b2db      	uxtb	r3, r3
 800a454:	2b00      	cmp	r3, #0
 800a456:	d104      	bne.n	800a462 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800a458:	697b      	ldr	r3, [r7, #20]
 800a45a:	2201      	movs	r2, #1
 800a45c:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800a45e:	2302      	movs	r3, #2
 800a460:	e00b      	b.n	800a47a <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a462:	7afb      	ldrb	r3, [r7, #11]
 800a464:	4619      	mov	r1, r3
 800a466:	68f8      	ldr	r0, [r7, #12]
 800a468:	f7ff fe89 	bl	800a17e <USBH_MSC_RdWrProcess>
 800a46c:	4603      	mov	r3, r0
 800a46e:	2b01      	cmp	r3, #1
 800a470:	d0e0      	beq.n	800a434 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	2201      	movs	r2, #1
 800a476:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800a478:	2300      	movs	r3, #0
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	3718      	adds	r7, #24
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}

0800a482 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800a482:	b580      	push	{r7, lr}
 800a484:	b088      	sub	sp, #32
 800a486:	af02      	add	r7, sp, #8
 800a488:	60f8      	str	r0, [r7, #12]
 800a48a:	607a      	str	r2, [r7, #4]
 800a48c:	603b      	str	r3, [r7, #0]
 800a48e:	460b      	mov	r3, r1
 800a490:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a498:	69db      	ldr	r3, [r3, #28]
 800a49a:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a4a2:	b2db      	uxtb	r3, r3
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d00e      	beq.n	800a4c6 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	781b      	ldrb	r3, [r3, #0]
 800a4ac:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800a4ae:	2b0b      	cmp	r3, #11
 800a4b0:	d109      	bne.n	800a4c6 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800a4b2:	7afb      	ldrb	r3, [r7, #11]
 800a4b4:	697a      	ldr	r2, [r7, #20]
 800a4b6:	2134      	movs	r1, #52	; 0x34
 800a4b8:	fb01 f303 	mul.w	r3, r1, r3
 800a4bc:	4413      	add	r3, r2
 800a4be:	3390      	adds	r3, #144	; 0x90
 800a4c0:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800a4c2:	2b01      	cmp	r3, #1
 800a4c4:	d001      	beq.n	800a4ca <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800a4c6:	2302      	movs	r3, #2
 800a4c8:	e040      	b.n	800a54c <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800a4ca:	697b      	ldr	r3, [r7, #20]
 800a4cc:	2207      	movs	r2, #7
 800a4ce:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800a4d0:	7afb      	ldrb	r3, [r7, #11]
 800a4d2:	697a      	ldr	r2, [r7, #20]
 800a4d4:	2134      	movs	r1, #52	; 0x34
 800a4d6:	fb01 f303 	mul.w	r3, r1, r3
 800a4da:	4413      	add	r3, r2
 800a4dc:	3390      	adds	r3, #144	; 0x90
 800a4de:	2207      	movs	r2, #7
 800a4e0:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800a4e2:	7afb      	ldrb	r3, [r7, #11]
 800a4e4:	b29a      	uxth	r2, r3
 800a4e6:	697b      	ldr	r3, [r7, #20]
 800a4e8:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800a4ec:	7af9      	ldrb	r1, [r7, #11]
 800a4ee:	6a3b      	ldr	r3, [r7, #32]
 800a4f0:	9300      	str	r3, [sp, #0]
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	687a      	ldr	r2, [r7, #4]
 800a4f6:	68f8      	ldr	r0, [r7, #12]
 800a4f8:	f000 fca4 	bl	800ae44 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a502:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a504:	e016      	b.n	800a534 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a50c:	693b      	ldr	r3, [r7, #16]
 800a50e:	1ad2      	subs	r2, r2, r3
 800a510:	6a3b      	ldr	r3, [r7, #32]
 800a512:	f242 7110 	movw	r1, #10000	; 0x2710
 800a516:	fb01 f303 	mul.w	r3, r1, r3
 800a51a:	429a      	cmp	r2, r3
 800a51c:	d805      	bhi.n	800a52a <USBH_MSC_Write+0xa8>
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a524:	b2db      	uxtb	r3, r3
 800a526:	2b00      	cmp	r3, #0
 800a528:	d104      	bne.n	800a534 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800a52a:	697b      	ldr	r3, [r7, #20]
 800a52c:	2201      	movs	r2, #1
 800a52e:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800a530:	2302      	movs	r3, #2
 800a532:	e00b      	b.n	800a54c <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a534:	7afb      	ldrb	r3, [r7, #11]
 800a536:	4619      	mov	r1, r3
 800a538:	68f8      	ldr	r0, [r7, #12]
 800a53a:	f7ff fe20 	bl	800a17e <USBH_MSC_RdWrProcess>
 800a53e:	4603      	mov	r3, r0
 800a540:	2b01      	cmp	r3, #1
 800a542:	d0e0      	beq.n	800a506 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	2201      	movs	r2, #1
 800a548:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800a54a:	2300      	movs	r3, #0
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3718      	adds	r7, #24
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}

0800a554 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b082      	sub	sp, #8
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2221      	movs	r2, #33	; 0x21
 800a560:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	22ff      	movs	r2, #255	; 0xff
 800a566:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2200      	movs	r2, #0
 800a56c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2200      	movs	r2, #0
 800a572:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2200      	movs	r2, #0
 800a578:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 800a57a:	2200      	movs	r2, #0
 800a57c:	2100      	movs	r1, #0
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f001 fdab 	bl	800c0da <USBH_CtlReq>
 800a584:	4603      	mov	r3, r0
}
 800a586:	4618      	mov	r0, r3
 800a588:	3708      	adds	r7, #8
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}

0800a58e <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800a58e:	b580      	push	{r7, lr}
 800a590:	b082      	sub	sp, #8
 800a592:	af00      	add	r7, sp, #0
 800a594:	6078      	str	r0, [r7, #4]
 800a596:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	22a1      	movs	r2, #161	; 0xa1
 800a59c:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	22fe      	movs	r2, #254	; 0xfe
 800a5a2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2201      	movs	r2, #1
 800a5b4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800a5b6:	2201      	movs	r2, #1
 800a5b8:	6839      	ldr	r1, [r7, #0]
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f001 fd8d 	bl	800c0da <USBH_CtlReq>
 800a5c0:	4603      	mov	r3, r0
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3708      	adds	r7, #8
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}
	...

0800a5cc <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b085      	sub	sp, #20
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a5da:	69db      	ldr	r3, [r3, #28]
 800a5dc:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	4a09      	ldr	r2, [pc, #36]	; (800a608 <USBH_MSC_BOT_Init+0x3c>)
 800a5e2:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	4a09      	ldr	r2, [pc, #36]	; (800a60c <USBH_MSC_BOT_Init+0x40>)
 800a5e8:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	2201      	movs	r2, #1
 800a5ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	2201      	movs	r2, #1
 800a5f6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800a5fa:	2300      	movs	r3, #0
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	3714      	adds	r7, #20
 800a600:	46bd      	mov	sp, r7
 800a602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a606:	4770      	bx	lr
 800a608:	43425355 	.word	0x43425355
 800a60c:	20304050 	.word	0x20304050

0800a610 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b088      	sub	sp, #32
 800a614:	af02      	add	r7, sp, #8
 800a616:	6078      	str	r0, [r7, #4]
 800a618:	460b      	mov	r3, r1
 800a61a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800a61c:	2301      	movs	r3, #1
 800a61e:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800a620:	2301      	movs	r3, #1
 800a622:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800a624:	2301      	movs	r3, #1
 800a626:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a628:	2300      	movs	r3, #0
 800a62a:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a632:	69db      	ldr	r3, [r3, #28]
 800a634:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800a636:	2300      	movs	r3, #0
 800a638:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800a63a:	693b      	ldr	r3, [r7, #16]
 800a63c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a640:	3b01      	subs	r3, #1
 800a642:	2b0a      	cmp	r3, #10
 800a644:	f200 819e 	bhi.w	800a984 <USBH_MSC_BOT_Process+0x374>
 800a648:	a201      	add	r2, pc, #4	; (adr r2, 800a650 <USBH_MSC_BOT_Process+0x40>)
 800a64a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a64e:	bf00      	nop
 800a650:	0800a67d 	.word	0x0800a67d
 800a654:	0800a6a5 	.word	0x0800a6a5
 800a658:	0800a70f 	.word	0x0800a70f
 800a65c:	0800a72d 	.word	0x0800a72d
 800a660:	0800a7b1 	.word	0x0800a7b1
 800a664:	0800a7d3 	.word	0x0800a7d3
 800a668:	0800a86b 	.word	0x0800a86b
 800a66c:	0800a887 	.word	0x0800a887
 800a670:	0800a8d9 	.word	0x0800a8d9
 800a674:	0800a909 	.word	0x0800a909
 800a678:	0800a96b 	.word	0x0800a96b
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800a67c:	693b      	ldr	r3, [r7, #16]
 800a67e:	78fa      	ldrb	r2, [r7, #3]
 800a680:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800a684:	693b      	ldr	r3, [r7, #16]
 800a686:	2202      	movs	r2, #2
 800a688:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800a68c:	693b      	ldr	r3, [r7, #16]
 800a68e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800a692:	693b      	ldr	r3, [r7, #16]
 800a694:	795b      	ldrb	r3, [r3, #5]
 800a696:	2201      	movs	r2, #1
 800a698:	9200      	str	r2, [sp, #0]
 800a69a:	221f      	movs	r2, #31
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f001 ff2a 	bl	800c4f6 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800a6a2:	e17e      	b.n	800a9a2 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800a6a4:	693b      	ldr	r3, [r7, #16]
 800a6a6:	795b      	ldrb	r3, [r3, #5]
 800a6a8:	4619      	mov	r1, r3
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f002 faae 	bl	800cc0c <USBH_LL_GetURBState>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a6b4:	7d3b      	ldrb	r3, [r7, #20]
 800a6b6:	2b01      	cmp	r3, #1
 800a6b8:	d118      	bne.n	800a6ec <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800a6ba:	693b      	ldr	r3, [r7, #16]
 800a6bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d00f      	beq.n	800a6e2 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800a6c2:	693b      	ldr	r3, [r7, #16]
 800a6c4:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a6c8:	b25b      	sxtb	r3, r3
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	da04      	bge.n	800a6d8 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800a6ce:	693b      	ldr	r3, [r7, #16]
 800a6d0:	2203      	movs	r2, #3
 800a6d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a6d6:	e157      	b.n	800a988 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800a6d8:	693b      	ldr	r3, [r7, #16]
 800a6da:	2205      	movs	r2, #5
 800a6dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a6e0:	e152      	b.n	800a988 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800a6e2:	693b      	ldr	r3, [r7, #16]
 800a6e4:	2207      	movs	r2, #7
 800a6e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a6ea:	e14d      	b.n	800a988 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a6ec:	7d3b      	ldrb	r3, [r7, #20]
 800a6ee:	2b02      	cmp	r3, #2
 800a6f0:	d104      	bne.n	800a6fc <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a6f2:	693b      	ldr	r3, [r7, #16]
 800a6f4:	2201      	movs	r2, #1
 800a6f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a6fa:	e145      	b.n	800a988 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800a6fc:	7d3b      	ldrb	r3, [r7, #20]
 800a6fe:	2b05      	cmp	r3, #5
 800a700:	f040 8142 	bne.w	800a988 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800a704:	693b      	ldr	r3, [r7, #16]
 800a706:	220a      	movs	r2, #10
 800a708:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a70c:	e13c      	b.n	800a988 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	895a      	ldrh	r2, [r3, #10]
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	791b      	ldrb	r3, [r3, #4]
 800a71c:	6878      	ldr	r0, [r7, #4]
 800a71e:	f001 ff0f 	bl	800c540 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	2204      	movs	r2, #4
 800a726:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800a72a:	e13a      	b.n	800a9a2 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800a72c:	693b      	ldr	r3, [r7, #16]
 800a72e:	791b      	ldrb	r3, [r3, #4]
 800a730:	4619      	mov	r1, r3
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f002 fa6a 	bl	800cc0c <USBH_LL_GetURBState>
 800a738:	4603      	mov	r3, r0
 800a73a:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a73c:	7d3b      	ldrb	r3, [r7, #20]
 800a73e:	2b01      	cmp	r3, #1
 800a740:	d12d      	bne.n	800a79e <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800a742:	693b      	ldr	r3, [r7, #16]
 800a744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a746:	693a      	ldr	r2, [r7, #16]
 800a748:	8952      	ldrh	r2, [r2, #10]
 800a74a:	4293      	cmp	r3, r2
 800a74c:	d910      	bls.n	800a770 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800a74e:	693b      	ldr	r3, [r7, #16]
 800a750:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a754:	693a      	ldr	r2, [r7, #16]
 800a756:	8952      	ldrh	r2, [r2, #10]
 800a758:	441a      	add	r2, r3
 800a75a:	693b      	ldr	r3, [r7, #16]
 800a75c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800a760:	693b      	ldr	r3, [r7, #16]
 800a762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a764:	693a      	ldr	r2, [r7, #16]
 800a766:	8952      	ldrh	r2, [r2, #10]
 800a768:	1a9a      	subs	r2, r3, r2
 800a76a:	693b      	ldr	r3, [r7, #16]
 800a76c:	65da      	str	r2, [r3, #92]	; 0x5c
 800a76e:	e002      	b.n	800a776 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	2200      	movs	r2, #0
 800a774:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d00a      	beq.n	800a794 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800a77e:	693b      	ldr	r3, [r7, #16]
 800a780:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	895a      	ldrh	r2, [r3, #10]
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	791b      	ldrb	r3, [r3, #4]
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f001 fed7 	bl	800c540 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800a792:	e0fb      	b.n	800a98c <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	2207      	movs	r2, #7
 800a798:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a79c:	e0f6      	b.n	800a98c <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800a79e:	7d3b      	ldrb	r3, [r7, #20]
 800a7a0:	2b05      	cmp	r3, #5
 800a7a2:	f040 80f3 	bne.w	800a98c <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800a7a6:	693b      	ldr	r3, [r7, #16]
 800a7a8:	2209      	movs	r2, #9
 800a7aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a7ae:	e0ed      	b.n	800a98c <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800a7b0:	693b      	ldr	r3, [r7, #16]
 800a7b2:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	891a      	ldrh	r2, [r3, #8]
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	795b      	ldrb	r3, [r3, #5]
 800a7be:	2001      	movs	r0, #1
 800a7c0:	9000      	str	r0, [sp, #0]
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f001 fe97 	bl	800c4f6 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800a7c8:	693b      	ldr	r3, [r7, #16]
 800a7ca:	2206      	movs	r2, #6
 800a7cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a7d0:	e0e7      	b.n	800a9a2 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	795b      	ldrb	r3, [r3, #5]
 800a7d6:	4619      	mov	r1, r3
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f002 fa17 	bl	800cc0c <USBH_LL_GetURBState>
 800a7de:	4603      	mov	r3, r0
 800a7e0:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a7e2:	7d3b      	ldrb	r3, [r7, #20]
 800a7e4:	2b01      	cmp	r3, #1
 800a7e6:	d12f      	bne.n	800a848 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7ec:	693a      	ldr	r2, [r7, #16]
 800a7ee:	8912      	ldrh	r2, [r2, #8]
 800a7f0:	4293      	cmp	r3, r2
 800a7f2:	d910      	bls.n	800a816 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800a7f4:	693b      	ldr	r3, [r7, #16]
 800a7f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a7fa:	693a      	ldr	r2, [r7, #16]
 800a7fc:	8912      	ldrh	r2, [r2, #8]
 800a7fe:	441a      	add	r2, r3
 800a800:	693b      	ldr	r3, [r7, #16]
 800a802:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800a806:	693b      	ldr	r3, [r7, #16]
 800a808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a80a:	693a      	ldr	r2, [r7, #16]
 800a80c:	8912      	ldrh	r2, [r2, #8]
 800a80e:	1a9a      	subs	r2, r3, r2
 800a810:	693b      	ldr	r3, [r7, #16]
 800a812:	65da      	str	r2, [r3, #92]	; 0x5c
 800a814:	e002      	b.n	800a81c <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800a816:	693b      	ldr	r3, [r7, #16]
 800a818:	2200      	movs	r2, #0
 800a81a:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a820:	2b00      	cmp	r3, #0
 800a822:	d00c      	beq.n	800a83e <USBH_MSC_BOT_Process+0x22e>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800a824:	693b      	ldr	r3, [r7, #16]
 800a826:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a82a:	693b      	ldr	r3, [r7, #16]
 800a82c:	891a      	ldrh	r2, [r3, #8]
 800a82e:	693b      	ldr	r3, [r7, #16]
 800a830:	795b      	ldrb	r3, [r3, #5]
 800a832:	2001      	movs	r0, #1
 800a834:	9000      	str	r0, [sp, #0]
 800a836:	6878      	ldr	r0, [r7, #4]
 800a838:	f001 fe5d 	bl	800c4f6 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800a83c:	e0a8      	b.n	800a990 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800a83e:	693b      	ldr	r3, [r7, #16]
 800a840:	2207      	movs	r2, #7
 800a842:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a846:	e0a3      	b.n	800a990 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a848:	7d3b      	ldrb	r3, [r7, #20]
 800a84a:	2b02      	cmp	r3, #2
 800a84c:	d104      	bne.n	800a858 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800a84e:	693b      	ldr	r3, [r7, #16]
 800a850:	2205      	movs	r2, #5
 800a852:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a856:	e09b      	b.n	800a990 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 800a858:	7d3b      	ldrb	r3, [r7, #20]
 800a85a:	2b05      	cmp	r3, #5
 800a85c:	f040 8098 	bne.w	800a990 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800a860:	693b      	ldr	r3, [r7, #16]
 800a862:	220a      	movs	r2, #10
 800a864:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a868:	e092      	b.n	800a990 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800a86a:	693b      	ldr	r3, [r7, #16]
 800a86c:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	791b      	ldrb	r3, [r3, #4]
 800a874:	220d      	movs	r2, #13
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f001 fe62 	bl	800c540 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800a87c:	693b      	ldr	r3, [r7, #16]
 800a87e:	2208      	movs	r2, #8
 800a880:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a884:	e08d      	b.n	800a9a2 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	791b      	ldrb	r3, [r3, #4]
 800a88a:	4619      	mov	r1, r3
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f002 f9bd 	bl	800cc0c <USBH_LL_GetURBState>
 800a892:	4603      	mov	r3, r0
 800a894:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800a896:	7d3b      	ldrb	r3, [r7, #20]
 800a898:	2b01      	cmp	r3, #1
 800a89a:	d115      	bne.n	800a8c8 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a89c:	693b      	ldr	r3, [r7, #16]
 800a89e:	2201      	movs	r2, #1
 800a8a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800a8a4:	693b      	ldr	r3, [r7, #16]
 800a8a6:	2201      	movs	r2, #1
 800a8a8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800a8ac:	6878      	ldr	r0, [r7, #4]
 800a8ae:	f000 f8a9 	bl	800aa04 <USBH_MSC_DecodeCSW>
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800a8b6:	7d7b      	ldrb	r3, [r7, #21]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d102      	bne.n	800a8c2 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800a8c0:	e068      	b.n	800a994 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800a8c2:	2302      	movs	r3, #2
 800a8c4:	75fb      	strb	r3, [r7, #23]
      break;
 800a8c6:	e065      	b.n	800a994 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 800a8c8:	7d3b      	ldrb	r3, [r7, #20]
 800a8ca:	2b05      	cmp	r3, #5
 800a8cc:	d162      	bne.n	800a994 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800a8ce:	693b      	ldr	r3, [r7, #16]
 800a8d0:	2209      	movs	r2, #9
 800a8d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a8d6:	e05d      	b.n	800a994 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800a8d8:	78fb      	ldrb	r3, [r7, #3]
 800a8da:	2200      	movs	r2, #0
 800a8dc:	4619      	mov	r1, r3
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	f000 f864 	bl	800a9ac <USBH_MSC_BOT_Abort>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800a8e8:	7dbb      	ldrb	r3, [r7, #22]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d104      	bne.n	800a8f8 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	2207      	movs	r2, #7
 800a8f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800a8f6:	e04f      	b.n	800a998 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 800a8f8:	7dbb      	ldrb	r3, [r7, #22]
 800a8fa:	2b04      	cmp	r3, #4
 800a8fc:	d14c      	bne.n	800a998 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800a8fe:	693b      	ldr	r3, [r7, #16]
 800a900:	220b      	movs	r2, #11
 800a902:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a906:	e047      	b.n	800a998 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800a908:	78fb      	ldrb	r3, [r7, #3]
 800a90a:	2201      	movs	r2, #1
 800a90c:	4619      	mov	r1, r3
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f000 f84c 	bl	800a9ac <USBH_MSC_BOT_Abort>
 800a914:	4603      	mov	r3, r0
 800a916:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800a918:	7dbb      	ldrb	r3, [r7, #22]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d11d      	bne.n	800a95a <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	795b      	ldrb	r3, [r3, #5]
 800a922:	4619      	mov	r1, r3
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	f002 f9cb 	bl	800ccc0 <USBH_LL_GetToggle>
 800a92a:	4603      	mov	r3, r0
 800a92c:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800a92e:	693b      	ldr	r3, [r7, #16]
 800a930:	7959      	ldrb	r1, [r3, #5]
 800a932:	7bfb      	ldrb	r3, [r7, #15]
 800a934:	f1c3 0301 	rsb	r3, r3, #1
 800a938:	b2db      	uxtb	r3, r3
 800a93a:	461a      	mov	r2, r3
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	f002 f98f 	bl	800cc60 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	791b      	ldrb	r3, [r3, #4]
 800a946:	2200      	movs	r2, #0
 800a948:	4619      	mov	r1, r3
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f002 f988 	bl	800cc60 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800a950:	693b      	ldr	r3, [r7, #16]
 800a952:	2209      	movs	r2, #9
 800a954:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800a958:	e020      	b.n	800a99c <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800a95a:	7dbb      	ldrb	r3, [r7, #22]
 800a95c:	2b04      	cmp	r3, #4
 800a95e:	d11d      	bne.n	800a99c <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800a960:	693b      	ldr	r3, [r7, #16]
 800a962:	220b      	movs	r2, #11
 800a964:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a968:	e018      	b.n	800a99c <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f7ff fdf2 	bl	800a554 <USBH_MSC_BOT_REQ_Reset>
 800a970:	4603      	mov	r3, r0
 800a972:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800a974:	7dfb      	ldrb	r3, [r7, #23]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d112      	bne.n	800a9a0 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a97a:	693b      	ldr	r3, [r7, #16]
 800a97c:	2201      	movs	r2, #1
 800a97e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800a982:	e00d      	b.n	800a9a0 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800a984:	bf00      	nop
 800a986:	e00c      	b.n	800a9a2 <USBH_MSC_BOT_Process+0x392>
      break;
 800a988:	bf00      	nop
 800a98a:	e00a      	b.n	800a9a2 <USBH_MSC_BOT_Process+0x392>
      break;
 800a98c:	bf00      	nop
 800a98e:	e008      	b.n	800a9a2 <USBH_MSC_BOT_Process+0x392>
      break;
 800a990:	bf00      	nop
 800a992:	e006      	b.n	800a9a2 <USBH_MSC_BOT_Process+0x392>
      break;
 800a994:	bf00      	nop
 800a996:	e004      	b.n	800a9a2 <USBH_MSC_BOT_Process+0x392>
      break;
 800a998:	bf00      	nop
 800a99a:	e002      	b.n	800a9a2 <USBH_MSC_BOT_Process+0x392>
      break;
 800a99c:	bf00      	nop
 800a99e:	e000      	b.n	800a9a2 <USBH_MSC_BOT_Process+0x392>
      break;
 800a9a0:	bf00      	nop
  }
  return status;
 800a9a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	3718      	adds	r7, #24
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}

0800a9ac <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b084      	sub	sp, #16
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
 800a9b4:	460b      	mov	r3, r1
 800a9b6:	70fb      	strb	r3, [r7, #3]
 800a9b8:	4613      	mov	r3, r2
 800a9ba:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800a9bc:	2302      	movs	r3, #2
 800a9be:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a9c6:	69db      	ldr	r3, [r3, #28]
 800a9c8:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800a9ca:	78bb      	ldrb	r3, [r7, #2]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d002      	beq.n	800a9d6 <USBH_MSC_BOT_Abort+0x2a>
 800a9d0:	2b01      	cmp	r3, #1
 800a9d2:	d009      	beq.n	800a9e8 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800a9d4:	e011      	b.n	800a9fa <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	79db      	ldrb	r3, [r3, #7]
 800a9da:	4619      	mov	r1, r3
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f001 f99c 	bl	800bd1a <USBH_ClrFeature>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	73fb      	strb	r3, [r7, #15]
      break;
 800a9e6:	e008      	b.n	800a9fa <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	799b      	ldrb	r3, [r3, #6]
 800a9ec:	4619      	mov	r1, r3
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f001 f993 	bl	800bd1a <USBH_ClrFeature>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	73fb      	strb	r3, [r7, #15]
      break;
 800a9f8:	bf00      	nop
  }
  return status;
 800a9fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3710      	adds	r7, #16
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}

0800aa04 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b084      	sub	sp, #16
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa12:	69db      	ldr	r3, [r3, #28]
 800aa14:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800aa16:	2301      	movs	r3, #1
 800aa18:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800aa1a:	68bb      	ldr	r3, [r7, #8]
 800aa1c:	791b      	ldrb	r3, [r3, #4]
 800aa1e:	4619      	mov	r1, r3
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f002 f861 	bl	800cae8 <USBH_LL_GetLastXferSize>
 800aa26:	4603      	mov	r3, r0
 800aa28:	2b0d      	cmp	r3, #13
 800aa2a:	d002      	beq.n	800aa32 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800aa2c:	2302      	movs	r3, #2
 800aa2e:	73fb      	strb	r3, [r7, #15]
 800aa30:	e024      	b.n	800aa7c <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aa36:	4a14      	ldr	r2, [pc, #80]	; (800aa88 <USBH_MSC_DecodeCSW+0x84>)
 800aa38:	4293      	cmp	r3, r2
 800aa3a:	d11d      	bne.n	800aa78 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800aa3c:	68bb      	ldr	r3, [r7, #8]
 800aa3e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa44:	429a      	cmp	r2, r3
 800aa46:	d119      	bne.n	800aa7c <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800aa48:	68bb      	ldr	r3, [r7, #8]
 800aa4a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d102      	bne.n	800aa58 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800aa52:	2300      	movs	r3, #0
 800aa54:	73fb      	strb	r3, [r7, #15]
 800aa56:	e011      	b.n	800aa7c <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800aa5e:	2b01      	cmp	r3, #1
 800aa60:	d102      	bne.n	800aa68 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800aa62:	2301      	movs	r3, #1
 800aa64:	73fb      	strb	r3, [r7, #15]
 800aa66:	e009      	b.n	800aa7c <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800aa6e:	2b02      	cmp	r3, #2
 800aa70:	d104      	bne.n	800aa7c <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800aa72:	2302      	movs	r3, #2
 800aa74:	73fb      	strb	r3, [r7, #15]
 800aa76:	e001      	b.n	800aa7c <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800aa78:	2302      	movs	r3, #2
 800aa7a:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800aa7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	3710      	adds	r7, #16
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}
 800aa86:	bf00      	nop
 800aa88:	53425355 	.word	0x53425355

0800aa8c <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b084      	sub	sp, #16
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
 800aa94:	460b      	mov	r3, r1
 800aa96:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800aa98:	2302      	movs	r3, #2
 800aa9a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aaa2:	69db      	ldr	r3, [r3, #28]
 800aaa4:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800aaac:	2b01      	cmp	r3, #1
 800aaae:	d002      	beq.n	800aab6 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800aab0:	2b02      	cmp	r3, #2
 800aab2:	d021      	beq.n	800aaf8 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800aab4:	e028      	b.n	800ab08 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	2200      	movs	r2, #0
 800aaba:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800aabc:	68bb      	ldr	r3, [r7, #8]
 800aabe:	2200      	movs	r2, #0
 800aac0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	220a      	movs	r2, #10
 800aac8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800aacc:	68bb      	ldr	r3, [r7, #8]
 800aace:	3363      	adds	r3, #99	; 0x63
 800aad0:	2210      	movs	r2, #16
 800aad2:	2100      	movs	r1, #0
 800aad4:	4618      	mov	r0, r3
 800aad6:	f002 f9bf 	bl	800ce58 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	2200      	movs	r2, #0
 800aade:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	2201      	movs	r2, #1
 800aae6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	2202      	movs	r2, #2
 800aaee:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800aaf2:	2301      	movs	r3, #1
 800aaf4:	73fb      	strb	r3, [r7, #15]
      break;
 800aaf6:	e007      	b.n	800ab08 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800aaf8:	78fb      	ldrb	r3, [r7, #3]
 800aafa:	4619      	mov	r1, r3
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f7ff fd87 	bl	800a610 <USBH_MSC_BOT_Process>
 800ab02:	4603      	mov	r3, r0
 800ab04:	73fb      	strb	r3, [r7, #15]
      break;
 800ab06:	bf00      	nop
  }

  return error;
 800ab08:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3710      	adds	r7, #16
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}

0800ab12 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800ab12:	b580      	push	{r7, lr}
 800ab14:	b086      	sub	sp, #24
 800ab16:	af00      	add	r7, sp, #0
 800ab18:	60f8      	str	r0, [r7, #12]
 800ab1a:	460b      	mov	r3, r1
 800ab1c:	607a      	str	r2, [r7, #4]
 800ab1e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800ab20:	2301      	movs	r3, #1
 800ab22:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab2a:	69db      	ldr	r3, [r3, #28]
 800ab2c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800ab34:	2b01      	cmp	r3, #1
 800ab36:	d002      	beq.n	800ab3e <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800ab38:	2b02      	cmp	r3, #2
 800ab3a:	d027      	beq.n	800ab8c <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800ab3c:	e05f      	b.n	800abfe <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800ab3e:	693b      	ldr	r3, [r7, #16]
 800ab40:	2208      	movs	r2, #8
 800ab42:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800ab44:	693b      	ldr	r3, [r7, #16]
 800ab46:	2280      	movs	r2, #128	; 0x80
 800ab48:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800ab4c:	693b      	ldr	r3, [r7, #16]
 800ab4e:	220a      	movs	r2, #10
 800ab50:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	3363      	adds	r3, #99	; 0x63
 800ab58:	2210      	movs	r2, #16
 800ab5a:	2100      	movs	r1, #0
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f002 f97b 	bl	800ce58 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800ab62:	693b      	ldr	r3, [r7, #16]
 800ab64:	2225      	movs	r2, #37	; 0x25
 800ab66:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ab6a:	693b      	ldr	r3, [r7, #16]
 800ab6c:	2201      	movs	r2, #1
 800ab6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800ab72:	693b      	ldr	r3, [r7, #16]
 800ab74:	2202      	movs	r2, #2
 800ab76:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800ab7a:	693b      	ldr	r3, [r7, #16]
 800ab7c:	f103 0210 	add.w	r2, r3, #16
 800ab80:	693b      	ldr	r3, [r7, #16]
 800ab82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800ab86:	2301      	movs	r3, #1
 800ab88:	75fb      	strb	r3, [r7, #23]
      break;
 800ab8a:	e038      	b.n	800abfe <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800ab8c:	7afb      	ldrb	r3, [r7, #11]
 800ab8e:	4619      	mov	r1, r3
 800ab90:	68f8      	ldr	r0, [r7, #12]
 800ab92:	f7ff fd3d 	bl	800a610 <USBH_MSC_BOT_Process>
 800ab96:	4603      	mov	r3, r0
 800ab98:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800ab9a:	7dfb      	ldrb	r3, [r7, #23]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d12d      	bne.n	800abfc <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800aba0:	693b      	ldr	r3, [r7, #16]
 800aba2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aba6:	3303      	adds	r3, #3
 800aba8:	781b      	ldrb	r3, [r3, #0]
 800abaa:	461a      	mov	r2, r3
 800abac:	693b      	ldr	r3, [r7, #16]
 800abae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800abb2:	3302      	adds	r3, #2
 800abb4:	781b      	ldrb	r3, [r3, #0]
 800abb6:	021b      	lsls	r3, r3, #8
 800abb8:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800abba:	693b      	ldr	r3, [r7, #16]
 800abbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800abc0:	3301      	adds	r3, #1
 800abc2:	781b      	ldrb	r3, [r3, #0]
 800abc4:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800abc6:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800abc8:	693b      	ldr	r3, [r7, #16]
 800abca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800abce:	781b      	ldrb	r3, [r3, #0]
 800abd0:	061b      	lsls	r3, r3, #24
 800abd2:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800abd8:	693b      	ldr	r3, [r7, #16]
 800abda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800abde:	3307      	adds	r3, #7
 800abe0:	781b      	ldrb	r3, [r3, #0]
 800abe2:	b29a      	uxth	r2, r3
 800abe4:	693b      	ldr	r3, [r7, #16]
 800abe6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800abea:	3306      	adds	r3, #6
 800abec:	781b      	ldrb	r3, [r3, #0]
 800abee:	b29b      	uxth	r3, r3
 800abf0:	021b      	lsls	r3, r3, #8
 800abf2:	b29b      	uxth	r3, r3
 800abf4:	4313      	orrs	r3, r2
 800abf6:	b29a      	uxth	r2, r3
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	809a      	strh	r2, [r3, #4]
      break;
 800abfc:	bf00      	nop
  }

  return error;
 800abfe:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	3718      	adds	r7, #24
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd80      	pop	{r7, pc}

0800ac08 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b086      	sub	sp, #24
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	60f8      	str	r0, [r7, #12]
 800ac10:	460b      	mov	r3, r1
 800ac12:	607a      	str	r2, [r7, #4]
 800ac14:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800ac16:	2302      	movs	r3, #2
 800ac18:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ac20:	69db      	ldr	r3, [r3, #28]
 800ac22:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800ac24:	693b      	ldr	r3, [r7, #16]
 800ac26:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800ac2a:	2b01      	cmp	r3, #1
 800ac2c:	d002      	beq.n	800ac34 <USBH_MSC_SCSI_Inquiry+0x2c>
 800ac2e:	2b02      	cmp	r3, #2
 800ac30:	d03d      	beq.n	800acae <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800ac32:	e089      	b.n	800ad48 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800ac34:	693b      	ldr	r3, [r7, #16]
 800ac36:	2224      	movs	r2, #36	; 0x24
 800ac38:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800ac3a:	693b      	ldr	r3, [r7, #16]
 800ac3c:	2280      	movs	r2, #128	; 0x80
 800ac3e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800ac42:	693b      	ldr	r3, [r7, #16]
 800ac44:	220a      	movs	r2, #10
 800ac46:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800ac4a:	693b      	ldr	r3, [r7, #16]
 800ac4c:	3363      	adds	r3, #99	; 0x63
 800ac4e:	220a      	movs	r2, #10
 800ac50:	2100      	movs	r1, #0
 800ac52:	4618      	mov	r0, r3
 800ac54:	f002 f900 	bl	800ce58 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800ac58:	693b      	ldr	r3, [r7, #16]
 800ac5a:	2212      	movs	r2, #18
 800ac5c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800ac60:	7afb      	ldrb	r3, [r7, #11]
 800ac62:	015b      	lsls	r3, r3, #5
 800ac64:	b2da      	uxtb	r2, r3
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800ac6c:	693b      	ldr	r3, [r7, #16]
 800ac6e:	2200      	movs	r2, #0
 800ac70:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	2200      	movs	r2, #0
 800ac78:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800ac7c:	693b      	ldr	r3, [r7, #16]
 800ac7e:	2224      	movs	r2, #36	; 0x24
 800ac80:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800ac84:	693b      	ldr	r3, [r7, #16]
 800ac86:	2200      	movs	r2, #0
 800ac88:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ac8c:	693b      	ldr	r3, [r7, #16]
 800ac8e:	2201      	movs	r2, #1
 800ac90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800ac94:	693b      	ldr	r3, [r7, #16]
 800ac96:	2202      	movs	r2, #2
 800ac98:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800ac9c:	693b      	ldr	r3, [r7, #16]
 800ac9e:	f103 0210 	add.w	r2, r3, #16
 800aca2:	693b      	ldr	r3, [r7, #16]
 800aca4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800aca8:	2301      	movs	r3, #1
 800acaa:	75fb      	strb	r3, [r7, #23]
      break;
 800acac:	e04c      	b.n	800ad48 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800acae:	7afb      	ldrb	r3, [r7, #11]
 800acb0:	4619      	mov	r1, r3
 800acb2:	68f8      	ldr	r0, [r7, #12]
 800acb4:	f7ff fcac 	bl	800a610 <USBH_MSC_BOT_Process>
 800acb8:	4603      	mov	r3, r0
 800acba:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800acbc:	7dfb      	ldrb	r3, [r7, #23]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d141      	bne.n	800ad46 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800acc2:	2222      	movs	r2, #34	; 0x22
 800acc4:	2100      	movs	r1, #0
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f002 f8c6 	bl	800ce58 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800accc:	693b      	ldr	r3, [r7, #16]
 800acce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800acd2:	781b      	ldrb	r3, [r3, #0]
 800acd4:	f003 031f 	and.w	r3, r3, #31
 800acd8:	b2da      	uxtb	r2, r3
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800acde:	693b      	ldr	r3, [r7, #16]
 800ace0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ace4:	781b      	ldrb	r3, [r3, #0]
 800ace6:	095b      	lsrs	r3, r3, #5
 800ace8:	b2da      	uxtb	r2, r3
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800acee:	693b      	ldr	r3, [r7, #16]
 800acf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800acf4:	3301      	adds	r3, #1
 800acf6:	781b      	ldrb	r3, [r3, #0]
 800acf8:	b25b      	sxtb	r3, r3
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	da03      	bge.n	800ad06 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2201      	movs	r2, #1
 800ad02:	709a      	strb	r2, [r3, #2]
 800ad04:	e002      	b.n	800ad0c <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2200      	movs	r2, #0
 800ad0a:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	1cd8      	adds	r0, r3, #3
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad16:	3308      	adds	r3, #8
 800ad18:	2208      	movs	r2, #8
 800ad1a:	4619      	mov	r1, r3
 800ad1c:	f002 f88e 	bl	800ce3c <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f103 000c 	add.w	r0, r3, #12
 800ad26:	693b      	ldr	r3, [r7, #16]
 800ad28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad2c:	3310      	adds	r3, #16
 800ad2e:	2210      	movs	r2, #16
 800ad30:	4619      	mov	r1, r3
 800ad32:	f002 f883 	bl	800ce3c <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	331d      	adds	r3, #29
 800ad3a:	693a      	ldr	r2, [r7, #16]
 800ad3c:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800ad40:	3220      	adds	r2, #32
 800ad42:	6812      	ldr	r2, [r2, #0]
 800ad44:	601a      	str	r2, [r3, #0]
      break;
 800ad46:	bf00      	nop
  }

  return error;
 800ad48:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	3718      	adds	r7, #24
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}

0800ad52 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800ad52:	b580      	push	{r7, lr}
 800ad54:	b086      	sub	sp, #24
 800ad56:	af00      	add	r7, sp, #0
 800ad58:	60f8      	str	r0, [r7, #12]
 800ad5a:	460b      	mov	r3, r1
 800ad5c:	607a      	str	r2, [r7, #4]
 800ad5e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800ad60:	2302      	movs	r3, #2
 800ad62:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad6a:	69db      	ldr	r3, [r3, #28]
 800ad6c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800ad6e:	693b      	ldr	r3, [r7, #16]
 800ad70:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800ad74:	2b01      	cmp	r3, #1
 800ad76:	d002      	beq.n	800ad7e <USBH_MSC_SCSI_RequestSense+0x2c>
 800ad78:	2b02      	cmp	r3, #2
 800ad7a:	d03d      	beq.n	800adf8 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800ad7c:	e05d      	b.n	800ae3a <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	220e      	movs	r2, #14
 800ad82:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800ad84:	693b      	ldr	r3, [r7, #16]
 800ad86:	2280      	movs	r2, #128	; 0x80
 800ad88:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800ad8c:	693b      	ldr	r3, [r7, #16]
 800ad8e:	220a      	movs	r2, #10
 800ad90:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800ad94:	693b      	ldr	r3, [r7, #16]
 800ad96:	3363      	adds	r3, #99	; 0x63
 800ad98:	2210      	movs	r2, #16
 800ad9a:	2100      	movs	r1, #0
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	f002 f85b 	bl	800ce58 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800ada2:	693b      	ldr	r3, [r7, #16]
 800ada4:	2203      	movs	r2, #3
 800ada6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800adaa:	7afb      	ldrb	r3, [r7, #11]
 800adac:	015b      	lsls	r3, r3, #5
 800adae:	b2da      	uxtb	r2, r3
 800adb0:	693b      	ldr	r3, [r7, #16]
 800adb2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	2200      	movs	r2, #0
 800adba:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800adbe:	693b      	ldr	r3, [r7, #16]
 800adc0:	2200      	movs	r2, #0
 800adc2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800adc6:	693b      	ldr	r3, [r7, #16]
 800adc8:	220e      	movs	r2, #14
 800adca:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800adce:	693b      	ldr	r3, [r7, #16]
 800add0:	2200      	movs	r2, #0
 800add2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800add6:	693b      	ldr	r3, [r7, #16]
 800add8:	2201      	movs	r2, #1
 800adda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800adde:	693b      	ldr	r3, [r7, #16]
 800ade0:	2202      	movs	r2, #2
 800ade2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800ade6:	693b      	ldr	r3, [r7, #16]
 800ade8:	f103 0210 	add.w	r2, r3, #16
 800adec:	693b      	ldr	r3, [r7, #16]
 800adee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800adf2:	2301      	movs	r3, #1
 800adf4:	75fb      	strb	r3, [r7, #23]
      break;
 800adf6:	e020      	b.n	800ae3a <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800adf8:	7afb      	ldrb	r3, [r7, #11]
 800adfa:	4619      	mov	r1, r3
 800adfc:	68f8      	ldr	r0, [r7, #12]
 800adfe:	f7ff fc07 	bl	800a610 <USBH_MSC_BOT_Process>
 800ae02:	4603      	mov	r3, r0
 800ae04:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800ae06:	7dfb      	ldrb	r3, [r7, #23]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d115      	bne.n	800ae38 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800ae0c:	693b      	ldr	r3, [r7, #16]
 800ae0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae12:	3302      	adds	r3, #2
 800ae14:	781b      	ldrb	r3, [r3, #0]
 800ae16:	f003 030f 	and.w	r3, r3, #15
 800ae1a:	b2da      	uxtb	r2, r3
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800ae20:	693b      	ldr	r3, [r7, #16]
 800ae22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae26:	7b1a      	ldrb	r2, [r3, #12]
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800ae2c:	693b      	ldr	r3, [r7, #16]
 800ae2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae32:	7b5a      	ldrb	r2, [r3, #13]
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	709a      	strb	r2, [r3, #2]
      break;
 800ae38:	bf00      	nop
  }

  return error;
 800ae3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	3718      	adds	r7, #24
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}

0800ae44 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b086      	sub	sp, #24
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	60f8      	str	r0, [r7, #12]
 800ae4c:	607a      	str	r2, [r7, #4]
 800ae4e:	603b      	str	r3, [r7, #0]
 800ae50:	460b      	mov	r3, r1
 800ae52:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800ae54:	2302      	movs	r3, #2
 800ae56:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae5e:	69db      	ldr	r3, [r3, #28]
 800ae60:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800ae62:	693b      	ldr	r3, [r7, #16]
 800ae64:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800ae68:	2b01      	cmp	r3, #1
 800ae6a:	d002      	beq.n	800ae72 <USBH_MSC_SCSI_Write+0x2e>
 800ae6c:	2b02      	cmp	r3, #2
 800ae6e:	d047      	beq.n	800af00 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800ae70:	e04e      	b.n	800af10 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800ae72:	693b      	ldr	r3, [r7, #16]
 800ae74:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800ae78:	461a      	mov	r2, r3
 800ae7a:	6a3b      	ldr	r3, [r7, #32]
 800ae7c:	fb03 f202 	mul.w	r2, r3, r2
 800ae80:	693b      	ldr	r3, [r7, #16]
 800ae82:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800ae84:	693b      	ldr	r3, [r7, #16]
 800ae86:	2200      	movs	r2, #0
 800ae88:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800ae8c:	693b      	ldr	r3, [r7, #16]
 800ae8e:	220a      	movs	r2, #10
 800ae90:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800ae94:	693b      	ldr	r3, [r7, #16]
 800ae96:	3363      	adds	r3, #99	; 0x63
 800ae98:	2210      	movs	r2, #16
 800ae9a:	2100      	movs	r1, #0
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	f001 ffdb 	bl	800ce58 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800aea2:	693b      	ldr	r3, [r7, #16]
 800aea4:	222a      	movs	r2, #42	; 0x2a
 800aea6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800aeaa:	79fa      	ldrb	r2, [r7, #7]
 800aeac:	693b      	ldr	r3, [r7, #16]
 800aeae:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800aeb2:	79ba      	ldrb	r2, [r7, #6]
 800aeb4:	693b      	ldr	r3, [r7, #16]
 800aeb6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800aeba:	797a      	ldrb	r2, [r7, #5]
 800aebc:	693b      	ldr	r3, [r7, #16]
 800aebe:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800aec2:	1d3b      	adds	r3, r7, #4
 800aec4:	781a      	ldrb	r2, [r3, #0]
 800aec6:	693b      	ldr	r3, [r7, #16]
 800aec8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800aecc:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800aed0:	693b      	ldr	r3, [r7, #16]
 800aed2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800aed6:	f107 0320 	add.w	r3, r7, #32
 800aeda:	781a      	ldrb	r2, [r3, #0]
 800aedc:	693b      	ldr	r3, [r7, #16]
 800aede:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800aee2:	693b      	ldr	r3, [r7, #16]
 800aee4:	2201      	movs	r2, #1
 800aee6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800aeea:	693b      	ldr	r3, [r7, #16]
 800aeec:	2202      	movs	r2, #2
 800aeee:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800aef2:	693b      	ldr	r3, [r7, #16]
 800aef4:	683a      	ldr	r2, [r7, #0]
 800aef6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800aefa:	2301      	movs	r3, #1
 800aefc:	75fb      	strb	r3, [r7, #23]
      break;
 800aefe:	e007      	b.n	800af10 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800af00:	7afb      	ldrb	r3, [r7, #11]
 800af02:	4619      	mov	r1, r3
 800af04:	68f8      	ldr	r0, [r7, #12]
 800af06:	f7ff fb83 	bl	800a610 <USBH_MSC_BOT_Process>
 800af0a:	4603      	mov	r3, r0
 800af0c:	75fb      	strb	r3, [r7, #23]
      break;
 800af0e:	bf00      	nop
  }

  return error;
 800af10:	7dfb      	ldrb	r3, [r7, #23]
}
 800af12:	4618      	mov	r0, r3
 800af14:	3718      	adds	r7, #24
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}

0800af1a <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800af1a:	b580      	push	{r7, lr}
 800af1c:	b086      	sub	sp, #24
 800af1e:	af00      	add	r7, sp, #0
 800af20:	60f8      	str	r0, [r7, #12]
 800af22:	607a      	str	r2, [r7, #4]
 800af24:	603b      	str	r3, [r7, #0]
 800af26:	460b      	mov	r3, r1
 800af28:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800af2a:	2302      	movs	r3, #2
 800af2c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800af34:	69db      	ldr	r3, [r3, #28]
 800af36:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800af38:	693b      	ldr	r3, [r7, #16]
 800af3a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800af3e:	2b01      	cmp	r3, #1
 800af40:	d002      	beq.n	800af48 <USBH_MSC_SCSI_Read+0x2e>
 800af42:	2b02      	cmp	r3, #2
 800af44:	d047      	beq.n	800afd6 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800af46:	e04e      	b.n	800afe6 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800af48:	693b      	ldr	r3, [r7, #16]
 800af4a:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800af4e:	461a      	mov	r2, r3
 800af50:	6a3b      	ldr	r3, [r7, #32]
 800af52:	fb03 f202 	mul.w	r2, r3, r2
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800af5a:	693b      	ldr	r3, [r7, #16]
 800af5c:	2280      	movs	r2, #128	; 0x80
 800af5e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	220a      	movs	r2, #10
 800af66:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800af6a:	693b      	ldr	r3, [r7, #16]
 800af6c:	3363      	adds	r3, #99	; 0x63
 800af6e:	2210      	movs	r2, #16
 800af70:	2100      	movs	r1, #0
 800af72:	4618      	mov	r0, r3
 800af74:	f001 ff70 	bl	800ce58 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800af78:	693b      	ldr	r3, [r7, #16]
 800af7a:	2228      	movs	r2, #40	; 0x28
 800af7c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800af80:	79fa      	ldrb	r2, [r7, #7]
 800af82:	693b      	ldr	r3, [r7, #16]
 800af84:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800af88:	79ba      	ldrb	r2, [r7, #6]
 800af8a:	693b      	ldr	r3, [r7, #16]
 800af8c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800af90:	797a      	ldrb	r2, [r7, #5]
 800af92:	693b      	ldr	r3, [r7, #16]
 800af94:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800af98:	1d3b      	adds	r3, r7, #4
 800af9a:	781a      	ldrb	r2, [r3, #0]
 800af9c:	693b      	ldr	r3, [r7, #16]
 800af9e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800afa2:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800afa6:	693b      	ldr	r3, [r7, #16]
 800afa8:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800afac:	f107 0320 	add.w	r3, r7, #32
 800afb0:	781a      	ldrb	r2, [r3, #0]
 800afb2:	693b      	ldr	r3, [r7, #16]
 800afb4:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800afb8:	693b      	ldr	r3, [r7, #16]
 800afba:	2201      	movs	r2, #1
 800afbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800afc0:	693b      	ldr	r3, [r7, #16]
 800afc2:	2202      	movs	r2, #2
 800afc4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	683a      	ldr	r2, [r7, #0]
 800afcc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800afd0:	2301      	movs	r3, #1
 800afd2:	75fb      	strb	r3, [r7, #23]
      break;
 800afd4:	e007      	b.n	800afe6 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800afd6:	7afb      	ldrb	r3, [r7, #11]
 800afd8:	4619      	mov	r1, r3
 800afda:	68f8      	ldr	r0, [r7, #12]
 800afdc:	f7ff fb18 	bl	800a610 <USBH_MSC_BOT_Process>
 800afe0:	4603      	mov	r3, r0
 800afe2:	75fb      	strb	r3, [r7, #23]
      break;
 800afe4:	bf00      	nop
  }

  return error;
 800afe6:	7dfb      	ldrb	r3, [r7, #23]
}
 800afe8:	4618      	mov	r0, r3
 800afea:	3718      	adds	r7, #24
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}

0800aff0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b084      	sub	sp, #16
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	60f8      	str	r0, [r7, #12]
 800aff8:	60b9      	str	r1, [r7, #8]
 800affa:	4613      	mov	r3, r2
 800affc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d101      	bne.n	800b008 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800b004:	2302      	movs	r3, #2
 800b006:	e029      	b.n	800b05c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	79fa      	ldrb	r2, [r7, #7]
 800b00c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	2200      	movs	r2, #0
 800b014:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	2200      	movs	r2, #0
 800b01c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800b020:	68f8      	ldr	r0, [r7, #12]
 800b022:	f000 f81f 	bl	800b064 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	2200      	movs	r2, #0
 800b02a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	2200      	movs	r2, #0
 800b032:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	2200      	movs	r2, #0
 800b03a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	2200      	movs	r2, #0
 800b042:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800b046:	68bb      	ldr	r3, [r7, #8]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d003      	beq.n	800b054 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	68ba      	ldr	r2, [r7, #8]
 800b050:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800b054:	68f8      	ldr	r0, [r7, #12]
 800b056:	f001 fc93 	bl	800c980 <USBH_LL_Init>

  return USBH_OK;
 800b05a:	2300      	movs	r3, #0
}
 800b05c:	4618      	mov	r0, r3
 800b05e:	3710      	adds	r7, #16
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}

0800b064 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800b064:	b480      	push	{r7}
 800b066:	b085      	sub	sp, #20
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800b06c:	2300      	movs	r3, #0
 800b06e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b070:	2300      	movs	r3, #0
 800b072:	60fb      	str	r3, [r7, #12]
 800b074:	e009      	b.n	800b08a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800b076:	687a      	ldr	r2, [r7, #4]
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	33e0      	adds	r3, #224	; 0xe0
 800b07c:	009b      	lsls	r3, r3, #2
 800b07e:	4413      	add	r3, r2
 800b080:	2200      	movs	r2, #0
 800b082:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	3301      	adds	r3, #1
 800b088:	60fb      	str	r3, [r7, #12]
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	2b0e      	cmp	r3, #14
 800b08e:	d9f2      	bls.n	800b076 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b090:	2300      	movs	r3, #0
 800b092:	60fb      	str	r3, [r7, #12]
 800b094:	e009      	b.n	800b0aa <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800b096:	687a      	ldr	r2, [r7, #4]
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	4413      	add	r3, r2
 800b09c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	3301      	adds	r3, #1
 800b0a8:	60fb      	str	r3, [r7, #12]
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b0b0:	d3f1      	bcc.n	800b096 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2201      	movs	r2, #1
 800b0c2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2201      	movs	r2, #1
 800b0d0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2240      	movs	r2, #64	; 0x40
 800b0d6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2200      	movs	r2, #0
 800b0dc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	2201      	movs	r2, #1
 800b0ea:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800b0fe:	2300      	movs	r3, #0
}
 800b100:	4618      	mov	r0, r3
 800b102:	3714      	adds	r7, #20
 800b104:	46bd      	mov	sp, r7
 800b106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10a:	4770      	bx	lr

0800b10c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800b10c:	b480      	push	{r7}
 800b10e:	b085      	sub	sp, #20
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
 800b114:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800b116:	2300      	movs	r3, #0
 800b118:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d016      	beq.n	800b14e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b126:	2b00      	cmp	r3, #0
 800b128:	d10e      	bne.n	800b148 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b130:	1c59      	adds	r1, r3, #1
 800b132:	687a      	ldr	r2, [r7, #4]
 800b134:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800b138:	687a      	ldr	r2, [r7, #4]
 800b13a:	33de      	adds	r3, #222	; 0xde
 800b13c:	6839      	ldr	r1, [r7, #0]
 800b13e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800b142:	2300      	movs	r3, #0
 800b144:	73fb      	strb	r3, [r7, #15]
 800b146:	e004      	b.n	800b152 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800b148:	2302      	movs	r3, #2
 800b14a:	73fb      	strb	r3, [r7, #15]
 800b14c:	e001      	b.n	800b152 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800b14e:	2302      	movs	r3, #2
 800b150:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b152:	7bfb      	ldrb	r3, [r7, #15]
}
 800b154:	4618      	mov	r0, r3
 800b156:	3714      	adds	r7, #20
 800b158:	46bd      	mov	sp, r7
 800b15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15e:	4770      	bx	lr

0800b160 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800b160:	b480      	push	{r7}
 800b162:	b085      	sub	sp, #20
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
 800b168:	460b      	mov	r3, r1
 800b16a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800b16c:	2300      	movs	r3, #0
 800b16e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800b176:	78fa      	ldrb	r2, [r7, #3]
 800b178:	429a      	cmp	r2, r3
 800b17a:	d204      	bcs.n	800b186 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	78fa      	ldrb	r2, [r7, #3]
 800b180:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800b184:	e001      	b.n	800b18a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800b186:	2302      	movs	r3, #2
 800b188:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b18a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b18c:	4618      	mov	r0, r3
 800b18e:	3714      	adds	r7, #20
 800b190:	46bd      	mov	sp, r7
 800b192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b196:	4770      	bx	lr

0800b198 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800b198:	b480      	push	{r7}
 800b19a:	b087      	sub	sp, #28
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
 800b1a0:	4608      	mov	r0, r1
 800b1a2:	4611      	mov	r1, r2
 800b1a4:	461a      	mov	r2, r3
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	70fb      	strb	r3, [r7, #3]
 800b1aa:	460b      	mov	r3, r1
 800b1ac:	70bb      	strb	r3, [r7, #2]
 800b1ae:	4613      	mov	r3, r2
 800b1b0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b1c0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b1c2:	e025      	b.n	800b210 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800b1c4:	7dfb      	ldrb	r3, [r7, #23]
 800b1c6:	221a      	movs	r2, #26
 800b1c8:	fb02 f303 	mul.w	r3, r2, r3
 800b1cc:	3308      	adds	r3, #8
 800b1ce:	68fa      	ldr	r2, [r7, #12]
 800b1d0:	4413      	add	r3, r2
 800b1d2:	3302      	adds	r3, #2
 800b1d4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b1d6:	693b      	ldr	r3, [r7, #16]
 800b1d8:	795b      	ldrb	r3, [r3, #5]
 800b1da:	78fa      	ldrb	r2, [r7, #3]
 800b1dc:	429a      	cmp	r2, r3
 800b1de:	d002      	beq.n	800b1e6 <USBH_FindInterface+0x4e>
 800b1e0:	78fb      	ldrb	r3, [r7, #3]
 800b1e2:	2bff      	cmp	r3, #255	; 0xff
 800b1e4:	d111      	bne.n	800b20a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b1e6:	693b      	ldr	r3, [r7, #16]
 800b1e8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b1ea:	78ba      	ldrb	r2, [r7, #2]
 800b1ec:	429a      	cmp	r2, r3
 800b1ee:	d002      	beq.n	800b1f6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b1f0:	78bb      	ldrb	r3, [r7, #2]
 800b1f2:	2bff      	cmp	r3, #255	; 0xff
 800b1f4:	d109      	bne.n	800b20a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b1f6:	693b      	ldr	r3, [r7, #16]
 800b1f8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b1fa:	787a      	ldrb	r2, [r7, #1]
 800b1fc:	429a      	cmp	r2, r3
 800b1fe:	d002      	beq.n	800b206 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b200:	787b      	ldrb	r3, [r7, #1]
 800b202:	2bff      	cmp	r3, #255	; 0xff
 800b204:	d101      	bne.n	800b20a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800b206:	7dfb      	ldrb	r3, [r7, #23]
 800b208:	e006      	b.n	800b218 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800b20a:	7dfb      	ldrb	r3, [r7, #23]
 800b20c:	3301      	adds	r3, #1
 800b20e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b210:	7dfb      	ldrb	r3, [r7, #23]
 800b212:	2b01      	cmp	r3, #1
 800b214:	d9d6      	bls.n	800b1c4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800b216:	23ff      	movs	r3, #255	; 0xff
}
 800b218:	4618      	mov	r0, r3
 800b21a:	371c      	adds	r7, #28
 800b21c:	46bd      	mov	sp, r7
 800b21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b222:	4770      	bx	lr

0800b224 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b082      	sub	sp, #8
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f001 fbe3 	bl	800c9f8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800b232:	2101      	movs	r1, #1
 800b234:	6878      	ldr	r0, [r7, #4]
 800b236:	f001 fcfc 	bl	800cc32 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800b23a:	2300      	movs	r3, #0
}
 800b23c:	4618      	mov	r0, r3
 800b23e:	3708      	adds	r7, #8
 800b240:	46bd      	mov	sp, r7
 800b242:	bd80      	pop	{r7, pc}

0800b244 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b088      	sub	sp, #32
 800b248:	af04      	add	r7, sp, #16
 800b24a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800b24c:	2302      	movs	r3, #2
 800b24e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800b250:	2300      	movs	r3, #0
 800b252:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800b25a:	b2db      	uxtb	r3, r3
 800b25c:	2b01      	cmp	r3, #1
 800b25e:	d102      	bne.n	800b266 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2203      	movs	r2, #3
 800b264:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	781b      	ldrb	r3, [r3, #0]
 800b26a:	b2db      	uxtb	r3, r3
 800b26c:	2b0b      	cmp	r3, #11
 800b26e:	f200 81b3 	bhi.w	800b5d8 <USBH_Process+0x394>
 800b272:	a201      	add	r2, pc, #4	; (adr r2, 800b278 <USBH_Process+0x34>)
 800b274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b278:	0800b2a9 	.word	0x0800b2a9
 800b27c:	0800b2db 	.word	0x0800b2db
 800b280:	0800b343 	.word	0x0800b343
 800b284:	0800b573 	.word	0x0800b573
 800b288:	0800b5d9 	.word	0x0800b5d9
 800b28c:	0800b3e7 	.word	0x0800b3e7
 800b290:	0800b519 	.word	0x0800b519
 800b294:	0800b41d 	.word	0x0800b41d
 800b298:	0800b43d 	.word	0x0800b43d
 800b29c:	0800b45d 	.word	0x0800b45d
 800b2a0:	0800b48b 	.word	0x0800b48b
 800b2a4:	0800b55b 	.word	0x0800b55b
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b2ae:	b2db      	uxtb	r3, r3
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	f000 8193 	beq.w	800b5dc <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2201      	movs	r2, #1
 800b2ba:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800b2bc:	20c8      	movs	r0, #200	; 0xc8
 800b2be:	f001 fd2f 	bl	800cd20 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	f001 fbf5 	bl	800cab2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b2d8:	e180      	b.n	800b5dc <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800b2e0:	2b01      	cmp	r3, #1
 800b2e2:	d107      	bne.n	800b2f4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2202      	movs	r2, #2
 800b2f0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b2f2:	e182      	b.n	800b5fa <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b2fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b2fe:	d914      	bls.n	800b32a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b306:	3301      	adds	r3, #1
 800b308:	b2da      	uxtb	r2, r3
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b316:	2b03      	cmp	r3, #3
 800b318:	d903      	bls.n	800b322 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	220d      	movs	r2, #13
 800b31e:	701a      	strb	r2, [r3, #0]
      break;
 800b320:	e16b      	b.n	800b5fa <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2200      	movs	r2, #0
 800b326:	701a      	strb	r2, [r3, #0]
      break;
 800b328:	e167      	b.n	800b5fa <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b330:	f103 020a 	add.w	r2, r3, #10
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800b33a:	200a      	movs	r0, #10
 800b33c:	f001 fcf0 	bl	800cd20 <USBH_Delay>
      break;
 800b340:	e15b      	b.n	800b5fa <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d005      	beq.n	800b358 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b352:	2104      	movs	r1, #4
 800b354:	6878      	ldr	r0, [r7, #4]
 800b356:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800b358:	2064      	movs	r0, #100	; 0x64
 800b35a:	f001 fce1 	bl	800cd20 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f001 fb80 	bl	800ca64 <USBH_LL_GetSpeed>
 800b364:	4603      	mov	r3, r0
 800b366:	461a      	mov	r2, r3
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	2205      	movs	r2, #5
 800b372:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800b374:	2100      	movs	r1, #0
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	f001 f92f 	bl	800c5da <USBH_AllocPipe>
 800b37c:	4603      	mov	r3, r0
 800b37e:	461a      	mov	r2, r3
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800b384:	2180      	movs	r1, #128	; 0x80
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	f001 f927 	bl	800c5da <USBH_AllocPipe>
 800b38c:	4603      	mov	r3, r0
 800b38e:	461a      	mov	r2, r3
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	7919      	ldrb	r1, [r3, #4]
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b3a4:	687a      	ldr	r2, [r7, #4]
 800b3a6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b3a8:	b292      	uxth	r2, r2
 800b3aa:	9202      	str	r2, [sp, #8]
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	9201      	str	r2, [sp, #4]
 800b3b0:	9300      	str	r3, [sp, #0]
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	2280      	movs	r2, #128	; 0x80
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f001 f8e0 	bl	800c57c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	7959      	ldrb	r1, [r3, #5]
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b3cc:	687a      	ldr	r2, [r7, #4]
 800b3ce:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b3d0:	b292      	uxth	r2, r2
 800b3d2:	9202      	str	r2, [sp, #8]
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	9201      	str	r2, [sp, #4]
 800b3d8:	9300      	str	r3, [sp, #0]
 800b3da:	4603      	mov	r3, r0
 800b3dc:	2200      	movs	r2, #0
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	f001 f8cc 	bl	800c57c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b3e4:	e109      	b.n	800b5fa <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800b3e6:	6878      	ldr	r0, [r7, #4]
 800b3e8:	f000 f90c 	bl	800b604 <USBH_HandleEnum>
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800b3f0:	7bbb      	ldrb	r3, [r7, #14]
 800b3f2:	b2db      	uxtb	r3, r3
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	f040 80f3 	bne.w	800b5e0 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800b408:	2b01      	cmp	r3, #1
 800b40a:	d103      	bne.n	800b414 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2208      	movs	r2, #8
 800b410:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b412:	e0e5      	b.n	800b5e0 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2207      	movs	r2, #7
 800b418:	701a      	strb	r2, [r3, #0]
      break;
 800b41a:	e0e1      	b.n	800b5e0 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b422:	2b00      	cmp	r3, #0
 800b424:	f000 80de 	beq.w	800b5e4 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b42e:	2101      	movs	r1, #1
 800b430:	6878      	ldr	r0, [r7, #4]
 800b432:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2208      	movs	r2, #8
 800b438:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800b43a:	e0d3      	b.n	800b5e4 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800b442:	b29b      	uxth	r3, r3
 800b444:	4619      	mov	r1, r3
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f000 fc20 	bl	800bc8c <USBH_SetCfg>
 800b44c:	4603      	mov	r3, r0
 800b44e:	2b00      	cmp	r3, #0
 800b450:	f040 80ca 	bne.w	800b5e8 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2209      	movs	r2, #9
 800b458:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b45a:	e0c5      	b.n	800b5e8 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800b462:	f003 0320 	and.w	r3, r3, #32
 800b466:	2b00      	cmp	r3, #0
 800b468:	d00b      	beq.n	800b482 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800b46a:	2101      	movs	r1, #1
 800b46c:	6878      	ldr	r0, [r7, #4]
 800b46e:	f000 fc30 	bl	800bcd2 <USBH_SetFeature>
 800b472:	4603      	mov	r3, r0
 800b474:	2b00      	cmp	r3, #0
 800b476:	f040 80b9 	bne.w	800b5ec <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	220a      	movs	r2, #10
 800b47e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b480:	e0b4      	b.n	800b5ec <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	220a      	movs	r2, #10
 800b486:	701a      	strb	r2, [r3, #0]
      break;
 800b488:	e0b0      	b.n	800b5ec <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b490:	2b00      	cmp	r3, #0
 800b492:	f000 80ad 	beq.w	800b5f0 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	2200      	movs	r2, #0
 800b49a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b49e:	2300      	movs	r3, #0
 800b4a0:	73fb      	strb	r3, [r7, #15]
 800b4a2:	e016      	b.n	800b4d2 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800b4a4:	7bfa      	ldrb	r2, [r7, #15]
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	32de      	adds	r2, #222	; 0xde
 800b4aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4ae:	791a      	ldrb	r2, [r3, #4]
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800b4b6:	429a      	cmp	r2, r3
 800b4b8:	d108      	bne.n	800b4cc <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800b4ba:	7bfa      	ldrb	r2, [r7, #15]
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	32de      	adds	r2, #222	; 0xde
 800b4c0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800b4ca:	e005      	b.n	800b4d8 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b4cc:	7bfb      	ldrb	r3, [r7, #15]
 800b4ce:	3301      	adds	r3, #1
 800b4d0:	73fb      	strb	r3, [r7, #15]
 800b4d2:	7bfb      	ldrb	r3, [r7, #15]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d0e5      	beq.n	800b4a4 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d016      	beq.n	800b510 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b4e8:	689b      	ldr	r3, [r3, #8]
 800b4ea:	6878      	ldr	r0, [r7, #4]
 800b4ec:	4798      	blx	r3
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d109      	bne.n	800b508 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2206      	movs	r2, #6
 800b4f8:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b500:	2103      	movs	r1, #3
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b506:	e073      	b.n	800b5f0 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	220d      	movs	r2, #13
 800b50c:	701a      	strb	r2, [r3, #0]
      break;
 800b50e:	e06f      	b.n	800b5f0 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	220d      	movs	r2, #13
 800b514:	701a      	strb	r2, [r3, #0]
      break;
 800b516:	e06b      	b.n	800b5f0 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d017      	beq.n	800b552 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b528:	691b      	ldr	r3, [r3, #16]
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	4798      	blx	r3
 800b52e:	4603      	mov	r3, r0
 800b530:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b532:	7bbb      	ldrb	r3, [r7, #14]
 800b534:	b2db      	uxtb	r3, r3
 800b536:	2b00      	cmp	r3, #0
 800b538:	d103      	bne.n	800b542 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	220b      	movs	r2, #11
 800b53e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b540:	e058      	b.n	800b5f4 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800b542:	7bbb      	ldrb	r3, [r7, #14]
 800b544:	b2db      	uxtb	r3, r3
 800b546:	2b02      	cmp	r3, #2
 800b548:	d154      	bne.n	800b5f4 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	220d      	movs	r2, #13
 800b54e:	701a      	strb	r2, [r3, #0]
      break;
 800b550:	e050      	b.n	800b5f4 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	220d      	movs	r2, #13
 800b556:	701a      	strb	r2, [r3, #0]
      break;
 800b558:	e04c      	b.n	800b5f4 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b560:	2b00      	cmp	r3, #0
 800b562:	d049      	beq.n	800b5f8 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b56a:	695b      	ldr	r3, [r3, #20]
 800b56c:	6878      	ldr	r0, [r7, #4]
 800b56e:	4798      	blx	r3
      }
      break;
 800b570:	e042      	b.n	800b5f8 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2200      	movs	r2, #0
 800b576:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800b57a:	6878      	ldr	r0, [r7, #4]
 800b57c:	f7ff fd72 	bl	800b064 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b586:	2b00      	cmp	r3, #0
 800b588:	d009      	beq.n	800b59e <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b590:	68db      	ldr	r3, [r3, #12]
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	2200      	movs	r2, #0
 800b59a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d005      	beq.n	800b5b4 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b5ae:	2105      	movs	r1, #5
 800b5b0:	6878      	ldr	r0, [r7, #4]
 800b5b2:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800b5ba:	b2db      	uxtb	r3, r3
 800b5bc:	2b01      	cmp	r3, #1
 800b5be:	d107      	bne.n	800b5d0 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	f7ff fe2b 	bl	800b224 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b5ce:	e014      	b.n	800b5fa <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800b5d0:	6878      	ldr	r0, [r7, #4]
 800b5d2:	f001 fa11 	bl	800c9f8 <USBH_LL_Start>
      break;
 800b5d6:	e010      	b.n	800b5fa <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800b5d8:	bf00      	nop
 800b5da:	e00e      	b.n	800b5fa <USBH_Process+0x3b6>
      break;
 800b5dc:	bf00      	nop
 800b5de:	e00c      	b.n	800b5fa <USBH_Process+0x3b6>
      break;
 800b5e0:	bf00      	nop
 800b5e2:	e00a      	b.n	800b5fa <USBH_Process+0x3b6>
    break;
 800b5e4:	bf00      	nop
 800b5e6:	e008      	b.n	800b5fa <USBH_Process+0x3b6>
      break;
 800b5e8:	bf00      	nop
 800b5ea:	e006      	b.n	800b5fa <USBH_Process+0x3b6>
      break;
 800b5ec:	bf00      	nop
 800b5ee:	e004      	b.n	800b5fa <USBH_Process+0x3b6>
      break;
 800b5f0:	bf00      	nop
 800b5f2:	e002      	b.n	800b5fa <USBH_Process+0x3b6>
      break;
 800b5f4:	bf00      	nop
 800b5f6:	e000      	b.n	800b5fa <USBH_Process+0x3b6>
      break;
 800b5f8:	bf00      	nop
  }
  return USBH_OK;
 800b5fa:	2300      	movs	r3, #0
}
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	3710      	adds	r7, #16
 800b600:	46bd      	mov	sp, r7
 800b602:	bd80      	pop	{r7, pc}

0800b604 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b088      	sub	sp, #32
 800b608:	af04      	add	r7, sp, #16
 800b60a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b60c:	2301      	movs	r3, #1
 800b60e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800b610:	2301      	movs	r3, #1
 800b612:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	785b      	ldrb	r3, [r3, #1]
 800b618:	2b07      	cmp	r3, #7
 800b61a:	f200 81c1 	bhi.w	800b9a0 <USBH_HandleEnum+0x39c>
 800b61e:	a201      	add	r2, pc, #4	; (adr r2, 800b624 <USBH_HandleEnum+0x20>)
 800b620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b624:	0800b645 	.word	0x0800b645
 800b628:	0800b703 	.word	0x0800b703
 800b62c:	0800b76d 	.word	0x0800b76d
 800b630:	0800b7fb 	.word	0x0800b7fb
 800b634:	0800b865 	.word	0x0800b865
 800b638:	0800b8d5 	.word	0x0800b8d5
 800b63c:	0800b91b 	.word	0x0800b91b
 800b640:	0800b961 	.word	0x0800b961
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800b644:	2108      	movs	r1, #8
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f000 fa50 	bl	800baec <USBH_Get_DevDesc>
 800b64c:	4603      	mov	r3, r0
 800b64e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b650:	7bbb      	ldrb	r3, [r7, #14]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d130      	bne.n	800b6b8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2201      	movs	r2, #1
 800b664:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	7919      	ldrb	r1, [r3, #4]
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b676:	687a      	ldr	r2, [r7, #4]
 800b678:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b67a:	b292      	uxth	r2, r2
 800b67c:	9202      	str	r2, [sp, #8]
 800b67e:	2200      	movs	r2, #0
 800b680:	9201      	str	r2, [sp, #4]
 800b682:	9300      	str	r3, [sp, #0]
 800b684:	4603      	mov	r3, r0
 800b686:	2280      	movs	r2, #128	; 0x80
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f000 ff77 	bl	800c57c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	7959      	ldrb	r1, [r3, #5]
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b69e:	687a      	ldr	r2, [r7, #4]
 800b6a0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b6a2:	b292      	uxth	r2, r2
 800b6a4:	9202      	str	r2, [sp, #8]
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	9201      	str	r2, [sp, #4]
 800b6aa:	9300      	str	r3, [sp, #0]
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	6878      	ldr	r0, [r7, #4]
 800b6b2:	f000 ff63 	bl	800c57c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b6b6:	e175      	b.n	800b9a4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b6b8:	7bbb      	ldrb	r3, [r7, #14]
 800b6ba:	2b03      	cmp	r3, #3
 800b6bc:	f040 8172 	bne.w	800b9a4 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b6c6:	3301      	adds	r3, #1
 800b6c8:	b2da      	uxtb	r2, r3
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b6d6:	2b03      	cmp	r3, #3
 800b6d8:	d903      	bls.n	800b6e2 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	220d      	movs	r2, #13
 800b6de:	701a      	strb	r2, [r3, #0]
      break;
 800b6e0:	e160      	b.n	800b9a4 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	795b      	ldrb	r3, [r3, #5]
 800b6e6:	4619      	mov	r1, r3
 800b6e8:	6878      	ldr	r0, [r7, #4]
 800b6ea:	f000 ff97 	bl	800c61c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	791b      	ldrb	r3, [r3, #4]
 800b6f2:	4619      	mov	r1, r3
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	f000 ff91 	bl	800c61c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	701a      	strb	r2, [r3, #0]
      break;
 800b700:	e150      	b.n	800b9a4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800b702:	2112      	movs	r1, #18
 800b704:	6878      	ldr	r0, [r7, #4]
 800b706:	f000 f9f1 	bl	800baec <USBH_Get_DevDesc>
 800b70a:	4603      	mov	r3, r0
 800b70c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b70e:	7bbb      	ldrb	r3, [r7, #14]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d103      	bne.n	800b71c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2202      	movs	r2, #2
 800b718:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b71a:	e145      	b.n	800b9a8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b71c:	7bbb      	ldrb	r3, [r7, #14]
 800b71e:	2b03      	cmp	r3, #3
 800b720:	f040 8142 	bne.w	800b9a8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b72a:	3301      	adds	r3, #1
 800b72c:	b2da      	uxtb	r2, r3
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b73a:	2b03      	cmp	r3, #3
 800b73c:	d903      	bls.n	800b746 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	220d      	movs	r2, #13
 800b742:	701a      	strb	r2, [r3, #0]
      break;
 800b744:	e130      	b.n	800b9a8 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	795b      	ldrb	r3, [r3, #5]
 800b74a:	4619      	mov	r1, r3
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f000 ff65 	bl	800c61c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	791b      	ldrb	r3, [r3, #4]
 800b756:	4619      	mov	r1, r3
 800b758:	6878      	ldr	r0, [r7, #4]
 800b75a:	f000 ff5f 	bl	800c61c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	2200      	movs	r2, #0
 800b762:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2200      	movs	r2, #0
 800b768:	701a      	strb	r2, [r3, #0]
      break;
 800b76a:	e11d      	b.n	800b9a8 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800b76c:	2101      	movs	r1, #1
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f000 fa68 	bl	800bc44 <USBH_SetAddress>
 800b774:	4603      	mov	r3, r0
 800b776:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b778:	7bbb      	ldrb	r3, [r7, #14]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d132      	bne.n	800b7e4 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800b77e:	2002      	movs	r0, #2
 800b780:	f001 face 	bl	800cd20 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2201      	movs	r2, #1
 800b788:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2203      	movs	r2, #3
 800b790:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	7919      	ldrb	r1, [r3, #4]
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b7a2:	687a      	ldr	r2, [r7, #4]
 800b7a4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b7a6:	b292      	uxth	r2, r2
 800b7a8:	9202      	str	r2, [sp, #8]
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	9201      	str	r2, [sp, #4]
 800b7ae:	9300      	str	r3, [sp, #0]
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	2280      	movs	r2, #128	; 0x80
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	f000 fee1 	bl	800c57c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	7959      	ldrb	r1, [r3, #5]
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b7ca:	687a      	ldr	r2, [r7, #4]
 800b7cc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b7ce:	b292      	uxth	r2, r2
 800b7d0:	9202      	str	r2, [sp, #8]
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	9201      	str	r2, [sp, #4]
 800b7d6:	9300      	str	r3, [sp, #0]
 800b7d8:	4603      	mov	r3, r0
 800b7da:	2200      	movs	r2, #0
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f000 fecd 	bl	800c57c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b7e2:	e0e3      	b.n	800b9ac <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b7e4:	7bbb      	ldrb	r3, [r7, #14]
 800b7e6:	2b03      	cmp	r3, #3
 800b7e8:	f040 80e0 	bne.w	800b9ac <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	220d      	movs	r2, #13
 800b7f0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	705a      	strb	r2, [r3, #1]
      break;
 800b7f8:	e0d8      	b.n	800b9ac <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800b7fa:	2109      	movs	r1, #9
 800b7fc:	6878      	ldr	r0, [r7, #4]
 800b7fe:	f000 f99d 	bl	800bb3c <USBH_Get_CfgDesc>
 800b802:	4603      	mov	r3, r0
 800b804:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b806:	7bbb      	ldrb	r3, [r7, #14]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d103      	bne.n	800b814 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2204      	movs	r2, #4
 800b810:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b812:	e0cd      	b.n	800b9b0 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b814:	7bbb      	ldrb	r3, [r7, #14]
 800b816:	2b03      	cmp	r3, #3
 800b818:	f040 80ca 	bne.w	800b9b0 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b822:	3301      	adds	r3, #1
 800b824:	b2da      	uxtb	r2, r3
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b832:	2b03      	cmp	r3, #3
 800b834:	d903      	bls.n	800b83e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	220d      	movs	r2, #13
 800b83a:	701a      	strb	r2, [r3, #0]
      break;
 800b83c:	e0b8      	b.n	800b9b0 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	795b      	ldrb	r3, [r3, #5]
 800b842:	4619      	mov	r1, r3
 800b844:	6878      	ldr	r0, [r7, #4]
 800b846:	f000 fee9 	bl	800c61c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	791b      	ldrb	r3, [r3, #4]
 800b84e:	4619      	mov	r1, r3
 800b850:	6878      	ldr	r0, [r7, #4]
 800b852:	f000 fee3 	bl	800c61c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	2200      	movs	r2, #0
 800b85a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2200      	movs	r2, #0
 800b860:	701a      	strb	r2, [r3, #0]
      break;
 800b862:	e0a5      	b.n	800b9b0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800b86a:	4619      	mov	r1, r3
 800b86c:	6878      	ldr	r0, [r7, #4]
 800b86e:	f000 f965 	bl	800bb3c <USBH_Get_CfgDesc>
 800b872:	4603      	mov	r3, r0
 800b874:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b876:	7bbb      	ldrb	r3, [r7, #14]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d103      	bne.n	800b884 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2205      	movs	r2, #5
 800b880:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b882:	e097      	b.n	800b9b4 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b884:	7bbb      	ldrb	r3, [r7, #14]
 800b886:	2b03      	cmp	r3, #3
 800b888:	f040 8094 	bne.w	800b9b4 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b892:	3301      	adds	r3, #1
 800b894:	b2da      	uxtb	r2, r3
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b8a2:	2b03      	cmp	r3, #3
 800b8a4:	d903      	bls.n	800b8ae <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	220d      	movs	r2, #13
 800b8aa:	701a      	strb	r2, [r3, #0]
      break;
 800b8ac:	e082      	b.n	800b9b4 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	795b      	ldrb	r3, [r3, #5]
 800b8b2:	4619      	mov	r1, r3
 800b8b4:	6878      	ldr	r0, [r7, #4]
 800b8b6:	f000 feb1 	bl	800c61c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	791b      	ldrb	r3, [r3, #4]
 800b8be:	4619      	mov	r1, r3
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	f000 feab 	bl	800c61c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	701a      	strb	r2, [r3, #0]
      break;
 800b8d2:	e06f      	b.n	800b9b4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d019      	beq.n	800b912 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b8ea:	23ff      	movs	r3, #255	; 0xff
 800b8ec:	6878      	ldr	r0, [r7, #4]
 800b8ee:	f000 f949 	bl	800bb84 <USBH_Get_StringDesc>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b8f6:	7bbb      	ldrb	r3, [r7, #14]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d103      	bne.n	800b904 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2206      	movs	r2, #6
 800b900:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b902:	e059      	b.n	800b9b8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b904:	7bbb      	ldrb	r3, [r7, #14]
 800b906:	2b03      	cmp	r3, #3
 800b908:	d156      	bne.n	800b9b8 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	2206      	movs	r2, #6
 800b90e:	705a      	strb	r2, [r3, #1]
      break;
 800b910:	e052      	b.n	800b9b8 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2206      	movs	r2, #6
 800b916:	705a      	strb	r2, [r3, #1]
      break;
 800b918:	e04e      	b.n	800b9b8 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800b920:	2b00      	cmp	r3, #0
 800b922:	d019      	beq.n	800b958 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b930:	23ff      	movs	r3, #255	; 0xff
 800b932:	6878      	ldr	r0, [r7, #4]
 800b934:	f000 f926 	bl	800bb84 <USBH_Get_StringDesc>
 800b938:	4603      	mov	r3, r0
 800b93a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b93c:	7bbb      	ldrb	r3, [r7, #14]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d103      	bne.n	800b94a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	2207      	movs	r2, #7
 800b946:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b948:	e038      	b.n	800b9bc <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b94a:	7bbb      	ldrb	r3, [r7, #14]
 800b94c:	2b03      	cmp	r3, #3
 800b94e:	d135      	bne.n	800b9bc <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	2207      	movs	r2, #7
 800b954:	705a      	strb	r2, [r3, #1]
      break;
 800b956:	e031      	b.n	800b9bc <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2207      	movs	r2, #7
 800b95c:	705a      	strb	r2, [r3, #1]
      break;
 800b95e:	e02d      	b.n	800b9bc <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800b966:	2b00      	cmp	r3, #0
 800b968:	d017      	beq.n	800b99a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b976:	23ff      	movs	r3, #255	; 0xff
 800b978:	6878      	ldr	r0, [r7, #4]
 800b97a:	f000 f903 	bl	800bb84 <USBH_Get_StringDesc>
 800b97e:	4603      	mov	r3, r0
 800b980:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b982:	7bbb      	ldrb	r3, [r7, #14]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d102      	bne.n	800b98e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800b988:	2300      	movs	r3, #0
 800b98a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800b98c:	e018      	b.n	800b9c0 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b98e:	7bbb      	ldrb	r3, [r7, #14]
 800b990:	2b03      	cmp	r3, #3
 800b992:	d115      	bne.n	800b9c0 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800b994:	2300      	movs	r3, #0
 800b996:	73fb      	strb	r3, [r7, #15]
      break;
 800b998:	e012      	b.n	800b9c0 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800b99a:	2300      	movs	r3, #0
 800b99c:	73fb      	strb	r3, [r7, #15]
      break;
 800b99e:	e00f      	b.n	800b9c0 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800b9a0:	bf00      	nop
 800b9a2:	e00e      	b.n	800b9c2 <USBH_HandleEnum+0x3be>
      break;
 800b9a4:	bf00      	nop
 800b9a6:	e00c      	b.n	800b9c2 <USBH_HandleEnum+0x3be>
      break;
 800b9a8:	bf00      	nop
 800b9aa:	e00a      	b.n	800b9c2 <USBH_HandleEnum+0x3be>
      break;
 800b9ac:	bf00      	nop
 800b9ae:	e008      	b.n	800b9c2 <USBH_HandleEnum+0x3be>
      break;
 800b9b0:	bf00      	nop
 800b9b2:	e006      	b.n	800b9c2 <USBH_HandleEnum+0x3be>
      break;
 800b9b4:	bf00      	nop
 800b9b6:	e004      	b.n	800b9c2 <USBH_HandleEnum+0x3be>
      break;
 800b9b8:	bf00      	nop
 800b9ba:	e002      	b.n	800b9c2 <USBH_HandleEnum+0x3be>
      break;
 800b9bc:	bf00      	nop
 800b9be:	e000      	b.n	800b9c2 <USBH_HandleEnum+0x3be>
      break;
 800b9c0:	bf00      	nop
  }
  return Status;
 800b9c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	3710      	adds	r7, #16
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	bd80      	pop	{r7, pc}

0800b9cc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800b9cc:	b480      	push	{r7}
 800b9ce:	b083      	sub	sp, #12
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
 800b9d4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	683a      	ldr	r2, [r7, #0]
 800b9da:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800b9de:	bf00      	nop
 800b9e0:	370c      	adds	r7, #12
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e8:	4770      	bx	lr

0800b9ea <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b9ea:	b580      	push	{r7, lr}
 800b9ec:	b082      	sub	sp, #8
 800b9ee:	af00      	add	r7, sp, #0
 800b9f0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b9f8:	1c5a      	adds	r2, r3, #1
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800ba00:	6878      	ldr	r0, [r7, #4]
 800ba02:	f000 f804 	bl	800ba0e <USBH_HandleSof>
}
 800ba06:	bf00      	nop
 800ba08:	3708      	adds	r7, #8
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	bd80      	pop	{r7, pc}

0800ba0e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800ba0e:	b580      	push	{r7, lr}
 800ba10:	b082      	sub	sp, #8
 800ba12:	af00      	add	r7, sp, #0
 800ba14:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	781b      	ldrb	r3, [r3, #0]
 800ba1a:	b2db      	uxtb	r3, r3
 800ba1c:	2b0b      	cmp	r3, #11
 800ba1e:	d10a      	bne.n	800ba36 <USBH_HandleSof+0x28>
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d005      	beq.n	800ba36 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ba30:	699b      	ldr	r3, [r3, #24]
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	4798      	blx	r3
  }
}
 800ba36:	bf00      	nop
 800ba38:	3708      	adds	r7, #8
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	bd80      	pop	{r7, pc}

0800ba3e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800ba3e:	b480      	push	{r7}
 800ba40:	b083      	sub	sp, #12
 800ba42:	af00      	add	r7, sp, #0
 800ba44:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	2201      	movs	r2, #1
 800ba4a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800ba4e:	bf00      	nop
}
 800ba50:	370c      	adds	r7, #12
 800ba52:	46bd      	mov	sp, r7
 800ba54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba58:	4770      	bx	lr

0800ba5a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800ba5a:	b480      	push	{r7}
 800ba5c:	b083      	sub	sp, #12
 800ba5e:	af00      	add	r7, sp, #0
 800ba60:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	2200      	movs	r2, #0
 800ba66:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800ba6a:	bf00      	nop
}
 800ba6c:	370c      	adds	r7, #12
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba74:	4770      	bx	lr

0800ba76 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800ba76:	b480      	push	{r7}
 800ba78:	b083      	sub	sp, #12
 800ba7a:	af00      	add	r7, sp, #0
 800ba7c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	2201      	movs	r2, #1
 800ba82:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	2200      	movs	r2, #0
 800ba8a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	2200      	movs	r2, #0
 800ba92:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800ba96:	2300      	movs	r3, #0
}
 800ba98:	4618      	mov	r0, r3
 800ba9a:	370c      	adds	r7, #12
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa2:	4770      	bx	lr

0800baa4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b082      	sub	sp, #8
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2201      	movs	r2, #1
 800bab0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2200      	movs	r2, #0
 800bab8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2200      	movs	r2, #0
 800bac0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800bac4:	6878      	ldr	r0, [r7, #4]
 800bac6:	f000 ffb2 	bl	800ca2e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	791b      	ldrb	r3, [r3, #4]
 800bace:	4619      	mov	r1, r3
 800bad0:	6878      	ldr	r0, [r7, #4]
 800bad2:	f000 fda3 	bl	800c61c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	795b      	ldrb	r3, [r3, #5]
 800bada:	4619      	mov	r1, r3
 800badc:	6878      	ldr	r0, [r7, #4]
 800bade:	f000 fd9d 	bl	800c61c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800bae2:	2300      	movs	r3, #0
}
 800bae4:	4618      	mov	r0, r3
 800bae6:	3708      	adds	r7, #8
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}

0800baec <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b086      	sub	sp, #24
 800baf0:	af02      	add	r7, sp, #8
 800baf2:	6078      	str	r0, [r7, #4]
 800baf4:	460b      	mov	r3, r1
 800baf6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800bafe:	78fb      	ldrb	r3, [r7, #3]
 800bb00:	b29b      	uxth	r3, r3
 800bb02:	9300      	str	r3, [sp, #0]
 800bb04:	4613      	mov	r3, r2
 800bb06:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bb0a:	2100      	movs	r1, #0
 800bb0c:	6878      	ldr	r0, [r7, #4]
 800bb0e:	f000 f864 	bl	800bbda <USBH_GetDescriptor>
 800bb12:	4603      	mov	r3, r0
 800bb14:	73fb      	strb	r3, [r7, #15]
 800bb16:	7bfb      	ldrb	r3, [r7, #15]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d10a      	bne.n	800bb32 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	f203 3026 	addw	r0, r3, #806	; 0x326
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800bb28:	78fa      	ldrb	r2, [r7, #3]
 800bb2a:	b292      	uxth	r2, r2
 800bb2c:	4619      	mov	r1, r3
 800bb2e:	f000 f918 	bl	800bd62 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800bb32:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	3710      	adds	r7, #16
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bd80      	pop	{r7, pc}

0800bb3c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b086      	sub	sp, #24
 800bb40:	af02      	add	r7, sp, #8
 800bb42:	6078      	str	r0, [r7, #4]
 800bb44:	460b      	mov	r3, r1
 800bb46:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	331c      	adds	r3, #28
 800bb4c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800bb4e:	887b      	ldrh	r3, [r7, #2]
 800bb50:	9300      	str	r3, [sp, #0]
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bb58:	2100      	movs	r1, #0
 800bb5a:	6878      	ldr	r0, [r7, #4]
 800bb5c:	f000 f83d 	bl	800bbda <USBH_GetDescriptor>
 800bb60:	4603      	mov	r3, r0
 800bb62:	72fb      	strb	r3, [r7, #11]
 800bb64:	7afb      	ldrb	r3, [r7, #11]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d107      	bne.n	800bb7a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800bb70:	887a      	ldrh	r2, [r7, #2]
 800bb72:	68f9      	ldr	r1, [r7, #12]
 800bb74:	4618      	mov	r0, r3
 800bb76:	f000 f964 	bl	800be42 <USBH_ParseCfgDesc>
  }

  return status;
 800bb7a:	7afb      	ldrb	r3, [r7, #11]
}
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	3710      	adds	r7, #16
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}

0800bb84 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b088      	sub	sp, #32
 800bb88:	af02      	add	r7, sp, #8
 800bb8a:	60f8      	str	r0, [r7, #12]
 800bb8c:	607a      	str	r2, [r7, #4]
 800bb8e:	461a      	mov	r2, r3
 800bb90:	460b      	mov	r3, r1
 800bb92:	72fb      	strb	r3, [r7, #11]
 800bb94:	4613      	mov	r3, r2
 800bb96:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800bb98:	7afb      	ldrb	r3, [r7, #11]
 800bb9a:	b29b      	uxth	r3, r3
 800bb9c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800bba0:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800bba8:	893b      	ldrh	r3, [r7, #8]
 800bbaa:	9300      	str	r3, [sp, #0]
 800bbac:	460b      	mov	r3, r1
 800bbae:	2100      	movs	r1, #0
 800bbb0:	68f8      	ldr	r0, [r7, #12]
 800bbb2:	f000 f812 	bl	800bbda <USBH_GetDescriptor>
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	75fb      	strb	r3, [r7, #23]
 800bbba:	7dfb      	ldrb	r3, [r7, #23]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d107      	bne.n	800bbd0 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800bbc6:	893a      	ldrh	r2, [r7, #8]
 800bbc8:	6879      	ldr	r1, [r7, #4]
 800bbca:	4618      	mov	r0, r3
 800bbcc:	f000 fa37 	bl	800c03e <USBH_ParseStringDesc>
  }

  return status;
 800bbd0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	3718      	adds	r7, #24
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	bd80      	pop	{r7, pc}

0800bbda <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800bbda:	b580      	push	{r7, lr}
 800bbdc:	b084      	sub	sp, #16
 800bbde:	af00      	add	r7, sp, #0
 800bbe0:	60f8      	str	r0, [r7, #12]
 800bbe2:	607b      	str	r3, [r7, #4]
 800bbe4:	460b      	mov	r3, r1
 800bbe6:	72fb      	strb	r3, [r7, #11]
 800bbe8:	4613      	mov	r3, r2
 800bbea:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	789b      	ldrb	r3, [r3, #2]
 800bbf0:	2b01      	cmp	r3, #1
 800bbf2:	d11c      	bne.n	800bc2e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800bbf4:	7afb      	ldrb	r3, [r7, #11]
 800bbf6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bbfa:	b2da      	uxtb	r2, r3
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	2206      	movs	r2, #6
 800bc04:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	893a      	ldrh	r2, [r7, #8]
 800bc0a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800bc0c:	893b      	ldrh	r3, [r7, #8]
 800bc0e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800bc12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bc16:	d104      	bne.n	800bc22 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	f240 4209 	movw	r2, #1033	; 0x409
 800bc1e:	829a      	strh	r2, [r3, #20]
 800bc20:	e002      	b.n	800bc28 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	2200      	movs	r2, #0
 800bc26:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	8b3a      	ldrh	r2, [r7, #24]
 800bc2c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800bc2e:	8b3b      	ldrh	r3, [r7, #24]
 800bc30:	461a      	mov	r2, r3
 800bc32:	6879      	ldr	r1, [r7, #4]
 800bc34:	68f8      	ldr	r0, [r7, #12]
 800bc36:	f000 fa50 	bl	800c0da <USBH_CtlReq>
 800bc3a:	4603      	mov	r3, r0
}
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	3710      	adds	r7, #16
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd80      	pop	{r7, pc}

0800bc44 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b082      	sub	sp, #8
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
 800bc4c:	460b      	mov	r3, r1
 800bc4e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	789b      	ldrb	r3, [r3, #2]
 800bc54:	2b01      	cmp	r3, #1
 800bc56:	d10f      	bne.n	800bc78 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2205      	movs	r2, #5
 800bc62:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800bc64:	78fb      	ldrb	r3, [r7, #3]
 800bc66:	b29a      	uxth	r2, r3
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2200      	movs	r2, #0
 800bc70:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2200      	movs	r2, #0
 800bc76:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800bc78:	2200      	movs	r2, #0
 800bc7a:	2100      	movs	r1, #0
 800bc7c:	6878      	ldr	r0, [r7, #4]
 800bc7e:	f000 fa2c 	bl	800c0da <USBH_CtlReq>
 800bc82:	4603      	mov	r3, r0
}
 800bc84:	4618      	mov	r0, r3
 800bc86:	3708      	adds	r7, #8
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	bd80      	pop	{r7, pc}

0800bc8c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b082      	sub	sp, #8
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
 800bc94:	460b      	mov	r3, r1
 800bc96:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	789b      	ldrb	r3, [r3, #2]
 800bc9c:	2b01      	cmp	r3, #1
 800bc9e:	d10e      	bne.n	800bcbe <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2200      	movs	r2, #0
 800bca4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	2209      	movs	r2, #9
 800bcaa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	887a      	ldrh	r2, [r7, #2]
 800bcb0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2200      	movs	r2, #0
 800bcbc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	2100      	movs	r1, #0
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	f000 fa09 	bl	800c0da <USBH_CtlReq>
 800bcc8:	4603      	mov	r3, r0
}
 800bcca:	4618      	mov	r0, r3
 800bccc:	3708      	adds	r7, #8
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	bd80      	pop	{r7, pc}

0800bcd2 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800bcd2:	b580      	push	{r7, lr}
 800bcd4:	b082      	sub	sp, #8
 800bcd6:	af00      	add	r7, sp, #0
 800bcd8:	6078      	str	r0, [r7, #4]
 800bcda:	460b      	mov	r3, r1
 800bcdc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	789b      	ldrb	r3, [r3, #2]
 800bce2:	2b01      	cmp	r3, #1
 800bce4:	d10f      	bne.n	800bd06 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	2200      	movs	r2, #0
 800bcea:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	2203      	movs	r2, #3
 800bcf0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800bcf2:	78fb      	ldrb	r3, [r7, #3]
 800bcf4:	b29a      	uxth	r2, r3
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2200      	movs	r2, #0
 800bd04:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800bd06:	2200      	movs	r2, #0
 800bd08:	2100      	movs	r1, #0
 800bd0a:	6878      	ldr	r0, [r7, #4]
 800bd0c:	f000 f9e5 	bl	800c0da <USBH_CtlReq>
 800bd10:	4603      	mov	r3, r0
}
 800bd12:	4618      	mov	r0, r3
 800bd14:	3708      	adds	r7, #8
 800bd16:	46bd      	mov	sp, r7
 800bd18:	bd80      	pop	{r7, pc}

0800bd1a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800bd1a:	b580      	push	{r7, lr}
 800bd1c:	b082      	sub	sp, #8
 800bd1e:	af00      	add	r7, sp, #0
 800bd20:	6078      	str	r0, [r7, #4]
 800bd22:	460b      	mov	r3, r1
 800bd24:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	789b      	ldrb	r3, [r3, #2]
 800bd2a:	2b01      	cmp	r3, #1
 800bd2c:	d10f      	bne.n	800bd4e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	2202      	movs	r2, #2
 800bd32:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2201      	movs	r2, #1
 800bd38:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800bd40:	78fb      	ldrb	r3, [r7, #3]
 800bd42:	b29a      	uxth	r2, r3
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800bd4e:	2200      	movs	r2, #0
 800bd50:	2100      	movs	r1, #0
 800bd52:	6878      	ldr	r0, [r7, #4]
 800bd54:	f000 f9c1 	bl	800c0da <USBH_CtlReq>
 800bd58:	4603      	mov	r3, r0
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	3708      	adds	r7, #8
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bd80      	pop	{r7, pc}

0800bd62 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800bd62:	b480      	push	{r7}
 800bd64:	b085      	sub	sp, #20
 800bd66:	af00      	add	r7, sp, #0
 800bd68:	60f8      	str	r0, [r7, #12]
 800bd6a:	60b9      	str	r1, [r7, #8]
 800bd6c:	4613      	mov	r3, r2
 800bd6e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800bd70:	68bb      	ldr	r3, [r7, #8]
 800bd72:	781a      	ldrb	r2, [r3, #0]
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800bd78:	68bb      	ldr	r3, [r7, #8]
 800bd7a:	785a      	ldrb	r2, [r3, #1]
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800bd80:	68bb      	ldr	r3, [r7, #8]
 800bd82:	3302      	adds	r3, #2
 800bd84:	781b      	ldrb	r3, [r3, #0]
 800bd86:	b29a      	uxth	r2, r3
 800bd88:	68bb      	ldr	r3, [r7, #8]
 800bd8a:	3303      	adds	r3, #3
 800bd8c:	781b      	ldrb	r3, [r3, #0]
 800bd8e:	b29b      	uxth	r3, r3
 800bd90:	021b      	lsls	r3, r3, #8
 800bd92:	b29b      	uxth	r3, r3
 800bd94:	4313      	orrs	r3, r2
 800bd96:	b29a      	uxth	r2, r3
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800bd9c:	68bb      	ldr	r3, [r7, #8]
 800bd9e:	791a      	ldrb	r2, [r3, #4]
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800bda4:	68bb      	ldr	r3, [r7, #8]
 800bda6:	795a      	ldrb	r2, [r3, #5]
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800bdac:	68bb      	ldr	r3, [r7, #8]
 800bdae:	799a      	ldrb	r2, [r3, #6]
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	79da      	ldrb	r2, [r3, #7]
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800bdbc:	88fb      	ldrh	r3, [r7, #6]
 800bdbe:	2b08      	cmp	r3, #8
 800bdc0:	d939      	bls.n	800be36 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800bdc2:	68bb      	ldr	r3, [r7, #8]
 800bdc4:	3308      	adds	r3, #8
 800bdc6:	781b      	ldrb	r3, [r3, #0]
 800bdc8:	b29a      	uxth	r2, r3
 800bdca:	68bb      	ldr	r3, [r7, #8]
 800bdcc:	3309      	adds	r3, #9
 800bdce:	781b      	ldrb	r3, [r3, #0]
 800bdd0:	b29b      	uxth	r3, r3
 800bdd2:	021b      	lsls	r3, r3, #8
 800bdd4:	b29b      	uxth	r3, r3
 800bdd6:	4313      	orrs	r3, r2
 800bdd8:	b29a      	uxth	r2, r3
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800bdde:	68bb      	ldr	r3, [r7, #8]
 800bde0:	330a      	adds	r3, #10
 800bde2:	781b      	ldrb	r3, [r3, #0]
 800bde4:	b29a      	uxth	r2, r3
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	330b      	adds	r3, #11
 800bdea:	781b      	ldrb	r3, [r3, #0]
 800bdec:	b29b      	uxth	r3, r3
 800bdee:	021b      	lsls	r3, r3, #8
 800bdf0:	b29b      	uxth	r3, r3
 800bdf2:	4313      	orrs	r3, r2
 800bdf4:	b29a      	uxth	r2, r3
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800bdfa:	68bb      	ldr	r3, [r7, #8]
 800bdfc:	330c      	adds	r3, #12
 800bdfe:	781b      	ldrb	r3, [r3, #0]
 800be00:	b29a      	uxth	r2, r3
 800be02:	68bb      	ldr	r3, [r7, #8]
 800be04:	330d      	adds	r3, #13
 800be06:	781b      	ldrb	r3, [r3, #0]
 800be08:	b29b      	uxth	r3, r3
 800be0a:	021b      	lsls	r3, r3, #8
 800be0c:	b29b      	uxth	r3, r3
 800be0e:	4313      	orrs	r3, r2
 800be10:	b29a      	uxth	r2, r3
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800be16:	68bb      	ldr	r3, [r7, #8]
 800be18:	7b9a      	ldrb	r2, [r3, #14]
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800be1e:	68bb      	ldr	r3, [r7, #8]
 800be20:	7bda      	ldrb	r2, [r3, #15]
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800be26:	68bb      	ldr	r3, [r7, #8]
 800be28:	7c1a      	ldrb	r2, [r3, #16]
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800be2e:	68bb      	ldr	r3, [r7, #8]
 800be30:	7c5a      	ldrb	r2, [r3, #17]
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	745a      	strb	r2, [r3, #17]
  }
}
 800be36:	bf00      	nop
 800be38:	3714      	adds	r7, #20
 800be3a:	46bd      	mov	sp, r7
 800be3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be40:	4770      	bx	lr

0800be42 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800be42:	b580      	push	{r7, lr}
 800be44:	b08a      	sub	sp, #40	; 0x28
 800be46:	af00      	add	r7, sp, #0
 800be48:	60f8      	str	r0, [r7, #12]
 800be4a:	60b9      	str	r1, [r7, #8]
 800be4c:	4613      	mov	r3, r2
 800be4e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800be50:	68bb      	ldr	r3, [r7, #8]
 800be52:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800be54:	2300      	movs	r3, #0
 800be56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800be5a:	2300      	movs	r3, #0
 800be5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800be60:	68bb      	ldr	r3, [r7, #8]
 800be62:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	781a      	ldrb	r2, [r3, #0]
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800be6c:	68bb      	ldr	r3, [r7, #8]
 800be6e:	785a      	ldrb	r2, [r3, #1]
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800be74:	68bb      	ldr	r3, [r7, #8]
 800be76:	3302      	adds	r3, #2
 800be78:	781b      	ldrb	r3, [r3, #0]
 800be7a:	b29a      	uxth	r2, r3
 800be7c:	68bb      	ldr	r3, [r7, #8]
 800be7e:	3303      	adds	r3, #3
 800be80:	781b      	ldrb	r3, [r3, #0]
 800be82:	b29b      	uxth	r3, r3
 800be84:	021b      	lsls	r3, r3, #8
 800be86:	b29b      	uxth	r3, r3
 800be88:	4313      	orrs	r3, r2
 800be8a:	b29a      	uxth	r2, r3
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	791a      	ldrb	r2, [r3, #4]
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800be98:	68bb      	ldr	r3, [r7, #8]
 800be9a:	795a      	ldrb	r2, [r3, #5]
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800bea0:	68bb      	ldr	r3, [r7, #8]
 800bea2:	799a      	ldrb	r2, [r3, #6]
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	79da      	ldrb	r2, [r3, #7]
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800beb0:	68bb      	ldr	r3, [r7, #8]
 800beb2:	7a1a      	ldrb	r2, [r3, #8]
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800beb8:	88fb      	ldrh	r3, [r7, #6]
 800beba:	2b09      	cmp	r3, #9
 800bebc:	d95f      	bls.n	800bf7e <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800bebe:	2309      	movs	r3, #9
 800bec0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800bec2:	2300      	movs	r3, #0
 800bec4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800bec6:	e051      	b.n	800bf6c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800bec8:	f107 0316 	add.w	r3, r7, #22
 800becc:	4619      	mov	r1, r3
 800bece:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bed0:	f000 f8e8 	bl	800c0a4 <USBH_GetNextDesc>
 800bed4:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800bed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed8:	785b      	ldrb	r3, [r3, #1]
 800beda:	2b04      	cmp	r3, #4
 800bedc:	d146      	bne.n	800bf6c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800bede:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bee2:	221a      	movs	r2, #26
 800bee4:	fb02 f303 	mul.w	r3, r2, r3
 800bee8:	3308      	adds	r3, #8
 800beea:	68fa      	ldr	r2, [r7, #12]
 800beec:	4413      	add	r3, r2
 800beee:	3302      	adds	r3, #2
 800bef0:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800bef2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bef4:	69f8      	ldr	r0, [r7, #28]
 800bef6:	f000 f846 	bl	800bf86 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800befa:	2300      	movs	r3, #0
 800befc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800bf00:	2300      	movs	r3, #0
 800bf02:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800bf04:	e022      	b.n	800bf4c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800bf06:	f107 0316 	add.w	r3, r7, #22
 800bf0a:	4619      	mov	r1, r3
 800bf0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bf0e:	f000 f8c9 	bl	800c0a4 <USBH_GetNextDesc>
 800bf12:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800bf14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf16:	785b      	ldrb	r3, [r3, #1]
 800bf18:	2b05      	cmp	r3, #5
 800bf1a:	d117      	bne.n	800bf4c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800bf1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bf20:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800bf24:	3201      	adds	r2, #1
 800bf26:	00d2      	lsls	r2, r2, #3
 800bf28:	211a      	movs	r1, #26
 800bf2a:	fb01 f303 	mul.w	r3, r1, r3
 800bf2e:	4413      	add	r3, r2
 800bf30:	3308      	adds	r3, #8
 800bf32:	68fa      	ldr	r2, [r7, #12]
 800bf34:	4413      	add	r3, r2
 800bf36:	3304      	adds	r3, #4
 800bf38:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800bf3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bf3c:	69b8      	ldr	r0, [r7, #24]
 800bf3e:	f000 f851 	bl	800bfe4 <USBH_ParseEPDesc>
            ep_ix++;
 800bf42:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800bf46:	3301      	adds	r3, #1
 800bf48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800bf4c:	69fb      	ldr	r3, [r7, #28]
 800bf4e:	791b      	ldrb	r3, [r3, #4]
 800bf50:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800bf54:	429a      	cmp	r2, r3
 800bf56:	d204      	bcs.n	800bf62 <USBH_ParseCfgDesc+0x120>
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	885a      	ldrh	r2, [r3, #2]
 800bf5c:	8afb      	ldrh	r3, [r7, #22]
 800bf5e:	429a      	cmp	r2, r3
 800bf60:	d8d1      	bhi.n	800bf06 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800bf62:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bf66:	3301      	adds	r3, #1
 800bf68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800bf6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bf70:	2b01      	cmp	r3, #1
 800bf72:	d804      	bhi.n	800bf7e <USBH_ParseCfgDesc+0x13c>
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	885a      	ldrh	r2, [r3, #2]
 800bf78:	8afb      	ldrh	r3, [r7, #22]
 800bf7a:	429a      	cmp	r2, r3
 800bf7c:	d8a4      	bhi.n	800bec8 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800bf7e:	bf00      	nop
 800bf80:	3728      	adds	r7, #40	; 0x28
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}

0800bf86 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800bf86:	b480      	push	{r7}
 800bf88:	b083      	sub	sp, #12
 800bf8a:	af00      	add	r7, sp, #0
 800bf8c:	6078      	str	r0, [r7, #4]
 800bf8e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	781a      	ldrb	r2, [r3, #0]
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800bf98:	683b      	ldr	r3, [r7, #0]
 800bf9a:	785a      	ldrb	r2, [r3, #1]
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	789a      	ldrb	r2, [r3, #2]
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	78da      	ldrb	r2, [r3, #3]
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	791a      	ldrb	r2, [r3, #4]
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800bfb8:	683b      	ldr	r3, [r7, #0]
 800bfba:	795a      	ldrb	r2, [r3, #5]
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	799a      	ldrb	r2, [r3, #6]
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	79da      	ldrb	r2, [r3, #7]
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800bfd0:	683b      	ldr	r3, [r7, #0]
 800bfd2:	7a1a      	ldrb	r2, [r3, #8]
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	721a      	strb	r2, [r3, #8]
}
 800bfd8:	bf00      	nop
 800bfda:	370c      	adds	r7, #12
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe2:	4770      	bx	lr

0800bfe4 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800bfe4:	b480      	push	{r7}
 800bfe6:	b083      	sub	sp, #12
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
 800bfec:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800bfee:	683b      	ldr	r3, [r7, #0]
 800bff0:	781a      	ldrb	r2, [r3, #0]
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	785a      	ldrb	r2, [r3, #1]
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800bffe:	683b      	ldr	r3, [r7, #0]
 800c000:	789a      	ldrb	r2, [r3, #2]
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800c006:	683b      	ldr	r3, [r7, #0]
 800c008:	78da      	ldrb	r2, [r3, #3]
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	3304      	adds	r3, #4
 800c012:	781b      	ldrb	r3, [r3, #0]
 800c014:	b29a      	uxth	r2, r3
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	3305      	adds	r3, #5
 800c01a:	781b      	ldrb	r3, [r3, #0]
 800c01c:	b29b      	uxth	r3, r3
 800c01e:	021b      	lsls	r3, r3, #8
 800c020:	b29b      	uxth	r3, r3
 800c022:	4313      	orrs	r3, r2
 800c024:	b29a      	uxth	r2, r3
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	799a      	ldrb	r2, [r3, #6]
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	719a      	strb	r2, [r3, #6]
}
 800c032:	bf00      	nop
 800c034:	370c      	adds	r7, #12
 800c036:	46bd      	mov	sp, r7
 800c038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03c:	4770      	bx	lr

0800c03e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800c03e:	b480      	push	{r7}
 800c040:	b087      	sub	sp, #28
 800c042:	af00      	add	r7, sp, #0
 800c044:	60f8      	str	r0, [r7, #12]
 800c046:	60b9      	str	r1, [r7, #8]
 800c048:	4613      	mov	r3, r2
 800c04a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	3301      	adds	r3, #1
 800c050:	781b      	ldrb	r3, [r3, #0]
 800c052:	2b03      	cmp	r3, #3
 800c054:	d120      	bne.n	800c098 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	781b      	ldrb	r3, [r3, #0]
 800c05a:	1e9a      	subs	r2, r3, #2
 800c05c:	88fb      	ldrh	r3, [r7, #6]
 800c05e:	4293      	cmp	r3, r2
 800c060:	bf28      	it	cs
 800c062:	4613      	movcs	r3, r2
 800c064:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	3302      	adds	r3, #2
 800c06a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800c06c:	2300      	movs	r3, #0
 800c06e:	82fb      	strh	r3, [r7, #22]
 800c070:	e00b      	b.n	800c08a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800c072:	8afb      	ldrh	r3, [r7, #22]
 800c074:	68fa      	ldr	r2, [r7, #12]
 800c076:	4413      	add	r3, r2
 800c078:	781a      	ldrb	r2, [r3, #0]
 800c07a:	68bb      	ldr	r3, [r7, #8]
 800c07c:	701a      	strb	r2, [r3, #0]
      pdest++;
 800c07e:	68bb      	ldr	r3, [r7, #8]
 800c080:	3301      	adds	r3, #1
 800c082:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800c084:	8afb      	ldrh	r3, [r7, #22]
 800c086:	3302      	adds	r3, #2
 800c088:	82fb      	strh	r3, [r7, #22]
 800c08a:	8afa      	ldrh	r2, [r7, #22]
 800c08c:	8abb      	ldrh	r3, [r7, #20]
 800c08e:	429a      	cmp	r2, r3
 800c090:	d3ef      	bcc.n	800c072 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800c092:	68bb      	ldr	r3, [r7, #8]
 800c094:	2200      	movs	r2, #0
 800c096:	701a      	strb	r2, [r3, #0]
  }
}
 800c098:	bf00      	nop
 800c09a:	371c      	adds	r7, #28
 800c09c:	46bd      	mov	sp, r7
 800c09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a2:	4770      	bx	lr

0800c0a4 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800c0a4:	b480      	push	{r7}
 800c0a6:	b085      	sub	sp, #20
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
 800c0ac:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	881a      	ldrh	r2, [r3, #0]
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	781b      	ldrb	r3, [r3, #0]
 800c0b6:	b29b      	uxth	r3, r3
 800c0b8:	4413      	add	r3, r2
 800c0ba:	b29a      	uxth	r2, r3
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	781b      	ldrb	r3, [r3, #0]
 800c0c4:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	4413      	add	r3, r2
 800c0ca:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c0cc:	68fb      	ldr	r3, [r7, #12]
}
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	3714      	adds	r7, #20
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d8:	4770      	bx	lr

0800c0da <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800c0da:	b580      	push	{r7, lr}
 800c0dc:	b086      	sub	sp, #24
 800c0de:	af00      	add	r7, sp, #0
 800c0e0:	60f8      	str	r0, [r7, #12]
 800c0e2:	60b9      	str	r1, [r7, #8]
 800c0e4:	4613      	mov	r3, r2
 800c0e6:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800c0e8:	2301      	movs	r3, #1
 800c0ea:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	789b      	ldrb	r3, [r3, #2]
 800c0f0:	2b01      	cmp	r3, #1
 800c0f2:	d002      	beq.n	800c0fa <USBH_CtlReq+0x20>
 800c0f4:	2b02      	cmp	r3, #2
 800c0f6:	d00f      	beq.n	800c118 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800c0f8:	e027      	b.n	800c14a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	68ba      	ldr	r2, [r7, #8]
 800c0fe:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	88fa      	ldrh	r2, [r7, #6]
 800c104:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	2201      	movs	r2, #1
 800c10a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	2202      	movs	r2, #2
 800c110:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800c112:	2301      	movs	r3, #1
 800c114:	75fb      	strb	r3, [r7, #23]
      break;
 800c116:	e018      	b.n	800c14a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800c118:	68f8      	ldr	r0, [r7, #12]
 800c11a:	f000 f81b 	bl	800c154 <USBH_HandleControl>
 800c11e:	4603      	mov	r3, r0
 800c120:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800c122:	7dfb      	ldrb	r3, [r7, #23]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d002      	beq.n	800c12e <USBH_CtlReq+0x54>
 800c128:	7dfb      	ldrb	r3, [r7, #23]
 800c12a:	2b03      	cmp	r3, #3
 800c12c:	d106      	bne.n	800c13c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	2201      	movs	r2, #1
 800c132:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	2200      	movs	r2, #0
 800c138:	761a      	strb	r2, [r3, #24]
      break;
 800c13a:	e005      	b.n	800c148 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800c13c:	7dfb      	ldrb	r3, [r7, #23]
 800c13e:	2b02      	cmp	r3, #2
 800c140:	d102      	bne.n	800c148 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	2201      	movs	r2, #1
 800c146:	709a      	strb	r2, [r3, #2]
      break;
 800c148:	bf00      	nop
  }
  return status;
 800c14a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c14c:	4618      	mov	r0, r3
 800c14e:	3718      	adds	r7, #24
 800c150:	46bd      	mov	sp, r7
 800c152:	bd80      	pop	{r7, pc}

0800c154 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b086      	sub	sp, #24
 800c158:	af02      	add	r7, sp, #8
 800c15a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800c15c:	2301      	movs	r3, #1
 800c15e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c160:	2300      	movs	r3, #0
 800c162:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	7e1b      	ldrb	r3, [r3, #24]
 800c168:	3b01      	subs	r3, #1
 800c16a:	2b0a      	cmp	r3, #10
 800c16c:	f200 8156 	bhi.w	800c41c <USBH_HandleControl+0x2c8>
 800c170:	a201      	add	r2, pc, #4	; (adr r2, 800c178 <USBH_HandleControl+0x24>)
 800c172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c176:	bf00      	nop
 800c178:	0800c1a5 	.word	0x0800c1a5
 800c17c:	0800c1bf 	.word	0x0800c1bf
 800c180:	0800c229 	.word	0x0800c229
 800c184:	0800c24f 	.word	0x0800c24f
 800c188:	0800c287 	.word	0x0800c287
 800c18c:	0800c2b1 	.word	0x0800c2b1
 800c190:	0800c303 	.word	0x0800c303
 800c194:	0800c325 	.word	0x0800c325
 800c198:	0800c361 	.word	0x0800c361
 800c19c:	0800c387 	.word	0x0800c387
 800c1a0:	0800c3c5 	.word	0x0800c3c5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	f103 0110 	add.w	r1, r3, #16
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	795b      	ldrb	r3, [r3, #5]
 800c1ae:	461a      	mov	r2, r3
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f000 f943 	bl	800c43c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2202      	movs	r2, #2
 800c1ba:	761a      	strb	r2, [r3, #24]
      break;
 800c1bc:	e139      	b.n	800c432 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	795b      	ldrb	r3, [r3, #5]
 800c1c2:	4619      	mov	r1, r3
 800c1c4:	6878      	ldr	r0, [r7, #4]
 800c1c6:	f000 fd21 	bl	800cc0c <USBH_LL_GetURBState>
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800c1ce:	7bbb      	ldrb	r3, [r7, #14]
 800c1d0:	2b01      	cmp	r3, #1
 800c1d2:	d11e      	bne.n	800c212 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	7c1b      	ldrb	r3, [r3, #16]
 800c1d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c1dc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	8adb      	ldrh	r3, [r3, #22]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d00a      	beq.n	800c1fc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800c1e6:	7b7b      	ldrb	r3, [r7, #13]
 800c1e8:	2b80      	cmp	r3, #128	; 0x80
 800c1ea:	d103      	bne.n	800c1f4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2203      	movs	r2, #3
 800c1f0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c1f2:	e115      	b.n	800c420 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2205      	movs	r2, #5
 800c1f8:	761a      	strb	r2, [r3, #24]
      break;
 800c1fa:	e111      	b.n	800c420 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800c1fc:	7b7b      	ldrb	r3, [r7, #13]
 800c1fe:	2b80      	cmp	r3, #128	; 0x80
 800c200:	d103      	bne.n	800c20a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	2209      	movs	r2, #9
 800c206:	761a      	strb	r2, [r3, #24]
      break;
 800c208:	e10a      	b.n	800c420 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2207      	movs	r2, #7
 800c20e:	761a      	strb	r2, [r3, #24]
      break;
 800c210:	e106      	b.n	800c420 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800c212:	7bbb      	ldrb	r3, [r7, #14]
 800c214:	2b04      	cmp	r3, #4
 800c216:	d003      	beq.n	800c220 <USBH_HandleControl+0xcc>
 800c218:	7bbb      	ldrb	r3, [r7, #14]
 800c21a:	2b02      	cmp	r3, #2
 800c21c:	f040 8100 	bne.w	800c420 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	220b      	movs	r2, #11
 800c224:	761a      	strb	r2, [r3, #24]
      break;
 800c226:	e0fb      	b.n	800c420 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c22e:	b29a      	uxth	r2, r3
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	6899      	ldr	r1, [r3, #8]
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	899a      	ldrh	r2, [r3, #12]
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	791b      	ldrb	r3, [r3, #4]
 800c240:	6878      	ldr	r0, [r7, #4]
 800c242:	f000 f93a 	bl	800c4ba <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	2204      	movs	r2, #4
 800c24a:	761a      	strb	r2, [r3, #24]
      break;
 800c24c:	e0f1      	b.n	800c432 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	791b      	ldrb	r3, [r3, #4]
 800c252:	4619      	mov	r1, r3
 800c254:	6878      	ldr	r0, [r7, #4]
 800c256:	f000 fcd9 	bl	800cc0c <USBH_LL_GetURBState>
 800c25a:	4603      	mov	r3, r0
 800c25c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800c25e:	7bbb      	ldrb	r3, [r7, #14]
 800c260:	2b01      	cmp	r3, #1
 800c262:	d102      	bne.n	800c26a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2209      	movs	r2, #9
 800c268:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800c26a:	7bbb      	ldrb	r3, [r7, #14]
 800c26c:	2b05      	cmp	r3, #5
 800c26e:	d102      	bne.n	800c276 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800c270:	2303      	movs	r3, #3
 800c272:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c274:	e0d6      	b.n	800c424 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800c276:	7bbb      	ldrb	r3, [r7, #14]
 800c278:	2b04      	cmp	r3, #4
 800c27a:	f040 80d3 	bne.w	800c424 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	220b      	movs	r2, #11
 800c282:	761a      	strb	r2, [r3, #24]
      break;
 800c284:	e0ce      	b.n	800c424 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	6899      	ldr	r1, [r3, #8]
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	899a      	ldrh	r2, [r3, #12]
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	795b      	ldrb	r3, [r3, #5]
 800c292:	2001      	movs	r0, #1
 800c294:	9000      	str	r0, [sp, #0]
 800c296:	6878      	ldr	r0, [r7, #4]
 800c298:	f000 f8ea 	bl	800c470 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c2a2:	b29a      	uxth	r2, r3
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2206      	movs	r2, #6
 800c2ac:	761a      	strb	r2, [r3, #24]
      break;
 800c2ae:	e0c0      	b.n	800c432 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	795b      	ldrb	r3, [r3, #5]
 800c2b4:	4619      	mov	r1, r3
 800c2b6:	6878      	ldr	r0, [r7, #4]
 800c2b8:	f000 fca8 	bl	800cc0c <USBH_LL_GetURBState>
 800c2bc:	4603      	mov	r3, r0
 800c2be:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c2c0:	7bbb      	ldrb	r3, [r7, #14]
 800c2c2:	2b01      	cmp	r3, #1
 800c2c4:	d103      	bne.n	800c2ce <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	2207      	movs	r2, #7
 800c2ca:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c2cc:	e0ac      	b.n	800c428 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800c2ce:	7bbb      	ldrb	r3, [r7, #14]
 800c2d0:	2b05      	cmp	r3, #5
 800c2d2:	d105      	bne.n	800c2e0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	220c      	movs	r2, #12
 800c2d8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800c2da:	2303      	movs	r3, #3
 800c2dc:	73fb      	strb	r3, [r7, #15]
      break;
 800c2de:	e0a3      	b.n	800c428 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c2e0:	7bbb      	ldrb	r3, [r7, #14]
 800c2e2:	2b02      	cmp	r3, #2
 800c2e4:	d103      	bne.n	800c2ee <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	2205      	movs	r2, #5
 800c2ea:	761a      	strb	r2, [r3, #24]
      break;
 800c2ec:	e09c      	b.n	800c428 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800c2ee:	7bbb      	ldrb	r3, [r7, #14]
 800c2f0:	2b04      	cmp	r3, #4
 800c2f2:	f040 8099 	bne.w	800c428 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	220b      	movs	r2, #11
 800c2fa:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800c2fc:	2302      	movs	r3, #2
 800c2fe:	73fb      	strb	r3, [r7, #15]
      break;
 800c300:	e092      	b.n	800c428 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	791b      	ldrb	r3, [r3, #4]
 800c306:	2200      	movs	r2, #0
 800c308:	2100      	movs	r1, #0
 800c30a:	6878      	ldr	r0, [r7, #4]
 800c30c:	f000 f8d5 	bl	800c4ba <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c316:	b29a      	uxth	r2, r3
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2208      	movs	r2, #8
 800c320:	761a      	strb	r2, [r3, #24]

      break;
 800c322:	e086      	b.n	800c432 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	791b      	ldrb	r3, [r3, #4]
 800c328:	4619      	mov	r1, r3
 800c32a:	6878      	ldr	r0, [r7, #4]
 800c32c:	f000 fc6e 	bl	800cc0c <USBH_LL_GetURBState>
 800c330:	4603      	mov	r3, r0
 800c332:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c334:	7bbb      	ldrb	r3, [r7, #14]
 800c336:	2b01      	cmp	r3, #1
 800c338:	d105      	bne.n	800c346 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	220d      	movs	r2, #13
 800c33e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800c340:	2300      	movs	r3, #0
 800c342:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c344:	e072      	b.n	800c42c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800c346:	7bbb      	ldrb	r3, [r7, #14]
 800c348:	2b04      	cmp	r3, #4
 800c34a:	d103      	bne.n	800c354 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	220b      	movs	r2, #11
 800c350:	761a      	strb	r2, [r3, #24]
      break;
 800c352:	e06b      	b.n	800c42c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800c354:	7bbb      	ldrb	r3, [r7, #14]
 800c356:	2b05      	cmp	r3, #5
 800c358:	d168      	bne.n	800c42c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800c35a:	2303      	movs	r3, #3
 800c35c:	73fb      	strb	r3, [r7, #15]
      break;
 800c35e:	e065      	b.n	800c42c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	795b      	ldrb	r3, [r3, #5]
 800c364:	2201      	movs	r2, #1
 800c366:	9200      	str	r2, [sp, #0]
 800c368:	2200      	movs	r2, #0
 800c36a:	2100      	movs	r1, #0
 800c36c:	6878      	ldr	r0, [r7, #4]
 800c36e:	f000 f87f 	bl	800c470 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c378:	b29a      	uxth	r2, r3
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	220a      	movs	r2, #10
 800c382:	761a      	strb	r2, [r3, #24]
      break;
 800c384:	e055      	b.n	800c432 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	795b      	ldrb	r3, [r3, #5]
 800c38a:	4619      	mov	r1, r3
 800c38c:	6878      	ldr	r0, [r7, #4]
 800c38e:	f000 fc3d 	bl	800cc0c <USBH_LL_GetURBState>
 800c392:	4603      	mov	r3, r0
 800c394:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800c396:	7bbb      	ldrb	r3, [r7, #14]
 800c398:	2b01      	cmp	r3, #1
 800c39a:	d105      	bne.n	800c3a8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800c39c:	2300      	movs	r3, #0
 800c39e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	220d      	movs	r2, #13
 800c3a4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c3a6:	e043      	b.n	800c430 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c3a8:	7bbb      	ldrb	r3, [r7, #14]
 800c3aa:	2b02      	cmp	r3, #2
 800c3ac:	d103      	bne.n	800c3b6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2209      	movs	r2, #9
 800c3b2:	761a      	strb	r2, [r3, #24]
      break;
 800c3b4:	e03c      	b.n	800c430 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800c3b6:	7bbb      	ldrb	r3, [r7, #14]
 800c3b8:	2b04      	cmp	r3, #4
 800c3ba:	d139      	bne.n	800c430 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	220b      	movs	r2, #11
 800c3c0:	761a      	strb	r2, [r3, #24]
      break;
 800c3c2:	e035      	b.n	800c430 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	7e5b      	ldrb	r3, [r3, #25]
 800c3c8:	3301      	adds	r3, #1
 800c3ca:	b2da      	uxtb	r2, r3
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	765a      	strb	r2, [r3, #25]
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	7e5b      	ldrb	r3, [r3, #25]
 800c3d4:	2b02      	cmp	r3, #2
 800c3d6:	d806      	bhi.n	800c3e6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	2201      	movs	r2, #1
 800c3dc:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	2201      	movs	r2, #1
 800c3e2:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800c3e4:	e025      	b.n	800c432 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c3ec:	2106      	movs	r1, #6
 800c3ee:	6878      	ldr	r0, [r7, #4]
 800c3f0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	795b      	ldrb	r3, [r3, #5]
 800c3fc:	4619      	mov	r1, r3
 800c3fe:	6878      	ldr	r0, [r7, #4]
 800c400:	f000 f90c 	bl	800c61c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	791b      	ldrb	r3, [r3, #4]
 800c408:	4619      	mov	r1, r3
 800c40a:	6878      	ldr	r0, [r7, #4]
 800c40c:	f000 f906 	bl	800c61c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2200      	movs	r2, #0
 800c414:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800c416:	2302      	movs	r3, #2
 800c418:	73fb      	strb	r3, [r7, #15]
      break;
 800c41a:	e00a      	b.n	800c432 <USBH_HandleControl+0x2de>

    default:
      break;
 800c41c:	bf00      	nop
 800c41e:	e008      	b.n	800c432 <USBH_HandleControl+0x2de>
      break;
 800c420:	bf00      	nop
 800c422:	e006      	b.n	800c432 <USBH_HandleControl+0x2de>
      break;
 800c424:	bf00      	nop
 800c426:	e004      	b.n	800c432 <USBH_HandleControl+0x2de>
      break;
 800c428:	bf00      	nop
 800c42a:	e002      	b.n	800c432 <USBH_HandleControl+0x2de>
      break;
 800c42c:	bf00      	nop
 800c42e:	e000      	b.n	800c432 <USBH_HandleControl+0x2de>
      break;
 800c430:	bf00      	nop
  }

  return status;
 800c432:	7bfb      	ldrb	r3, [r7, #15]
}
 800c434:	4618      	mov	r0, r3
 800c436:	3710      	adds	r7, #16
 800c438:	46bd      	mov	sp, r7
 800c43a:	bd80      	pop	{r7, pc}

0800c43c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b088      	sub	sp, #32
 800c440:	af04      	add	r7, sp, #16
 800c442:	60f8      	str	r0, [r7, #12]
 800c444:	60b9      	str	r1, [r7, #8]
 800c446:	4613      	mov	r3, r2
 800c448:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c44a:	79f9      	ldrb	r1, [r7, #7]
 800c44c:	2300      	movs	r3, #0
 800c44e:	9303      	str	r3, [sp, #12]
 800c450:	2308      	movs	r3, #8
 800c452:	9302      	str	r3, [sp, #8]
 800c454:	68bb      	ldr	r3, [r7, #8]
 800c456:	9301      	str	r3, [sp, #4]
 800c458:	2300      	movs	r3, #0
 800c45a:	9300      	str	r3, [sp, #0]
 800c45c:	2300      	movs	r3, #0
 800c45e:	2200      	movs	r2, #0
 800c460:	68f8      	ldr	r0, [r7, #12]
 800c462:	f000 fba2 	bl	800cbaa <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800c466:	2300      	movs	r3, #0
}
 800c468:	4618      	mov	r0, r3
 800c46a:	3710      	adds	r7, #16
 800c46c:	46bd      	mov	sp, r7
 800c46e:	bd80      	pop	{r7, pc}

0800c470 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b088      	sub	sp, #32
 800c474:	af04      	add	r7, sp, #16
 800c476:	60f8      	str	r0, [r7, #12]
 800c478:	60b9      	str	r1, [r7, #8]
 800c47a:	4611      	mov	r1, r2
 800c47c:	461a      	mov	r2, r3
 800c47e:	460b      	mov	r3, r1
 800c480:	80fb      	strh	r3, [r7, #6]
 800c482:	4613      	mov	r3, r2
 800c484:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d001      	beq.n	800c494 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800c490:	2300      	movs	r3, #0
 800c492:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c494:	7979      	ldrb	r1, [r7, #5]
 800c496:	7e3b      	ldrb	r3, [r7, #24]
 800c498:	9303      	str	r3, [sp, #12]
 800c49a:	88fb      	ldrh	r3, [r7, #6]
 800c49c:	9302      	str	r3, [sp, #8]
 800c49e:	68bb      	ldr	r3, [r7, #8]
 800c4a0:	9301      	str	r3, [sp, #4]
 800c4a2:	2301      	movs	r3, #1
 800c4a4:	9300      	str	r3, [sp, #0]
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	68f8      	ldr	r0, [r7, #12]
 800c4ac:	f000 fb7d 	bl	800cbaa <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800c4b0:	2300      	movs	r3, #0
}
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	3710      	adds	r7, #16
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bd80      	pop	{r7, pc}

0800c4ba <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800c4ba:	b580      	push	{r7, lr}
 800c4bc:	b088      	sub	sp, #32
 800c4be:	af04      	add	r7, sp, #16
 800c4c0:	60f8      	str	r0, [r7, #12]
 800c4c2:	60b9      	str	r1, [r7, #8]
 800c4c4:	4611      	mov	r1, r2
 800c4c6:	461a      	mov	r2, r3
 800c4c8:	460b      	mov	r3, r1
 800c4ca:	80fb      	strh	r3, [r7, #6]
 800c4cc:	4613      	mov	r3, r2
 800c4ce:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c4d0:	7979      	ldrb	r1, [r7, #5]
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	9303      	str	r3, [sp, #12]
 800c4d6:	88fb      	ldrh	r3, [r7, #6]
 800c4d8:	9302      	str	r3, [sp, #8]
 800c4da:	68bb      	ldr	r3, [r7, #8]
 800c4dc:	9301      	str	r3, [sp, #4]
 800c4de:	2301      	movs	r3, #1
 800c4e0:	9300      	str	r3, [sp, #0]
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	2201      	movs	r2, #1
 800c4e6:	68f8      	ldr	r0, [r7, #12]
 800c4e8:	f000 fb5f 	bl	800cbaa <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800c4ec:	2300      	movs	r3, #0

}
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	3710      	adds	r7, #16
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	bd80      	pop	{r7, pc}

0800c4f6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800c4f6:	b580      	push	{r7, lr}
 800c4f8:	b088      	sub	sp, #32
 800c4fa:	af04      	add	r7, sp, #16
 800c4fc:	60f8      	str	r0, [r7, #12]
 800c4fe:	60b9      	str	r1, [r7, #8]
 800c500:	4611      	mov	r1, r2
 800c502:	461a      	mov	r2, r3
 800c504:	460b      	mov	r3, r1
 800c506:	80fb      	strh	r3, [r7, #6]
 800c508:	4613      	mov	r3, r2
 800c50a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c512:	2b00      	cmp	r3, #0
 800c514:	d001      	beq.n	800c51a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800c516:	2300      	movs	r3, #0
 800c518:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c51a:	7979      	ldrb	r1, [r7, #5]
 800c51c:	7e3b      	ldrb	r3, [r7, #24]
 800c51e:	9303      	str	r3, [sp, #12]
 800c520:	88fb      	ldrh	r3, [r7, #6]
 800c522:	9302      	str	r3, [sp, #8]
 800c524:	68bb      	ldr	r3, [r7, #8]
 800c526:	9301      	str	r3, [sp, #4]
 800c528:	2301      	movs	r3, #1
 800c52a:	9300      	str	r3, [sp, #0]
 800c52c:	2302      	movs	r3, #2
 800c52e:	2200      	movs	r2, #0
 800c530:	68f8      	ldr	r0, [r7, #12]
 800c532:	f000 fb3a 	bl	800cbaa <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800c536:	2300      	movs	r3, #0
}
 800c538:	4618      	mov	r0, r3
 800c53a:	3710      	adds	r7, #16
 800c53c:	46bd      	mov	sp, r7
 800c53e:	bd80      	pop	{r7, pc}

0800c540 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b088      	sub	sp, #32
 800c544:	af04      	add	r7, sp, #16
 800c546:	60f8      	str	r0, [r7, #12]
 800c548:	60b9      	str	r1, [r7, #8]
 800c54a:	4611      	mov	r1, r2
 800c54c:	461a      	mov	r2, r3
 800c54e:	460b      	mov	r3, r1
 800c550:	80fb      	strh	r3, [r7, #6]
 800c552:	4613      	mov	r3, r2
 800c554:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c556:	7979      	ldrb	r1, [r7, #5]
 800c558:	2300      	movs	r3, #0
 800c55a:	9303      	str	r3, [sp, #12]
 800c55c:	88fb      	ldrh	r3, [r7, #6]
 800c55e:	9302      	str	r3, [sp, #8]
 800c560:	68bb      	ldr	r3, [r7, #8]
 800c562:	9301      	str	r3, [sp, #4]
 800c564:	2301      	movs	r3, #1
 800c566:	9300      	str	r3, [sp, #0]
 800c568:	2302      	movs	r3, #2
 800c56a:	2201      	movs	r2, #1
 800c56c:	68f8      	ldr	r0, [r7, #12]
 800c56e:	f000 fb1c 	bl	800cbaa <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800c572:	2300      	movs	r3, #0
}
 800c574:	4618      	mov	r0, r3
 800c576:	3710      	adds	r7, #16
 800c578:	46bd      	mov	sp, r7
 800c57a:	bd80      	pop	{r7, pc}

0800c57c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b086      	sub	sp, #24
 800c580:	af04      	add	r7, sp, #16
 800c582:	6078      	str	r0, [r7, #4]
 800c584:	4608      	mov	r0, r1
 800c586:	4611      	mov	r1, r2
 800c588:	461a      	mov	r2, r3
 800c58a:	4603      	mov	r3, r0
 800c58c:	70fb      	strb	r3, [r7, #3]
 800c58e:	460b      	mov	r3, r1
 800c590:	70bb      	strb	r3, [r7, #2]
 800c592:	4613      	mov	r3, r2
 800c594:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800c596:	7878      	ldrb	r0, [r7, #1]
 800c598:	78ba      	ldrb	r2, [r7, #2]
 800c59a:	78f9      	ldrb	r1, [r7, #3]
 800c59c:	8b3b      	ldrh	r3, [r7, #24]
 800c59e:	9302      	str	r3, [sp, #8]
 800c5a0:	7d3b      	ldrb	r3, [r7, #20]
 800c5a2:	9301      	str	r3, [sp, #4]
 800c5a4:	7c3b      	ldrb	r3, [r7, #16]
 800c5a6:	9300      	str	r3, [sp, #0]
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	6878      	ldr	r0, [r7, #4]
 800c5ac:	f000 faaf 	bl	800cb0e <USBH_LL_OpenPipe>

  return USBH_OK;
 800c5b0:	2300      	movs	r3, #0
}
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	3708      	adds	r7, #8
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	bd80      	pop	{r7, pc}

0800c5ba <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800c5ba:	b580      	push	{r7, lr}
 800c5bc:	b082      	sub	sp, #8
 800c5be:	af00      	add	r7, sp, #0
 800c5c0:	6078      	str	r0, [r7, #4]
 800c5c2:	460b      	mov	r3, r1
 800c5c4:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800c5c6:	78fb      	ldrb	r3, [r7, #3]
 800c5c8:	4619      	mov	r1, r3
 800c5ca:	6878      	ldr	r0, [r7, #4]
 800c5cc:	f000 face 	bl	800cb6c <USBH_LL_ClosePipe>

  return USBH_OK;
 800c5d0:	2300      	movs	r3, #0
}
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	3708      	adds	r7, #8
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	bd80      	pop	{r7, pc}

0800c5da <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800c5da:	b580      	push	{r7, lr}
 800c5dc:	b084      	sub	sp, #16
 800c5de:	af00      	add	r7, sp, #0
 800c5e0:	6078      	str	r0, [r7, #4]
 800c5e2:	460b      	mov	r3, r1
 800c5e4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f000 f836 	bl	800c658 <USBH_GetFreePipe>
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800c5f0:	89fb      	ldrh	r3, [r7, #14]
 800c5f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c5f6:	4293      	cmp	r3, r2
 800c5f8:	d00a      	beq.n	800c610 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800c5fa:	78fa      	ldrb	r2, [r7, #3]
 800c5fc:	89fb      	ldrh	r3, [r7, #14]
 800c5fe:	f003 030f 	and.w	r3, r3, #15
 800c602:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c606:	6879      	ldr	r1, [r7, #4]
 800c608:	33e0      	adds	r3, #224	; 0xe0
 800c60a:	009b      	lsls	r3, r3, #2
 800c60c:	440b      	add	r3, r1
 800c60e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800c610:	89fb      	ldrh	r3, [r7, #14]
 800c612:	b2db      	uxtb	r3, r3
}
 800c614:	4618      	mov	r0, r3
 800c616:	3710      	adds	r7, #16
 800c618:	46bd      	mov	sp, r7
 800c61a:	bd80      	pop	{r7, pc}

0800c61c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800c61c:	b480      	push	{r7}
 800c61e:	b083      	sub	sp, #12
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
 800c624:	460b      	mov	r3, r1
 800c626:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800c628:	78fb      	ldrb	r3, [r7, #3]
 800c62a:	2b0a      	cmp	r3, #10
 800c62c:	d80d      	bhi.n	800c64a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800c62e:	78fb      	ldrb	r3, [r7, #3]
 800c630:	687a      	ldr	r2, [r7, #4]
 800c632:	33e0      	adds	r3, #224	; 0xe0
 800c634:	009b      	lsls	r3, r3, #2
 800c636:	4413      	add	r3, r2
 800c638:	685a      	ldr	r2, [r3, #4]
 800c63a:	78fb      	ldrb	r3, [r7, #3]
 800c63c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800c640:	6879      	ldr	r1, [r7, #4]
 800c642:	33e0      	adds	r3, #224	; 0xe0
 800c644:	009b      	lsls	r3, r3, #2
 800c646:	440b      	add	r3, r1
 800c648:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800c64a:	2300      	movs	r3, #0
}
 800c64c:	4618      	mov	r0, r3
 800c64e:	370c      	adds	r7, #12
 800c650:	46bd      	mov	sp, r7
 800c652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c656:	4770      	bx	lr

0800c658 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800c658:	b480      	push	{r7}
 800c65a:	b085      	sub	sp, #20
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800c660:	2300      	movs	r3, #0
 800c662:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800c664:	2300      	movs	r3, #0
 800c666:	73fb      	strb	r3, [r7, #15]
 800c668:	e00f      	b.n	800c68a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800c66a:	7bfb      	ldrb	r3, [r7, #15]
 800c66c:	687a      	ldr	r2, [r7, #4]
 800c66e:	33e0      	adds	r3, #224	; 0xe0
 800c670:	009b      	lsls	r3, r3, #2
 800c672:	4413      	add	r3, r2
 800c674:	685b      	ldr	r3, [r3, #4]
 800c676:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d102      	bne.n	800c684 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800c67e:	7bfb      	ldrb	r3, [r7, #15]
 800c680:	b29b      	uxth	r3, r3
 800c682:	e007      	b.n	800c694 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800c684:	7bfb      	ldrb	r3, [r7, #15]
 800c686:	3301      	adds	r3, #1
 800c688:	73fb      	strb	r3, [r7, #15]
 800c68a:	7bfb      	ldrb	r3, [r7, #15]
 800c68c:	2b0a      	cmp	r3, #10
 800c68e:	d9ec      	bls.n	800c66a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800c690:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800c694:	4618      	mov	r0, r3
 800c696:	3714      	adds	r7, #20
 800c698:	46bd      	mov	sp, r7
 800c69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69e:	4770      	bx	lr

0800c6a0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c6a0:	b480      	push	{r7}
 800c6a2:	b087      	sub	sp, #28
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	60f8      	str	r0, [r7, #12]
 800c6a8:	60b9      	str	r1, [r7, #8]
 800c6aa:	4613      	mov	r3, r2
 800c6ac:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c6ae:	2301      	movs	r3, #1
 800c6b0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c6b6:	4b1f      	ldr	r3, [pc, #124]	; (800c734 <FATFS_LinkDriverEx+0x94>)
 800c6b8:	7a5b      	ldrb	r3, [r3, #9]
 800c6ba:	b2db      	uxtb	r3, r3
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d131      	bne.n	800c724 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c6c0:	4b1c      	ldr	r3, [pc, #112]	; (800c734 <FATFS_LinkDriverEx+0x94>)
 800c6c2:	7a5b      	ldrb	r3, [r3, #9]
 800c6c4:	b2db      	uxtb	r3, r3
 800c6c6:	461a      	mov	r2, r3
 800c6c8:	4b1a      	ldr	r3, [pc, #104]	; (800c734 <FATFS_LinkDriverEx+0x94>)
 800c6ca:	2100      	movs	r1, #0
 800c6cc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c6ce:	4b19      	ldr	r3, [pc, #100]	; (800c734 <FATFS_LinkDriverEx+0x94>)
 800c6d0:	7a5b      	ldrb	r3, [r3, #9]
 800c6d2:	b2db      	uxtb	r3, r3
 800c6d4:	4a17      	ldr	r2, [pc, #92]	; (800c734 <FATFS_LinkDriverEx+0x94>)
 800c6d6:	009b      	lsls	r3, r3, #2
 800c6d8:	4413      	add	r3, r2
 800c6da:	68fa      	ldr	r2, [r7, #12]
 800c6dc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c6de:	4b15      	ldr	r3, [pc, #84]	; (800c734 <FATFS_LinkDriverEx+0x94>)
 800c6e0:	7a5b      	ldrb	r3, [r3, #9]
 800c6e2:	b2db      	uxtb	r3, r3
 800c6e4:	461a      	mov	r2, r3
 800c6e6:	4b13      	ldr	r3, [pc, #76]	; (800c734 <FATFS_LinkDriverEx+0x94>)
 800c6e8:	4413      	add	r3, r2
 800c6ea:	79fa      	ldrb	r2, [r7, #7]
 800c6ec:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c6ee:	4b11      	ldr	r3, [pc, #68]	; (800c734 <FATFS_LinkDriverEx+0x94>)
 800c6f0:	7a5b      	ldrb	r3, [r3, #9]
 800c6f2:	b2db      	uxtb	r3, r3
 800c6f4:	1c5a      	adds	r2, r3, #1
 800c6f6:	b2d1      	uxtb	r1, r2
 800c6f8:	4a0e      	ldr	r2, [pc, #56]	; (800c734 <FATFS_LinkDriverEx+0x94>)
 800c6fa:	7251      	strb	r1, [r2, #9]
 800c6fc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c6fe:	7dbb      	ldrb	r3, [r7, #22]
 800c700:	3330      	adds	r3, #48	; 0x30
 800c702:	b2da      	uxtb	r2, r3
 800c704:	68bb      	ldr	r3, [r7, #8]
 800c706:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c708:	68bb      	ldr	r3, [r7, #8]
 800c70a:	3301      	adds	r3, #1
 800c70c:	223a      	movs	r2, #58	; 0x3a
 800c70e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c710:	68bb      	ldr	r3, [r7, #8]
 800c712:	3302      	adds	r3, #2
 800c714:	222f      	movs	r2, #47	; 0x2f
 800c716:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c718:	68bb      	ldr	r3, [r7, #8]
 800c71a:	3303      	adds	r3, #3
 800c71c:	2200      	movs	r2, #0
 800c71e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c720:	2300      	movs	r3, #0
 800c722:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c724:	7dfb      	ldrb	r3, [r7, #23]
}
 800c726:	4618      	mov	r0, r3
 800c728:	371c      	adds	r7, #28
 800c72a:	46bd      	mov	sp, r7
 800c72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c730:	4770      	bx	lr
 800c732:	bf00      	nop
 800c734:	200003c0 	.word	0x200003c0

0800c738 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b082      	sub	sp, #8
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
 800c740:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c742:	2200      	movs	r2, #0
 800c744:	6839      	ldr	r1, [r7, #0]
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f7ff ffaa 	bl	800c6a0 <FATFS_LinkDriverEx>
 800c74c:	4603      	mov	r3, r0
}
 800c74e:	4618      	mov	r0, r3
 800c750:	3708      	adds	r7, #8
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}
	...

0800c758 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800c75c:	2201      	movs	r2, #1
 800c75e:	490e      	ldr	r1, [pc, #56]	; (800c798 <MX_USB_HOST_Init+0x40>)
 800c760:	480e      	ldr	r0, [pc, #56]	; (800c79c <MX_USB_HOST_Init+0x44>)
 800c762:	f7fe fc45 	bl	800aff0 <USBH_Init>
 800c766:	4603      	mov	r3, r0
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d001      	beq.n	800c770 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800c76c:	f7f5 fb0a 	bl	8001d84 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800c770:	490b      	ldr	r1, [pc, #44]	; (800c7a0 <MX_USB_HOST_Init+0x48>)
 800c772:	480a      	ldr	r0, [pc, #40]	; (800c79c <MX_USB_HOST_Init+0x44>)
 800c774:	f7fe fcca 	bl	800b10c <USBH_RegisterClass>
 800c778:	4603      	mov	r3, r0
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d001      	beq.n	800c782 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800c77e:	f7f5 fb01 	bl	8001d84 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800c782:	4806      	ldr	r0, [pc, #24]	; (800c79c <MX_USB_HOST_Init+0x44>)
 800c784:	f7fe fd4e 	bl	800b224 <USBH_Start>
 800c788:	4603      	mov	r3, r0
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d001      	beq.n	800c792 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800c78e:	f7f5 faf9 	bl	8001d84 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800c792:	bf00      	nop
 800c794:	bd80      	pop	{r7, pc}
 800c796:	bf00      	nop
 800c798:	0800c7b9 	.word	0x0800c7b9
 800c79c:	20005444 	.word	0x20005444
 800c7a0:	200002b0 	.word	0x200002b0

0800c7a4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800c7a8:	4802      	ldr	r0, [pc, #8]	; (800c7b4 <MX_USB_HOST_Process+0x10>)
 800c7aa:	f7fe fd4b 	bl	800b244 <USBH_Process>
}
 800c7ae:	bf00      	nop
 800c7b0:	bd80      	pop	{r7, pc}
 800c7b2:	bf00      	nop
 800c7b4:	20005444 	.word	0x20005444

0800c7b8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800c7b8:	b480      	push	{r7}
 800c7ba:	b083      	sub	sp, #12
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
 800c7c0:	460b      	mov	r3, r1
 800c7c2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800c7c4:	78fb      	ldrb	r3, [r7, #3]
 800c7c6:	3b01      	subs	r3, #1
 800c7c8:	2b04      	cmp	r3, #4
 800c7ca:	d819      	bhi.n	800c800 <USBH_UserProcess+0x48>
 800c7cc:	a201      	add	r2, pc, #4	; (adr r2, 800c7d4 <USBH_UserProcess+0x1c>)
 800c7ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7d2:	bf00      	nop
 800c7d4:	0800c801 	.word	0x0800c801
 800c7d8:	0800c7f1 	.word	0x0800c7f1
 800c7dc:	0800c801 	.word	0x0800c801
 800c7e0:	0800c7f9 	.word	0x0800c7f9
 800c7e4:	0800c7e9 	.word	0x0800c7e9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800c7e8:	4b09      	ldr	r3, [pc, #36]	; (800c810 <USBH_UserProcess+0x58>)
 800c7ea:	2203      	movs	r2, #3
 800c7ec:	701a      	strb	r2, [r3, #0]
  break;
 800c7ee:	e008      	b.n	800c802 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800c7f0:	4b07      	ldr	r3, [pc, #28]	; (800c810 <USBH_UserProcess+0x58>)
 800c7f2:	2202      	movs	r2, #2
 800c7f4:	701a      	strb	r2, [r3, #0]
  break;
 800c7f6:	e004      	b.n	800c802 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800c7f8:	4b05      	ldr	r3, [pc, #20]	; (800c810 <USBH_UserProcess+0x58>)
 800c7fa:	2201      	movs	r2, #1
 800c7fc:	701a      	strb	r2, [r3, #0]
  break;
 800c7fe:	e000      	b.n	800c802 <USBH_UserProcess+0x4a>

  default:
  break;
 800c800:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800c802:	bf00      	nop
 800c804:	370c      	adds	r7, #12
 800c806:	46bd      	mov	sp, r7
 800c808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80c:	4770      	bx	lr
 800c80e:	bf00      	nop
 800c810:	200003cc 	.word	0x200003cc

0800c814 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b08a      	sub	sp, #40	; 0x28
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c81c:	f107 0314 	add.w	r3, r7, #20
 800c820:	2200      	movs	r2, #0
 800c822:	601a      	str	r2, [r3, #0]
 800c824:	605a      	str	r2, [r3, #4]
 800c826:	609a      	str	r2, [r3, #8]
 800c828:	60da      	str	r2, [r3, #12]
 800c82a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c834:	d147      	bne.n	800c8c6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c836:	2300      	movs	r3, #0
 800c838:	613b      	str	r3, [r7, #16]
 800c83a:	4b25      	ldr	r3, [pc, #148]	; (800c8d0 <HAL_HCD_MspInit+0xbc>)
 800c83c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c83e:	4a24      	ldr	r2, [pc, #144]	; (800c8d0 <HAL_HCD_MspInit+0xbc>)
 800c840:	f043 0301 	orr.w	r3, r3, #1
 800c844:	6313      	str	r3, [r2, #48]	; 0x30
 800c846:	4b22      	ldr	r3, [pc, #136]	; (800c8d0 <HAL_HCD_MspInit+0xbc>)
 800c848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c84a:	f003 0301 	and.w	r3, r3, #1
 800c84e:	613b      	str	r3, [r7, #16]
 800c850:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800c852:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c856:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c858:	2300      	movs	r3, #0
 800c85a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c85c:	2300      	movs	r3, #0
 800c85e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c860:	f107 0314 	add.w	r3, r7, #20
 800c864:	4619      	mov	r1, r3
 800c866:	481b      	ldr	r0, [pc, #108]	; (800c8d4 <HAL_HCD_MspInit+0xc0>)
 800c868:	f7f7 f9d8 	bl	8003c1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c86c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c870:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c872:	2302      	movs	r3, #2
 800c874:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c876:	2300      	movs	r3, #0
 800c878:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c87a:	2300      	movs	r3, #0
 800c87c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c87e:	230a      	movs	r3, #10
 800c880:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c882:	f107 0314 	add.w	r3, r7, #20
 800c886:	4619      	mov	r1, r3
 800c888:	4812      	ldr	r0, [pc, #72]	; (800c8d4 <HAL_HCD_MspInit+0xc0>)
 800c88a:	f7f7 f9c7 	bl	8003c1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c88e:	4b10      	ldr	r3, [pc, #64]	; (800c8d0 <HAL_HCD_MspInit+0xbc>)
 800c890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c892:	4a0f      	ldr	r2, [pc, #60]	; (800c8d0 <HAL_HCD_MspInit+0xbc>)
 800c894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c898:	6353      	str	r3, [r2, #52]	; 0x34
 800c89a:	2300      	movs	r3, #0
 800c89c:	60fb      	str	r3, [r7, #12]
 800c89e:	4b0c      	ldr	r3, [pc, #48]	; (800c8d0 <HAL_HCD_MspInit+0xbc>)
 800c8a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8a2:	4a0b      	ldr	r2, [pc, #44]	; (800c8d0 <HAL_HCD_MspInit+0xbc>)
 800c8a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c8a8:	6453      	str	r3, [r2, #68]	; 0x44
 800c8aa:	4b09      	ldr	r3, [pc, #36]	; (800c8d0 <HAL_HCD_MspInit+0xbc>)
 800c8ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c8b2:	60fb      	str	r3, [r7, #12]
 800c8b4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	2100      	movs	r1, #0
 800c8ba:	2043      	movs	r0, #67	; 0x43
 800c8bc:	f7f6 fe07 	bl	80034ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c8c0:	2043      	movs	r0, #67	; 0x43
 800c8c2:	f7f6 fe20 	bl	8003506 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c8c6:	bf00      	nop
 800c8c8:	3728      	adds	r7, #40	; 0x28
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	bd80      	pop	{r7, pc}
 800c8ce:	bf00      	nop
 800c8d0:	40023800 	.word	0x40023800
 800c8d4:	40020000 	.word	0x40020000

0800c8d8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	b082      	sub	sp, #8
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	f7ff f87f 	bl	800b9ea <USBH_LL_IncTimer>
}
 800c8ec:	bf00      	nop
 800c8ee:	3708      	adds	r7, #8
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	bd80      	pop	{r7, pc}

0800c8f4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	b082      	sub	sp, #8
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c902:	4618      	mov	r0, r3
 800c904:	f7ff f8b7 	bl	800ba76 <USBH_LL_Connect>
}
 800c908:	bf00      	nop
 800c90a:	3708      	adds	r7, #8
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}

0800c910 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b082      	sub	sp, #8
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c91e:	4618      	mov	r0, r3
 800c920:	f7ff f8c0 	bl	800baa4 <USBH_LL_Disconnect>
}
 800c924:	bf00      	nop
 800c926:	3708      	adds	r7, #8
 800c928:	46bd      	mov	sp, r7
 800c92a:	bd80      	pop	{r7, pc}

0800c92c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c92c:	b480      	push	{r7}
 800c92e:	b083      	sub	sp, #12
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
 800c934:	460b      	mov	r3, r1
 800c936:	70fb      	strb	r3, [r7, #3]
 800c938:	4613      	mov	r3, r2
 800c93a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800c93c:	bf00      	nop
 800c93e:	370c      	adds	r7, #12
 800c940:	46bd      	mov	sp, r7
 800c942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c946:	4770      	bx	lr

0800c948 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b082      	sub	sp, #8
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c956:	4618      	mov	r0, r3
 800c958:	f7ff f871 	bl	800ba3e <USBH_LL_PortEnabled>
}
 800c95c:	bf00      	nop
 800c95e:	3708      	adds	r7, #8
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}

0800c964 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b082      	sub	sp, #8
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c972:	4618      	mov	r0, r3
 800c974:	f7ff f871 	bl	800ba5a <USBH_LL_PortDisabled>
}
 800c978:	bf00      	nop
 800c97a:	3708      	adds	r7, #8
 800c97c:	46bd      	mov	sp, r7
 800c97e:	bd80      	pop	{r7, pc}

0800c980 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b082      	sub	sp, #8
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c98e:	2b01      	cmp	r3, #1
 800c990:	d12a      	bne.n	800c9e8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800c992:	4a18      	ldr	r2, [pc, #96]	; (800c9f4 <USBH_LL_Init+0x74>)
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	4a15      	ldr	r2, [pc, #84]	; (800c9f4 <USBH_LL_Init+0x74>)
 800c99e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c9a2:	4b14      	ldr	r3, [pc, #80]	; (800c9f4 <USBH_LL_Init+0x74>)
 800c9a4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c9a8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800c9aa:	4b12      	ldr	r3, [pc, #72]	; (800c9f4 <USBH_LL_Init+0x74>)
 800c9ac:	2208      	movs	r2, #8
 800c9ae:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800c9b0:	4b10      	ldr	r3, [pc, #64]	; (800c9f4 <USBH_LL_Init+0x74>)
 800c9b2:	2201      	movs	r2, #1
 800c9b4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c9b6:	4b0f      	ldr	r3, [pc, #60]	; (800c9f4 <USBH_LL_Init+0x74>)
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800c9bc:	4b0d      	ldr	r3, [pc, #52]	; (800c9f4 <USBH_LL_Init+0x74>)
 800c9be:	2202      	movs	r2, #2
 800c9c0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c9c2:	4b0c      	ldr	r3, [pc, #48]	; (800c9f4 <USBH_LL_Init+0x74>)
 800c9c4:	2200      	movs	r2, #0
 800c9c6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800c9c8:	480a      	ldr	r0, [pc, #40]	; (800c9f4 <USBH_LL_Init+0x74>)
 800c9ca:	f7f7 faf4 	bl	8003fb6 <HAL_HCD_Init>
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d001      	beq.n	800c9d8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800c9d4:	f7f5 f9d6 	bl	8001d84 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800c9d8:	4806      	ldr	r0, [pc, #24]	; (800c9f4 <USBH_LL_Init+0x74>)
 800c9da:	f7f7 fed8 	bl	800478e <HAL_HCD_GetCurrentFrame>
 800c9de:	4603      	mov	r3, r0
 800c9e0:	4619      	mov	r1, r3
 800c9e2:	6878      	ldr	r0, [r7, #4]
 800c9e4:	f7fe fff2 	bl	800b9cc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800c9e8:	2300      	movs	r3, #0
}
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	3708      	adds	r7, #8
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	bd80      	pop	{r7, pc}
 800c9f2:	bf00      	nop
 800c9f4:	2000581c 	.word	0x2000581c

0800c9f8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b084      	sub	sp, #16
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca00:	2300      	movs	r3, #0
 800ca02:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ca04:	2300      	movs	r3, #0
 800ca06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ca0e:	4618      	mov	r0, r3
 800ca10:	f7f7 fe47 	bl	80046a2 <HAL_HCD_Start>
 800ca14:	4603      	mov	r3, r0
 800ca16:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ca18:	7bfb      	ldrb	r3, [r7, #15]
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	f000 f98c 	bl	800cd38 <USBH_Get_USB_Status>
 800ca20:	4603      	mov	r3, r0
 800ca22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca24:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca26:	4618      	mov	r0, r3
 800ca28:	3710      	adds	r7, #16
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	bd80      	pop	{r7, pc}

0800ca2e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ca2e:	b580      	push	{r7, lr}
 800ca30:	b084      	sub	sp, #16
 800ca32:	af00      	add	r7, sp, #0
 800ca34:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca36:	2300      	movs	r3, #0
 800ca38:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ca44:	4618      	mov	r0, r3
 800ca46:	f7f7 fe4f 	bl	80046e8 <HAL_HCD_Stop>
 800ca4a:	4603      	mov	r3, r0
 800ca4c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ca4e:	7bfb      	ldrb	r3, [r7, #15]
 800ca50:	4618      	mov	r0, r3
 800ca52:	f000 f971 	bl	800cd38 <USBH_Get_USB_Status>
 800ca56:	4603      	mov	r3, r0
 800ca58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca5a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	3710      	adds	r7, #16
 800ca60:	46bd      	mov	sp, r7
 800ca62:	bd80      	pop	{r7, pc}

0800ca64 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b084      	sub	sp, #16
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800ca6c:	2301      	movs	r3, #1
 800ca6e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ca76:	4618      	mov	r0, r3
 800ca78:	f7f7 fe97 	bl	80047aa <HAL_HCD_GetCurrentSpeed>
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	2b02      	cmp	r3, #2
 800ca80:	d00c      	beq.n	800ca9c <USBH_LL_GetSpeed+0x38>
 800ca82:	2b02      	cmp	r3, #2
 800ca84:	d80d      	bhi.n	800caa2 <USBH_LL_GetSpeed+0x3e>
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d002      	beq.n	800ca90 <USBH_LL_GetSpeed+0x2c>
 800ca8a:	2b01      	cmp	r3, #1
 800ca8c:	d003      	beq.n	800ca96 <USBH_LL_GetSpeed+0x32>
 800ca8e:	e008      	b.n	800caa2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800ca90:	2300      	movs	r3, #0
 800ca92:	73fb      	strb	r3, [r7, #15]
    break;
 800ca94:	e008      	b.n	800caa8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800ca96:	2301      	movs	r3, #1
 800ca98:	73fb      	strb	r3, [r7, #15]
    break;
 800ca9a:	e005      	b.n	800caa8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800ca9c:	2302      	movs	r3, #2
 800ca9e:	73fb      	strb	r3, [r7, #15]
    break;
 800caa0:	e002      	b.n	800caa8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800caa2:	2301      	movs	r3, #1
 800caa4:	73fb      	strb	r3, [r7, #15]
    break;
 800caa6:	bf00      	nop
  }
  return  speed;
 800caa8:	7bfb      	ldrb	r3, [r7, #15]
}
 800caaa:	4618      	mov	r0, r3
 800caac:	3710      	adds	r7, #16
 800caae:	46bd      	mov	sp, r7
 800cab0:	bd80      	pop	{r7, pc}

0800cab2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800cab2:	b580      	push	{r7, lr}
 800cab4:	b084      	sub	sp, #16
 800cab6:	af00      	add	r7, sp, #0
 800cab8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800caba:	2300      	movs	r3, #0
 800cabc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cabe:	2300      	movs	r3, #0
 800cac0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cac8:	4618      	mov	r0, r3
 800caca:	f7f7 fe2a 	bl	8004722 <HAL_HCD_ResetPort>
 800cace:	4603      	mov	r3, r0
 800cad0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cad2:	7bfb      	ldrb	r3, [r7, #15]
 800cad4:	4618      	mov	r0, r3
 800cad6:	f000 f92f 	bl	800cd38 <USBH_Get_USB_Status>
 800cada:	4603      	mov	r3, r0
 800cadc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cade:	7bbb      	ldrb	r3, [r7, #14]
}
 800cae0:	4618      	mov	r0, r3
 800cae2:	3710      	adds	r7, #16
 800cae4:	46bd      	mov	sp, r7
 800cae6:	bd80      	pop	{r7, pc}

0800cae8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b082      	sub	sp, #8
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
 800caf0:	460b      	mov	r3, r1
 800caf2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cafa:	78fa      	ldrb	r2, [r7, #3]
 800cafc:	4611      	mov	r1, r2
 800cafe:	4618      	mov	r0, r3
 800cb00:	f7f7 fe31 	bl	8004766 <HAL_HCD_HC_GetXferCount>
 800cb04:	4603      	mov	r3, r0
}
 800cb06:	4618      	mov	r0, r3
 800cb08:	3708      	adds	r7, #8
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	bd80      	pop	{r7, pc}

0800cb0e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800cb0e:	b590      	push	{r4, r7, lr}
 800cb10:	b089      	sub	sp, #36	; 0x24
 800cb12:	af04      	add	r7, sp, #16
 800cb14:	6078      	str	r0, [r7, #4]
 800cb16:	4608      	mov	r0, r1
 800cb18:	4611      	mov	r1, r2
 800cb1a:	461a      	mov	r2, r3
 800cb1c:	4603      	mov	r3, r0
 800cb1e:	70fb      	strb	r3, [r7, #3]
 800cb20:	460b      	mov	r3, r1
 800cb22:	70bb      	strb	r3, [r7, #2]
 800cb24:	4613      	mov	r3, r2
 800cb26:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb28:	2300      	movs	r3, #0
 800cb2a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800cb36:	787c      	ldrb	r4, [r7, #1]
 800cb38:	78ba      	ldrb	r2, [r7, #2]
 800cb3a:	78f9      	ldrb	r1, [r7, #3]
 800cb3c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cb3e:	9302      	str	r3, [sp, #8]
 800cb40:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800cb44:	9301      	str	r3, [sp, #4]
 800cb46:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cb4a:	9300      	str	r3, [sp, #0]
 800cb4c:	4623      	mov	r3, r4
 800cb4e:	f7f7 fa94 	bl	800407a <HAL_HCD_HC_Init>
 800cb52:	4603      	mov	r3, r0
 800cb54:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800cb56:	7bfb      	ldrb	r3, [r7, #15]
 800cb58:	4618      	mov	r0, r3
 800cb5a:	f000 f8ed 	bl	800cd38 <USBH_Get_USB_Status>
 800cb5e:	4603      	mov	r3, r0
 800cb60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb62:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb64:	4618      	mov	r0, r3
 800cb66:	3714      	adds	r7, #20
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	bd90      	pop	{r4, r7, pc}

0800cb6c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b084      	sub	sp, #16
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
 800cb74:	460b      	mov	r3, r1
 800cb76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb78:	2300      	movs	r3, #0
 800cb7a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cb86:	78fa      	ldrb	r2, [r7, #3]
 800cb88:	4611      	mov	r1, r2
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	f7f7 fb04 	bl	8004198 <HAL_HCD_HC_Halt>
 800cb90:	4603      	mov	r3, r0
 800cb92:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cb94:	7bfb      	ldrb	r3, [r7, #15]
 800cb96:	4618      	mov	r0, r3
 800cb98:	f000 f8ce 	bl	800cd38 <USBH_Get_USB_Status>
 800cb9c:	4603      	mov	r3, r0
 800cb9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cba0:	7bbb      	ldrb	r3, [r7, #14]
}
 800cba2:	4618      	mov	r0, r3
 800cba4:	3710      	adds	r7, #16
 800cba6:	46bd      	mov	sp, r7
 800cba8:	bd80      	pop	{r7, pc}

0800cbaa <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800cbaa:	b590      	push	{r4, r7, lr}
 800cbac:	b089      	sub	sp, #36	; 0x24
 800cbae:	af04      	add	r7, sp, #16
 800cbb0:	6078      	str	r0, [r7, #4]
 800cbb2:	4608      	mov	r0, r1
 800cbb4:	4611      	mov	r1, r2
 800cbb6:	461a      	mov	r2, r3
 800cbb8:	4603      	mov	r3, r0
 800cbba:	70fb      	strb	r3, [r7, #3]
 800cbbc:	460b      	mov	r3, r1
 800cbbe:	70bb      	strb	r3, [r7, #2]
 800cbc0:	4613      	mov	r3, r2
 800cbc2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cbc8:	2300      	movs	r3, #0
 800cbca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800cbd2:	787c      	ldrb	r4, [r7, #1]
 800cbd4:	78ba      	ldrb	r2, [r7, #2]
 800cbd6:	78f9      	ldrb	r1, [r7, #3]
 800cbd8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800cbdc:	9303      	str	r3, [sp, #12]
 800cbde:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cbe0:	9302      	str	r3, [sp, #8]
 800cbe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbe4:	9301      	str	r3, [sp, #4]
 800cbe6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cbea:	9300      	str	r3, [sp, #0]
 800cbec:	4623      	mov	r3, r4
 800cbee:	f7f7 faf7 	bl	80041e0 <HAL_HCD_HC_SubmitRequest>
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800cbf6:	7bfb      	ldrb	r3, [r7, #15]
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	f000 f89d 	bl	800cd38 <USBH_Get_USB_Status>
 800cbfe:	4603      	mov	r3, r0
 800cc00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc02:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc04:	4618      	mov	r0, r3
 800cc06:	3714      	adds	r7, #20
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	bd90      	pop	{r4, r7, pc}

0800cc0c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b082      	sub	sp, #8
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
 800cc14:	460b      	mov	r3, r1
 800cc16:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cc1e:	78fa      	ldrb	r2, [r7, #3]
 800cc20:	4611      	mov	r1, r2
 800cc22:	4618      	mov	r0, r3
 800cc24:	f7f7 fd8b 	bl	800473e <HAL_HCD_HC_GetURBState>
 800cc28:	4603      	mov	r3, r0
}
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	3708      	adds	r7, #8
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	bd80      	pop	{r7, pc}

0800cc32 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800cc32:	b580      	push	{r7, lr}
 800cc34:	b082      	sub	sp, #8
 800cc36:	af00      	add	r7, sp, #0
 800cc38:	6078      	str	r0, [r7, #4]
 800cc3a:	460b      	mov	r3, r1
 800cc3c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800cc44:	2b01      	cmp	r3, #1
 800cc46:	d103      	bne.n	800cc50 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800cc48:	78fb      	ldrb	r3, [r7, #3]
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	f000 f8a0 	bl	800cd90 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800cc50:	20c8      	movs	r0, #200	; 0xc8
 800cc52:	f7f6 fb3d 	bl	80032d0 <HAL_Delay>
  return USBH_OK;
 800cc56:	2300      	movs	r3, #0
}
 800cc58:	4618      	mov	r0, r3
 800cc5a:	3708      	adds	r7, #8
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	bd80      	pop	{r7, pc}

0800cc60 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800cc60:	b480      	push	{r7}
 800cc62:	b085      	sub	sp, #20
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
 800cc68:	460b      	mov	r3, r1
 800cc6a:	70fb      	strb	r3, [r7, #3]
 800cc6c:	4613      	mov	r3, r2
 800cc6e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cc76:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800cc78:	78fb      	ldrb	r3, [r7, #3]
 800cc7a:	68fa      	ldr	r2, [r7, #12]
 800cc7c:	212c      	movs	r1, #44	; 0x2c
 800cc7e:	fb01 f303 	mul.w	r3, r1, r3
 800cc82:	4413      	add	r3, r2
 800cc84:	333b      	adds	r3, #59	; 0x3b
 800cc86:	781b      	ldrb	r3, [r3, #0]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d009      	beq.n	800cca0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800cc8c:	78fb      	ldrb	r3, [r7, #3]
 800cc8e:	68fa      	ldr	r2, [r7, #12]
 800cc90:	212c      	movs	r1, #44	; 0x2c
 800cc92:	fb01 f303 	mul.w	r3, r1, r3
 800cc96:	4413      	add	r3, r2
 800cc98:	3354      	adds	r3, #84	; 0x54
 800cc9a:	78ba      	ldrb	r2, [r7, #2]
 800cc9c:	701a      	strb	r2, [r3, #0]
 800cc9e:	e008      	b.n	800ccb2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800cca0:	78fb      	ldrb	r3, [r7, #3]
 800cca2:	68fa      	ldr	r2, [r7, #12]
 800cca4:	212c      	movs	r1, #44	; 0x2c
 800cca6:	fb01 f303 	mul.w	r3, r1, r3
 800ccaa:	4413      	add	r3, r2
 800ccac:	3355      	adds	r3, #85	; 0x55
 800ccae:	78ba      	ldrb	r2, [r7, #2]
 800ccb0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800ccb2:	2300      	movs	r3, #0
}
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	3714      	adds	r7, #20
 800ccb8:	46bd      	mov	sp, r7
 800ccba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccbe:	4770      	bx	lr

0800ccc0 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ccc0:	b480      	push	{r7}
 800ccc2:	b085      	sub	sp, #20
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
 800ccc8:	460b      	mov	r3, r1
 800ccca:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800cccc:	2300      	movs	r3, #0
 800ccce:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ccd6:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800ccd8:	78fb      	ldrb	r3, [r7, #3]
 800ccda:	68ba      	ldr	r2, [r7, #8]
 800ccdc:	212c      	movs	r1, #44	; 0x2c
 800ccde:	fb01 f303 	mul.w	r3, r1, r3
 800cce2:	4413      	add	r3, r2
 800cce4:	333b      	adds	r3, #59	; 0x3b
 800cce6:	781b      	ldrb	r3, [r3, #0]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d009      	beq.n	800cd00 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800ccec:	78fb      	ldrb	r3, [r7, #3]
 800ccee:	68ba      	ldr	r2, [r7, #8]
 800ccf0:	212c      	movs	r1, #44	; 0x2c
 800ccf2:	fb01 f303 	mul.w	r3, r1, r3
 800ccf6:	4413      	add	r3, r2
 800ccf8:	3354      	adds	r3, #84	; 0x54
 800ccfa:	781b      	ldrb	r3, [r3, #0]
 800ccfc:	73fb      	strb	r3, [r7, #15]
 800ccfe:	e008      	b.n	800cd12 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800cd00:	78fb      	ldrb	r3, [r7, #3]
 800cd02:	68ba      	ldr	r2, [r7, #8]
 800cd04:	212c      	movs	r1, #44	; 0x2c
 800cd06:	fb01 f303 	mul.w	r3, r1, r3
 800cd0a:	4413      	add	r3, r2
 800cd0c:	3355      	adds	r3, #85	; 0x55
 800cd0e:	781b      	ldrb	r3, [r3, #0]
 800cd10:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800cd12:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd14:	4618      	mov	r0, r3
 800cd16:	3714      	adds	r7, #20
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1e:	4770      	bx	lr

0800cd20 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b082      	sub	sp, #8
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800cd28:	6878      	ldr	r0, [r7, #4]
 800cd2a:	f7f6 fad1 	bl	80032d0 <HAL_Delay>
}
 800cd2e:	bf00      	nop
 800cd30:	3708      	adds	r7, #8
 800cd32:	46bd      	mov	sp, r7
 800cd34:	bd80      	pop	{r7, pc}
	...

0800cd38 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cd38:	b480      	push	{r7}
 800cd3a:	b085      	sub	sp, #20
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	4603      	mov	r3, r0
 800cd40:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cd42:	2300      	movs	r3, #0
 800cd44:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cd46:	79fb      	ldrb	r3, [r7, #7]
 800cd48:	2b03      	cmp	r3, #3
 800cd4a:	d817      	bhi.n	800cd7c <USBH_Get_USB_Status+0x44>
 800cd4c:	a201      	add	r2, pc, #4	; (adr r2, 800cd54 <USBH_Get_USB_Status+0x1c>)
 800cd4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd52:	bf00      	nop
 800cd54:	0800cd65 	.word	0x0800cd65
 800cd58:	0800cd6b 	.word	0x0800cd6b
 800cd5c:	0800cd71 	.word	0x0800cd71
 800cd60:	0800cd77 	.word	0x0800cd77
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800cd64:	2300      	movs	r3, #0
 800cd66:	73fb      	strb	r3, [r7, #15]
    break;
 800cd68:	e00b      	b.n	800cd82 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800cd6a:	2302      	movs	r3, #2
 800cd6c:	73fb      	strb	r3, [r7, #15]
    break;
 800cd6e:	e008      	b.n	800cd82 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800cd70:	2301      	movs	r3, #1
 800cd72:	73fb      	strb	r3, [r7, #15]
    break;
 800cd74:	e005      	b.n	800cd82 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800cd76:	2302      	movs	r3, #2
 800cd78:	73fb      	strb	r3, [r7, #15]
    break;
 800cd7a:	e002      	b.n	800cd82 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800cd7c:	2302      	movs	r3, #2
 800cd7e:	73fb      	strb	r3, [r7, #15]
    break;
 800cd80:	bf00      	nop
  }
  return usb_status;
 800cd82:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd84:	4618      	mov	r0, r3
 800cd86:	3714      	adds	r7, #20
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8e:	4770      	bx	lr

0800cd90 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b084      	sub	sp, #16
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	4603      	mov	r3, r0
 800cd98:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800cd9a:	79fb      	ldrb	r3, [r7, #7]
 800cd9c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800cd9e:	79fb      	ldrb	r3, [r7, #7]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d102      	bne.n	800cdaa <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800cda4:	2300      	movs	r3, #0
 800cda6:	73fb      	strb	r3, [r7, #15]
 800cda8:	e001      	b.n	800cdae <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800cdaa:	2301      	movs	r3, #1
 800cdac:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800cdae:	7bfb      	ldrb	r3, [r7, #15]
 800cdb0:	461a      	mov	r2, r3
 800cdb2:	2101      	movs	r1, #1
 800cdb4:	4803      	ldr	r0, [pc, #12]	; (800cdc4 <MX_DriverVbusFS+0x34>)
 800cdb6:	f7f7 f8e5 	bl	8003f84 <HAL_GPIO_WritePin>
}
 800cdba:	bf00      	nop
 800cdbc:	3710      	adds	r7, #16
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	bd80      	pop	{r7, pc}
 800cdc2:	bf00      	nop
 800cdc4:	40020800 	.word	0x40020800

0800cdc8 <__errno>:
 800cdc8:	4b01      	ldr	r3, [pc, #4]	; (800cdd0 <__errno+0x8>)
 800cdca:	6818      	ldr	r0, [r3, #0]
 800cdcc:	4770      	bx	lr
 800cdce:	bf00      	nop
 800cdd0:	200002d0 	.word	0x200002d0

0800cdd4 <__libc_init_array>:
 800cdd4:	b570      	push	{r4, r5, r6, lr}
 800cdd6:	4d0d      	ldr	r5, [pc, #52]	; (800ce0c <__libc_init_array+0x38>)
 800cdd8:	4c0d      	ldr	r4, [pc, #52]	; (800ce10 <__libc_init_array+0x3c>)
 800cdda:	1b64      	subs	r4, r4, r5
 800cddc:	10a4      	asrs	r4, r4, #2
 800cdde:	2600      	movs	r6, #0
 800cde0:	42a6      	cmp	r6, r4
 800cde2:	d109      	bne.n	800cdf8 <__libc_init_array+0x24>
 800cde4:	4d0b      	ldr	r5, [pc, #44]	; (800ce14 <__libc_init_array+0x40>)
 800cde6:	4c0c      	ldr	r4, [pc, #48]	; (800ce18 <__libc_init_array+0x44>)
 800cde8:	f000 fc5e 	bl	800d6a8 <_init>
 800cdec:	1b64      	subs	r4, r4, r5
 800cdee:	10a4      	asrs	r4, r4, #2
 800cdf0:	2600      	movs	r6, #0
 800cdf2:	42a6      	cmp	r6, r4
 800cdf4:	d105      	bne.n	800ce02 <__libc_init_array+0x2e>
 800cdf6:	bd70      	pop	{r4, r5, r6, pc}
 800cdf8:	f855 3b04 	ldr.w	r3, [r5], #4
 800cdfc:	4798      	blx	r3
 800cdfe:	3601      	adds	r6, #1
 800ce00:	e7ee      	b.n	800cde0 <__libc_init_array+0xc>
 800ce02:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce06:	4798      	blx	r3
 800ce08:	3601      	adds	r6, #1
 800ce0a:	e7f2      	b.n	800cdf2 <__libc_init_array+0x1e>
 800ce0c:	0800da98 	.word	0x0800da98
 800ce10:	0800da98 	.word	0x0800da98
 800ce14:	0800da98 	.word	0x0800da98
 800ce18:	0800da9c 	.word	0x0800da9c

0800ce1c <malloc>:
 800ce1c:	4b02      	ldr	r3, [pc, #8]	; (800ce28 <malloc+0xc>)
 800ce1e:	4601      	mov	r1, r0
 800ce20:	6818      	ldr	r0, [r3, #0]
 800ce22:	f000 b871 	b.w	800cf08 <_malloc_r>
 800ce26:	bf00      	nop
 800ce28:	200002d0 	.word	0x200002d0

0800ce2c <free>:
 800ce2c:	4b02      	ldr	r3, [pc, #8]	; (800ce38 <free+0xc>)
 800ce2e:	4601      	mov	r1, r0
 800ce30:	6818      	ldr	r0, [r3, #0]
 800ce32:	f000 b819 	b.w	800ce68 <_free_r>
 800ce36:	bf00      	nop
 800ce38:	200002d0 	.word	0x200002d0

0800ce3c <memcpy>:
 800ce3c:	440a      	add	r2, r1
 800ce3e:	4291      	cmp	r1, r2
 800ce40:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ce44:	d100      	bne.n	800ce48 <memcpy+0xc>
 800ce46:	4770      	bx	lr
 800ce48:	b510      	push	{r4, lr}
 800ce4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce52:	4291      	cmp	r1, r2
 800ce54:	d1f9      	bne.n	800ce4a <memcpy+0xe>
 800ce56:	bd10      	pop	{r4, pc}

0800ce58 <memset>:
 800ce58:	4402      	add	r2, r0
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	4293      	cmp	r3, r2
 800ce5e:	d100      	bne.n	800ce62 <memset+0xa>
 800ce60:	4770      	bx	lr
 800ce62:	f803 1b01 	strb.w	r1, [r3], #1
 800ce66:	e7f9      	b.n	800ce5c <memset+0x4>

0800ce68 <_free_r>:
 800ce68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ce6a:	2900      	cmp	r1, #0
 800ce6c:	d048      	beq.n	800cf00 <_free_r+0x98>
 800ce6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce72:	9001      	str	r0, [sp, #4]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	f1a1 0404 	sub.w	r4, r1, #4
 800ce7a:	bfb8      	it	lt
 800ce7c:	18e4      	addlt	r4, r4, r3
 800ce7e:	f000 f8cd 	bl	800d01c <__malloc_lock>
 800ce82:	4a20      	ldr	r2, [pc, #128]	; (800cf04 <_free_r+0x9c>)
 800ce84:	9801      	ldr	r0, [sp, #4]
 800ce86:	6813      	ldr	r3, [r2, #0]
 800ce88:	4615      	mov	r5, r2
 800ce8a:	b933      	cbnz	r3, 800ce9a <_free_r+0x32>
 800ce8c:	6063      	str	r3, [r4, #4]
 800ce8e:	6014      	str	r4, [r2, #0]
 800ce90:	b003      	add	sp, #12
 800ce92:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ce96:	f000 b8c7 	b.w	800d028 <__malloc_unlock>
 800ce9a:	42a3      	cmp	r3, r4
 800ce9c:	d90b      	bls.n	800ceb6 <_free_r+0x4e>
 800ce9e:	6821      	ldr	r1, [r4, #0]
 800cea0:	1862      	adds	r2, r4, r1
 800cea2:	4293      	cmp	r3, r2
 800cea4:	bf04      	itt	eq
 800cea6:	681a      	ldreq	r2, [r3, #0]
 800cea8:	685b      	ldreq	r3, [r3, #4]
 800ceaa:	6063      	str	r3, [r4, #4]
 800ceac:	bf04      	itt	eq
 800ceae:	1852      	addeq	r2, r2, r1
 800ceb0:	6022      	streq	r2, [r4, #0]
 800ceb2:	602c      	str	r4, [r5, #0]
 800ceb4:	e7ec      	b.n	800ce90 <_free_r+0x28>
 800ceb6:	461a      	mov	r2, r3
 800ceb8:	685b      	ldr	r3, [r3, #4]
 800ceba:	b10b      	cbz	r3, 800cec0 <_free_r+0x58>
 800cebc:	42a3      	cmp	r3, r4
 800cebe:	d9fa      	bls.n	800ceb6 <_free_r+0x4e>
 800cec0:	6811      	ldr	r1, [r2, #0]
 800cec2:	1855      	adds	r5, r2, r1
 800cec4:	42a5      	cmp	r5, r4
 800cec6:	d10b      	bne.n	800cee0 <_free_r+0x78>
 800cec8:	6824      	ldr	r4, [r4, #0]
 800ceca:	4421      	add	r1, r4
 800cecc:	1854      	adds	r4, r2, r1
 800cece:	42a3      	cmp	r3, r4
 800ced0:	6011      	str	r1, [r2, #0]
 800ced2:	d1dd      	bne.n	800ce90 <_free_r+0x28>
 800ced4:	681c      	ldr	r4, [r3, #0]
 800ced6:	685b      	ldr	r3, [r3, #4]
 800ced8:	6053      	str	r3, [r2, #4]
 800ceda:	4421      	add	r1, r4
 800cedc:	6011      	str	r1, [r2, #0]
 800cede:	e7d7      	b.n	800ce90 <_free_r+0x28>
 800cee0:	d902      	bls.n	800cee8 <_free_r+0x80>
 800cee2:	230c      	movs	r3, #12
 800cee4:	6003      	str	r3, [r0, #0]
 800cee6:	e7d3      	b.n	800ce90 <_free_r+0x28>
 800cee8:	6825      	ldr	r5, [r4, #0]
 800ceea:	1961      	adds	r1, r4, r5
 800ceec:	428b      	cmp	r3, r1
 800ceee:	bf04      	itt	eq
 800cef0:	6819      	ldreq	r1, [r3, #0]
 800cef2:	685b      	ldreq	r3, [r3, #4]
 800cef4:	6063      	str	r3, [r4, #4]
 800cef6:	bf04      	itt	eq
 800cef8:	1949      	addeq	r1, r1, r5
 800cefa:	6021      	streq	r1, [r4, #0]
 800cefc:	6054      	str	r4, [r2, #4]
 800cefe:	e7c7      	b.n	800ce90 <_free_r+0x28>
 800cf00:	b003      	add	sp, #12
 800cf02:	bd30      	pop	{r4, r5, pc}
 800cf04:	200003d0 	.word	0x200003d0

0800cf08 <_malloc_r>:
 800cf08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf0a:	1ccd      	adds	r5, r1, #3
 800cf0c:	f025 0503 	bic.w	r5, r5, #3
 800cf10:	3508      	adds	r5, #8
 800cf12:	2d0c      	cmp	r5, #12
 800cf14:	bf38      	it	cc
 800cf16:	250c      	movcc	r5, #12
 800cf18:	2d00      	cmp	r5, #0
 800cf1a:	4606      	mov	r6, r0
 800cf1c:	db01      	blt.n	800cf22 <_malloc_r+0x1a>
 800cf1e:	42a9      	cmp	r1, r5
 800cf20:	d903      	bls.n	800cf2a <_malloc_r+0x22>
 800cf22:	230c      	movs	r3, #12
 800cf24:	6033      	str	r3, [r6, #0]
 800cf26:	2000      	movs	r0, #0
 800cf28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf2a:	f000 f877 	bl	800d01c <__malloc_lock>
 800cf2e:	4921      	ldr	r1, [pc, #132]	; (800cfb4 <_malloc_r+0xac>)
 800cf30:	680a      	ldr	r2, [r1, #0]
 800cf32:	4614      	mov	r4, r2
 800cf34:	b99c      	cbnz	r4, 800cf5e <_malloc_r+0x56>
 800cf36:	4f20      	ldr	r7, [pc, #128]	; (800cfb8 <_malloc_r+0xb0>)
 800cf38:	683b      	ldr	r3, [r7, #0]
 800cf3a:	b923      	cbnz	r3, 800cf46 <_malloc_r+0x3e>
 800cf3c:	4621      	mov	r1, r4
 800cf3e:	4630      	mov	r0, r6
 800cf40:	f000 f83c 	bl	800cfbc <_sbrk_r>
 800cf44:	6038      	str	r0, [r7, #0]
 800cf46:	4629      	mov	r1, r5
 800cf48:	4630      	mov	r0, r6
 800cf4a:	f000 f837 	bl	800cfbc <_sbrk_r>
 800cf4e:	1c43      	adds	r3, r0, #1
 800cf50:	d123      	bne.n	800cf9a <_malloc_r+0x92>
 800cf52:	230c      	movs	r3, #12
 800cf54:	6033      	str	r3, [r6, #0]
 800cf56:	4630      	mov	r0, r6
 800cf58:	f000 f866 	bl	800d028 <__malloc_unlock>
 800cf5c:	e7e3      	b.n	800cf26 <_malloc_r+0x1e>
 800cf5e:	6823      	ldr	r3, [r4, #0]
 800cf60:	1b5b      	subs	r3, r3, r5
 800cf62:	d417      	bmi.n	800cf94 <_malloc_r+0x8c>
 800cf64:	2b0b      	cmp	r3, #11
 800cf66:	d903      	bls.n	800cf70 <_malloc_r+0x68>
 800cf68:	6023      	str	r3, [r4, #0]
 800cf6a:	441c      	add	r4, r3
 800cf6c:	6025      	str	r5, [r4, #0]
 800cf6e:	e004      	b.n	800cf7a <_malloc_r+0x72>
 800cf70:	6863      	ldr	r3, [r4, #4]
 800cf72:	42a2      	cmp	r2, r4
 800cf74:	bf0c      	ite	eq
 800cf76:	600b      	streq	r3, [r1, #0]
 800cf78:	6053      	strne	r3, [r2, #4]
 800cf7a:	4630      	mov	r0, r6
 800cf7c:	f000 f854 	bl	800d028 <__malloc_unlock>
 800cf80:	f104 000b 	add.w	r0, r4, #11
 800cf84:	1d23      	adds	r3, r4, #4
 800cf86:	f020 0007 	bic.w	r0, r0, #7
 800cf8a:	1ac2      	subs	r2, r0, r3
 800cf8c:	d0cc      	beq.n	800cf28 <_malloc_r+0x20>
 800cf8e:	1a1b      	subs	r3, r3, r0
 800cf90:	50a3      	str	r3, [r4, r2]
 800cf92:	e7c9      	b.n	800cf28 <_malloc_r+0x20>
 800cf94:	4622      	mov	r2, r4
 800cf96:	6864      	ldr	r4, [r4, #4]
 800cf98:	e7cc      	b.n	800cf34 <_malloc_r+0x2c>
 800cf9a:	1cc4      	adds	r4, r0, #3
 800cf9c:	f024 0403 	bic.w	r4, r4, #3
 800cfa0:	42a0      	cmp	r0, r4
 800cfa2:	d0e3      	beq.n	800cf6c <_malloc_r+0x64>
 800cfa4:	1a21      	subs	r1, r4, r0
 800cfa6:	4630      	mov	r0, r6
 800cfa8:	f000 f808 	bl	800cfbc <_sbrk_r>
 800cfac:	3001      	adds	r0, #1
 800cfae:	d1dd      	bne.n	800cf6c <_malloc_r+0x64>
 800cfb0:	e7cf      	b.n	800cf52 <_malloc_r+0x4a>
 800cfb2:	bf00      	nop
 800cfb4:	200003d0 	.word	0x200003d0
 800cfb8:	200003d4 	.word	0x200003d4

0800cfbc <_sbrk_r>:
 800cfbc:	b538      	push	{r3, r4, r5, lr}
 800cfbe:	4d06      	ldr	r5, [pc, #24]	; (800cfd8 <_sbrk_r+0x1c>)
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	4604      	mov	r4, r0
 800cfc4:	4608      	mov	r0, r1
 800cfc6:	602b      	str	r3, [r5, #0]
 800cfc8:	f7f6 f89e 	bl	8003108 <_sbrk>
 800cfcc:	1c43      	adds	r3, r0, #1
 800cfce:	d102      	bne.n	800cfd6 <_sbrk_r+0x1a>
 800cfd0:	682b      	ldr	r3, [r5, #0]
 800cfd2:	b103      	cbz	r3, 800cfd6 <_sbrk_r+0x1a>
 800cfd4:	6023      	str	r3, [r4, #0]
 800cfd6:	bd38      	pop	{r3, r4, r5, pc}
 800cfd8:	20005b20 	.word	0x20005b20

0800cfdc <siprintf>:
 800cfdc:	b40e      	push	{r1, r2, r3}
 800cfde:	b500      	push	{lr}
 800cfe0:	b09c      	sub	sp, #112	; 0x70
 800cfe2:	ab1d      	add	r3, sp, #116	; 0x74
 800cfe4:	9002      	str	r0, [sp, #8]
 800cfe6:	9006      	str	r0, [sp, #24]
 800cfe8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cfec:	4809      	ldr	r0, [pc, #36]	; (800d014 <siprintf+0x38>)
 800cfee:	9107      	str	r1, [sp, #28]
 800cff0:	9104      	str	r1, [sp, #16]
 800cff2:	4909      	ldr	r1, [pc, #36]	; (800d018 <siprintf+0x3c>)
 800cff4:	f853 2b04 	ldr.w	r2, [r3], #4
 800cff8:	9105      	str	r1, [sp, #20]
 800cffa:	6800      	ldr	r0, [r0, #0]
 800cffc:	9301      	str	r3, [sp, #4]
 800cffe:	a902      	add	r1, sp, #8
 800d000:	f000 f874 	bl	800d0ec <_svfiprintf_r>
 800d004:	9b02      	ldr	r3, [sp, #8]
 800d006:	2200      	movs	r2, #0
 800d008:	701a      	strb	r2, [r3, #0]
 800d00a:	b01c      	add	sp, #112	; 0x70
 800d00c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d010:	b003      	add	sp, #12
 800d012:	4770      	bx	lr
 800d014:	200002d0 	.word	0x200002d0
 800d018:	ffff0208 	.word	0xffff0208

0800d01c <__malloc_lock>:
 800d01c:	4801      	ldr	r0, [pc, #4]	; (800d024 <__malloc_lock+0x8>)
 800d01e:	f000 baf9 	b.w	800d614 <__retarget_lock_acquire_recursive>
 800d022:	bf00      	nop
 800d024:	20005b28 	.word	0x20005b28

0800d028 <__malloc_unlock>:
 800d028:	4801      	ldr	r0, [pc, #4]	; (800d030 <__malloc_unlock+0x8>)
 800d02a:	f000 baf4 	b.w	800d616 <__retarget_lock_release_recursive>
 800d02e:	bf00      	nop
 800d030:	20005b28 	.word	0x20005b28

0800d034 <__ssputs_r>:
 800d034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d038:	688e      	ldr	r6, [r1, #8]
 800d03a:	429e      	cmp	r6, r3
 800d03c:	4682      	mov	sl, r0
 800d03e:	460c      	mov	r4, r1
 800d040:	4690      	mov	r8, r2
 800d042:	461f      	mov	r7, r3
 800d044:	d838      	bhi.n	800d0b8 <__ssputs_r+0x84>
 800d046:	898a      	ldrh	r2, [r1, #12]
 800d048:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d04c:	d032      	beq.n	800d0b4 <__ssputs_r+0x80>
 800d04e:	6825      	ldr	r5, [r4, #0]
 800d050:	6909      	ldr	r1, [r1, #16]
 800d052:	eba5 0901 	sub.w	r9, r5, r1
 800d056:	6965      	ldr	r5, [r4, #20]
 800d058:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d05c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d060:	3301      	adds	r3, #1
 800d062:	444b      	add	r3, r9
 800d064:	106d      	asrs	r5, r5, #1
 800d066:	429d      	cmp	r5, r3
 800d068:	bf38      	it	cc
 800d06a:	461d      	movcc	r5, r3
 800d06c:	0553      	lsls	r3, r2, #21
 800d06e:	d531      	bpl.n	800d0d4 <__ssputs_r+0xa0>
 800d070:	4629      	mov	r1, r5
 800d072:	f7ff ff49 	bl	800cf08 <_malloc_r>
 800d076:	4606      	mov	r6, r0
 800d078:	b950      	cbnz	r0, 800d090 <__ssputs_r+0x5c>
 800d07a:	230c      	movs	r3, #12
 800d07c:	f8ca 3000 	str.w	r3, [sl]
 800d080:	89a3      	ldrh	r3, [r4, #12]
 800d082:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d086:	81a3      	strh	r3, [r4, #12]
 800d088:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d08c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d090:	6921      	ldr	r1, [r4, #16]
 800d092:	464a      	mov	r2, r9
 800d094:	f7ff fed2 	bl	800ce3c <memcpy>
 800d098:	89a3      	ldrh	r3, [r4, #12]
 800d09a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d09e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d0a2:	81a3      	strh	r3, [r4, #12]
 800d0a4:	6126      	str	r6, [r4, #16]
 800d0a6:	6165      	str	r5, [r4, #20]
 800d0a8:	444e      	add	r6, r9
 800d0aa:	eba5 0509 	sub.w	r5, r5, r9
 800d0ae:	6026      	str	r6, [r4, #0]
 800d0b0:	60a5      	str	r5, [r4, #8]
 800d0b2:	463e      	mov	r6, r7
 800d0b4:	42be      	cmp	r6, r7
 800d0b6:	d900      	bls.n	800d0ba <__ssputs_r+0x86>
 800d0b8:	463e      	mov	r6, r7
 800d0ba:	4632      	mov	r2, r6
 800d0bc:	6820      	ldr	r0, [r4, #0]
 800d0be:	4641      	mov	r1, r8
 800d0c0:	f000 faaa 	bl	800d618 <memmove>
 800d0c4:	68a3      	ldr	r3, [r4, #8]
 800d0c6:	6822      	ldr	r2, [r4, #0]
 800d0c8:	1b9b      	subs	r3, r3, r6
 800d0ca:	4432      	add	r2, r6
 800d0cc:	60a3      	str	r3, [r4, #8]
 800d0ce:	6022      	str	r2, [r4, #0]
 800d0d0:	2000      	movs	r0, #0
 800d0d2:	e7db      	b.n	800d08c <__ssputs_r+0x58>
 800d0d4:	462a      	mov	r2, r5
 800d0d6:	f000 fab9 	bl	800d64c <_realloc_r>
 800d0da:	4606      	mov	r6, r0
 800d0dc:	2800      	cmp	r0, #0
 800d0de:	d1e1      	bne.n	800d0a4 <__ssputs_r+0x70>
 800d0e0:	6921      	ldr	r1, [r4, #16]
 800d0e2:	4650      	mov	r0, sl
 800d0e4:	f7ff fec0 	bl	800ce68 <_free_r>
 800d0e8:	e7c7      	b.n	800d07a <__ssputs_r+0x46>
	...

0800d0ec <_svfiprintf_r>:
 800d0ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0f0:	4698      	mov	r8, r3
 800d0f2:	898b      	ldrh	r3, [r1, #12]
 800d0f4:	061b      	lsls	r3, r3, #24
 800d0f6:	b09d      	sub	sp, #116	; 0x74
 800d0f8:	4607      	mov	r7, r0
 800d0fa:	460d      	mov	r5, r1
 800d0fc:	4614      	mov	r4, r2
 800d0fe:	d50e      	bpl.n	800d11e <_svfiprintf_r+0x32>
 800d100:	690b      	ldr	r3, [r1, #16]
 800d102:	b963      	cbnz	r3, 800d11e <_svfiprintf_r+0x32>
 800d104:	2140      	movs	r1, #64	; 0x40
 800d106:	f7ff feff 	bl	800cf08 <_malloc_r>
 800d10a:	6028      	str	r0, [r5, #0]
 800d10c:	6128      	str	r0, [r5, #16]
 800d10e:	b920      	cbnz	r0, 800d11a <_svfiprintf_r+0x2e>
 800d110:	230c      	movs	r3, #12
 800d112:	603b      	str	r3, [r7, #0]
 800d114:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d118:	e0d1      	b.n	800d2be <_svfiprintf_r+0x1d2>
 800d11a:	2340      	movs	r3, #64	; 0x40
 800d11c:	616b      	str	r3, [r5, #20]
 800d11e:	2300      	movs	r3, #0
 800d120:	9309      	str	r3, [sp, #36]	; 0x24
 800d122:	2320      	movs	r3, #32
 800d124:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d128:	f8cd 800c 	str.w	r8, [sp, #12]
 800d12c:	2330      	movs	r3, #48	; 0x30
 800d12e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d2d8 <_svfiprintf_r+0x1ec>
 800d132:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d136:	f04f 0901 	mov.w	r9, #1
 800d13a:	4623      	mov	r3, r4
 800d13c:	469a      	mov	sl, r3
 800d13e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d142:	b10a      	cbz	r2, 800d148 <_svfiprintf_r+0x5c>
 800d144:	2a25      	cmp	r2, #37	; 0x25
 800d146:	d1f9      	bne.n	800d13c <_svfiprintf_r+0x50>
 800d148:	ebba 0b04 	subs.w	fp, sl, r4
 800d14c:	d00b      	beq.n	800d166 <_svfiprintf_r+0x7a>
 800d14e:	465b      	mov	r3, fp
 800d150:	4622      	mov	r2, r4
 800d152:	4629      	mov	r1, r5
 800d154:	4638      	mov	r0, r7
 800d156:	f7ff ff6d 	bl	800d034 <__ssputs_r>
 800d15a:	3001      	adds	r0, #1
 800d15c:	f000 80aa 	beq.w	800d2b4 <_svfiprintf_r+0x1c8>
 800d160:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d162:	445a      	add	r2, fp
 800d164:	9209      	str	r2, [sp, #36]	; 0x24
 800d166:	f89a 3000 	ldrb.w	r3, [sl]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	f000 80a2 	beq.w	800d2b4 <_svfiprintf_r+0x1c8>
 800d170:	2300      	movs	r3, #0
 800d172:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d176:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d17a:	f10a 0a01 	add.w	sl, sl, #1
 800d17e:	9304      	str	r3, [sp, #16]
 800d180:	9307      	str	r3, [sp, #28]
 800d182:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d186:	931a      	str	r3, [sp, #104]	; 0x68
 800d188:	4654      	mov	r4, sl
 800d18a:	2205      	movs	r2, #5
 800d18c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d190:	4851      	ldr	r0, [pc, #324]	; (800d2d8 <_svfiprintf_r+0x1ec>)
 800d192:	f7f3 f81d 	bl	80001d0 <memchr>
 800d196:	9a04      	ldr	r2, [sp, #16]
 800d198:	b9d8      	cbnz	r0, 800d1d2 <_svfiprintf_r+0xe6>
 800d19a:	06d0      	lsls	r0, r2, #27
 800d19c:	bf44      	itt	mi
 800d19e:	2320      	movmi	r3, #32
 800d1a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d1a4:	0711      	lsls	r1, r2, #28
 800d1a6:	bf44      	itt	mi
 800d1a8:	232b      	movmi	r3, #43	; 0x2b
 800d1aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d1ae:	f89a 3000 	ldrb.w	r3, [sl]
 800d1b2:	2b2a      	cmp	r3, #42	; 0x2a
 800d1b4:	d015      	beq.n	800d1e2 <_svfiprintf_r+0xf6>
 800d1b6:	9a07      	ldr	r2, [sp, #28]
 800d1b8:	4654      	mov	r4, sl
 800d1ba:	2000      	movs	r0, #0
 800d1bc:	f04f 0c0a 	mov.w	ip, #10
 800d1c0:	4621      	mov	r1, r4
 800d1c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d1c6:	3b30      	subs	r3, #48	; 0x30
 800d1c8:	2b09      	cmp	r3, #9
 800d1ca:	d94e      	bls.n	800d26a <_svfiprintf_r+0x17e>
 800d1cc:	b1b0      	cbz	r0, 800d1fc <_svfiprintf_r+0x110>
 800d1ce:	9207      	str	r2, [sp, #28]
 800d1d0:	e014      	b.n	800d1fc <_svfiprintf_r+0x110>
 800d1d2:	eba0 0308 	sub.w	r3, r0, r8
 800d1d6:	fa09 f303 	lsl.w	r3, r9, r3
 800d1da:	4313      	orrs	r3, r2
 800d1dc:	9304      	str	r3, [sp, #16]
 800d1de:	46a2      	mov	sl, r4
 800d1e0:	e7d2      	b.n	800d188 <_svfiprintf_r+0x9c>
 800d1e2:	9b03      	ldr	r3, [sp, #12]
 800d1e4:	1d19      	adds	r1, r3, #4
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	9103      	str	r1, [sp, #12]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	bfbb      	ittet	lt
 800d1ee:	425b      	neglt	r3, r3
 800d1f0:	f042 0202 	orrlt.w	r2, r2, #2
 800d1f4:	9307      	strge	r3, [sp, #28]
 800d1f6:	9307      	strlt	r3, [sp, #28]
 800d1f8:	bfb8      	it	lt
 800d1fa:	9204      	strlt	r2, [sp, #16]
 800d1fc:	7823      	ldrb	r3, [r4, #0]
 800d1fe:	2b2e      	cmp	r3, #46	; 0x2e
 800d200:	d10c      	bne.n	800d21c <_svfiprintf_r+0x130>
 800d202:	7863      	ldrb	r3, [r4, #1]
 800d204:	2b2a      	cmp	r3, #42	; 0x2a
 800d206:	d135      	bne.n	800d274 <_svfiprintf_r+0x188>
 800d208:	9b03      	ldr	r3, [sp, #12]
 800d20a:	1d1a      	adds	r2, r3, #4
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	9203      	str	r2, [sp, #12]
 800d210:	2b00      	cmp	r3, #0
 800d212:	bfb8      	it	lt
 800d214:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d218:	3402      	adds	r4, #2
 800d21a:	9305      	str	r3, [sp, #20]
 800d21c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d2e8 <_svfiprintf_r+0x1fc>
 800d220:	7821      	ldrb	r1, [r4, #0]
 800d222:	2203      	movs	r2, #3
 800d224:	4650      	mov	r0, sl
 800d226:	f7f2 ffd3 	bl	80001d0 <memchr>
 800d22a:	b140      	cbz	r0, 800d23e <_svfiprintf_r+0x152>
 800d22c:	2340      	movs	r3, #64	; 0x40
 800d22e:	eba0 000a 	sub.w	r0, r0, sl
 800d232:	fa03 f000 	lsl.w	r0, r3, r0
 800d236:	9b04      	ldr	r3, [sp, #16]
 800d238:	4303      	orrs	r3, r0
 800d23a:	3401      	adds	r4, #1
 800d23c:	9304      	str	r3, [sp, #16]
 800d23e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d242:	4826      	ldr	r0, [pc, #152]	; (800d2dc <_svfiprintf_r+0x1f0>)
 800d244:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d248:	2206      	movs	r2, #6
 800d24a:	f7f2 ffc1 	bl	80001d0 <memchr>
 800d24e:	2800      	cmp	r0, #0
 800d250:	d038      	beq.n	800d2c4 <_svfiprintf_r+0x1d8>
 800d252:	4b23      	ldr	r3, [pc, #140]	; (800d2e0 <_svfiprintf_r+0x1f4>)
 800d254:	bb1b      	cbnz	r3, 800d29e <_svfiprintf_r+0x1b2>
 800d256:	9b03      	ldr	r3, [sp, #12]
 800d258:	3307      	adds	r3, #7
 800d25a:	f023 0307 	bic.w	r3, r3, #7
 800d25e:	3308      	adds	r3, #8
 800d260:	9303      	str	r3, [sp, #12]
 800d262:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d264:	4433      	add	r3, r6
 800d266:	9309      	str	r3, [sp, #36]	; 0x24
 800d268:	e767      	b.n	800d13a <_svfiprintf_r+0x4e>
 800d26a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d26e:	460c      	mov	r4, r1
 800d270:	2001      	movs	r0, #1
 800d272:	e7a5      	b.n	800d1c0 <_svfiprintf_r+0xd4>
 800d274:	2300      	movs	r3, #0
 800d276:	3401      	adds	r4, #1
 800d278:	9305      	str	r3, [sp, #20]
 800d27a:	4619      	mov	r1, r3
 800d27c:	f04f 0c0a 	mov.w	ip, #10
 800d280:	4620      	mov	r0, r4
 800d282:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d286:	3a30      	subs	r2, #48	; 0x30
 800d288:	2a09      	cmp	r2, #9
 800d28a:	d903      	bls.n	800d294 <_svfiprintf_r+0x1a8>
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d0c5      	beq.n	800d21c <_svfiprintf_r+0x130>
 800d290:	9105      	str	r1, [sp, #20]
 800d292:	e7c3      	b.n	800d21c <_svfiprintf_r+0x130>
 800d294:	fb0c 2101 	mla	r1, ip, r1, r2
 800d298:	4604      	mov	r4, r0
 800d29a:	2301      	movs	r3, #1
 800d29c:	e7f0      	b.n	800d280 <_svfiprintf_r+0x194>
 800d29e:	ab03      	add	r3, sp, #12
 800d2a0:	9300      	str	r3, [sp, #0]
 800d2a2:	462a      	mov	r2, r5
 800d2a4:	4b0f      	ldr	r3, [pc, #60]	; (800d2e4 <_svfiprintf_r+0x1f8>)
 800d2a6:	a904      	add	r1, sp, #16
 800d2a8:	4638      	mov	r0, r7
 800d2aa:	f3af 8000 	nop.w
 800d2ae:	1c42      	adds	r2, r0, #1
 800d2b0:	4606      	mov	r6, r0
 800d2b2:	d1d6      	bne.n	800d262 <_svfiprintf_r+0x176>
 800d2b4:	89ab      	ldrh	r3, [r5, #12]
 800d2b6:	065b      	lsls	r3, r3, #25
 800d2b8:	f53f af2c 	bmi.w	800d114 <_svfiprintf_r+0x28>
 800d2bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d2be:	b01d      	add	sp, #116	; 0x74
 800d2c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2c4:	ab03      	add	r3, sp, #12
 800d2c6:	9300      	str	r3, [sp, #0]
 800d2c8:	462a      	mov	r2, r5
 800d2ca:	4b06      	ldr	r3, [pc, #24]	; (800d2e4 <_svfiprintf_r+0x1f8>)
 800d2cc:	a904      	add	r1, sp, #16
 800d2ce:	4638      	mov	r0, r7
 800d2d0:	f000 f87a 	bl	800d3c8 <_printf_i>
 800d2d4:	e7eb      	b.n	800d2ae <_svfiprintf_r+0x1c2>
 800d2d6:	bf00      	nop
 800d2d8:	0800da5c 	.word	0x0800da5c
 800d2dc:	0800da66 	.word	0x0800da66
 800d2e0:	00000000 	.word	0x00000000
 800d2e4:	0800d035 	.word	0x0800d035
 800d2e8:	0800da62 	.word	0x0800da62

0800d2ec <_printf_common>:
 800d2ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2f0:	4616      	mov	r6, r2
 800d2f2:	4699      	mov	r9, r3
 800d2f4:	688a      	ldr	r2, [r1, #8]
 800d2f6:	690b      	ldr	r3, [r1, #16]
 800d2f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d2fc:	4293      	cmp	r3, r2
 800d2fe:	bfb8      	it	lt
 800d300:	4613      	movlt	r3, r2
 800d302:	6033      	str	r3, [r6, #0]
 800d304:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d308:	4607      	mov	r7, r0
 800d30a:	460c      	mov	r4, r1
 800d30c:	b10a      	cbz	r2, 800d312 <_printf_common+0x26>
 800d30e:	3301      	adds	r3, #1
 800d310:	6033      	str	r3, [r6, #0]
 800d312:	6823      	ldr	r3, [r4, #0]
 800d314:	0699      	lsls	r1, r3, #26
 800d316:	bf42      	ittt	mi
 800d318:	6833      	ldrmi	r3, [r6, #0]
 800d31a:	3302      	addmi	r3, #2
 800d31c:	6033      	strmi	r3, [r6, #0]
 800d31e:	6825      	ldr	r5, [r4, #0]
 800d320:	f015 0506 	ands.w	r5, r5, #6
 800d324:	d106      	bne.n	800d334 <_printf_common+0x48>
 800d326:	f104 0a19 	add.w	sl, r4, #25
 800d32a:	68e3      	ldr	r3, [r4, #12]
 800d32c:	6832      	ldr	r2, [r6, #0]
 800d32e:	1a9b      	subs	r3, r3, r2
 800d330:	42ab      	cmp	r3, r5
 800d332:	dc26      	bgt.n	800d382 <_printf_common+0x96>
 800d334:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d338:	1e13      	subs	r3, r2, #0
 800d33a:	6822      	ldr	r2, [r4, #0]
 800d33c:	bf18      	it	ne
 800d33e:	2301      	movne	r3, #1
 800d340:	0692      	lsls	r2, r2, #26
 800d342:	d42b      	bmi.n	800d39c <_printf_common+0xb0>
 800d344:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d348:	4649      	mov	r1, r9
 800d34a:	4638      	mov	r0, r7
 800d34c:	47c0      	blx	r8
 800d34e:	3001      	adds	r0, #1
 800d350:	d01e      	beq.n	800d390 <_printf_common+0xa4>
 800d352:	6823      	ldr	r3, [r4, #0]
 800d354:	68e5      	ldr	r5, [r4, #12]
 800d356:	6832      	ldr	r2, [r6, #0]
 800d358:	f003 0306 	and.w	r3, r3, #6
 800d35c:	2b04      	cmp	r3, #4
 800d35e:	bf08      	it	eq
 800d360:	1aad      	subeq	r5, r5, r2
 800d362:	68a3      	ldr	r3, [r4, #8]
 800d364:	6922      	ldr	r2, [r4, #16]
 800d366:	bf0c      	ite	eq
 800d368:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d36c:	2500      	movne	r5, #0
 800d36e:	4293      	cmp	r3, r2
 800d370:	bfc4      	itt	gt
 800d372:	1a9b      	subgt	r3, r3, r2
 800d374:	18ed      	addgt	r5, r5, r3
 800d376:	2600      	movs	r6, #0
 800d378:	341a      	adds	r4, #26
 800d37a:	42b5      	cmp	r5, r6
 800d37c:	d11a      	bne.n	800d3b4 <_printf_common+0xc8>
 800d37e:	2000      	movs	r0, #0
 800d380:	e008      	b.n	800d394 <_printf_common+0xa8>
 800d382:	2301      	movs	r3, #1
 800d384:	4652      	mov	r2, sl
 800d386:	4649      	mov	r1, r9
 800d388:	4638      	mov	r0, r7
 800d38a:	47c0      	blx	r8
 800d38c:	3001      	adds	r0, #1
 800d38e:	d103      	bne.n	800d398 <_printf_common+0xac>
 800d390:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d398:	3501      	adds	r5, #1
 800d39a:	e7c6      	b.n	800d32a <_printf_common+0x3e>
 800d39c:	18e1      	adds	r1, r4, r3
 800d39e:	1c5a      	adds	r2, r3, #1
 800d3a0:	2030      	movs	r0, #48	; 0x30
 800d3a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d3a6:	4422      	add	r2, r4
 800d3a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d3ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d3b0:	3302      	adds	r3, #2
 800d3b2:	e7c7      	b.n	800d344 <_printf_common+0x58>
 800d3b4:	2301      	movs	r3, #1
 800d3b6:	4622      	mov	r2, r4
 800d3b8:	4649      	mov	r1, r9
 800d3ba:	4638      	mov	r0, r7
 800d3bc:	47c0      	blx	r8
 800d3be:	3001      	adds	r0, #1
 800d3c0:	d0e6      	beq.n	800d390 <_printf_common+0xa4>
 800d3c2:	3601      	adds	r6, #1
 800d3c4:	e7d9      	b.n	800d37a <_printf_common+0x8e>
	...

0800d3c8 <_printf_i>:
 800d3c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d3cc:	460c      	mov	r4, r1
 800d3ce:	4691      	mov	r9, r2
 800d3d0:	7e27      	ldrb	r7, [r4, #24]
 800d3d2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d3d4:	2f78      	cmp	r7, #120	; 0x78
 800d3d6:	4680      	mov	r8, r0
 800d3d8:	469a      	mov	sl, r3
 800d3da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d3de:	d807      	bhi.n	800d3f0 <_printf_i+0x28>
 800d3e0:	2f62      	cmp	r7, #98	; 0x62
 800d3e2:	d80a      	bhi.n	800d3fa <_printf_i+0x32>
 800d3e4:	2f00      	cmp	r7, #0
 800d3e6:	f000 80d8 	beq.w	800d59a <_printf_i+0x1d2>
 800d3ea:	2f58      	cmp	r7, #88	; 0x58
 800d3ec:	f000 80a3 	beq.w	800d536 <_printf_i+0x16e>
 800d3f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d3f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d3f8:	e03a      	b.n	800d470 <_printf_i+0xa8>
 800d3fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d3fe:	2b15      	cmp	r3, #21
 800d400:	d8f6      	bhi.n	800d3f0 <_printf_i+0x28>
 800d402:	a001      	add	r0, pc, #4	; (adr r0, 800d408 <_printf_i+0x40>)
 800d404:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d408:	0800d461 	.word	0x0800d461
 800d40c:	0800d475 	.word	0x0800d475
 800d410:	0800d3f1 	.word	0x0800d3f1
 800d414:	0800d3f1 	.word	0x0800d3f1
 800d418:	0800d3f1 	.word	0x0800d3f1
 800d41c:	0800d3f1 	.word	0x0800d3f1
 800d420:	0800d475 	.word	0x0800d475
 800d424:	0800d3f1 	.word	0x0800d3f1
 800d428:	0800d3f1 	.word	0x0800d3f1
 800d42c:	0800d3f1 	.word	0x0800d3f1
 800d430:	0800d3f1 	.word	0x0800d3f1
 800d434:	0800d581 	.word	0x0800d581
 800d438:	0800d4a5 	.word	0x0800d4a5
 800d43c:	0800d563 	.word	0x0800d563
 800d440:	0800d3f1 	.word	0x0800d3f1
 800d444:	0800d3f1 	.word	0x0800d3f1
 800d448:	0800d5a3 	.word	0x0800d5a3
 800d44c:	0800d3f1 	.word	0x0800d3f1
 800d450:	0800d4a5 	.word	0x0800d4a5
 800d454:	0800d3f1 	.word	0x0800d3f1
 800d458:	0800d3f1 	.word	0x0800d3f1
 800d45c:	0800d56b 	.word	0x0800d56b
 800d460:	680b      	ldr	r3, [r1, #0]
 800d462:	1d1a      	adds	r2, r3, #4
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	600a      	str	r2, [r1, #0]
 800d468:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d46c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d470:	2301      	movs	r3, #1
 800d472:	e0a3      	b.n	800d5bc <_printf_i+0x1f4>
 800d474:	6825      	ldr	r5, [r4, #0]
 800d476:	6808      	ldr	r0, [r1, #0]
 800d478:	062e      	lsls	r6, r5, #24
 800d47a:	f100 0304 	add.w	r3, r0, #4
 800d47e:	d50a      	bpl.n	800d496 <_printf_i+0xce>
 800d480:	6805      	ldr	r5, [r0, #0]
 800d482:	600b      	str	r3, [r1, #0]
 800d484:	2d00      	cmp	r5, #0
 800d486:	da03      	bge.n	800d490 <_printf_i+0xc8>
 800d488:	232d      	movs	r3, #45	; 0x2d
 800d48a:	426d      	negs	r5, r5
 800d48c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d490:	485e      	ldr	r0, [pc, #376]	; (800d60c <_printf_i+0x244>)
 800d492:	230a      	movs	r3, #10
 800d494:	e019      	b.n	800d4ca <_printf_i+0x102>
 800d496:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d49a:	6805      	ldr	r5, [r0, #0]
 800d49c:	600b      	str	r3, [r1, #0]
 800d49e:	bf18      	it	ne
 800d4a0:	b22d      	sxthne	r5, r5
 800d4a2:	e7ef      	b.n	800d484 <_printf_i+0xbc>
 800d4a4:	680b      	ldr	r3, [r1, #0]
 800d4a6:	6825      	ldr	r5, [r4, #0]
 800d4a8:	1d18      	adds	r0, r3, #4
 800d4aa:	6008      	str	r0, [r1, #0]
 800d4ac:	0628      	lsls	r0, r5, #24
 800d4ae:	d501      	bpl.n	800d4b4 <_printf_i+0xec>
 800d4b0:	681d      	ldr	r5, [r3, #0]
 800d4b2:	e002      	b.n	800d4ba <_printf_i+0xf2>
 800d4b4:	0669      	lsls	r1, r5, #25
 800d4b6:	d5fb      	bpl.n	800d4b0 <_printf_i+0xe8>
 800d4b8:	881d      	ldrh	r5, [r3, #0]
 800d4ba:	4854      	ldr	r0, [pc, #336]	; (800d60c <_printf_i+0x244>)
 800d4bc:	2f6f      	cmp	r7, #111	; 0x6f
 800d4be:	bf0c      	ite	eq
 800d4c0:	2308      	moveq	r3, #8
 800d4c2:	230a      	movne	r3, #10
 800d4c4:	2100      	movs	r1, #0
 800d4c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d4ca:	6866      	ldr	r6, [r4, #4]
 800d4cc:	60a6      	str	r6, [r4, #8]
 800d4ce:	2e00      	cmp	r6, #0
 800d4d0:	bfa2      	ittt	ge
 800d4d2:	6821      	ldrge	r1, [r4, #0]
 800d4d4:	f021 0104 	bicge.w	r1, r1, #4
 800d4d8:	6021      	strge	r1, [r4, #0]
 800d4da:	b90d      	cbnz	r5, 800d4e0 <_printf_i+0x118>
 800d4dc:	2e00      	cmp	r6, #0
 800d4de:	d04d      	beq.n	800d57c <_printf_i+0x1b4>
 800d4e0:	4616      	mov	r6, r2
 800d4e2:	fbb5 f1f3 	udiv	r1, r5, r3
 800d4e6:	fb03 5711 	mls	r7, r3, r1, r5
 800d4ea:	5dc7      	ldrb	r7, [r0, r7]
 800d4ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d4f0:	462f      	mov	r7, r5
 800d4f2:	42bb      	cmp	r3, r7
 800d4f4:	460d      	mov	r5, r1
 800d4f6:	d9f4      	bls.n	800d4e2 <_printf_i+0x11a>
 800d4f8:	2b08      	cmp	r3, #8
 800d4fa:	d10b      	bne.n	800d514 <_printf_i+0x14c>
 800d4fc:	6823      	ldr	r3, [r4, #0]
 800d4fe:	07df      	lsls	r7, r3, #31
 800d500:	d508      	bpl.n	800d514 <_printf_i+0x14c>
 800d502:	6923      	ldr	r3, [r4, #16]
 800d504:	6861      	ldr	r1, [r4, #4]
 800d506:	4299      	cmp	r1, r3
 800d508:	bfde      	ittt	le
 800d50a:	2330      	movle	r3, #48	; 0x30
 800d50c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d510:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800d514:	1b92      	subs	r2, r2, r6
 800d516:	6122      	str	r2, [r4, #16]
 800d518:	f8cd a000 	str.w	sl, [sp]
 800d51c:	464b      	mov	r3, r9
 800d51e:	aa03      	add	r2, sp, #12
 800d520:	4621      	mov	r1, r4
 800d522:	4640      	mov	r0, r8
 800d524:	f7ff fee2 	bl	800d2ec <_printf_common>
 800d528:	3001      	adds	r0, #1
 800d52a:	d14c      	bne.n	800d5c6 <_printf_i+0x1fe>
 800d52c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d530:	b004      	add	sp, #16
 800d532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d536:	4835      	ldr	r0, [pc, #212]	; (800d60c <_printf_i+0x244>)
 800d538:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d53c:	6823      	ldr	r3, [r4, #0]
 800d53e:	680e      	ldr	r6, [r1, #0]
 800d540:	061f      	lsls	r7, r3, #24
 800d542:	f856 5b04 	ldr.w	r5, [r6], #4
 800d546:	600e      	str	r6, [r1, #0]
 800d548:	d514      	bpl.n	800d574 <_printf_i+0x1ac>
 800d54a:	07d9      	lsls	r1, r3, #31
 800d54c:	bf44      	itt	mi
 800d54e:	f043 0320 	orrmi.w	r3, r3, #32
 800d552:	6023      	strmi	r3, [r4, #0]
 800d554:	b91d      	cbnz	r5, 800d55e <_printf_i+0x196>
 800d556:	6823      	ldr	r3, [r4, #0]
 800d558:	f023 0320 	bic.w	r3, r3, #32
 800d55c:	6023      	str	r3, [r4, #0]
 800d55e:	2310      	movs	r3, #16
 800d560:	e7b0      	b.n	800d4c4 <_printf_i+0xfc>
 800d562:	6823      	ldr	r3, [r4, #0]
 800d564:	f043 0320 	orr.w	r3, r3, #32
 800d568:	6023      	str	r3, [r4, #0]
 800d56a:	2378      	movs	r3, #120	; 0x78
 800d56c:	4828      	ldr	r0, [pc, #160]	; (800d610 <_printf_i+0x248>)
 800d56e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d572:	e7e3      	b.n	800d53c <_printf_i+0x174>
 800d574:	065e      	lsls	r6, r3, #25
 800d576:	bf48      	it	mi
 800d578:	b2ad      	uxthmi	r5, r5
 800d57a:	e7e6      	b.n	800d54a <_printf_i+0x182>
 800d57c:	4616      	mov	r6, r2
 800d57e:	e7bb      	b.n	800d4f8 <_printf_i+0x130>
 800d580:	680b      	ldr	r3, [r1, #0]
 800d582:	6826      	ldr	r6, [r4, #0]
 800d584:	6960      	ldr	r0, [r4, #20]
 800d586:	1d1d      	adds	r5, r3, #4
 800d588:	600d      	str	r5, [r1, #0]
 800d58a:	0635      	lsls	r5, r6, #24
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	d501      	bpl.n	800d594 <_printf_i+0x1cc>
 800d590:	6018      	str	r0, [r3, #0]
 800d592:	e002      	b.n	800d59a <_printf_i+0x1d2>
 800d594:	0671      	lsls	r1, r6, #25
 800d596:	d5fb      	bpl.n	800d590 <_printf_i+0x1c8>
 800d598:	8018      	strh	r0, [r3, #0]
 800d59a:	2300      	movs	r3, #0
 800d59c:	6123      	str	r3, [r4, #16]
 800d59e:	4616      	mov	r6, r2
 800d5a0:	e7ba      	b.n	800d518 <_printf_i+0x150>
 800d5a2:	680b      	ldr	r3, [r1, #0]
 800d5a4:	1d1a      	adds	r2, r3, #4
 800d5a6:	600a      	str	r2, [r1, #0]
 800d5a8:	681e      	ldr	r6, [r3, #0]
 800d5aa:	6862      	ldr	r2, [r4, #4]
 800d5ac:	2100      	movs	r1, #0
 800d5ae:	4630      	mov	r0, r6
 800d5b0:	f7f2 fe0e 	bl	80001d0 <memchr>
 800d5b4:	b108      	cbz	r0, 800d5ba <_printf_i+0x1f2>
 800d5b6:	1b80      	subs	r0, r0, r6
 800d5b8:	6060      	str	r0, [r4, #4]
 800d5ba:	6863      	ldr	r3, [r4, #4]
 800d5bc:	6123      	str	r3, [r4, #16]
 800d5be:	2300      	movs	r3, #0
 800d5c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d5c4:	e7a8      	b.n	800d518 <_printf_i+0x150>
 800d5c6:	6923      	ldr	r3, [r4, #16]
 800d5c8:	4632      	mov	r2, r6
 800d5ca:	4649      	mov	r1, r9
 800d5cc:	4640      	mov	r0, r8
 800d5ce:	47d0      	blx	sl
 800d5d0:	3001      	adds	r0, #1
 800d5d2:	d0ab      	beq.n	800d52c <_printf_i+0x164>
 800d5d4:	6823      	ldr	r3, [r4, #0]
 800d5d6:	079b      	lsls	r3, r3, #30
 800d5d8:	d413      	bmi.n	800d602 <_printf_i+0x23a>
 800d5da:	68e0      	ldr	r0, [r4, #12]
 800d5dc:	9b03      	ldr	r3, [sp, #12]
 800d5de:	4298      	cmp	r0, r3
 800d5e0:	bfb8      	it	lt
 800d5e2:	4618      	movlt	r0, r3
 800d5e4:	e7a4      	b.n	800d530 <_printf_i+0x168>
 800d5e6:	2301      	movs	r3, #1
 800d5e8:	4632      	mov	r2, r6
 800d5ea:	4649      	mov	r1, r9
 800d5ec:	4640      	mov	r0, r8
 800d5ee:	47d0      	blx	sl
 800d5f0:	3001      	adds	r0, #1
 800d5f2:	d09b      	beq.n	800d52c <_printf_i+0x164>
 800d5f4:	3501      	adds	r5, #1
 800d5f6:	68e3      	ldr	r3, [r4, #12]
 800d5f8:	9903      	ldr	r1, [sp, #12]
 800d5fa:	1a5b      	subs	r3, r3, r1
 800d5fc:	42ab      	cmp	r3, r5
 800d5fe:	dcf2      	bgt.n	800d5e6 <_printf_i+0x21e>
 800d600:	e7eb      	b.n	800d5da <_printf_i+0x212>
 800d602:	2500      	movs	r5, #0
 800d604:	f104 0619 	add.w	r6, r4, #25
 800d608:	e7f5      	b.n	800d5f6 <_printf_i+0x22e>
 800d60a:	bf00      	nop
 800d60c:	0800da6d 	.word	0x0800da6d
 800d610:	0800da7e 	.word	0x0800da7e

0800d614 <__retarget_lock_acquire_recursive>:
 800d614:	4770      	bx	lr

0800d616 <__retarget_lock_release_recursive>:
 800d616:	4770      	bx	lr

0800d618 <memmove>:
 800d618:	4288      	cmp	r0, r1
 800d61a:	b510      	push	{r4, lr}
 800d61c:	eb01 0402 	add.w	r4, r1, r2
 800d620:	d902      	bls.n	800d628 <memmove+0x10>
 800d622:	4284      	cmp	r4, r0
 800d624:	4623      	mov	r3, r4
 800d626:	d807      	bhi.n	800d638 <memmove+0x20>
 800d628:	1e43      	subs	r3, r0, #1
 800d62a:	42a1      	cmp	r1, r4
 800d62c:	d008      	beq.n	800d640 <memmove+0x28>
 800d62e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d632:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d636:	e7f8      	b.n	800d62a <memmove+0x12>
 800d638:	4402      	add	r2, r0
 800d63a:	4601      	mov	r1, r0
 800d63c:	428a      	cmp	r2, r1
 800d63e:	d100      	bne.n	800d642 <memmove+0x2a>
 800d640:	bd10      	pop	{r4, pc}
 800d642:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d646:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d64a:	e7f7      	b.n	800d63c <memmove+0x24>

0800d64c <_realloc_r>:
 800d64c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d64e:	4607      	mov	r7, r0
 800d650:	4614      	mov	r4, r2
 800d652:	460e      	mov	r6, r1
 800d654:	b921      	cbnz	r1, 800d660 <_realloc_r+0x14>
 800d656:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d65a:	4611      	mov	r1, r2
 800d65c:	f7ff bc54 	b.w	800cf08 <_malloc_r>
 800d660:	b922      	cbnz	r2, 800d66c <_realloc_r+0x20>
 800d662:	f7ff fc01 	bl	800ce68 <_free_r>
 800d666:	4625      	mov	r5, r4
 800d668:	4628      	mov	r0, r5
 800d66a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d66c:	f000 f814 	bl	800d698 <_malloc_usable_size_r>
 800d670:	42a0      	cmp	r0, r4
 800d672:	d20f      	bcs.n	800d694 <_realloc_r+0x48>
 800d674:	4621      	mov	r1, r4
 800d676:	4638      	mov	r0, r7
 800d678:	f7ff fc46 	bl	800cf08 <_malloc_r>
 800d67c:	4605      	mov	r5, r0
 800d67e:	2800      	cmp	r0, #0
 800d680:	d0f2      	beq.n	800d668 <_realloc_r+0x1c>
 800d682:	4631      	mov	r1, r6
 800d684:	4622      	mov	r2, r4
 800d686:	f7ff fbd9 	bl	800ce3c <memcpy>
 800d68a:	4631      	mov	r1, r6
 800d68c:	4638      	mov	r0, r7
 800d68e:	f7ff fbeb 	bl	800ce68 <_free_r>
 800d692:	e7e9      	b.n	800d668 <_realloc_r+0x1c>
 800d694:	4635      	mov	r5, r6
 800d696:	e7e7      	b.n	800d668 <_realloc_r+0x1c>

0800d698 <_malloc_usable_size_r>:
 800d698:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d69c:	1f18      	subs	r0, r3, #4
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	bfbc      	itt	lt
 800d6a2:	580b      	ldrlt	r3, [r1, r0]
 800d6a4:	18c0      	addlt	r0, r0, r3
 800d6a6:	4770      	bx	lr

0800d6a8 <_init>:
 800d6a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6aa:	bf00      	nop
 800d6ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6ae:	bc08      	pop	{r3}
 800d6b0:	469e      	mov	lr, r3
 800d6b2:	4770      	bx	lr

0800d6b4 <_fini>:
 800d6b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6b6:	bf00      	nop
 800d6b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6ba:	bc08      	pop	{r3}
 800d6bc:	469e      	mov	lr, r3
 800d6be:	4770      	bx	lr
