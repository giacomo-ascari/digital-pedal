
mcu-test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9c4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000348  0800bb4c  0800bb4c  0001bb4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be94  0800be94  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800be94  0800be94  0001be94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be9c  0800be9c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be9c  0800be9c  0001be9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bea0  0800bea0  0001bea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800bea4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00003a60  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20003af0  20003af0  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002590d  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000511c  00000000  00000000  000459cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001300  00000000  00000000  0004aaf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001120  00000000  00000000  0004bdf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026895  00000000  00000000  0004cf10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c3f4  00000000  00000000  000737a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ccb63  00000000  00000000  0008fb99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0015c6fc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004ed0  00000000  00000000  0015c750  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800bb34 	.word	0x0800bb34

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	0800bb34 	.word	0x0800bb34

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <write_register>:

//(1): Functions definitions
//-------------- Static Functions ---------------//
// Function(1): Write to register
static void write_register(uint8_t reg, uint8_t *data)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af02      	add	r7, sp, #8
 80004c6:	4603      	mov	r3, r0
 80004c8:	6039      	str	r1, [r7, #0]
 80004ca:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 80004cc:	4a09      	ldr	r2, [pc, #36]	; (80004f4 <write_register+0x34>)
 80004ce:	79fb      	ldrb	r3, [r7, #7]
 80004d0:	7013      	strb	r3, [r2, #0]
	iData[1] = data[0];
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	781a      	ldrb	r2, [r3, #0]
 80004d6:	4b07      	ldr	r3, [pc, #28]	; (80004f4 <write_register+0x34>)
 80004d8:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100);
 80004da:	2364      	movs	r3, #100	; 0x64
 80004dc:	9300      	str	r3, [sp, #0]
 80004de:	2302      	movs	r3, #2
 80004e0:	4a04      	ldr	r2, [pc, #16]	; (80004f4 <write_register+0x34>)
 80004e2:	2194      	movs	r1, #148	; 0x94
 80004e4:	4804      	ldr	r0, [pc, #16]	; (80004f8 <write_register+0x38>)
 80004e6:	f004 fc35 	bl	8004d54 <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, data, size, 100);
}
 80004ea:	bf00      	nop
 80004ec:	3708      	adds	r7, #8
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	200000ac 	.word	0x200000ac
 80004f8:	200000b0 	.word	0x200000b0

080004fc <read_register>:
// Function(2): Read from register
static void read_register(uint8_t reg, uint8_t *data)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af02      	add	r7, sp, #8
 8000502:	4603      	mov	r3, r0
 8000504:	6039      	str	r1, [r7, #0]
 8000506:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 8000508:	4a0b      	ldr	r2, [pc, #44]	; (8000538 <read_register+0x3c>)
 800050a:	79fb      	ldrb	r3, [r7, #7]
 800050c:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100);
 800050e:	2364      	movs	r3, #100	; 0x64
 8000510:	9300      	str	r3, [sp, #0]
 8000512:	2301      	movs	r3, #1
 8000514:	4a08      	ldr	r2, [pc, #32]	; (8000538 <read_register+0x3c>)
 8000516:	2194      	movs	r1, #148	; 0x94
 8000518:	4808      	ldr	r0, [pc, #32]	; (800053c <read_register+0x40>)
 800051a:	f004 fc1b 	bl	8004d54 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100);
 800051e:	2364      	movs	r3, #100	; 0x64
 8000520:	9300      	str	r3, [sp, #0]
 8000522:	2301      	movs	r3, #1
 8000524:	683a      	ldr	r2, [r7, #0]
 8000526:	2194      	movs	r1, #148	; 0x94
 8000528:	4804      	ldr	r0, [pc, #16]	; (800053c <read_register+0x40>)
 800052a:	f004 fd11 	bl	8004f50 <HAL_I2C_Master_Receive>
}
 800052e:	bf00      	nop
 8000530:	3708      	adds	r7, #8
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	200000ac 	.word	0x200000ac
 800053c:	200000b0 	.word	0x200000b0

08000540 <CS43_Init>:

//-------------- Public Functions ----------------//
// Function(1): Initialisation
void CS43_Init(I2C_HandleTypeDef i2c_handle, CS43_MODE outputMode)
{
 8000540:	b084      	sub	sp, #16
 8000542:	b580      	push	{r7, lr}
 8000544:	af00      	add	r7, sp, #0
 8000546:	f107 0c08 	add.w	ip, r7, #8
 800054a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 800054e:	4b81      	ldr	r3, [pc, #516]	; (8000754 <CS43_Init+0x214>)
 8000550:	2200      	movs	r2, #0
 8000552:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000556:	4b7f      	ldr	r3, [pc, #508]	; (8000754 <CS43_Init+0x214>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	69da      	ldr	r2, [r3, #28]
 800055c:	4b7d      	ldr	r3, [pc, #500]	; (8000754 <CS43_Init+0x214>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000564:	61da      	str	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8000566:	2201      	movs	r2, #1
 8000568:	2110      	movs	r1, #16
 800056a:	487b      	ldr	r0, [pc, #492]	; (8000758 <CS43_Init+0x218>)
 800056c:	f002 fd24 	bl	8002fb8 <HAL_GPIO_WritePin>
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 8000570:	4b7a      	ldr	r3, [pc, #488]	; (800075c <CS43_Init+0x21c>)
 8000572:	4618      	mov	r0, r3
 8000574:	f107 0308 	add.w	r3, r7, #8
 8000578:	2254      	movs	r2, #84	; 0x54
 800057a:	4619      	mov	r1, r3
 800057c:	f00b f9fc 	bl	800b978 <memcpy>
	//(2): Power down
	iData[1] = 0x01;
 8000580:	4b77      	ldr	r3, [pc, #476]	; (8000760 <CS43_Init+0x220>)
 8000582:	2201      	movs	r2, #1
 8000584:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,iData);
 8000586:	4976      	ldr	r1, [pc, #472]	; (8000760 <CS43_Init+0x220>)
 8000588:	2002      	movs	r0, #2
 800058a:	f7ff ff99 	bl	80004c0 <write_register>
	//(3): Enable Right and Left headphones
	iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 800058e:	4b74      	ldr	r3, [pc, #464]	; (8000760 <CS43_Init+0x220>)
 8000590:	2280      	movs	r2, #128	; 0x80
 8000592:	705a      	strb	r2, [r3, #1]
	iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000594:	4b72      	ldr	r3, [pc, #456]	; (8000760 <CS43_Init+0x220>)
 8000596:	785b      	ldrb	r3, [r3, #1]
 8000598:	f043 0320 	orr.w	r3, r3, #32
 800059c:	b2da      	uxtb	r2, r3
 800059e:	4b70      	ldr	r3, [pc, #448]	; (8000760 <CS43_Init+0x220>)
 80005a0:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 80005a2:	4b6f      	ldr	r3, [pc, #444]	; (8000760 <CS43_Init+0x220>)
 80005a4:	785b      	ldrb	r3, [r3, #1]
 80005a6:	f043 030c 	orr.w	r3, r3, #12
 80005aa:	b2da      	uxtb	r2, r3
 80005ac:	4b6c      	ldr	r3, [pc, #432]	; (8000760 <CS43_Init+0x220>)
 80005ae:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80005b0:	4b6b      	ldr	r3, [pc, #428]	; (8000760 <CS43_Init+0x220>)
 80005b2:	785b      	ldrb	r3, [r3, #1]
 80005b4:	f043 0303 	orr.w	r3, r3, #3
 80005b8:	b2da      	uxtb	r2, r3
 80005ba:	4b69      	ldr	r3, [pc, #420]	; (8000760 <CS43_Init+0x220>)
 80005bc:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 80005be:	4969      	ldr	r1, [pc, #420]	; (8000764 <CS43_Init+0x224>)
 80005c0:	2004      	movs	r0, #4
 80005c2:	f7ff ff7d 	bl	80004c0 <write_register>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
 80005c6:	4b66      	ldr	r3, [pc, #408]	; (8000760 <CS43_Init+0x220>)
 80005c8:	2280      	movs	r2, #128	; 0x80
 80005ca:	705a      	strb	r2, [r3, #1]
	write_register(CLOCKING_CONTROL,&iData[1]);
 80005cc:	4965      	ldr	r1, [pc, #404]	; (8000764 <CS43_Init+0x224>)
 80005ce:	2005      	movs	r0, #5
 80005d0:	f7ff ff76 	bl	80004c0 <write_register>
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
 80005d4:	4962      	ldr	r1, [pc, #392]	; (8000760 <CS43_Init+0x220>)
 80005d6:	2006      	movs	r0, #6
 80005d8:	f7ff ff90 	bl	80004fc <read_register>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 80005dc:	4b60      	ldr	r3, [pc, #384]	; (8000760 <CS43_Init+0x220>)
 80005de:	785b      	ldrb	r3, [r3, #1]
 80005e0:	f003 0320 	and.w	r3, r3, #32
 80005e4:	b2da      	uxtb	r2, r3
 80005e6:	4b5e      	ldr	r3, [pc, #376]	; (8000760 <CS43_Init+0x220>)
 80005e8:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 7);  // Slave
 80005ea:	4b5d      	ldr	r3, [pc, #372]	; (8000760 <CS43_Init+0x220>)
 80005ec:	785b      	ldrb	r3, [r3, #1]
 80005ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80005f2:	b2da      	uxtb	r2, r3
 80005f4:	4b5a      	ldr	r3, [pc, #360]	; (8000760 <CS43_Init+0x220>)
 80005f6:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
 80005f8:	4b59      	ldr	r3, [pc, #356]	; (8000760 <CS43_Init+0x220>)
 80005fa:	785b      	ldrb	r3, [r3, #1]
 80005fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000600:	b2da      	uxtb	r2, r3
 8000602:	4b57      	ldr	r3, [pc, #348]	; (8000760 <CS43_Init+0x220>)
 8000604:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 4);  // No DSP mode
 8000606:	4b56      	ldr	r3, [pc, #344]	; (8000760 <CS43_Init+0x220>)
 8000608:	785b      	ldrb	r3, [r3, #1]
 800060a:	f023 0310 	bic.w	r3, r3, #16
 800060e:	b2da      	uxtb	r2, r3
 8000610:	4b53      	ldr	r3, [pc, #332]	; (8000760 <CS43_Init+0x220>)
 8000612:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
 8000614:	4b52      	ldr	r3, [pc, #328]	; (8000760 <CS43_Init+0x220>)
 8000616:	785b      	ldrb	r3, [r3, #1]
 8000618:	f023 0304 	bic.w	r3, r3, #4
 800061c:	b2da      	uxtb	r2, r3
 800061e:	4b50      	ldr	r3, [pc, #320]	; (8000760 <CS43_Init+0x220>)
 8000620:	705a      	strb	r2, [r3, #1]
	iData[1] |= (1 << 2);
 8000622:	4b4f      	ldr	r3, [pc, #316]	; (8000760 <CS43_Init+0x220>)
 8000624:	785b      	ldrb	r3, [r3, #1]
 8000626:	f043 0304 	orr.w	r3, r3, #4
 800062a:	b2da      	uxtb	r2, r3
 800062c:	4b4c      	ldr	r3, [pc, #304]	; (8000760 <CS43_Init+0x220>)
 800062e:	705a      	strb	r2, [r3, #1]

	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 8000630:	4b4b      	ldr	r3, [pc, #300]	; (8000760 <CS43_Init+0x220>)
 8000632:	785b      	ldrb	r3, [r3, #1]
 8000634:	f043 0303 	orr.w	r3, r3, #3
 8000638:	b2da      	uxtb	r2, r3
 800063a:	4b49      	ldr	r3, [pc, #292]	; (8000760 <CS43_Init+0x220>)
 800063c:	705a      	strb	r2, [r3, #1]
	write_register(INTERFACE_CONTROL1,&iData[1]);
 800063e:	4949      	ldr	r1, [pc, #292]	; (8000764 <CS43_Init+0x224>)
 8000640:	2006      	movs	r0, #6
 8000642:	f7ff ff3d 	bl	80004c0 <write_register>
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
 8000646:	4947      	ldr	r1, [pc, #284]	; (8000764 <CS43_Init+0x224>)
 8000648:	2008      	movs	r0, #8
 800064a:	f7ff ff57 	bl	80004fc <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 800064e:	4b44      	ldr	r3, [pc, #272]	; (8000760 <CS43_Init+0x220>)
 8000650:	785b      	ldrb	r3, [r3, #1]
 8000652:	f023 030f 	bic.w	r3, r3, #15
 8000656:	b2da      	uxtb	r2, r3
 8000658:	4b41      	ldr	r3, [pc, #260]	; (8000760 <CS43_Init+0x220>)
 800065a:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 800065c:	4b40      	ldr	r3, [pc, #256]	; (8000760 <CS43_Init+0x220>)
 800065e:	785b      	ldrb	r3, [r3, #1]
 8000660:	f043 0301 	orr.w	r3, r3, #1
 8000664:	b2da      	uxtb	r2, r3
 8000666:	4b3e      	ldr	r3, [pc, #248]	; (8000760 <CS43_Init+0x220>)
 8000668:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_A,&iData[1]);
 800066a:	493e      	ldr	r1, [pc, #248]	; (8000764 <CS43_Init+0x224>)
 800066c:	2008      	movs	r0, #8
 800066e:	f7ff ff27 	bl	80004c0 <write_register>
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
 8000672:	493c      	ldr	r1, [pc, #240]	; (8000764 <CS43_Init+0x224>)
 8000674:	2009      	movs	r0, #9
 8000676:	f7ff ff41 	bl	80004fc <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 800067a:	4b39      	ldr	r3, [pc, #228]	; (8000760 <CS43_Init+0x220>)
 800067c:	785b      	ldrb	r3, [r3, #1]
 800067e:	f023 030f 	bic.w	r3, r3, #15
 8000682:	b2da      	uxtb	r2, r3
 8000684:	4b36      	ldr	r3, [pc, #216]	; (8000760 <CS43_Init+0x220>)
 8000686:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 8000688:	4b35      	ldr	r3, [pc, #212]	; (8000760 <CS43_Init+0x220>)
 800068a:	785b      	ldrb	r3, [r3, #1]
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	b2da      	uxtb	r2, r3
 8000692:	4b33      	ldr	r3, [pc, #204]	; (8000760 <CS43_Init+0x220>)
 8000694:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_B,&iData[1]);
 8000696:	4933      	ldr	r1, [pc, #204]	; (8000764 <CS43_Init+0x224>)
 8000698:	2009      	movs	r0, #9
 800069a:	f7ff ff11 	bl	80004c0 <write_register>
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
 800069e:	4931      	ldr	r1, [pc, #196]	; (8000764 <CS43_Init+0x224>)
 80006a0:	200e      	movs	r0, #14
 80006a2:	f7ff ff2b 	bl	80004fc <read_register>
	if(outputMode == MODE_ANAL)
 80006a6:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d123      	bne.n	80006f6 <CS43_Init+0x1b6>
	{
		iData[1] |=  (1 << 7);   // Enable passthrough for AIN-A
 80006ae:	4b2c      	ldr	r3, [pc, #176]	; (8000760 <CS43_Init+0x220>)
 80006b0:	785b      	ldrb	r3, [r3, #1]
 80006b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006b6:	b2da      	uxtb	r2, r3
 80006b8:	4b29      	ldr	r3, [pc, #164]	; (8000760 <CS43_Init+0x220>)
 80006ba:	705a      	strb	r2, [r3, #1]
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
 80006bc:	4b28      	ldr	r3, [pc, #160]	; (8000760 <CS43_Init+0x220>)
 80006be:	785b      	ldrb	r3, [r3, #1]
 80006c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006c4:	b2da      	uxtb	r2, r3
 80006c6:	4b26      	ldr	r3, [pc, #152]	; (8000760 <CS43_Init+0x220>)
 80006c8:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
 80006ca:	4b25      	ldr	r3, [pc, #148]	; (8000760 <CS43_Init+0x220>)
 80006cc:	785b      	ldrb	r3, [r3, #1]
 80006ce:	f023 0320 	bic.w	r3, r3, #32
 80006d2:	b2da      	uxtb	r2, r3
 80006d4:	4b22      	ldr	r3, [pc, #136]	; (8000760 <CS43_Init+0x220>)
 80006d6:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
 80006d8:	4b21      	ldr	r3, [pc, #132]	; (8000760 <CS43_Init+0x220>)
 80006da:	785b      	ldrb	r3, [r3, #1]
 80006dc:	f023 0310 	bic.w	r3, r3, #16
 80006e0:	b2da      	uxtb	r2, r3
 80006e2:	4b1f      	ldr	r3, [pc, #124]	; (8000760 <CS43_Init+0x220>)
 80006e4:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 80006e6:	4b1e      	ldr	r3, [pc, #120]	; (8000760 <CS43_Init+0x220>)
 80006e8:	785b      	ldrb	r3, [r3, #1]
 80006ea:	f023 0308 	bic.w	r3, r3, #8
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	4b1b      	ldr	r3, [pc, #108]	; (8000760 <CS43_Init+0x220>)
 80006f2:	705a      	strb	r2, [r3, #1]
 80006f4:	e006      	b.n	8000704 <CS43_Init+0x1c4>
	}
	else if(outputMode == MODE_I2S)
 80006f6:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d102      	bne.n	8000704 <CS43_Init+0x1c4>
	{
		iData[1] = 0x02;
 80006fe:	4b18      	ldr	r3, [pc, #96]	; (8000760 <CS43_Init+0x220>)
 8000700:	2202      	movs	r2, #2
 8000702:	705a      	strb	r2, [r3, #1]
	}
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 8000704:	4917      	ldr	r1, [pc, #92]	; (8000764 <CS43_Init+0x224>)
 8000706:	200e      	movs	r0, #14
 8000708:	f7ff feda 	bl	80004c0 <write_register>
	//(9): Unmute headphone and speaker
	read_register(PLAYBACK_CONTROL, &iData[1]);
 800070c:	4915      	ldr	r1, [pc, #84]	; (8000764 <CS43_Init+0x224>)
 800070e:	200f      	movs	r0, #15
 8000710:	f7ff fef4 	bl	80004fc <read_register>
	iData[1] = 0x00;
 8000714:	4b12      	ldr	r3, [pc, #72]	; (8000760 <CS43_Init+0x220>)
 8000716:	2200      	movs	r2, #0
 8000718:	705a      	strb	r2, [r3, #1]
	write_register(PLAYBACK_CONTROL,&iData[1]);
 800071a:	4912      	ldr	r1, [pc, #72]	; (8000764 <CS43_Init+0x224>)
 800071c:	200f      	movs	r0, #15
 800071e:	f7ff fecf 	bl	80004c0 <write_register>
	//(10): Set volume to default (0dB)
	iData[1] = 0x00;
 8000722:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <CS43_Init+0x220>)
 8000724:	2200      	movs	r2, #0
 8000726:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 8000728:	490e      	ldr	r1, [pc, #56]	; (8000764 <CS43_Init+0x224>)
 800072a:	2014      	movs	r0, #20
 800072c:	f7ff fec8 	bl	80004c0 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 8000730:	490c      	ldr	r1, [pc, #48]	; (8000764 <CS43_Init+0x224>)
 8000732:	2015      	movs	r0, #21
 8000734:	f7ff fec4 	bl	80004c0 <write_register>
	write_register(PCM_VOLUME_A,&iData[1]);
 8000738:	490a      	ldr	r1, [pc, #40]	; (8000764 <CS43_Init+0x224>)
 800073a:	201a      	movs	r0, #26
 800073c:	f7ff fec0 	bl	80004c0 <write_register>
	write_register(PCM_VOLUME_B,&iData[1]);
 8000740:	4908      	ldr	r1, [pc, #32]	; (8000764 <CS43_Init+0x224>)
 8000742:	201b      	movs	r0, #27
 8000744:	f7ff febc 	bl	80004c0 <write_register>
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000750:	b004      	add	sp, #16
 8000752:	4770      	bx	lr
 8000754:	2000134c 	.word	0x2000134c
 8000758:	40020c00 	.word	0x40020c00
 800075c:	200000b0 	.word	0x200000b0
 8000760:	200000ac 	.word	0x200000ac
 8000764:	200000ad 	.word	0x200000ad

08000768 <CS43_Enable_RightLeft>:

// Function(2): Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	71fb      	strb	r3, [r7, #7]
	switch (side)
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	2b03      	cmp	r3, #3
 8000776:	d837      	bhi.n	80007e8 <CS43_Enable_RightLeft+0x80>
 8000778:	a201      	add	r2, pc, #4	; (adr r2, 8000780 <CS43_Enable_RightLeft+0x18>)
 800077a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800077e:	bf00      	nop
 8000780:	08000791 	.word	0x08000791
 8000784:	080007a7 	.word	0x080007a7
 8000788:	080007bd 	.word	0x080007bd
 800078c:	080007d3 	.word	0x080007d3
	{
		case 0:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000790:	4b21      	ldr	r3, [pc, #132]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 8000792:	22c0      	movs	r2, #192	; 0xc0
 8000794:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000796:	4b20      	ldr	r3, [pc, #128]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 8000798:	785b      	ldrb	r3, [r3, #1]
 800079a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800079e:	b2da      	uxtb	r2, r3
 80007a0:	4b1d      	ldr	r3, [pc, #116]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007a2:	705a      	strb	r2, [r3, #1]
			break;
 80007a4:	e021      	b.n	80007ea <CS43_Enable_RightLeft+0x82>
		case 1:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007a6:	4b1c      	ldr	r3, [pc, #112]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007a8:	2280      	movs	r2, #128	; 0x80
 80007aa:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007ac:	4b1a      	ldr	r3, [pc, #104]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007ae:	785b      	ldrb	r3, [r3, #1]
 80007b0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80007b4:	b2da      	uxtb	r2, r3
 80007b6:	4b18      	ldr	r3, [pc, #96]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007b8:	705a      	strb	r2, [r3, #1]
			break;
 80007ba:	e016      	b.n	80007ea <CS43_Enable_RightLeft+0x82>
		case 2:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007bc:	4b16      	ldr	r3, [pc, #88]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007be:	22c0      	movs	r2, #192	; 0xc0
 80007c0:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007c2:	4b15      	ldr	r3, [pc, #84]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007c4:	785b      	ldrb	r3, [r3, #1]
 80007c6:	f043 0320 	orr.w	r3, r3, #32
 80007ca:	b2da      	uxtb	r2, r3
 80007cc:	4b12      	ldr	r3, [pc, #72]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007ce:	705a      	strb	r2, [r3, #1]
			break;
 80007d0:	e00b      	b.n	80007ea <CS43_Enable_RightLeft+0x82>
		case 3:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007d2:	4b11      	ldr	r3, [pc, #68]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007d4:	2280      	movs	r2, #128	; 0x80
 80007d6:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007d8:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007da:	785b      	ldrb	r3, [r3, #1]
 80007dc:	f043 0320 	orr.w	r3, r3, #32
 80007e0:	b2da      	uxtb	r2, r3
 80007e2:	4b0d      	ldr	r3, [pc, #52]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007e4:	705a      	strb	r2, [r3, #1]
			break;
 80007e6:	e000      	b.n	80007ea <CS43_Enable_RightLeft+0x82>
		default:
			break;
 80007e8:	bf00      	nop
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 80007ea:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007ec:	785b      	ldrb	r3, [r3, #1]
 80007ee:	f043 030c 	orr.w	r3, r3, #12
 80007f2:	b2da      	uxtb	r2, r3
 80007f4:	4b08      	ldr	r3, [pc, #32]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007f6:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80007f8:	4b07      	ldr	r3, [pc, #28]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007fa:	785b      	ldrb	r3, [r3, #1]
 80007fc:	f043 0303 	orr.w	r3, r3, #3
 8000800:	b2da      	uxtb	r2, r3
 8000802:	4b05      	ldr	r3, [pc, #20]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 8000804:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 8000806:	4905      	ldr	r1, [pc, #20]	; (800081c <CS43_Enable_RightLeft+0xb4>)
 8000808:	2004      	movs	r0, #4
 800080a:	f7ff fe59 	bl	80004c0 <write_register>
}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	200000ac 	.word	0x200000ac
 800081c:	200000ad 	.word	0x200000ad

08000820 <CS43_SetVolume>:

// Function(3): Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	71fb      	strb	r3, [r7, #7]
	int8_t tempVol = volume - 50;
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	3b32      	subs	r3, #50	; 0x32
 800082e:	b2db      	uxtb	r3, r3
 8000830:	73fb      	strb	r3, [r7, #15]
	tempVol = tempVol*(127/50);
 8000832:	7bfb      	ldrb	r3, [r7, #15]
 8000834:	005b      	lsls	r3, r3, #1
 8000836:	b2db      	uxtb	r3, r3
 8000838:	73fb      	strb	r3, [r7, #15]
	uint8_t myVolume =  (uint8_t )tempVol;
 800083a:	7bfb      	ldrb	r3, [r7, #15]
 800083c:	73bb      	strb	r3, [r7, #14]
	iData[1] = myVolume;
 800083e:	4a16      	ldr	r2, [pc, #88]	; (8000898 <CS43_SetVolume+0x78>)
 8000840:	7bbb      	ldrb	r3, [r7, #14]
 8000842:	7053      	strb	r3, [r2, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 8000844:	4915      	ldr	r1, [pc, #84]	; (800089c <CS43_SetVolume+0x7c>)
 8000846:	2014      	movs	r0, #20
 8000848:	f7ff fe3a 	bl	80004c0 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 800084c:	4913      	ldr	r1, [pc, #76]	; (800089c <CS43_SetVolume+0x7c>)
 800084e:	2015      	movs	r0, #21
 8000850:	f7ff fe36 	bl	80004c0 <write_register>

	iData[1] = VOLUME_CONVERT_D(volume);
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	2b64      	cmp	r3, #100	; 0x64
 8000858:	d80e      	bhi.n	8000878 <CS43_SetVolume+0x58>
 800085a:	79fa      	ldrb	r2, [r7, #7]
 800085c:	4613      	mov	r3, r2
 800085e:	005b      	lsls	r3, r3, #1
 8000860:	4413      	add	r3, r2
 8000862:	011b      	lsls	r3, r3, #4
 8000864:	4a0e      	ldr	r2, [pc, #56]	; (80008a0 <CS43_SetVolume+0x80>)
 8000866:	fb82 1203 	smull	r1, r2, r2, r3
 800086a:	1152      	asrs	r2, r2, #5
 800086c:	17db      	asrs	r3, r3, #31
 800086e:	1ad3      	subs	r3, r2, r3
 8000870:	b2db      	uxtb	r3, r3
 8000872:	3b18      	subs	r3, #24
 8000874:	b2db      	uxtb	r3, r3
 8000876:	e000      	b.n	800087a <CS43_SetVolume+0x5a>
 8000878:	2318      	movs	r3, #24
 800087a:	4a07      	ldr	r2, [pc, #28]	; (8000898 <CS43_SetVolume+0x78>)
 800087c:	7053      	strb	r3, [r2, #1]

	/* Set the Master volume */
	write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
 800087e:	4907      	ldr	r1, [pc, #28]	; (800089c <CS43_SetVolume+0x7c>)
 8000880:	2020      	movs	r0, #32
 8000882:	f7ff fe1d 	bl	80004c0 <write_register>
	write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
 8000886:	4905      	ldr	r1, [pc, #20]	; (800089c <CS43_SetVolume+0x7c>)
 8000888:	2021      	movs	r0, #33	; 0x21
 800088a:	f7ff fe19 	bl	80004c0 <write_register>
}
 800088e:	bf00      	nop
 8000890:	3710      	adds	r7, #16
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	200000ac 	.word	0x200000ac
 800089c:	200000ad 	.word	0x200000ad
 80008a0:	51eb851f 	.word	0x51eb851f

080008a4 <CS43_Start>:

// Function(4): Start the Audio DAC
void CS43_Start(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
	// Write 0x99 to register 0x00.
	iData[1] = 0x99;
 80008a8:	4b1d      	ldr	r3, [pc, #116]	; (8000920 <CS43_Start+0x7c>)
 80008aa:	2299      	movs	r2, #153	; 0x99
 80008ac:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 80008ae:	491d      	ldr	r1, [pc, #116]	; (8000924 <CS43_Start+0x80>)
 80008b0:	2000      	movs	r0, #0
 80008b2:	f7ff fe05 	bl	80004c0 <write_register>
	// Write 0x80 to register 0x47.
	iData[1] = 0x80;
 80008b6:	4b1a      	ldr	r3, [pc, #104]	; (8000920 <CS43_Start+0x7c>)
 80008b8:	2280      	movs	r2, #128	; 0x80
 80008ba:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_47,&iData[1]);
 80008bc:	4919      	ldr	r1, [pc, #100]	; (8000924 <CS43_Start+0x80>)
 80008be:	2047      	movs	r0, #71	; 0x47
 80008c0:	f7ff fdfe 	bl	80004c0 <write_register>
	// Write '1'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80008c4:	4917      	ldr	r1, [pc, #92]	; (8000924 <CS43_Start+0x80>)
 80008c6:	2032      	movs	r0, #50	; 0x32
 80008c8:	f7ff fe18 	bl	80004fc <read_register>
	iData[1] |= 0x80;
 80008cc:	4b14      	ldr	r3, [pc, #80]	; (8000920 <CS43_Start+0x7c>)
 80008ce:	785b      	ldrb	r3, [r3, #1]
 80008d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008d4:	b2da      	uxtb	r2, r3
 80008d6:	4b12      	ldr	r3, [pc, #72]	; (8000920 <CS43_Start+0x7c>)
 80008d8:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 80008da:	4912      	ldr	r1, [pc, #72]	; (8000924 <CS43_Start+0x80>)
 80008dc:	2032      	movs	r0, #50	; 0x32
 80008de:	f7ff fdef 	bl	80004c0 <write_register>
	// Write '0'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80008e2:	4910      	ldr	r1, [pc, #64]	; (8000924 <CS43_Start+0x80>)
 80008e4:	2032      	movs	r0, #50	; 0x32
 80008e6:	f7ff fe09 	bl	80004fc <read_register>
	iData[1] &= ~(0x80);
 80008ea:	4b0d      	ldr	r3, [pc, #52]	; (8000920 <CS43_Start+0x7c>)
 80008ec:	785b      	ldrb	r3, [r3, #1]
 80008ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008f2:	b2da      	uxtb	r2, r3
 80008f4:	4b0a      	ldr	r3, [pc, #40]	; (8000920 <CS43_Start+0x7c>)
 80008f6:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 80008f8:	490a      	ldr	r1, [pc, #40]	; (8000924 <CS43_Start+0x80>)
 80008fa:	2032      	movs	r0, #50	; 0x32
 80008fc:	f7ff fde0 	bl	80004c0 <write_register>
	// Write 0x00 to register 0x00.
	iData[1] = 0x00;
 8000900:	4b07      	ldr	r3, [pc, #28]	; (8000920 <CS43_Start+0x7c>)
 8000902:	2200      	movs	r2, #0
 8000904:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 8000906:	4907      	ldr	r1, [pc, #28]	; (8000924 <CS43_Start+0x80>)
 8000908:	2000      	movs	r0, #0
 800090a:	f7ff fdd9 	bl	80004c0 <write_register>
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	iData[1] = 0x9E;
 800090e:	4b04      	ldr	r3, [pc, #16]	; (8000920 <CS43_Start+0x7c>)
 8000910:	229e      	movs	r2, #158	; 0x9e
 8000912:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,&iData[1]);
 8000914:	4903      	ldr	r1, [pc, #12]	; (8000924 <CS43_Start+0x80>)
 8000916:	2002      	movs	r0, #2
 8000918:	f7ff fdd2 	bl	80004c0 <write_register>
}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	200000ac 	.word	0x200000ac
 8000924:	200000ad 	.word	0x200000ad

08000928 <HAL_I2S_RxHalfCpltCallback>:
uint8_t ADC_BUFF[64];
int8_t DAC_BUFF[64];
int32_t IN_SAMPLES[2];

void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
	UNUSED(hi2s);

	/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
	 */
	if (hi2s->Instance == SPI2) {
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a1a      	ldr	r2, [pc, #104]	; (80009a0 <HAL_I2S_RxHalfCpltCallback+0x78>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d12e      	bne.n	8000998 <HAL_I2S_RxHalfCpltCallback+0x70>
		//RIGHT
		int32_t sample_in = 0;
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]
		uint32_t offset = __HAL_DMA_GET_COUNTER(hi2s->hdmarx) * 4;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	009b      	lsls	r3, r3, #2
 8000948:	60bb      	str	r3, [r7, #8]
		sample_in += ADC_BUFF[offset + 3]; sample_in <<= 8;
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	3303      	adds	r3, #3
 800094e:	4a15      	ldr	r2, [pc, #84]	; (80009a4 <HAL_I2S_RxHalfCpltCallback+0x7c>)
 8000950:	5cd3      	ldrb	r3, [r2, r3]
 8000952:	461a      	mov	r2, r3
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	4413      	add	r3, r2
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	021b      	lsls	r3, r3, #8
 800095e:	60fb      	str	r3, [r7, #12]
		sample_in += ADC_BUFF[offset + 2]; sample_in <<= 8;
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	3302      	adds	r3, #2
 8000964:	4a0f      	ldr	r2, [pc, #60]	; (80009a4 <HAL_I2S_RxHalfCpltCallback+0x7c>)
 8000966:	5cd3      	ldrb	r3, [r2, r3]
 8000968:	461a      	mov	r2, r3
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	4413      	add	r3, r2
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	021b      	lsls	r3, r3, #8
 8000974:	60fb      	str	r3, [r7, #12]
		sample_in += ADC_BUFF[offset + 1];
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	3301      	adds	r3, #1
 800097a:	4a0a      	ldr	r2, [pc, #40]	; (80009a4 <HAL_I2S_RxHalfCpltCallback+0x7c>)
 800097c:	5cd3      	ldrb	r3, [r2, r3]
 800097e:	461a      	mov	r2, r3
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	4413      	add	r3, r2
 8000984:	60fb      	str	r3, [r7, #12]
		IN_SAMPLES[0] = sample_in;
 8000986:	4a08      	ldr	r2, [pc, #32]	; (80009a8 <HAL_I2S_RxHalfCpltCallback+0x80>)
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(Led2_GPIO_Port, Led2_Pin, GPIO_PIN_SET);
 800098c:	2201      	movs	r2, #1
 800098e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000992:	4806      	ldr	r0, [pc, #24]	; (80009ac <HAL_I2S_RxHalfCpltCallback+0x84>)
 8000994:	f002 fb10 	bl	8002fb8 <HAL_GPIO_WritePin>
		//HAL_I2S_Receive_DMA(hi2s, (int16_t *)input_buff, 1);
		//HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, input_buff[0]);
	}
}
 8000998:	bf00      	nop
 800099a:	3710      	adds	r7, #16
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40003800 	.word	0x40003800
 80009a4:	200012c4 	.word	0x200012c4
 80009a8:	20000120 	.word	0x20000120
 80009ac:	40020c00 	.word	0x40020c00

080009b0 <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
	UNUSED(hi2s);

	/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
	 */
	if (hi2s->Instance == SPI2) {
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a1a      	ldr	r2, [pc, #104]	; (8000a28 <HAL_I2S_RxCpltCallback+0x78>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d12e      	bne.n	8000a20 <HAL_I2S_RxCpltCallback+0x70>
		//LEFT
		int32_t sample_in = 0;
 80009c2:	2300      	movs	r3, #0
 80009c4:	60fb      	str	r3, [r7, #12]
		uint32_t offset = __HAL_DMA_GET_COUNTER(hi2s->hdmarx) * 4;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	009b      	lsls	r3, r3, #2
 80009d0:	60bb      	str	r3, [r7, #8]
		sample_in += ADC_BUFF[offset + 3]; sample_in <<= 8;
 80009d2:	68bb      	ldr	r3, [r7, #8]
 80009d4:	3303      	adds	r3, #3
 80009d6:	4a15      	ldr	r2, [pc, #84]	; (8000a2c <HAL_I2S_RxCpltCallback+0x7c>)
 80009d8:	5cd3      	ldrb	r3, [r2, r3]
 80009da:	461a      	mov	r2, r3
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	4413      	add	r3, r2
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	021b      	lsls	r3, r3, #8
 80009e6:	60fb      	str	r3, [r7, #12]
		sample_in += ADC_BUFF[offset + 2]; sample_in <<= 8;
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	3302      	adds	r3, #2
 80009ec:	4a0f      	ldr	r2, [pc, #60]	; (8000a2c <HAL_I2S_RxCpltCallback+0x7c>)
 80009ee:	5cd3      	ldrb	r3, [r2, r3]
 80009f0:	461a      	mov	r2, r3
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	4413      	add	r3, r2
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	021b      	lsls	r3, r3, #8
 80009fc:	60fb      	str	r3, [r7, #12]
		sample_in += ADC_BUFF[offset + 1];
 80009fe:	68bb      	ldr	r3, [r7, #8]
 8000a00:	3301      	adds	r3, #1
 8000a02:	4a0a      	ldr	r2, [pc, #40]	; (8000a2c <HAL_I2S_RxCpltCallback+0x7c>)
 8000a04:	5cd3      	ldrb	r3, [r2, r3]
 8000a06:	461a      	mov	r2, r3
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	60fb      	str	r3, [r7, #12]
		IN_SAMPLES[1] = sample_in;
 8000a0e:	4a08      	ldr	r2, [pc, #32]	; (8000a30 <HAL_I2S_RxCpltCallback+0x80>)
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	6053      	str	r3, [r2, #4]
		HAL_GPIO_WritePin(Led3_GPIO_Port, Led3_Pin, GPIO_PIN_SET);
 8000a14:	2201      	movs	r2, #1
 8000a16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a1a:	4806      	ldr	r0, [pc, #24]	; (8000a34 <HAL_I2S_RxCpltCallback+0x84>)
 8000a1c:	f002 facc 	bl	8002fb8 <HAL_GPIO_WritePin>
		//HAL_I2S_Receive_DMA(hi2s, (int16_t *)input_buff, 1);
		//HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, input_buff[0]);
	}
}
 8000a20:	bf00      	nop
 8000a22:	3710      	adds	r7, #16
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40003800 	.word	0x40003800
 8000a2c:	200012c4 	.word	0x200012c4
 8000a30:	20000120 	.word	0x20000120
 8000a34:	40020c00 	.word	0x40020c00

08000a38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a38:	b590      	push	{r4, r7, lr}
 8000a3a:	f2ad 6d9c 	subw	sp, sp, #1692	; 0x69c
 8000a3e:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a40:	f001 fb7e 	bl	8002140 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a44:	f000 f8b6 	bl	8000bb4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000a48:	f000 f91e 	bl	8000c88 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a4c:	f000 fa14 	bl	8000e78 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a50:	f000 f9ea 	bl	8000e28 <MX_DMA_Init>
  MX_I2C1_Init();
 8000a54:	f000 f95e 	bl	8000d14 <MX_I2C1_Init>
  MX_I2S2_Init();
 8000a58:	f000 f98a 	bl	8000d70 <MX_I2S2_Init>
  MX_I2S3_Init();
 8000a5c:	f000 f9b6 	bl	8000dcc <MX_I2S3_Init>
  MX_DAC_Init();
 8000a60:	f000 f92e 	bl	8000cc0 <MX_DAC_Init>
  MX_USB_HOST_Init();
 8000a64:	f00a fc16 	bl	800b294 <MX_USB_HOST_Init>
  MX_FATFS_Init();
 8000a68:	f007 fbb2 	bl	80081d0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
	pedalboard_t pedalboard;
	pedalboard.active_pedals = 0;
 8000a6c:	f107 0308 	add.w	r3, r7, #8
 8000a70:	2200      	movs	r2, #0
 8000a72:	701a      	strb	r2, [r3, #0]
	pedalboard_append(&pedalboard, OVERDRIVE_SQRT);
 8000a74:	f107 0308 	add.w	r3, r7, #8
 8000a78:	2107      	movs	r1, #7
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f000 ffac 	bl	80019d8 <pedalboard_append>

	CS43_Init(hi2c1, MODE_ANAL);
 8000a80:	4c43      	ldr	r4, [pc, #268]	; (8000b90 <main+0x158>)
 8000a82:	2301      	movs	r3, #1
 8000a84:	9311      	str	r3, [sp, #68]	; 0x44
 8000a86:	4668      	mov	r0, sp
 8000a88:	f104 0310 	add.w	r3, r4, #16
 8000a8c:	2244      	movs	r2, #68	; 0x44
 8000a8e:	4619      	mov	r1, r3
 8000a90:	f00a ff72 	bl	800b978 <memcpy>
 8000a94:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000a98:	f7ff fd52 	bl	8000540 <CS43_Init>
	CS43_SetVolume(20);
 8000a9c:	2014      	movs	r0, #20
 8000a9e:	f7ff febf 	bl	8000820 <CS43_SetVolume>
	CS43_Enable_RightLeft(CS43_RIGHT_LEFT);
 8000aa2:	2003      	movs	r0, #3
 8000aa4:	f7ff fe60 	bl	8000768 <CS43_Enable_RightLeft>
	CS43_Start();
 8000aa8:	f7ff fefc 	bl	80008a4 <CS43_Start>

	for (int i = 0; i < 64; i++) ADC_BUFF[i] = 17;
 8000aac:	2300      	movs	r3, #0
 8000aae:	f8c7 364c 	str.w	r3, [r7, #1612]	; 0x64c
 8000ab2:	e00a      	b.n	8000aca <main+0x92>
 8000ab4:	4a37      	ldr	r2, [pc, #220]	; (8000b94 <main+0x15c>)
 8000ab6:	f8d7 364c 	ldr.w	r3, [r7, #1612]	; 0x64c
 8000aba:	4413      	add	r3, r2
 8000abc:	2211      	movs	r2, #17
 8000abe:	701a      	strb	r2, [r3, #0]
 8000ac0:	f8d7 364c 	ldr.w	r3, [r7, #1612]	; 0x64c
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	f8c7 364c 	str.w	r3, [r7, #1612]	; 0x64c
 8000aca:	f8d7 364c 	ldr.w	r3, [r7, #1612]	; 0x64c
 8000ace:	2b3f      	cmp	r3, #63	; 0x3f
 8000ad0:	ddf0      	ble.n	8000ab4 <main+0x7c>
	HAL_I2S_Receive_DMA(&hi2s2, (uint16_t *)ADC_BUFF, 4);
 8000ad2:	2204      	movs	r2, #4
 8000ad4:	492f      	ldr	r1, [pc, #188]	; (8000b94 <main+0x15c>)
 8000ad6:	4830      	ldr	r0, [pc, #192]	; (8000b98 <main+0x160>)
 8000ad8:	f005 f976 	bl	8005dc8 <HAL_I2S_Receive_DMA>
	HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t *)DAC_BUFF, 4);
 8000adc:	2204      	movs	r2, #4
 8000ade:	492f      	ldr	r1, [pc, #188]	; (8000b9c <main+0x164>)
 8000ae0:	482f      	ldr	r0, [pc, #188]	; (8000ba0 <main+0x168>)
 8000ae2:	f005 f8c9 	bl	8005c78 <HAL_I2S_Transmit_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000ae6:	f00a fbfb 	bl	800b2e0 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
		HAL_GPIO_WritePin(OtgPower_GPIO_Port, OtgPower_Pin, GPIO_PIN_RESET);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2101      	movs	r1, #1
 8000aee:	482d      	ldr	r0, [pc, #180]	; (8000ba4 <main+0x16c>)
 8000af0:	f002 fa62 	bl	8002fb8 <HAL_GPIO_WritePin>

		GPIO_PinState btn_states[4];
		btn_states[0] = HAL_GPIO_ReadPin(Btn0_GPIO_Port, Btn0_Pin);
 8000af4:	2101      	movs	r1, #1
 8000af6:	482c      	ldr	r0, [pc, #176]	; (8000ba8 <main+0x170>)
 8000af8:	f002 fa46 	bl	8002f88 <HAL_GPIO_ReadPin>
 8000afc:	4603      	mov	r3, r0
 8000afe:	461a      	mov	r2, r3
 8000b00:	1d3b      	adds	r3, r7, #4
 8000b02:	701a      	strb	r2, [r3, #0]
		btn_states[1] = !HAL_GPIO_ReadPin(Btn1_GPIO_Port, Btn1_Pin);
 8000b04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b08:	4828      	ldr	r0, [pc, #160]	; (8000bac <main+0x174>)
 8000b0a:	f002 fa3d 	bl	8002f88 <HAL_GPIO_ReadPin>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	bf0c      	ite	eq
 8000b14:	2301      	moveq	r3, #1
 8000b16:	2300      	movne	r3, #0
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	705a      	strb	r2, [r3, #1]
		btn_states[2] = !HAL_GPIO_ReadPin(Btn2_GPIO_Port, Btn2_Pin);
 8000b20:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b24:	4822      	ldr	r0, [pc, #136]	; (8000bb0 <main+0x178>)
 8000b26:	f002 fa2f 	bl	8002f88 <HAL_GPIO_ReadPin>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	bf0c      	ite	eq
 8000b30:	2301      	moveq	r3, #1
 8000b32:	2300      	movne	r3, #0
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	461a      	mov	r2, r3
 8000b38:	1d3b      	adds	r3, r7, #4
 8000b3a:	709a      	strb	r2, [r3, #2]
		btn_states[3] = !HAL_GPIO_ReadPin(Btn3_GPIO_Port, Btn3_Pin);
 8000b3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b40:	481b      	ldr	r0, [pc, #108]	; (8000bb0 <main+0x178>)
 8000b42:	f002 fa21 	bl	8002f88 <HAL_GPIO_ReadPin>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	bf0c      	ite	eq
 8000b4c:	2301      	moveq	r3, #1
 8000b4e:	2300      	movne	r3, #0
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	461a      	mov	r2, r3
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	70da      	strb	r2, [r3, #3]

		HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, btn_states[0] || btn_states[1] || btn_states[2] || btn_states[3]);
 8000b58:	1d3b      	adds	r3, r7, #4
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d10b      	bne.n	8000b78 <main+0x140>
 8000b60:	1d3b      	adds	r3, r7, #4
 8000b62:	785b      	ldrb	r3, [r3, #1]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d107      	bne.n	8000b78 <main+0x140>
 8000b68:	1d3b      	adds	r3, r7, #4
 8000b6a:	789b      	ldrb	r3, [r3, #2]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d103      	bne.n	8000b78 <main+0x140>
 8000b70:	1d3b      	adds	r3, r7, #4
 8000b72:	78db      	ldrb	r3, [r3, #3]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <main+0x144>
 8000b78:	2301      	movs	r3, #1
 8000b7a:	e000      	b.n	8000b7e <main+0x146>
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	461a      	mov	r2, r3
 8000b82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b86:	4809      	ldr	r0, [pc, #36]	; (8000bac <main+0x174>)
 8000b88:	f002 fa16 	bl	8002fb8 <HAL_GPIO_WritePin>
	{
 8000b8c:	e7ab      	b.n	8000ae6 <main+0xae>
 8000b8e:	bf00      	nop
 8000b90:	20000128 	.word	0x20000128
 8000b94:	200012c4 	.word	0x200012c4
 8000b98:	20001304 	.word	0x20001304
 8000b9c:	20001270 	.word	0x20001270
 8000ba0:	2000134c 	.word	0x2000134c
 8000ba4:	40020800 	.word	0x40020800
 8000ba8:	40020000 	.word	0x40020000
 8000bac:	40020c00 	.word	0x40020c00
 8000bb0:	40020400 	.word	0x40020400

08000bb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b094      	sub	sp, #80	; 0x50
 8000bb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bba:	f107 0320 	add.w	r3, r7, #32
 8000bbe:	2230      	movs	r2, #48	; 0x30
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f00a fee6 	bl	800b994 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc8:	f107 030c 	add.w	r3, r7, #12
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60bb      	str	r3, [r7, #8]
 8000bdc:	4b28      	ldr	r3, [pc, #160]	; (8000c80 <SystemClock_Config+0xcc>)
 8000bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be0:	4a27      	ldr	r2, [pc, #156]	; (8000c80 <SystemClock_Config+0xcc>)
 8000be2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be6:	6413      	str	r3, [r2, #64]	; 0x40
 8000be8:	4b25      	ldr	r3, [pc, #148]	; (8000c80 <SystemClock_Config+0xcc>)
 8000bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf0:	60bb      	str	r3, [r7, #8]
 8000bf2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	4b22      	ldr	r3, [pc, #136]	; (8000c84 <SystemClock_Config+0xd0>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a21      	ldr	r2, [pc, #132]	; (8000c84 <SystemClock_Config+0xd0>)
 8000bfe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c02:	6013      	str	r3, [r2, #0]
 8000c04:	4b1f      	ldr	r3, [pc, #124]	; (8000c84 <SystemClock_Config+0xd0>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c0c:	607b      	str	r3, [r7, #4]
 8000c0e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c10:	2301      	movs	r3, #1
 8000c12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c1e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c24:	2308      	movs	r3, #8
 8000c26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c28:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000c2c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c32:	2307      	movs	r3, #7
 8000c34:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c36:	f107 0320 	add.w	r3, r7, #32
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f005 fd70 	bl	8006720 <HAL_RCC_OscConfig>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000c46:	f000 f9c9 	bl	8000fdc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c4a:	230f      	movs	r3, #15
 8000c4c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c52:	2300      	movs	r3, #0
 8000c54:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c56:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c5a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c60:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c62:	f107 030c 	add.w	r3, r7, #12
 8000c66:	2105      	movs	r1, #5
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f005 ffd1 	bl	8006c10 <HAL_RCC_ClockConfig>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000c74:	f000 f9b2 	bl	8000fdc <Error_Handler>
  }
}
 8000c78:	bf00      	nop
 8000c7a:	3750      	adds	r7, #80	; 0x50
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	40023800 	.word	0x40023800
 8000c84:	40007000 	.word	0x40007000

08000c88 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c8e:	463b      	mov	r3, r7
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 181;
 8000c9e:	23b5      	movs	r3, #181	; 0xb5
 8000ca0:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ca6:	463b      	mov	r3, r7
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f006 f999 	bl	8006fe0 <HAL_RCCEx_PeriphCLKConfig>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <PeriphCommonClock_Config+0x30>
  {
    Error_Handler();
 8000cb4:	f000 f992 	bl	8000fdc <Error_Handler>
  }
}
 8000cb8:	bf00      	nop
 8000cba:	3710      	adds	r7, #16
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000cc6:	463b      	mov	r3, r7
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000cce:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <MX_DAC_Init+0x4c>)
 8000cd0:	4a0f      	ldr	r2, [pc, #60]	; (8000d10 <MX_DAC_Init+0x50>)
 8000cd2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000cd4:	480d      	ldr	r0, [pc, #52]	; (8000d0c <MX_DAC_Init+0x4c>)
 8000cd6:	f001 fbda 	bl	800248e <HAL_DAC_Init>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000ce0:	f000 f97c 	bl	8000fdc <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000cec:	463b      	mov	r3, r7
 8000cee:	2200      	movs	r2, #0
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4806      	ldr	r0, [pc, #24]	; (8000d0c <MX_DAC_Init+0x4c>)
 8000cf4:	f001 fbed 	bl	80024d2 <HAL_DAC_ConfigChannel>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000cfe:	f000 f96d 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	200012b0 	.word	0x200012b0
 8000d10:	40007400 	.word	0x40007400

08000d14 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d18:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <MX_I2C1_Init+0x50>)
 8000d1a:	4a13      	ldr	r2, [pc, #76]	; (8000d68 <MX_I2C1_Init+0x54>)
 8000d1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d1e:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <MX_I2C1_Init+0x50>)
 8000d20:	4a12      	ldr	r2, [pc, #72]	; (8000d6c <MX_I2C1_Init+0x58>)
 8000d22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d24:	4b0f      	ldr	r3, [pc, #60]	; (8000d64 <MX_I2C1_Init+0x50>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <MX_I2C1_Init+0x50>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d30:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <MX_I2C1_Init+0x50>)
 8000d32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d36:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d38:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <MX_I2C1_Init+0x50>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d3e:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <MX_I2C1_Init+0x50>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d44:	4b07      	ldr	r3, [pc, #28]	; (8000d64 <MX_I2C1_Init+0x50>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d4a:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <MX_I2C1_Init+0x50>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d50:	4804      	ldr	r0, [pc, #16]	; (8000d64 <MX_I2C1_Init+0x50>)
 8000d52:	f003 febb 	bl	8004acc <HAL_I2C_Init>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d5c:	f000 f93e 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d60:	bf00      	nop
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20000128 	.word	0x20000128
 8000d68:	40005400 	.word	0x40005400
 8000d6c:	000186a0 	.word	0x000186a0

08000d70 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000d74:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <MX_I2S2_Init+0x54>)
 8000d76:	4a14      	ldr	r2, [pc, #80]	; (8000dc8 <MX_I2S2_Init+0x58>)
 8000d78:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8000d7a:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <MX_I2S2_Init+0x54>)
 8000d7c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000d80:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000d82:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <MX_I2S2_Init+0x54>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000d88:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <MX_I2S2_Init+0x54>)
 8000d8a:	2203      	movs	r2, #3
 8000d8c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000d8e:	4b0d      	ldr	r3, [pc, #52]	; (8000dc4 <MX_I2S2_Init+0x54>)
 8000d90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d94:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8000d96:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <MX_I2S2_Init+0x54>)
 8000d98:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000d9c:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000d9e:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <MX_I2S2_Init+0x54>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000da4:	4b07      	ldr	r3, [pc, #28]	; (8000dc4 <MX_I2S2_Init+0x54>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000daa:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <MX_I2S2_Init+0x54>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000db0:	4804      	ldr	r0, [pc, #16]	; (8000dc4 <MX_I2S2_Init+0x54>)
 8000db2:	f004 fe21 	bl	80059f8 <HAL_I2S_Init>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8000dbc:	f000 f90e 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20001304 	.word	0x20001304
 8000dc8:	40003800 	.word	0x40003800

08000dcc <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000dd0:	4b13      	ldr	r3, [pc, #76]	; (8000e20 <MX_I2S3_Init+0x54>)
 8000dd2:	4a14      	ldr	r2, [pc, #80]	; (8000e24 <MX_I2S3_Init+0x58>)
 8000dd4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000dd6:	4b12      	ldr	r3, [pc, #72]	; (8000e20 <MX_I2S3_Init+0x54>)
 8000dd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ddc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000dde:	4b10      	ldr	r3, [pc, #64]	; (8000e20 <MX_I2S3_Init+0x54>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000de4:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <MX_I2S3_Init+0x54>)
 8000de6:	2203      	movs	r2, #3
 8000de8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000dea:	4b0d      	ldr	r3, [pc, #52]	; (8000e20 <MX_I2S3_Init+0x54>)
 8000dec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000df0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8000df2:	4b0b      	ldr	r3, [pc, #44]	; (8000e20 <MX_I2S3_Init+0x54>)
 8000df4:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000df8:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000dfa:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <MX_I2S3_Init+0x54>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000e00:	4b07      	ldr	r3, [pc, #28]	; (8000e20 <MX_I2S3_Init+0x54>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000e06:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <MX_I2S3_Init+0x54>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000e0c:	4804      	ldr	r0, [pc, #16]	; (8000e20 <MX_I2S3_Init+0x54>)
 8000e0e:	f004 fdf3 	bl	80059f8 <HAL_I2S_Init>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8000e18:	f000 f8e0 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000e1c:	bf00      	nop
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	2000134c 	.word	0x2000134c
 8000e24:	40003c00 	.word	0x40003c00

08000e28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	607b      	str	r3, [r7, #4]
 8000e32:	4b10      	ldr	r3, [pc, #64]	; (8000e74 <MX_DMA_Init+0x4c>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	4a0f      	ldr	r2, [pc, #60]	; (8000e74 <MX_DMA_Init+0x4c>)
 8000e38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3e:	4b0d      	ldr	r3, [pc, #52]	; (8000e74 <MX_DMA_Init+0x4c>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e46:	607b      	str	r3, [r7, #4]
 8000e48:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	200e      	movs	r0, #14
 8000e50:	f001 fae7 	bl	8002422 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000e54:	200e      	movs	r0, #14
 8000e56:	f001 fb00 	bl	800245a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	2010      	movs	r0, #16
 8000e60:	f001 fadf 	bl	8002422 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000e64:	2010      	movs	r0, #16
 8000e66:	f001 faf8 	bl	800245a <HAL_NVIC_EnableIRQ>

}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40023800 	.word	0x40023800

08000e78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08a      	sub	sp, #40	; 0x28
 8000e7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7e:	f107 0314 	add.w	r3, r7, #20
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	605a      	str	r2, [r3, #4]
 8000e88:	609a      	str	r2, [r3, #8]
 8000e8a:	60da      	str	r2, [r3, #12]
 8000e8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	613b      	str	r3, [r7, #16]
 8000e92:	4b4d      	ldr	r3, [pc, #308]	; (8000fc8 <MX_GPIO_Init+0x150>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	4a4c      	ldr	r2, [pc, #304]	; (8000fc8 <MX_GPIO_Init+0x150>)
 8000e98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9e:	4b4a      	ldr	r3, [pc, #296]	; (8000fc8 <MX_GPIO_Init+0x150>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ea6:	613b      	str	r3, [r7, #16]
 8000ea8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]
 8000eae:	4b46      	ldr	r3, [pc, #280]	; (8000fc8 <MX_GPIO_Init+0x150>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	4a45      	ldr	r2, [pc, #276]	; (8000fc8 <MX_GPIO_Init+0x150>)
 8000eb4:	f043 0304 	orr.w	r3, r3, #4
 8000eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eba:	4b43      	ldr	r3, [pc, #268]	; (8000fc8 <MX_GPIO_Init+0x150>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	f003 0304 	and.w	r3, r3, #4
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60bb      	str	r3, [r7, #8]
 8000eca:	4b3f      	ldr	r3, [pc, #252]	; (8000fc8 <MX_GPIO_Init+0x150>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	4a3e      	ldr	r2, [pc, #248]	; (8000fc8 <MX_GPIO_Init+0x150>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed6:	4b3c      	ldr	r3, [pc, #240]	; (8000fc8 <MX_GPIO_Init+0x150>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	60bb      	str	r3, [r7, #8]
 8000ee0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	607b      	str	r3, [r7, #4]
 8000ee6:	4b38      	ldr	r3, [pc, #224]	; (8000fc8 <MX_GPIO_Init+0x150>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4a37      	ldr	r2, [pc, #220]	; (8000fc8 <MX_GPIO_Init+0x150>)
 8000eec:	f043 0302 	orr.w	r3, r3, #2
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef2:	4b35      	ldr	r3, [pc, #212]	; (8000fc8 <MX_GPIO_Init+0x150>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f003 0302 	and.w	r3, r3, #2
 8000efa:	607b      	str	r3, [r7, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	603b      	str	r3, [r7, #0]
 8000f02:	4b31      	ldr	r3, [pc, #196]	; (8000fc8 <MX_GPIO_Init+0x150>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	4a30      	ldr	r2, [pc, #192]	; (8000fc8 <MX_GPIO_Init+0x150>)
 8000f08:	f043 0308 	orr.w	r3, r3, #8
 8000f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0e:	4b2e      	ldr	r3, [pc, #184]	; (8000fc8 <MX_GPIO_Init+0x150>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	f003 0308 	and.w	r3, r3, #8
 8000f16:	603b      	str	r3, [r7, #0]
 8000f18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OtgPower_GPIO_Port, OtgPower_Pin, GPIO_PIN_RESET);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	482b      	ldr	r0, [pc, #172]	; (8000fcc <MX_GPIO_Init+0x154>)
 8000f20:	f002 f84a 	bl	8002fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Led1_Pin|Led2_Pin|Led3_Pin|Led4_Pin, GPIO_PIN_RESET);
 8000f24:	2200      	movs	r2, #0
 8000f26:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000f2a:	4829      	ldr	r0, [pc, #164]	; (8000fd0 <MX_GPIO_Init+0x158>)
 8000f2c:	f002 f844 	bl	8002fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AudioPower_GPIO_Port, AudioPower_Pin, GPIO_PIN_SET);
 8000f30:	2201      	movs	r2, #1
 8000f32:	2110      	movs	r1, #16
 8000f34:	4826      	ldr	r0, [pc, #152]	; (8000fd0 <MX_GPIO_Init+0x158>)
 8000f36:	f002 f83f 	bl	8002fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OtgPower_Pin */
  GPIO_InitStruct.Pin = OtgPower_Pin;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f46:	2300      	movs	r3, #0
 8000f48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OtgPower_GPIO_Port, &GPIO_InitStruct);
 8000f4a:	f107 0314 	add.w	r3, r7, #20
 8000f4e:	4619      	mov	r1, r3
 8000f50:	481e      	ldr	r0, [pc, #120]	; (8000fcc <MX_GPIO_Init+0x154>)
 8000f52:	f001 fe7d 	bl	8002c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : Btn0_Pin */
  GPIO_InitStruct.Pin = Btn0_Pin;
 8000f56:	2301      	movs	r3, #1
 8000f58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Btn0_GPIO_Port, &GPIO_InitStruct);
 8000f62:	f107 0314 	add.w	r3, r7, #20
 8000f66:	4619      	mov	r1, r3
 8000f68:	481a      	ldr	r0, [pc, #104]	; (8000fd4 <MX_GPIO_Init+0x15c>)
 8000f6a:	f001 fe71 	bl	8002c50 <HAL_GPIO_Init>

  /*Configure GPIO pins : Btn3_Pin Btn2_Pin */
  GPIO_InitStruct.Pin = Btn3_Pin|Btn2_Pin;
 8000f6e:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8000f72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f74:	2300      	movs	r3, #0
 8000f76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f7c:	f107 0314 	add.w	r3, r7, #20
 8000f80:	4619      	mov	r1, r3
 8000f82:	4815      	ldr	r0, [pc, #84]	; (8000fd8 <MX_GPIO_Init+0x160>)
 8000f84:	f001 fe64 	bl	8002c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : Btn1_Pin */
  GPIO_InitStruct.Pin = Btn1_Pin;
 8000f88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f92:	2301      	movs	r3, #1
 8000f94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Btn1_GPIO_Port, &GPIO_InitStruct);
 8000f96:	f107 0314 	add.w	r3, r7, #20
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	480c      	ldr	r0, [pc, #48]	; (8000fd0 <MX_GPIO_Init+0x158>)
 8000f9e:	f001 fe57 	bl	8002c50 <HAL_GPIO_Init>

  /*Configure GPIO pins : Led1_Pin Led2_Pin Led3_Pin Led4_Pin
                           AudioPower_Pin */
  GPIO_InitStruct.Pin = Led1_Pin|Led2_Pin|Led3_Pin|Led4_Pin
 8000fa2:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000fa6:	617b      	str	r3, [r7, #20]
                          |AudioPower_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fb4:	f107 0314 	add.w	r3, r7, #20
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4805      	ldr	r0, [pc, #20]	; (8000fd0 <MX_GPIO_Init+0x158>)
 8000fbc:	f001 fe48 	bl	8002c50 <HAL_GPIO_Init>

}
 8000fc0:	bf00      	nop
 8000fc2:	3728      	adds	r7, #40	; 0x28
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40023800 	.word	0x40023800
 8000fcc:	40020800 	.word	0x40020800
 8000fd0:	40020c00 	.word	0x40020c00
 8000fd4:	40020000 	.word	0x40020000
 8000fd8:	40020400 	.word	0x40020400

08000fdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe0:	b672      	cpsid	i
}
 8000fe2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000fe4:	e7fe      	b.n	8000fe4 <Error_Handler+0x8>
	...

08000fe8 <overdrive_pedal_init>:
#include <stdlib.h>
#include "pedalboard_min.h"

// OVERDRIVE

void overdrive_pedal_init(pedal_config_t *conf) {
 8000fe8:	b490      	push	{r4, r7}
 8000fea:	b09a      	sub	sp, #104	; 0x68
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
    conf->float_params[INTENSITY] = (float_parameter_t){4.F, 1.F, 10.F, 0.5F};
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4a1a      	ldr	r2, [pc, #104]	; (800105c <overdrive_pedal_init+0x74>)
 8000ff4:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ffc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[THRESHOLD_HIGH] = (float_parameter_t){32767.F, 0.F, 32767.F, 1.F};
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4a17      	ldr	r2, [pc, #92]	; (8001060 <overdrive_pedal_init+0x78>)
 8001004:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8001008:	4613      	mov	r3, r2
 800100a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800100c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[THRESHOLD_LOW] = (float_parameter_t){28000.F, 0.F, 32767.F, 1.F};
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	4a14      	ldr	r2, [pc, #80]	; (8001064 <overdrive_pedal_init+0x7c>)
 8001014:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8001018:	4613      	mov	r3, r2
 800101a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800101c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[SOFTENER] = (float_parameter_t){4.F, 1.F, 10.F, 0.5F};
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4a0e      	ldr	r2, [pc, #56]	; (800105c <overdrive_pedal_init+0x74>)
 8001024:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8001028:	4613      	mov	r3, r2
 800102a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800102c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_1] = (float_parameter_t){1.F, 0.F, 1.F, 0.1F};
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4a0d      	ldr	r2, [pc, #52]	; (8001068 <overdrive_pedal_init+0x80>)
 8001034:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8001038:	4613      	mov	r3, r2
 800103a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800103c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_2] = (float_parameter_t){0.F, 0.F, 1.F, 0.1F};
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4a0a      	ldr	r2, [pc, #40]	; (800106c <overdrive_pedal_init+0x84>)
 8001044:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8001048:	4613      	mov	r3, r2
 800104a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800104c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001050:	bf00      	nop
 8001052:	3768      	adds	r7, #104	; 0x68
 8001054:	46bd      	mov	sp, r7
 8001056:	bc90      	pop	{r4, r7}
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	0800bb4c 	.word	0x0800bb4c
 8001060:	0800bb5c 	.word	0x0800bb5c
 8001064:	0800bb6c 	.word	0x0800bb6c
 8001068:	0800bb7c 	.word	0x0800bb7c
 800106c:	0800bb8c 	.word	0x0800bb8c

08001070 <overdrive_process>:

float overdrive_process(float in, pedal_config_t *conf) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	ed87 0a01 	vstr	s0, [r7, #4]
 800107a:	6038      	str	r0, [r7, #0]
    float out = in *  conf->float_params[INTENSITY].value;
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001082:	ed97 7a01 	vldr	s14, [r7, #4]
 8001086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800108a:	edc7 7a03 	vstr	s15, [r7, #12]
    out = soft_clip(out, conf->float_params[THRESHOLD_LOW].value, conf->float_params[SOFTENER].value);
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 800109a:	eeb0 1a47 	vmov.f32	s2, s14
 800109e:	eef0 0a67 	vmov.f32	s1, s15
 80010a2:	ed97 0a03 	vldr	s0, [r7, #12]
 80010a6:	f000 fbab 	bl	8001800 <soft_clip>
 80010aa:	ed87 0a03 	vstr	s0, [r7, #12]
    out = hard_clip(out, conf->float_params[THRESHOLD_HIGH].value);
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80010b4:	eef0 0a67 	vmov.f32	s1, s15
 80010b8:	ed97 0a03 	vldr	s0, [r7, #12]
 80010bc:	f000 fb70 	bl	80017a0 <hard_clip>
 80010c0:	ed87 0a03 	vstr	s0, [r7, #12]
    out = mix(out, in, conf->float_params[BALANCE_1].value, conf->float_params[BALANCE_2].value);
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 80010d0:	eef0 1a47 	vmov.f32	s3, s14
 80010d4:	eeb0 1a67 	vmov.f32	s2, s15
 80010d8:	edd7 0a01 	vldr	s1, [r7, #4]
 80010dc:	ed97 0a03 	vldr	s0, [r7, #12]
 80010e0:	f000 fb3e 	bl	8001760 <mix>
 80010e4:	ed87 0a03 	vstr	s0, [r7, #12]
    return out;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	ee07 3a90 	vmov	s15, r3
}
 80010ee:	eeb0 0a67 	vmov.f32	s0, s15
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <bitcrusher_rs_pedal_init>:

// BITCRUSHER resolution

void bitcrusher_rs_pedal_init(pedal_config_t *conf) {
 80010f8:	b490      	push	{r4, r7}
 80010fa:	b08e      	sub	sp, #56	; 0x38
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
    conf->int_params[REDUCT_INTENSITY] = (int_parameter_t){12, 1, 16, 1};
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4a0e      	ldr	r2, [pc, #56]	; (800113c <bitcrusher_rs_pedal_init+0x44>)
 8001104:	f103 0420 	add.w	r4, r3, #32
 8001108:	4613      	mov	r3, r2
 800110a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800110c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_1] = (float_parameter_t){0.5F, 0.F, 1.F, 0.1F};
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4a0b      	ldr	r2, [pc, #44]	; (8001140 <bitcrusher_rs_pedal_init+0x48>)
 8001114:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8001118:	4613      	mov	r3, r2
 800111a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800111c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_2] = (float_parameter_t){0.5F, 0.F, 1.F, 0.1F};
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4a07      	ldr	r2, [pc, #28]	; (8001140 <bitcrusher_rs_pedal_init+0x48>)
 8001124:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8001128:	4613      	mov	r3, r2
 800112a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800112c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001130:	bf00      	nop
 8001132:	3738      	adds	r7, #56	; 0x38
 8001134:	46bd      	mov	sp, r7
 8001136:	bc90      	pop	{r4, r7}
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	0800bb9c 	.word	0x0800bb9c
 8001140:	0800bbac 	.word	0x0800bbac

08001144 <bitcrusher_rs_process>:

float bitcrusher_rs_process(float in, pedal_config_t *conf) {
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	ed87 0a01 	vstr	s0, [r7, #4]
 800114e:	6038      	str	r0, [r7, #0]
    int16_t shift = conf->int_params[REDUCT_INTENSITY].value;
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	6a1b      	ldr	r3, [r3, #32]
 8001154:	81fb      	strh	r3, [r7, #14]
    int16_t _out = (int16_t)in;
 8001156:	edd7 7a01 	vldr	s15, [r7, #4]
 800115a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800115e:	ee17 3a90 	vmov	r3, s15
 8001162:	81bb      	strh	r3, [r7, #12]
    _out = _out >> shift;
 8001164:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001168:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800116c:	fa42 f303 	asr.w	r3, r2, r3
 8001170:	81bb      	strh	r3, [r7, #12]
    _out = _out << shift;
 8001172:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001176:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	81bb      	strh	r3, [r7, #12]
    _out += (2 << shift -2);
 8001180:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001184:	3b02      	subs	r3, #2
 8001186:	2202      	movs	r2, #2
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	b29a      	uxth	r2, r3
 800118e:	89bb      	ldrh	r3, [r7, #12]
 8001190:	4413      	add	r3, r2
 8001192:	b29b      	uxth	r3, r3
 8001194:	81bb      	strh	r3, [r7, #12]
    float out = (float)_out;
 8001196:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800119a:	ee07 3a90 	vmov	s15, r3
 800119e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011a2:	edc7 7a02 	vstr	s15, [r7, #8]
    out = mix(out, in, conf->float_params[BALANCE_1].value, conf->float_params[BALANCE_2].value);
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 80011b2:	eef0 1a47 	vmov.f32	s3, s14
 80011b6:	eeb0 1a67 	vmov.f32	s2, s15
 80011ba:	edd7 0a01 	vldr	s1, [r7, #4]
 80011be:	ed97 0a02 	vldr	s0, [r7, #8]
 80011c2:	f000 facd 	bl	8001760 <mix>
 80011c6:	ed87 0a02 	vstr	s0, [r7, #8]
    return out;
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	ee07 3a90 	vmov	s15, r3
}
 80011d0:	eeb0 0a67 	vmov.f32	s0, s15
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <tremolo_pedal_init>:

// TREMOLO

void tremolo_pedal_init(pedal_config_t *conf) {
 80011dc:	b490      	push	{r4, r7}
 80011de:	b092      	sub	sp, #72	; 0x48
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
    conf->int_params[COUNTER] = (int_parameter_t){0, 1, 0, 0};
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2200      	movs	r2, #0
 80011e8:	611a      	str	r2, [r3, #16]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2201      	movs	r2, #1
 80011ee:	615a      	str	r2, [r3, #20]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2200      	movs	r2, #0
 80011f4:	619a      	str	r2, [r3, #24]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2200      	movs	r2, #0
 80011fa:	61da      	str	r2, [r3, #28]
    conf->float_params[SPEED] = (float_parameter_t){2.F, 0.1F, 10.F, 0.1F};
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4a0e      	ldr	r2, [pc, #56]	; (8001238 <tremolo_pedal_init+0x5c>)
 8001200:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8001204:	4613      	mov	r3, r2
 8001206:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001208:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_1] = (float_parameter_t){0.2F, 0.F, 1.F, 0.1F};
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4a0b      	ldr	r2, [pc, #44]	; (800123c <tremolo_pedal_init+0x60>)
 8001210:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8001214:	4613      	mov	r3, r2
 8001216:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001218:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_2] = (float_parameter_t){0.8F, 0.F, 1.F, 0.1F};
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4a08      	ldr	r2, [pc, #32]	; (8001240 <tremolo_pedal_init+0x64>)
 8001220:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8001224:	4613      	mov	r3, r2
 8001226:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001228:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800122c:	bf00      	nop
 800122e:	3748      	adds	r7, #72	; 0x48
 8001230:	46bd      	mov	sp, r7
 8001232:	bc90      	pop	{r4, r7}
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	0800bbbc 	.word	0x0800bbbc
 800123c:	0800bbcc 	.word	0x0800bbcc
 8001240:	0800bbdc 	.word	0x0800bbdc

08001244 <tremolo_process>:

float tremolo_process(float in, pedal_config_t *conf) {
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	ed87 0a01 	vstr	s0, [r7, #4]
 800124e:	6038      	str	r0, [r7, #0]
    float tone = 440.0F;
 8001250:	4b1c      	ldr	r3, [pc, #112]	; (80012c4 <tremolo_process+0x80>)
 8001252:	60fb      	str	r3, [r7, #12]
    float out = in * wave_gen('s', conf->int_params[COUNTER].value, tone * conf->float_params[SPEED].value);
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	691b      	ldr	r3, [r3, #16]
 8001258:	461a      	mov	r2, r3
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8001260:	edd7 7a03 	vldr	s15, [r7, #12]
 8001264:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001268:	eeb0 0a67 	vmov.f32	s0, s15
 800126c:	4611      	mov	r1, r2
 800126e:	2073      	movs	r0, #115	; 0x73
 8001270:	f000 fb42 	bl	80018f8 <wave_gen>
 8001274:	eeb0 7a40 	vmov.f32	s14, s0
 8001278:	edd7 7a01 	vldr	s15, [r7, #4]
 800127c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001280:	edc7 7a02 	vstr	s15, [r7, #8]
    conf->int_params[COUNTER].value++;
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	691b      	ldr	r3, [r3, #16]
 8001288:	1c5a      	adds	r2, r3, #1
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	611a      	str	r2, [r3, #16]
    out = mix(out, in, conf->float_params[BALANCE_1].value, conf->float_params[BALANCE_2].value);
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 800129a:	eef0 1a47 	vmov.f32	s3, s14
 800129e:	eeb0 1a67 	vmov.f32	s2, s15
 80012a2:	edd7 0a01 	vldr	s1, [r7, #4]
 80012a6:	ed97 0a02 	vldr	s0, [r7, #8]
 80012aa:	f000 fa59 	bl	8001760 <mix>
 80012ae:	ed87 0a02 	vstr	s0, [r7, #8]
    return out;
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	ee07 3a90 	vmov	s15, r3
}
 80012b8:	eeb0 0a67 	vmov.f32	s0, s15
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	43dc0000 	.word	0x43dc0000

080012c8 <overdrive_sqrt_pedal_init>:

// OVERDRIVE_SQRT

void overdrive_sqrt_pedal_init(pedal_config_t *conf) {
 80012c8:	b490      	push	{r4, r7}
 80012ca:	b092      	sub	sp, #72	; 0x48
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
    conf->float_params[INTENSITY] = (float_parameter_t){500.F, 0.F, 2000.F, 100.F};
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4a12      	ldr	r2, [pc, #72]	; (800131c <overdrive_sqrt_pedal_init+0x54>)
 80012d4:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80012d8:	4613      	mov	r3, r2
 80012da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[THRESHOLD_HIGH] = (float_parameter_t){32767.F, 0.F, 32767.F, 1.F};
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4a0f      	ldr	r2, [pc, #60]	; (8001320 <overdrive_sqrt_pedal_init+0x58>)
 80012e4:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80012e8:	4613      	mov	r3, r2
 80012ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_1] = (float_parameter_t){0.25F, 0.F, 1.F, 0.1F};
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a0c      	ldr	r2, [pc, #48]	; (8001324 <overdrive_sqrt_pedal_init+0x5c>)
 80012f4:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80012f8:	4613      	mov	r3, r2
 80012fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_2] = (float_parameter_t){0.75F, 0.F, 1.F, 0.1F};
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4a09      	ldr	r2, [pc, #36]	; (8001328 <overdrive_sqrt_pedal_init+0x60>)
 8001304:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8001308:	4613      	mov	r3, r2
 800130a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800130c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001310:	bf00      	nop
 8001312:	3748      	adds	r7, #72	; 0x48
 8001314:	46bd      	mov	sp, r7
 8001316:	bc90      	pop	{r4, r7}
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	0800bbec 	.word	0x0800bbec
 8001320:	0800bb5c 	.word	0x0800bb5c
 8001324:	0800bbfc 	.word	0x0800bbfc
 8001328:	0800bc0c 	.word	0x0800bc0c

0800132c <overdrive_sqrt_process>:

float overdrive_sqrt_process(float in, pedal_config_t *conf) {
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	ed87 0a01 	vstr	s0, [r7, #4]
 8001336:	6038      	str	r0, [r7, #0]
    float out;
    if (in > 0.0F) {
 8001338:	edd7 7a01 	vldr	s15, [r7, #4]
 800133c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001344:	dd06      	ble.n	8001354 <overdrive_sqrt_process+0x28>
        out = square_root(in);
 8001346:	ed97 0a01 	vldr	s0, [r7, #4]
 800134a:	f000 faa4 	bl	8001896 <square_root>
 800134e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001352:	e00d      	b.n	8001370 <overdrive_sqrt_process+0x44>
    } else {
        out = -square_root(-in);
 8001354:	edd7 7a01 	vldr	s15, [r7, #4]
 8001358:	eef1 7a67 	vneg.f32	s15, s15
 800135c:	eeb0 0a67 	vmov.f32	s0, s15
 8001360:	f000 fa99 	bl	8001896 <square_root>
 8001364:	eef0 7a40 	vmov.f32	s15, s0
 8001368:	eef1 7a67 	vneg.f32	s15, s15
 800136c:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    out = out * conf->float_params[INTENSITY].value;
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001376:	ed97 7a03 	vldr	s14, [r7, #12]
 800137a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800137e:	edc7 7a03 	vstr	s15, [r7, #12]
    out = hard_clip(out, conf->float_params[THRESHOLD_HIGH].value);
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001388:	eef0 0a67 	vmov.f32	s1, s15
 800138c:	ed97 0a03 	vldr	s0, [r7, #12]
 8001390:	f000 fa06 	bl	80017a0 <hard_clip>
 8001394:	ed87 0a03 	vstr	s0, [r7, #12]
    out = mix(out, in, conf->float_params[BALANCE_1].value, conf->float_params[BALANCE_2].value);
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 80013a4:	eef0 1a47 	vmov.f32	s3, s14
 80013a8:	eeb0 1a67 	vmov.f32	s2, s15
 80013ac:	edd7 0a01 	vldr	s1, [r7, #4]
 80013b0:	ed97 0a03 	vldr	s0, [r7, #12]
 80013b4:	f000 f9d4 	bl	8001760 <mix>
 80013b8:	ed87 0a03 	vstr	s0, [r7, #12]
    return out;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	ee07 3a90 	vmov	s15, r3
}
 80013c2:	eeb0 0a67 	vmov.f32	s0, s15
 80013c6:	3710      	adds	r7, #16
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <amplifier_pedal_init>:

// AMPLIFIER

void amplifier_pedal_init(pedal_config_t *conf) {
 80013cc:	b490      	push	{r4, r7}
 80013ce:	b08a      	sub	sp, #40	; 0x28
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
    conf->float_params[INTENSITY] = (float_parameter_t){0.5F, 0.1F, 10.F, 0.1F};
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4a0a      	ldr	r2, [pc, #40]	; (8001400 <amplifier_pedal_init+0x34>)
 80013d8:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80013dc:	4613      	mov	r3, r2
 80013de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[THRESHOLD_HIGH] = (float_parameter_t){32767.F, 0.F, 32767.F, 1.F};
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4a07      	ldr	r2, [pc, #28]	; (8001404 <amplifier_pedal_init+0x38>)
 80013e8:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80013ec:	4613      	mov	r3, r2
 80013ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80013f4:	bf00      	nop
 80013f6:	3728      	adds	r7, #40	; 0x28
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bc90      	pop	{r4, r7}
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	0800bc1c 	.word	0x0800bc1c
 8001404:	0800bb5c 	.word	0x0800bb5c

08001408 <amplifier_process>:

float amplifier_process(float in, pedal_config_t *conf) {
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001412:	6038      	str	r0, [r7, #0]
    float out = in * conf->float_params[INTENSITY].value;
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800141a:	ed97 7a01 	vldr	s14, [r7, #4]
 800141e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001422:	edc7 7a03 	vstr	s15, [r7, #12]
    out = hard_clip(out, conf->float_params[THRESHOLD_HIGH].value);
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800142c:	eef0 0a67 	vmov.f32	s1, s15
 8001430:	ed97 0a03 	vldr	s0, [r7, #12]
 8001434:	f000 f9b4 	bl	80017a0 <hard_clip>
 8001438:	ed87 0a03 	vstr	s0, [r7, #12]
    return out;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	ee07 3a90 	vmov	s15, r3
}
 8001442:	eeb0 0a67 	vmov.f32	s0, s15
 8001446:	3710      	adds	r7, #16
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <dyn_amplifier_pedal_init>:

// DYN_AMPLIFIER

void dyn_amplifier_pedal_init(pedal_config_t *conf) {
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
    //conf->float_params[GAIN_INTENSITY] = (float_parameter_t){1000, 0.1, 10, 0.1};
    //conf->float_params[CLIP_THRESHOLD] = (float_parameter_t){32767, 0, 32767, 1};
    //conf->float_params[SOFT_THRESHOLD] = (float_parameter_t){28000, 0, 32767, 1};
    //conf->float_params[BALANCE] = (float_parameter_t){0.5, 0, 1, 0.1};
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <dyn_amplifier_process>:

float dyn_amplifier_process(float in, pedal_config_t *conf) {
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	ed87 0a01 	vstr	s0, [r7, #4]
 800146a:	6038      	str	r0, [r7, #0]
    //    else if (max < conf->float_params[SOFT_THRESHOLD].value) dyn += 0.01;
    //    max = 0;
    //}
    //out = hard_clip(out, conf->float_params[CLIP_THRESHOLD].value);
    //return out;
    return in;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	ee07 3a90 	vmov	s15, r3
}
 8001472:	eeb0 0a67 	vmov.f32	s0, s15
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <low_pass_filter_pedal_init>:

// LPF

void low_pass_filter_pedal_init(pedal_config_t *conf) {
 8001480:	b490      	push	{r4, r7}
 8001482:	b092      	sub	sp, #72	; 0x48
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
    conf->float_params[INTENSITY] = (float_parameter_t){0.9F, 0.0F, 1.0F, 0.01F};
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	4a11      	ldr	r2, [pc, #68]	; (80014d0 <low_pass_filter_pedal_init+0x50>)
 800148c:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8001490:	4613      	mov	r3, r2
 8001492:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001494:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_1] = (float_parameter_t){1.F, 0.F, 1.F, 0.1F};
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4a0e      	ldr	r2, [pc, #56]	; (80014d4 <low_pass_filter_pedal_init+0x54>)
 800149c:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80014a0:	4613      	mov	r3, r2
 80014a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_2] = (float_parameter_t){0.F, 0.F, 1.F, 0.1F};
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4a0b      	ldr	r2, [pc, #44]	; (80014d8 <low_pass_filter_pedal_init+0x58>)
 80014ac:	f103 0480 	add.w	r4, r3, #128	; 0x80
 80014b0:	4613      	mov	r3, r2
 80014b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[PAST] = (float_parameter_t){0.F, 0.F, 0.F, 0.F};
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	33b0      	adds	r3, #176	; 0xb0
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]
}
 80014c6:	bf00      	nop
 80014c8:	3748      	adds	r7, #72	; 0x48
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc90      	pop	{r4, r7}
 80014ce:	4770      	bx	lr
 80014d0:	0800bc2c 	.word	0x0800bc2c
 80014d4:	0800bb7c 	.word	0x0800bb7c
 80014d8:	0800bb8c 	.word	0x0800bb8c

080014dc <low_pass_filter_process>:

float low_pass_filter_process(float in, pedal_config_t *conf) {
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	ed87 0a01 	vstr	s0, [r7, #4]
 80014e6:	6038      	str	r0, [r7, #0]
    float alpha = conf->float_params[INTENSITY].value;
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ec:	60fb      	str	r3, [r7, #12]
    float out = conf->float_params[PAST].value * alpha + (1.F - alpha) * in;
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 80014f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80014f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001500:	edd7 7a03 	vldr	s15, [r7, #12]
 8001504:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001508:	edd7 7a01 	vldr	s15, [r7, #4]
 800150c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001510:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001514:	edc7 7a02 	vstr	s15, [r7, #8]
    conf->float_params[PAST].value = out;
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	68ba      	ldr	r2, [r7, #8]
 800151c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    out = mix(out, in, conf->float_params[BALANCE_1].value, conf->float_params[BALANCE_2].value);
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 800152c:	eef0 1a47 	vmov.f32	s3, s14
 8001530:	eeb0 1a67 	vmov.f32	s2, s15
 8001534:	edd7 0a01 	vldr	s1, [r7, #4]
 8001538:	ed97 0a02 	vldr	s0, [r7, #8]
 800153c:	f000 f910 	bl	8001760 <mix>
 8001540:	ed87 0a02 	vstr	s0, [r7, #8]
    return out;
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	ee07 3a90 	vmov	s15, r3
}
 800154a:	eeb0 0a67 	vmov.f32	s0, s15
 800154e:	3710      	adds	r7, #16
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <fuzz_pedal_init>:

// FUZZ

void fuzz_pedal_init(pedal_config_t *conf) {
 8001554:	b490      	push	{r4, r7}
 8001556:	b09e      	sub	sp, #120	; 0x78
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
    conf->int_params[COUNTER] = (int_parameter_t){0, 1, 0, 0};
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	611a      	str	r2, [r3, #16]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2201      	movs	r2, #1
 8001566:	615a      	str	r2, [r3, #20]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	619a      	str	r2, [r3, #24]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	61da      	str	r2, [r3, #28]
    conf->float_params[INTENSITY] = (float_parameter_t){4.F, 1.F, 10.F, 0.5F};
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	4a1a      	ldr	r2, [pc, #104]	; (80015e0 <fuzz_pedal_init+0x8c>)
 8001578:	f103 0430 	add.w	r4, r3, #48	; 0x30
 800157c:	4613      	mov	r3, r2
 800157e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001580:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[THRESHOLD_HIGH] = (float_parameter_t){32767.F, 0.F, 32767.F, 1.F};
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4a17      	ldr	r2, [pc, #92]	; (80015e4 <fuzz_pedal_init+0x90>)
 8001588:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800158c:	4613      	mov	r3, r2
 800158e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001590:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[HEIGHT] = (float_parameter_t){2048.F, 0.F, 8192.F, 32.F};
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4a14      	ldr	r2, [pc, #80]	; (80015e8 <fuzz_pedal_init+0x94>)
 8001598:	f103 0490 	add.w	r4, r3, #144	; 0x90
 800159c:	4613      	mov	r3, r2
 800159e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[SPEED] = (float_parameter_t){1.F, 0.1F, 10.F, 0.1F};
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4a11      	ldr	r2, [pc, #68]	; (80015ec <fuzz_pedal_init+0x98>)
 80015a8:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 80015ac:	4613      	mov	r3, r2
 80015ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_1] = (float_parameter_t){1.F, 0.F, 1.F, 0.1F};
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	4a0e      	ldr	r2, [pc, #56]	; (80015f0 <fuzz_pedal_init+0x9c>)
 80015b8:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80015bc:	4613      	mov	r3, r2
 80015be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_2] = (float_parameter_t){0.F, 0.F, 1.F, 0.1F};
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4a0b      	ldr	r2, [pc, #44]	; (80015f4 <fuzz_pedal_init+0xa0>)
 80015c8:	f103 0480 	add.w	r4, r3, #128	; 0x80
 80015cc:	4613      	mov	r3, r2
 80015ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80015d4:	bf00      	nop
 80015d6:	3778      	adds	r7, #120	; 0x78
 80015d8:	46bd      	mov	sp, r7
 80015da:	bc90      	pop	{r4, r7}
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	0800bb4c 	.word	0x0800bb4c
 80015e4:	0800bb5c 	.word	0x0800bb5c
 80015e8:	0800bc3c 	.word	0x0800bc3c
 80015ec:	0800bc4c 	.word	0x0800bc4c
 80015f0:	0800bb7c 	.word	0x0800bb7c
 80015f4:	0800bb8c 	.word	0x0800bb8c

080015f8 <fuzz_process>:

float fuzz_process(float in, pedal_config_t *conf) {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b088      	sub	sp, #32
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	ed87 0a01 	vstr	s0, [r7, #4]
 8001602:	6038      	str	r0, [r7, #0]
    float out = in * conf->float_params[INTENSITY].value;
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800160a:	ed97 7a01 	vldr	s14, [r7, #4]
 800160e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001612:	edc7 7a07 	vstr	s15, [r7, #28]
    float threshold_high = conf->float_params[THRESHOLD_HIGH].value;
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	61bb      	str	r3, [r7, #24]
    float height = conf->float_params[HEIGHT].value;
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001622:	617b      	str	r3, [r7, #20]
    float speed = conf->float_params[SPEED].value;
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800162a:	613b      	str	r3, [r7, #16]
    float tone = 440.0F;
 800162c:	4b3e      	ldr	r3, [pc, #248]	; (8001728 <fuzz_process+0x130>)
 800162e:	60fb      	str	r3, [r7, #12]

    out = hard_clip(out, threshold_high);
 8001630:	edd7 0a06 	vldr	s1, [r7, #24]
 8001634:	ed97 0a07 	vldr	s0, [r7, #28]
 8001638:	f000 f8b2 	bl	80017a0 <hard_clip>
 800163c:	ed87 0a07 	vstr	s0, [r7, #28]
    if (out == threshold_high) {
 8001640:	ed97 7a07 	vldr	s14, [r7, #28]
 8001644:	edd7 7a06 	vldr	s15, [r7, #24]
 8001648:	eeb4 7a67 	vcmp.f32	s14, s15
 800164c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001650:	d11e      	bne.n	8001690 <fuzz_process+0x98>
        out += (wave_gen('s', conf->int_params[COUNTER].value, tone * speed) - 1) * height;
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	691b      	ldr	r3, [r3, #16]
 8001656:	ed97 7a03 	vldr	s14, [r7, #12]
 800165a:	edd7 7a04 	vldr	s15, [r7, #16]
 800165e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001662:	eeb0 0a67 	vmov.f32	s0, s15
 8001666:	4619      	mov	r1, r3
 8001668:	2073      	movs	r0, #115	; 0x73
 800166a:	f000 f945 	bl	80018f8 <wave_gen>
 800166e:	eef0 7a40 	vmov.f32	s15, s0
 8001672:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001676:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800167a:	edd7 7a05 	vldr	s15, [r7, #20]
 800167e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001682:	ed97 7a07 	vldr	s14, [r7, #28]
 8001686:	ee77 7a27 	vadd.f32	s15, s14, s15
 800168a:	edc7 7a07 	vstr	s15, [r7, #28]
 800168e:	e02c      	b.n	80016ea <fuzz_process+0xf2>
    } else if (out == - threshold_high - 1.F) {
 8001690:	edd7 7a06 	vldr	s15, [r7, #24]
 8001694:	eef1 7a67 	vneg.f32	s15, s15
 8001698:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800169c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80016a0:	ed97 7a07 	vldr	s14, [r7, #28]
 80016a4:	eeb4 7a67 	vcmp.f32	s14, s15
 80016a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ac:	d11d      	bne.n	80016ea <fuzz_process+0xf2>
        out += (wave_gen('s', conf->int_params[COUNTER].value, tone * speed) + 1) * height;
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	691b      	ldr	r3, [r3, #16]
 80016b2:	ed97 7a03 	vldr	s14, [r7, #12]
 80016b6:	edd7 7a04 	vldr	s15, [r7, #16]
 80016ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016be:	eeb0 0a67 	vmov.f32	s0, s15
 80016c2:	4619      	mov	r1, r3
 80016c4:	2073      	movs	r0, #115	; 0x73
 80016c6:	f000 f917 	bl	80018f8 <wave_gen>
 80016ca:	eef0 7a40 	vmov.f32	s15, s0
 80016ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80016d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80016d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80016da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016de:	ed97 7a07 	vldr	s14, [r7, #28]
 80016e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016e6:	edc7 7a07 	vstr	s15, [r7, #28]
    }
    conf->int_params[COUNTER].value++;
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	691b      	ldr	r3, [r3, #16]
 80016ee:	1c5a      	adds	r2, r3, #1
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	611a      	str	r2, [r3, #16]
    out = mix(out, in, conf->float_params[BALANCE_1].value, conf->float_params[BALANCE_2].value);
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8001700:	eef0 1a47 	vmov.f32	s3, s14
 8001704:	eeb0 1a67 	vmov.f32	s2, s15
 8001708:	edd7 0a01 	vldr	s1, [r7, #4]
 800170c:	ed97 0a07 	vldr	s0, [r7, #28]
 8001710:	f000 f826 	bl	8001760 <mix>
 8001714:	ed87 0a07 	vstr	s0, [r7, #28]
    return out;
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	ee07 3a90 	vmov	s15, r3
}
 800171e:	eeb0 0a67 	vmov.f32	s0, s15
 8001722:	3720      	adds	r7, #32
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	43dc0000 	.word	0x43dc0000

0800172c <bypass_pedal_init>:

// BYPASS

void bypass_pedal_init(pedal_config_t *conf) {
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
    return;
 8001734:	bf00      	nop
}
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <bypass_process>:

float bypass_process(float in, pedal_config_t *conf) {
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	ed87 0a01 	vstr	s0, [r7, #4]
 800174a:	6038      	str	r0, [r7, #0]
    return in;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	ee07 3a90 	vmov	s15, r3
}
 8001752:	eeb0 0a67 	vmov.f32	s0, s15
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <mix>:


float mix(float in_1, float in_2, float balance_1, float balance_2) {
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	ed87 0a03 	vstr	s0, [r7, #12]
 800176a:	edc7 0a02 	vstr	s1, [r7, #8]
 800176e:	ed87 1a01 	vstr	s2, [r7, #4]
 8001772:	edc7 1a00 	vstr	s3, [r7]
    return in_1 * balance_1 + in_2 * balance_2;
 8001776:	ed97 7a03 	vldr	s14, [r7, #12]
 800177a:	edd7 7a01 	vldr	s15, [r7, #4]
 800177e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001782:	edd7 6a02 	vldr	s13, [r7, #8]
 8001786:	edd7 7a00 	vldr	s15, [r7]
 800178a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800178e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001792:	eeb0 0a67 	vmov.f32	s0, s15
 8001796:	3714      	adds	r7, #20
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <hard_clip>:

float hard_clip(float in, float clip_threshold) {
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	ed87 0a01 	vstr	s0, [r7, #4]
 80017aa:	edc7 0a00 	vstr	s1, [r7]
    if (in > clip_threshold) {
 80017ae:	ed97 7a01 	vldr	s14, [r7, #4]
 80017b2:	edd7 7a00 	vldr	s15, [r7]
 80017b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017be:	dd02      	ble.n	80017c6 <hard_clip+0x26>
        return clip_threshold;
 80017c0:	edd7 7a00 	vldr	s15, [r7]
 80017c4:	e015      	b.n	80017f2 <hard_clip+0x52>
    } else if (in < -clip_threshold) {
 80017c6:	edd7 7a00 	vldr	s15, [r7]
 80017ca:	eef1 7a67 	vneg.f32	s15, s15
 80017ce:	ed97 7a01 	vldr	s14, [r7, #4]
 80017d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017da:	d508      	bpl.n	80017ee <hard_clip+0x4e>
        return -clip_threshold - 1;
 80017dc:	edd7 7a00 	vldr	s15, [r7]
 80017e0:	eef1 7a67 	vneg.f32	s15, s15
 80017e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80017e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80017ec:	e001      	b.n	80017f2 <hard_clip+0x52>
    }
    return in;
 80017ee:	edd7 7a01 	vldr	s15, [r7, #4]
}
 80017f2:	eeb0 0a67 	vmov.f32	s0, s15
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <soft_clip>:

float soft_clip(float in, float soft_threshold, float softener) {
 8001800:	b480      	push	{r7}
 8001802:	b087      	sub	sp, #28
 8001804:	af00      	add	r7, sp, #0
 8001806:	ed87 0a03 	vstr	s0, [r7, #12]
 800180a:	edc7 0a02 	vstr	s1, [r7, #8]
 800180e:	ed87 1a01 	vstr	s2, [r7, #4]
    float out;
    if (in > soft_threshold) {
 8001812:	ed97 7a03 	vldr	s14, [r7, #12]
 8001816:	edd7 7a02 	vldr	s15, [r7, #8]
 800181a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800181e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001822:	dd10      	ble.n	8001846 <soft_clip+0x46>
        out = soft_threshold + (in - soft_threshold) / softener;
 8001824:	ed97 7a03 	vldr	s14, [r7, #12]
 8001828:	edd7 7a02 	vldr	s15, [r7, #8]
 800182c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001830:	ed97 7a01 	vldr	s14, [r7, #4]
 8001834:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001838:	ed97 7a02 	vldr	s14, [r7, #8]
 800183c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001840:	edc7 7a05 	vstr	s15, [r7, #20]
 8001844:	e01d      	b.n	8001882 <soft_clip+0x82>
    } else if (in < -soft_threshold) {
 8001846:	edd7 7a02 	vldr	s15, [r7, #8]
 800184a:	eef1 7a67 	vneg.f32	s15, s15
 800184e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001852:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800185a:	d510      	bpl.n	800187e <soft_clip+0x7e>
        out = -soft_threshold + (in + soft_threshold) / softener;
 800185c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001860:	edd7 7a02 	vldr	s15, [r7, #8]
 8001864:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001868:	edd7 7a01 	vldr	s15, [r7, #4]
 800186c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001870:	edd7 7a02 	vldr	s15, [r7, #8]
 8001874:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001878:	edc7 7a05 	vstr	s15, [r7, #20]
 800187c:	e001      	b.n	8001882 <soft_clip+0x82>
    } else {
        out = in;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	617b      	str	r3, [r7, #20]
    }
    return out;
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	ee07 3a90 	vmov	s15, r3
}
 8001888:	eeb0 0a67 	vmov.f32	s0, s15
 800188c:	371c      	adds	r7, #28
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <square_root>:

float square_root(float in) {
 8001896:	b480      	push	{r7}
 8001898:	b085      	sub	sp, #20
 800189a:	af00      	add	r7, sp, #0
 800189c:	ed87 0a01 	vstr	s0, [r7, #4]
    float out;
    out = in * 0.5F;
 80018a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80018a4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80018a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018ac:	edc7 7a03 	vstr	s15, [r7, #12]
    for (u_int8_t i = 0; i < 8; i++) {
 80018b0:	2300      	movs	r3, #0
 80018b2:	72fb      	strb	r3, [r7, #11]
 80018b4:	e012      	b.n	80018dc <square_root+0x46>
        out = 0.5F * (out + (in / out));
 80018b6:	edd7 6a01 	vldr	s13, [r7, #4]
 80018ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80018be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80018c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80018c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018ca:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80018ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018d2:	edc7 7a03 	vstr	s15, [r7, #12]
    for (u_int8_t i = 0; i < 8; i++) {
 80018d6:	7afb      	ldrb	r3, [r7, #11]
 80018d8:	3301      	adds	r3, #1
 80018da:	72fb      	strb	r3, [r7, #11]
 80018dc:	7afb      	ldrb	r3, [r7, #11]
 80018de:	2b07      	cmp	r3, #7
 80018e0:	d9e9      	bls.n	80018b6 <square_root+0x20>
    }
    return out;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	ee07 3a90 	vmov	s15, r3
}
 80018e8:	eeb0 0a67 	vmov.f32	s0, s15
 80018ec:	3714      	adds	r7, #20
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
	...

080018f8 <wave_gen>:

float wave_gen(char t, u_int32_t i, float tone) {
 80018f8:	b580      	push	{r7, lr}
 80018fa:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 80018fe:	af00      	add	r7, sp, #0
 8001900:	4602      	mov	r2, r0
 8001902:	f107 0308 	add.w	r3, r7, #8
 8001906:	6019      	str	r1, [r3, #0]
 8001908:	1d3b      	adds	r3, r7, #4
 800190a:	ed83 0a00 	vstr	s0, [r3]
 800190e:	f107 030f 	add.w	r3, r7, #15
 8001912:	701a      	strb	r2, [r3, #0]

    float sin_table[128] = { 0.000000F, 0.024541F, 0.049068F, 0.073565F, 0.098017F, 0.122411F, 0.146730F, 0.170962F, 0.195090F, 0.219101F, 0.242980F, 0.266713F, 0.290284F, 0.313681F, 0.336890F, 0.359895F, 0.382683F, 0.405241F, 0.427555F, 0.449611F, 0.471396F, 0.492898F, 0.514102F, 0.534997F, 0.555570F, 0.575808F, 0.595699F, 0.615231F, 0.634393F, 0.653172F, 0.671559F, 0.689540F, 0.707106F, 0.724247F, 0.740951F, 0.757208F, 0.773010F, 0.788346F, 0.803207F, 0.817584F, 0.831469F, 0.844853F, 0.857728F, 0.870087F, 0.881921F, 0.893224F, 0.903989F, 0.914209F, 0.923879F, 0.932992F, 0.941544F, 0.949528F, 0.956940F, 0.963776F, 0.970031F, 0.975702F, 0.980785F, 0.985277F, 0.989176F, 0.992479F, 0.995185F, 0.997290F, 0.998795F, 0.999699F, 1.000000F, 0.999699F, 0.998796F, 0.997291F, 0.995185F, 0.992480F, 0.989177F, 0.985278F, 0.980786F, 0.975702F, 0.970032F, 0.963776F, 0.956941F, 0.949529F, 0.941545F, 0.932993F, 0.923880F, 0.914210F, 0.903990F, 0.893225F, 0.881922F, 0.870088F, 0.857729F, 0.844855F, 0.831471F, 0.817586F, 0.803209F, 0.788348F, 0.773012F, 0.757210F, 0.740952F, 0.724248F, 0.707108F, 0.689542F, 0.671560F, 0.653174F, 0.634395F, 0.615233F, 0.595701F, 0.575810F, 0.555572F, 0.534999F, 0.514105F, 0.492900F, 0.471399F, 0.449613F, 0.427557F, 0.405243F, 0.382685F, 0.359897F, 0.336892F, 0.313684F, 0.290287F, 0.266715F, 0.242982F, 0.219104F, 0.195093F, 0.170964F, 0.146733F, 0.122413F, 0.098019F, 0.073567F, 0.049070F, 0.024544F };
 8001914:	f107 0314 	add.w	r3, r7, #20
 8001918:	4a2c      	ldr	r2, [pc, #176]	; (80019cc <wave_gen+0xd4>)
 800191a:	4618      	mov	r0, r3
 800191c:	4611      	mov	r1, r2
 800191e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001922:	461a      	mov	r2, r3
 8001924:	f00a f828 	bl	800b978 <memcpy>
    float period_f = 48000.F / tone;
 8001928:	1d3b      	adds	r3, r7, #4
 800192a:	eddf 6a29 	vldr	s13, [pc, #164]	; 80019d0 <wave_gen+0xd8>
 800192e:	ed93 7a00 	vldr	s14, [r3]
 8001932:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001936:	edc7 7a87 	vstr	s15, [r7, #540]	; 0x21c
    u_int32_t period_i = period_f;
 800193a:	edd7 7a87 	vldr	s15, [r7, #540]	; 0x21c
 800193e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001942:	ee17 3a90 	vmov	r3, s15
 8001946:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
    u_int32_t table_index = (i * 256 / period_i) % 256;
 800194a:	f107 0308 	add.w	r3, r7, #8
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	021a      	lsls	r2, r3, #8
 8001952:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001956:	fbb2 f3f3 	udiv	r3, r2, r3
 800195a:	b2db      	uxtb	r3, r3
 800195c:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214

    if (t == 's') {
 8001960:	f107 030f 	add.w	r3, r7, #15
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	2b73      	cmp	r3, #115	; 0x73
 8001968:	d118      	bne.n	800199c <wave_gen+0xa4>
        if (table_index <= 127) {
 800196a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800196e:	2b7f      	cmp	r3, #127	; 0x7f
 8001970:	d808      	bhi.n	8001984 <wave_gen+0x8c>
            return sin_table[table_index];
 8001972:	f107 0214 	add.w	r2, r7, #20
 8001976:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	4413      	add	r3, r2
 800197e:	edd3 7a00 	vldr	s15, [r3]
 8001982:	e01c      	b.n	80019be <wave_gen+0xc6>
        } else {
            return -sin_table[table_index - 128];
 8001984:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001988:	3b80      	subs	r3, #128	; 0x80
 800198a:	f107 0214 	add.w	r2, r7, #20
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	4413      	add	r3, r2
 8001992:	edd3 7a00 	vldr	s15, [r3]
 8001996:	eef1 7a67 	vneg.f32	s15, s15
 800199a:	e010      	b.n	80019be <wave_gen+0xc6>
        }
    } else if (t == 'q') {
 800199c:	f107 030f 	add.w	r3, r7, #15
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2b71      	cmp	r3, #113	; 0x71
 80019a4:	d109      	bne.n	80019ba <wave_gen+0xc2>
        if (table_index <= 127) {
 80019a6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80019aa:	2b7f      	cmp	r3, #127	; 0x7f
 80019ac:	d802      	bhi.n	80019b4 <wave_gen+0xbc>
            return -1.F;
 80019ae:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80019b2:	e004      	b.n	80019be <wave_gen+0xc6>
        } else {
            return 1.F;
 80019b4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80019b8:	e001      	b.n	80019be <wave_gen+0xc6>
        }
    } else {
        return 0;
 80019ba:	eddf 7a06 	vldr	s15, [pc, #24]	; 80019d4 <wave_gen+0xdc>
    }
}
 80019be:	eeb0 0a67 	vmov.f32	s0, s15
 80019c2:	f507 7708 	add.w	r7, r7, #544	; 0x220
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	0800bc5c 	.word	0x0800bc5c
 80019d0:	473b8000 	.word	0x473b8000
 80019d4:	00000000 	.word	0x00000000

080019d8 <pedalboard_append>:



// PEDALBOARD

void pedalboard_append(pedalboard_t *p_pb, enum pedal_types type) {
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	460b      	mov	r3, r1
 80019e2:	70fb      	strb	r3, [r7, #3]
    u_int8_t i = p_pb->active_pedals;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	73fb      	strb	r3, [r7, #15]

    if (p_pb->active_pedals < MAX_PEDALS_COUNT) {
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	2b07      	cmp	r3, #7
 80019f0:	f200 80dd 	bhi.w	8001bae <pedalboard_append+0x1d6>
        u_int8_t i = p_pb->active_pedals;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	73bb      	strb	r3, [r7, #14]
        p_pb->pedals[i].type = type;
 80019fa:	7bbb      	ldrb	r3, [r7, #14]
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	21c8      	movs	r1, #200	; 0xc8
 8001a00:	fb01 f303 	mul.w	r3, r1, r3
 8001a04:	4413      	add	r3, r2
 8001a06:	33c4      	adds	r3, #196	; 0xc4
 8001a08:	78fa      	ldrb	r2, [r7, #3]
 8001a0a:	701a      	strb	r2, [r3, #0]

        if (type == AMPLIFIER)
 8001a0c:	78fb      	ldrb	r3, [r7, #3]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d113      	bne.n	8001a3a <pedalboard_append+0x62>
        {
            amplifier_pedal_init(&(p_pb->pedals[i].config));
 8001a12:	7bbb      	ldrb	r3, [r7, #14]
 8001a14:	22c8      	movs	r2, #200	; 0xc8
 8001a16:	fb02 f303 	mul.w	r3, r2, r3
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	3304      	adds	r3, #4
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff fcd3 	bl	80013cc <amplifier_pedal_init>
            p_pb->pedals[i].pedal_process = amplifier_process;
 8001a26:	7bbb      	ldrb	r3, [r7, #14]
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	21c8      	movs	r1, #200	; 0xc8
 8001a2c:	fb01 f303 	mul.w	r3, r1, r3
 8001a30:	4413      	add	r3, r2
 8001a32:	33c8      	adds	r3, #200	; 0xc8
 8001a34:	4a60      	ldr	r2, [pc, #384]	; (8001bb8 <pedalboard_append+0x1e0>)
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	e0b3      	b.n	8001ba2 <pedalboard_append+0x1ca>
        }
        else if (type == BITCRUSHER_RS)
 8001a3a:	78fb      	ldrb	r3, [r7, #3]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d113      	bne.n	8001a68 <pedalboard_append+0x90>
        {
            bitcrusher_rs_pedal_init(&(p_pb->pedals[i].config));
 8001a40:	7bbb      	ldrb	r3, [r7, #14]
 8001a42:	22c8      	movs	r2, #200	; 0xc8
 8001a44:	fb02 f303 	mul.w	r3, r2, r3
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	3304      	adds	r3, #4
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff fb52 	bl	80010f8 <bitcrusher_rs_pedal_init>
            p_pb->pedals[i].pedal_process = bitcrusher_rs_process;
 8001a54:	7bbb      	ldrb	r3, [r7, #14]
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	21c8      	movs	r1, #200	; 0xc8
 8001a5a:	fb01 f303 	mul.w	r3, r1, r3
 8001a5e:	4413      	add	r3, r2
 8001a60:	33c8      	adds	r3, #200	; 0xc8
 8001a62:	4a56      	ldr	r2, [pc, #344]	; (8001bbc <pedalboard_append+0x1e4>)
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	e09c      	b.n	8001ba2 <pedalboard_append+0x1ca>
        }
        else if (type == DYN_AMPLIFIER)
 8001a68:	78fb      	ldrb	r3, [r7, #3]
 8001a6a:	2b03      	cmp	r3, #3
 8001a6c:	d113      	bne.n	8001a96 <pedalboard_append+0xbe>
        {
            dyn_amplifier_pedal_init(&(p_pb->pedals[i].config));
 8001a6e:	7bbb      	ldrb	r3, [r7, #14]
 8001a70:	22c8      	movs	r2, #200	; 0xc8
 8001a72:	fb02 f303 	mul.w	r3, r2, r3
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	4413      	add	r3, r2
 8001a7a:	3304      	adds	r3, #4
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff fce5 	bl	800144c <dyn_amplifier_pedal_init>
            p_pb->pedals[i].pedal_process = dyn_amplifier_process;
 8001a82:	7bbb      	ldrb	r3, [r7, #14]
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	21c8      	movs	r1, #200	; 0xc8
 8001a88:	fb01 f303 	mul.w	r3, r1, r3
 8001a8c:	4413      	add	r3, r2
 8001a8e:	33c8      	adds	r3, #200	; 0xc8
 8001a90:	4a4b      	ldr	r2, [pc, #300]	; (8001bc0 <pedalboard_append+0x1e8>)
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	e085      	b.n	8001ba2 <pedalboard_append+0x1ca>
        }
        else if (type == FUZZ)
 8001a96:	78fb      	ldrb	r3, [r7, #3]
 8001a98:	2b04      	cmp	r3, #4
 8001a9a:	d113      	bne.n	8001ac4 <pedalboard_append+0xec>
        {
            fuzz_pedal_init(&(p_pb->pedals[i].config));
 8001a9c:	7bbb      	ldrb	r3, [r7, #14]
 8001a9e:	22c8      	movs	r2, #200	; 0xc8
 8001aa0:	fb02 f303 	mul.w	r3, r2, r3
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	3304      	adds	r3, #4
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff fd52 	bl	8001554 <fuzz_pedal_init>
            p_pb->pedals[i].pedal_process = fuzz_process;
 8001ab0:	7bbb      	ldrb	r3, [r7, #14]
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	21c8      	movs	r1, #200	; 0xc8
 8001ab6:	fb01 f303 	mul.w	r3, r1, r3
 8001aba:	4413      	add	r3, r2
 8001abc:	33c8      	adds	r3, #200	; 0xc8
 8001abe:	4a41      	ldr	r2, [pc, #260]	; (8001bc4 <pedalboard_append+0x1ec>)
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	e06e      	b.n	8001ba2 <pedalboard_append+0x1ca>
        }
        else if (type == LPF)
 8001ac4:	78fb      	ldrb	r3, [r7, #3]
 8001ac6:	2b05      	cmp	r3, #5
 8001ac8:	d113      	bne.n	8001af2 <pedalboard_append+0x11a>
        {
            low_pass_filter_pedal_init(&(p_pb->pedals[i].config));
 8001aca:	7bbb      	ldrb	r3, [r7, #14]
 8001acc:	22c8      	movs	r2, #200	; 0xc8
 8001ace:	fb02 f303 	mul.w	r3, r2, r3
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	3304      	adds	r3, #4
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff fcd1 	bl	8001480 <low_pass_filter_pedal_init>
            p_pb->pedals[i].pedal_process = low_pass_filter_process;
 8001ade:	7bbb      	ldrb	r3, [r7, #14]
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	21c8      	movs	r1, #200	; 0xc8
 8001ae4:	fb01 f303 	mul.w	r3, r1, r3
 8001ae8:	4413      	add	r3, r2
 8001aea:	33c8      	adds	r3, #200	; 0xc8
 8001aec:	4a36      	ldr	r2, [pc, #216]	; (8001bc8 <pedalboard_append+0x1f0>)
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	e057      	b.n	8001ba2 <pedalboard_append+0x1ca>
        }
        else if (type == OVERDRIVE)
 8001af2:	78fb      	ldrb	r3, [r7, #3]
 8001af4:	2b06      	cmp	r3, #6
 8001af6:	d113      	bne.n	8001b20 <pedalboard_append+0x148>
        {
            overdrive_pedal_init(&(p_pb->pedals[i].config));
 8001af8:	7bbb      	ldrb	r3, [r7, #14]
 8001afa:	22c8      	movs	r2, #200	; 0xc8
 8001afc:	fb02 f303 	mul.w	r3, r2, r3
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	4413      	add	r3, r2
 8001b04:	3304      	adds	r3, #4
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff fa6e 	bl	8000fe8 <overdrive_pedal_init>
            p_pb->pedals[i].pedal_process = overdrive_process;
 8001b0c:	7bbb      	ldrb	r3, [r7, #14]
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	21c8      	movs	r1, #200	; 0xc8
 8001b12:	fb01 f303 	mul.w	r3, r1, r3
 8001b16:	4413      	add	r3, r2
 8001b18:	33c8      	adds	r3, #200	; 0xc8
 8001b1a:	4a2c      	ldr	r2, [pc, #176]	; (8001bcc <pedalboard_append+0x1f4>)
 8001b1c:	601a      	str	r2, [r3, #0]
 8001b1e:	e040      	b.n	8001ba2 <pedalboard_append+0x1ca>
        }
        else if (type == OVERDRIVE_SQRT)
 8001b20:	78fb      	ldrb	r3, [r7, #3]
 8001b22:	2b07      	cmp	r3, #7
 8001b24:	d113      	bne.n	8001b4e <pedalboard_append+0x176>
        {
            overdrive_sqrt_pedal_init(&(p_pb->pedals[i].config));
 8001b26:	7bbb      	ldrb	r3, [r7, #14]
 8001b28:	22c8      	movs	r2, #200	; 0xc8
 8001b2a:	fb02 f303 	mul.w	r3, r2, r3
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	4413      	add	r3, r2
 8001b32:	3304      	adds	r3, #4
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff fbc7 	bl	80012c8 <overdrive_sqrt_pedal_init>
            p_pb->pedals[i].pedal_process = overdrive_sqrt_process;
 8001b3a:	7bbb      	ldrb	r3, [r7, #14]
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	21c8      	movs	r1, #200	; 0xc8
 8001b40:	fb01 f303 	mul.w	r3, r1, r3
 8001b44:	4413      	add	r3, r2
 8001b46:	33c8      	adds	r3, #200	; 0xc8
 8001b48:	4a21      	ldr	r2, [pc, #132]	; (8001bd0 <pedalboard_append+0x1f8>)
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	e029      	b.n	8001ba2 <pedalboard_append+0x1ca>
        }
        else if (type == TREMOLO)
 8001b4e:	78fb      	ldrb	r3, [r7, #3]
 8001b50:	2b08      	cmp	r3, #8
 8001b52:	d113      	bne.n	8001b7c <pedalboard_append+0x1a4>
        {
            tremolo_pedal_init(&(p_pb->pedals[i].config));
 8001b54:	7bbb      	ldrb	r3, [r7, #14]
 8001b56:	22c8      	movs	r2, #200	; 0xc8
 8001b58:	fb02 f303 	mul.w	r3, r2, r3
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	4413      	add	r3, r2
 8001b60:	3304      	adds	r3, #4
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff fb3a 	bl	80011dc <tremolo_pedal_init>
            p_pb->pedals[i].pedal_process = tremolo_process;
 8001b68:	7bbb      	ldrb	r3, [r7, #14]
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	21c8      	movs	r1, #200	; 0xc8
 8001b6e:	fb01 f303 	mul.w	r3, r1, r3
 8001b72:	4413      	add	r3, r2
 8001b74:	33c8      	adds	r3, #200	; 0xc8
 8001b76:	4a17      	ldr	r2, [pc, #92]	; (8001bd4 <pedalboard_append+0x1fc>)
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	e012      	b.n	8001ba2 <pedalboard_append+0x1ca>
        }
        else
        {
            // BYPASS AS DEFAULT
            bypass_pedal_init(&(p_pb->pedals[i].config));
 8001b7c:	7bbb      	ldrb	r3, [r7, #14]
 8001b7e:	22c8      	movs	r2, #200	; 0xc8
 8001b80:	fb02 f303 	mul.w	r3, r2, r3
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	4413      	add	r3, r2
 8001b88:	3304      	adds	r3, #4
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff fdce 	bl	800172c <bypass_pedal_init>
            p_pb->pedals[i].pedal_process = bypass_process;
 8001b90:	7bbb      	ldrb	r3, [r7, #14]
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	21c8      	movs	r1, #200	; 0xc8
 8001b96:	fb01 f303 	mul.w	r3, r1, r3
 8001b9a:	4413      	add	r3, r2
 8001b9c:	33c8      	adds	r3, #200	; 0xc8
 8001b9e:	4a0e      	ldr	r2, [pc, #56]	; (8001bd8 <pedalboard_append+0x200>)
 8001ba0:	601a      	str	r2, [r3, #0]
        }
        p_pb->active_pedals++;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	b2da      	uxtb	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	701a      	strb	r2, [r3, #0]
    }
}
 8001bae:	bf00      	nop
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	08001409 	.word	0x08001409
 8001bbc:	08001145 	.word	0x08001145
 8001bc0:	08001461 	.word	0x08001461
 8001bc4:	080015f9 	.word	0x080015f9
 8001bc8:	080014dd 	.word	0x080014dd
 8001bcc:	08001071 	.word	0x08001071
 8001bd0:	0800132d 	.word	0x0800132d
 8001bd4:	08001245 	.word	0x08001245
 8001bd8:	08001741 	.word	0x08001741

08001bdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	607b      	str	r3, [r7, #4]
 8001be6:	4b10      	ldr	r3, [pc, #64]	; (8001c28 <HAL_MspInit+0x4c>)
 8001be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bea:	4a0f      	ldr	r2, [pc, #60]	; (8001c28 <HAL_MspInit+0x4c>)
 8001bec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bf2:	4b0d      	ldr	r3, [pc, #52]	; (8001c28 <HAL_MspInit+0x4c>)
 8001bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bfa:	607b      	str	r3, [r7, #4]
 8001bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	603b      	str	r3, [r7, #0]
 8001c02:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <HAL_MspInit+0x4c>)
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c06:	4a08      	ldr	r2, [pc, #32]	; (8001c28 <HAL_MspInit+0x4c>)
 8001c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c0e:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <HAL_MspInit+0x4c>)
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c16:	603b      	str	r3, [r7, #0]
 8001c18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	40023800 	.word	0x40023800

08001c2c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b08a      	sub	sp, #40	; 0x28
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c34:	f107 0314 	add.w	r3, r7, #20
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	60da      	str	r2, [r3, #12]
 8001c42:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a17      	ldr	r2, [pc, #92]	; (8001ca8 <HAL_DAC_MspInit+0x7c>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d127      	bne.n	8001c9e <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	613b      	str	r3, [r7, #16]
 8001c52:	4b16      	ldr	r3, [pc, #88]	; (8001cac <HAL_DAC_MspInit+0x80>)
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	4a15      	ldr	r2, [pc, #84]	; (8001cac <HAL_DAC_MspInit+0x80>)
 8001c58:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c5e:	4b13      	ldr	r3, [pc, #76]	; (8001cac <HAL_DAC_MspInit+0x80>)
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c66:	613b      	str	r3, [r7, #16]
 8001c68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	4b0f      	ldr	r3, [pc, #60]	; (8001cac <HAL_DAC_MspInit+0x80>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	4a0e      	ldr	r2, [pc, #56]	; (8001cac <HAL_DAC_MspInit+0x80>)
 8001c74:	f043 0301 	orr.w	r3, r3, #1
 8001c78:	6313      	str	r3, [r2, #48]	; 0x30
 8001c7a:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <HAL_DAC_MspInit+0x80>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c86:	2310      	movs	r3, #16
 8001c88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c92:	f107 0314 	add.w	r3, r7, #20
 8001c96:	4619      	mov	r1, r3
 8001c98:	4805      	ldr	r0, [pc, #20]	; (8001cb0 <HAL_DAC_MspInit+0x84>)
 8001c9a:	f000 ffd9 	bl	8002c50 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001c9e:	bf00      	nop
 8001ca0:	3728      	adds	r7, #40	; 0x28
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40007400 	.word	0x40007400
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	40020000 	.word	0x40020000

08001cb4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08a      	sub	sp, #40	; 0x28
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cbc:	f107 0314 	add.w	r3, r7, #20
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	60da      	str	r2, [r3, #12]
 8001cca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a19      	ldr	r2, [pc, #100]	; (8001d38 <HAL_I2C_MspInit+0x84>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d12c      	bne.n	8001d30 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	613b      	str	r3, [r7, #16]
 8001cda:	4b18      	ldr	r3, [pc, #96]	; (8001d3c <HAL_I2C_MspInit+0x88>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	4a17      	ldr	r2, [pc, #92]	; (8001d3c <HAL_I2C_MspInit+0x88>)
 8001ce0:	f043 0302 	orr.w	r3, r3, #2
 8001ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce6:	4b15      	ldr	r3, [pc, #84]	; (8001d3c <HAL_I2C_MspInit+0x88>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	613b      	str	r3, [r7, #16]
 8001cf0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001cf2:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001cf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cf8:	2312      	movs	r3, #18
 8001cfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d00:	2303      	movs	r3, #3
 8001d02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d04:	2304      	movs	r3, #4
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d08:	f107 0314 	add.w	r3, r7, #20
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	480c      	ldr	r0, [pc, #48]	; (8001d40 <HAL_I2C_MspInit+0x8c>)
 8001d10:	f000 ff9e 	bl	8002c50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d14:	2300      	movs	r3, #0
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	4b08      	ldr	r3, [pc, #32]	; (8001d3c <HAL_I2C_MspInit+0x88>)
 8001d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1c:	4a07      	ldr	r2, [pc, #28]	; (8001d3c <HAL_I2C_MspInit+0x88>)
 8001d1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d22:	6413      	str	r3, [r2, #64]	; 0x40
 8001d24:	4b05      	ldr	r3, [pc, #20]	; (8001d3c <HAL_I2C_MspInit+0x88>)
 8001d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d2c:	60fb      	str	r3, [r7, #12]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d30:	bf00      	nop
 8001d32:	3728      	adds	r7, #40	; 0x28
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40005400 	.word	0x40005400
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	40020400 	.word	0x40020400

08001d44 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b08e      	sub	sp, #56	; 0x38
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	605a      	str	r2, [r3, #4]
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	60da      	str	r2, [r3, #12]
 8001d5a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a8b      	ldr	r2, [pc, #556]	; (8001f90 <HAL_I2S_MspInit+0x24c>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	f040 8084 	bne.w	8001e70 <HAL_I2S_MspInit+0x12c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001d68:	2300      	movs	r3, #0
 8001d6a:	623b      	str	r3, [r7, #32]
 8001d6c:	4b89      	ldr	r3, [pc, #548]	; (8001f94 <HAL_I2S_MspInit+0x250>)
 8001d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d70:	4a88      	ldr	r2, [pc, #544]	; (8001f94 <HAL_I2S_MspInit+0x250>)
 8001d72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d76:	6413      	str	r3, [r2, #64]	; 0x40
 8001d78:	4b86      	ldr	r3, [pc, #536]	; (8001f94 <HAL_I2S_MspInit+0x250>)
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d80:	623b      	str	r3, [r7, #32]
 8001d82:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d84:	2300      	movs	r3, #0
 8001d86:	61fb      	str	r3, [r7, #28]
 8001d88:	4b82      	ldr	r3, [pc, #520]	; (8001f94 <HAL_I2S_MspInit+0x250>)
 8001d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8c:	4a81      	ldr	r2, [pc, #516]	; (8001f94 <HAL_I2S_MspInit+0x250>)
 8001d8e:	f043 0302 	orr.w	r3, r3, #2
 8001d92:	6313      	str	r3, [r2, #48]	; 0x30
 8001d94:	4b7f      	ldr	r3, [pc, #508]	; (8001f94 <HAL_I2S_MspInit+0x250>)
 8001d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	61fb      	str	r3, [r7, #28]
 8001d9e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001da0:	2300      	movs	r3, #0
 8001da2:	61bb      	str	r3, [r7, #24]
 8001da4:	4b7b      	ldr	r3, [pc, #492]	; (8001f94 <HAL_I2S_MspInit+0x250>)
 8001da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da8:	4a7a      	ldr	r2, [pc, #488]	; (8001f94 <HAL_I2S_MspInit+0x250>)
 8001daa:	f043 0304 	orr.w	r3, r3, #4
 8001dae:	6313      	str	r3, [r2, #48]	; 0x30
 8001db0:	4b78      	ldr	r3, [pc, #480]	; (8001f94 <HAL_I2S_MspInit+0x250>)
 8001db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db4:	f003 0304 	and.w	r3, r3, #4
 8001db8:	61bb      	str	r3, [r7, #24]
 8001dba:	69bb      	ldr	r3, [r7, #24]
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001dbc:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8001dc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001dce:	2305      	movs	r3, #5
 8001dd0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	486f      	ldr	r0, [pc, #444]	; (8001f98 <HAL_I2S_MspInit+0x254>)
 8001dda:	f000 ff39 	bl	8002c50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001dde:	2340      	movs	r3, #64	; 0x40
 8001de0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de2:	2302      	movs	r3, #2
 8001de4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de6:	2300      	movs	r3, #0
 8001de8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001dea:	2301      	movs	r3, #1
 8001dec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001dee:	2305      	movs	r3, #5
 8001df0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001df2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001df6:	4619      	mov	r1, r3
 8001df8:	4868      	ldr	r0, [pc, #416]	; (8001f9c <HAL_I2S_MspInit+0x258>)
 8001dfa:	f000 ff29 	bl	8002c50 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8001dfe:	4b68      	ldr	r3, [pc, #416]	; (8001fa0 <HAL_I2S_MspInit+0x25c>)
 8001e00:	4a68      	ldr	r2, [pc, #416]	; (8001fa4 <HAL_I2S_MspInit+0x260>)
 8001e02:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8001e04:	4b66      	ldr	r3, [pc, #408]	; (8001fa0 <HAL_I2S_MspInit+0x25c>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e0a:	4b65      	ldr	r3, [pc, #404]	; (8001fa0 <HAL_I2S_MspInit+0x25c>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e10:	4b63      	ldr	r3, [pc, #396]	; (8001fa0 <HAL_I2S_MspInit+0x25c>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e16:	4b62      	ldr	r3, [pc, #392]	; (8001fa0 <HAL_I2S_MspInit+0x25c>)
 8001e18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e1c:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e1e:	4b60      	ldr	r3, [pc, #384]	; (8001fa0 <HAL_I2S_MspInit+0x25c>)
 8001e20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e24:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001e26:	4b5e      	ldr	r3, [pc, #376]	; (8001fa0 <HAL_I2S_MspInit+0x25c>)
 8001e28:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e2c:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8001e2e:	4b5c      	ldr	r3, [pc, #368]	; (8001fa0 <HAL_I2S_MspInit+0x25c>)
 8001e30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e34:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e36:	4b5a      	ldr	r3, [pc, #360]	; (8001fa0 <HAL_I2S_MspInit+0x25c>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e3c:	4b58      	ldr	r3, [pc, #352]	; (8001fa0 <HAL_I2S_MspInit+0x25c>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001e42:	4857      	ldr	r0, [pc, #348]	; (8001fa0 <HAL_I2S_MspInit+0x25c>)
 8001e44:	f000 fb94 	bl	8002570 <HAL_DMA_Init>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <HAL_I2S_MspInit+0x10e>
    {
      Error_Handler();
 8001e4e:	f7ff f8c5 	bl	8000fdc <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a52      	ldr	r2, [pc, #328]	; (8001fa0 <HAL_I2S_MspInit+0x25c>)
 8001e56:	63da      	str	r2, [r3, #60]	; 0x3c
 8001e58:	4a51      	ldr	r2, [pc, #324]	; (8001fa0 <HAL_I2S_MspInit+0x25c>)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2S2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001e5e:	2200      	movs	r2, #0
 8001e60:	2100      	movs	r1, #0
 8001e62:	2024      	movs	r0, #36	; 0x24
 8001e64:	f000 fadd 	bl	8002422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001e68:	2024      	movs	r0, #36	; 0x24
 8001e6a:	f000 faf6 	bl	800245a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001e6e:	e08a      	b.n	8001f86 <HAL_I2S_MspInit+0x242>
  else if(hi2s->Instance==SPI3)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a4c      	ldr	r2, [pc, #304]	; (8001fa8 <HAL_I2S_MspInit+0x264>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	f040 8085 	bne.w	8001f86 <HAL_I2S_MspInit+0x242>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	617b      	str	r3, [r7, #20]
 8001e80:	4b44      	ldr	r3, [pc, #272]	; (8001f94 <HAL_I2S_MspInit+0x250>)
 8001e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e84:	4a43      	ldr	r2, [pc, #268]	; (8001f94 <HAL_I2S_MspInit+0x250>)
 8001e86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e8a:	6413      	str	r3, [r2, #64]	; 0x40
 8001e8c:	4b41      	ldr	r3, [pc, #260]	; (8001f94 <HAL_I2S_MspInit+0x250>)
 8001e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e94:	617b      	str	r3, [r7, #20]
 8001e96:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e98:	2300      	movs	r3, #0
 8001e9a:	613b      	str	r3, [r7, #16]
 8001e9c:	4b3d      	ldr	r3, [pc, #244]	; (8001f94 <HAL_I2S_MspInit+0x250>)
 8001e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea0:	4a3c      	ldr	r2, [pc, #240]	; (8001f94 <HAL_I2S_MspInit+0x250>)
 8001ea2:	f043 0304 	orr.w	r3, r3, #4
 8001ea6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea8:	4b3a      	ldr	r3, [pc, #232]	; (8001f94 <HAL_I2S_MspInit+0x250>)
 8001eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eac:	f003 0304 	and.w	r3, r3, #4
 8001eb0:	613b      	str	r3, [r7, #16]
 8001eb2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	4b36      	ldr	r3, [pc, #216]	; (8001f94 <HAL_I2S_MspInit+0x250>)
 8001eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebc:	4a35      	ldr	r2, [pc, #212]	; (8001f94 <HAL_I2S_MspInit+0x250>)
 8001ebe:	f043 0301 	orr.w	r3, r3, #1
 8001ec2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec4:	4b33      	ldr	r3, [pc, #204]	; (8001f94 <HAL_I2S_MspInit+0x250>)
 8001ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8001ed0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001ed4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eda:	2300      	movs	r3, #0
 8001edc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ee2:	2306      	movs	r3, #6
 8001ee4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ee6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eea:	4619      	mov	r1, r3
 8001eec:	482b      	ldr	r0, [pc, #172]	; (8001f9c <HAL_I2S_MspInit+0x258>)
 8001eee:	f000 feaf 	bl	8002c50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001ef2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ef6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef8:	2302      	movs	r3, #2
 8001efa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efc:	2300      	movs	r3, #0
 8001efe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f00:	2300      	movs	r3, #0
 8001f02:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001f04:	2306      	movs	r3, #6
 8001f06:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4827      	ldr	r0, [pc, #156]	; (8001fac <HAL_I2S_MspInit+0x268>)
 8001f10:	f000 fe9e 	bl	8002c50 <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001f14:	4b26      	ldr	r3, [pc, #152]	; (8001fb0 <HAL_I2S_MspInit+0x26c>)
 8001f16:	4a27      	ldr	r2, [pc, #156]	; (8001fb4 <HAL_I2S_MspInit+0x270>)
 8001f18:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8001f1a:	4b25      	ldr	r3, [pc, #148]	; (8001fb0 <HAL_I2S_MspInit+0x26c>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f20:	4b23      	ldr	r3, [pc, #140]	; (8001fb0 <HAL_I2S_MspInit+0x26c>)
 8001f22:	2240      	movs	r2, #64	; 0x40
 8001f24:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f26:	4b22      	ldr	r3, [pc, #136]	; (8001fb0 <HAL_I2S_MspInit+0x26c>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f2c:	4b20      	ldr	r3, [pc, #128]	; (8001fb0 <HAL_I2S_MspInit+0x26c>)
 8001f2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f32:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f34:	4b1e      	ldr	r3, [pc, #120]	; (8001fb0 <HAL_I2S_MspInit+0x26c>)
 8001f36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f3a:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f3c:	4b1c      	ldr	r3, [pc, #112]	; (8001fb0 <HAL_I2S_MspInit+0x26c>)
 8001f3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f42:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8001f44:	4b1a      	ldr	r3, [pc, #104]	; (8001fb0 <HAL_I2S_MspInit+0x26c>)
 8001f46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f4a:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f4c:	4b18      	ldr	r3, [pc, #96]	; (8001fb0 <HAL_I2S_MspInit+0x26c>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001f52:	4b17      	ldr	r3, [pc, #92]	; (8001fb0 <HAL_I2S_MspInit+0x26c>)
 8001f54:	2204      	movs	r2, #4
 8001f56:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001f58:	4b15      	ldr	r3, [pc, #84]	; (8001fb0 <HAL_I2S_MspInit+0x26c>)
 8001f5a:	2203      	movs	r2, #3
 8001f5c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001f5e:	4b14      	ldr	r3, [pc, #80]	; (8001fb0 <HAL_I2S_MspInit+0x26c>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001f64:	4b12      	ldr	r3, [pc, #72]	; (8001fb0 <HAL_I2S_MspInit+0x26c>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001f6a:	4811      	ldr	r0, [pc, #68]	; (8001fb0 <HAL_I2S_MspInit+0x26c>)
 8001f6c:	f000 fb00 	bl	8002570 <HAL_DMA_Init>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <HAL_I2S_MspInit+0x236>
      Error_Handler();
 8001f76:	f7ff f831 	bl	8000fdc <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a0c      	ldr	r2, [pc, #48]	; (8001fb0 <HAL_I2S_MspInit+0x26c>)
 8001f7e:	639a      	str	r2, [r3, #56]	; 0x38
 8001f80:	4a0b      	ldr	r2, [pc, #44]	; (8001fb0 <HAL_I2S_MspInit+0x26c>)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001f86:	bf00      	nop
 8001f88:	3738      	adds	r7, #56	; 0x38
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	40003800 	.word	0x40003800
 8001f94:	40023800 	.word	0x40023800
 8001f98:	40020400 	.word	0x40020400
 8001f9c:	40020800 	.word	0x40020800
 8001fa0:	2000017c 	.word	0x2000017c
 8001fa4:	40026058 	.word	0x40026058
 8001fa8:	40003c00 	.word	0x40003c00
 8001fac:	40020000 	.word	0x40020000
 8001fb0:	200001dc 	.word	0x200001dc
 8001fb4:	40026088 	.word	0x40026088

08001fb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fbc:	e7fe      	b.n	8001fbc <NMI_Handler+0x4>

08001fbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fc2:	e7fe      	b.n	8001fc2 <HardFault_Handler+0x4>

08001fc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fc8:	e7fe      	b.n	8001fc8 <MemManage_Handler+0x4>

08001fca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fce:	e7fe      	b.n	8001fce <BusFault_Handler+0x4>

08001fd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fd4:	e7fe      	b.n	8001fd4 <UsageFault_Handler+0x4>

08001fd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fda:	bf00      	nop
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fe8:	bf00      	nop
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ff6:	bf00      	nop
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002004:	f000 f8ee 	bl	80021e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002008:	bf00      	nop
 800200a:	bd80      	pop	{r7, pc}

0800200c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8002010:	4802      	ldr	r0, [pc, #8]	; (800201c <DMA1_Stream3_IRQHandler+0x10>)
 8002012:	f000 fbb3 	bl	800277c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002016:	bf00      	nop
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	2000017c 	.word	0x2000017c

08002020 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8002024:	4802      	ldr	r0, [pc, #8]	; (8002030 <DMA1_Stream5_IRQHandler+0x10>)
 8002026:	f000 fba9 	bl	800277c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800202a:	bf00      	nop
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	200001dc 	.word	0x200001dc

08002034 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 8002038:	4802      	ldr	r0, [pc, #8]	; (8002044 <SPI2_IRQHandler+0x10>)
 800203a:	f003 ff81 	bl	8005f40 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800203e:	bf00      	nop
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20001304 	.word	0x20001304

08002048 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800204c:	4802      	ldr	r0, [pc, #8]	; (8002058 <OTG_FS_IRQHandler+0x10>)
 800204e:	f001 fa37 	bl	80034c0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002052:	bf00      	nop
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	200037dc 	.word	0x200037dc

0800205c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002064:	4a14      	ldr	r2, [pc, #80]	; (80020b8 <_sbrk+0x5c>)
 8002066:	4b15      	ldr	r3, [pc, #84]	; (80020bc <_sbrk+0x60>)
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002070:	4b13      	ldr	r3, [pc, #76]	; (80020c0 <_sbrk+0x64>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d102      	bne.n	800207e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002078:	4b11      	ldr	r3, [pc, #68]	; (80020c0 <_sbrk+0x64>)
 800207a:	4a12      	ldr	r2, [pc, #72]	; (80020c4 <_sbrk+0x68>)
 800207c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800207e:	4b10      	ldr	r3, [pc, #64]	; (80020c0 <_sbrk+0x64>)
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4413      	add	r3, r2
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	429a      	cmp	r2, r3
 800208a:	d207      	bcs.n	800209c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800208c:	f009 fc3a 	bl	800b904 <__errno>
 8002090:	4603      	mov	r3, r0
 8002092:	220c      	movs	r2, #12
 8002094:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002096:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800209a:	e009      	b.n	80020b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800209c:	4b08      	ldr	r3, [pc, #32]	; (80020c0 <_sbrk+0x64>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020a2:	4b07      	ldr	r3, [pc, #28]	; (80020c0 <_sbrk+0x64>)
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4413      	add	r3, r2
 80020aa:	4a05      	ldr	r2, [pc, #20]	; (80020c0 <_sbrk+0x64>)
 80020ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020ae:	68fb      	ldr	r3, [r7, #12]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3718      	adds	r7, #24
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	20020000 	.word	0x20020000
 80020bc:	00000400 	.word	0x00000400
 80020c0:	20000104 	.word	0x20000104
 80020c4:	20003af0 	.word	0x20003af0

080020c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020cc:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <SystemInit+0x20>)
 80020ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020d2:	4a05      	ldr	r2, [pc, #20]	; (80020e8 <SystemInit+0x20>)
 80020d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020dc:	bf00      	nop
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	e000ed00 	.word	0xe000ed00

080020ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80020ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002124 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020f0:	480d      	ldr	r0, [pc, #52]	; (8002128 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020f2:	490e      	ldr	r1, [pc, #56]	; (800212c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020f4:	4a0e      	ldr	r2, [pc, #56]	; (8002130 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020f8:	e002      	b.n	8002100 <LoopCopyDataInit>

080020fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020fe:	3304      	adds	r3, #4

08002100 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002100:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002102:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002104:	d3f9      	bcc.n	80020fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002106:	4a0b      	ldr	r2, [pc, #44]	; (8002134 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002108:	4c0b      	ldr	r4, [pc, #44]	; (8002138 <LoopFillZerobss+0x26>)
  movs r3, #0
 800210a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800210c:	e001      	b.n	8002112 <LoopFillZerobss>

0800210e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800210e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002110:	3204      	adds	r2, #4

08002112 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002112:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002114:	d3fb      	bcc.n	800210e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002116:	f7ff ffd7 	bl	80020c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800211a:	f009 fbf9 	bl	800b910 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800211e:	f7fe fc8b 	bl	8000a38 <main>
  bx  lr    
 8002122:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002124:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002128:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800212c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8002130:	0800bea4 	.word	0x0800bea4
  ldr r2, =_sbss
 8002134:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002138:	20003af0 	.word	0x20003af0

0800213c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800213c:	e7fe      	b.n	800213c <ADC_IRQHandler>
	...

08002140 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002144:	4b0e      	ldr	r3, [pc, #56]	; (8002180 <HAL_Init+0x40>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a0d      	ldr	r2, [pc, #52]	; (8002180 <HAL_Init+0x40>)
 800214a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800214e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002150:	4b0b      	ldr	r3, [pc, #44]	; (8002180 <HAL_Init+0x40>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a0a      	ldr	r2, [pc, #40]	; (8002180 <HAL_Init+0x40>)
 8002156:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800215a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800215c:	4b08      	ldr	r3, [pc, #32]	; (8002180 <HAL_Init+0x40>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a07      	ldr	r2, [pc, #28]	; (8002180 <HAL_Init+0x40>)
 8002162:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002166:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002168:	2003      	movs	r0, #3
 800216a:	f000 f94f 	bl	800240c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800216e:	200f      	movs	r0, #15
 8002170:	f000 f808 	bl	8002184 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002174:	f7ff fd32 	bl	8001bdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	40023c00 	.word	0x40023c00

08002184 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800218c:	4b12      	ldr	r3, [pc, #72]	; (80021d8 <HAL_InitTick+0x54>)
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	4b12      	ldr	r3, [pc, #72]	; (80021dc <HAL_InitTick+0x58>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	4619      	mov	r1, r3
 8002196:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800219a:	fbb3 f3f1 	udiv	r3, r3, r1
 800219e:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a2:	4618      	mov	r0, r3
 80021a4:	f000 f967 	bl	8002476 <HAL_SYSTICK_Config>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e00e      	b.n	80021d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2b0f      	cmp	r3, #15
 80021b6:	d80a      	bhi.n	80021ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021b8:	2200      	movs	r2, #0
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021c0:	f000 f92f 	bl	8002422 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021c4:	4a06      	ldr	r2, [pc, #24]	; (80021e0 <HAL_InitTick+0x5c>)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021ca:	2300      	movs	r3, #0
 80021cc:	e000      	b.n	80021d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3708      	adds	r7, #8
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	20000000 	.word	0x20000000
 80021dc:	20000008 	.word	0x20000008
 80021e0:	20000004 	.word	0x20000004

080021e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021e8:	4b06      	ldr	r3, [pc, #24]	; (8002204 <HAL_IncTick+0x20>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	461a      	mov	r2, r3
 80021ee:	4b06      	ldr	r3, [pc, #24]	; (8002208 <HAL_IncTick+0x24>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4413      	add	r3, r2
 80021f4:	4a04      	ldr	r2, [pc, #16]	; (8002208 <HAL_IncTick+0x24>)
 80021f6:	6013      	str	r3, [r2, #0]
}
 80021f8:	bf00      	nop
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	20000008 	.word	0x20000008
 8002208:	20001394 	.word	0x20001394

0800220c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  return uwTick;
 8002210:	4b03      	ldr	r3, [pc, #12]	; (8002220 <HAL_GetTick+0x14>)
 8002212:	681b      	ldr	r3, [r3, #0]
}
 8002214:	4618      	mov	r0, r3
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	20001394 	.word	0x20001394

08002224 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800222c:	f7ff ffee 	bl	800220c <HAL_GetTick>
 8002230:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800223c:	d005      	beq.n	800224a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800223e:	4b0a      	ldr	r3, [pc, #40]	; (8002268 <HAL_Delay+0x44>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	461a      	mov	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	4413      	add	r3, r2
 8002248:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800224a:	bf00      	nop
 800224c:	f7ff ffde 	bl	800220c <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	429a      	cmp	r2, r3
 800225a:	d8f7      	bhi.n	800224c <HAL_Delay+0x28>
  {
  }
}
 800225c:	bf00      	nop
 800225e:	bf00      	nop
 8002260:	3710      	adds	r7, #16
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	20000008 	.word	0x20000008

0800226c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800227c:	4b0c      	ldr	r3, [pc, #48]	; (80022b0 <__NVIC_SetPriorityGrouping+0x44>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002282:	68ba      	ldr	r2, [r7, #8]
 8002284:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002288:	4013      	ands	r3, r2
 800228a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002294:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002298:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800229c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800229e:	4a04      	ldr	r2, [pc, #16]	; (80022b0 <__NVIC_SetPriorityGrouping+0x44>)
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	60d3      	str	r3, [r2, #12]
}
 80022a4:	bf00      	nop
 80022a6:	3714      	adds	r7, #20
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	e000ed00 	.word	0xe000ed00

080022b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022b8:	4b04      	ldr	r3, [pc, #16]	; (80022cc <__NVIC_GetPriorityGrouping+0x18>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	0a1b      	lsrs	r3, r3, #8
 80022be:	f003 0307 	and.w	r3, r3, #7
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	e000ed00 	.word	0xe000ed00

080022d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	db0b      	blt.n	80022fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022e2:	79fb      	ldrb	r3, [r7, #7]
 80022e4:	f003 021f 	and.w	r2, r3, #31
 80022e8:	4907      	ldr	r1, [pc, #28]	; (8002308 <__NVIC_EnableIRQ+0x38>)
 80022ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ee:	095b      	lsrs	r3, r3, #5
 80022f0:	2001      	movs	r0, #1
 80022f2:	fa00 f202 	lsl.w	r2, r0, r2
 80022f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	e000e100 	.word	0xe000e100

0800230c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	6039      	str	r1, [r7, #0]
 8002316:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231c:	2b00      	cmp	r3, #0
 800231e:	db0a      	blt.n	8002336 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	b2da      	uxtb	r2, r3
 8002324:	490c      	ldr	r1, [pc, #48]	; (8002358 <__NVIC_SetPriority+0x4c>)
 8002326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232a:	0112      	lsls	r2, r2, #4
 800232c:	b2d2      	uxtb	r2, r2
 800232e:	440b      	add	r3, r1
 8002330:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002334:	e00a      	b.n	800234c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	b2da      	uxtb	r2, r3
 800233a:	4908      	ldr	r1, [pc, #32]	; (800235c <__NVIC_SetPriority+0x50>)
 800233c:	79fb      	ldrb	r3, [r7, #7]
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	3b04      	subs	r3, #4
 8002344:	0112      	lsls	r2, r2, #4
 8002346:	b2d2      	uxtb	r2, r2
 8002348:	440b      	add	r3, r1
 800234a:	761a      	strb	r2, [r3, #24]
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	e000e100 	.word	0xe000e100
 800235c:	e000ed00 	.word	0xe000ed00

08002360 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002360:	b480      	push	{r7}
 8002362:	b089      	sub	sp, #36	; 0x24
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	f1c3 0307 	rsb	r3, r3, #7
 800237a:	2b04      	cmp	r3, #4
 800237c:	bf28      	it	cs
 800237e:	2304      	movcs	r3, #4
 8002380:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	3304      	adds	r3, #4
 8002386:	2b06      	cmp	r3, #6
 8002388:	d902      	bls.n	8002390 <NVIC_EncodePriority+0x30>
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	3b03      	subs	r3, #3
 800238e:	e000      	b.n	8002392 <NVIC_EncodePriority+0x32>
 8002390:	2300      	movs	r3, #0
 8002392:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002394:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	43da      	mvns	r2, r3
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	401a      	ands	r2, r3
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	fa01 f303 	lsl.w	r3, r1, r3
 80023b2:	43d9      	mvns	r1, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b8:	4313      	orrs	r3, r2
         );
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3724      	adds	r7, #36	; 0x24
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
	...

080023c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3b01      	subs	r3, #1
 80023d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023d8:	d301      	bcc.n	80023de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023da:	2301      	movs	r3, #1
 80023dc:	e00f      	b.n	80023fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023de:	4a0a      	ldr	r2, [pc, #40]	; (8002408 <SysTick_Config+0x40>)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	3b01      	subs	r3, #1
 80023e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023e6:	210f      	movs	r1, #15
 80023e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023ec:	f7ff ff8e 	bl	800230c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023f0:	4b05      	ldr	r3, [pc, #20]	; (8002408 <SysTick_Config+0x40>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023f6:	4b04      	ldr	r3, [pc, #16]	; (8002408 <SysTick_Config+0x40>)
 80023f8:	2207      	movs	r2, #7
 80023fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	e000e010 	.word	0xe000e010

0800240c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f7ff ff29 	bl	800226c <__NVIC_SetPriorityGrouping>
}
 800241a:	bf00      	nop
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002422:	b580      	push	{r7, lr}
 8002424:	b086      	sub	sp, #24
 8002426:	af00      	add	r7, sp, #0
 8002428:	4603      	mov	r3, r0
 800242a:	60b9      	str	r1, [r7, #8]
 800242c:	607a      	str	r2, [r7, #4]
 800242e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002430:	2300      	movs	r3, #0
 8002432:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002434:	f7ff ff3e 	bl	80022b4 <__NVIC_GetPriorityGrouping>
 8002438:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	68b9      	ldr	r1, [r7, #8]
 800243e:	6978      	ldr	r0, [r7, #20]
 8002440:	f7ff ff8e 	bl	8002360 <NVIC_EncodePriority>
 8002444:	4602      	mov	r2, r0
 8002446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800244a:	4611      	mov	r1, r2
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff ff5d 	bl	800230c <__NVIC_SetPriority>
}
 8002452:	bf00      	nop
 8002454:	3718      	adds	r7, #24
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b082      	sub	sp, #8
 800245e:	af00      	add	r7, sp, #0
 8002460:	4603      	mov	r3, r0
 8002462:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff ff31 	bl	80022d0 <__NVIC_EnableIRQ>
}
 800246e:	bf00      	nop
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b082      	sub	sp, #8
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f7ff ffa2 	bl	80023c8 <SysTick_Config>
 8002484:	4603      	mov	r3, r0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b082      	sub	sp, #8
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d101      	bne.n	80024a0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e014      	b.n	80024ca <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	791b      	ldrb	r3, [r3, #4]
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d105      	bne.n	80024b6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f7ff fbbb 	bl	8001c2c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2202      	movs	r2, #2
 80024ba:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2201      	movs	r2, #1
 80024c6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80024d2:	b480      	push	{r7}
 80024d4:	b087      	sub	sp, #28
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	60f8      	str	r0, [r7, #12]
 80024da:	60b9      	str	r1, [r7, #8]
 80024dc:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	795b      	ldrb	r3, [r3, #5]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d101      	bne.n	80024ea <HAL_DAC_ConfigChannel+0x18>
 80024e6:	2302      	movs	r3, #2
 80024e8:	e03c      	b.n	8002564 <HAL_DAC_ConfigChannel+0x92>
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2201      	movs	r2, #1
 80024ee:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2202      	movs	r2, #2
 80024f4:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f003 0310 	and.w	r3, r3, #16
 8002504:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	43db      	mvns	r3, r3
 800250e:	697a      	ldr	r2, [r7, #20]
 8002510:	4013      	ands	r3, r2
 8002512:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	4313      	orrs	r3, r2
 800251e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f003 0310 	and.w	r3, r3, #16
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	697a      	ldr	r2, [r7, #20]
 800252e:	4313      	orrs	r3, r2
 8002530:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	6819      	ldr	r1, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f003 0310 	and.w	r3, r3, #16
 8002546:	22c0      	movs	r2, #192	; 0xc0
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	43da      	mvns	r2, r3
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	400a      	ands	r2, r1
 8002554:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2201      	movs	r2, #1
 800255a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2200      	movs	r2, #0
 8002560:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	371c      	adds	r7, #28
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002578:	2300      	movs	r3, #0
 800257a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800257c:	f7ff fe46 	bl	800220c <HAL_GetTick>
 8002580:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d101      	bne.n	800258c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e099      	b.n	80026c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2202      	movs	r2, #2
 8002590:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f022 0201 	bic.w	r2, r2, #1
 80025aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025ac:	e00f      	b.n	80025ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025ae:	f7ff fe2d 	bl	800220c <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b05      	cmp	r3, #5
 80025ba:	d908      	bls.n	80025ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2220      	movs	r2, #32
 80025c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2203      	movs	r2, #3
 80025c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e078      	b.n	80026c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1e8      	bne.n	80025ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025e4:	697a      	ldr	r2, [r7, #20]
 80025e6:	4b38      	ldr	r3, [pc, #224]	; (80026c8 <HAL_DMA_Init+0x158>)
 80025e8:	4013      	ands	r3, r2
 80025ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685a      	ldr	r2, [r3, #4]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002606:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002612:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	4313      	orrs	r3, r2
 800261e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002624:	2b04      	cmp	r3, #4
 8002626:	d107      	bne.n	8002638 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002630:	4313      	orrs	r3, r2
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	4313      	orrs	r3, r2
 8002636:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	697a      	ldr	r2, [r7, #20]
 800263e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	f023 0307 	bic.w	r3, r3, #7
 800264e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	4313      	orrs	r3, r2
 8002658:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265e:	2b04      	cmp	r3, #4
 8002660:	d117      	bne.n	8002692 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	4313      	orrs	r3, r2
 800266a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00e      	beq.n	8002692 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 fa6f 	bl	8002b58 <DMA_CheckFifoParam>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d008      	beq.n	8002692 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2240      	movs	r2, #64	; 0x40
 8002684:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2201      	movs	r2, #1
 800268a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800268e:	2301      	movs	r3, #1
 8002690:	e016      	b.n	80026c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 fa26 	bl	8002aec <DMA_CalcBaseAndBitshift>
 80026a0:	4603      	mov	r3, r0
 80026a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a8:	223f      	movs	r2, #63	; 0x3f
 80026aa:	409a      	lsls	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2201      	movs	r2, #1
 80026ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3718      	adds	r7, #24
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	f010803f 	.word	0xf010803f

080026cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
 80026d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026da:	2300      	movs	r3, #0
 80026dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d101      	bne.n	80026f2 <HAL_DMA_Start_IT+0x26>
 80026ee:	2302      	movs	r3, #2
 80026f0:	e040      	b.n	8002774 <HAL_DMA_Start_IT+0xa8>
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2201      	movs	r2, #1
 80026f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2b01      	cmp	r3, #1
 8002704:	d12f      	bne.n	8002766 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2202      	movs	r2, #2
 800270a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2200      	movs	r2, #0
 8002712:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	68b9      	ldr	r1, [r7, #8]
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	f000 f9b8 	bl	8002a90 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002724:	223f      	movs	r2, #63	; 0x3f
 8002726:	409a      	lsls	r2, r3
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f042 0216 	orr.w	r2, r2, #22
 800273a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002740:	2b00      	cmp	r3, #0
 8002742:	d007      	beq.n	8002754 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f042 0208 	orr.w	r2, r2, #8
 8002752:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f042 0201 	orr.w	r2, r2, #1
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	e005      	b.n	8002772 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800276e:	2302      	movs	r3, #2
 8002770:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002772:	7dfb      	ldrb	r3, [r7, #23]
}
 8002774:	4618      	mov	r0, r3
 8002776:	3718      	adds	r7, #24
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002784:	2300      	movs	r3, #0
 8002786:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002788:	4b92      	ldr	r3, [pc, #584]	; (80029d4 <HAL_DMA_IRQHandler+0x258>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a92      	ldr	r2, [pc, #584]	; (80029d8 <HAL_DMA_IRQHandler+0x25c>)
 800278e:	fba2 2303 	umull	r2, r3, r2, r3
 8002792:	0a9b      	lsrs	r3, r3, #10
 8002794:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800279a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a6:	2208      	movs	r2, #8
 80027a8:	409a      	lsls	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	4013      	ands	r3, r2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d01a      	beq.n	80027e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0304 	and.w	r3, r3, #4
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d013      	beq.n	80027e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f022 0204 	bic.w	r2, r2, #4
 80027ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d4:	2208      	movs	r2, #8
 80027d6:	409a      	lsls	r2, r3
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e0:	f043 0201 	orr.w	r2, r3, #1
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ec:	2201      	movs	r2, #1
 80027ee:	409a      	lsls	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	4013      	ands	r3, r2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d012      	beq.n	800281e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00b      	beq.n	800281e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800280a:	2201      	movs	r2, #1
 800280c:	409a      	lsls	r2, r3
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002816:	f043 0202 	orr.w	r2, r3, #2
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002822:	2204      	movs	r2, #4
 8002824:	409a      	lsls	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	4013      	ands	r3, r2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d012      	beq.n	8002854 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00b      	beq.n	8002854 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002840:	2204      	movs	r2, #4
 8002842:	409a      	lsls	r2, r3
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800284c:	f043 0204 	orr.w	r2, r3, #4
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002858:	2210      	movs	r2, #16
 800285a:	409a      	lsls	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	4013      	ands	r3, r2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d043      	beq.n	80028ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0308 	and.w	r3, r3, #8
 800286e:	2b00      	cmp	r3, #0
 8002870:	d03c      	beq.n	80028ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002876:	2210      	movs	r2, #16
 8002878:	409a      	lsls	r2, r3
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d018      	beq.n	80028be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d108      	bne.n	80028ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d024      	beq.n	80028ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	4798      	blx	r3
 80028aa:	e01f      	b.n	80028ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d01b      	beq.n	80028ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	4798      	blx	r3
 80028bc:	e016      	b.n	80028ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d107      	bne.n	80028dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f022 0208 	bic.w	r2, r2, #8
 80028da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d003      	beq.n	80028ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f0:	2220      	movs	r2, #32
 80028f2:	409a      	lsls	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	4013      	ands	r3, r2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f000 808e 	beq.w	8002a1a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0310 	and.w	r3, r3, #16
 8002908:	2b00      	cmp	r3, #0
 800290a:	f000 8086 	beq.w	8002a1a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002912:	2220      	movs	r2, #32
 8002914:	409a      	lsls	r2, r3
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b05      	cmp	r3, #5
 8002924:	d136      	bne.n	8002994 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f022 0216 	bic.w	r2, r2, #22
 8002934:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	695a      	ldr	r2, [r3, #20]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002944:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	2b00      	cmp	r3, #0
 800294c:	d103      	bne.n	8002956 <HAL_DMA_IRQHandler+0x1da>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002952:	2b00      	cmp	r3, #0
 8002954:	d007      	beq.n	8002966 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 0208 	bic.w	r2, r2, #8
 8002964:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800296a:	223f      	movs	r2, #63	; 0x3f
 800296c:	409a      	lsls	r2, r3
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2201      	movs	r2, #1
 8002976:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002986:	2b00      	cmp	r3, #0
 8002988:	d07d      	beq.n	8002a86 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	4798      	blx	r3
        }
        return;
 8002992:	e078      	b.n	8002a86 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d01c      	beq.n	80029dc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d108      	bne.n	80029c2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d030      	beq.n	8002a1a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	4798      	blx	r3
 80029c0:	e02b      	b.n	8002a1a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d027      	beq.n	8002a1a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	4798      	blx	r3
 80029d2:	e022      	b.n	8002a1a <HAL_DMA_IRQHandler+0x29e>
 80029d4:	20000000 	.word	0x20000000
 80029d8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d10f      	bne.n	8002a0a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 0210 	bic.w	r2, r2, #16
 80029f8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2201      	movs	r2, #1
 80029fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d003      	beq.n	8002a1a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d032      	beq.n	8002a88 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d022      	beq.n	8002a74 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2205      	movs	r2, #5
 8002a32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 0201 	bic.w	r2, r2, #1
 8002a44:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	60bb      	str	r3, [r7, #8]
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d307      	bcc.n	8002a62 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0301 	and.w	r3, r3, #1
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1f2      	bne.n	8002a46 <HAL_DMA_IRQHandler+0x2ca>
 8002a60:	e000      	b.n	8002a64 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002a62:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d005      	beq.n	8002a88 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	4798      	blx	r3
 8002a84:	e000      	b.n	8002a88 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002a86:	bf00      	nop
    }
  }
}
 8002a88:	3718      	adds	r7, #24
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop

08002a90 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
 8002a9c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002aac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	683a      	ldr	r2, [r7, #0]
 8002ab4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	2b40      	cmp	r3, #64	; 0x40
 8002abc:	d108      	bne.n	8002ad0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68ba      	ldr	r2, [r7, #8]
 8002acc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002ace:	e007      	b.n	8002ae0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68ba      	ldr	r2, [r7, #8]
 8002ad6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	60da      	str	r2, [r3, #12]
}
 8002ae0:	bf00      	nop
 8002ae2:	3714      	adds	r7, #20
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	3b10      	subs	r3, #16
 8002afc:	4a14      	ldr	r2, [pc, #80]	; (8002b50 <DMA_CalcBaseAndBitshift+0x64>)
 8002afe:	fba2 2303 	umull	r2, r3, r2, r3
 8002b02:	091b      	lsrs	r3, r3, #4
 8002b04:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b06:	4a13      	ldr	r2, [pc, #76]	; (8002b54 <DMA_CalcBaseAndBitshift+0x68>)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	461a      	mov	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2b03      	cmp	r3, #3
 8002b18:	d909      	bls.n	8002b2e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b22:	f023 0303 	bic.w	r3, r3, #3
 8002b26:	1d1a      	adds	r2, r3, #4
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	659a      	str	r2, [r3, #88]	; 0x58
 8002b2c:	e007      	b.n	8002b3e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b36:	f023 0303 	bic.w	r3, r3, #3
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3714      	adds	r7, #20
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	aaaaaaab 	.word	0xaaaaaaab
 8002b54:	0800be78 	.word	0x0800be78

08002b58 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b60:	2300      	movs	r3, #0
 8002b62:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b68:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d11f      	bne.n	8002bb2 <DMA_CheckFifoParam+0x5a>
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	2b03      	cmp	r3, #3
 8002b76:	d856      	bhi.n	8002c26 <DMA_CheckFifoParam+0xce>
 8002b78:	a201      	add	r2, pc, #4	; (adr r2, 8002b80 <DMA_CheckFifoParam+0x28>)
 8002b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b7e:	bf00      	nop
 8002b80:	08002b91 	.word	0x08002b91
 8002b84:	08002ba3 	.word	0x08002ba3
 8002b88:	08002b91 	.word	0x08002b91
 8002b8c:	08002c27 	.word	0x08002c27
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d046      	beq.n	8002c2a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ba0:	e043      	b.n	8002c2a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002baa:	d140      	bne.n	8002c2e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bb0:	e03d      	b.n	8002c2e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bba:	d121      	bne.n	8002c00 <DMA_CheckFifoParam+0xa8>
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	2b03      	cmp	r3, #3
 8002bc0:	d837      	bhi.n	8002c32 <DMA_CheckFifoParam+0xda>
 8002bc2:	a201      	add	r2, pc, #4	; (adr r2, 8002bc8 <DMA_CheckFifoParam+0x70>)
 8002bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc8:	08002bd9 	.word	0x08002bd9
 8002bcc:	08002bdf 	.word	0x08002bdf
 8002bd0:	08002bd9 	.word	0x08002bd9
 8002bd4:	08002bf1 	.word	0x08002bf1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	73fb      	strb	r3, [r7, #15]
      break;
 8002bdc:	e030      	b.n	8002c40 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d025      	beq.n	8002c36 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bee:	e022      	b.n	8002c36 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002bf8:	d11f      	bne.n	8002c3a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002bfe:	e01c      	b.n	8002c3a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d903      	bls.n	8002c0e <DMA_CheckFifoParam+0xb6>
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	2b03      	cmp	r3, #3
 8002c0a:	d003      	beq.n	8002c14 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c0c:	e018      	b.n	8002c40 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	73fb      	strb	r3, [r7, #15]
      break;
 8002c12:	e015      	b.n	8002c40 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d00e      	beq.n	8002c3e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	73fb      	strb	r3, [r7, #15]
      break;
 8002c24:	e00b      	b.n	8002c3e <DMA_CheckFifoParam+0xe6>
      break;
 8002c26:	bf00      	nop
 8002c28:	e00a      	b.n	8002c40 <DMA_CheckFifoParam+0xe8>
      break;
 8002c2a:	bf00      	nop
 8002c2c:	e008      	b.n	8002c40 <DMA_CheckFifoParam+0xe8>
      break;
 8002c2e:	bf00      	nop
 8002c30:	e006      	b.n	8002c40 <DMA_CheckFifoParam+0xe8>
      break;
 8002c32:	bf00      	nop
 8002c34:	e004      	b.n	8002c40 <DMA_CheckFifoParam+0xe8>
      break;
 8002c36:	bf00      	nop
 8002c38:	e002      	b.n	8002c40 <DMA_CheckFifoParam+0xe8>
      break;   
 8002c3a:	bf00      	nop
 8002c3c:	e000      	b.n	8002c40 <DMA_CheckFifoParam+0xe8>
      break;
 8002c3e:	bf00      	nop
    }
  } 
  
  return status; 
 8002c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3714      	adds	r7, #20
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop

08002c50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b089      	sub	sp, #36	; 0x24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c62:	2300      	movs	r3, #0
 8002c64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c66:	2300      	movs	r3, #0
 8002c68:	61fb      	str	r3, [r7, #28]
 8002c6a:	e16b      	b.n	8002f44 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	697a      	ldr	r2, [r7, #20]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	f040 815a 	bne.w	8002f3e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f003 0303 	and.w	r3, r3, #3
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d005      	beq.n	8002ca2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d130      	bne.n	8002d04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	2203      	movs	r2, #3
 8002cae:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb2:	43db      	mvns	r3, r3
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	68da      	ldr	r2, [r3, #12]
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cd8:	2201      	movs	r2, #1
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	091b      	lsrs	r3, r3, #4
 8002cee:	f003 0201 	and.w	r2, r3, #1
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f003 0303 	and.w	r3, r3, #3
 8002d0c:	2b03      	cmp	r3, #3
 8002d0e:	d017      	beq.n	8002d40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	2203      	movs	r2, #3
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	43db      	mvns	r3, r3
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	4013      	ands	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	689a      	ldr	r2, [r3, #8]
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f003 0303 	and.w	r3, r3, #3
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d123      	bne.n	8002d94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	08da      	lsrs	r2, r3, #3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	3208      	adds	r2, #8
 8002d54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	f003 0307 	and.w	r3, r3, #7
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	220f      	movs	r2, #15
 8002d64:	fa02 f303 	lsl.w	r3, r2, r3
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	691a      	ldr	r2, [r3, #16]
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	f003 0307 	and.w	r3, r3, #7
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	08da      	lsrs	r2, r3, #3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	3208      	adds	r2, #8
 8002d8e:	69b9      	ldr	r1, [r7, #24]
 8002d90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	2203      	movs	r2, #3
 8002da0:	fa02 f303 	lsl.w	r3, r2, r3
 8002da4:	43db      	mvns	r3, r3
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	4013      	ands	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f003 0203 	and.w	r2, r3, #3
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	005b      	lsls	r3, r3, #1
 8002db8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f000 80b4 	beq.w	8002f3e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	60fb      	str	r3, [r7, #12]
 8002dda:	4b60      	ldr	r3, [pc, #384]	; (8002f5c <HAL_GPIO_Init+0x30c>)
 8002ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dde:	4a5f      	ldr	r2, [pc, #380]	; (8002f5c <HAL_GPIO_Init+0x30c>)
 8002de0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002de4:	6453      	str	r3, [r2, #68]	; 0x44
 8002de6:	4b5d      	ldr	r3, [pc, #372]	; (8002f5c <HAL_GPIO_Init+0x30c>)
 8002de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dee:	60fb      	str	r3, [r7, #12]
 8002df0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002df2:	4a5b      	ldr	r2, [pc, #364]	; (8002f60 <HAL_GPIO_Init+0x310>)
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	089b      	lsrs	r3, r3, #2
 8002df8:	3302      	adds	r3, #2
 8002dfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	f003 0303 	and.w	r3, r3, #3
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	220f      	movs	r2, #15
 8002e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0e:	43db      	mvns	r3, r3
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	4013      	ands	r3, r2
 8002e14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a52      	ldr	r2, [pc, #328]	; (8002f64 <HAL_GPIO_Init+0x314>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d02b      	beq.n	8002e76 <HAL_GPIO_Init+0x226>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a51      	ldr	r2, [pc, #324]	; (8002f68 <HAL_GPIO_Init+0x318>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d025      	beq.n	8002e72 <HAL_GPIO_Init+0x222>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a50      	ldr	r2, [pc, #320]	; (8002f6c <HAL_GPIO_Init+0x31c>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d01f      	beq.n	8002e6e <HAL_GPIO_Init+0x21e>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a4f      	ldr	r2, [pc, #316]	; (8002f70 <HAL_GPIO_Init+0x320>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d019      	beq.n	8002e6a <HAL_GPIO_Init+0x21a>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a4e      	ldr	r2, [pc, #312]	; (8002f74 <HAL_GPIO_Init+0x324>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d013      	beq.n	8002e66 <HAL_GPIO_Init+0x216>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a4d      	ldr	r2, [pc, #308]	; (8002f78 <HAL_GPIO_Init+0x328>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d00d      	beq.n	8002e62 <HAL_GPIO_Init+0x212>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a4c      	ldr	r2, [pc, #304]	; (8002f7c <HAL_GPIO_Init+0x32c>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d007      	beq.n	8002e5e <HAL_GPIO_Init+0x20e>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a4b      	ldr	r2, [pc, #300]	; (8002f80 <HAL_GPIO_Init+0x330>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d101      	bne.n	8002e5a <HAL_GPIO_Init+0x20a>
 8002e56:	2307      	movs	r3, #7
 8002e58:	e00e      	b.n	8002e78 <HAL_GPIO_Init+0x228>
 8002e5a:	2308      	movs	r3, #8
 8002e5c:	e00c      	b.n	8002e78 <HAL_GPIO_Init+0x228>
 8002e5e:	2306      	movs	r3, #6
 8002e60:	e00a      	b.n	8002e78 <HAL_GPIO_Init+0x228>
 8002e62:	2305      	movs	r3, #5
 8002e64:	e008      	b.n	8002e78 <HAL_GPIO_Init+0x228>
 8002e66:	2304      	movs	r3, #4
 8002e68:	e006      	b.n	8002e78 <HAL_GPIO_Init+0x228>
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e004      	b.n	8002e78 <HAL_GPIO_Init+0x228>
 8002e6e:	2302      	movs	r3, #2
 8002e70:	e002      	b.n	8002e78 <HAL_GPIO_Init+0x228>
 8002e72:	2301      	movs	r3, #1
 8002e74:	e000      	b.n	8002e78 <HAL_GPIO_Init+0x228>
 8002e76:	2300      	movs	r3, #0
 8002e78:	69fa      	ldr	r2, [r7, #28]
 8002e7a:	f002 0203 	and.w	r2, r2, #3
 8002e7e:	0092      	lsls	r2, r2, #2
 8002e80:	4093      	lsls	r3, r2
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e88:	4935      	ldr	r1, [pc, #212]	; (8002f60 <HAL_GPIO_Init+0x310>)
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	089b      	lsrs	r3, r3, #2
 8002e8e:	3302      	adds	r3, #2
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e96:	4b3b      	ldr	r3, [pc, #236]	; (8002f84 <HAL_GPIO_Init+0x334>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	43db      	mvns	r3, r3
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d003      	beq.n	8002eba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002eb2:	69ba      	ldr	r2, [r7, #24]
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002eba:	4a32      	ldr	r2, [pc, #200]	; (8002f84 <HAL_GPIO_Init+0x334>)
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002ec0:	4b30      	ldr	r3, [pc, #192]	; (8002f84 <HAL_GPIO_Init+0x334>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	43db      	mvns	r3, r3
 8002eca:	69ba      	ldr	r2, [r7, #24]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d003      	beq.n	8002ee4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ee4:	4a27      	ldr	r2, [pc, #156]	; (8002f84 <HAL_GPIO_Init+0x334>)
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002eea:	4b26      	ldr	r3, [pc, #152]	; (8002f84 <HAL_GPIO_Init+0x334>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	43db      	mvns	r3, r3
 8002ef4:	69ba      	ldr	r2, [r7, #24]
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d003      	beq.n	8002f0e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002f06:	69ba      	ldr	r2, [r7, #24]
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f0e:	4a1d      	ldr	r2, [pc, #116]	; (8002f84 <HAL_GPIO_Init+0x334>)
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f14:	4b1b      	ldr	r3, [pc, #108]	; (8002f84 <HAL_GPIO_Init+0x334>)
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	43db      	mvns	r3, r3
 8002f1e:	69ba      	ldr	r2, [r7, #24]
 8002f20:	4013      	ands	r3, r2
 8002f22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d003      	beq.n	8002f38 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f38:	4a12      	ldr	r2, [pc, #72]	; (8002f84 <HAL_GPIO_Init+0x334>)
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	3301      	adds	r3, #1
 8002f42:	61fb      	str	r3, [r7, #28]
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	2b0f      	cmp	r3, #15
 8002f48:	f67f ae90 	bls.w	8002c6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f4c:	bf00      	nop
 8002f4e:	bf00      	nop
 8002f50:	3724      	adds	r7, #36	; 0x24
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	40013800 	.word	0x40013800
 8002f64:	40020000 	.word	0x40020000
 8002f68:	40020400 	.word	0x40020400
 8002f6c:	40020800 	.word	0x40020800
 8002f70:	40020c00 	.word	0x40020c00
 8002f74:	40021000 	.word	0x40021000
 8002f78:	40021400 	.word	0x40021400
 8002f7c:	40021800 	.word	0x40021800
 8002f80:	40021c00 	.word	0x40021c00
 8002f84:	40013c00 	.word	0x40013c00

08002f88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	460b      	mov	r3, r1
 8002f92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	691a      	ldr	r2, [r3, #16]
 8002f98:	887b      	ldrh	r3, [r7, #2]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d002      	beq.n	8002fa6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	73fb      	strb	r3, [r7, #15]
 8002fa4:	e001      	b.n	8002faa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3714      	adds	r7, #20
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	807b      	strh	r3, [r7, #2]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fc8:	787b      	ldrb	r3, [r7, #1]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d003      	beq.n	8002fd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fce:	887a      	ldrh	r2, [r7, #2]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fd4:	e003      	b.n	8002fde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fd6:	887b      	ldrh	r3, [r7, #2]
 8002fd8:	041a      	lsls	r2, r3, #16
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	619a      	str	r2, [r3, #24]
}
 8002fde:	bf00      	nop
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr

08002fea <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002fea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fec:	b08f      	sub	sp, #60	; 0x3c
 8002fee:	af0a      	add	r7, sp, #40	; 0x28
 8002ff0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d101      	bne.n	8002ffc <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e054      	b.n	80030a6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d106      	bne.n	800301c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f008 f99a 	bl	800b350 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2203      	movs	r2, #3
 8003020:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800302c:	2b00      	cmp	r3, #0
 800302e:	d102      	bne.n	8003036 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4618      	mov	r0, r3
 800303c:	f004 f982 	bl	8007344 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	603b      	str	r3, [r7, #0]
 8003046:	687e      	ldr	r6, [r7, #4]
 8003048:	466d      	mov	r5, sp
 800304a:	f106 0410 	add.w	r4, r6, #16
 800304e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003050:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003052:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003054:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003056:	e894 0003 	ldmia.w	r4, {r0, r1}
 800305a:	e885 0003 	stmia.w	r5, {r0, r1}
 800305e:	1d33      	adds	r3, r6, #4
 8003060:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003062:	6838      	ldr	r0, [r7, #0]
 8003064:	f004 f8fc 	bl	8007260 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2101      	movs	r1, #1
 800306e:	4618      	mov	r0, r3
 8003070:	f004 f979 	bl	8007366 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	603b      	str	r3, [r7, #0]
 800307a:	687e      	ldr	r6, [r7, #4]
 800307c:	466d      	mov	r5, sp
 800307e:	f106 0410 	add.w	r4, r6, #16
 8003082:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003084:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003086:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003088:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800308a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800308e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003092:	1d33      	adds	r3, r6, #4
 8003094:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003096:	6838      	ldr	r0, [r7, #0]
 8003098:	f004 fae0 	bl	800765c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3714      	adds	r7, #20
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080030ae <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80030ae:	b590      	push	{r4, r7, lr}
 80030b0:	b089      	sub	sp, #36	; 0x24
 80030b2:	af04      	add	r7, sp, #16
 80030b4:	6078      	str	r0, [r7, #4]
 80030b6:	4608      	mov	r0, r1
 80030b8:	4611      	mov	r1, r2
 80030ba:	461a      	mov	r2, r3
 80030bc:	4603      	mov	r3, r0
 80030be:	70fb      	strb	r3, [r7, #3]
 80030c0:	460b      	mov	r3, r1
 80030c2:	70bb      	strb	r3, [r7, #2]
 80030c4:	4613      	mov	r3, r2
 80030c6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d101      	bne.n	80030d6 <HAL_HCD_HC_Init+0x28>
 80030d2:	2302      	movs	r3, #2
 80030d4:	e076      	b.n	80031c4 <HAL_HCD_HC_Init+0x116>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80030de:	78fb      	ldrb	r3, [r7, #3]
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	212c      	movs	r1, #44	; 0x2c
 80030e4:	fb01 f303 	mul.w	r3, r1, r3
 80030e8:	4413      	add	r3, r2
 80030ea:	333d      	adds	r3, #61	; 0x3d
 80030ec:	2200      	movs	r2, #0
 80030ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80030f0:	78fb      	ldrb	r3, [r7, #3]
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	212c      	movs	r1, #44	; 0x2c
 80030f6:	fb01 f303 	mul.w	r3, r1, r3
 80030fa:	4413      	add	r3, r2
 80030fc:	3338      	adds	r3, #56	; 0x38
 80030fe:	787a      	ldrb	r2, [r7, #1]
 8003100:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003102:	78fb      	ldrb	r3, [r7, #3]
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	212c      	movs	r1, #44	; 0x2c
 8003108:	fb01 f303 	mul.w	r3, r1, r3
 800310c:	4413      	add	r3, r2
 800310e:	3340      	adds	r3, #64	; 0x40
 8003110:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003112:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003114:	78fb      	ldrb	r3, [r7, #3]
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	212c      	movs	r1, #44	; 0x2c
 800311a:	fb01 f303 	mul.w	r3, r1, r3
 800311e:	4413      	add	r3, r2
 8003120:	3339      	adds	r3, #57	; 0x39
 8003122:	78fa      	ldrb	r2, [r7, #3]
 8003124:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003126:	78fb      	ldrb	r3, [r7, #3]
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	212c      	movs	r1, #44	; 0x2c
 800312c:	fb01 f303 	mul.w	r3, r1, r3
 8003130:	4413      	add	r3, r2
 8003132:	333f      	adds	r3, #63	; 0x3f
 8003134:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003138:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800313a:	78fb      	ldrb	r3, [r7, #3]
 800313c:	78ba      	ldrb	r2, [r7, #2]
 800313e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003142:	b2d0      	uxtb	r0, r2
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	212c      	movs	r1, #44	; 0x2c
 8003148:	fb01 f303 	mul.w	r3, r1, r3
 800314c:	4413      	add	r3, r2
 800314e:	333a      	adds	r3, #58	; 0x3a
 8003150:	4602      	mov	r2, r0
 8003152:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003154:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003158:	2b00      	cmp	r3, #0
 800315a:	da09      	bge.n	8003170 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800315c:	78fb      	ldrb	r3, [r7, #3]
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	212c      	movs	r1, #44	; 0x2c
 8003162:	fb01 f303 	mul.w	r3, r1, r3
 8003166:	4413      	add	r3, r2
 8003168:	333b      	adds	r3, #59	; 0x3b
 800316a:	2201      	movs	r2, #1
 800316c:	701a      	strb	r2, [r3, #0]
 800316e:	e008      	b.n	8003182 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003170:	78fb      	ldrb	r3, [r7, #3]
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	212c      	movs	r1, #44	; 0x2c
 8003176:	fb01 f303 	mul.w	r3, r1, r3
 800317a:	4413      	add	r3, r2
 800317c:	333b      	adds	r3, #59	; 0x3b
 800317e:	2200      	movs	r2, #0
 8003180:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003182:	78fb      	ldrb	r3, [r7, #3]
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	212c      	movs	r1, #44	; 0x2c
 8003188:	fb01 f303 	mul.w	r3, r1, r3
 800318c:	4413      	add	r3, r2
 800318e:	333c      	adds	r3, #60	; 0x3c
 8003190:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003194:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6818      	ldr	r0, [r3, #0]
 800319a:	787c      	ldrb	r4, [r7, #1]
 800319c:	78ba      	ldrb	r2, [r7, #2]
 800319e:	78f9      	ldrb	r1, [r7, #3]
 80031a0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80031a2:	9302      	str	r3, [sp, #8]
 80031a4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80031a8:	9301      	str	r3, [sp, #4]
 80031aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80031ae:	9300      	str	r3, [sp, #0]
 80031b0:	4623      	mov	r3, r4
 80031b2:	f004 fbcd 	bl	8007950 <USB_HC_Init>
 80031b6:	4603      	mov	r3, r0
 80031b8:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80031c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3714      	adds	r7, #20
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd90      	pop	{r4, r7, pc}

080031cc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	460b      	mov	r3, r1
 80031d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80031d8:	2300      	movs	r3, #0
 80031da:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d101      	bne.n	80031ea <HAL_HCD_HC_Halt+0x1e>
 80031e6:	2302      	movs	r3, #2
 80031e8:	e00f      	b.n	800320a <HAL_HCD_HC_Halt+0x3e>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	78fa      	ldrb	r2, [r7, #3]
 80031f8:	4611      	mov	r1, r2
 80031fa:	4618      	mov	r0, r3
 80031fc:	f004 fe09 	bl	8007e12 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003208:	7bfb      	ldrb	r3, [r7, #15]
}
 800320a:	4618      	mov	r0, r3
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
	...

08003214 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	4608      	mov	r0, r1
 800321e:	4611      	mov	r1, r2
 8003220:	461a      	mov	r2, r3
 8003222:	4603      	mov	r3, r0
 8003224:	70fb      	strb	r3, [r7, #3]
 8003226:	460b      	mov	r3, r1
 8003228:	70bb      	strb	r3, [r7, #2]
 800322a:	4613      	mov	r3, r2
 800322c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800322e:	78fb      	ldrb	r3, [r7, #3]
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	212c      	movs	r1, #44	; 0x2c
 8003234:	fb01 f303 	mul.w	r3, r1, r3
 8003238:	4413      	add	r3, r2
 800323a:	333b      	adds	r3, #59	; 0x3b
 800323c:	78ba      	ldrb	r2, [r7, #2]
 800323e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003240:	78fb      	ldrb	r3, [r7, #3]
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	212c      	movs	r1, #44	; 0x2c
 8003246:	fb01 f303 	mul.w	r3, r1, r3
 800324a:	4413      	add	r3, r2
 800324c:	333f      	adds	r3, #63	; 0x3f
 800324e:	787a      	ldrb	r2, [r7, #1]
 8003250:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003252:	7c3b      	ldrb	r3, [r7, #16]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d112      	bne.n	800327e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003258:	78fb      	ldrb	r3, [r7, #3]
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	212c      	movs	r1, #44	; 0x2c
 800325e:	fb01 f303 	mul.w	r3, r1, r3
 8003262:	4413      	add	r3, r2
 8003264:	3342      	adds	r3, #66	; 0x42
 8003266:	2203      	movs	r2, #3
 8003268:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800326a:	78fb      	ldrb	r3, [r7, #3]
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	212c      	movs	r1, #44	; 0x2c
 8003270:	fb01 f303 	mul.w	r3, r1, r3
 8003274:	4413      	add	r3, r2
 8003276:	333d      	adds	r3, #61	; 0x3d
 8003278:	7f3a      	ldrb	r2, [r7, #28]
 800327a:	701a      	strb	r2, [r3, #0]
 800327c:	e008      	b.n	8003290 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800327e:	78fb      	ldrb	r3, [r7, #3]
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	212c      	movs	r1, #44	; 0x2c
 8003284:	fb01 f303 	mul.w	r3, r1, r3
 8003288:	4413      	add	r3, r2
 800328a:	3342      	adds	r3, #66	; 0x42
 800328c:	2202      	movs	r2, #2
 800328e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003290:	787b      	ldrb	r3, [r7, #1]
 8003292:	2b03      	cmp	r3, #3
 8003294:	f200 80c6 	bhi.w	8003424 <HAL_HCD_HC_SubmitRequest+0x210>
 8003298:	a201      	add	r2, pc, #4	; (adr r2, 80032a0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800329a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800329e:	bf00      	nop
 80032a0:	080032b1 	.word	0x080032b1
 80032a4:	08003411 	.word	0x08003411
 80032a8:	08003315 	.word	0x08003315
 80032ac:	08003393 	.word	0x08003393
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80032b0:	7c3b      	ldrb	r3, [r7, #16]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	f040 80b8 	bne.w	8003428 <HAL_HCD_HC_SubmitRequest+0x214>
 80032b8:	78bb      	ldrb	r3, [r7, #2]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f040 80b4 	bne.w	8003428 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80032c0:	8b3b      	ldrh	r3, [r7, #24]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d108      	bne.n	80032d8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80032c6:	78fb      	ldrb	r3, [r7, #3]
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	212c      	movs	r1, #44	; 0x2c
 80032cc:	fb01 f303 	mul.w	r3, r1, r3
 80032d0:	4413      	add	r3, r2
 80032d2:	3355      	adds	r3, #85	; 0x55
 80032d4:	2201      	movs	r2, #1
 80032d6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80032d8:	78fb      	ldrb	r3, [r7, #3]
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	212c      	movs	r1, #44	; 0x2c
 80032de:	fb01 f303 	mul.w	r3, r1, r3
 80032e2:	4413      	add	r3, r2
 80032e4:	3355      	adds	r3, #85	; 0x55
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d109      	bne.n	8003300 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80032ec:	78fb      	ldrb	r3, [r7, #3]
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	212c      	movs	r1, #44	; 0x2c
 80032f2:	fb01 f303 	mul.w	r3, r1, r3
 80032f6:	4413      	add	r3, r2
 80032f8:	3342      	adds	r3, #66	; 0x42
 80032fa:	2200      	movs	r2, #0
 80032fc:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80032fe:	e093      	b.n	8003428 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003300:	78fb      	ldrb	r3, [r7, #3]
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	212c      	movs	r1, #44	; 0x2c
 8003306:	fb01 f303 	mul.w	r3, r1, r3
 800330a:	4413      	add	r3, r2
 800330c:	3342      	adds	r3, #66	; 0x42
 800330e:	2202      	movs	r2, #2
 8003310:	701a      	strb	r2, [r3, #0]
      break;
 8003312:	e089      	b.n	8003428 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003314:	78bb      	ldrb	r3, [r7, #2]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d11d      	bne.n	8003356 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800331a:	78fb      	ldrb	r3, [r7, #3]
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	212c      	movs	r1, #44	; 0x2c
 8003320:	fb01 f303 	mul.w	r3, r1, r3
 8003324:	4413      	add	r3, r2
 8003326:	3355      	adds	r3, #85	; 0x55
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d109      	bne.n	8003342 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800332e:	78fb      	ldrb	r3, [r7, #3]
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	212c      	movs	r1, #44	; 0x2c
 8003334:	fb01 f303 	mul.w	r3, r1, r3
 8003338:	4413      	add	r3, r2
 800333a:	3342      	adds	r3, #66	; 0x42
 800333c:	2200      	movs	r2, #0
 800333e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003340:	e073      	b.n	800342a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003342:	78fb      	ldrb	r3, [r7, #3]
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	212c      	movs	r1, #44	; 0x2c
 8003348:	fb01 f303 	mul.w	r3, r1, r3
 800334c:	4413      	add	r3, r2
 800334e:	3342      	adds	r3, #66	; 0x42
 8003350:	2202      	movs	r2, #2
 8003352:	701a      	strb	r2, [r3, #0]
      break;
 8003354:	e069      	b.n	800342a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003356:	78fb      	ldrb	r3, [r7, #3]
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	212c      	movs	r1, #44	; 0x2c
 800335c:	fb01 f303 	mul.w	r3, r1, r3
 8003360:	4413      	add	r3, r2
 8003362:	3354      	adds	r3, #84	; 0x54
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d109      	bne.n	800337e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800336a:	78fb      	ldrb	r3, [r7, #3]
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	212c      	movs	r1, #44	; 0x2c
 8003370:	fb01 f303 	mul.w	r3, r1, r3
 8003374:	4413      	add	r3, r2
 8003376:	3342      	adds	r3, #66	; 0x42
 8003378:	2200      	movs	r2, #0
 800337a:	701a      	strb	r2, [r3, #0]
      break;
 800337c:	e055      	b.n	800342a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800337e:	78fb      	ldrb	r3, [r7, #3]
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	212c      	movs	r1, #44	; 0x2c
 8003384:	fb01 f303 	mul.w	r3, r1, r3
 8003388:	4413      	add	r3, r2
 800338a:	3342      	adds	r3, #66	; 0x42
 800338c:	2202      	movs	r2, #2
 800338e:	701a      	strb	r2, [r3, #0]
      break;
 8003390:	e04b      	b.n	800342a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003392:	78bb      	ldrb	r3, [r7, #2]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d11d      	bne.n	80033d4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003398:	78fb      	ldrb	r3, [r7, #3]
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	212c      	movs	r1, #44	; 0x2c
 800339e:	fb01 f303 	mul.w	r3, r1, r3
 80033a2:	4413      	add	r3, r2
 80033a4:	3355      	adds	r3, #85	; 0x55
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d109      	bne.n	80033c0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80033ac:	78fb      	ldrb	r3, [r7, #3]
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	212c      	movs	r1, #44	; 0x2c
 80033b2:	fb01 f303 	mul.w	r3, r1, r3
 80033b6:	4413      	add	r3, r2
 80033b8:	3342      	adds	r3, #66	; 0x42
 80033ba:	2200      	movs	r2, #0
 80033bc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80033be:	e034      	b.n	800342a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80033c0:	78fb      	ldrb	r3, [r7, #3]
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	212c      	movs	r1, #44	; 0x2c
 80033c6:	fb01 f303 	mul.w	r3, r1, r3
 80033ca:	4413      	add	r3, r2
 80033cc:	3342      	adds	r3, #66	; 0x42
 80033ce:	2202      	movs	r2, #2
 80033d0:	701a      	strb	r2, [r3, #0]
      break;
 80033d2:	e02a      	b.n	800342a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80033d4:	78fb      	ldrb	r3, [r7, #3]
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	212c      	movs	r1, #44	; 0x2c
 80033da:	fb01 f303 	mul.w	r3, r1, r3
 80033de:	4413      	add	r3, r2
 80033e0:	3354      	adds	r3, #84	; 0x54
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d109      	bne.n	80033fc <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80033e8:	78fb      	ldrb	r3, [r7, #3]
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	212c      	movs	r1, #44	; 0x2c
 80033ee:	fb01 f303 	mul.w	r3, r1, r3
 80033f2:	4413      	add	r3, r2
 80033f4:	3342      	adds	r3, #66	; 0x42
 80033f6:	2200      	movs	r2, #0
 80033f8:	701a      	strb	r2, [r3, #0]
      break;
 80033fa:	e016      	b.n	800342a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80033fc:	78fb      	ldrb	r3, [r7, #3]
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	212c      	movs	r1, #44	; 0x2c
 8003402:	fb01 f303 	mul.w	r3, r1, r3
 8003406:	4413      	add	r3, r2
 8003408:	3342      	adds	r3, #66	; 0x42
 800340a:	2202      	movs	r2, #2
 800340c:	701a      	strb	r2, [r3, #0]
      break;
 800340e:	e00c      	b.n	800342a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003410:	78fb      	ldrb	r3, [r7, #3]
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	212c      	movs	r1, #44	; 0x2c
 8003416:	fb01 f303 	mul.w	r3, r1, r3
 800341a:	4413      	add	r3, r2
 800341c:	3342      	adds	r3, #66	; 0x42
 800341e:	2200      	movs	r2, #0
 8003420:	701a      	strb	r2, [r3, #0]
      break;
 8003422:	e002      	b.n	800342a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003424:	bf00      	nop
 8003426:	e000      	b.n	800342a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003428:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800342a:	78fb      	ldrb	r3, [r7, #3]
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	212c      	movs	r1, #44	; 0x2c
 8003430:	fb01 f303 	mul.w	r3, r1, r3
 8003434:	4413      	add	r3, r2
 8003436:	3344      	adds	r3, #68	; 0x44
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800343c:	78fb      	ldrb	r3, [r7, #3]
 800343e:	8b3a      	ldrh	r2, [r7, #24]
 8003440:	6879      	ldr	r1, [r7, #4]
 8003442:	202c      	movs	r0, #44	; 0x2c
 8003444:	fb00 f303 	mul.w	r3, r0, r3
 8003448:	440b      	add	r3, r1
 800344a:	334c      	adds	r3, #76	; 0x4c
 800344c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800344e:	78fb      	ldrb	r3, [r7, #3]
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	212c      	movs	r1, #44	; 0x2c
 8003454:	fb01 f303 	mul.w	r3, r1, r3
 8003458:	4413      	add	r3, r2
 800345a:	3360      	adds	r3, #96	; 0x60
 800345c:	2200      	movs	r2, #0
 800345e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003460:	78fb      	ldrb	r3, [r7, #3]
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	212c      	movs	r1, #44	; 0x2c
 8003466:	fb01 f303 	mul.w	r3, r1, r3
 800346a:	4413      	add	r3, r2
 800346c:	3350      	adds	r3, #80	; 0x50
 800346e:	2200      	movs	r2, #0
 8003470:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003472:	78fb      	ldrb	r3, [r7, #3]
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	212c      	movs	r1, #44	; 0x2c
 8003478:	fb01 f303 	mul.w	r3, r1, r3
 800347c:	4413      	add	r3, r2
 800347e:	3339      	adds	r3, #57	; 0x39
 8003480:	78fa      	ldrb	r2, [r7, #3]
 8003482:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003484:	78fb      	ldrb	r3, [r7, #3]
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	212c      	movs	r1, #44	; 0x2c
 800348a:	fb01 f303 	mul.w	r3, r1, r3
 800348e:	4413      	add	r3, r2
 8003490:	3361      	adds	r3, #97	; 0x61
 8003492:	2200      	movs	r2, #0
 8003494:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6818      	ldr	r0, [r3, #0]
 800349a:	78fb      	ldrb	r3, [r7, #3]
 800349c:	222c      	movs	r2, #44	; 0x2c
 800349e:	fb02 f303 	mul.w	r3, r2, r3
 80034a2:	3338      	adds	r3, #56	; 0x38
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	18d1      	adds	r1, r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	461a      	mov	r2, r3
 80034b0:	f004 fb5c 	bl	8007b6c <USB_HC_StartXfer>
 80034b4:	4603      	mov	r3, r0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3708      	adds	r7, #8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop

080034c0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b086      	sub	sp, #24
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f004 f87f 	bl	80075da <USB_GetMode>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b01      	cmp	r3, #1
 80034e0:	f040 80f6 	bne.w	80036d0 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f004 f863 	bl	80075b4 <USB_ReadInterrupts>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f000 80ec 	beq.w	80036ce <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f004 f85a 	bl	80075b4 <USB_ReadInterrupts>
 8003500:	4603      	mov	r3, r0
 8003502:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003506:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800350a:	d104      	bne.n	8003516 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003514:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4618      	mov	r0, r3
 800351c:	f004 f84a 	bl	80075b4 <USB_ReadInterrupts>
 8003520:	4603      	mov	r3, r0
 8003522:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003526:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800352a:	d104      	bne.n	8003536 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003534:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4618      	mov	r0, r3
 800353c:	f004 f83a 	bl	80075b4 <USB_ReadInterrupts>
 8003540:	4603      	mov	r3, r0
 8003542:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003546:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800354a:	d104      	bne.n	8003556 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003554:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4618      	mov	r0, r3
 800355c:	f004 f82a 	bl	80075b4 <USB_ReadInterrupts>
 8003560:	4603      	mov	r3, r0
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b02      	cmp	r3, #2
 8003568:	d103      	bne.n	8003572 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2202      	movs	r2, #2
 8003570:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4618      	mov	r0, r3
 8003578:	f004 f81c 	bl	80075b4 <USB_ReadInterrupts>
 800357c:	4603      	mov	r3, r0
 800357e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003582:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003586:	d11c      	bne.n	80035c2 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003590:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d10f      	bne.n	80035c2 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80035a2:	2110      	movs	r1, #16
 80035a4:	6938      	ldr	r0, [r7, #16]
 80035a6:	f003 ff2b 	bl	8007400 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80035aa:	6938      	ldr	r0, [r7, #16]
 80035ac:	f003 ff4c 	bl	8007448 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2101      	movs	r1, #1
 80035b6:	4618      	mov	r0, r3
 80035b8:	f004 f904 	bl	80077c4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f007 ff45 	bl	800b44c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f003 fff4 	bl	80075b4 <USB_ReadInterrupts>
 80035cc:	4603      	mov	r3, r0
 80035ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035d6:	d102      	bne.n	80035de <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f001 fa03 	bl	80049e4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f003 ffe6 	bl	80075b4 <USB_ReadInterrupts>
 80035e8:	4603      	mov	r3, r0
 80035ea:	f003 0308 	and.w	r3, r3, #8
 80035ee:	2b08      	cmp	r3, #8
 80035f0:	d106      	bne.n	8003600 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f007 ff0e 	bl	800b414 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2208      	movs	r2, #8
 80035fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4618      	mov	r0, r3
 8003606:	f003 ffd5 	bl	80075b4 <USB_ReadInterrupts>
 800360a:	4603      	mov	r3, r0
 800360c:	f003 0310 	and.w	r3, r3, #16
 8003610:	2b10      	cmp	r3, #16
 8003612:	d101      	bne.n	8003618 <HAL_HCD_IRQHandler+0x158>
 8003614:	2301      	movs	r3, #1
 8003616:	e000      	b.n	800361a <HAL_HCD_IRQHandler+0x15a>
 8003618:	2300      	movs	r3, #0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d012      	beq.n	8003644 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	699a      	ldr	r2, [r3, #24]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f022 0210 	bic.w	r2, r2, #16
 800362c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f001 f906 	bl	8004840 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	699a      	ldr	r2, [r3, #24]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f042 0210 	orr.w	r2, r2, #16
 8003642:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4618      	mov	r0, r3
 800364a:	f003 ffb3 	bl	80075b4 <USB_ReadInterrupts>
 800364e:	4603      	mov	r3, r0
 8003650:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003654:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003658:	d13a      	bne.n	80036d0 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4618      	mov	r0, r3
 8003660:	f004 fbc6 	bl	8007df0 <USB_HC_ReadInterrupt>
 8003664:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003666:	2300      	movs	r3, #0
 8003668:	617b      	str	r3, [r7, #20]
 800366a:	e025      	b.n	80036b8 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	f003 030f 	and.w	r3, r3, #15
 8003672:	68ba      	ldr	r2, [r7, #8]
 8003674:	fa22 f303 	lsr.w	r3, r2, r3
 8003678:	f003 0301 	and.w	r3, r3, #1
 800367c:	2b00      	cmp	r3, #0
 800367e:	d018      	beq.n	80036b2 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	015a      	lsls	r2, r3, #5
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	4413      	add	r3, r2
 8003688:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003692:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003696:	d106      	bne.n	80036a6 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	b2db      	uxtb	r3, r3
 800369c:	4619      	mov	r1, r3
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 f8ab 	bl	80037fa <HCD_HC_IN_IRQHandler>
 80036a4:	e005      	b.n	80036b2 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	4619      	mov	r1, r3
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f000 fcc6 	bl	800403e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	3301      	adds	r3, #1
 80036b6:	617b      	str	r3, [r7, #20]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	697a      	ldr	r2, [r7, #20]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d3d4      	bcc.n	800366c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036ca:	615a      	str	r2, [r3, #20]
 80036cc:	e000      	b.n	80036d0 <HAL_HCD_IRQHandler+0x210>
      return;
 80036ce:	bf00      	nop
    }
  }
}
 80036d0:	3718      	adds	r7, #24
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b082      	sub	sp, #8
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d101      	bne.n	80036ec <HAL_HCD_Start+0x16>
 80036e8:	2302      	movs	r3, #2
 80036ea:	e013      	b.n	8003714 <HAL_HCD_Start+0x3e>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2101      	movs	r1, #1
 80036fa:	4618      	mov	r0, r3
 80036fc:	f004 f8c6 	bl	800788c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4618      	mov	r0, r3
 8003706:	f003 fe0c 	bl	8007322 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	3708      	adds	r7, #8
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800372a:	2b01      	cmp	r3, #1
 800372c:	d101      	bne.n	8003732 <HAL_HCD_Stop+0x16>
 800372e:	2302      	movs	r3, #2
 8003730:	e00d      	b.n	800374e <HAL_HCD_Stop+0x32>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2201      	movs	r2, #1
 8003736:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4618      	mov	r0, r3
 8003740:	f004 fcc0 	bl	80080c4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003756:	b580      	push	{r7, lr}
 8003758:	b082      	sub	sp, #8
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4618      	mov	r0, r3
 8003764:	f004 f868 	bl	8007838 <USB_ResetPort>
 8003768:	4603      	mov	r3, r0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3708      	adds	r7, #8
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003772:	b480      	push	{r7}
 8003774:	b083      	sub	sp, #12
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
 800377a:	460b      	mov	r3, r1
 800377c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800377e:	78fb      	ldrb	r3, [r7, #3]
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	212c      	movs	r1, #44	; 0x2c
 8003784:	fb01 f303 	mul.w	r3, r1, r3
 8003788:	4413      	add	r3, r2
 800378a:	3360      	adds	r3, #96	; 0x60
 800378c:	781b      	ldrb	r3, [r3, #0]
}
 800378e:	4618      	mov	r0, r3
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr

0800379a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800379a:	b480      	push	{r7}
 800379c:	b083      	sub	sp, #12
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
 80037a2:	460b      	mov	r3, r1
 80037a4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80037a6:	78fb      	ldrb	r3, [r7, #3]
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	212c      	movs	r1, #44	; 0x2c
 80037ac:	fb01 f303 	mul.w	r3, r1, r3
 80037b0:	4413      	add	r3, r2
 80037b2:	3350      	adds	r3, #80	; 0x50
 80037b4:	681b      	ldr	r3, [r3, #0]
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	370c      	adds	r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr

080037c2 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b082      	sub	sp, #8
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f004 f8ac 	bl	800792c <USB_GetCurrentFrame>
 80037d4:	4603      	mov	r3, r0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3708      	adds	r7, #8
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b082      	sub	sp, #8
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4618      	mov	r0, r3
 80037ec:	f004 f887 	bl	80078fe <USB_GetHostSpeed>
 80037f0:	4603      	mov	r3, r0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3708      	adds	r7, #8
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b086      	sub	sp, #24
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
 8003802:	460b      	mov	r3, r1
 8003804:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003810:	78fb      	ldrb	r3, [r7, #3]
 8003812:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	015a      	lsls	r2, r3, #5
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	4413      	add	r3, r2
 800381c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f003 0304 	and.w	r3, r3, #4
 8003826:	2b04      	cmp	r3, #4
 8003828:	d119      	bne.n	800385e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	015a      	lsls	r2, r3, #5
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	4413      	add	r3, r2
 8003832:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003836:	461a      	mov	r2, r3
 8003838:	2304      	movs	r3, #4
 800383a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	015a      	lsls	r2, r3, #5
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	4413      	add	r3, r2
 8003844:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	0151      	lsls	r1, r2, #5
 800384e:	693a      	ldr	r2, [r7, #16]
 8003850:	440a      	add	r2, r1
 8003852:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003856:	f043 0302 	orr.w	r3, r3, #2
 800385a:	60d3      	str	r3, [r2, #12]
 800385c:	e101      	b.n	8003a62 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	015a      	lsls	r2, r3, #5
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	4413      	add	r3, r2
 8003866:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003870:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003874:	d12b      	bne.n	80038ce <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	015a      	lsls	r2, r3, #5
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	4413      	add	r3, r2
 800387e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003882:	461a      	mov	r2, r3
 8003884:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003888:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	212c      	movs	r1, #44	; 0x2c
 8003890:	fb01 f303 	mul.w	r3, r1, r3
 8003894:	4413      	add	r3, r2
 8003896:	3361      	adds	r3, #97	; 0x61
 8003898:	2207      	movs	r2, #7
 800389a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	015a      	lsls	r2, r3, #5
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	4413      	add	r3, r2
 80038a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	0151      	lsls	r1, r2, #5
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	440a      	add	r2, r1
 80038b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038b6:	f043 0302 	orr.w	r3, r3, #2
 80038ba:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	b2d2      	uxtb	r2, r2
 80038c4:	4611      	mov	r1, r2
 80038c6:	4618      	mov	r0, r3
 80038c8:	f004 faa3 	bl	8007e12 <USB_HC_Halt>
 80038cc:	e0c9      	b.n	8003a62 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	015a      	lsls	r2, r3, #5
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	4413      	add	r3, r2
 80038d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f003 0320 	and.w	r3, r3, #32
 80038e0:	2b20      	cmp	r3, #32
 80038e2:	d109      	bne.n	80038f8 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	015a      	lsls	r2, r3, #5
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	4413      	add	r3, r2
 80038ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038f0:	461a      	mov	r2, r3
 80038f2:	2320      	movs	r3, #32
 80038f4:	6093      	str	r3, [r2, #8]
 80038f6:	e0b4      	b.n	8003a62 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	015a      	lsls	r2, r3, #5
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	4413      	add	r3, r2
 8003900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f003 0308 	and.w	r3, r3, #8
 800390a:	2b08      	cmp	r3, #8
 800390c:	d133      	bne.n	8003976 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	015a      	lsls	r2, r3, #5
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	4413      	add	r3, r2
 8003916:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	0151      	lsls	r1, r2, #5
 8003920:	693a      	ldr	r2, [r7, #16]
 8003922:	440a      	add	r2, r1
 8003924:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003928:	f043 0302 	orr.w	r3, r3, #2
 800392c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	212c      	movs	r1, #44	; 0x2c
 8003934:	fb01 f303 	mul.w	r3, r1, r3
 8003938:	4413      	add	r3, r2
 800393a:	3361      	adds	r3, #97	; 0x61
 800393c:	2205      	movs	r2, #5
 800393e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	015a      	lsls	r2, r3, #5
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	4413      	add	r3, r2
 8003948:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800394c:	461a      	mov	r2, r3
 800394e:	2310      	movs	r3, #16
 8003950:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	015a      	lsls	r2, r3, #5
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	4413      	add	r3, r2
 800395a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800395e:	461a      	mov	r2, r3
 8003960:	2308      	movs	r3, #8
 8003962:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68fa      	ldr	r2, [r7, #12]
 800396a:	b2d2      	uxtb	r2, r2
 800396c:	4611      	mov	r1, r2
 800396e:	4618      	mov	r0, r3
 8003970:	f004 fa4f 	bl	8007e12 <USB_HC_Halt>
 8003974:	e075      	b.n	8003a62 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	015a      	lsls	r2, r3, #5
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	4413      	add	r3, r2
 800397e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003988:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800398c:	d134      	bne.n	80039f8 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	015a      	lsls	r2, r3, #5
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	4413      	add	r3, r2
 8003996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	0151      	lsls	r1, r2, #5
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	440a      	add	r2, r1
 80039a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039a8:	f043 0302 	orr.w	r3, r3, #2
 80039ac:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	212c      	movs	r1, #44	; 0x2c
 80039b4:	fb01 f303 	mul.w	r3, r1, r3
 80039b8:	4413      	add	r3, r2
 80039ba:	3361      	adds	r3, #97	; 0x61
 80039bc:	2208      	movs	r2, #8
 80039be:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	015a      	lsls	r2, r3, #5
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	4413      	add	r3, r2
 80039c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039cc:	461a      	mov	r2, r3
 80039ce:	2310      	movs	r3, #16
 80039d0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	015a      	lsls	r2, r3, #5
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	4413      	add	r3, r2
 80039da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039de:	461a      	mov	r2, r3
 80039e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039e4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	b2d2      	uxtb	r2, r2
 80039ee:	4611      	mov	r1, r2
 80039f0:	4618      	mov	r0, r3
 80039f2:	f004 fa0e 	bl	8007e12 <USB_HC_Halt>
 80039f6:	e034      	b.n	8003a62 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	015a      	lsls	r2, r3, #5
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	4413      	add	r3, r2
 8003a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a0a:	2b80      	cmp	r3, #128	; 0x80
 8003a0c:	d129      	bne.n	8003a62 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	015a      	lsls	r2, r3, #5
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	4413      	add	r3, r2
 8003a16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	0151      	lsls	r1, r2, #5
 8003a20:	693a      	ldr	r2, [r7, #16]
 8003a22:	440a      	add	r2, r1
 8003a24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a28:	f043 0302 	orr.w	r3, r3, #2
 8003a2c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	212c      	movs	r1, #44	; 0x2c
 8003a34:	fb01 f303 	mul.w	r3, r1, r3
 8003a38:	4413      	add	r3, r2
 8003a3a:	3361      	adds	r3, #97	; 0x61
 8003a3c:	2206      	movs	r2, #6
 8003a3e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	b2d2      	uxtb	r2, r2
 8003a48:	4611      	mov	r1, r2
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f004 f9e1 	bl	8007e12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	015a      	lsls	r2, r3, #5
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	4413      	add	r3, r2
 8003a58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	2380      	movs	r3, #128	; 0x80
 8003a60:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	015a      	lsls	r2, r3, #5
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	4413      	add	r3, r2
 8003a6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a78:	d122      	bne.n	8003ac0 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	015a      	lsls	r2, r3, #5
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	4413      	add	r3, r2
 8003a82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	0151      	lsls	r1, r2, #5
 8003a8c:	693a      	ldr	r2, [r7, #16]
 8003a8e:	440a      	add	r2, r1
 8003a90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a94:	f043 0302 	orr.w	r3, r3, #2
 8003a98:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	b2d2      	uxtb	r2, r2
 8003aa2:	4611      	mov	r1, r2
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f004 f9b4 	bl	8007e12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	015a      	lsls	r2, r3, #5
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	4413      	add	r3, r2
 8003ab2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003abc:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003abe:	e2ba      	b.n	8004036 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	015a      	lsls	r2, r3, #5
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	f040 811b 	bne.w	8003d0e <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d019      	beq.n	8003b14 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	212c      	movs	r1, #44	; 0x2c
 8003ae6:	fb01 f303 	mul.w	r3, r1, r3
 8003aea:	4413      	add	r3, r2
 8003aec:	3348      	adds	r3, #72	; 0x48
 8003aee:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	0159      	lsls	r1, r3, #5
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	440b      	add	r3, r1
 8003af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003b02:	1ad2      	subs	r2, r2, r3
 8003b04:	6879      	ldr	r1, [r7, #4]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	202c      	movs	r0, #44	; 0x2c
 8003b0a:	fb00 f303 	mul.w	r3, r0, r3
 8003b0e:	440b      	add	r3, r1
 8003b10:	3350      	adds	r3, #80	; 0x50
 8003b12:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	212c      	movs	r1, #44	; 0x2c
 8003b1a:	fb01 f303 	mul.w	r3, r1, r3
 8003b1e:	4413      	add	r3, r2
 8003b20:	3361      	adds	r3, #97	; 0x61
 8003b22:	2201      	movs	r2, #1
 8003b24:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	212c      	movs	r1, #44	; 0x2c
 8003b2c:	fb01 f303 	mul.w	r3, r1, r3
 8003b30:	4413      	add	r3, r2
 8003b32:	335c      	adds	r3, #92	; 0x5c
 8003b34:	2200      	movs	r2, #0
 8003b36:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	015a      	lsls	r2, r3, #5
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	4413      	add	r3, r2
 8003b40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b44:	461a      	mov	r2, r3
 8003b46:	2301      	movs	r3, #1
 8003b48:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	212c      	movs	r1, #44	; 0x2c
 8003b50:	fb01 f303 	mul.w	r3, r1, r3
 8003b54:	4413      	add	r3, r2
 8003b56:	333f      	adds	r3, #63	; 0x3f
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d009      	beq.n	8003b72 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	212c      	movs	r1, #44	; 0x2c
 8003b64:	fb01 f303 	mul.w	r3, r1, r3
 8003b68:	4413      	add	r3, r2
 8003b6a:	333f      	adds	r3, #63	; 0x3f
 8003b6c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d121      	bne.n	8003bb6 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	015a      	lsls	r2, r3, #5
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	4413      	add	r3, r2
 8003b7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	0151      	lsls	r1, r2, #5
 8003b84:	693a      	ldr	r2, [r7, #16]
 8003b86:	440a      	add	r2, r1
 8003b88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b8c:	f043 0302 	orr.w	r3, r3, #2
 8003b90:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	b2d2      	uxtb	r2, r2
 8003b9a:	4611      	mov	r1, r2
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f004 f938 	bl	8007e12 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	015a      	lsls	r2, r3, #5
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	4413      	add	r3, r2
 8003baa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bae:	461a      	mov	r2, r3
 8003bb0:	2310      	movs	r3, #16
 8003bb2:	6093      	str	r3, [r2, #8]
 8003bb4:	e066      	b.n	8003c84 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	212c      	movs	r1, #44	; 0x2c
 8003bbc:	fb01 f303 	mul.w	r3, r1, r3
 8003bc0:	4413      	add	r3, r2
 8003bc2:	333f      	adds	r3, #63	; 0x3f
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	2b03      	cmp	r3, #3
 8003bc8:	d127      	bne.n	8003c1a <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	015a      	lsls	r2, r3, #5
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	0151      	lsls	r1, r2, #5
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	440a      	add	r2, r1
 8003be0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003be4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003be8:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	212c      	movs	r1, #44	; 0x2c
 8003bf0:	fb01 f303 	mul.w	r3, r1, r3
 8003bf4:	4413      	add	r3, r2
 8003bf6:	3360      	adds	r3, #96	; 0x60
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	b2d9      	uxtb	r1, r3
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	202c      	movs	r0, #44	; 0x2c
 8003c06:	fb00 f303 	mul.w	r3, r0, r3
 8003c0a:	4413      	add	r3, r2
 8003c0c:	3360      	adds	r3, #96	; 0x60
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	461a      	mov	r2, r3
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f007 fc28 	bl	800b468 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003c18:	e034      	b.n	8003c84 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	212c      	movs	r1, #44	; 0x2c
 8003c20:	fb01 f303 	mul.w	r3, r1, r3
 8003c24:	4413      	add	r3, r2
 8003c26:	333f      	adds	r3, #63	; 0x3f
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d12a      	bne.n	8003c84 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	212c      	movs	r1, #44	; 0x2c
 8003c34:	fb01 f303 	mul.w	r3, r1, r3
 8003c38:	4413      	add	r3, r2
 8003c3a:	3360      	adds	r3, #96	; 0x60
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	212c      	movs	r1, #44	; 0x2c
 8003c46:	fb01 f303 	mul.w	r3, r1, r3
 8003c4a:	4413      	add	r3, r2
 8003c4c:	3354      	adds	r3, #84	; 0x54
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	f083 0301 	eor.w	r3, r3, #1
 8003c54:	b2d8      	uxtb	r0, r3
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	212c      	movs	r1, #44	; 0x2c
 8003c5c:	fb01 f303 	mul.w	r3, r1, r3
 8003c60:	4413      	add	r3, r2
 8003c62:	3354      	adds	r3, #84	; 0x54
 8003c64:	4602      	mov	r2, r0
 8003c66:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	b2d9      	uxtb	r1, r3
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	202c      	movs	r0, #44	; 0x2c
 8003c72:	fb00 f303 	mul.w	r3, r0, r3
 8003c76:	4413      	add	r3, r2
 8003c78:	3360      	adds	r3, #96	; 0x60
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f007 fbf2 	bl	800b468 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d12b      	bne.n	8003ce4 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	212c      	movs	r1, #44	; 0x2c
 8003c92:	fb01 f303 	mul.w	r3, r1, r3
 8003c96:	4413      	add	r3, r2
 8003c98:	3348      	adds	r3, #72	; 0x48
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6879      	ldr	r1, [r7, #4]
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	202c      	movs	r0, #44	; 0x2c
 8003ca2:	fb00 f202 	mul.w	r2, r0, r2
 8003ca6:	440a      	add	r2, r1
 8003ca8:	3240      	adds	r2, #64	; 0x40
 8003caa:	8812      	ldrh	r2, [r2, #0]
 8003cac:	fbb3 f3f2 	udiv	r3, r3, r2
 8003cb0:	f003 0301 	and.w	r3, r3, #1
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f000 81be 	beq.w	8004036 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	212c      	movs	r1, #44	; 0x2c
 8003cc0:	fb01 f303 	mul.w	r3, r1, r3
 8003cc4:	4413      	add	r3, r2
 8003cc6:	3354      	adds	r3, #84	; 0x54
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	f083 0301 	eor.w	r3, r3, #1
 8003cce:	b2d8      	uxtb	r0, r3
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	212c      	movs	r1, #44	; 0x2c
 8003cd6:	fb01 f303 	mul.w	r3, r1, r3
 8003cda:	4413      	add	r3, r2
 8003cdc:	3354      	adds	r3, #84	; 0x54
 8003cde:	4602      	mov	r2, r0
 8003ce0:	701a      	strb	r2, [r3, #0]
}
 8003ce2:	e1a8      	b.n	8004036 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	212c      	movs	r1, #44	; 0x2c
 8003cea:	fb01 f303 	mul.w	r3, r1, r3
 8003cee:	4413      	add	r3, r2
 8003cf0:	3354      	adds	r3, #84	; 0x54
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	f083 0301 	eor.w	r3, r3, #1
 8003cf8:	b2d8      	uxtb	r0, r3
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	212c      	movs	r1, #44	; 0x2c
 8003d00:	fb01 f303 	mul.w	r3, r1, r3
 8003d04:	4413      	add	r3, r2
 8003d06:	3354      	adds	r3, #84	; 0x54
 8003d08:	4602      	mov	r2, r0
 8003d0a:	701a      	strb	r2, [r3, #0]
}
 8003d0c:	e193      	b.n	8004036 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	015a      	lsls	r2, r3, #5
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	4413      	add	r3, r2
 8003d16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f003 0302 	and.w	r3, r3, #2
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	f040 8106 	bne.w	8003f32 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	015a      	lsls	r2, r3, #5
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	0151      	lsls	r1, r2, #5
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	440a      	add	r2, r1
 8003d3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d40:	f023 0302 	bic.w	r3, r3, #2
 8003d44:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	212c      	movs	r1, #44	; 0x2c
 8003d4c:	fb01 f303 	mul.w	r3, r1, r3
 8003d50:	4413      	add	r3, r2
 8003d52:	3361      	adds	r3, #97	; 0x61
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d109      	bne.n	8003d6e <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	212c      	movs	r1, #44	; 0x2c
 8003d60:	fb01 f303 	mul.w	r3, r1, r3
 8003d64:	4413      	add	r3, r2
 8003d66:	3360      	adds	r3, #96	; 0x60
 8003d68:	2201      	movs	r2, #1
 8003d6a:	701a      	strb	r2, [r3, #0]
 8003d6c:	e0c9      	b.n	8003f02 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	212c      	movs	r1, #44	; 0x2c
 8003d74:	fb01 f303 	mul.w	r3, r1, r3
 8003d78:	4413      	add	r3, r2
 8003d7a:	3361      	adds	r3, #97	; 0x61
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	2b05      	cmp	r3, #5
 8003d80:	d109      	bne.n	8003d96 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	212c      	movs	r1, #44	; 0x2c
 8003d88:	fb01 f303 	mul.w	r3, r1, r3
 8003d8c:	4413      	add	r3, r2
 8003d8e:	3360      	adds	r3, #96	; 0x60
 8003d90:	2205      	movs	r2, #5
 8003d92:	701a      	strb	r2, [r3, #0]
 8003d94:	e0b5      	b.n	8003f02 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	212c      	movs	r1, #44	; 0x2c
 8003d9c:	fb01 f303 	mul.w	r3, r1, r3
 8003da0:	4413      	add	r3, r2
 8003da2:	3361      	adds	r3, #97	; 0x61
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	2b06      	cmp	r3, #6
 8003da8:	d009      	beq.n	8003dbe <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	212c      	movs	r1, #44	; 0x2c
 8003db0:	fb01 f303 	mul.w	r3, r1, r3
 8003db4:	4413      	add	r3, r2
 8003db6:	3361      	adds	r3, #97	; 0x61
 8003db8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003dba:	2b08      	cmp	r3, #8
 8003dbc:	d150      	bne.n	8003e60 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	212c      	movs	r1, #44	; 0x2c
 8003dc4:	fb01 f303 	mul.w	r3, r1, r3
 8003dc8:	4413      	add	r3, r2
 8003dca:	335c      	adds	r3, #92	; 0x5c
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	1c5a      	adds	r2, r3, #1
 8003dd0:	6879      	ldr	r1, [r7, #4]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	202c      	movs	r0, #44	; 0x2c
 8003dd6:	fb00 f303 	mul.w	r3, r0, r3
 8003dda:	440b      	add	r3, r1
 8003ddc:	335c      	adds	r3, #92	; 0x5c
 8003dde:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	212c      	movs	r1, #44	; 0x2c
 8003de6:	fb01 f303 	mul.w	r3, r1, r3
 8003dea:	4413      	add	r3, r2
 8003dec:	335c      	adds	r3, #92	; 0x5c
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d912      	bls.n	8003e1a <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	212c      	movs	r1, #44	; 0x2c
 8003dfa:	fb01 f303 	mul.w	r3, r1, r3
 8003dfe:	4413      	add	r3, r2
 8003e00:	335c      	adds	r3, #92	; 0x5c
 8003e02:	2200      	movs	r2, #0
 8003e04:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	212c      	movs	r1, #44	; 0x2c
 8003e0c:	fb01 f303 	mul.w	r3, r1, r3
 8003e10:	4413      	add	r3, r2
 8003e12:	3360      	adds	r3, #96	; 0x60
 8003e14:	2204      	movs	r2, #4
 8003e16:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003e18:	e073      	b.n	8003f02 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	212c      	movs	r1, #44	; 0x2c
 8003e20:	fb01 f303 	mul.w	r3, r1, r3
 8003e24:	4413      	add	r3, r2
 8003e26:	3360      	adds	r3, #96	; 0x60
 8003e28:	2202      	movs	r2, #2
 8003e2a:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	015a      	lsls	r2, r3, #5
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	4413      	add	r3, r2
 8003e34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003e42:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e4a:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	015a      	lsls	r2, r3, #5
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	4413      	add	r3, r2
 8003e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e58:	461a      	mov	r2, r3
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003e5e:	e050      	b.n	8003f02 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	212c      	movs	r1, #44	; 0x2c
 8003e66:	fb01 f303 	mul.w	r3, r1, r3
 8003e6a:	4413      	add	r3, r2
 8003e6c:	3361      	adds	r3, #97	; 0x61
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	2b03      	cmp	r3, #3
 8003e72:	d122      	bne.n	8003eba <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	212c      	movs	r1, #44	; 0x2c
 8003e7a:	fb01 f303 	mul.w	r3, r1, r3
 8003e7e:	4413      	add	r3, r2
 8003e80:	3360      	adds	r3, #96	; 0x60
 8003e82:	2202      	movs	r2, #2
 8003e84:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	015a      	lsls	r2, r3, #5
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003e9c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003ea4:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	015a      	lsls	r2, r3, #5
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	4413      	add	r3, r2
 8003eae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	6013      	str	r3, [r2, #0]
 8003eb8:	e023      	b.n	8003f02 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	212c      	movs	r1, #44	; 0x2c
 8003ec0:	fb01 f303 	mul.w	r3, r1, r3
 8003ec4:	4413      	add	r3, r2
 8003ec6:	3361      	adds	r3, #97	; 0x61
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	2b07      	cmp	r3, #7
 8003ecc:	d119      	bne.n	8003f02 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	212c      	movs	r1, #44	; 0x2c
 8003ed4:	fb01 f303 	mul.w	r3, r1, r3
 8003ed8:	4413      	add	r3, r2
 8003eda:	335c      	adds	r3, #92	; 0x5c
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	1c5a      	adds	r2, r3, #1
 8003ee0:	6879      	ldr	r1, [r7, #4]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	202c      	movs	r0, #44	; 0x2c
 8003ee6:	fb00 f303 	mul.w	r3, r0, r3
 8003eea:	440b      	add	r3, r1
 8003eec:	335c      	adds	r3, #92	; 0x5c
 8003eee:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	212c      	movs	r1, #44	; 0x2c
 8003ef6:	fb01 f303 	mul.w	r3, r1, r3
 8003efa:	4413      	add	r3, r2
 8003efc:	3360      	adds	r3, #96	; 0x60
 8003efe:	2204      	movs	r2, #4
 8003f00:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	015a      	lsls	r2, r3, #5
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	4413      	add	r3, r2
 8003f0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f0e:	461a      	mov	r2, r3
 8003f10:	2302      	movs	r3, #2
 8003f12:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	b2d9      	uxtb	r1, r3
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	202c      	movs	r0, #44	; 0x2c
 8003f1e:	fb00 f303 	mul.w	r3, r0, r3
 8003f22:	4413      	add	r3, r2
 8003f24:	3360      	adds	r3, #96	; 0x60
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	461a      	mov	r2, r3
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f007 fa9c 	bl	800b468 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003f30:	e081      	b.n	8004036 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	015a      	lsls	r2, r3, #5
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	4413      	add	r3, r2
 8003f3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f003 0310 	and.w	r3, r3, #16
 8003f44:	2b10      	cmp	r3, #16
 8003f46:	d176      	bne.n	8004036 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	212c      	movs	r1, #44	; 0x2c
 8003f4e:	fb01 f303 	mul.w	r3, r1, r3
 8003f52:	4413      	add	r3, r2
 8003f54:	333f      	adds	r3, #63	; 0x3f
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	2b03      	cmp	r3, #3
 8003f5a:	d121      	bne.n	8003fa0 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	212c      	movs	r1, #44	; 0x2c
 8003f62:	fb01 f303 	mul.w	r3, r1, r3
 8003f66:	4413      	add	r3, r2
 8003f68:	335c      	adds	r3, #92	; 0x5c
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	015a      	lsls	r2, r3, #5
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	4413      	add	r3, r2
 8003f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	0151      	lsls	r1, r2, #5
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	440a      	add	r2, r1
 8003f84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f88:	f043 0302 	orr.w	r3, r3, #2
 8003f8c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	b2d2      	uxtb	r2, r2
 8003f96:	4611      	mov	r1, r2
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f003 ff3a 	bl	8007e12 <USB_HC_Halt>
 8003f9e:	e041      	b.n	8004024 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	212c      	movs	r1, #44	; 0x2c
 8003fa6:	fb01 f303 	mul.w	r3, r1, r3
 8003faa:	4413      	add	r3, r2
 8003fac:	333f      	adds	r3, #63	; 0x3f
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d009      	beq.n	8003fc8 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	212c      	movs	r1, #44	; 0x2c
 8003fba:	fb01 f303 	mul.w	r3, r1, r3
 8003fbe:	4413      	add	r3, r2
 8003fc0:	333f      	adds	r3, #63	; 0x3f
 8003fc2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d12d      	bne.n	8004024 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	212c      	movs	r1, #44	; 0x2c
 8003fce:	fb01 f303 	mul.w	r3, r1, r3
 8003fd2:	4413      	add	r3, r2
 8003fd4:	335c      	adds	r3, #92	; 0x5c
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d120      	bne.n	8004024 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	212c      	movs	r1, #44	; 0x2c
 8003fe8:	fb01 f303 	mul.w	r3, r1, r3
 8003fec:	4413      	add	r3, r2
 8003fee:	3361      	adds	r3, #97	; 0x61
 8003ff0:	2203      	movs	r2, #3
 8003ff2:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	015a      	lsls	r2, r3, #5
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	0151      	lsls	r1, r2, #5
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	440a      	add	r2, r1
 800400a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800400e:	f043 0302 	orr.w	r3, r3, #2
 8004012:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	b2d2      	uxtb	r2, r2
 800401c:	4611      	mov	r1, r2
 800401e:	4618      	mov	r0, r3
 8004020:	f003 fef7 	bl	8007e12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	015a      	lsls	r2, r3, #5
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	4413      	add	r3, r2
 800402c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004030:	461a      	mov	r2, r3
 8004032:	2310      	movs	r3, #16
 8004034:	6093      	str	r3, [r2, #8]
}
 8004036:	bf00      	nop
 8004038:	3718      	adds	r7, #24
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800403e:	b580      	push	{r7, lr}
 8004040:	b088      	sub	sp, #32
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
 8004046:	460b      	mov	r3, r1
 8004048:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004054:	78fb      	ldrb	r3, [r7, #3]
 8004056:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	015a      	lsls	r2, r3, #5
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	4413      	add	r3, r2
 8004060:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f003 0304 	and.w	r3, r3, #4
 800406a:	2b04      	cmp	r3, #4
 800406c:	d119      	bne.n	80040a2 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	015a      	lsls	r2, r3, #5
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	4413      	add	r3, r2
 8004076:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800407a:	461a      	mov	r2, r3
 800407c:	2304      	movs	r3, #4
 800407e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	015a      	lsls	r2, r3, #5
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	4413      	add	r3, r2
 8004088:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	697a      	ldr	r2, [r7, #20]
 8004090:	0151      	lsls	r1, r2, #5
 8004092:	69ba      	ldr	r2, [r7, #24]
 8004094:	440a      	add	r2, r1
 8004096:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800409a:	f043 0302 	orr.w	r3, r3, #2
 800409e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80040a0:	e3ca      	b.n	8004838 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	015a      	lsls	r2, r3, #5
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	4413      	add	r3, r2
 80040aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f003 0320 	and.w	r3, r3, #32
 80040b4:	2b20      	cmp	r3, #32
 80040b6:	d13e      	bne.n	8004136 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	015a      	lsls	r2, r3, #5
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	4413      	add	r3, r2
 80040c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040c4:	461a      	mov	r2, r3
 80040c6:	2320      	movs	r3, #32
 80040c8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	212c      	movs	r1, #44	; 0x2c
 80040d0:	fb01 f303 	mul.w	r3, r1, r3
 80040d4:	4413      	add	r3, r2
 80040d6:	333d      	adds	r3, #61	; 0x3d
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	f040 83ac 	bne.w	8004838 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	212c      	movs	r1, #44	; 0x2c
 80040e6:	fb01 f303 	mul.w	r3, r1, r3
 80040ea:	4413      	add	r3, r2
 80040ec:	333d      	adds	r3, #61	; 0x3d
 80040ee:	2200      	movs	r2, #0
 80040f0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	212c      	movs	r1, #44	; 0x2c
 80040f8:	fb01 f303 	mul.w	r3, r1, r3
 80040fc:	4413      	add	r3, r2
 80040fe:	3360      	adds	r3, #96	; 0x60
 8004100:	2202      	movs	r2, #2
 8004102:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	015a      	lsls	r2, r3, #5
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	4413      	add	r3, r2
 800410c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	697a      	ldr	r2, [r7, #20]
 8004114:	0151      	lsls	r1, r2, #5
 8004116:	69ba      	ldr	r2, [r7, #24]
 8004118:	440a      	add	r2, r1
 800411a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800411e:	f043 0302 	orr.w	r3, r3, #2
 8004122:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	697a      	ldr	r2, [r7, #20]
 800412a:	b2d2      	uxtb	r2, r2
 800412c:	4611      	mov	r1, r2
 800412e:	4618      	mov	r0, r3
 8004130:	f003 fe6f 	bl	8007e12 <USB_HC_Halt>
}
 8004134:	e380      	b.n	8004838 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	015a      	lsls	r2, r3, #5
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	4413      	add	r3, r2
 800413e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004148:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800414c:	d122      	bne.n	8004194 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	015a      	lsls	r2, r3, #5
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	4413      	add	r3, r2
 8004156:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	697a      	ldr	r2, [r7, #20]
 800415e:	0151      	lsls	r1, r2, #5
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	440a      	add	r2, r1
 8004164:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004168:	f043 0302 	orr.w	r3, r3, #2
 800416c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	b2d2      	uxtb	r2, r2
 8004176:	4611      	mov	r1, r2
 8004178:	4618      	mov	r0, r3
 800417a:	f003 fe4a 	bl	8007e12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	015a      	lsls	r2, r3, #5
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	4413      	add	r3, r2
 8004186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800418a:	461a      	mov	r2, r3
 800418c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004190:	6093      	str	r3, [r2, #8]
}
 8004192:	e351      	b.n	8004838 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	015a      	lsls	r2, r3, #5
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	4413      	add	r3, r2
 800419c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d150      	bne.n	800424c <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	212c      	movs	r1, #44	; 0x2c
 80041b0:	fb01 f303 	mul.w	r3, r1, r3
 80041b4:	4413      	add	r3, r2
 80041b6:	335c      	adds	r3, #92	; 0x5c
 80041b8:	2200      	movs	r2, #0
 80041ba:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	015a      	lsls	r2, r3, #5
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	4413      	add	r3, r2
 80041c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ce:	2b40      	cmp	r3, #64	; 0x40
 80041d0:	d111      	bne.n	80041f6 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	212c      	movs	r1, #44	; 0x2c
 80041d8:	fb01 f303 	mul.w	r3, r1, r3
 80041dc:	4413      	add	r3, r2
 80041de:	333d      	adds	r3, #61	; 0x3d
 80041e0:	2201      	movs	r2, #1
 80041e2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	015a      	lsls	r2, r3, #5
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	4413      	add	r3, r2
 80041ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041f0:	461a      	mov	r2, r3
 80041f2:	2340      	movs	r3, #64	; 0x40
 80041f4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	015a      	lsls	r2, r3, #5
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	4413      	add	r3, r2
 80041fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	0151      	lsls	r1, r2, #5
 8004208:	69ba      	ldr	r2, [r7, #24]
 800420a:	440a      	add	r2, r1
 800420c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004210:	f043 0302 	orr.w	r3, r3, #2
 8004214:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	697a      	ldr	r2, [r7, #20]
 800421c:	b2d2      	uxtb	r2, r2
 800421e:	4611      	mov	r1, r2
 8004220:	4618      	mov	r0, r3
 8004222:	f003 fdf6 	bl	8007e12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	015a      	lsls	r2, r3, #5
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	4413      	add	r3, r2
 800422e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004232:	461a      	mov	r2, r3
 8004234:	2301      	movs	r3, #1
 8004236:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	212c      	movs	r1, #44	; 0x2c
 800423e:	fb01 f303 	mul.w	r3, r1, r3
 8004242:	4413      	add	r3, r2
 8004244:	3361      	adds	r3, #97	; 0x61
 8004246:	2201      	movs	r2, #1
 8004248:	701a      	strb	r2, [r3, #0]
}
 800424a:	e2f5      	b.n	8004838 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	015a      	lsls	r2, r3, #5
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	4413      	add	r3, r2
 8004254:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800425e:	2b40      	cmp	r3, #64	; 0x40
 8004260:	d13c      	bne.n	80042dc <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	212c      	movs	r1, #44	; 0x2c
 8004268:	fb01 f303 	mul.w	r3, r1, r3
 800426c:	4413      	add	r3, r2
 800426e:	3361      	adds	r3, #97	; 0x61
 8004270:	2204      	movs	r2, #4
 8004272:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	212c      	movs	r1, #44	; 0x2c
 800427a:	fb01 f303 	mul.w	r3, r1, r3
 800427e:	4413      	add	r3, r2
 8004280:	333d      	adds	r3, #61	; 0x3d
 8004282:	2201      	movs	r2, #1
 8004284:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	212c      	movs	r1, #44	; 0x2c
 800428c:	fb01 f303 	mul.w	r3, r1, r3
 8004290:	4413      	add	r3, r2
 8004292:	335c      	adds	r3, #92	; 0x5c
 8004294:	2200      	movs	r2, #0
 8004296:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	015a      	lsls	r2, r3, #5
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	4413      	add	r3, r2
 80042a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	697a      	ldr	r2, [r7, #20]
 80042a8:	0151      	lsls	r1, r2, #5
 80042aa:	69ba      	ldr	r2, [r7, #24]
 80042ac:	440a      	add	r2, r1
 80042ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042b2:	f043 0302 	orr.w	r3, r3, #2
 80042b6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	697a      	ldr	r2, [r7, #20]
 80042be:	b2d2      	uxtb	r2, r2
 80042c0:	4611      	mov	r1, r2
 80042c2:	4618      	mov	r0, r3
 80042c4:	f003 fda5 	bl	8007e12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	015a      	lsls	r2, r3, #5
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	4413      	add	r3, r2
 80042d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042d4:	461a      	mov	r2, r3
 80042d6:	2340      	movs	r3, #64	; 0x40
 80042d8:	6093      	str	r3, [r2, #8]
}
 80042da:	e2ad      	b.n	8004838 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	015a      	lsls	r2, r3, #5
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	4413      	add	r3, r2
 80042e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f003 0308 	and.w	r3, r3, #8
 80042ee:	2b08      	cmp	r3, #8
 80042f0:	d12a      	bne.n	8004348 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	015a      	lsls	r2, r3, #5
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	4413      	add	r3, r2
 80042fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042fe:	461a      	mov	r2, r3
 8004300:	2308      	movs	r3, #8
 8004302:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	015a      	lsls	r2, r3, #5
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	4413      	add	r3, r2
 800430c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	697a      	ldr	r2, [r7, #20]
 8004314:	0151      	lsls	r1, r2, #5
 8004316:	69ba      	ldr	r2, [r7, #24]
 8004318:	440a      	add	r2, r1
 800431a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800431e:	f043 0302 	orr.w	r3, r3, #2
 8004322:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	697a      	ldr	r2, [r7, #20]
 800432a:	b2d2      	uxtb	r2, r2
 800432c:	4611      	mov	r1, r2
 800432e:	4618      	mov	r0, r3
 8004330:	f003 fd6f 	bl	8007e12 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	212c      	movs	r1, #44	; 0x2c
 800433a:	fb01 f303 	mul.w	r3, r1, r3
 800433e:	4413      	add	r3, r2
 8004340:	3361      	adds	r3, #97	; 0x61
 8004342:	2205      	movs	r2, #5
 8004344:	701a      	strb	r2, [r3, #0]
}
 8004346:	e277      	b.n	8004838 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	015a      	lsls	r2, r3, #5
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	4413      	add	r3, r2
 8004350:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f003 0310 	and.w	r3, r3, #16
 800435a:	2b10      	cmp	r3, #16
 800435c:	d150      	bne.n	8004400 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	212c      	movs	r1, #44	; 0x2c
 8004364:	fb01 f303 	mul.w	r3, r1, r3
 8004368:	4413      	add	r3, r2
 800436a:	335c      	adds	r3, #92	; 0x5c
 800436c:	2200      	movs	r2, #0
 800436e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	212c      	movs	r1, #44	; 0x2c
 8004376:	fb01 f303 	mul.w	r3, r1, r3
 800437a:	4413      	add	r3, r2
 800437c:	3361      	adds	r3, #97	; 0x61
 800437e:	2203      	movs	r2, #3
 8004380:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	212c      	movs	r1, #44	; 0x2c
 8004388:	fb01 f303 	mul.w	r3, r1, r3
 800438c:	4413      	add	r3, r2
 800438e:	333d      	adds	r3, #61	; 0x3d
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d112      	bne.n	80043bc <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	212c      	movs	r1, #44	; 0x2c
 800439c:	fb01 f303 	mul.w	r3, r1, r3
 80043a0:	4413      	add	r3, r2
 80043a2:	333c      	adds	r3, #60	; 0x3c
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d108      	bne.n	80043bc <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	212c      	movs	r1, #44	; 0x2c
 80043b0:	fb01 f303 	mul.w	r3, r1, r3
 80043b4:	4413      	add	r3, r2
 80043b6:	333d      	adds	r3, #61	; 0x3d
 80043b8:	2201      	movs	r2, #1
 80043ba:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	015a      	lsls	r2, r3, #5
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	4413      	add	r3, r2
 80043c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	697a      	ldr	r2, [r7, #20]
 80043cc:	0151      	lsls	r1, r2, #5
 80043ce:	69ba      	ldr	r2, [r7, #24]
 80043d0:	440a      	add	r2, r1
 80043d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043d6:	f043 0302 	orr.w	r3, r3, #2
 80043da:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	b2d2      	uxtb	r2, r2
 80043e4:	4611      	mov	r1, r2
 80043e6:	4618      	mov	r0, r3
 80043e8:	f003 fd13 	bl	8007e12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	015a      	lsls	r2, r3, #5
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	4413      	add	r3, r2
 80043f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043f8:	461a      	mov	r2, r3
 80043fa:	2310      	movs	r3, #16
 80043fc:	6093      	str	r3, [r2, #8]
}
 80043fe:	e21b      	b.n	8004838 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	015a      	lsls	r2, r3, #5
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	4413      	add	r3, r2
 8004408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004412:	2b80      	cmp	r3, #128	; 0x80
 8004414:	d174      	bne.n	8004500 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d121      	bne.n	8004462 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	212c      	movs	r1, #44	; 0x2c
 8004424:	fb01 f303 	mul.w	r3, r1, r3
 8004428:	4413      	add	r3, r2
 800442a:	3361      	adds	r3, #97	; 0x61
 800442c:	2206      	movs	r2, #6
 800442e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	015a      	lsls	r2, r3, #5
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	4413      	add	r3, r2
 8004438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	0151      	lsls	r1, r2, #5
 8004442:	69ba      	ldr	r2, [r7, #24]
 8004444:	440a      	add	r2, r1
 8004446:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800444a:	f043 0302 	orr.w	r3, r3, #2
 800444e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	697a      	ldr	r2, [r7, #20]
 8004456:	b2d2      	uxtb	r2, r2
 8004458:	4611      	mov	r1, r2
 800445a:	4618      	mov	r0, r3
 800445c:	f003 fcd9 	bl	8007e12 <USB_HC_Halt>
 8004460:	e044      	b.n	80044ec <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	212c      	movs	r1, #44	; 0x2c
 8004468:	fb01 f303 	mul.w	r3, r1, r3
 800446c:	4413      	add	r3, r2
 800446e:	335c      	adds	r3, #92	; 0x5c
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	1c5a      	adds	r2, r3, #1
 8004474:	6879      	ldr	r1, [r7, #4]
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	202c      	movs	r0, #44	; 0x2c
 800447a:	fb00 f303 	mul.w	r3, r0, r3
 800447e:	440b      	add	r3, r1
 8004480:	335c      	adds	r3, #92	; 0x5c
 8004482:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	212c      	movs	r1, #44	; 0x2c
 800448a:	fb01 f303 	mul.w	r3, r1, r3
 800448e:	4413      	add	r3, r2
 8004490:	335c      	adds	r3, #92	; 0x5c
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2b02      	cmp	r3, #2
 8004496:	d920      	bls.n	80044da <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	212c      	movs	r1, #44	; 0x2c
 800449e:	fb01 f303 	mul.w	r3, r1, r3
 80044a2:	4413      	add	r3, r2
 80044a4:	335c      	adds	r3, #92	; 0x5c
 80044a6:	2200      	movs	r2, #0
 80044a8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	212c      	movs	r1, #44	; 0x2c
 80044b0:	fb01 f303 	mul.w	r3, r1, r3
 80044b4:	4413      	add	r3, r2
 80044b6:	3360      	adds	r3, #96	; 0x60
 80044b8:	2204      	movs	r2, #4
 80044ba:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	b2d9      	uxtb	r1, r3
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	202c      	movs	r0, #44	; 0x2c
 80044c6:	fb00 f303 	mul.w	r3, r0, r3
 80044ca:	4413      	add	r3, r2
 80044cc:	3360      	adds	r3, #96	; 0x60
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	461a      	mov	r2, r3
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f006 ffc8 	bl	800b468 <HAL_HCD_HC_NotifyURBChange_Callback>
 80044d8:	e008      	b.n	80044ec <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	212c      	movs	r1, #44	; 0x2c
 80044e0:	fb01 f303 	mul.w	r3, r1, r3
 80044e4:	4413      	add	r3, r2
 80044e6:	3360      	adds	r3, #96	; 0x60
 80044e8:	2202      	movs	r2, #2
 80044ea:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	015a      	lsls	r2, r3, #5
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	4413      	add	r3, r2
 80044f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044f8:	461a      	mov	r2, r3
 80044fa:	2380      	movs	r3, #128	; 0x80
 80044fc:	6093      	str	r3, [r2, #8]
}
 80044fe:	e19b      	b.n	8004838 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	015a      	lsls	r2, r3, #5
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	4413      	add	r3, r2
 8004508:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004512:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004516:	d134      	bne.n	8004582 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	015a      	lsls	r2, r3, #5
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	4413      	add	r3, r2
 8004520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	697a      	ldr	r2, [r7, #20]
 8004528:	0151      	lsls	r1, r2, #5
 800452a:	69ba      	ldr	r2, [r7, #24]
 800452c:	440a      	add	r2, r1
 800452e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004532:	f043 0302 	orr.w	r3, r3, #2
 8004536:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	697a      	ldr	r2, [r7, #20]
 800453e:	b2d2      	uxtb	r2, r2
 8004540:	4611      	mov	r1, r2
 8004542:	4618      	mov	r0, r3
 8004544:	f003 fc65 	bl	8007e12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	015a      	lsls	r2, r3, #5
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	4413      	add	r3, r2
 8004550:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004554:	461a      	mov	r2, r3
 8004556:	2310      	movs	r3, #16
 8004558:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	015a      	lsls	r2, r3, #5
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	4413      	add	r3, r2
 8004562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004566:	461a      	mov	r2, r3
 8004568:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800456c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	212c      	movs	r1, #44	; 0x2c
 8004574:	fb01 f303 	mul.w	r3, r1, r3
 8004578:	4413      	add	r3, r2
 800457a:	3361      	adds	r3, #97	; 0x61
 800457c:	2208      	movs	r2, #8
 800457e:	701a      	strb	r2, [r3, #0]
}
 8004580:	e15a      	b.n	8004838 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	015a      	lsls	r2, r3, #5
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	4413      	add	r3, r2
 800458a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f003 0302 	and.w	r3, r3, #2
 8004594:	2b02      	cmp	r3, #2
 8004596:	f040 814f 	bne.w	8004838 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	015a      	lsls	r2, r3, #5
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	4413      	add	r3, r2
 80045a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	697a      	ldr	r2, [r7, #20]
 80045aa:	0151      	lsls	r1, r2, #5
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	440a      	add	r2, r1
 80045b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80045b4:	f023 0302 	bic.w	r3, r3, #2
 80045b8:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	212c      	movs	r1, #44	; 0x2c
 80045c0:	fb01 f303 	mul.w	r3, r1, r3
 80045c4:	4413      	add	r3, r2
 80045c6:	3361      	adds	r3, #97	; 0x61
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d17d      	bne.n	80046ca <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	212c      	movs	r1, #44	; 0x2c
 80045d4:	fb01 f303 	mul.w	r3, r1, r3
 80045d8:	4413      	add	r3, r2
 80045da:	3360      	adds	r3, #96	; 0x60
 80045dc:	2201      	movs	r2, #1
 80045de:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	212c      	movs	r1, #44	; 0x2c
 80045e6:	fb01 f303 	mul.w	r3, r1, r3
 80045ea:	4413      	add	r3, r2
 80045ec:	333f      	adds	r3, #63	; 0x3f
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d00a      	beq.n	800460a <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	212c      	movs	r1, #44	; 0x2c
 80045fa:	fb01 f303 	mul.w	r3, r1, r3
 80045fe:	4413      	add	r3, r2
 8004600:	333f      	adds	r3, #63	; 0x3f
 8004602:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004604:	2b03      	cmp	r3, #3
 8004606:	f040 8100 	bne.w	800480a <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d113      	bne.n	800463a <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	212c      	movs	r1, #44	; 0x2c
 8004618:	fb01 f303 	mul.w	r3, r1, r3
 800461c:	4413      	add	r3, r2
 800461e:	3355      	adds	r3, #85	; 0x55
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	f083 0301 	eor.w	r3, r3, #1
 8004626:	b2d8      	uxtb	r0, r3
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	212c      	movs	r1, #44	; 0x2c
 800462e:	fb01 f303 	mul.w	r3, r1, r3
 8004632:	4413      	add	r3, r2
 8004634:	3355      	adds	r3, #85	; 0x55
 8004636:	4602      	mov	r2, r0
 8004638:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	2b01      	cmp	r3, #1
 8004640:	f040 80e3 	bne.w	800480a <HCD_HC_OUT_IRQHandler+0x7cc>
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	212c      	movs	r1, #44	; 0x2c
 800464a:	fb01 f303 	mul.w	r3, r1, r3
 800464e:	4413      	add	r3, r2
 8004650:	334c      	adds	r3, #76	; 0x4c
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	f000 80d8 	beq.w	800480a <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	212c      	movs	r1, #44	; 0x2c
 8004660:	fb01 f303 	mul.w	r3, r1, r3
 8004664:	4413      	add	r3, r2
 8004666:	334c      	adds	r3, #76	; 0x4c
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	6879      	ldr	r1, [r7, #4]
 800466c:	697a      	ldr	r2, [r7, #20]
 800466e:	202c      	movs	r0, #44	; 0x2c
 8004670:	fb00 f202 	mul.w	r2, r0, r2
 8004674:	440a      	add	r2, r1
 8004676:	3240      	adds	r2, #64	; 0x40
 8004678:	8812      	ldrh	r2, [r2, #0]
 800467a:	4413      	add	r3, r2
 800467c:	3b01      	subs	r3, #1
 800467e:	6879      	ldr	r1, [r7, #4]
 8004680:	697a      	ldr	r2, [r7, #20]
 8004682:	202c      	movs	r0, #44	; 0x2c
 8004684:	fb00 f202 	mul.w	r2, r0, r2
 8004688:	440a      	add	r2, r1
 800468a:	3240      	adds	r2, #64	; 0x40
 800468c:	8812      	ldrh	r2, [r2, #0]
 800468e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004692:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f003 0301 	and.w	r3, r3, #1
 800469a:	2b00      	cmp	r3, #0
 800469c:	f000 80b5 	beq.w	800480a <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	212c      	movs	r1, #44	; 0x2c
 80046a6:	fb01 f303 	mul.w	r3, r1, r3
 80046aa:	4413      	add	r3, r2
 80046ac:	3355      	adds	r3, #85	; 0x55
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	f083 0301 	eor.w	r3, r3, #1
 80046b4:	b2d8      	uxtb	r0, r3
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	212c      	movs	r1, #44	; 0x2c
 80046bc:	fb01 f303 	mul.w	r3, r1, r3
 80046c0:	4413      	add	r3, r2
 80046c2:	3355      	adds	r3, #85	; 0x55
 80046c4:	4602      	mov	r2, r0
 80046c6:	701a      	strb	r2, [r3, #0]
 80046c8:	e09f      	b.n	800480a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	212c      	movs	r1, #44	; 0x2c
 80046d0:	fb01 f303 	mul.w	r3, r1, r3
 80046d4:	4413      	add	r3, r2
 80046d6:	3361      	adds	r3, #97	; 0x61
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	2b03      	cmp	r3, #3
 80046dc:	d109      	bne.n	80046f2 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	212c      	movs	r1, #44	; 0x2c
 80046e4:	fb01 f303 	mul.w	r3, r1, r3
 80046e8:	4413      	add	r3, r2
 80046ea:	3360      	adds	r3, #96	; 0x60
 80046ec:	2202      	movs	r2, #2
 80046ee:	701a      	strb	r2, [r3, #0]
 80046f0:	e08b      	b.n	800480a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	212c      	movs	r1, #44	; 0x2c
 80046f8:	fb01 f303 	mul.w	r3, r1, r3
 80046fc:	4413      	add	r3, r2
 80046fe:	3361      	adds	r3, #97	; 0x61
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	2b04      	cmp	r3, #4
 8004704:	d109      	bne.n	800471a <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	212c      	movs	r1, #44	; 0x2c
 800470c:	fb01 f303 	mul.w	r3, r1, r3
 8004710:	4413      	add	r3, r2
 8004712:	3360      	adds	r3, #96	; 0x60
 8004714:	2202      	movs	r2, #2
 8004716:	701a      	strb	r2, [r3, #0]
 8004718:	e077      	b.n	800480a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	212c      	movs	r1, #44	; 0x2c
 8004720:	fb01 f303 	mul.w	r3, r1, r3
 8004724:	4413      	add	r3, r2
 8004726:	3361      	adds	r3, #97	; 0x61
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	2b05      	cmp	r3, #5
 800472c:	d109      	bne.n	8004742 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	212c      	movs	r1, #44	; 0x2c
 8004734:	fb01 f303 	mul.w	r3, r1, r3
 8004738:	4413      	add	r3, r2
 800473a:	3360      	adds	r3, #96	; 0x60
 800473c:	2205      	movs	r2, #5
 800473e:	701a      	strb	r2, [r3, #0]
 8004740:	e063      	b.n	800480a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	212c      	movs	r1, #44	; 0x2c
 8004748:	fb01 f303 	mul.w	r3, r1, r3
 800474c:	4413      	add	r3, r2
 800474e:	3361      	adds	r3, #97	; 0x61
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	2b06      	cmp	r3, #6
 8004754:	d009      	beq.n	800476a <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	212c      	movs	r1, #44	; 0x2c
 800475c:	fb01 f303 	mul.w	r3, r1, r3
 8004760:	4413      	add	r3, r2
 8004762:	3361      	adds	r3, #97	; 0x61
 8004764:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004766:	2b08      	cmp	r3, #8
 8004768:	d14f      	bne.n	800480a <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	212c      	movs	r1, #44	; 0x2c
 8004770:	fb01 f303 	mul.w	r3, r1, r3
 8004774:	4413      	add	r3, r2
 8004776:	335c      	adds	r3, #92	; 0x5c
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	1c5a      	adds	r2, r3, #1
 800477c:	6879      	ldr	r1, [r7, #4]
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	202c      	movs	r0, #44	; 0x2c
 8004782:	fb00 f303 	mul.w	r3, r0, r3
 8004786:	440b      	add	r3, r1
 8004788:	335c      	adds	r3, #92	; 0x5c
 800478a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	212c      	movs	r1, #44	; 0x2c
 8004792:	fb01 f303 	mul.w	r3, r1, r3
 8004796:	4413      	add	r3, r2
 8004798:	335c      	adds	r3, #92	; 0x5c
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2b02      	cmp	r3, #2
 800479e:	d912      	bls.n	80047c6 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	212c      	movs	r1, #44	; 0x2c
 80047a6:	fb01 f303 	mul.w	r3, r1, r3
 80047aa:	4413      	add	r3, r2
 80047ac:	335c      	adds	r3, #92	; 0x5c
 80047ae:	2200      	movs	r2, #0
 80047b0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	212c      	movs	r1, #44	; 0x2c
 80047b8:	fb01 f303 	mul.w	r3, r1, r3
 80047bc:	4413      	add	r3, r2
 80047be:	3360      	adds	r3, #96	; 0x60
 80047c0:	2204      	movs	r2, #4
 80047c2:	701a      	strb	r2, [r3, #0]
 80047c4:	e021      	b.n	800480a <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	212c      	movs	r1, #44	; 0x2c
 80047cc:	fb01 f303 	mul.w	r3, r1, r3
 80047d0:	4413      	add	r3, r2
 80047d2:	3360      	adds	r3, #96	; 0x60
 80047d4:	2202      	movs	r2, #2
 80047d6:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	015a      	lsls	r2, r3, #5
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	4413      	add	r3, r2
 80047e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80047ee:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80047f6:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	015a      	lsls	r2, r3, #5
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	4413      	add	r3, r2
 8004800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004804:	461a      	mov	r2, r3
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	015a      	lsls	r2, r3, #5
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	4413      	add	r3, r2
 8004812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004816:	461a      	mov	r2, r3
 8004818:	2302      	movs	r3, #2
 800481a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	b2d9      	uxtb	r1, r3
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	202c      	movs	r0, #44	; 0x2c
 8004826:	fb00 f303 	mul.w	r3, r0, r3
 800482a:	4413      	add	r3, r2
 800482c:	3360      	adds	r3, #96	; 0x60
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	461a      	mov	r2, r3
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f006 fe18 	bl	800b468 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004838:	bf00      	nop
 800483a:	3720      	adds	r7, #32
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b08a      	sub	sp, #40	; 0x28
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800484e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004850:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	6a1b      	ldr	r3, [r3, #32]
 8004858:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	f003 030f 	and.w	r3, r3, #15
 8004860:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	0c5b      	lsrs	r3, r3, #17
 8004866:	f003 030f 	and.w	r3, r3, #15
 800486a:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	091b      	lsrs	r3, r3, #4
 8004870:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004874:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	2b02      	cmp	r3, #2
 800487a:	d004      	beq.n	8004886 <HCD_RXQLVL_IRQHandler+0x46>
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	2b05      	cmp	r3, #5
 8004880:	f000 80a9 	beq.w	80049d6 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004884:	e0aa      	b.n	80049dc <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	2b00      	cmp	r3, #0
 800488a:	f000 80a6 	beq.w	80049da <HCD_RXQLVL_IRQHandler+0x19a>
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	212c      	movs	r1, #44	; 0x2c
 8004894:	fb01 f303 	mul.w	r3, r1, r3
 8004898:	4413      	add	r3, r2
 800489a:	3344      	adds	r3, #68	; 0x44
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f000 809b 	beq.w	80049da <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	212c      	movs	r1, #44	; 0x2c
 80048aa:	fb01 f303 	mul.w	r3, r1, r3
 80048ae:	4413      	add	r3, r2
 80048b0:	3350      	adds	r3, #80	; 0x50
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	441a      	add	r2, r3
 80048b8:	6879      	ldr	r1, [r7, #4]
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	202c      	movs	r0, #44	; 0x2c
 80048be:	fb00 f303 	mul.w	r3, r0, r3
 80048c2:	440b      	add	r3, r1
 80048c4:	334c      	adds	r3, #76	; 0x4c
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d87a      	bhi.n	80049c2 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6818      	ldr	r0, [r3, #0]
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	212c      	movs	r1, #44	; 0x2c
 80048d6:	fb01 f303 	mul.w	r3, r1, r3
 80048da:	4413      	add	r3, r2
 80048dc:	3344      	adds	r3, #68	; 0x44
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	693a      	ldr	r2, [r7, #16]
 80048e2:	b292      	uxth	r2, r2
 80048e4:	4619      	mov	r1, r3
 80048e6:	f002 fe0d 	bl	8007504 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	212c      	movs	r1, #44	; 0x2c
 80048f0:	fb01 f303 	mul.w	r3, r1, r3
 80048f4:	4413      	add	r3, r2
 80048f6:	3344      	adds	r3, #68	; 0x44
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	441a      	add	r2, r3
 80048fe:	6879      	ldr	r1, [r7, #4]
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	202c      	movs	r0, #44	; 0x2c
 8004904:	fb00 f303 	mul.w	r3, r0, r3
 8004908:	440b      	add	r3, r1
 800490a:	3344      	adds	r3, #68	; 0x44
 800490c:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	212c      	movs	r1, #44	; 0x2c
 8004914:	fb01 f303 	mul.w	r3, r1, r3
 8004918:	4413      	add	r3, r2
 800491a:	3350      	adds	r3, #80	; 0x50
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	441a      	add	r2, r3
 8004922:	6879      	ldr	r1, [r7, #4]
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	202c      	movs	r0, #44	; 0x2c
 8004928:	fb00 f303 	mul.w	r3, r0, r3
 800492c:	440b      	add	r3, r1
 800492e:	3350      	adds	r3, #80	; 0x50
 8004930:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	015a      	lsls	r2, r3, #5
 8004936:	6a3b      	ldr	r3, [r7, #32]
 8004938:	4413      	add	r3, r2
 800493a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	0cdb      	lsrs	r3, r3, #19
 8004942:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004946:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	212c      	movs	r1, #44	; 0x2c
 800494e:	fb01 f303 	mul.w	r3, r1, r3
 8004952:	4413      	add	r3, r2
 8004954:	3340      	adds	r3, #64	; 0x40
 8004956:	881b      	ldrh	r3, [r3, #0]
 8004958:	461a      	mov	r2, r3
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	4293      	cmp	r3, r2
 800495e:	d13c      	bne.n	80049da <HCD_RXQLVL_IRQHandler+0x19a>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d039      	beq.n	80049da <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	015a      	lsls	r2, r3, #5
 800496a:	6a3b      	ldr	r3, [r7, #32]
 800496c:	4413      	add	r3, r2
 800496e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800497c:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004984:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	015a      	lsls	r2, r3, #5
 800498a:	6a3b      	ldr	r3, [r7, #32]
 800498c:	4413      	add	r3, r2
 800498e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004992:	461a      	mov	r2, r3
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	212c      	movs	r1, #44	; 0x2c
 800499e:	fb01 f303 	mul.w	r3, r1, r3
 80049a2:	4413      	add	r3, r2
 80049a4:	3354      	adds	r3, #84	; 0x54
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	f083 0301 	eor.w	r3, r3, #1
 80049ac:	b2d8      	uxtb	r0, r3
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	212c      	movs	r1, #44	; 0x2c
 80049b4:	fb01 f303 	mul.w	r3, r1, r3
 80049b8:	4413      	add	r3, r2
 80049ba:	3354      	adds	r3, #84	; 0x54
 80049bc:	4602      	mov	r2, r0
 80049be:	701a      	strb	r2, [r3, #0]
      break;
 80049c0:	e00b      	b.n	80049da <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	212c      	movs	r1, #44	; 0x2c
 80049c8:	fb01 f303 	mul.w	r3, r1, r3
 80049cc:	4413      	add	r3, r2
 80049ce:	3360      	adds	r3, #96	; 0x60
 80049d0:	2204      	movs	r2, #4
 80049d2:	701a      	strb	r2, [r3, #0]
      break;
 80049d4:	e001      	b.n	80049da <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80049d6:	bf00      	nop
 80049d8:	e000      	b.n	80049dc <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80049da:	bf00      	nop
  }
}
 80049dc:	bf00      	nop
 80049de:	3728      	adds	r7, #40	; 0x28
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b086      	sub	sp, #24
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004a10:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f003 0302 	and.w	r3, r3, #2
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d10b      	bne.n	8004a34 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f003 0301 	and.w	r3, r3, #1
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d102      	bne.n	8004a2c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f006 fd02 	bl	800b430 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	f043 0302 	orr.w	r3, r3, #2
 8004a32:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f003 0308 	and.w	r3, r3, #8
 8004a3a:	2b08      	cmp	r3, #8
 8004a3c:	d132      	bne.n	8004aa4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	f043 0308 	orr.w	r3, r3, #8
 8004a44:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f003 0304 	and.w	r3, r3, #4
 8004a4c:	2b04      	cmp	r3, #4
 8004a4e:	d126      	bne.n	8004a9e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	699b      	ldr	r3, [r3, #24]
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d113      	bne.n	8004a80 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004a5e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a62:	d106      	bne.n	8004a72 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2102      	movs	r1, #2
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f002 feaa 	bl	80077c4 <USB_InitFSLSPClkSel>
 8004a70:	e011      	b.n	8004a96 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2101      	movs	r1, #1
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f002 fea3 	bl	80077c4 <USB_InitFSLSPClkSel>
 8004a7e:	e00a      	b.n	8004a96 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d106      	bne.n	8004a96 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a8e:	461a      	mov	r2, r3
 8004a90:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004a94:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f006 fcf4 	bl	800b484 <HAL_HCD_PortEnabled_Callback>
 8004a9c:	e002      	b.n	8004aa4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f006 fcfe 	bl	800b4a0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f003 0320 	and.w	r3, r3, #32
 8004aaa:	2b20      	cmp	r3, #32
 8004aac:	d103      	bne.n	8004ab6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	f043 0320 	orr.w	r3, r3, #32
 8004ab4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004abc:	461a      	mov	r2, r3
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	6013      	str	r3, [r2, #0]
}
 8004ac2:	bf00      	nop
 8004ac4:	3718      	adds	r7, #24
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
	...

08004acc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d101      	bne.n	8004ade <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e12b      	b.n	8004d36 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d106      	bne.n	8004af8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f7fd f8de 	bl	8001cb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2224      	movs	r2, #36	; 0x24
 8004afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f022 0201 	bic.w	r2, r2, #1
 8004b0e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b2e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004b30:	f002 fa42 	bl	8006fb8 <HAL_RCC_GetPCLK1Freq>
 8004b34:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	4a81      	ldr	r2, [pc, #516]	; (8004d40 <HAL_I2C_Init+0x274>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d807      	bhi.n	8004b50 <HAL_I2C_Init+0x84>
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	4a80      	ldr	r2, [pc, #512]	; (8004d44 <HAL_I2C_Init+0x278>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	bf94      	ite	ls
 8004b48:	2301      	movls	r3, #1
 8004b4a:	2300      	movhi	r3, #0
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	e006      	b.n	8004b5e <HAL_I2C_Init+0x92>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	4a7d      	ldr	r2, [pc, #500]	; (8004d48 <HAL_I2C_Init+0x27c>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	bf94      	ite	ls
 8004b58:	2301      	movls	r3, #1
 8004b5a:	2300      	movhi	r3, #0
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d001      	beq.n	8004b66 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e0e7      	b.n	8004d36 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	4a78      	ldr	r2, [pc, #480]	; (8004d4c <HAL_I2C_Init+0x280>)
 8004b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b6e:	0c9b      	lsrs	r3, r3, #18
 8004b70:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68ba      	ldr	r2, [r7, #8]
 8004b82:	430a      	orrs	r2, r1
 8004b84:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	6a1b      	ldr	r3, [r3, #32]
 8004b8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	4a6a      	ldr	r2, [pc, #424]	; (8004d40 <HAL_I2C_Init+0x274>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d802      	bhi.n	8004ba0 <HAL_I2C_Init+0xd4>
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	e009      	b.n	8004bb4 <HAL_I2C_Init+0xe8>
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004ba6:	fb02 f303 	mul.w	r3, r2, r3
 8004baa:	4a69      	ldr	r2, [pc, #420]	; (8004d50 <HAL_I2C_Init+0x284>)
 8004bac:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb0:	099b      	lsrs	r3, r3, #6
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	6812      	ldr	r2, [r2, #0]
 8004bb8:	430b      	orrs	r3, r1
 8004bba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	69db      	ldr	r3, [r3, #28]
 8004bc2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004bc6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	495c      	ldr	r1, [pc, #368]	; (8004d40 <HAL_I2C_Init+0x274>)
 8004bd0:	428b      	cmp	r3, r1
 8004bd2:	d819      	bhi.n	8004c08 <HAL_I2C_Init+0x13c>
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	1e59      	subs	r1, r3, #1
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	005b      	lsls	r3, r3, #1
 8004bde:	fbb1 f3f3 	udiv	r3, r1, r3
 8004be2:	1c59      	adds	r1, r3, #1
 8004be4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004be8:	400b      	ands	r3, r1
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00a      	beq.n	8004c04 <HAL_I2C_Init+0x138>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	1e59      	subs	r1, r3, #1
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	005b      	lsls	r3, r3, #1
 8004bf8:	fbb1 f3f3 	udiv	r3, r1, r3
 8004bfc:	3301      	adds	r3, #1
 8004bfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c02:	e051      	b.n	8004ca8 <HAL_I2C_Init+0x1dc>
 8004c04:	2304      	movs	r3, #4
 8004c06:	e04f      	b.n	8004ca8 <HAL_I2C_Init+0x1dc>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d111      	bne.n	8004c34 <HAL_I2C_Init+0x168>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	1e58      	subs	r0, r3, #1
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6859      	ldr	r1, [r3, #4]
 8004c18:	460b      	mov	r3, r1
 8004c1a:	005b      	lsls	r3, r3, #1
 8004c1c:	440b      	add	r3, r1
 8004c1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c22:	3301      	adds	r3, #1
 8004c24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	bf0c      	ite	eq
 8004c2c:	2301      	moveq	r3, #1
 8004c2e:	2300      	movne	r3, #0
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	e012      	b.n	8004c5a <HAL_I2C_Init+0x18e>
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	1e58      	subs	r0, r3, #1
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6859      	ldr	r1, [r3, #4]
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	440b      	add	r3, r1
 8004c42:	0099      	lsls	r1, r3, #2
 8004c44:	440b      	add	r3, r1
 8004c46:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	bf0c      	ite	eq
 8004c54:	2301      	moveq	r3, #1
 8004c56:	2300      	movne	r3, #0
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d001      	beq.n	8004c62 <HAL_I2C_Init+0x196>
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e022      	b.n	8004ca8 <HAL_I2C_Init+0x1dc>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d10e      	bne.n	8004c88 <HAL_I2C_Init+0x1bc>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	1e58      	subs	r0, r3, #1
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6859      	ldr	r1, [r3, #4]
 8004c72:	460b      	mov	r3, r1
 8004c74:	005b      	lsls	r3, r3, #1
 8004c76:	440b      	add	r3, r1
 8004c78:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c86:	e00f      	b.n	8004ca8 <HAL_I2C_Init+0x1dc>
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	1e58      	subs	r0, r3, #1
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6859      	ldr	r1, [r3, #4]
 8004c90:	460b      	mov	r3, r1
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	440b      	add	r3, r1
 8004c96:	0099      	lsls	r1, r3, #2
 8004c98:	440b      	add	r3, r1
 8004c9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ca4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ca8:	6879      	ldr	r1, [r7, #4]
 8004caa:	6809      	ldr	r1, [r1, #0]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	69da      	ldr	r2, [r3, #28]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a1b      	ldr	r3, [r3, #32]
 8004cc2:	431a      	orrs	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004cd6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	6911      	ldr	r1, [r2, #16]
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	68d2      	ldr	r2, [r2, #12]
 8004ce2:	4311      	orrs	r1, r2
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	6812      	ldr	r2, [r2, #0]
 8004ce8:	430b      	orrs	r3, r1
 8004cea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	695a      	ldr	r2, [r3, #20]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	431a      	orrs	r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	430a      	orrs	r2, r1
 8004d06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f042 0201 	orr.w	r2, r2, #1
 8004d16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2220      	movs	r2, #32
 8004d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3710      	adds	r7, #16
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	000186a0 	.word	0x000186a0
 8004d44:	001e847f 	.word	0x001e847f
 8004d48:	003d08ff 	.word	0x003d08ff
 8004d4c:	431bde83 	.word	0x431bde83
 8004d50:	10624dd3 	.word	0x10624dd3

08004d54 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b088      	sub	sp, #32
 8004d58:	af02      	add	r7, sp, #8
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	607a      	str	r2, [r7, #4]
 8004d5e:	461a      	mov	r2, r3
 8004d60:	460b      	mov	r3, r1
 8004d62:	817b      	strh	r3, [r7, #10]
 8004d64:	4613      	mov	r3, r2
 8004d66:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004d68:	f7fd fa50 	bl	800220c <HAL_GetTick>
 8004d6c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	2b20      	cmp	r3, #32
 8004d78:	f040 80e0 	bne.w	8004f3c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	9300      	str	r3, [sp, #0]
 8004d80:	2319      	movs	r3, #25
 8004d82:	2201      	movs	r2, #1
 8004d84:	4970      	ldr	r1, [pc, #448]	; (8004f48 <HAL_I2C_Master_Transmit+0x1f4>)
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	f000 fc58 	bl	800563c <I2C_WaitOnFlagUntilTimeout>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d001      	beq.n	8004d96 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004d92:	2302      	movs	r3, #2
 8004d94:	e0d3      	b.n	8004f3e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d101      	bne.n	8004da4 <HAL_I2C_Master_Transmit+0x50>
 8004da0:	2302      	movs	r3, #2
 8004da2:	e0cc      	b.n	8004f3e <HAL_I2C_Master_Transmit+0x1ea>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0301 	and.w	r3, r3, #1
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d007      	beq.n	8004dca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f042 0201 	orr.w	r2, r2, #1
 8004dc8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004dd8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2221      	movs	r2, #33	; 0x21
 8004dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2210      	movs	r2, #16
 8004de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	893a      	ldrh	r2, [r7, #8]
 8004dfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e00:	b29a      	uxth	r2, r3
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	4a50      	ldr	r2, [pc, #320]	; (8004f4c <HAL_I2C_Master_Transmit+0x1f8>)
 8004e0a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004e0c:	8979      	ldrh	r1, [r7, #10]
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	6a3a      	ldr	r2, [r7, #32]
 8004e12:	68f8      	ldr	r0, [r7, #12]
 8004e14:	f000 fac2 	bl	800539c <I2C_MasterRequestWrite>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d001      	beq.n	8004e22 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e08d      	b.n	8004f3e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e22:	2300      	movs	r3, #0
 8004e24:	613b      	str	r3, [r7, #16]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	695b      	ldr	r3, [r3, #20]
 8004e2c:	613b      	str	r3, [r7, #16]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	699b      	ldr	r3, [r3, #24]
 8004e34:	613b      	str	r3, [r7, #16]
 8004e36:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004e38:	e066      	b.n	8004f08 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	6a39      	ldr	r1, [r7, #32]
 8004e3e:	68f8      	ldr	r0, [r7, #12]
 8004e40:	f000 fcd2 	bl	80057e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00d      	beq.n	8004e66 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4e:	2b04      	cmp	r3, #4
 8004e50:	d107      	bne.n	8004e62 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e60:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e06b      	b.n	8004f3e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6a:	781a      	ldrb	r2, [r3, #0]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e76:	1c5a      	adds	r2, r3, #1
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	3b01      	subs	r3, #1
 8004e84:	b29a      	uxth	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	b29a      	uxth	r2, r3
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	695b      	ldr	r3, [r3, #20]
 8004e9c:	f003 0304 	and.w	r3, r3, #4
 8004ea0:	2b04      	cmp	r3, #4
 8004ea2:	d11b      	bne.n	8004edc <HAL_I2C_Master_Transmit+0x188>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d017      	beq.n	8004edc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb0:	781a      	ldrb	r2, [r3, #0]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebc:	1c5a      	adds	r2, r3, #1
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	b29a      	uxth	r2, r3
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004edc:	697a      	ldr	r2, [r7, #20]
 8004ede:	6a39      	ldr	r1, [r7, #32]
 8004ee0:	68f8      	ldr	r0, [r7, #12]
 8004ee2:	f000 fcc2 	bl	800586a <I2C_WaitOnBTFFlagUntilTimeout>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d00d      	beq.n	8004f08 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef0:	2b04      	cmp	r3, #4
 8004ef2:	d107      	bne.n	8004f04 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f02:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e01a      	b.n	8004f3e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d194      	bne.n	8004e3a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2220      	movs	r2, #32
 8004f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	e000      	b.n	8004f3e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004f3c:	2302      	movs	r3, #2
  }
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3718      	adds	r7, #24
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	00100002 	.word	0x00100002
 8004f4c:	ffff0000 	.word	0xffff0000

08004f50 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b08c      	sub	sp, #48	; 0x30
 8004f54:	af02      	add	r7, sp, #8
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	607a      	str	r2, [r7, #4]
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	817b      	strh	r3, [r7, #10]
 8004f60:	4613      	mov	r3, r2
 8004f62:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f64:	f7fd f952 	bl	800220c <HAL_GetTick>
 8004f68:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	2b20      	cmp	r3, #32
 8004f74:	f040 820b 	bne.w	800538e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7a:	9300      	str	r3, [sp, #0]
 8004f7c:	2319      	movs	r3, #25
 8004f7e:	2201      	movs	r2, #1
 8004f80:	497c      	ldr	r1, [pc, #496]	; (8005174 <HAL_I2C_Master_Receive+0x224>)
 8004f82:	68f8      	ldr	r0, [r7, #12]
 8004f84:	f000 fb5a 	bl	800563c <I2C_WaitOnFlagUntilTimeout>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d001      	beq.n	8004f92 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004f8e:	2302      	movs	r3, #2
 8004f90:	e1fe      	b.n	8005390 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d101      	bne.n	8004fa0 <HAL_I2C_Master_Receive+0x50>
 8004f9c:	2302      	movs	r3, #2
 8004f9e:	e1f7      	b.n	8005390 <HAL_I2C_Master_Receive+0x440>
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0301 	and.w	r3, r3, #1
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d007      	beq.n	8004fc6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f042 0201 	orr.w	r2, r2, #1
 8004fc4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fd4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2222      	movs	r2, #34	; 0x22
 8004fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2210      	movs	r2, #16
 8004fe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	893a      	ldrh	r2, [r7, #8]
 8004ff6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ffc:	b29a      	uxth	r2, r3
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	4a5c      	ldr	r2, [pc, #368]	; (8005178 <HAL_I2C_Master_Receive+0x228>)
 8005006:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005008:	8979      	ldrh	r1, [r7, #10]
 800500a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800500e:	68f8      	ldr	r0, [r7, #12]
 8005010:	f000 fa46 	bl	80054a0 <I2C_MasterRequestRead>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d001      	beq.n	800501e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e1b8      	b.n	8005390 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005022:	2b00      	cmp	r3, #0
 8005024:	d113      	bne.n	800504e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005026:	2300      	movs	r3, #0
 8005028:	623b      	str	r3, [r7, #32]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	695b      	ldr	r3, [r3, #20]
 8005030:	623b      	str	r3, [r7, #32]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	699b      	ldr	r3, [r3, #24]
 8005038:	623b      	str	r3, [r7, #32]
 800503a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800504a:	601a      	str	r2, [r3, #0]
 800504c:	e18c      	b.n	8005368 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005052:	2b01      	cmp	r3, #1
 8005054:	d11b      	bne.n	800508e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005064:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005066:	2300      	movs	r3, #0
 8005068:	61fb      	str	r3, [r7, #28]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	695b      	ldr	r3, [r3, #20]
 8005070:	61fb      	str	r3, [r7, #28]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	699b      	ldr	r3, [r3, #24]
 8005078:	61fb      	str	r3, [r7, #28]
 800507a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800508a:	601a      	str	r2, [r3, #0]
 800508c:	e16c      	b.n	8005368 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005092:	2b02      	cmp	r3, #2
 8005094:	d11b      	bne.n	80050ce <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050a4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050b6:	2300      	movs	r3, #0
 80050b8:	61bb      	str	r3, [r7, #24]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	695b      	ldr	r3, [r3, #20]
 80050c0:	61bb      	str	r3, [r7, #24]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	699b      	ldr	r3, [r3, #24]
 80050c8:	61bb      	str	r3, [r7, #24]
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	e14c      	b.n	8005368 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80050dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050de:	2300      	movs	r3, #0
 80050e0:	617b      	str	r3, [r7, #20]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	695b      	ldr	r3, [r3, #20]
 80050e8:	617b      	str	r3, [r7, #20]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	699b      	ldr	r3, [r3, #24]
 80050f0:	617b      	str	r3, [r7, #20]
 80050f2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80050f4:	e138      	b.n	8005368 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050fa:	2b03      	cmp	r3, #3
 80050fc:	f200 80f1 	bhi.w	80052e2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005104:	2b01      	cmp	r3, #1
 8005106:	d123      	bne.n	8005150 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800510a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800510c:	68f8      	ldr	r0, [r7, #12]
 800510e:	f000 fbed 	bl	80058ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d001      	beq.n	800511c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e139      	b.n	8005390 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	691a      	ldr	r2, [r3, #16]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005126:	b2d2      	uxtb	r2, r2
 8005128:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512e:	1c5a      	adds	r2, r3, #1
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005138:	3b01      	subs	r3, #1
 800513a:	b29a      	uxth	r2, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005144:	b29b      	uxth	r3, r3
 8005146:	3b01      	subs	r3, #1
 8005148:	b29a      	uxth	r2, r3
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800514e:	e10b      	b.n	8005368 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005154:	2b02      	cmp	r3, #2
 8005156:	d14e      	bne.n	80051f6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515a:	9300      	str	r3, [sp, #0]
 800515c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800515e:	2200      	movs	r2, #0
 8005160:	4906      	ldr	r1, [pc, #24]	; (800517c <HAL_I2C_Master_Receive+0x22c>)
 8005162:	68f8      	ldr	r0, [r7, #12]
 8005164:	f000 fa6a 	bl	800563c <I2C_WaitOnFlagUntilTimeout>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d008      	beq.n	8005180 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e10e      	b.n	8005390 <HAL_I2C_Master_Receive+0x440>
 8005172:	bf00      	nop
 8005174:	00100002 	.word	0x00100002
 8005178:	ffff0000 	.word	0xffff0000
 800517c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800518e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	691a      	ldr	r2, [r3, #16]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519a:	b2d2      	uxtb	r2, r2
 800519c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a2:	1c5a      	adds	r2, r3, #1
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051ac:	3b01      	subs	r3, #1
 80051ae:	b29a      	uxth	r2, r3
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	3b01      	subs	r3, #1
 80051bc:	b29a      	uxth	r2, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	691a      	ldr	r2, [r3, #16]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051cc:	b2d2      	uxtb	r2, r2
 80051ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d4:	1c5a      	adds	r2, r3, #1
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051de:	3b01      	subs	r3, #1
 80051e0:	b29a      	uxth	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	3b01      	subs	r3, #1
 80051ee:	b29a      	uxth	r2, r3
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80051f4:	e0b8      	b.n	8005368 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f8:	9300      	str	r3, [sp, #0]
 80051fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fc:	2200      	movs	r2, #0
 80051fe:	4966      	ldr	r1, [pc, #408]	; (8005398 <HAL_I2C_Master_Receive+0x448>)
 8005200:	68f8      	ldr	r0, [r7, #12]
 8005202:	f000 fa1b 	bl	800563c <I2C_WaitOnFlagUntilTimeout>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d001      	beq.n	8005210 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e0bf      	b.n	8005390 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800521e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	691a      	ldr	r2, [r3, #16]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522a:	b2d2      	uxtb	r2, r2
 800522c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005232:	1c5a      	adds	r2, r3, #1
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800523c:	3b01      	subs	r3, #1
 800523e:	b29a      	uxth	r2, r3
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005248:	b29b      	uxth	r3, r3
 800524a:	3b01      	subs	r3, #1
 800524c:	b29a      	uxth	r2, r3
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005254:	9300      	str	r3, [sp, #0]
 8005256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005258:	2200      	movs	r2, #0
 800525a:	494f      	ldr	r1, [pc, #316]	; (8005398 <HAL_I2C_Master_Receive+0x448>)
 800525c:	68f8      	ldr	r0, [r7, #12]
 800525e:	f000 f9ed 	bl	800563c <I2C_WaitOnFlagUntilTimeout>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d001      	beq.n	800526c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e091      	b.n	8005390 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800527a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	691a      	ldr	r2, [r3, #16]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005286:	b2d2      	uxtb	r2, r2
 8005288:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528e:	1c5a      	adds	r2, r3, #1
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005298:	3b01      	subs	r3, #1
 800529a:	b29a      	uxth	r2, r3
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	3b01      	subs	r3, #1
 80052a8:	b29a      	uxth	r2, r3
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	691a      	ldr	r2, [r3, #16]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b8:	b2d2      	uxtb	r2, r2
 80052ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c0:	1c5a      	adds	r2, r3, #1
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052ca:	3b01      	subs	r3, #1
 80052cc:	b29a      	uxth	r2, r3
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	3b01      	subs	r3, #1
 80052da:	b29a      	uxth	r2, r3
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80052e0:	e042      	b.n	8005368 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052e6:	68f8      	ldr	r0, [r7, #12]
 80052e8:	f000 fb00 	bl	80058ec <I2C_WaitOnRXNEFlagUntilTimeout>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d001      	beq.n	80052f6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e04c      	b.n	8005390 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	691a      	ldr	r2, [r3, #16]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005300:	b2d2      	uxtb	r2, r2
 8005302:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005308:	1c5a      	adds	r2, r3, #1
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005312:	3b01      	subs	r3, #1
 8005314:	b29a      	uxth	r2, r3
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800531e:	b29b      	uxth	r3, r3
 8005320:	3b01      	subs	r3, #1
 8005322:	b29a      	uxth	r2, r3
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	f003 0304 	and.w	r3, r3, #4
 8005332:	2b04      	cmp	r3, #4
 8005334:	d118      	bne.n	8005368 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	691a      	ldr	r2, [r3, #16]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005340:	b2d2      	uxtb	r2, r2
 8005342:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005348:	1c5a      	adds	r2, r3, #1
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005352:	3b01      	subs	r3, #1
 8005354:	b29a      	uxth	r2, r3
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800535e:	b29b      	uxth	r3, r3
 8005360:	3b01      	subs	r3, #1
 8005362:	b29a      	uxth	r2, r3
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800536c:	2b00      	cmp	r3, #0
 800536e:	f47f aec2 	bne.w	80050f6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2220      	movs	r2, #32
 8005376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800538a:	2300      	movs	r3, #0
 800538c:	e000      	b.n	8005390 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800538e:	2302      	movs	r3, #2
  }
}
 8005390:	4618      	mov	r0, r3
 8005392:	3728      	adds	r7, #40	; 0x28
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}
 8005398:	00010004 	.word	0x00010004

0800539c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b088      	sub	sp, #32
 80053a0:	af02      	add	r7, sp, #8
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	607a      	str	r2, [r7, #4]
 80053a6:	603b      	str	r3, [r7, #0]
 80053a8:	460b      	mov	r3, r1
 80053aa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	2b08      	cmp	r3, #8
 80053b6:	d006      	beq.n	80053c6 <I2C_MasterRequestWrite+0x2a>
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d003      	beq.n	80053c6 <I2C_MasterRequestWrite+0x2a>
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80053c4:	d108      	bne.n	80053d8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053d4:	601a      	str	r2, [r3, #0]
 80053d6:	e00b      	b.n	80053f0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053dc:	2b12      	cmp	r3, #18
 80053de:	d107      	bne.n	80053f0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	9300      	str	r3, [sp, #0]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80053fc:	68f8      	ldr	r0, [r7, #12]
 80053fe:	f000 f91d 	bl	800563c <I2C_WaitOnFlagUntilTimeout>
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d00d      	beq.n	8005424 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005412:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005416:	d103      	bne.n	8005420 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800541e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	e035      	b.n	8005490 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800542c:	d108      	bne.n	8005440 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800542e:	897b      	ldrh	r3, [r7, #10]
 8005430:	b2db      	uxtb	r3, r3
 8005432:	461a      	mov	r2, r3
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800543c:	611a      	str	r2, [r3, #16]
 800543e:	e01b      	b.n	8005478 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005440:	897b      	ldrh	r3, [r7, #10]
 8005442:	11db      	asrs	r3, r3, #7
 8005444:	b2db      	uxtb	r3, r3
 8005446:	f003 0306 	and.w	r3, r3, #6
 800544a:	b2db      	uxtb	r3, r3
 800544c:	f063 030f 	orn	r3, r3, #15
 8005450:	b2da      	uxtb	r2, r3
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	490e      	ldr	r1, [pc, #56]	; (8005498 <I2C_MasterRequestWrite+0xfc>)
 800545e:	68f8      	ldr	r0, [r7, #12]
 8005460:	f000 f943 	bl	80056ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d001      	beq.n	800546e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e010      	b.n	8005490 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800546e:	897b      	ldrh	r3, [r7, #10]
 8005470:	b2da      	uxtb	r2, r3
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	4907      	ldr	r1, [pc, #28]	; (800549c <I2C_MasterRequestWrite+0x100>)
 800547e:	68f8      	ldr	r0, [r7, #12]
 8005480:	f000 f933 	bl	80056ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d001      	beq.n	800548e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e000      	b.n	8005490 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800548e:	2300      	movs	r3, #0
}
 8005490:	4618      	mov	r0, r3
 8005492:	3718      	adds	r7, #24
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}
 8005498:	00010008 	.word	0x00010008
 800549c:	00010002 	.word	0x00010002

080054a0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b088      	sub	sp, #32
 80054a4:	af02      	add	r7, sp, #8
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	607a      	str	r2, [r7, #4]
 80054aa:	603b      	str	r3, [r7, #0]
 80054ac:	460b      	mov	r3, r1
 80054ae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80054c4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	2b08      	cmp	r3, #8
 80054ca:	d006      	beq.n	80054da <I2C_MasterRequestRead+0x3a>
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d003      	beq.n	80054da <I2C_MasterRequestRead+0x3a>
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80054d8:	d108      	bne.n	80054ec <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054e8:	601a      	str	r2, [r3, #0]
 80054ea:	e00b      	b.n	8005504 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f0:	2b11      	cmp	r3, #17
 80054f2:	d107      	bne.n	8005504 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005502:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	9300      	str	r3, [sp, #0]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005510:	68f8      	ldr	r0, [r7, #12]
 8005512:	f000 f893 	bl	800563c <I2C_WaitOnFlagUntilTimeout>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d00d      	beq.n	8005538 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005526:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800552a:	d103      	bne.n	8005534 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005532:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005534:	2303      	movs	r3, #3
 8005536:	e079      	b.n	800562c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	691b      	ldr	r3, [r3, #16]
 800553c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005540:	d108      	bne.n	8005554 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005542:	897b      	ldrh	r3, [r7, #10]
 8005544:	b2db      	uxtb	r3, r3
 8005546:	f043 0301 	orr.w	r3, r3, #1
 800554a:	b2da      	uxtb	r2, r3
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	611a      	str	r2, [r3, #16]
 8005552:	e05f      	b.n	8005614 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005554:	897b      	ldrh	r3, [r7, #10]
 8005556:	11db      	asrs	r3, r3, #7
 8005558:	b2db      	uxtb	r3, r3
 800555a:	f003 0306 	and.w	r3, r3, #6
 800555e:	b2db      	uxtb	r3, r3
 8005560:	f063 030f 	orn	r3, r3, #15
 8005564:	b2da      	uxtb	r2, r3
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	4930      	ldr	r1, [pc, #192]	; (8005634 <I2C_MasterRequestRead+0x194>)
 8005572:	68f8      	ldr	r0, [r7, #12]
 8005574:	f000 f8b9 	bl	80056ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005578:	4603      	mov	r3, r0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d001      	beq.n	8005582 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e054      	b.n	800562c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005582:	897b      	ldrh	r3, [r7, #10]
 8005584:	b2da      	uxtb	r2, r3
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	4929      	ldr	r1, [pc, #164]	; (8005638 <I2C_MasterRequestRead+0x198>)
 8005592:	68f8      	ldr	r0, [r7, #12]
 8005594:	f000 f8a9 	bl	80056ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d001      	beq.n	80055a2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e044      	b.n	800562c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055a2:	2300      	movs	r3, #0
 80055a4:	613b      	str	r3, [r7, #16]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	695b      	ldr	r3, [r3, #20]
 80055ac:	613b      	str	r3, [r7, #16]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	699b      	ldr	r3, [r3, #24]
 80055b4:	613b      	str	r3, [r7, #16]
 80055b6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055c6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	9300      	str	r3, [sp, #0]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80055d4:	68f8      	ldr	r0, [r7, #12]
 80055d6:	f000 f831 	bl	800563c <I2C_WaitOnFlagUntilTimeout>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d00d      	beq.n	80055fc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055ee:	d103      	bne.n	80055f8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055f6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e017      	b.n	800562c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80055fc:	897b      	ldrh	r3, [r7, #10]
 80055fe:	11db      	asrs	r3, r3, #7
 8005600:	b2db      	uxtb	r3, r3
 8005602:	f003 0306 	and.w	r3, r3, #6
 8005606:	b2db      	uxtb	r3, r3
 8005608:	f063 030e 	orn	r3, r3, #14
 800560c:	b2da      	uxtb	r2, r3
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	4907      	ldr	r1, [pc, #28]	; (8005638 <I2C_MasterRequestRead+0x198>)
 800561a:	68f8      	ldr	r0, [r7, #12]
 800561c:	f000 f865 	bl	80056ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d001      	beq.n	800562a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e000      	b.n	800562c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800562a:	2300      	movs	r3, #0
}
 800562c:	4618      	mov	r0, r3
 800562e:	3718      	adds	r7, #24
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}
 8005634:	00010008 	.word	0x00010008
 8005638:	00010002 	.word	0x00010002

0800563c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	603b      	str	r3, [r7, #0]
 8005648:	4613      	mov	r3, r2
 800564a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800564c:	e025      	b.n	800569a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005654:	d021      	beq.n	800569a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005656:	f7fc fdd9 	bl	800220c <HAL_GetTick>
 800565a:	4602      	mov	r2, r0
 800565c:	69bb      	ldr	r3, [r7, #24]
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	683a      	ldr	r2, [r7, #0]
 8005662:	429a      	cmp	r2, r3
 8005664:	d302      	bcc.n	800566c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d116      	bne.n	800569a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2200      	movs	r2, #0
 8005670:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2220      	movs	r2, #32
 8005676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005686:	f043 0220 	orr.w	r2, r3, #32
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e023      	b.n	80056e2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	0c1b      	lsrs	r3, r3, #16
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d10d      	bne.n	80056c0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	695b      	ldr	r3, [r3, #20]
 80056aa:	43da      	mvns	r2, r3
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	4013      	ands	r3, r2
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	bf0c      	ite	eq
 80056b6:	2301      	moveq	r3, #1
 80056b8:	2300      	movne	r3, #0
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	461a      	mov	r2, r3
 80056be:	e00c      	b.n	80056da <I2C_WaitOnFlagUntilTimeout+0x9e>
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	43da      	mvns	r2, r3
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	4013      	ands	r3, r2
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	bf0c      	ite	eq
 80056d2:	2301      	moveq	r3, #1
 80056d4:	2300      	movne	r3, #0
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	461a      	mov	r2, r3
 80056da:	79fb      	ldrb	r3, [r7, #7]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d0b6      	beq.n	800564e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3710      	adds	r7, #16
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}

080056ea <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80056ea:	b580      	push	{r7, lr}
 80056ec:	b084      	sub	sp, #16
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	60f8      	str	r0, [r7, #12]
 80056f2:	60b9      	str	r1, [r7, #8]
 80056f4:	607a      	str	r2, [r7, #4]
 80056f6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80056f8:	e051      	b.n	800579e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	695b      	ldr	r3, [r3, #20]
 8005700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005704:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005708:	d123      	bne.n	8005752 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005718:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005722:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2200      	movs	r2, #0
 8005728:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2220      	movs	r2, #32
 800572e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573e:	f043 0204 	orr.w	r2, r3, #4
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2200      	movs	r2, #0
 800574a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e046      	b.n	80057e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005758:	d021      	beq.n	800579e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800575a:	f7fc fd57 	bl	800220c <HAL_GetTick>
 800575e:	4602      	mov	r2, r0
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	429a      	cmp	r2, r3
 8005768:	d302      	bcc.n	8005770 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d116      	bne.n	800579e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2200      	movs	r2, #0
 8005774:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2220      	movs	r2, #32
 800577a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2200      	movs	r2, #0
 8005782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578a:	f043 0220 	orr.w	r2, r3, #32
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e020      	b.n	80057e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	0c1b      	lsrs	r3, r3, #16
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d10c      	bne.n	80057c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	43da      	mvns	r2, r3
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	4013      	ands	r3, r2
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	bf14      	ite	ne
 80057ba:	2301      	movne	r3, #1
 80057bc:	2300      	moveq	r3, #0
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	e00b      	b.n	80057da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	699b      	ldr	r3, [r3, #24]
 80057c8:	43da      	mvns	r2, r3
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	4013      	ands	r3, r2
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	bf14      	ite	ne
 80057d4:	2301      	movne	r3, #1
 80057d6:	2300      	moveq	r3, #0
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d18d      	bne.n	80056fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3710      	adds	r7, #16
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b084      	sub	sp, #16
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057f4:	e02d      	b.n	8005852 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80057f6:	68f8      	ldr	r0, [r7, #12]
 80057f8:	f000 f8ce 	bl	8005998 <I2C_IsAcknowledgeFailed>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d001      	beq.n	8005806 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e02d      	b.n	8005862 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800580c:	d021      	beq.n	8005852 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800580e:	f7fc fcfd 	bl	800220c <HAL_GetTick>
 8005812:	4602      	mov	r2, r0
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	68ba      	ldr	r2, [r7, #8]
 800581a:	429a      	cmp	r2, r3
 800581c:	d302      	bcc.n	8005824 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d116      	bne.n	8005852 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2200      	movs	r2, #0
 8005828:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2220      	movs	r2, #32
 800582e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583e:	f043 0220 	orr.w	r2, r3, #32
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e007      	b.n	8005862 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	695b      	ldr	r3, [r3, #20]
 8005858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800585c:	2b80      	cmp	r3, #128	; 0x80
 800585e:	d1ca      	bne.n	80057f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3710      	adds	r7, #16
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}

0800586a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800586a:	b580      	push	{r7, lr}
 800586c:	b084      	sub	sp, #16
 800586e:	af00      	add	r7, sp, #0
 8005870:	60f8      	str	r0, [r7, #12]
 8005872:	60b9      	str	r1, [r7, #8]
 8005874:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005876:	e02d      	b.n	80058d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005878:	68f8      	ldr	r0, [r7, #12]
 800587a:	f000 f88d 	bl	8005998 <I2C_IsAcknowledgeFailed>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d001      	beq.n	8005888 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	e02d      	b.n	80058e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800588e:	d021      	beq.n	80058d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005890:	f7fc fcbc 	bl	800220c <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	68ba      	ldr	r2, [r7, #8]
 800589c:	429a      	cmp	r2, r3
 800589e:	d302      	bcc.n	80058a6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d116      	bne.n	80058d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2200      	movs	r2, #0
 80058aa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2220      	movs	r2, #32
 80058b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c0:	f043 0220 	orr.w	r2, r3, #32
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e007      	b.n	80058e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	695b      	ldr	r3, [r3, #20]
 80058da:	f003 0304 	and.w	r3, r3, #4
 80058de:	2b04      	cmp	r3, #4
 80058e0:	d1ca      	bne.n	8005878 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3710      	adds	r7, #16
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80058f8:	e042      	b.n	8005980 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	695b      	ldr	r3, [r3, #20]
 8005900:	f003 0310 	and.w	r3, r3, #16
 8005904:	2b10      	cmp	r3, #16
 8005906:	d119      	bne.n	800593c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f06f 0210 	mvn.w	r2, #16
 8005910:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2200      	movs	r2, #0
 8005916:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2220      	movs	r2, #32
 800591c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2200      	movs	r2, #0
 8005924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2200      	movs	r2, #0
 8005934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e029      	b.n	8005990 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800593c:	f7fc fc66 	bl	800220c <HAL_GetTick>
 8005940:	4602      	mov	r2, r0
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	68ba      	ldr	r2, [r7, #8]
 8005948:	429a      	cmp	r2, r3
 800594a:	d302      	bcc.n	8005952 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d116      	bne.n	8005980 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2200      	movs	r2, #0
 8005956:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2220      	movs	r2, #32
 800595c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2200      	movs	r2, #0
 8005964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800596c:	f043 0220 	orr.w	r2, r3, #32
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2200      	movs	r2, #0
 8005978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	e007      	b.n	8005990 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	695b      	ldr	r3, [r3, #20]
 8005986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800598a:	2b40      	cmp	r3, #64	; 0x40
 800598c:	d1b5      	bne.n	80058fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800598e:	2300      	movs	r3, #0
}
 8005990:	4618      	mov	r0, r3
 8005992:	3710      	adds	r7, #16
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	695b      	ldr	r3, [r3, #20]
 80059a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059ae:	d11b      	bne.n	80059e8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80059b8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2220      	movs	r2, #32
 80059c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d4:	f043 0204 	orr.w	r2, r3, #4
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e000      	b.n	80059ea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	370c      	adds	r7, #12
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
	...

080059f8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b088      	sub	sp, #32
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d101      	bne.n	8005a0a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e128      	b.n	8005c5c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d109      	bne.n	8005a2a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a90      	ldr	r2, [pc, #576]	; (8005c64 <HAL_I2S_Init+0x26c>)
 8005a22:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f7fc f98d 	bl	8001d44 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2202      	movs	r2, #2
 8005a2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	69db      	ldr	r3, [r3, #28]
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	6812      	ldr	r2, [r2, #0]
 8005a3c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005a40:	f023 030f 	bic.w	r3, r3, #15
 8005a44:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2202      	movs	r2, #2
 8005a4c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	695b      	ldr	r3, [r3, #20]
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	d060      	beq.n	8005b18 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d102      	bne.n	8005a64 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005a5e:	2310      	movs	r3, #16
 8005a60:	617b      	str	r3, [r7, #20]
 8005a62:	e001      	b.n	8005a68 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005a64:	2320      	movs	r3, #32
 8005a66:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	2b20      	cmp	r3, #32
 8005a6e:	d802      	bhi.n	8005a76 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	005b      	lsls	r3, r3, #1
 8005a74:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005a76:	2001      	movs	r0, #1
 8005a78:	f001 fb94 	bl	80071a4 <HAL_RCCEx_GetPeriphCLKFreq>
 8005a7c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a86:	d125      	bne.n	8005ad4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d010      	beq.n	8005ab2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	4413      	add	r3, r2
 8005aa0:	005b      	lsls	r3, r3, #1
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	695b      	ldr	r3, [r3, #20]
 8005aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aac:	3305      	adds	r3, #5
 8005aae:	613b      	str	r3, [r7, #16]
 8005ab0:	e01f      	b.n	8005af2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	00db      	lsls	r3, r3, #3
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	fbb2 f2f3 	udiv	r2, r2, r3
 8005abc:	4613      	mov	r3, r2
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	4413      	add	r3, r2
 8005ac2:	005b      	lsls	r3, r3, #1
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	695b      	ldr	r3, [r3, #20]
 8005aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ace:	3305      	adds	r3, #5
 8005ad0:	613b      	str	r3, [r7, #16]
 8005ad2:	e00e      	b.n	8005af2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	fbb2 f2f3 	udiv	r2, r2, r3
 8005adc:	4613      	mov	r3, r2
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	4413      	add	r3, r2
 8005ae2:	005b      	lsls	r3, r3, #1
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aee:	3305      	adds	r3, #5
 8005af0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	4a5c      	ldr	r2, [pc, #368]	; (8005c68 <HAL_I2S_Init+0x270>)
 8005af6:	fba2 2303 	umull	r2, r3, r2, r3
 8005afa:	08db      	lsrs	r3, r3, #3
 8005afc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	f003 0301 	and.w	r3, r3, #1
 8005b04:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005b06:	693a      	ldr	r2, [r7, #16]
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	1ad3      	subs	r3, r2, r3
 8005b0c:	085b      	lsrs	r3, r3, #1
 8005b0e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	021b      	lsls	r3, r3, #8
 8005b14:	61bb      	str	r3, [r7, #24]
 8005b16:	e003      	b.n	8005b20 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005b18:	2302      	movs	r3, #2
 8005b1a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d902      	bls.n	8005b2c <HAL_I2S_Init+0x134>
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	2bff      	cmp	r3, #255	; 0xff
 8005b2a:	d907      	bls.n	8005b3c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b30:	f043 0210 	orr.w	r2, r3, #16
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e08f      	b.n	8005c5c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	691a      	ldr	r2, [r3, #16]
 8005b40:	69bb      	ldr	r3, [r7, #24]
 8005b42:	ea42 0103 	orr.w	r1, r2, r3
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	69fa      	ldr	r2, [r7, #28]
 8005b4c:	430a      	orrs	r2, r1
 8005b4e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	69db      	ldr	r3, [r3, #28]
 8005b56:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005b5a:	f023 030f 	bic.w	r3, r3, #15
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	6851      	ldr	r1, [r2, #4]
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	6892      	ldr	r2, [r2, #8]
 8005b66:	4311      	orrs	r1, r2
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	68d2      	ldr	r2, [r2, #12]
 8005b6c:	4311      	orrs	r1, r2
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	6992      	ldr	r2, [r2, #24]
 8005b72:	430a      	orrs	r2, r1
 8005b74:	431a      	orrs	r2, r3
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b7e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6a1b      	ldr	r3, [r3, #32]
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d161      	bne.n	8005c4c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a38      	ldr	r2, [pc, #224]	; (8005c6c <HAL_I2S_Init+0x274>)
 8005b8c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a37      	ldr	r2, [pc, #220]	; (8005c70 <HAL_I2S_Init+0x278>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d101      	bne.n	8005b9c <HAL_I2S_Init+0x1a4>
 8005b98:	4b36      	ldr	r3, [pc, #216]	; (8005c74 <HAL_I2S_Init+0x27c>)
 8005b9a:	e001      	b.n	8005ba0 <HAL_I2S_Init+0x1a8>
 8005b9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ba0:	69db      	ldr	r3, [r3, #28]
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	6812      	ldr	r2, [r2, #0]
 8005ba6:	4932      	ldr	r1, [pc, #200]	; (8005c70 <HAL_I2S_Init+0x278>)
 8005ba8:	428a      	cmp	r2, r1
 8005baa:	d101      	bne.n	8005bb0 <HAL_I2S_Init+0x1b8>
 8005bac:	4a31      	ldr	r2, [pc, #196]	; (8005c74 <HAL_I2S_Init+0x27c>)
 8005bae:	e001      	b.n	8005bb4 <HAL_I2S_Init+0x1bc>
 8005bb0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005bb4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005bb8:	f023 030f 	bic.w	r3, r3, #15
 8005bbc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a2b      	ldr	r2, [pc, #172]	; (8005c70 <HAL_I2S_Init+0x278>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d101      	bne.n	8005bcc <HAL_I2S_Init+0x1d4>
 8005bc8:	4b2a      	ldr	r3, [pc, #168]	; (8005c74 <HAL_I2S_Init+0x27c>)
 8005bca:	e001      	b.n	8005bd0 <HAL_I2S_Init+0x1d8>
 8005bcc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005bd0:	2202      	movs	r2, #2
 8005bd2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a25      	ldr	r2, [pc, #148]	; (8005c70 <HAL_I2S_Init+0x278>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d101      	bne.n	8005be2 <HAL_I2S_Init+0x1ea>
 8005bde:	4b25      	ldr	r3, [pc, #148]	; (8005c74 <HAL_I2S_Init+0x27c>)
 8005be0:	e001      	b.n	8005be6 <HAL_I2S_Init+0x1ee>
 8005be2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005be6:	69db      	ldr	r3, [r3, #28]
 8005be8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bf2:	d003      	beq.n	8005bfc <HAL_I2S_Init+0x204>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d103      	bne.n	8005c04 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005bfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c00:	613b      	str	r3, [r7, #16]
 8005c02:	e001      	b.n	8005c08 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005c04:	2300      	movs	r3, #0
 8005c06:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005c12:	4313      	orrs	r3, r2
 8005c14:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	699b      	ldr	r3, [r3, #24]
 8005c24:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005c26:	4313      	orrs	r3, r2
 8005c28:	b29a      	uxth	r2, r3
 8005c2a:	897b      	ldrh	r3, [r7, #10]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005c34:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a0d      	ldr	r2, [pc, #52]	; (8005c70 <HAL_I2S_Init+0x278>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d101      	bne.n	8005c44 <HAL_I2S_Init+0x24c>
 8005c40:	4b0c      	ldr	r3, [pc, #48]	; (8005c74 <HAL_I2S_Init+0x27c>)
 8005c42:	e001      	b.n	8005c48 <HAL_I2S_Init+0x250>
 8005c44:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c48:	897a      	ldrh	r2, [r7, #10]
 8005c4a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2201      	movs	r2, #1
 8005c56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005c5a:	2300      	movs	r3, #0
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3720      	adds	r7, #32
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	08006157 	.word	0x08006157
 8005c68:	cccccccd 	.word	0xcccccccd
 8005c6c:	0800626d 	.word	0x0800626d
 8005c70:	40003800 	.word	0x40003800
 8005c74:	40003400 	.word	0x40003400

08005c78 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b086      	sub	sp, #24
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	4613      	mov	r3, r2
 8005c84:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d002      	beq.n	8005c92 <HAL_I2S_Transmit_DMA+0x1a>
 8005c8c:	88fb      	ldrh	r3, [r7, #6]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d101      	bne.n	8005c96 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e08e      	b.n	8005db4 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d101      	bne.n	8005ca6 <HAL_I2S_Transmit_DMA+0x2e>
 8005ca2:	2302      	movs	r3, #2
 8005ca4:	e086      	b.n	8005db4 <HAL_I2S_Transmit_DMA+0x13c>
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2201      	movs	r2, #1
 8005caa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d005      	beq.n	8005cc6 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8005cc2:	2302      	movs	r3, #2
 8005cc4:	e076      	b.n	8005db4 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2203      	movs	r2, #3
 8005cca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	68ba      	ldr	r2, [r7, #8]
 8005cd8:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	69db      	ldr	r3, [r3, #28]
 8005ce0:	f003 0307 	and.w	r3, r3, #7
 8005ce4:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	2b03      	cmp	r3, #3
 8005cea:	d002      	beq.n	8005cf2 <HAL_I2S_Transmit_DMA+0x7a>
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	2b05      	cmp	r3, #5
 8005cf0:	d10a      	bne.n	8005d08 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8005cf2:	88fb      	ldrh	r3, [r7, #6]
 8005cf4:	005b      	lsls	r3, r3, #1
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8005cfc:	88fb      	ldrh	r3, [r7, #6]
 8005cfe:	005b      	lsls	r3, r3, #1
 8005d00:	b29a      	uxth	r2, r3
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005d06:	e005      	b.n	8005d14 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	88fa      	ldrh	r2, [r7, #6]
 8005d0c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	88fa      	ldrh	r2, [r7, #6]
 8005d12:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d18:	4a28      	ldr	r2, [pc, #160]	; (8005dbc <HAL_I2S_Transmit_DMA+0x144>)
 8005d1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d20:	4a27      	ldr	r2, [pc, #156]	; (8005dc0 <HAL_I2S_Transmit_DMA+0x148>)
 8005d22:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d28:	4a26      	ldr	r2, [pc, #152]	; (8005dc4 <HAL_I2S_Transmit_DMA+0x14c>)
 8005d2a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005d34:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005d3c:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d42:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005d44:	f7fc fcc2 	bl	80026cc <HAL_DMA_Start_IT>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00f      	beq.n	8005d6e <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d52:	f043 0208 	orr.w	r2, r3, #8
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e022      	b.n	8005db4 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	69db      	ldr	r3, [r3, #28]
 8005d74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d107      	bne.n	8005d8c <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	69da      	ldr	r2, [r3, #28]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d8a:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	f003 0302 	and.w	r3, r3, #2
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d107      	bne.n	8005daa <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	685a      	ldr	r2, [r3, #4]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f042 0202 	orr.w	r2, r2, #2
 8005da8:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2200      	movs	r2, #0
 8005dae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8005db2:	2300      	movs	r3, #0
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3718      	adds	r7, #24
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	08005fd7 	.word	0x08005fd7
 8005dc0:	08005f95 	.word	0x08005f95
 8005dc4:	08006051 	.word	0x08006051

08005dc8 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b086      	sub	sp, #24
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	60b9      	str	r1, [r7, #8]
 8005dd2:	4613      	mov	r3, r2
 8005dd4:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d002      	beq.n	8005de2 <HAL_I2S_Receive_DMA+0x1a>
 8005ddc:	88fb      	ldrh	r3, [r7, #6]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d101      	bne.n	8005de6 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e0a1      	b.n	8005f2a <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d101      	bne.n	8005df6 <HAL_I2S_Receive_DMA+0x2e>
 8005df2:	2302      	movs	r3, #2
 8005df4:	e099      	b.n	8005f2a <HAL_I2S_Receive_DMA+0x162>
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d005      	beq.n	8005e16 <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8005e12:	2302      	movs	r3, #2
 8005e14:	e089      	b.n	8005f2a <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2204      	movs	r2, #4
 8005e1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	68ba      	ldr	r2, [r7, #8]
 8005e28:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	69db      	ldr	r3, [r3, #28]
 8005e30:	f003 0307 	and.w	r3, r3, #7
 8005e34:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	2b03      	cmp	r3, #3
 8005e3a:	d002      	beq.n	8005e42 <HAL_I2S_Receive_DMA+0x7a>
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	2b05      	cmp	r3, #5
 8005e40:	d10a      	bne.n	8005e58 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 8005e42:	88fb      	ldrh	r3, [r7, #6]
 8005e44:	005b      	lsls	r3, r3, #1
 8005e46:	b29a      	uxth	r2, r3
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8005e4c:	88fb      	ldrh	r3, [r7, #6]
 8005e4e:	005b      	lsls	r3, r3, #1
 8005e50:	b29a      	uxth	r2, r3
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	865a      	strh	r2, [r3, #50]	; 0x32
 8005e56:	e005      	b.n	8005e64 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	88fa      	ldrh	r2, [r7, #6]
 8005e5c:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	88fa      	ldrh	r2, [r7, #6]
 8005e62:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e68:	4a32      	ldr	r2, [pc, #200]	; (8005f34 <HAL_I2S_Receive_DMA+0x16c>)
 8005e6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e70:	4a31      	ldr	r2, [pc, #196]	; (8005f38 <HAL_I2S_Receive_DMA+0x170>)
 8005e72:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e78:	4a30      	ldr	r2, [pc, #192]	; (8005f3c <HAL_I2S_Receive_DMA+0x174>)
 8005e7a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	69db      	ldr	r3, [r3, #28]
 8005e82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e8a:	d10a      	bne.n	8005ea2 <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	613b      	str	r3, [r7, #16]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	613b      	str	r3, [r7, #16]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	613b      	str	r3, [r7, #16]
 8005ea0:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	330c      	adds	r3, #12
 8005eac:	4619      	mov	r1, r3
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb2:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8005eb8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8005eba:	f7fc fc07 	bl	80026cc <HAL_DMA_Start_IT>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d00f      	beq.n	8005ee4 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ec8:	f043 0208 	orr.w	r2, r3, #8
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e022      	b.n	8005f2a <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	69db      	ldr	r3, [r3, #28]
 8005eea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d107      	bne.n	8005f02 <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	69da      	ldr	r2, [r3, #28]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f00:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	f003 0301 	and.w	r3, r3, #1
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d107      	bne.n	8005f20 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	685a      	ldr	r2, [r3, #4]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f042 0201 	orr.w	r2, r2, #1
 8005f1e:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2200      	movs	r2, #0
 8005f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3718      	adds	r7, #24
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	08006035 	.word	0x08006035
 8005f38:	08005ff3 	.word	0x08005ff3
 8005f3c:	08006051 	.word	0x08006051

08005f40 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b082      	sub	sp, #8
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	4798      	blx	r3
}
 8005f50:	bf00      	nop
 8005f52:	3708      	adds	r7, #8
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005f60:	bf00      	nop
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005f74:	bf00      	nop
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005f88:	bf00      	nop
 8005f8a:	370c      	adds	r7, #12
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa0:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	69db      	ldr	r3, [r3, #28]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d10e      	bne.n	8005fc8 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	685a      	ldr	r2, [r3, #4]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f022 0202 	bic.w	r2, r2, #2
 8005fb8:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8005fc8:	68f8      	ldr	r0, [r7, #12]
 8005fca:	f7ff ffcf 	bl	8005f6c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005fce:	bf00      	nop
 8005fd0:	3710      	adds	r7, #16
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}

08005fd6 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005fd6:	b580      	push	{r7, lr}
 8005fd8:	b084      	sub	sp, #16
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe2:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8005fe4:	68f8      	ldr	r0, [r7, #12]
 8005fe6:	f7ff ffb7 	bl	8005f58 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005fea:	bf00      	nop
 8005fec:	3710      	adds	r7, #16
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}

08005ff2 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8005ff2:	b580      	push	{r7, lr}
 8005ff4:	b084      	sub	sp, #16
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffe:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	69db      	ldr	r3, [r3, #28]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d10e      	bne.n	8006026 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	685a      	ldr	r2, [r3, #4]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f022 0201 	bic.w	r2, r2, #1
 8006016:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2200      	movs	r2, #0
 800601c:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2201      	movs	r2, #1
 8006022:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8006026:	68f8      	ldr	r0, [r7, #12]
 8006028:	f7fa fcc2 	bl	80009b0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800602c:	bf00      	nop
 800602e:	3710      	adds	r7, #16
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006040:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8006042:	68f8      	ldr	r0, [r7, #12]
 8006044:	f7fa fc70 	bl	8000928 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006048:	bf00      	nop
 800604a:	3710      	adds	r7, #16
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605c:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	685a      	ldr	r2, [r3, #4]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f022 0203 	bic.w	r2, r2, #3
 800606c:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2200      	movs	r2, #0
 8006072:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2200      	movs	r2, #0
 8006078:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2201      	movs	r2, #1
 800607e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006086:	f043 0208 	orr.w	r2, r3, #8
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800608e:	68f8      	ldr	r0, [r7, #12]
 8006090:	f7ff ff76 	bl	8005f80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006094:	bf00      	nop
 8006096:	3710      	adds	r7, #16
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b082      	sub	sp, #8
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a8:	881a      	ldrh	r2, [r3, #0]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b4:	1c9a      	adds	r2, r3, #2
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060be:	b29b      	uxth	r3, r3
 80060c0:	3b01      	subs	r3, #1
 80060c2:	b29a      	uxth	r2, r3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d10e      	bne.n	80060f0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	685a      	ldr	r2, [r3, #4]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80060e0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2201      	movs	r2, #1
 80060e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f7ff ff3e 	bl	8005f6c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80060f0:	bf00      	nop
 80060f2:	3708      	adds	r7, #8
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b082      	sub	sp, #8
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	68da      	ldr	r2, [r3, #12]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800610a:	b292      	uxth	r2, r2
 800610c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006112:	1c9a      	adds	r2, r3, #2
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800611c:	b29b      	uxth	r3, r3
 800611e:	3b01      	subs	r3, #1
 8006120:	b29a      	uxth	r2, r3
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800612a:	b29b      	uxth	r3, r3
 800612c:	2b00      	cmp	r3, #0
 800612e:	d10e      	bne.n	800614e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	685a      	ldr	r2, [r3, #4]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800613e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f7fa fc31 	bl	80009b0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800614e:	bf00      	nop
 8006150:	3708      	adds	r7, #8
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}

08006156 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006156:	b580      	push	{r7, lr}
 8006158:	b086      	sub	sp, #24
 800615a:	af00      	add	r7, sp, #0
 800615c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800616c:	b2db      	uxtb	r3, r3
 800616e:	2b04      	cmp	r3, #4
 8006170:	d13a      	bne.n	80061e8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	f003 0301 	and.w	r3, r3, #1
 8006178:	2b01      	cmp	r3, #1
 800617a:	d109      	bne.n	8006190 <I2S_IRQHandler+0x3a>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006186:	2b40      	cmp	r3, #64	; 0x40
 8006188:	d102      	bne.n	8006190 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f7ff ffb4 	bl	80060f8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006196:	2b40      	cmp	r3, #64	; 0x40
 8006198:	d126      	bne.n	80061e8 <I2S_IRQHandler+0x92>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	f003 0320 	and.w	r3, r3, #32
 80061a4:	2b20      	cmp	r3, #32
 80061a6:	d11f      	bne.n	80061e8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	685a      	ldr	r2, [r3, #4]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80061b6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80061b8:	2300      	movs	r3, #0
 80061ba:	613b      	str	r3, [r7, #16]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	613b      	str	r3, [r7, #16]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	613b      	str	r3, [r7, #16]
 80061cc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2201      	movs	r2, #1
 80061d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061da:	f043 0202 	orr.w	r2, r3, #2
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f7ff fecc 	bl	8005f80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	2b03      	cmp	r3, #3
 80061f2:	d136      	bne.n	8006262 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	f003 0302 	and.w	r3, r3, #2
 80061fa:	2b02      	cmp	r3, #2
 80061fc:	d109      	bne.n	8006212 <I2S_IRQHandler+0xbc>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006208:	2b80      	cmp	r3, #128	; 0x80
 800620a:	d102      	bne.n	8006212 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f7ff ff45 	bl	800609c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	f003 0308 	and.w	r3, r3, #8
 8006218:	2b08      	cmp	r3, #8
 800621a:	d122      	bne.n	8006262 <I2S_IRQHandler+0x10c>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	f003 0320 	and.w	r3, r3, #32
 8006226:	2b20      	cmp	r3, #32
 8006228:	d11b      	bne.n	8006262 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	685a      	ldr	r2, [r3, #4]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006238:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800623a:	2300      	movs	r3, #0
 800623c:	60fb      	str	r3, [r7, #12]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	60fb      	str	r3, [r7, #12]
 8006246:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006254:	f043 0204 	orr.w	r2, r3, #4
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f7ff fe8f 	bl	8005f80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006262:	bf00      	nop
 8006264:	3718      	adds	r7, #24
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
	...

0800626c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b088      	sub	sp, #32
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4aa2      	ldr	r2, [pc, #648]	; (800650c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d101      	bne.n	800628a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8006286:	4ba2      	ldr	r3, [pc, #648]	; (8006510 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006288:	e001      	b.n	800628e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800628a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a9b      	ldr	r2, [pc, #620]	; (800650c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d101      	bne.n	80062a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80062a4:	4b9a      	ldr	r3, [pc, #616]	; (8006510 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80062a6:	e001      	b.n	80062ac <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80062a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062b8:	d004      	beq.n	80062c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	f040 8099 	bne.w	80063f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	f003 0302 	and.w	r3, r3, #2
 80062ca:	2b02      	cmp	r3, #2
 80062cc:	d107      	bne.n	80062de <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d002      	beq.n	80062de <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 f925 	bl	8006528 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80062de:	69bb      	ldr	r3, [r7, #24]
 80062e0:	f003 0301 	and.w	r3, r3, #1
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d107      	bne.n	80062f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d002      	beq.n	80062f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 f9c8 	bl	8006688 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80062f8:	69bb      	ldr	r3, [r7, #24]
 80062fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062fe:	2b40      	cmp	r3, #64	; 0x40
 8006300:	d13a      	bne.n	8006378 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	f003 0320 	and.w	r3, r3, #32
 8006308:	2b00      	cmp	r3, #0
 800630a:	d035      	beq.n	8006378 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a7e      	ldr	r2, [pc, #504]	; (800650c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d101      	bne.n	800631a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8006316:	4b7e      	ldr	r3, [pc, #504]	; (8006510 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006318:	e001      	b.n	800631e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800631a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800631e:	685a      	ldr	r2, [r3, #4]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4979      	ldr	r1, [pc, #484]	; (800650c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006326:	428b      	cmp	r3, r1
 8006328:	d101      	bne.n	800632e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800632a:	4b79      	ldr	r3, [pc, #484]	; (8006510 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800632c:	e001      	b.n	8006332 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800632e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006332:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006336:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	685a      	ldr	r2, [r3, #4]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006346:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006348:	2300      	movs	r3, #0
 800634a:	60fb      	str	r3, [r7, #12]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	60fb      	str	r3, [r7, #12]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	60fb      	str	r3, [r7, #12]
 800635c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2201      	movs	r2, #1
 8006362:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800636a:	f043 0202 	orr.w	r2, r3, #2
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f7ff fe04 	bl	8005f80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006378:	69fb      	ldr	r3, [r7, #28]
 800637a:	f003 0308 	and.w	r3, r3, #8
 800637e:	2b08      	cmp	r3, #8
 8006380:	f040 80be 	bne.w	8006500 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	f003 0320 	and.w	r3, r3, #32
 800638a:	2b00      	cmp	r3, #0
 800638c:	f000 80b8 	beq.w	8006500 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	685a      	ldr	r2, [r3, #4]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800639e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a59      	ldr	r2, [pc, #356]	; (800650c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d101      	bne.n	80063ae <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80063aa:	4b59      	ldr	r3, [pc, #356]	; (8006510 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80063ac:	e001      	b.n	80063b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80063ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80063b2:	685a      	ldr	r2, [r3, #4]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4954      	ldr	r1, [pc, #336]	; (800650c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80063ba:	428b      	cmp	r3, r1
 80063bc:	d101      	bne.n	80063c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80063be:	4b54      	ldr	r3, [pc, #336]	; (8006510 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80063c0:	e001      	b.n	80063c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80063c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80063c6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80063ca:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80063cc:	2300      	movs	r3, #0
 80063ce:	60bb      	str	r3, [r7, #8]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	60bb      	str	r3, [r7, #8]
 80063d8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2201      	movs	r2, #1
 80063de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063e6:	f043 0204 	orr.w	r2, r3, #4
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f7ff fdc6 	bl	8005f80 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80063f4:	e084      	b.n	8006500 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80063f6:	69bb      	ldr	r3, [r7, #24]
 80063f8:	f003 0302 	and.w	r3, r3, #2
 80063fc:	2b02      	cmp	r3, #2
 80063fe:	d107      	bne.n	8006410 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006406:	2b00      	cmp	r3, #0
 8006408:	d002      	beq.n	8006410 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 f8be 	bl	800658c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	f003 0301 	and.w	r3, r3, #1
 8006416:	2b01      	cmp	r3, #1
 8006418:	d107      	bne.n	800642a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006420:	2b00      	cmp	r3, #0
 8006422:	d002      	beq.n	800642a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 f8fd 	bl	8006624 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006430:	2b40      	cmp	r3, #64	; 0x40
 8006432:	d12f      	bne.n	8006494 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	f003 0320 	and.w	r3, r3, #32
 800643a:	2b00      	cmp	r3, #0
 800643c:	d02a      	beq.n	8006494 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	685a      	ldr	r2, [r3, #4]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800644c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a2e      	ldr	r2, [pc, #184]	; (800650c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d101      	bne.n	800645c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006458:	4b2d      	ldr	r3, [pc, #180]	; (8006510 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800645a:	e001      	b.n	8006460 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800645c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006460:	685a      	ldr	r2, [r3, #4]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4929      	ldr	r1, [pc, #164]	; (800650c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006468:	428b      	cmp	r3, r1
 800646a:	d101      	bne.n	8006470 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800646c:	4b28      	ldr	r3, [pc, #160]	; (8006510 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800646e:	e001      	b.n	8006474 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006470:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006474:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006478:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2201      	movs	r2, #1
 800647e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006486:	f043 0202 	orr.w	r2, r3, #2
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f7ff fd76 	bl	8005f80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	f003 0308 	and.w	r3, r3, #8
 800649a:	2b08      	cmp	r3, #8
 800649c:	d131      	bne.n	8006502 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	f003 0320 	and.w	r3, r3, #32
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d02c      	beq.n	8006502 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a17      	ldr	r2, [pc, #92]	; (800650c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d101      	bne.n	80064b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80064b2:	4b17      	ldr	r3, [pc, #92]	; (8006510 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80064b4:	e001      	b.n	80064ba <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80064b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80064ba:	685a      	ldr	r2, [r3, #4]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4912      	ldr	r1, [pc, #72]	; (800650c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80064c2:	428b      	cmp	r3, r1
 80064c4:	d101      	bne.n	80064ca <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80064c6:	4b12      	ldr	r3, [pc, #72]	; (8006510 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80064c8:	e001      	b.n	80064ce <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80064ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80064ce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80064d2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	685a      	ldr	r2, [r3, #4]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80064e2:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064f0:	f043 0204 	orr.w	r2, r3, #4
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f7ff fd41 	bl	8005f80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80064fe:	e000      	b.n	8006502 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006500:	bf00      	nop
}
 8006502:	bf00      	nop
 8006504:	3720      	adds	r7, #32
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
 800650a:	bf00      	nop
 800650c:	40003800 	.word	0x40003800
 8006510:	40003400 	.word	0x40003400

08006514 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800651c:	bf00      	nop
 800651e:	370c      	adds	r7, #12
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b082      	sub	sp, #8
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006534:	1c99      	adds	r1, r3, #2
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	6251      	str	r1, [r2, #36]	; 0x24
 800653a:	881a      	ldrh	r2, [r3, #0]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006546:	b29b      	uxth	r3, r3
 8006548:	3b01      	subs	r3, #1
 800654a:	b29a      	uxth	r2, r3
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006554:	b29b      	uxth	r3, r3
 8006556:	2b00      	cmp	r3, #0
 8006558:	d113      	bne.n	8006582 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	685a      	ldr	r2, [r3, #4]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006568:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800656e:	b29b      	uxth	r3, r3
 8006570:	2b00      	cmp	r3, #0
 8006572:	d106      	bne.n	8006582 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2201      	movs	r2, #1
 8006578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f7ff ffc9 	bl	8006514 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006582:	bf00      	nop
 8006584:	3708      	adds	r7, #8
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
	...

0800658c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b082      	sub	sp, #8
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006598:	1c99      	adds	r1, r3, #2
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	6251      	str	r1, [r2, #36]	; 0x24
 800659e:	8819      	ldrh	r1, [r3, #0]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a1d      	ldr	r2, [pc, #116]	; (800661c <I2SEx_TxISR_I2SExt+0x90>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d101      	bne.n	80065ae <I2SEx_TxISR_I2SExt+0x22>
 80065aa:	4b1d      	ldr	r3, [pc, #116]	; (8006620 <I2SEx_TxISR_I2SExt+0x94>)
 80065ac:	e001      	b.n	80065b2 <I2SEx_TxISR_I2SExt+0x26>
 80065ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065b2:	460a      	mov	r2, r1
 80065b4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	3b01      	subs	r3, #1
 80065be:	b29a      	uxth	r2, r3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d121      	bne.n	8006612 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a12      	ldr	r2, [pc, #72]	; (800661c <I2SEx_TxISR_I2SExt+0x90>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d101      	bne.n	80065dc <I2SEx_TxISR_I2SExt+0x50>
 80065d8:	4b11      	ldr	r3, [pc, #68]	; (8006620 <I2SEx_TxISR_I2SExt+0x94>)
 80065da:	e001      	b.n	80065e0 <I2SEx_TxISR_I2SExt+0x54>
 80065dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065e0:	685a      	ldr	r2, [r3, #4]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	490d      	ldr	r1, [pc, #52]	; (800661c <I2SEx_TxISR_I2SExt+0x90>)
 80065e8:	428b      	cmp	r3, r1
 80065ea:	d101      	bne.n	80065f0 <I2SEx_TxISR_I2SExt+0x64>
 80065ec:	4b0c      	ldr	r3, [pc, #48]	; (8006620 <I2SEx_TxISR_I2SExt+0x94>)
 80065ee:	e001      	b.n	80065f4 <I2SEx_TxISR_I2SExt+0x68>
 80065f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065f4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80065f8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80065fe:	b29b      	uxth	r3, r3
 8006600:	2b00      	cmp	r3, #0
 8006602:	d106      	bne.n	8006612 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f7ff ff81 	bl	8006514 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006612:	bf00      	nop
 8006614:	3708      	adds	r7, #8
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
 800661a:	bf00      	nop
 800661c:	40003800 	.word	0x40003800
 8006620:	40003400 	.word	0x40003400

08006624 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b082      	sub	sp, #8
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	68d8      	ldr	r0, [r3, #12]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006636:	1c99      	adds	r1, r3, #2
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800663c:	b282      	uxth	r2, r0
 800663e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006644:	b29b      	uxth	r3, r3
 8006646:	3b01      	subs	r3, #1
 8006648:	b29a      	uxth	r2, r3
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006652:	b29b      	uxth	r3, r3
 8006654:	2b00      	cmp	r3, #0
 8006656:	d113      	bne.n	8006680 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	685a      	ldr	r2, [r3, #4]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006666:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800666c:	b29b      	uxth	r3, r3
 800666e:	2b00      	cmp	r3, #0
 8006670:	d106      	bne.n	8006680 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2201      	movs	r2, #1
 8006676:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f7ff ff4a 	bl	8006514 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006680:	bf00      	nop
 8006682:	3708      	adds	r7, #8
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b082      	sub	sp, #8
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a20      	ldr	r2, [pc, #128]	; (8006718 <I2SEx_RxISR_I2SExt+0x90>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d101      	bne.n	800669e <I2SEx_RxISR_I2SExt+0x16>
 800669a:	4b20      	ldr	r3, [pc, #128]	; (800671c <I2SEx_RxISR_I2SExt+0x94>)
 800669c:	e001      	b.n	80066a2 <I2SEx_RxISR_I2SExt+0x1a>
 800669e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80066a2:	68d8      	ldr	r0, [r3, #12]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a8:	1c99      	adds	r1, r3, #2
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	62d1      	str	r1, [r2, #44]	; 0x2c
 80066ae:	b282      	uxth	r2, r0
 80066b0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	3b01      	subs	r3, #1
 80066ba:	b29a      	uxth	r2, r3
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d121      	bne.n	800670e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a12      	ldr	r2, [pc, #72]	; (8006718 <I2SEx_RxISR_I2SExt+0x90>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d101      	bne.n	80066d8 <I2SEx_RxISR_I2SExt+0x50>
 80066d4:	4b11      	ldr	r3, [pc, #68]	; (800671c <I2SEx_RxISR_I2SExt+0x94>)
 80066d6:	e001      	b.n	80066dc <I2SEx_RxISR_I2SExt+0x54>
 80066d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80066dc:	685a      	ldr	r2, [r3, #4]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	490d      	ldr	r1, [pc, #52]	; (8006718 <I2SEx_RxISR_I2SExt+0x90>)
 80066e4:	428b      	cmp	r3, r1
 80066e6:	d101      	bne.n	80066ec <I2SEx_RxISR_I2SExt+0x64>
 80066e8:	4b0c      	ldr	r3, [pc, #48]	; (800671c <I2SEx_RxISR_I2SExt+0x94>)
 80066ea:	e001      	b.n	80066f0 <I2SEx_RxISR_I2SExt+0x68>
 80066ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80066f0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80066f4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d106      	bne.n	800670e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2201      	movs	r2, #1
 8006704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f7ff ff03 	bl	8006514 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800670e:	bf00      	nop
 8006710:	3708      	adds	r7, #8
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop
 8006718:	40003800 	.word	0x40003800
 800671c:	40003400 	.word	0x40003400

08006720 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b086      	sub	sp, #24
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d101      	bne.n	8006732 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e264      	b.n	8006bfc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f003 0301 	and.w	r3, r3, #1
 800673a:	2b00      	cmp	r3, #0
 800673c:	d075      	beq.n	800682a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800673e:	4ba3      	ldr	r3, [pc, #652]	; (80069cc <HAL_RCC_OscConfig+0x2ac>)
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	f003 030c 	and.w	r3, r3, #12
 8006746:	2b04      	cmp	r3, #4
 8006748:	d00c      	beq.n	8006764 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800674a:	4ba0      	ldr	r3, [pc, #640]	; (80069cc <HAL_RCC_OscConfig+0x2ac>)
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006752:	2b08      	cmp	r3, #8
 8006754:	d112      	bne.n	800677c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006756:	4b9d      	ldr	r3, [pc, #628]	; (80069cc <HAL_RCC_OscConfig+0x2ac>)
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800675e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006762:	d10b      	bne.n	800677c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006764:	4b99      	ldr	r3, [pc, #612]	; (80069cc <HAL_RCC_OscConfig+0x2ac>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800676c:	2b00      	cmp	r3, #0
 800676e:	d05b      	beq.n	8006828 <HAL_RCC_OscConfig+0x108>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d157      	bne.n	8006828 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	e23f      	b.n	8006bfc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006784:	d106      	bne.n	8006794 <HAL_RCC_OscConfig+0x74>
 8006786:	4b91      	ldr	r3, [pc, #580]	; (80069cc <HAL_RCC_OscConfig+0x2ac>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a90      	ldr	r2, [pc, #576]	; (80069cc <HAL_RCC_OscConfig+0x2ac>)
 800678c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006790:	6013      	str	r3, [r2, #0]
 8006792:	e01d      	b.n	80067d0 <HAL_RCC_OscConfig+0xb0>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800679c:	d10c      	bne.n	80067b8 <HAL_RCC_OscConfig+0x98>
 800679e:	4b8b      	ldr	r3, [pc, #556]	; (80069cc <HAL_RCC_OscConfig+0x2ac>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a8a      	ldr	r2, [pc, #552]	; (80069cc <HAL_RCC_OscConfig+0x2ac>)
 80067a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80067a8:	6013      	str	r3, [r2, #0]
 80067aa:	4b88      	ldr	r3, [pc, #544]	; (80069cc <HAL_RCC_OscConfig+0x2ac>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a87      	ldr	r2, [pc, #540]	; (80069cc <HAL_RCC_OscConfig+0x2ac>)
 80067b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067b4:	6013      	str	r3, [r2, #0]
 80067b6:	e00b      	b.n	80067d0 <HAL_RCC_OscConfig+0xb0>
 80067b8:	4b84      	ldr	r3, [pc, #528]	; (80069cc <HAL_RCC_OscConfig+0x2ac>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a83      	ldr	r2, [pc, #524]	; (80069cc <HAL_RCC_OscConfig+0x2ac>)
 80067be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067c2:	6013      	str	r3, [r2, #0]
 80067c4:	4b81      	ldr	r3, [pc, #516]	; (80069cc <HAL_RCC_OscConfig+0x2ac>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a80      	ldr	r2, [pc, #512]	; (80069cc <HAL_RCC_OscConfig+0x2ac>)
 80067ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d013      	beq.n	8006800 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067d8:	f7fb fd18 	bl	800220c <HAL_GetTick>
 80067dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067de:	e008      	b.n	80067f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80067e0:	f7fb fd14 	bl	800220c <HAL_GetTick>
 80067e4:	4602      	mov	r2, r0
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	1ad3      	subs	r3, r2, r3
 80067ea:	2b64      	cmp	r3, #100	; 0x64
 80067ec:	d901      	bls.n	80067f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80067ee:	2303      	movs	r3, #3
 80067f0:	e204      	b.n	8006bfc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067f2:	4b76      	ldr	r3, [pc, #472]	; (80069cc <HAL_RCC_OscConfig+0x2ac>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d0f0      	beq.n	80067e0 <HAL_RCC_OscConfig+0xc0>
 80067fe:	e014      	b.n	800682a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006800:	f7fb fd04 	bl	800220c <HAL_GetTick>
 8006804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006806:	e008      	b.n	800681a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006808:	f7fb fd00 	bl	800220c <HAL_GetTick>
 800680c:	4602      	mov	r2, r0
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	1ad3      	subs	r3, r2, r3
 8006812:	2b64      	cmp	r3, #100	; 0x64
 8006814:	d901      	bls.n	800681a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006816:	2303      	movs	r3, #3
 8006818:	e1f0      	b.n	8006bfc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800681a:	4b6c      	ldr	r3, [pc, #432]	; (80069cc <HAL_RCC_OscConfig+0x2ac>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006822:	2b00      	cmp	r3, #0
 8006824:	d1f0      	bne.n	8006808 <HAL_RCC_OscConfig+0xe8>
 8006826:	e000      	b.n	800682a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006828:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 0302 	and.w	r3, r3, #2
 8006832:	2b00      	cmp	r3, #0
 8006834:	d063      	beq.n	80068fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006836:	4b65      	ldr	r3, [pc, #404]	; (80069cc <HAL_RCC_OscConfig+0x2ac>)
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	f003 030c 	and.w	r3, r3, #12
 800683e:	2b00      	cmp	r3, #0
 8006840:	d00b      	beq.n	800685a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006842:	4b62      	ldr	r3, [pc, #392]	; (80069cc <HAL_RCC_OscConfig+0x2ac>)
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800684a:	2b08      	cmp	r3, #8
 800684c:	d11c      	bne.n	8006888 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800684e:	4b5f      	ldr	r3, [pc, #380]	; (80069cc <HAL_RCC_OscConfig+0x2ac>)
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006856:	2b00      	cmp	r3, #0
 8006858:	d116      	bne.n	8006888 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800685a:	4b5c      	ldr	r3, [pc, #368]	; (80069cc <HAL_RCC_OscConfig+0x2ac>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 0302 	and.w	r3, r3, #2
 8006862:	2b00      	cmp	r3, #0
 8006864:	d005      	beq.n	8006872 <HAL_RCC_OscConfig+0x152>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	2b01      	cmp	r3, #1
 800686c:	d001      	beq.n	8006872 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	e1c4      	b.n	8006bfc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006872:	4b56      	ldr	r3, [pc, #344]	; (80069cc <HAL_RCC_OscConfig+0x2ac>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	691b      	ldr	r3, [r3, #16]
 800687e:	00db      	lsls	r3, r3, #3
 8006880:	4952      	ldr	r1, [pc, #328]	; (80069cc <HAL_RCC_OscConfig+0x2ac>)
 8006882:	4313      	orrs	r3, r2
 8006884:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006886:	e03a      	b.n	80068fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d020      	beq.n	80068d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006890:	4b4f      	ldr	r3, [pc, #316]	; (80069d0 <HAL_RCC_OscConfig+0x2b0>)
 8006892:	2201      	movs	r2, #1
 8006894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006896:	f7fb fcb9 	bl	800220c <HAL_GetTick>
 800689a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800689c:	e008      	b.n	80068b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800689e:	f7fb fcb5 	bl	800220c <HAL_GetTick>
 80068a2:	4602      	mov	r2, r0
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	1ad3      	subs	r3, r2, r3
 80068a8:	2b02      	cmp	r3, #2
 80068aa:	d901      	bls.n	80068b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80068ac:	2303      	movs	r3, #3
 80068ae:	e1a5      	b.n	8006bfc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068b0:	4b46      	ldr	r3, [pc, #280]	; (80069cc <HAL_RCC_OscConfig+0x2ac>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 0302 	and.w	r3, r3, #2
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d0f0      	beq.n	800689e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068bc:	4b43      	ldr	r3, [pc, #268]	; (80069cc <HAL_RCC_OscConfig+0x2ac>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	00db      	lsls	r3, r3, #3
 80068ca:	4940      	ldr	r1, [pc, #256]	; (80069cc <HAL_RCC_OscConfig+0x2ac>)
 80068cc:	4313      	orrs	r3, r2
 80068ce:	600b      	str	r3, [r1, #0]
 80068d0:	e015      	b.n	80068fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80068d2:	4b3f      	ldr	r3, [pc, #252]	; (80069d0 <HAL_RCC_OscConfig+0x2b0>)
 80068d4:	2200      	movs	r2, #0
 80068d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068d8:	f7fb fc98 	bl	800220c <HAL_GetTick>
 80068dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068de:	e008      	b.n	80068f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80068e0:	f7fb fc94 	bl	800220c <HAL_GetTick>
 80068e4:	4602      	mov	r2, r0
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	1ad3      	subs	r3, r2, r3
 80068ea:	2b02      	cmp	r3, #2
 80068ec:	d901      	bls.n	80068f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80068ee:	2303      	movs	r3, #3
 80068f0:	e184      	b.n	8006bfc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068f2:	4b36      	ldr	r3, [pc, #216]	; (80069cc <HAL_RCC_OscConfig+0x2ac>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 0302 	and.w	r3, r3, #2
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d1f0      	bne.n	80068e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 0308 	and.w	r3, r3, #8
 8006906:	2b00      	cmp	r3, #0
 8006908:	d030      	beq.n	800696c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	695b      	ldr	r3, [r3, #20]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d016      	beq.n	8006940 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006912:	4b30      	ldr	r3, [pc, #192]	; (80069d4 <HAL_RCC_OscConfig+0x2b4>)
 8006914:	2201      	movs	r2, #1
 8006916:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006918:	f7fb fc78 	bl	800220c <HAL_GetTick>
 800691c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800691e:	e008      	b.n	8006932 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006920:	f7fb fc74 	bl	800220c <HAL_GetTick>
 8006924:	4602      	mov	r2, r0
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	1ad3      	subs	r3, r2, r3
 800692a:	2b02      	cmp	r3, #2
 800692c:	d901      	bls.n	8006932 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800692e:	2303      	movs	r3, #3
 8006930:	e164      	b.n	8006bfc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006932:	4b26      	ldr	r3, [pc, #152]	; (80069cc <HAL_RCC_OscConfig+0x2ac>)
 8006934:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006936:	f003 0302 	and.w	r3, r3, #2
 800693a:	2b00      	cmp	r3, #0
 800693c:	d0f0      	beq.n	8006920 <HAL_RCC_OscConfig+0x200>
 800693e:	e015      	b.n	800696c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006940:	4b24      	ldr	r3, [pc, #144]	; (80069d4 <HAL_RCC_OscConfig+0x2b4>)
 8006942:	2200      	movs	r2, #0
 8006944:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006946:	f7fb fc61 	bl	800220c <HAL_GetTick>
 800694a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800694c:	e008      	b.n	8006960 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800694e:	f7fb fc5d 	bl	800220c <HAL_GetTick>
 8006952:	4602      	mov	r2, r0
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	1ad3      	subs	r3, r2, r3
 8006958:	2b02      	cmp	r3, #2
 800695a:	d901      	bls.n	8006960 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800695c:	2303      	movs	r3, #3
 800695e:	e14d      	b.n	8006bfc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006960:	4b1a      	ldr	r3, [pc, #104]	; (80069cc <HAL_RCC_OscConfig+0x2ac>)
 8006962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006964:	f003 0302 	and.w	r3, r3, #2
 8006968:	2b00      	cmp	r3, #0
 800696a:	d1f0      	bne.n	800694e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f003 0304 	and.w	r3, r3, #4
 8006974:	2b00      	cmp	r3, #0
 8006976:	f000 80a0 	beq.w	8006aba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800697a:	2300      	movs	r3, #0
 800697c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800697e:	4b13      	ldr	r3, [pc, #76]	; (80069cc <HAL_RCC_OscConfig+0x2ac>)
 8006980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006986:	2b00      	cmp	r3, #0
 8006988:	d10f      	bne.n	80069aa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800698a:	2300      	movs	r3, #0
 800698c:	60bb      	str	r3, [r7, #8]
 800698e:	4b0f      	ldr	r3, [pc, #60]	; (80069cc <HAL_RCC_OscConfig+0x2ac>)
 8006990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006992:	4a0e      	ldr	r2, [pc, #56]	; (80069cc <HAL_RCC_OscConfig+0x2ac>)
 8006994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006998:	6413      	str	r3, [r2, #64]	; 0x40
 800699a:	4b0c      	ldr	r3, [pc, #48]	; (80069cc <HAL_RCC_OscConfig+0x2ac>)
 800699c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069a2:	60bb      	str	r3, [r7, #8]
 80069a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069a6:	2301      	movs	r3, #1
 80069a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069aa:	4b0b      	ldr	r3, [pc, #44]	; (80069d8 <HAL_RCC_OscConfig+0x2b8>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d121      	bne.n	80069fa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80069b6:	4b08      	ldr	r3, [pc, #32]	; (80069d8 <HAL_RCC_OscConfig+0x2b8>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a07      	ldr	r2, [pc, #28]	; (80069d8 <HAL_RCC_OscConfig+0x2b8>)
 80069bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80069c2:	f7fb fc23 	bl	800220c <HAL_GetTick>
 80069c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069c8:	e011      	b.n	80069ee <HAL_RCC_OscConfig+0x2ce>
 80069ca:	bf00      	nop
 80069cc:	40023800 	.word	0x40023800
 80069d0:	42470000 	.word	0x42470000
 80069d4:	42470e80 	.word	0x42470e80
 80069d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069dc:	f7fb fc16 	bl	800220c <HAL_GetTick>
 80069e0:	4602      	mov	r2, r0
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	1ad3      	subs	r3, r2, r3
 80069e6:	2b02      	cmp	r3, #2
 80069e8:	d901      	bls.n	80069ee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80069ea:	2303      	movs	r3, #3
 80069ec:	e106      	b.n	8006bfc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069ee:	4b85      	ldr	r3, [pc, #532]	; (8006c04 <HAL_RCC_OscConfig+0x4e4>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d0f0      	beq.n	80069dc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d106      	bne.n	8006a10 <HAL_RCC_OscConfig+0x2f0>
 8006a02:	4b81      	ldr	r3, [pc, #516]	; (8006c08 <HAL_RCC_OscConfig+0x4e8>)
 8006a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a06:	4a80      	ldr	r2, [pc, #512]	; (8006c08 <HAL_RCC_OscConfig+0x4e8>)
 8006a08:	f043 0301 	orr.w	r3, r3, #1
 8006a0c:	6713      	str	r3, [r2, #112]	; 0x70
 8006a0e:	e01c      	b.n	8006a4a <HAL_RCC_OscConfig+0x32a>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	2b05      	cmp	r3, #5
 8006a16:	d10c      	bne.n	8006a32 <HAL_RCC_OscConfig+0x312>
 8006a18:	4b7b      	ldr	r3, [pc, #492]	; (8006c08 <HAL_RCC_OscConfig+0x4e8>)
 8006a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a1c:	4a7a      	ldr	r2, [pc, #488]	; (8006c08 <HAL_RCC_OscConfig+0x4e8>)
 8006a1e:	f043 0304 	orr.w	r3, r3, #4
 8006a22:	6713      	str	r3, [r2, #112]	; 0x70
 8006a24:	4b78      	ldr	r3, [pc, #480]	; (8006c08 <HAL_RCC_OscConfig+0x4e8>)
 8006a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a28:	4a77      	ldr	r2, [pc, #476]	; (8006c08 <HAL_RCC_OscConfig+0x4e8>)
 8006a2a:	f043 0301 	orr.w	r3, r3, #1
 8006a2e:	6713      	str	r3, [r2, #112]	; 0x70
 8006a30:	e00b      	b.n	8006a4a <HAL_RCC_OscConfig+0x32a>
 8006a32:	4b75      	ldr	r3, [pc, #468]	; (8006c08 <HAL_RCC_OscConfig+0x4e8>)
 8006a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a36:	4a74      	ldr	r2, [pc, #464]	; (8006c08 <HAL_RCC_OscConfig+0x4e8>)
 8006a38:	f023 0301 	bic.w	r3, r3, #1
 8006a3c:	6713      	str	r3, [r2, #112]	; 0x70
 8006a3e:	4b72      	ldr	r3, [pc, #456]	; (8006c08 <HAL_RCC_OscConfig+0x4e8>)
 8006a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a42:	4a71      	ldr	r2, [pc, #452]	; (8006c08 <HAL_RCC_OscConfig+0x4e8>)
 8006a44:	f023 0304 	bic.w	r3, r3, #4
 8006a48:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	689b      	ldr	r3, [r3, #8]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d015      	beq.n	8006a7e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a52:	f7fb fbdb 	bl	800220c <HAL_GetTick>
 8006a56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a58:	e00a      	b.n	8006a70 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a5a:	f7fb fbd7 	bl	800220c <HAL_GetTick>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	1ad3      	subs	r3, r2, r3
 8006a64:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d901      	bls.n	8006a70 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006a6c:	2303      	movs	r3, #3
 8006a6e:	e0c5      	b.n	8006bfc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a70:	4b65      	ldr	r3, [pc, #404]	; (8006c08 <HAL_RCC_OscConfig+0x4e8>)
 8006a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a74:	f003 0302 	and.w	r3, r3, #2
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d0ee      	beq.n	8006a5a <HAL_RCC_OscConfig+0x33a>
 8006a7c:	e014      	b.n	8006aa8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a7e:	f7fb fbc5 	bl	800220c <HAL_GetTick>
 8006a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a84:	e00a      	b.n	8006a9c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a86:	f7fb fbc1 	bl	800220c <HAL_GetTick>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	1ad3      	subs	r3, r2, r3
 8006a90:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d901      	bls.n	8006a9c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006a98:	2303      	movs	r3, #3
 8006a9a:	e0af      	b.n	8006bfc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a9c:	4b5a      	ldr	r3, [pc, #360]	; (8006c08 <HAL_RCC_OscConfig+0x4e8>)
 8006a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aa0:	f003 0302 	and.w	r3, r3, #2
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d1ee      	bne.n	8006a86 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006aa8:	7dfb      	ldrb	r3, [r7, #23]
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d105      	bne.n	8006aba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006aae:	4b56      	ldr	r3, [pc, #344]	; (8006c08 <HAL_RCC_OscConfig+0x4e8>)
 8006ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab2:	4a55      	ldr	r2, [pc, #340]	; (8006c08 <HAL_RCC_OscConfig+0x4e8>)
 8006ab4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ab8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	699b      	ldr	r3, [r3, #24]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	f000 809b 	beq.w	8006bfa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006ac4:	4b50      	ldr	r3, [pc, #320]	; (8006c08 <HAL_RCC_OscConfig+0x4e8>)
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	f003 030c 	and.w	r3, r3, #12
 8006acc:	2b08      	cmp	r3, #8
 8006ace:	d05c      	beq.n	8006b8a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	699b      	ldr	r3, [r3, #24]
 8006ad4:	2b02      	cmp	r3, #2
 8006ad6:	d141      	bne.n	8006b5c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ad8:	4b4c      	ldr	r3, [pc, #304]	; (8006c0c <HAL_RCC_OscConfig+0x4ec>)
 8006ada:	2200      	movs	r2, #0
 8006adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ade:	f7fb fb95 	bl	800220c <HAL_GetTick>
 8006ae2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ae4:	e008      	b.n	8006af8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ae6:	f7fb fb91 	bl	800220c <HAL_GetTick>
 8006aea:	4602      	mov	r2, r0
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	1ad3      	subs	r3, r2, r3
 8006af0:	2b02      	cmp	r3, #2
 8006af2:	d901      	bls.n	8006af8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006af4:	2303      	movs	r3, #3
 8006af6:	e081      	b.n	8006bfc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006af8:	4b43      	ldr	r3, [pc, #268]	; (8006c08 <HAL_RCC_OscConfig+0x4e8>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d1f0      	bne.n	8006ae6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	69da      	ldr	r2, [r3, #28]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6a1b      	ldr	r3, [r3, #32]
 8006b0c:	431a      	orrs	r2, r3
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b12:	019b      	lsls	r3, r3, #6
 8006b14:	431a      	orrs	r2, r3
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b1a:	085b      	lsrs	r3, r3, #1
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	041b      	lsls	r3, r3, #16
 8006b20:	431a      	orrs	r2, r3
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b26:	061b      	lsls	r3, r3, #24
 8006b28:	4937      	ldr	r1, [pc, #220]	; (8006c08 <HAL_RCC_OscConfig+0x4e8>)
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b2e:	4b37      	ldr	r3, [pc, #220]	; (8006c0c <HAL_RCC_OscConfig+0x4ec>)
 8006b30:	2201      	movs	r2, #1
 8006b32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b34:	f7fb fb6a 	bl	800220c <HAL_GetTick>
 8006b38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b3a:	e008      	b.n	8006b4e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b3c:	f7fb fb66 	bl	800220c <HAL_GetTick>
 8006b40:	4602      	mov	r2, r0
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	1ad3      	subs	r3, r2, r3
 8006b46:	2b02      	cmp	r3, #2
 8006b48:	d901      	bls.n	8006b4e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	e056      	b.n	8006bfc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b4e:	4b2e      	ldr	r3, [pc, #184]	; (8006c08 <HAL_RCC_OscConfig+0x4e8>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d0f0      	beq.n	8006b3c <HAL_RCC_OscConfig+0x41c>
 8006b5a:	e04e      	b.n	8006bfa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b5c:	4b2b      	ldr	r3, [pc, #172]	; (8006c0c <HAL_RCC_OscConfig+0x4ec>)
 8006b5e:	2200      	movs	r2, #0
 8006b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b62:	f7fb fb53 	bl	800220c <HAL_GetTick>
 8006b66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b68:	e008      	b.n	8006b7c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b6a:	f7fb fb4f 	bl	800220c <HAL_GetTick>
 8006b6e:	4602      	mov	r2, r0
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	1ad3      	subs	r3, r2, r3
 8006b74:	2b02      	cmp	r3, #2
 8006b76:	d901      	bls.n	8006b7c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006b78:	2303      	movs	r3, #3
 8006b7a:	e03f      	b.n	8006bfc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b7c:	4b22      	ldr	r3, [pc, #136]	; (8006c08 <HAL_RCC_OscConfig+0x4e8>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d1f0      	bne.n	8006b6a <HAL_RCC_OscConfig+0x44a>
 8006b88:	e037      	b.n	8006bfa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	699b      	ldr	r3, [r3, #24]
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d101      	bne.n	8006b96 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e032      	b.n	8006bfc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006b96:	4b1c      	ldr	r3, [pc, #112]	; (8006c08 <HAL_RCC_OscConfig+0x4e8>)
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	699b      	ldr	r3, [r3, #24]
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d028      	beq.n	8006bf6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d121      	bne.n	8006bf6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d11a      	bne.n	8006bf6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006bc0:	68fa      	ldr	r2, [r7, #12]
 8006bc2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006bc6:	4013      	ands	r3, r2
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006bcc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d111      	bne.n	8006bf6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bdc:	085b      	lsrs	r3, r3, #1
 8006bde:	3b01      	subs	r3, #1
 8006be0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d107      	bne.n	8006bf6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d001      	beq.n	8006bfa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e000      	b.n	8006bfc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3718      	adds	r7, #24
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}
 8006c04:	40007000 	.word	0x40007000
 8006c08:	40023800 	.word	0x40023800
 8006c0c:	42470060 	.word	0x42470060

08006c10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d101      	bne.n	8006c24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	e0cc      	b.n	8006dbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006c24:	4b68      	ldr	r3, [pc, #416]	; (8006dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 0307 	and.w	r3, r3, #7
 8006c2c:	683a      	ldr	r2, [r7, #0]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d90c      	bls.n	8006c4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c32:	4b65      	ldr	r3, [pc, #404]	; (8006dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8006c34:	683a      	ldr	r2, [r7, #0]
 8006c36:	b2d2      	uxtb	r2, r2
 8006c38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c3a:	4b63      	ldr	r3, [pc, #396]	; (8006dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f003 0307 	and.w	r3, r3, #7
 8006c42:	683a      	ldr	r2, [r7, #0]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d001      	beq.n	8006c4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	e0b8      	b.n	8006dbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f003 0302 	and.w	r3, r3, #2
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d020      	beq.n	8006c9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f003 0304 	and.w	r3, r3, #4
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d005      	beq.n	8006c70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c64:	4b59      	ldr	r3, [pc, #356]	; (8006dcc <HAL_RCC_ClockConfig+0x1bc>)
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	4a58      	ldr	r2, [pc, #352]	; (8006dcc <HAL_RCC_ClockConfig+0x1bc>)
 8006c6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006c6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f003 0308 	and.w	r3, r3, #8
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d005      	beq.n	8006c88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006c7c:	4b53      	ldr	r3, [pc, #332]	; (8006dcc <HAL_RCC_ClockConfig+0x1bc>)
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	4a52      	ldr	r2, [pc, #328]	; (8006dcc <HAL_RCC_ClockConfig+0x1bc>)
 8006c82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006c86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c88:	4b50      	ldr	r3, [pc, #320]	; (8006dcc <HAL_RCC_ClockConfig+0x1bc>)
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	494d      	ldr	r1, [pc, #308]	; (8006dcc <HAL_RCC_ClockConfig+0x1bc>)
 8006c96:	4313      	orrs	r3, r2
 8006c98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 0301 	and.w	r3, r3, #1
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d044      	beq.n	8006d30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	d107      	bne.n	8006cbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cae:	4b47      	ldr	r3, [pc, #284]	; (8006dcc <HAL_RCC_ClockConfig+0x1bc>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d119      	bne.n	8006cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e07f      	b.n	8006dbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	2b02      	cmp	r3, #2
 8006cc4:	d003      	beq.n	8006cce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006cca:	2b03      	cmp	r3, #3
 8006ccc:	d107      	bne.n	8006cde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cce:	4b3f      	ldr	r3, [pc, #252]	; (8006dcc <HAL_RCC_ClockConfig+0x1bc>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d109      	bne.n	8006cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e06f      	b.n	8006dbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cde:	4b3b      	ldr	r3, [pc, #236]	; (8006dcc <HAL_RCC_ClockConfig+0x1bc>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f003 0302 	and.w	r3, r3, #2
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d101      	bne.n	8006cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cea:	2301      	movs	r3, #1
 8006cec:	e067      	b.n	8006dbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006cee:	4b37      	ldr	r3, [pc, #220]	; (8006dcc <HAL_RCC_ClockConfig+0x1bc>)
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	f023 0203 	bic.w	r2, r3, #3
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	4934      	ldr	r1, [pc, #208]	; (8006dcc <HAL_RCC_ClockConfig+0x1bc>)
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006d00:	f7fb fa84 	bl	800220c <HAL_GetTick>
 8006d04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d06:	e00a      	b.n	8006d1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d08:	f7fb fa80 	bl	800220c <HAL_GetTick>
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	1ad3      	subs	r3, r2, r3
 8006d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d901      	bls.n	8006d1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	e04f      	b.n	8006dbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d1e:	4b2b      	ldr	r3, [pc, #172]	; (8006dcc <HAL_RCC_ClockConfig+0x1bc>)
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	f003 020c 	and.w	r2, r3, #12
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d1eb      	bne.n	8006d08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006d30:	4b25      	ldr	r3, [pc, #148]	; (8006dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 0307 	and.w	r3, r3, #7
 8006d38:	683a      	ldr	r2, [r7, #0]
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d20c      	bcs.n	8006d58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d3e:	4b22      	ldr	r3, [pc, #136]	; (8006dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8006d40:	683a      	ldr	r2, [r7, #0]
 8006d42:	b2d2      	uxtb	r2, r2
 8006d44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d46:	4b20      	ldr	r3, [pc, #128]	; (8006dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f003 0307 	and.w	r3, r3, #7
 8006d4e:	683a      	ldr	r2, [r7, #0]
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d001      	beq.n	8006d58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	e032      	b.n	8006dbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f003 0304 	and.w	r3, r3, #4
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d008      	beq.n	8006d76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d64:	4b19      	ldr	r3, [pc, #100]	; (8006dcc <HAL_RCC_ClockConfig+0x1bc>)
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	68db      	ldr	r3, [r3, #12]
 8006d70:	4916      	ldr	r1, [pc, #88]	; (8006dcc <HAL_RCC_ClockConfig+0x1bc>)
 8006d72:	4313      	orrs	r3, r2
 8006d74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f003 0308 	and.w	r3, r3, #8
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d009      	beq.n	8006d96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d82:	4b12      	ldr	r3, [pc, #72]	; (8006dcc <HAL_RCC_ClockConfig+0x1bc>)
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	691b      	ldr	r3, [r3, #16]
 8006d8e:	00db      	lsls	r3, r3, #3
 8006d90:	490e      	ldr	r1, [pc, #56]	; (8006dcc <HAL_RCC_ClockConfig+0x1bc>)
 8006d92:	4313      	orrs	r3, r2
 8006d94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006d96:	f000 f821 	bl	8006ddc <HAL_RCC_GetSysClockFreq>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	4b0b      	ldr	r3, [pc, #44]	; (8006dcc <HAL_RCC_ClockConfig+0x1bc>)
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	091b      	lsrs	r3, r3, #4
 8006da2:	f003 030f 	and.w	r3, r3, #15
 8006da6:	490a      	ldr	r1, [pc, #40]	; (8006dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8006da8:	5ccb      	ldrb	r3, [r1, r3]
 8006daa:	fa22 f303 	lsr.w	r3, r2, r3
 8006dae:	4a09      	ldr	r2, [pc, #36]	; (8006dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8006db0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006db2:	4b09      	ldr	r3, [pc, #36]	; (8006dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4618      	mov	r0, r3
 8006db8:	f7fb f9e4 	bl	8002184 <HAL_InitTick>

  return HAL_OK;
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3710      	adds	r7, #16
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	40023c00 	.word	0x40023c00
 8006dcc:	40023800 	.word	0x40023800
 8006dd0:	0800be60 	.word	0x0800be60
 8006dd4:	20000000 	.word	0x20000000
 8006dd8:	20000004 	.word	0x20000004

08006ddc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ddc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006de0:	b084      	sub	sp, #16
 8006de2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006de4:	2300      	movs	r3, #0
 8006de6:	607b      	str	r3, [r7, #4]
 8006de8:	2300      	movs	r3, #0
 8006dea:	60fb      	str	r3, [r7, #12]
 8006dec:	2300      	movs	r3, #0
 8006dee:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006df0:	2300      	movs	r3, #0
 8006df2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006df4:	4b67      	ldr	r3, [pc, #412]	; (8006f94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	f003 030c 	and.w	r3, r3, #12
 8006dfc:	2b08      	cmp	r3, #8
 8006dfe:	d00d      	beq.n	8006e1c <HAL_RCC_GetSysClockFreq+0x40>
 8006e00:	2b08      	cmp	r3, #8
 8006e02:	f200 80bd 	bhi.w	8006f80 <HAL_RCC_GetSysClockFreq+0x1a4>
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d002      	beq.n	8006e10 <HAL_RCC_GetSysClockFreq+0x34>
 8006e0a:	2b04      	cmp	r3, #4
 8006e0c:	d003      	beq.n	8006e16 <HAL_RCC_GetSysClockFreq+0x3a>
 8006e0e:	e0b7      	b.n	8006f80 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006e10:	4b61      	ldr	r3, [pc, #388]	; (8006f98 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006e12:	60bb      	str	r3, [r7, #8]
       break;
 8006e14:	e0b7      	b.n	8006f86 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006e16:	4b61      	ldr	r3, [pc, #388]	; (8006f9c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006e18:	60bb      	str	r3, [r7, #8]
      break;
 8006e1a:	e0b4      	b.n	8006f86 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e1c:	4b5d      	ldr	r3, [pc, #372]	; (8006f94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e24:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006e26:	4b5b      	ldr	r3, [pc, #364]	; (8006f94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d04d      	beq.n	8006ece <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e32:	4b58      	ldr	r3, [pc, #352]	; (8006f94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	099b      	lsrs	r3, r3, #6
 8006e38:	461a      	mov	r2, r3
 8006e3a:	f04f 0300 	mov.w	r3, #0
 8006e3e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006e42:	f04f 0100 	mov.w	r1, #0
 8006e46:	ea02 0800 	and.w	r8, r2, r0
 8006e4a:	ea03 0901 	and.w	r9, r3, r1
 8006e4e:	4640      	mov	r0, r8
 8006e50:	4649      	mov	r1, r9
 8006e52:	f04f 0200 	mov.w	r2, #0
 8006e56:	f04f 0300 	mov.w	r3, #0
 8006e5a:	014b      	lsls	r3, r1, #5
 8006e5c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006e60:	0142      	lsls	r2, r0, #5
 8006e62:	4610      	mov	r0, r2
 8006e64:	4619      	mov	r1, r3
 8006e66:	ebb0 0008 	subs.w	r0, r0, r8
 8006e6a:	eb61 0109 	sbc.w	r1, r1, r9
 8006e6e:	f04f 0200 	mov.w	r2, #0
 8006e72:	f04f 0300 	mov.w	r3, #0
 8006e76:	018b      	lsls	r3, r1, #6
 8006e78:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006e7c:	0182      	lsls	r2, r0, #6
 8006e7e:	1a12      	subs	r2, r2, r0
 8006e80:	eb63 0301 	sbc.w	r3, r3, r1
 8006e84:	f04f 0000 	mov.w	r0, #0
 8006e88:	f04f 0100 	mov.w	r1, #0
 8006e8c:	00d9      	lsls	r1, r3, #3
 8006e8e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006e92:	00d0      	lsls	r0, r2, #3
 8006e94:	4602      	mov	r2, r0
 8006e96:	460b      	mov	r3, r1
 8006e98:	eb12 0208 	adds.w	r2, r2, r8
 8006e9c:	eb43 0309 	adc.w	r3, r3, r9
 8006ea0:	f04f 0000 	mov.w	r0, #0
 8006ea4:	f04f 0100 	mov.w	r1, #0
 8006ea8:	0259      	lsls	r1, r3, #9
 8006eaa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006eae:	0250      	lsls	r0, r2, #9
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	4610      	mov	r0, r2
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	461a      	mov	r2, r3
 8006ebc:	f04f 0300 	mov.w	r3, #0
 8006ec0:	f7f9 f982 	bl	80001c8 <__aeabi_uldivmod>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	460b      	mov	r3, r1
 8006ec8:	4613      	mov	r3, r2
 8006eca:	60fb      	str	r3, [r7, #12]
 8006ecc:	e04a      	b.n	8006f64 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ece:	4b31      	ldr	r3, [pc, #196]	; (8006f94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	099b      	lsrs	r3, r3, #6
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	f04f 0300 	mov.w	r3, #0
 8006eda:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006ede:	f04f 0100 	mov.w	r1, #0
 8006ee2:	ea02 0400 	and.w	r4, r2, r0
 8006ee6:	ea03 0501 	and.w	r5, r3, r1
 8006eea:	4620      	mov	r0, r4
 8006eec:	4629      	mov	r1, r5
 8006eee:	f04f 0200 	mov.w	r2, #0
 8006ef2:	f04f 0300 	mov.w	r3, #0
 8006ef6:	014b      	lsls	r3, r1, #5
 8006ef8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006efc:	0142      	lsls	r2, r0, #5
 8006efe:	4610      	mov	r0, r2
 8006f00:	4619      	mov	r1, r3
 8006f02:	1b00      	subs	r0, r0, r4
 8006f04:	eb61 0105 	sbc.w	r1, r1, r5
 8006f08:	f04f 0200 	mov.w	r2, #0
 8006f0c:	f04f 0300 	mov.w	r3, #0
 8006f10:	018b      	lsls	r3, r1, #6
 8006f12:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006f16:	0182      	lsls	r2, r0, #6
 8006f18:	1a12      	subs	r2, r2, r0
 8006f1a:	eb63 0301 	sbc.w	r3, r3, r1
 8006f1e:	f04f 0000 	mov.w	r0, #0
 8006f22:	f04f 0100 	mov.w	r1, #0
 8006f26:	00d9      	lsls	r1, r3, #3
 8006f28:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006f2c:	00d0      	lsls	r0, r2, #3
 8006f2e:	4602      	mov	r2, r0
 8006f30:	460b      	mov	r3, r1
 8006f32:	1912      	adds	r2, r2, r4
 8006f34:	eb45 0303 	adc.w	r3, r5, r3
 8006f38:	f04f 0000 	mov.w	r0, #0
 8006f3c:	f04f 0100 	mov.w	r1, #0
 8006f40:	0299      	lsls	r1, r3, #10
 8006f42:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006f46:	0290      	lsls	r0, r2, #10
 8006f48:	4602      	mov	r2, r0
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	4610      	mov	r0, r2
 8006f4e:	4619      	mov	r1, r3
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	461a      	mov	r2, r3
 8006f54:	f04f 0300 	mov.w	r3, #0
 8006f58:	f7f9 f936 	bl	80001c8 <__aeabi_uldivmod>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	460b      	mov	r3, r1
 8006f60:	4613      	mov	r3, r2
 8006f62:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006f64:	4b0b      	ldr	r3, [pc, #44]	; (8006f94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	0c1b      	lsrs	r3, r3, #16
 8006f6a:	f003 0303 	and.w	r3, r3, #3
 8006f6e:	3301      	adds	r3, #1
 8006f70:	005b      	lsls	r3, r3, #1
 8006f72:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006f74:	68fa      	ldr	r2, [r7, #12]
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f7c:	60bb      	str	r3, [r7, #8]
      break;
 8006f7e:	e002      	b.n	8006f86 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006f80:	4b05      	ldr	r3, [pc, #20]	; (8006f98 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006f82:	60bb      	str	r3, [r7, #8]
      break;
 8006f84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006f86:	68bb      	ldr	r3, [r7, #8]
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3710      	adds	r7, #16
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006f92:	bf00      	nop
 8006f94:	40023800 	.word	0x40023800
 8006f98:	00f42400 	.word	0x00f42400
 8006f9c:	007a1200 	.word	0x007a1200

08006fa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006fa4:	4b03      	ldr	r3, [pc, #12]	; (8006fb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr
 8006fb2:	bf00      	nop
 8006fb4:	20000000 	.word	0x20000000

08006fb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006fbc:	f7ff fff0 	bl	8006fa0 <HAL_RCC_GetHCLKFreq>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	4b05      	ldr	r3, [pc, #20]	; (8006fd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	0a9b      	lsrs	r3, r3, #10
 8006fc8:	f003 0307 	and.w	r3, r3, #7
 8006fcc:	4903      	ldr	r1, [pc, #12]	; (8006fdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8006fce:	5ccb      	ldrb	r3, [r1, r3]
 8006fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	bd80      	pop	{r7, pc}
 8006fd8:	40023800 	.word	0x40023800
 8006fdc:	0800be70 	.word	0x0800be70

08006fe0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b086      	sub	sp, #24
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006fec:	2300      	movs	r3, #0
 8006fee:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f003 0301 	and.w	r3, r3, #1
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d105      	bne.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007004:	2b00      	cmp	r3, #0
 8007006:	d035      	beq.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007008:	4b62      	ldr	r3, [pc, #392]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800700a:	2200      	movs	r2, #0
 800700c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800700e:	f7fb f8fd 	bl	800220c <HAL_GetTick>
 8007012:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007014:	e008      	b.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007016:	f7fb f8f9 	bl	800220c <HAL_GetTick>
 800701a:	4602      	mov	r2, r0
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	1ad3      	subs	r3, r2, r3
 8007020:	2b02      	cmp	r3, #2
 8007022:	d901      	bls.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007024:	2303      	movs	r3, #3
 8007026:	e0b0      	b.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007028:	4b5b      	ldr	r3, [pc, #364]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007030:	2b00      	cmp	r3, #0
 8007032:	d1f0      	bne.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	019a      	lsls	r2, r3, #6
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	071b      	lsls	r3, r3, #28
 8007040:	4955      	ldr	r1, [pc, #340]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007042:	4313      	orrs	r3, r2
 8007044:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007048:	4b52      	ldr	r3, [pc, #328]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800704a:	2201      	movs	r2, #1
 800704c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800704e:	f7fb f8dd 	bl	800220c <HAL_GetTick>
 8007052:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007054:	e008      	b.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007056:	f7fb f8d9 	bl	800220c <HAL_GetTick>
 800705a:	4602      	mov	r2, r0
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	1ad3      	subs	r3, r2, r3
 8007060:	2b02      	cmp	r3, #2
 8007062:	d901      	bls.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007064:	2303      	movs	r3, #3
 8007066:	e090      	b.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007068:	4b4b      	ldr	r3, [pc, #300]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007070:	2b00      	cmp	r3, #0
 8007072:	d0f0      	beq.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 0302 	and.w	r3, r3, #2
 800707c:	2b00      	cmp	r3, #0
 800707e:	f000 8083 	beq.w	8007188 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007082:	2300      	movs	r3, #0
 8007084:	60fb      	str	r3, [r7, #12]
 8007086:	4b44      	ldr	r3, [pc, #272]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800708a:	4a43      	ldr	r2, [pc, #268]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800708c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007090:	6413      	str	r3, [r2, #64]	; 0x40
 8007092:	4b41      	ldr	r3, [pc, #260]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800709a:	60fb      	str	r3, [r7, #12]
 800709c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800709e:	4b3f      	ldr	r3, [pc, #252]	; (800719c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a3e      	ldr	r2, [pc, #248]	; (800719c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80070a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070a8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80070aa:	f7fb f8af 	bl	800220c <HAL_GetTick>
 80070ae:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80070b0:	e008      	b.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80070b2:	f7fb f8ab 	bl	800220c <HAL_GetTick>
 80070b6:	4602      	mov	r2, r0
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	1ad3      	subs	r3, r2, r3
 80070bc:	2b02      	cmp	r3, #2
 80070be:	d901      	bls.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80070c0:	2303      	movs	r3, #3
 80070c2:	e062      	b.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80070c4:	4b35      	ldr	r3, [pc, #212]	; (800719c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d0f0      	beq.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80070d0:	4b31      	ldr	r3, [pc, #196]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070d8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d02f      	beq.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	68db      	ldr	r3, [r3, #12]
 80070e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070e8:	693a      	ldr	r2, [r7, #16]
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d028      	beq.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80070ee:	4b2a      	ldr	r3, [pc, #168]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070f6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80070f8:	4b29      	ldr	r3, [pc, #164]	; (80071a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80070fa:	2201      	movs	r2, #1
 80070fc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80070fe:	4b28      	ldr	r3, [pc, #160]	; (80071a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007100:	2200      	movs	r2, #0
 8007102:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007104:	4a24      	ldr	r2, [pc, #144]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800710a:	4b23      	ldr	r3, [pc, #140]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800710c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800710e:	f003 0301 	and.w	r3, r3, #1
 8007112:	2b01      	cmp	r3, #1
 8007114:	d114      	bne.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007116:	f7fb f879 	bl	800220c <HAL_GetTick>
 800711a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800711c:	e00a      	b.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800711e:	f7fb f875 	bl	800220c <HAL_GetTick>
 8007122:	4602      	mov	r2, r0
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	1ad3      	subs	r3, r2, r3
 8007128:	f241 3288 	movw	r2, #5000	; 0x1388
 800712c:	4293      	cmp	r3, r2
 800712e:	d901      	bls.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007130:	2303      	movs	r3, #3
 8007132:	e02a      	b.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007134:	4b18      	ldr	r3, [pc, #96]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007138:	f003 0302 	and.w	r3, r3, #2
 800713c:	2b00      	cmp	r3, #0
 800713e:	d0ee      	beq.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	68db      	ldr	r3, [r3, #12]
 8007144:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007148:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800714c:	d10d      	bne.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800714e:	4b12      	ldr	r3, [pc, #72]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	68db      	ldr	r3, [r3, #12]
 800715a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800715e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007162:	490d      	ldr	r1, [pc, #52]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007164:	4313      	orrs	r3, r2
 8007166:	608b      	str	r3, [r1, #8]
 8007168:	e005      	b.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800716a:	4b0b      	ldr	r3, [pc, #44]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	4a0a      	ldr	r2, [pc, #40]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007170:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007174:	6093      	str	r3, [r2, #8]
 8007176:	4b08      	ldr	r3, [pc, #32]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007178:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	68db      	ldr	r3, [r3, #12]
 800717e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007182:	4905      	ldr	r1, [pc, #20]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007184:	4313      	orrs	r3, r2
 8007186:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	3718      	adds	r7, #24
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	42470068 	.word	0x42470068
 8007198:	40023800 	.word	0x40023800
 800719c:	40007000 	.word	0x40007000
 80071a0:	42470e40 	.word	0x42470e40

080071a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b087      	sub	sp, #28
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80071ac:	2300      	movs	r3, #0
 80071ae:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80071b0:	2300      	movs	r3, #0
 80071b2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80071b4:	2300      	movs	r3, #0
 80071b6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80071b8:	2300      	movs	r3, #0
 80071ba:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d13e      	bne.n	8007240 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80071c2:	4b23      	ldr	r3, [pc, #140]	; (8007250 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80071ca:	60fb      	str	r3, [r7, #12]
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d005      	beq.n	80071de <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d12f      	bne.n	8007238 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80071d8:	4b1e      	ldr	r3, [pc, #120]	; (8007254 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80071da:	617b      	str	r3, [r7, #20]
          break;
 80071dc:	e02f      	b.n	800723e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80071de:	4b1c      	ldr	r3, [pc, #112]	; (8007250 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071ea:	d108      	bne.n	80071fe <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80071ec:	4b18      	ldr	r3, [pc, #96]	; (8007250 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071f4:	4a18      	ldr	r2, [pc, #96]	; (8007258 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80071f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80071fa:	613b      	str	r3, [r7, #16]
 80071fc:	e007      	b.n	800720e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80071fe:	4b14      	ldr	r3, [pc, #80]	; (8007250 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007206:	4a15      	ldr	r2, [pc, #84]	; (800725c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007208:	fbb2 f3f3 	udiv	r3, r2, r3
 800720c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800720e:	4b10      	ldr	r3, [pc, #64]	; (8007250 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007210:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007214:	099b      	lsrs	r3, r3, #6
 8007216:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	fb02 f303 	mul.w	r3, r2, r3
 8007220:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007222:	4b0b      	ldr	r3, [pc, #44]	; (8007250 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007224:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007228:	0f1b      	lsrs	r3, r3, #28
 800722a:	f003 0307 	and.w	r3, r3, #7
 800722e:	68ba      	ldr	r2, [r7, #8]
 8007230:	fbb2 f3f3 	udiv	r3, r2, r3
 8007234:	617b      	str	r3, [r7, #20]
          break;
 8007236:	e002      	b.n	800723e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007238:	2300      	movs	r3, #0
 800723a:	617b      	str	r3, [r7, #20]
          break;
 800723c:	bf00      	nop
        }
      }
      break;
 800723e:	bf00      	nop
    }
  }
  return frequency;
 8007240:	697b      	ldr	r3, [r7, #20]
}
 8007242:	4618      	mov	r0, r3
 8007244:	371c      	adds	r7, #28
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr
 800724e:	bf00      	nop
 8007250:	40023800 	.word	0x40023800
 8007254:	00bb8000 	.word	0x00bb8000
 8007258:	007a1200 	.word	0x007a1200
 800725c:	00f42400 	.word	0x00f42400

08007260 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007260:	b084      	sub	sp, #16
 8007262:	b580      	push	{r7, lr}
 8007264:	b084      	sub	sp, #16
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
 800726a:	f107 001c 	add.w	r0, r7, #28
 800726e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007274:	2b01      	cmp	r3, #1
 8007276:	d122      	bne.n	80072be <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800727c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	68db      	ldr	r3, [r3, #12]
 8007288:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800728c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	68db      	ldr	r3, [r3, #12]
 8007298:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80072a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d105      	bne.n	80072b2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 f9a0 	bl	80075f8 <USB_CoreReset>
 80072b8:	4603      	mov	r3, r0
 80072ba:	73fb      	strb	r3, [r7, #15]
 80072bc:	e01a      	b.n	80072f4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	68db      	ldr	r3, [r3, #12]
 80072c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 f994 	bl	80075f8 <USB_CoreReset>
 80072d0:	4603      	mov	r3, r0
 80072d2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80072d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d106      	bne.n	80072e8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	639a      	str	r2, [r3, #56]	; 0x38
 80072e6:	e005      	b.n	80072f4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80072f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d10b      	bne.n	8007312 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	f043 0206 	orr.w	r2, r3, #6
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	689b      	ldr	r3, [r3, #8]
 800730a:	f043 0220 	orr.w	r2, r3, #32
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007312:	7bfb      	ldrb	r3, [r7, #15]
}
 8007314:	4618      	mov	r0, r3
 8007316:	3710      	adds	r7, #16
 8007318:	46bd      	mov	sp, r7
 800731a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800731e:	b004      	add	sp, #16
 8007320:	4770      	bx	lr

08007322 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007322:	b480      	push	{r7}
 8007324:	b083      	sub	sp, #12
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	f043 0201 	orr.w	r2, r3, #1
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007336:	2300      	movs	r3, #0
}
 8007338:	4618      	mov	r0, r3
 800733a:	370c      	adds	r7, #12
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	f023 0201 	bic.w	r2, r3, #1
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007358:	2300      	movs	r3, #0
}
 800735a:	4618      	mov	r0, r3
 800735c:	370c      	adds	r7, #12
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr

08007366 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007366:	b580      	push	{r7, lr}
 8007368:	b084      	sub	sp, #16
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
 800736e:	460b      	mov	r3, r1
 8007370:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007372:	2300      	movs	r3, #0
 8007374:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	68db      	ldr	r3, [r3, #12]
 800737a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007382:	78fb      	ldrb	r3, [r7, #3]
 8007384:	2b01      	cmp	r3, #1
 8007386:	d115      	bne.n	80073b4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	68db      	ldr	r3, [r3, #12]
 800738c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007394:	2001      	movs	r0, #1
 8007396:	f7fa ff45 	bl	8002224 <HAL_Delay>
      ms++;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	3301      	adds	r3, #1
 800739e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 f91a 	bl	80075da <USB_GetMode>
 80073a6:	4603      	mov	r3, r0
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d01e      	beq.n	80073ea <USB_SetCurrentMode+0x84>
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2b31      	cmp	r3, #49	; 0x31
 80073b0:	d9f0      	bls.n	8007394 <USB_SetCurrentMode+0x2e>
 80073b2:	e01a      	b.n	80073ea <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80073b4:	78fb      	ldrb	r3, [r7, #3]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d115      	bne.n	80073e6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	68db      	ldr	r3, [r3, #12]
 80073be:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80073c6:	2001      	movs	r0, #1
 80073c8:	f7fa ff2c 	bl	8002224 <HAL_Delay>
      ms++;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	3301      	adds	r3, #1
 80073d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 f901 	bl	80075da <USB_GetMode>
 80073d8:	4603      	mov	r3, r0
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d005      	beq.n	80073ea <USB_SetCurrentMode+0x84>
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2b31      	cmp	r3, #49	; 0x31
 80073e2:	d9f0      	bls.n	80073c6 <USB_SetCurrentMode+0x60>
 80073e4:	e001      	b.n	80073ea <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	e005      	b.n	80073f6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2b32      	cmp	r3, #50	; 0x32
 80073ee:	d101      	bne.n	80073f4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80073f0:	2301      	movs	r3, #1
 80073f2:	e000      	b.n	80073f6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80073f4:	2300      	movs	r3, #0
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3710      	adds	r7, #16
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
	...

08007400 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007400:	b480      	push	{r7}
 8007402:	b085      	sub	sp, #20
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800740a:	2300      	movs	r3, #0
 800740c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	019b      	lsls	r3, r3, #6
 8007412:	f043 0220 	orr.w	r2, r3, #32
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	3301      	adds	r3, #1
 800741e:	60fb      	str	r3, [r7, #12]
 8007420:	4a08      	ldr	r2, [pc, #32]	; (8007444 <USB_FlushTxFifo+0x44>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d901      	bls.n	800742a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8007426:	2303      	movs	r3, #3
 8007428:	e006      	b.n	8007438 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	691b      	ldr	r3, [r3, #16]
 800742e:	f003 0320 	and.w	r3, r3, #32
 8007432:	2b20      	cmp	r3, #32
 8007434:	d0f1      	beq.n	800741a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007436:	2300      	movs	r3, #0
}
 8007438:	4618      	mov	r0, r3
 800743a:	3714      	adds	r7, #20
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr
 8007444:	00030d40 	.word	0x00030d40

08007448 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007448:	b480      	push	{r7}
 800744a:	b085      	sub	sp, #20
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007450:	2300      	movs	r3, #0
 8007452:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2210      	movs	r2, #16
 8007458:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	3301      	adds	r3, #1
 800745e:	60fb      	str	r3, [r7, #12]
 8007460:	4a08      	ldr	r2, [pc, #32]	; (8007484 <USB_FlushRxFifo+0x3c>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d901      	bls.n	800746a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8007466:	2303      	movs	r3, #3
 8007468:	e006      	b.n	8007478 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	691b      	ldr	r3, [r3, #16]
 800746e:	f003 0310 	and.w	r3, r3, #16
 8007472:	2b10      	cmp	r3, #16
 8007474:	d0f1      	beq.n	800745a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007476:	2300      	movs	r3, #0
}
 8007478:	4618      	mov	r0, r3
 800747a:	3714      	adds	r7, #20
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr
 8007484:	00030d40 	.word	0x00030d40

08007488 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007488:	b480      	push	{r7}
 800748a:	b089      	sub	sp, #36	; 0x24
 800748c:	af00      	add	r7, sp, #0
 800748e:	60f8      	str	r0, [r7, #12]
 8007490:	60b9      	str	r1, [r7, #8]
 8007492:	4611      	mov	r1, r2
 8007494:	461a      	mov	r2, r3
 8007496:	460b      	mov	r3, r1
 8007498:	71fb      	strb	r3, [r7, #7]
 800749a:	4613      	mov	r3, r2
 800749c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80074a6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d123      	bne.n	80074f6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80074ae:	88bb      	ldrh	r3, [r7, #4]
 80074b0:	3303      	adds	r3, #3
 80074b2:	089b      	lsrs	r3, r3, #2
 80074b4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80074b6:	2300      	movs	r3, #0
 80074b8:	61bb      	str	r3, [r7, #24]
 80074ba:	e018      	b.n	80074ee <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80074bc:	79fb      	ldrb	r3, [r7, #7]
 80074be:	031a      	lsls	r2, r3, #12
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	4413      	add	r3, r2
 80074c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074c8:	461a      	mov	r2, r3
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	6013      	str	r3, [r2, #0]
      pSrc++;
 80074d0:	69fb      	ldr	r3, [r7, #28]
 80074d2:	3301      	adds	r3, #1
 80074d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80074d6:	69fb      	ldr	r3, [r7, #28]
 80074d8:	3301      	adds	r3, #1
 80074da:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80074dc:	69fb      	ldr	r3, [r7, #28]
 80074de:	3301      	adds	r3, #1
 80074e0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80074e2:	69fb      	ldr	r3, [r7, #28]
 80074e4:	3301      	adds	r3, #1
 80074e6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80074e8:	69bb      	ldr	r3, [r7, #24]
 80074ea:	3301      	adds	r3, #1
 80074ec:	61bb      	str	r3, [r7, #24]
 80074ee:	69ba      	ldr	r2, [r7, #24]
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d3e2      	bcc.n	80074bc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80074f6:	2300      	movs	r3, #0
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3724      	adds	r7, #36	; 0x24
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr

08007504 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007504:	b480      	push	{r7}
 8007506:	b08b      	sub	sp, #44	; 0x2c
 8007508:	af00      	add	r7, sp, #0
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	4613      	mov	r3, r2
 8007510:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800751a:	88fb      	ldrh	r3, [r7, #6]
 800751c:	089b      	lsrs	r3, r3, #2
 800751e:	b29b      	uxth	r3, r3
 8007520:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007522:	88fb      	ldrh	r3, [r7, #6]
 8007524:	f003 0303 	and.w	r3, r3, #3
 8007528:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800752a:	2300      	movs	r3, #0
 800752c:	623b      	str	r3, [r7, #32]
 800752e:	e014      	b.n	800755a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007530:	69bb      	ldr	r3, [r7, #24]
 8007532:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007536:	681a      	ldr	r2, [r3, #0]
 8007538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800753a:	601a      	str	r2, [r3, #0]
    pDest++;
 800753c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800753e:	3301      	adds	r3, #1
 8007540:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007544:	3301      	adds	r3, #1
 8007546:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754a:	3301      	adds	r3, #1
 800754c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800754e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007550:	3301      	adds	r3, #1
 8007552:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007554:	6a3b      	ldr	r3, [r7, #32]
 8007556:	3301      	adds	r3, #1
 8007558:	623b      	str	r3, [r7, #32]
 800755a:	6a3a      	ldr	r2, [r7, #32]
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	429a      	cmp	r2, r3
 8007560:	d3e6      	bcc.n	8007530 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007562:	8bfb      	ldrh	r3, [r7, #30]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d01e      	beq.n	80075a6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007568:	2300      	movs	r3, #0
 800756a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800756c:	69bb      	ldr	r3, [r7, #24]
 800756e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007572:	461a      	mov	r2, r3
 8007574:	f107 0310 	add.w	r3, r7, #16
 8007578:	6812      	ldr	r2, [r2, #0]
 800757a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800757c:	693a      	ldr	r2, [r7, #16]
 800757e:	6a3b      	ldr	r3, [r7, #32]
 8007580:	b2db      	uxtb	r3, r3
 8007582:	00db      	lsls	r3, r3, #3
 8007584:	fa22 f303 	lsr.w	r3, r2, r3
 8007588:	b2da      	uxtb	r2, r3
 800758a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758c:	701a      	strb	r2, [r3, #0]
      i++;
 800758e:	6a3b      	ldr	r3, [r7, #32]
 8007590:	3301      	adds	r3, #1
 8007592:	623b      	str	r3, [r7, #32]
      pDest++;
 8007594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007596:	3301      	adds	r3, #1
 8007598:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800759a:	8bfb      	ldrh	r3, [r7, #30]
 800759c:	3b01      	subs	r3, #1
 800759e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80075a0:	8bfb      	ldrh	r3, [r7, #30]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d1ea      	bne.n	800757c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80075a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	372c      	adds	r7, #44	; 0x2c
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr

080075b4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b085      	sub	sp, #20
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	695b      	ldr	r3, [r3, #20]
 80075c0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	699b      	ldr	r3, [r3, #24]
 80075c6:	68fa      	ldr	r2, [r7, #12]
 80075c8:	4013      	ands	r3, r2
 80075ca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80075cc:	68fb      	ldr	r3, [r7, #12]
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3714      	adds	r7, #20
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr

080075da <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80075da:	b480      	push	{r7}
 80075dc:	b083      	sub	sp, #12
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	695b      	ldr	r3, [r3, #20]
 80075e6:	f003 0301 	and.w	r3, r3, #1
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	370c      	adds	r7, #12
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr
	...

080075f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b085      	sub	sp, #20
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007600:	2300      	movs	r3, #0
 8007602:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	3301      	adds	r3, #1
 8007608:	60fb      	str	r3, [r7, #12]
 800760a:	4a13      	ldr	r2, [pc, #76]	; (8007658 <USB_CoreReset+0x60>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d901      	bls.n	8007614 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007610:	2303      	movs	r3, #3
 8007612:	e01a      	b.n	800764a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	691b      	ldr	r3, [r3, #16]
 8007618:	2b00      	cmp	r3, #0
 800761a:	daf3      	bge.n	8007604 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800761c:	2300      	movs	r3, #0
 800761e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	691b      	ldr	r3, [r3, #16]
 8007624:	f043 0201 	orr.w	r2, r3, #1
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	3301      	adds	r3, #1
 8007630:	60fb      	str	r3, [r7, #12]
 8007632:	4a09      	ldr	r2, [pc, #36]	; (8007658 <USB_CoreReset+0x60>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d901      	bls.n	800763c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8007638:	2303      	movs	r3, #3
 800763a:	e006      	b.n	800764a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	691b      	ldr	r3, [r3, #16]
 8007640:	f003 0301 	and.w	r3, r3, #1
 8007644:	2b01      	cmp	r3, #1
 8007646:	d0f1      	beq.n	800762c <USB_CoreReset+0x34>

  return HAL_OK;
 8007648:	2300      	movs	r3, #0
}
 800764a:	4618      	mov	r0, r3
 800764c:	3714      	adds	r7, #20
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr
 8007656:	bf00      	nop
 8007658:	00030d40 	.word	0x00030d40

0800765c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800765c:	b084      	sub	sp, #16
 800765e:	b580      	push	{r7, lr}
 8007660:	b084      	sub	sp, #16
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
 8007666:	f107 001c 	add.w	r0, r7, #28
 800766a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007678:	461a      	mov	r2, r3
 800767a:	2300      	movs	r3, #0
 800767c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007682:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800768e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800769a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d018      	beq.n	80076e0 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80076ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d10a      	bne.n	80076ca <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	68ba      	ldr	r2, [r7, #8]
 80076be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80076c2:	f043 0304 	orr.w	r3, r3, #4
 80076c6:	6013      	str	r3, [r2, #0]
 80076c8:	e014      	b.n	80076f4 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	68ba      	ldr	r2, [r7, #8]
 80076d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80076d8:	f023 0304 	bic.w	r3, r3, #4
 80076dc:	6013      	str	r3, [r2, #0]
 80076de:	e009      	b.n	80076f4 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	68ba      	ldr	r2, [r7, #8]
 80076ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80076ee:	f023 0304 	bic.w	r3, r3, #4
 80076f2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80076f4:	2110      	movs	r1, #16
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f7ff fe82 	bl	8007400 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f7ff fea3 	bl	8007448 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007702:	2300      	movs	r3, #0
 8007704:	60fb      	str	r3, [r7, #12]
 8007706:	e015      	b.n	8007734 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	015a      	lsls	r2, r3, #5
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	4413      	add	r3, r2
 8007710:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007714:	461a      	mov	r2, r3
 8007716:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800771a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	015a      	lsls	r2, r3, #5
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	4413      	add	r3, r2
 8007724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007728:	461a      	mov	r2, r3
 800772a:	2300      	movs	r3, #0
 800772c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	3301      	adds	r3, #1
 8007732:	60fb      	str	r3, [r7, #12]
 8007734:	6a3b      	ldr	r3, [r7, #32]
 8007736:	68fa      	ldr	r2, [r7, #12]
 8007738:	429a      	cmp	r2, r3
 800773a:	d3e5      	bcc.n	8007708 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007748:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800774e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007752:	2b00      	cmp	r3, #0
 8007754:	d00b      	beq.n	800776e <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f44f 7200 	mov.w	r2, #512	; 0x200
 800775c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	4a13      	ldr	r2, [pc, #76]	; (80077b0 <USB_HostInit+0x154>)
 8007762:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	4a13      	ldr	r2, [pc, #76]	; (80077b4 <USB_HostInit+0x158>)
 8007768:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800776c:	e009      	b.n	8007782 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2280      	movs	r2, #128	; 0x80
 8007772:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	4a10      	ldr	r2, [pc, #64]	; (80077b8 <USB_HostInit+0x15c>)
 8007778:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	4a0f      	ldr	r2, [pc, #60]	; (80077bc <USB_HostInit+0x160>)
 800777e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007784:	2b00      	cmp	r3, #0
 8007786:	d105      	bne.n	8007794 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	699b      	ldr	r3, [r3, #24]
 800778c:	f043 0210 	orr.w	r2, r3, #16
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	699a      	ldr	r2, [r3, #24]
 8007798:	4b09      	ldr	r3, [pc, #36]	; (80077c0 <USB_HostInit+0x164>)
 800779a:	4313      	orrs	r3, r2
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80077a0:	2300      	movs	r3, #0
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3710      	adds	r7, #16
 80077a6:	46bd      	mov	sp, r7
 80077a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80077ac:	b004      	add	sp, #16
 80077ae:	4770      	bx	lr
 80077b0:	01000200 	.word	0x01000200
 80077b4:	00e00300 	.word	0x00e00300
 80077b8:	00600080 	.word	0x00600080
 80077bc:	004000e0 	.word	0x004000e0
 80077c0:	a3200008 	.word	0xa3200008

080077c4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b085      	sub	sp, #20
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	460b      	mov	r3, r1
 80077ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	68fa      	ldr	r2, [r7, #12]
 80077de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80077e2:	f023 0303 	bic.w	r3, r3, #3
 80077e6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077ee:	681a      	ldr	r2, [r3, #0]
 80077f0:	78fb      	ldrb	r3, [r7, #3]
 80077f2:	f003 0303 	and.w	r3, r3, #3
 80077f6:	68f9      	ldr	r1, [r7, #12]
 80077f8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80077fc:	4313      	orrs	r3, r2
 80077fe:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007800:	78fb      	ldrb	r3, [r7, #3]
 8007802:	2b01      	cmp	r3, #1
 8007804:	d107      	bne.n	8007816 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800780c:	461a      	mov	r2, r3
 800780e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007812:	6053      	str	r3, [r2, #4]
 8007814:	e009      	b.n	800782a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007816:	78fb      	ldrb	r3, [r7, #3]
 8007818:	2b02      	cmp	r3, #2
 800781a:	d106      	bne.n	800782a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007822:	461a      	mov	r2, r3
 8007824:	f241 7370 	movw	r3, #6000	; 0x1770
 8007828:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800782a:	2300      	movs	r3, #0
}
 800782c:	4618      	mov	r0, r3
 800782e:	3714      	adds	r7, #20
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr

08007838 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b084      	sub	sp, #16
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007844:	2300      	movs	r3, #0
 8007846:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007858:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	68fa      	ldr	r2, [r7, #12]
 800785e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007866:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007868:	2064      	movs	r0, #100	; 0x64
 800786a:	f7fa fcdb 	bl	8002224 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	68fa      	ldr	r2, [r7, #12]
 8007872:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007876:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800787a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800787c:	200a      	movs	r0, #10
 800787e:	f7fa fcd1 	bl	8002224 <HAL_Delay>

  return HAL_OK;
 8007882:	2300      	movs	r3, #0
}
 8007884:	4618      	mov	r0, r3
 8007886:	3710      	adds	r7, #16
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}

0800788c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800788c:	b480      	push	{r7}
 800788e:	b085      	sub	sp, #20
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	460b      	mov	r3, r1
 8007896:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800789c:	2300      	movs	r3, #0
 800789e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80078b0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d109      	bne.n	80078d0 <USB_DriveVbus+0x44>
 80078bc:	78fb      	ldrb	r3, [r7, #3]
 80078be:	2b01      	cmp	r3, #1
 80078c0:	d106      	bne.n	80078d0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	68fa      	ldr	r2, [r7, #12]
 80078c6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80078ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80078ce:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80078d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078da:	d109      	bne.n	80078f0 <USB_DriveVbus+0x64>
 80078dc:	78fb      	ldrb	r3, [r7, #3]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d106      	bne.n	80078f0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	68fa      	ldr	r2, [r7, #12]
 80078e6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80078ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078ee:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80078f0:	2300      	movs	r3, #0
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3714      	adds	r7, #20
 80078f6:	46bd      	mov	sp, r7
 80078f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fc:	4770      	bx	lr

080078fe <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80078fe:	b480      	push	{r7}
 8007900:	b085      	sub	sp, #20
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800790a:	2300      	movs	r3, #0
 800790c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	0c5b      	lsrs	r3, r3, #17
 800791c:	f003 0303 	and.w	r3, r3, #3
}
 8007920:	4618      	mov	r0, r3
 8007922:	3714      	adds	r7, #20
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr

0800792c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800792c:	b480      	push	{r7}
 800792e:	b085      	sub	sp, #20
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	b29b      	uxth	r3, r3
}
 8007942:	4618      	mov	r0, r3
 8007944:	3714      	adds	r7, #20
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr
	...

08007950 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b088      	sub	sp, #32
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	4608      	mov	r0, r1
 800795a:	4611      	mov	r1, r2
 800795c:	461a      	mov	r2, r3
 800795e:	4603      	mov	r3, r0
 8007960:	70fb      	strb	r3, [r7, #3]
 8007962:	460b      	mov	r3, r1
 8007964:	70bb      	strb	r3, [r7, #2]
 8007966:	4613      	mov	r3, r2
 8007968:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800796a:	2300      	movs	r3, #0
 800796c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8007972:	78fb      	ldrb	r3, [r7, #3]
 8007974:	015a      	lsls	r2, r3, #5
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	4413      	add	r3, r2
 800797a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800797e:	461a      	mov	r2, r3
 8007980:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007984:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007986:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800798a:	2b03      	cmp	r3, #3
 800798c:	d87e      	bhi.n	8007a8c <USB_HC_Init+0x13c>
 800798e:	a201      	add	r2, pc, #4	; (adr r2, 8007994 <USB_HC_Init+0x44>)
 8007990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007994:	080079a5 	.word	0x080079a5
 8007998:	08007a4f 	.word	0x08007a4f
 800799c:	080079a5 	.word	0x080079a5
 80079a0:	08007a11 	.word	0x08007a11
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80079a4:	78fb      	ldrb	r3, [r7, #3]
 80079a6:	015a      	lsls	r2, r3, #5
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	4413      	add	r3, r2
 80079ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079b0:	461a      	mov	r2, r3
 80079b2:	f240 439d 	movw	r3, #1181	; 0x49d
 80079b6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80079b8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	da10      	bge.n	80079e2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80079c0:	78fb      	ldrb	r3, [r7, #3]
 80079c2:	015a      	lsls	r2, r3, #5
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	4413      	add	r3, r2
 80079c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079cc:	68db      	ldr	r3, [r3, #12]
 80079ce:	78fa      	ldrb	r2, [r7, #3]
 80079d0:	0151      	lsls	r1, r2, #5
 80079d2:	693a      	ldr	r2, [r7, #16]
 80079d4:	440a      	add	r2, r1
 80079d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80079da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079de:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80079e0:	e057      	b.n	8007a92 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d051      	beq.n	8007a92 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80079ee:	78fb      	ldrb	r3, [r7, #3]
 80079f0:	015a      	lsls	r2, r3, #5
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	4413      	add	r3, r2
 80079f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079fa:	68db      	ldr	r3, [r3, #12]
 80079fc:	78fa      	ldrb	r2, [r7, #3]
 80079fe:	0151      	lsls	r1, r2, #5
 8007a00:	693a      	ldr	r2, [r7, #16]
 8007a02:	440a      	add	r2, r1
 8007a04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a08:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007a0c:	60d3      	str	r3, [r2, #12]
      break;
 8007a0e:	e040      	b.n	8007a92 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007a10:	78fb      	ldrb	r3, [r7, #3]
 8007a12:	015a      	lsls	r2, r3, #5
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	4413      	add	r3, r2
 8007a18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	f240 639d 	movw	r3, #1693	; 0x69d
 8007a22:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007a24:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	da34      	bge.n	8007a96 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007a2c:	78fb      	ldrb	r3, [r7, #3]
 8007a2e:	015a      	lsls	r2, r3, #5
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	4413      	add	r3, r2
 8007a34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a38:	68db      	ldr	r3, [r3, #12]
 8007a3a:	78fa      	ldrb	r2, [r7, #3]
 8007a3c:	0151      	lsls	r1, r2, #5
 8007a3e:	693a      	ldr	r2, [r7, #16]
 8007a40:	440a      	add	r2, r1
 8007a42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a4a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007a4c:	e023      	b.n	8007a96 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007a4e:	78fb      	ldrb	r3, [r7, #3]
 8007a50:	015a      	lsls	r2, r3, #5
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	4413      	add	r3, r2
 8007a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	f240 2325 	movw	r3, #549	; 0x225
 8007a60:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007a62:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	da17      	bge.n	8007a9a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007a6a:	78fb      	ldrb	r3, [r7, #3]
 8007a6c:	015a      	lsls	r2, r3, #5
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	4413      	add	r3, r2
 8007a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a76:	68db      	ldr	r3, [r3, #12]
 8007a78:	78fa      	ldrb	r2, [r7, #3]
 8007a7a:	0151      	lsls	r1, r2, #5
 8007a7c:	693a      	ldr	r2, [r7, #16]
 8007a7e:	440a      	add	r2, r1
 8007a80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a84:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007a88:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007a8a:	e006      	b.n	8007a9a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	77fb      	strb	r3, [r7, #31]
      break;
 8007a90:	e004      	b.n	8007a9c <USB_HC_Init+0x14c>
      break;
 8007a92:	bf00      	nop
 8007a94:	e002      	b.n	8007a9c <USB_HC_Init+0x14c>
      break;
 8007a96:	bf00      	nop
 8007a98:	e000      	b.n	8007a9c <USB_HC_Init+0x14c>
      break;
 8007a9a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007aa2:	699a      	ldr	r2, [r3, #24]
 8007aa4:	78fb      	ldrb	r3, [r7, #3]
 8007aa6:	f003 030f 	and.w	r3, r3, #15
 8007aaa:	2101      	movs	r1, #1
 8007aac:	fa01 f303 	lsl.w	r3, r1, r3
 8007ab0:	6939      	ldr	r1, [r7, #16]
 8007ab2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	699b      	ldr	r3, [r3, #24]
 8007abe:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007ac6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	da03      	bge.n	8007ad6 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007ace:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ad2:	61bb      	str	r3, [r7, #24]
 8007ad4:	e001      	b.n	8007ada <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f7ff ff0f 	bl	80078fe <USB_GetHostSpeed>
 8007ae0:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007ae2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007ae6:	2b02      	cmp	r3, #2
 8007ae8:	d106      	bne.n	8007af8 <USB_HC_Init+0x1a8>
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2b02      	cmp	r3, #2
 8007aee:	d003      	beq.n	8007af8 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007af0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007af4:	617b      	str	r3, [r7, #20]
 8007af6:	e001      	b.n	8007afc <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007af8:	2300      	movs	r3, #0
 8007afa:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007afc:	787b      	ldrb	r3, [r7, #1]
 8007afe:	059b      	lsls	r3, r3, #22
 8007b00:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007b04:	78bb      	ldrb	r3, [r7, #2]
 8007b06:	02db      	lsls	r3, r3, #11
 8007b08:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007b0c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007b0e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007b12:	049b      	lsls	r3, r3, #18
 8007b14:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007b18:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007b1a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007b1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007b20:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007b22:	69bb      	ldr	r3, [r7, #24]
 8007b24:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007b26:	78fb      	ldrb	r3, [r7, #3]
 8007b28:	0159      	lsls	r1, r3, #5
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	440b      	add	r3, r1
 8007b2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b32:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007b38:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8007b3a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007b3e:	2b03      	cmp	r3, #3
 8007b40:	d10f      	bne.n	8007b62 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8007b42:	78fb      	ldrb	r3, [r7, #3]
 8007b44:	015a      	lsls	r2, r3, #5
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	4413      	add	r3, r2
 8007b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	78fa      	ldrb	r2, [r7, #3]
 8007b52:	0151      	lsls	r1, r2, #5
 8007b54:	693a      	ldr	r2, [r7, #16]
 8007b56:	440a      	add	r2, r1
 8007b58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b5c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007b60:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007b62:	7ffb      	ldrb	r3, [r7, #31]
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3720      	adds	r7, #32
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}

08007b6c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b08c      	sub	sp, #48	; 0x30
 8007b70:	af02      	add	r7, sp, #8
 8007b72:	60f8      	str	r0, [r7, #12]
 8007b74:	60b9      	str	r1, [r7, #8]
 8007b76:	4613      	mov	r3, r2
 8007b78:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	785b      	ldrb	r3, [r3, #1]
 8007b82:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007b84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b88:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d02d      	beq.n	8007bf2 <USB_HC_StartXfer+0x86>
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	791b      	ldrb	r3, [r3, #4]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d129      	bne.n	8007bf2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8007b9e:	79fb      	ldrb	r3, [r7, #7]
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d117      	bne.n	8007bd4 <USB_HC_StartXfer+0x68>
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	79db      	ldrb	r3, [r3, #7]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d003      	beq.n	8007bb4 <USB_HC_StartXfer+0x48>
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	79db      	ldrb	r3, [r3, #7]
 8007bb0:	2b02      	cmp	r3, #2
 8007bb2:	d10f      	bne.n	8007bd4 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007bb4:	69fb      	ldr	r3, [r7, #28]
 8007bb6:	015a      	lsls	r2, r3, #5
 8007bb8:	6a3b      	ldr	r3, [r7, #32]
 8007bba:	4413      	add	r3, r2
 8007bbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bc0:	68db      	ldr	r3, [r3, #12]
 8007bc2:	69fa      	ldr	r2, [r7, #28]
 8007bc4:	0151      	lsls	r1, r2, #5
 8007bc6:	6a3a      	ldr	r2, [r7, #32]
 8007bc8:	440a      	add	r2, r1
 8007bca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bd2:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007bd4:	79fb      	ldrb	r3, [r7, #7]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d10b      	bne.n	8007bf2 <USB_HC_StartXfer+0x86>
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	795b      	ldrb	r3, [r3, #5]
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d107      	bne.n	8007bf2 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	785b      	ldrb	r3, [r3, #1]
 8007be6:	4619      	mov	r1, r3
 8007be8:	68f8      	ldr	r0, [r7, #12]
 8007bea:	f000 fa2f 	bl	800804c <USB_DoPing>
      return HAL_OK;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	e0f8      	b.n	8007de4 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	695b      	ldr	r3, [r3, #20]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d018      	beq.n	8007c2c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	695b      	ldr	r3, [r3, #20]
 8007bfe:	68ba      	ldr	r2, [r7, #8]
 8007c00:	8912      	ldrh	r2, [r2, #8]
 8007c02:	4413      	add	r3, r2
 8007c04:	3b01      	subs	r3, #1
 8007c06:	68ba      	ldr	r2, [r7, #8]
 8007c08:	8912      	ldrh	r2, [r2, #8]
 8007c0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c0e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007c10:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007c12:	8b7b      	ldrh	r3, [r7, #26]
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d90b      	bls.n	8007c30 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8007c18:	8b7b      	ldrh	r3, [r7, #26]
 8007c1a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007c1c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007c1e:	68ba      	ldr	r2, [r7, #8]
 8007c20:	8912      	ldrh	r2, [r2, #8]
 8007c22:	fb02 f203 	mul.w	r2, r2, r3
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	611a      	str	r2, [r3, #16]
 8007c2a:	e001      	b.n	8007c30 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	78db      	ldrb	r3, [r3, #3]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d007      	beq.n	8007c48 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007c38:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007c3a:	68ba      	ldr	r2, [r7, #8]
 8007c3c:	8912      	ldrh	r2, [r2, #8]
 8007c3e:	fb02 f203 	mul.w	r2, r2, r3
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	611a      	str	r2, [r3, #16]
 8007c46:	e003      	b.n	8007c50 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	695a      	ldr	r2, [r3, #20]
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	691b      	ldr	r3, [r3, #16]
 8007c54:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007c58:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007c5a:	04d9      	lsls	r1, r3, #19
 8007c5c:	4b63      	ldr	r3, [pc, #396]	; (8007dec <USB_HC_StartXfer+0x280>)
 8007c5e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007c60:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	7a9b      	ldrb	r3, [r3, #10]
 8007c66:	075b      	lsls	r3, r3, #29
 8007c68:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007c6c:	69f9      	ldr	r1, [r7, #28]
 8007c6e:	0148      	lsls	r0, r1, #5
 8007c70:	6a39      	ldr	r1, [r7, #32]
 8007c72:	4401      	add	r1, r0
 8007c74:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007c78:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007c7a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007c7c:	79fb      	ldrb	r3, [r7, #7]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d009      	beq.n	8007c96 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	68d9      	ldr	r1, [r3, #12]
 8007c86:	69fb      	ldr	r3, [r7, #28]
 8007c88:	015a      	lsls	r2, r3, #5
 8007c8a:	6a3b      	ldr	r3, [r7, #32]
 8007c8c:	4413      	add	r3, r2
 8007c8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c92:	460a      	mov	r2, r1
 8007c94:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007c96:	6a3b      	ldr	r3, [r7, #32]
 8007c98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	f003 0301 	and.w	r3, r3, #1
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	bf0c      	ite	eq
 8007ca6:	2301      	moveq	r3, #1
 8007ca8:	2300      	movne	r3, #0
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007cae:	69fb      	ldr	r3, [r7, #28]
 8007cb0:	015a      	lsls	r2, r3, #5
 8007cb2:	6a3b      	ldr	r3, [r7, #32]
 8007cb4:	4413      	add	r3, r2
 8007cb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	69fa      	ldr	r2, [r7, #28]
 8007cbe:	0151      	lsls	r1, r2, #5
 8007cc0:	6a3a      	ldr	r2, [r7, #32]
 8007cc2:	440a      	add	r2, r1
 8007cc4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007cc8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007ccc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007cce:	69fb      	ldr	r3, [r7, #28]
 8007cd0:	015a      	lsls	r2, r3, #5
 8007cd2:	6a3b      	ldr	r3, [r7, #32]
 8007cd4:	4413      	add	r3, r2
 8007cd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	7e7b      	ldrb	r3, [r7, #25]
 8007cde:	075b      	lsls	r3, r3, #29
 8007ce0:	69f9      	ldr	r1, [r7, #28]
 8007ce2:	0148      	lsls	r0, r1, #5
 8007ce4:	6a39      	ldr	r1, [r7, #32]
 8007ce6:	4401      	add	r1, r0
 8007ce8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007cec:	4313      	orrs	r3, r2
 8007cee:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007cf0:	69fb      	ldr	r3, [r7, #28]
 8007cf2:	015a      	lsls	r2, r3, #5
 8007cf4:	6a3b      	ldr	r3, [r7, #32]
 8007cf6:	4413      	add	r3, r2
 8007cf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007d06:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	78db      	ldrb	r3, [r3, #3]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d004      	beq.n	8007d1a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d16:	613b      	str	r3, [r7, #16]
 8007d18:	e003      	b.n	8007d22 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007d20:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007d28:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007d2a:	69fb      	ldr	r3, [r7, #28]
 8007d2c:	015a      	lsls	r2, r3, #5
 8007d2e:	6a3b      	ldr	r3, [r7, #32]
 8007d30:	4413      	add	r3, r2
 8007d32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d36:	461a      	mov	r2, r3
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007d3c:	79fb      	ldrb	r3, [r7, #7]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d001      	beq.n	8007d46 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8007d42:	2300      	movs	r3, #0
 8007d44:	e04e      	b.n	8007de4 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	78db      	ldrb	r3, [r3, #3]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d149      	bne.n	8007de2 <USB_HC_StartXfer+0x276>
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	695b      	ldr	r3, [r3, #20]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d045      	beq.n	8007de2 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	79db      	ldrb	r3, [r3, #7]
 8007d5a:	2b03      	cmp	r3, #3
 8007d5c:	d830      	bhi.n	8007dc0 <USB_HC_StartXfer+0x254>
 8007d5e:	a201      	add	r2, pc, #4	; (adr r2, 8007d64 <USB_HC_StartXfer+0x1f8>)
 8007d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d64:	08007d75 	.word	0x08007d75
 8007d68:	08007d99 	.word	0x08007d99
 8007d6c:	08007d75 	.word	0x08007d75
 8007d70:	08007d99 	.word	0x08007d99
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	695b      	ldr	r3, [r3, #20]
 8007d78:	3303      	adds	r3, #3
 8007d7a:	089b      	lsrs	r3, r3, #2
 8007d7c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007d7e:	8afa      	ldrh	r2, [r7, #22]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d84:	b29b      	uxth	r3, r3
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d91c      	bls.n	8007dc4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	699b      	ldr	r3, [r3, #24]
 8007d8e:	f043 0220 	orr.w	r2, r3, #32
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	619a      	str	r2, [r3, #24]
        }
        break;
 8007d96:	e015      	b.n	8007dc4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	695b      	ldr	r3, [r3, #20]
 8007d9c:	3303      	adds	r3, #3
 8007d9e:	089b      	lsrs	r3, r3, #2
 8007da0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007da2:	8afa      	ldrh	r2, [r7, #22]
 8007da4:	6a3b      	ldr	r3, [r7, #32]
 8007da6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007daa:	691b      	ldr	r3, [r3, #16]
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	429a      	cmp	r2, r3
 8007db0:	d90a      	bls.n	8007dc8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	699b      	ldr	r3, [r3, #24]
 8007db6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	619a      	str	r2, [r3, #24]
        }
        break;
 8007dbe:	e003      	b.n	8007dc8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007dc0:	bf00      	nop
 8007dc2:	e002      	b.n	8007dca <USB_HC_StartXfer+0x25e>
        break;
 8007dc4:	bf00      	nop
 8007dc6:	e000      	b.n	8007dca <USB_HC_StartXfer+0x25e>
        break;
 8007dc8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	68d9      	ldr	r1, [r3, #12]
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	785a      	ldrb	r2, [r3, #1]
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	695b      	ldr	r3, [r3, #20]
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	2000      	movs	r0, #0
 8007dda:	9000      	str	r0, [sp, #0]
 8007ddc:	68f8      	ldr	r0, [r7, #12]
 8007dde:	f7ff fb53 	bl	8007488 <USB_WritePacket>
  }

  return HAL_OK;
 8007de2:	2300      	movs	r3, #0
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3728      	adds	r7, #40	; 0x28
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}
 8007dec:	1ff80000 	.word	0x1ff80000

08007df0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b085      	sub	sp, #20
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e02:	695b      	ldr	r3, [r3, #20]
 8007e04:	b29b      	uxth	r3, r3
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3714      	adds	r7, #20
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr

08007e12 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007e12:	b480      	push	{r7}
 8007e14:	b089      	sub	sp, #36	; 0x24
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
 8007e1a:	460b      	mov	r3, r1
 8007e1c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8007e22:	78fb      	ldrb	r3, [r7, #3]
 8007e24:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8007e26:	2300      	movs	r3, #0
 8007e28:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	015a      	lsls	r2, r3, #5
 8007e2e:	69bb      	ldr	r3, [r7, #24]
 8007e30:	4413      	add	r3, r2
 8007e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	0c9b      	lsrs	r3, r3, #18
 8007e3a:	f003 0303 	and.w	r3, r3, #3
 8007e3e:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	015a      	lsls	r2, r3, #5
 8007e44:	69bb      	ldr	r3, [r7, #24]
 8007e46:	4413      	add	r3, r2
 8007e48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	0fdb      	lsrs	r3, r3, #31
 8007e50:	f003 0301 	and.w	r3, r3, #1
 8007e54:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	689b      	ldr	r3, [r3, #8]
 8007e5a:	f003 0320 	and.w	r3, r3, #32
 8007e5e:	2b20      	cmp	r3, #32
 8007e60:	d104      	bne.n	8007e6c <USB_HC_Halt+0x5a>
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d101      	bne.n	8007e6c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	e0e8      	b.n	800803e <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d002      	beq.n	8007e78 <USB_HC_Halt+0x66>
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	2b02      	cmp	r3, #2
 8007e76:	d173      	bne.n	8007f60 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	015a      	lsls	r2, r3, #5
 8007e7c:	69bb      	ldr	r3, [r7, #24]
 8007e7e:	4413      	add	r3, r2
 8007e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	697a      	ldr	r2, [r7, #20]
 8007e88:	0151      	lsls	r1, r2, #5
 8007e8a:	69ba      	ldr	r2, [r7, #24]
 8007e8c:	440a      	add	r2, r1
 8007e8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e92:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e96:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	f003 0320 	and.w	r3, r3, #32
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	f040 80cb 	bne.w	800803c <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eaa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d143      	bne.n	8007f3a <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	015a      	lsls	r2, r3, #5
 8007eb6:	69bb      	ldr	r3, [r7, #24]
 8007eb8:	4413      	add	r3, r2
 8007eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	697a      	ldr	r2, [r7, #20]
 8007ec2:	0151      	lsls	r1, r2, #5
 8007ec4:	69ba      	ldr	r2, [r7, #24]
 8007ec6:	440a      	add	r2, r1
 8007ec8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ecc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ed0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	015a      	lsls	r2, r3, #5
 8007ed6:	69bb      	ldr	r3, [r7, #24]
 8007ed8:	4413      	add	r3, r2
 8007eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	697a      	ldr	r2, [r7, #20]
 8007ee2:	0151      	lsls	r1, r2, #5
 8007ee4:	69ba      	ldr	r2, [r7, #24]
 8007ee6:	440a      	add	r2, r1
 8007ee8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007eec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007ef0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	015a      	lsls	r2, r3, #5
 8007ef6:	69bb      	ldr	r3, [r7, #24]
 8007ef8:	4413      	add	r3, r2
 8007efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	697a      	ldr	r2, [r7, #20]
 8007f02:	0151      	lsls	r1, r2, #5
 8007f04:	69ba      	ldr	r2, [r7, #24]
 8007f06:	440a      	add	r2, r1
 8007f08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f0c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007f10:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8007f12:	69fb      	ldr	r3, [r7, #28]
 8007f14:	3301      	adds	r3, #1
 8007f16:	61fb      	str	r3, [r7, #28]
 8007f18:	69fb      	ldr	r3, [r7, #28]
 8007f1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f1e:	d81d      	bhi.n	8007f5c <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	015a      	lsls	r2, r3, #5
 8007f24:	69bb      	ldr	r3, [r7, #24]
 8007f26:	4413      	add	r3, r2
 8007f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f36:	d0ec      	beq.n	8007f12 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007f38:	e080      	b.n	800803c <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	015a      	lsls	r2, r3, #5
 8007f3e:	69bb      	ldr	r3, [r7, #24]
 8007f40:	4413      	add	r3, r2
 8007f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	697a      	ldr	r2, [r7, #20]
 8007f4a:	0151      	lsls	r1, r2, #5
 8007f4c:	69ba      	ldr	r2, [r7, #24]
 8007f4e:	440a      	add	r2, r1
 8007f50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007f58:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007f5a:	e06f      	b.n	800803c <USB_HC_Halt+0x22a>
            break;
 8007f5c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007f5e:	e06d      	b.n	800803c <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	015a      	lsls	r2, r3, #5
 8007f64:	69bb      	ldr	r3, [r7, #24]
 8007f66:	4413      	add	r3, r2
 8007f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	697a      	ldr	r2, [r7, #20]
 8007f70:	0151      	lsls	r1, r2, #5
 8007f72:	69ba      	ldr	r2, [r7, #24]
 8007f74:	440a      	add	r2, r1
 8007f76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f7a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007f7e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007f80:	69bb      	ldr	r3, [r7, #24]
 8007f82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f86:	691b      	ldr	r3, [r3, #16]
 8007f88:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d143      	bne.n	8008018 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	015a      	lsls	r2, r3, #5
 8007f94:	69bb      	ldr	r3, [r7, #24]
 8007f96:	4413      	add	r3, r2
 8007f98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	697a      	ldr	r2, [r7, #20]
 8007fa0:	0151      	lsls	r1, r2, #5
 8007fa2:	69ba      	ldr	r2, [r7, #24]
 8007fa4:	440a      	add	r2, r1
 8007fa6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007faa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007fae:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	015a      	lsls	r2, r3, #5
 8007fb4:	69bb      	ldr	r3, [r7, #24]
 8007fb6:	4413      	add	r3, r2
 8007fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	697a      	ldr	r2, [r7, #20]
 8007fc0:	0151      	lsls	r1, r2, #5
 8007fc2:	69ba      	ldr	r2, [r7, #24]
 8007fc4:	440a      	add	r2, r1
 8007fc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007fca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007fce:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	015a      	lsls	r2, r3, #5
 8007fd4:	69bb      	ldr	r3, [r7, #24]
 8007fd6:	4413      	add	r3, r2
 8007fd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	697a      	ldr	r2, [r7, #20]
 8007fe0:	0151      	lsls	r1, r2, #5
 8007fe2:	69ba      	ldr	r2, [r7, #24]
 8007fe4:	440a      	add	r2, r1
 8007fe6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007fea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007fee:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007ff0:	69fb      	ldr	r3, [r7, #28]
 8007ff2:	3301      	adds	r3, #1
 8007ff4:	61fb      	str	r3, [r7, #28]
 8007ff6:	69fb      	ldr	r3, [r7, #28]
 8007ff8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ffc:	d81d      	bhi.n	800803a <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	015a      	lsls	r2, r3, #5
 8008002:	69bb      	ldr	r3, [r7, #24]
 8008004:	4413      	add	r3, r2
 8008006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008010:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008014:	d0ec      	beq.n	8007ff0 <USB_HC_Halt+0x1de>
 8008016:	e011      	b.n	800803c <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	015a      	lsls	r2, r3, #5
 800801c:	69bb      	ldr	r3, [r7, #24]
 800801e:	4413      	add	r3, r2
 8008020:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	697a      	ldr	r2, [r7, #20]
 8008028:	0151      	lsls	r1, r2, #5
 800802a:	69ba      	ldr	r2, [r7, #24]
 800802c:	440a      	add	r2, r1
 800802e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008032:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008036:	6013      	str	r3, [r2, #0]
 8008038:	e000      	b.n	800803c <USB_HC_Halt+0x22a>
          break;
 800803a:	bf00      	nop
    }
  }

  return HAL_OK;
 800803c:	2300      	movs	r3, #0
}
 800803e:	4618      	mov	r0, r3
 8008040:	3724      	adds	r7, #36	; 0x24
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr
	...

0800804c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800804c:	b480      	push	{r7}
 800804e:	b087      	sub	sp, #28
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	460b      	mov	r3, r1
 8008056:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800805c:	78fb      	ldrb	r3, [r7, #3]
 800805e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008060:	2301      	movs	r3, #1
 8008062:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	04da      	lsls	r2, r3, #19
 8008068:	4b15      	ldr	r3, [pc, #84]	; (80080c0 <USB_DoPing+0x74>)
 800806a:	4013      	ands	r3, r2
 800806c:	693a      	ldr	r2, [r7, #16]
 800806e:	0151      	lsls	r1, r2, #5
 8008070:	697a      	ldr	r2, [r7, #20]
 8008072:	440a      	add	r2, r1
 8008074:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008078:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800807c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	015a      	lsls	r2, r3, #5
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	4413      	add	r3, r2
 8008086:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008094:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800809c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	015a      	lsls	r2, r3, #5
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	4413      	add	r3, r2
 80080a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080aa:	461a      	mov	r2, r3
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80080b0:	2300      	movs	r3, #0
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	371c      	adds	r7, #28
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr
 80080be:	bf00      	nop
 80080c0:	1ff80000 	.word	0x1ff80000

080080c4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b086      	sub	sp, #24
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80080d0:	2300      	movs	r3, #0
 80080d2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f7ff f935 	bl	8007344 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80080da:	2110      	movs	r1, #16
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f7ff f98f 	bl	8007400 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f7ff f9b0 	bl	8007448 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80080e8:	2300      	movs	r3, #0
 80080ea:	613b      	str	r3, [r7, #16]
 80080ec:	e01f      	b.n	800812e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	015a      	lsls	r2, r3, #5
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	4413      	add	r3, r2
 80080f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008104:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800810c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008114:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	015a      	lsls	r2, r3, #5
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	4413      	add	r3, r2
 800811e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008122:	461a      	mov	r2, r3
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	3301      	adds	r3, #1
 800812c:	613b      	str	r3, [r7, #16]
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	2b0f      	cmp	r3, #15
 8008132:	d9dc      	bls.n	80080ee <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008134:	2300      	movs	r3, #0
 8008136:	613b      	str	r3, [r7, #16]
 8008138:	e034      	b.n	80081a4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	015a      	lsls	r2, r3, #5
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	4413      	add	r3, r2
 8008142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008150:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008158:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008160:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	015a      	lsls	r2, r3, #5
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	4413      	add	r3, r2
 800816a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800816e:	461a      	mov	r2, r3
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	3301      	adds	r3, #1
 8008178:	617b      	str	r3, [r7, #20]
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008180:	d80c      	bhi.n	800819c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	015a      	lsls	r2, r3, #5
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	4413      	add	r3, r2
 800818a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008194:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008198:	d0ec      	beq.n	8008174 <USB_StopHost+0xb0>
 800819a:	e000      	b.n	800819e <USB_StopHost+0xda>
        break;
 800819c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	3301      	adds	r3, #1
 80081a2:	613b      	str	r3, [r7, #16]
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	2b0f      	cmp	r3, #15
 80081a8:	d9c7      	bls.n	800813a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081b0:	461a      	mov	r2, r3
 80081b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80081b6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80081be:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f7ff f8ae 	bl	8007322 <USB_EnableGlobalInt>

  return HAL_OK;
 80081c6:	2300      	movs	r3, #0
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3718      	adds	r7, #24
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 80081d4:	4904      	ldr	r1, [pc, #16]	; (80081e8 <MX_FATFS_Init+0x18>)
 80081d6:	4805      	ldr	r0, [pc, #20]	; (80081ec <MX_FATFS_Init+0x1c>)
 80081d8:	f003 f84c 	bl	800b274 <FATFS_LinkDriver>
 80081dc:	4603      	mov	r3, r0
 80081de:	461a      	mov	r2, r3
 80081e0:	4b03      	ldr	r3, [pc, #12]	; (80081f0 <MX_FATFS_Init+0x20>)
 80081e2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80081e4:	bf00      	nop
 80081e6:	bd80      	pop	{r7, pc}
 80081e8:	20001398 	.word	0x20001398
 80081ec:	0800be80 	.word	0x0800be80
 80081f0:	20003400 	.word	0x20003400

080081f4 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b083      	sub	sp, #12
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	4603      	mov	r3, r0
 80081fc:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 80081fe:	2300      	movs	r3, #0
}
 8008200:	4618      	mov	r0, r3
 8008202:	370c      	adds	r7, #12
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr

0800820c <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b084      	sub	sp, #16
 8008210:	af00      	add	r7, sp, #0
 8008212:	4603      	mov	r3, r0
 8008214:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8008216:	2301      	movs	r3, #1
 8008218:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800821a:	79fb      	ldrb	r3, [r7, #7]
 800821c:	4619      	mov	r1, r3
 800821e:	4808      	ldr	r0, [pc, #32]	; (8008240 <USBH_status+0x34>)
 8008220:	f000 fe1a 	bl	8008e58 <USBH_MSC_UnitIsReady>
 8008224:	4603      	mov	r3, r0
 8008226:	2b00      	cmp	r3, #0
 8008228:	d002      	beq.n	8008230 <USBH_status+0x24>
  {
    res = RES_OK;
 800822a:	2300      	movs	r3, #0
 800822c:	73fb      	strb	r3, [r7, #15]
 800822e:	e001      	b.n	8008234 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8008230:	2301      	movs	r3, #1
 8008232:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8008234:	7bfb      	ldrb	r3, [r7, #15]
}
 8008236:	4618      	mov	r0, r3
 8008238:	3710      	adds	r7, #16
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
 800823e:	bf00      	nop
 8008240:	20003404 	.word	0x20003404

08008244 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b094      	sub	sp, #80	; 0x50
 8008248:	af02      	add	r7, sp, #8
 800824a:	60b9      	str	r1, [r7, #8]
 800824c:	607a      	str	r2, [r7, #4]
 800824e:	603b      	str	r3, [r7, #0]
 8008250:	4603      	mov	r3, r0
 8008252:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008254:	2301      	movs	r3, #1
 8008256:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800825a:	7bf9      	ldrb	r1, [r7, #15]
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	9300      	str	r3, [sp, #0]
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	687a      	ldr	r2, [r7, #4]
 8008264:	4813      	ldr	r0, [pc, #76]	; (80082b4 <USBH_read+0x70>)
 8008266:	f000 fe41 	bl	8008eec <USBH_MSC_Read>
 800826a:	4603      	mov	r3, r0
 800826c:	2b00      	cmp	r3, #0
 800826e:	d103      	bne.n	8008278 <USBH_read+0x34>
  {
    res = RES_OK;
 8008270:	2300      	movs	r3, #0
 8008272:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008276:	e017      	b.n	80082a8 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8008278:	f107 0210 	add.w	r2, r7, #16
 800827c:	7bfb      	ldrb	r3, [r7, #15]
 800827e:	4619      	mov	r1, r3
 8008280:	480c      	ldr	r0, [pc, #48]	; (80082b4 <USBH_read+0x70>)
 8008282:	f000 fe0f 	bl	8008ea4 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8008286:	7f7b      	ldrb	r3, [r7, #29]
 8008288:	2b3a      	cmp	r3, #58	; 0x3a
 800828a:	d005      	beq.n	8008298 <USBH_read+0x54>
 800828c:	2b3a      	cmp	r3, #58	; 0x3a
 800828e:	dc07      	bgt.n	80082a0 <USBH_read+0x5c>
 8008290:	2b04      	cmp	r3, #4
 8008292:	d001      	beq.n	8008298 <USBH_read+0x54>
 8008294:	2b28      	cmp	r3, #40	; 0x28
 8008296:	d103      	bne.n	80082a0 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8008298:	2303      	movs	r3, #3
 800829a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800829e:	e003      	b.n	80082a8 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 80082a0:	2301      	movs	r3, #1
 80082a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80082a6:	bf00      	nop
    }
  }

  return res;
 80082a8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3748      	adds	r7, #72	; 0x48
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}
 80082b4:	20003404 	.word	0x20003404

080082b8 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b094      	sub	sp, #80	; 0x50
 80082bc:	af02      	add	r7, sp, #8
 80082be:	60b9      	str	r1, [r7, #8]
 80082c0:	607a      	str	r2, [r7, #4]
 80082c2:	603b      	str	r3, [r7, #0]
 80082c4:	4603      	mov	r3, r0
 80082c6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80082c8:	2301      	movs	r3, #1
 80082ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 80082ce:	7bf9      	ldrb	r1, [r7, #15]
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	9300      	str	r3, [sp, #0]
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	687a      	ldr	r2, [r7, #4]
 80082d8:	4817      	ldr	r0, [pc, #92]	; (8008338 <USBH_write+0x80>)
 80082da:	f000 fe70 	bl	8008fbe <USBH_MSC_Write>
 80082de:	4603      	mov	r3, r0
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d103      	bne.n	80082ec <USBH_write+0x34>
  {
    res = RES_OK;
 80082e4:	2300      	movs	r3, #0
 80082e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80082ea:	e01f      	b.n	800832c <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80082ec:	f107 0210 	add.w	r2, r7, #16
 80082f0:	7bfb      	ldrb	r3, [r7, #15]
 80082f2:	4619      	mov	r1, r3
 80082f4:	4810      	ldr	r0, [pc, #64]	; (8008338 <USBH_write+0x80>)
 80082f6:	f000 fdd5 	bl	8008ea4 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80082fa:	7f7b      	ldrb	r3, [r7, #29]
 80082fc:	2b3a      	cmp	r3, #58	; 0x3a
 80082fe:	d00d      	beq.n	800831c <USBH_write+0x64>
 8008300:	2b3a      	cmp	r3, #58	; 0x3a
 8008302:	dc0f      	bgt.n	8008324 <USBH_write+0x6c>
 8008304:	2b28      	cmp	r3, #40	; 0x28
 8008306:	d009      	beq.n	800831c <USBH_write+0x64>
 8008308:	2b28      	cmp	r3, #40	; 0x28
 800830a:	dc0b      	bgt.n	8008324 <USBH_write+0x6c>
 800830c:	2b04      	cmp	r3, #4
 800830e:	d005      	beq.n	800831c <USBH_write+0x64>
 8008310:	2b27      	cmp	r3, #39	; 0x27
 8008312:	d107      	bne.n	8008324 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8008314:	2302      	movs	r3, #2
 8008316:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800831a:	e007      	b.n	800832c <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 800831c:	2303      	movs	r3, #3
 800831e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008322:	e003      	b.n	800832c <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8008324:	2301      	movs	r3, #1
 8008326:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800832a:	bf00      	nop
    }
  }

  return res;
 800832c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008330:	4618      	mov	r0, r3
 8008332:	3748      	adds	r7, #72	; 0x48
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}
 8008338:	20003404 	.word	0x20003404

0800833c <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b090      	sub	sp, #64	; 0x40
 8008340:	af00      	add	r7, sp, #0
 8008342:	4603      	mov	r3, r0
 8008344:	603a      	str	r2, [r7, #0]
 8008346:	71fb      	strb	r3, [r7, #7]
 8008348:	460b      	mov	r3, r1
 800834a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800834c:	2301      	movs	r3, #1
 800834e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8008352:	79bb      	ldrb	r3, [r7, #6]
 8008354:	2b03      	cmp	r3, #3
 8008356:	d852      	bhi.n	80083fe <USBH_ioctl+0xc2>
 8008358:	a201      	add	r2, pc, #4	; (adr r2, 8008360 <USBH_ioctl+0x24>)
 800835a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800835e:	bf00      	nop
 8008360:	08008371 	.word	0x08008371
 8008364:	08008379 	.word	0x08008379
 8008368:	080083a3 	.word	0x080083a3
 800836c:	080083cf 	.word	0x080083cf
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8008370:	2300      	movs	r3, #0
 8008372:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008376:	e045      	b.n	8008404 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008378:	f107 0208 	add.w	r2, r7, #8
 800837c:	79fb      	ldrb	r3, [r7, #7]
 800837e:	4619      	mov	r1, r3
 8008380:	4823      	ldr	r0, [pc, #140]	; (8008410 <USBH_ioctl+0xd4>)
 8008382:	f000 fd8f 	bl	8008ea4 <USBH_MSC_GetLUNInfo>
 8008386:	4603      	mov	r3, r0
 8008388:	2b00      	cmp	r3, #0
 800838a:	d106      	bne.n	800839a <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 800838c:	68fa      	ldr	r2, [r7, #12]
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008392:	2300      	movs	r3, #0
 8008394:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008398:	e034      	b.n	8008404 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800839a:	2301      	movs	r3, #1
 800839c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80083a0:	e030      	b.n	8008404 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80083a2:	f107 0208 	add.w	r2, r7, #8
 80083a6:	79fb      	ldrb	r3, [r7, #7]
 80083a8:	4619      	mov	r1, r3
 80083aa:	4819      	ldr	r0, [pc, #100]	; (8008410 <USBH_ioctl+0xd4>)
 80083ac:	f000 fd7a 	bl	8008ea4 <USBH_MSC_GetLUNInfo>
 80083b0:	4603      	mov	r3, r0
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d107      	bne.n	80083c6 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 80083b6:	8a3b      	ldrh	r3, [r7, #16]
 80083b8:	461a      	mov	r2, r3
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80083be:	2300      	movs	r3, #0
 80083c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80083c4:	e01e      	b.n	8008404 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80083c6:	2301      	movs	r3, #1
 80083c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80083cc:	e01a      	b.n	8008404 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80083ce:	f107 0208 	add.w	r2, r7, #8
 80083d2:	79fb      	ldrb	r3, [r7, #7]
 80083d4:	4619      	mov	r1, r3
 80083d6:	480e      	ldr	r0, [pc, #56]	; (8008410 <USBH_ioctl+0xd4>)
 80083d8:	f000 fd64 	bl	8008ea4 <USBH_MSC_GetLUNInfo>
 80083dc:	4603      	mov	r3, r0
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d109      	bne.n	80083f6 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 80083e2:	8a3b      	ldrh	r3, [r7, #16]
 80083e4:	0a5b      	lsrs	r3, r3, #9
 80083e6:	b29b      	uxth	r3, r3
 80083e8:	461a      	mov	r2, r3
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80083ee:	2300      	movs	r3, #0
 80083f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80083f4:	e006      	b.n	8008404 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80083f6:	2301      	movs	r3, #1
 80083f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80083fc:	e002      	b.n	8008404 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 80083fe:	2304      	movs	r3, #4
 8008400:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8008404:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008408:	4618      	mov	r0, r3
 800840a:	3740      	adds	r7, #64	; 0x40
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}
 8008410:	20003404 	.word	0x20003404

08008414 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008414:	b590      	push	{r4, r7, lr}
 8008416:	b089      	sub	sp, #36	; 0x24
 8008418:	af04      	add	r7, sp, #16
 800841a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008422:	7919      	ldrb	r1, [r3, #4]
 8008424:	2350      	movs	r3, #80	; 0x50
 8008426:	2206      	movs	r2, #6
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f001 fc53 	bl	8009cd4 <USBH_FindInterface>
 800842e:	4603      	mov	r3, r0
 8008430:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8008432:	7bfb      	ldrb	r3, [r7, #15]
 8008434:	2bff      	cmp	r3, #255	; 0xff
 8008436:	d002      	beq.n	800843e <USBH_MSC_InterfaceInit+0x2a>
 8008438:	7bfb      	ldrb	r3, [r7, #15]
 800843a:	2b01      	cmp	r3, #1
 800843c:	d901      	bls.n	8008442 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800843e:	2302      	movs	r3, #2
 8008440:	e0ef      	b.n	8008622 <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 8008442:	7bfb      	ldrb	r3, [r7, #15]
 8008444:	4619      	mov	r1, r3
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f001 fc28 	bl	8009c9c <USBH_SelectInterface>
 800844c:	4603      	mov	r3, r0
 800844e:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008450:	7bbb      	ldrb	r3, [r7, #14]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d001      	beq.n	800845a <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8008456:	2302      	movs	r3, #2
 8008458:	e0e3      	b.n	8008622 <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008460:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008464:	f003 fa78 	bl	800b958 <malloc>
 8008468:	4603      	mov	r3, r0
 800846a:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008472:	69db      	ldr	r3, [r3, #28]
 8008474:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d101      	bne.n	8008480 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 800847c:	2302      	movs	r3, #2
 800847e:	e0d0      	b.n	8008622 <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8008480:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008484:	2100      	movs	r1, #0
 8008486:	68b8      	ldr	r0, [r7, #8]
 8008488:	f003 fa84 	bl	800b994 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800848c:	7bfb      	ldrb	r3, [r7, #15]
 800848e:	687a      	ldr	r2, [r7, #4]
 8008490:	211a      	movs	r1, #26
 8008492:	fb01 f303 	mul.w	r3, r1, r3
 8008496:	4413      	add	r3, r2
 8008498:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800849c:	781b      	ldrb	r3, [r3, #0]
 800849e:	b25b      	sxtb	r3, r3
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	da16      	bge.n	80084d2 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80084a4:	7bfb      	ldrb	r3, [r7, #15]
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	211a      	movs	r1, #26
 80084aa:	fb01 f303 	mul.w	r3, r1, r3
 80084ae:	4413      	add	r3, r2
 80084b0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80084b4:	781a      	ldrb	r2, [r3, #0]
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80084ba:	7bfb      	ldrb	r3, [r7, #15]
 80084bc:	687a      	ldr	r2, [r7, #4]
 80084be:	211a      	movs	r1, #26
 80084c0:	fb01 f303 	mul.w	r3, r1, r3
 80084c4:	4413      	add	r3, r2
 80084c6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80084ca:	881a      	ldrh	r2, [r3, #0]
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	815a      	strh	r2, [r3, #10]
 80084d0:	e015      	b.n	80084fe <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80084d2:	7bfb      	ldrb	r3, [r7, #15]
 80084d4:	687a      	ldr	r2, [r7, #4]
 80084d6:	211a      	movs	r1, #26
 80084d8:	fb01 f303 	mul.w	r3, r1, r3
 80084dc:	4413      	add	r3, r2
 80084de:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80084e2:	781a      	ldrb	r2, [r3, #0]
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80084e8:	7bfb      	ldrb	r3, [r7, #15]
 80084ea:	687a      	ldr	r2, [r7, #4]
 80084ec:	211a      	movs	r1, #26
 80084ee:	fb01 f303 	mul.w	r3, r1, r3
 80084f2:	4413      	add	r3, r2
 80084f4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80084f8:	881a      	ldrh	r2, [r3, #0]
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80084fe:	7bfb      	ldrb	r3, [r7, #15]
 8008500:	687a      	ldr	r2, [r7, #4]
 8008502:	211a      	movs	r1, #26
 8008504:	fb01 f303 	mul.w	r3, r1, r3
 8008508:	4413      	add	r3, r2
 800850a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	b25b      	sxtb	r3, r3
 8008512:	2b00      	cmp	r3, #0
 8008514:	da16      	bge.n	8008544 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008516:	7bfb      	ldrb	r3, [r7, #15]
 8008518:	687a      	ldr	r2, [r7, #4]
 800851a:	211a      	movs	r1, #26
 800851c:	fb01 f303 	mul.w	r3, r1, r3
 8008520:	4413      	add	r3, r2
 8008522:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008526:	781a      	ldrb	r2, [r3, #0]
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800852c:	7bfb      	ldrb	r3, [r7, #15]
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	211a      	movs	r1, #26
 8008532:	fb01 f303 	mul.w	r3, r1, r3
 8008536:	4413      	add	r3, r2
 8008538:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800853c:	881a      	ldrh	r2, [r3, #0]
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	815a      	strh	r2, [r3, #10]
 8008542:	e015      	b.n	8008570 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008544:	7bfb      	ldrb	r3, [r7, #15]
 8008546:	687a      	ldr	r2, [r7, #4]
 8008548:	211a      	movs	r1, #26
 800854a:	fb01 f303 	mul.w	r3, r1, r3
 800854e:	4413      	add	r3, r2
 8008550:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008554:	781a      	ldrb	r2, [r3, #0]
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800855a:	7bfb      	ldrb	r3, [r7, #15]
 800855c:	687a      	ldr	r2, [r7, #4]
 800855e:	211a      	movs	r1, #26
 8008560:	fb01 f303 	mul.w	r3, r1, r3
 8008564:	4413      	add	r3, r2
 8008566:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800856a:	881a      	ldrh	r2, [r3, #0]
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	2200      	movs	r2, #0
 8008574:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	2200      	movs	r2, #0
 800857a:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	2200      	movs	r2, #0
 8008580:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	799b      	ldrb	r3, [r3, #6]
 8008586:	4619      	mov	r1, r3
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f002 fdc4 	bl	800b116 <USBH_AllocPipe>
 800858e:	4603      	mov	r3, r0
 8008590:	461a      	mov	r2, r3
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	79db      	ldrb	r3, [r3, #7]
 800859a:	4619      	mov	r1, r3
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f002 fdba 	bl	800b116 <USBH_AllocPipe>
 80085a2:	4603      	mov	r3, r0
 80085a4:	461a      	mov	r2, r3
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f000 fdac 	bl	8009108 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	7959      	ldrb	r1, [r3, #5]
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	7998      	ldrb	r0, [r3, #6]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80085c4:	68ba      	ldr	r2, [r7, #8]
 80085c6:	8912      	ldrh	r2, [r2, #8]
 80085c8:	9202      	str	r2, [sp, #8]
 80085ca:	2202      	movs	r2, #2
 80085cc:	9201      	str	r2, [sp, #4]
 80085ce:	9300      	str	r3, [sp, #0]
 80085d0:	4623      	mov	r3, r4
 80085d2:	4602      	mov	r2, r0
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f002 fd6f 	bl	800b0b8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	7919      	ldrb	r1, [r3, #4]
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	79d8      	ldrb	r0, [r3, #7]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80085ee:	68ba      	ldr	r2, [r7, #8]
 80085f0:	8952      	ldrh	r2, [r2, #10]
 80085f2:	9202      	str	r2, [sp, #8]
 80085f4:	2202      	movs	r2, #2
 80085f6:	9201      	str	r2, [sp, #4]
 80085f8:	9300      	str	r3, [sp, #0]
 80085fa:	4623      	mov	r3, r4
 80085fc:	4602      	mov	r2, r0
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f002 fd5a 	bl	800b0b8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	791b      	ldrb	r3, [r3, #4]
 8008608:	2200      	movs	r2, #0
 800860a:	4619      	mov	r1, r3
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f003 f8c5 	bl	800b79c <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	795b      	ldrb	r3, [r3, #5]
 8008616:	2200      	movs	r2, #0
 8008618:	4619      	mov	r1, r3
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f003 f8be 	bl	800b79c <USBH_LL_SetToggle>

  return USBH_OK;
 8008620:	2300      	movs	r3, #0
}
 8008622:	4618      	mov	r0, r3
 8008624:	3714      	adds	r7, #20
 8008626:	46bd      	mov	sp, r7
 8008628:	bd90      	pop	{r4, r7, pc}

0800862a <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800862a:	b580      	push	{r7, lr}
 800862c:	b084      	sub	sp, #16
 800862e:	af00      	add	r7, sp, #0
 8008630:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008638:	69db      	ldr	r3, [r3, #28]
 800863a:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	795b      	ldrb	r3, [r3, #5]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d00e      	beq.n	8008662 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	795b      	ldrb	r3, [r3, #5]
 8008648:	4619      	mov	r1, r3
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f002 fd53 	bl	800b0f6 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	795b      	ldrb	r3, [r3, #5]
 8008654:	4619      	mov	r1, r3
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f002 fd7e 	bl	800b158 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	2200      	movs	r2, #0
 8008660:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	791b      	ldrb	r3, [r3, #4]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d00e      	beq.n	8008688 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	791b      	ldrb	r3, [r3, #4]
 800866e:	4619      	mov	r1, r3
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f002 fd40 	bl	800b0f6 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	791b      	ldrb	r3, [r3, #4]
 800867a:	4619      	mov	r1, r3
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f002 fd6b 	bl	800b158 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2200      	movs	r2, #0
 8008686:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800868e:	69db      	ldr	r3, [r3, #28]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d00b      	beq.n	80086ac <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800869a:	69db      	ldr	r3, [r3, #28]
 800869c:	4618      	mov	r0, r3
 800869e:	f003 f963 	bl	800b968 <free>
    phost->pActiveClass->pData = 0U;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80086a8:	2200      	movs	r2, #0
 80086aa:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80086ac:	2300      	movs	r3, #0
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3710      	adds	r7, #16
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}

080086b6 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80086b6:	b580      	push	{r7, lr}
 80086b8:	b084      	sub	sp, #16
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80086c4:	69db      	ldr	r3, [r3, #28]
 80086c6:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 80086c8:	2301      	movs	r3, #1
 80086ca:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	7b9b      	ldrb	r3, [r3, #14]
 80086d0:	2b03      	cmp	r3, #3
 80086d2:	d041      	beq.n	8008758 <USBH_MSC_ClassRequest+0xa2>
 80086d4:	2b03      	cmp	r3, #3
 80086d6:	dc4b      	bgt.n	8008770 <USBH_MSC_ClassRequest+0xba>
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d001      	beq.n	80086e0 <USBH_MSC_ClassRequest+0x2a>
 80086dc:	2b02      	cmp	r3, #2
 80086de:	d147      	bne.n	8008770 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	4619      	mov	r1, r3
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f000 fcf0 	bl	80090ca <USBH_MSC_BOT_REQ_GetMaxLUN>
 80086ea:	4603      	mov	r3, r0
 80086ec:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 80086ee:	7bfb      	ldrb	r3, [r7, #15]
 80086f0:	2b03      	cmp	r3, #3
 80086f2:	d104      	bne.n	80086fe <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	2200      	movs	r2, #0
 80086f8:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 80086fa:	2300      	movs	r3, #0
 80086fc:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 80086fe:	7bfb      	ldrb	r3, [r7, #15]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d137      	bne.n	8008774 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	2b02      	cmp	r3, #2
 800870a:	d804      	bhi.n	8008716 <USBH_MSC_ClassRequest+0x60>
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	781b      	ldrb	r3, [r3, #0]
 8008710:	3301      	adds	r3, #1
 8008712:	b2da      	uxtb	r2, r3
 8008714:	e000      	b.n	8008718 <USBH_MSC_ClassRequest+0x62>
 8008716:	2202      	movs	r2, #2
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800871c:	2300      	movs	r3, #0
 800871e:	73bb      	strb	r3, [r7, #14]
 8008720:	e014      	b.n	800874c <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8008722:	7bbb      	ldrb	r3, [r7, #14]
 8008724:	68ba      	ldr	r2, [r7, #8]
 8008726:	2134      	movs	r1, #52	; 0x34
 8008728:	fb01 f303 	mul.w	r3, r1, r3
 800872c:	4413      	add	r3, r2
 800872e:	3392      	adds	r3, #146	; 0x92
 8008730:	2202      	movs	r2, #2
 8008732:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8008734:	7bbb      	ldrb	r3, [r7, #14]
 8008736:	68ba      	ldr	r2, [r7, #8]
 8008738:	2134      	movs	r1, #52	; 0x34
 800873a:	fb01 f303 	mul.w	r3, r1, r3
 800873e:	4413      	add	r3, r2
 8008740:	33c1      	adds	r3, #193	; 0xc1
 8008742:	2200      	movs	r2, #0
 8008744:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8008746:	7bbb      	ldrb	r3, [r7, #14]
 8008748:	3301      	adds	r3, #1
 800874a:	73bb      	strb	r3, [r7, #14]
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	781b      	ldrb	r3, [r3, #0]
 8008750:	7bba      	ldrb	r2, [r7, #14]
 8008752:	429a      	cmp	r2, r3
 8008754:	d3e5      	bcc.n	8008722 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8008756:	e00d      	b.n	8008774 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8008758:	2100      	movs	r1, #0
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f002 f87b 	bl	800a856 <USBH_ClrFeature>
 8008760:	4603      	mov	r3, r0
 8008762:	2b00      	cmp	r3, #0
 8008764:	d108      	bne.n	8008778 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	7bda      	ldrb	r2, [r3, #15]
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	739a      	strb	r2, [r3, #14]
      }
      break;
 800876e:	e003      	b.n	8008778 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 8008770:	bf00      	nop
 8008772:	e002      	b.n	800877a <USBH_MSC_ClassRequest+0xc4>
      break;
 8008774:	bf00      	nop
 8008776:	e000      	b.n	800877a <USBH_MSC_ClassRequest+0xc4>
      break;
 8008778:	bf00      	nop
  }

  return status;
 800877a:	7bfb      	ldrb	r3, [r7, #15]
}
 800877c:	4618      	mov	r0, r3
 800877e:	3710      	adds	r7, #16
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}

08008784 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b086      	sub	sp, #24
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008792:	69db      	ldr	r3, [r3, #28]
 8008794:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8008796:	2301      	movs	r3, #1
 8008798:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800879a:	2301      	movs	r3, #1
 800879c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800879e:	2301      	movs	r3, #1
 80087a0:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	7b1b      	ldrb	r3, [r3, #12]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d003      	beq.n	80087b2 <USBH_MSC_Process+0x2e>
 80087aa:	2b01      	cmp	r3, #1
 80087ac:	f000 8271 	beq.w	8008c92 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 80087b0:	e272      	b.n	8008c98 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	781b      	ldrb	r3, [r3, #0]
 80087bc:	b29b      	uxth	r3, r3
 80087be:	429a      	cmp	r2, r3
 80087c0:	f080 824f 	bcs.w	8008c62 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80087ca:	4619      	mov	r1, r3
 80087cc:	693a      	ldr	r2, [r7, #16]
 80087ce:	2334      	movs	r3, #52	; 0x34
 80087d0:	fb03 f301 	mul.w	r3, r3, r1
 80087d4:	4413      	add	r3, r2
 80087d6:	3391      	adds	r3, #145	; 0x91
 80087d8:	2201      	movs	r2, #1
 80087da:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80087e2:	4619      	mov	r1, r3
 80087e4:	693a      	ldr	r2, [r7, #16]
 80087e6:	2334      	movs	r3, #52	; 0x34
 80087e8:	fb03 f301 	mul.w	r3, r3, r1
 80087ec:	4413      	add	r3, r2
 80087ee:	3390      	adds	r3, #144	; 0x90
 80087f0:	781b      	ldrb	r3, [r3, #0]
 80087f2:	2b08      	cmp	r3, #8
 80087f4:	f200 8243 	bhi.w	8008c7e <USBH_MSC_Process+0x4fa>
 80087f8:	a201      	add	r2, pc, #4	; (adr r2, 8008800 <USBH_MSC_Process+0x7c>)
 80087fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087fe:	bf00      	nop
 8008800:	08008825 	.word	0x08008825
 8008804:	08008c7f 	.word	0x08008c7f
 8008808:	080088ed 	.word	0x080088ed
 800880c:	08008a71 	.word	0x08008a71
 8008810:	0800884b 	.word	0x0800884b
 8008814:	08008b3d 	.word	0x08008b3d
 8008818:	08008c7f 	.word	0x08008c7f
 800881c:	08008c7f 	.word	0x08008c7f
 8008820:	08008c51 	.word	0x08008c51
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800882a:	4619      	mov	r1, r3
 800882c:	693a      	ldr	r2, [r7, #16]
 800882e:	2334      	movs	r3, #52	; 0x34
 8008830:	fb03 f301 	mul.w	r3, r3, r1
 8008834:	4413      	add	r3, r2
 8008836:	3390      	adds	r3, #144	; 0x90
 8008838:	2204      	movs	r2, #4
 800883a:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8008848:	e222      	b.n	8008c90 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008850:	b2d9      	uxtb	r1, r3
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008858:	461a      	mov	r2, r3
 800885a:	2334      	movs	r3, #52	; 0x34
 800885c:	fb03 f302 	mul.w	r3, r3, r2
 8008860:	3398      	adds	r3, #152	; 0x98
 8008862:	693a      	ldr	r2, [r7, #16]
 8008864:	4413      	add	r3, r2
 8008866:	3307      	adds	r3, #7
 8008868:	461a      	mov	r2, r3
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 ff6a 	bl	8009744 <USBH_MSC_SCSI_Inquiry>
 8008870:	4603      	mov	r3, r0
 8008872:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008874:	7bfb      	ldrb	r3, [r7, #15]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d10b      	bne.n	8008892 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008880:	4619      	mov	r1, r3
 8008882:	693a      	ldr	r2, [r7, #16]
 8008884:	2334      	movs	r3, #52	; 0x34
 8008886:	fb03 f301 	mul.w	r3, r3, r1
 800888a:	4413      	add	r3, r2
 800888c:	3390      	adds	r3, #144	; 0x90
 800888e:	2202      	movs	r2, #2
 8008890:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8008892:	7bfb      	ldrb	r3, [r7, #15]
 8008894:	2b02      	cmp	r3, #2
 8008896:	d10c      	bne.n	80088b2 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800889e:	4619      	mov	r1, r3
 80088a0:	693a      	ldr	r2, [r7, #16]
 80088a2:	2334      	movs	r3, #52	; 0x34
 80088a4:	fb03 f301 	mul.w	r3, r3, r1
 80088a8:	4413      	add	r3, r2
 80088aa:	3390      	adds	r3, #144	; 0x90
 80088ac:	2205      	movs	r2, #5
 80088ae:	701a      	strb	r2, [r3, #0]
            break;
 80088b0:	e1e7      	b.n	8008c82 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80088b2:	7bfb      	ldrb	r3, [r7, #15]
 80088b4:	2b04      	cmp	r3, #4
 80088b6:	f040 81e4 	bne.w	8008c82 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80088c0:	4619      	mov	r1, r3
 80088c2:	693a      	ldr	r2, [r7, #16]
 80088c4:	2334      	movs	r3, #52	; 0x34
 80088c6:	fb03 f301 	mul.w	r3, r3, r1
 80088ca:	4413      	add	r3, r2
 80088cc:	3390      	adds	r3, #144	; 0x90
 80088ce:	2201      	movs	r2, #1
 80088d0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80088d8:	4619      	mov	r1, r3
 80088da:	693a      	ldr	r2, [r7, #16]
 80088dc:	2334      	movs	r3, #52	; 0x34
 80088de:	fb03 f301 	mul.w	r3, r3, r1
 80088e2:	4413      	add	r3, r2
 80088e4:	3391      	adds	r3, #145	; 0x91
 80088e6:	2202      	movs	r2, #2
 80088e8:	701a      	strb	r2, [r3, #0]
            break;
 80088ea:	e1ca      	b.n	8008c82 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80088f2:	b2db      	uxtb	r3, r3
 80088f4:	4619      	mov	r1, r3
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f000 fe66 	bl	80095c8 <USBH_MSC_SCSI_TestUnitReady>
 80088fc:	4603      	mov	r3, r0
 80088fe:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8008900:	7bbb      	ldrb	r3, [r7, #14]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d149      	bne.n	800899a <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800890c:	4619      	mov	r1, r3
 800890e:	693a      	ldr	r2, [r7, #16]
 8008910:	2334      	movs	r3, #52	; 0x34
 8008912:	fb03 f301 	mul.w	r3, r3, r1
 8008916:	4413      	add	r3, r2
 8008918:	3392      	adds	r3, #146	; 0x92
 800891a:	781b      	ldrb	r3, [r3, #0]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d00c      	beq.n	800893a <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8008920:	693b      	ldr	r3, [r7, #16]
 8008922:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008926:	4619      	mov	r1, r3
 8008928:	693a      	ldr	r2, [r7, #16]
 800892a:	2334      	movs	r3, #52	; 0x34
 800892c:	fb03 f301 	mul.w	r3, r3, r1
 8008930:	4413      	add	r3, r2
 8008932:	33c1      	adds	r3, #193	; 0xc1
 8008934:	2201      	movs	r2, #1
 8008936:	701a      	strb	r2, [r3, #0]
 8008938:	e00b      	b.n	8008952 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008940:	4619      	mov	r1, r3
 8008942:	693a      	ldr	r2, [r7, #16]
 8008944:	2334      	movs	r3, #52	; 0x34
 8008946:	fb03 f301 	mul.w	r3, r3, r1
 800894a:	4413      	add	r3, r2
 800894c:	33c1      	adds	r3, #193	; 0xc1
 800894e:	2200      	movs	r2, #0
 8008950:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008958:	4619      	mov	r1, r3
 800895a:	693a      	ldr	r2, [r7, #16]
 800895c:	2334      	movs	r3, #52	; 0x34
 800895e:	fb03 f301 	mul.w	r3, r3, r1
 8008962:	4413      	add	r3, r2
 8008964:	3390      	adds	r3, #144	; 0x90
 8008966:	2203      	movs	r2, #3
 8008968:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008970:	4619      	mov	r1, r3
 8008972:	693a      	ldr	r2, [r7, #16]
 8008974:	2334      	movs	r3, #52	; 0x34
 8008976:	fb03 f301 	mul.w	r3, r3, r1
 800897a:	4413      	add	r3, r2
 800897c:	3391      	adds	r3, #145	; 0x91
 800897e:	2200      	movs	r2, #0
 8008980:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008988:	4619      	mov	r1, r3
 800898a:	693a      	ldr	r2, [r7, #16]
 800898c:	2334      	movs	r3, #52	; 0x34
 800898e:	fb03 f301 	mul.w	r3, r3, r1
 8008992:	4413      	add	r3, r2
 8008994:	3392      	adds	r3, #146	; 0x92
 8008996:	2200      	movs	r2, #0
 8008998:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800899a:	7bbb      	ldrb	r3, [r7, #14]
 800899c:	2b02      	cmp	r3, #2
 800899e:	d14a      	bne.n	8008a36 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80089a6:	4619      	mov	r1, r3
 80089a8:	693a      	ldr	r2, [r7, #16]
 80089aa:	2334      	movs	r3, #52	; 0x34
 80089ac:	fb03 f301 	mul.w	r3, r3, r1
 80089b0:	4413      	add	r3, r2
 80089b2:	3392      	adds	r3, #146	; 0x92
 80089b4:	781b      	ldrb	r3, [r3, #0]
 80089b6:	2b02      	cmp	r3, #2
 80089b8:	d00c      	beq.n	80089d4 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80089ba:	693b      	ldr	r3, [r7, #16]
 80089bc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80089c0:	4619      	mov	r1, r3
 80089c2:	693a      	ldr	r2, [r7, #16]
 80089c4:	2334      	movs	r3, #52	; 0x34
 80089c6:	fb03 f301 	mul.w	r3, r3, r1
 80089ca:	4413      	add	r3, r2
 80089cc:	33c1      	adds	r3, #193	; 0xc1
 80089ce:	2201      	movs	r2, #1
 80089d0:	701a      	strb	r2, [r3, #0]
 80089d2:	e00b      	b.n	80089ec <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80089da:	4619      	mov	r1, r3
 80089dc:	693a      	ldr	r2, [r7, #16]
 80089de:	2334      	movs	r3, #52	; 0x34
 80089e0:	fb03 f301 	mul.w	r3, r3, r1
 80089e4:	4413      	add	r3, r2
 80089e6:	33c1      	adds	r3, #193	; 0xc1
 80089e8:	2200      	movs	r2, #0
 80089ea:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80089f2:	4619      	mov	r1, r3
 80089f4:	693a      	ldr	r2, [r7, #16]
 80089f6:	2334      	movs	r3, #52	; 0x34
 80089f8:	fb03 f301 	mul.w	r3, r3, r1
 80089fc:	4413      	add	r3, r2
 80089fe:	3390      	adds	r3, #144	; 0x90
 8008a00:	2205      	movs	r2, #5
 8008a02:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008a0a:	4619      	mov	r1, r3
 8008a0c:	693a      	ldr	r2, [r7, #16]
 8008a0e:	2334      	movs	r3, #52	; 0x34
 8008a10:	fb03 f301 	mul.w	r3, r3, r1
 8008a14:	4413      	add	r3, r2
 8008a16:	3391      	adds	r3, #145	; 0x91
 8008a18:	2201      	movs	r2, #1
 8008a1a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008a22:	4619      	mov	r1, r3
 8008a24:	693a      	ldr	r2, [r7, #16]
 8008a26:	2334      	movs	r3, #52	; 0x34
 8008a28:	fb03 f301 	mul.w	r3, r3, r1
 8008a2c:	4413      	add	r3, r2
 8008a2e:	3392      	adds	r3, #146	; 0x92
 8008a30:	2202      	movs	r2, #2
 8008a32:	701a      	strb	r2, [r3, #0]
            break;
 8008a34:	e127      	b.n	8008c86 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8008a36:	7bbb      	ldrb	r3, [r7, #14]
 8008a38:	2b04      	cmp	r3, #4
 8008a3a:	f040 8124 	bne.w	8008c86 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008a44:	4619      	mov	r1, r3
 8008a46:	693a      	ldr	r2, [r7, #16]
 8008a48:	2334      	movs	r3, #52	; 0x34
 8008a4a:	fb03 f301 	mul.w	r3, r3, r1
 8008a4e:	4413      	add	r3, r2
 8008a50:	3390      	adds	r3, #144	; 0x90
 8008a52:	2201      	movs	r2, #1
 8008a54:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008a5c:	4619      	mov	r1, r3
 8008a5e:	693a      	ldr	r2, [r7, #16]
 8008a60:	2334      	movs	r3, #52	; 0x34
 8008a62:	fb03 f301 	mul.w	r3, r3, r1
 8008a66:	4413      	add	r3, r2
 8008a68:	3391      	adds	r3, #145	; 0x91
 8008a6a:	2202      	movs	r2, #2
 8008a6c:	701a      	strb	r2, [r3, #0]
            break;
 8008a6e:	e10a      	b.n	8008c86 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008a76:	b2d9      	uxtb	r1, r3
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008a7e:	461a      	mov	r2, r3
 8008a80:	2334      	movs	r3, #52	; 0x34
 8008a82:	fb03 f302 	mul.w	r3, r3, r2
 8008a86:	3390      	adds	r3, #144	; 0x90
 8008a88:	693a      	ldr	r2, [r7, #16]
 8008a8a:	4413      	add	r3, r2
 8008a8c:	3304      	adds	r3, #4
 8008a8e:	461a      	mov	r2, r3
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f000 fddc 	bl	800964e <USBH_MSC_SCSI_ReadCapacity>
 8008a96:	4603      	mov	r3, r0
 8008a98:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008a9a:	7bfb      	ldrb	r3, [r7, #15]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d120      	bne.n	8008ae2 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008aa6:	4619      	mov	r1, r3
 8008aa8:	693a      	ldr	r2, [r7, #16]
 8008aaa:	2334      	movs	r3, #52	; 0x34
 8008aac:	fb03 f301 	mul.w	r3, r3, r1
 8008ab0:	4413      	add	r3, r2
 8008ab2:	3390      	adds	r3, #144	; 0x90
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008abe:	4619      	mov	r1, r3
 8008ac0:	693a      	ldr	r2, [r7, #16]
 8008ac2:	2334      	movs	r3, #52	; 0x34
 8008ac4:	fb03 f301 	mul.w	r3, r3, r1
 8008ac8:	4413      	add	r3, r2
 8008aca:	3391      	adds	r3, #145	; 0x91
 8008acc:	2200      	movs	r2, #0
 8008ace:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	b29a      	uxth	r2, r3
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8008ae0:	e0d3      	b.n	8008c8a <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 8008ae2:	7bfb      	ldrb	r3, [r7, #15]
 8008ae4:	2b02      	cmp	r3, #2
 8008ae6:	d10c      	bne.n	8008b02 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008aee:	4619      	mov	r1, r3
 8008af0:	693a      	ldr	r2, [r7, #16]
 8008af2:	2334      	movs	r3, #52	; 0x34
 8008af4:	fb03 f301 	mul.w	r3, r3, r1
 8008af8:	4413      	add	r3, r2
 8008afa:	3390      	adds	r3, #144	; 0x90
 8008afc:	2205      	movs	r2, #5
 8008afe:	701a      	strb	r2, [r3, #0]
            break;
 8008b00:	e0c3      	b.n	8008c8a <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008b02:	7bfb      	ldrb	r3, [r7, #15]
 8008b04:	2b04      	cmp	r3, #4
 8008b06:	f040 80c0 	bne.w	8008c8a <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008b10:	4619      	mov	r1, r3
 8008b12:	693a      	ldr	r2, [r7, #16]
 8008b14:	2334      	movs	r3, #52	; 0x34
 8008b16:	fb03 f301 	mul.w	r3, r3, r1
 8008b1a:	4413      	add	r3, r2
 8008b1c:	3390      	adds	r3, #144	; 0x90
 8008b1e:	2201      	movs	r2, #1
 8008b20:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008b28:	4619      	mov	r1, r3
 8008b2a:	693a      	ldr	r2, [r7, #16]
 8008b2c:	2334      	movs	r3, #52	; 0x34
 8008b2e:	fb03 f301 	mul.w	r3, r3, r1
 8008b32:	4413      	add	r3, r2
 8008b34:	3391      	adds	r3, #145	; 0x91
 8008b36:	2202      	movs	r2, #2
 8008b38:	701a      	strb	r2, [r3, #0]
            break;
 8008b3a:	e0a6      	b.n	8008c8a <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008b42:	b2d9      	uxtb	r1, r3
 8008b44:	693b      	ldr	r3, [r7, #16]
 8008b46:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	2334      	movs	r3, #52	; 0x34
 8008b4e:	fb03 f302 	mul.w	r3, r3, r2
 8008b52:	3398      	adds	r3, #152	; 0x98
 8008b54:	693a      	ldr	r2, [r7, #16]
 8008b56:	4413      	add	r3, r2
 8008b58:	3304      	adds	r3, #4
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f000 fe96 	bl	800988e <USBH_MSC_SCSI_RequestSense>
 8008b62:	4603      	mov	r3, r0
 8008b64:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008b66:	7bfb      	ldrb	r3, [r7, #15]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d145      	bne.n	8008bf8 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008b72:	4619      	mov	r1, r3
 8008b74:	693a      	ldr	r2, [r7, #16]
 8008b76:	2334      	movs	r3, #52	; 0x34
 8008b78:	fb03 f301 	mul.w	r3, r3, r1
 8008b7c:	4413      	add	r3, r2
 8008b7e:	339c      	adds	r3, #156	; 0x9c
 8008b80:	781b      	ldrb	r3, [r3, #0]
 8008b82:	2b06      	cmp	r3, #6
 8008b84:	d00c      	beq.n	8008ba0 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008b8c:	4619      	mov	r1, r3
 8008b8e:	693a      	ldr	r2, [r7, #16]
 8008b90:	2334      	movs	r3, #52	; 0x34
 8008b92:	fb03 f301 	mul.w	r3, r3, r1
 8008b96:	4413      	add	r3, r2
 8008b98:	339c      	adds	r3, #156	; 0x9c
 8008b9a:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8008b9c:	2b02      	cmp	r3, #2
 8008b9e:	d117      	bne.n	8008bd0 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8008bac:	1ad3      	subs	r3, r2, r3
 8008bae:	f242 720f 	movw	r2, #9999	; 0x270f
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d80c      	bhi.n	8008bd0 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	693a      	ldr	r2, [r7, #16]
 8008bc0:	2334      	movs	r3, #52	; 0x34
 8008bc2:	fb03 f301 	mul.w	r3, r3, r1
 8008bc6:	4413      	add	r3, r2
 8008bc8:	3390      	adds	r3, #144	; 0x90
 8008bca:	2202      	movs	r2, #2
 8008bcc:	701a      	strb	r2, [r3, #0]
                  break;
 8008bce:	e05f      	b.n	8008c90 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008bd0:	693b      	ldr	r3, [r7, #16]
 8008bd2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008bd6:	4619      	mov	r1, r3
 8008bd8:	693a      	ldr	r2, [r7, #16]
 8008bda:	2334      	movs	r3, #52	; 0x34
 8008bdc:	fb03 f301 	mul.w	r3, r3, r1
 8008be0:	4413      	add	r3, r2
 8008be2:	3390      	adds	r3, #144	; 0x90
 8008be4:	2201      	movs	r2, #1
 8008be6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008bee:	3301      	adds	r3, #1
 8008bf0:	b29a      	uxth	r2, r3
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8008bf8:	7bfb      	ldrb	r3, [r7, #15]
 8008bfa:	2b02      	cmp	r3, #2
 8008bfc:	d10c      	bne.n	8008c18 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c04:	4619      	mov	r1, r3
 8008c06:	693a      	ldr	r2, [r7, #16]
 8008c08:	2334      	movs	r3, #52	; 0x34
 8008c0a:	fb03 f301 	mul.w	r3, r3, r1
 8008c0e:	4413      	add	r3, r2
 8008c10:	3390      	adds	r3, #144	; 0x90
 8008c12:	2208      	movs	r2, #8
 8008c14:	701a      	strb	r2, [r3, #0]
            break;
 8008c16:	e03a      	b.n	8008c8e <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008c18:	7bfb      	ldrb	r3, [r7, #15]
 8008c1a:	2b04      	cmp	r3, #4
 8008c1c:	d137      	bne.n	8008c8e <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c24:	4619      	mov	r1, r3
 8008c26:	693a      	ldr	r2, [r7, #16]
 8008c28:	2334      	movs	r3, #52	; 0x34
 8008c2a:	fb03 f301 	mul.w	r3, r3, r1
 8008c2e:	4413      	add	r3, r2
 8008c30:	3390      	adds	r3, #144	; 0x90
 8008c32:	2201      	movs	r2, #1
 8008c34:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c3c:	4619      	mov	r1, r3
 8008c3e:	693a      	ldr	r2, [r7, #16]
 8008c40:	2334      	movs	r3, #52	; 0x34
 8008c42:	fb03 f301 	mul.w	r3, r3, r1
 8008c46:	4413      	add	r3, r2
 8008c48:	3391      	adds	r3, #145	; 0x91
 8008c4a:	2202      	movs	r2, #2
 8008c4c:	701a      	strb	r2, [r3, #0]
            break;
 8008c4e:	e01e      	b.n	8008c8e <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c56:	3301      	adds	r3, #1
 8008c58:	b29a      	uxth	r2, r3
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8008c60:	e016      	b.n	8008c90 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	2200      	movs	r2, #0
 8008c66:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008c76:	2102      	movs	r1, #2
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	4798      	blx	r3
      break;
 8008c7c:	e00c      	b.n	8008c98 <USBH_MSC_Process+0x514>
            break;
 8008c7e:	bf00      	nop
 8008c80:	e00a      	b.n	8008c98 <USBH_MSC_Process+0x514>
            break;
 8008c82:	bf00      	nop
 8008c84:	e008      	b.n	8008c98 <USBH_MSC_Process+0x514>
            break;
 8008c86:	bf00      	nop
 8008c88:	e006      	b.n	8008c98 <USBH_MSC_Process+0x514>
            break;
 8008c8a:	bf00      	nop
 8008c8c:	e004      	b.n	8008c98 <USBH_MSC_Process+0x514>
            break;
 8008c8e:	bf00      	nop
      break;
 8008c90:	e002      	b.n	8008c98 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 8008c92:	2300      	movs	r3, #0
 8008c94:	75fb      	strb	r3, [r7, #23]
      break;
 8008c96:	bf00      	nop
  }
  return error;
 8008c98:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3718      	adds	r7, #24
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}
 8008ca2:	bf00      	nop

08008ca4 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b083      	sub	sp, #12
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008cac:	2300      	movs	r3, #0
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	370c      	adds	r7, #12
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb8:	4770      	bx	lr

08008cba <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8008cba:	b580      	push	{r7, lr}
 8008cbc:	b088      	sub	sp, #32
 8008cbe:	af02      	add	r7, sp, #8
 8008cc0:	6078      	str	r0, [r7, #4]
 8008cc2:	460b      	mov	r3, r1
 8008cc4:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ccc:	69db      	ldr	r3, [r3, #28]
 8008cce:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8008cd8:	78fb      	ldrb	r3, [r7, #3]
 8008cda:	693a      	ldr	r2, [r7, #16]
 8008cdc:	2134      	movs	r1, #52	; 0x34
 8008cde:	fb01 f303 	mul.w	r3, r1, r3
 8008ce2:	4413      	add	r3, r2
 8008ce4:	3390      	adds	r3, #144	; 0x90
 8008ce6:	781b      	ldrb	r3, [r3, #0]
 8008ce8:	2b07      	cmp	r3, #7
 8008cea:	d03c      	beq.n	8008d66 <USBH_MSC_RdWrProcess+0xac>
 8008cec:	2b07      	cmp	r3, #7
 8008cee:	f300 80a7 	bgt.w	8008e40 <USBH_MSC_RdWrProcess+0x186>
 8008cf2:	2b05      	cmp	r3, #5
 8008cf4:	d06c      	beq.n	8008dd0 <USBH_MSC_RdWrProcess+0x116>
 8008cf6:	2b06      	cmp	r3, #6
 8008cf8:	f040 80a2 	bne.w	8008e40 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8008cfc:	78f9      	ldrb	r1, [r7, #3]
 8008cfe:	2300      	movs	r3, #0
 8008d00:	9300      	str	r3, [sp, #0]
 8008d02:	2300      	movs	r3, #0
 8008d04:	2200      	movs	r2, #0
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f000 fea5 	bl	8009a56 <USBH_MSC_SCSI_Read>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8008d10:	7bfb      	ldrb	r3, [r7, #15]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d10b      	bne.n	8008d2e <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8008d16:	78fb      	ldrb	r3, [r7, #3]
 8008d18:	693a      	ldr	r2, [r7, #16]
 8008d1a:	2134      	movs	r1, #52	; 0x34
 8008d1c:	fb01 f303 	mul.w	r3, r1, r3
 8008d20:	4413      	add	r3, r2
 8008d22:	3390      	adds	r3, #144	; 0x90
 8008d24:	2201      	movs	r2, #1
 8008d26:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008d2c:	e08a      	b.n	8008e44 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 8008d2e:	7bfb      	ldrb	r3, [r7, #15]
 8008d30:	2b02      	cmp	r3, #2
 8008d32:	d109      	bne.n	8008d48 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8008d34:	78fb      	ldrb	r3, [r7, #3]
 8008d36:	693a      	ldr	r2, [r7, #16]
 8008d38:	2134      	movs	r1, #52	; 0x34
 8008d3a:	fb01 f303 	mul.w	r3, r1, r3
 8008d3e:	4413      	add	r3, r2
 8008d40:	3390      	adds	r3, #144	; 0x90
 8008d42:	2205      	movs	r2, #5
 8008d44:	701a      	strb	r2, [r3, #0]
      break;
 8008d46:	e07d      	b.n	8008e44 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008d48:	7bfb      	ldrb	r3, [r7, #15]
 8008d4a:	2b04      	cmp	r3, #4
 8008d4c:	d17a      	bne.n	8008e44 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8008d4e:	78fb      	ldrb	r3, [r7, #3]
 8008d50:	693a      	ldr	r2, [r7, #16]
 8008d52:	2134      	movs	r1, #52	; 0x34
 8008d54:	fb01 f303 	mul.w	r3, r1, r3
 8008d58:	4413      	add	r3, r2
 8008d5a:	3390      	adds	r3, #144	; 0x90
 8008d5c:	2208      	movs	r2, #8
 8008d5e:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8008d60:	2302      	movs	r3, #2
 8008d62:	75fb      	strb	r3, [r7, #23]
      break;
 8008d64:	e06e      	b.n	8008e44 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8008d66:	78f9      	ldrb	r1, [r7, #3]
 8008d68:	2300      	movs	r3, #0
 8008d6a:	9300      	str	r3, [sp, #0]
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	2200      	movs	r2, #0
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f000 fe05 	bl	8009980 <USBH_MSC_SCSI_Write>
 8008d76:	4603      	mov	r3, r0
 8008d78:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8008d7a:	7bfb      	ldrb	r3, [r7, #15]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d10b      	bne.n	8008d98 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8008d80:	78fb      	ldrb	r3, [r7, #3]
 8008d82:	693a      	ldr	r2, [r7, #16]
 8008d84:	2134      	movs	r1, #52	; 0x34
 8008d86:	fb01 f303 	mul.w	r3, r1, r3
 8008d8a:	4413      	add	r3, r2
 8008d8c:	3390      	adds	r3, #144	; 0x90
 8008d8e:	2201      	movs	r2, #1
 8008d90:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8008d92:	2300      	movs	r3, #0
 8008d94:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008d96:	e057      	b.n	8008e48 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 8008d98:	7bfb      	ldrb	r3, [r7, #15]
 8008d9a:	2b02      	cmp	r3, #2
 8008d9c:	d109      	bne.n	8008db2 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8008d9e:	78fb      	ldrb	r3, [r7, #3]
 8008da0:	693a      	ldr	r2, [r7, #16]
 8008da2:	2134      	movs	r1, #52	; 0x34
 8008da4:	fb01 f303 	mul.w	r3, r1, r3
 8008da8:	4413      	add	r3, r2
 8008daa:	3390      	adds	r3, #144	; 0x90
 8008dac:	2205      	movs	r2, #5
 8008dae:	701a      	strb	r2, [r3, #0]
      break;
 8008db0:	e04a      	b.n	8008e48 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008db2:	7bfb      	ldrb	r3, [r7, #15]
 8008db4:	2b04      	cmp	r3, #4
 8008db6:	d147      	bne.n	8008e48 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8008db8:	78fb      	ldrb	r3, [r7, #3]
 8008dba:	693a      	ldr	r2, [r7, #16]
 8008dbc:	2134      	movs	r1, #52	; 0x34
 8008dbe:	fb01 f303 	mul.w	r3, r1, r3
 8008dc2:	4413      	add	r3, r2
 8008dc4:	3390      	adds	r3, #144	; 0x90
 8008dc6:	2208      	movs	r2, #8
 8008dc8:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8008dca:	2302      	movs	r3, #2
 8008dcc:	75fb      	strb	r3, [r7, #23]
      break;
 8008dce:	e03b      	b.n	8008e48 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8008dd0:	78fb      	ldrb	r3, [r7, #3]
 8008dd2:	2234      	movs	r2, #52	; 0x34
 8008dd4:	fb02 f303 	mul.w	r3, r2, r3
 8008dd8:	3398      	adds	r3, #152	; 0x98
 8008dda:	693a      	ldr	r2, [r7, #16]
 8008ddc:	4413      	add	r3, r2
 8008dde:	1d1a      	adds	r2, r3, #4
 8008de0:	78fb      	ldrb	r3, [r7, #3]
 8008de2:	4619      	mov	r1, r3
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 fd52 	bl	800988e <USBH_MSC_SCSI_RequestSense>
 8008dea:	4603      	mov	r3, r0
 8008dec:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8008dee:	7bfb      	ldrb	r3, [r7, #15]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d113      	bne.n	8008e1c <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8008df4:	78fb      	ldrb	r3, [r7, #3]
 8008df6:	693a      	ldr	r2, [r7, #16]
 8008df8:	2134      	movs	r1, #52	; 0x34
 8008dfa:	fb01 f303 	mul.w	r3, r1, r3
 8008dfe:	4413      	add	r3, r2
 8008e00:	3390      	adds	r3, #144	; 0x90
 8008e02:	2201      	movs	r2, #1
 8008e04:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8008e06:	78fb      	ldrb	r3, [r7, #3]
 8008e08:	693a      	ldr	r2, [r7, #16]
 8008e0a:	2134      	movs	r1, #52	; 0x34
 8008e0c:	fb01 f303 	mul.w	r3, r1, r3
 8008e10:	4413      	add	r3, r2
 8008e12:	3391      	adds	r3, #145	; 0x91
 8008e14:	2202      	movs	r2, #2
 8008e16:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 8008e18:	2302      	movs	r3, #2
 8008e1a:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 8008e1c:	7bfb      	ldrb	r3, [r7, #15]
 8008e1e:	2b02      	cmp	r3, #2
 8008e20:	d014      	beq.n	8008e4c <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008e22:	7bfb      	ldrb	r3, [r7, #15]
 8008e24:	2b04      	cmp	r3, #4
 8008e26:	d111      	bne.n	8008e4c <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8008e28:	78fb      	ldrb	r3, [r7, #3]
 8008e2a:	693a      	ldr	r2, [r7, #16]
 8008e2c:	2134      	movs	r1, #52	; 0x34
 8008e2e:	fb01 f303 	mul.w	r3, r1, r3
 8008e32:	4413      	add	r3, r2
 8008e34:	3390      	adds	r3, #144	; 0x90
 8008e36:	2208      	movs	r2, #8
 8008e38:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8008e3a:	2302      	movs	r3, #2
 8008e3c:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008e3e:	e005      	b.n	8008e4c <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 8008e40:	bf00      	nop
 8008e42:	e004      	b.n	8008e4e <USBH_MSC_RdWrProcess+0x194>
      break;
 8008e44:	bf00      	nop
 8008e46:	e002      	b.n	8008e4e <USBH_MSC_RdWrProcess+0x194>
      break;
 8008e48:	bf00      	nop
 8008e4a:	e000      	b.n	8008e4e <USBH_MSC_RdWrProcess+0x194>
      break;
 8008e4c:	bf00      	nop

  }
  return error;
 8008e4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3718      	adds	r7, #24
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b085      	sub	sp, #20
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	460b      	mov	r3, r1
 8008e62:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e6a:	69db      	ldr	r3, [r3, #28]
 8008e6c:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	781b      	ldrb	r3, [r3, #0]
 8008e72:	b2db      	uxtb	r3, r3
 8008e74:	2b0b      	cmp	r3, #11
 8008e76:	d10c      	bne.n	8008e92 <USBH_MSC_UnitIsReady+0x3a>
 8008e78:	78fb      	ldrb	r3, [r7, #3]
 8008e7a:	68ba      	ldr	r2, [r7, #8]
 8008e7c:	2134      	movs	r1, #52	; 0x34
 8008e7e:	fb01 f303 	mul.w	r3, r1, r3
 8008e82:	4413      	add	r3, r2
 8008e84:	3391      	adds	r3, #145	; 0x91
 8008e86:	781b      	ldrb	r3, [r3, #0]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d102      	bne.n	8008e92 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	73fb      	strb	r3, [r7, #15]
 8008e90:	e001      	b.n	8008e96 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8008e92:	2300      	movs	r3, #0
 8008e94:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8008e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3714      	adds	r7, #20
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea2:	4770      	bx	lr

08008ea4 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b086      	sub	sp, #24
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	60f8      	str	r0, [r7, #12]
 8008eac:	460b      	mov	r3, r1
 8008eae:	607a      	str	r2, [r7, #4]
 8008eb0:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008eb8:	69db      	ldr	r3, [r3, #28]
 8008eba:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	781b      	ldrb	r3, [r3, #0]
 8008ec0:	b2db      	uxtb	r3, r3
 8008ec2:	2b0b      	cmp	r3, #11
 8008ec4:	d10d      	bne.n	8008ee2 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8008ec6:	7afb      	ldrb	r3, [r7, #11]
 8008ec8:	2234      	movs	r2, #52	; 0x34
 8008eca:	fb02 f303 	mul.w	r3, r2, r3
 8008ece:	3390      	adds	r3, #144	; 0x90
 8008ed0:	697a      	ldr	r2, [r7, #20]
 8008ed2:	4413      	add	r3, r2
 8008ed4:	2234      	movs	r2, #52	; 0x34
 8008ed6:	4619      	mov	r1, r3
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f002 fd4d 	bl	800b978 <memcpy>
    return USBH_OK;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	e000      	b.n	8008ee4 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8008ee2:	2302      	movs	r3, #2
  }
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3718      	adds	r7, #24
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}

08008eec <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b088      	sub	sp, #32
 8008ef0:	af02      	add	r7, sp, #8
 8008ef2:	60f8      	str	r0, [r7, #12]
 8008ef4:	607a      	str	r2, [r7, #4]
 8008ef6:	603b      	str	r3, [r7, #0]
 8008ef8:	460b      	mov	r3, r1
 8008efa:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f02:	69db      	ldr	r3, [r3, #28]
 8008f04:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008f0c:	b2db      	uxtb	r3, r3
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d00e      	beq.n	8008f30 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	781b      	ldrb	r3, [r3, #0]
 8008f16:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8008f18:	2b0b      	cmp	r3, #11
 8008f1a:	d109      	bne.n	8008f30 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8008f1c:	7afb      	ldrb	r3, [r7, #11]
 8008f1e:	697a      	ldr	r2, [r7, #20]
 8008f20:	2134      	movs	r1, #52	; 0x34
 8008f22:	fb01 f303 	mul.w	r3, r1, r3
 8008f26:	4413      	add	r3, r2
 8008f28:	3390      	adds	r3, #144	; 0x90
 8008f2a:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d001      	beq.n	8008f34 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8008f30:	2302      	movs	r3, #2
 8008f32:	e040      	b.n	8008fb6 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	2206      	movs	r2, #6
 8008f38:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8008f3a:	7afb      	ldrb	r3, [r7, #11]
 8008f3c:	697a      	ldr	r2, [r7, #20]
 8008f3e:	2134      	movs	r1, #52	; 0x34
 8008f40:	fb01 f303 	mul.w	r3, r1, r3
 8008f44:	4413      	add	r3, r2
 8008f46:	3390      	adds	r3, #144	; 0x90
 8008f48:	2206      	movs	r2, #6
 8008f4a:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8008f4c:	7afb      	ldrb	r3, [r7, #11]
 8008f4e:	b29a      	uxth	r2, r3
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8008f56:	7af9      	ldrb	r1, [r7, #11]
 8008f58:	6a3b      	ldr	r3, [r7, #32]
 8008f5a:	9300      	str	r3, [sp, #0]
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	68f8      	ldr	r0, [r7, #12]
 8008f62:	f000 fd78 	bl	8009a56 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008f6c:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008f6e:	e016      	b.n	8008f9e <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	1ad2      	subs	r2, r2, r3
 8008f7a:	6a3b      	ldr	r3, [r7, #32]
 8008f7c:	f242 7110 	movw	r1, #10000	; 0x2710
 8008f80:	fb01 f303 	mul.w	r3, r1, r3
 8008f84:	429a      	cmp	r2, r3
 8008f86:	d805      	bhi.n	8008f94 <USBH_MSC_Read+0xa8>
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008f8e:	b2db      	uxtb	r3, r3
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d104      	bne.n	8008f9e <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	2201      	movs	r2, #1
 8008f98:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8008f9a:	2302      	movs	r3, #2
 8008f9c:	e00b      	b.n	8008fb6 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008f9e:	7afb      	ldrb	r3, [r7, #11]
 8008fa0:	4619      	mov	r1, r3
 8008fa2:	68f8      	ldr	r0, [r7, #12]
 8008fa4:	f7ff fe89 	bl	8008cba <USBH_MSC_RdWrProcess>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	2b01      	cmp	r3, #1
 8008fac:	d0e0      	beq.n	8008f70 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	2201      	movs	r2, #1
 8008fb2:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8008fb4:	2300      	movs	r3, #0
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3718      	adds	r7, #24
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}

08008fbe <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8008fbe:	b580      	push	{r7, lr}
 8008fc0:	b088      	sub	sp, #32
 8008fc2:	af02      	add	r7, sp, #8
 8008fc4:	60f8      	str	r0, [r7, #12]
 8008fc6:	607a      	str	r2, [r7, #4]
 8008fc8:	603b      	str	r3, [r7, #0]
 8008fca:	460b      	mov	r3, r1
 8008fcc:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008fd4:	69db      	ldr	r3, [r3, #28]
 8008fd6:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d00e      	beq.n	8009002 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	781b      	ldrb	r3, [r3, #0]
 8008fe8:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8008fea:	2b0b      	cmp	r3, #11
 8008fec:	d109      	bne.n	8009002 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8008fee:	7afb      	ldrb	r3, [r7, #11]
 8008ff0:	697a      	ldr	r2, [r7, #20]
 8008ff2:	2134      	movs	r1, #52	; 0x34
 8008ff4:	fb01 f303 	mul.w	r3, r1, r3
 8008ff8:	4413      	add	r3, r2
 8008ffa:	3390      	adds	r3, #144	; 0x90
 8008ffc:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8008ffe:	2b01      	cmp	r3, #1
 8009000:	d001      	beq.n	8009006 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8009002:	2302      	movs	r3, #2
 8009004:	e040      	b.n	8009088 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	2207      	movs	r2, #7
 800900a:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800900c:	7afb      	ldrb	r3, [r7, #11]
 800900e:	697a      	ldr	r2, [r7, #20]
 8009010:	2134      	movs	r1, #52	; 0x34
 8009012:	fb01 f303 	mul.w	r3, r1, r3
 8009016:	4413      	add	r3, r2
 8009018:	3390      	adds	r3, #144	; 0x90
 800901a:	2207      	movs	r2, #7
 800901c:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800901e:	7afb      	ldrb	r3, [r7, #11]
 8009020:	b29a      	uxth	r2, r3
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8009028:	7af9      	ldrb	r1, [r7, #11]
 800902a:	6a3b      	ldr	r3, [r7, #32]
 800902c:	9300      	str	r3, [sp, #0]
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	687a      	ldr	r2, [r7, #4]
 8009032:	68f8      	ldr	r0, [r7, #12]
 8009034:	f000 fca4 	bl	8009980 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800903e:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009040:	e016      	b.n	8009070 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	1ad2      	subs	r2, r2, r3
 800904c:	6a3b      	ldr	r3, [r7, #32]
 800904e:	f242 7110 	movw	r1, #10000	; 0x2710
 8009052:	fb01 f303 	mul.w	r3, r1, r3
 8009056:	429a      	cmp	r2, r3
 8009058:	d805      	bhi.n	8009066 <USBH_MSC_Write+0xa8>
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009060:	b2db      	uxtb	r3, r3
 8009062:	2b00      	cmp	r3, #0
 8009064:	d104      	bne.n	8009070 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	2201      	movs	r2, #1
 800906a:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800906c:	2302      	movs	r3, #2
 800906e:	e00b      	b.n	8009088 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009070:	7afb      	ldrb	r3, [r7, #11]
 8009072:	4619      	mov	r1, r3
 8009074:	68f8      	ldr	r0, [r7, #12]
 8009076:	f7ff fe20 	bl	8008cba <USBH_MSC_RdWrProcess>
 800907a:	4603      	mov	r3, r0
 800907c:	2b01      	cmp	r3, #1
 800907e:	d0e0      	beq.n	8009042 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	2201      	movs	r2, #1
 8009084:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8009086:	2300      	movs	r3, #0
}
 8009088:	4618      	mov	r0, r3
 800908a:	3718      	adds	r7, #24
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}

08009090 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b082      	sub	sp, #8
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2221      	movs	r2, #33	; 0x21
 800909c:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	22ff      	movs	r2, #255	; 0xff
 80090a2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2200      	movs	r2, #0
 80090a8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2200      	movs	r2, #0
 80090ae:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2200      	movs	r2, #0
 80090b4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 80090b6:	2200      	movs	r2, #0
 80090b8:	2100      	movs	r1, #0
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f001 fdab 	bl	800ac16 <USBH_CtlReq>
 80090c0:	4603      	mov	r3, r0
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3708      	adds	r7, #8
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}

080090ca <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 80090ca:	b580      	push	{r7, lr}
 80090cc:	b082      	sub	sp, #8
 80090ce:	af00      	add	r7, sp, #0
 80090d0:	6078      	str	r0, [r7, #4]
 80090d2:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	22a1      	movs	r2, #161	; 0xa1
 80090d8:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	22fe      	movs	r2, #254	; 0xfe
 80090de:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2200      	movs	r2, #0
 80090e4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2200      	movs	r2, #0
 80090ea:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2201      	movs	r2, #1
 80090f0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 80090f2:	2201      	movs	r2, #1
 80090f4:	6839      	ldr	r1, [r7, #0]
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f001 fd8d 	bl	800ac16 <USBH_CtlReq>
 80090fc:	4603      	mov	r3, r0
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3708      	adds	r7, #8
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}
	...

08009108 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8009108:	b480      	push	{r7}
 800910a:	b085      	sub	sp, #20
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009116:	69db      	ldr	r3, [r3, #28]
 8009118:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	4a09      	ldr	r2, [pc, #36]	; (8009144 <USBH_MSC_BOT_Init+0x3c>)
 800911e:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	4a09      	ldr	r2, [pc, #36]	; (8009148 <USBH_MSC_BOT_Init+0x40>)
 8009124:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2201      	movs	r2, #1
 800912a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2201      	movs	r2, #1
 8009132:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8009136:	2300      	movs	r3, #0
}
 8009138:	4618      	mov	r0, r3
 800913a:	3714      	adds	r7, #20
 800913c:	46bd      	mov	sp, r7
 800913e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009142:	4770      	bx	lr
 8009144:	43425355 	.word	0x43425355
 8009148:	20304050 	.word	0x20304050

0800914c <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b088      	sub	sp, #32
 8009150:	af02      	add	r7, sp, #8
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	460b      	mov	r3, r1
 8009156:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8009158:	2301      	movs	r3, #1
 800915a:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800915c:	2301      	movs	r3, #1
 800915e:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8009160:	2301      	movs	r3, #1
 8009162:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009164:	2300      	movs	r3, #0
 8009166:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800916e:	69db      	ldr	r3, [r3, #28]
 8009170:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8009172:	2300      	movs	r3, #0
 8009174:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800917c:	3b01      	subs	r3, #1
 800917e:	2b0a      	cmp	r3, #10
 8009180:	f200 819e 	bhi.w	80094c0 <USBH_MSC_BOT_Process+0x374>
 8009184:	a201      	add	r2, pc, #4	; (adr r2, 800918c <USBH_MSC_BOT_Process+0x40>)
 8009186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800918a:	bf00      	nop
 800918c:	080091b9 	.word	0x080091b9
 8009190:	080091e1 	.word	0x080091e1
 8009194:	0800924b 	.word	0x0800924b
 8009198:	08009269 	.word	0x08009269
 800919c:	080092ed 	.word	0x080092ed
 80091a0:	0800930f 	.word	0x0800930f
 80091a4:	080093a7 	.word	0x080093a7
 80091a8:	080093c3 	.word	0x080093c3
 80091ac:	08009415 	.word	0x08009415
 80091b0:	08009445 	.word	0x08009445
 80091b4:	080094a7 	.word	0x080094a7
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	78fa      	ldrb	r2, [r7, #3]
 80091bc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	2202      	movs	r2, #2
 80091c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	795b      	ldrb	r3, [r3, #5]
 80091d2:	2201      	movs	r2, #1
 80091d4:	9200      	str	r2, [sp, #0]
 80091d6:	221f      	movs	r2, #31
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f001 ff2a 	bl	800b032 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 80091de:	e17e      	b.n	80094de <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	795b      	ldrb	r3, [r3, #5]
 80091e4:	4619      	mov	r1, r3
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f002 faae 	bl	800b748 <USBH_LL_GetURBState>
 80091ec:	4603      	mov	r3, r0
 80091ee:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80091f0:	7d3b      	ldrb	r3, [r7, #20]
 80091f2:	2b01      	cmp	r3, #1
 80091f4:	d118      	bne.n	8009228 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d00f      	beq.n	800921e <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8009204:	b25b      	sxtb	r3, r3
 8009206:	2b00      	cmp	r3, #0
 8009208:	da04      	bge.n	8009214 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800920a:	693b      	ldr	r3, [r7, #16]
 800920c:	2203      	movs	r2, #3
 800920e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009212:	e157      	b.n	80094c4 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	2205      	movs	r2, #5
 8009218:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800921c:	e152      	b.n	80094c4 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	2207      	movs	r2, #7
 8009222:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009226:	e14d      	b.n	80094c4 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009228:	7d3b      	ldrb	r3, [r7, #20]
 800922a:	2b02      	cmp	r3, #2
 800922c:	d104      	bne.n	8009238 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800922e:	693b      	ldr	r3, [r7, #16]
 8009230:	2201      	movs	r2, #1
 8009232:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009236:	e145      	b.n	80094c4 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 8009238:	7d3b      	ldrb	r3, [r7, #20]
 800923a:	2b05      	cmp	r3, #5
 800923c:	f040 8142 	bne.w	80094c4 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	220a      	movs	r2, #10
 8009244:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009248:	e13c      	b.n	80094c4 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	895a      	ldrh	r2, [r3, #10]
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	791b      	ldrb	r3, [r3, #4]
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f001 ff0f 	bl	800b07c <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800925e:	693b      	ldr	r3, [r7, #16]
 8009260:	2204      	movs	r2, #4
 8009262:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8009266:	e13a      	b.n	80094de <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	791b      	ldrb	r3, [r3, #4]
 800926c:	4619      	mov	r1, r3
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f002 fa6a 	bl	800b748 <USBH_LL_GetURBState>
 8009274:	4603      	mov	r3, r0
 8009276:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009278:	7d3b      	ldrb	r3, [r7, #20]
 800927a:	2b01      	cmp	r3, #1
 800927c:	d12d      	bne.n	80092da <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009282:	693a      	ldr	r2, [r7, #16]
 8009284:	8952      	ldrh	r2, [r2, #10]
 8009286:	4293      	cmp	r3, r2
 8009288:	d910      	bls.n	80092ac <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009290:	693a      	ldr	r2, [r7, #16]
 8009292:	8952      	ldrh	r2, [r2, #10]
 8009294:	441a      	add	r2, r3
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092a0:	693a      	ldr	r2, [r7, #16]
 80092a2:	8952      	ldrh	r2, [r2, #10]
 80092a4:	1a9a      	subs	r2, r3, r2
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	65da      	str	r2, [r3, #92]	; 0x5c
 80092aa:	e002      	b.n	80092b2 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 80092ac:	693b      	ldr	r3, [r7, #16]
 80092ae:	2200      	movs	r2, #0
 80092b0:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d00a      	beq.n	80092d0 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	895a      	ldrh	r2, [r3, #10]
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	791b      	ldrb	r3, [r3, #4]
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f001 fed7 	bl	800b07c <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 80092ce:	e0fb      	b.n	80094c8 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	2207      	movs	r2, #7
 80092d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80092d8:	e0f6      	b.n	80094c8 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 80092da:	7d3b      	ldrb	r3, [r7, #20]
 80092dc:	2b05      	cmp	r3, #5
 80092de:	f040 80f3 	bne.w	80094c8 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	2209      	movs	r2, #9
 80092e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80092ea:	e0ed      	b.n	80094c8 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	891a      	ldrh	r2, [r3, #8]
 80092f6:	693b      	ldr	r3, [r7, #16]
 80092f8:	795b      	ldrb	r3, [r3, #5]
 80092fa:	2001      	movs	r0, #1
 80092fc:	9000      	str	r0, [sp, #0]
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f001 fe97 	bl	800b032 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	2206      	movs	r2, #6
 8009308:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800930c:	e0e7      	b.n	80094de <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	795b      	ldrb	r3, [r3, #5]
 8009312:	4619      	mov	r1, r3
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f002 fa17 	bl	800b748 <USBH_LL_GetURBState>
 800931a:	4603      	mov	r3, r0
 800931c:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800931e:	7d3b      	ldrb	r3, [r7, #20]
 8009320:	2b01      	cmp	r3, #1
 8009322:	d12f      	bne.n	8009384 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009328:	693a      	ldr	r2, [r7, #16]
 800932a:	8912      	ldrh	r2, [r2, #8]
 800932c:	4293      	cmp	r3, r2
 800932e:	d910      	bls.n	8009352 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009336:	693a      	ldr	r2, [r7, #16]
 8009338:	8912      	ldrh	r2, [r2, #8]
 800933a:	441a      	add	r2, r3
 800933c:	693b      	ldr	r3, [r7, #16]
 800933e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009346:	693a      	ldr	r2, [r7, #16]
 8009348:	8912      	ldrh	r2, [r2, #8]
 800934a:	1a9a      	subs	r2, r3, r2
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	65da      	str	r2, [r3, #92]	; 0x5c
 8009350:	e002      	b.n	8009358 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	2200      	movs	r2, #0
 8009356:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800935c:	2b00      	cmp	r3, #0
 800935e:	d00c      	beq.n	800937a <USBH_MSC_BOT_Process+0x22e>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	891a      	ldrh	r2, [r3, #8]
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	795b      	ldrb	r3, [r3, #5]
 800936e:	2001      	movs	r0, #1
 8009370:	9000      	str	r0, [sp, #0]
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f001 fe5d 	bl	800b032 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8009378:	e0a8      	b.n	80094cc <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800937a:	693b      	ldr	r3, [r7, #16]
 800937c:	2207      	movs	r2, #7
 800937e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009382:	e0a3      	b.n	80094cc <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009384:	7d3b      	ldrb	r3, [r7, #20]
 8009386:	2b02      	cmp	r3, #2
 8009388:	d104      	bne.n	8009394 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	2205      	movs	r2, #5
 800938e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009392:	e09b      	b.n	80094cc <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 8009394:	7d3b      	ldrb	r3, [r7, #20]
 8009396:	2b05      	cmp	r3, #5
 8009398:	f040 8098 	bne.w	80094cc <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	220a      	movs	r2, #10
 80093a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80093a4:	e092      	b.n	80094cc <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 80093a6:	693b      	ldr	r3, [r7, #16]
 80093a8:	f103 0178 	add.w	r1, r3, #120	; 0x78
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	791b      	ldrb	r3, [r3, #4]
 80093b0:	220d      	movs	r2, #13
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f001 fe62 	bl	800b07c <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 80093b8:	693b      	ldr	r3, [r7, #16]
 80093ba:	2208      	movs	r2, #8
 80093bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80093c0:	e08d      	b.n	80094de <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	791b      	ldrb	r3, [r3, #4]
 80093c6:	4619      	mov	r1, r3
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f002 f9bd 	bl	800b748 <USBH_LL_GetURBState>
 80093ce:	4603      	mov	r3, r0
 80093d0:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 80093d2:	7d3b      	ldrb	r3, [r7, #20]
 80093d4:	2b01      	cmp	r3, #1
 80093d6:	d115      	bne.n	8009404 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	2201      	movs	r2, #1
 80093dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	2201      	movs	r2, #1
 80093e4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f000 f8a9 	bl	8009540 <USBH_MSC_DecodeCSW>
 80093ee:	4603      	mov	r3, r0
 80093f0:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 80093f2:	7d7b      	ldrb	r3, [r7, #21]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d102      	bne.n	80093fe <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 80093f8:	2300      	movs	r3, #0
 80093fa:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 80093fc:	e068      	b.n	80094d0 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 80093fe:	2302      	movs	r3, #2
 8009400:	75fb      	strb	r3, [r7, #23]
      break;
 8009402:	e065      	b.n	80094d0 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 8009404:	7d3b      	ldrb	r3, [r7, #20]
 8009406:	2b05      	cmp	r3, #5
 8009408:	d162      	bne.n	80094d0 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800940a:	693b      	ldr	r3, [r7, #16]
 800940c:	2209      	movs	r2, #9
 800940e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009412:	e05d      	b.n	80094d0 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8009414:	78fb      	ldrb	r3, [r7, #3]
 8009416:	2200      	movs	r2, #0
 8009418:	4619      	mov	r1, r3
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f000 f864 	bl	80094e8 <USBH_MSC_BOT_Abort>
 8009420:	4603      	mov	r3, r0
 8009422:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009424:	7dbb      	ldrb	r3, [r7, #22]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d104      	bne.n	8009434 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800942a:	693b      	ldr	r3, [r7, #16]
 800942c:	2207      	movs	r2, #7
 800942e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8009432:	e04f      	b.n	80094d4 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 8009434:	7dbb      	ldrb	r3, [r7, #22]
 8009436:	2b04      	cmp	r3, #4
 8009438:	d14c      	bne.n	80094d4 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	220b      	movs	r2, #11
 800943e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009442:	e047      	b.n	80094d4 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8009444:	78fb      	ldrb	r3, [r7, #3]
 8009446:	2201      	movs	r2, #1
 8009448:	4619      	mov	r1, r3
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f000 f84c 	bl	80094e8 <USBH_MSC_BOT_Abort>
 8009450:	4603      	mov	r3, r0
 8009452:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009454:	7dbb      	ldrb	r3, [r7, #22]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d11d      	bne.n	8009496 <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	795b      	ldrb	r3, [r3, #5]
 800945e:	4619      	mov	r1, r3
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f002 f9cb 	bl	800b7fc <USBH_LL_GetToggle>
 8009466:	4603      	mov	r3, r0
 8009468:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	7959      	ldrb	r1, [r3, #5]
 800946e:	7bfb      	ldrb	r3, [r7, #15]
 8009470:	f1c3 0301 	rsb	r3, r3, #1
 8009474:	b2db      	uxtb	r3, r3
 8009476:	461a      	mov	r2, r3
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f002 f98f 	bl	800b79c <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800947e:	693b      	ldr	r3, [r7, #16]
 8009480:	791b      	ldrb	r3, [r3, #4]
 8009482:	2200      	movs	r2, #0
 8009484:	4619      	mov	r1, r3
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f002 f988 	bl	800b79c <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800948c:	693b      	ldr	r3, [r7, #16]
 800948e:	2209      	movs	r2, #9
 8009490:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8009494:	e020      	b.n	80094d8 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 8009496:	7dbb      	ldrb	r3, [r7, #22]
 8009498:	2b04      	cmp	r3, #4
 800949a:	d11d      	bne.n	80094d8 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	220b      	movs	r2, #11
 80094a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80094a4:	e018      	b.n	80094d8 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f7ff fdf2 	bl	8009090 <USBH_MSC_BOT_REQ_Reset>
 80094ac:	4603      	mov	r3, r0
 80094ae:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 80094b0:	7dfb      	ldrb	r3, [r7, #23]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d112      	bne.n	80094dc <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	2201      	movs	r2, #1
 80094ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 80094be:	e00d      	b.n	80094dc <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 80094c0:	bf00      	nop
 80094c2:	e00c      	b.n	80094de <USBH_MSC_BOT_Process+0x392>
      break;
 80094c4:	bf00      	nop
 80094c6:	e00a      	b.n	80094de <USBH_MSC_BOT_Process+0x392>
      break;
 80094c8:	bf00      	nop
 80094ca:	e008      	b.n	80094de <USBH_MSC_BOT_Process+0x392>
      break;
 80094cc:	bf00      	nop
 80094ce:	e006      	b.n	80094de <USBH_MSC_BOT_Process+0x392>
      break;
 80094d0:	bf00      	nop
 80094d2:	e004      	b.n	80094de <USBH_MSC_BOT_Process+0x392>
      break;
 80094d4:	bf00      	nop
 80094d6:	e002      	b.n	80094de <USBH_MSC_BOT_Process+0x392>
      break;
 80094d8:	bf00      	nop
 80094da:	e000      	b.n	80094de <USBH_MSC_BOT_Process+0x392>
      break;
 80094dc:	bf00      	nop
  }
  return status;
 80094de:	7dfb      	ldrb	r3, [r7, #23]
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3718      	adds	r7, #24
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}

080094e8 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b084      	sub	sp, #16
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
 80094f0:	460b      	mov	r3, r1
 80094f2:	70fb      	strb	r3, [r7, #3]
 80094f4:	4613      	mov	r3, r2
 80094f6:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 80094f8:	2302      	movs	r3, #2
 80094fa:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009502:	69db      	ldr	r3, [r3, #28]
 8009504:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8009506:	78bb      	ldrb	r3, [r7, #2]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d002      	beq.n	8009512 <USBH_MSC_BOT_Abort+0x2a>
 800950c:	2b01      	cmp	r3, #1
 800950e:	d009      	beq.n	8009524 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8009510:	e011      	b.n	8009536 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	79db      	ldrb	r3, [r3, #7]
 8009516:	4619      	mov	r1, r3
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f001 f99c 	bl	800a856 <USBH_ClrFeature>
 800951e:	4603      	mov	r3, r0
 8009520:	73fb      	strb	r3, [r7, #15]
      break;
 8009522:	e008      	b.n	8009536 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	799b      	ldrb	r3, [r3, #6]
 8009528:	4619      	mov	r1, r3
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f001 f993 	bl	800a856 <USBH_ClrFeature>
 8009530:	4603      	mov	r3, r0
 8009532:	73fb      	strb	r3, [r7, #15]
      break;
 8009534:	bf00      	nop
  }
  return status;
 8009536:	7bfb      	ldrb	r3, [r7, #15]
}
 8009538:	4618      	mov	r0, r3
 800953a:	3710      	adds	r7, #16
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}

08009540 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b084      	sub	sp, #16
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800954e:	69db      	ldr	r3, [r3, #28]
 8009550:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8009552:	2301      	movs	r3, #1
 8009554:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	791b      	ldrb	r3, [r3, #4]
 800955a:	4619      	mov	r1, r3
 800955c:	6878      	ldr	r0, [r7, #4]
 800955e:	f002 f861 	bl	800b624 <USBH_LL_GetLastXferSize>
 8009562:	4603      	mov	r3, r0
 8009564:	2b0d      	cmp	r3, #13
 8009566:	d002      	beq.n	800956e <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8009568:	2302      	movs	r3, #2
 800956a:	73fb      	strb	r3, [r7, #15]
 800956c:	e024      	b.n	80095b8 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009572:	4a14      	ldr	r2, [pc, #80]	; (80095c4 <USBH_MSC_DecodeCSW+0x84>)
 8009574:	4293      	cmp	r3, r2
 8009576:	d11d      	bne.n	80095b4 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009580:	429a      	cmp	r2, r3
 8009582:	d119      	bne.n	80095b8 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800958a:	2b00      	cmp	r3, #0
 800958c:	d102      	bne.n	8009594 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800958e:	2300      	movs	r3, #0
 8009590:	73fb      	strb	r3, [r7, #15]
 8009592:	e011      	b.n	80095b8 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800959a:	2b01      	cmp	r3, #1
 800959c:	d102      	bne.n	80095a4 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800959e:	2301      	movs	r3, #1
 80095a0:	73fb      	strb	r3, [r7, #15]
 80095a2:	e009      	b.n	80095b8 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80095aa:	2b02      	cmp	r3, #2
 80095ac:	d104      	bne.n	80095b8 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 80095ae:	2302      	movs	r3, #2
 80095b0:	73fb      	strb	r3, [r7, #15]
 80095b2:	e001      	b.n	80095b8 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 80095b4:	2302      	movs	r3, #2
 80095b6:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 80095b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	3710      	adds	r7, #16
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}
 80095c2:	bf00      	nop
 80095c4:	53425355 	.word	0x53425355

080095c8 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b084      	sub	sp, #16
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	460b      	mov	r3, r1
 80095d2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80095d4:	2302      	movs	r3, #2
 80095d6:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80095de:	69db      	ldr	r3, [r3, #28]
 80095e0:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80095e8:	2b01      	cmp	r3, #1
 80095ea:	d002      	beq.n	80095f2 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 80095ec:	2b02      	cmp	r3, #2
 80095ee:	d021      	beq.n	8009634 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80095f0:	e028      	b.n	8009644 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	2200      	movs	r2, #0
 80095f6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	2200      	movs	r2, #0
 80095fc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	220a      	movs	r2, #10
 8009604:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	3363      	adds	r3, #99	; 0x63
 800960c:	2210      	movs	r2, #16
 800960e:	2100      	movs	r1, #0
 8009610:	4618      	mov	r0, r3
 8009612:	f002 f9bf 	bl	800b994 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	2200      	movs	r2, #0
 800961a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	2201      	movs	r2, #1
 8009622:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	2202      	movs	r2, #2
 800962a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800962e:	2301      	movs	r3, #1
 8009630:	73fb      	strb	r3, [r7, #15]
      break;
 8009632:	e007      	b.n	8009644 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009634:	78fb      	ldrb	r3, [r7, #3]
 8009636:	4619      	mov	r1, r3
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f7ff fd87 	bl	800914c <USBH_MSC_BOT_Process>
 800963e:	4603      	mov	r3, r0
 8009640:	73fb      	strb	r3, [r7, #15]
      break;
 8009642:	bf00      	nop
  }

  return error;
 8009644:	7bfb      	ldrb	r3, [r7, #15]
}
 8009646:	4618      	mov	r0, r3
 8009648:	3710      	adds	r7, #16
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}

0800964e <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800964e:	b580      	push	{r7, lr}
 8009650:	b086      	sub	sp, #24
 8009652:	af00      	add	r7, sp, #0
 8009654:	60f8      	str	r0, [r7, #12]
 8009656:	460b      	mov	r3, r1
 8009658:	607a      	str	r2, [r7, #4]
 800965a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800965c:	2301      	movs	r3, #1
 800965e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009666:	69db      	ldr	r3, [r3, #28]
 8009668:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009670:	2b01      	cmp	r3, #1
 8009672:	d002      	beq.n	800967a <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8009674:	2b02      	cmp	r3, #2
 8009676:	d027      	beq.n	80096c8 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8009678:	e05f      	b.n	800973a <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	2208      	movs	r2, #8
 800967e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009680:	693b      	ldr	r3, [r7, #16]
 8009682:	2280      	movs	r2, #128	; 0x80
 8009684:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	220a      	movs	r2, #10
 800968c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009690:	693b      	ldr	r3, [r7, #16]
 8009692:	3363      	adds	r3, #99	; 0x63
 8009694:	2210      	movs	r2, #16
 8009696:	2100      	movs	r1, #0
 8009698:	4618      	mov	r0, r3
 800969a:	f002 f97b 	bl	800b994 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	2225      	movs	r2, #37	; 0x25
 80096a2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80096a6:	693b      	ldr	r3, [r7, #16]
 80096a8:	2201      	movs	r2, #1
 80096aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80096ae:	693b      	ldr	r3, [r7, #16]
 80096b0:	2202      	movs	r2, #2
 80096b2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80096b6:	693b      	ldr	r3, [r7, #16]
 80096b8:	f103 0210 	add.w	r2, r3, #16
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80096c2:	2301      	movs	r3, #1
 80096c4:	75fb      	strb	r3, [r7, #23]
      break;
 80096c6:	e038      	b.n	800973a <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 80096c8:	7afb      	ldrb	r3, [r7, #11]
 80096ca:	4619      	mov	r1, r3
 80096cc:	68f8      	ldr	r0, [r7, #12]
 80096ce:	f7ff fd3d 	bl	800914c <USBH_MSC_BOT_Process>
 80096d2:	4603      	mov	r3, r0
 80096d4:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80096d6:	7dfb      	ldrb	r3, [r7, #23]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d12d      	bne.n	8009738 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096e2:	3303      	adds	r3, #3
 80096e4:	781b      	ldrb	r3, [r3, #0]
 80096e6:	461a      	mov	r2, r3
 80096e8:	693b      	ldr	r3, [r7, #16]
 80096ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096ee:	3302      	adds	r3, #2
 80096f0:	781b      	ldrb	r3, [r3, #0]
 80096f2:	021b      	lsls	r3, r3, #8
 80096f4:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 80096f6:	693b      	ldr	r3, [r7, #16]
 80096f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096fc:	3301      	adds	r3, #1
 80096fe:	781b      	ldrb	r3, [r3, #0]
 8009700:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009702:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800970a:	781b      	ldrb	r3, [r3, #0]
 800970c:	061b      	lsls	r3, r3, #24
 800970e:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8009714:	693b      	ldr	r3, [r7, #16]
 8009716:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800971a:	3307      	adds	r3, #7
 800971c:	781b      	ldrb	r3, [r3, #0]
 800971e:	b29a      	uxth	r2, r3
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009726:	3306      	adds	r3, #6
 8009728:	781b      	ldrb	r3, [r3, #0]
 800972a:	b29b      	uxth	r3, r3
 800972c:	021b      	lsls	r3, r3, #8
 800972e:	b29b      	uxth	r3, r3
 8009730:	4313      	orrs	r3, r2
 8009732:	b29a      	uxth	r2, r3
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	809a      	strh	r2, [r3, #4]
      break;
 8009738:	bf00      	nop
  }

  return error;
 800973a:	7dfb      	ldrb	r3, [r7, #23]
}
 800973c:	4618      	mov	r0, r3
 800973e:	3718      	adds	r7, #24
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}

08009744 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b086      	sub	sp, #24
 8009748:	af00      	add	r7, sp, #0
 800974a:	60f8      	str	r0, [r7, #12]
 800974c:	460b      	mov	r3, r1
 800974e:	607a      	str	r2, [r7, #4]
 8009750:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8009752:	2302      	movs	r3, #2
 8009754:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800975c:	69db      	ldr	r3, [r3, #28]
 800975e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009766:	2b01      	cmp	r3, #1
 8009768:	d002      	beq.n	8009770 <USBH_MSC_SCSI_Inquiry+0x2c>
 800976a:	2b02      	cmp	r3, #2
 800976c:	d03d      	beq.n	80097ea <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800976e:	e089      	b.n	8009884 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	2224      	movs	r2, #36	; 0x24
 8009774:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	2280      	movs	r2, #128	; 0x80
 800977a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	220a      	movs	r2, #10
 8009782:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	3363      	adds	r3, #99	; 0x63
 800978a:	220a      	movs	r2, #10
 800978c:	2100      	movs	r1, #0
 800978e:	4618      	mov	r0, r3
 8009790:	f002 f900 	bl	800b994 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	2212      	movs	r2, #18
 8009798:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800979c:	7afb      	ldrb	r3, [r7, #11]
 800979e:	015b      	lsls	r3, r3, #5
 80097a0:	b2da      	uxtb	r2, r3
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	2200      	movs	r2, #0
 80097ac:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 80097b0:	693b      	ldr	r3, [r7, #16]
 80097b2:	2200      	movs	r2, #0
 80097b4:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	2224      	movs	r2, #36	; 0x24
 80097bc:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 80097c0:	693b      	ldr	r3, [r7, #16]
 80097c2:	2200      	movs	r2, #0
 80097c4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80097c8:	693b      	ldr	r3, [r7, #16]
 80097ca:	2201      	movs	r2, #1
 80097cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	2202      	movs	r2, #2
 80097d4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80097d8:	693b      	ldr	r3, [r7, #16]
 80097da:	f103 0210 	add.w	r2, r3, #16
 80097de:	693b      	ldr	r3, [r7, #16]
 80097e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80097e4:	2301      	movs	r3, #1
 80097e6:	75fb      	strb	r3, [r7, #23]
      break;
 80097e8:	e04c      	b.n	8009884 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 80097ea:	7afb      	ldrb	r3, [r7, #11]
 80097ec:	4619      	mov	r1, r3
 80097ee:	68f8      	ldr	r0, [r7, #12]
 80097f0:	f7ff fcac 	bl	800914c <USBH_MSC_BOT_Process>
 80097f4:	4603      	mov	r3, r0
 80097f6:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80097f8:	7dfb      	ldrb	r3, [r7, #23]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d141      	bne.n	8009882 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 80097fe:	2222      	movs	r2, #34	; 0x22
 8009800:	2100      	movs	r1, #0
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f002 f8c6 	bl	800b994 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8009808:	693b      	ldr	r3, [r7, #16]
 800980a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800980e:	781b      	ldrb	r3, [r3, #0]
 8009810:	f003 031f 	and.w	r3, r3, #31
 8009814:	b2da      	uxtb	r2, r3
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009820:	781b      	ldrb	r3, [r3, #0]
 8009822:	095b      	lsrs	r3, r3, #5
 8009824:	b2da      	uxtb	r2, r3
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009830:	3301      	adds	r3, #1
 8009832:	781b      	ldrb	r3, [r3, #0]
 8009834:	b25b      	sxtb	r3, r3
 8009836:	2b00      	cmp	r3, #0
 8009838:	da03      	bge.n	8009842 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2201      	movs	r2, #1
 800983e:	709a      	strb	r2, [r3, #2]
 8009840:	e002      	b.n	8009848 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2200      	movs	r2, #0
 8009846:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	1cd8      	adds	r0, r3, #3
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009852:	3308      	adds	r3, #8
 8009854:	2208      	movs	r2, #8
 8009856:	4619      	mov	r1, r3
 8009858:	f002 f88e 	bl	800b978 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f103 000c 	add.w	r0, r3, #12
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009868:	3310      	adds	r3, #16
 800986a:	2210      	movs	r2, #16
 800986c:	4619      	mov	r1, r3
 800986e:	f002 f883 	bl	800b978 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	331d      	adds	r3, #29
 8009876:	693a      	ldr	r2, [r7, #16]
 8009878:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800987c:	3220      	adds	r2, #32
 800987e:	6812      	ldr	r2, [r2, #0]
 8009880:	601a      	str	r2, [r3, #0]
      break;
 8009882:	bf00      	nop
  }

  return error;
 8009884:	7dfb      	ldrb	r3, [r7, #23]
}
 8009886:	4618      	mov	r0, r3
 8009888:	3718      	adds	r7, #24
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}

0800988e <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800988e:	b580      	push	{r7, lr}
 8009890:	b086      	sub	sp, #24
 8009892:	af00      	add	r7, sp, #0
 8009894:	60f8      	str	r0, [r7, #12]
 8009896:	460b      	mov	r3, r1
 8009898:	607a      	str	r2, [r7, #4]
 800989a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800989c:	2302      	movs	r3, #2
 800989e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80098a6:	69db      	ldr	r3, [r3, #28]
 80098a8:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	d002      	beq.n	80098ba <USBH_MSC_SCSI_RequestSense+0x2c>
 80098b4:	2b02      	cmp	r3, #2
 80098b6:	d03d      	beq.n	8009934 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 80098b8:	e05d      	b.n	8009976 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	220e      	movs	r2, #14
 80098be:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	2280      	movs	r2, #128	; 0x80
 80098c4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	220a      	movs	r2, #10
 80098cc:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	3363      	adds	r3, #99	; 0x63
 80098d4:	2210      	movs	r2, #16
 80098d6:	2100      	movs	r1, #0
 80098d8:	4618      	mov	r0, r3
 80098da:	f002 f85b 	bl	800b994 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 80098de:	693b      	ldr	r3, [r7, #16]
 80098e0:	2203      	movs	r2, #3
 80098e2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80098e6:	7afb      	ldrb	r3, [r7, #11]
 80098e8:	015b      	lsls	r3, r3, #5
 80098ea:	b2da      	uxtb	r2, r3
 80098ec:	693b      	ldr	r3, [r7, #16]
 80098ee:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 80098f2:	693b      	ldr	r3, [r7, #16]
 80098f4:	2200      	movs	r2, #0
 80098f6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	2200      	movs	r2, #0
 80098fe:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	220e      	movs	r2, #14
 8009906:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	2200      	movs	r2, #0
 800990e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	2201      	movs	r2, #1
 8009916:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800991a:	693b      	ldr	r3, [r7, #16]
 800991c:	2202      	movs	r2, #2
 800991e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	f103 0210 	add.w	r2, r3, #16
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800992e:	2301      	movs	r3, #1
 8009930:	75fb      	strb	r3, [r7, #23]
      break;
 8009932:	e020      	b.n	8009976 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009934:	7afb      	ldrb	r3, [r7, #11]
 8009936:	4619      	mov	r1, r3
 8009938:	68f8      	ldr	r0, [r7, #12]
 800993a:	f7ff fc07 	bl	800914c <USBH_MSC_BOT_Process>
 800993e:	4603      	mov	r3, r0
 8009940:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009942:	7dfb      	ldrb	r3, [r7, #23]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d115      	bne.n	8009974 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8009948:	693b      	ldr	r3, [r7, #16]
 800994a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800994e:	3302      	adds	r3, #2
 8009950:	781b      	ldrb	r3, [r3, #0]
 8009952:	f003 030f 	and.w	r3, r3, #15
 8009956:	b2da      	uxtb	r2, r3
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800995c:	693b      	ldr	r3, [r7, #16]
 800995e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009962:	7b1a      	ldrb	r2, [r3, #12]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8009968:	693b      	ldr	r3, [r7, #16]
 800996a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800996e:	7b5a      	ldrb	r2, [r3, #13]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	709a      	strb	r2, [r3, #2]
      break;
 8009974:	bf00      	nop
  }

  return error;
 8009976:	7dfb      	ldrb	r3, [r7, #23]
}
 8009978:	4618      	mov	r0, r3
 800997a:	3718      	adds	r7, #24
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}

08009980 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b086      	sub	sp, #24
 8009984:	af00      	add	r7, sp, #0
 8009986:	60f8      	str	r0, [r7, #12]
 8009988:	607a      	str	r2, [r7, #4]
 800998a:	603b      	str	r3, [r7, #0]
 800998c:	460b      	mov	r3, r1
 800998e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009990:	2302      	movs	r3, #2
 8009992:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800999a:	69db      	ldr	r3, [r3, #28]
 800999c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800999e:	693b      	ldr	r3, [r7, #16]
 80099a0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80099a4:	2b01      	cmp	r3, #1
 80099a6:	d002      	beq.n	80099ae <USBH_MSC_SCSI_Write+0x2e>
 80099a8:	2b02      	cmp	r3, #2
 80099aa:	d047      	beq.n	8009a3c <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80099ac:	e04e      	b.n	8009a4c <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 80099ae:	693b      	ldr	r3, [r7, #16]
 80099b0:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 80099b4:	461a      	mov	r2, r3
 80099b6:	6a3b      	ldr	r3, [r7, #32]
 80099b8:	fb03 f202 	mul.w	r2, r3, r2
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80099c0:	693b      	ldr	r3, [r7, #16]
 80099c2:	2200      	movs	r2, #0
 80099c4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80099c8:	693b      	ldr	r3, [r7, #16]
 80099ca:	220a      	movs	r2, #10
 80099cc:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	3363      	adds	r3, #99	; 0x63
 80099d4:	2210      	movs	r2, #16
 80099d6:	2100      	movs	r1, #0
 80099d8:	4618      	mov	r0, r3
 80099da:	f001 ffdb 	bl	800b994 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	222a      	movs	r2, #42	; 0x2a
 80099e2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 80099e6:	79fa      	ldrb	r2, [r7, #7]
 80099e8:	693b      	ldr	r3, [r7, #16]
 80099ea:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 80099ee:	79ba      	ldrb	r2, [r7, #6]
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 80099f6:	797a      	ldrb	r2, [r7, #5]
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 80099fe:	1d3b      	adds	r3, r7, #4
 8009a00:	781a      	ldrb	r2, [r3, #0]
 8009a02:	693b      	ldr	r3, [r7, #16]
 8009a04:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8009a08:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009a0c:	693b      	ldr	r3, [r7, #16]
 8009a0e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8009a12:	f107 0320 	add.w	r3, r7, #32
 8009a16:	781a      	ldrb	r2, [r3, #0]
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009a1e:	693b      	ldr	r3, [r7, #16]
 8009a20:	2201      	movs	r2, #1
 8009a22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	2202      	movs	r2, #2
 8009a2a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8009a2e:	693b      	ldr	r3, [r7, #16]
 8009a30:	683a      	ldr	r2, [r7, #0]
 8009a32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009a36:	2301      	movs	r3, #1
 8009a38:	75fb      	strb	r3, [r7, #23]
      break;
 8009a3a:	e007      	b.n	8009a4c <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009a3c:	7afb      	ldrb	r3, [r7, #11]
 8009a3e:	4619      	mov	r1, r3
 8009a40:	68f8      	ldr	r0, [r7, #12]
 8009a42:	f7ff fb83 	bl	800914c <USBH_MSC_BOT_Process>
 8009a46:	4603      	mov	r3, r0
 8009a48:	75fb      	strb	r3, [r7, #23]
      break;
 8009a4a:	bf00      	nop
  }

  return error;
 8009a4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3718      	adds	r7, #24
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}

08009a56 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8009a56:	b580      	push	{r7, lr}
 8009a58:	b086      	sub	sp, #24
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	60f8      	str	r0, [r7, #12]
 8009a5e:	607a      	str	r2, [r7, #4]
 8009a60:	603b      	str	r3, [r7, #0]
 8009a62:	460b      	mov	r3, r1
 8009a64:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009a66:	2302      	movs	r3, #2
 8009a68:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a70:	69db      	ldr	r3, [r3, #28]
 8009a72:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009a74:	693b      	ldr	r3, [r7, #16]
 8009a76:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009a7a:	2b01      	cmp	r3, #1
 8009a7c:	d002      	beq.n	8009a84 <USBH_MSC_SCSI_Read+0x2e>
 8009a7e:	2b02      	cmp	r3, #2
 8009a80:	d047      	beq.n	8009b12 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8009a82:	e04e      	b.n	8009b22 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	6a3b      	ldr	r3, [r7, #32]
 8009a8e:	fb03 f202 	mul.w	r2, r3, r2
 8009a92:	693b      	ldr	r3, [r7, #16]
 8009a94:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	2280      	movs	r2, #128	; 0x80
 8009a9a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	220a      	movs	r2, #10
 8009aa2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	3363      	adds	r3, #99	; 0x63
 8009aaa:	2210      	movs	r2, #16
 8009aac:	2100      	movs	r1, #0
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f001 ff70 	bl	800b994 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	2228      	movs	r2, #40	; 0x28
 8009ab8:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8009abc:	79fa      	ldrb	r2, [r7, #7]
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8009ac4:	79ba      	ldrb	r2, [r7, #6]
 8009ac6:	693b      	ldr	r3, [r7, #16]
 8009ac8:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8009acc:	797a      	ldrb	r2, [r7, #5]
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8009ad4:	1d3b      	adds	r3, r7, #4
 8009ad6:	781a      	ldrb	r2, [r3, #0]
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8009ade:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009ae2:	693b      	ldr	r3, [r7, #16]
 8009ae4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8009ae8:	f107 0320 	add.w	r3, r7, #32
 8009aec:	781a      	ldrb	r2, [r3, #0]
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009af4:	693b      	ldr	r3, [r7, #16]
 8009af6:	2201      	movs	r2, #1
 8009af8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009afc:	693b      	ldr	r3, [r7, #16]
 8009afe:	2202      	movs	r2, #2
 8009b00:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8009b04:	693b      	ldr	r3, [r7, #16]
 8009b06:	683a      	ldr	r2, [r7, #0]
 8009b08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	75fb      	strb	r3, [r7, #23]
      break;
 8009b10:	e007      	b.n	8009b22 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009b12:	7afb      	ldrb	r3, [r7, #11]
 8009b14:	4619      	mov	r1, r3
 8009b16:	68f8      	ldr	r0, [r7, #12]
 8009b18:	f7ff fb18 	bl	800914c <USBH_MSC_BOT_Process>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	75fb      	strb	r3, [r7, #23]
      break;
 8009b20:	bf00      	nop
  }

  return error;
 8009b22:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3718      	adds	r7, #24
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}

08009b2c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b084      	sub	sp, #16
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	60f8      	str	r0, [r7, #12]
 8009b34:	60b9      	str	r1, [r7, #8]
 8009b36:	4613      	mov	r3, r2
 8009b38:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d101      	bne.n	8009b44 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009b40:	2302      	movs	r3, #2
 8009b42:	e029      	b.n	8009b98 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	79fa      	ldrb	r2, [r7, #7]
 8009b48:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	2200      	movs	r2, #0
 8009b58:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8009b5c:	68f8      	ldr	r0, [r7, #12]
 8009b5e:	f000 f81f 	bl	8009ba0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	2200      	movs	r2, #0
 8009b66:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	2200      	movs	r2, #0
 8009b76:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d003      	beq.n	8009b90 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	68ba      	ldr	r2, [r7, #8]
 8009b8c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8009b90:	68f8      	ldr	r0, [r7, #12]
 8009b92:	f001 fc93 	bl	800b4bc <USBH_LL_Init>

  return USBH_OK;
 8009b96:	2300      	movs	r3, #0
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3710      	adds	r7, #16
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}

08009ba0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	b085      	sub	sp, #20
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009bac:	2300      	movs	r3, #0
 8009bae:	60fb      	str	r3, [r7, #12]
 8009bb0:	e009      	b.n	8009bc6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009bb2:	687a      	ldr	r2, [r7, #4]
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	33e0      	adds	r3, #224	; 0xe0
 8009bb8:	009b      	lsls	r3, r3, #2
 8009bba:	4413      	add	r3, r2
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	3301      	adds	r3, #1
 8009bc4:	60fb      	str	r3, [r7, #12]
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	2b0e      	cmp	r3, #14
 8009bca:	d9f2      	bls.n	8009bb2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009bcc:	2300      	movs	r3, #0
 8009bce:	60fb      	str	r3, [r7, #12]
 8009bd0:	e009      	b.n	8009be6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009bd2:	687a      	ldr	r2, [r7, #4]
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	4413      	add	r3, r2
 8009bd8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009bdc:	2200      	movs	r2, #0
 8009bde:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	3301      	adds	r3, #1
 8009be4:	60fb      	str	r3, [r7, #12]
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009bec:	d3f1      	bcc.n	8009bd2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2201      	movs	r2, #1
 8009bfe:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2200      	movs	r2, #0
 8009c04:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2201      	movs	r2, #1
 8009c0c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2240      	movs	r2, #64	; 0x40
 8009c12:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2200      	movs	r2, #0
 8009c18:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2201      	movs	r2, #1
 8009c26:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2200      	movs	r2, #0
 8009c36:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8009c3a:	2300      	movs	r3, #0
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	3714      	adds	r7, #20
 8009c40:	46bd      	mov	sp, r7
 8009c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c46:	4770      	bx	lr

08009c48 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b085      	sub	sp, #20
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
 8009c50:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009c52:	2300      	movs	r3, #0
 8009c54:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d016      	beq.n	8009c8a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d10e      	bne.n	8009c84 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009c6c:	1c59      	adds	r1, r3, #1
 8009c6e:	687a      	ldr	r2, [r7, #4]
 8009c70:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8009c74:	687a      	ldr	r2, [r7, #4]
 8009c76:	33de      	adds	r3, #222	; 0xde
 8009c78:	6839      	ldr	r1, [r7, #0]
 8009c7a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	73fb      	strb	r3, [r7, #15]
 8009c82:	e004      	b.n	8009c8e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009c84:	2302      	movs	r3, #2
 8009c86:	73fb      	strb	r3, [r7, #15]
 8009c88:	e001      	b.n	8009c8e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009c8a:	2302      	movs	r3, #2
 8009c8c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c90:	4618      	mov	r0, r3
 8009c92:	3714      	adds	r7, #20
 8009c94:	46bd      	mov	sp, r7
 8009c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9a:	4770      	bx	lr

08009c9c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b085      	sub	sp, #20
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
 8009ca4:	460b      	mov	r3, r1
 8009ca6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8009cb2:	78fa      	ldrb	r2, [r7, #3]
 8009cb4:	429a      	cmp	r2, r3
 8009cb6:	d204      	bcs.n	8009cc2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	78fa      	ldrb	r2, [r7, #3]
 8009cbc:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8009cc0:	e001      	b.n	8009cc6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009cc2:	2302      	movs	r3, #2
 8009cc4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cc8:	4618      	mov	r0, r3
 8009cca:	3714      	adds	r7, #20
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd2:	4770      	bx	lr

08009cd4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	b087      	sub	sp, #28
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
 8009cdc:	4608      	mov	r0, r1
 8009cde:	4611      	mov	r1, r2
 8009ce0:	461a      	mov	r2, r3
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	70fb      	strb	r3, [r7, #3]
 8009ce6:	460b      	mov	r3, r1
 8009ce8:	70bb      	strb	r3, [r7, #2]
 8009cea:	4613      	mov	r3, r2
 8009cec:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009cfc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009cfe:	e025      	b.n	8009d4c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009d00:	7dfb      	ldrb	r3, [r7, #23]
 8009d02:	221a      	movs	r2, #26
 8009d04:	fb02 f303 	mul.w	r3, r2, r3
 8009d08:	3308      	adds	r3, #8
 8009d0a:	68fa      	ldr	r2, [r7, #12]
 8009d0c:	4413      	add	r3, r2
 8009d0e:	3302      	adds	r3, #2
 8009d10:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009d12:	693b      	ldr	r3, [r7, #16]
 8009d14:	795b      	ldrb	r3, [r3, #5]
 8009d16:	78fa      	ldrb	r2, [r7, #3]
 8009d18:	429a      	cmp	r2, r3
 8009d1a:	d002      	beq.n	8009d22 <USBH_FindInterface+0x4e>
 8009d1c:	78fb      	ldrb	r3, [r7, #3]
 8009d1e:	2bff      	cmp	r3, #255	; 0xff
 8009d20:	d111      	bne.n	8009d46 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009d22:	693b      	ldr	r3, [r7, #16]
 8009d24:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009d26:	78ba      	ldrb	r2, [r7, #2]
 8009d28:	429a      	cmp	r2, r3
 8009d2a:	d002      	beq.n	8009d32 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009d2c:	78bb      	ldrb	r3, [r7, #2]
 8009d2e:	2bff      	cmp	r3, #255	; 0xff
 8009d30:	d109      	bne.n	8009d46 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009d32:	693b      	ldr	r3, [r7, #16]
 8009d34:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009d36:	787a      	ldrb	r2, [r7, #1]
 8009d38:	429a      	cmp	r2, r3
 8009d3a:	d002      	beq.n	8009d42 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009d3c:	787b      	ldrb	r3, [r7, #1]
 8009d3e:	2bff      	cmp	r3, #255	; 0xff
 8009d40:	d101      	bne.n	8009d46 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009d42:	7dfb      	ldrb	r3, [r7, #23]
 8009d44:	e006      	b.n	8009d54 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009d46:	7dfb      	ldrb	r3, [r7, #23]
 8009d48:	3301      	adds	r3, #1
 8009d4a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009d4c:	7dfb      	ldrb	r3, [r7, #23]
 8009d4e:	2b01      	cmp	r3, #1
 8009d50:	d9d6      	bls.n	8009d00 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009d52:	23ff      	movs	r3, #255	; 0xff
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	371c      	adds	r7, #28
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5e:	4770      	bx	lr

08009d60 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b082      	sub	sp, #8
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f001 fbe3 	bl	800b534 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8009d6e:	2101      	movs	r1, #1
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f001 fcfc 	bl	800b76e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009d76:	2300      	movs	r3, #0
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3708      	adds	r7, #8
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}

08009d80 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b088      	sub	sp, #32
 8009d84:	af04      	add	r7, sp, #16
 8009d86:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009d88:	2302      	movs	r3, #2
 8009d8a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8009d96:	b2db      	uxtb	r3, r3
 8009d98:	2b01      	cmp	r3, #1
 8009d9a:	d102      	bne.n	8009da2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2203      	movs	r2, #3
 8009da0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	781b      	ldrb	r3, [r3, #0]
 8009da6:	b2db      	uxtb	r3, r3
 8009da8:	2b0b      	cmp	r3, #11
 8009daa:	f200 81b3 	bhi.w	800a114 <USBH_Process+0x394>
 8009dae:	a201      	add	r2, pc, #4	; (adr r2, 8009db4 <USBH_Process+0x34>)
 8009db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009db4:	08009de5 	.word	0x08009de5
 8009db8:	08009e17 	.word	0x08009e17
 8009dbc:	08009e7f 	.word	0x08009e7f
 8009dc0:	0800a0af 	.word	0x0800a0af
 8009dc4:	0800a115 	.word	0x0800a115
 8009dc8:	08009f23 	.word	0x08009f23
 8009dcc:	0800a055 	.word	0x0800a055
 8009dd0:	08009f59 	.word	0x08009f59
 8009dd4:	08009f79 	.word	0x08009f79
 8009dd8:	08009f99 	.word	0x08009f99
 8009ddc:	08009fc7 	.word	0x08009fc7
 8009de0:	0800a097 	.word	0x0800a097
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009dea:	b2db      	uxtb	r3, r3
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	f000 8193 	beq.w	800a118 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2201      	movs	r2, #1
 8009df6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009df8:	20c8      	movs	r0, #200	; 0xc8
 8009dfa:	f001 fd2f 	bl	800b85c <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f001 fbf5 	bl	800b5ee <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2200      	movs	r2, #0
 8009e08:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009e14:	e180      	b.n	800a118 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8009e1c:	2b01      	cmp	r3, #1
 8009e1e:	d107      	bne.n	8009e30 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2200      	movs	r2, #0
 8009e24:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2202      	movs	r2, #2
 8009e2c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009e2e:	e182      	b.n	800a136 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009e36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009e3a:	d914      	bls.n	8009e66 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009e42:	3301      	adds	r3, #1
 8009e44:	b2da      	uxtb	r2, r3
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009e52:	2b03      	cmp	r3, #3
 8009e54:	d903      	bls.n	8009e5e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	220d      	movs	r2, #13
 8009e5a:	701a      	strb	r2, [r3, #0]
      break;
 8009e5c:	e16b      	b.n	800a136 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2200      	movs	r2, #0
 8009e62:	701a      	strb	r2, [r3, #0]
      break;
 8009e64:	e167      	b.n	800a136 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009e6c:	f103 020a 	add.w	r2, r3, #10
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8009e76:	200a      	movs	r0, #10
 8009e78:	f001 fcf0 	bl	800b85c <USBH_Delay>
      break;
 8009e7c:	e15b      	b.n	800a136 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d005      	beq.n	8009e94 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009e8e:	2104      	movs	r1, #4
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009e94:	2064      	movs	r0, #100	; 0x64
 8009e96:	f001 fce1 	bl	800b85c <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f001 fb80 	bl	800b5a0 <USBH_LL_GetSpeed>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	461a      	mov	r2, r3
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2205      	movs	r2, #5
 8009eae:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009eb0:	2100      	movs	r1, #0
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f001 f92f 	bl	800b116 <USBH_AllocPipe>
 8009eb8:	4603      	mov	r3, r0
 8009eba:	461a      	mov	r2, r3
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009ec0:	2180      	movs	r1, #128	; 0x80
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f001 f927 	bl	800b116 <USBH_AllocPipe>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	461a      	mov	r2, r3
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	7919      	ldrb	r1, [r3, #4]
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009ee0:	687a      	ldr	r2, [r7, #4]
 8009ee2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009ee4:	b292      	uxth	r2, r2
 8009ee6:	9202      	str	r2, [sp, #8]
 8009ee8:	2200      	movs	r2, #0
 8009eea:	9201      	str	r2, [sp, #4]
 8009eec:	9300      	str	r3, [sp, #0]
 8009eee:	4603      	mov	r3, r0
 8009ef0:	2280      	movs	r2, #128	; 0x80
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f001 f8e0 	bl	800b0b8 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	7959      	ldrb	r1, [r3, #5]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009f08:	687a      	ldr	r2, [r7, #4]
 8009f0a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009f0c:	b292      	uxth	r2, r2
 8009f0e:	9202      	str	r2, [sp, #8]
 8009f10:	2200      	movs	r2, #0
 8009f12:	9201      	str	r2, [sp, #4]
 8009f14:	9300      	str	r3, [sp, #0]
 8009f16:	4603      	mov	r3, r0
 8009f18:	2200      	movs	r2, #0
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f001 f8cc 	bl	800b0b8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009f20:	e109      	b.n	800a136 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	f000 f90c 	bl	800a140 <USBH_HandleEnum>
 8009f28:	4603      	mov	r3, r0
 8009f2a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009f2c:	7bbb      	ldrb	r3, [r7, #14]
 8009f2e:	b2db      	uxtb	r3, r3
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	f040 80f3 	bne.w	800a11c <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8009f44:	2b01      	cmp	r3, #1
 8009f46:	d103      	bne.n	8009f50 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2208      	movs	r2, #8
 8009f4c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009f4e:	e0e5      	b.n	800a11c <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2207      	movs	r2, #7
 8009f54:	701a      	strb	r2, [r3, #0]
      break;
 8009f56:	e0e1      	b.n	800a11c <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	f000 80de 	beq.w	800a120 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009f6a:	2101      	movs	r1, #1
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2208      	movs	r2, #8
 8009f74:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8009f76:	e0d3      	b.n	800a120 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8009f7e:	b29b      	uxth	r3, r3
 8009f80:	4619      	mov	r1, r3
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f000 fc20 	bl	800a7c8 <USBH_SetCfg>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	f040 80ca 	bne.w	800a124 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2209      	movs	r2, #9
 8009f94:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009f96:	e0c5      	b.n	800a124 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8009f9e:	f003 0320 	and.w	r3, r3, #32
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d00b      	beq.n	8009fbe <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8009fa6:	2101      	movs	r1, #1
 8009fa8:	6878      	ldr	r0, [r7, #4]
 8009faa:	f000 fc30 	bl	800a80e <USBH_SetFeature>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	f040 80b9 	bne.w	800a128 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	220a      	movs	r2, #10
 8009fba:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009fbc:	e0b4      	b.n	800a128 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	220a      	movs	r2, #10
 8009fc2:	701a      	strb	r2, [r3, #0]
      break;
 8009fc4:	e0b0      	b.n	800a128 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	f000 80ad 	beq.w	800a12c <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009fda:	2300      	movs	r3, #0
 8009fdc:	73fb      	strb	r3, [r7, #15]
 8009fde:	e016      	b.n	800a00e <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009fe0:	7bfa      	ldrb	r2, [r7, #15]
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	32de      	adds	r2, #222	; 0xde
 8009fe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fea:	791a      	ldrb	r2, [r3, #4]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8009ff2:	429a      	cmp	r2, r3
 8009ff4:	d108      	bne.n	800a008 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009ff6:	7bfa      	ldrb	r2, [r7, #15]
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	32de      	adds	r2, #222	; 0xde
 8009ffc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800a006:	e005      	b.n	800a014 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a008:	7bfb      	ldrb	r3, [r7, #15]
 800a00a:	3301      	adds	r3, #1
 800a00c:	73fb      	strb	r3, [r7, #15]
 800a00e:	7bfb      	ldrb	r3, [r7, #15]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d0e5      	beq.n	8009fe0 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d016      	beq.n	800a04c <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a024:	689b      	ldr	r3, [r3, #8]
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	4798      	blx	r3
 800a02a:	4603      	mov	r3, r0
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d109      	bne.n	800a044 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2206      	movs	r2, #6
 800a034:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a03c:	2103      	movs	r1, #3
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a042:	e073      	b.n	800a12c <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	220d      	movs	r2, #13
 800a048:	701a      	strb	r2, [r3, #0]
      break;
 800a04a:	e06f      	b.n	800a12c <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	220d      	movs	r2, #13
 800a050:	701a      	strb	r2, [r3, #0]
      break;
 800a052:	e06b      	b.n	800a12c <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d017      	beq.n	800a08e <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a064:	691b      	ldr	r3, [r3, #16]
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	4798      	blx	r3
 800a06a:	4603      	mov	r3, r0
 800a06c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a06e:	7bbb      	ldrb	r3, [r7, #14]
 800a070:	b2db      	uxtb	r3, r3
 800a072:	2b00      	cmp	r3, #0
 800a074:	d103      	bne.n	800a07e <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	220b      	movs	r2, #11
 800a07a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a07c:	e058      	b.n	800a130 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800a07e:	7bbb      	ldrb	r3, [r7, #14]
 800a080:	b2db      	uxtb	r3, r3
 800a082:	2b02      	cmp	r3, #2
 800a084:	d154      	bne.n	800a130 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	220d      	movs	r2, #13
 800a08a:	701a      	strb	r2, [r3, #0]
      break;
 800a08c:	e050      	b.n	800a130 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	220d      	movs	r2, #13
 800a092:	701a      	strb	r2, [r3, #0]
      break;
 800a094:	e04c      	b.n	800a130 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d049      	beq.n	800a134 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a0a6:	695b      	ldr	r3, [r3, #20]
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	4798      	blx	r3
      }
      break;
 800a0ac:	e042      	b.n	800a134 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f7ff fd72 	bl	8009ba0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d009      	beq.n	800a0da <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a0cc:	68db      	ldr	r3, [r3, #12]
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d005      	beq.n	800a0f0 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a0ea:	2105      	movs	r1, #5
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800a0f6:	b2db      	uxtb	r3, r3
 800a0f8:	2b01      	cmp	r3, #1
 800a0fa:	d107      	bne.n	800a10c <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2200      	movs	r2, #0
 800a100:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f7ff fe2b 	bl	8009d60 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a10a:	e014      	b.n	800a136 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f001 fa11 	bl	800b534 <USBH_LL_Start>
      break;
 800a112:	e010      	b.n	800a136 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800a114:	bf00      	nop
 800a116:	e00e      	b.n	800a136 <USBH_Process+0x3b6>
      break;
 800a118:	bf00      	nop
 800a11a:	e00c      	b.n	800a136 <USBH_Process+0x3b6>
      break;
 800a11c:	bf00      	nop
 800a11e:	e00a      	b.n	800a136 <USBH_Process+0x3b6>
    break;
 800a120:	bf00      	nop
 800a122:	e008      	b.n	800a136 <USBH_Process+0x3b6>
      break;
 800a124:	bf00      	nop
 800a126:	e006      	b.n	800a136 <USBH_Process+0x3b6>
      break;
 800a128:	bf00      	nop
 800a12a:	e004      	b.n	800a136 <USBH_Process+0x3b6>
      break;
 800a12c:	bf00      	nop
 800a12e:	e002      	b.n	800a136 <USBH_Process+0x3b6>
      break;
 800a130:	bf00      	nop
 800a132:	e000      	b.n	800a136 <USBH_Process+0x3b6>
      break;
 800a134:	bf00      	nop
  }
  return USBH_OK;
 800a136:	2300      	movs	r3, #0
}
 800a138:	4618      	mov	r0, r3
 800a13a:	3710      	adds	r7, #16
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}

0800a140 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b088      	sub	sp, #32
 800a144:	af04      	add	r7, sp, #16
 800a146:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a148:	2301      	movs	r3, #1
 800a14a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a14c:	2301      	movs	r3, #1
 800a14e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	785b      	ldrb	r3, [r3, #1]
 800a154:	2b07      	cmp	r3, #7
 800a156:	f200 81c1 	bhi.w	800a4dc <USBH_HandleEnum+0x39c>
 800a15a:	a201      	add	r2, pc, #4	; (adr r2, 800a160 <USBH_HandleEnum+0x20>)
 800a15c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a160:	0800a181 	.word	0x0800a181
 800a164:	0800a23f 	.word	0x0800a23f
 800a168:	0800a2a9 	.word	0x0800a2a9
 800a16c:	0800a337 	.word	0x0800a337
 800a170:	0800a3a1 	.word	0x0800a3a1
 800a174:	0800a411 	.word	0x0800a411
 800a178:	0800a457 	.word	0x0800a457
 800a17c:	0800a49d 	.word	0x0800a49d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a180:	2108      	movs	r1, #8
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f000 fa50 	bl	800a628 <USBH_Get_DevDesc>
 800a188:	4603      	mov	r3, r0
 800a18a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a18c:	7bbb      	ldrb	r3, [r7, #14]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d130      	bne.n	800a1f4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2201      	movs	r2, #1
 800a1a0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	7919      	ldrb	r1, [r3, #4]
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a1b2:	687a      	ldr	r2, [r7, #4]
 800a1b4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a1b6:	b292      	uxth	r2, r2
 800a1b8:	9202      	str	r2, [sp, #8]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	9201      	str	r2, [sp, #4]
 800a1be:	9300      	str	r3, [sp, #0]
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	2280      	movs	r2, #128	; 0x80
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f000 ff77 	bl	800b0b8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	7959      	ldrb	r1, [r3, #5]
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a1da:	687a      	ldr	r2, [r7, #4]
 800a1dc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a1de:	b292      	uxth	r2, r2
 800a1e0:	9202      	str	r2, [sp, #8]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	9201      	str	r2, [sp, #4]
 800a1e6:	9300      	str	r3, [sp, #0]
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f000 ff63 	bl	800b0b8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a1f2:	e175      	b.n	800a4e0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a1f4:	7bbb      	ldrb	r3, [r7, #14]
 800a1f6:	2b03      	cmp	r3, #3
 800a1f8:	f040 8172 	bne.w	800a4e0 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a202:	3301      	adds	r3, #1
 800a204:	b2da      	uxtb	r2, r3
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a212:	2b03      	cmp	r3, #3
 800a214:	d903      	bls.n	800a21e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	220d      	movs	r2, #13
 800a21a:	701a      	strb	r2, [r3, #0]
      break;
 800a21c:	e160      	b.n	800a4e0 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	795b      	ldrb	r3, [r3, #5]
 800a222:	4619      	mov	r1, r3
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f000 ff97 	bl	800b158 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	791b      	ldrb	r3, [r3, #4]
 800a22e:	4619      	mov	r1, r3
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f000 ff91 	bl	800b158 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2200      	movs	r2, #0
 800a23a:	701a      	strb	r2, [r3, #0]
      break;
 800a23c:	e150      	b.n	800a4e0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a23e:	2112      	movs	r1, #18
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f000 f9f1 	bl	800a628 <USBH_Get_DevDesc>
 800a246:	4603      	mov	r3, r0
 800a248:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a24a:	7bbb      	ldrb	r3, [r7, #14]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d103      	bne.n	800a258 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2202      	movs	r2, #2
 800a254:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a256:	e145      	b.n	800a4e4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a258:	7bbb      	ldrb	r3, [r7, #14]
 800a25a:	2b03      	cmp	r3, #3
 800a25c:	f040 8142 	bne.w	800a4e4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a266:	3301      	adds	r3, #1
 800a268:	b2da      	uxtb	r2, r3
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a276:	2b03      	cmp	r3, #3
 800a278:	d903      	bls.n	800a282 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	220d      	movs	r2, #13
 800a27e:	701a      	strb	r2, [r3, #0]
      break;
 800a280:	e130      	b.n	800a4e4 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	795b      	ldrb	r3, [r3, #5]
 800a286:	4619      	mov	r1, r3
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f000 ff65 	bl	800b158 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	791b      	ldrb	r3, [r3, #4]
 800a292:	4619      	mov	r1, r3
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f000 ff5f 	bl	800b158 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2200      	movs	r2, #0
 800a29e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	701a      	strb	r2, [r3, #0]
      break;
 800a2a6:	e11d      	b.n	800a4e4 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a2a8:	2101      	movs	r1, #1
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f000 fa68 	bl	800a780 <USBH_SetAddress>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a2b4:	7bbb      	ldrb	r3, [r7, #14]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d132      	bne.n	800a320 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800a2ba:	2002      	movs	r0, #2
 800a2bc:	f001 face 	bl	800b85c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2201      	movs	r2, #1
 800a2c4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2203      	movs	r2, #3
 800a2cc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	7919      	ldrb	r1, [r3, #4]
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a2de:	687a      	ldr	r2, [r7, #4]
 800a2e0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a2e2:	b292      	uxth	r2, r2
 800a2e4:	9202      	str	r2, [sp, #8]
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	9201      	str	r2, [sp, #4]
 800a2ea:	9300      	str	r3, [sp, #0]
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	2280      	movs	r2, #128	; 0x80
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	f000 fee1 	bl	800b0b8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	7959      	ldrb	r1, [r3, #5]
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a306:	687a      	ldr	r2, [r7, #4]
 800a308:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a30a:	b292      	uxth	r2, r2
 800a30c:	9202      	str	r2, [sp, #8]
 800a30e:	2200      	movs	r2, #0
 800a310:	9201      	str	r2, [sp, #4]
 800a312:	9300      	str	r3, [sp, #0]
 800a314:	4603      	mov	r3, r0
 800a316:	2200      	movs	r2, #0
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f000 fecd 	bl	800b0b8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a31e:	e0e3      	b.n	800a4e8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a320:	7bbb      	ldrb	r3, [r7, #14]
 800a322:	2b03      	cmp	r3, #3
 800a324:	f040 80e0 	bne.w	800a4e8 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	220d      	movs	r2, #13
 800a32c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2200      	movs	r2, #0
 800a332:	705a      	strb	r2, [r3, #1]
      break;
 800a334:	e0d8      	b.n	800a4e8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a336:	2109      	movs	r1, #9
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f000 f99d 	bl	800a678 <USBH_Get_CfgDesc>
 800a33e:	4603      	mov	r3, r0
 800a340:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a342:	7bbb      	ldrb	r3, [r7, #14]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d103      	bne.n	800a350 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2204      	movs	r2, #4
 800a34c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a34e:	e0cd      	b.n	800a4ec <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a350:	7bbb      	ldrb	r3, [r7, #14]
 800a352:	2b03      	cmp	r3, #3
 800a354:	f040 80ca 	bne.w	800a4ec <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a35e:	3301      	adds	r3, #1
 800a360:	b2da      	uxtb	r2, r3
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a36e:	2b03      	cmp	r3, #3
 800a370:	d903      	bls.n	800a37a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	220d      	movs	r2, #13
 800a376:	701a      	strb	r2, [r3, #0]
      break;
 800a378:	e0b8      	b.n	800a4ec <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	795b      	ldrb	r3, [r3, #5]
 800a37e:	4619      	mov	r1, r3
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f000 fee9 	bl	800b158 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	791b      	ldrb	r3, [r3, #4]
 800a38a:	4619      	mov	r1, r3
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f000 fee3 	bl	800b158 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2200      	movs	r2, #0
 800a396:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2200      	movs	r2, #0
 800a39c:	701a      	strb	r2, [r3, #0]
      break;
 800a39e:	e0a5      	b.n	800a4ec <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800a3a6:	4619      	mov	r1, r3
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	f000 f965 	bl	800a678 <USBH_Get_CfgDesc>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a3b2:	7bbb      	ldrb	r3, [r7, #14]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d103      	bne.n	800a3c0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2205      	movs	r2, #5
 800a3bc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a3be:	e097      	b.n	800a4f0 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a3c0:	7bbb      	ldrb	r3, [r7, #14]
 800a3c2:	2b03      	cmp	r3, #3
 800a3c4:	f040 8094 	bne.w	800a4f0 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a3ce:	3301      	adds	r3, #1
 800a3d0:	b2da      	uxtb	r2, r3
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a3de:	2b03      	cmp	r3, #3
 800a3e0:	d903      	bls.n	800a3ea <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	220d      	movs	r2, #13
 800a3e6:	701a      	strb	r2, [r3, #0]
      break;
 800a3e8:	e082      	b.n	800a4f0 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	795b      	ldrb	r3, [r3, #5]
 800a3ee:	4619      	mov	r1, r3
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f000 feb1 	bl	800b158 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	791b      	ldrb	r3, [r3, #4]
 800a3fa:	4619      	mov	r1, r3
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	f000 feab 	bl	800b158 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2200      	movs	r2, #0
 800a406:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2200      	movs	r2, #0
 800a40c:	701a      	strb	r2, [r3, #0]
      break;
 800a40e:	e06f      	b.n	800a4f0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800a416:	2b00      	cmp	r3, #0
 800a418:	d019      	beq.n	800a44e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a426:	23ff      	movs	r3, #255	; 0xff
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f000 f949 	bl	800a6c0 <USBH_Get_StringDesc>
 800a42e:	4603      	mov	r3, r0
 800a430:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a432:	7bbb      	ldrb	r3, [r7, #14]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d103      	bne.n	800a440 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2206      	movs	r2, #6
 800a43c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a43e:	e059      	b.n	800a4f4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a440:	7bbb      	ldrb	r3, [r7, #14]
 800a442:	2b03      	cmp	r3, #3
 800a444:	d156      	bne.n	800a4f4 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2206      	movs	r2, #6
 800a44a:	705a      	strb	r2, [r3, #1]
      break;
 800a44c:	e052      	b.n	800a4f4 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2206      	movs	r2, #6
 800a452:	705a      	strb	r2, [r3, #1]
      break;
 800a454:	e04e      	b.n	800a4f4 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d019      	beq.n	800a494 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a46c:	23ff      	movs	r3, #255	; 0xff
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	f000 f926 	bl	800a6c0 <USBH_Get_StringDesc>
 800a474:	4603      	mov	r3, r0
 800a476:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a478:	7bbb      	ldrb	r3, [r7, #14]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d103      	bne.n	800a486 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2207      	movs	r2, #7
 800a482:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a484:	e038      	b.n	800a4f8 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a486:	7bbb      	ldrb	r3, [r7, #14]
 800a488:	2b03      	cmp	r3, #3
 800a48a:	d135      	bne.n	800a4f8 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2207      	movs	r2, #7
 800a490:	705a      	strb	r2, [r3, #1]
      break;
 800a492:	e031      	b.n	800a4f8 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2207      	movs	r2, #7
 800a498:	705a      	strb	r2, [r3, #1]
      break;
 800a49a:	e02d      	b.n	800a4f8 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d017      	beq.n	800a4d6 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a4b2:	23ff      	movs	r3, #255	; 0xff
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f000 f903 	bl	800a6c0 <USBH_Get_StringDesc>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a4be:	7bbb      	ldrb	r3, [r7, #14]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d102      	bne.n	800a4ca <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a4c8:	e018      	b.n	800a4fc <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a4ca:	7bbb      	ldrb	r3, [r7, #14]
 800a4cc:	2b03      	cmp	r3, #3
 800a4ce:	d115      	bne.n	800a4fc <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	73fb      	strb	r3, [r7, #15]
      break;
 800a4d4:	e012      	b.n	800a4fc <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	73fb      	strb	r3, [r7, #15]
      break;
 800a4da:	e00f      	b.n	800a4fc <USBH_HandleEnum+0x3bc>

    default:
      break;
 800a4dc:	bf00      	nop
 800a4de:	e00e      	b.n	800a4fe <USBH_HandleEnum+0x3be>
      break;
 800a4e0:	bf00      	nop
 800a4e2:	e00c      	b.n	800a4fe <USBH_HandleEnum+0x3be>
      break;
 800a4e4:	bf00      	nop
 800a4e6:	e00a      	b.n	800a4fe <USBH_HandleEnum+0x3be>
      break;
 800a4e8:	bf00      	nop
 800a4ea:	e008      	b.n	800a4fe <USBH_HandleEnum+0x3be>
      break;
 800a4ec:	bf00      	nop
 800a4ee:	e006      	b.n	800a4fe <USBH_HandleEnum+0x3be>
      break;
 800a4f0:	bf00      	nop
 800a4f2:	e004      	b.n	800a4fe <USBH_HandleEnum+0x3be>
      break;
 800a4f4:	bf00      	nop
 800a4f6:	e002      	b.n	800a4fe <USBH_HandleEnum+0x3be>
      break;
 800a4f8:	bf00      	nop
 800a4fa:	e000      	b.n	800a4fe <USBH_HandleEnum+0x3be>
      break;
 800a4fc:	bf00      	nop
  }
  return Status;
 800a4fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800a500:	4618      	mov	r0, r3
 800a502:	3710      	adds	r7, #16
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}

0800a508 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a508:	b480      	push	{r7}
 800a50a:	b083      	sub	sp, #12
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
 800a510:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	683a      	ldr	r2, [r7, #0]
 800a516:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800a51a:	bf00      	nop
 800a51c:	370c      	adds	r7, #12
 800a51e:	46bd      	mov	sp, r7
 800a520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a524:	4770      	bx	lr

0800a526 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a526:	b580      	push	{r7, lr}
 800a528:	b082      	sub	sp, #8
 800a52a:	af00      	add	r7, sp, #0
 800a52c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a534:	1c5a      	adds	r2, r3, #1
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f000 f804 	bl	800a54a <USBH_HandleSof>
}
 800a542:	bf00      	nop
 800a544:	3708      	adds	r7, #8
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}

0800a54a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a54a:	b580      	push	{r7, lr}
 800a54c:	b082      	sub	sp, #8
 800a54e:	af00      	add	r7, sp, #0
 800a550:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	781b      	ldrb	r3, [r3, #0]
 800a556:	b2db      	uxtb	r3, r3
 800a558:	2b0b      	cmp	r3, #11
 800a55a:	d10a      	bne.n	800a572 <USBH_HandleSof+0x28>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a562:	2b00      	cmp	r3, #0
 800a564:	d005      	beq.n	800a572 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a56c:	699b      	ldr	r3, [r3, #24]
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	4798      	blx	r3
  }
}
 800a572:	bf00      	nop
 800a574:	3708      	adds	r7, #8
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}

0800a57a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a57a:	b480      	push	{r7}
 800a57c:	b083      	sub	sp, #12
 800a57e:	af00      	add	r7, sp, #0
 800a580:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2201      	movs	r2, #1
 800a586:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800a58a:	bf00      	nop
}
 800a58c:	370c      	adds	r7, #12
 800a58e:	46bd      	mov	sp, r7
 800a590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a594:	4770      	bx	lr

0800a596 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a596:	b480      	push	{r7}
 800a598:	b083      	sub	sp, #12
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800a5a6:	bf00      	nop
}
 800a5a8:	370c      	adds	r7, #12
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b0:	4770      	bx	lr

0800a5b2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a5b2:	b480      	push	{r7}
 800a5b4:	b083      	sub	sp, #12
 800a5b6:	af00      	add	r7, sp, #0
 800a5b8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2201      	movs	r2, #1
 800a5be:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800a5d2:	2300      	movs	r3, #0
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	370c      	adds	r7, #12
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5de:	4770      	bx	lr

0800a5e0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b082      	sub	sp, #8
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2201      	movs	r2, #1
 800a5ec:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f000 ffb2 	bl	800b56a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	791b      	ldrb	r3, [r3, #4]
 800a60a:	4619      	mov	r1, r3
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f000 fda3 	bl	800b158 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	795b      	ldrb	r3, [r3, #5]
 800a616:	4619      	mov	r1, r3
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	f000 fd9d 	bl	800b158 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800a61e:	2300      	movs	r3, #0
}
 800a620:	4618      	mov	r0, r3
 800a622:	3708      	adds	r7, #8
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}

0800a628 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b086      	sub	sp, #24
 800a62c:	af02      	add	r7, sp, #8
 800a62e:	6078      	str	r0, [r7, #4]
 800a630:	460b      	mov	r3, r1
 800a632:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800a63a:	78fb      	ldrb	r3, [r7, #3]
 800a63c:	b29b      	uxth	r3, r3
 800a63e:	9300      	str	r3, [sp, #0]
 800a640:	4613      	mov	r3, r2
 800a642:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a646:	2100      	movs	r1, #0
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f000 f864 	bl	800a716 <USBH_GetDescriptor>
 800a64e:	4603      	mov	r3, r0
 800a650:	73fb      	strb	r3, [r7, #15]
 800a652:	7bfb      	ldrb	r3, [r7, #15]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d10a      	bne.n	800a66e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a664:	78fa      	ldrb	r2, [r7, #3]
 800a666:	b292      	uxth	r2, r2
 800a668:	4619      	mov	r1, r3
 800a66a:	f000 f918 	bl	800a89e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800a66e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a670:	4618      	mov	r0, r3
 800a672:	3710      	adds	r7, #16
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}

0800a678 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b086      	sub	sp, #24
 800a67c:	af02      	add	r7, sp, #8
 800a67e:	6078      	str	r0, [r7, #4]
 800a680:	460b      	mov	r3, r1
 800a682:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	331c      	adds	r3, #28
 800a688:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a68a:	887b      	ldrh	r3, [r7, #2]
 800a68c:	9300      	str	r3, [sp, #0]
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a694:	2100      	movs	r1, #0
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f000 f83d 	bl	800a716 <USBH_GetDescriptor>
 800a69c:	4603      	mov	r3, r0
 800a69e:	72fb      	strb	r3, [r7, #11]
 800a6a0:	7afb      	ldrb	r3, [r7, #11]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d107      	bne.n	800a6b6 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a6ac:	887a      	ldrh	r2, [r7, #2]
 800a6ae:	68f9      	ldr	r1, [r7, #12]
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	f000 f964 	bl	800a97e <USBH_ParseCfgDesc>
  }

  return status;
 800a6b6:	7afb      	ldrb	r3, [r7, #11]
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3710      	adds	r7, #16
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}

0800a6c0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b088      	sub	sp, #32
 800a6c4:	af02      	add	r7, sp, #8
 800a6c6:	60f8      	str	r0, [r7, #12]
 800a6c8:	607a      	str	r2, [r7, #4]
 800a6ca:	461a      	mov	r2, r3
 800a6cc:	460b      	mov	r3, r1
 800a6ce:	72fb      	strb	r3, [r7, #11]
 800a6d0:	4613      	mov	r3, r2
 800a6d2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800a6d4:	7afb      	ldrb	r3, [r7, #11]
 800a6d6:	b29b      	uxth	r3, r3
 800a6d8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a6dc:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800a6e4:	893b      	ldrh	r3, [r7, #8]
 800a6e6:	9300      	str	r3, [sp, #0]
 800a6e8:	460b      	mov	r3, r1
 800a6ea:	2100      	movs	r1, #0
 800a6ec:	68f8      	ldr	r0, [r7, #12]
 800a6ee:	f000 f812 	bl	800a716 <USBH_GetDescriptor>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	75fb      	strb	r3, [r7, #23]
 800a6f6:	7dfb      	ldrb	r3, [r7, #23]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d107      	bne.n	800a70c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a702:	893a      	ldrh	r2, [r7, #8]
 800a704:	6879      	ldr	r1, [r7, #4]
 800a706:	4618      	mov	r0, r3
 800a708:	f000 fa37 	bl	800ab7a <USBH_ParseStringDesc>
  }

  return status;
 800a70c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a70e:	4618      	mov	r0, r3
 800a710:	3718      	adds	r7, #24
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}

0800a716 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800a716:	b580      	push	{r7, lr}
 800a718:	b084      	sub	sp, #16
 800a71a:	af00      	add	r7, sp, #0
 800a71c:	60f8      	str	r0, [r7, #12]
 800a71e:	607b      	str	r3, [r7, #4]
 800a720:	460b      	mov	r3, r1
 800a722:	72fb      	strb	r3, [r7, #11]
 800a724:	4613      	mov	r3, r2
 800a726:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	789b      	ldrb	r3, [r3, #2]
 800a72c:	2b01      	cmp	r3, #1
 800a72e:	d11c      	bne.n	800a76a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a730:	7afb      	ldrb	r3, [r7, #11]
 800a732:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a736:	b2da      	uxtb	r2, r3
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	2206      	movs	r2, #6
 800a740:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	893a      	ldrh	r2, [r7, #8]
 800a746:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a748:	893b      	ldrh	r3, [r7, #8]
 800a74a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a74e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a752:	d104      	bne.n	800a75e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	f240 4209 	movw	r2, #1033	; 0x409
 800a75a:	829a      	strh	r2, [r3, #20]
 800a75c:	e002      	b.n	800a764 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	2200      	movs	r2, #0
 800a762:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	8b3a      	ldrh	r2, [r7, #24]
 800a768:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a76a:	8b3b      	ldrh	r3, [r7, #24]
 800a76c:	461a      	mov	r2, r3
 800a76e:	6879      	ldr	r1, [r7, #4]
 800a770:	68f8      	ldr	r0, [r7, #12]
 800a772:	f000 fa50 	bl	800ac16 <USBH_CtlReq>
 800a776:	4603      	mov	r3, r0
}
 800a778:	4618      	mov	r0, r3
 800a77a:	3710      	adds	r7, #16
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}

0800a780 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b082      	sub	sp, #8
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
 800a788:	460b      	mov	r3, r1
 800a78a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	789b      	ldrb	r3, [r3, #2]
 800a790:	2b01      	cmp	r3, #1
 800a792:	d10f      	bne.n	800a7b4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2200      	movs	r2, #0
 800a798:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2205      	movs	r2, #5
 800a79e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a7a0:	78fb      	ldrb	r3, [r7, #3]
 800a7a2:	b29a      	uxth	r2, r3
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	2100      	movs	r1, #0
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f000 fa2c 	bl	800ac16 <USBH_CtlReq>
 800a7be:	4603      	mov	r3, r0
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3708      	adds	r7, #8
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}

0800a7c8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b082      	sub	sp, #8
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
 800a7d0:	460b      	mov	r3, r1
 800a7d2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	789b      	ldrb	r3, [r3, #2]
 800a7d8:	2b01      	cmp	r3, #1
 800a7da:	d10e      	bne.n	800a7fa <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2209      	movs	r2, #9
 800a7e6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	887a      	ldrh	r2, [r7, #2]
 800a7ec:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	2100      	movs	r1, #0
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f000 fa09 	bl	800ac16 <USBH_CtlReq>
 800a804:	4603      	mov	r3, r0
}
 800a806:	4618      	mov	r0, r3
 800a808:	3708      	adds	r7, #8
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}

0800a80e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a80e:	b580      	push	{r7, lr}
 800a810:	b082      	sub	sp, #8
 800a812:	af00      	add	r7, sp, #0
 800a814:	6078      	str	r0, [r7, #4]
 800a816:	460b      	mov	r3, r1
 800a818:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	789b      	ldrb	r3, [r3, #2]
 800a81e:	2b01      	cmp	r3, #1
 800a820:	d10f      	bne.n	800a842 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2200      	movs	r2, #0
 800a826:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2203      	movs	r2, #3
 800a82c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a82e:	78fb      	ldrb	r3, [r7, #3]
 800a830:	b29a      	uxth	r2, r3
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2200      	movs	r2, #0
 800a83a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2200      	movs	r2, #0
 800a840:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a842:	2200      	movs	r2, #0
 800a844:	2100      	movs	r1, #0
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f000 f9e5 	bl	800ac16 <USBH_CtlReq>
 800a84c:	4603      	mov	r3, r0
}
 800a84e:	4618      	mov	r0, r3
 800a850:	3708      	adds	r7, #8
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}

0800a856 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a856:	b580      	push	{r7, lr}
 800a858:	b082      	sub	sp, #8
 800a85a:	af00      	add	r7, sp, #0
 800a85c:	6078      	str	r0, [r7, #4]
 800a85e:	460b      	mov	r3, r1
 800a860:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	789b      	ldrb	r3, [r3, #2]
 800a866:	2b01      	cmp	r3, #1
 800a868:	d10f      	bne.n	800a88a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2202      	movs	r2, #2
 800a86e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2201      	movs	r2, #1
 800a874:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2200      	movs	r2, #0
 800a87a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a87c:	78fb      	ldrb	r3, [r7, #3]
 800a87e:	b29a      	uxth	r2, r3
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2200      	movs	r2, #0
 800a888:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800a88a:	2200      	movs	r2, #0
 800a88c:	2100      	movs	r1, #0
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	f000 f9c1 	bl	800ac16 <USBH_CtlReq>
 800a894:	4603      	mov	r3, r0
}
 800a896:	4618      	mov	r0, r3
 800a898:	3708      	adds	r7, #8
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bd80      	pop	{r7, pc}

0800a89e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800a89e:	b480      	push	{r7}
 800a8a0:	b085      	sub	sp, #20
 800a8a2:	af00      	add	r7, sp, #0
 800a8a4:	60f8      	str	r0, [r7, #12]
 800a8a6:	60b9      	str	r1, [r7, #8]
 800a8a8:	4613      	mov	r3, r2
 800a8aa:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	781a      	ldrb	r2, [r3, #0]
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	785a      	ldrb	r2, [r3, #1]
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	3302      	adds	r3, #2
 800a8c0:	781b      	ldrb	r3, [r3, #0]
 800a8c2:	b29a      	uxth	r2, r3
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	3303      	adds	r3, #3
 800a8c8:	781b      	ldrb	r3, [r3, #0]
 800a8ca:	b29b      	uxth	r3, r3
 800a8cc:	021b      	lsls	r3, r3, #8
 800a8ce:	b29b      	uxth	r3, r3
 800a8d0:	4313      	orrs	r3, r2
 800a8d2:	b29a      	uxth	r2, r3
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	791a      	ldrb	r2, [r3, #4]
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	795a      	ldrb	r2, [r3, #5]
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	799a      	ldrb	r2, [r3, #6]
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	79da      	ldrb	r2, [r3, #7]
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800a8f8:	88fb      	ldrh	r3, [r7, #6]
 800a8fa:	2b08      	cmp	r3, #8
 800a8fc:	d939      	bls.n	800a972 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800a8fe:	68bb      	ldr	r3, [r7, #8]
 800a900:	3308      	adds	r3, #8
 800a902:	781b      	ldrb	r3, [r3, #0]
 800a904:	b29a      	uxth	r2, r3
 800a906:	68bb      	ldr	r3, [r7, #8]
 800a908:	3309      	adds	r3, #9
 800a90a:	781b      	ldrb	r3, [r3, #0]
 800a90c:	b29b      	uxth	r3, r3
 800a90e:	021b      	lsls	r3, r3, #8
 800a910:	b29b      	uxth	r3, r3
 800a912:	4313      	orrs	r3, r2
 800a914:	b29a      	uxth	r2, r3
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	330a      	adds	r3, #10
 800a91e:	781b      	ldrb	r3, [r3, #0]
 800a920:	b29a      	uxth	r2, r3
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	330b      	adds	r3, #11
 800a926:	781b      	ldrb	r3, [r3, #0]
 800a928:	b29b      	uxth	r3, r3
 800a92a:	021b      	lsls	r3, r3, #8
 800a92c:	b29b      	uxth	r3, r3
 800a92e:	4313      	orrs	r3, r2
 800a930:	b29a      	uxth	r2, r3
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	330c      	adds	r3, #12
 800a93a:	781b      	ldrb	r3, [r3, #0]
 800a93c:	b29a      	uxth	r2, r3
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	330d      	adds	r3, #13
 800a942:	781b      	ldrb	r3, [r3, #0]
 800a944:	b29b      	uxth	r3, r3
 800a946:	021b      	lsls	r3, r3, #8
 800a948:	b29b      	uxth	r3, r3
 800a94a:	4313      	orrs	r3, r2
 800a94c:	b29a      	uxth	r2, r3
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	7b9a      	ldrb	r2, [r3, #14]
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800a95a:	68bb      	ldr	r3, [r7, #8]
 800a95c:	7bda      	ldrb	r2, [r3, #15]
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800a962:	68bb      	ldr	r3, [r7, #8]
 800a964:	7c1a      	ldrb	r2, [r3, #16]
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	7c5a      	ldrb	r2, [r3, #17]
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	745a      	strb	r2, [r3, #17]
  }
}
 800a972:	bf00      	nop
 800a974:	3714      	adds	r7, #20
 800a976:	46bd      	mov	sp, r7
 800a978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97c:	4770      	bx	lr

0800a97e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800a97e:	b580      	push	{r7, lr}
 800a980:	b08a      	sub	sp, #40	; 0x28
 800a982:	af00      	add	r7, sp, #0
 800a984:	60f8      	str	r0, [r7, #12]
 800a986:	60b9      	str	r1, [r7, #8]
 800a988:	4613      	mov	r3, r2
 800a98a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a990:	2300      	movs	r3, #0
 800a992:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800a996:	2300      	movs	r3, #0
 800a998:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	781a      	ldrb	r2, [r3, #0]
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	785a      	ldrb	r2, [r3, #1]
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	3302      	adds	r3, #2
 800a9b4:	781b      	ldrb	r3, [r3, #0]
 800a9b6:	b29a      	uxth	r2, r3
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	3303      	adds	r3, #3
 800a9bc:	781b      	ldrb	r3, [r3, #0]
 800a9be:	b29b      	uxth	r3, r3
 800a9c0:	021b      	lsls	r3, r3, #8
 800a9c2:	b29b      	uxth	r3, r3
 800a9c4:	4313      	orrs	r3, r2
 800a9c6:	b29a      	uxth	r2, r3
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	791a      	ldrb	r2, [r3, #4]
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	795a      	ldrb	r2, [r3, #5]
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800a9dc:	68bb      	ldr	r3, [r7, #8]
 800a9de:	799a      	ldrb	r2, [r3, #6]
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800a9e4:	68bb      	ldr	r3, [r7, #8]
 800a9e6:	79da      	ldrb	r2, [r3, #7]
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	7a1a      	ldrb	r2, [r3, #8]
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a9f4:	88fb      	ldrh	r3, [r7, #6]
 800a9f6:	2b09      	cmp	r3, #9
 800a9f8:	d95f      	bls.n	800aaba <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800a9fa:	2309      	movs	r3, #9
 800a9fc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800a9fe:	2300      	movs	r3, #0
 800aa00:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800aa02:	e051      	b.n	800aaa8 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800aa04:	f107 0316 	add.w	r3, r7, #22
 800aa08:	4619      	mov	r1, r3
 800aa0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aa0c:	f000 f8e8 	bl	800abe0 <USBH_GetNextDesc>
 800aa10:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800aa12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa14:	785b      	ldrb	r3, [r3, #1]
 800aa16:	2b04      	cmp	r3, #4
 800aa18:	d146      	bne.n	800aaa8 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800aa1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800aa1e:	221a      	movs	r2, #26
 800aa20:	fb02 f303 	mul.w	r3, r2, r3
 800aa24:	3308      	adds	r3, #8
 800aa26:	68fa      	ldr	r2, [r7, #12]
 800aa28:	4413      	add	r3, r2
 800aa2a:	3302      	adds	r3, #2
 800aa2c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800aa2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aa30:	69f8      	ldr	r0, [r7, #28]
 800aa32:	f000 f846 	bl	800aac2 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800aa36:	2300      	movs	r3, #0
 800aa38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800aa40:	e022      	b.n	800aa88 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800aa42:	f107 0316 	add.w	r3, r7, #22
 800aa46:	4619      	mov	r1, r3
 800aa48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aa4a:	f000 f8c9 	bl	800abe0 <USBH_GetNextDesc>
 800aa4e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800aa50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa52:	785b      	ldrb	r3, [r3, #1]
 800aa54:	2b05      	cmp	r3, #5
 800aa56:	d117      	bne.n	800aa88 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800aa58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800aa5c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800aa60:	3201      	adds	r2, #1
 800aa62:	00d2      	lsls	r2, r2, #3
 800aa64:	211a      	movs	r1, #26
 800aa66:	fb01 f303 	mul.w	r3, r1, r3
 800aa6a:	4413      	add	r3, r2
 800aa6c:	3308      	adds	r3, #8
 800aa6e:	68fa      	ldr	r2, [r7, #12]
 800aa70:	4413      	add	r3, r2
 800aa72:	3304      	adds	r3, #4
 800aa74:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800aa76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aa78:	69b8      	ldr	r0, [r7, #24]
 800aa7a:	f000 f851 	bl	800ab20 <USBH_ParseEPDesc>
            ep_ix++;
 800aa7e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800aa82:	3301      	adds	r3, #1
 800aa84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800aa88:	69fb      	ldr	r3, [r7, #28]
 800aa8a:	791b      	ldrb	r3, [r3, #4]
 800aa8c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800aa90:	429a      	cmp	r2, r3
 800aa92:	d204      	bcs.n	800aa9e <USBH_ParseCfgDesc+0x120>
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	885a      	ldrh	r2, [r3, #2]
 800aa98:	8afb      	ldrh	r3, [r7, #22]
 800aa9a:	429a      	cmp	r2, r3
 800aa9c:	d8d1      	bhi.n	800aa42 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800aa9e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800aaa2:	3301      	adds	r3, #1
 800aaa4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800aaa8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800aaac:	2b01      	cmp	r3, #1
 800aaae:	d804      	bhi.n	800aaba <USBH_ParseCfgDesc+0x13c>
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	885a      	ldrh	r2, [r3, #2]
 800aab4:	8afb      	ldrh	r3, [r7, #22]
 800aab6:	429a      	cmp	r2, r3
 800aab8:	d8a4      	bhi.n	800aa04 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800aaba:	bf00      	nop
 800aabc:	3728      	adds	r7, #40	; 0x28
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bd80      	pop	{r7, pc}

0800aac2 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800aac2:	b480      	push	{r7}
 800aac4:	b083      	sub	sp, #12
 800aac6:	af00      	add	r7, sp, #0
 800aac8:	6078      	str	r0, [r7, #4]
 800aaca:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	781a      	ldrb	r2, [r3, #0]
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	785a      	ldrb	r2, [r3, #1]
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	789a      	ldrb	r2, [r3, #2]
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	78da      	ldrb	r2, [r3, #3]
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	791a      	ldrb	r2, [r3, #4]
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	795a      	ldrb	r2, [r3, #5]
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	799a      	ldrb	r2, [r3, #6]
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	79da      	ldrb	r2, [r3, #7]
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	7a1a      	ldrb	r2, [r3, #8]
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	721a      	strb	r2, [r3, #8]
}
 800ab14:	bf00      	nop
 800ab16:	370c      	adds	r7, #12
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1e:	4770      	bx	lr

0800ab20 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b083      	sub	sp, #12
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
 800ab28:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	781a      	ldrb	r2, [r3, #0]
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	785a      	ldrb	r2, [r3, #1]
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	789a      	ldrb	r2, [r3, #2]
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	78da      	ldrb	r2, [r3, #3]
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	3304      	adds	r3, #4
 800ab4e:	781b      	ldrb	r3, [r3, #0]
 800ab50:	b29a      	uxth	r2, r3
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	3305      	adds	r3, #5
 800ab56:	781b      	ldrb	r3, [r3, #0]
 800ab58:	b29b      	uxth	r3, r3
 800ab5a:	021b      	lsls	r3, r3, #8
 800ab5c:	b29b      	uxth	r3, r3
 800ab5e:	4313      	orrs	r3, r2
 800ab60:	b29a      	uxth	r2, r3
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	799a      	ldrb	r2, [r3, #6]
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	719a      	strb	r2, [r3, #6]
}
 800ab6e:	bf00      	nop
 800ab70:	370c      	adds	r7, #12
 800ab72:	46bd      	mov	sp, r7
 800ab74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab78:	4770      	bx	lr

0800ab7a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800ab7a:	b480      	push	{r7}
 800ab7c:	b087      	sub	sp, #28
 800ab7e:	af00      	add	r7, sp, #0
 800ab80:	60f8      	str	r0, [r7, #12]
 800ab82:	60b9      	str	r1, [r7, #8]
 800ab84:	4613      	mov	r3, r2
 800ab86:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	3301      	adds	r3, #1
 800ab8c:	781b      	ldrb	r3, [r3, #0]
 800ab8e:	2b03      	cmp	r3, #3
 800ab90:	d120      	bne.n	800abd4 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	781b      	ldrb	r3, [r3, #0]
 800ab96:	1e9a      	subs	r2, r3, #2
 800ab98:	88fb      	ldrh	r3, [r7, #6]
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	bf28      	it	cs
 800ab9e:	4613      	movcs	r3, r2
 800aba0:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	3302      	adds	r3, #2
 800aba6:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800aba8:	2300      	movs	r3, #0
 800abaa:	82fb      	strh	r3, [r7, #22]
 800abac:	e00b      	b.n	800abc6 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800abae:	8afb      	ldrh	r3, [r7, #22]
 800abb0:	68fa      	ldr	r2, [r7, #12]
 800abb2:	4413      	add	r3, r2
 800abb4:	781a      	ldrb	r2, [r3, #0]
 800abb6:	68bb      	ldr	r3, [r7, #8]
 800abb8:	701a      	strb	r2, [r3, #0]
      pdest++;
 800abba:	68bb      	ldr	r3, [r7, #8]
 800abbc:	3301      	adds	r3, #1
 800abbe:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800abc0:	8afb      	ldrh	r3, [r7, #22]
 800abc2:	3302      	adds	r3, #2
 800abc4:	82fb      	strh	r3, [r7, #22]
 800abc6:	8afa      	ldrh	r2, [r7, #22]
 800abc8:	8abb      	ldrh	r3, [r7, #20]
 800abca:	429a      	cmp	r2, r3
 800abcc:	d3ef      	bcc.n	800abae <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800abce:	68bb      	ldr	r3, [r7, #8]
 800abd0:	2200      	movs	r2, #0
 800abd2:	701a      	strb	r2, [r3, #0]
  }
}
 800abd4:	bf00      	nop
 800abd6:	371c      	adds	r7, #28
 800abd8:	46bd      	mov	sp, r7
 800abda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abde:	4770      	bx	lr

0800abe0 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800abe0:	b480      	push	{r7}
 800abe2:	b085      	sub	sp, #20
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
 800abe8:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	881a      	ldrh	r2, [r3, #0]
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	781b      	ldrb	r3, [r3, #0]
 800abf2:	b29b      	uxth	r3, r3
 800abf4:	4413      	add	r3, r2
 800abf6:	b29a      	uxth	r2, r3
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	781b      	ldrb	r3, [r3, #0]
 800ac00:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	4413      	add	r3, r2
 800ac06:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ac08:	68fb      	ldr	r3, [r7, #12]
}
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	3714      	adds	r7, #20
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac14:	4770      	bx	lr

0800ac16 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800ac16:	b580      	push	{r7, lr}
 800ac18:	b086      	sub	sp, #24
 800ac1a:	af00      	add	r7, sp, #0
 800ac1c:	60f8      	str	r0, [r7, #12]
 800ac1e:	60b9      	str	r1, [r7, #8]
 800ac20:	4613      	mov	r3, r2
 800ac22:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800ac24:	2301      	movs	r3, #1
 800ac26:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	789b      	ldrb	r3, [r3, #2]
 800ac2c:	2b01      	cmp	r3, #1
 800ac2e:	d002      	beq.n	800ac36 <USBH_CtlReq+0x20>
 800ac30:	2b02      	cmp	r3, #2
 800ac32:	d00f      	beq.n	800ac54 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800ac34:	e027      	b.n	800ac86 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	68ba      	ldr	r2, [r7, #8]
 800ac3a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	88fa      	ldrh	r2, [r7, #6]
 800ac40:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	2201      	movs	r2, #1
 800ac46:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	2202      	movs	r2, #2
 800ac4c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800ac4e:	2301      	movs	r3, #1
 800ac50:	75fb      	strb	r3, [r7, #23]
      break;
 800ac52:	e018      	b.n	800ac86 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800ac54:	68f8      	ldr	r0, [r7, #12]
 800ac56:	f000 f81b 	bl	800ac90 <USBH_HandleControl>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800ac5e:	7dfb      	ldrb	r3, [r7, #23]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d002      	beq.n	800ac6a <USBH_CtlReq+0x54>
 800ac64:	7dfb      	ldrb	r3, [r7, #23]
 800ac66:	2b03      	cmp	r3, #3
 800ac68:	d106      	bne.n	800ac78 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	2201      	movs	r2, #1
 800ac6e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	2200      	movs	r2, #0
 800ac74:	761a      	strb	r2, [r3, #24]
      break;
 800ac76:	e005      	b.n	800ac84 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800ac78:	7dfb      	ldrb	r3, [r7, #23]
 800ac7a:	2b02      	cmp	r3, #2
 800ac7c:	d102      	bne.n	800ac84 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	2201      	movs	r2, #1
 800ac82:	709a      	strb	r2, [r3, #2]
      break;
 800ac84:	bf00      	nop
  }
  return status;
 800ac86:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	3718      	adds	r7, #24
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}

0800ac90 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b086      	sub	sp, #24
 800ac94:	af02      	add	r7, sp, #8
 800ac96:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800ac98:	2301      	movs	r3, #1
 800ac9a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	7e1b      	ldrb	r3, [r3, #24]
 800aca4:	3b01      	subs	r3, #1
 800aca6:	2b0a      	cmp	r3, #10
 800aca8:	f200 8156 	bhi.w	800af58 <USBH_HandleControl+0x2c8>
 800acac:	a201      	add	r2, pc, #4	; (adr r2, 800acb4 <USBH_HandleControl+0x24>)
 800acae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acb2:	bf00      	nop
 800acb4:	0800ace1 	.word	0x0800ace1
 800acb8:	0800acfb 	.word	0x0800acfb
 800acbc:	0800ad65 	.word	0x0800ad65
 800acc0:	0800ad8b 	.word	0x0800ad8b
 800acc4:	0800adc3 	.word	0x0800adc3
 800acc8:	0800aded 	.word	0x0800aded
 800accc:	0800ae3f 	.word	0x0800ae3f
 800acd0:	0800ae61 	.word	0x0800ae61
 800acd4:	0800ae9d 	.word	0x0800ae9d
 800acd8:	0800aec3 	.word	0x0800aec3
 800acdc:	0800af01 	.word	0x0800af01
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	f103 0110 	add.w	r1, r3, #16
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	795b      	ldrb	r3, [r3, #5]
 800acea:	461a      	mov	r2, r3
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f000 f943 	bl	800af78 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2202      	movs	r2, #2
 800acf6:	761a      	strb	r2, [r3, #24]
      break;
 800acf8:	e139      	b.n	800af6e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	795b      	ldrb	r3, [r3, #5]
 800acfe:	4619      	mov	r1, r3
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	f000 fd21 	bl	800b748 <USBH_LL_GetURBState>
 800ad06:	4603      	mov	r3, r0
 800ad08:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800ad0a:	7bbb      	ldrb	r3, [r7, #14]
 800ad0c:	2b01      	cmp	r3, #1
 800ad0e:	d11e      	bne.n	800ad4e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	7c1b      	ldrb	r3, [r3, #16]
 800ad14:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ad18:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	8adb      	ldrh	r3, [r3, #22]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d00a      	beq.n	800ad38 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800ad22:	7b7b      	ldrb	r3, [r7, #13]
 800ad24:	2b80      	cmp	r3, #128	; 0x80
 800ad26:	d103      	bne.n	800ad30 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2203      	movs	r2, #3
 800ad2c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ad2e:	e115      	b.n	800af5c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2205      	movs	r2, #5
 800ad34:	761a      	strb	r2, [r3, #24]
      break;
 800ad36:	e111      	b.n	800af5c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800ad38:	7b7b      	ldrb	r3, [r7, #13]
 800ad3a:	2b80      	cmp	r3, #128	; 0x80
 800ad3c:	d103      	bne.n	800ad46 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2209      	movs	r2, #9
 800ad42:	761a      	strb	r2, [r3, #24]
      break;
 800ad44:	e10a      	b.n	800af5c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2207      	movs	r2, #7
 800ad4a:	761a      	strb	r2, [r3, #24]
      break;
 800ad4c:	e106      	b.n	800af5c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800ad4e:	7bbb      	ldrb	r3, [r7, #14]
 800ad50:	2b04      	cmp	r3, #4
 800ad52:	d003      	beq.n	800ad5c <USBH_HandleControl+0xcc>
 800ad54:	7bbb      	ldrb	r3, [r7, #14]
 800ad56:	2b02      	cmp	r3, #2
 800ad58:	f040 8100 	bne.w	800af5c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	220b      	movs	r2, #11
 800ad60:	761a      	strb	r2, [r3, #24]
      break;
 800ad62:	e0fb      	b.n	800af5c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ad6a:	b29a      	uxth	r2, r3
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	6899      	ldr	r1, [r3, #8]
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	899a      	ldrh	r2, [r3, #12]
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	791b      	ldrb	r3, [r3, #4]
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	f000 f93a 	bl	800aff6 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2204      	movs	r2, #4
 800ad86:	761a      	strb	r2, [r3, #24]
      break;
 800ad88:	e0f1      	b.n	800af6e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	791b      	ldrb	r3, [r3, #4]
 800ad8e:	4619      	mov	r1, r3
 800ad90:	6878      	ldr	r0, [r7, #4]
 800ad92:	f000 fcd9 	bl	800b748 <USBH_LL_GetURBState>
 800ad96:	4603      	mov	r3, r0
 800ad98:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800ad9a:	7bbb      	ldrb	r3, [r7, #14]
 800ad9c:	2b01      	cmp	r3, #1
 800ad9e:	d102      	bne.n	800ada6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2209      	movs	r2, #9
 800ada4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800ada6:	7bbb      	ldrb	r3, [r7, #14]
 800ada8:	2b05      	cmp	r3, #5
 800adaa:	d102      	bne.n	800adb2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800adac:	2303      	movs	r3, #3
 800adae:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800adb0:	e0d6      	b.n	800af60 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800adb2:	7bbb      	ldrb	r3, [r7, #14]
 800adb4:	2b04      	cmp	r3, #4
 800adb6:	f040 80d3 	bne.w	800af60 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	220b      	movs	r2, #11
 800adbe:	761a      	strb	r2, [r3, #24]
      break;
 800adc0:	e0ce      	b.n	800af60 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6899      	ldr	r1, [r3, #8]
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	899a      	ldrh	r2, [r3, #12]
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	795b      	ldrb	r3, [r3, #5]
 800adce:	2001      	movs	r0, #1
 800add0:	9000      	str	r0, [sp, #0]
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f000 f8ea 	bl	800afac <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800adde:	b29a      	uxth	r2, r3
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2206      	movs	r2, #6
 800ade8:	761a      	strb	r2, [r3, #24]
      break;
 800adea:	e0c0      	b.n	800af6e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	795b      	ldrb	r3, [r3, #5]
 800adf0:	4619      	mov	r1, r3
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f000 fca8 	bl	800b748 <USBH_LL_GetURBState>
 800adf8:	4603      	mov	r3, r0
 800adfa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800adfc:	7bbb      	ldrb	r3, [r7, #14]
 800adfe:	2b01      	cmp	r3, #1
 800ae00:	d103      	bne.n	800ae0a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2207      	movs	r2, #7
 800ae06:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ae08:	e0ac      	b.n	800af64 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800ae0a:	7bbb      	ldrb	r3, [r7, #14]
 800ae0c:	2b05      	cmp	r3, #5
 800ae0e:	d105      	bne.n	800ae1c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	220c      	movs	r2, #12
 800ae14:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800ae16:	2303      	movs	r3, #3
 800ae18:	73fb      	strb	r3, [r7, #15]
      break;
 800ae1a:	e0a3      	b.n	800af64 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ae1c:	7bbb      	ldrb	r3, [r7, #14]
 800ae1e:	2b02      	cmp	r3, #2
 800ae20:	d103      	bne.n	800ae2a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2205      	movs	r2, #5
 800ae26:	761a      	strb	r2, [r3, #24]
      break;
 800ae28:	e09c      	b.n	800af64 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800ae2a:	7bbb      	ldrb	r3, [r7, #14]
 800ae2c:	2b04      	cmp	r3, #4
 800ae2e:	f040 8099 	bne.w	800af64 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	220b      	movs	r2, #11
 800ae36:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800ae38:	2302      	movs	r3, #2
 800ae3a:	73fb      	strb	r3, [r7, #15]
      break;
 800ae3c:	e092      	b.n	800af64 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	791b      	ldrb	r3, [r3, #4]
 800ae42:	2200      	movs	r2, #0
 800ae44:	2100      	movs	r1, #0
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f000 f8d5 	bl	800aff6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ae52:	b29a      	uxth	r2, r3
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2208      	movs	r2, #8
 800ae5c:	761a      	strb	r2, [r3, #24]

      break;
 800ae5e:	e086      	b.n	800af6e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	791b      	ldrb	r3, [r3, #4]
 800ae64:	4619      	mov	r1, r3
 800ae66:	6878      	ldr	r0, [r7, #4]
 800ae68:	f000 fc6e 	bl	800b748 <USBH_LL_GetURBState>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ae70:	7bbb      	ldrb	r3, [r7, #14]
 800ae72:	2b01      	cmp	r3, #1
 800ae74:	d105      	bne.n	800ae82 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	220d      	movs	r2, #13
 800ae7a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ae80:	e072      	b.n	800af68 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800ae82:	7bbb      	ldrb	r3, [r7, #14]
 800ae84:	2b04      	cmp	r3, #4
 800ae86:	d103      	bne.n	800ae90 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	220b      	movs	r2, #11
 800ae8c:	761a      	strb	r2, [r3, #24]
      break;
 800ae8e:	e06b      	b.n	800af68 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800ae90:	7bbb      	ldrb	r3, [r7, #14]
 800ae92:	2b05      	cmp	r3, #5
 800ae94:	d168      	bne.n	800af68 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800ae96:	2303      	movs	r3, #3
 800ae98:	73fb      	strb	r3, [r7, #15]
      break;
 800ae9a:	e065      	b.n	800af68 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	795b      	ldrb	r3, [r3, #5]
 800aea0:	2201      	movs	r2, #1
 800aea2:	9200      	str	r2, [sp, #0]
 800aea4:	2200      	movs	r2, #0
 800aea6:	2100      	movs	r1, #0
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f000 f87f 	bl	800afac <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800aeb4:	b29a      	uxth	r2, r3
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	220a      	movs	r2, #10
 800aebe:	761a      	strb	r2, [r3, #24]
      break;
 800aec0:	e055      	b.n	800af6e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	795b      	ldrb	r3, [r3, #5]
 800aec6:	4619      	mov	r1, r3
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f000 fc3d 	bl	800b748 <USBH_LL_GetURBState>
 800aece:	4603      	mov	r3, r0
 800aed0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800aed2:	7bbb      	ldrb	r3, [r7, #14]
 800aed4:	2b01      	cmp	r3, #1
 800aed6:	d105      	bne.n	800aee4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800aed8:	2300      	movs	r3, #0
 800aeda:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	220d      	movs	r2, #13
 800aee0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800aee2:	e043      	b.n	800af6c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800aee4:	7bbb      	ldrb	r3, [r7, #14]
 800aee6:	2b02      	cmp	r3, #2
 800aee8:	d103      	bne.n	800aef2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2209      	movs	r2, #9
 800aeee:	761a      	strb	r2, [r3, #24]
      break;
 800aef0:	e03c      	b.n	800af6c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800aef2:	7bbb      	ldrb	r3, [r7, #14]
 800aef4:	2b04      	cmp	r3, #4
 800aef6:	d139      	bne.n	800af6c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	220b      	movs	r2, #11
 800aefc:	761a      	strb	r2, [r3, #24]
      break;
 800aefe:	e035      	b.n	800af6c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	7e5b      	ldrb	r3, [r3, #25]
 800af04:	3301      	adds	r3, #1
 800af06:	b2da      	uxtb	r2, r3
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	765a      	strb	r2, [r3, #25]
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	7e5b      	ldrb	r3, [r3, #25]
 800af10:	2b02      	cmp	r3, #2
 800af12:	d806      	bhi.n	800af22 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2201      	movs	r2, #1
 800af18:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2201      	movs	r2, #1
 800af1e:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800af20:	e025      	b.n	800af6e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800af28:	2106      	movs	r1, #6
 800af2a:	6878      	ldr	r0, [r7, #4]
 800af2c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	2200      	movs	r2, #0
 800af32:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	795b      	ldrb	r3, [r3, #5]
 800af38:	4619      	mov	r1, r3
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	f000 f90c 	bl	800b158 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	791b      	ldrb	r3, [r3, #4]
 800af44:	4619      	mov	r1, r3
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f000 f906 	bl	800b158 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2200      	movs	r2, #0
 800af50:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800af52:	2302      	movs	r3, #2
 800af54:	73fb      	strb	r3, [r7, #15]
      break;
 800af56:	e00a      	b.n	800af6e <USBH_HandleControl+0x2de>

    default:
      break;
 800af58:	bf00      	nop
 800af5a:	e008      	b.n	800af6e <USBH_HandleControl+0x2de>
      break;
 800af5c:	bf00      	nop
 800af5e:	e006      	b.n	800af6e <USBH_HandleControl+0x2de>
      break;
 800af60:	bf00      	nop
 800af62:	e004      	b.n	800af6e <USBH_HandleControl+0x2de>
      break;
 800af64:	bf00      	nop
 800af66:	e002      	b.n	800af6e <USBH_HandleControl+0x2de>
      break;
 800af68:	bf00      	nop
 800af6a:	e000      	b.n	800af6e <USBH_HandleControl+0x2de>
      break;
 800af6c:	bf00      	nop
  }

  return status;
 800af6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800af70:	4618      	mov	r0, r3
 800af72:	3710      	adds	r7, #16
 800af74:	46bd      	mov	sp, r7
 800af76:	bd80      	pop	{r7, pc}

0800af78 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b088      	sub	sp, #32
 800af7c:	af04      	add	r7, sp, #16
 800af7e:	60f8      	str	r0, [r7, #12]
 800af80:	60b9      	str	r1, [r7, #8]
 800af82:	4613      	mov	r3, r2
 800af84:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800af86:	79f9      	ldrb	r1, [r7, #7]
 800af88:	2300      	movs	r3, #0
 800af8a:	9303      	str	r3, [sp, #12]
 800af8c:	2308      	movs	r3, #8
 800af8e:	9302      	str	r3, [sp, #8]
 800af90:	68bb      	ldr	r3, [r7, #8]
 800af92:	9301      	str	r3, [sp, #4]
 800af94:	2300      	movs	r3, #0
 800af96:	9300      	str	r3, [sp, #0]
 800af98:	2300      	movs	r3, #0
 800af9a:	2200      	movs	r2, #0
 800af9c:	68f8      	ldr	r0, [r7, #12]
 800af9e:	f000 fba2 	bl	800b6e6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800afa2:	2300      	movs	r3, #0
}
 800afa4:	4618      	mov	r0, r3
 800afa6:	3710      	adds	r7, #16
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd80      	pop	{r7, pc}

0800afac <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b088      	sub	sp, #32
 800afb0:	af04      	add	r7, sp, #16
 800afb2:	60f8      	str	r0, [r7, #12]
 800afb4:	60b9      	str	r1, [r7, #8]
 800afb6:	4611      	mov	r1, r2
 800afb8:	461a      	mov	r2, r3
 800afba:	460b      	mov	r3, r1
 800afbc:	80fb      	strh	r3, [r7, #6]
 800afbe:	4613      	mov	r3, r2
 800afc0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d001      	beq.n	800afd0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800afcc:	2300      	movs	r3, #0
 800afce:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800afd0:	7979      	ldrb	r1, [r7, #5]
 800afd2:	7e3b      	ldrb	r3, [r7, #24]
 800afd4:	9303      	str	r3, [sp, #12]
 800afd6:	88fb      	ldrh	r3, [r7, #6]
 800afd8:	9302      	str	r3, [sp, #8]
 800afda:	68bb      	ldr	r3, [r7, #8]
 800afdc:	9301      	str	r3, [sp, #4]
 800afde:	2301      	movs	r3, #1
 800afe0:	9300      	str	r3, [sp, #0]
 800afe2:	2300      	movs	r3, #0
 800afe4:	2200      	movs	r2, #0
 800afe6:	68f8      	ldr	r0, [r7, #12]
 800afe8:	f000 fb7d 	bl	800b6e6 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800afec:	2300      	movs	r3, #0
}
 800afee:	4618      	mov	r0, r3
 800aff0:	3710      	adds	r7, #16
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}

0800aff6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800aff6:	b580      	push	{r7, lr}
 800aff8:	b088      	sub	sp, #32
 800affa:	af04      	add	r7, sp, #16
 800affc:	60f8      	str	r0, [r7, #12]
 800affe:	60b9      	str	r1, [r7, #8]
 800b000:	4611      	mov	r1, r2
 800b002:	461a      	mov	r2, r3
 800b004:	460b      	mov	r3, r1
 800b006:	80fb      	strh	r3, [r7, #6]
 800b008:	4613      	mov	r3, r2
 800b00a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b00c:	7979      	ldrb	r1, [r7, #5]
 800b00e:	2300      	movs	r3, #0
 800b010:	9303      	str	r3, [sp, #12]
 800b012:	88fb      	ldrh	r3, [r7, #6]
 800b014:	9302      	str	r3, [sp, #8]
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	9301      	str	r3, [sp, #4]
 800b01a:	2301      	movs	r3, #1
 800b01c:	9300      	str	r3, [sp, #0]
 800b01e:	2300      	movs	r3, #0
 800b020:	2201      	movs	r2, #1
 800b022:	68f8      	ldr	r0, [r7, #12]
 800b024:	f000 fb5f 	bl	800b6e6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b028:	2300      	movs	r3, #0

}
 800b02a:	4618      	mov	r0, r3
 800b02c:	3710      	adds	r7, #16
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}

0800b032 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b032:	b580      	push	{r7, lr}
 800b034:	b088      	sub	sp, #32
 800b036:	af04      	add	r7, sp, #16
 800b038:	60f8      	str	r0, [r7, #12]
 800b03a:	60b9      	str	r1, [r7, #8]
 800b03c:	4611      	mov	r1, r2
 800b03e:	461a      	mov	r2, r3
 800b040:	460b      	mov	r3, r1
 800b042:	80fb      	strh	r3, [r7, #6]
 800b044:	4613      	mov	r3, r2
 800b046:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d001      	beq.n	800b056 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b052:	2300      	movs	r3, #0
 800b054:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b056:	7979      	ldrb	r1, [r7, #5]
 800b058:	7e3b      	ldrb	r3, [r7, #24]
 800b05a:	9303      	str	r3, [sp, #12]
 800b05c:	88fb      	ldrh	r3, [r7, #6]
 800b05e:	9302      	str	r3, [sp, #8]
 800b060:	68bb      	ldr	r3, [r7, #8]
 800b062:	9301      	str	r3, [sp, #4]
 800b064:	2301      	movs	r3, #1
 800b066:	9300      	str	r3, [sp, #0]
 800b068:	2302      	movs	r3, #2
 800b06a:	2200      	movs	r2, #0
 800b06c:	68f8      	ldr	r0, [r7, #12]
 800b06e:	f000 fb3a 	bl	800b6e6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b072:	2300      	movs	r3, #0
}
 800b074:	4618      	mov	r0, r3
 800b076:	3710      	adds	r7, #16
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}

0800b07c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b088      	sub	sp, #32
 800b080:	af04      	add	r7, sp, #16
 800b082:	60f8      	str	r0, [r7, #12]
 800b084:	60b9      	str	r1, [r7, #8]
 800b086:	4611      	mov	r1, r2
 800b088:	461a      	mov	r2, r3
 800b08a:	460b      	mov	r3, r1
 800b08c:	80fb      	strh	r3, [r7, #6]
 800b08e:	4613      	mov	r3, r2
 800b090:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b092:	7979      	ldrb	r1, [r7, #5]
 800b094:	2300      	movs	r3, #0
 800b096:	9303      	str	r3, [sp, #12]
 800b098:	88fb      	ldrh	r3, [r7, #6]
 800b09a:	9302      	str	r3, [sp, #8]
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	9301      	str	r3, [sp, #4]
 800b0a0:	2301      	movs	r3, #1
 800b0a2:	9300      	str	r3, [sp, #0]
 800b0a4:	2302      	movs	r3, #2
 800b0a6:	2201      	movs	r2, #1
 800b0a8:	68f8      	ldr	r0, [r7, #12]
 800b0aa:	f000 fb1c 	bl	800b6e6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b0ae:	2300      	movs	r3, #0
}
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	3710      	adds	r7, #16
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd80      	pop	{r7, pc}

0800b0b8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b086      	sub	sp, #24
 800b0bc:	af04      	add	r7, sp, #16
 800b0be:	6078      	str	r0, [r7, #4]
 800b0c0:	4608      	mov	r0, r1
 800b0c2:	4611      	mov	r1, r2
 800b0c4:	461a      	mov	r2, r3
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	70fb      	strb	r3, [r7, #3]
 800b0ca:	460b      	mov	r3, r1
 800b0cc:	70bb      	strb	r3, [r7, #2]
 800b0ce:	4613      	mov	r3, r2
 800b0d0:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b0d2:	7878      	ldrb	r0, [r7, #1]
 800b0d4:	78ba      	ldrb	r2, [r7, #2]
 800b0d6:	78f9      	ldrb	r1, [r7, #3]
 800b0d8:	8b3b      	ldrh	r3, [r7, #24]
 800b0da:	9302      	str	r3, [sp, #8]
 800b0dc:	7d3b      	ldrb	r3, [r7, #20]
 800b0de:	9301      	str	r3, [sp, #4]
 800b0e0:	7c3b      	ldrb	r3, [r7, #16]
 800b0e2:	9300      	str	r3, [sp, #0]
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f000 faaf 	bl	800b64a <USBH_LL_OpenPipe>

  return USBH_OK;
 800b0ec:	2300      	movs	r3, #0
}
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	3708      	adds	r7, #8
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bd80      	pop	{r7, pc}

0800b0f6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b0f6:	b580      	push	{r7, lr}
 800b0f8:	b082      	sub	sp, #8
 800b0fa:	af00      	add	r7, sp, #0
 800b0fc:	6078      	str	r0, [r7, #4]
 800b0fe:	460b      	mov	r3, r1
 800b100:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800b102:	78fb      	ldrb	r3, [r7, #3]
 800b104:	4619      	mov	r1, r3
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f000 face 	bl	800b6a8 <USBH_LL_ClosePipe>

  return USBH_OK;
 800b10c:	2300      	movs	r3, #0
}
 800b10e:	4618      	mov	r0, r3
 800b110:	3708      	adds	r7, #8
 800b112:	46bd      	mov	sp, r7
 800b114:	bd80      	pop	{r7, pc}

0800b116 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b116:	b580      	push	{r7, lr}
 800b118:	b084      	sub	sp, #16
 800b11a:	af00      	add	r7, sp, #0
 800b11c:	6078      	str	r0, [r7, #4]
 800b11e:	460b      	mov	r3, r1
 800b120:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b122:	6878      	ldr	r0, [r7, #4]
 800b124:	f000 f836 	bl	800b194 <USBH_GetFreePipe>
 800b128:	4603      	mov	r3, r0
 800b12a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b12c:	89fb      	ldrh	r3, [r7, #14]
 800b12e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b132:	4293      	cmp	r3, r2
 800b134:	d00a      	beq.n	800b14c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800b136:	78fa      	ldrb	r2, [r7, #3]
 800b138:	89fb      	ldrh	r3, [r7, #14]
 800b13a:	f003 030f 	and.w	r3, r3, #15
 800b13e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b142:	6879      	ldr	r1, [r7, #4]
 800b144:	33e0      	adds	r3, #224	; 0xe0
 800b146:	009b      	lsls	r3, r3, #2
 800b148:	440b      	add	r3, r1
 800b14a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b14c:	89fb      	ldrh	r3, [r7, #14]
 800b14e:	b2db      	uxtb	r3, r3
}
 800b150:	4618      	mov	r0, r3
 800b152:	3710      	adds	r7, #16
 800b154:	46bd      	mov	sp, r7
 800b156:	bd80      	pop	{r7, pc}

0800b158 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b158:	b480      	push	{r7}
 800b15a:	b083      	sub	sp, #12
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
 800b160:	460b      	mov	r3, r1
 800b162:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800b164:	78fb      	ldrb	r3, [r7, #3]
 800b166:	2b0a      	cmp	r3, #10
 800b168:	d80d      	bhi.n	800b186 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b16a:	78fb      	ldrb	r3, [r7, #3]
 800b16c:	687a      	ldr	r2, [r7, #4]
 800b16e:	33e0      	adds	r3, #224	; 0xe0
 800b170:	009b      	lsls	r3, r3, #2
 800b172:	4413      	add	r3, r2
 800b174:	685a      	ldr	r2, [r3, #4]
 800b176:	78fb      	ldrb	r3, [r7, #3]
 800b178:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b17c:	6879      	ldr	r1, [r7, #4]
 800b17e:	33e0      	adds	r3, #224	; 0xe0
 800b180:	009b      	lsls	r3, r3, #2
 800b182:	440b      	add	r3, r1
 800b184:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b186:	2300      	movs	r3, #0
}
 800b188:	4618      	mov	r0, r3
 800b18a:	370c      	adds	r7, #12
 800b18c:	46bd      	mov	sp, r7
 800b18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b192:	4770      	bx	lr

0800b194 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b194:	b480      	push	{r7}
 800b196:	b085      	sub	sp, #20
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b19c:	2300      	movs	r3, #0
 800b19e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	73fb      	strb	r3, [r7, #15]
 800b1a4:	e00f      	b.n	800b1c6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b1a6:	7bfb      	ldrb	r3, [r7, #15]
 800b1a8:	687a      	ldr	r2, [r7, #4]
 800b1aa:	33e0      	adds	r3, #224	; 0xe0
 800b1ac:	009b      	lsls	r3, r3, #2
 800b1ae:	4413      	add	r3, r2
 800b1b0:	685b      	ldr	r3, [r3, #4]
 800b1b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d102      	bne.n	800b1c0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b1ba:	7bfb      	ldrb	r3, [r7, #15]
 800b1bc:	b29b      	uxth	r3, r3
 800b1be:	e007      	b.n	800b1d0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800b1c0:	7bfb      	ldrb	r3, [r7, #15]
 800b1c2:	3301      	adds	r3, #1
 800b1c4:	73fb      	strb	r3, [r7, #15]
 800b1c6:	7bfb      	ldrb	r3, [r7, #15]
 800b1c8:	2b0a      	cmp	r3, #10
 800b1ca:	d9ec      	bls.n	800b1a6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b1cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	3714      	adds	r7, #20
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1da:	4770      	bx	lr

0800b1dc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b1dc:	b480      	push	{r7}
 800b1de:	b087      	sub	sp, #28
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	60f8      	str	r0, [r7, #12]
 800b1e4:	60b9      	str	r1, [r7, #8]
 800b1e6:	4613      	mov	r3, r2
 800b1e8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b1f2:	4b1f      	ldr	r3, [pc, #124]	; (800b270 <FATFS_LinkDriverEx+0x94>)
 800b1f4:	7a5b      	ldrb	r3, [r3, #9]
 800b1f6:	b2db      	uxtb	r3, r3
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d131      	bne.n	800b260 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b1fc:	4b1c      	ldr	r3, [pc, #112]	; (800b270 <FATFS_LinkDriverEx+0x94>)
 800b1fe:	7a5b      	ldrb	r3, [r3, #9]
 800b200:	b2db      	uxtb	r3, r3
 800b202:	461a      	mov	r2, r3
 800b204:	4b1a      	ldr	r3, [pc, #104]	; (800b270 <FATFS_LinkDriverEx+0x94>)
 800b206:	2100      	movs	r1, #0
 800b208:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b20a:	4b19      	ldr	r3, [pc, #100]	; (800b270 <FATFS_LinkDriverEx+0x94>)
 800b20c:	7a5b      	ldrb	r3, [r3, #9]
 800b20e:	b2db      	uxtb	r3, r3
 800b210:	4a17      	ldr	r2, [pc, #92]	; (800b270 <FATFS_LinkDriverEx+0x94>)
 800b212:	009b      	lsls	r3, r3, #2
 800b214:	4413      	add	r3, r2
 800b216:	68fa      	ldr	r2, [r7, #12]
 800b218:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b21a:	4b15      	ldr	r3, [pc, #84]	; (800b270 <FATFS_LinkDriverEx+0x94>)
 800b21c:	7a5b      	ldrb	r3, [r3, #9]
 800b21e:	b2db      	uxtb	r3, r3
 800b220:	461a      	mov	r2, r3
 800b222:	4b13      	ldr	r3, [pc, #76]	; (800b270 <FATFS_LinkDriverEx+0x94>)
 800b224:	4413      	add	r3, r2
 800b226:	79fa      	ldrb	r2, [r7, #7]
 800b228:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b22a:	4b11      	ldr	r3, [pc, #68]	; (800b270 <FATFS_LinkDriverEx+0x94>)
 800b22c:	7a5b      	ldrb	r3, [r3, #9]
 800b22e:	b2db      	uxtb	r3, r3
 800b230:	1c5a      	adds	r2, r3, #1
 800b232:	b2d1      	uxtb	r1, r2
 800b234:	4a0e      	ldr	r2, [pc, #56]	; (800b270 <FATFS_LinkDriverEx+0x94>)
 800b236:	7251      	strb	r1, [r2, #9]
 800b238:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b23a:	7dbb      	ldrb	r3, [r7, #22]
 800b23c:	3330      	adds	r3, #48	; 0x30
 800b23e:	b2da      	uxtb	r2, r3
 800b240:	68bb      	ldr	r3, [r7, #8]
 800b242:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	3301      	adds	r3, #1
 800b248:	223a      	movs	r2, #58	; 0x3a
 800b24a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	3302      	adds	r3, #2
 800b250:	222f      	movs	r2, #47	; 0x2f
 800b252:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b254:	68bb      	ldr	r3, [r7, #8]
 800b256:	3303      	adds	r3, #3
 800b258:	2200      	movs	r2, #0
 800b25a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b25c:	2300      	movs	r3, #0
 800b25e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b260:	7dfb      	ldrb	r3, [r7, #23]
}
 800b262:	4618      	mov	r0, r3
 800b264:	371c      	adds	r7, #28
 800b266:	46bd      	mov	sp, r7
 800b268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26c:	4770      	bx	lr
 800b26e:	bf00      	nop
 800b270:	20000108 	.word	0x20000108

0800b274 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b082      	sub	sp, #8
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
 800b27c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b27e:	2200      	movs	r2, #0
 800b280:	6839      	ldr	r1, [r7, #0]
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	f7ff ffaa 	bl	800b1dc <FATFS_LinkDriverEx>
 800b288:	4603      	mov	r3, r0
}
 800b28a:	4618      	mov	r0, r3
 800b28c:	3708      	adds	r7, #8
 800b28e:	46bd      	mov	sp, r7
 800b290:	bd80      	pop	{r7, pc}
	...

0800b294 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b294:	b580      	push	{r7, lr}
 800b296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b298:	2201      	movs	r2, #1
 800b29a:	490e      	ldr	r1, [pc, #56]	; (800b2d4 <MX_USB_HOST_Init+0x40>)
 800b29c:	480e      	ldr	r0, [pc, #56]	; (800b2d8 <MX_USB_HOST_Init+0x44>)
 800b29e:	f7fe fc45 	bl	8009b2c <USBH_Init>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d001      	beq.n	800b2ac <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b2a8:	f7f5 fe98 	bl	8000fdc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800b2ac:	490b      	ldr	r1, [pc, #44]	; (800b2dc <MX_USB_HOST_Init+0x48>)
 800b2ae:	480a      	ldr	r0, [pc, #40]	; (800b2d8 <MX_USB_HOST_Init+0x44>)
 800b2b0:	f7fe fcca 	bl	8009c48 <USBH_RegisterClass>
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d001      	beq.n	800b2be <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b2ba:	f7f5 fe8f 	bl	8000fdc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b2be:	4806      	ldr	r0, [pc, #24]	; (800b2d8 <MX_USB_HOST_Init+0x44>)
 800b2c0:	f7fe fd4e 	bl	8009d60 <USBH_Start>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d001      	beq.n	800b2ce <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b2ca:	f7f5 fe87 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b2ce:	bf00      	nop
 800b2d0:	bd80      	pop	{r7, pc}
 800b2d2:	bf00      	nop
 800b2d4:	0800b2f5 	.word	0x0800b2f5
 800b2d8:	20003404 	.word	0x20003404
 800b2dc:	2000000c 	.word	0x2000000c

0800b2e0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800b2e4:	4802      	ldr	r0, [pc, #8]	; (800b2f0 <MX_USB_HOST_Process+0x10>)
 800b2e6:	f7fe fd4b 	bl	8009d80 <USBH_Process>
}
 800b2ea:	bf00      	nop
 800b2ec:	bd80      	pop	{r7, pc}
 800b2ee:	bf00      	nop
 800b2f0:	20003404 	.word	0x20003404

0800b2f4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b2f4:	b480      	push	{r7}
 800b2f6:	b083      	sub	sp, #12
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
 800b2fc:	460b      	mov	r3, r1
 800b2fe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b300:	78fb      	ldrb	r3, [r7, #3]
 800b302:	3b01      	subs	r3, #1
 800b304:	2b04      	cmp	r3, #4
 800b306:	d819      	bhi.n	800b33c <USBH_UserProcess+0x48>
 800b308:	a201      	add	r2, pc, #4	; (adr r2, 800b310 <USBH_UserProcess+0x1c>)
 800b30a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b30e:	bf00      	nop
 800b310:	0800b33d 	.word	0x0800b33d
 800b314:	0800b32d 	.word	0x0800b32d
 800b318:	0800b33d 	.word	0x0800b33d
 800b31c:	0800b335 	.word	0x0800b335
 800b320:	0800b325 	.word	0x0800b325
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b324:	4b09      	ldr	r3, [pc, #36]	; (800b34c <USBH_UserProcess+0x58>)
 800b326:	2203      	movs	r2, #3
 800b328:	701a      	strb	r2, [r3, #0]
  break;
 800b32a:	e008      	b.n	800b33e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b32c:	4b07      	ldr	r3, [pc, #28]	; (800b34c <USBH_UserProcess+0x58>)
 800b32e:	2202      	movs	r2, #2
 800b330:	701a      	strb	r2, [r3, #0]
  break;
 800b332:	e004      	b.n	800b33e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b334:	4b05      	ldr	r3, [pc, #20]	; (800b34c <USBH_UserProcess+0x58>)
 800b336:	2201      	movs	r2, #1
 800b338:	701a      	strb	r2, [r3, #0]
  break;
 800b33a:	e000      	b.n	800b33e <USBH_UserProcess+0x4a>

  default:
  break;
 800b33c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b33e:	bf00      	nop
 800b340:	370c      	adds	r7, #12
 800b342:	46bd      	mov	sp, r7
 800b344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b348:	4770      	bx	lr
 800b34a:	bf00      	nop
 800b34c:	20000114 	.word	0x20000114

0800b350 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b08a      	sub	sp, #40	; 0x28
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b358:	f107 0314 	add.w	r3, r7, #20
 800b35c:	2200      	movs	r2, #0
 800b35e:	601a      	str	r2, [r3, #0]
 800b360:	605a      	str	r2, [r3, #4]
 800b362:	609a      	str	r2, [r3, #8]
 800b364:	60da      	str	r2, [r3, #12]
 800b366:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b370:	d147      	bne.n	800b402 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b372:	2300      	movs	r3, #0
 800b374:	613b      	str	r3, [r7, #16]
 800b376:	4b25      	ldr	r3, [pc, #148]	; (800b40c <HAL_HCD_MspInit+0xbc>)
 800b378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b37a:	4a24      	ldr	r2, [pc, #144]	; (800b40c <HAL_HCD_MspInit+0xbc>)
 800b37c:	f043 0301 	orr.w	r3, r3, #1
 800b380:	6313      	str	r3, [r2, #48]	; 0x30
 800b382:	4b22      	ldr	r3, [pc, #136]	; (800b40c <HAL_HCD_MspInit+0xbc>)
 800b384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b386:	f003 0301 	and.w	r3, r3, #1
 800b38a:	613b      	str	r3, [r7, #16]
 800b38c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800b38e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b392:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b394:	2300      	movs	r3, #0
 800b396:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b398:	2300      	movs	r3, #0
 800b39a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b39c:	f107 0314 	add.w	r3, r7, #20
 800b3a0:	4619      	mov	r1, r3
 800b3a2:	481b      	ldr	r0, [pc, #108]	; (800b410 <HAL_HCD_MspInit+0xc0>)
 800b3a4:	f7f7 fc54 	bl	8002c50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b3a8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b3ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b3ae:	2302      	movs	r3, #2
 800b3b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b3ba:	230a      	movs	r3, #10
 800b3bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b3be:	f107 0314 	add.w	r3, r7, #20
 800b3c2:	4619      	mov	r1, r3
 800b3c4:	4812      	ldr	r0, [pc, #72]	; (800b410 <HAL_HCD_MspInit+0xc0>)
 800b3c6:	f7f7 fc43 	bl	8002c50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b3ca:	4b10      	ldr	r3, [pc, #64]	; (800b40c <HAL_HCD_MspInit+0xbc>)
 800b3cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3ce:	4a0f      	ldr	r2, [pc, #60]	; (800b40c <HAL_HCD_MspInit+0xbc>)
 800b3d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3d4:	6353      	str	r3, [r2, #52]	; 0x34
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	60fb      	str	r3, [r7, #12]
 800b3da:	4b0c      	ldr	r3, [pc, #48]	; (800b40c <HAL_HCD_MspInit+0xbc>)
 800b3dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3de:	4a0b      	ldr	r2, [pc, #44]	; (800b40c <HAL_HCD_MspInit+0xbc>)
 800b3e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b3e4:	6453      	str	r3, [r2, #68]	; 0x44
 800b3e6:	4b09      	ldr	r3, [pc, #36]	; (800b40c <HAL_HCD_MspInit+0xbc>)
 800b3e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b3ee:	60fb      	str	r3, [r7, #12]
 800b3f0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	2100      	movs	r1, #0
 800b3f6:	2043      	movs	r0, #67	; 0x43
 800b3f8:	f7f7 f813 	bl	8002422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b3fc:	2043      	movs	r0, #67	; 0x43
 800b3fe:	f7f7 f82c 	bl	800245a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b402:	bf00      	nop
 800b404:	3728      	adds	r7, #40	; 0x28
 800b406:	46bd      	mov	sp, r7
 800b408:	bd80      	pop	{r7, pc}
 800b40a:	bf00      	nop
 800b40c:	40023800 	.word	0x40023800
 800b410:	40020000 	.word	0x40020000

0800b414 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b082      	sub	sp, #8
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b422:	4618      	mov	r0, r3
 800b424:	f7ff f87f 	bl	800a526 <USBH_LL_IncTimer>
}
 800b428:	bf00      	nop
 800b42a:	3708      	adds	r7, #8
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}

0800b430 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b082      	sub	sp, #8
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b43e:	4618      	mov	r0, r3
 800b440:	f7ff f8b7 	bl	800a5b2 <USBH_LL_Connect>
}
 800b444:	bf00      	nop
 800b446:	3708      	adds	r7, #8
 800b448:	46bd      	mov	sp, r7
 800b44a:	bd80      	pop	{r7, pc}

0800b44c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b082      	sub	sp, #8
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b45a:	4618      	mov	r0, r3
 800b45c:	f7ff f8c0 	bl	800a5e0 <USBH_LL_Disconnect>
}
 800b460:	bf00      	nop
 800b462:	3708      	adds	r7, #8
 800b464:	46bd      	mov	sp, r7
 800b466:	bd80      	pop	{r7, pc}

0800b468 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b468:	b480      	push	{r7}
 800b46a:	b083      	sub	sp, #12
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
 800b470:	460b      	mov	r3, r1
 800b472:	70fb      	strb	r3, [r7, #3]
 800b474:	4613      	mov	r3, r2
 800b476:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b478:	bf00      	nop
 800b47a:	370c      	adds	r7, #12
 800b47c:	46bd      	mov	sp, r7
 800b47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b482:	4770      	bx	lr

0800b484 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b082      	sub	sp, #8
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b492:	4618      	mov	r0, r3
 800b494:	f7ff f871 	bl	800a57a <USBH_LL_PortEnabled>
}
 800b498:	bf00      	nop
 800b49a:	3708      	adds	r7, #8
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bd80      	pop	{r7, pc}

0800b4a0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b082      	sub	sp, #8
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	f7ff f871 	bl	800a596 <USBH_LL_PortDisabled>
}
 800b4b4:	bf00      	nop
 800b4b6:	3708      	adds	r7, #8
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}

0800b4bc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b082      	sub	sp, #8
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b4ca:	2b01      	cmp	r3, #1
 800b4cc:	d12a      	bne.n	800b524 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b4ce:	4a18      	ldr	r2, [pc, #96]	; (800b530 <USBH_LL_Init+0x74>)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	4a15      	ldr	r2, [pc, #84]	; (800b530 <USBH_LL_Init+0x74>)
 800b4da:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b4de:	4b14      	ldr	r3, [pc, #80]	; (800b530 <USBH_LL_Init+0x74>)
 800b4e0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b4e4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b4e6:	4b12      	ldr	r3, [pc, #72]	; (800b530 <USBH_LL_Init+0x74>)
 800b4e8:	2208      	movs	r2, #8
 800b4ea:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b4ec:	4b10      	ldr	r3, [pc, #64]	; (800b530 <USBH_LL_Init+0x74>)
 800b4ee:	2201      	movs	r2, #1
 800b4f0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b4f2:	4b0f      	ldr	r3, [pc, #60]	; (800b530 <USBH_LL_Init+0x74>)
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b4f8:	4b0d      	ldr	r3, [pc, #52]	; (800b530 <USBH_LL_Init+0x74>)
 800b4fa:	2202      	movs	r2, #2
 800b4fc:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b4fe:	4b0c      	ldr	r3, [pc, #48]	; (800b530 <USBH_LL_Init+0x74>)
 800b500:	2200      	movs	r2, #0
 800b502:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b504:	480a      	ldr	r0, [pc, #40]	; (800b530 <USBH_LL_Init+0x74>)
 800b506:	f7f7 fd70 	bl	8002fea <HAL_HCD_Init>
 800b50a:	4603      	mov	r3, r0
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d001      	beq.n	800b514 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b510:	f7f5 fd64 	bl	8000fdc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b514:	4806      	ldr	r0, [pc, #24]	; (800b530 <USBH_LL_Init+0x74>)
 800b516:	f7f8 f954 	bl	80037c2 <HAL_HCD_GetCurrentFrame>
 800b51a:	4603      	mov	r3, r0
 800b51c:	4619      	mov	r1, r3
 800b51e:	6878      	ldr	r0, [r7, #4]
 800b520:	f7fe fff2 	bl	800a508 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b524:	2300      	movs	r3, #0
}
 800b526:	4618      	mov	r0, r3
 800b528:	3708      	adds	r7, #8
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bd80      	pop	{r7, pc}
 800b52e:	bf00      	nop
 800b530:	200037dc 	.word	0x200037dc

0800b534 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b084      	sub	sp, #16
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b53c:	2300      	movs	r3, #0
 800b53e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b540:	2300      	movs	r3, #0
 800b542:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b54a:	4618      	mov	r0, r3
 800b54c:	f7f8 f8c3 	bl	80036d6 <HAL_HCD_Start>
 800b550:	4603      	mov	r3, r0
 800b552:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b554:	7bfb      	ldrb	r3, [r7, #15]
 800b556:	4618      	mov	r0, r3
 800b558:	f000 f98c 	bl	800b874 <USBH_Get_USB_Status>
 800b55c:	4603      	mov	r3, r0
 800b55e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b560:	7bbb      	ldrb	r3, [r7, #14]
}
 800b562:	4618      	mov	r0, r3
 800b564:	3710      	adds	r7, #16
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}

0800b56a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b56a:	b580      	push	{r7, lr}
 800b56c:	b084      	sub	sp, #16
 800b56e:	af00      	add	r7, sp, #0
 800b570:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b572:	2300      	movs	r3, #0
 800b574:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b576:	2300      	movs	r3, #0
 800b578:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b580:	4618      	mov	r0, r3
 800b582:	f7f8 f8cb 	bl	800371c <HAL_HCD_Stop>
 800b586:	4603      	mov	r3, r0
 800b588:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b58a:	7bfb      	ldrb	r3, [r7, #15]
 800b58c:	4618      	mov	r0, r3
 800b58e:	f000 f971 	bl	800b874 <USBH_Get_USB_Status>
 800b592:	4603      	mov	r3, r0
 800b594:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b596:	7bbb      	ldrb	r3, [r7, #14]
}
 800b598:	4618      	mov	r0, r3
 800b59a:	3710      	adds	r7, #16
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bd80      	pop	{r7, pc}

0800b5a0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b084      	sub	sp, #16
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b5a8:	2301      	movs	r3, #1
 800b5aa:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f7f8 f913 	bl	80037de <HAL_HCD_GetCurrentSpeed>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	2b02      	cmp	r3, #2
 800b5bc:	d00c      	beq.n	800b5d8 <USBH_LL_GetSpeed+0x38>
 800b5be:	2b02      	cmp	r3, #2
 800b5c0:	d80d      	bhi.n	800b5de <USBH_LL_GetSpeed+0x3e>
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d002      	beq.n	800b5cc <USBH_LL_GetSpeed+0x2c>
 800b5c6:	2b01      	cmp	r3, #1
 800b5c8:	d003      	beq.n	800b5d2 <USBH_LL_GetSpeed+0x32>
 800b5ca:	e008      	b.n	800b5de <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	73fb      	strb	r3, [r7, #15]
    break;
 800b5d0:	e008      	b.n	800b5e4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b5d2:	2301      	movs	r3, #1
 800b5d4:	73fb      	strb	r3, [r7, #15]
    break;
 800b5d6:	e005      	b.n	800b5e4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b5d8:	2302      	movs	r3, #2
 800b5da:	73fb      	strb	r3, [r7, #15]
    break;
 800b5dc:	e002      	b.n	800b5e4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b5de:	2301      	movs	r3, #1
 800b5e0:	73fb      	strb	r3, [r7, #15]
    break;
 800b5e2:	bf00      	nop
  }
  return  speed;
 800b5e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	3710      	adds	r7, #16
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	bd80      	pop	{r7, pc}

0800b5ee <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b5ee:	b580      	push	{r7, lr}
 800b5f0:	b084      	sub	sp, #16
 800b5f2:	af00      	add	r7, sp, #0
 800b5f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b604:	4618      	mov	r0, r3
 800b606:	f7f8 f8a6 	bl	8003756 <HAL_HCD_ResetPort>
 800b60a:	4603      	mov	r3, r0
 800b60c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b60e:	7bfb      	ldrb	r3, [r7, #15]
 800b610:	4618      	mov	r0, r3
 800b612:	f000 f92f 	bl	800b874 <USBH_Get_USB_Status>
 800b616:	4603      	mov	r3, r0
 800b618:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b61a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	3710      	adds	r7, #16
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}

0800b624 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b082      	sub	sp, #8
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
 800b62c:	460b      	mov	r3, r1
 800b62e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b636:	78fa      	ldrb	r2, [r7, #3]
 800b638:	4611      	mov	r1, r2
 800b63a:	4618      	mov	r0, r3
 800b63c:	f7f8 f8ad 	bl	800379a <HAL_HCD_HC_GetXferCount>
 800b640:	4603      	mov	r3, r0
}
 800b642:	4618      	mov	r0, r3
 800b644:	3708      	adds	r7, #8
 800b646:	46bd      	mov	sp, r7
 800b648:	bd80      	pop	{r7, pc}

0800b64a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b64a:	b590      	push	{r4, r7, lr}
 800b64c:	b089      	sub	sp, #36	; 0x24
 800b64e:	af04      	add	r7, sp, #16
 800b650:	6078      	str	r0, [r7, #4]
 800b652:	4608      	mov	r0, r1
 800b654:	4611      	mov	r1, r2
 800b656:	461a      	mov	r2, r3
 800b658:	4603      	mov	r3, r0
 800b65a:	70fb      	strb	r3, [r7, #3]
 800b65c:	460b      	mov	r3, r1
 800b65e:	70bb      	strb	r3, [r7, #2]
 800b660:	4613      	mov	r3, r2
 800b662:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b664:	2300      	movs	r3, #0
 800b666:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b668:	2300      	movs	r3, #0
 800b66a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b672:	787c      	ldrb	r4, [r7, #1]
 800b674:	78ba      	ldrb	r2, [r7, #2]
 800b676:	78f9      	ldrb	r1, [r7, #3]
 800b678:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b67a:	9302      	str	r3, [sp, #8]
 800b67c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b680:	9301      	str	r3, [sp, #4]
 800b682:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b686:	9300      	str	r3, [sp, #0]
 800b688:	4623      	mov	r3, r4
 800b68a:	f7f7 fd10 	bl	80030ae <HAL_HCD_HC_Init>
 800b68e:	4603      	mov	r3, r0
 800b690:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b692:	7bfb      	ldrb	r3, [r7, #15]
 800b694:	4618      	mov	r0, r3
 800b696:	f000 f8ed 	bl	800b874 <USBH_Get_USB_Status>
 800b69a:	4603      	mov	r3, r0
 800b69c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b69e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	3714      	adds	r7, #20
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bd90      	pop	{r4, r7, pc}

0800b6a8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b084      	sub	sp, #16
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
 800b6b0:	460b      	mov	r3, r1
 800b6b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b6c2:	78fa      	ldrb	r2, [r7, #3]
 800b6c4:	4611      	mov	r1, r2
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	f7f7 fd80 	bl	80031cc <HAL_HCD_HC_Halt>
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b6d0:	7bfb      	ldrb	r3, [r7, #15]
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f000 f8ce 	bl	800b874 <USBH_Get_USB_Status>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b6dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800b6de:	4618      	mov	r0, r3
 800b6e0:	3710      	adds	r7, #16
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}

0800b6e6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b6e6:	b590      	push	{r4, r7, lr}
 800b6e8:	b089      	sub	sp, #36	; 0x24
 800b6ea:	af04      	add	r7, sp, #16
 800b6ec:	6078      	str	r0, [r7, #4]
 800b6ee:	4608      	mov	r0, r1
 800b6f0:	4611      	mov	r1, r2
 800b6f2:	461a      	mov	r2, r3
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	70fb      	strb	r3, [r7, #3]
 800b6f8:	460b      	mov	r3, r1
 800b6fa:	70bb      	strb	r3, [r7, #2]
 800b6fc:	4613      	mov	r3, r2
 800b6fe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b700:	2300      	movs	r3, #0
 800b702:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b704:	2300      	movs	r3, #0
 800b706:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b70e:	787c      	ldrb	r4, [r7, #1]
 800b710:	78ba      	ldrb	r2, [r7, #2]
 800b712:	78f9      	ldrb	r1, [r7, #3]
 800b714:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b718:	9303      	str	r3, [sp, #12]
 800b71a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b71c:	9302      	str	r3, [sp, #8]
 800b71e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b720:	9301      	str	r3, [sp, #4]
 800b722:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b726:	9300      	str	r3, [sp, #0]
 800b728:	4623      	mov	r3, r4
 800b72a:	f7f7 fd73 	bl	8003214 <HAL_HCD_HC_SubmitRequest>
 800b72e:	4603      	mov	r3, r0
 800b730:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b732:	7bfb      	ldrb	r3, [r7, #15]
 800b734:	4618      	mov	r0, r3
 800b736:	f000 f89d 	bl	800b874 <USBH_Get_USB_Status>
 800b73a:	4603      	mov	r3, r0
 800b73c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b73e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b740:	4618      	mov	r0, r3
 800b742:	3714      	adds	r7, #20
 800b744:	46bd      	mov	sp, r7
 800b746:	bd90      	pop	{r4, r7, pc}

0800b748 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b082      	sub	sp, #8
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
 800b750:	460b      	mov	r3, r1
 800b752:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b75a:	78fa      	ldrb	r2, [r7, #3]
 800b75c:	4611      	mov	r1, r2
 800b75e:	4618      	mov	r0, r3
 800b760:	f7f8 f807 	bl	8003772 <HAL_HCD_HC_GetURBState>
 800b764:	4603      	mov	r3, r0
}
 800b766:	4618      	mov	r0, r3
 800b768:	3708      	adds	r7, #8
 800b76a:	46bd      	mov	sp, r7
 800b76c:	bd80      	pop	{r7, pc}

0800b76e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b76e:	b580      	push	{r7, lr}
 800b770:	b082      	sub	sp, #8
 800b772:	af00      	add	r7, sp, #0
 800b774:	6078      	str	r0, [r7, #4]
 800b776:	460b      	mov	r3, r1
 800b778:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b780:	2b01      	cmp	r3, #1
 800b782:	d103      	bne.n	800b78c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b784:	78fb      	ldrb	r3, [r7, #3]
 800b786:	4618      	mov	r0, r3
 800b788:	f000 f8a0 	bl	800b8cc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b78c:	20c8      	movs	r0, #200	; 0xc8
 800b78e:	f7f6 fd49 	bl	8002224 <HAL_Delay>
  return USBH_OK;
 800b792:	2300      	movs	r3, #0
}
 800b794:	4618      	mov	r0, r3
 800b796:	3708      	adds	r7, #8
 800b798:	46bd      	mov	sp, r7
 800b79a:	bd80      	pop	{r7, pc}

0800b79c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b79c:	b480      	push	{r7}
 800b79e:	b085      	sub	sp, #20
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
 800b7a4:	460b      	mov	r3, r1
 800b7a6:	70fb      	strb	r3, [r7, #3]
 800b7a8:	4613      	mov	r3, r2
 800b7aa:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b7b2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b7b4:	78fb      	ldrb	r3, [r7, #3]
 800b7b6:	68fa      	ldr	r2, [r7, #12]
 800b7b8:	212c      	movs	r1, #44	; 0x2c
 800b7ba:	fb01 f303 	mul.w	r3, r1, r3
 800b7be:	4413      	add	r3, r2
 800b7c0:	333b      	adds	r3, #59	; 0x3b
 800b7c2:	781b      	ldrb	r3, [r3, #0]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d009      	beq.n	800b7dc <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b7c8:	78fb      	ldrb	r3, [r7, #3]
 800b7ca:	68fa      	ldr	r2, [r7, #12]
 800b7cc:	212c      	movs	r1, #44	; 0x2c
 800b7ce:	fb01 f303 	mul.w	r3, r1, r3
 800b7d2:	4413      	add	r3, r2
 800b7d4:	3354      	adds	r3, #84	; 0x54
 800b7d6:	78ba      	ldrb	r2, [r7, #2]
 800b7d8:	701a      	strb	r2, [r3, #0]
 800b7da:	e008      	b.n	800b7ee <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b7dc:	78fb      	ldrb	r3, [r7, #3]
 800b7de:	68fa      	ldr	r2, [r7, #12]
 800b7e0:	212c      	movs	r1, #44	; 0x2c
 800b7e2:	fb01 f303 	mul.w	r3, r1, r3
 800b7e6:	4413      	add	r3, r2
 800b7e8:	3355      	adds	r3, #85	; 0x55
 800b7ea:	78ba      	ldrb	r2, [r7, #2]
 800b7ec:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b7ee:	2300      	movs	r3, #0
}
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	3714      	adds	r7, #20
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fa:	4770      	bx	lr

0800b7fc <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b7fc:	b480      	push	{r7}
 800b7fe:	b085      	sub	sp, #20
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
 800b804:	460b      	mov	r3, r1
 800b806:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800b808:	2300      	movs	r3, #0
 800b80a:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b812:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800b814:	78fb      	ldrb	r3, [r7, #3]
 800b816:	68ba      	ldr	r2, [r7, #8]
 800b818:	212c      	movs	r1, #44	; 0x2c
 800b81a:	fb01 f303 	mul.w	r3, r1, r3
 800b81e:	4413      	add	r3, r2
 800b820:	333b      	adds	r3, #59	; 0x3b
 800b822:	781b      	ldrb	r3, [r3, #0]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d009      	beq.n	800b83c <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800b828:	78fb      	ldrb	r3, [r7, #3]
 800b82a:	68ba      	ldr	r2, [r7, #8]
 800b82c:	212c      	movs	r1, #44	; 0x2c
 800b82e:	fb01 f303 	mul.w	r3, r1, r3
 800b832:	4413      	add	r3, r2
 800b834:	3354      	adds	r3, #84	; 0x54
 800b836:	781b      	ldrb	r3, [r3, #0]
 800b838:	73fb      	strb	r3, [r7, #15]
 800b83a:	e008      	b.n	800b84e <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800b83c:	78fb      	ldrb	r3, [r7, #3]
 800b83e:	68ba      	ldr	r2, [r7, #8]
 800b840:	212c      	movs	r1, #44	; 0x2c
 800b842:	fb01 f303 	mul.w	r3, r1, r3
 800b846:	4413      	add	r3, r2
 800b848:	3355      	adds	r3, #85	; 0x55
 800b84a:	781b      	ldrb	r3, [r3, #0]
 800b84c:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800b84e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b850:	4618      	mov	r0, r3
 800b852:	3714      	adds	r7, #20
 800b854:	46bd      	mov	sp, r7
 800b856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85a:	4770      	bx	lr

0800b85c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b082      	sub	sp, #8
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b864:	6878      	ldr	r0, [r7, #4]
 800b866:	f7f6 fcdd 	bl	8002224 <HAL_Delay>
}
 800b86a:	bf00      	nop
 800b86c:	3708      	adds	r7, #8
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}
	...

0800b874 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b874:	b480      	push	{r7}
 800b876:	b085      	sub	sp, #20
 800b878:	af00      	add	r7, sp, #0
 800b87a:	4603      	mov	r3, r0
 800b87c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b87e:	2300      	movs	r3, #0
 800b880:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b882:	79fb      	ldrb	r3, [r7, #7]
 800b884:	2b03      	cmp	r3, #3
 800b886:	d817      	bhi.n	800b8b8 <USBH_Get_USB_Status+0x44>
 800b888:	a201      	add	r2, pc, #4	; (adr r2, 800b890 <USBH_Get_USB_Status+0x1c>)
 800b88a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b88e:	bf00      	nop
 800b890:	0800b8a1 	.word	0x0800b8a1
 800b894:	0800b8a7 	.word	0x0800b8a7
 800b898:	0800b8ad 	.word	0x0800b8ad
 800b89c:	0800b8b3 	.word	0x0800b8b3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	73fb      	strb	r3, [r7, #15]
    break;
 800b8a4:	e00b      	b.n	800b8be <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b8a6:	2302      	movs	r3, #2
 800b8a8:	73fb      	strb	r3, [r7, #15]
    break;
 800b8aa:	e008      	b.n	800b8be <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b8ac:	2301      	movs	r3, #1
 800b8ae:	73fb      	strb	r3, [r7, #15]
    break;
 800b8b0:	e005      	b.n	800b8be <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b8b2:	2302      	movs	r3, #2
 800b8b4:	73fb      	strb	r3, [r7, #15]
    break;
 800b8b6:	e002      	b.n	800b8be <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b8b8:	2302      	movs	r3, #2
 800b8ba:	73fb      	strb	r3, [r7, #15]
    break;
 800b8bc:	bf00      	nop
  }
  return usb_status;
 800b8be:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	3714      	adds	r7, #20
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ca:	4770      	bx	lr

0800b8cc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b084      	sub	sp, #16
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b8d6:	79fb      	ldrb	r3, [r7, #7]
 800b8d8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b8da:	79fb      	ldrb	r3, [r7, #7]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d102      	bne.n	800b8e6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	73fb      	strb	r3, [r7, #15]
 800b8e4:	e001      	b.n	800b8ea <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800b8e6:	2301      	movs	r3, #1
 800b8e8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b8ea:	7bfb      	ldrb	r3, [r7, #15]
 800b8ec:	461a      	mov	r2, r3
 800b8ee:	2101      	movs	r1, #1
 800b8f0:	4803      	ldr	r0, [pc, #12]	; (800b900 <MX_DriverVbusFS+0x34>)
 800b8f2:	f7f7 fb61 	bl	8002fb8 <HAL_GPIO_WritePin>
}
 800b8f6:	bf00      	nop
 800b8f8:	3710      	adds	r7, #16
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}
 800b8fe:	bf00      	nop
 800b900:	40020800 	.word	0x40020800

0800b904 <__errno>:
 800b904:	4b01      	ldr	r3, [pc, #4]	; (800b90c <__errno+0x8>)
 800b906:	6818      	ldr	r0, [r3, #0]
 800b908:	4770      	bx	lr
 800b90a:	bf00      	nop
 800b90c:	2000002c 	.word	0x2000002c

0800b910 <__libc_init_array>:
 800b910:	b570      	push	{r4, r5, r6, lr}
 800b912:	4d0d      	ldr	r5, [pc, #52]	; (800b948 <__libc_init_array+0x38>)
 800b914:	4c0d      	ldr	r4, [pc, #52]	; (800b94c <__libc_init_array+0x3c>)
 800b916:	1b64      	subs	r4, r4, r5
 800b918:	10a4      	asrs	r4, r4, #2
 800b91a:	2600      	movs	r6, #0
 800b91c:	42a6      	cmp	r6, r4
 800b91e:	d109      	bne.n	800b934 <__libc_init_array+0x24>
 800b920:	4d0b      	ldr	r5, [pc, #44]	; (800b950 <__libc_init_array+0x40>)
 800b922:	4c0c      	ldr	r4, [pc, #48]	; (800b954 <__libc_init_array+0x44>)
 800b924:	f000 f906 	bl	800bb34 <_init>
 800b928:	1b64      	subs	r4, r4, r5
 800b92a:	10a4      	asrs	r4, r4, #2
 800b92c:	2600      	movs	r6, #0
 800b92e:	42a6      	cmp	r6, r4
 800b930:	d105      	bne.n	800b93e <__libc_init_array+0x2e>
 800b932:	bd70      	pop	{r4, r5, r6, pc}
 800b934:	f855 3b04 	ldr.w	r3, [r5], #4
 800b938:	4798      	blx	r3
 800b93a:	3601      	adds	r6, #1
 800b93c:	e7ee      	b.n	800b91c <__libc_init_array+0xc>
 800b93e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b942:	4798      	blx	r3
 800b944:	3601      	adds	r6, #1
 800b946:	e7f2      	b.n	800b92e <__libc_init_array+0x1e>
 800b948:	0800be9c 	.word	0x0800be9c
 800b94c:	0800be9c 	.word	0x0800be9c
 800b950:	0800be9c 	.word	0x0800be9c
 800b954:	0800bea0 	.word	0x0800bea0

0800b958 <malloc>:
 800b958:	4b02      	ldr	r3, [pc, #8]	; (800b964 <malloc+0xc>)
 800b95a:	4601      	mov	r1, r0
 800b95c:	6818      	ldr	r0, [r3, #0]
 800b95e:	f000 b871 	b.w	800ba44 <_malloc_r>
 800b962:	bf00      	nop
 800b964:	2000002c 	.word	0x2000002c

0800b968 <free>:
 800b968:	4b02      	ldr	r3, [pc, #8]	; (800b974 <free+0xc>)
 800b96a:	4601      	mov	r1, r0
 800b96c:	6818      	ldr	r0, [r3, #0]
 800b96e:	f000 b819 	b.w	800b9a4 <_free_r>
 800b972:	bf00      	nop
 800b974:	2000002c 	.word	0x2000002c

0800b978 <memcpy>:
 800b978:	440a      	add	r2, r1
 800b97a:	4291      	cmp	r1, r2
 800b97c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b980:	d100      	bne.n	800b984 <memcpy+0xc>
 800b982:	4770      	bx	lr
 800b984:	b510      	push	{r4, lr}
 800b986:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b98a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b98e:	4291      	cmp	r1, r2
 800b990:	d1f9      	bne.n	800b986 <memcpy+0xe>
 800b992:	bd10      	pop	{r4, pc}

0800b994 <memset>:
 800b994:	4402      	add	r2, r0
 800b996:	4603      	mov	r3, r0
 800b998:	4293      	cmp	r3, r2
 800b99a:	d100      	bne.n	800b99e <memset+0xa>
 800b99c:	4770      	bx	lr
 800b99e:	f803 1b01 	strb.w	r1, [r3], #1
 800b9a2:	e7f9      	b.n	800b998 <memset+0x4>

0800b9a4 <_free_r>:
 800b9a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b9a6:	2900      	cmp	r1, #0
 800b9a8:	d048      	beq.n	800ba3c <_free_r+0x98>
 800b9aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9ae:	9001      	str	r0, [sp, #4]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	f1a1 0404 	sub.w	r4, r1, #4
 800b9b6:	bfb8      	it	lt
 800b9b8:	18e4      	addlt	r4, r4, r3
 800b9ba:	f000 f8ad 	bl	800bb18 <__malloc_lock>
 800b9be:	4a20      	ldr	r2, [pc, #128]	; (800ba40 <_free_r+0x9c>)
 800b9c0:	9801      	ldr	r0, [sp, #4]
 800b9c2:	6813      	ldr	r3, [r2, #0]
 800b9c4:	4615      	mov	r5, r2
 800b9c6:	b933      	cbnz	r3, 800b9d6 <_free_r+0x32>
 800b9c8:	6063      	str	r3, [r4, #4]
 800b9ca:	6014      	str	r4, [r2, #0]
 800b9cc:	b003      	add	sp, #12
 800b9ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b9d2:	f000 b8a7 	b.w	800bb24 <__malloc_unlock>
 800b9d6:	42a3      	cmp	r3, r4
 800b9d8:	d90b      	bls.n	800b9f2 <_free_r+0x4e>
 800b9da:	6821      	ldr	r1, [r4, #0]
 800b9dc:	1862      	adds	r2, r4, r1
 800b9de:	4293      	cmp	r3, r2
 800b9e0:	bf04      	itt	eq
 800b9e2:	681a      	ldreq	r2, [r3, #0]
 800b9e4:	685b      	ldreq	r3, [r3, #4]
 800b9e6:	6063      	str	r3, [r4, #4]
 800b9e8:	bf04      	itt	eq
 800b9ea:	1852      	addeq	r2, r2, r1
 800b9ec:	6022      	streq	r2, [r4, #0]
 800b9ee:	602c      	str	r4, [r5, #0]
 800b9f0:	e7ec      	b.n	800b9cc <_free_r+0x28>
 800b9f2:	461a      	mov	r2, r3
 800b9f4:	685b      	ldr	r3, [r3, #4]
 800b9f6:	b10b      	cbz	r3, 800b9fc <_free_r+0x58>
 800b9f8:	42a3      	cmp	r3, r4
 800b9fa:	d9fa      	bls.n	800b9f2 <_free_r+0x4e>
 800b9fc:	6811      	ldr	r1, [r2, #0]
 800b9fe:	1855      	adds	r5, r2, r1
 800ba00:	42a5      	cmp	r5, r4
 800ba02:	d10b      	bne.n	800ba1c <_free_r+0x78>
 800ba04:	6824      	ldr	r4, [r4, #0]
 800ba06:	4421      	add	r1, r4
 800ba08:	1854      	adds	r4, r2, r1
 800ba0a:	42a3      	cmp	r3, r4
 800ba0c:	6011      	str	r1, [r2, #0]
 800ba0e:	d1dd      	bne.n	800b9cc <_free_r+0x28>
 800ba10:	681c      	ldr	r4, [r3, #0]
 800ba12:	685b      	ldr	r3, [r3, #4]
 800ba14:	6053      	str	r3, [r2, #4]
 800ba16:	4421      	add	r1, r4
 800ba18:	6011      	str	r1, [r2, #0]
 800ba1a:	e7d7      	b.n	800b9cc <_free_r+0x28>
 800ba1c:	d902      	bls.n	800ba24 <_free_r+0x80>
 800ba1e:	230c      	movs	r3, #12
 800ba20:	6003      	str	r3, [r0, #0]
 800ba22:	e7d3      	b.n	800b9cc <_free_r+0x28>
 800ba24:	6825      	ldr	r5, [r4, #0]
 800ba26:	1961      	adds	r1, r4, r5
 800ba28:	428b      	cmp	r3, r1
 800ba2a:	bf04      	itt	eq
 800ba2c:	6819      	ldreq	r1, [r3, #0]
 800ba2e:	685b      	ldreq	r3, [r3, #4]
 800ba30:	6063      	str	r3, [r4, #4]
 800ba32:	bf04      	itt	eq
 800ba34:	1949      	addeq	r1, r1, r5
 800ba36:	6021      	streq	r1, [r4, #0]
 800ba38:	6054      	str	r4, [r2, #4]
 800ba3a:	e7c7      	b.n	800b9cc <_free_r+0x28>
 800ba3c:	b003      	add	sp, #12
 800ba3e:	bd30      	pop	{r4, r5, pc}
 800ba40:	20000118 	.word	0x20000118

0800ba44 <_malloc_r>:
 800ba44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba46:	1ccd      	adds	r5, r1, #3
 800ba48:	f025 0503 	bic.w	r5, r5, #3
 800ba4c:	3508      	adds	r5, #8
 800ba4e:	2d0c      	cmp	r5, #12
 800ba50:	bf38      	it	cc
 800ba52:	250c      	movcc	r5, #12
 800ba54:	2d00      	cmp	r5, #0
 800ba56:	4606      	mov	r6, r0
 800ba58:	db01      	blt.n	800ba5e <_malloc_r+0x1a>
 800ba5a:	42a9      	cmp	r1, r5
 800ba5c:	d903      	bls.n	800ba66 <_malloc_r+0x22>
 800ba5e:	230c      	movs	r3, #12
 800ba60:	6033      	str	r3, [r6, #0]
 800ba62:	2000      	movs	r0, #0
 800ba64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba66:	f000 f857 	bl	800bb18 <__malloc_lock>
 800ba6a:	4921      	ldr	r1, [pc, #132]	; (800baf0 <_malloc_r+0xac>)
 800ba6c:	680a      	ldr	r2, [r1, #0]
 800ba6e:	4614      	mov	r4, r2
 800ba70:	b99c      	cbnz	r4, 800ba9a <_malloc_r+0x56>
 800ba72:	4f20      	ldr	r7, [pc, #128]	; (800baf4 <_malloc_r+0xb0>)
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	b923      	cbnz	r3, 800ba82 <_malloc_r+0x3e>
 800ba78:	4621      	mov	r1, r4
 800ba7a:	4630      	mov	r0, r6
 800ba7c:	f000 f83c 	bl	800baf8 <_sbrk_r>
 800ba80:	6038      	str	r0, [r7, #0]
 800ba82:	4629      	mov	r1, r5
 800ba84:	4630      	mov	r0, r6
 800ba86:	f000 f837 	bl	800baf8 <_sbrk_r>
 800ba8a:	1c43      	adds	r3, r0, #1
 800ba8c:	d123      	bne.n	800bad6 <_malloc_r+0x92>
 800ba8e:	230c      	movs	r3, #12
 800ba90:	6033      	str	r3, [r6, #0]
 800ba92:	4630      	mov	r0, r6
 800ba94:	f000 f846 	bl	800bb24 <__malloc_unlock>
 800ba98:	e7e3      	b.n	800ba62 <_malloc_r+0x1e>
 800ba9a:	6823      	ldr	r3, [r4, #0]
 800ba9c:	1b5b      	subs	r3, r3, r5
 800ba9e:	d417      	bmi.n	800bad0 <_malloc_r+0x8c>
 800baa0:	2b0b      	cmp	r3, #11
 800baa2:	d903      	bls.n	800baac <_malloc_r+0x68>
 800baa4:	6023      	str	r3, [r4, #0]
 800baa6:	441c      	add	r4, r3
 800baa8:	6025      	str	r5, [r4, #0]
 800baaa:	e004      	b.n	800bab6 <_malloc_r+0x72>
 800baac:	6863      	ldr	r3, [r4, #4]
 800baae:	42a2      	cmp	r2, r4
 800bab0:	bf0c      	ite	eq
 800bab2:	600b      	streq	r3, [r1, #0]
 800bab4:	6053      	strne	r3, [r2, #4]
 800bab6:	4630      	mov	r0, r6
 800bab8:	f000 f834 	bl	800bb24 <__malloc_unlock>
 800babc:	f104 000b 	add.w	r0, r4, #11
 800bac0:	1d23      	adds	r3, r4, #4
 800bac2:	f020 0007 	bic.w	r0, r0, #7
 800bac6:	1ac2      	subs	r2, r0, r3
 800bac8:	d0cc      	beq.n	800ba64 <_malloc_r+0x20>
 800baca:	1a1b      	subs	r3, r3, r0
 800bacc:	50a3      	str	r3, [r4, r2]
 800bace:	e7c9      	b.n	800ba64 <_malloc_r+0x20>
 800bad0:	4622      	mov	r2, r4
 800bad2:	6864      	ldr	r4, [r4, #4]
 800bad4:	e7cc      	b.n	800ba70 <_malloc_r+0x2c>
 800bad6:	1cc4      	adds	r4, r0, #3
 800bad8:	f024 0403 	bic.w	r4, r4, #3
 800badc:	42a0      	cmp	r0, r4
 800bade:	d0e3      	beq.n	800baa8 <_malloc_r+0x64>
 800bae0:	1a21      	subs	r1, r4, r0
 800bae2:	4630      	mov	r0, r6
 800bae4:	f000 f808 	bl	800baf8 <_sbrk_r>
 800bae8:	3001      	adds	r0, #1
 800baea:	d1dd      	bne.n	800baa8 <_malloc_r+0x64>
 800baec:	e7cf      	b.n	800ba8e <_malloc_r+0x4a>
 800baee:	bf00      	nop
 800baf0:	20000118 	.word	0x20000118
 800baf4:	2000011c 	.word	0x2000011c

0800baf8 <_sbrk_r>:
 800baf8:	b538      	push	{r3, r4, r5, lr}
 800bafa:	4d06      	ldr	r5, [pc, #24]	; (800bb14 <_sbrk_r+0x1c>)
 800bafc:	2300      	movs	r3, #0
 800bafe:	4604      	mov	r4, r0
 800bb00:	4608      	mov	r0, r1
 800bb02:	602b      	str	r3, [r5, #0]
 800bb04:	f7f6 faaa 	bl	800205c <_sbrk>
 800bb08:	1c43      	adds	r3, r0, #1
 800bb0a:	d102      	bne.n	800bb12 <_sbrk_r+0x1a>
 800bb0c:	682b      	ldr	r3, [r5, #0]
 800bb0e:	b103      	cbz	r3, 800bb12 <_sbrk_r+0x1a>
 800bb10:	6023      	str	r3, [r4, #0]
 800bb12:	bd38      	pop	{r3, r4, r5, pc}
 800bb14:	20003ae0 	.word	0x20003ae0

0800bb18 <__malloc_lock>:
 800bb18:	4801      	ldr	r0, [pc, #4]	; (800bb20 <__malloc_lock+0x8>)
 800bb1a:	f000 b809 	b.w	800bb30 <__retarget_lock_acquire_recursive>
 800bb1e:	bf00      	nop
 800bb20:	20003ae8 	.word	0x20003ae8

0800bb24 <__malloc_unlock>:
 800bb24:	4801      	ldr	r0, [pc, #4]	; (800bb2c <__malloc_unlock+0x8>)
 800bb26:	f000 b804 	b.w	800bb32 <__retarget_lock_release_recursive>
 800bb2a:	bf00      	nop
 800bb2c:	20003ae8 	.word	0x20003ae8

0800bb30 <__retarget_lock_acquire_recursive>:
 800bb30:	4770      	bx	lr

0800bb32 <__retarget_lock_release_recursive>:
 800bb32:	4770      	bx	lr

0800bb34 <_init>:
 800bb34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb36:	bf00      	nop
 800bb38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb3a:	bc08      	pop	{r3}
 800bb3c:	469e      	mov	lr, r3
 800bb3e:	4770      	bx	lr

0800bb40 <_fini>:
 800bb40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb42:	bf00      	nop
 800bb44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb46:	bc08      	pop	{r3}
 800bb48:	469e      	mov	lr, r3
 800bb4a:	4770      	bx	lr
