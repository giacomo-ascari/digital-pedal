
mcu-test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b608  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000348  0800b790  0800b790  0001b790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bad8  0800bad8  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800bad8  0800bad8  0001bad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bae0  0800bae0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bae0  0800bae0  0001bae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bae4  0800bae4  0001bae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800bae8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00003a68  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20003af8  20003af8  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00024b0e  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004f73  00000000  00000000  00044bce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001240  00000000  00000000  00049b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001070  00000000  00000000  0004ad88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026272  00000000  00000000  0004bdf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b2bc  00000000  00000000  0007206a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb46a  00000000  00000000  0008d326  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00158790  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004b98  00000000  00000000  001587e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800b778 	.word	0x0800b778

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	0800b778 	.word	0x0800b778

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <write_register>:

//(1): Functions definitions
//-------------- Static Functions ---------------//
// Function(1): Write to register
static void write_register(uint8_t reg, uint8_t *data)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af02      	add	r7, sp, #8
 80004c6:	4603      	mov	r3, r0
 80004c8:	6039      	str	r1, [r7, #0]
 80004ca:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 80004cc:	4a09      	ldr	r2, [pc, #36]	; (80004f4 <write_register+0x34>)
 80004ce:	79fb      	ldrb	r3, [r7, #7]
 80004d0:	7013      	strb	r3, [r2, #0]
	iData[1] = data[0];
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	781a      	ldrb	r2, [r3, #0]
 80004d6:	4b07      	ldr	r3, [pc, #28]	; (80004f4 <write_register+0x34>)
 80004d8:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100);
 80004da:	2364      	movs	r3, #100	; 0x64
 80004dc:	9300      	str	r3, [sp, #0]
 80004de:	2302      	movs	r3, #2
 80004e0:	4a04      	ldr	r2, [pc, #16]	; (80004f4 <write_register+0x34>)
 80004e2:	2194      	movs	r1, #148	; 0x94
 80004e4:	4804      	ldr	r0, [pc, #16]	; (80004f8 <write_register+0x38>)
 80004e6:	f004 fb43 	bl	8004b70 <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, data, size, 100);
}
 80004ea:	bf00      	nop
 80004ec:	3708      	adds	r7, #8
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	200000ac 	.word	0x200000ac
 80004f8:	200000b0 	.word	0x200000b0

080004fc <read_register>:
// Function(2): Read from register
static void read_register(uint8_t reg, uint8_t *data)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af02      	add	r7, sp, #8
 8000502:	4603      	mov	r3, r0
 8000504:	6039      	str	r1, [r7, #0]
 8000506:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 8000508:	4a0b      	ldr	r2, [pc, #44]	; (8000538 <read_register+0x3c>)
 800050a:	79fb      	ldrb	r3, [r7, #7]
 800050c:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100);
 800050e:	2364      	movs	r3, #100	; 0x64
 8000510:	9300      	str	r3, [sp, #0]
 8000512:	2301      	movs	r3, #1
 8000514:	4a08      	ldr	r2, [pc, #32]	; (8000538 <read_register+0x3c>)
 8000516:	2194      	movs	r1, #148	; 0x94
 8000518:	4808      	ldr	r0, [pc, #32]	; (800053c <read_register+0x40>)
 800051a:	f004 fb29 	bl	8004b70 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100);
 800051e:	2364      	movs	r3, #100	; 0x64
 8000520:	9300      	str	r3, [sp, #0]
 8000522:	2301      	movs	r3, #1
 8000524:	683a      	ldr	r2, [r7, #0]
 8000526:	2194      	movs	r1, #148	; 0x94
 8000528:	4804      	ldr	r0, [pc, #16]	; (800053c <read_register+0x40>)
 800052a:	f004 fc1f 	bl	8004d6c <HAL_I2C_Master_Receive>
}
 800052e:	bf00      	nop
 8000530:	3708      	adds	r7, #8
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	200000ac 	.word	0x200000ac
 800053c:	200000b0 	.word	0x200000b0

08000540 <CS43_Init>:

//-------------- Public Functions ----------------//
// Function(1): Initialisation
void CS43_Init(I2C_HandleTypeDef i2c_handle, CS43_MODE outputMode)
{
 8000540:	b084      	sub	sp, #16
 8000542:	b580      	push	{r7, lr}
 8000544:	af00      	add	r7, sp, #0
 8000546:	f107 0c08 	add.w	ip, r7, #8
 800054a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 800054e:	4b81      	ldr	r3, [pc, #516]	; (8000754 <CS43_Init+0x214>)
 8000550:	2200      	movs	r2, #0
 8000552:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000556:	4b7f      	ldr	r3, [pc, #508]	; (8000754 <CS43_Init+0x214>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	69da      	ldr	r2, [r3, #28]
 800055c:	4b7d      	ldr	r3, [pc, #500]	; (8000754 <CS43_Init+0x214>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000564:	61da      	str	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8000566:	2201      	movs	r2, #1
 8000568:	2110      	movs	r1, #16
 800056a:	487b      	ldr	r0, [pc, #492]	; (8000758 <CS43_Init+0x218>)
 800056c:	f002 fc32 	bl	8002dd4 <HAL_GPIO_WritePin>
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 8000570:	4b7a      	ldr	r3, [pc, #488]	; (800075c <CS43_Init+0x21c>)
 8000572:	4618      	mov	r0, r3
 8000574:	f107 0308 	add.w	r3, r7, #8
 8000578:	2254      	movs	r2, #84	; 0x54
 800057a:	4619      	mov	r1, r3
 800057c:	f00b f81e 	bl	800b5bc <memcpy>
	//(2): Power down
	iData[1] = 0x01;
 8000580:	4b77      	ldr	r3, [pc, #476]	; (8000760 <CS43_Init+0x220>)
 8000582:	2201      	movs	r2, #1
 8000584:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,iData);
 8000586:	4976      	ldr	r1, [pc, #472]	; (8000760 <CS43_Init+0x220>)
 8000588:	2002      	movs	r0, #2
 800058a:	f7ff ff99 	bl	80004c0 <write_register>
	//(3): Enable Right and Left headphones
	iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 800058e:	4b74      	ldr	r3, [pc, #464]	; (8000760 <CS43_Init+0x220>)
 8000590:	2280      	movs	r2, #128	; 0x80
 8000592:	705a      	strb	r2, [r3, #1]
	iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000594:	4b72      	ldr	r3, [pc, #456]	; (8000760 <CS43_Init+0x220>)
 8000596:	785b      	ldrb	r3, [r3, #1]
 8000598:	f043 0320 	orr.w	r3, r3, #32
 800059c:	b2da      	uxtb	r2, r3
 800059e:	4b70      	ldr	r3, [pc, #448]	; (8000760 <CS43_Init+0x220>)
 80005a0:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 80005a2:	4b6f      	ldr	r3, [pc, #444]	; (8000760 <CS43_Init+0x220>)
 80005a4:	785b      	ldrb	r3, [r3, #1]
 80005a6:	f043 030c 	orr.w	r3, r3, #12
 80005aa:	b2da      	uxtb	r2, r3
 80005ac:	4b6c      	ldr	r3, [pc, #432]	; (8000760 <CS43_Init+0x220>)
 80005ae:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80005b0:	4b6b      	ldr	r3, [pc, #428]	; (8000760 <CS43_Init+0x220>)
 80005b2:	785b      	ldrb	r3, [r3, #1]
 80005b4:	f043 0303 	orr.w	r3, r3, #3
 80005b8:	b2da      	uxtb	r2, r3
 80005ba:	4b69      	ldr	r3, [pc, #420]	; (8000760 <CS43_Init+0x220>)
 80005bc:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 80005be:	4969      	ldr	r1, [pc, #420]	; (8000764 <CS43_Init+0x224>)
 80005c0:	2004      	movs	r0, #4
 80005c2:	f7ff ff7d 	bl	80004c0 <write_register>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
 80005c6:	4b66      	ldr	r3, [pc, #408]	; (8000760 <CS43_Init+0x220>)
 80005c8:	2280      	movs	r2, #128	; 0x80
 80005ca:	705a      	strb	r2, [r3, #1]
	write_register(CLOCKING_CONTROL,&iData[1]);
 80005cc:	4965      	ldr	r1, [pc, #404]	; (8000764 <CS43_Init+0x224>)
 80005ce:	2005      	movs	r0, #5
 80005d0:	f7ff ff76 	bl	80004c0 <write_register>
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
 80005d4:	4962      	ldr	r1, [pc, #392]	; (8000760 <CS43_Init+0x220>)
 80005d6:	2006      	movs	r0, #6
 80005d8:	f7ff ff90 	bl	80004fc <read_register>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 80005dc:	4b60      	ldr	r3, [pc, #384]	; (8000760 <CS43_Init+0x220>)
 80005de:	785b      	ldrb	r3, [r3, #1]
 80005e0:	f003 0320 	and.w	r3, r3, #32
 80005e4:	b2da      	uxtb	r2, r3
 80005e6:	4b5e      	ldr	r3, [pc, #376]	; (8000760 <CS43_Init+0x220>)
 80005e8:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 7);  // Slave
 80005ea:	4b5d      	ldr	r3, [pc, #372]	; (8000760 <CS43_Init+0x220>)
 80005ec:	785b      	ldrb	r3, [r3, #1]
 80005ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80005f2:	b2da      	uxtb	r2, r3
 80005f4:	4b5a      	ldr	r3, [pc, #360]	; (8000760 <CS43_Init+0x220>)
 80005f6:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
 80005f8:	4b59      	ldr	r3, [pc, #356]	; (8000760 <CS43_Init+0x220>)
 80005fa:	785b      	ldrb	r3, [r3, #1]
 80005fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000600:	b2da      	uxtb	r2, r3
 8000602:	4b57      	ldr	r3, [pc, #348]	; (8000760 <CS43_Init+0x220>)
 8000604:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 4);  // No DSP mode
 8000606:	4b56      	ldr	r3, [pc, #344]	; (8000760 <CS43_Init+0x220>)
 8000608:	785b      	ldrb	r3, [r3, #1]
 800060a:	f023 0310 	bic.w	r3, r3, #16
 800060e:	b2da      	uxtb	r2, r3
 8000610:	4b53      	ldr	r3, [pc, #332]	; (8000760 <CS43_Init+0x220>)
 8000612:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
 8000614:	4b52      	ldr	r3, [pc, #328]	; (8000760 <CS43_Init+0x220>)
 8000616:	785b      	ldrb	r3, [r3, #1]
 8000618:	f023 0304 	bic.w	r3, r3, #4
 800061c:	b2da      	uxtb	r2, r3
 800061e:	4b50      	ldr	r3, [pc, #320]	; (8000760 <CS43_Init+0x220>)
 8000620:	705a      	strb	r2, [r3, #1]
	iData[1] |= (1 << 2);
 8000622:	4b4f      	ldr	r3, [pc, #316]	; (8000760 <CS43_Init+0x220>)
 8000624:	785b      	ldrb	r3, [r3, #1]
 8000626:	f043 0304 	orr.w	r3, r3, #4
 800062a:	b2da      	uxtb	r2, r3
 800062c:	4b4c      	ldr	r3, [pc, #304]	; (8000760 <CS43_Init+0x220>)
 800062e:	705a      	strb	r2, [r3, #1]

	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 8000630:	4b4b      	ldr	r3, [pc, #300]	; (8000760 <CS43_Init+0x220>)
 8000632:	785b      	ldrb	r3, [r3, #1]
 8000634:	f043 0303 	orr.w	r3, r3, #3
 8000638:	b2da      	uxtb	r2, r3
 800063a:	4b49      	ldr	r3, [pc, #292]	; (8000760 <CS43_Init+0x220>)
 800063c:	705a      	strb	r2, [r3, #1]
	write_register(INTERFACE_CONTROL1,&iData[1]);
 800063e:	4949      	ldr	r1, [pc, #292]	; (8000764 <CS43_Init+0x224>)
 8000640:	2006      	movs	r0, #6
 8000642:	f7ff ff3d 	bl	80004c0 <write_register>
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
 8000646:	4947      	ldr	r1, [pc, #284]	; (8000764 <CS43_Init+0x224>)
 8000648:	2008      	movs	r0, #8
 800064a:	f7ff ff57 	bl	80004fc <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 800064e:	4b44      	ldr	r3, [pc, #272]	; (8000760 <CS43_Init+0x220>)
 8000650:	785b      	ldrb	r3, [r3, #1]
 8000652:	f023 030f 	bic.w	r3, r3, #15
 8000656:	b2da      	uxtb	r2, r3
 8000658:	4b41      	ldr	r3, [pc, #260]	; (8000760 <CS43_Init+0x220>)
 800065a:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 800065c:	4b40      	ldr	r3, [pc, #256]	; (8000760 <CS43_Init+0x220>)
 800065e:	785b      	ldrb	r3, [r3, #1]
 8000660:	f043 0301 	orr.w	r3, r3, #1
 8000664:	b2da      	uxtb	r2, r3
 8000666:	4b3e      	ldr	r3, [pc, #248]	; (8000760 <CS43_Init+0x220>)
 8000668:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_A,&iData[1]);
 800066a:	493e      	ldr	r1, [pc, #248]	; (8000764 <CS43_Init+0x224>)
 800066c:	2008      	movs	r0, #8
 800066e:	f7ff ff27 	bl	80004c0 <write_register>
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
 8000672:	493c      	ldr	r1, [pc, #240]	; (8000764 <CS43_Init+0x224>)
 8000674:	2009      	movs	r0, #9
 8000676:	f7ff ff41 	bl	80004fc <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 800067a:	4b39      	ldr	r3, [pc, #228]	; (8000760 <CS43_Init+0x220>)
 800067c:	785b      	ldrb	r3, [r3, #1]
 800067e:	f023 030f 	bic.w	r3, r3, #15
 8000682:	b2da      	uxtb	r2, r3
 8000684:	4b36      	ldr	r3, [pc, #216]	; (8000760 <CS43_Init+0x220>)
 8000686:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 8000688:	4b35      	ldr	r3, [pc, #212]	; (8000760 <CS43_Init+0x220>)
 800068a:	785b      	ldrb	r3, [r3, #1]
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	b2da      	uxtb	r2, r3
 8000692:	4b33      	ldr	r3, [pc, #204]	; (8000760 <CS43_Init+0x220>)
 8000694:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_B,&iData[1]);
 8000696:	4933      	ldr	r1, [pc, #204]	; (8000764 <CS43_Init+0x224>)
 8000698:	2009      	movs	r0, #9
 800069a:	f7ff ff11 	bl	80004c0 <write_register>
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
 800069e:	4931      	ldr	r1, [pc, #196]	; (8000764 <CS43_Init+0x224>)
 80006a0:	200e      	movs	r0, #14
 80006a2:	f7ff ff2b 	bl	80004fc <read_register>
	if(outputMode == MODE_ANAL)
 80006a6:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d123      	bne.n	80006f6 <CS43_Init+0x1b6>
	{
		iData[1] |=  (1 << 7);   // Enable passthrough for AIN-A
 80006ae:	4b2c      	ldr	r3, [pc, #176]	; (8000760 <CS43_Init+0x220>)
 80006b0:	785b      	ldrb	r3, [r3, #1]
 80006b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006b6:	b2da      	uxtb	r2, r3
 80006b8:	4b29      	ldr	r3, [pc, #164]	; (8000760 <CS43_Init+0x220>)
 80006ba:	705a      	strb	r2, [r3, #1]
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
 80006bc:	4b28      	ldr	r3, [pc, #160]	; (8000760 <CS43_Init+0x220>)
 80006be:	785b      	ldrb	r3, [r3, #1]
 80006c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006c4:	b2da      	uxtb	r2, r3
 80006c6:	4b26      	ldr	r3, [pc, #152]	; (8000760 <CS43_Init+0x220>)
 80006c8:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
 80006ca:	4b25      	ldr	r3, [pc, #148]	; (8000760 <CS43_Init+0x220>)
 80006cc:	785b      	ldrb	r3, [r3, #1]
 80006ce:	f023 0320 	bic.w	r3, r3, #32
 80006d2:	b2da      	uxtb	r2, r3
 80006d4:	4b22      	ldr	r3, [pc, #136]	; (8000760 <CS43_Init+0x220>)
 80006d6:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
 80006d8:	4b21      	ldr	r3, [pc, #132]	; (8000760 <CS43_Init+0x220>)
 80006da:	785b      	ldrb	r3, [r3, #1]
 80006dc:	f023 0310 	bic.w	r3, r3, #16
 80006e0:	b2da      	uxtb	r2, r3
 80006e2:	4b1f      	ldr	r3, [pc, #124]	; (8000760 <CS43_Init+0x220>)
 80006e4:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 80006e6:	4b1e      	ldr	r3, [pc, #120]	; (8000760 <CS43_Init+0x220>)
 80006e8:	785b      	ldrb	r3, [r3, #1]
 80006ea:	f023 0308 	bic.w	r3, r3, #8
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	4b1b      	ldr	r3, [pc, #108]	; (8000760 <CS43_Init+0x220>)
 80006f2:	705a      	strb	r2, [r3, #1]
 80006f4:	e006      	b.n	8000704 <CS43_Init+0x1c4>
	}
	else if(outputMode == MODE_I2S)
 80006f6:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d102      	bne.n	8000704 <CS43_Init+0x1c4>
	{
		iData[1] = 0x02;
 80006fe:	4b18      	ldr	r3, [pc, #96]	; (8000760 <CS43_Init+0x220>)
 8000700:	2202      	movs	r2, #2
 8000702:	705a      	strb	r2, [r3, #1]
	}
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 8000704:	4917      	ldr	r1, [pc, #92]	; (8000764 <CS43_Init+0x224>)
 8000706:	200e      	movs	r0, #14
 8000708:	f7ff feda 	bl	80004c0 <write_register>
	//(9): Unmute headphone and speaker
	read_register(PLAYBACK_CONTROL, &iData[1]);
 800070c:	4915      	ldr	r1, [pc, #84]	; (8000764 <CS43_Init+0x224>)
 800070e:	200f      	movs	r0, #15
 8000710:	f7ff fef4 	bl	80004fc <read_register>
	iData[1] = 0x00;
 8000714:	4b12      	ldr	r3, [pc, #72]	; (8000760 <CS43_Init+0x220>)
 8000716:	2200      	movs	r2, #0
 8000718:	705a      	strb	r2, [r3, #1]
	write_register(PLAYBACK_CONTROL,&iData[1]);
 800071a:	4912      	ldr	r1, [pc, #72]	; (8000764 <CS43_Init+0x224>)
 800071c:	200f      	movs	r0, #15
 800071e:	f7ff fecf 	bl	80004c0 <write_register>
	//(10): Set volume to default (0dB)
	iData[1] = 0x00;
 8000722:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <CS43_Init+0x220>)
 8000724:	2200      	movs	r2, #0
 8000726:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 8000728:	490e      	ldr	r1, [pc, #56]	; (8000764 <CS43_Init+0x224>)
 800072a:	2014      	movs	r0, #20
 800072c:	f7ff fec8 	bl	80004c0 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 8000730:	490c      	ldr	r1, [pc, #48]	; (8000764 <CS43_Init+0x224>)
 8000732:	2015      	movs	r0, #21
 8000734:	f7ff fec4 	bl	80004c0 <write_register>
	write_register(PCM_VOLUME_A,&iData[1]);
 8000738:	490a      	ldr	r1, [pc, #40]	; (8000764 <CS43_Init+0x224>)
 800073a:	201a      	movs	r0, #26
 800073c:	f7ff fec0 	bl	80004c0 <write_register>
	write_register(PCM_VOLUME_B,&iData[1]);
 8000740:	4908      	ldr	r1, [pc, #32]	; (8000764 <CS43_Init+0x224>)
 8000742:	201b      	movs	r0, #27
 8000744:	f7ff febc 	bl	80004c0 <write_register>
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000750:	b004      	add	sp, #16
 8000752:	4770      	bx	lr
 8000754:	20001354 	.word	0x20001354
 8000758:	40020c00 	.word	0x40020c00
 800075c:	200000b0 	.word	0x200000b0
 8000760:	200000ac 	.word	0x200000ac
 8000764:	200000ad 	.word	0x200000ad

08000768 <CS43_Enable_RightLeft>:

// Function(2): Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	71fb      	strb	r3, [r7, #7]
	switch (side)
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	2b03      	cmp	r3, #3
 8000776:	d837      	bhi.n	80007e8 <CS43_Enable_RightLeft+0x80>
 8000778:	a201      	add	r2, pc, #4	; (adr r2, 8000780 <CS43_Enable_RightLeft+0x18>)
 800077a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800077e:	bf00      	nop
 8000780:	08000791 	.word	0x08000791
 8000784:	080007a7 	.word	0x080007a7
 8000788:	080007bd 	.word	0x080007bd
 800078c:	080007d3 	.word	0x080007d3
	{
		case 0:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000790:	4b21      	ldr	r3, [pc, #132]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 8000792:	22c0      	movs	r2, #192	; 0xc0
 8000794:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000796:	4b20      	ldr	r3, [pc, #128]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 8000798:	785b      	ldrb	r3, [r3, #1]
 800079a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800079e:	b2da      	uxtb	r2, r3
 80007a0:	4b1d      	ldr	r3, [pc, #116]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007a2:	705a      	strb	r2, [r3, #1]
			break;
 80007a4:	e021      	b.n	80007ea <CS43_Enable_RightLeft+0x82>
		case 1:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007a6:	4b1c      	ldr	r3, [pc, #112]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007a8:	2280      	movs	r2, #128	; 0x80
 80007aa:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007ac:	4b1a      	ldr	r3, [pc, #104]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007ae:	785b      	ldrb	r3, [r3, #1]
 80007b0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80007b4:	b2da      	uxtb	r2, r3
 80007b6:	4b18      	ldr	r3, [pc, #96]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007b8:	705a      	strb	r2, [r3, #1]
			break;
 80007ba:	e016      	b.n	80007ea <CS43_Enable_RightLeft+0x82>
		case 2:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007bc:	4b16      	ldr	r3, [pc, #88]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007be:	22c0      	movs	r2, #192	; 0xc0
 80007c0:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007c2:	4b15      	ldr	r3, [pc, #84]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007c4:	785b      	ldrb	r3, [r3, #1]
 80007c6:	f043 0320 	orr.w	r3, r3, #32
 80007ca:	b2da      	uxtb	r2, r3
 80007cc:	4b12      	ldr	r3, [pc, #72]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007ce:	705a      	strb	r2, [r3, #1]
			break;
 80007d0:	e00b      	b.n	80007ea <CS43_Enable_RightLeft+0x82>
		case 3:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007d2:	4b11      	ldr	r3, [pc, #68]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007d4:	2280      	movs	r2, #128	; 0x80
 80007d6:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007d8:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007da:	785b      	ldrb	r3, [r3, #1]
 80007dc:	f043 0320 	orr.w	r3, r3, #32
 80007e0:	b2da      	uxtb	r2, r3
 80007e2:	4b0d      	ldr	r3, [pc, #52]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007e4:	705a      	strb	r2, [r3, #1]
			break;
 80007e6:	e000      	b.n	80007ea <CS43_Enable_RightLeft+0x82>
		default:
			break;
 80007e8:	bf00      	nop
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 80007ea:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007ec:	785b      	ldrb	r3, [r3, #1]
 80007ee:	f043 030c 	orr.w	r3, r3, #12
 80007f2:	b2da      	uxtb	r2, r3
 80007f4:	4b08      	ldr	r3, [pc, #32]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007f6:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80007f8:	4b07      	ldr	r3, [pc, #28]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007fa:	785b      	ldrb	r3, [r3, #1]
 80007fc:	f043 0303 	orr.w	r3, r3, #3
 8000800:	b2da      	uxtb	r2, r3
 8000802:	4b05      	ldr	r3, [pc, #20]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 8000804:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 8000806:	4905      	ldr	r1, [pc, #20]	; (800081c <CS43_Enable_RightLeft+0xb4>)
 8000808:	2004      	movs	r0, #4
 800080a:	f7ff fe59 	bl	80004c0 <write_register>
}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	200000ac 	.word	0x200000ac
 800081c:	200000ad 	.word	0x200000ad

08000820 <CS43_SetVolume>:

// Function(3): Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	71fb      	strb	r3, [r7, #7]
	int8_t tempVol = volume - 50;
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	3b32      	subs	r3, #50	; 0x32
 800082e:	b2db      	uxtb	r3, r3
 8000830:	73fb      	strb	r3, [r7, #15]
	tempVol = tempVol*(127/50);
 8000832:	7bfb      	ldrb	r3, [r7, #15]
 8000834:	005b      	lsls	r3, r3, #1
 8000836:	b2db      	uxtb	r3, r3
 8000838:	73fb      	strb	r3, [r7, #15]
	uint8_t myVolume =  (uint8_t )tempVol;
 800083a:	7bfb      	ldrb	r3, [r7, #15]
 800083c:	73bb      	strb	r3, [r7, #14]
	iData[1] = myVolume;
 800083e:	4a16      	ldr	r2, [pc, #88]	; (8000898 <CS43_SetVolume+0x78>)
 8000840:	7bbb      	ldrb	r3, [r7, #14]
 8000842:	7053      	strb	r3, [r2, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 8000844:	4915      	ldr	r1, [pc, #84]	; (800089c <CS43_SetVolume+0x7c>)
 8000846:	2014      	movs	r0, #20
 8000848:	f7ff fe3a 	bl	80004c0 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 800084c:	4913      	ldr	r1, [pc, #76]	; (800089c <CS43_SetVolume+0x7c>)
 800084e:	2015      	movs	r0, #21
 8000850:	f7ff fe36 	bl	80004c0 <write_register>

	iData[1] = VOLUME_CONVERT_D(volume);
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	2b64      	cmp	r3, #100	; 0x64
 8000858:	d80e      	bhi.n	8000878 <CS43_SetVolume+0x58>
 800085a:	79fa      	ldrb	r2, [r7, #7]
 800085c:	4613      	mov	r3, r2
 800085e:	005b      	lsls	r3, r3, #1
 8000860:	4413      	add	r3, r2
 8000862:	011b      	lsls	r3, r3, #4
 8000864:	4a0e      	ldr	r2, [pc, #56]	; (80008a0 <CS43_SetVolume+0x80>)
 8000866:	fb82 1203 	smull	r1, r2, r2, r3
 800086a:	1152      	asrs	r2, r2, #5
 800086c:	17db      	asrs	r3, r3, #31
 800086e:	1ad3      	subs	r3, r2, r3
 8000870:	b2db      	uxtb	r3, r3
 8000872:	3b18      	subs	r3, #24
 8000874:	b2db      	uxtb	r3, r3
 8000876:	e000      	b.n	800087a <CS43_SetVolume+0x5a>
 8000878:	2318      	movs	r3, #24
 800087a:	4a07      	ldr	r2, [pc, #28]	; (8000898 <CS43_SetVolume+0x78>)
 800087c:	7053      	strb	r3, [r2, #1]

	/* Set the Master volume */
	write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
 800087e:	4907      	ldr	r1, [pc, #28]	; (800089c <CS43_SetVolume+0x7c>)
 8000880:	2020      	movs	r0, #32
 8000882:	f7ff fe1d 	bl	80004c0 <write_register>
	write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
 8000886:	4905      	ldr	r1, [pc, #20]	; (800089c <CS43_SetVolume+0x7c>)
 8000888:	2021      	movs	r0, #33	; 0x21
 800088a:	f7ff fe19 	bl	80004c0 <write_register>
}
 800088e:	bf00      	nop
 8000890:	3710      	adds	r7, #16
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	200000ac 	.word	0x200000ac
 800089c:	200000ad 	.word	0x200000ad
 80008a0:	51eb851f 	.word	0x51eb851f

080008a4 <CS43_Start>:

// Function(4): Start the Audio DAC
void CS43_Start(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
	// Write 0x99 to register 0x00.
	iData[1] = 0x99;
 80008a8:	4b1d      	ldr	r3, [pc, #116]	; (8000920 <CS43_Start+0x7c>)
 80008aa:	2299      	movs	r2, #153	; 0x99
 80008ac:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 80008ae:	491d      	ldr	r1, [pc, #116]	; (8000924 <CS43_Start+0x80>)
 80008b0:	2000      	movs	r0, #0
 80008b2:	f7ff fe05 	bl	80004c0 <write_register>
	// Write 0x80 to register 0x47.
	iData[1] = 0x80;
 80008b6:	4b1a      	ldr	r3, [pc, #104]	; (8000920 <CS43_Start+0x7c>)
 80008b8:	2280      	movs	r2, #128	; 0x80
 80008ba:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_47,&iData[1]);
 80008bc:	4919      	ldr	r1, [pc, #100]	; (8000924 <CS43_Start+0x80>)
 80008be:	2047      	movs	r0, #71	; 0x47
 80008c0:	f7ff fdfe 	bl	80004c0 <write_register>
	// Write '1'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80008c4:	4917      	ldr	r1, [pc, #92]	; (8000924 <CS43_Start+0x80>)
 80008c6:	2032      	movs	r0, #50	; 0x32
 80008c8:	f7ff fe18 	bl	80004fc <read_register>
	iData[1] |= 0x80;
 80008cc:	4b14      	ldr	r3, [pc, #80]	; (8000920 <CS43_Start+0x7c>)
 80008ce:	785b      	ldrb	r3, [r3, #1]
 80008d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008d4:	b2da      	uxtb	r2, r3
 80008d6:	4b12      	ldr	r3, [pc, #72]	; (8000920 <CS43_Start+0x7c>)
 80008d8:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 80008da:	4912      	ldr	r1, [pc, #72]	; (8000924 <CS43_Start+0x80>)
 80008dc:	2032      	movs	r0, #50	; 0x32
 80008de:	f7ff fdef 	bl	80004c0 <write_register>
	// Write '0'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80008e2:	4910      	ldr	r1, [pc, #64]	; (8000924 <CS43_Start+0x80>)
 80008e4:	2032      	movs	r0, #50	; 0x32
 80008e6:	f7ff fe09 	bl	80004fc <read_register>
	iData[1] &= ~(0x80);
 80008ea:	4b0d      	ldr	r3, [pc, #52]	; (8000920 <CS43_Start+0x7c>)
 80008ec:	785b      	ldrb	r3, [r3, #1]
 80008ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008f2:	b2da      	uxtb	r2, r3
 80008f4:	4b0a      	ldr	r3, [pc, #40]	; (8000920 <CS43_Start+0x7c>)
 80008f6:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 80008f8:	490a      	ldr	r1, [pc, #40]	; (8000924 <CS43_Start+0x80>)
 80008fa:	2032      	movs	r0, #50	; 0x32
 80008fc:	f7ff fde0 	bl	80004c0 <write_register>
	// Write 0x00 to register 0x00.
	iData[1] = 0x00;
 8000900:	4b07      	ldr	r3, [pc, #28]	; (8000920 <CS43_Start+0x7c>)
 8000902:	2200      	movs	r2, #0
 8000904:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 8000906:	4907      	ldr	r1, [pc, #28]	; (8000924 <CS43_Start+0x80>)
 8000908:	2000      	movs	r0, #0
 800090a:	f7ff fdd9 	bl	80004c0 <write_register>
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	iData[1] = 0x9E;
 800090e:	4b04      	ldr	r3, [pc, #16]	; (8000920 <CS43_Start+0x7c>)
 8000910:	229e      	movs	r2, #158	; 0x9e
 8000912:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,&iData[1]);
 8000914:	4903      	ldr	r1, [pc, #12]	; (8000924 <CS43_Start+0x80>)
 8000916:	2002      	movs	r0, #2
 8000918:	f7ff fdd2 	bl	80004c0 <write_register>
}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	200000ac 	.word	0x200000ac
 8000924:	200000ad 	.word	0x200000ad

08000928 <HAL_I2S_RxHalfCpltCallback>:
int16_t DAC_BUFF[16];
int16_t IN_SAMPLES[2];
uint32_t C = 0;

void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]

	UNUSED(hi2s);
	if (hi2s->Instance == SPI2) {
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a0d      	ldr	r2, [pc, #52]	; (800096c <HAL_I2S_RxHalfCpltCallback+0x44>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d114      	bne.n	8000964 <HAL_I2S_RxHalfCpltCallback+0x3c>
		//LEFT
		int32_t temp = ADC_BUFF[__HAL_DMA_GET_COUNTER(hi2s->hdmarx)];
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	685b      	ldr	r3, [r3, #4]
 8000942:	4a0b      	ldr	r2, [pc, #44]	; (8000970 <HAL_I2S_RxHalfCpltCallback+0x48>)
 8000944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000948:	60fb      	str	r3, [r7, #12]
		temp >>= 16;
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	141b      	asrs	r3, r3, #16
 800094e:	60fb      	str	r3, [r7, #12]
		IN_SAMPLES[0] = temp;
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	b21a      	sxth	r2, r3
 8000954:	4b07      	ldr	r3, [pc, #28]	; (8000974 <HAL_I2S_RxHalfCpltCallback+0x4c>)
 8000956:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(Led2_GPIO_Port, Led2_Pin, GPIO_PIN_SET);
 8000958:	2201      	movs	r2, #1
 800095a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800095e:	4806      	ldr	r0, [pc, #24]	; (8000978 <HAL_I2S_RxHalfCpltCallback+0x50>)
 8000960:	f002 fa38 	bl	8002dd4 <HAL_GPIO_WritePin>

		//IN_SAMPLES[0] = wave_gen('s', C, 1720.0F) * 15000;
	}
}
 8000964:	bf00      	nop
 8000966:	3710      	adds	r7, #16
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40003800 	.word	0x40003800
 8000970:	200012cc 	.word	0x200012cc
 8000974:	20000120 	.word	0x20000120
 8000978:	40020c00 	.word	0x40020c00

0800097c <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
	UNUSED(hi2s);
	if (hi2s->Instance == SPI2) {
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a0d      	ldr	r2, [pc, #52]	; (80009c0 <HAL_I2S_RxCpltCallback+0x44>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d114      	bne.n	80009b8 <HAL_I2S_RxCpltCallback+0x3c>
		//RIGHT
		int32_t temp = ADC_BUFF[__HAL_DMA_GET_COUNTER(hi2s->hdmarx)];
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	4a0b      	ldr	r2, [pc, #44]	; (80009c4 <HAL_I2S_RxCpltCallback+0x48>)
 8000998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800099c:	60fb      	str	r3, [r7, #12]
		temp >>= 16;
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	141b      	asrs	r3, r3, #16
 80009a2:	60fb      	str	r3, [r7, #12]
		IN_SAMPLES[1] = temp;
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	b21a      	sxth	r2, r3
 80009a8:	4b07      	ldr	r3, [pc, #28]	; (80009c8 <HAL_I2S_RxCpltCallback+0x4c>)
 80009aa:	805a      	strh	r2, [r3, #2]
		HAL_GPIO_WritePin(Led3_GPIO_Port, Led3_Pin, GPIO_PIN_SET);
 80009ac:	2201      	movs	r2, #1
 80009ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009b2:	4806      	ldr	r0, [pc, #24]	; (80009cc <HAL_I2S_RxCpltCallback+0x50>)
 80009b4:	f002 fa0e 	bl	8002dd4 <HAL_GPIO_WritePin>

		//IN_SAMPLES[1] = wave_gen('s', C++, 1720.0F) * 15000;
	}
}
 80009b8:	bf00      	nop
 80009ba:	3710      	adds	r7, #16
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40003800 	.word	0x40003800
 80009c4:	200012cc 	.word	0x200012cc
 80009c8:	20000120 	.word	0x20000120
 80009cc:	40020c00 	.word	0x40020c00

080009d0 <HAL_I2S_TxCpltCallback>:
	  DAC_BUFF[__HAL_DMA_GET_COUNTER(hi2s->hdmatx)] = IN_SAMPLES[0];
  }
}

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  if (hi2s->Instance == SPI3) {
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a09      	ldr	r2, [pc, #36]	; (8000a04 <HAL_I2S_TxCpltCallback+0x34>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d109      	bne.n	80009f6 <HAL_I2S_TxCpltCallback+0x26>
  	  DAC_BUFF[__HAL_DMA_GET_COUNTER(hi2s->hdmatx)] = IN_SAMPLES[1];
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	4a07      	ldr	r2, [pc, #28]	; (8000a08 <HAL_I2S_TxCpltCallback+0x38>)
 80009ec:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 80009f0:	4a06      	ldr	r2, [pc, #24]	; (8000a0c <HAL_I2S_TxCpltCallback+0x3c>)
 80009f2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  }
}
 80009f6:	bf00      	nop
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	40003c00 	.word	0x40003c00
 8000a08:	20000120 	.word	0x20000120
 8000a0c:	2000126c 	.word	0x2000126c

08000a10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a10:	b590      	push	{r4, r7, lr}
 8000a12:	f2ad 6d9c 	subw	sp, sp, #1692	; 0x69c
 8000a16:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a18:	f001 fb10 	bl	800203c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a1c:	f000 f8b0 	bl	8000b80 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000a20:	f000 f918 	bl	8000c54 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a24:	f000 f9e4 	bl	8000df0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a28:	f000 f9ba 	bl	8000da0 <MX_DMA_Init>
  MX_I2C1_Init();
 8000a2c:	f000 f92e 	bl	8000c8c <MX_I2C1_Init>
  MX_I2S2_Init();
 8000a30:	f000 f95a 	bl	8000ce8 <MX_I2S2_Init>
  MX_I2S3_Init();
 8000a34:	f000 f986 	bl	8000d44 <MX_I2S3_Init>
  MX_USB_HOST_Init();
 8000a38:	f00a fa4e 	bl	800aed8 <MX_USB_HOST_Init>
  MX_FATFS_Init();
 8000a3c:	f007 f9ea 	bl	8007e14 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
	pedalboard_t pedalboard;
	pedalboard.active_pedals = 0;
 8000a40:	f107 0308 	add.w	r3, r7, #8
 8000a44:	2200      	movs	r2, #0
 8000a46:	701a      	strb	r2, [r3, #0]
	pedalboard_append(&pedalboard, OVERDRIVE_SQRT);
 8000a48:	f107 0308 	add.w	r3, r7, #8
 8000a4c:	2107      	movs	r1, #7
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f000 ff7e 	bl	8001950 <pedalboard_append>

	CS43_Init(hi2c1, MODE_I2S);
 8000a54:	4c42      	ldr	r4, [pc, #264]	; (8000b60 <main+0x150>)
 8000a56:	2300      	movs	r3, #0
 8000a58:	9311      	str	r3, [sp, #68]	; 0x44
 8000a5a:	4668      	mov	r0, sp
 8000a5c:	f104 0310 	add.w	r3, r4, #16
 8000a60:	2244      	movs	r2, #68	; 0x44
 8000a62:	4619      	mov	r1, r3
 8000a64:	f00a fdaa 	bl	800b5bc <memcpy>
 8000a68:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000a6c:	f7ff fd68 	bl	8000540 <CS43_Init>
	CS43_SetVolume(0);
 8000a70:	2000      	movs	r0, #0
 8000a72:	f7ff fed5 	bl	8000820 <CS43_SetVolume>
	CS43_Enable_RightLeft(CS43_RIGHT_LEFT);
 8000a76:	2003      	movs	r0, #3
 8000a78:	f7ff fe76 	bl	8000768 <CS43_Enable_RightLeft>
	CS43_Start();
 8000a7c:	f7ff ff12 	bl	80008a4 <CS43_Start>

//	for (int i = 0; i < 400; i++) {
//		DAC_BUFF[i] = wave_gen('s', i, 440.0F) * 20000;
//	}

	for (int i = 0; i < 16; i++) ADC_BUFF[i] = 17;
 8000a80:	2300      	movs	r3, #0
 8000a82:	f8c7 364c 	str.w	r3, [r7, #1612]	; 0x64c
 8000a86:	e00a      	b.n	8000a9e <main+0x8e>
 8000a88:	4a36      	ldr	r2, [pc, #216]	; (8000b64 <main+0x154>)
 8000a8a:	f8d7 364c 	ldr.w	r3, [r7, #1612]	; 0x64c
 8000a8e:	2111      	movs	r1, #17
 8000a90:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000a94:	f8d7 364c 	ldr.w	r3, [r7, #1612]	; 0x64c
 8000a98:	3301      	adds	r3, #1
 8000a9a:	f8c7 364c 	str.w	r3, [r7, #1612]	; 0x64c
 8000a9e:	f8d7 364c 	ldr.w	r3, [r7, #1612]	; 0x64c
 8000aa2:	2b0f      	cmp	r3, #15
 8000aa4:	ddf0      	ble.n	8000a88 <main+0x78>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000aa6:	f00a fa3d 	bl	800af24 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
		HAL_GPIO_WritePin(OtgPower_GPIO_Port, OtgPower_Pin, GPIO_PIN_RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2101      	movs	r1, #1
 8000aae:	482e      	ldr	r0, [pc, #184]	; (8000b68 <main+0x158>)
 8000ab0:	f002 f990 	bl	8002dd4 <HAL_GPIO_WritePin>

		GPIO_PinState btn_states[4];
		btn_states[0] = HAL_GPIO_ReadPin(Btn0_GPIO_Port, Btn0_Pin);
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	482d      	ldr	r0, [pc, #180]	; (8000b6c <main+0x15c>)
 8000ab8:	f002 f974 	bl	8002da4 <HAL_GPIO_ReadPin>
 8000abc:	4603      	mov	r3, r0
 8000abe:	461a      	mov	r2, r3
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	701a      	strb	r2, [r3, #0]
		btn_states[1] = !HAL_GPIO_ReadPin(Btn1_GPIO_Port, Btn1_Pin);
 8000ac4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ac8:	4829      	ldr	r0, [pc, #164]	; (8000b70 <main+0x160>)
 8000aca:	f002 f96b 	bl	8002da4 <HAL_GPIO_ReadPin>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	bf0c      	ite	eq
 8000ad4:	2301      	moveq	r3, #1
 8000ad6:	2300      	movne	r3, #0
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	461a      	mov	r2, r3
 8000adc:	1d3b      	adds	r3, r7, #4
 8000ade:	705a      	strb	r2, [r3, #1]
		btn_states[2] = !HAL_GPIO_ReadPin(Btn2_GPIO_Port, Btn2_Pin);
 8000ae0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ae4:	4823      	ldr	r0, [pc, #140]	; (8000b74 <main+0x164>)
 8000ae6:	f002 f95d 	bl	8002da4 <HAL_GPIO_ReadPin>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	bf0c      	ite	eq
 8000af0:	2301      	moveq	r3, #1
 8000af2:	2300      	movne	r3, #0
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	461a      	mov	r2, r3
 8000af8:	1d3b      	adds	r3, r7, #4
 8000afa:	709a      	strb	r2, [r3, #2]
		btn_states[3] = !HAL_GPIO_ReadPin(Btn3_GPIO_Port, Btn3_Pin);
 8000afc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b00:	481c      	ldr	r0, [pc, #112]	; (8000b74 <main+0x164>)
 8000b02:	f002 f94f 	bl	8002da4 <HAL_GPIO_ReadPin>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	bf0c      	ite	eq
 8000b0c:	2301      	moveq	r3, #1
 8000b0e:	2300      	movne	r3, #0
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	461a      	mov	r2, r3
 8000b14:	1d3b      	adds	r3, r7, #4
 8000b16:	70da      	strb	r2, [r3, #3]

		HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, btn_states[0] || btn_states[1] || btn_states[2] || btn_states[3]);
 8000b18:	1d3b      	adds	r3, r7, #4
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d10b      	bne.n	8000b38 <main+0x128>
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	785b      	ldrb	r3, [r3, #1]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d107      	bne.n	8000b38 <main+0x128>
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	789b      	ldrb	r3, [r3, #2]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d103      	bne.n	8000b38 <main+0x128>
 8000b30:	1d3b      	adds	r3, r7, #4
 8000b32:	78db      	ldrb	r3, [r3, #3]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <main+0x12c>
 8000b38:	2301      	movs	r3, #1
 8000b3a:	e000      	b.n	8000b3e <main+0x12e>
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	461a      	mov	r2, r3
 8000b42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b46:	480a      	ldr	r0, [pc, #40]	; (8000b70 <main+0x160>)
 8000b48:	f002 f944 	bl	8002dd4 <HAL_GPIO_WritePin>

		if (btn_states[0] == GPIO_PIN_SET) {
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d1a8      	bne.n	8000aa6 <main+0x96>
			HAL_I2S_Receive_DMA(&hi2s2, hoo.ADC16, 4);
 8000b54:	2204      	movs	r2, #4
 8000b56:	4908      	ldr	r1, [pc, #32]	; (8000b78 <main+0x168>)
 8000b58:	4808      	ldr	r0, [pc, #32]	; (8000b7c <main+0x16c>)
 8000b5a:	f004 ff9b 	bl	8005a94 <HAL_I2S_Receive_DMA>
	{
 8000b5e:	e7a2      	b.n	8000aa6 <main+0x96>
 8000b60:	20000124 	.word	0x20000124
 8000b64:	200012cc 	.word	0x200012cc
 8000b68:	40020800 	.word	0x40020800
 8000b6c:	40020000 	.word	0x40020000
 8000b70:	40020c00 	.word	0x40020c00
 8000b74:	40020400 	.word	0x40020400
 8000b78:	2000128c 	.word	0x2000128c
 8000b7c:	2000130c 	.word	0x2000130c

08000b80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b094      	sub	sp, #80	; 0x50
 8000b84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b86:	f107 0320 	add.w	r3, r7, #32
 8000b8a:	2230      	movs	r2, #48	; 0x30
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f00a fd22 	bl	800b5d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b94:	f107 030c 	add.w	r3, r7, #12
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60bb      	str	r3, [r7, #8]
 8000ba8:	4b28      	ldr	r3, [pc, #160]	; (8000c4c <SystemClock_Config+0xcc>)
 8000baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bac:	4a27      	ldr	r2, [pc, #156]	; (8000c4c <SystemClock_Config+0xcc>)
 8000bae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb2:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb4:	4b25      	ldr	r3, [pc, #148]	; (8000c4c <SystemClock_Config+0xcc>)
 8000bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bbc:	60bb      	str	r3, [r7, #8]
 8000bbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	4b22      	ldr	r3, [pc, #136]	; (8000c50 <SystemClock_Config+0xd0>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a21      	ldr	r2, [pc, #132]	; (8000c50 <SystemClock_Config+0xd0>)
 8000bca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bce:	6013      	str	r3, [r2, #0]
 8000bd0:	4b1f      	ldr	r3, [pc, #124]	; (8000c50 <SystemClock_Config+0xd0>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bd8:	607b      	str	r3, [r7, #4]
 8000bda:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000be0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000be6:	2302      	movs	r3, #2
 8000be8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000bf0:	2308      	movs	r3, #8
 8000bf2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000bf4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000bf8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000bfe:	2307      	movs	r3, #7
 8000c00:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c02:	f107 0320 	add.w	r3, r7, #32
 8000c06:	4618      	mov	r0, r3
 8000c08:	f005 fbac 	bl	8006364 <HAL_RCC_OscConfig>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000c12:	f000 f99f 	bl	8000f54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c16:	230f      	movs	r3, #15
 8000c18:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c22:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c26:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c2c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c2e:	f107 030c 	add.w	r3, r7, #12
 8000c32:	2105      	movs	r1, #5
 8000c34:	4618      	mov	r0, r3
 8000c36:	f005 fe0d 	bl	8006854 <HAL_RCC_ClockConfig>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000c40:	f000 f988 	bl	8000f54 <Error_Handler>
  }
}
 8000c44:	bf00      	nop
 8000c46:	3750      	adds	r7, #80	; 0x50
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	40023800 	.word	0x40023800
 8000c50:	40007000 	.word	0x40007000

08000c54 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c5a:	463b      	mov	r3, r7
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000c66:	2301      	movs	r3, #1
 8000c68:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 181;
 8000c6a:	23b5      	movs	r3, #181	; 0xb5
 8000c6c:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c72:	463b      	mov	r3, r7
 8000c74:	4618      	mov	r0, r3
 8000c76:	f005 ffd5 	bl	8006c24 <HAL_RCCEx_PeriphCLKConfig>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <PeriphCommonClock_Config+0x30>
  {
    Error_Handler();
 8000c80:	f000 f968 	bl	8000f54 <Error_Handler>
  }
}
 8000c84:	bf00      	nop
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c90:	4b12      	ldr	r3, [pc, #72]	; (8000cdc <MX_I2C1_Init+0x50>)
 8000c92:	4a13      	ldr	r2, [pc, #76]	; (8000ce0 <MX_I2C1_Init+0x54>)
 8000c94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c96:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <MX_I2C1_Init+0x50>)
 8000c98:	4a12      	ldr	r2, [pc, #72]	; (8000ce4 <MX_I2C1_Init+0x58>)
 8000c9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c9c:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <MX_I2C1_Init+0x50>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ca2:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <MX_I2C1_Init+0x50>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <MX_I2C1_Init+0x50>)
 8000caa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cb0:	4b0a      	ldr	r3, [pc, #40]	; (8000cdc <MX_I2C1_Init+0x50>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000cb6:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <MX_I2C1_Init+0x50>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cbc:	4b07      	ldr	r3, [pc, #28]	; (8000cdc <MX_I2C1_Init+0x50>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cc2:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <MX_I2C1_Init+0x50>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cc8:	4804      	ldr	r0, [pc, #16]	; (8000cdc <MX_I2C1_Init+0x50>)
 8000cca:	f003 fe0d 	bl	80048e8 <HAL_I2C_Init>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000cd4:	f000 f93e 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cd8:	bf00      	nop
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20000124 	.word	0x20000124
 8000ce0:	40005400 	.word	0x40005400
 8000ce4:	000186a0 	.word	0x000186a0

08000ce8 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000cec:	4b13      	ldr	r3, [pc, #76]	; (8000d3c <MX_I2S2_Init+0x54>)
 8000cee:	4a14      	ldr	r2, [pc, #80]	; (8000d40 <MX_I2S2_Init+0x58>)
 8000cf0:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8000cf2:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <MX_I2S2_Init+0x54>)
 8000cf4:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000cf8:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000cfa:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <MX_I2S2_Init+0x54>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000d00:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <MX_I2S2_Init+0x54>)
 8000d02:	2203      	movs	r2, #3
 8000d04:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000d06:	4b0d      	ldr	r3, [pc, #52]	; (8000d3c <MX_I2S2_Init+0x54>)
 8000d08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d0c:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8000d0e:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <MX_I2S2_Init+0x54>)
 8000d10:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000d14:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000d16:	4b09      	ldr	r3, [pc, #36]	; (8000d3c <MX_I2S2_Init+0x54>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000d1c:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <MX_I2S2_Init+0x54>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000d22:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <MX_I2S2_Init+0x54>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000d28:	4804      	ldr	r0, [pc, #16]	; (8000d3c <MX_I2S2_Init+0x54>)
 8000d2a:	f004 fd73 	bl	8005814 <HAL_I2S_Init>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8000d34:	f000 f90e 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	2000130c 	.word	0x2000130c
 8000d40:	40003800 	.word	0x40003800

08000d44 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000d48:	4b13      	ldr	r3, [pc, #76]	; (8000d98 <MX_I2S3_Init+0x54>)
 8000d4a:	4a14      	ldr	r2, [pc, #80]	; (8000d9c <MX_I2S3_Init+0x58>)
 8000d4c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000d4e:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <MX_I2S3_Init+0x54>)
 8000d50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d54:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000d56:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <MX_I2S3_Init+0x54>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000d5c:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <MX_I2S3_Init+0x54>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000d62:	4b0d      	ldr	r3, [pc, #52]	; (8000d98 <MX_I2S3_Init+0x54>)
 8000d64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d68:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8000d6a:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <MX_I2S3_Init+0x54>)
 8000d6c:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000d70:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000d72:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <MX_I2S3_Init+0x54>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000d78:	4b07      	ldr	r3, [pc, #28]	; (8000d98 <MX_I2S3_Init+0x54>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000d7e:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <MX_I2S3_Init+0x54>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000d84:	4804      	ldr	r0, [pc, #16]	; (8000d98 <MX_I2S3_Init+0x54>)
 8000d86:	f004 fd45 	bl	8005814 <HAL_I2S_Init>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8000d90:	f000 f8e0 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	20001354 	.word	0x20001354
 8000d9c:	40003c00 	.word	0x40003c00

08000da0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	607b      	str	r3, [r7, #4]
 8000daa:	4b10      	ldr	r3, [pc, #64]	; (8000dec <MX_DMA_Init+0x4c>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	4a0f      	ldr	r2, [pc, #60]	; (8000dec <MX_DMA_Init+0x4c>)
 8000db0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000db4:	6313      	str	r3, [r2, #48]	; 0x30
 8000db6:	4b0d      	ldr	r3, [pc, #52]	; (8000dec <MX_DMA_Init+0x4c>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	200e      	movs	r0, #14
 8000dc8:	f001 faa9 	bl	800231e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000dcc:	200e      	movs	r0, #14
 8000dce:	f001 fac2 	bl	8002356 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	2010      	movs	r0, #16
 8000dd8:	f001 faa1 	bl	800231e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000ddc:	2010      	movs	r0, #16
 8000dde:	f001 faba 	bl	8002356 <HAL_NVIC_EnableIRQ>

}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40023800 	.word	0x40023800

08000df0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b08a      	sub	sp, #40	; 0x28
 8000df4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df6:	f107 0314 	add.w	r3, r7, #20
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	605a      	str	r2, [r3, #4]
 8000e00:	609a      	str	r2, [r3, #8]
 8000e02:	60da      	str	r2, [r3, #12]
 8000e04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	613b      	str	r3, [r7, #16]
 8000e0a:	4b4d      	ldr	r3, [pc, #308]	; (8000f40 <MX_GPIO_Init+0x150>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	4a4c      	ldr	r2, [pc, #304]	; (8000f40 <MX_GPIO_Init+0x150>)
 8000e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e14:	6313      	str	r3, [r2, #48]	; 0x30
 8000e16:	4b4a      	ldr	r3, [pc, #296]	; (8000f40 <MX_GPIO_Init+0x150>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e1e:	613b      	str	r3, [r7, #16]
 8000e20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	4b46      	ldr	r3, [pc, #280]	; (8000f40 <MX_GPIO_Init+0x150>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	4a45      	ldr	r2, [pc, #276]	; (8000f40 <MX_GPIO_Init+0x150>)
 8000e2c:	f043 0304 	orr.w	r3, r3, #4
 8000e30:	6313      	str	r3, [r2, #48]	; 0x30
 8000e32:	4b43      	ldr	r3, [pc, #268]	; (8000f40 <MX_GPIO_Init+0x150>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	f003 0304 	and.w	r3, r3, #4
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60bb      	str	r3, [r7, #8]
 8000e42:	4b3f      	ldr	r3, [pc, #252]	; (8000f40 <MX_GPIO_Init+0x150>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	4a3e      	ldr	r2, [pc, #248]	; (8000f40 <MX_GPIO_Init+0x150>)
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4e:	4b3c      	ldr	r3, [pc, #240]	; (8000f40 <MX_GPIO_Init+0x150>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	60bb      	str	r3, [r7, #8]
 8000e58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	607b      	str	r3, [r7, #4]
 8000e5e:	4b38      	ldr	r3, [pc, #224]	; (8000f40 <MX_GPIO_Init+0x150>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	4a37      	ldr	r2, [pc, #220]	; (8000f40 <MX_GPIO_Init+0x150>)
 8000e64:	f043 0302 	orr.w	r3, r3, #2
 8000e68:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6a:	4b35      	ldr	r3, [pc, #212]	; (8000f40 <MX_GPIO_Init+0x150>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	f003 0302 	and.w	r3, r3, #2
 8000e72:	607b      	str	r3, [r7, #4]
 8000e74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	603b      	str	r3, [r7, #0]
 8000e7a:	4b31      	ldr	r3, [pc, #196]	; (8000f40 <MX_GPIO_Init+0x150>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	4a30      	ldr	r2, [pc, #192]	; (8000f40 <MX_GPIO_Init+0x150>)
 8000e80:	f043 0308 	orr.w	r3, r3, #8
 8000e84:	6313      	str	r3, [r2, #48]	; 0x30
 8000e86:	4b2e      	ldr	r3, [pc, #184]	; (8000f40 <MX_GPIO_Init+0x150>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	f003 0308 	and.w	r3, r3, #8
 8000e8e:	603b      	str	r3, [r7, #0]
 8000e90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OtgPower_GPIO_Port, OtgPower_Pin, GPIO_PIN_RESET);
 8000e92:	2200      	movs	r2, #0
 8000e94:	2101      	movs	r1, #1
 8000e96:	482b      	ldr	r0, [pc, #172]	; (8000f44 <MX_GPIO_Init+0x154>)
 8000e98:	f001 ff9c 	bl	8002dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Led1_Pin|Led2_Pin|Led3_Pin|Led4_Pin, GPIO_PIN_RESET);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000ea2:	4829      	ldr	r0, [pc, #164]	; (8000f48 <MX_GPIO_Init+0x158>)
 8000ea4:	f001 ff96 	bl	8002dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AudioPower_GPIO_Port, AudioPower_Pin, GPIO_PIN_SET);
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	2110      	movs	r1, #16
 8000eac:	4826      	ldr	r0, [pc, #152]	; (8000f48 <MX_GPIO_Init+0x158>)
 8000eae:	f001 ff91 	bl	8002dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OtgPower_Pin */
  GPIO_InitStruct.Pin = OtgPower_Pin;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OtgPower_GPIO_Port, &GPIO_InitStruct);
 8000ec2:	f107 0314 	add.w	r3, r7, #20
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	481e      	ldr	r0, [pc, #120]	; (8000f44 <MX_GPIO_Init+0x154>)
 8000eca:	f001 fdcf 	bl	8002a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : Btn0_Pin */
  GPIO_InitStruct.Pin = Btn0_Pin;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Btn0_GPIO_Port, &GPIO_InitStruct);
 8000eda:	f107 0314 	add.w	r3, r7, #20
 8000ede:	4619      	mov	r1, r3
 8000ee0:	481a      	ldr	r0, [pc, #104]	; (8000f4c <MX_GPIO_Init+0x15c>)
 8000ee2:	f001 fdc3 	bl	8002a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : Btn3_Pin Btn2_Pin */
  GPIO_InitStruct.Pin = Btn3_Pin|Btn2_Pin;
 8000ee6:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8000eea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eec:	2300      	movs	r3, #0
 8000eee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4815      	ldr	r0, [pc, #84]	; (8000f50 <MX_GPIO_Init+0x160>)
 8000efc:	f001 fdb6 	bl	8002a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : Btn1_Pin */
  GPIO_InitStruct.Pin = Btn1_Pin;
 8000f00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f06:	2300      	movs	r3, #0
 8000f08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Btn1_GPIO_Port, &GPIO_InitStruct);
 8000f0e:	f107 0314 	add.w	r3, r7, #20
 8000f12:	4619      	mov	r1, r3
 8000f14:	480c      	ldr	r0, [pc, #48]	; (8000f48 <MX_GPIO_Init+0x158>)
 8000f16:	f001 fda9 	bl	8002a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : Led1_Pin Led2_Pin Led3_Pin Led4_Pin
                           AudioPower_Pin */
  GPIO_InitStruct.Pin = Led1_Pin|Led2_Pin|Led3_Pin|Led4_Pin
 8000f1a:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000f1e:	617b      	str	r3, [r7, #20]
                          |AudioPower_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f20:	2301      	movs	r3, #1
 8000f22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f2c:	f107 0314 	add.w	r3, r7, #20
 8000f30:	4619      	mov	r1, r3
 8000f32:	4805      	ldr	r0, [pc, #20]	; (8000f48 <MX_GPIO_Init+0x158>)
 8000f34:	f001 fd9a 	bl	8002a6c <HAL_GPIO_Init>

}
 8000f38:	bf00      	nop
 8000f3a:	3728      	adds	r7, #40	; 0x28
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40023800 	.word	0x40023800
 8000f44:	40020800 	.word	0x40020800
 8000f48:	40020c00 	.word	0x40020c00
 8000f4c:	40020000 	.word	0x40020000
 8000f50:	40020400 	.word	0x40020400

08000f54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f58:	b672      	cpsid	i
}
 8000f5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000f5c:	e7fe      	b.n	8000f5c <Error_Handler+0x8>
	...

08000f60 <overdrive_pedal_init>:
#include <stdlib.h>
#include "pedalboard_min.h"

// OVERDRIVE

void overdrive_pedal_init(pedal_config_t *conf) {
 8000f60:	b490      	push	{r4, r7}
 8000f62:	b09a      	sub	sp, #104	; 0x68
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
    conf->float_params[INTENSITY] = (float_parameter_t){4.F, 1.F, 10.F, 0.5F};
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	4a1a      	ldr	r2, [pc, #104]	; (8000fd4 <overdrive_pedal_init+0x74>)
 8000f6c:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8000f70:	4613      	mov	r3, r2
 8000f72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[THRESHOLD_HIGH] = (float_parameter_t){32767.F, 0.F, 32767.F, 1.F};
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4a17      	ldr	r2, [pc, #92]	; (8000fd8 <overdrive_pedal_init+0x78>)
 8000f7c:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8000f80:	4613      	mov	r3, r2
 8000f82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[THRESHOLD_LOW] = (float_parameter_t){28000.F, 0.F, 32767.F, 1.F};
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4a14      	ldr	r2, [pc, #80]	; (8000fdc <overdrive_pedal_init+0x7c>)
 8000f8c:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8000f90:	4613      	mov	r3, r2
 8000f92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[SOFTENER] = (float_parameter_t){4.F, 1.F, 10.F, 0.5F};
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4a0e      	ldr	r2, [pc, #56]	; (8000fd4 <overdrive_pedal_init+0x74>)
 8000f9c:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fa4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_1] = (float_parameter_t){1.F, 0.F, 1.F, 0.1F};
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4a0d      	ldr	r2, [pc, #52]	; (8000fe0 <overdrive_pedal_init+0x80>)
 8000fac:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_2] = (float_parameter_t){0.F, 0.F, 1.F, 0.1F};
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4a0a      	ldr	r2, [pc, #40]	; (8000fe4 <overdrive_pedal_init+0x84>)
 8000fbc:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8000fc8:	bf00      	nop
 8000fca:	3768      	adds	r7, #104	; 0x68
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bc90      	pop	{r4, r7}
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	0800b790 	.word	0x0800b790
 8000fd8:	0800b7a0 	.word	0x0800b7a0
 8000fdc:	0800b7b0 	.word	0x0800b7b0
 8000fe0:	0800b7c0 	.word	0x0800b7c0
 8000fe4:	0800b7d0 	.word	0x0800b7d0

08000fe8 <overdrive_process>:

float overdrive_process(float in, pedal_config_t *conf) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	ed87 0a01 	vstr	s0, [r7, #4]
 8000ff2:	6038      	str	r0, [r7, #0]
    float out = in *  conf->float_params[INTENSITY].value;
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000ffa:	ed97 7a01 	vldr	s14, [r7, #4]
 8000ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001002:	edc7 7a03 	vstr	s15, [r7, #12]
    out = soft_clip(out, conf->float_params[THRESHOLD_LOW].value, conf->float_params[SOFTENER].value);
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8001012:	eeb0 1a47 	vmov.f32	s2, s14
 8001016:	eef0 0a67 	vmov.f32	s1, s15
 800101a:	ed97 0a03 	vldr	s0, [r7, #12]
 800101e:	f000 fbab 	bl	8001778 <soft_clip>
 8001022:	ed87 0a03 	vstr	s0, [r7, #12]
    out = hard_clip(out, conf->float_params[THRESHOLD_HIGH].value);
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800102c:	eef0 0a67 	vmov.f32	s1, s15
 8001030:	ed97 0a03 	vldr	s0, [r7, #12]
 8001034:	f000 fb70 	bl	8001718 <hard_clip>
 8001038:	ed87 0a03 	vstr	s0, [r7, #12]
    out = mix(out, in, conf->float_params[BALANCE_1].value, conf->float_params[BALANCE_2].value);
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8001048:	eef0 1a47 	vmov.f32	s3, s14
 800104c:	eeb0 1a67 	vmov.f32	s2, s15
 8001050:	edd7 0a01 	vldr	s1, [r7, #4]
 8001054:	ed97 0a03 	vldr	s0, [r7, #12]
 8001058:	f000 fb3e 	bl	80016d8 <mix>
 800105c:	ed87 0a03 	vstr	s0, [r7, #12]
    return out;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	ee07 3a90 	vmov	s15, r3
}
 8001066:	eeb0 0a67 	vmov.f32	s0, s15
 800106a:	3710      	adds	r7, #16
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <bitcrusher_rs_pedal_init>:

// BITCRUSHER resolution

void bitcrusher_rs_pedal_init(pedal_config_t *conf) {
 8001070:	b490      	push	{r4, r7}
 8001072:	b08e      	sub	sp, #56	; 0x38
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
    conf->int_params[REDUCT_INTENSITY] = (int_parameter_t){12, 1, 16, 1};
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	4a0e      	ldr	r2, [pc, #56]	; (80010b4 <bitcrusher_rs_pedal_init+0x44>)
 800107c:	f103 0420 	add.w	r4, r3, #32
 8001080:	4613      	mov	r3, r2
 8001082:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001084:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_1] = (float_parameter_t){0.5F, 0.F, 1.F, 0.1F};
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4a0b      	ldr	r2, [pc, #44]	; (80010b8 <bitcrusher_rs_pedal_init+0x48>)
 800108c:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8001090:	4613      	mov	r3, r2
 8001092:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001094:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_2] = (float_parameter_t){0.5F, 0.F, 1.F, 0.1F};
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	4a07      	ldr	r2, [pc, #28]	; (80010b8 <bitcrusher_rs_pedal_init+0x48>)
 800109c:	f103 0480 	add.w	r4, r3, #128	; 0x80
 80010a0:	4613      	mov	r3, r2
 80010a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80010a8:	bf00      	nop
 80010aa:	3738      	adds	r7, #56	; 0x38
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bc90      	pop	{r4, r7}
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	0800b7e0 	.word	0x0800b7e0
 80010b8:	0800b7f0 	.word	0x0800b7f0

080010bc <bitcrusher_rs_process>:

float bitcrusher_rs_process(float in, pedal_config_t *conf) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	ed87 0a01 	vstr	s0, [r7, #4]
 80010c6:	6038      	str	r0, [r7, #0]
    int16_t shift = conf->int_params[REDUCT_INTENSITY].value;
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	6a1b      	ldr	r3, [r3, #32]
 80010cc:	81fb      	strh	r3, [r7, #14]
    int16_t _out = (int16_t)in;
 80010ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80010d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010d6:	ee17 3a90 	vmov	r3, s15
 80010da:	81bb      	strh	r3, [r7, #12]
    _out = _out >> shift;
 80010dc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80010e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010e4:	fa42 f303 	asr.w	r3, r2, r3
 80010e8:	81bb      	strh	r3, [r7, #12]
    _out = _out << shift;
 80010ea:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80010ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	81bb      	strh	r3, [r7, #12]
    _out += (2 << shift -2);
 80010f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010fc:	3b02      	subs	r3, #2
 80010fe:	2202      	movs	r2, #2
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	b29a      	uxth	r2, r3
 8001106:	89bb      	ldrh	r3, [r7, #12]
 8001108:	4413      	add	r3, r2
 800110a:	b29b      	uxth	r3, r3
 800110c:	81bb      	strh	r3, [r7, #12]
    float out = (float)_out;
 800110e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001112:	ee07 3a90 	vmov	s15, r3
 8001116:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800111a:	edc7 7a02 	vstr	s15, [r7, #8]
    out = mix(out, in, conf->float_params[BALANCE_1].value, conf->float_params[BALANCE_2].value);
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 800112a:	eef0 1a47 	vmov.f32	s3, s14
 800112e:	eeb0 1a67 	vmov.f32	s2, s15
 8001132:	edd7 0a01 	vldr	s1, [r7, #4]
 8001136:	ed97 0a02 	vldr	s0, [r7, #8]
 800113a:	f000 facd 	bl	80016d8 <mix>
 800113e:	ed87 0a02 	vstr	s0, [r7, #8]
    return out;
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	ee07 3a90 	vmov	s15, r3
}
 8001148:	eeb0 0a67 	vmov.f32	s0, s15
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
	...

08001154 <tremolo_pedal_init>:

// TREMOLO

void tremolo_pedal_init(pedal_config_t *conf) {
 8001154:	b490      	push	{r4, r7}
 8001156:	b092      	sub	sp, #72	; 0x48
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
    conf->int_params[COUNTER] = (int_parameter_t){0, 1, 0, 0};
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2200      	movs	r2, #0
 8001160:	611a      	str	r2, [r3, #16]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2201      	movs	r2, #1
 8001166:	615a      	str	r2, [r3, #20]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2200      	movs	r2, #0
 800116c:	619a      	str	r2, [r3, #24]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2200      	movs	r2, #0
 8001172:	61da      	str	r2, [r3, #28]
    conf->float_params[SPEED] = (float_parameter_t){2.F, 0.1F, 10.F, 0.1F};
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4a0e      	ldr	r2, [pc, #56]	; (80011b0 <tremolo_pedal_init+0x5c>)
 8001178:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 800117c:	4613      	mov	r3, r2
 800117e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001180:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_1] = (float_parameter_t){0.2F, 0.F, 1.F, 0.1F};
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4a0b      	ldr	r2, [pc, #44]	; (80011b4 <tremolo_pedal_init+0x60>)
 8001188:	f103 0470 	add.w	r4, r3, #112	; 0x70
 800118c:	4613      	mov	r3, r2
 800118e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001190:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_2] = (float_parameter_t){0.8F, 0.F, 1.F, 0.1F};
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4a08      	ldr	r2, [pc, #32]	; (80011b8 <tremolo_pedal_init+0x64>)
 8001198:	f103 0480 	add.w	r4, r3, #128	; 0x80
 800119c:	4613      	mov	r3, r2
 800119e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80011a4:	bf00      	nop
 80011a6:	3748      	adds	r7, #72	; 0x48
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc90      	pop	{r4, r7}
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	0800b800 	.word	0x0800b800
 80011b4:	0800b810 	.word	0x0800b810
 80011b8:	0800b820 	.word	0x0800b820

080011bc <tremolo_process>:

float tremolo_process(float in, pedal_config_t *conf) {
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	ed87 0a01 	vstr	s0, [r7, #4]
 80011c6:	6038      	str	r0, [r7, #0]
    float tone = 440.0F;
 80011c8:	4b1c      	ldr	r3, [pc, #112]	; (800123c <tremolo_process+0x80>)
 80011ca:	60fb      	str	r3, [r7, #12]
    float out = in * wave_gen('s', conf->int_params[COUNTER].value, tone * conf->float_params[SPEED].value);
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	691b      	ldr	r3, [r3, #16]
 80011d0:	461a      	mov	r2, r3
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 80011d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80011dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011e0:	eeb0 0a67 	vmov.f32	s0, s15
 80011e4:	4611      	mov	r1, r2
 80011e6:	2073      	movs	r0, #115	; 0x73
 80011e8:	f000 fb42 	bl	8001870 <wave_gen>
 80011ec:	eeb0 7a40 	vmov.f32	s14, s0
 80011f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80011f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011f8:	edc7 7a02 	vstr	s15, [r7, #8]
    conf->int_params[COUNTER].value++;
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	691b      	ldr	r3, [r3, #16]
 8001200:	1c5a      	adds	r2, r3, #1
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	611a      	str	r2, [r3, #16]
    out = mix(out, in, conf->float_params[BALANCE_1].value, conf->float_params[BALANCE_2].value);
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8001212:	eef0 1a47 	vmov.f32	s3, s14
 8001216:	eeb0 1a67 	vmov.f32	s2, s15
 800121a:	edd7 0a01 	vldr	s1, [r7, #4]
 800121e:	ed97 0a02 	vldr	s0, [r7, #8]
 8001222:	f000 fa59 	bl	80016d8 <mix>
 8001226:	ed87 0a02 	vstr	s0, [r7, #8]
    return out;
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	ee07 3a90 	vmov	s15, r3
}
 8001230:	eeb0 0a67 	vmov.f32	s0, s15
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	43dc0000 	.word	0x43dc0000

08001240 <overdrive_sqrt_pedal_init>:

// OVERDRIVE_SQRT

void overdrive_sqrt_pedal_init(pedal_config_t *conf) {
 8001240:	b490      	push	{r4, r7}
 8001242:	b092      	sub	sp, #72	; 0x48
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
    conf->float_params[INTENSITY] = (float_parameter_t){500.F, 0.F, 2000.F, 100.F};
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4a12      	ldr	r2, [pc, #72]	; (8001294 <overdrive_sqrt_pedal_init+0x54>)
 800124c:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8001250:	4613      	mov	r3, r2
 8001252:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001254:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[THRESHOLD_HIGH] = (float_parameter_t){32767.F, 0.F, 32767.F, 1.F};
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4a0f      	ldr	r2, [pc, #60]	; (8001298 <overdrive_sqrt_pedal_init+0x58>)
 800125c:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8001260:	4613      	mov	r3, r2
 8001262:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001264:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_1] = (float_parameter_t){0.25F, 0.F, 1.F, 0.1F};
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4a0c      	ldr	r2, [pc, #48]	; (800129c <overdrive_sqrt_pedal_init+0x5c>)
 800126c:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8001270:	4613      	mov	r3, r2
 8001272:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001274:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_2] = (float_parameter_t){0.75F, 0.F, 1.F, 0.1F};
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	4a09      	ldr	r2, [pc, #36]	; (80012a0 <overdrive_sqrt_pedal_init+0x60>)
 800127c:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8001280:	4613      	mov	r3, r2
 8001282:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001284:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001288:	bf00      	nop
 800128a:	3748      	adds	r7, #72	; 0x48
 800128c:	46bd      	mov	sp, r7
 800128e:	bc90      	pop	{r4, r7}
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	0800b830 	.word	0x0800b830
 8001298:	0800b7a0 	.word	0x0800b7a0
 800129c:	0800b840 	.word	0x0800b840
 80012a0:	0800b850 	.word	0x0800b850

080012a4 <overdrive_sqrt_process>:

float overdrive_sqrt_process(float in, pedal_config_t *conf) {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	ed87 0a01 	vstr	s0, [r7, #4]
 80012ae:	6038      	str	r0, [r7, #0]
    float out;
    if (in > 0.0F) {
 80012b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80012b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012bc:	dd06      	ble.n	80012cc <overdrive_sqrt_process+0x28>
        out = square_root(in);
 80012be:	ed97 0a01 	vldr	s0, [r7, #4]
 80012c2:	f000 faa4 	bl	800180e <square_root>
 80012c6:	ed87 0a03 	vstr	s0, [r7, #12]
 80012ca:	e00d      	b.n	80012e8 <overdrive_sqrt_process+0x44>
    } else {
        out = -square_root(-in);
 80012cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80012d0:	eef1 7a67 	vneg.f32	s15, s15
 80012d4:	eeb0 0a67 	vmov.f32	s0, s15
 80012d8:	f000 fa99 	bl	800180e <square_root>
 80012dc:	eef0 7a40 	vmov.f32	s15, s0
 80012e0:	eef1 7a67 	vneg.f32	s15, s15
 80012e4:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    out = out * conf->float_params[INTENSITY].value;
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80012ee:	ed97 7a03 	vldr	s14, [r7, #12]
 80012f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012f6:	edc7 7a03 	vstr	s15, [r7, #12]
    out = hard_clip(out, conf->float_params[THRESHOLD_HIGH].value);
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001300:	eef0 0a67 	vmov.f32	s1, s15
 8001304:	ed97 0a03 	vldr	s0, [r7, #12]
 8001308:	f000 fa06 	bl	8001718 <hard_clip>
 800130c:	ed87 0a03 	vstr	s0, [r7, #12]
    out = mix(out, in, conf->float_params[BALANCE_1].value, conf->float_params[BALANCE_2].value);
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 800131c:	eef0 1a47 	vmov.f32	s3, s14
 8001320:	eeb0 1a67 	vmov.f32	s2, s15
 8001324:	edd7 0a01 	vldr	s1, [r7, #4]
 8001328:	ed97 0a03 	vldr	s0, [r7, #12]
 800132c:	f000 f9d4 	bl	80016d8 <mix>
 8001330:	ed87 0a03 	vstr	s0, [r7, #12]
    return out;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	ee07 3a90 	vmov	s15, r3
}
 800133a:	eeb0 0a67 	vmov.f32	s0, s15
 800133e:	3710      	adds	r7, #16
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <amplifier_pedal_init>:

// AMPLIFIER

void amplifier_pedal_init(pedal_config_t *conf) {
 8001344:	b490      	push	{r4, r7}
 8001346:	b08a      	sub	sp, #40	; 0x28
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
    conf->float_params[INTENSITY] = (float_parameter_t){0.5F, 0.1F, 10.F, 0.1F};
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4a0a      	ldr	r2, [pc, #40]	; (8001378 <amplifier_pedal_init+0x34>)
 8001350:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8001354:	4613      	mov	r3, r2
 8001356:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001358:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[THRESHOLD_HIGH] = (float_parameter_t){32767.F, 0.F, 32767.F, 1.F};
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4a07      	ldr	r2, [pc, #28]	; (800137c <amplifier_pedal_init+0x38>)
 8001360:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8001364:	4613      	mov	r3, r2
 8001366:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001368:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800136c:	bf00      	nop
 800136e:	3728      	adds	r7, #40	; 0x28
 8001370:	46bd      	mov	sp, r7
 8001372:	bc90      	pop	{r4, r7}
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	0800b860 	.word	0x0800b860
 800137c:	0800b7a0 	.word	0x0800b7a0

08001380 <amplifier_process>:

float amplifier_process(float in, pedal_config_t *conf) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	ed87 0a01 	vstr	s0, [r7, #4]
 800138a:	6038      	str	r0, [r7, #0]
    float out = in * conf->float_params[INTENSITY].value;
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001392:	ed97 7a01 	vldr	s14, [r7, #4]
 8001396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800139a:	edc7 7a03 	vstr	s15, [r7, #12]
    out = hard_clip(out, conf->float_params[THRESHOLD_HIGH].value);
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80013a4:	eef0 0a67 	vmov.f32	s1, s15
 80013a8:	ed97 0a03 	vldr	s0, [r7, #12]
 80013ac:	f000 f9b4 	bl	8001718 <hard_clip>
 80013b0:	ed87 0a03 	vstr	s0, [r7, #12]
    return out;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	ee07 3a90 	vmov	s15, r3
}
 80013ba:	eeb0 0a67 	vmov.f32	s0, s15
 80013be:	3710      	adds	r7, #16
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <dyn_amplifier_pedal_init>:

// DYN_AMPLIFIER

void dyn_amplifier_pedal_init(pedal_config_t *conf) {
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
    //conf->float_params[GAIN_INTENSITY] = (float_parameter_t){1000, 0.1, 10, 0.1};
    //conf->float_params[CLIP_THRESHOLD] = (float_parameter_t){32767, 0, 32767, 1};
    //conf->float_params[SOFT_THRESHOLD] = (float_parameter_t){28000, 0, 32767, 1};
    //conf->float_params[BALANCE] = (float_parameter_t){0.5, 0, 1, 0.1};
}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <dyn_amplifier_process>:

float dyn_amplifier_process(float in, pedal_config_t *conf) {
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	ed87 0a01 	vstr	s0, [r7, #4]
 80013e2:	6038      	str	r0, [r7, #0]
    //    else if (max < conf->float_params[SOFT_THRESHOLD].value) dyn += 0.01;
    //    max = 0;
    //}
    //out = hard_clip(out, conf->float_params[CLIP_THRESHOLD].value);
    //return out;
    return in;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	ee07 3a90 	vmov	s15, r3
}
 80013ea:	eeb0 0a67 	vmov.f32	s0, s15
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <low_pass_filter_pedal_init>:

// LPF

void low_pass_filter_pedal_init(pedal_config_t *conf) {
 80013f8:	b490      	push	{r4, r7}
 80013fa:	b092      	sub	sp, #72	; 0x48
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
    conf->float_params[INTENSITY] = (float_parameter_t){0.9F, 0.0F, 1.0F, 0.01F};
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4a11      	ldr	r2, [pc, #68]	; (8001448 <low_pass_filter_pedal_init+0x50>)
 8001404:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8001408:	4613      	mov	r3, r2
 800140a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800140c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_1] = (float_parameter_t){1.F, 0.F, 1.F, 0.1F};
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	4a0e      	ldr	r2, [pc, #56]	; (800144c <low_pass_filter_pedal_init+0x54>)
 8001414:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8001418:	4613      	mov	r3, r2
 800141a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800141c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_2] = (float_parameter_t){0.F, 0.F, 1.F, 0.1F};
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4a0b      	ldr	r2, [pc, #44]	; (8001450 <low_pass_filter_pedal_init+0x58>)
 8001424:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8001428:	4613      	mov	r3, r2
 800142a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800142c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[PAST] = (float_parameter_t){0.F, 0.F, 0.F, 0.F};
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	33b0      	adds	r3, #176	; 0xb0
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
}
 800143e:	bf00      	nop
 8001440:	3748      	adds	r7, #72	; 0x48
 8001442:	46bd      	mov	sp, r7
 8001444:	bc90      	pop	{r4, r7}
 8001446:	4770      	bx	lr
 8001448:	0800b870 	.word	0x0800b870
 800144c:	0800b7c0 	.word	0x0800b7c0
 8001450:	0800b7d0 	.word	0x0800b7d0

08001454 <low_pass_filter_process>:

float low_pass_filter_process(float in, pedal_config_t *conf) {
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	ed87 0a01 	vstr	s0, [r7, #4]
 800145e:	6038      	str	r0, [r7, #0]
    float alpha = conf->float_params[INTENSITY].value;
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001464:	60fb      	str	r3, [r7, #12]
    float out = conf->float_params[PAST].value * alpha + (1.F - alpha) * in;
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 800146c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001470:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001474:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001478:	edd7 7a03 	vldr	s15, [r7, #12]
 800147c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001480:	edd7 7a01 	vldr	s15, [r7, #4]
 8001484:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001488:	ee77 7a27 	vadd.f32	s15, s14, s15
 800148c:	edc7 7a02 	vstr	s15, [r7, #8]
    conf->float_params[PAST].value = out;
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	68ba      	ldr	r2, [r7, #8]
 8001494:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    out = mix(out, in, conf->float_params[BALANCE_1].value, conf->float_params[BALANCE_2].value);
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 80014a4:	eef0 1a47 	vmov.f32	s3, s14
 80014a8:	eeb0 1a67 	vmov.f32	s2, s15
 80014ac:	edd7 0a01 	vldr	s1, [r7, #4]
 80014b0:	ed97 0a02 	vldr	s0, [r7, #8]
 80014b4:	f000 f910 	bl	80016d8 <mix>
 80014b8:	ed87 0a02 	vstr	s0, [r7, #8]
    return out;
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	ee07 3a90 	vmov	s15, r3
}
 80014c2:	eeb0 0a67 	vmov.f32	s0, s15
 80014c6:	3710      	adds	r7, #16
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <fuzz_pedal_init>:

// FUZZ

void fuzz_pedal_init(pedal_config_t *conf) {
 80014cc:	b490      	push	{r4, r7}
 80014ce:	b09e      	sub	sp, #120	; 0x78
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
    conf->int_params[COUNTER] = (int_parameter_t){0, 1, 0, 0};
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	611a      	str	r2, [r3, #16]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2201      	movs	r2, #1
 80014de:	615a      	str	r2, [r3, #20]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2200      	movs	r2, #0
 80014e4:	619a      	str	r2, [r3, #24]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	61da      	str	r2, [r3, #28]
    conf->float_params[INTENSITY] = (float_parameter_t){4.F, 1.F, 10.F, 0.5F};
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4a1a      	ldr	r2, [pc, #104]	; (8001558 <fuzz_pedal_init+0x8c>)
 80014f0:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80014f4:	4613      	mov	r3, r2
 80014f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[THRESHOLD_HIGH] = (float_parameter_t){32767.F, 0.F, 32767.F, 1.F};
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4a17      	ldr	r2, [pc, #92]	; (800155c <fuzz_pedal_init+0x90>)
 8001500:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8001504:	4613      	mov	r3, r2
 8001506:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001508:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[HEIGHT] = (float_parameter_t){2048.F, 0.F, 8192.F, 32.F};
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4a14      	ldr	r2, [pc, #80]	; (8001560 <fuzz_pedal_init+0x94>)
 8001510:	f103 0490 	add.w	r4, r3, #144	; 0x90
 8001514:	4613      	mov	r3, r2
 8001516:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001518:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[SPEED] = (float_parameter_t){1.F, 0.1F, 10.F, 0.1F};
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4a11      	ldr	r2, [pc, #68]	; (8001564 <fuzz_pedal_init+0x98>)
 8001520:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8001524:	4613      	mov	r3, r2
 8001526:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001528:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_1] = (float_parameter_t){1.F, 0.F, 1.F, 0.1F};
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4a0e      	ldr	r2, [pc, #56]	; (8001568 <fuzz_pedal_init+0x9c>)
 8001530:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8001534:	4613      	mov	r3, r2
 8001536:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001538:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_2] = (float_parameter_t){0.F, 0.F, 1.F, 0.1F};
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4a0b      	ldr	r2, [pc, #44]	; (800156c <fuzz_pedal_init+0xa0>)
 8001540:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8001544:	4613      	mov	r3, r2
 8001546:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001548:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800154c:	bf00      	nop
 800154e:	3778      	adds	r7, #120	; 0x78
 8001550:	46bd      	mov	sp, r7
 8001552:	bc90      	pop	{r4, r7}
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	0800b790 	.word	0x0800b790
 800155c:	0800b7a0 	.word	0x0800b7a0
 8001560:	0800b880 	.word	0x0800b880
 8001564:	0800b890 	.word	0x0800b890
 8001568:	0800b7c0 	.word	0x0800b7c0
 800156c:	0800b7d0 	.word	0x0800b7d0

08001570 <fuzz_process>:

float fuzz_process(float in, pedal_config_t *conf) {
 8001570:	b580      	push	{r7, lr}
 8001572:	b088      	sub	sp, #32
 8001574:	af00      	add	r7, sp, #0
 8001576:	ed87 0a01 	vstr	s0, [r7, #4]
 800157a:	6038      	str	r0, [r7, #0]
    float out = in * conf->float_params[INTENSITY].value;
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001582:	ed97 7a01 	vldr	s14, [r7, #4]
 8001586:	ee67 7a27 	vmul.f32	s15, s14, s15
 800158a:	edc7 7a07 	vstr	s15, [r7, #28]
    float threshold_high = conf->float_params[THRESHOLD_HIGH].value;
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001592:	61bb      	str	r3, [r7, #24]
    float height = conf->float_params[HEIGHT].value;
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800159a:	617b      	str	r3, [r7, #20]
    float speed = conf->float_params[SPEED].value;
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80015a2:	613b      	str	r3, [r7, #16]
    float tone = 440.0F;
 80015a4:	4b3e      	ldr	r3, [pc, #248]	; (80016a0 <fuzz_process+0x130>)
 80015a6:	60fb      	str	r3, [r7, #12]

    out = hard_clip(out, threshold_high);
 80015a8:	edd7 0a06 	vldr	s1, [r7, #24]
 80015ac:	ed97 0a07 	vldr	s0, [r7, #28]
 80015b0:	f000 f8b2 	bl	8001718 <hard_clip>
 80015b4:	ed87 0a07 	vstr	s0, [r7, #28]
    if (out == threshold_high) {
 80015b8:	ed97 7a07 	vldr	s14, [r7, #28]
 80015bc:	edd7 7a06 	vldr	s15, [r7, #24]
 80015c0:	eeb4 7a67 	vcmp.f32	s14, s15
 80015c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c8:	d11e      	bne.n	8001608 <fuzz_process+0x98>
        out += (wave_gen('s', conf->int_params[COUNTER].value, tone * speed) - 1) * height;
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	691b      	ldr	r3, [r3, #16]
 80015ce:	ed97 7a03 	vldr	s14, [r7, #12]
 80015d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80015d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015da:	eeb0 0a67 	vmov.f32	s0, s15
 80015de:	4619      	mov	r1, r3
 80015e0:	2073      	movs	r0, #115	; 0x73
 80015e2:	f000 f945 	bl	8001870 <wave_gen>
 80015e6:	eef0 7a40 	vmov.f32	s15, s0
 80015ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015ee:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80015f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80015f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015fa:	ed97 7a07 	vldr	s14, [r7, #28]
 80015fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001602:	edc7 7a07 	vstr	s15, [r7, #28]
 8001606:	e02c      	b.n	8001662 <fuzz_process+0xf2>
    } else if (out == - threshold_high - 1.F) {
 8001608:	edd7 7a06 	vldr	s15, [r7, #24]
 800160c:	eef1 7a67 	vneg.f32	s15, s15
 8001610:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001614:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001618:	ed97 7a07 	vldr	s14, [r7, #28]
 800161c:	eeb4 7a67 	vcmp.f32	s14, s15
 8001620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001624:	d11d      	bne.n	8001662 <fuzz_process+0xf2>
        out += (wave_gen('s', conf->int_params[COUNTER].value, tone * speed) + 1) * height;
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	691b      	ldr	r3, [r3, #16]
 800162a:	ed97 7a03 	vldr	s14, [r7, #12]
 800162e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001636:	eeb0 0a67 	vmov.f32	s0, s15
 800163a:	4619      	mov	r1, r3
 800163c:	2073      	movs	r0, #115	; 0x73
 800163e:	f000 f917 	bl	8001870 <wave_gen>
 8001642:	eef0 7a40 	vmov.f32	s15, s0
 8001646:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800164a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800164e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001656:	ed97 7a07 	vldr	s14, [r7, #28]
 800165a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800165e:	edc7 7a07 	vstr	s15, [r7, #28]
    }
    conf->int_params[COUNTER].value++;
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	691b      	ldr	r3, [r3, #16]
 8001666:	1c5a      	adds	r2, r3, #1
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	611a      	str	r2, [r3, #16]
    out = mix(out, in, conf->float_params[BALANCE_1].value, conf->float_params[BALANCE_2].value);
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8001678:	eef0 1a47 	vmov.f32	s3, s14
 800167c:	eeb0 1a67 	vmov.f32	s2, s15
 8001680:	edd7 0a01 	vldr	s1, [r7, #4]
 8001684:	ed97 0a07 	vldr	s0, [r7, #28]
 8001688:	f000 f826 	bl	80016d8 <mix>
 800168c:	ed87 0a07 	vstr	s0, [r7, #28]
    return out;
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	ee07 3a90 	vmov	s15, r3
}
 8001696:	eeb0 0a67 	vmov.f32	s0, s15
 800169a:	3720      	adds	r7, #32
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	43dc0000 	.word	0x43dc0000

080016a4 <bypass_pedal_init>:

// BYPASS

void bypass_pedal_init(pedal_config_t *conf) {
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
    return;
 80016ac:	bf00      	nop
}
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <bypass_process>:

float bypass_process(float in, pedal_config_t *conf) {
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	ed87 0a01 	vstr	s0, [r7, #4]
 80016c2:	6038      	str	r0, [r7, #0]
    return in;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	ee07 3a90 	vmov	s15, r3
}
 80016ca:	eeb0 0a67 	vmov.f32	s0, s15
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <mix>:


float mix(float in_1, float in_2, float balance_1, float balance_2) {
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	ed87 0a03 	vstr	s0, [r7, #12]
 80016e2:	edc7 0a02 	vstr	s1, [r7, #8]
 80016e6:	ed87 1a01 	vstr	s2, [r7, #4]
 80016ea:	edc7 1a00 	vstr	s3, [r7]
    return in_1 * balance_1 + in_2 * balance_2;
 80016ee:	ed97 7a03 	vldr	s14, [r7, #12]
 80016f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80016f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016fa:	edd7 6a02 	vldr	s13, [r7, #8]
 80016fe:	edd7 7a00 	vldr	s15, [r7]
 8001702:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001706:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800170a:	eeb0 0a67 	vmov.f32	s0, s15
 800170e:	3714      	adds	r7, #20
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <hard_clip>:

float hard_clip(float in, float clip_threshold) {
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001722:	edc7 0a00 	vstr	s1, [r7]
    if (in > clip_threshold) {
 8001726:	ed97 7a01 	vldr	s14, [r7, #4]
 800172a:	edd7 7a00 	vldr	s15, [r7]
 800172e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001736:	dd02      	ble.n	800173e <hard_clip+0x26>
        return clip_threshold;
 8001738:	edd7 7a00 	vldr	s15, [r7]
 800173c:	e015      	b.n	800176a <hard_clip+0x52>
    } else if (in < -clip_threshold) {
 800173e:	edd7 7a00 	vldr	s15, [r7]
 8001742:	eef1 7a67 	vneg.f32	s15, s15
 8001746:	ed97 7a01 	vldr	s14, [r7, #4]
 800174a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800174e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001752:	d508      	bpl.n	8001766 <hard_clip+0x4e>
        return -clip_threshold - 1;
 8001754:	edd7 7a00 	vldr	s15, [r7]
 8001758:	eef1 7a67 	vneg.f32	s15, s15
 800175c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001760:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001764:	e001      	b.n	800176a <hard_clip+0x52>
    }
    return in;
 8001766:	edd7 7a01 	vldr	s15, [r7, #4]
}
 800176a:	eeb0 0a67 	vmov.f32	s0, s15
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <soft_clip>:

float soft_clip(float in, float soft_threshold, float softener) {
 8001778:	b480      	push	{r7}
 800177a:	b087      	sub	sp, #28
 800177c:	af00      	add	r7, sp, #0
 800177e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001782:	edc7 0a02 	vstr	s1, [r7, #8]
 8001786:	ed87 1a01 	vstr	s2, [r7, #4]
    float out;
    if (in > soft_threshold) {
 800178a:	ed97 7a03 	vldr	s14, [r7, #12]
 800178e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001792:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800179a:	dd10      	ble.n	80017be <soft_clip+0x46>
        out = soft_threshold + (in - soft_threshold) / softener;
 800179c:	ed97 7a03 	vldr	s14, [r7, #12]
 80017a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80017a4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80017a8:	ed97 7a01 	vldr	s14, [r7, #4]
 80017ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017b0:	ed97 7a02 	vldr	s14, [r7, #8]
 80017b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017b8:	edc7 7a05 	vstr	s15, [r7, #20]
 80017bc:	e01d      	b.n	80017fa <soft_clip+0x82>
    } else if (in < -soft_threshold) {
 80017be:	edd7 7a02 	vldr	s15, [r7, #8]
 80017c2:	eef1 7a67 	vneg.f32	s15, s15
 80017c6:	ed97 7a03 	vldr	s14, [r7, #12]
 80017ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017d2:	d510      	bpl.n	80017f6 <soft_clip+0x7e>
        out = -soft_threshold + (in + soft_threshold) / softener;
 80017d4:	ed97 7a03 	vldr	s14, [r7, #12]
 80017d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80017dc:	ee77 6a27 	vadd.f32	s13, s14, s15
 80017e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80017e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80017e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80017ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017f0:	edc7 7a05 	vstr	s15, [r7, #20]
 80017f4:	e001      	b.n	80017fa <soft_clip+0x82>
    } else {
        out = in;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	617b      	str	r3, [r7, #20]
    }
    return out;
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	ee07 3a90 	vmov	s15, r3
}
 8001800:	eeb0 0a67 	vmov.f32	s0, s15
 8001804:	371c      	adds	r7, #28
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <square_root>:

float square_root(float in) {
 800180e:	b480      	push	{r7}
 8001810:	b085      	sub	sp, #20
 8001812:	af00      	add	r7, sp, #0
 8001814:	ed87 0a01 	vstr	s0, [r7, #4]
    float out;
    out = in * 0.5F;
 8001818:	edd7 7a01 	vldr	s15, [r7, #4]
 800181c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001820:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001824:	edc7 7a03 	vstr	s15, [r7, #12]
    for (u_int8_t i = 0; i < 8; i++) {
 8001828:	2300      	movs	r3, #0
 800182a:	72fb      	strb	r3, [r7, #11]
 800182c:	e012      	b.n	8001854 <square_root+0x46>
        out = 0.5F * (out + (in / out));
 800182e:	edd7 6a01 	vldr	s13, [r7, #4]
 8001832:	edd7 7a03 	vldr	s15, [r7, #12]
 8001836:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800183a:	edd7 7a03 	vldr	s15, [r7, #12]
 800183e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001842:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001846:	ee67 7a87 	vmul.f32	s15, s15, s14
 800184a:	edc7 7a03 	vstr	s15, [r7, #12]
    for (u_int8_t i = 0; i < 8; i++) {
 800184e:	7afb      	ldrb	r3, [r7, #11]
 8001850:	3301      	adds	r3, #1
 8001852:	72fb      	strb	r3, [r7, #11]
 8001854:	7afb      	ldrb	r3, [r7, #11]
 8001856:	2b07      	cmp	r3, #7
 8001858:	d9e9      	bls.n	800182e <square_root+0x20>
    }
    return out;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	ee07 3a90 	vmov	s15, r3
}
 8001860:	eeb0 0a67 	vmov.f32	s0, s15
 8001864:	3714      	adds	r7, #20
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
	...

08001870 <wave_gen>:

float wave_gen(char t, u_int32_t i, float tone) {
 8001870:	b580      	push	{r7, lr}
 8001872:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 8001876:	af00      	add	r7, sp, #0
 8001878:	4602      	mov	r2, r0
 800187a:	f107 0308 	add.w	r3, r7, #8
 800187e:	6019      	str	r1, [r3, #0]
 8001880:	1d3b      	adds	r3, r7, #4
 8001882:	ed83 0a00 	vstr	s0, [r3]
 8001886:	f107 030f 	add.w	r3, r7, #15
 800188a:	701a      	strb	r2, [r3, #0]

    float sin_table[128] = { 0.000000F, 0.024541F, 0.049068F, 0.073565F, 0.098017F, 0.122411F, 0.146730F, 0.170962F, 0.195090F, 0.219101F, 0.242980F, 0.266713F, 0.290284F, 0.313681F, 0.336890F, 0.359895F, 0.382683F, 0.405241F, 0.427555F, 0.449611F, 0.471396F, 0.492898F, 0.514102F, 0.534997F, 0.555570F, 0.575808F, 0.595699F, 0.615231F, 0.634393F, 0.653172F, 0.671559F, 0.689540F, 0.707106F, 0.724247F, 0.740951F, 0.757208F, 0.773010F, 0.788346F, 0.803207F, 0.817584F, 0.831469F, 0.844853F, 0.857728F, 0.870087F, 0.881921F, 0.893224F, 0.903989F, 0.914209F, 0.923879F, 0.932992F, 0.941544F, 0.949528F, 0.956940F, 0.963776F, 0.970031F, 0.975702F, 0.980785F, 0.985277F, 0.989176F, 0.992479F, 0.995185F, 0.997290F, 0.998795F, 0.999699F, 1.000000F, 0.999699F, 0.998796F, 0.997291F, 0.995185F, 0.992480F, 0.989177F, 0.985278F, 0.980786F, 0.975702F, 0.970032F, 0.963776F, 0.956941F, 0.949529F, 0.941545F, 0.932993F, 0.923880F, 0.914210F, 0.903990F, 0.893225F, 0.881922F, 0.870088F, 0.857729F, 0.844855F, 0.831471F, 0.817586F, 0.803209F, 0.788348F, 0.773012F, 0.757210F, 0.740952F, 0.724248F, 0.707108F, 0.689542F, 0.671560F, 0.653174F, 0.634395F, 0.615233F, 0.595701F, 0.575810F, 0.555572F, 0.534999F, 0.514105F, 0.492900F, 0.471399F, 0.449613F, 0.427557F, 0.405243F, 0.382685F, 0.359897F, 0.336892F, 0.313684F, 0.290287F, 0.266715F, 0.242982F, 0.219104F, 0.195093F, 0.170964F, 0.146733F, 0.122413F, 0.098019F, 0.073567F, 0.049070F, 0.024544F };
 800188c:	f107 0314 	add.w	r3, r7, #20
 8001890:	4a2c      	ldr	r2, [pc, #176]	; (8001944 <wave_gen+0xd4>)
 8001892:	4618      	mov	r0, r3
 8001894:	4611      	mov	r1, r2
 8001896:	f44f 7300 	mov.w	r3, #512	; 0x200
 800189a:	461a      	mov	r2, r3
 800189c:	f009 fe8e 	bl	800b5bc <memcpy>
    float period_f = 48000.F / tone;
 80018a0:	1d3b      	adds	r3, r7, #4
 80018a2:	eddf 6a29 	vldr	s13, [pc, #164]	; 8001948 <wave_gen+0xd8>
 80018a6:	ed93 7a00 	vldr	s14, [r3]
 80018aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018ae:	edc7 7a87 	vstr	s15, [r7, #540]	; 0x21c
    u_int32_t period_i = period_f;
 80018b2:	edd7 7a87 	vldr	s15, [r7, #540]	; 0x21c
 80018b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018ba:	ee17 3a90 	vmov	r3, s15
 80018be:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
    u_int32_t table_index = (i * 256 / period_i) % 256;
 80018c2:	f107 0308 	add.w	r3, r7, #8
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	021a      	lsls	r2, r3, #8
 80018ca:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80018ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214

    if (t == 's') {
 80018d8:	f107 030f 	add.w	r3, r7, #15
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	2b73      	cmp	r3, #115	; 0x73
 80018e0:	d118      	bne.n	8001914 <wave_gen+0xa4>
        if (table_index <= 127) {
 80018e2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80018e6:	2b7f      	cmp	r3, #127	; 0x7f
 80018e8:	d808      	bhi.n	80018fc <wave_gen+0x8c>
            return sin_table[table_index];
 80018ea:	f107 0214 	add.w	r2, r7, #20
 80018ee:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	4413      	add	r3, r2
 80018f6:	edd3 7a00 	vldr	s15, [r3]
 80018fa:	e01c      	b.n	8001936 <wave_gen+0xc6>
        } else {
            return -sin_table[table_index - 128];
 80018fc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001900:	3b80      	subs	r3, #128	; 0x80
 8001902:	f107 0214 	add.w	r2, r7, #20
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	4413      	add	r3, r2
 800190a:	edd3 7a00 	vldr	s15, [r3]
 800190e:	eef1 7a67 	vneg.f32	s15, s15
 8001912:	e010      	b.n	8001936 <wave_gen+0xc6>
        }
    } else if (t == 'q') {
 8001914:	f107 030f 	add.w	r3, r7, #15
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	2b71      	cmp	r3, #113	; 0x71
 800191c:	d109      	bne.n	8001932 <wave_gen+0xc2>
        if (table_index <= 127) {
 800191e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001922:	2b7f      	cmp	r3, #127	; 0x7f
 8001924:	d802      	bhi.n	800192c <wave_gen+0xbc>
            return -1.F;
 8001926:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800192a:	e004      	b.n	8001936 <wave_gen+0xc6>
        } else {
            return 1.F;
 800192c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001930:	e001      	b.n	8001936 <wave_gen+0xc6>
        }
    } else {
        return 0;
 8001932:	eddf 7a06 	vldr	s15, [pc, #24]	; 800194c <wave_gen+0xdc>
    }
}
 8001936:	eeb0 0a67 	vmov.f32	s0, s15
 800193a:	f507 7708 	add.w	r7, r7, #544	; 0x220
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	0800b8a0 	.word	0x0800b8a0
 8001948:	473b8000 	.word	0x473b8000
 800194c:	00000000 	.word	0x00000000

08001950 <pedalboard_append>:



// PEDALBOARD

void pedalboard_append(pedalboard_t *p_pb, enum pedal_types type) {
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	460b      	mov	r3, r1
 800195a:	70fb      	strb	r3, [r7, #3]
    u_int8_t i = p_pb->active_pedals;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	73fb      	strb	r3, [r7, #15]

    if (p_pb->active_pedals < MAX_PEDALS_COUNT) {
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	2b07      	cmp	r3, #7
 8001968:	f200 80dd 	bhi.w	8001b26 <pedalboard_append+0x1d6>
        u_int8_t i = p_pb->active_pedals;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	73bb      	strb	r3, [r7, #14]
        p_pb->pedals[i].type = type;
 8001972:	7bbb      	ldrb	r3, [r7, #14]
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	21c8      	movs	r1, #200	; 0xc8
 8001978:	fb01 f303 	mul.w	r3, r1, r3
 800197c:	4413      	add	r3, r2
 800197e:	33c4      	adds	r3, #196	; 0xc4
 8001980:	78fa      	ldrb	r2, [r7, #3]
 8001982:	701a      	strb	r2, [r3, #0]

        if (type == AMPLIFIER)
 8001984:	78fb      	ldrb	r3, [r7, #3]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d113      	bne.n	80019b2 <pedalboard_append+0x62>
        {
            amplifier_pedal_init(&(p_pb->pedals[i].config));
 800198a:	7bbb      	ldrb	r3, [r7, #14]
 800198c:	22c8      	movs	r2, #200	; 0xc8
 800198e:	fb02 f303 	mul.w	r3, r2, r3
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	4413      	add	r3, r2
 8001996:	3304      	adds	r3, #4
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff fcd3 	bl	8001344 <amplifier_pedal_init>
            p_pb->pedals[i].pedal_process = amplifier_process;
 800199e:	7bbb      	ldrb	r3, [r7, #14]
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	21c8      	movs	r1, #200	; 0xc8
 80019a4:	fb01 f303 	mul.w	r3, r1, r3
 80019a8:	4413      	add	r3, r2
 80019aa:	33c8      	adds	r3, #200	; 0xc8
 80019ac:	4a60      	ldr	r2, [pc, #384]	; (8001b30 <pedalboard_append+0x1e0>)
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	e0b3      	b.n	8001b1a <pedalboard_append+0x1ca>
        }
        else if (type == BITCRUSHER_RS)
 80019b2:	78fb      	ldrb	r3, [r7, #3]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d113      	bne.n	80019e0 <pedalboard_append+0x90>
        {
            bitcrusher_rs_pedal_init(&(p_pb->pedals[i].config));
 80019b8:	7bbb      	ldrb	r3, [r7, #14]
 80019ba:	22c8      	movs	r2, #200	; 0xc8
 80019bc:	fb02 f303 	mul.w	r3, r2, r3
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	4413      	add	r3, r2
 80019c4:	3304      	adds	r3, #4
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff fb52 	bl	8001070 <bitcrusher_rs_pedal_init>
            p_pb->pedals[i].pedal_process = bitcrusher_rs_process;
 80019cc:	7bbb      	ldrb	r3, [r7, #14]
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	21c8      	movs	r1, #200	; 0xc8
 80019d2:	fb01 f303 	mul.w	r3, r1, r3
 80019d6:	4413      	add	r3, r2
 80019d8:	33c8      	adds	r3, #200	; 0xc8
 80019da:	4a56      	ldr	r2, [pc, #344]	; (8001b34 <pedalboard_append+0x1e4>)
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	e09c      	b.n	8001b1a <pedalboard_append+0x1ca>
        }
        else if (type == DYN_AMPLIFIER)
 80019e0:	78fb      	ldrb	r3, [r7, #3]
 80019e2:	2b03      	cmp	r3, #3
 80019e4:	d113      	bne.n	8001a0e <pedalboard_append+0xbe>
        {
            dyn_amplifier_pedal_init(&(p_pb->pedals[i].config));
 80019e6:	7bbb      	ldrb	r3, [r7, #14]
 80019e8:	22c8      	movs	r2, #200	; 0xc8
 80019ea:	fb02 f303 	mul.w	r3, r2, r3
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	4413      	add	r3, r2
 80019f2:	3304      	adds	r3, #4
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff fce5 	bl	80013c4 <dyn_amplifier_pedal_init>
            p_pb->pedals[i].pedal_process = dyn_amplifier_process;
 80019fa:	7bbb      	ldrb	r3, [r7, #14]
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	21c8      	movs	r1, #200	; 0xc8
 8001a00:	fb01 f303 	mul.w	r3, r1, r3
 8001a04:	4413      	add	r3, r2
 8001a06:	33c8      	adds	r3, #200	; 0xc8
 8001a08:	4a4b      	ldr	r2, [pc, #300]	; (8001b38 <pedalboard_append+0x1e8>)
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	e085      	b.n	8001b1a <pedalboard_append+0x1ca>
        }
        else if (type == FUZZ)
 8001a0e:	78fb      	ldrb	r3, [r7, #3]
 8001a10:	2b04      	cmp	r3, #4
 8001a12:	d113      	bne.n	8001a3c <pedalboard_append+0xec>
        {
            fuzz_pedal_init(&(p_pb->pedals[i].config));
 8001a14:	7bbb      	ldrb	r3, [r7, #14]
 8001a16:	22c8      	movs	r2, #200	; 0xc8
 8001a18:	fb02 f303 	mul.w	r3, r2, r3
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	4413      	add	r3, r2
 8001a20:	3304      	adds	r3, #4
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff fd52 	bl	80014cc <fuzz_pedal_init>
            p_pb->pedals[i].pedal_process = fuzz_process;
 8001a28:	7bbb      	ldrb	r3, [r7, #14]
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	21c8      	movs	r1, #200	; 0xc8
 8001a2e:	fb01 f303 	mul.w	r3, r1, r3
 8001a32:	4413      	add	r3, r2
 8001a34:	33c8      	adds	r3, #200	; 0xc8
 8001a36:	4a41      	ldr	r2, [pc, #260]	; (8001b3c <pedalboard_append+0x1ec>)
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	e06e      	b.n	8001b1a <pedalboard_append+0x1ca>
        }
        else if (type == LPF)
 8001a3c:	78fb      	ldrb	r3, [r7, #3]
 8001a3e:	2b05      	cmp	r3, #5
 8001a40:	d113      	bne.n	8001a6a <pedalboard_append+0x11a>
        {
            low_pass_filter_pedal_init(&(p_pb->pedals[i].config));
 8001a42:	7bbb      	ldrb	r3, [r7, #14]
 8001a44:	22c8      	movs	r2, #200	; 0xc8
 8001a46:	fb02 f303 	mul.w	r3, r2, r3
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	3304      	adds	r3, #4
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff fcd1 	bl	80013f8 <low_pass_filter_pedal_init>
            p_pb->pedals[i].pedal_process = low_pass_filter_process;
 8001a56:	7bbb      	ldrb	r3, [r7, #14]
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	21c8      	movs	r1, #200	; 0xc8
 8001a5c:	fb01 f303 	mul.w	r3, r1, r3
 8001a60:	4413      	add	r3, r2
 8001a62:	33c8      	adds	r3, #200	; 0xc8
 8001a64:	4a36      	ldr	r2, [pc, #216]	; (8001b40 <pedalboard_append+0x1f0>)
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	e057      	b.n	8001b1a <pedalboard_append+0x1ca>
        }
        else if (type == OVERDRIVE)
 8001a6a:	78fb      	ldrb	r3, [r7, #3]
 8001a6c:	2b06      	cmp	r3, #6
 8001a6e:	d113      	bne.n	8001a98 <pedalboard_append+0x148>
        {
            overdrive_pedal_init(&(p_pb->pedals[i].config));
 8001a70:	7bbb      	ldrb	r3, [r7, #14]
 8001a72:	22c8      	movs	r2, #200	; 0xc8
 8001a74:	fb02 f303 	mul.w	r3, r2, r3
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	3304      	adds	r3, #4
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff fa6e 	bl	8000f60 <overdrive_pedal_init>
            p_pb->pedals[i].pedal_process = overdrive_process;
 8001a84:	7bbb      	ldrb	r3, [r7, #14]
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	21c8      	movs	r1, #200	; 0xc8
 8001a8a:	fb01 f303 	mul.w	r3, r1, r3
 8001a8e:	4413      	add	r3, r2
 8001a90:	33c8      	adds	r3, #200	; 0xc8
 8001a92:	4a2c      	ldr	r2, [pc, #176]	; (8001b44 <pedalboard_append+0x1f4>)
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	e040      	b.n	8001b1a <pedalboard_append+0x1ca>
        }
        else if (type == OVERDRIVE_SQRT)
 8001a98:	78fb      	ldrb	r3, [r7, #3]
 8001a9a:	2b07      	cmp	r3, #7
 8001a9c:	d113      	bne.n	8001ac6 <pedalboard_append+0x176>
        {
            overdrive_sqrt_pedal_init(&(p_pb->pedals[i].config));
 8001a9e:	7bbb      	ldrb	r3, [r7, #14]
 8001aa0:	22c8      	movs	r2, #200	; 0xc8
 8001aa2:	fb02 f303 	mul.w	r3, r2, r3
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	3304      	adds	r3, #4
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff fbc7 	bl	8001240 <overdrive_sqrt_pedal_init>
            p_pb->pedals[i].pedal_process = overdrive_sqrt_process;
 8001ab2:	7bbb      	ldrb	r3, [r7, #14]
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	21c8      	movs	r1, #200	; 0xc8
 8001ab8:	fb01 f303 	mul.w	r3, r1, r3
 8001abc:	4413      	add	r3, r2
 8001abe:	33c8      	adds	r3, #200	; 0xc8
 8001ac0:	4a21      	ldr	r2, [pc, #132]	; (8001b48 <pedalboard_append+0x1f8>)
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	e029      	b.n	8001b1a <pedalboard_append+0x1ca>
        }
        else if (type == TREMOLO)
 8001ac6:	78fb      	ldrb	r3, [r7, #3]
 8001ac8:	2b08      	cmp	r3, #8
 8001aca:	d113      	bne.n	8001af4 <pedalboard_append+0x1a4>
        {
            tremolo_pedal_init(&(p_pb->pedals[i].config));
 8001acc:	7bbb      	ldrb	r3, [r7, #14]
 8001ace:	22c8      	movs	r2, #200	; 0xc8
 8001ad0:	fb02 f303 	mul.w	r3, r2, r3
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	3304      	adds	r3, #4
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff fb3a 	bl	8001154 <tremolo_pedal_init>
            p_pb->pedals[i].pedal_process = tremolo_process;
 8001ae0:	7bbb      	ldrb	r3, [r7, #14]
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	21c8      	movs	r1, #200	; 0xc8
 8001ae6:	fb01 f303 	mul.w	r3, r1, r3
 8001aea:	4413      	add	r3, r2
 8001aec:	33c8      	adds	r3, #200	; 0xc8
 8001aee:	4a17      	ldr	r2, [pc, #92]	; (8001b4c <pedalboard_append+0x1fc>)
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	e012      	b.n	8001b1a <pedalboard_append+0x1ca>
        }
        else
        {
            // BYPASS AS DEFAULT
            bypass_pedal_init(&(p_pb->pedals[i].config));
 8001af4:	7bbb      	ldrb	r3, [r7, #14]
 8001af6:	22c8      	movs	r2, #200	; 0xc8
 8001af8:	fb02 f303 	mul.w	r3, r2, r3
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	4413      	add	r3, r2
 8001b00:	3304      	adds	r3, #4
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff fdce 	bl	80016a4 <bypass_pedal_init>
            p_pb->pedals[i].pedal_process = bypass_process;
 8001b08:	7bbb      	ldrb	r3, [r7, #14]
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	21c8      	movs	r1, #200	; 0xc8
 8001b0e:	fb01 f303 	mul.w	r3, r1, r3
 8001b12:	4413      	add	r3, r2
 8001b14:	33c8      	adds	r3, #200	; 0xc8
 8001b16:	4a0e      	ldr	r2, [pc, #56]	; (8001b50 <pedalboard_append+0x200>)
 8001b18:	601a      	str	r2, [r3, #0]
        }
        p_pb->active_pedals++;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	b2da      	uxtb	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	701a      	strb	r2, [r3, #0]
    }
}
 8001b26:	bf00      	nop
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	08001381 	.word	0x08001381
 8001b34:	080010bd 	.word	0x080010bd
 8001b38:	080013d9 	.word	0x080013d9
 8001b3c:	08001571 	.word	0x08001571
 8001b40:	08001455 	.word	0x08001455
 8001b44:	08000fe9 	.word	0x08000fe9
 8001b48:	080012a5 	.word	0x080012a5
 8001b4c:	080011bd 	.word	0x080011bd
 8001b50:	080016b9 	.word	0x080016b9

08001b54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	607b      	str	r3, [r7, #4]
 8001b5e:	4b10      	ldr	r3, [pc, #64]	; (8001ba0 <HAL_MspInit+0x4c>)
 8001b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b62:	4a0f      	ldr	r2, [pc, #60]	; (8001ba0 <HAL_MspInit+0x4c>)
 8001b64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b68:	6453      	str	r3, [r2, #68]	; 0x44
 8001b6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ba0 <HAL_MspInit+0x4c>)
 8001b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b72:	607b      	str	r3, [r7, #4]
 8001b74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	603b      	str	r3, [r7, #0]
 8001b7a:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <HAL_MspInit+0x4c>)
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7e:	4a08      	ldr	r2, [pc, #32]	; (8001ba0 <HAL_MspInit+0x4c>)
 8001b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b84:	6413      	str	r3, [r2, #64]	; 0x40
 8001b86:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <HAL_MspInit+0x4c>)
 8001b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b8e:	603b      	str	r3, [r7, #0]
 8001b90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	40023800 	.word	0x40023800

08001ba4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08a      	sub	sp, #40	; 0x28
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bac:	f107 0314 	add.w	r3, r7, #20
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	60da      	str	r2, [r3, #12]
 8001bba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a19      	ldr	r2, [pc, #100]	; (8001c28 <HAL_I2C_MspInit+0x84>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d12c      	bne.n	8001c20 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	613b      	str	r3, [r7, #16]
 8001bca:	4b18      	ldr	r3, [pc, #96]	; (8001c2c <HAL_I2C_MspInit+0x88>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	4a17      	ldr	r2, [pc, #92]	; (8001c2c <HAL_I2C_MspInit+0x88>)
 8001bd0:	f043 0302 	orr.w	r3, r3, #2
 8001bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd6:	4b15      	ldr	r3, [pc, #84]	; (8001c2c <HAL_I2C_MspInit+0x88>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	613b      	str	r3, [r7, #16]
 8001be0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001be2:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001be6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001be8:	2312      	movs	r3, #18
 8001bea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bec:	2300      	movs	r3, #0
 8001bee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bf4:	2304      	movs	r3, #4
 8001bf6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf8:	f107 0314 	add.w	r3, r7, #20
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	480c      	ldr	r0, [pc, #48]	; (8001c30 <HAL_I2C_MspInit+0x8c>)
 8001c00:	f000 ff34 	bl	8002a6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c04:	2300      	movs	r3, #0
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <HAL_I2C_MspInit+0x88>)
 8001c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0c:	4a07      	ldr	r2, [pc, #28]	; (8001c2c <HAL_I2C_MspInit+0x88>)
 8001c0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c12:	6413      	str	r3, [r2, #64]	; 0x40
 8001c14:	4b05      	ldr	r3, [pc, #20]	; (8001c2c <HAL_I2C_MspInit+0x88>)
 8001c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c20:	bf00      	nop
 8001c22:	3728      	adds	r7, #40	; 0x28
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40005400 	.word	0x40005400
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	40020400 	.word	0x40020400

08001c34 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b08e      	sub	sp, #56	; 0x38
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	60da      	str	r2, [r3, #12]
 8001c4a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a89      	ldr	r2, [pc, #548]	; (8001e78 <HAL_I2S_MspInit+0x244>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	f040 8083 	bne.w	8001d5e <HAL_I2S_MspInit+0x12a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001c58:	2300      	movs	r3, #0
 8001c5a:	623b      	str	r3, [r7, #32]
 8001c5c:	4b87      	ldr	r3, [pc, #540]	; (8001e7c <HAL_I2S_MspInit+0x248>)
 8001c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c60:	4a86      	ldr	r2, [pc, #536]	; (8001e7c <HAL_I2S_MspInit+0x248>)
 8001c62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c66:	6413      	str	r3, [r2, #64]	; 0x40
 8001c68:	4b84      	ldr	r3, [pc, #528]	; (8001e7c <HAL_I2S_MspInit+0x248>)
 8001c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c70:	623b      	str	r3, [r7, #32]
 8001c72:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c74:	2300      	movs	r3, #0
 8001c76:	61fb      	str	r3, [r7, #28]
 8001c78:	4b80      	ldr	r3, [pc, #512]	; (8001e7c <HAL_I2S_MspInit+0x248>)
 8001c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7c:	4a7f      	ldr	r2, [pc, #508]	; (8001e7c <HAL_I2S_MspInit+0x248>)
 8001c7e:	f043 0302 	orr.w	r3, r3, #2
 8001c82:	6313      	str	r3, [r2, #48]	; 0x30
 8001c84:	4b7d      	ldr	r3, [pc, #500]	; (8001e7c <HAL_I2S_MspInit+0x248>)
 8001c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c88:	f003 0302 	and.w	r3, r3, #2
 8001c8c:	61fb      	str	r3, [r7, #28]
 8001c8e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c90:	2300      	movs	r3, #0
 8001c92:	61bb      	str	r3, [r7, #24]
 8001c94:	4b79      	ldr	r3, [pc, #484]	; (8001e7c <HAL_I2S_MspInit+0x248>)
 8001c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c98:	4a78      	ldr	r2, [pc, #480]	; (8001e7c <HAL_I2S_MspInit+0x248>)
 8001c9a:	f043 0304 	orr.w	r3, r3, #4
 8001c9e:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca0:	4b76      	ldr	r3, [pc, #472]	; (8001e7c <HAL_I2S_MspInit+0x248>)
 8001ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca4:	f003 0304 	and.w	r3, r3, #4
 8001ca8:	61bb      	str	r3, [r7, #24]
 8001caa:	69bb      	ldr	r3, [r7, #24]
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001cac:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8001cb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001cbe:	2305      	movs	r3, #5
 8001cc0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	486d      	ldr	r0, [pc, #436]	; (8001e80 <HAL_I2S_MspInit+0x24c>)
 8001cca:	f000 fecf 	bl	8002a6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001cce:	2340      	movs	r3, #64	; 0x40
 8001cd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001cde:	2305      	movs	r3, #5
 8001ce0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ce2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4866      	ldr	r0, [pc, #408]	; (8001e84 <HAL_I2S_MspInit+0x250>)
 8001cea:	f000 febf 	bl	8002a6c <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8001cee:	4b66      	ldr	r3, [pc, #408]	; (8001e88 <HAL_I2S_MspInit+0x254>)
 8001cf0:	4a66      	ldr	r2, [pc, #408]	; (8001e8c <HAL_I2S_MspInit+0x258>)
 8001cf2:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8001cf4:	4b64      	ldr	r3, [pc, #400]	; (8001e88 <HAL_I2S_MspInit+0x254>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cfa:	4b63      	ldr	r3, [pc, #396]	; (8001e88 <HAL_I2S_MspInit+0x254>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d00:	4b61      	ldr	r3, [pc, #388]	; (8001e88 <HAL_I2S_MspInit+0x254>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d06:	4b60      	ldr	r3, [pc, #384]	; (8001e88 <HAL_I2S_MspInit+0x254>)
 8001d08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d0c:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d0e:	4b5e      	ldr	r3, [pc, #376]	; (8001e88 <HAL_I2S_MspInit+0x254>)
 8001d10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d14:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d16:	4b5c      	ldr	r3, [pc, #368]	; (8001e88 <HAL_I2S_MspInit+0x254>)
 8001d18:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d1c:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8001d1e:	4b5a      	ldr	r3, [pc, #360]	; (8001e88 <HAL_I2S_MspInit+0x254>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d24:	4b58      	ldr	r3, [pc, #352]	; (8001e88 <HAL_I2S_MspInit+0x254>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d2a:	4b57      	ldr	r3, [pc, #348]	; (8001e88 <HAL_I2S_MspInit+0x254>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001d30:	4855      	ldr	r0, [pc, #340]	; (8001e88 <HAL_I2S_MspInit+0x254>)
 8001d32:	f000 fb2b 	bl	800238c <HAL_DMA_Init>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <HAL_I2S_MspInit+0x10c>
    {
      Error_Handler();
 8001d3c:	f7ff f90a 	bl	8000f54 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4a51      	ldr	r2, [pc, #324]	; (8001e88 <HAL_I2S_MspInit+0x254>)
 8001d44:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d46:	4a50      	ldr	r2, [pc, #320]	; (8001e88 <HAL_I2S_MspInit+0x254>)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2S2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	2100      	movs	r1, #0
 8001d50:	2024      	movs	r0, #36	; 0x24
 8001d52:	f000 fae4 	bl	800231e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001d56:	2024      	movs	r0, #36	; 0x24
 8001d58:	f000 fafd 	bl	8002356 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001d5c:	e088      	b.n	8001e70 <HAL_I2S_MspInit+0x23c>
  else if(hi2s->Instance==SPI3)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a4b      	ldr	r2, [pc, #300]	; (8001e90 <HAL_I2S_MspInit+0x25c>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	f040 8083 	bne.w	8001e70 <HAL_I2S_MspInit+0x23c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	617b      	str	r3, [r7, #20]
 8001d6e:	4b43      	ldr	r3, [pc, #268]	; (8001e7c <HAL_I2S_MspInit+0x248>)
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	4a42      	ldr	r2, [pc, #264]	; (8001e7c <HAL_I2S_MspInit+0x248>)
 8001d74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d78:	6413      	str	r3, [r2, #64]	; 0x40
 8001d7a:	4b40      	ldr	r3, [pc, #256]	; (8001e7c <HAL_I2S_MspInit+0x248>)
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d82:	617b      	str	r3, [r7, #20]
 8001d84:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	613b      	str	r3, [r7, #16]
 8001d8a:	4b3c      	ldr	r3, [pc, #240]	; (8001e7c <HAL_I2S_MspInit+0x248>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	4a3b      	ldr	r2, [pc, #236]	; (8001e7c <HAL_I2S_MspInit+0x248>)
 8001d90:	f043 0301 	orr.w	r3, r3, #1
 8001d94:	6313      	str	r3, [r2, #48]	; 0x30
 8001d96:	4b39      	ldr	r3, [pc, #228]	; (8001e7c <HAL_I2S_MspInit+0x248>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	613b      	str	r3, [r7, #16]
 8001da0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	60fb      	str	r3, [r7, #12]
 8001da6:	4b35      	ldr	r3, [pc, #212]	; (8001e7c <HAL_I2S_MspInit+0x248>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	4a34      	ldr	r2, [pc, #208]	; (8001e7c <HAL_I2S_MspInit+0x248>)
 8001dac:	f043 0304 	orr.w	r3, r3, #4
 8001db0:	6313      	str	r3, [r2, #48]	; 0x30
 8001db2:	4b32      	ldr	r3, [pc, #200]	; (8001e7c <HAL_I2S_MspInit+0x248>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	f003 0304 	and.w	r3, r3, #4
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001dbe:	2310      	movs	r3, #16
 8001dc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001dce:	2306      	movs	r3, #6
 8001dd0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	482e      	ldr	r0, [pc, #184]	; (8001e94 <HAL_I2S_MspInit+0x260>)
 8001dda:	f000 fe47 	bl	8002a6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8001dde:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001de2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de4:	2302      	movs	r3, #2
 8001de6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dec:	2300      	movs	r3, #0
 8001dee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001df0:	2306      	movs	r3, #6
 8001df2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001df4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4822      	ldr	r0, [pc, #136]	; (8001e84 <HAL_I2S_MspInit+0x250>)
 8001dfc:	f000 fe36 	bl	8002a6c <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001e00:	4b25      	ldr	r3, [pc, #148]	; (8001e98 <HAL_I2S_MspInit+0x264>)
 8001e02:	4a26      	ldr	r2, [pc, #152]	; (8001e9c <HAL_I2S_MspInit+0x268>)
 8001e04:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8001e06:	4b24      	ldr	r3, [pc, #144]	; (8001e98 <HAL_I2S_MspInit+0x264>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e0c:	4b22      	ldr	r3, [pc, #136]	; (8001e98 <HAL_I2S_MspInit+0x264>)
 8001e0e:	2240      	movs	r2, #64	; 0x40
 8001e10:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e12:	4b21      	ldr	r3, [pc, #132]	; (8001e98 <HAL_I2S_MspInit+0x264>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e18:	4b1f      	ldr	r3, [pc, #124]	; (8001e98 <HAL_I2S_MspInit+0x264>)
 8001e1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e1e:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e20:	4b1d      	ldr	r3, [pc, #116]	; (8001e98 <HAL_I2S_MspInit+0x264>)
 8001e22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e26:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e28:	4b1b      	ldr	r3, [pc, #108]	; (8001e98 <HAL_I2S_MspInit+0x264>)
 8001e2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e2e:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8001e30:	4b19      	ldr	r3, [pc, #100]	; (8001e98 <HAL_I2S_MspInit+0x264>)
 8001e32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e36:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e38:	4b17      	ldr	r3, [pc, #92]	; (8001e98 <HAL_I2S_MspInit+0x264>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e3e:	4b16      	ldr	r3, [pc, #88]	; (8001e98 <HAL_I2S_MspInit+0x264>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001e44:	4814      	ldr	r0, [pc, #80]	; (8001e98 <HAL_I2S_MspInit+0x264>)
 8001e46:	f000 faa1 	bl	800238c <HAL_DMA_Init>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <HAL_I2S_MspInit+0x220>
      Error_Handler();
 8001e50:	f7ff f880 	bl	8000f54 <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a10      	ldr	r2, [pc, #64]	; (8001e98 <HAL_I2S_MspInit+0x264>)
 8001e58:	639a      	str	r2, [r3, #56]	; 0x38
 8001e5a:	4a0f      	ldr	r2, [pc, #60]	; (8001e98 <HAL_I2S_MspInit+0x264>)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001e60:	2200      	movs	r2, #0
 8001e62:	2100      	movs	r1, #0
 8001e64:	2033      	movs	r0, #51	; 0x33
 8001e66:	f000 fa5a 	bl	800231e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001e6a:	2033      	movs	r0, #51	; 0x33
 8001e6c:	f000 fa73 	bl	8002356 <HAL_NVIC_EnableIRQ>
}
 8001e70:	bf00      	nop
 8001e72:	3738      	adds	r7, #56	; 0x38
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40003800 	.word	0x40003800
 8001e7c:	40023800 	.word	0x40023800
 8001e80:	40020400 	.word	0x40020400
 8001e84:	40020800 	.word	0x40020800
 8001e88:	20000178 	.word	0x20000178
 8001e8c:	40026058 	.word	0x40026058
 8001e90:	40003c00 	.word	0x40003c00
 8001e94:	40020000 	.word	0x40020000
 8001e98:	200001d8 	.word	0x200001d8
 8001e9c:	40026088 	.word	0x40026088

08001ea0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ea4:	e7fe      	b.n	8001ea4 <NMI_Handler+0x4>

08001ea6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eaa:	e7fe      	b.n	8001eaa <HardFault_Handler+0x4>

08001eac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001eb0:	e7fe      	b.n	8001eb0 <MemManage_Handler+0x4>

08001eb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eb6:	e7fe      	b.n	8001eb6 <BusFault_Handler+0x4>

08001eb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ebc:	e7fe      	b.n	8001ebc <UsageFault_Handler+0x4>

08001ebe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ec2:	bf00      	nop
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ed0:	bf00      	nop
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr

08001eda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eda:	b480      	push	{r7}
 8001edc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ede:	bf00      	nop
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001eec:	f000 f8f8 	bl	80020e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ef0:	bf00      	nop
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001ef8:	4802      	ldr	r0, [pc, #8]	; (8001f04 <DMA1_Stream3_IRQHandler+0x10>)
 8001efa:	f000 fb4d 	bl	8002598 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001efe:	bf00      	nop
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	20000178 	.word	0x20000178

08001f08 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001f0c:	4802      	ldr	r0, [pc, #8]	; (8001f18 <DMA1_Stream5_IRQHandler+0x10>)
 8001f0e:	f000 fb43 	bl	8002598 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	200001d8 	.word	0x200001d8

08001f1c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 8001f20:	4802      	ldr	r0, [pc, #8]	; (8001f2c <SPI2_IRQHandler+0x10>)
 8001f22:	f003 fe73 	bl	8005c0c <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001f26:	bf00      	nop
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	2000130c 	.word	0x2000130c

08001f30 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s3);
 8001f34:	4802      	ldr	r0, [pc, #8]	; (8001f40 <SPI3_IRQHandler+0x10>)
 8001f36:	f003 fe69 	bl	8005c0c <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001f3a:	bf00      	nop
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	20001354 	.word	0x20001354

08001f44 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001f48:	4802      	ldr	r0, [pc, #8]	; (8001f54 <OTG_FS_IRQHandler+0x10>)
 8001f4a:	f001 f9c7 	bl	80032dc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001f4e:	bf00      	nop
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	200037e4 	.word	0x200037e4

08001f58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f60:	4a14      	ldr	r2, [pc, #80]	; (8001fb4 <_sbrk+0x5c>)
 8001f62:	4b15      	ldr	r3, [pc, #84]	; (8001fb8 <_sbrk+0x60>)
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f6c:	4b13      	ldr	r3, [pc, #76]	; (8001fbc <_sbrk+0x64>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d102      	bne.n	8001f7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f74:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <_sbrk+0x64>)
 8001f76:	4a12      	ldr	r2, [pc, #72]	; (8001fc0 <_sbrk+0x68>)
 8001f78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f7a:	4b10      	ldr	r3, [pc, #64]	; (8001fbc <_sbrk+0x64>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4413      	add	r3, r2
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d207      	bcs.n	8001f98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f88:	f009 fade 	bl	800b548 <__errno>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	220c      	movs	r2, #12
 8001f90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f96:	e009      	b.n	8001fac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f98:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <_sbrk+0x64>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f9e:	4b07      	ldr	r3, [pc, #28]	; (8001fbc <_sbrk+0x64>)
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	4a05      	ldr	r2, [pc, #20]	; (8001fbc <_sbrk+0x64>)
 8001fa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001faa:	68fb      	ldr	r3, [r7, #12]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3718      	adds	r7, #24
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20020000 	.word	0x20020000
 8001fb8:	00000400 	.word	0x00000400
 8001fbc:	20000104 	.word	0x20000104
 8001fc0:	20003af8 	.word	0x20003af8

08001fc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fc8:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <SystemInit+0x20>)
 8001fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fce:	4a05      	ldr	r2, [pc, #20]	; (8001fe4 <SystemInit+0x20>)
 8001fd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fd8:	bf00      	nop
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001fe8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002020 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fec:	480d      	ldr	r0, [pc, #52]	; (8002024 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001fee:	490e      	ldr	r1, [pc, #56]	; (8002028 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ff0:	4a0e      	ldr	r2, [pc, #56]	; (800202c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ff2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ff4:	e002      	b.n	8001ffc <LoopCopyDataInit>

08001ff6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ff6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ff8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ffa:	3304      	adds	r3, #4

08001ffc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ffc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ffe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002000:	d3f9      	bcc.n	8001ff6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002002:	4a0b      	ldr	r2, [pc, #44]	; (8002030 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002004:	4c0b      	ldr	r4, [pc, #44]	; (8002034 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002006:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002008:	e001      	b.n	800200e <LoopFillZerobss>

0800200a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800200a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800200c:	3204      	adds	r2, #4

0800200e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800200e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002010:	d3fb      	bcc.n	800200a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002012:	f7ff ffd7 	bl	8001fc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002016:	f009 fa9d 	bl	800b554 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800201a:	f7fe fcf9 	bl	8000a10 <main>
  bx  lr    
 800201e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002020:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002024:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002028:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 800202c:	0800bae8 	.word	0x0800bae8
  ldr r2, =_sbss
 8002030:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002034:	20003af8 	.word	0x20003af8

08002038 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002038:	e7fe      	b.n	8002038 <ADC_IRQHandler>
	...

0800203c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002040:	4b0e      	ldr	r3, [pc, #56]	; (800207c <HAL_Init+0x40>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a0d      	ldr	r2, [pc, #52]	; (800207c <HAL_Init+0x40>)
 8002046:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800204a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800204c:	4b0b      	ldr	r3, [pc, #44]	; (800207c <HAL_Init+0x40>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a0a      	ldr	r2, [pc, #40]	; (800207c <HAL_Init+0x40>)
 8002052:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002056:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002058:	4b08      	ldr	r3, [pc, #32]	; (800207c <HAL_Init+0x40>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a07      	ldr	r2, [pc, #28]	; (800207c <HAL_Init+0x40>)
 800205e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002062:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002064:	2003      	movs	r0, #3
 8002066:	f000 f94f 	bl	8002308 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800206a:	200f      	movs	r0, #15
 800206c:	f000 f808 	bl	8002080 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002070:	f7ff fd70 	bl	8001b54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40023c00 	.word	0x40023c00

08002080 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002088:	4b12      	ldr	r3, [pc, #72]	; (80020d4 <HAL_InitTick+0x54>)
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	4b12      	ldr	r3, [pc, #72]	; (80020d8 <HAL_InitTick+0x58>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	4619      	mov	r1, r3
 8002092:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002096:	fbb3 f3f1 	udiv	r3, r3, r1
 800209a:	fbb2 f3f3 	udiv	r3, r2, r3
 800209e:	4618      	mov	r0, r3
 80020a0:	f000 f967 	bl	8002372 <HAL_SYSTICK_Config>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e00e      	b.n	80020cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2b0f      	cmp	r3, #15
 80020b2:	d80a      	bhi.n	80020ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020b4:	2200      	movs	r2, #0
 80020b6:	6879      	ldr	r1, [r7, #4]
 80020b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020bc:	f000 f92f 	bl	800231e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020c0:	4a06      	ldr	r2, [pc, #24]	; (80020dc <HAL_InitTick+0x5c>)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020c6:	2300      	movs	r3, #0
 80020c8:	e000      	b.n	80020cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	20000000 	.word	0x20000000
 80020d8:	20000008 	.word	0x20000008
 80020dc:	20000004 	.word	0x20000004

080020e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020e4:	4b06      	ldr	r3, [pc, #24]	; (8002100 <HAL_IncTick+0x20>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	461a      	mov	r2, r3
 80020ea:	4b06      	ldr	r3, [pc, #24]	; (8002104 <HAL_IncTick+0x24>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4413      	add	r3, r2
 80020f0:	4a04      	ldr	r2, [pc, #16]	; (8002104 <HAL_IncTick+0x24>)
 80020f2:	6013      	str	r3, [r2, #0]
}
 80020f4:	bf00      	nop
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	20000008 	.word	0x20000008
 8002104:	2000139c 	.word	0x2000139c

08002108 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  return uwTick;
 800210c:	4b03      	ldr	r3, [pc, #12]	; (800211c <HAL_GetTick+0x14>)
 800210e:	681b      	ldr	r3, [r3, #0]
}
 8002110:	4618      	mov	r0, r3
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	2000139c 	.word	0x2000139c

08002120 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002128:	f7ff ffee 	bl	8002108 <HAL_GetTick>
 800212c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002138:	d005      	beq.n	8002146 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800213a:	4b0a      	ldr	r3, [pc, #40]	; (8002164 <HAL_Delay+0x44>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	461a      	mov	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	4413      	add	r3, r2
 8002144:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002146:	bf00      	nop
 8002148:	f7ff ffde 	bl	8002108 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	429a      	cmp	r2, r3
 8002156:	d8f7      	bhi.n	8002148 <HAL_Delay+0x28>
  {
  }
}
 8002158:	bf00      	nop
 800215a:	bf00      	nop
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000008 	.word	0x20000008

08002168 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002178:	4b0c      	ldr	r3, [pc, #48]	; (80021ac <__NVIC_SetPriorityGrouping+0x44>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800217e:	68ba      	ldr	r2, [r7, #8]
 8002180:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002184:	4013      	ands	r3, r2
 8002186:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002190:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002194:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002198:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800219a:	4a04      	ldr	r2, [pc, #16]	; (80021ac <__NVIC_SetPriorityGrouping+0x44>)
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	60d3      	str	r3, [r2, #12]
}
 80021a0:	bf00      	nop
 80021a2:	3714      	adds	r7, #20
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	e000ed00 	.word	0xe000ed00

080021b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021b4:	4b04      	ldr	r3, [pc, #16]	; (80021c8 <__NVIC_GetPriorityGrouping+0x18>)
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	0a1b      	lsrs	r3, r3, #8
 80021ba:	f003 0307 	and.w	r3, r3, #7
}
 80021be:	4618      	mov	r0, r3
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	e000ed00 	.word	0xe000ed00

080021cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4603      	mov	r3, r0
 80021d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	db0b      	blt.n	80021f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021de:	79fb      	ldrb	r3, [r7, #7]
 80021e0:	f003 021f 	and.w	r2, r3, #31
 80021e4:	4907      	ldr	r1, [pc, #28]	; (8002204 <__NVIC_EnableIRQ+0x38>)
 80021e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ea:	095b      	lsrs	r3, r3, #5
 80021ec:	2001      	movs	r0, #1
 80021ee:	fa00 f202 	lsl.w	r2, r0, r2
 80021f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021f6:	bf00      	nop
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	e000e100 	.word	0xe000e100

08002208 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	4603      	mov	r3, r0
 8002210:	6039      	str	r1, [r7, #0]
 8002212:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002218:	2b00      	cmp	r3, #0
 800221a:	db0a      	blt.n	8002232 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	b2da      	uxtb	r2, r3
 8002220:	490c      	ldr	r1, [pc, #48]	; (8002254 <__NVIC_SetPriority+0x4c>)
 8002222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002226:	0112      	lsls	r2, r2, #4
 8002228:	b2d2      	uxtb	r2, r2
 800222a:	440b      	add	r3, r1
 800222c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002230:	e00a      	b.n	8002248 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	b2da      	uxtb	r2, r3
 8002236:	4908      	ldr	r1, [pc, #32]	; (8002258 <__NVIC_SetPriority+0x50>)
 8002238:	79fb      	ldrb	r3, [r7, #7]
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	3b04      	subs	r3, #4
 8002240:	0112      	lsls	r2, r2, #4
 8002242:	b2d2      	uxtb	r2, r2
 8002244:	440b      	add	r3, r1
 8002246:	761a      	strb	r2, [r3, #24]
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	e000e100 	.word	0xe000e100
 8002258:	e000ed00 	.word	0xe000ed00

0800225c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800225c:	b480      	push	{r7}
 800225e:	b089      	sub	sp, #36	; 0x24
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f003 0307 	and.w	r3, r3, #7
 800226e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	f1c3 0307 	rsb	r3, r3, #7
 8002276:	2b04      	cmp	r3, #4
 8002278:	bf28      	it	cs
 800227a:	2304      	movcs	r3, #4
 800227c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	3304      	adds	r3, #4
 8002282:	2b06      	cmp	r3, #6
 8002284:	d902      	bls.n	800228c <NVIC_EncodePriority+0x30>
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	3b03      	subs	r3, #3
 800228a:	e000      	b.n	800228e <NVIC_EncodePriority+0x32>
 800228c:	2300      	movs	r3, #0
 800228e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002290:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	43da      	mvns	r2, r3
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	401a      	ands	r2, r3
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	fa01 f303 	lsl.w	r3, r1, r3
 80022ae:	43d9      	mvns	r1, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022b4:	4313      	orrs	r3, r2
         );
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3724      	adds	r7, #36	; 0x24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
	...

080022c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	3b01      	subs	r3, #1
 80022d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022d4:	d301      	bcc.n	80022da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022d6:	2301      	movs	r3, #1
 80022d8:	e00f      	b.n	80022fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022da:	4a0a      	ldr	r2, [pc, #40]	; (8002304 <SysTick_Config+0x40>)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3b01      	subs	r3, #1
 80022e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022e2:	210f      	movs	r1, #15
 80022e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022e8:	f7ff ff8e 	bl	8002208 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022ec:	4b05      	ldr	r3, [pc, #20]	; (8002304 <SysTick_Config+0x40>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022f2:	4b04      	ldr	r3, [pc, #16]	; (8002304 <SysTick_Config+0x40>)
 80022f4:	2207      	movs	r2, #7
 80022f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	e000e010 	.word	0xe000e010

08002308 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f7ff ff29 	bl	8002168 <__NVIC_SetPriorityGrouping>
}
 8002316:	bf00      	nop
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800231e:	b580      	push	{r7, lr}
 8002320:	b086      	sub	sp, #24
 8002322:	af00      	add	r7, sp, #0
 8002324:	4603      	mov	r3, r0
 8002326:	60b9      	str	r1, [r7, #8]
 8002328:	607a      	str	r2, [r7, #4]
 800232a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800232c:	2300      	movs	r3, #0
 800232e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002330:	f7ff ff3e 	bl	80021b0 <__NVIC_GetPriorityGrouping>
 8002334:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	68b9      	ldr	r1, [r7, #8]
 800233a:	6978      	ldr	r0, [r7, #20]
 800233c:	f7ff ff8e 	bl	800225c <NVIC_EncodePriority>
 8002340:	4602      	mov	r2, r0
 8002342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002346:	4611      	mov	r1, r2
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff ff5d 	bl	8002208 <__NVIC_SetPriority>
}
 800234e:	bf00      	nop
 8002350:	3718      	adds	r7, #24
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b082      	sub	sp, #8
 800235a:	af00      	add	r7, sp, #0
 800235c:	4603      	mov	r3, r0
 800235e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff ff31 	bl	80021cc <__NVIC_EnableIRQ>
}
 800236a:	bf00      	nop
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b082      	sub	sp, #8
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f7ff ffa2 	bl	80022c4 <SysTick_Config>
 8002380:	4603      	mov	r3, r0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
	...

0800238c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002394:	2300      	movs	r3, #0
 8002396:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002398:	f7ff feb6 	bl	8002108 <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d101      	bne.n	80023a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e099      	b.n	80024dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2202      	movs	r2, #2
 80023ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 0201 	bic.w	r2, r2, #1
 80023c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023c8:	e00f      	b.n	80023ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023ca:	f7ff fe9d 	bl	8002108 <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	2b05      	cmp	r3, #5
 80023d6:	d908      	bls.n	80023ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2220      	movs	r2, #32
 80023dc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2203      	movs	r2, #3
 80023e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e078      	b.n	80024dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1e8      	bne.n	80023ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002400:	697a      	ldr	r2, [r7, #20]
 8002402:	4b38      	ldr	r3, [pc, #224]	; (80024e4 <HAL_DMA_Init+0x158>)
 8002404:	4013      	ands	r3, r2
 8002406:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685a      	ldr	r2, [r3, #4]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002416:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002422:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800242e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	4313      	orrs	r3, r2
 800243a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002440:	2b04      	cmp	r3, #4
 8002442:	d107      	bne.n	8002454 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244c:	4313      	orrs	r3, r2
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	4313      	orrs	r3, r2
 8002452:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	697a      	ldr	r2, [r7, #20]
 800245a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	f023 0307 	bic.w	r3, r3, #7
 800246a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002470:	697a      	ldr	r2, [r7, #20]
 8002472:	4313      	orrs	r3, r2
 8002474:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247a:	2b04      	cmp	r3, #4
 800247c:	d117      	bne.n	80024ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002482:	697a      	ldr	r2, [r7, #20]
 8002484:	4313      	orrs	r3, r2
 8002486:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00e      	beq.n	80024ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f000 fa6f 	bl	8002974 <DMA_CheckFifoParam>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d008      	beq.n	80024ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2240      	movs	r2, #64	; 0x40
 80024a0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2201      	movs	r2, #1
 80024a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80024aa:	2301      	movs	r3, #1
 80024ac:	e016      	b.n	80024dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 fa26 	bl	8002908 <DMA_CalcBaseAndBitshift>
 80024bc:	4603      	mov	r3, r0
 80024be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c4:	223f      	movs	r2, #63	; 0x3f
 80024c6:	409a      	lsls	r2, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2201      	movs	r2, #1
 80024d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3718      	adds	r7, #24
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	f010803f 	.word	0xf010803f

080024e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
 80024f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024f6:	2300      	movs	r3, #0
 80024f8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002506:	2b01      	cmp	r3, #1
 8002508:	d101      	bne.n	800250e <HAL_DMA_Start_IT+0x26>
 800250a:	2302      	movs	r3, #2
 800250c:	e040      	b.n	8002590 <HAL_DMA_Start_IT+0xa8>
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2201      	movs	r2, #1
 8002512:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b01      	cmp	r3, #1
 8002520:	d12f      	bne.n	8002582 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2202      	movs	r2, #2
 8002526:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2200      	movs	r2, #0
 800252e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	68b9      	ldr	r1, [r7, #8]
 8002536:	68f8      	ldr	r0, [r7, #12]
 8002538:	f000 f9b8 	bl	80028ac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002540:	223f      	movs	r2, #63	; 0x3f
 8002542:	409a      	lsls	r2, r3
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f042 0216 	orr.w	r2, r2, #22
 8002556:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255c:	2b00      	cmp	r3, #0
 800255e:	d007      	beq.n	8002570 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f042 0208 	orr.w	r2, r2, #8
 800256e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f042 0201 	orr.w	r2, r2, #1
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	e005      	b.n	800258e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800258a:	2302      	movs	r3, #2
 800258c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800258e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002590:	4618      	mov	r0, r3
 8002592:	3718      	adds	r7, #24
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80025a0:	2300      	movs	r3, #0
 80025a2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80025a4:	4b92      	ldr	r3, [pc, #584]	; (80027f0 <HAL_DMA_IRQHandler+0x258>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a92      	ldr	r2, [pc, #584]	; (80027f4 <HAL_DMA_IRQHandler+0x25c>)
 80025aa:	fba2 2303 	umull	r2, r3, r2, r3
 80025ae:	0a9b      	lsrs	r3, r3, #10
 80025b0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c2:	2208      	movs	r2, #8
 80025c4:	409a      	lsls	r2, r3
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	4013      	ands	r3, r2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d01a      	beq.n	8002604 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0304 	and.w	r3, r3, #4
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d013      	beq.n	8002604 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f022 0204 	bic.w	r2, r2, #4
 80025ea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f0:	2208      	movs	r2, #8
 80025f2:	409a      	lsls	r2, r3
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025fc:	f043 0201 	orr.w	r2, r3, #1
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002608:	2201      	movs	r2, #1
 800260a:	409a      	lsls	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	4013      	ands	r3, r2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d012      	beq.n	800263a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00b      	beq.n	800263a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002626:	2201      	movs	r2, #1
 8002628:	409a      	lsls	r2, r3
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002632:	f043 0202 	orr.w	r2, r3, #2
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800263e:	2204      	movs	r2, #4
 8002640:	409a      	lsls	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	4013      	ands	r3, r2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d012      	beq.n	8002670 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00b      	beq.n	8002670 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800265c:	2204      	movs	r2, #4
 800265e:	409a      	lsls	r2, r3
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002668:	f043 0204 	orr.w	r2, r3, #4
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002674:	2210      	movs	r2, #16
 8002676:	409a      	lsls	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	4013      	ands	r3, r2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d043      	beq.n	8002708 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0308 	and.w	r3, r3, #8
 800268a:	2b00      	cmp	r3, #0
 800268c:	d03c      	beq.n	8002708 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002692:	2210      	movs	r2, #16
 8002694:	409a      	lsls	r2, r3
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d018      	beq.n	80026da <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d108      	bne.n	80026c8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d024      	beq.n	8002708 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	4798      	blx	r3
 80026c6:	e01f      	b.n	8002708 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d01b      	beq.n	8002708 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	4798      	blx	r3
 80026d8:	e016      	b.n	8002708 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d107      	bne.n	80026f8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 0208 	bic.w	r2, r2, #8
 80026f6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d003      	beq.n	8002708 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800270c:	2220      	movs	r2, #32
 800270e:	409a      	lsls	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	4013      	ands	r3, r2
 8002714:	2b00      	cmp	r3, #0
 8002716:	f000 808e 	beq.w	8002836 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0310 	and.w	r3, r3, #16
 8002724:	2b00      	cmp	r3, #0
 8002726:	f000 8086 	beq.w	8002836 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800272e:	2220      	movs	r2, #32
 8002730:	409a      	lsls	r2, r3
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b05      	cmp	r3, #5
 8002740:	d136      	bne.n	80027b0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 0216 	bic.w	r2, r2, #22
 8002750:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	695a      	ldr	r2, [r3, #20]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002760:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	2b00      	cmp	r3, #0
 8002768:	d103      	bne.n	8002772 <HAL_DMA_IRQHandler+0x1da>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800276e:	2b00      	cmp	r3, #0
 8002770:	d007      	beq.n	8002782 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 0208 	bic.w	r2, r2, #8
 8002780:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002786:	223f      	movs	r2, #63	; 0x3f
 8002788:	409a      	lsls	r2, r3
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2201      	movs	r2, #1
 8002792:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d07d      	beq.n	80028a2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	4798      	blx	r3
        }
        return;
 80027ae:	e078      	b.n	80028a2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d01c      	beq.n	80027f8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d108      	bne.n	80027de <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d030      	beq.n	8002836 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	4798      	blx	r3
 80027dc:	e02b      	b.n	8002836 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d027      	beq.n	8002836 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	4798      	blx	r3
 80027ee:	e022      	b.n	8002836 <HAL_DMA_IRQHandler+0x29e>
 80027f0:	20000000 	.word	0x20000000
 80027f4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10f      	bne.n	8002826 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f022 0210 	bic.w	r2, r2, #16
 8002814:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2201      	movs	r2, #1
 800281a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800282a:	2b00      	cmp	r3, #0
 800282c:	d003      	beq.n	8002836 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800283a:	2b00      	cmp	r3, #0
 800283c:	d032      	beq.n	80028a4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	2b00      	cmp	r3, #0
 8002848:	d022      	beq.n	8002890 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2205      	movs	r2, #5
 800284e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f022 0201 	bic.w	r2, r2, #1
 8002860:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	3301      	adds	r3, #1
 8002866:	60bb      	str	r3, [r7, #8]
 8002868:	697a      	ldr	r2, [r7, #20]
 800286a:	429a      	cmp	r2, r3
 800286c:	d307      	bcc.n	800287e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	2b00      	cmp	r3, #0
 800287a:	d1f2      	bne.n	8002862 <HAL_DMA_IRQHandler+0x2ca>
 800287c:	e000      	b.n	8002880 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800287e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002894:	2b00      	cmp	r3, #0
 8002896:	d005      	beq.n	80028a4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	4798      	blx	r3
 80028a0:	e000      	b.n	80028a4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80028a2:	bf00      	nop
    }
  }
}
 80028a4:	3718      	adds	r7, #24
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop

080028ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
 80028b8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028c8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	2b40      	cmp	r3, #64	; 0x40
 80028d8:	d108      	bne.n	80028ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68ba      	ldr	r2, [r7, #8]
 80028e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80028ea:	e007      	b.n	80028fc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68ba      	ldr	r2, [r7, #8]
 80028f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	60da      	str	r2, [r3, #12]
}
 80028fc:	bf00      	nop
 80028fe:	3714      	adds	r7, #20
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	b2db      	uxtb	r3, r3
 8002916:	3b10      	subs	r3, #16
 8002918:	4a14      	ldr	r2, [pc, #80]	; (800296c <DMA_CalcBaseAndBitshift+0x64>)
 800291a:	fba2 2303 	umull	r2, r3, r2, r3
 800291e:	091b      	lsrs	r3, r3, #4
 8002920:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002922:	4a13      	ldr	r2, [pc, #76]	; (8002970 <DMA_CalcBaseAndBitshift+0x68>)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	4413      	add	r3, r2
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	461a      	mov	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2b03      	cmp	r3, #3
 8002934:	d909      	bls.n	800294a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800293e:	f023 0303 	bic.w	r3, r3, #3
 8002942:	1d1a      	adds	r2, r3, #4
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	659a      	str	r2, [r3, #88]	; 0x58
 8002948:	e007      	b.n	800295a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002952:	f023 0303 	bic.w	r3, r3, #3
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800295e:	4618      	mov	r0, r3
 8002960:	3714      	adds	r7, #20
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	aaaaaaab 	.word	0xaaaaaaab
 8002970:	0800babc 	.word	0x0800babc

08002974 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800297c:	2300      	movs	r3, #0
 800297e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002984:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d11f      	bne.n	80029ce <DMA_CheckFifoParam+0x5a>
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	2b03      	cmp	r3, #3
 8002992:	d856      	bhi.n	8002a42 <DMA_CheckFifoParam+0xce>
 8002994:	a201      	add	r2, pc, #4	; (adr r2, 800299c <DMA_CheckFifoParam+0x28>)
 8002996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800299a:	bf00      	nop
 800299c:	080029ad 	.word	0x080029ad
 80029a0:	080029bf 	.word	0x080029bf
 80029a4:	080029ad 	.word	0x080029ad
 80029a8:	08002a43 	.word	0x08002a43
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d046      	beq.n	8002a46 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029bc:	e043      	b.n	8002a46 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029c6:	d140      	bne.n	8002a4a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029cc:	e03d      	b.n	8002a4a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029d6:	d121      	bne.n	8002a1c <DMA_CheckFifoParam+0xa8>
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	2b03      	cmp	r3, #3
 80029dc:	d837      	bhi.n	8002a4e <DMA_CheckFifoParam+0xda>
 80029de:	a201      	add	r2, pc, #4	; (adr r2, 80029e4 <DMA_CheckFifoParam+0x70>)
 80029e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e4:	080029f5 	.word	0x080029f5
 80029e8:	080029fb 	.word	0x080029fb
 80029ec:	080029f5 	.word	0x080029f5
 80029f0:	08002a0d 	.word	0x08002a0d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	73fb      	strb	r3, [r7, #15]
      break;
 80029f8:	e030      	b.n	8002a5c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d025      	beq.n	8002a52 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a0a:	e022      	b.n	8002a52 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a10:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a14:	d11f      	bne.n	8002a56 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a1a:	e01c      	b.n	8002a56 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d903      	bls.n	8002a2a <DMA_CheckFifoParam+0xb6>
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	2b03      	cmp	r3, #3
 8002a26:	d003      	beq.n	8002a30 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a28:	e018      	b.n	8002a5c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	73fb      	strb	r3, [r7, #15]
      break;
 8002a2e:	e015      	b.n	8002a5c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00e      	beq.n	8002a5a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a40:	e00b      	b.n	8002a5a <DMA_CheckFifoParam+0xe6>
      break;
 8002a42:	bf00      	nop
 8002a44:	e00a      	b.n	8002a5c <DMA_CheckFifoParam+0xe8>
      break;
 8002a46:	bf00      	nop
 8002a48:	e008      	b.n	8002a5c <DMA_CheckFifoParam+0xe8>
      break;
 8002a4a:	bf00      	nop
 8002a4c:	e006      	b.n	8002a5c <DMA_CheckFifoParam+0xe8>
      break;
 8002a4e:	bf00      	nop
 8002a50:	e004      	b.n	8002a5c <DMA_CheckFifoParam+0xe8>
      break;
 8002a52:	bf00      	nop
 8002a54:	e002      	b.n	8002a5c <DMA_CheckFifoParam+0xe8>
      break;   
 8002a56:	bf00      	nop
 8002a58:	e000      	b.n	8002a5c <DMA_CheckFifoParam+0xe8>
      break;
 8002a5a:	bf00      	nop
    }
  } 
  
  return status; 
 8002a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3714      	adds	r7, #20
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop

08002a6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b089      	sub	sp, #36	; 0x24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a76:	2300      	movs	r3, #0
 8002a78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a82:	2300      	movs	r3, #0
 8002a84:	61fb      	str	r3, [r7, #28]
 8002a86:	e16b      	b.n	8002d60 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a88:	2201      	movs	r2, #1
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	697a      	ldr	r2, [r7, #20]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	f040 815a 	bne.w	8002d5a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f003 0303 	and.w	r3, r3, #3
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d005      	beq.n	8002abe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d130      	bne.n	8002b20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	2203      	movs	r2, #3
 8002aca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ace:	43db      	mvns	r3, r3
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	68da      	ldr	r2, [r3, #12]
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002af4:	2201      	movs	r2, #1
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	43db      	mvns	r3, r3
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	4013      	ands	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	091b      	lsrs	r3, r3, #4
 8002b0a:	f003 0201 	and.w	r2, r3, #1
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f003 0303 	and.w	r3, r3, #3
 8002b28:	2b03      	cmp	r3, #3
 8002b2a:	d017      	beq.n	8002b5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	2203      	movs	r2, #3
 8002b38:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	4013      	ands	r3, r2
 8002b42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	689a      	ldr	r2, [r3, #8]
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f003 0303 	and.w	r3, r3, #3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d123      	bne.n	8002bb0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	08da      	lsrs	r2, r3, #3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	3208      	adds	r2, #8
 8002b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	f003 0307 	and.w	r3, r3, #7
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	220f      	movs	r2, #15
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	43db      	mvns	r3, r3
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	691a      	ldr	r2, [r3, #16]
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	f003 0307 	and.w	r3, r3, #7
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	08da      	lsrs	r2, r3, #3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	3208      	adds	r2, #8
 8002baa:	69b9      	ldr	r1, [r7, #24]
 8002bac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	2203      	movs	r2, #3
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	43db      	mvns	r3, r3
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f003 0203 	and.w	r2, r3, #3
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f000 80b4 	beq.w	8002d5a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	60fb      	str	r3, [r7, #12]
 8002bf6:	4b60      	ldr	r3, [pc, #384]	; (8002d78 <HAL_GPIO_Init+0x30c>)
 8002bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfa:	4a5f      	ldr	r2, [pc, #380]	; (8002d78 <HAL_GPIO_Init+0x30c>)
 8002bfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c00:	6453      	str	r3, [r2, #68]	; 0x44
 8002c02:	4b5d      	ldr	r3, [pc, #372]	; (8002d78 <HAL_GPIO_Init+0x30c>)
 8002c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c0a:	60fb      	str	r3, [r7, #12]
 8002c0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c0e:	4a5b      	ldr	r2, [pc, #364]	; (8002d7c <HAL_GPIO_Init+0x310>)
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	089b      	lsrs	r3, r3, #2
 8002c14:	3302      	adds	r3, #2
 8002c16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	f003 0303 	and.w	r3, r3, #3
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	220f      	movs	r2, #15
 8002c26:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2a:	43db      	mvns	r3, r3
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a52      	ldr	r2, [pc, #328]	; (8002d80 <HAL_GPIO_Init+0x314>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d02b      	beq.n	8002c92 <HAL_GPIO_Init+0x226>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a51      	ldr	r2, [pc, #324]	; (8002d84 <HAL_GPIO_Init+0x318>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d025      	beq.n	8002c8e <HAL_GPIO_Init+0x222>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a50      	ldr	r2, [pc, #320]	; (8002d88 <HAL_GPIO_Init+0x31c>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d01f      	beq.n	8002c8a <HAL_GPIO_Init+0x21e>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a4f      	ldr	r2, [pc, #316]	; (8002d8c <HAL_GPIO_Init+0x320>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d019      	beq.n	8002c86 <HAL_GPIO_Init+0x21a>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a4e      	ldr	r2, [pc, #312]	; (8002d90 <HAL_GPIO_Init+0x324>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d013      	beq.n	8002c82 <HAL_GPIO_Init+0x216>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a4d      	ldr	r2, [pc, #308]	; (8002d94 <HAL_GPIO_Init+0x328>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d00d      	beq.n	8002c7e <HAL_GPIO_Init+0x212>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a4c      	ldr	r2, [pc, #304]	; (8002d98 <HAL_GPIO_Init+0x32c>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d007      	beq.n	8002c7a <HAL_GPIO_Init+0x20e>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a4b      	ldr	r2, [pc, #300]	; (8002d9c <HAL_GPIO_Init+0x330>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d101      	bne.n	8002c76 <HAL_GPIO_Init+0x20a>
 8002c72:	2307      	movs	r3, #7
 8002c74:	e00e      	b.n	8002c94 <HAL_GPIO_Init+0x228>
 8002c76:	2308      	movs	r3, #8
 8002c78:	e00c      	b.n	8002c94 <HAL_GPIO_Init+0x228>
 8002c7a:	2306      	movs	r3, #6
 8002c7c:	e00a      	b.n	8002c94 <HAL_GPIO_Init+0x228>
 8002c7e:	2305      	movs	r3, #5
 8002c80:	e008      	b.n	8002c94 <HAL_GPIO_Init+0x228>
 8002c82:	2304      	movs	r3, #4
 8002c84:	e006      	b.n	8002c94 <HAL_GPIO_Init+0x228>
 8002c86:	2303      	movs	r3, #3
 8002c88:	e004      	b.n	8002c94 <HAL_GPIO_Init+0x228>
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	e002      	b.n	8002c94 <HAL_GPIO_Init+0x228>
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e000      	b.n	8002c94 <HAL_GPIO_Init+0x228>
 8002c92:	2300      	movs	r3, #0
 8002c94:	69fa      	ldr	r2, [r7, #28]
 8002c96:	f002 0203 	and.w	r2, r2, #3
 8002c9a:	0092      	lsls	r2, r2, #2
 8002c9c:	4093      	lsls	r3, r2
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ca4:	4935      	ldr	r1, [pc, #212]	; (8002d7c <HAL_GPIO_Init+0x310>)
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	089b      	lsrs	r3, r3, #2
 8002caa:	3302      	adds	r3, #2
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cb2:	4b3b      	ldr	r3, [pc, #236]	; (8002da0 <HAL_GPIO_Init+0x334>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	43db      	mvns	r3, r3
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d003      	beq.n	8002cd6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cd6:	4a32      	ldr	r2, [pc, #200]	; (8002da0 <HAL_GPIO_Init+0x334>)
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002cdc:	4b30      	ldr	r3, [pc, #192]	; (8002da0 <HAL_GPIO_Init+0x334>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	43db      	mvns	r3, r3
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d003      	beq.n	8002d00 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d00:	4a27      	ldr	r2, [pc, #156]	; (8002da0 <HAL_GPIO_Init+0x334>)
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d06:	4b26      	ldr	r3, [pc, #152]	; (8002da0 <HAL_GPIO_Init+0x334>)
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	4013      	ands	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d003      	beq.n	8002d2a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d2a:	4a1d      	ldr	r2, [pc, #116]	; (8002da0 <HAL_GPIO_Init+0x334>)
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d30:	4b1b      	ldr	r3, [pc, #108]	; (8002da0 <HAL_GPIO_Init+0x334>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d003      	beq.n	8002d54 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d54:	4a12      	ldr	r2, [pc, #72]	; (8002da0 <HAL_GPIO_Init+0x334>)
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	61fb      	str	r3, [r7, #28]
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	2b0f      	cmp	r3, #15
 8002d64:	f67f ae90 	bls.w	8002a88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d68:	bf00      	nop
 8002d6a:	bf00      	nop
 8002d6c:	3724      	adds	r7, #36	; 0x24
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	40023800 	.word	0x40023800
 8002d7c:	40013800 	.word	0x40013800
 8002d80:	40020000 	.word	0x40020000
 8002d84:	40020400 	.word	0x40020400
 8002d88:	40020800 	.word	0x40020800
 8002d8c:	40020c00 	.word	0x40020c00
 8002d90:	40021000 	.word	0x40021000
 8002d94:	40021400 	.word	0x40021400
 8002d98:	40021800 	.word	0x40021800
 8002d9c:	40021c00 	.word	0x40021c00
 8002da0:	40013c00 	.word	0x40013c00

08002da4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	460b      	mov	r3, r1
 8002dae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	691a      	ldr	r2, [r3, #16]
 8002db4:	887b      	ldrh	r3, [r7, #2]
 8002db6:	4013      	ands	r3, r2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d002      	beq.n	8002dc2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	73fb      	strb	r3, [r7, #15]
 8002dc0:	e001      	b.n	8002dc6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3714      	adds	r7, #20
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	460b      	mov	r3, r1
 8002dde:	807b      	strh	r3, [r7, #2]
 8002de0:	4613      	mov	r3, r2
 8002de2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002de4:	787b      	ldrb	r3, [r7, #1]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d003      	beq.n	8002df2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dea:	887a      	ldrh	r2, [r7, #2]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002df0:	e003      	b.n	8002dfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002df2:	887b      	ldrh	r3, [r7, #2]
 8002df4:	041a      	lsls	r2, r3, #16
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	619a      	str	r2, [r3, #24]
}
 8002dfa:	bf00      	nop
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002e06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e08:	b08f      	sub	sp, #60	; 0x3c
 8002e0a:	af0a      	add	r7, sp, #40	; 0x28
 8002e0c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d101      	bne.n	8002e18 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e054      	b.n	8002ec2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d106      	bne.n	8002e38 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f008 f8ae 	bl	800af94 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2203      	movs	r2, #3
 8002e3c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d102      	bne.n	8002e52 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f004 f896 	bl	8006f88 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	603b      	str	r3, [r7, #0]
 8002e62:	687e      	ldr	r6, [r7, #4]
 8002e64:	466d      	mov	r5, sp
 8002e66:	f106 0410 	add.w	r4, r6, #16
 8002e6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e72:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e76:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e7a:	1d33      	adds	r3, r6, #4
 8002e7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e7e:	6838      	ldr	r0, [r7, #0]
 8002e80:	f004 f810 	bl	8006ea4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2101      	movs	r1, #1
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f004 f88d 	bl	8006faa <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	603b      	str	r3, [r7, #0]
 8002e96:	687e      	ldr	r6, [r7, #4]
 8002e98:	466d      	mov	r5, sp
 8002e9a:	f106 0410 	add.w	r4, r6, #16
 8002e9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ea0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ea2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ea4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ea6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002eaa:	e885 0003 	stmia.w	r5, {r0, r1}
 8002eae:	1d33      	adds	r3, r6, #4
 8002eb0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002eb2:	6838      	ldr	r0, [r7, #0]
 8002eb4:	f004 f9f4 	bl	80072a0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3714      	adds	r7, #20
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002eca <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002eca:	b590      	push	{r4, r7, lr}
 8002ecc:	b089      	sub	sp, #36	; 0x24
 8002ece:	af04      	add	r7, sp, #16
 8002ed0:	6078      	str	r0, [r7, #4]
 8002ed2:	4608      	mov	r0, r1
 8002ed4:	4611      	mov	r1, r2
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	4603      	mov	r3, r0
 8002eda:	70fb      	strb	r3, [r7, #3]
 8002edc:	460b      	mov	r3, r1
 8002ede:	70bb      	strb	r3, [r7, #2]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d101      	bne.n	8002ef2 <HAL_HCD_HC_Init+0x28>
 8002eee:	2302      	movs	r3, #2
 8002ef0:	e076      	b.n	8002fe0 <HAL_HCD_HC_Init+0x116>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002efa:	78fb      	ldrb	r3, [r7, #3]
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	212c      	movs	r1, #44	; 0x2c
 8002f00:	fb01 f303 	mul.w	r3, r1, r3
 8002f04:	4413      	add	r3, r2
 8002f06:	333d      	adds	r3, #61	; 0x3d
 8002f08:	2200      	movs	r2, #0
 8002f0a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002f0c:	78fb      	ldrb	r3, [r7, #3]
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	212c      	movs	r1, #44	; 0x2c
 8002f12:	fb01 f303 	mul.w	r3, r1, r3
 8002f16:	4413      	add	r3, r2
 8002f18:	3338      	adds	r3, #56	; 0x38
 8002f1a:	787a      	ldrb	r2, [r7, #1]
 8002f1c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002f1e:	78fb      	ldrb	r3, [r7, #3]
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	212c      	movs	r1, #44	; 0x2c
 8002f24:	fb01 f303 	mul.w	r3, r1, r3
 8002f28:	4413      	add	r3, r2
 8002f2a:	3340      	adds	r3, #64	; 0x40
 8002f2c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002f2e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002f30:	78fb      	ldrb	r3, [r7, #3]
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	212c      	movs	r1, #44	; 0x2c
 8002f36:	fb01 f303 	mul.w	r3, r1, r3
 8002f3a:	4413      	add	r3, r2
 8002f3c:	3339      	adds	r3, #57	; 0x39
 8002f3e:	78fa      	ldrb	r2, [r7, #3]
 8002f40:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002f42:	78fb      	ldrb	r3, [r7, #3]
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	212c      	movs	r1, #44	; 0x2c
 8002f48:	fb01 f303 	mul.w	r3, r1, r3
 8002f4c:	4413      	add	r3, r2
 8002f4e:	333f      	adds	r3, #63	; 0x3f
 8002f50:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002f54:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002f56:	78fb      	ldrb	r3, [r7, #3]
 8002f58:	78ba      	ldrb	r2, [r7, #2]
 8002f5a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002f5e:	b2d0      	uxtb	r0, r2
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	212c      	movs	r1, #44	; 0x2c
 8002f64:	fb01 f303 	mul.w	r3, r1, r3
 8002f68:	4413      	add	r3, r2
 8002f6a:	333a      	adds	r3, #58	; 0x3a
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002f70:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	da09      	bge.n	8002f8c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002f78:	78fb      	ldrb	r3, [r7, #3]
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	212c      	movs	r1, #44	; 0x2c
 8002f7e:	fb01 f303 	mul.w	r3, r1, r3
 8002f82:	4413      	add	r3, r2
 8002f84:	333b      	adds	r3, #59	; 0x3b
 8002f86:	2201      	movs	r2, #1
 8002f88:	701a      	strb	r2, [r3, #0]
 8002f8a:	e008      	b.n	8002f9e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002f8c:	78fb      	ldrb	r3, [r7, #3]
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	212c      	movs	r1, #44	; 0x2c
 8002f92:	fb01 f303 	mul.w	r3, r1, r3
 8002f96:	4413      	add	r3, r2
 8002f98:	333b      	adds	r3, #59	; 0x3b
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002f9e:	78fb      	ldrb	r3, [r7, #3]
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	212c      	movs	r1, #44	; 0x2c
 8002fa4:	fb01 f303 	mul.w	r3, r1, r3
 8002fa8:	4413      	add	r3, r2
 8002faa:	333c      	adds	r3, #60	; 0x3c
 8002fac:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002fb0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6818      	ldr	r0, [r3, #0]
 8002fb6:	787c      	ldrb	r4, [r7, #1]
 8002fb8:	78ba      	ldrb	r2, [r7, #2]
 8002fba:	78f9      	ldrb	r1, [r7, #3]
 8002fbc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002fbe:	9302      	str	r3, [sp, #8]
 8002fc0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002fc4:	9301      	str	r3, [sp, #4]
 8002fc6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002fca:	9300      	str	r3, [sp, #0]
 8002fcc:	4623      	mov	r3, r4
 8002fce:	f004 fae1 	bl	8007594 <USB_HC_Init>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3714      	adds	r7, #20
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd90      	pop	{r4, r7, pc}

08002fe8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d101      	bne.n	8003006 <HAL_HCD_HC_Halt+0x1e>
 8003002:	2302      	movs	r3, #2
 8003004:	e00f      	b.n	8003026 <HAL_HCD_HC_Halt+0x3e>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	78fa      	ldrb	r2, [r7, #3]
 8003014:	4611      	mov	r1, r2
 8003016:	4618      	mov	r0, r3
 8003018:	f004 fd1d 	bl	8007a56 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003024:	7bfb      	ldrb	r3, [r7, #15]
}
 8003026:	4618      	mov	r0, r3
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
	...

08003030 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	4608      	mov	r0, r1
 800303a:	4611      	mov	r1, r2
 800303c:	461a      	mov	r2, r3
 800303e:	4603      	mov	r3, r0
 8003040:	70fb      	strb	r3, [r7, #3]
 8003042:	460b      	mov	r3, r1
 8003044:	70bb      	strb	r3, [r7, #2]
 8003046:	4613      	mov	r3, r2
 8003048:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800304a:	78fb      	ldrb	r3, [r7, #3]
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	212c      	movs	r1, #44	; 0x2c
 8003050:	fb01 f303 	mul.w	r3, r1, r3
 8003054:	4413      	add	r3, r2
 8003056:	333b      	adds	r3, #59	; 0x3b
 8003058:	78ba      	ldrb	r2, [r7, #2]
 800305a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800305c:	78fb      	ldrb	r3, [r7, #3]
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	212c      	movs	r1, #44	; 0x2c
 8003062:	fb01 f303 	mul.w	r3, r1, r3
 8003066:	4413      	add	r3, r2
 8003068:	333f      	adds	r3, #63	; 0x3f
 800306a:	787a      	ldrb	r2, [r7, #1]
 800306c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800306e:	7c3b      	ldrb	r3, [r7, #16]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d112      	bne.n	800309a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003074:	78fb      	ldrb	r3, [r7, #3]
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	212c      	movs	r1, #44	; 0x2c
 800307a:	fb01 f303 	mul.w	r3, r1, r3
 800307e:	4413      	add	r3, r2
 8003080:	3342      	adds	r3, #66	; 0x42
 8003082:	2203      	movs	r2, #3
 8003084:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003086:	78fb      	ldrb	r3, [r7, #3]
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	212c      	movs	r1, #44	; 0x2c
 800308c:	fb01 f303 	mul.w	r3, r1, r3
 8003090:	4413      	add	r3, r2
 8003092:	333d      	adds	r3, #61	; 0x3d
 8003094:	7f3a      	ldrb	r2, [r7, #28]
 8003096:	701a      	strb	r2, [r3, #0]
 8003098:	e008      	b.n	80030ac <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800309a:	78fb      	ldrb	r3, [r7, #3]
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	212c      	movs	r1, #44	; 0x2c
 80030a0:	fb01 f303 	mul.w	r3, r1, r3
 80030a4:	4413      	add	r3, r2
 80030a6:	3342      	adds	r3, #66	; 0x42
 80030a8:	2202      	movs	r2, #2
 80030aa:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80030ac:	787b      	ldrb	r3, [r7, #1]
 80030ae:	2b03      	cmp	r3, #3
 80030b0:	f200 80c6 	bhi.w	8003240 <HAL_HCD_HC_SubmitRequest+0x210>
 80030b4:	a201      	add	r2, pc, #4	; (adr r2, 80030bc <HAL_HCD_HC_SubmitRequest+0x8c>)
 80030b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ba:	bf00      	nop
 80030bc:	080030cd 	.word	0x080030cd
 80030c0:	0800322d 	.word	0x0800322d
 80030c4:	08003131 	.word	0x08003131
 80030c8:	080031af 	.word	0x080031af
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80030cc:	7c3b      	ldrb	r3, [r7, #16]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	f040 80b8 	bne.w	8003244 <HAL_HCD_HC_SubmitRequest+0x214>
 80030d4:	78bb      	ldrb	r3, [r7, #2]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f040 80b4 	bne.w	8003244 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80030dc:	8b3b      	ldrh	r3, [r7, #24]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d108      	bne.n	80030f4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80030e2:	78fb      	ldrb	r3, [r7, #3]
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	212c      	movs	r1, #44	; 0x2c
 80030e8:	fb01 f303 	mul.w	r3, r1, r3
 80030ec:	4413      	add	r3, r2
 80030ee:	3355      	adds	r3, #85	; 0x55
 80030f0:	2201      	movs	r2, #1
 80030f2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80030f4:	78fb      	ldrb	r3, [r7, #3]
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	212c      	movs	r1, #44	; 0x2c
 80030fa:	fb01 f303 	mul.w	r3, r1, r3
 80030fe:	4413      	add	r3, r2
 8003100:	3355      	adds	r3, #85	; 0x55
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d109      	bne.n	800311c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003108:	78fb      	ldrb	r3, [r7, #3]
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	212c      	movs	r1, #44	; 0x2c
 800310e:	fb01 f303 	mul.w	r3, r1, r3
 8003112:	4413      	add	r3, r2
 8003114:	3342      	adds	r3, #66	; 0x42
 8003116:	2200      	movs	r2, #0
 8003118:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800311a:	e093      	b.n	8003244 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800311c:	78fb      	ldrb	r3, [r7, #3]
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	212c      	movs	r1, #44	; 0x2c
 8003122:	fb01 f303 	mul.w	r3, r1, r3
 8003126:	4413      	add	r3, r2
 8003128:	3342      	adds	r3, #66	; 0x42
 800312a:	2202      	movs	r2, #2
 800312c:	701a      	strb	r2, [r3, #0]
      break;
 800312e:	e089      	b.n	8003244 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003130:	78bb      	ldrb	r3, [r7, #2]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d11d      	bne.n	8003172 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003136:	78fb      	ldrb	r3, [r7, #3]
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	212c      	movs	r1, #44	; 0x2c
 800313c:	fb01 f303 	mul.w	r3, r1, r3
 8003140:	4413      	add	r3, r2
 8003142:	3355      	adds	r3, #85	; 0x55
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d109      	bne.n	800315e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800314a:	78fb      	ldrb	r3, [r7, #3]
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	212c      	movs	r1, #44	; 0x2c
 8003150:	fb01 f303 	mul.w	r3, r1, r3
 8003154:	4413      	add	r3, r2
 8003156:	3342      	adds	r3, #66	; 0x42
 8003158:	2200      	movs	r2, #0
 800315a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800315c:	e073      	b.n	8003246 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800315e:	78fb      	ldrb	r3, [r7, #3]
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	212c      	movs	r1, #44	; 0x2c
 8003164:	fb01 f303 	mul.w	r3, r1, r3
 8003168:	4413      	add	r3, r2
 800316a:	3342      	adds	r3, #66	; 0x42
 800316c:	2202      	movs	r2, #2
 800316e:	701a      	strb	r2, [r3, #0]
      break;
 8003170:	e069      	b.n	8003246 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003172:	78fb      	ldrb	r3, [r7, #3]
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	212c      	movs	r1, #44	; 0x2c
 8003178:	fb01 f303 	mul.w	r3, r1, r3
 800317c:	4413      	add	r3, r2
 800317e:	3354      	adds	r3, #84	; 0x54
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d109      	bne.n	800319a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003186:	78fb      	ldrb	r3, [r7, #3]
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	212c      	movs	r1, #44	; 0x2c
 800318c:	fb01 f303 	mul.w	r3, r1, r3
 8003190:	4413      	add	r3, r2
 8003192:	3342      	adds	r3, #66	; 0x42
 8003194:	2200      	movs	r2, #0
 8003196:	701a      	strb	r2, [r3, #0]
      break;
 8003198:	e055      	b.n	8003246 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800319a:	78fb      	ldrb	r3, [r7, #3]
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	212c      	movs	r1, #44	; 0x2c
 80031a0:	fb01 f303 	mul.w	r3, r1, r3
 80031a4:	4413      	add	r3, r2
 80031a6:	3342      	adds	r3, #66	; 0x42
 80031a8:	2202      	movs	r2, #2
 80031aa:	701a      	strb	r2, [r3, #0]
      break;
 80031ac:	e04b      	b.n	8003246 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80031ae:	78bb      	ldrb	r3, [r7, #2]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d11d      	bne.n	80031f0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80031b4:	78fb      	ldrb	r3, [r7, #3]
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	212c      	movs	r1, #44	; 0x2c
 80031ba:	fb01 f303 	mul.w	r3, r1, r3
 80031be:	4413      	add	r3, r2
 80031c0:	3355      	adds	r3, #85	; 0x55
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d109      	bne.n	80031dc <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80031c8:	78fb      	ldrb	r3, [r7, #3]
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	212c      	movs	r1, #44	; 0x2c
 80031ce:	fb01 f303 	mul.w	r3, r1, r3
 80031d2:	4413      	add	r3, r2
 80031d4:	3342      	adds	r3, #66	; 0x42
 80031d6:	2200      	movs	r2, #0
 80031d8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80031da:	e034      	b.n	8003246 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80031dc:	78fb      	ldrb	r3, [r7, #3]
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	212c      	movs	r1, #44	; 0x2c
 80031e2:	fb01 f303 	mul.w	r3, r1, r3
 80031e6:	4413      	add	r3, r2
 80031e8:	3342      	adds	r3, #66	; 0x42
 80031ea:	2202      	movs	r2, #2
 80031ec:	701a      	strb	r2, [r3, #0]
      break;
 80031ee:	e02a      	b.n	8003246 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80031f0:	78fb      	ldrb	r3, [r7, #3]
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	212c      	movs	r1, #44	; 0x2c
 80031f6:	fb01 f303 	mul.w	r3, r1, r3
 80031fa:	4413      	add	r3, r2
 80031fc:	3354      	adds	r3, #84	; 0x54
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d109      	bne.n	8003218 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003204:	78fb      	ldrb	r3, [r7, #3]
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	212c      	movs	r1, #44	; 0x2c
 800320a:	fb01 f303 	mul.w	r3, r1, r3
 800320e:	4413      	add	r3, r2
 8003210:	3342      	adds	r3, #66	; 0x42
 8003212:	2200      	movs	r2, #0
 8003214:	701a      	strb	r2, [r3, #0]
      break;
 8003216:	e016      	b.n	8003246 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003218:	78fb      	ldrb	r3, [r7, #3]
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	212c      	movs	r1, #44	; 0x2c
 800321e:	fb01 f303 	mul.w	r3, r1, r3
 8003222:	4413      	add	r3, r2
 8003224:	3342      	adds	r3, #66	; 0x42
 8003226:	2202      	movs	r2, #2
 8003228:	701a      	strb	r2, [r3, #0]
      break;
 800322a:	e00c      	b.n	8003246 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800322c:	78fb      	ldrb	r3, [r7, #3]
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	212c      	movs	r1, #44	; 0x2c
 8003232:	fb01 f303 	mul.w	r3, r1, r3
 8003236:	4413      	add	r3, r2
 8003238:	3342      	adds	r3, #66	; 0x42
 800323a:	2200      	movs	r2, #0
 800323c:	701a      	strb	r2, [r3, #0]
      break;
 800323e:	e002      	b.n	8003246 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003240:	bf00      	nop
 8003242:	e000      	b.n	8003246 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003244:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003246:	78fb      	ldrb	r3, [r7, #3]
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	212c      	movs	r1, #44	; 0x2c
 800324c:	fb01 f303 	mul.w	r3, r1, r3
 8003250:	4413      	add	r3, r2
 8003252:	3344      	adds	r3, #68	; 0x44
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003258:	78fb      	ldrb	r3, [r7, #3]
 800325a:	8b3a      	ldrh	r2, [r7, #24]
 800325c:	6879      	ldr	r1, [r7, #4]
 800325e:	202c      	movs	r0, #44	; 0x2c
 8003260:	fb00 f303 	mul.w	r3, r0, r3
 8003264:	440b      	add	r3, r1
 8003266:	334c      	adds	r3, #76	; 0x4c
 8003268:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800326a:	78fb      	ldrb	r3, [r7, #3]
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	212c      	movs	r1, #44	; 0x2c
 8003270:	fb01 f303 	mul.w	r3, r1, r3
 8003274:	4413      	add	r3, r2
 8003276:	3360      	adds	r3, #96	; 0x60
 8003278:	2200      	movs	r2, #0
 800327a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800327c:	78fb      	ldrb	r3, [r7, #3]
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	212c      	movs	r1, #44	; 0x2c
 8003282:	fb01 f303 	mul.w	r3, r1, r3
 8003286:	4413      	add	r3, r2
 8003288:	3350      	adds	r3, #80	; 0x50
 800328a:	2200      	movs	r2, #0
 800328c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800328e:	78fb      	ldrb	r3, [r7, #3]
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	212c      	movs	r1, #44	; 0x2c
 8003294:	fb01 f303 	mul.w	r3, r1, r3
 8003298:	4413      	add	r3, r2
 800329a:	3339      	adds	r3, #57	; 0x39
 800329c:	78fa      	ldrb	r2, [r7, #3]
 800329e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80032a0:	78fb      	ldrb	r3, [r7, #3]
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	212c      	movs	r1, #44	; 0x2c
 80032a6:	fb01 f303 	mul.w	r3, r1, r3
 80032aa:	4413      	add	r3, r2
 80032ac:	3361      	adds	r3, #97	; 0x61
 80032ae:	2200      	movs	r2, #0
 80032b0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6818      	ldr	r0, [r3, #0]
 80032b6:	78fb      	ldrb	r3, [r7, #3]
 80032b8:	222c      	movs	r2, #44	; 0x2c
 80032ba:	fb02 f303 	mul.w	r3, r2, r3
 80032be:	3338      	adds	r3, #56	; 0x38
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	18d1      	adds	r1, r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	461a      	mov	r2, r3
 80032cc:	f004 fa70 	bl	80077b0 <USB_HC_StartXfer>
 80032d0:	4603      	mov	r3, r0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop

080032dc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f003 ff93 	bl	800721e <USB_GetMode>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	f040 80f6 	bne.w	80034ec <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4618      	mov	r0, r3
 8003306:	f003 ff77 	bl	80071f8 <USB_ReadInterrupts>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	f000 80ec 	beq.w	80034ea <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4618      	mov	r0, r3
 8003318:	f003 ff6e 	bl	80071f8 <USB_ReadInterrupts>
 800331c:	4603      	mov	r3, r0
 800331e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003322:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003326:	d104      	bne.n	8003332 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003330:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4618      	mov	r0, r3
 8003338:	f003 ff5e 	bl	80071f8 <USB_ReadInterrupts>
 800333c:	4603      	mov	r3, r0
 800333e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003342:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003346:	d104      	bne.n	8003352 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003350:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4618      	mov	r0, r3
 8003358:	f003 ff4e 	bl	80071f8 <USB_ReadInterrupts>
 800335c:	4603      	mov	r3, r0
 800335e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003362:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003366:	d104      	bne.n	8003372 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003370:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4618      	mov	r0, r3
 8003378:	f003 ff3e 	bl	80071f8 <USB_ReadInterrupts>
 800337c:	4603      	mov	r3, r0
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	2b02      	cmp	r3, #2
 8003384:	d103      	bne.n	800338e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2202      	movs	r2, #2
 800338c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4618      	mov	r0, r3
 8003394:	f003 ff30 	bl	80071f8 <USB_ReadInterrupts>
 8003398:	4603      	mov	r3, r0
 800339a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800339e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033a2:	d11c      	bne.n	80033de <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80033ac:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10f      	bne.n	80033de <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80033be:	2110      	movs	r1, #16
 80033c0:	6938      	ldr	r0, [r7, #16]
 80033c2:	f003 fe3f 	bl	8007044 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80033c6:	6938      	ldr	r0, [r7, #16]
 80033c8:	f003 fe60 	bl	800708c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2101      	movs	r1, #1
 80033d2:	4618      	mov	r0, r3
 80033d4:	f004 f818 	bl	8007408 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f007 fe59 	bl	800b090 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f003 ff08 	bl	80071f8 <USB_ReadInterrupts>
 80033e8:	4603      	mov	r3, r0
 80033ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033ee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033f2:	d102      	bne.n	80033fa <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f001 fa03 	bl	8004800 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4618      	mov	r0, r3
 8003400:	f003 fefa 	bl	80071f8 <USB_ReadInterrupts>
 8003404:	4603      	mov	r3, r0
 8003406:	f003 0308 	and.w	r3, r3, #8
 800340a:	2b08      	cmp	r3, #8
 800340c:	d106      	bne.n	800341c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f007 fe22 	bl	800b058 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2208      	movs	r2, #8
 800341a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4618      	mov	r0, r3
 8003422:	f003 fee9 	bl	80071f8 <USB_ReadInterrupts>
 8003426:	4603      	mov	r3, r0
 8003428:	f003 0310 	and.w	r3, r3, #16
 800342c:	2b10      	cmp	r3, #16
 800342e:	d101      	bne.n	8003434 <HAL_HCD_IRQHandler+0x158>
 8003430:	2301      	movs	r3, #1
 8003432:	e000      	b.n	8003436 <HAL_HCD_IRQHandler+0x15a>
 8003434:	2300      	movs	r3, #0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d012      	beq.n	8003460 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	699a      	ldr	r2, [r3, #24]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f022 0210 	bic.w	r2, r2, #16
 8003448:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f001 f906 	bl	800465c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	699a      	ldr	r2, [r3, #24]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f042 0210 	orr.w	r2, r2, #16
 800345e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4618      	mov	r0, r3
 8003466:	f003 fec7 	bl	80071f8 <USB_ReadInterrupts>
 800346a:	4603      	mov	r3, r0
 800346c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003470:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003474:	d13a      	bne.n	80034ec <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4618      	mov	r0, r3
 800347c:	f004 fada 	bl	8007a34 <USB_HC_ReadInterrupt>
 8003480:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003482:	2300      	movs	r3, #0
 8003484:	617b      	str	r3, [r7, #20]
 8003486:	e025      	b.n	80034d4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	f003 030f 	and.w	r3, r3, #15
 800348e:	68ba      	ldr	r2, [r7, #8]
 8003490:	fa22 f303 	lsr.w	r3, r2, r3
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	2b00      	cmp	r3, #0
 800349a:	d018      	beq.n	80034ce <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	015a      	lsls	r2, r3, #5
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	4413      	add	r3, r2
 80034a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034b2:	d106      	bne.n	80034c2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	4619      	mov	r1, r3
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 f8ab 	bl	8003616 <HCD_HC_IN_IRQHandler>
 80034c0:	e005      	b.n	80034ce <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	4619      	mov	r1, r3
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 fcc6 	bl	8003e5a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	3301      	adds	r3, #1
 80034d2:	617b      	str	r3, [r7, #20]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	697a      	ldr	r2, [r7, #20]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d3d4      	bcc.n	8003488 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034e6:	615a      	str	r2, [r3, #20]
 80034e8:	e000      	b.n	80034ec <HAL_HCD_IRQHandler+0x210>
      return;
 80034ea:	bf00      	nop
    }
  }
}
 80034ec:	3718      	adds	r7, #24
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b082      	sub	sp, #8
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003500:	2b01      	cmp	r3, #1
 8003502:	d101      	bne.n	8003508 <HAL_HCD_Start+0x16>
 8003504:	2302      	movs	r3, #2
 8003506:	e013      	b.n	8003530 <HAL_HCD_Start+0x3e>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2101      	movs	r1, #1
 8003516:	4618      	mov	r0, r3
 8003518:	f003 ffda 	bl	80074d0 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4618      	mov	r0, r3
 8003522:	f003 fd20 	bl	8006f66 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	3708      	adds	r7, #8
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003546:	2b01      	cmp	r3, #1
 8003548:	d101      	bne.n	800354e <HAL_HCD_Stop+0x16>
 800354a:	2302      	movs	r3, #2
 800354c:	e00d      	b.n	800356a <HAL_HCD_Stop+0x32>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2201      	movs	r2, #1
 8003552:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4618      	mov	r0, r3
 800355c:	f004 fbd4 	bl	8007d08 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3708      	adds	r7, #8
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}

08003572 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003572:	b580      	push	{r7, lr}
 8003574:	b082      	sub	sp, #8
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4618      	mov	r0, r3
 8003580:	f003 ff7c 	bl	800747c <USB_ResetPort>
 8003584:	4603      	mov	r3, r0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3708      	adds	r7, #8
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}

0800358e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800358e:	b480      	push	{r7}
 8003590:	b083      	sub	sp, #12
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
 8003596:	460b      	mov	r3, r1
 8003598:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800359a:	78fb      	ldrb	r3, [r7, #3]
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	212c      	movs	r1, #44	; 0x2c
 80035a0:	fb01 f303 	mul.w	r3, r1, r3
 80035a4:	4413      	add	r3, r2
 80035a6:	3360      	adds	r3, #96	; 0x60
 80035a8:	781b      	ldrb	r3, [r3, #0]
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	370c      	adds	r7, #12
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr

080035b6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80035b6:	b480      	push	{r7}
 80035b8:	b083      	sub	sp, #12
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
 80035be:	460b      	mov	r3, r1
 80035c0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80035c2:	78fb      	ldrb	r3, [r7, #3]
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	212c      	movs	r1, #44	; 0x2c
 80035c8:	fb01 f303 	mul.w	r3, r1, r3
 80035cc:	4413      	add	r3, r2
 80035ce:	3350      	adds	r3, #80	; 0x50
 80035d0:	681b      	ldr	r3, [r3, #0]
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	370c      	adds	r7, #12
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr

080035de <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80035de:	b580      	push	{r7, lr}
 80035e0:	b082      	sub	sp, #8
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f003 ffc0 	bl	8007570 <USB_GetCurrentFrame>
 80035f0:	4603      	mov	r3, r0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3708      	adds	r7, #8
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b082      	sub	sp, #8
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4618      	mov	r0, r3
 8003608:	f003 ff9b 	bl	8007542 <USB_GetHostSpeed>
 800360c:	4603      	mov	r3, r0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3708      	adds	r7, #8
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003616:	b580      	push	{r7, lr}
 8003618:	b086      	sub	sp, #24
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
 800361e:	460b      	mov	r3, r1
 8003620:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800362c:	78fb      	ldrb	r3, [r7, #3]
 800362e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	015a      	lsls	r2, r3, #5
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	4413      	add	r3, r2
 8003638:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f003 0304 	and.w	r3, r3, #4
 8003642:	2b04      	cmp	r3, #4
 8003644:	d119      	bne.n	800367a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	015a      	lsls	r2, r3, #5
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	4413      	add	r3, r2
 800364e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003652:	461a      	mov	r2, r3
 8003654:	2304      	movs	r3, #4
 8003656:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	015a      	lsls	r2, r3, #5
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	4413      	add	r3, r2
 8003660:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	0151      	lsls	r1, r2, #5
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	440a      	add	r2, r1
 800366e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003672:	f043 0302 	orr.w	r3, r3, #2
 8003676:	60d3      	str	r3, [r2, #12]
 8003678:	e101      	b.n	800387e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	015a      	lsls	r2, r3, #5
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	4413      	add	r3, r2
 8003682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800368c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003690:	d12b      	bne.n	80036ea <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	015a      	lsls	r2, r3, #5
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	4413      	add	r3, r2
 800369a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800369e:	461a      	mov	r2, r3
 80036a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036a4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	212c      	movs	r1, #44	; 0x2c
 80036ac:	fb01 f303 	mul.w	r3, r1, r3
 80036b0:	4413      	add	r3, r2
 80036b2:	3361      	adds	r3, #97	; 0x61
 80036b4:	2207      	movs	r2, #7
 80036b6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	015a      	lsls	r2, r3, #5
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	4413      	add	r3, r2
 80036c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	0151      	lsls	r1, r2, #5
 80036ca:	693a      	ldr	r2, [r7, #16]
 80036cc:	440a      	add	r2, r1
 80036ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036d2:	f043 0302 	orr.w	r3, r3, #2
 80036d6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	b2d2      	uxtb	r2, r2
 80036e0:	4611      	mov	r1, r2
 80036e2:	4618      	mov	r0, r3
 80036e4:	f004 f9b7 	bl	8007a56 <USB_HC_Halt>
 80036e8:	e0c9      	b.n	800387e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	015a      	lsls	r2, r3, #5
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	4413      	add	r3, r2
 80036f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f003 0320 	and.w	r3, r3, #32
 80036fc:	2b20      	cmp	r3, #32
 80036fe:	d109      	bne.n	8003714 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	015a      	lsls	r2, r3, #5
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	4413      	add	r3, r2
 8003708:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800370c:	461a      	mov	r2, r3
 800370e:	2320      	movs	r3, #32
 8003710:	6093      	str	r3, [r2, #8]
 8003712:	e0b4      	b.n	800387e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	015a      	lsls	r2, r3, #5
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	4413      	add	r3, r2
 800371c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f003 0308 	and.w	r3, r3, #8
 8003726:	2b08      	cmp	r3, #8
 8003728:	d133      	bne.n	8003792 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	015a      	lsls	r2, r3, #5
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	4413      	add	r3, r2
 8003732:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	68fa      	ldr	r2, [r7, #12]
 800373a:	0151      	lsls	r1, r2, #5
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	440a      	add	r2, r1
 8003740:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003744:	f043 0302 	orr.w	r3, r3, #2
 8003748:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	212c      	movs	r1, #44	; 0x2c
 8003750:	fb01 f303 	mul.w	r3, r1, r3
 8003754:	4413      	add	r3, r2
 8003756:	3361      	adds	r3, #97	; 0x61
 8003758:	2205      	movs	r2, #5
 800375a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	015a      	lsls	r2, r3, #5
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	4413      	add	r3, r2
 8003764:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003768:	461a      	mov	r2, r3
 800376a:	2310      	movs	r3, #16
 800376c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	015a      	lsls	r2, r3, #5
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	4413      	add	r3, r2
 8003776:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800377a:	461a      	mov	r2, r3
 800377c:	2308      	movs	r3, #8
 800377e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	b2d2      	uxtb	r2, r2
 8003788:	4611      	mov	r1, r2
 800378a:	4618      	mov	r0, r3
 800378c:	f004 f963 	bl	8007a56 <USB_HC_Halt>
 8003790:	e075      	b.n	800387e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	015a      	lsls	r2, r3, #5
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	4413      	add	r3, r2
 800379a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037a8:	d134      	bne.n	8003814 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	015a      	lsls	r2, r3, #5
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	4413      	add	r3, r2
 80037b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	0151      	lsls	r1, r2, #5
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	440a      	add	r2, r1
 80037c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037c4:	f043 0302 	orr.w	r3, r3, #2
 80037c8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	212c      	movs	r1, #44	; 0x2c
 80037d0:	fb01 f303 	mul.w	r3, r1, r3
 80037d4:	4413      	add	r3, r2
 80037d6:	3361      	adds	r3, #97	; 0x61
 80037d8:	2208      	movs	r2, #8
 80037da:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	015a      	lsls	r2, r3, #5
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	4413      	add	r3, r2
 80037e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037e8:	461a      	mov	r2, r3
 80037ea:	2310      	movs	r3, #16
 80037ec:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	015a      	lsls	r2, r3, #5
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	4413      	add	r3, r2
 80037f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037fa:	461a      	mov	r2, r3
 80037fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003800:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	b2d2      	uxtb	r2, r2
 800380a:	4611      	mov	r1, r2
 800380c:	4618      	mov	r0, r3
 800380e:	f004 f922 	bl	8007a56 <USB_HC_Halt>
 8003812:	e034      	b.n	800387e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	015a      	lsls	r2, r3, #5
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	4413      	add	r3, r2
 800381c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003826:	2b80      	cmp	r3, #128	; 0x80
 8003828:	d129      	bne.n	800387e <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	015a      	lsls	r2, r3, #5
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	4413      	add	r3, r2
 8003832:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	0151      	lsls	r1, r2, #5
 800383c:	693a      	ldr	r2, [r7, #16]
 800383e:	440a      	add	r2, r1
 8003840:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003844:	f043 0302 	orr.w	r3, r3, #2
 8003848:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	212c      	movs	r1, #44	; 0x2c
 8003850:	fb01 f303 	mul.w	r3, r1, r3
 8003854:	4413      	add	r3, r2
 8003856:	3361      	adds	r3, #97	; 0x61
 8003858:	2206      	movs	r2, #6
 800385a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	b2d2      	uxtb	r2, r2
 8003864:	4611      	mov	r1, r2
 8003866:	4618      	mov	r0, r3
 8003868:	f004 f8f5 	bl	8007a56 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	015a      	lsls	r2, r3, #5
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	4413      	add	r3, r2
 8003874:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003878:	461a      	mov	r2, r3
 800387a:	2380      	movs	r3, #128	; 0x80
 800387c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	015a      	lsls	r2, r3, #5
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	4413      	add	r3, r2
 8003886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003890:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003894:	d122      	bne.n	80038dc <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	015a      	lsls	r2, r3, #5
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	4413      	add	r3, r2
 800389e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	0151      	lsls	r1, r2, #5
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	440a      	add	r2, r1
 80038ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038b0:	f043 0302 	orr.w	r3, r3, #2
 80038b4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	b2d2      	uxtb	r2, r2
 80038be:	4611      	mov	r1, r2
 80038c0:	4618      	mov	r0, r3
 80038c2:	f004 f8c8 	bl	8007a56 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	015a      	lsls	r2, r3, #5
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	4413      	add	r3, r2
 80038ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038d2:	461a      	mov	r2, r3
 80038d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038d8:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80038da:	e2ba      	b.n	8003e52 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	015a      	lsls	r2, r3, #5
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	4413      	add	r3, r2
 80038e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	f040 811b 	bne.w	8003b2a <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d019      	beq.n	8003930 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	212c      	movs	r1, #44	; 0x2c
 8003902:	fb01 f303 	mul.w	r3, r1, r3
 8003906:	4413      	add	r3, r2
 8003908:	3348      	adds	r3, #72	; 0x48
 800390a:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	0159      	lsls	r1, r3, #5
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	440b      	add	r3, r1
 8003914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800391e:	1ad2      	subs	r2, r2, r3
 8003920:	6879      	ldr	r1, [r7, #4]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	202c      	movs	r0, #44	; 0x2c
 8003926:	fb00 f303 	mul.w	r3, r0, r3
 800392a:	440b      	add	r3, r1
 800392c:	3350      	adds	r3, #80	; 0x50
 800392e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	212c      	movs	r1, #44	; 0x2c
 8003936:	fb01 f303 	mul.w	r3, r1, r3
 800393a:	4413      	add	r3, r2
 800393c:	3361      	adds	r3, #97	; 0x61
 800393e:	2201      	movs	r2, #1
 8003940:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	212c      	movs	r1, #44	; 0x2c
 8003948:	fb01 f303 	mul.w	r3, r1, r3
 800394c:	4413      	add	r3, r2
 800394e:	335c      	adds	r3, #92	; 0x5c
 8003950:	2200      	movs	r2, #0
 8003952:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	015a      	lsls	r2, r3, #5
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	4413      	add	r3, r2
 800395c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003960:	461a      	mov	r2, r3
 8003962:	2301      	movs	r3, #1
 8003964:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	212c      	movs	r1, #44	; 0x2c
 800396c:	fb01 f303 	mul.w	r3, r1, r3
 8003970:	4413      	add	r3, r2
 8003972:	333f      	adds	r3, #63	; 0x3f
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d009      	beq.n	800398e <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	212c      	movs	r1, #44	; 0x2c
 8003980:	fb01 f303 	mul.w	r3, r1, r3
 8003984:	4413      	add	r3, r2
 8003986:	333f      	adds	r3, #63	; 0x3f
 8003988:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800398a:	2b02      	cmp	r3, #2
 800398c:	d121      	bne.n	80039d2 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	015a      	lsls	r2, r3, #5
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	4413      	add	r3, r2
 8003996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	0151      	lsls	r1, r2, #5
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	440a      	add	r2, r1
 80039a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039a8:	f043 0302 	orr.w	r3, r3, #2
 80039ac:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68fa      	ldr	r2, [r7, #12]
 80039b4:	b2d2      	uxtb	r2, r2
 80039b6:	4611      	mov	r1, r2
 80039b8:	4618      	mov	r0, r3
 80039ba:	f004 f84c 	bl	8007a56 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	015a      	lsls	r2, r3, #5
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	4413      	add	r3, r2
 80039c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ca:	461a      	mov	r2, r3
 80039cc:	2310      	movs	r3, #16
 80039ce:	6093      	str	r3, [r2, #8]
 80039d0:	e066      	b.n	8003aa0 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	212c      	movs	r1, #44	; 0x2c
 80039d8:	fb01 f303 	mul.w	r3, r1, r3
 80039dc:	4413      	add	r3, r2
 80039de:	333f      	adds	r3, #63	; 0x3f
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	2b03      	cmp	r3, #3
 80039e4:	d127      	bne.n	8003a36 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	015a      	lsls	r2, r3, #5
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	4413      	add	r3, r2
 80039ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	0151      	lsls	r1, r2, #5
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	440a      	add	r2, r1
 80039fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a00:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003a04:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	212c      	movs	r1, #44	; 0x2c
 8003a0c:	fb01 f303 	mul.w	r3, r1, r3
 8003a10:	4413      	add	r3, r2
 8003a12:	3360      	adds	r3, #96	; 0x60
 8003a14:	2201      	movs	r2, #1
 8003a16:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	b2d9      	uxtb	r1, r3
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	202c      	movs	r0, #44	; 0x2c
 8003a22:	fb00 f303 	mul.w	r3, r0, r3
 8003a26:	4413      	add	r3, r2
 8003a28:	3360      	adds	r3, #96	; 0x60
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f007 fb3c 	bl	800b0ac <HAL_HCD_HC_NotifyURBChange_Callback>
 8003a34:	e034      	b.n	8003aa0 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	212c      	movs	r1, #44	; 0x2c
 8003a3c:	fb01 f303 	mul.w	r3, r1, r3
 8003a40:	4413      	add	r3, r2
 8003a42:	333f      	adds	r3, #63	; 0x3f
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d12a      	bne.n	8003aa0 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	212c      	movs	r1, #44	; 0x2c
 8003a50:	fb01 f303 	mul.w	r3, r1, r3
 8003a54:	4413      	add	r3, r2
 8003a56:	3360      	adds	r3, #96	; 0x60
 8003a58:	2201      	movs	r2, #1
 8003a5a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	212c      	movs	r1, #44	; 0x2c
 8003a62:	fb01 f303 	mul.w	r3, r1, r3
 8003a66:	4413      	add	r3, r2
 8003a68:	3354      	adds	r3, #84	; 0x54
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	f083 0301 	eor.w	r3, r3, #1
 8003a70:	b2d8      	uxtb	r0, r3
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	212c      	movs	r1, #44	; 0x2c
 8003a78:	fb01 f303 	mul.w	r3, r1, r3
 8003a7c:	4413      	add	r3, r2
 8003a7e:	3354      	adds	r3, #84	; 0x54
 8003a80:	4602      	mov	r2, r0
 8003a82:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	b2d9      	uxtb	r1, r3
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	202c      	movs	r0, #44	; 0x2c
 8003a8e:	fb00 f303 	mul.w	r3, r0, r3
 8003a92:	4413      	add	r3, r2
 8003a94:	3360      	adds	r3, #96	; 0x60
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	461a      	mov	r2, r3
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f007 fb06 	bl	800b0ac <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d12b      	bne.n	8003b00 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	212c      	movs	r1, #44	; 0x2c
 8003aae:	fb01 f303 	mul.w	r3, r1, r3
 8003ab2:	4413      	add	r3, r2
 8003ab4:	3348      	adds	r3, #72	; 0x48
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	6879      	ldr	r1, [r7, #4]
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	202c      	movs	r0, #44	; 0x2c
 8003abe:	fb00 f202 	mul.w	r2, r0, r2
 8003ac2:	440a      	add	r2, r1
 8003ac4:	3240      	adds	r2, #64	; 0x40
 8003ac6:	8812      	ldrh	r2, [r2, #0]
 8003ac8:	fbb3 f3f2 	udiv	r3, r3, r2
 8003acc:	f003 0301 	and.w	r3, r3, #1
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f000 81be 	beq.w	8003e52 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	212c      	movs	r1, #44	; 0x2c
 8003adc:	fb01 f303 	mul.w	r3, r1, r3
 8003ae0:	4413      	add	r3, r2
 8003ae2:	3354      	adds	r3, #84	; 0x54
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	f083 0301 	eor.w	r3, r3, #1
 8003aea:	b2d8      	uxtb	r0, r3
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	212c      	movs	r1, #44	; 0x2c
 8003af2:	fb01 f303 	mul.w	r3, r1, r3
 8003af6:	4413      	add	r3, r2
 8003af8:	3354      	adds	r3, #84	; 0x54
 8003afa:	4602      	mov	r2, r0
 8003afc:	701a      	strb	r2, [r3, #0]
}
 8003afe:	e1a8      	b.n	8003e52 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	212c      	movs	r1, #44	; 0x2c
 8003b06:	fb01 f303 	mul.w	r3, r1, r3
 8003b0a:	4413      	add	r3, r2
 8003b0c:	3354      	adds	r3, #84	; 0x54
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	f083 0301 	eor.w	r3, r3, #1
 8003b14:	b2d8      	uxtb	r0, r3
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	212c      	movs	r1, #44	; 0x2c
 8003b1c:	fb01 f303 	mul.w	r3, r1, r3
 8003b20:	4413      	add	r3, r2
 8003b22:	3354      	adds	r3, #84	; 0x54
 8003b24:	4602      	mov	r2, r0
 8003b26:	701a      	strb	r2, [r3, #0]
}
 8003b28:	e193      	b.n	8003e52 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	015a      	lsls	r2, r3, #5
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	4413      	add	r3, r2
 8003b32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f003 0302 	and.w	r3, r3, #2
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	f040 8106 	bne.w	8003d4e <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	015a      	lsls	r2, r3, #5
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	4413      	add	r3, r2
 8003b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	0151      	lsls	r1, r2, #5
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	440a      	add	r2, r1
 8003b58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b5c:	f023 0302 	bic.w	r3, r3, #2
 8003b60:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	212c      	movs	r1, #44	; 0x2c
 8003b68:	fb01 f303 	mul.w	r3, r1, r3
 8003b6c:	4413      	add	r3, r2
 8003b6e:	3361      	adds	r3, #97	; 0x61
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d109      	bne.n	8003b8a <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	212c      	movs	r1, #44	; 0x2c
 8003b7c:	fb01 f303 	mul.w	r3, r1, r3
 8003b80:	4413      	add	r3, r2
 8003b82:	3360      	adds	r3, #96	; 0x60
 8003b84:	2201      	movs	r2, #1
 8003b86:	701a      	strb	r2, [r3, #0]
 8003b88:	e0c9      	b.n	8003d1e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	212c      	movs	r1, #44	; 0x2c
 8003b90:	fb01 f303 	mul.w	r3, r1, r3
 8003b94:	4413      	add	r3, r2
 8003b96:	3361      	adds	r3, #97	; 0x61
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	2b05      	cmp	r3, #5
 8003b9c:	d109      	bne.n	8003bb2 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	212c      	movs	r1, #44	; 0x2c
 8003ba4:	fb01 f303 	mul.w	r3, r1, r3
 8003ba8:	4413      	add	r3, r2
 8003baa:	3360      	adds	r3, #96	; 0x60
 8003bac:	2205      	movs	r2, #5
 8003bae:	701a      	strb	r2, [r3, #0]
 8003bb0:	e0b5      	b.n	8003d1e <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	212c      	movs	r1, #44	; 0x2c
 8003bb8:	fb01 f303 	mul.w	r3, r1, r3
 8003bbc:	4413      	add	r3, r2
 8003bbe:	3361      	adds	r3, #97	; 0x61
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	2b06      	cmp	r3, #6
 8003bc4:	d009      	beq.n	8003bda <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	212c      	movs	r1, #44	; 0x2c
 8003bcc:	fb01 f303 	mul.w	r3, r1, r3
 8003bd0:	4413      	add	r3, r2
 8003bd2:	3361      	adds	r3, #97	; 0x61
 8003bd4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003bd6:	2b08      	cmp	r3, #8
 8003bd8:	d150      	bne.n	8003c7c <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	212c      	movs	r1, #44	; 0x2c
 8003be0:	fb01 f303 	mul.w	r3, r1, r3
 8003be4:	4413      	add	r3, r2
 8003be6:	335c      	adds	r3, #92	; 0x5c
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	1c5a      	adds	r2, r3, #1
 8003bec:	6879      	ldr	r1, [r7, #4]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	202c      	movs	r0, #44	; 0x2c
 8003bf2:	fb00 f303 	mul.w	r3, r0, r3
 8003bf6:	440b      	add	r3, r1
 8003bf8:	335c      	adds	r3, #92	; 0x5c
 8003bfa:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	212c      	movs	r1, #44	; 0x2c
 8003c02:	fb01 f303 	mul.w	r3, r1, r3
 8003c06:	4413      	add	r3, r2
 8003c08:	335c      	adds	r3, #92	; 0x5c
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d912      	bls.n	8003c36 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	212c      	movs	r1, #44	; 0x2c
 8003c16:	fb01 f303 	mul.w	r3, r1, r3
 8003c1a:	4413      	add	r3, r2
 8003c1c:	335c      	adds	r3, #92	; 0x5c
 8003c1e:	2200      	movs	r2, #0
 8003c20:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	212c      	movs	r1, #44	; 0x2c
 8003c28:	fb01 f303 	mul.w	r3, r1, r3
 8003c2c:	4413      	add	r3, r2
 8003c2e:	3360      	adds	r3, #96	; 0x60
 8003c30:	2204      	movs	r2, #4
 8003c32:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003c34:	e073      	b.n	8003d1e <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	212c      	movs	r1, #44	; 0x2c
 8003c3c:	fb01 f303 	mul.w	r3, r1, r3
 8003c40:	4413      	add	r3, r2
 8003c42:	3360      	adds	r3, #96	; 0x60
 8003c44:	2202      	movs	r2, #2
 8003c46:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	015a      	lsls	r2, r3, #5
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	4413      	add	r3, r2
 8003c50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c5e:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c66:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	015a      	lsls	r2, r3, #5
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	4413      	add	r3, r2
 8003c70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c74:	461a      	mov	r2, r3
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003c7a:	e050      	b.n	8003d1e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	212c      	movs	r1, #44	; 0x2c
 8003c82:	fb01 f303 	mul.w	r3, r1, r3
 8003c86:	4413      	add	r3, r2
 8003c88:	3361      	adds	r3, #97	; 0x61
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	2b03      	cmp	r3, #3
 8003c8e:	d122      	bne.n	8003cd6 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	212c      	movs	r1, #44	; 0x2c
 8003c96:	fb01 f303 	mul.w	r3, r1, r3
 8003c9a:	4413      	add	r3, r2
 8003c9c:	3360      	adds	r3, #96	; 0x60
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	015a      	lsls	r2, r3, #5
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	4413      	add	r3, r2
 8003caa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003cb8:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003cc0:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	015a      	lsls	r2, r3, #5
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	4413      	add	r3, r2
 8003cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cce:	461a      	mov	r2, r3
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	6013      	str	r3, [r2, #0]
 8003cd4:	e023      	b.n	8003d1e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	212c      	movs	r1, #44	; 0x2c
 8003cdc:	fb01 f303 	mul.w	r3, r1, r3
 8003ce0:	4413      	add	r3, r2
 8003ce2:	3361      	adds	r3, #97	; 0x61
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	2b07      	cmp	r3, #7
 8003ce8:	d119      	bne.n	8003d1e <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	212c      	movs	r1, #44	; 0x2c
 8003cf0:	fb01 f303 	mul.w	r3, r1, r3
 8003cf4:	4413      	add	r3, r2
 8003cf6:	335c      	adds	r3, #92	; 0x5c
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	1c5a      	adds	r2, r3, #1
 8003cfc:	6879      	ldr	r1, [r7, #4]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	202c      	movs	r0, #44	; 0x2c
 8003d02:	fb00 f303 	mul.w	r3, r0, r3
 8003d06:	440b      	add	r3, r1
 8003d08:	335c      	adds	r3, #92	; 0x5c
 8003d0a:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	212c      	movs	r1, #44	; 0x2c
 8003d12:	fb01 f303 	mul.w	r3, r1, r3
 8003d16:	4413      	add	r3, r2
 8003d18:	3360      	adds	r3, #96	; 0x60
 8003d1a:	2204      	movs	r2, #4
 8003d1c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	015a      	lsls	r2, r3, #5
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	4413      	add	r3, r2
 8003d26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	b2d9      	uxtb	r1, r3
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	202c      	movs	r0, #44	; 0x2c
 8003d3a:	fb00 f303 	mul.w	r3, r0, r3
 8003d3e:	4413      	add	r3, r2
 8003d40:	3360      	adds	r3, #96	; 0x60
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	461a      	mov	r2, r3
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f007 f9b0 	bl	800b0ac <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003d4c:	e081      	b.n	8003e52 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	015a      	lsls	r2, r3, #5
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	4413      	add	r3, r2
 8003d56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f003 0310 	and.w	r3, r3, #16
 8003d60:	2b10      	cmp	r3, #16
 8003d62:	d176      	bne.n	8003e52 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	212c      	movs	r1, #44	; 0x2c
 8003d6a:	fb01 f303 	mul.w	r3, r1, r3
 8003d6e:	4413      	add	r3, r2
 8003d70:	333f      	adds	r3, #63	; 0x3f
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	2b03      	cmp	r3, #3
 8003d76:	d121      	bne.n	8003dbc <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	212c      	movs	r1, #44	; 0x2c
 8003d7e:	fb01 f303 	mul.w	r3, r1, r3
 8003d82:	4413      	add	r3, r2
 8003d84:	335c      	adds	r3, #92	; 0x5c
 8003d86:	2200      	movs	r2, #0
 8003d88:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	015a      	lsls	r2, r3, #5
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	4413      	add	r3, r2
 8003d92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	0151      	lsls	r1, r2, #5
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	440a      	add	r2, r1
 8003da0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003da4:	f043 0302 	orr.w	r3, r3, #2
 8003da8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	b2d2      	uxtb	r2, r2
 8003db2:	4611      	mov	r1, r2
 8003db4:	4618      	mov	r0, r3
 8003db6:	f003 fe4e 	bl	8007a56 <USB_HC_Halt>
 8003dba:	e041      	b.n	8003e40 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	212c      	movs	r1, #44	; 0x2c
 8003dc2:	fb01 f303 	mul.w	r3, r1, r3
 8003dc6:	4413      	add	r3, r2
 8003dc8:	333f      	adds	r3, #63	; 0x3f
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d009      	beq.n	8003de4 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	212c      	movs	r1, #44	; 0x2c
 8003dd6:	fb01 f303 	mul.w	r3, r1, r3
 8003dda:	4413      	add	r3, r2
 8003ddc:	333f      	adds	r3, #63	; 0x3f
 8003dde:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d12d      	bne.n	8003e40 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	212c      	movs	r1, #44	; 0x2c
 8003dea:	fb01 f303 	mul.w	r3, r1, r3
 8003dee:	4413      	add	r3, r2
 8003df0:	335c      	adds	r3, #92	; 0x5c
 8003df2:	2200      	movs	r2, #0
 8003df4:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d120      	bne.n	8003e40 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	212c      	movs	r1, #44	; 0x2c
 8003e04:	fb01 f303 	mul.w	r3, r1, r3
 8003e08:	4413      	add	r3, r2
 8003e0a:	3361      	adds	r3, #97	; 0x61
 8003e0c:	2203      	movs	r2, #3
 8003e0e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	015a      	lsls	r2, r3, #5
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	4413      	add	r3, r2
 8003e18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	0151      	lsls	r1, r2, #5
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	440a      	add	r2, r1
 8003e26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e2a:	f043 0302 	orr.w	r3, r3, #2
 8003e2e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68fa      	ldr	r2, [r7, #12]
 8003e36:	b2d2      	uxtb	r2, r2
 8003e38:	4611      	mov	r1, r2
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f003 fe0b 	bl	8007a56 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	015a      	lsls	r2, r3, #5
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	4413      	add	r3, r2
 8003e48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	2310      	movs	r3, #16
 8003e50:	6093      	str	r3, [r2, #8]
}
 8003e52:	bf00      	nop
 8003e54:	3718      	adds	r7, #24
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b088      	sub	sp, #32
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
 8003e62:	460b      	mov	r3, r1
 8003e64:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003e70:	78fb      	ldrb	r3, [r7, #3]
 8003e72:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	015a      	lsls	r2, r3, #5
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f003 0304 	and.w	r3, r3, #4
 8003e86:	2b04      	cmp	r3, #4
 8003e88:	d119      	bne.n	8003ebe <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	015a      	lsls	r2, r3, #5
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	4413      	add	r3, r2
 8003e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e96:	461a      	mov	r2, r3
 8003e98:	2304      	movs	r3, #4
 8003e9a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	015a      	lsls	r2, r3, #5
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	697a      	ldr	r2, [r7, #20]
 8003eac:	0151      	lsls	r1, r2, #5
 8003eae:	69ba      	ldr	r2, [r7, #24]
 8003eb0:	440a      	add	r2, r1
 8003eb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003eb6:	f043 0302 	orr.w	r3, r3, #2
 8003eba:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003ebc:	e3ca      	b.n	8004654 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	015a      	lsls	r2, r3, #5
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f003 0320 	and.w	r3, r3, #32
 8003ed0:	2b20      	cmp	r3, #32
 8003ed2:	d13e      	bne.n	8003f52 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	015a      	lsls	r2, r3, #5
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	4413      	add	r3, r2
 8003edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	2320      	movs	r3, #32
 8003ee4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	212c      	movs	r1, #44	; 0x2c
 8003eec:	fb01 f303 	mul.w	r3, r1, r3
 8003ef0:	4413      	add	r3, r2
 8003ef2:	333d      	adds	r3, #61	; 0x3d
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	f040 83ac 	bne.w	8004654 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	212c      	movs	r1, #44	; 0x2c
 8003f02:	fb01 f303 	mul.w	r3, r1, r3
 8003f06:	4413      	add	r3, r2
 8003f08:	333d      	adds	r3, #61	; 0x3d
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	212c      	movs	r1, #44	; 0x2c
 8003f14:	fb01 f303 	mul.w	r3, r1, r3
 8003f18:	4413      	add	r3, r2
 8003f1a:	3360      	adds	r3, #96	; 0x60
 8003f1c:	2202      	movs	r2, #2
 8003f1e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	015a      	lsls	r2, r3, #5
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	4413      	add	r3, r2
 8003f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	697a      	ldr	r2, [r7, #20]
 8003f30:	0151      	lsls	r1, r2, #5
 8003f32:	69ba      	ldr	r2, [r7, #24]
 8003f34:	440a      	add	r2, r1
 8003f36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f3a:	f043 0302 	orr.w	r3, r3, #2
 8003f3e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	697a      	ldr	r2, [r7, #20]
 8003f46:	b2d2      	uxtb	r2, r2
 8003f48:	4611      	mov	r1, r2
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f003 fd83 	bl	8007a56 <USB_HC_Halt>
}
 8003f50:	e380      	b.n	8004654 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	015a      	lsls	r2, r3, #5
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	4413      	add	r3, r2
 8003f5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f68:	d122      	bne.n	8003fb0 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	015a      	lsls	r2, r3, #5
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	4413      	add	r3, r2
 8003f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	0151      	lsls	r1, r2, #5
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	440a      	add	r2, r1
 8003f80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f84:	f043 0302 	orr.w	r3, r3, #2
 8003f88:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	697a      	ldr	r2, [r7, #20]
 8003f90:	b2d2      	uxtb	r2, r2
 8003f92:	4611      	mov	r1, r2
 8003f94:	4618      	mov	r0, r3
 8003f96:	f003 fd5e 	bl	8007a56 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	015a      	lsls	r2, r3, #5
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003fac:	6093      	str	r3, [r2, #8]
}
 8003fae:	e351      	b.n	8004654 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	015a      	lsls	r2, r3, #5
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f003 0301 	and.w	r3, r3, #1
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d150      	bne.n	8004068 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	212c      	movs	r1, #44	; 0x2c
 8003fcc:	fb01 f303 	mul.w	r3, r1, r3
 8003fd0:	4413      	add	r3, r2
 8003fd2:	335c      	adds	r3, #92	; 0x5c
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	015a      	lsls	r2, r3, #5
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	4413      	add	r3, r2
 8003fe0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fea:	2b40      	cmp	r3, #64	; 0x40
 8003fec:	d111      	bne.n	8004012 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	212c      	movs	r1, #44	; 0x2c
 8003ff4:	fb01 f303 	mul.w	r3, r1, r3
 8003ff8:	4413      	add	r3, r2
 8003ffa:	333d      	adds	r3, #61	; 0x3d
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	015a      	lsls	r2, r3, #5
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	4413      	add	r3, r2
 8004008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800400c:	461a      	mov	r2, r3
 800400e:	2340      	movs	r3, #64	; 0x40
 8004010:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	015a      	lsls	r2, r3, #5
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	4413      	add	r3, r2
 800401a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	697a      	ldr	r2, [r7, #20]
 8004022:	0151      	lsls	r1, r2, #5
 8004024:	69ba      	ldr	r2, [r7, #24]
 8004026:	440a      	add	r2, r1
 8004028:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800402c:	f043 0302 	orr.w	r3, r3, #2
 8004030:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	697a      	ldr	r2, [r7, #20]
 8004038:	b2d2      	uxtb	r2, r2
 800403a:	4611      	mov	r1, r2
 800403c:	4618      	mov	r0, r3
 800403e:	f003 fd0a 	bl	8007a56 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	015a      	lsls	r2, r3, #5
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	4413      	add	r3, r2
 800404a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800404e:	461a      	mov	r2, r3
 8004050:	2301      	movs	r3, #1
 8004052:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	212c      	movs	r1, #44	; 0x2c
 800405a:	fb01 f303 	mul.w	r3, r1, r3
 800405e:	4413      	add	r3, r2
 8004060:	3361      	adds	r3, #97	; 0x61
 8004062:	2201      	movs	r2, #1
 8004064:	701a      	strb	r2, [r3, #0]
}
 8004066:	e2f5      	b.n	8004654 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	015a      	lsls	r2, r3, #5
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	4413      	add	r3, r2
 8004070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800407a:	2b40      	cmp	r3, #64	; 0x40
 800407c:	d13c      	bne.n	80040f8 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	212c      	movs	r1, #44	; 0x2c
 8004084:	fb01 f303 	mul.w	r3, r1, r3
 8004088:	4413      	add	r3, r2
 800408a:	3361      	adds	r3, #97	; 0x61
 800408c:	2204      	movs	r2, #4
 800408e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	212c      	movs	r1, #44	; 0x2c
 8004096:	fb01 f303 	mul.w	r3, r1, r3
 800409a:	4413      	add	r3, r2
 800409c:	333d      	adds	r3, #61	; 0x3d
 800409e:	2201      	movs	r2, #1
 80040a0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	212c      	movs	r1, #44	; 0x2c
 80040a8:	fb01 f303 	mul.w	r3, r1, r3
 80040ac:	4413      	add	r3, r2
 80040ae:	335c      	adds	r3, #92	; 0x5c
 80040b0:	2200      	movs	r2, #0
 80040b2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	015a      	lsls	r2, r3, #5
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	4413      	add	r3, r2
 80040bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	0151      	lsls	r1, r2, #5
 80040c6:	69ba      	ldr	r2, [r7, #24]
 80040c8:	440a      	add	r2, r1
 80040ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040ce:	f043 0302 	orr.w	r3, r3, #2
 80040d2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	b2d2      	uxtb	r2, r2
 80040dc:	4611      	mov	r1, r2
 80040de:	4618      	mov	r0, r3
 80040e0:	f003 fcb9 	bl	8007a56 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	015a      	lsls	r2, r3, #5
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	4413      	add	r3, r2
 80040ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040f0:	461a      	mov	r2, r3
 80040f2:	2340      	movs	r3, #64	; 0x40
 80040f4:	6093      	str	r3, [r2, #8]
}
 80040f6:	e2ad      	b.n	8004654 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	015a      	lsls	r2, r3, #5
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	4413      	add	r3, r2
 8004100:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	f003 0308 	and.w	r3, r3, #8
 800410a:	2b08      	cmp	r3, #8
 800410c:	d12a      	bne.n	8004164 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	015a      	lsls	r2, r3, #5
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	4413      	add	r3, r2
 8004116:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800411a:	461a      	mov	r2, r3
 800411c:	2308      	movs	r3, #8
 800411e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	015a      	lsls	r2, r3, #5
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	4413      	add	r3, r2
 8004128:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	697a      	ldr	r2, [r7, #20]
 8004130:	0151      	lsls	r1, r2, #5
 8004132:	69ba      	ldr	r2, [r7, #24]
 8004134:	440a      	add	r2, r1
 8004136:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800413a:	f043 0302 	orr.w	r3, r3, #2
 800413e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	697a      	ldr	r2, [r7, #20]
 8004146:	b2d2      	uxtb	r2, r2
 8004148:	4611      	mov	r1, r2
 800414a:	4618      	mov	r0, r3
 800414c:	f003 fc83 	bl	8007a56 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	212c      	movs	r1, #44	; 0x2c
 8004156:	fb01 f303 	mul.w	r3, r1, r3
 800415a:	4413      	add	r3, r2
 800415c:	3361      	adds	r3, #97	; 0x61
 800415e:	2205      	movs	r2, #5
 8004160:	701a      	strb	r2, [r3, #0]
}
 8004162:	e277      	b.n	8004654 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	015a      	lsls	r2, r3, #5
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	4413      	add	r3, r2
 800416c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f003 0310 	and.w	r3, r3, #16
 8004176:	2b10      	cmp	r3, #16
 8004178:	d150      	bne.n	800421c <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	212c      	movs	r1, #44	; 0x2c
 8004180:	fb01 f303 	mul.w	r3, r1, r3
 8004184:	4413      	add	r3, r2
 8004186:	335c      	adds	r3, #92	; 0x5c
 8004188:	2200      	movs	r2, #0
 800418a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	212c      	movs	r1, #44	; 0x2c
 8004192:	fb01 f303 	mul.w	r3, r1, r3
 8004196:	4413      	add	r3, r2
 8004198:	3361      	adds	r3, #97	; 0x61
 800419a:	2203      	movs	r2, #3
 800419c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	212c      	movs	r1, #44	; 0x2c
 80041a4:	fb01 f303 	mul.w	r3, r1, r3
 80041a8:	4413      	add	r3, r2
 80041aa:	333d      	adds	r3, #61	; 0x3d
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d112      	bne.n	80041d8 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	212c      	movs	r1, #44	; 0x2c
 80041b8:	fb01 f303 	mul.w	r3, r1, r3
 80041bc:	4413      	add	r3, r2
 80041be:	333c      	adds	r3, #60	; 0x3c
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d108      	bne.n	80041d8 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	212c      	movs	r1, #44	; 0x2c
 80041cc:	fb01 f303 	mul.w	r3, r1, r3
 80041d0:	4413      	add	r3, r2
 80041d2:	333d      	adds	r3, #61	; 0x3d
 80041d4:	2201      	movs	r2, #1
 80041d6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	015a      	lsls	r2, r3, #5
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	4413      	add	r3, r2
 80041e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	0151      	lsls	r1, r2, #5
 80041ea:	69ba      	ldr	r2, [r7, #24]
 80041ec:	440a      	add	r2, r1
 80041ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041f2:	f043 0302 	orr.w	r3, r3, #2
 80041f6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	697a      	ldr	r2, [r7, #20]
 80041fe:	b2d2      	uxtb	r2, r2
 8004200:	4611      	mov	r1, r2
 8004202:	4618      	mov	r0, r3
 8004204:	f003 fc27 	bl	8007a56 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	015a      	lsls	r2, r3, #5
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	4413      	add	r3, r2
 8004210:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004214:	461a      	mov	r2, r3
 8004216:	2310      	movs	r3, #16
 8004218:	6093      	str	r3, [r2, #8]
}
 800421a:	e21b      	b.n	8004654 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	015a      	lsls	r2, r3, #5
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	4413      	add	r3, r2
 8004224:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800422e:	2b80      	cmp	r3, #128	; 0x80
 8004230:	d174      	bne.n	800431c <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d121      	bne.n	800427e <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	212c      	movs	r1, #44	; 0x2c
 8004240:	fb01 f303 	mul.w	r3, r1, r3
 8004244:	4413      	add	r3, r2
 8004246:	3361      	adds	r3, #97	; 0x61
 8004248:	2206      	movs	r2, #6
 800424a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	015a      	lsls	r2, r3, #5
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	4413      	add	r3, r2
 8004254:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	697a      	ldr	r2, [r7, #20]
 800425c:	0151      	lsls	r1, r2, #5
 800425e:	69ba      	ldr	r2, [r7, #24]
 8004260:	440a      	add	r2, r1
 8004262:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004266:	f043 0302 	orr.w	r3, r3, #2
 800426a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	697a      	ldr	r2, [r7, #20]
 8004272:	b2d2      	uxtb	r2, r2
 8004274:	4611      	mov	r1, r2
 8004276:	4618      	mov	r0, r3
 8004278:	f003 fbed 	bl	8007a56 <USB_HC_Halt>
 800427c:	e044      	b.n	8004308 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	212c      	movs	r1, #44	; 0x2c
 8004284:	fb01 f303 	mul.w	r3, r1, r3
 8004288:	4413      	add	r3, r2
 800428a:	335c      	adds	r3, #92	; 0x5c
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	1c5a      	adds	r2, r3, #1
 8004290:	6879      	ldr	r1, [r7, #4]
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	202c      	movs	r0, #44	; 0x2c
 8004296:	fb00 f303 	mul.w	r3, r0, r3
 800429a:	440b      	add	r3, r1
 800429c:	335c      	adds	r3, #92	; 0x5c
 800429e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	212c      	movs	r1, #44	; 0x2c
 80042a6:	fb01 f303 	mul.w	r3, r1, r3
 80042aa:	4413      	add	r3, r2
 80042ac:	335c      	adds	r3, #92	; 0x5c
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d920      	bls.n	80042f6 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	212c      	movs	r1, #44	; 0x2c
 80042ba:	fb01 f303 	mul.w	r3, r1, r3
 80042be:	4413      	add	r3, r2
 80042c0:	335c      	adds	r3, #92	; 0x5c
 80042c2:	2200      	movs	r2, #0
 80042c4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	212c      	movs	r1, #44	; 0x2c
 80042cc:	fb01 f303 	mul.w	r3, r1, r3
 80042d0:	4413      	add	r3, r2
 80042d2:	3360      	adds	r3, #96	; 0x60
 80042d4:	2204      	movs	r2, #4
 80042d6:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	b2d9      	uxtb	r1, r3
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	202c      	movs	r0, #44	; 0x2c
 80042e2:	fb00 f303 	mul.w	r3, r0, r3
 80042e6:	4413      	add	r3, r2
 80042e8:	3360      	adds	r3, #96	; 0x60
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	461a      	mov	r2, r3
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f006 fedc 	bl	800b0ac <HAL_HCD_HC_NotifyURBChange_Callback>
 80042f4:	e008      	b.n	8004308 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	212c      	movs	r1, #44	; 0x2c
 80042fc:	fb01 f303 	mul.w	r3, r1, r3
 8004300:	4413      	add	r3, r2
 8004302:	3360      	adds	r3, #96	; 0x60
 8004304:	2202      	movs	r2, #2
 8004306:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	015a      	lsls	r2, r3, #5
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	4413      	add	r3, r2
 8004310:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004314:	461a      	mov	r2, r3
 8004316:	2380      	movs	r3, #128	; 0x80
 8004318:	6093      	str	r3, [r2, #8]
}
 800431a:	e19b      	b.n	8004654 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	015a      	lsls	r2, r3, #5
 8004320:	69bb      	ldr	r3, [r7, #24]
 8004322:	4413      	add	r3, r2
 8004324:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800432e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004332:	d134      	bne.n	800439e <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	015a      	lsls	r2, r3, #5
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	4413      	add	r3, r2
 800433c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	0151      	lsls	r1, r2, #5
 8004346:	69ba      	ldr	r2, [r7, #24]
 8004348:	440a      	add	r2, r1
 800434a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800434e:	f043 0302 	orr.w	r3, r3, #2
 8004352:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	697a      	ldr	r2, [r7, #20]
 800435a:	b2d2      	uxtb	r2, r2
 800435c:	4611      	mov	r1, r2
 800435e:	4618      	mov	r0, r3
 8004360:	f003 fb79 	bl	8007a56 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	015a      	lsls	r2, r3, #5
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	4413      	add	r3, r2
 800436c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004370:	461a      	mov	r2, r3
 8004372:	2310      	movs	r3, #16
 8004374:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	015a      	lsls	r2, r3, #5
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	4413      	add	r3, r2
 800437e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004382:	461a      	mov	r2, r3
 8004384:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004388:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	212c      	movs	r1, #44	; 0x2c
 8004390:	fb01 f303 	mul.w	r3, r1, r3
 8004394:	4413      	add	r3, r2
 8004396:	3361      	adds	r3, #97	; 0x61
 8004398:	2208      	movs	r2, #8
 800439a:	701a      	strb	r2, [r3, #0]
}
 800439c:	e15a      	b.n	8004654 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	015a      	lsls	r2, r3, #5
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	4413      	add	r3, r2
 80043a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	f040 814f 	bne.w	8004654 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	015a      	lsls	r2, r3, #5
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	4413      	add	r3, r2
 80043be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	697a      	ldr	r2, [r7, #20]
 80043c6:	0151      	lsls	r1, r2, #5
 80043c8:	69ba      	ldr	r2, [r7, #24]
 80043ca:	440a      	add	r2, r1
 80043cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043d0:	f023 0302 	bic.w	r3, r3, #2
 80043d4:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	212c      	movs	r1, #44	; 0x2c
 80043dc:	fb01 f303 	mul.w	r3, r1, r3
 80043e0:	4413      	add	r3, r2
 80043e2:	3361      	adds	r3, #97	; 0x61
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d17d      	bne.n	80044e6 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	212c      	movs	r1, #44	; 0x2c
 80043f0:	fb01 f303 	mul.w	r3, r1, r3
 80043f4:	4413      	add	r3, r2
 80043f6:	3360      	adds	r3, #96	; 0x60
 80043f8:	2201      	movs	r2, #1
 80043fa:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	212c      	movs	r1, #44	; 0x2c
 8004402:	fb01 f303 	mul.w	r3, r1, r3
 8004406:	4413      	add	r3, r2
 8004408:	333f      	adds	r3, #63	; 0x3f
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	2b02      	cmp	r3, #2
 800440e:	d00a      	beq.n	8004426 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	212c      	movs	r1, #44	; 0x2c
 8004416:	fb01 f303 	mul.w	r3, r1, r3
 800441a:	4413      	add	r3, r2
 800441c:	333f      	adds	r3, #63	; 0x3f
 800441e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004420:	2b03      	cmp	r3, #3
 8004422:	f040 8100 	bne.w	8004626 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d113      	bne.n	8004456 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	212c      	movs	r1, #44	; 0x2c
 8004434:	fb01 f303 	mul.w	r3, r1, r3
 8004438:	4413      	add	r3, r2
 800443a:	3355      	adds	r3, #85	; 0x55
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	f083 0301 	eor.w	r3, r3, #1
 8004442:	b2d8      	uxtb	r0, r3
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	212c      	movs	r1, #44	; 0x2c
 800444a:	fb01 f303 	mul.w	r3, r1, r3
 800444e:	4413      	add	r3, r2
 8004450:	3355      	adds	r3, #85	; 0x55
 8004452:	4602      	mov	r2, r0
 8004454:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	2b01      	cmp	r3, #1
 800445c:	f040 80e3 	bne.w	8004626 <HCD_HC_OUT_IRQHandler+0x7cc>
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	212c      	movs	r1, #44	; 0x2c
 8004466:	fb01 f303 	mul.w	r3, r1, r3
 800446a:	4413      	add	r3, r2
 800446c:	334c      	adds	r3, #76	; 0x4c
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2b00      	cmp	r3, #0
 8004472:	f000 80d8 	beq.w	8004626 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	212c      	movs	r1, #44	; 0x2c
 800447c:	fb01 f303 	mul.w	r3, r1, r3
 8004480:	4413      	add	r3, r2
 8004482:	334c      	adds	r3, #76	; 0x4c
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	6879      	ldr	r1, [r7, #4]
 8004488:	697a      	ldr	r2, [r7, #20]
 800448a:	202c      	movs	r0, #44	; 0x2c
 800448c:	fb00 f202 	mul.w	r2, r0, r2
 8004490:	440a      	add	r2, r1
 8004492:	3240      	adds	r2, #64	; 0x40
 8004494:	8812      	ldrh	r2, [r2, #0]
 8004496:	4413      	add	r3, r2
 8004498:	3b01      	subs	r3, #1
 800449a:	6879      	ldr	r1, [r7, #4]
 800449c:	697a      	ldr	r2, [r7, #20]
 800449e:	202c      	movs	r0, #44	; 0x2c
 80044a0:	fb00 f202 	mul.w	r2, r0, r2
 80044a4:	440a      	add	r2, r1
 80044a6:	3240      	adds	r2, #64	; 0x40
 80044a8:	8812      	ldrh	r2, [r2, #0]
 80044aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80044ae:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	f000 80b5 	beq.w	8004626 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	212c      	movs	r1, #44	; 0x2c
 80044c2:	fb01 f303 	mul.w	r3, r1, r3
 80044c6:	4413      	add	r3, r2
 80044c8:	3355      	adds	r3, #85	; 0x55
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	f083 0301 	eor.w	r3, r3, #1
 80044d0:	b2d8      	uxtb	r0, r3
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	212c      	movs	r1, #44	; 0x2c
 80044d8:	fb01 f303 	mul.w	r3, r1, r3
 80044dc:	4413      	add	r3, r2
 80044de:	3355      	adds	r3, #85	; 0x55
 80044e0:	4602      	mov	r2, r0
 80044e2:	701a      	strb	r2, [r3, #0]
 80044e4:	e09f      	b.n	8004626 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	212c      	movs	r1, #44	; 0x2c
 80044ec:	fb01 f303 	mul.w	r3, r1, r3
 80044f0:	4413      	add	r3, r2
 80044f2:	3361      	adds	r3, #97	; 0x61
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	2b03      	cmp	r3, #3
 80044f8:	d109      	bne.n	800450e <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	212c      	movs	r1, #44	; 0x2c
 8004500:	fb01 f303 	mul.w	r3, r1, r3
 8004504:	4413      	add	r3, r2
 8004506:	3360      	adds	r3, #96	; 0x60
 8004508:	2202      	movs	r2, #2
 800450a:	701a      	strb	r2, [r3, #0]
 800450c:	e08b      	b.n	8004626 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	212c      	movs	r1, #44	; 0x2c
 8004514:	fb01 f303 	mul.w	r3, r1, r3
 8004518:	4413      	add	r3, r2
 800451a:	3361      	adds	r3, #97	; 0x61
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	2b04      	cmp	r3, #4
 8004520:	d109      	bne.n	8004536 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	212c      	movs	r1, #44	; 0x2c
 8004528:	fb01 f303 	mul.w	r3, r1, r3
 800452c:	4413      	add	r3, r2
 800452e:	3360      	adds	r3, #96	; 0x60
 8004530:	2202      	movs	r2, #2
 8004532:	701a      	strb	r2, [r3, #0]
 8004534:	e077      	b.n	8004626 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	212c      	movs	r1, #44	; 0x2c
 800453c:	fb01 f303 	mul.w	r3, r1, r3
 8004540:	4413      	add	r3, r2
 8004542:	3361      	adds	r3, #97	; 0x61
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	2b05      	cmp	r3, #5
 8004548:	d109      	bne.n	800455e <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	212c      	movs	r1, #44	; 0x2c
 8004550:	fb01 f303 	mul.w	r3, r1, r3
 8004554:	4413      	add	r3, r2
 8004556:	3360      	adds	r3, #96	; 0x60
 8004558:	2205      	movs	r2, #5
 800455a:	701a      	strb	r2, [r3, #0]
 800455c:	e063      	b.n	8004626 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	212c      	movs	r1, #44	; 0x2c
 8004564:	fb01 f303 	mul.w	r3, r1, r3
 8004568:	4413      	add	r3, r2
 800456a:	3361      	adds	r3, #97	; 0x61
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	2b06      	cmp	r3, #6
 8004570:	d009      	beq.n	8004586 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	212c      	movs	r1, #44	; 0x2c
 8004578:	fb01 f303 	mul.w	r3, r1, r3
 800457c:	4413      	add	r3, r2
 800457e:	3361      	adds	r3, #97	; 0x61
 8004580:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004582:	2b08      	cmp	r3, #8
 8004584:	d14f      	bne.n	8004626 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	212c      	movs	r1, #44	; 0x2c
 800458c:	fb01 f303 	mul.w	r3, r1, r3
 8004590:	4413      	add	r3, r2
 8004592:	335c      	adds	r3, #92	; 0x5c
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	1c5a      	adds	r2, r3, #1
 8004598:	6879      	ldr	r1, [r7, #4]
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	202c      	movs	r0, #44	; 0x2c
 800459e:	fb00 f303 	mul.w	r3, r0, r3
 80045a2:	440b      	add	r3, r1
 80045a4:	335c      	adds	r3, #92	; 0x5c
 80045a6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	212c      	movs	r1, #44	; 0x2c
 80045ae:	fb01 f303 	mul.w	r3, r1, r3
 80045b2:	4413      	add	r3, r2
 80045b4:	335c      	adds	r3, #92	; 0x5c
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d912      	bls.n	80045e2 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	212c      	movs	r1, #44	; 0x2c
 80045c2:	fb01 f303 	mul.w	r3, r1, r3
 80045c6:	4413      	add	r3, r2
 80045c8:	335c      	adds	r3, #92	; 0x5c
 80045ca:	2200      	movs	r2, #0
 80045cc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	212c      	movs	r1, #44	; 0x2c
 80045d4:	fb01 f303 	mul.w	r3, r1, r3
 80045d8:	4413      	add	r3, r2
 80045da:	3360      	adds	r3, #96	; 0x60
 80045dc:	2204      	movs	r2, #4
 80045de:	701a      	strb	r2, [r3, #0]
 80045e0:	e021      	b.n	8004626 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	212c      	movs	r1, #44	; 0x2c
 80045e8:	fb01 f303 	mul.w	r3, r1, r3
 80045ec:	4413      	add	r3, r2
 80045ee:	3360      	adds	r3, #96	; 0x60
 80045f0:	2202      	movs	r2, #2
 80045f2:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	015a      	lsls	r2, r3, #5
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	4413      	add	r3, r2
 80045fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800460a:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004612:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	015a      	lsls	r2, r3, #5
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	4413      	add	r3, r2
 800461c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004620:	461a      	mov	r2, r3
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	015a      	lsls	r2, r3, #5
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	4413      	add	r3, r2
 800462e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004632:	461a      	mov	r2, r3
 8004634:	2302      	movs	r3, #2
 8004636:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	b2d9      	uxtb	r1, r3
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	202c      	movs	r0, #44	; 0x2c
 8004642:	fb00 f303 	mul.w	r3, r0, r3
 8004646:	4413      	add	r3, r2
 8004648:	3360      	adds	r3, #96	; 0x60
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	461a      	mov	r2, r3
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f006 fd2c 	bl	800b0ac <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004654:	bf00      	nop
 8004656:	3720      	adds	r7, #32
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b08a      	sub	sp, #40	; 0x28
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800466a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466c:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	6a1b      	ldr	r3, [r3, #32]
 8004674:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	f003 030f 	and.w	r3, r3, #15
 800467c:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	0c5b      	lsrs	r3, r3, #17
 8004682:	f003 030f 	and.w	r3, r3, #15
 8004686:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	091b      	lsrs	r3, r3, #4
 800468c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004690:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	2b02      	cmp	r3, #2
 8004696:	d004      	beq.n	80046a2 <HCD_RXQLVL_IRQHandler+0x46>
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	2b05      	cmp	r3, #5
 800469c:	f000 80a9 	beq.w	80047f2 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80046a0:	e0aa      	b.n	80047f8 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	f000 80a6 	beq.w	80047f6 <HCD_RXQLVL_IRQHandler+0x19a>
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	212c      	movs	r1, #44	; 0x2c
 80046b0:	fb01 f303 	mul.w	r3, r1, r3
 80046b4:	4413      	add	r3, r2
 80046b6:	3344      	adds	r3, #68	; 0x44
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	f000 809b 	beq.w	80047f6 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	212c      	movs	r1, #44	; 0x2c
 80046c6:	fb01 f303 	mul.w	r3, r1, r3
 80046ca:	4413      	add	r3, r2
 80046cc:	3350      	adds	r3, #80	; 0x50
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	441a      	add	r2, r3
 80046d4:	6879      	ldr	r1, [r7, #4]
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	202c      	movs	r0, #44	; 0x2c
 80046da:	fb00 f303 	mul.w	r3, r0, r3
 80046de:	440b      	add	r3, r1
 80046e0:	334c      	adds	r3, #76	; 0x4c
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d87a      	bhi.n	80047de <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6818      	ldr	r0, [r3, #0]
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	212c      	movs	r1, #44	; 0x2c
 80046f2:	fb01 f303 	mul.w	r3, r1, r3
 80046f6:	4413      	add	r3, r2
 80046f8:	3344      	adds	r3, #68	; 0x44
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	b292      	uxth	r2, r2
 8004700:	4619      	mov	r1, r3
 8004702:	f002 fd21 	bl	8007148 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	212c      	movs	r1, #44	; 0x2c
 800470c:	fb01 f303 	mul.w	r3, r1, r3
 8004710:	4413      	add	r3, r2
 8004712:	3344      	adds	r3, #68	; 0x44
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	441a      	add	r2, r3
 800471a:	6879      	ldr	r1, [r7, #4]
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	202c      	movs	r0, #44	; 0x2c
 8004720:	fb00 f303 	mul.w	r3, r0, r3
 8004724:	440b      	add	r3, r1
 8004726:	3344      	adds	r3, #68	; 0x44
 8004728:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	212c      	movs	r1, #44	; 0x2c
 8004730:	fb01 f303 	mul.w	r3, r1, r3
 8004734:	4413      	add	r3, r2
 8004736:	3350      	adds	r3, #80	; 0x50
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	441a      	add	r2, r3
 800473e:	6879      	ldr	r1, [r7, #4]
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	202c      	movs	r0, #44	; 0x2c
 8004744:	fb00 f303 	mul.w	r3, r0, r3
 8004748:	440b      	add	r3, r1
 800474a:	3350      	adds	r3, #80	; 0x50
 800474c:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	015a      	lsls	r2, r3, #5
 8004752:	6a3b      	ldr	r3, [r7, #32]
 8004754:	4413      	add	r3, r2
 8004756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	0cdb      	lsrs	r3, r3, #19
 800475e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004762:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	212c      	movs	r1, #44	; 0x2c
 800476a:	fb01 f303 	mul.w	r3, r1, r3
 800476e:	4413      	add	r3, r2
 8004770:	3340      	adds	r3, #64	; 0x40
 8004772:	881b      	ldrh	r3, [r3, #0]
 8004774:	461a      	mov	r2, r3
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	4293      	cmp	r3, r2
 800477a:	d13c      	bne.n	80047f6 <HCD_RXQLVL_IRQHandler+0x19a>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d039      	beq.n	80047f6 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	015a      	lsls	r2, r3, #5
 8004786:	6a3b      	ldr	r3, [r7, #32]
 8004788:	4413      	add	r3, r2
 800478a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004798:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80047a0:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	015a      	lsls	r2, r3, #5
 80047a6:	6a3b      	ldr	r3, [r7, #32]
 80047a8:	4413      	add	r3, r2
 80047aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047ae:	461a      	mov	r2, r3
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	212c      	movs	r1, #44	; 0x2c
 80047ba:	fb01 f303 	mul.w	r3, r1, r3
 80047be:	4413      	add	r3, r2
 80047c0:	3354      	adds	r3, #84	; 0x54
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	f083 0301 	eor.w	r3, r3, #1
 80047c8:	b2d8      	uxtb	r0, r3
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	212c      	movs	r1, #44	; 0x2c
 80047d0:	fb01 f303 	mul.w	r3, r1, r3
 80047d4:	4413      	add	r3, r2
 80047d6:	3354      	adds	r3, #84	; 0x54
 80047d8:	4602      	mov	r2, r0
 80047da:	701a      	strb	r2, [r3, #0]
      break;
 80047dc:	e00b      	b.n	80047f6 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	212c      	movs	r1, #44	; 0x2c
 80047e4:	fb01 f303 	mul.w	r3, r1, r3
 80047e8:	4413      	add	r3, r2
 80047ea:	3360      	adds	r3, #96	; 0x60
 80047ec:	2204      	movs	r2, #4
 80047ee:	701a      	strb	r2, [r3, #0]
      break;
 80047f0:	e001      	b.n	80047f6 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80047f2:	bf00      	nop
 80047f4:	e000      	b.n	80047f8 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80047f6:	bf00      	nop
  }
}
 80047f8:	bf00      	nop
 80047fa:	3728      	adds	r7, #40	; 0x28
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b086      	sub	sp, #24
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800482c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f003 0302 	and.w	r3, r3, #2
 8004834:	2b02      	cmp	r3, #2
 8004836:	d10b      	bne.n	8004850 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	2b01      	cmp	r3, #1
 8004840:	d102      	bne.n	8004848 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f006 fc16 	bl	800b074 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	f043 0302 	orr.w	r3, r3, #2
 800484e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f003 0308 	and.w	r3, r3, #8
 8004856:	2b08      	cmp	r3, #8
 8004858:	d132      	bne.n	80048c0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	f043 0308 	orr.w	r3, r3, #8
 8004860:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f003 0304 	and.w	r3, r3, #4
 8004868:	2b04      	cmp	r3, #4
 800486a:	d126      	bne.n	80048ba <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	2b02      	cmp	r3, #2
 8004872:	d113      	bne.n	800489c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800487a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800487e:	d106      	bne.n	800488e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2102      	movs	r1, #2
 8004886:	4618      	mov	r0, r3
 8004888:	f002 fdbe 	bl	8007408 <USB_InitFSLSPClkSel>
 800488c:	e011      	b.n	80048b2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2101      	movs	r1, #1
 8004894:	4618      	mov	r0, r3
 8004896:	f002 fdb7 	bl	8007408 <USB_InitFSLSPClkSel>
 800489a:	e00a      	b.n	80048b2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d106      	bne.n	80048b2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048aa:	461a      	mov	r2, r3
 80048ac:	f64e 2360 	movw	r3, #60000	; 0xea60
 80048b0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f006 fc08 	bl	800b0c8 <HAL_HCD_PortEnabled_Callback>
 80048b8:	e002      	b.n	80048c0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f006 fc12 	bl	800b0e4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f003 0320 	and.w	r3, r3, #32
 80048c6:	2b20      	cmp	r3, #32
 80048c8:	d103      	bne.n	80048d2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	f043 0320 	orr.w	r3, r3, #32
 80048d0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80048d8:	461a      	mov	r2, r3
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	6013      	str	r3, [r2, #0]
}
 80048de:	bf00      	nop
 80048e0:	3718      	adds	r7, #24
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
	...

080048e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d101      	bne.n	80048fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e12b      	b.n	8004b52 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b00      	cmp	r3, #0
 8004904:	d106      	bne.n	8004914 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f7fd f948 	bl	8001ba4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2224      	movs	r2, #36	; 0x24
 8004918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f022 0201 	bic.w	r2, r2, #1
 800492a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800493a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800494a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800494c:	f002 f956 	bl	8006bfc <HAL_RCC_GetPCLK1Freq>
 8004950:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	4a81      	ldr	r2, [pc, #516]	; (8004b5c <HAL_I2C_Init+0x274>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d807      	bhi.n	800496c <HAL_I2C_Init+0x84>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	4a80      	ldr	r2, [pc, #512]	; (8004b60 <HAL_I2C_Init+0x278>)
 8004960:	4293      	cmp	r3, r2
 8004962:	bf94      	ite	ls
 8004964:	2301      	movls	r3, #1
 8004966:	2300      	movhi	r3, #0
 8004968:	b2db      	uxtb	r3, r3
 800496a:	e006      	b.n	800497a <HAL_I2C_Init+0x92>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	4a7d      	ldr	r2, [pc, #500]	; (8004b64 <HAL_I2C_Init+0x27c>)
 8004970:	4293      	cmp	r3, r2
 8004972:	bf94      	ite	ls
 8004974:	2301      	movls	r3, #1
 8004976:	2300      	movhi	r3, #0
 8004978:	b2db      	uxtb	r3, r3
 800497a:	2b00      	cmp	r3, #0
 800497c:	d001      	beq.n	8004982 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e0e7      	b.n	8004b52 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	4a78      	ldr	r2, [pc, #480]	; (8004b68 <HAL_I2C_Init+0x280>)
 8004986:	fba2 2303 	umull	r2, r3, r2, r3
 800498a:	0c9b      	lsrs	r3, r3, #18
 800498c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68ba      	ldr	r2, [r7, #8]
 800499e:	430a      	orrs	r2, r1
 80049a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	6a1b      	ldr	r3, [r3, #32]
 80049a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	4a6a      	ldr	r2, [pc, #424]	; (8004b5c <HAL_I2C_Init+0x274>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d802      	bhi.n	80049bc <HAL_I2C_Init+0xd4>
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	3301      	adds	r3, #1
 80049ba:	e009      	b.n	80049d0 <HAL_I2C_Init+0xe8>
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80049c2:	fb02 f303 	mul.w	r3, r2, r3
 80049c6:	4a69      	ldr	r2, [pc, #420]	; (8004b6c <HAL_I2C_Init+0x284>)
 80049c8:	fba2 2303 	umull	r2, r3, r2, r3
 80049cc:	099b      	lsrs	r3, r3, #6
 80049ce:	3301      	adds	r3, #1
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	6812      	ldr	r2, [r2, #0]
 80049d4:	430b      	orrs	r3, r1
 80049d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	69db      	ldr	r3, [r3, #28]
 80049de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80049e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	495c      	ldr	r1, [pc, #368]	; (8004b5c <HAL_I2C_Init+0x274>)
 80049ec:	428b      	cmp	r3, r1
 80049ee:	d819      	bhi.n	8004a24 <HAL_I2C_Init+0x13c>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	1e59      	subs	r1, r3, #1
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	005b      	lsls	r3, r3, #1
 80049fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80049fe:	1c59      	adds	r1, r3, #1
 8004a00:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004a04:	400b      	ands	r3, r1
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00a      	beq.n	8004a20 <HAL_I2C_Init+0x138>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	1e59      	subs	r1, r3, #1
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	005b      	lsls	r3, r3, #1
 8004a14:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a18:	3301      	adds	r3, #1
 8004a1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a1e:	e051      	b.n	8004ac4 <HAL_I2C_Init+0x1dc>
 8004a20:	2304      	movs	r3, #4
 8004a22:	e04f      	b.n	8004ac4 <HAL_I2C_Init+0x1dc>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d111      	bne.n	8004a50 <HAL_I2C_Init+0x168>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	1e58      	subs	r0, r3, #1
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6859      	ldr	r1, [r3, #4]
 8004a34:	460b      	mov	r3, r1
 8004a36:	005b      	lsls	r3, r3, #1
 8004a38:	440b      	add	r3, r1
 8004a3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a3e:	3301      	adds	r3, #1
 8004a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	bf0c      	ite	eq
 8004a48:	2301      	moveq	r3, #1
 8004a4a:	2300      	movne	r3, #0
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	e012      	b.n	8004a76 <HAL_I2C_Init+0x18e>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	1e58      	subs	r0, r3, #1
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6859      	ldr	r1, [r3, #4]
 8004a58:	460b      	mov	r3, r1
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	440b      	add	r3, r1
 8004a5e:	0099      	lsls	r1, r3, #2
 8004a60:	440b      	add	r3, r1
 8004a62:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a66:	3301      	adds	r3, #1
 8004a68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	bf0c      	ite	eq
 8004a70:	2301      	moveq	r3, #1
 8004a72:	2300      	movne	r3, #0
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d001      	beq.n	8004a7e <HAL_I2C_Init+0x196>
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e022      	b.n	8004ac4 <HAL_I2C_Init+0x1dc>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d10e      	bne.n	8004aa4 <HAL_I2C_Init+0x1bc>
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	1e58      	subs	r0, r3, #1
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6859      	ldr	r1, [r3, #4]
 8004a8e:	460b      	mov	r3, r1
 8004a90:	005b      	lsls	r3, r3, #1
 8004a92:	440b      	add	r3, r1
 8004a94:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a98:	3301      	adds	r3, #1
 8004a9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aa2:	e00f      	b.n	8004ac4 <HAL_I2C_Init+0x1dc>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	1e58      	subs	r0, r3, #1
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6859      	ldr	r1, [r3, #4]
 8004aac:	460b      	mov	r3, r1
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	440b      	add	r3, r1
 8004ab2:	0099      	lsls	r1, r3, #2
 8004ab4:	440b      	add	r3, r1
 8004ab6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004aba:	3301      	adds	r3, #1
 8004abc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ac0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ac4:	6879      	ldr	r1, [r7, #4]
 8004ac6:	6809      	ldr	r1, [r1, #0]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	69da      	ldr	r2, [r3, #28]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	431a      	orrs	r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004af2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	6911      	ldr	r1, [r2, #16]
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	68d2      	ldr	r2, [r2, #12]
 8004afe:	4311      	orrs	r1, r2
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	6812      	ldr	r2, [r2, #0]
 8004b04:	430b      	orrs	r3, r1
 8004b06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	695a      	ldr	r2, [r3, #20]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	431a      	orrs	r2, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	430a      	orrs	r2, r1
 8004b22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f042 0201 	orr.w	r2, r2, #1
 8004b32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2220      	movs	r2, #32
 8004b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3710      	adds	r7, #16
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	000186a0 	.word	0x000186a0
 8004b60:	001e847f 	.word	0x001e847f
 8004b64:	003d08ff 	.word	0x003d08ff
 8004b68:	431bde83 	.word	0x431bde83
 8004b6c:	10624dd3 	.word	0x10624dd3

08004b70 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b088      	sub	sp, #32
 8004b74:	af02      	add	r7, sp, #8
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	607a      	str	r2, [r7, #4]
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	817b      	strh	r3, [r7, #10]
 8004b80:	4613      	mov	r3, r2
 8004b82:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b84:	f7fd fac0 	bl	8002108 <HAL_GetTick>
 8004b88:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	2b20      	cmp	r3, #32
 8004b94:	f040 80e0 	bne.w	8004d58 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	9300      	str	r3, [sp, #0]
 8004b9c:	2319      	movs	r3, #25
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	4970      	ldr	r1, [pc, #448]	; (8004d64 <HAL_I2C_Master_Transmit+0x1f4>)
 8004ba2:	68f8      	ldr	r0, [r7, #12]
 8004ba4:	f000 fc58 	bl	8005458 <I2C_WaitOnFlagUntilTimeout>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d001      	beq.n	8004bb2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004bae:	2302      	movs	r3, #2
 8004bb0:	e0d3      	b.n	8004d5a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d101      	bne.n	8004bc0 <HAL_I2C_Master_Transmit+0x50>
 8004bbc:	2302      	movs	r3, #2
 8004bbe:	e0cc      	b.n	8004d5a <HAL_I2C_Master_Transmit+0x1ea>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0301 	and.w	r3, r3, #1
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d007      	beq.n	8004be6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f042 0201 	orr.w	r2, r2, #1
 8004be4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bf4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2221      	movs	r2, #33	; 0x21
 8004bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2210      	movs	r2, #16
 8004c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	893a      	ldrh	r2, [r7, #8]
 8004c16:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c1c:	b29a      	uxth	r2, r3
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	4a50      	ldr	r2, [pc, #320]	; (8004d68 <HAL_I2C_Master_Transmit+0x1f8>)
 8004c26:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004c28:	8979      	ldrh	r1, [r7, #10]
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	6a3a      	ldr	r2, [r7, #32]
 8004c2e:	68f8      	ldr	r0, [r7, #12]
 8004c30:	f000 fac2 	bl	80051b8 <I2C_MasterRequestWrite>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d001      	beq.n	8004c3e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e08d      	b.n	8004d5a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c3e:	2300      	movs	r3, #0
 8004c40:	613b      	str	r3, [r7, #16]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	695b      	ldr	r3, [r3, #20]
 8004c48:	613b      	str	r3, [r7, #16]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	699b      	ldr	r3, [r3, #24]
 8004c50:	613b      	str	r3, [r7, #16]
 8004c52:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004c54:	e066      	b.n	8004d24 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c56:	697a      	ldr	r2, [r7, #20]
 8004c58:	6a39      	ldr	r1, [r7, #32]
 8004c5a:	68f8      	ldr	r0, [r7, #12]
 8004c5c:	f000 fcd2 	bl	8005604 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00d      	beq.n	8004c82 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6a:	2b04      	cmp	r3, #4
 8004c6c:	d107      	bne.n	8004c7e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c7c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e06b      	b.n	8004d5a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c86:	781a      	ldrb	r2, [r3, #0]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c92:	1c5a      	adds	r2, r3, #1
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004caa:	3b01      	subs	r3, #1
 8004cac:	b29a      	uxth	r2, r3
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	695b      	ldr	r3, [r3, #20]
 8004cb8:	f003 0304 	and.w	r3, r3, #4
 8004cbc:	2b04      	cmp	r3, #4
 8004cbe:	d11b      	bne.n	8004cf8 <HAL_I2C_Master_Transmit+0x188>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d017      	beq.n	8004cf8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ccc:	781a      	ldrb	r2, [r3, #0]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd8:	1c5a      	adds	r2, r3, #1
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	3b01      	subs	r3, #1
 8004ce6:	b29a      	uxth	r2, r3
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	b29a      	uxth	r2, r3
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cf8:	697a      	ldr	r2, [r7, #20]
 8004cfa:	6a39      	ldr	r1, [r7, #32]
 8004cfc:	68f8      	ldr	r0, [r7, #12]
 8004cfe:	f000 fcc2 	bl	8005686 <I2C_WaitOnBTFFlagUntilTimeout>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00d      	beq.n	8004d24 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0c:	2b04      	cmp	r3, #4
 8004d0e:	d107      	bne.n	8004d20 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d1e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e01a      	b.n	8004d5a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d194      	bne.n	8004c56 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2220      	movs	r2, #32
 8004d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004d54:	2300      	movs	r3, #0
 8004d56:	e000      	b.n	8004d5a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004d58:	2302      	movs	r3, #2
  }
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3718      	adds	r7, #24
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	00100002 	.word	0x00100002
 8004d68:	ffff0000 	.word	0xffff0000

08004d6c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b08c      	sub	sp, #48	; 0x30
 8004d70:	af02      	add	r7, sp, #8
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	607a      	str	r2, [r7, #4]
 8004d76:	461a      	mov	r2, r3
 8004d78:	460b      	mov	r3, r1
 8004d7a:	817b      	strh	r3, [r7, #10]
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004d80:	f7fd f9c2 	bl	8002108 <HAL_GetTick>
 8004d84:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b20      	cmp	r3, #32
 8004d90:	f040 820b 	bne.w	80051aa <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d96:	9300      	str	r3, [sp, #0]
 8004d98:	2319      	movs	r3, #25
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	497c      	ldr	r1, [pc, #496]	; (8004f90 <HAL_I2C_Master_Receive+0x224>)
 8004d9e:	68f8      	ldr	r0, [r7, #12]
 8004da0:	f000 fb5a 	bl	8005458 <I2C_WaitOnFlagUntilTimeout>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d001      	beq.n	8004dae <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004daa:	2302      	movs	r3, #2
 8004dac:	e1fe      	b.n	80051ac <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d101      	bne.n	8004dbc <HAL_I2C_Master_Receive+0x50>
 8004db8:	2302      	movs	r3, #2
 8004dba:	e1f7      	b.n	80051ac <HAL_I2C_Master_Receive+0x440>
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0301 	and.w	r3, r3, #1
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d007      	beq.n	8004de2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f042 0201 	orr.w	r2, r2, #1
 8004de0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004df0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2222      	movs	r2, #34	; 0x22
 8004df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2210      	movs	r2, #16
 8004dfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2200      	movs	r2, #0
 8004e06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	893a      	ldrh	r2, [r7, #8]
 8004e12:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e18:	b29a      	uxth	r2, r3
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	4a5c      	ldr	r2, [pc, #368]	; (8004f94 <HAL_I2C_Master_Receive+0x228>)
 8004e22:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004e24:	8979      	ldrh	r1, [r7, #10]
 8004e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e2a:	68f8      	ldr	r0, [r7, #12]
 8004e2c:	f000 fa46 	bl	80052bc <I2C_MasterRequestRead>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d001      	beq.n	8004e3a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e1b8      	b.n	80051ac <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d113      	bne.n	8004e6a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e42:	2300      	movs	r3, #0
 8004e44:	623b      	str	r3, [r7, #32]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	695b      	ldr	r3, [r3, #20]
 8004e4c:	623b      	str	r3, [r7, #32]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	699b      	ldr	r3, [r3, #24]
 8004e54:	623b      	str	r3, [r7, #32]
 8004e56:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e66:	601a      	str	r2, [r3, #0]
 8004e68:	e18c      	b.n	8005184 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d11b      	bne.n	8004eaa <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e80:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e82:	2300      	movs	r3, #0
 8004e84:	61fb      	str	r3, [r7, #28]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	695b      	ldr	r3, [r3, #20]
 8004e8c:	61fb      	str	r3, [r7, #28]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	699b      	ldr	r3, [r3, #24]
 8004e94:	61fb      	str	r3, [r7, #28]
 8004e96:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ea6:	601a      	str	r2, [r3, #0]
 8004ea8:	e16c      	b.n	8005184 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d11b      	bne.n	8004eea <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ec0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ed0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	61bb      	str	r3, [r7, #24]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	695b      	ldr	r3, [r3, #20]
 8004edc:	61bb      	str	r3, [r7, #24]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	699b      	ldr	r3, [r3, #24]
 8004ee4:	61bb      	str	r3, [r7, #24]
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	e14c      	b.n	8005184 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ef8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004efa:	2300      	movs	r3, #0
 8004efc:	617b      	str	r3, [r7, #20]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	695b      	ldr	r3, [r3, #20]
 8004f04:	617b      	str	r3, [r7, #20]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	699b      	ldr	r3, [r3, #24]
 8004f0c:	617b      	str	r3, [r7, #20]
 8004f0e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004f10:	e138      	b.n	8005184 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f16:	2b03      	cmp	r3, #3
 8004f18:	f200 80f1 	bhi.w	80050fe <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d123      	bne.n	8004f6c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f28:	68f8      	ldr	r0, [r7, #12]
 8004f2a:	f000 fbed 	bl	8005708 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d001      	beq.n	8004f38 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e139      	b.n	80051ac <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	691a      	ldr	r2, [r3, #16]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f42:	b2d2      	uxtb	r2, r2
 8004f44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4a:	1c5a      	adds	r2, r3, #1
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f54:	3b01      	subs	r3, #1
 8004f56:	b29a      	uxth	r2, r3
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	3b01      	subs	r3, #1
 8004f64:	b29a      	uxth	r2, r3
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f6a:	e10b      	b.n	8005184 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d14e      	bne.n	8005012 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f76:	9300      	str	r3, [sp, #0]
 8004f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	4906      	ldr	r1, [pc, #24]	; (8004f98 <HAL_I2C_Master_Receive+0x22c>)
 8004f7e:	68f8      	ldr	r0, [r7, #12]
 8004f80:	f000 fa6a 	bl	8005458 <I2C_WaitOnFlagUntilTimeout>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d008      	beq.n	8004f9c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e10e      	b.n	80051ac <HAL_I2C_Master_Receive+0x440>
 8004f8e:	bf00      	nop
 8004f90:	00100002 	.word	0x00100002
 8004f94:	ffff0000 	.word	0xffff0000
 8004f98:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004faa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	691a      	ldr	r2, [r3, #16]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb6:	b2d2      	uxtb	r2, r2
 8004fb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbe:	1c5a      	adds	r2, r3, #1
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fc8:	3b01      	subs	r3, #1
 8004fca:	b29a      	uxth	r2, r3
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	b29a      	uxth	r2, r3
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	691a      	ldr	r2, [r3, #16]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe8:	b2d2      	uxtb	r2, r2
 8004fea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff0:	1c5a      	adds	r2, r3, #1
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	b29a      	uxth	r2, r3
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005006:	b29b      	uxth	r3, r3
 8005008:	3b01      	subs	r3, #1
 800500a:	b29a      	uxth	r2, r3
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005010:	e0b8      	b.n	8005184 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005014:	9300      	str	r3, [sp, #0]
 8005016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005018:	2200      	movs	r2, #0
 800501a:	4966      	ldr	r1, [pc, #408]	; (80051b4 <HAL_I2C_Master_Receive+0x448>)
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	f000 fa1b 	bl	8005458 <I2C_WaitOnFlagUntilTimeout>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d001      	beq.n	800502c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e0bf      	b.n	80051ac <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800503a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	691a      	ldr	r2, [r3, #16]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005046:	b2d2      	uxtb	r2, r2
 8005048:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504e:	1c5a      	adds	r2, r3, #1
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005058:	3b01      	subs	r3, #1
 800505a:	b29a      	uxth	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005064:	b29b      	uxth	r3, r3
 8005066:	3b01      	subs	r3, #1
 8005068:	b29a      	uxth	r2, r3
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800506e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005070:	9300      	str	r3, [sp, #0]
 8005072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005074:	2200      	movs	r2, #0
 8005076:	494f      	ldr	r1, [pc, #316]	; (80051b4 <HAL_I2C_Master_Receive+0x448>)
 8005078:	68f8      	ldr	r0, [r7, #12]
 800507a:	f000 f9ed 	bl	8005458 <I2C_WaitOnFlagUntilTimeout>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d001      	beq.n	8005088 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e091      	b.n	80051ac <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005096:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	691a      	ldr	r2, [r3, #16]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a2:	b2d2      	uxtb	r2, r2
 80050a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050aa:	1c5a      	adds	r2, r3, #1
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050b4:	3b01      	subs	r3, #1
 80050b6:	b29a      	uxth	r2, r3
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	3b01      	subs	r3, #1
 80050c4:	b29a      	uxth	r2, r3
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	691a      	ldr	r2, [r3, #16]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d4:	b2d2      	uxtb	r2, r2
 80050d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050dc:	1c5a      	adds	r2, r3, #1
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050e6:	3b01      	subs	r3, #1
 80050e8:	b29a      	uxth	r2, r3
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	3b01      	subs	r3, #1
 80050f6:	b29a      	uxth	r2, r3
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80050fc:	e042      	b.n	8005184 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005100:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005102:	68f8      	ldr	r0, [r7, #12]
 8005104:	f000 fb00 	bl	8005708 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d001      	beq.n	8005112 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e04c      	b.n	80051ac <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	691a      	ldr	r2, [r3, #16]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511c:	b2d2      	uxtb	r2, r2
 800511e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005124:	1c5a      	adds	r2, r3, #1
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800512e:	3b01      	subs	r3, #1
 8005130:	b29a      	uxth	r2, r3
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800513a:	b29b      	uxth	r3, r3
 800513c:	3b01      	subs	r3, #1
 800513e:	b29a      	uxth	r2, r3
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	f003 0304 	and.w	r3, r3, #4
 800514e:	2b04      	cmp	r3, #4
 8005150:	d118      	bne.n	8005184 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	691a      	ldr	r2, [r3, #16]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515c:	b2d2      	uxtb	r2, r2
 800515e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005164:	1c5a      	adds	r2, r3, #1
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800516e:	3b01      	subs	r3, #1
 8005170:	b29a      	uxth	r2, r3
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800517a:	b29b      	uxth	r3, r3
 800517c:	3b01      	subs	r3, #1
 800517e:	b29a      	uxth	r2, r3
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005188:	2b00      	cmp	r3, #0
 800518a:	f47f aec2 	bne.w	8004f12 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2220      	movs	r2, #32
 8005192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80051a6:	2300      	movs	r3, #0
 80051a8:	e000      	b.n	80051ac <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80051aa:	2302      	movs	r3, #2
  }
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3728      	adds	r7, #40	; 0x28
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	00010004 	.word	0x00010004

080051b8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b088      	sub	sp, #32
 80051bc:	af02      	add	r7, sp, #8
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	607a      	str	r2, [r7, #4]
 80051c2:	603b      	str	r3, [r7, #0]
 80051c4:	460b      	mov	r3, r1
 80051c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051cc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	2b08      	cmp	r3, #8
 80051d2:	d006      	beq.n	80051e2 <I2C_MasterRequestWrite+0x2a>
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d003      	beq.n	80051e2 <I2C_MasterRequestWrite+0x2a>
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80051e0:	d108      	bne.n	80051f4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051f0:	601a      	str	r2, [r3, #0]
 80051f2:	e00b      	b.n	800520c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f8:	2b12      	cmp	r3, #18
 80051fa:	d107      	bne.n	800520c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800520a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	9300      	str	r3, [sp, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005218:	68f8      	ldr	r0, [r7, #12]
 800521a:	f000 f91d 	bl	8005458 <I2C_WaitOnFlagUntilTimeout>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00d      	beq.n	8005240 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800522e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005232:	d103      	bne.n	800523c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f44f 7200 	mov.w	r2, #512	; 0x200
 800523a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e035      	b.n	80052ac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	691b      	ldr	r3, [r3, #16]
 8005244:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005248:	d108      	bne.n	800525c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800524a:	897b      	ldrh	r3, [r7, #10]
 800524c:	b2db      	uxtb	r3, r3
 800524e:	461a      	mov	r2, r3
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005258:	611a      	str	r2, [r3, #16]
 800525a:	e01b      	b.n	8005294 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800525c:	897b      	ldrh	r3, [r7, #10]
 800525e:	11db      	asrs	r3, r3, #7
 8005260:	b2db      	uxtb	r3, r3
 8005262:	f003 0306 	and.w	r3, r3, #6
 8005266:	b2db      	uxtb	r3, r3
 8005268:	f063 030f 	orn	r3, r3, #15
 800526c:	b2da      	uxtb	r2, r3
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	490e      	ldr	r1, [pc, #56]	; (80052b4 <I2C_MasterRequestWrite+0xfc>)
 800527a:	68f8      	ldr	r0, [r7, #12]
 800527c:	f000 f943 	bl	8005506 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d001      	beq.n	800528a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e010      	b.n	80052ac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800528a:	897b      	ldrh	r3, [r7, #10]
 800528c:	b2da      	uxtb	r2, r3
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	4907      	ldr	r1, [pc, #28]	; (80052b8 <I2C_MasterRequestWrite+0x100>)
 800529a:	68f8      	ldr	r0, [r7, #12]
 800529c:	f000 f933 	bl	8005506 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d001      	beq.n	80052aa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e000      	b.n	80052ac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80052aa:	2300      	movs	r3, #0
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3718      	adds	r7, #24
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	00010008 	.word	0x00010008
 80052b8:	00010002 	.word	0x00010002

080052bc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b088      	sub	sp, #32
 80052c0:	af02      	add	r7, sp, #8
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	607a      	str	r2, [r7, #4]
 80052c6:	603b      	str	r3, [r7, #0]
 80052c8:	460b      	mov	r3, r1
 80052ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80052e0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	2b08      	cmp	r3, #8
 80052e6:	d006      	beq.n	80052f6 <I2C_MasterRequestRead+0x3a>
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d003      	beq.n	80052f6 <I2C_MasterRequestRead+0x3a>
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80052f4:	d108      	bne.n	8005308 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005304:	601a      	str	r2, [r3, #0]
 8005306:	e00b      	b.n	8005320 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800530c:	2b11      	cmp	r3, #17
 800530e:	d107      	bne.n	8005320 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800531e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	9300      	str	r3, [sp, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800532c:	68f8      	ldr	r0, [r7, #12]
 800532e:	f000 f893 	bl	8005458 <I2C_WaitOnFlagUntilTimeout>
 8005332:	4603      	mov	r3, r0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d00d      	beq.n	8005354 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005342:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005346:	d103      	bne.n	8005350 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800534e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005350:	2303      	movs	r3, #3
 8005352:	e079      	b.n	8005448 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800535c:	d108      	bne.n	8005370 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800535e:	897b      	ldrh	r3, [r7, #10]
 8005360:	b2db      	uxtb	r3, r3
 8005362:	f043 0301 	orr.w	r3, r3, #1
 8005366:	b2da      	uxtb	r2, r3
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	611a      	str	r2, [r3, #16]
 800536e:	e05f      	b.n	8005430 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005370:	897b      	ldrh	r3, [r7, #10]
 8005372:	11db      	asrs	r3, r3, #7
 8005374:	b2db      	uxtb	r3, r3
 8005376:	f003 0306 	and.w	r3, r3, #6
 800537a:	b2db      	uxtb	r3, r3
 800537c:	f063 030f 	orn	r3, r3, #15
 8005380:	b2da      	uxtb	r2, r3
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	4930      	ldr	r1, [pc, #192]	; (8005450 <I2C_MasterRequestRead+0x194>)
 800538e:	68f8      	ldr	r0, [r7, #12]
 8005390:	f000 f8b9 	bl	8005506 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d001      	beq.n	800539e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e054      	b.n	8005448 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800539e:	897b      	ldrh	r3, [r7, #10]
 80053a0:	b2da      	uxtb	r2, r3
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	4929      	ldr	r1, [pc, #164]	; (8005454 <I2C_MasterRequestRead+0x198>)
 80053ae:	68f8      	ldr	r0, [r7, #12]
 80053b0:	f000 f8a9 	bl	8005506 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d001      	beq.n	80053be <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e044      	b.n	8005448 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053be:	2300      	movs	r3, #0
 80053c0:	613b      	str	r3, [r7, #16]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	695b      	ldr	r3, [r3, #20]
 80053c8:	613b      	str	r3, [r7, #16]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	699b      	ldr	r3, [r3, #24]
 80053d0:	613b      	str	r3, [r7, #16]
 80053d2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053e2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	9300      	str	r3, [sp, #0]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80053f0:	68f8      	ldr	r0, [r7, #12]
 80053f2:	f000 f831 	bl	8005458 <I2C_WaitOnFlagUntilTimeout>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d00d      	beq.n	8005418 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005406:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800540a:	d103      	bne.n	8005414 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005412:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005414:	2303      	movs	r3, #3
 8005416:	e017      	b.n	8005448 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005418:	897b      	ldrh	r3, [r7, #10]
 800541a:	11db      	asrs	r3, r3, #7
 800541c:	b2db      	uxtb	r3, r3
 800541e:	f003 0306 	and.w	r3, r3, #6
 8005422:	b2db      	uxtb	r3, r3
 8005424:	f063 030e 	orn	r3, r3, #14
 8005428:	b2da      	uxtb	r2, r3
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	4907      	ldr	r1, [pc, #28]	; (8005454 <I2C_MasterRequestRead+0x198>)
 8005436:	68f8      	ldr	r0, [r7, #12]
 8005438:	f000 f865 	bl	8005506 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800543c:	4603      	mov	r3, r0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d001      	beq.n	8005446 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e000      	b.n	8005448 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	3718      	adds	r7, #24
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}
 8005450:	00010008 	.word	0x00010008
 8005454:	00010002 	.word	0x00010002

08005458 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	603b      	str	r3, [r7, #0]
 8005464:	4613      	mov	r3, r2
 8005466:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005468:	e025      	b.n	80054b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005470:	d021      	beq.n	80054b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005472:	f7fc fe49 	bl	8002108 <HAL_GetTick>
 8005476:	4602      	mov	r2, r0
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	1ad3      	subs	r3, r2, r3
 800547c:	683a      	ldr	r2, [r7, #0]
 800547e:	429a      	cmp	r2, r3
 8005480:	d302      	bcc.n	8005488 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d116      	bne.n	80054b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2220      	movs	r2, #32
 8005492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a2:	f043 0220 	orr.w	r2, r3, #32
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e023      	b.n	80054fe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	0c1b      	lsrs	r3, r3, #16
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d10d      	bne.n	80054dc <I2C_WaitOnFlagUntilTimeout+0x84>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	43da      	mvns	r2, r3
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	4013      	ands	r3, r2
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	bf0c      	ite	eq
 80054d2:	2301      	moveq	r3, #1
 80054d4:	2300      	movne	r3, #0
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	461a      	mov	r2, r3
 80054da:	e00c      	b.n	80054f6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	699b      	ldr	r3, [r3, #24]
 80054e2:	43da      	mvns	r2, r3
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	4013      	ands	r3, r2
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	bf0c      	ite	eq
 80054ee:	2301      	moveq	r3, #1
 80054f0:	2300      	movne	r3, #0
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	461a      	mov	r2, r3
 80054f6:	79fb      	ldrb	r3, [r7, #7]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d0b6      	beq.n	800546a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3710      	adds	r7, #16
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}

08005506 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005506:	b580      	push	{r7, lr}
 8005508:	b084      	sub	sp, #16
 800550a:	af00      	add	r7, sp, #0
 800550c:	60f8      	str	r0, [r7, #12]
 800550e:	60b9      	str	r1, [r7, #8]
 8005510:	607a      	str	r2, [r7, #4]
 8005512:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005514:	e051      	b.n	80055ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	695b      	ldr	r3, [r3, #20]
 800551c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005520:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005524:	d123      	bne.n	800556e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005534:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800553e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2220      	movs	r2, #32
 800554a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555a:	f043 0204 	orr.w	r2, r3, #4
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2200      	movs	r2, #0
 8005566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e046      	b.n	80055fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005574:	d021      	beq.n	80055ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005576:	f7fc fdc7 	bl	8002108 <HAL_GetTick>
 800557a:	4602      	mov	r2, r0
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	429a      	cmp	r2, r3
 8005584:	d302      	bcc.n	800558c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d116      	bne.n	80055ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2200      	movs	r2, #0
 8005590:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2220      	movs	r2, #32
 8005596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2200      	movs	r2, #0
 800559e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a6:	f043 0220 	orr.w	r2, r3, #32
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e020      	b.n	80055fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	0c1b      	lsrs	r3, r3, #16
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d10c      	bne.n	80055de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	695b      	ldr	r3, [r3, #20]
 80055ca:	43da      	mvns	r2, r3
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	4013      	ands	r3, r2
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	bf14      	ite	ne
 80055d6:	2301      	movne	r3, #1
 80055d8:	2300      	moveq	r3, #0
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	e00b      	b.n	80055f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	699b      	ldr	r3, [r3, #24]
 80055e4:	43da      	mvns	r2, r3
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	4013      	ands	r3, r2
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	bf14      	ite	ne
 80055f0:	2301      	movne	r3, #1
 80055f2:	2300      	moveq	r3, #0
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d18d      	bne.n	8005516 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80055fa:	2300      	movs	r3, #0
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3710      	adds	r7, #16
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005610:	e02d      	b.n	800566e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005612:	68f8      	ldr	r0, [r7, #12]
 8005614:	f000 f8ce 	bl	80057b4 <I2C_IsAcknowledgeFailed>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d001      	beq.n	8005622 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e02d      	b.n	800567e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005628:	d021      	beq.n	800566e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800562a:	f7fc fd6d 	bl	8002108 <HAL_GetTick>
 800562e:	4602      	mov	r2, r0
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	1ad3      	subs	r3, r2, r3
 8005634:	68ba      	ldr	r2, [r7, #8]
 8005636:	429a      	cmp	r2, r3
 8005638:	d302      	bcc.n	8005640 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d116      	bne.n	800566e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2200      	movs	r2, #0
 8005644:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2220      	movs	r2, #32
 800564a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565a:	f043 0220 	orr.w	r2, r3, #32
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e007      	b.n	800567e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	695b      	ldr	r3, [r3, #20]
 8005674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005678:	2b80      	cmp	r3, #128	; 0x80
 800567a:	d1ca      	bne.n	8005612 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3710      	adds	r7, #16
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}

08005686 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005686:	b580      	push	{r7, lr}
 8005688:	b084      	sub	sp, #16
 800568a:	af00      	add	r7, sp, #0
 800568c:	60f8      	str	r0, [r7, #12]
 800568e:	60b9      	str	r1, [r7, #8]
 8005690:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005692:	e02d      	b.n	80056f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005694:	68f8      	ldr	r0, [r7, #12]
 8005696:	f000 f88d 	bl	80057b4 <I2C_IsAcknowledgeFailed>
 800569a:	4603      	mov	r3, r0
 800569c:	2b00      	cmp	r3, #0
 800569e:	d001      	beq.n	80056a4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e02d      	b.n	8005700 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056aa:	d021      	beq.n	80056f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056ac:	f7fc fd2c 	bl	8002108 <HAL_GetTick>
 80056b0:	4602      	mov	r2, r0
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	68ba      	ldr	r2, [r7, #8]
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d302      	bcc.n	80056c2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d116      	bne.n	80056f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2200      	movs	r2, #0
 80056c6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2220      	movs	r2, #32
 80056cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056dc:	f043 0220 	orr.w	r2, r3, #32
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e007      	b.n	8005700 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	695b      	ldr	r3, [r3, #20]
 80056f6:	f003 0304 	and.w	r3, r3, #4
 80056fa:	2b04      	cmp	r3, #4
 80056fc:	d1ca      	bne.n	8005694 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80056fe:	2300      	movs	r3, #0
}
 8005700:	4618      	mov	r0, r3
 8005702:	3710      	adds	r7, #16
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005714:	e042      	b.n	800579c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	695b      	ldr	r3, [r3, #20]
 800571c:	f003 0310 	and.w	r3, r3, #16
 8005720:	2b10      	cmp	r3, #16
 8005722:	d119      	bne.n	8005758 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f06f 0210 	mvn.w	r2, #16
 800572c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2200      	movs	r2, #0
 8005732:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2220      	movs	r2, #32
 8005738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2200      	movs	r2, #0
 8005740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2200      	movs	r2, #0
 8005750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e029      	b.n	80057ac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005758:	f7fc fcd6 	bl	8002108 <HAL_GetTick>
 800575c:	4602      	mov	r2, r0
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	68ba      	ldr	r2, [r7, #8]
 8005764:	429a      	cmp	r2, r3
 8005766:	d302      	bcc.n	800576e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d116      	bne.n	800579c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2220      	movs	r2, #32
 8005778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2200      	movs	r2, #0
 8005780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005788:	f043 0220 	orr.w	r2, r3, #32
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e007      	b.n	80057ac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	695b      	ldr	r3, [r3, #20]
 80057a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a6:	2b40      	cmp	r3, #64	; 0x40
 80057a8:	d1b5      	bne.n	8005716 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80057aa:	2300      	movs	r3, #0
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3710      	adds	r7, #16
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	695b      	ldr	r3, [r3, #20]
 80057c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057ca:	d11b      	bne.n	8005804 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057d4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2220      	movs	r2, #32
 80057e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f0:	f043 0204 	orr.w	r2, r3, #4
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	e000      	b.n	8005806 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	370c      	adds	r7, #12
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr
	...

08005814 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b088      	sub	sp, #32
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d101      	bne.n	8005826 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e128      	b.n	8005a78 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800582c:	b2db      	uxtb	r3, r3
 800582e:	2b00      	cmp	r3, #0
 8005830:	d109      	bne.n	8005846 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a90      	ldr	r2, [pc, #576]	; (8005a80 <HAL_I2S_Init+0x26c>)
 800583e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f7fc f9f7 	bl	8001c34 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2202      	movs	r2, #2
 800584a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	69db      	ldr	r3, [r3, #28]
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	6812      	ldr	r2, [r2, #0]
 8005858:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800585c:	f023 030f 	bic.w	r3, r3, #15
 8005860:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2202      	movs	r2, #2
 8005868:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	695b      	ldr	r3, [r3, #20]
 800586e:	2b02      	cmp	r3, #2
 8005870:	d060      	beq.n	8005934 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d102      	bne.n	8005880 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800587a:	2310      	movs	r3, #16
 800587c:	617b      	str	r3, [r7, #20]
 800587e:	e001      	b.n	8005884 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005880:	2320      	movs	r3, #32
 8005882:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	2b20      	cmp	r3, #32
 800588a:	d802      	bhi.n	8005892 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	005b      	lsls	r3, r3, #1
 8005890:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005892:	2001      	movs	r0, #1
 8005894:	f001 faa8 	bl	8006de8 <HAL_RCCEx_GetPeriphCLKFreq>
 8005898:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058a2:	d125      	bne.n	80058f0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d010      	beq.n	80058ce <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	fbb2 f2f3 	udiv	r2, r2, r3
 80058b6:	4613      	mov	r3, r2
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	4413      	add	r3, r2
 80058bc:	005b      	lsls	r3, r3, #1
 80058be:	461a      	mov	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	695b      	ldr	r3, [r3, #20]
 80058c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058c8:	3305      	adds	r3, #5
 80058ca:	613b      	str	r3, [r7, #16]
 80058cc:	e01f      	b.n	800590e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	00db      	lsls	r3, r3, #3
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80058d8:	4613      	mov	r3, r2
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	4413      	add	r3, r2
 80058de:	005b      	lsls	r3, r3, #1
 80058e0:	461a      	mov	r2, r3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	695b      	ldr	r3, [r3, #20]
 80058e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ea:	3305      	adds	r3, #5
 80058ec:	613b      	str	r3, [r7, #16]
 80058ee:	e00e      	b.n	800590e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80058f8:	4613      	mov	r3, r2
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	4413      	add	r3, r2
 80058fe:	005b      	lsls	r3, r3, #1
 8005900:	461a      	mov	r2, r3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	695b      	ldr	r3, [r3, #20]
 8005906:	fbb2 f3f3 	udiv	r3, r2, r3
 800590a:	3305      	adds	r3, #5
 800590c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	4a5c      	ldr	r2, [pc, #368]	; (8005a84 <HAL_I2S_Init+0x270>)
 8005912:	fba2 2303 	umull	r2, r3, r2, r3
 8005916:	08db      	lsrs	r3, r3, #3
 8005918:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	f003 0301 	and.w	r3, r3, #1
 8005920:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005922:	693a      	ldr	r2, [r7, #16]
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	085b      	lsrs	r3, r3, #1
 800592a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	021b      	lsls	r3, r3, #8
 8005930:	61bb      	str	r3, [r7, #24]
 8005932:	e003      	b.n	800593c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005934:	2302      	movs	r3, #2
 8005936:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005938:	2300      	movs	r3, #0
 800593a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800593c:	69fb      	ldr	r3, [r7, #28]
 800593e:	2b01      	cmp	r3, #1
 8005940:	d902      	bls.n	8005948 <HAL_I2S_Init+0x134>
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	2bff      	cmp	r3, #255	; 0xff
 8005946:	d907      	bls.n	8005958 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800594c:	f043 0210 	orr.w	r2, r3, #16
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e08f      	b.n	8005a78 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	691a      	ldr	r2, [r3, #16]
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	ea42 0103 	orr.w	r1, r2, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	69fa      	ldr	r2, [r7, #28]
 8005968:	430a      	orrs	r2, r1
 800596a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	69db      	ldr	r3, [r3, #28]
 8005972:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005976:	f023 030f 	bic.w	r3, r3, #15
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	6851      	ldr	r1, [r2, #4]
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	6892      	ldr	r2, [r2, #8]
 8005982:	4311      	orrs	r1, r2
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	68d2      	ldr	r2, [r2, #12]
 8005988:	4311      	orrs	r1, r2
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	6992      	ldr	r2, [r2, #24]
 800598e:	430a      	orrs	r2, r1
 8005990:	431a      	orrs	r2, r3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800599a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6a1b      	ldr	r3, [r3, #32]
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d161      	bne.n	8005a68 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4a38      	ldr	r2, [pc, #224]	; (8005a88 <HAL_I2S_Init+0x274>)
 80059a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a37      	ldr	r2, [pc, #220]	; (8005a8c <HAL_I2S_Init+0x278>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d101      	bne.n	80059b8 <HAL_I2S_Init+0x1a4>
 80059b4:	4b36      	ldr	r3, [pc, #216]	; (8005a90 <HAL_I2S_Init+0x27c>)
 80059b6:	e001      	b.n	80059bc <HAL_I2S_Init+0x1a8>
 80059b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80059bc:	69db      	ldr	r3, [r3, #28]
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	6812      	ldr	r2, [r2, #0]
 80059c2:	4932      	ldr	r1, [pc, #200]	; (8005a8c <HAL_I2S_Init+0x278>)
 80059c4:	428a      	cmp	r2, r1
 80059c6:	d101      	bne.n	80059cc <HAL_I2S_Init+0x1b8>
 80059c8:	4a31      	ldr	r2, [pc, #196]	; (8005a90 <HAL_I2S_Init+0x27c>)
 80059ca:	e001      	b.n	80059d0 <HAL_I2S_Init+0x1bc>
 80059cc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80059d0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80059d4:	f023 030f 	bic.w	r3, r3, #15
 80059d8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a2b      	ldr	r2, [pc, #172]	; (8005a8c <HAL_I2S_Init+0x278>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d101      	bne.n	80059e8 <HAL_I2S_Init+0x1d4>
 80059e4:	4b2a      	ldr	r3, [pc, #168]	; (8005a90 <HAL_I2S_Init+0x27c>)
 80059e6:	e001      	b.n	80059ec <HAL_I2S_Init+0x1d8>
 80059e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80059ec:	2202      	movs	r2, #2
 80059ee:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a25      	ldr	r2, [pc, #148]	; (8005a8c <HAL_I2S_Init+0x278>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d101      	bne.n	80059fe <HAL_I2S_Init+0x1ea>
 80059fa:	4b25      	ldr	r3, [pc, #148]	; (8005a90 <HAL_I2S_Init+0x27c>)
 80059fc:	e001      	b.n	8005a02 <HAL_I2S_Init+0x1ee>
 80059fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a02:	69db      	ldr	r3, [r3, #28]
 8005a04:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a0e:	d003      	beq.n	8005a18 <HAL_I2S_Init+0x204>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d103      	bne.n	8005a20 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005a18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a1c:	613b      	str	r3, [r7, #16]
 8005a1e:	e001      	b.n	8005a24 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005a20:	2300      	movs	r3, #0
 8005a22:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	699b      	ldr	r3, [r3, #24]
 8005a40:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005a42:	4313      	orrs	r3, r2
 8005a44:	b29a      	uxth	r2, r3
 8005a46:	897b      	ldrh	r3, [r7, #10]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005a50:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a0d      	ldr	r2, [pc, #52]	; (8005a8c <HAL_I2S_Init+0x278>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d101      	bne.n	8005a60 <HAL_I2S_Init+0x24c>
 8005a5c:	4b0c      	ldr	r3, [pc, #48]	; (8005a90 <HAL_I2S_Init+0x27c>)
 8005a5e:	e001      	b.n	8005a64 <HAL_I2S_Init+0x250>
 8005a60:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a64:	897a      	ldrh	r2, [r7, #10]
 8005a66:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2201      	movs	r2, #1
 8005a72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005a76:	2300      	movs	r3, #0
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3720      	adds	r7, #32
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}
 8005a80:	08005d9d 	.word	0x08005d9d
 8005a84:	cccccccd 	.word	0xcccccccd
 8005a88:	08005eb1 	.word	0x08005eb1
 8005a8c:	40003800 	.word	0x40003800
 8005a90:	40003400 	.word	0x40003400

08005a94 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b086      	sub	sp, #24
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d002      	beq.n	8005aae <HAL_I2S_Receive_DMA+0x1a>
 8005aa8:	88fb      	ldrh	r3, [r7, #6]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d101      	bne.n	8005ab2 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e0a1      	b.n	8005bf6 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d101      	bne.n	8005ac2 <HAL_I2S_Receive_DMA+0x2e>
 8005abe:	2302      	movs	r3, #2
 8005ac0:	e099      	b.n	8005bf6 <HAL_I2S_Receive_DMA+0x162>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d005      	beq.n	8005ae2 <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8005ade:	2302      	movs	r3, #2
 8005ae0:	e089      	b.n	8005bf6 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2204      	movs	r2, #4
 8005ae6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2200      	movs	r2, #0
 8005aee:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	68ba      	ldr	r2, [r7, #8]
 8005af4:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	69db      	ldr	r3, [r3, #28]
 8005afc:	f003 0307 	and.w	r3, r3, #7
 8005b00:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	2b03      	cmp	r3, #3
 8005b06:	d002      	beq.n	8005b0e <HAL_I2S_Receive_DMA+0x7a>
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	2b05      	cmp	r3, #5
 8005b0c:	d10a      	bne.n	8005b24 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 8005b0e:	88fb      	ldrh	r3, [r7, #6]
 8005b10:	005b      	lsls	r3, r3, #1
 8005b12:	b29a      	uxth	r2, r3
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8005b18:	88fb      	ldrh	r3, [r7, #6]
 8005b1a:	005b      	lsls	r3, r3, #1
 8005b1c:	b29a      	uxth	r2, r3
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	865a      	strh	r2, [r3, #50]	; 0x32
 8005b22:	e005      	b.n	8005b30 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	88fa      	ldrh	r2, [r7, #6]
 8005b28:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	88fa      	ldrh	r2, [r7, #6]
 8005b2e:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b34:	4a32      	ldr	r2, [pc, #200]	; (8005c00 <HAL_I2S_Receive_DMA+0x16c>)
 8005b36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b3c:	4a31      	ldr	r2, [pc, #196]	; (8005c04 <HAL_I2S_Receive_DMA+0x170>)
 8005b3e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b44:	4a30      	ldr	r2, [pc, #192]	; (8005c08 <HAL_I2S_Receive_DMA+0x174>)
 8005b46:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	69db      	ldr	r3, [r3, #28]
 8005b4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b56:	d10a      	bne.n	8005b6e <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005b58:	2300      	movs	r3, #0
 8005b5a:	613b      	str	r3, [r7, #16]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	613b      	str	r3, [r7, #16]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	613b      	str	r3, [r7, #16]
 8005b6c:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	330c      	adds	r3, #12
 8005b78:	4619      	mov	r1, r3
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b7e:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8005b84:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8005b86:	f7fc fcaf 	bl	80024e8 <HAL_DMA_Start_IT>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d00f      	beq.n	8005bb0 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b94:	f043 0208 	orr.w	r2, r3, #8
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e022      	b.n	8005bf6 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	69db      	ldr	r3, [r3, #28]
 8005bb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d107      	bne.n	8005bce <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	69da      	ldr	r2, [r3, #28]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005bcc:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	f003 0301 	and.w	r3, r3, #1
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d107      	bne.n	8005bec <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	685a      	ldr	r2, [r3, #4]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f042 0201 	orr.w	r2, r2, #1
 8005bea:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3718      	adds	r7, #24
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	08005c7b 	.word	0x08005c7b
 8005c04:	08005c39 	.word	0x08005c39
 8005c08:	08005c97 	.word	0x08005c97

08005c0c <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b082      	sub	sp, #8
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	4798      	blx	r3
}
 8005c1c:	bf00      	nop
 8005c1e:	3708      	adds	r7, #8
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005c2c:	bf00      	nop
 8005c2e:	370c      	adds	r7, #12
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c44:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	69db      	ldr	r3, [r3, #28]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d10e      	bne.n	8005c6c <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	685a      	ldr	r2, [r3, #4]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f022 0201 	bic.w	r2, r2, #1
 8005c5c:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2200      	movs	r2, #0
 8005c62:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	f7fa fe85 	bl	800097c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005c72:	bf00      	nop
 8005c74:	3710      	adds	r7, #16
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}

08005c7a <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b084      	sub	sp, #16
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c86:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8005c88:	68f8      	ldr	r0, [r7, #12]
 8005c8a:	f7fa fe4d 	bl	8000928 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005c8e:	bf00      	nop
 8005c90:	3710      	adds	r7, #16
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}

08005c96 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8005c96:	b580      	push	{r7, lr}
 8005c98:	b084      	sub	sp, #16
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca2:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	685a      	ldr	r2, [r3, #4]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f022 0203 	bic.w	r2, r2, #3
 8005cb2:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ccc:	f043 0208 	orr.w	r2, r3, #8
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8005cd4:	68f8      	ldr	r0, [r7, #12]
 8005cd6:	f7ff ffa5 	bl	8005c24 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005cda:	bf00      	nop
 8005cdc:	3710      	adds	r7, #16
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}

08005ce2 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005ce2:	b580      	push	{r7, lr}
 8005ce4:	b082      	sub	sp, #8
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cee:	881a      	ldrh	r2, [r3, #0]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfa:	1c9a      	adds	r2, r3, #2
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	3b01      	subs	r3, #1
 8005d08:	b29a      	uxth	r2, r3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d10e      	bne.n	8005d36 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	685a      	ldr	r2, [r3, #4]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005d26:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f7fa fe4d 	bl	80009d0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005d36:	bf00      	nop
 8005d38:	3708      	adds	r7, #8
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}

08005d3e <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005d3e:	b580      	push	{r7, lr}
 8005d40:	b082      	sub	sp, #8
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	68da      	ldr	r2, [r3, #12]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d50:	b292      	uxth	r2, r2
 8005d52:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d58:	1c9a      	adds	r2, r3, #2
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	3b01      	subs	r3, #1
 8005d66:	b29a      	uxth	r2, r3
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d10e      	bne.n	8005d94 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	685a      	ldr	r2, [r3, #4]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005d84:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2201      	movs	r2, #1
 8005d8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f7fa fdf4 	bl	800097c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005d94:	bf00      	nop
 8005d96:	3708      	adds	r7, #8
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b086      	sub	sp, #24
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	2b04      	cmp	r3, #4
 8005db6:	d13a      	bne.n	8005e2e <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	f003 0301 	and.w	r3, r3, #1
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d109      	bne.n	8005dd6 <I2S_IRQHandler+0x3a>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dcc:	2b40      	cmp	r3, #64	; 0x40
 8005dce:	d102      	bne.n	8005dd6 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f7ff ffb4 	bl	8005d3e <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ddc:	2b40      	cmp	r3, #64	; 0x40
 8005dde:	d126      	bne.n	8005e2e <I2S_IRQHandler+0x92>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	f003 0320 	and.w	r3, r3, #32
 8005dea:	2b20      	cmp	r3, #32
 8005dec:	d11f      	bne.n	8005e2e <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	685a      	ldr	r2, [r3, #4]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005dfc:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005dfe:	2300      	movs	r3, #0
 8005e00:	613b      	str	r3, [r7, #16]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	613b      	str	r3, [r7, #16]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	613b      	str	r3, [r7, #16]
 8005e12:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e20:	f043 0202 	orr.w	r2, r3, #2
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f7ff fefb 	bl	8005c24 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	2b03      	cmp	r3, #3
 8005e38:	d136      	bne.n	8005ea8 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	f003 0302 	and.w	r3, r3, #2
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	d109      	bne.n	8005e58 <I2S_IRQHandler+0xbc>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e4e:	2b80      	cmp	r3, #128	; 0x80
 8005e50:	d102      	bne.n	8005e58 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f7ff ff45 	bl	8005ce2 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	f003 0308 	and.w	r3, r3, #8
 8005e5e:	2b08      	cmp	r3, #8
 8005e60:	d122      	bne.n	8005ea8 <I2S_IRQHandler+0x10c>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	f003 0320 	and.w	r3, r3, #32
 8005e6c:	2b20      	cmp	r3, #32
 8005e6e:	d11b      	bne.n	8005ea8 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	685a      	ldr	r2, [r3, #4]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005e7e:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005e80:	2300      	movs	r3, #0
 8005e82:	60fb      	str	r3, [r7, #12]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	60fb      	str	r3, [r7, #12]
 8005e8c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2201      	movs	r2, #1
 8005e92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e9a:	f043 0204 	orr.w	r2, r3, #4
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f7ff febe 	bl	8005c24 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005ea8:	bf00      	nop
 8005eaa:	3718      	adds	r7, #24
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b088      	sub	sp, #32
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4aa2      	ldr	r2, [pc, #648]	; (8006150 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d101      	bne.n	8005ece <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005eca:	4ba2      	ldr	r3, [pc, #648]	; (8006154 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005ecc:	e001      	b.n	8005ed2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005ece:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a9b      	ldr	r2, [pc, #620]	; (8006150 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d101      	bne.n	8005eec <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005ee8:	4b9a      	ldr	r3, [pc, #616]	; (8006154 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005eea:	e001      	b.n	8005ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005eec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005efc:	d004      	beq.n	8005f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	f040 8099 	bne.w	800603a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	f003 0302 	and.w	r3, r3, #2
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d107      	bne.n	8005f22 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d002      	beq.n	8005f22 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f000 f925 	bl	800616c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005f22:	69bb      	ldr	r3, [r7, #24]
 8005f24:	f003 0301 	and.w	r3, r3, #1
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d107      	bne.n	8005f3c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d002      	beq.n	8005f3c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 f9c8 	bl	80062cc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f42:	2b40      	cmp	r3, #64	; 0x40
 8005f44:	d13a      	bne.n	8005fbc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	f003 0320 	and.w	r3, r3, #32
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d035      	beq.n	8005fbc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a7e      	ldr	r2, [pc, #504]	; (8006150 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d101      	bne.n	8005f5e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005f5a:	4b7e      	ldr	r3, [pc, #504]	; (8006154 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005f5c:	e001      	b.n	8005f62 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005f5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f62:	685a      	ldr	r2, [r3, #4]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4979      	ldr	r1, [pc, #484]	; (8006150 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005f6a:	428b      	cmp	r3, r1
 8005f6c:	d101      	bne.n	8005f72 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005f6e:	4b79      	ldr	r3, [pc, #484]	; (8006154 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005f70:	e001      	b.n	8005f76 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005f72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f76:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005f7a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	685a      	ldr	r2, [r3, #4]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005f8a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	60fb      	str	r3, [r7, #12]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	60fb      	str	r3, [r7, #12]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	60fb      	str	r3, [r7, #12]
 8005fa0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fae:	f043 0202 	orr.w	r2, r3, #2
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f7ff fe34 	bl	8005c24 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	f003 0308 	and.w	r3, r3, #8
 8005fc2:	2b08      	cmp	r3, #8
 8005fc4:	f040 80be 	bne.w	8006144 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	f003 0320 	and.w	r3, r3, #32
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	f000 80b8 	beq.w	8006144 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	685a      	ldr	r2, [r3, #4]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005fe2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a59      	ldr	r2, [pc, #356]	; (8006150 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d101      	bne.n	8005ff2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005fee:	4b59      	ldr	r3, [pc, #356]	; (8006154 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005ff0:	e001      	b.n	8005ff6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005ff2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ff6:	685a      	ldr	r2, [r3, #4]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4954      	ldr	r1, [pc, #336]	; (8006150 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005ffe:	428b      	cmp	r3, r1
 8006000:	d101      	bne.n	8006006 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8006002:	4b54      	ldr	r3, [pc, #336]	; (8006154 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006004:	e001      	b.n	800600a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8006006:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800600a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800600e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006010:	2300      	movs	r3, #0
 8006012:	60bb      	str	r3, [r7, #8]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	60bb      	str	r3, [r7, #8]
 800601c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2201      	movs	r2, #1
 8006022:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800602a:	f043 0204 	orr.w	r2, r3, #4
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f7ff fdf6 	bl	8005c24 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006038:	e084      	b.n	8006144 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	f003 0302 	and.w	r3, r3, #2
 8006040:	2b02      	cmp	r3, #2
 8006042:	d107      	bne.n	8006054 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800604a:	2b00      	cmp	r3, #0
 800604c:	d002      	beq.n	8006054 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 f8be 	bl	80061d0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	f003 0301 	and.w	r3, r3, #1
 800605a:	2b01      	cmp	r3, #1
 800605c:	d107      	bne.n	800606e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006064:	2b00      	cmp	r3, #0
 8006066:	d002      	beq.n	800606e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 f8fd 	bl	8006268 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006074:	2b40      	cmp	r3, #64	; 0x40
 8006076:	d12f      	bne.n	80060d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	f003 0320 	and.w	r3, r3, #32
 800607e:	2b00      	cmp	r3, #0
 8006080:	d02a      	beq.n	80060d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	685a      	ldr	r2, [r3, #4]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006090:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a2e      	ldr	r2, [pc, #184]	; (8006150 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d101      	bne.n	80060a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800609c:	4b2d      	ldr	r3, [pc, #180]	; (8006154 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800609e:	e001      	b.n	80060a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80060a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060a4:	685a      	ldr	r2, [r3, #4]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4929      	ldr	r1, [pc, #164]	; (8006150 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80060ac:	428b      	cmp	r3, r1
 80060ae:	d101      	bne.n	80060b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80060b0:	4b28      	ldr	r3, [pc, #160]	; (8006154 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80060b2:	e001      	b.n	80060b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80060b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060b8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80060bc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2201      	movs	r2, #1
 80060c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ca:	f043 0202 	orr.w	r2, r3, #2
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f7ff fda6 	bl	8005c24 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	f003 0308 	and.w	r3, r3, #8
 80060de:	2b08      	cmp	r3, #8
 80060e0:	d131      	bne.n	8006146 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	f003 0320 	and.w	r3, r3, #32
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d02c      	beq.n	8006146 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a17      	ldr	r2, [pc, #92]	; (8006150 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d101      	bne.n	80060fa <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80060f6:	4b17      	ldr	r3, [pc, #92]	; (8006154 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80060f8:	e001      	b.n	80060fe <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80060fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060fe:	685a      	ldr	r2, [r3, #4]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4912      	ldr	r1, [pc, #72]	; (8006150 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006106:	428b      	cmp	r3, r1
 8006108:	d101      	bne.n	800610e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800610a:	4b12      	ldr	r3, [pc, #72]	; (8006154 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800610c:	e001      	b.n	8006112 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800610e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006112:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006116:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	685a      	ldr	r2, [r3, #4]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006126:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006134:	f043 0204 	orr.w	r2, r3, #4
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f7ff fd71 	bl	8005c24 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006142:	e000      	b.n	8006146 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006144:	bf00      	nop
}
 8006146:	bf00      	nop
 8006148:	3720      	adds	r7, #32
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	40003800 	.word	0x40003800
 8006154:	40003400 	.word	0x40003400

08006158 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006158:	b480      	push	{r7}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006160:	bf00      	nop
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006178:	1c99      	adds	r1, r3, #2
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	6251      	str	r1, [r2, #36]	; 0x24
 800617e:	881a      	ldrh	r2, [r3, #0]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800618a:	b29b      	uxth	r3, r3
 800618c:	3b01      	subs	r3, #1
 800618e:	b29a      	uxth	r2, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006198:	b29b      	uxth	r3, r3
 800619a:	2b00      	cmp	r3, #0
 800619c:	d113      	bne.n	80061c6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	685a      	ldr	r2, [r3, #4]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80061ac:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d106      	bne.n	80061c6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f7ff ffc9 	bl	8006158 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80061c6:	bf00      	nop
 80061c8:	3708      	adds	r7, #8
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
	...

080061d0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b082      	sub	sp, #8
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061dc:	1c99      	adds	r1, r3, #2
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	6251      	str	r1, [r2, #36]	; 0x24
 80061e2:	8819      	ldrh	r1, [r3, #0]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a1d      	ldr	r2, [pc, #116]	; (8006260 <I2SEx_TxISR_I2SExt+0x90>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d101      	bne.n	80061f2 <I2SEx_TxISR_I2SExt+0x22>
 80061ee:	4b1d      	ldr	r3, [pc, #116]	; (8006264 <I2SEx_TxISR_I2SExt+0x94>)
 80061f0:	e001      	b.n	80061f6 <I2SEx_TxISR_I2SExt+0x26>
 80061f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80061f6:	460a      	mov	r2, r1
 80061f8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061fe:	b29b      	uxth	r3, r3
 8006200:	3b01      	subs	r3, #1
 8006202:	b29a      	uxth	r2, r3
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800620c:	b29b      	uxth	r3, r3
 800620e:	2b00      	cmp	r3, #0
 8006210:	d121      	bne.n	8006256 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a12      	ldr	r2, [pc, #72]	; (8006260 <I2SEx_TxISR_I2SExt+0x90>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d101      	bne.n	8006220 <I2SEx_TxISR_I2SExt+0x50>
 800621c:	4b11      	ldr	r3, [pc, #68]	; (8006264 <I2SEx_TxISR_I2SExt+0x94>)
 800621e:	e001      	b.n	8006224 <I2SEx_TxISR_I2SExt+0x54>
 8006220:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006224:	685a      	ldr	r2, [r3, #4]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	490d      	ldr	r1, [pc, #52]	; (8006260 <I2SEx_TxISR_I2SExt+0x90>)
 800622c:	428b      	cmp	r3, r1
 800622e:	d101      	bne.n	8006234 <I2SEx_TxISR_I2SExt+0x64>
 8006230:	4b0c      	ldr	r3, [pc, #48]	; (8006264 <I2SEx_TxISR_I2SExt+0x94>)
 8006232:	e001      	b.n	8006238 <I2SEx_TxISR_I2SExt+0x68>
 8006234:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006238:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800623c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006242:	b29b      	uxth	r3, r3
 8006244:	2b00      	cmp	r3, #0
 8006246:	d106      	bne.n	8006256 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f7ff ff81 	bl	8006158 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006256:	bf00      	nop
 8006258:	3708      	adds	r7, #8
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	40003800 	.word	0x40003800
 8006264:	40003400 	.word	0x40003400

08006268 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b082      	sub	sp, #8
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	68d8      	ldr	r0, [r3, #12]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800627a:	1c99      	adds	r1, r3, #2
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006280:	b282      	uxth	r2, r0
 8006282:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006288:	b29b      	uxth	r3, r3
 800628a:	3b01      	subs	r3, #1
 800628c:	b29a      	uxth	r2, r3
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006296:	b29b      	uxth	r3, r3
 8006298:	2b00      	cmp	r3, #0
 800629a:	d113      	bne.n	80062c4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	685a      	ldr	r2, [r3, #4]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80062aa:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d106      	bne.n	80062c4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2201      	movs	r2, #1
 80062ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f7ff ff4a 	bl	8006158 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80062c4:	bf00      	nop
 80062c6:	3708      	adds	r7, #8
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b082      	sub	sp, #8
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a20      	ldr	r2, [pc, #128]	; (800635c <I2SEx_RxISR_I2SExt+0x90>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d101      	bne.n	80062e2 <I2SEx_RxISR_I2SExt+0x16>
 80062de:	4b20      	ldr	r3, [pc, #128]	; (8006360 <I2SEx_RxISR_I2SExt+0x94>)
 80062e0:	e001      	b.n	80062e6 <I2SEx_RxISR_I2SExt+0x1a>
 80062e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80062e6:	68d8      	ldr	r0, [r3, #12]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ec:	1c99      	adds	r1, r3, #2
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	62d1      	str	r1, [r2, #44]	; 0x2c
 80062f2:	b282      	uxth	r2, r0
 80062f4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	3b01      	subs	r3, #1
 80062fe:	b29a      	uxth	r2, r3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006308:	b29b      	uxth	r3, r3
 800630a:	2b00      	cmp	r3, #0
 800630c:	d121      	bne.n	8006352 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a12      	ldr	r2, [pc, #72]	; (800635c <I2SEx_RxISR_I2SExt+0x90>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d101      	bne.n	800631c <I2SEx_RxISR_I2SExt+0x50>
 8006318:	4b11      	ldr	r3, [pc, #68]	; (8006360 <I2SEx_RxISR_I2SExt+0x94>)
 800631a:	e001      	b.n	8006320 <I2SEx_RxISR_I2SExt+0x54>
 800631c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006320:	685a      	ldr	r2, [r3, #4]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	490d      	ldr	r1, [pc, #52]	; (800635c <I2SEx_RxISR_I2SExt+0x90>)
 8006328:	428b      	cmp	r3, r1
 800632a:	d101      	bne.n	8006330 <I2SEx_RxISR_I2SExt+0x64>
 800632c:	4b0c      	ldr	r3, [pc, #48]	; (8006360 <I2SEx_RxISR_I2SExt+0x94>)
 800632e:	e001      	b.n	8006334 <I2SEx_RxISR_I2SExt+0x68>
 8006330:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006334:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006338:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800633e:	b29b      	uxth	r3, r3
 8006340:	2b00      	cmp	r3, #0
 8006342:	d106      	bne.n	8006352 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f7ff ff03 	bl	8006158 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006352:	bf00      	nop
 8006354:	3708      	adds	r7, #8
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	40003800 	.word	0x40003800
 8006360:	40003400 	.word	0x40003400

08006364 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b086      	sub	sp, #24
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d101      	bne.n	8006376 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	e264      	b.n	8006840 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f003 0301 	and.w	r3, r3, #1
 800637e:	2b00      	cmp	r3, #0
 8006380:	d075      	beq.n	800646e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006382:	4ba3      	ldr	r3, [pc, #652]	; (8006610 <HAL_RCC_OscConfig+0x2ac>)
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	f003 030c 	and.w	r3, r3, #12
 800638a:	2b04      	cmp	r3, #4
 800638c:	d00c      	beq.n	80063a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800638e:	4ba0      	ldr	r3, [pc, #640]	; (8006610 <HAL_RCC_OscConfig+0x2ac>)
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006396:	2b08      	cmp	r3, #8
 8006398:	d112      	bne.n	80063c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800639a:	4b9d      	ldr	r3, [pc, #628]	; (8006610 <HAL_RCC_OscConfig+0x2ac>)
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063a6:	d10b      	bne.n	80063c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063a8:	4b99      	ldr	r3, [pc, #612]	; (8006610 <HAL_RCC_OscConfig+0x2ac>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d05b      	beq.n	800646c <HAL_RCC_OscConfig+0x108>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d157      	bne.n	800646c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	e23f      	b.n	8006840 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063c8:	d106      	bne.n	80063d8 <HAL_RCC_OscConfig+0x74>
 80063ca:	4b91      	ldr	r3, [pc, #580]	; (8006610 <HAL_RCC_OscConfig+0x2ac>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a90      	ldr	r2, [pc, #576]	; (8006610 <HAL_RCC_OscConfig+0x2ac>)
 80063d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063d4:	6013      	str	r3, [r2, #0]
 80063d6:	e01d      	b.n	8006414 <HAL_RCC_OscConfig+0xb0>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80063e0:	d10c      	bne.n	80063fc <HAL_RCC_OscConfig+0x98>
 80063e2:	4b8b      	ldr	r3, [pc, #556]	; (8006610 <HAL_RCC_OscConfig+0x2ac>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a8a      	ldr	r2, [pc, #552]	; (8006610 <HAL_RCC_OscConfig+0x2ac>)
 80063e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063ec:	6013      	str	r3, [r2, #0]
 80063ee:	4b88      	ldr	r3, [pc, #544]	; (8006610 <HAL_RCC_OscConfig+0x2ac>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a87      	ldr	r2, [pc, #540]	; (8006610 <HAL_RCC_OscConfig+0x2ac>)
 80063f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063f8:	6013      	str	r3, [r2, #0]
 80063fa:	e00b      	b.n	8006414 <HAL_RCC_OscConfig+0xb0>
 80063fc:	4b84      	ldr	r3, [pc, #528]	; (8006610 <HAL_RCC_OscConfig+0x2ac>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a83      	ldr	r2, [pc, #524]	; (8006610 <HAL_RCC_OscConfig+0x2ac>)
 8006402:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006406:	6013      	str	r3, [r2, #0]
 8006408:	4b81      	ldr	r3, [pc, #516]	; (8006610 <HAL_RCC_OscConfig+0x2ac>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a80      	ldr	r2, [pc, #512]	; (8006610 <HAL_RCC_OscConfig+0x2ac>)
 800640e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006412:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d013      	beq.n	8006444 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800641c:	f7fb fe74 	bl	8002108 <HAL_GetTick>
 8006420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006422:	e008      	b.n	8006436 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006424:	f7fb fe70 	bl	8002108 <HAL_GetTick>
 8006428:	4602      	mov	r2, r0
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	1ad3      	subs	r3, r2, r3
 800642e:	2b64      	cmp	r3, #100	; 0x64
 8006430:	d901      	bls.n	8006436 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006432:	2303      	movs	r3, #3
 8006434:	e204      	b.n	8006840 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006436:	4b76      	ldr	r3, [pc, #472]	; (8006610 <HAL_RCC_OscConfig+0x2ac>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800643e:	2b00      	cmp	r3, #0
 8006440:	d0f0      	beq.n	8006424 <HAL_RCC_OscConfig+0xc0>
 8006442:	e014      	b.n	800646e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006444:	f7fb fe60 	bl	8002108 <HAL_GetTick>
 8006448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800644a:	e008      	b.n	800645e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800644c:	f7fb fe5c 	bl	8002108 <HAL_GetTick>
 8006450:	4602      	mov	r2, r0
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	1ad3      	subs	r3, r2, r3
 8006456:	2b64      	cmp	r3, #100	; 0x64
 8006458:	d901      	bls.n	800645e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800645a:	2303      	movs	r3, #3
 800645c:	e1f0      	b.n	8006840 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800645e:	4b6c      	ldr	r3, [pc, #432]	; (8006610 <HAL_RCC_OscConfig+0x2ac>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006466:	2b00      	cmp	r3, #0
 8006468:	d1f0      	bne.n	800644c <HAL_RCC_OscConfig+0xe8>
 800646a:	e000      	b.n	800646e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800646c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 0302 	and.w	r3, r3, #2
 8006476:	2b00      	cmp	r3, #0
 8006478:	d063      	beq.n	8006542 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800647a:	4b65      	ldr	r3, [pc, #404]	; (8006610 <HAL_RCC_OscConfig+0x2ac>)
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	f003 030c 	and.w	r3, r3, #12
 8006482:	2b00      	cmp	r3, #0
 8006484:	d00b      	beq.n	800649e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006486:	4b62      	ldr	r3, [pc, #392]	; (8006610 <HAL_RCC_OscConfig+0x2ac>)
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800648e:	2b08      	cmp	r3, #8
 8006490:	d11c      	bne.n	80064cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006492:	4b5f      	ldr	r3, [pc, #380]	; (8006610 <HAL_RCC_OscConfig+0x2ac>)
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800649a:	2b00      	cmp	r3, #0
 800649c:	d116      	bne.n	80064cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800649e:	4b5c      	ldr	r3, [pc, #368]	; (8006610 <HAL_RCC_OscConfig+0x2ac>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f003 0302 	and.w	r3, r3, #2
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d005      	beq.n	80064b6 <HAL_RCC_OscConfig+0x152>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d001      	beq.n	80064b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	e1c4      	b.n	8006840 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064b6:	4b56      	ldr	r3, [pc, #344]	; (8006610 <HAL_RCC_OscConfig+0x2ac>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	691b      	ldr	r3, [r3, #16]
 80064c2:	00db      	lsls	r3, r3, #3
 80064c4:	4952      	ldr	r1, [pc, #328]	; (8006610 <HAL_RCC_OscConfig+0x2ac>)
 80064c6:	4313      	orrs	r3, r2
 80064c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064ca:	e03a      	b.n	8006542 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d020      	beq.n	8006516 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064d4:	4b4f      	ldr	r3, [pc, #316]	; (8006614 <HAL_RCC_OscConfig+0x2b0>)
 80064d6:	2201      	movs	r2, #1
 80064d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064da:	f7fb fe15 	bl	8002108 <HAL_GetTick>
 80064de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064e0:	e008      	b.n	80064f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064e2:	f7fb fe11 	bl	8002108 <HAL_GetTick>
 80064e6:	4602      	mov	r2, r0
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	1ad3      	subs	r3, r2, r3
 80064ec:	2b02      	cmp	r3, #2
 80064ee:	d901      	bls.n	80064f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80064f0:	2303      	movs	r3, #3
 80064f2:	e1a5      	b.n	8006840 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064f4:	4b46      	ldr	r3, [pc, #280]	; (8006610 <HAL_RCC_OscConfig+0x2ac>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f003 0302 	and.w	r3, r3, #2
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d0f0      	beq.n	80064e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006500:	4b43      	ldr	r3, [pc, #268]	; (8006610 <HAL_RCC_OscConfig+0x2ac>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	00db      	lsls	r3, r3, #3
 800650e:	4940      	ldr	r1, [pc, #256]	; (8006610 <HAL_RCC_OscConfig+0x2ac>)
 8006510:	4313      	orrs	r3, r2
 8006512:	600b      	str	r3, [r1, #0]
 8006514:	e015      	b.n	8006542 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006516:	4b3f      	ldr	r3, [pc, #252]	; (8006614 <HAL_RCC_OscConfig+0x2b0>)
 8006518:	2200      	movs	r2, #0
 800651a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800651c:	f7fb fdf4 	bl	8002108 <HAL_GetTick>
 8006520:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006522:	e008      	b.n	8006536 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006524:	f7fb fdf0 	bl	8002108 <HAL_GetTick>
 8006528:	4602      	mov	r2, r0
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	1ad3      	subs	r3, r2, r3
 800652e:	2b02      	cmp	r3, #2
 8006530:	d901      	bls.n	8006536 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006532:	2303      	movs	r3, #3
 8006534:	e184      	b.n	8006840 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006536:	4b36      	ldr	r3, [pc, #216]	; (8006610 <HAL_RCC_OscConfig+0x2ac>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f003 0302 	and.w	r3, r3, #2
 800653e:	2b00      	cmp	r3, #0
 8006540:	d1f0      	bne.n	8006524 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f003 0308 	and.w	r3, r3, #8
 800654a:	2b00      	cmp	r3, #0
 800654c:	d030      	beq.n	80065b0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	695b      	ldr	r3, [r3, #20]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d016      	beq.n	8006584 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006556:	4b30      	ldr	r3, [pc, #192]	; (8006618 <HAL_RCC_OscConfig+0x2b4>)
 8006558:	2201      	movs	r2, #1
 800655a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800655c:	f7fb fdd4 	bl	8002108 <HAL_GetTick>
 8006560:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006562:	e008      	b.n	8006576 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006564:	f7fb fdd0 	bl	8002108 <HAL_GetTick>
 8006568:	4602      	mov	r2, r0
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	1ad3      	subs	r3, r2, r3
 800656e:	2b02      	cmp	r3, #2
 8006570:	d901      	bls.n	8006576 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006572:	2303      	movs	r3, #3
 8006574:	e164      	b.n	8006840 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006576:	4b26      	ldr	r3, [pc, #152]	; (8006610 <HAL_RCC_OscConfig+0x2ac>)
 8006578:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800657a:	f003 0302 	and.w	r3, r3, #2
 800657e:	2b00      	cmp	r3, #0
 8006580:	d0f0      	beq.n	8006564 <HAL_RCC_OscConfig+0x200>
 8006582:	e015      	b.n	80065b0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006584:	4b24      	ldr	r3, [pc, #144]	; (8006618 <HAL_RCC_OscConfig+0x2b4>)
 8006586:	2200      	movs	r2, #0
 8006588:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800658a:	f7fb fdbd 	bl	8002108 <HAL_GetTick>
 800658e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006590:	e008      	b.n	80065a4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006592:	f7fb fdb9 	bl	8002108 <HAL_GetTick>
 8006596:	4602      	mov	r2, r0
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	1ad3      	subs	r3, r2, r3
 800659c:	2b02      	cmp	r3, #2
 800659e:	d901      	bls.n	80065a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80065a0:	2303      	movs	r3, #3
 80065a2:	e14d      	b.n	8006840 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065a4:	4b1a      	ldr	r3, [pc, #104]	; (8006610 <HAL_RCC_OscConfig+0x2ac>)
 80065a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065a8:	f003 0302 	and.w	r3, r3, #2
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d1f0      	bne.n	8006592 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 0304 	and.w	r3, r3, #4
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f000 80a0 	beq.w	80066fe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065be:	2300      	movs	r3, #0
 80065c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065c2:	4b13      	ldr	r3, [pc, #76]	; (8006610 <HAL_RCC_OscConfig+0x2ac>)
 80065c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d10f      	bne.n	80065ee <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065ce:	2300      	movs	r3, #0
 80065d0:	60bb      	str	r3, [r7, #8]
 80065d2:	4b0f      	ldr	r3, [pc, #60]	; (8006610 <HAL_RCC_OscConfig+0x2ac>)
 80065d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d6:	4a0e      	ldr	r2, [pc, #56]	; (8006610 <HAL_RCC_OscConfig+0x2ac>)
 80065d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065dc:	6413      	str	r3, [r2, #64]	; 0x40
 80065de:	4b0c      	ldr	r3, [pc, #48]	; (8006610 <HAL_RCC_OscConfig+0x2ac>)
 80065e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065e6:	60bb      	str	r3, [r7, #8]
 80065e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065ea:	2301      	movs	r3, #1
 80065ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065ee:	4b0b      	ldr	r3, [pc, #44]	; (800661c <HAL_RCC_OscConfig+0x2b8>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d121      	bne.n	800663e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80065fa:	4b08      	ldr	r3, [pc, #32]	; (800661c <HAL_RCC_OscConfig+0x2b8>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a07      	ldr	r2, [pc, #28]	; (800661c <HAL_RCC_OscConfig+0x2b8>)
 8006600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006604:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006606:	f7fb fd7f 	bl	8002108 <HAL_GetTick>
 800660a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800660c:	e011      	b.n	8006632 <HAL_RCC_OscConfig+0x2ce>
 800660e:	bf00      	nop
 8006610:	40023800 	.word	0x40023800
 8006614:	42470000 	.word	0x42470000
 8006618:	42470e80 	.word	0x42470e80
 800661c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006620:	f7fb fd72 	bl	8002108 <HAL_GetTick>
 8006624:	4602      	mov	r2, r0
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	1ad3      	subs	r3, r2, r3
 800662a:	2b02      	cmp	r3, #2
 800662c:	d901      	bls.n	8006632 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800662e:	2303      	movs	r3, #3
 8006630:	e106      	b.n	8006840 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006632:	4b85      	ldr	r3, [pc, #532]	; (8006848 <HAL_RCC_OscConfig+0x4e4>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800663a:	2b00      	cmp	r3, #0
 800663c:	d0f0      	beq.n	8006620 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	2b01      	cmp	r3, #1
 8006644:	d106      	bne.n	8006654 <HAL_RCC_OscConfig+0x2f0>
 8006646:	4b81      	ldr	r3, [pc, #516]	; (800684c <HAL_RCC_OscConfig+0x4e8>)
 8006648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800664a:	4a80      	ldr	r2, [pc, #512]	; (800684c <HAL_RCC_OscConfig+0x4e8>)
 800664c:	f043 0301 	orr.w	r3, r3, #1
 8006650:	6713      	str	r3, [r2, #112]	; 0x70
 8006652:	e01c      	b.n	800668e <HAL_RCC_OscConfig+0x32a>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	2b05      	cmp	r3, #5
 800665a:	d10c      	bne.n	8006676 <HAL_RCC_OscConfig+0x312>
 800665c:	4b7b      	ldr	r3, [pc, #492]	; (800684c <HAL_RCC_OscConfig+0x4e8>)
 800665e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006660:	4a7a      	ldr	r2, [pc, #488]	; (800684c <HAL_RCC_OscConfig+0x4e8>)
 8006662:	f043 0304 	orr.w	r3, r3, #4
 8006666:	6713      	str	r3, [r2, #112]	; 0x70
 8006668:	4b78      	ldr	r3, [pc, #480]	; (800684c <HAL_RCC_OscConfig+0x4e8>)
 800666a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800666c:	4a77      	ldr	r2, [pc, #476]	; (800684c <HAL_RCC_OscConfig+0x4e8>)
 800666e:	f043 0301 	orr.w	r3, r3, #1
 8006672:	6713      	str	r3, [r2, #112]	; 0x70
 8006674:	e00b      	b.n	800668e <HAL_RCC_OscConfig+0x32a>
 8006676:	4b75      	ldr	r3, [pc, #468]	; (800684c <HAL_RCC_OscConfig+0x4e8>)
 8006678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800667a:	4a74      	ldr	r2, [pc, #464]	; (800684c <HAL_RCC_OscConfig+0x4e8>)
 800667c:	f023 0301 	bic.w	r3, r3, #1
 8006680:	6713      	str	r3, [r2, #112]	; 0x70
 8006682:	4b72      	ldr	r3, [pc, #456]	; (800684c <HAL_RCC_OscConfig+0x4e8>)
 8006684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006686:	4a71      	ldr	r2, [pc, #452]	; (800684c <HAL_RCC_OscConfig+0x4e8>)
 8006688:	f023 0304 	bic.w	r3, r3, #4
 800668c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d015      	beq.n	80066c2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006696:	f7fb fd37 	bl	8002108 <HAL_GetTick>
 800669a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800669c:	e00a      	b.n	80066b4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800669e:	f7fb fd33 	bl	8002108 <HAL_GetTick>
 80066a2:	4602      	mov	r2, r0
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	1ad3      	subs	r3, r2, r3
 80066a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d901      	bls.n	80066b4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80066b0:	2303      	movs	r3, #3
 80066b2:	e0c5      	b.n	8006840 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066b4:	4b65      	ldr	r3, [pc, #404]	; (800684c <HAL_RCC_OscConfig+0x4e8>)
 80066b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066b8:	f003 0302 	and.w	r3, r3, #2
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d0ee      	beq.n	800669e <HAL_RCC_OscConfig+0x33a>
 80066c0:	e014      	b.n	80066ec <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066c2:	f7fb fd21 	bl	8002108 <HAL_GetTick>
 80066c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066c8:	e00a      	b.n	80066e0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066ca:	f7fb fd1d 	bl	8002108 <HAL_GetTick>
 80066ce:	4602      	mov	r2, r0
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	1ad3      	subs	r3, r2, r3
 80066d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80066d8:	4293      	cmp	r3, r2
 80066da:	d901      	bls.n	80066e0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80066dc:	2303      	movs	r3, #3
 80066de:	e0af      	b.n	8006840 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066e0:	4b5a      	ldr	r3, [pc, #360]	; (800684c <HAL_RCC_OscConfig+0x4e8>)
 80066e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066e4:	f003 0302 	and.w	r3, r3, #2
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d1ee      	bne.n	80066ca <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80066ec:	7dfb      	ldrb	r3, [r7, #23]
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d105      	bne.n	80066fe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066f2:	4b56      	ldr	r3, [pc, #344]	; (800684c <HAL_RCC_OscConfig+0x4e8>)
 80066f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f6:	4a55      	ldr	r2, [pc, #340]	; (800684c <HAL_RCC_OscConfig+0x4e8>)
 80066f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066fc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	699b      	ldr	r3, [r3, #24]
 8006702:	2b00      	cmp	r3, #0
 8006704:	f000 809b 	beq.w	800683e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006708:	4b50      	ldr	r3, [pc, #320]	; (800684c <HAL_RCC_OscConfig+0x4e8>)
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	f003 030c 	and.w	r3, r3, #12
 8006710:	2b08      	cmp	r3, #8
 8006712:	d05c      	beq.n	80067ce <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	699b      	ldr	r3, [r3, #24]
 8006718:	2b02      	cmp	r3, #2
 800671a:	d141      	bne.n	80067a0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800671c:	4b4c      	ldr	r3, [pc, #304]	; (8006850 <HAL_RCC_OscConfig+0x4ec>)
 800671e:	2200      	movs	r2, #0
 8006720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006722:	f7fb fcf1 	bl	8002108 <HAL_GetTick>
 8006726:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006728:	e008      	b.n	800673c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800672a:	f7fb fced 	bl	8002108 <HAL_GetTick>
 800672e:	4602      	mov	r2, r0
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	1ad3      	subs	r3, r2, r3
 8006734:	2b02      	cmp	r3, #2
 8006736:	d901      	bls.n	800673c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006738:	2303      	movs	r3, #3
 800673a:	e081      	b.n	8006840 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800673c:	4b43      	ldr	r3, [pc, #268]	; (800684c <HAL_RCC_OscConfig+0x4e8>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006744:	2b00      	cmp	r3, #0
 8006746:	d1f0      	bne.n	800672a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	69da      	ldr	r2, [r3, #28]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6a1b      	ldr	r3, [r3, #32]
 8006750:	431a      	orrs	r2, r3
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006756:	019b      	lsls	r3, r3, #6
 8006758:	431a      	orrs	r2, r3
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800675e:	085b      	lsrs	r3, r3, #1
 8006760:	3b01      	subs	r3, #1
 8006762:	041b      	lsls	r3, r3, #16
 8006764:	431a      	orrs	r2, r3
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676a:	061b      	lsls	r3, r3, #24
 800676c:	4937      	ldr	r1, [pc, #220]	; (800684c <HAL_RCC_OscConfig+0x4e8>)
 800676e:	4313      	orrs	r3, r2
 8006770:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006772:	4b37      	ldr	r3, [pc, #220]	; (8006850 <HAL_RCC_OscConfig+0x4ec>)
 8006774:	2201      	movs	r2, #1
 8006776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006778:	f7fb fcc6 	bl	8002108 <HAL_GetTick>
 800677c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800677e:	e008      	b.n	8006792 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006780:	f7fb fcc2 	bl	8002108 <HAL_GetTick>
 8006784:	4602      	mov	r2, r0
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	1ad3      	subs	r3, r2, r3
 800678a:	2b02      	cmp	r3, #2
 800678c:	d901      	bls.n	8006792 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800678e:	2303      	movs	r3, #3
 8006790:	e056      	b.n	8006840 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006792:	4b2e      	ldr	r3, [pc, #184]	; (800684c <HAL_RCC_OscConfig+0x4e8>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800679a:	2b00      	cmp	r3, #0
 800679c:	d0f0      	beq.n	8006780 <HAL_RCC_OscConfig+0x41c>
 800679e:	e04e      	b.n	800683e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067a0:	4b2b      	ldr	r3, [pc, #172]	; (8006850 <HAL_RCC_OscConfig+0x4ec>)
 80067a2:	2200      	movs	r2, #0
 80067a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067a6:	f7fb fcaf 	bl	8002108 <HAL_GetTick>
 80067aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067ac:	e008      	b.n	80067c0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067ae:	f7fb fcab 	bl	8002108 <HAL_GetTick>
 80067b2:	4602      	mov	r2, r0
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	1ad3      	subs	r3, r2, r3
 80067b8:	2b02      	cmp	r3, #2
 80067ba:	d901      	bls.n	80067c0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80067bc:	2303      	movs	r3, #3
 80067be:	e03f      	b.n	8006840 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067c0:	4b22      	ldr	r3, [pc, #136]	; (800684c <HAL_RCC_OscConfig+0x4e8>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d1f0      	bne.n	80067ae <HAL_RCC_OscConfig+0x44a>
 80067cc:	e037      	b.n	800683e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	699b      	ldr	r3, [r3, #24]
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d101      	bne.n	80067da <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e032      	b.n	8006840 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80067da:	4b1c      	ldr	r3, [pc, #112]	; (800684c <HAL_RCC_OscConfig+0x4e8>)
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	699b      	ldr	r3, [r3, #24]
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d028      	beq.n	800683a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d121      	bne.n	800683a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006800:	429a      	cmp	r2, r3
 8006802:	d11a      	bne.n	800683a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006804:	68fa      	ldr	r2, [r7, #12]
 8006806:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800680a:	4013      	ands	r3, r2
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006810:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006812:	4293      	cmp	r3, r2
 8006814:	d111      	bne.n	800683a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006820:	085b      	lsrs	r3, r3, #1
 8006822:	3b01      	subs	r3, #1
 8006824:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006826:	429a      	cmp	r2, r3
 8006828:	d107      	bne.n	800683a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006834:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006836:	429a      	cmp	r2, r3
 8006838:	d001      	beq.n	800683e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	e000      	b.n	8006840 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800683e:	2300      	movs	r3, #0
}
 8006840:	4618      	mov	r0, r3
 8006842:	3718      	adds	r7, #24
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}
 8006848:	40007000 	.word	0x40007000
 800684c:	40023800 	.word	0x40023800
 8006850:	42470060 	.word	0x42470060

08006854 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d101      	bne.n	8006868 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006864:	2301      	movs	r3, #1
 8006866:	e0cc      	b.n	8006a02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006868:	4b68      	ldr	r3, [pc, #416]	; (8006a0c <HAL_RCC_ClockConfig+0x1b8>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 0307 	and.w	r3, r3, #7
 8006870:	683a      	ldr	r2, [r7, #0]
 8006872:	429a      	cmp	r2, r3
 8006874:	d90c      	bls.n	8006890 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006876:	4b65      	ldr	r3, [pc, #404]	; (8006a0c <HAL_RCC_ClockConfig+0x1b8>)
 8006878:	683a      	ldr	r2, [r7, #0]
 800687a:	b2d2      	uxtb	r2, r2
 800687c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800687e:	4b63      	ldr	r3, [pc, #396]	; (8006a0c <HAL_RCC_ClockConfig+0x1b8>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f003 0307 	and.w	r3, r3, #7
 8006886:	683a      	ldr	r2, [r7, #0]
 8006888:	429a      	cmp	r2, r3
 800688a:	d001      	beq.n	8006890 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800688c:	2301      	movs	r3, #1
 800688e:	e0b8      	b.n	8006a02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 0302 	and.w	r3, r3, #2
 8006898:	2b00      	cmp	r3, #0
 800689a:	d020      	beq.n	80068de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 0304 	and.w	r3, r3, #4
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d005      	beq.n	80068b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80068a8:	4b59      	ldr	r3, [pc, #356]	; (8006a10 <HAL_RCC_ClockConfig+0x1bc>)
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	4a58      	ldr	r2, [pc, #352]	; (8006a10 <HAL_RCC_ClockConfig+0x1bc>)
 80068ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80068b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f003 0308 	and.w	r3, r3, #8
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d005      	beq.n	80068cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80068c0:	4b53      	ldr	r3, [pc, #332]	; (8006a10 <HAL_RCC_ClockConfig+0x1bc>)
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	4a52      	ldr	r2, [pc, #328]	; (8006a10 <HAL_RCC_ClockConfig+0x1bc>)
 80068c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80068ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068cc:	4b50      	ldr	r3, [pc, #320]	; (8006a10 <HAL_RCC_ClockConfig+0x1bc>)
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	494d      	ldr	r1, [pc, #308]	; (8006a10 <HAL_RCC_ClockConfig+0x1bc>)
 80068da:	4313      	orrs	r3, r2
 80068dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f003 0301 	and.w	r3, r3, #1
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d044      	beq.n	8006974 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d107      	bne.n	8006902 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068f2:	4b47      	ldr	r3, [pc, #284]	; (8006a10 <HAL_RCC_ClockConfig+0x1bc>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d119      	bne.n	8006932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	e07f      	b.n	8006a02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	2b02      	cmp	r3, #2
 8006908:	d003      	beq.n	8006912 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800690e:	2b03      	cmp	r3, #3
 8006910:	d107      	bne.n	8006922 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006912:	4b3f      	ldr	r3, [pc, #252]	; (8006a10 <HAL_RCC_ClockConfig+0x1bc>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800691a:	2b00      	cmp	r3, #0
 800691c:	d109      	bne.n	8006932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	e06f      	b.n	8006a02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006922:	4b3b      	ldr	r3, [pc, #236]	; (8006a10 <HAL_RCC_ClockConfig+0x1bc>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f003 0302 	and.w	r3, r3, #2
 800692a:	2b00      	cmp	r3, #0
 800692c:	d101      	bne.n	8006932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e067      	b.n	8006a02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006932:	4b37      	ldr	r3, [pc, #220]	; (8006a10 <HAL_RCC_ClockConfig+0x1bc>)
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	f023 0203 	bic.w	r2, r3, #3
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	4934      	ldr	r1, [pc, #208]	; (8006a10 <HAL_RCC_ClockConfig+0x1bc>)
 8006940:	4313      	orrs	r3, r2
 8006942:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006944:	f7fb fbe0 	bl	8002108 <HAL_GetTick>
 8006948:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800694a:	e00a      	b.n	8006962 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800694c:	f7fb fbdc 	bl	8002108 <HAL_GetTick>
 8006950:	4602      	mov	r2, r0
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	f241 3288 	movw	r2, #5000	; 0x1388
 800695a:	4293      	cmp	r3, r2
 800695c:	d901      	bls.n	8006962 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800695e:	2303      	movs	r3, #3
 8006960:	e04f      	b.n	8006a02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006962:	4b2b      	ldr	r3, [pc, #172]	; (8006a10 <HAL_RCC_ClockConfig+0x1bc>)
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	f003 020c 	and.w	r2, r3, #12
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	429a      	cmp	r2, r3
 8006972:	d1eb      	bne.n	800694c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006974:	4b25      	ldr	r3, [pc, #148]	; (8006a0c <HAL_RCC_ClockConfig+0x1b8>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f003 0307 	and.w	r3, r3, #7
 800697c:	683a      	ldr	r2, [r7, #0]
 800697e:	429a      	cmp	r2, r3
 8006980:	d20c      	bcs.n	800699c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006982:	4b22      	ldr	r3, [pc, #136]	; (8006a0c <HAL_RCC_ClockConfig+0x1b8>)
 8006984:	683a      	ldr	r2, [r7, #0]
 8006986:	b2d2      	uxtb	r2, r2
 8006988:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800698a:	4b20      	ldr	r3, [pc, #128]	; (8006a0c <HAL_RCC_ClockConfig+0x1b8>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f003 0307 	and.w	r3, r3, #7
 8006992:	683a      	ldr	r2, [r7, #0]
 8006994:	429a      	cmp	r2, r3
 8006996:	d001      	beq.n	800699c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	e032      	b.n	8006a02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f003 0304 	and.w	r3, r3, #4
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d008      	beq.n	80069ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80069a8:	4b19      	ldr	r3, [pc, #100]	; (8006a10 <HAL_RCC_ClockConfig+0x1bc>)
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	4916      	ldr	r1, [pc, #88]	; (8006a10 <HAL_RCC_ClockConfig+0x1bc>)
 80069b6:	4313      	orrs	r3, r2
 80069b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f003 0308 	and.w	r3, r3, #8
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d009      	beq.n	80069da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80069c6:	4b12      	ldr	r3, [pc, #72]	; (8006a10 <HAL_RCC_ClockConfig+0x1bc>)
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	691b      	ldr	r3, [r3, #16]
 80069d2:	00db      	lsls	r3, r3, #3
 80069d4:	490e      	ldr	r1, [pc, #56]	; (8006a10 <HAL_RCC_ClockConfig+0x1bc>)
 80069d6:	4313      	orrs	r3, r2
 80069d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80069da:	f000 f821 	bl	8006a20 <HAL_RCC_GetSysClockFreq>
 80069de:	4602      	mov	r2, r0
 80069e0:	4b0b      	ldr	r3, [pc, #44]	; (8006a10 <HAL_RCC_ClockConfig+0x1bc>)
 80069e2:	689b      	ldr	r3, [r3, #8]
 80069e4:	091b      	lsrs	r3, r3, #4
 80069e6:	f003 030f 	and.w	r3, r3, #15
 80069ea:	490a      	ldr	r1, [pc, #40]	; (8006a14 <HAL_RCC_ClockConfig+0x1c0>)
 80069ec:	5ccb      	ldrb	r3, [r1, r3]
 80069ee:	fa22 f303 	lsr.w	r3, r2, r3
 80069f2:	4a09      	ldr	r2, [pc, #36]	; (8006a18 <HAL_RCC_ClockConfig+0x1c4>)
 80069f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80069f6:	4b09      	ldr	r3, [pc, #36]	; (8006a1c <HAL_RCC_ClockConfig+0x1c8>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4618      	mov	r0, r3
 80069fc:	f7fb fb40 	bl	8002080 <HAL_InitTick>

  return HAL_OK;
 8006a00:	2300      	movs	r3, #0
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3710      	adds	r7, #16
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	40023c00 	.word	0x40023c00
 8006a10:	40023800 	.word	0x40023800
 8006a14:	0800baa4 	.word	0x0800baa4
 8006a18:	20000000 	.word	0x20000000
 8006a1c:	20000004 	.word	0x20000004

08006a20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a20:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006a24:	b084      	sub	sp, #16
 8006a26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	607b      	str	r3, [r7, #4]
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	60fb      	str	r3, [r7, #12]
 8006a30:	2300      	movs	r3, #0
 8006a32:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006a34:	2300      	movs	r3, #0
 8006a36:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a38:	4b67      	ldr	r3, [pc, #412]	; (8006bd8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	f003 030c 	and.w	r3, r3, #12
 8006a40:	2b08      	cmp	r3, #8
 8006a42:	d00d      	beq.n	8006a60 <HAL_RCC_GetSysClockFreq+0x40>
 8006a44:	2b08      	cmp	r3, #8
 8006a46:	f200 80bd 	bhi.w	8006bc4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d002      	beq.n	8006a54 <HAL_RCC_GetSysClockFreq+0x34>
 8006a4e:	2b04      	cmp	r3, #4
 8006a50:	d003      	beq.n	8006a5a <HAL_RCC_GetSysClockFreq+0x3a>
 8006a52:	e0b7      	b.n	8006bc4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006a54:	4b61      	ldr	r3, [pc, #388]	; (8006bdc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006a56:	60bb      	str	r3, [r7, #8]
       break;
 8006a58:	e0b7      	b.n	8006bca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006a5a:	4b61      	ldr	r3, [pc, #388]	; (8006be0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006a5c:	60bb      	str	r3, [r7, #8]
      break;
 8006a5e:	e0b4      	b.n	8006bca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006a60:	4b5d      	ldr	r3, [pc, #372]	; (8006bd8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a68:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006a6a:	4b5b      	ldr	r3, [pc, #364]	; (8006bd8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d04d      	beq.n	8006b12 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a76:	4b58      	ldr	r3, [pc, #352]	; (8006bd8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	099b      	lsrs	r3, r3, #6
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	f04f 0300 	mov.w	r3, #0
 8006a82:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006a86:	f04f 0100 	mov.w	r1, #0
 8006a8a:	ea02 0800 	and.w	r8, r2, r0
 8006a8e:	ea03 0901 	and.w	r9, r3, r1
 8006a92:	4640      	mov	r0, r8
 8006a94:	4649      	mov	r1, r9
 8006a96:	f04f 0200 	mov.w	r2, #0
 8006a9a:	f04f 0300 	mov.w	r3, #0
 8006a9e:	014b      	lsls	r3, r1, #5
 8006aa0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006aa4:	0142      	lsls	r2, r0, #5
 8006aa6:	4610      	mov	r0, r2
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	ebb0 0008 	subs.w	r0, r0, r8
 8006aae:	eb61 0109 	sbc.w	r1, r1, r9
 8006ab2:	f04f 0200 	mov.w	r2, #0
 8006ab6:	f04f 0300 	mov.w	r3, #0
 8006aba:	018b      	lsls	r3, r1, #6
 8006abc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006ac0:	0182      	lsls	r2, r0, #6
 8006ac2:	1a12      	subs	r2, r2, r0
 8006ac4:	eb63 0301 	sbc.w	r3, r3, r1
 8006ac8:	f04f 0000 	mov.w	r0, #0
 8006acc:	f04f 0100 	mov.w	r1, #0
 8006ad0:	00d9      	lsls	r1, r3, #3
 8006ad2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006ad6:	00d0      	lsls	r0, r2, #3
 8006ad8:	4602      	mov	r2, r0
 8006ada:	460b      	mov	r3, r1
 8006adc:	eb12 0208 	adds.w	r2, r2, r8
 8006ae0:	eb43 0309 	adc.w	r3, r3, r9
 8006ae4:	f04f 0000 	mov.w	r0, #0
 8006ae8:	f04f 0100 	mov.w	r1, #0
 8006aec:	0259      	lsls	r1, r3, #9
 8006aee:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006af2:	0250      	lsls	r0, r2, #9
 8006af4:	4602      	mov	r2, r0
 8006af6:	460b      	mov	r3, r1
 8006af8:	4610      	mov	r0, r2
 8006afa:	4619      	mov	r1, r3
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	461a      	mov	r2, r3
 8006b00:	f04f 0300 	mov.w	r3, #0
 8006b04:	f7f9 fb60 	bl	80001c8 <__aeabi_uldivmod>
 8006b08:	4602      	mov	r2, r0
 8006b0a:	460b      	mov	r3, r1
 8006b0c:	4613      	mov	r3, r2
 8006b0e:	60fb      	str	r3, [r7, #12]
 8006b10:	e04a      	b.n	8006ba8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b12:	4b31      	ldr	r3, [pc, #196]	; (8006bd8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	099b      	lsrs	r3, r3, #6
 8006b18:	461a      	mov	r2, r3
 8006b1a:	f04f 0300 	mov.w	r3, #0
 8006b1e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006b22:	f04f 0100 	mov.w	r1, #0
 8006b26:	ea02 0400 	and.w	r4, r2, r0
 8006b2a:	ea03 0501 	and.w	r5, r3, r1
 8006b2e:	4620      	mov	r0, r4
 8006b30:	4629      	mov	r1, r5
 8006b32:	f04f 0200 	mov.w	r2, #0
 8006b36:	f04f 0300 	mov.w	r3, #0
 8006b3a:	014b      	lsls	r3, r1, #5
 8006b3c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006b40:	0142      	lsls	r2, r0, #5
 8006b42:	4610      	mov	r0, r2
 8006b44:	4619      	mov	r1, r3
 8006b46:	1b00      	subs	r0, r0, r4
 8006b48:	eb61 0105 	sbc.w	r1, r1, r5
 8006b4c:	f04f 0200 	mov.w	r2, #0
 8006b50:	f04f 0300 	mov.w	r3, #0
 8006b54:	018b      	lsls	r3, r1, #6
 8006b56:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006b5a:	0182      	lsls	r2, r0, #6
 8006b5c:	1a12      	subs	r2, r2, r0
 8006b5e:	eb63 0301 	sbc.w	r3, r3, r1
 8006b62:	f04f 0000 	mov.w	r0, #0
 8006b66:	f04f 0100 	mov.w	r1, #0
 8006b6a:	00d9      	lsls	r1, r3, #3
 8006b6c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006b70:	00d0      	lsls	r0, r2, #3
 8006b72:	4602      	mov	r2, r0
 8006b74:	460b      	mov	r3, r1
 8006b76:	1912      	adds	r2, r2, r4
 8006b78:	eb45 0303 	adc.w	r3, r5, r3
 8006b7c:	f04f 0000 	mov.w	r0, #0
 8006b80:	f04f 0100 	mov.w	r1, #0
 8006b84:	0299      	lsls	r1, r3, #10
 8006b86:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006b8a:	0290      	lsls	r0, r2, #10
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	460b      	mov	r3, r1
 8006b90:	4610      	mov	r0, r2
 8006b92:	4619      	mov	r1, r3
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	461a      	mov	r2, r3
 8006b98:	f04f 0300 	mov.w	r3, #0
 8006b9c:	f7f9 fb14 	bl	80001c8 <__aeabi_uldivmod>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	460b      	mov	r3, r1
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006ba8:	4b0b      	ldr	r3, [pc, #44]	; (8006bd8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	0c1b      	lsrs	r3, r3, #16
 8006bae:	f003 0303 	and.w	r3, r3, #3
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	005b      	lsls	r3, r3, #1
 8006bb6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bc0:	60bb      	str	r3, [r7, #8]
      break;
 8006bc2:	e002      	b.n	8006bca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006bc4:	4b05      	ldr	r3, [pc, #20]	; (8006bdc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006bc6:	60bb      	str	r3, [r7, #8]
      break;
 8006bc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006bca:	68bb      	ldr	r3, [r7, #8]
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3710      	adds	r7, #16
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006bd6:	bf00      	nop
 8006bd8:	40023800 	.word	0x40023800
 8006bdc:	00f42400 	.word	0x00f42400
 8006be0:	007a1200 	.word	0x007a1200

08006be4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006be4:	b480      	push	{r7}
 8006be6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006be8:	4b03      	ldr	r3, [pc, #12]	; (8006bf8 <HAL_RCC_GetHCLKFreq+0x14>)
 8006bea:	681b      	ldr	r3, [r3, #0]
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr
 8006bf6:	bf00      	nop
 8006bf8:	20000000 	.word	0x20000000

08006bfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006c00:	f7ff fff0 	bl	8006be4 <HAL_RCC_GetHCLKFreq>
 8006c04:	4602      	mov	r2, r0
 8006c06:	4b05      	ldr	r3, [pc, #20]	; (8006c1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	0a9b      	lsrs	r3, r3, #10
 8006c0c:	f003 0307 	and.w	r3, r3, #7
 8006c10:	4903      	ldr	r1, [pc, #12]	; (8006c20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c12:	5ccb      	ldrb	r3, [r1, r3]
 8006c14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	40023800 	.word	0x40023800
 8006c20:	0800bab4 	.word	0x0800bab4

08006c24 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b086      	sub	sp, #24
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006c30:	2300      	movs	r3, #0
 8006c32:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f003 0301 	and.w	r3, r3, #1
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d105      	bne.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d035      	beq.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006c4c:	4b62      	ldr	r3, [pc, #392]	; (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006c4e:	2200      	movs	r2, #0
 8006c50:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006c52:	f7fb fa59 	bl	8002108 <HAL_GetTick>
 8006c56:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006c58:	e008      	b.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006c5a:	f7fb fa55 	bl	8002108 <HAL_GetTick>
 8006c5e:	4602      	mov	r2, r0
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	1ad3      	subs	r3, r2, r3
 8006c64:	2b02      	cmp	r3, #2
 8006c66:	d901      	bls.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c68:	2303      	movs	r3, #3
 8006c6a:	e0b0      	b.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006c6c:	4b5b      	ldr	r3, [pc, #364]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d1f0      	bne.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	019a      	lsls	r2, r3, #6
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	071b      	lsls	r3, r3, #28
 8006c84:	4955      	ldr	r1, [pc, #340]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c86:	4313      	orrs	r3, r2
 8006c88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006c8c:	4b52      	ldr	r3, [pc, #328]	; (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006c8e:	2201      	movs	r2, #1
 8006c90:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006c92:	f7fb fa39 	bl	8002108 <HAL_GetTick>
 8006c96:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006c98:	e008      	b.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006c9a:	f7fb fa35 	bl	8002108 <HAL_GetTick>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	1ad3      	subs	r3, r2, r3
 8006ca4:	2b02      	cmp	r3, #2
 8006ca6:	d901      	bls.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ca8:	2303      	movs	r3, #3
 8006caa:	e090      	b.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006cac:	4b4b      	ldr	r3, [pc, #300]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d0f0      	beq.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f003 0302 	and.w	r3, r3, #2
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	f000 8083 	beq.w	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	60fb      	str	r3, [r7, #12]
 8006cca:	4b44      	ldr	r3, [pc, #272]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cce:	4a43      	ldr	r2, [pc, #268]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8006cd6:	4b41      	ldr	r3, [pc, #260]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cde:	60fb      	str	r3, [r7, #12]
 8006ce0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006ce2:	4b3f      	ldr	r3, [pc, #252]	; (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a3e      	ldr	r2, [pc, #248]	; (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006ce8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cec:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006cee:	f7fb fa0b 	bl	8002108 <HAL_GetTick>
 8006cf2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006cf4:	e008      	b.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006cf6:	f7fb fa07 	bl	8002108 <HAL_GetTick>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	1ad3      	subs	r3, r2, r3
 8006d00:	2b02      	cmp	r3, #2
 8006d02:	d901      	bls.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006d04:	2303      	movs	r3, #3
 8006d06:	e062      	b.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006d08:	4b35      	ldr	r3, [pc, #212]	; (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d0f0      	beq.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006d14:	4b31      	ldr	r3, [pc, #196]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d1c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d02f      	beq.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d2c:	693a      	ldr	r2, [r7, #16]
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d028      	beq.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006d32:	4b2a      	ldr	r3, [pc, #168]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d3a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006d3c:	4b29      	ldr	r3, [pc, #164]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006d3e:	2201      	movs	r2, #1
 8006d40:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006d42:	4b28      	ldr	r3, [pc, #160]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006d44:	2200      	movs	r2, #0
 8006d46:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006d48:	4a24      	ldr	r2, [pc, #144]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006d4e:	4b23      	ldr	r3, [pc, #140]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d52:	f003 0301 	and.w	r3, r3, #1
 8006d56:	2b01      	cmp	r3, #1
 8006d58:	d114      	bne.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006d5a:	f7fb f9d5 	bl	8002108 <HAL_GetTick>
 8006d5e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d60:	e00a      	b.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d62:	f7fb f9d1 	bl	8002108 <HAL_GetTick>
 8006d66:	4602      	mov	r2, r0
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	1ad3      	subs	r3, r2, r3
 8006d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d901      	bls.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006d74:	2303      	movs	r3, #3
 8006d76:	e02a      	b.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d78:	4b18      	ldr	r3, [pc, #96]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d7c:	f003 0302 	and.w	r3, r3, #2
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d0ee      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d90:	d10d      	bne.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006d92:	4b12      	ldr	r3, [pc, #72]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	68db      	ldr	r3, [r3, #12]
 8006d9e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006da2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006da6:	490d      	ldr	r1, [pc, #52]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006da8:	4313      	orrs	r3, r2
 8006daa:	608b      	str	r3, [r1, #8]
 8006dac:	e005      	b.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006dae:	4b0b      	ldr	r3, [pc, #44]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	4a0a      	ldr	r2, [pc, #40]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006db4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006db8:	6093      	str	r3, [r2, #8]
 8006dba:	4b08      	ldr	r3, [pc, #32]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006dbc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006dc6:	4905      	ldr	r1, [pc, #20]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006dcc:	2300      	movs	r3, #0
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3718      	adds	r7, #24
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	42470068 	.word	0x42470068
 8006ddc:	40023800 	.word	0x40023800
 8006de0:	40007000 	.word	0x40007000
 8006de4:	42470e40 	.word	0x42470e40

08006de8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b087      	sub	sp, #28
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006df0:	2300      	movs	r3, #0
 8006df2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006df4:	2300      	movs	r3, #0
 8006df6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d13e      	bne.n	8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006e06:	4b23      	ldr	r3, [pc, #140]	; (8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e0e:	60fb      	str	r3, [r7, #12]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d005      	beq.n	8006e22 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d12f      	bne.n	8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006e1c:	4b1e      	ldr	r3, [pc, #120]	; (8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006e1e:	617b      	str	r3, [r7, #20]
          break;
 8006e20:	e02f      	b.n	8006e82 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006e22:	4b1c      	ldr	r3, [pc, #112]	; (8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e2e:	d108      	bne.n	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006e30:	4b18      	ldr	r3, [pc, #96]	; (8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e38:	4a18      	ldr	r2, [pc, #96]	; (8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e3e:	613b      	str	r3, [r7, #16]
 8006e40:	e007      	b.n	8006e52 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006e42:	4b14      	ldr	r3, [pc, #80]	; (8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e4a:	4a15      	ldr	r2, [pc, #84]	; (8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e50:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006e52:	4b10      	ldr	r3, [pc, #64]	; (8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006e54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e58:	099b      	lsrs	r3, r3, #6
 8006e5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	fb02 f303 	mul.w	r3, r2, r3
 8006e64:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006e66:	4b0b      	ldr	r3, [pc, #44]	; (8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006e68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e6c:	0f1b      	lsrs	r3, r3, #28
 8006e6e:	f003 0307 	and.w	r3, r3, #7
 8006e72:	68ba      	ldr	r2, [r7, #8]
 8006e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e78:	617b      	str	r3, [r7, #20]
          break;
 8006e7a:	e002      	b.n	8006e82 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	617b      	str	r3, [r7, #20]
          break;
 8006e80:	bf00      	nop
        }
      }
      break;
 8006e82:	bf00      	nop
    }
  }
  return frequency;
 8006e84:	697b      	ldr	r3, [r7, #20]
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	371c      	adds	r7, #28
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr
 8006e92:	bf00      	nop
 8006e94:	40023800 	.word	0x40023800
 8006e98:	00bb8000 	.word	0x00bb8000
 8006e9c:	007a1200 	.word	0x007a1200
 8006ea0:	00f42400 	.word	0x00f42400

08006ea4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ea4:	b084      	sub	sp, #16
 8006ea6:	b580      	push	{r7, lr}
 8006ea8:	b084      	sub	sp, #16
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	6078      	str	r0, [r7, #4]
 8006eae:	f107 001c 	add.w	r0, r7, #28
 8006eb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d122      	bne.n	8006f02 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	68db      	ldr	r3, [r3, #12]
 8006ecc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006ed0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006ee4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d105      	bne.n	8006ef6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 f9a0 	bl	800723c <USB_CoreReset>
 8006efc:	4603      	mov	r3, r0
 8006efe:	73fb      	strb	r3, [r7, #15]
 8006f00:	e01a      	b.n	8006f38 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	68db      	ldr	r3, [r3, #12]
 8006f06:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 f994 	bl	800723c <USB_CoreReset>
 8006f14:	4603      	mov	r3, r0
 8006f16:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006f18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d106      	bne.n	8006f2c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f22:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	639a      	str	r2, [r3, #56]	; 0x38
 8006f2a:	e005      	b.n	8006f38 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f30:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d10b      	bne.n	8006f56 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	f043 0206 	orr.w	r2, r3, #6
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	f043 0220 	orr.w	r2, r3, #32
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3710      	adds	r7, #16
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f62:	b004      	add	sp, #16
 8006f64:	4770      	bx	lr

08006f66 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f66:	b480      	push	{r7}
 8006f68:	b083      	sub	sp, #12
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	f043 0201 	orr.w	r2, r3, #1
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	370c      	adds	r7, #12
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr

08006f88 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b083      	sub	sp, #12
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	f023 0201 	bic.w	r2, r3, #1
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006f9c:	2300      	movs	r3, #0
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	370c      	adds	r7, #12
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr

08006faa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006faa:	b580      	push	{r7, lr}
 8006fac:	b084      	sub	sp, #16
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
 8006fb2:	460b      	mov	r3, r1
 8006fb4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006fc6:	78fb      	ldrb	r3, [r7, #3]
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d115      	bne.n	8006ff8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	68db      	ldr	r3, [r3, #12]
 8006fd0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006fd8:	2001      	movs	r0, #1
 8006fda:	f7fb f8a1 	bl	8002120 <HAL_Delay>
      ms++;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f000 f91a 	bl	800721e <USB_GetMode>
 8006fea:	4603      	mov	r3, r0
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d01e      	beq.n	800702e <USB_SetCurrentMode+0x84>
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2b31      	cmp	r3, #49	; 0x31
 8006ff4:	d9f0      	bls.n	8006fd8 <USB_SetCurrentMode+0x2e>
 8006ff6:	e01a      	b.n	800702e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006ff8:	78fb      	ldrb	r3, [r7, #3]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d115      	bne.n	800702a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800700a:	2001      	movs	r0, #1
 800700c:	f7fb f888 	bl	8002120 <HAL_Delay>
      ms++;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	3301      	adds	r3, #1
 8007014:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 f901 	bl	800721e <USB_GetMode>
 800701c:	4603      	mov	r3, r0
 800701e:	2b00      	cmp	r3, #0
 8007020:	d005      	beq.n	800702e <USB_SetCurrentMode+0x84>
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2b31      	cmp	r3, #49	; 0x31
 8007026:	d9f0      	bls.n	800700a <USB_SetCurrentMode+0x60>
 8007028:	e001      	b.n	800702e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	e005      	b.n	800703a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2b32      	cmp	r3, #50	; 0x32
 8007032:	d101      	bne.n	8007038 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007034:	2301      	movs	r3, #1
 8007036:	e000      	b.n	800703a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007038:	2300      	movs	r3, #0
}
 800703a:	4618      	mov	r0, r3
 800703c:	3710      	adds	r7, #16
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
	...

08007044 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007044:	b480      	push	{r7}
 8007046:	b085      	sub	sp, #20
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800704e:	2300      	movs	r3, #0
 8007050:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	019b      	lsls	r3, r3, #6
 8007056:	f043 0220 	orr.w	r2, r3, #32
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	3301      	adds	r3, #1
 8007062:	60fb      	str	r3, [r7, #12]
 8007064:	4a08      	ldr	r2, [pc, #32]	; (8007088 <USB_FlushTxFifo+0x44>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d901      	bls.n	800706e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800706a:	2303      	movs	r3, #3
 800706c:	e006      	b.n	800707c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	691b      	ldr	r3, [r3, #16]
 8007072:	f003 0320 	and.w	r3, r3, #32
 8007076:	2b20      	cmp	r3, #32
 8007078:	d0f1      	beq.n	800705e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800707a:	2300      	movs	r3, #0
}
 800707c:	4618      	mov	r0, r3
 800707e:	3714      	adds	r7, #20
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr
 8007088:	00030d40 	.word	0x00030d40

0800708c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800708c:	b480      	push	{r7}
 800708e:	b085      	sub	sp, #20
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007094:	2300      	movs	r3, #0
 8007096:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2210      	movs	r2, #16
 800709c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	3301      	adds	r3, #1
 80070a2:	60fb      	str	r3, [r7, #12]
 80070a4:	4a08      	ldr	r2, [pc, #32]	; (80070c8 <USB_FlushRxFifo+0x3c>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d901      	bls.n	80070ae <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80070aa:	2303      	movs	r3, #3
 80070ac:	e006      	b.n	80070bc <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	691b      	ldr	r3, [r3, #16]
 80070b2:	f003 0310 	and.w	r3, r3, #16
 80070b6:	2b10      	cmp	r3, #16
 80070b8:	d0f1      	beq.n	800709e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80070ba:	2300      	movs	r3, #0
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3714      	adds	r7, #20
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr
 80070c8:	00030d40 	.word	0x00030d40

080070cc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b089      	sub	sp, #36	; 0x24
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	60f8      	str	r0, [r7, #12]
 80070d4:	60b9      	str	r1, [r7, #8]
 80070d6:	4611      	mov	r1, r2
 80070d8:	461a      	mov	r2, r3
 80070da:	460b      	mov	r3, r1
 80070dc:	71fb      	strb	r3, [r7, #7]
 80070de:	4613      	mov	r3, r2
 80070e0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80070ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d123      	bne.n	800713a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80070f2:	88bb      	ldrh	r3, [r7, #4]
 80070f4:	3303      	adds	r3, #3
 80070f6:	089b      	lsrs	r3, r3, #2
 80070f8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80070fa:	2300      	movs	r3, #0
 80070fc:	61bb      	str	r3, [r7, #24]
 80070fe:	e018      	b.n	8007132 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007100:	79fb      	ldrb	r3, [r7, #7]
 8007102:	031a      	lsls	r2, r3, #12
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	4413      	add	r3, r2
 8007108:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800710c:	461a      	mov	r2, r3
 800710e:	69fb      	ldr	r3, [r7, #28]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007114:	69fb      	ldr	r3, [r7, #28]
 8007116:	3301      	adds	r3, #1
 8007118:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800711a:	69fb      	ldr	r3, [r7, #28]
 800711c:	3301      	adds	r3, #1
 800711e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007120:	69fb      	ldr	r3, [r7, #28]
 8007122:	3301      	adds	r3, #1
 8007124:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007126:	69fb      	ldr	r3, [r7, #28]
 8007128:	3301      	adds	r3, #1
 800712a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800712c:	69bb      	ldr	r3, [r7, #24]
 800712e:	3301      	adds	r3, #1
 8007130:	61bb      	str	r3, [r7, #24]
 8007132:	69ba      	ldr	r2, [r7, #24]
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	429a      	cmp	r2, r3
 8007138:	d3e2      	bcc.n	8007100 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800713a:	2300      	movs	r3, #0
}
 800713c:	4618      	mov	r0, r3
 800713e:	3724      	adds	r7, #36	; 0x24
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr

08007148 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007148:	b480      	push	{r7}
 800714a:	b08b      	sub	sp, #44	; 0x2c
 800714c:	af00      	add	r7, sp, #0
 800714e:	60f8      	str	r0, [r7, #12]
 8007150:	60b9      	str	r1, [r7, #8]
 8007152:	4613      	mov	r3, r2
 8007154:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800715e:	88fb      	ldrh	r3, [r7, #6]
 8007160:	089b      	lsrs	r3, r3, #2
 8007162:	b29b      	uxth	r3, r3
 8007164:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007166:	88fb      	ldrh	r3, [r7, #6]
 8007168:	f003 0303 	and.w	r3, r3, #3
 800716c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800716e:	2300      	movs	r3, #0
 8007170:	623b      	str	r3, [r7, #32]
 8007172:	e014      	b.n	800719e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007174:	69bb      	ldr	r3, [r7, #24]
 8007176:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717e:	601a      	str	r2, [r3, #0]
    pDest++;
 8007180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007182:	3301      	adds	r3, #1
 8007184:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007188:	3301      	adds	r3, #1
 800718a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800718c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718e:	3301      	adds	r3, #1
 8007190:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007194:	3301      	adds	r3, #1
 8007196:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007198:	6a3b      	ldr	r3, [r7, #32]
 800719a:	3301      	adds	r3, #1
 800719c:	623b      	str	r3, [r7, #32]
 800719e:	6a3a      	ldr	r2, [r7, #32]
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d3e6      	bcc.n	8007174 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80071a6:	8bfb      	ldrh	r3, [r7, #30]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d01e      	beq.n	80071ea <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80071ac:	2300      	movs	r3, #0
 80071ae:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80071b0:	69bb      	ldr	r3, [r7, #24]
 80071b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071b6:	461a      	mov	r2, r3
 80071b8:	f107 0310 	add.w	r3, r7, #16
 80071bc:	6812      	ldr	r2, [r2, #0]
 80071be:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80071c0:	693a      	ldr	r2, [r7, #16]
 80071c2:	6a3b      	ldr	r3, [r7, #32]
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	00db      	lsls	r3, r3, #3
 80071c8:	fa22 f303 	lsr.w	r3, r2, r3
 80071cc:	b2da      	uxtb	r2, r3
 80071ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d0:	701a      	strb	r2, [r3, #0]
      i++;
 80071d2:	6a3b      	ldr	r3, [r7, #32]
 80071d4:	3301      	adds	r3, #1
 80071d6:	623b      	str	r3, [r7, #32]
      pDest++;
 80071d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071da:	3301      	adds	r3, #1
 80071dc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80071de:	8bfb      	ldrh	r3, [r7, #30]
 80071e0:	3b01      	subs	r3, #1
 80071e2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80071e4:	8bfb      	ldrh	r3, [r7, #30]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d1ea      	bne.n	80071c0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80071ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	372c      	adds	r7, #44	; 0x2c
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr

080071f8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b085      	sub	sp, #20
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	695b      	ldr	r3, [r3, #20]
 8007204:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	699b      	ldr	r3, [r3, #24]
 800720a:	68fa      	ldr	r2, [r7, #12]
 800720c:	4013      	ands	r3, r2
 800720e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007210:	68fb      	ldr	r3, [r7, #12]
}
 8007212:	4618      	mov	r0, r3
 8007214:	3714      	adds	r7, #20
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr

0800721e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800721e:	b480      	push	{r7}
 8007220:	b083      	sub	sp, #12
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	695b      	ldr	r3, [r3, #20]
 800722a:	f003 0301 	and.w	r3, r3, #1
}
 800722e:	4618      	mov	r0, r3
 8007230:	370c      	adds	r7, #12
 8007232:	46bd      	mov	sp, r7
 8007234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007238:	4770      	bx	lr
	...

0800723c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800723c:	b480      	push	{r7}
 800723e:	b085      	sub	sp, #20
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007244:	2300      	movs	r3, #0
 8007246:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	3301      	adds	r3, #1
 800724c:	60fb      	str	r3, [r7, #12]
 800724e:	4a13      	ldr	r2, [pc, #76]	; (800729c <USB_CoreReset+0x60>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d901      	bls.n	8007258 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007254:	2303      	movs	r3, #3
 8007256:	e01a      	b.n	800728e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	691b      	ldr	r3, [r3, #16]
 800725c:	2b00      	cmp	r3, #0
 800725e:	daf3      	bge.n	8007248 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007260:	2300      	movs	r3, #0
 8007262:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	691b      	ldr	r3, [r3, #16]
 8007268:	f043 0201 	orr.w	r2, r3, #1
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	3301      	adds	r3, #1
 8007274:	60fb      	str	r3, [r7, #12]
 8007276:	4a09      	ldr	r2, [pc, #36]	; (800729c <USB_CoreReset+0x60>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d901      	bls.n	8007280 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800727c:	2303      	movs	r3, #3
 800727e:	e006      	b.n	800728e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	691b      	ldr	r3, [r3, #16]
 8007284:	f003 0301 	and.w	r3, r3, #1
 8007288:	2b01      	cmp	r3, #1
 800728a:	d0f1      	beq.n	8007270 <USB_CoreReset+0x34>

  return HAL_OK;
 800728c:	2300      	movs	r3, #0
}
 800728e:	4618      	mov	r0, r3
 8007290:	3714      	adds	r7, #20
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr
 800729a:	bf00      	nop
 800729c:	00030d40 	.word	0x00030d40

080072a0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80072a0:	b084      	sub	sp, #16
 80072a2:	b580      	push	{r7, lr}
 80072a4:	b084      	sub	sp, #16
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	6078      	str	r0, [r7, #4]
 80072aa:	f107 001c 	add.w	r0, r7, #28
 80072ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80072bc:	461a      	mov	r2, r3
 80072be:	2300      	movs	r3, #0
 80072c0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072de:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d018      	beq.n	8007324 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80072f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d10a      	bne.n	800730e <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	68ba      	ldr	r2, [r7, #8]
 8007302:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007306:	f043 0304 	orr.w	r3, r3, #4
 800730a:	6013      	str	r3, [r2, #0]
 800730c:	e014      	b.n	8007338 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	68ba      	ldr	r2, [r7, #8]
 8007318:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800731c:	f023 0304 	bic.w	r3, r3, #4
 8007320:	6013      	str	r3, [r2, #0]
 8007322:	e009      	b.n	8007338 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	68ba      	ldr	r2, [r7, #8]
 800732e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007332:	f023 0304 	bic.w	r3, r3, #4
 8007336:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8007338:	2110      	movs	r1, #16
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f7ff fe82 	bl	8007044 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f7ff fea3 	bl	800708c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007346:	2300      	movs	r3, #0
 8007348:	60fb      	str	r3, [r7, #12]
 800734a:	e015      	b.n	8007378 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	015a      	lsls	r2, r3, #5
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	4413      	add	r3, r2
 8007354:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007358:	461a      	mov	r2, r3
 800735a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800735e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	015a      	lsls	r2, r3, #5
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	4413      	add	r3, r2
 8007368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800736c:	461a      	mov	r2, r3
 800736e:	2300      	movs	r3, #0
 8007370:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	3301      	adds	r3, #1
 8007376:	60fb      	str	r3, [r7, #12]
 8007378:	6a3b      	ldr	r3, [r7, #32]
 800737a:	68fa      	ldr	r2, [r7, #12]
 800737c:	429a      	cmp	r2, r3
 800737e:	d3e5      	bcc.n	800734c <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800738c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007396:	2b00      	cmp	r3, #0
 8007398:	d00b      	beq.n	80073b2 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80073a0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	4a13      	ldr	r2, [pc, #76]	; (80073f4 <USB_HostInit+0x154>)
 80073a6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	4a13      	ldr	r2, [pc, #76]	; (80073f8 <USB_HostInit+0x158>)
 80073ac:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80073b0:	e009      	b.n	80073c6 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2280      	movs	r2, #128	; 0x80
 80073b6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	4a10      	ldr	r2, [pc, #64]	; (80073fc <USB_HostInit+0x15c>)
 80073bc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	4a0f      	ldr	r2, [pc, #60]	; (8007400 <USB_HostInit+0x160>)
 80073c2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80073c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d105      	bne.n	80073d8 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	699b      	ldr	r3, [r3, #24]
 80073d0:	f043 0210 	orr.w	r2, r3, #16
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	699a      	ldr	r2, [r3, #24]
 80073dc:	4b09      	ldr	r3, [pc, #36]	; (8007404 <USB_HostInit+0x164>)
 80073de:	4313      	orrs	r3, r2
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80073e4:	2300      	movs	r3, #0
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3710      	adds	r7, #16
 80073ea:	46bd      	mov	sp, r7
 80073ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80073f0:	b004      	add	sp, #16
 80073f2:	4770      	bx	lr
 80073f4:	01000200 	.word	0x01000200
 80073f8:	00e00300 	.word	0x00e00300
 80073fc:	00600080 	.word	0x00600080
 8007400:	004000e0 	.word	0x004000e0
 8007404:	a3200008 	.word	0xa3200008

08007408 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007408:	b480      	push	{r7}
 800740a:	b085      	sub	sp, #20
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	460b      	mov	r3, r1
 8007412:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	68fa      	ldr	r2, [r7, #12]
 8007422:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007426:	f023 0303 	bic.w	r3, r3, #3
 800742a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	78fb      	ldrb	r3, [r7, #3]
 8007436:	f003 0303 	and.w	r3, r3, #3
 800743a:	68f9      	ldr	r1, [r7, #12]
 800743c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007440:	4313      	orrs	r3, r2
 8007442:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007444:	78fb      	ldrb	r3, [r7, #3]
 8007446:	2b01      	cmp	r3, #1
 8007448:	d107      	bne.n	800745a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007450:	461a      	mov	r2, r3
 8007452:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007456:	6053      	str	r3, [r2, #4]
 8007458:	e009      	b.n	800746e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800745a:	78fb      	ldrb	r3, [r7, #3]
 800745c:	2b02      	cmp	r3, #2
 800745e:	d106      	bne.n	800746e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007466:	461a      	mov	r2, r3
 8007468:	f241 7370 	movw	r3, #6000	; 0x1770
 800746c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800746e:	2300      	movs	r3, #0
}
 8007470:	4618      	mov	r0, r3
 8007472:	3714      	adds	r7, #20
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr

0800747c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b084      	sub	sp, #16
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007488:	2300      	movs	r3, #0
 800748a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800749c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	68fa      	ldr	r2, [r7, #12]
 80074a2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80074a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074aa:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80074ac:	2064      	movs	r0, #100	; 0x64
 80074ae:	f7fa fe37 	bl	8002120 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	68fa      	ldr	r2, [r7, #12]
 80074b6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80074ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074be:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80074c0:	200a      	movs	r0, #10
 80074c2:	f7fa fe2d 	bl	8002120 <HAL_Delay>

  return HAL_OK;
 80074c6:	2300      	movs	r3, #0
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3710      	adds	r7, #16
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b085      	sub	sp, #20
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	460b      	mov	r3, r1
 80074da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80074e0:	2300      	movs	r3, #0
 80074e2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80074f4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d109      	bne.n	8007514 <USB_DriveVbus+0x44>
 8007500:	78fb      	ldrb	r3, [r7, #3]
 8007502:	2b01      	cmp	r3, #1
 8007504:	d106      	bne.n	8007514 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	68fa      	ldr	r2, [r7, #12]
 800750a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800750e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007512:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800751a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800751e:	d109      	bne.n	8007534 <USB_DriveVbus+0x64>
 8007520:	78fb      	ldrb	r3, [r7, #3]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d106      	bne.n	8007534 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	68fa      	ldr	r2, [r7, #12]
 800752a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800752e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007532:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007534:	2300      	movs	r3, #0
}
 8007536:	4618      	mov	r0, r3
 8007538:	3714      	adds	r7, #20
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr

08007542 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007542:	b480      	push	{r7}
 8007544:	b085      	sub	sp, #20
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800754e:	2300      	movs	r3, #0
 8007550:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	0c5b      	lsrs	r3, r3, #17
 8007560:	f003 0303 	and.w	r3, r3, #3
}
 8007564:	4618      	mov	r0, r3
 8007566:	3714      	adds	r7, #20
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr

08007570 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007570:	b480      	push	{r7}
 8007572:	b085      	sub	sp, #20
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	b29b      	uxth	r3, r3
}
 8007586:	4618      	mov	r0, r3
 8007588:	3714      	adds	r7, #20
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr
	...

08007594 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b088      	sub	sp, #32
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	4608      	mov	r0, r1
 800759e:	4611      	mov	r1, r2
 80075a0:	461a      	mov	r2, r3
 80075a2:	4603      	mov	r3, r0
 80075a4:	70fb      	strb	r3, [r7, #3]
 80075a6:	460b      	mov	r3, r1
 80075a8:	70bb      	strb	r3, [r7, #2]
 80075aa:	4613      	mov	r3, r2
 80075ac:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80075ae:	2300      	movs	r3, #0
 80075b0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80075b6:	78fb      	ldrb	r3, [r7, #3]
 80075b8:	015a      	lsls	r2, r3, #5
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	4413      	add	r3, r2
 80075be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075c2:	461a      	mov	r2, r3
 80075c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075c8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80075ca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80075ce:	2b03      	cmp	r3, #3
 80075d0:	d87e      	bhi.n	80076d0 <USB_HC_Init+0x13c>
 80075d2:	a201      	add	r2, pc, #4	; (adr r2, 80075d8 <USB_HC_Init+0x44>)
 80075d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075d8:	080075e9 	.word	0x080075e9
 80075dc:	08007693 	.word	0x08007693
 80075e0:	080075e9 	.word	0x080075e9
 80075e4:	08007655 	.word	0x08007655
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80075e8:	78fb      	ldrb	r3, [r7, #3]
 80075ea:	015a      	lsls	r2, r3, #5
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	4413      	add	r3, r2
 80075f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075f4:	461a      	mov	r2, r3
 80075f6:	f240 439d 	movw	r3, #1181	; 0x49d
 80075fa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80075fc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007600:	2b00      	cmp	r3, #0
 8007602:	da10      	bge.n	8007626 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007604:	78fb      	ldrb	r3, [r7, #3]
 8007606:	015a      	lsls	r2, r3, #5
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	4413      	add	r3, r2
 800760c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007610:	68db      	ldr	r3, [r3, #12]
 8007612:	78fa      	ldrb	r2, [r7, #3]
 8007614:	0151      	lsls	r1, r2, #5
 8007616:	693a      	ldr	r2, [r7, #16]
 8007618:	440a      	add	r2, r1
 800761a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800761e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007622:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8007624:	e057      	b.n	80076d6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800762a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800762e:	2b00      	cmp	r3, #0
 8007630:	d051      	beq.n	80076d6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007632:	78fb      	ldrb	r3, [r7, #3]
 8007634:	015a      	lsls	r2, r3, #5
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	4413      	add	r3, r2
 800763a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800763e:	68db      	ldr	r3, [r3, #12]
 8007640:	78fa      	ldrb	r2, [r7, #3]
 8007642:	0151      	lsls	r1, r2, #5
 8007644:	693a      	ldr	r2, [r7, #16]
 8007646:	440a      	add	r2, r1
 8007648:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800764c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007650:	60d3      	str	r3, [r2, #12]
      break;
 8007652:	e040      	b.n	80076d6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007654:	78fb      	ldrb	r3, [r7, #3]
 8007656:	015a      	lsls	r2, r3, #5
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	4413      	add	r3, r2
 800765c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007660:	461a      	mov	r2, r3
 8007662:	f240 639d 	movw	r3, #1693	; 0x69d
 8007666:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007668:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800766c:	2b00      	cmp	r3, #0
 800766e:	da34      	bge.n	80076da <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007670:	78fb      	ldrb	r3, [r7, #3]
 8007672:	015a      	lsls	r2, r3, #5
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	4413      	add	r3, r2
 8007678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800767c:	68db      	ldr	r3, [r3, #12]
 800767e:	78fa      	ldrb	r2, [r7, #3]
 8007680:	0151      	lsls	r1, r2, #5
 8007682:	693a      	ldr	r2, [r7, #16]
 8007684:	440a      	add	r2, r1
 8007686:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800768a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800768e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007690:	e023      	b.n	80076da <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007692:	78fb      	ldrb	r3, [r7, #3]
 8007694:	015a      	lsls	r2, r3, #5
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	4413      	add	r3, r2
 800769a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800769e:	461a      	mov	r2, r3
 80076a0:	f240 2325 	movw	r3, #549	; 0x225
 80076a4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80076a6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	da17      	bge.n	80076de <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80076ae:	78fb      	ldrb	r3, [r7, #3]
 80076b0:	015a      	lsls	r2, r3, #5
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	4413      	add	r3, r2
 80076b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076ba:	68db      	ldr	r3, [r3, #12]
 80076bc:	78fa      	ldrb	r2, [r7, #3]
 80076be:	0151      	lsls	r1, r2, #5
 80076c0:	693a      	ldr	r2, [r7, #16]
 80076c2:	440a      	add	r2, r1
 80076c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80076c8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80076cc:	60d3      	str	r3, [r2, #12]
      }
      break;
 80076ce:	e006      	b.n	80076de <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80076d0:	2301      	movs	r3, #1
 80076d2:	77fb      	strb	r3, [r7, #31]
      break;
 80076d4:	e004      	b.n	80076e0 <USB_HC_Init+0x14c>
      break;
 80076d6:	bf00      	nop
 80076d8:	e002      	b.n	80076e0 <USB_HC_Init+0x14c>
      break;
 80076da:	bf00      	nop
 80076dc:	e000      	b.n	80076e0 <USB_HC_Init+0x14c>
      break;
 80076de:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076e6:	699a      	ldr	r2, [r3, #24]
 80076e8:	78fb      	ldrb	r3, [r7, #3]
 80076ea:	f003 030f 	and.w	r3, r3, #15
 80076ee:	2101      	movs	r1, #1
 80076f0:	fa01 f303 	lsl.w	r3, r1, r3
 80076f4:	6939      	ldr	r1, [r7, #16]
 80076f6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80076fa:	4313      	orrs	r3, r2
 80076fc:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	699b      	ldr	r3, [r3, #24]
 8007702:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800770a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800770e:	2b00      	cmp	r3, #0
 8007710:	da03      	bge.n	800771a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007712:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007716:	61bb      	str	r3, [r7, #24]
 8007718:	e001      	b.n	800771e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800771a:	2300      	movs	r3, #0
 800771c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f7ff ff0f 	bl	8007542 <USB_GetHostSpeed>
 8007724:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007726:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800772a:	2b02      	cmp	r3, #2
 800772c:	d106      	bne.n	800773c <USB_HC_Init+0x1a8>
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2b02      	cmp	r3, #2
 8007732:	d003      	beq.n	800773c <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007734:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007738:	617b      	str	r3, [r7, #20]
 800773a:	e001      	b.n	8007740 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800773c:	2300      	movs	r3, #0
 800773e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007740:	787b      	ldrb	r3, [r7, #1]
 8007742:	059b      	lsls	r3, r3, #22
 8007744:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007748:	78bb      	ldrb	r3, [r7, #2]
 800774a:	02db      	lsls	r3, r3, #11
 800774c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007750:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007752:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007756:	049b      	lsls	r3, r3, #18
 8007758:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800775c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800775e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007760:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007764:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007766:	69bb      	ldr	r3, [r7, #24]
 8007768:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800776a:	78fb      	ldrb	r3, [r7, #3]
 800776c:	0159      	lsls	r1, r3, #5
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	440b      	add	r3, r1
 8007772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007776:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800777c:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800777e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007782:	2b03      	cmp	r3, #3
 8007784:	d10f      	bne.n	80077a6 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8007786:	78fb      	ldrb	r3, [r7, #3]
 8007788:	015a      	lsls	r2, r3, #5
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	4413      	add	r3, r2
 800778e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	78fa      	ldrb	r2, [r7, #3]
 8007796:	0151      	lsls	r1, r2, #5
 8007798:	693a      	ldr	r2, [r7, #16]
 800779a:	440a      	add	r2, r1
 800779c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80077a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80077a4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80077a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3720      	adds	r7, #32
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b08c      	sub	sp, #48	; 0x30
 80077b4:	af02      	add	r7, sp, #8
 80077b6:	60f8      	str	r0, [r7, #12]
 80077b8:	60b9      	str	r1, [r7, #8]
 80077ba:	4613      	mov	r3, r2
 80077bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	785b      	ldrb	r3, [r3, #1]
 80077c6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80077c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80077cc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d02d      	beq.n	8007836 <USB_HC_StartXfer+0x86>
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	791b      	ldrb	r3, [r3, #4]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d129      	bne.n	8007836 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80077e2:	79fb      	ldrb	r3, [r7, #7]
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d117      	bne.n	8007818 <USB_HC_StartXfer+0x68>
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	79db      	ldrb	r3, [r3, #7]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d003      	beq.n	80077f8 <USB_HC_StartXfer+0x48>
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	79db      	ldrb	r3, [r3, #7]
 80077f4:	2b02      	cmp	r3, #2
 80077f6:	d10f      	bne.n	8007818 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80077f8:	69fb      	ldr	r3, [r7, #28]
 80077fa:	015a      	lsls	r2, r3, #5
 80077fc:	6a3b      	ldr	r3, [r7, #32]
 80077fe:	4413      	add	r3, r2
 8007800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007804:	68db      	ldr	r3, [r3, #12]
 8007806:	69fa      	ldr	r2, [r7, #28]
 8007808:	0151      	lsls	r1, r2, #5
 800780a:	6a3a      	ldr	r2, [r7, #32]
 800780c:	440a      	add	r2, r1
 800780e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007816:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007818:	79fb      	ldrb	r3, [r7, #7]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d10b      	bne.n	8007836 <USB_HC_StartXfer+0x86>
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	795b      	ldrb	r3, [r3, #5]
 8007822:	2b01      	cmp	r3, #1
 8007824:	d107      	bne.n	8007836 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	785b      	ldrb	r3, [r3, #1]
 800782a:	4619      	mov	r1, r3
 800782c:	68f8      	ldr	r0, [r7, #12]
 800782e:	f000 fa2f 	bl	8007c90 <USB_DoPing>
      return HAL_OK;
 8007832:	2300      	movs	r3, #0
 8007834:	e0f8      	b.n	8007a28 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	695b      	ldr	r3, [r3, #20]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d018      	beq.n	8007870 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	695b      	ldr	r3, [r3, #20]
 8007842:	68ba      	ldr	r2, [r7, #8]
 8007844:	8912      	ldrh	r2, [r2, #8]
 8007846:	4413      	add	r3, r2
 8007848:	3b01      	subs	r3, #1
 800784a:	68ba      	ldr	r2, [r7, #8]
 800784c:	8912      	ldrh	r2, [r2, #8]
 800784e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007852:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007854:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007856:	8b7b      	ldrh	r3, [r7, #26]
 8007858:	429a      	cmp	r2, r3
 800785a:	d90b      	bls.n	8007874 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800785c:	8b7b      	ldrh	r3, [r7, #26]
 800785e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007860:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007862:	68ba      	ldr	r2, [r7, #8]
 8007864:	8912      	ldrh	r2, [r2, #8]
 8007866:	fb02 f203 	mul.w	r2, r2, r3
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	611a      	str	r2, [r3, #16]
 800786e:	e001      	b.n	8007874 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8007870:	2301      	movs	r3, #1
 8007872:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	78db      	ldrb	r3, [r3, #3]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d007      	beq.n	800788c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800787c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800787e:	68ba      	ldr	r2, [r7, #8]
 8007880:	8912      	ldrh	r2, [r2, #8]
 8007882:	fb02 f203 	mul.w	r2, r2, r3
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	611a      	str	r2, [r3, #16]
 800788a:	e003      	b.n	8007894 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	695a      	ldr	r2, [r3, #20]
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	691b      	ldr	r3, [r3, #16]
 8007898:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800789c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800789e:	04d9      	lsls	r1, r3, #19
 80078a0:	4b63      	ldr	r3, [pc, #396]	; (8007a30 <USB_HC_StartXfer+0x280>)
 80078a2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80078a4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	7a9b      	ldrb	r3, [r3, #10]
 80078aa:	075b      	lsls	r3, r3, #29
 80078ac:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80078b0:	69f9      	ldr	r1, [r7, #28]
 80078b2:	0148      	lsls	r0, r1, #5
 80078b4:	6a39      	ldr	r1, [r7, #32]
 80078b6:	4401      	add	r1, r0
 80078b8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80078bc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80078be:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80078c0:	79fb      	ldrb	r3, [r7, #7]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d009      	beq.n	80078da <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	68d9      	ldr	r1, [r3, #12]
 80078ca:	69fb      	ldr	r3, [r7, #28]
 80078cc:	015a      	lsls	r2, r3, #5
 80078ce:	6a3b      	ldr	r3, [r7, #32]
 80078d0:	4413      	add	r3, r2
 80078d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078d6:	460a      	mov	r2, r1
 80078d8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80078da:	6a3b      	ldr	r3, [r7, #32]
 80078dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80078e0:	689b      	ldr	r3, [r3, #8]
 80078e2:	f003 0301 	and.w	r3, r3, #1
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	bf0c      	ite	eq
 80078ea:	2301      	moveq	r3, #1
 80078ec:	2300      	movne	r3, #0
 80078ee:	b2db      	uxtb	r3, r3
 80078f0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80078f2:	69fb      	ldr	r3, [r7, #28]
 80078f4:	015a      	lsls	r2, r3, #5
 80078f6:	6a3b      	ldr	r3, [r7, #32]
 80078f8:	4413      	add	r3, r2
 80078fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	69fa      	ldr	r2, [r7, #28]
 8007902:	0151      	lsls	r1, r2, #5
 8007904:	6a3a      	ldr	r2, [r7, #32]
 8007906:	440a      	add	r2, r1
 8007908:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800790c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007910:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007912:	69fb      	ldr	r3, [r7, #28]
 8007914:	015a      	lsls	r2, r3, #5
 8007916:	6a3b      	ldr	r3, [r7, #32]
 8007918:	4413      	add	r3, r2
 800791a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	7e7b      	ldrb	r3, [r7, #25]
 8007922:	075b      	lsls	r3, r3, #29
 8007924:	69f9      	ldr	r1, [r7, #28]
 8007926:	0148      	lsls	r0, r1, #5
 8007928:	6a39      	ldr	r1, [r7, #32]
 800792a:	4401      	add	r1, r0
 800792c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007930:	4313      	orrs	r3, r2
 8007932:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007934:	69fb      	ldr	r3, [r7, #28]
 8007936:	015a      	lsls	r2, r3, #5
 8007938:	6a3b      	ldr	r3, [r7, #32]
 800793a:	4413      	add	r3, r2
 800793c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800794a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	78db      	ldrb	r3, [r3, #3]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d004      	beq.n	800795e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800795a:	613b      	str	r3, [r7, #16]
 800795c:	e003      	b.n	8007966 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007964:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800796c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800796e:	69fb      	ldr	r3, [r7, #28]
 8007970:	015a      	lsls	r2, r3, #5
 8007972:	6a3b      	ldr	r3, [r7, #32]
 8007974:	4413      	add	r3, r2
 8007976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800797a:	461a      	mov	r2, r3
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007980:	79fb      	ldrb	r3, [r7, #7]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d001      	beq.n	800798a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8007986:	2300      	movs	r3, #0
 8007988:	e04e      	b.n	8007a28 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	78db      	ldrb	r3, [r3, #3]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d149      	bne.n	8007a26 <USB_HC_StartXfer+0x276>
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	695b      	ldr	r3, [r3, #20]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d045      	beq.n	8007a26 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	79db      	ldrb	r3, [r3, #7]
 800799e:	2b03      	cmp	r3, #3
 80079a0:	d830      	bhi.n	8007a04 <USB_HC_StartXfer+0x254>
 80079a2:	a201      	add	r2, pc, #4	; (adr r2, 80079a8 <USB_HC_StartXfer+0x1f8>)
 80079a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079a8:	080079b9 	.word	0x080079b9
 80079ac:	080079dd 	.word	0x080079dd
 80079b0:	080079b9 	.word	0x080079b9
 80079b4:	080079dd 	.word	0x080079dd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	695b      	ldr	r3, [r3, #20]
 80079bc:	3303      	adds	r3, #3
 80079be:	089b      	lsrs	r3, r3, #2
 80079c0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80079c2:	8afa      	ldrh	r2, [r7, #22]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d91c      	bls.n	8007a08 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	699b      	ldr	r3, [r3, #24]
 80079d2:	f043 0220 	orr.w	r2, r3, #32
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	619a      	str	r2, [r3, #24]
        }
        break;
 80079da:	e015      	b.n	8007a08 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	695b      	ldr	r3, [r3, #20]
 80079e0:	3303      	adds	r3, #3
 80079e2:	089b      	lsrs	r3, r3, #2
 80079e4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80079e6:	8afa      	ldrh	r2, [r7, #22]
 80079e8:	6a3b      	ldr	r3, [r7, #32]
 80079ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80079ee:	691b      	ldr	r3, [r3, #16]
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	429a      	cmp	r2, r3
 80079f4:	d90a      	bls.n	8007a0c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	699b      	ldr	r3, [r3, #24]
 80079fa:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	619a      	str	r2, [r3, #24]
        }
        break;
 8007a02:	e003      	b.n	8007a0c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007a04:	bf00      	nop
 8007a06:	e002      	b.n	8007a0e <USB_HC_StartXfer+0x25e>
        break;
 8007a08:	bf00      	nop
 8007a0a:	e000      	b.n	8007a0e <USB_HC_StartXfer+0x25e>
        break;
 8007a0c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	68d9      	ldr	r1, [r3, #12]
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	785a      	ldrb	r2, [r3, #1]
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	695b      	ldr	r3, [r3, #20]
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	2000      	movs	r0, #0
 8007a1e:	9000      	str	r0, [sp, #0]
 8007a20:	68f8      	ldr	r0, [r7, #12]
 8007a22:	f7ff fb53 	bl	80070cc <USB_WritePacket>
  }

  return HAL_OK;
 8007a26:	2300      	movs	r3, #0
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3728      	adds	r7, #40	; 0x28
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}
 8007a30:	1ff80000 	.word	0x1ff80000

08007a34 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b085      	sub	sp, #20
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a46:	695b      	ldr	r3, [r3, #20]
 8007a48:	b29b      	uxth	r3, r3
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3714      	adds	r7, #20
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr

08007a56 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007a56:	b480      	push	{r7}
 8007a58:	b089      	sub	sp, #36	; 0x24
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
 8007a5e:	460b      	mov	r3, r1
 8007a60:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8007a66:	78fb      	ldrb	r3, [r7, #3]
 8007a68:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	015a      	lsls	r2, r3, #5
 8007a72:	69bb      	ldr	r3, [r7, #24]
 8007a74:	4413      	add	r3, r2
 8007a76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	0c9b      	lsrs	r3, r3, #18
 8007a7e:	f003 0303 	and.w	r3, r3, #3
 8007a82:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	015a      	lsls	r2, r3, #5
 8007a88:	69bb      	ldr	r3, [r7, #24]
 8007a8a:	4413      	add	r3, r2
 8007a8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	0fdb      	lsrs	r3, r3, #31
 8007a94:	f003 0301 	and.w	r3, r3, #1
 8007a98:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	689b      	ldr	r3, [r3, #8]
 8007a9e:	f003 0320 	and.w	r3, r3, #32
 8007aa2:	2b20      	cmp	r3, #32
 8007aa4:	d104      	bne.n	8007ab0 <USB_HC_Halt+0x5a>
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d101      	bne.n	8007ab0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007aac:	2300      	movs	r3, #0
 8007aae:	e0e8      	b.n	8007c82 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d002      	beq.n	8007abc <USB_HC_Halt+0x66>
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	2b02      	cmp	r3, #2
 8007aba:	d173      	bne.n	8007ba4 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	015a      	lsls	r2, r3, #5
 8007ac0:	69bb      	ldr	r3, [r7, #24]
 8007ac2:	4413      	add	r3, r2
 8007ac4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	697a      	ldr	r2, [r7, #20]
 8007acc:	0151      	lsls	r1, r2, #5
 8007ace:	69ba      	ldr	r2, [r7, #24]
 8007ad0:	440a      	add	r2, r1
 8007ad2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ad6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ada:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	f003 0320 	and.w	r3, r3, #32
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	f040 80cb 	bne.w	8007c80 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d143      	bne.n	8007b7e <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	015a      	lsls	r2, r3, #5
 8007afa:	69bb      	ldr	r3, [r7, #24]
 8007afc:	4413      	add	r3, r2
 8007afe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	697a      	ldr	r2, [r7, #20]
 8007b06:	0151      	lsls	r1, r2, #5
 8007b08:	69ba      	ldr	r2, [r7, #24]
 8007b0a:	440a      	add	r2, r1
 8007b0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b14:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	015a      	lsls	r2, r3, #5
 8007b1a:	69bb      	ldr	r3, [r7, #24]
 8007b1c:	4413      	add	r3, r2
 8007b1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	697a      	ldr	r2, [r7, #20]
 8007b26:	0151      	lsls	r1, r2, #5
 8007b28:	69ba      	ldr	r2, [r7, #24]
 8007b2a:	440a      	add	r2, r1
 8007b2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007b34:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	015a      	lsls	r2, r3, #5
 8007b3a:	69bb      	ldr	r3, [r7, #24]
 8007b3c:	4413      	add	r3, r2
 8007b3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	697a      	ldr	r2, [r7, #20]
 8007b46:	0151      	lsls	r1, r2, #5
 8007b48:	69ba      	ldr	r2, [r7, #24]
 8007b4a:	440a      	add	r2, r1
 8007b4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b50:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007b54:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8007b56:	69fb      	ldr	r3, [r7, #28]
 8007b58:	3301      	adds	r3, #1
 8007b5a:	61fb      	str	r3, [r7, #28]
 8007b5c:	69fb      	ldr	r3, [r7, #28]
 8007b5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b62:	d81d      	bhi.n	8007ba0 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	015a      	lsls	r2, r3, #5
 8007b68:	69bb      	ldr	r3, [r7, #24]
 8007b6a:	4413      	add	r3, r2
 8007b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b7a:	d0ec      	beq.n	8007b56 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007b7c:	e080      	b.n	8007c80 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	015a      	lsls	r2, r3, #5
 8007b82:	69bb      	ldr	r3, [r7, #24]
 8007b84:	4413      	add	r3, r2
 8007b86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	697a      	ldr	r2, [r7, #20]
 8007b8e:	0151      	lsls	r1, r2, #5
 8007b90:	69ba      	ldr	r2, [r7, #24]
 8007b92:	440a      	add	r2, r1
 8007b94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007b9c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007b9e:	e06f      	b.n	8007c80 <USB_HC_Halt+0x22a>
            break;
 8007ba0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007ba2:	e06d      	b.n	8007c80 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	015a      	lsls	r2, r3, #5
 8007ba8:	69bb      	ldr	r3, [r7, #24]
 8007baa:	4413      	add	r3, r2
 8007bac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	697a      	ldr	r2, [r7, #20]
 8007bb4:	0151      	lsls	r1, r2, #5
 8007bb6:	69ba      	ldr	r2, [r7, #24]
 8007bb8:	440a      	add	r2, r1
 8007bba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007bbe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007bc2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007bc4:	69bb      	ldr	r3, [r7, #24]
 8007bc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007bca:	691b      	ldr	r3, [r3, #16]
 8007bcc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d143      	bne.n	8007c5c <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	015a      	lsls	r2, r3, #5
 8007bd8:	69bb      	ldr	r3, [r7, #24]
 8007bda:	4413      	add	r3, r2
 8007bdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	697a      	ldr	r2, [r7, #20]
 8007be4:	0151      	lsls	r1, r2, #5
 8007be6:	69ba      	ldr	r2, [r7, #24]
 8007be8:	440a      	add	r2, r1
 8007bea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007bee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007bf2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	015a      	lsls	r2, r3, #5
 8007bf8:	69bb      	ldr	r3, [r7, #24]
 8007bfa:	4413      	add	r3, r2
 8007bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	697a      	ldr	r2, [r7, #20]
 8007c04:	0151      	lsls	r1, r2, #5
 8007c06:	69ba      	ldr	r2, [r7, #24]
 8007c08:	440a      	add	r2, r1
 8007c0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007c12:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	015a      	lsls	r2, r3, #5
 8007c18:	69bb      	ldr	r3, [r7, #24]
 8007c1a:	4413      	add	r3, r2
 8007c1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	697a      	ldr	r2, [r7, #20]
 8007c24:	0151      	lsls	r1, r2, #5
 8007c26:	69ba      	ldr	r2, [r7, #24]
 8007c28:	440a      	add	r2, r1
 8007c2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c2e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007c32:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007c34:	69fb      	ldr	r3, [r7, #28]
 8007c36:	3301      	adds	r3, #1
 8007c38:	61fb      	str	r3, [r7, #28]
 8007c3a:	69fb      	ldr	r3, [r7, #28]
 8007c3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c40:	d81d      	bhi.n	8007c7e <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	015a      	lsls	r2, r3, #5
 8007c46:	69bb      	ldr	r3, [r7, #24]
 8007c48:	4413      	add	r3, r2
 8007c4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c58:	d0ec      	beq.n	8007c34 <USB_HC_Halt+0x1de>
 8007c5a:	e011      	b.n	8007c80 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	015a      	lsls	r2, r3, #5
 8007c60:	69bb      	ldr	r3, [r7, #24]
 8007c62:	4413      	add	r3, r2
 8007c64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	697a      	ldr	r2, [r7, #20]
 8007c6c:	0151      	lsls	r1, r2, #5
 8007c6e:	69ba      	ldr	r2, [r7, #24]
 8007c70:	440a      	add	r2, r1
 8007c72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007c7a:	6013      	str	r3, [r2, #0]
 8007c7c:	e000      	b.n	8007c80 <USB_HC_Halt+0x22a>
          break;
 8007c7e:	bf00      	nop
    }
  }

  return HAL_OK;
 8007c80:	2300      	movs	r3, #0
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3724      	adds	r7, #36	; 0x24
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr
	...

08007c90 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b087      	sub	sp, #28
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	460b      	mov	r3, r1
 8007c9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007ca0:	78fb      	ldrb	r3, [r7, #3]
 8007ca2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	04da      	lsls	r2, r3, #19
 8007cac:	4b15      	ldr	r3, [pc, #84]	; (8007d04 <USB_DoPing+0x74>)
 8007cae:	4013      	ands	r3, r2
 8007cb0:	693a      	ldr	r2, [r7, #16]
 8007cb2:	0151      	lsls	r1, r2, #5
 8007cb4:	697a      	ldr	r2, [r7, #20]
 8007cb6:	440a      	add	r2, r1
 8007cb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007cbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007cc0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	015a      	lsls	r2, r3, #5
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	4413      	add	r3, r2
 8007cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007cd8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007ce0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	015a      	lsls	r2, r3, #5
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	4413      	add	r3, r2
 8007cea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cee:	461a      	mov	r2, r3
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007cf4:	2300      	movs	r3, #0
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	371c      	adds	r7, #28
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr
 8007d02:	bf00      	nop
 8007d04:	1ff80000 	.word	0x1ff80000

08007d08 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b086      	sub	sp, #24
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8007d14:	2300      	movs	r3, #0
 8007d16:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f7ff f935 	bl	8006f88 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8007d1e:	2110      	movs	r1, #16
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f7ff f98f 	bl	8007044 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f7ff f9b0 	bl	800708c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	613b      	str	r3, [r7, #16]
 8007d30:	e01f      	b.n	8007d72 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	015a      	lsls	r2, r3, #5
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	4413      	add	r3, r2
 8007d3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d48:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007d50:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007d58:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	015a      	lsls	r2, r3, #5
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	4413      	add	r3, r2
 8007d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d66:	461a      	mov	r2, r3
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	3301      	adds	r3, #1
 8007d70:	613b      	str	r3, [r7, #16]
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	2b0f      	cmp	r3, #15
 8007d76:	d9dc      	bls.n	8007d32 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007d78:	2300      	movs	r3, #0
 8007d7a:	613b      	str	r3, [r7, #16]
 8007d7c:	e034      	b.n	8007de8 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	015a      	lsls	r2, r3, #5
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	4413      	add	r3, r2
 8007d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d94:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007d9c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007da4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	015a      	lsls	r2, r3, #5
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	4413      	add	r3, r2
 8007dae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007db2:	461a      	mov	r2, r3
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	3301      	adds	r3, #1
 8007dbc:	617b      	str	r3, [r7, #20]
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007dc4:	d80c      	bhi.n	8007de0 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	015a      	lsls	r2, r3, #5
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	4413      	add	r3, r2
 8007dce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007dd8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ddc:	d0ec      	beq.n	8007db8 <USB_StopHost+0xb0>
 8007dde:	e000      	b.n	8007de2 <USB_StopHost+0xda>
        break;
 8007de0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	3301      	adds	r3, #1
 8007de6:	613b      	str	r3, [r7, #16]
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	2b0f      	cmp	r3, #15
 8007dec:	d9c7      	bls.n	8007d7e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007df4:	461a      	mov	r2, r3
 8007df6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007dfa:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007e02:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f7ff f8ae 	bl	8006f66 <USB_EnableGlobalInt>

  return HAL_OK;
 8007e0a:	2300      	movs	r3, #0
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3718      	adds	r7, #24
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8007e18:	4904      	ldr	r1, [pc, #16]	; (8007e2c <MX_FATFS_Init+0x18>)
 8007e1a:	4805      	ldr	r0, [pc, #20]	; (8007e30 <MX_FATFS_Init+0x1c>)
 8007e1c:	f003 f84c 	bl	800aeb8 <FATFS_LinkDriver>
 8007e20:	4603      	mov	r3, r0
 8007e22:	461a      	mov	r2, r3
 8007e24:	4b03      	ldr	r3, [pc, #12]	; (8007e34 <MX_FATFS_Init+0x20>)
 8007e26:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007e28:	bf00      	nop
 8007e2a:	bd80      	pop	{r7, pc}
 8007e2c:	200013a0 	.word	0x200013a0
 8007e30:	0800bac4 	.word	0x0800bac4
 8007e34:	20003408 	.word	0x20003408

08007e38 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b083      	sub	sp, #12
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	4603      	mov	r3, r0
 8007e40:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8007e42:	2300      	movs	r3, #0
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	370c      	adds	r7, #12
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr

08007e50 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	4603      	mov	r3, r0
 8007e58:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8007e5e:	79fb      	ldrb	r3, [r7, #7]
 8007e60:	4619      	mov	r1, r3
 8007e62:	4808      	ldr	r0, [pc, #32]	; (8007e84 <USBH_status+0x34>)
 8007e64:	f000 fe1a 	bl	8008a9c <USBH_MSC_UnitIsReady>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d002      	beq.n	8007e74 <USBH_status+0x24>
  {
    res = RES_OK;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	73fb      	strb	r3, [r7, #15]
 8007e72:	e001      	b.n	8007e78 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8007e74:	2301      	movs	r3, #1
 8007e76:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8007e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3710      	adds	r7, #16
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}
 8007e82:	bf00      	nop
 8007e84:	2000340c 	.word	0x2000340c

08007e88 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b094      	sub	sp, #80	; 0x50
 8007e8c:	af02      	add	r7, sp, #8
 8007e8e:	60b9      	str	r1, [r7, #8]
 8007e90:	607a      	str	r2, [r7, #4]
 8007e92:	603b      	str	r3, [r7, #0]
 8007e94:	4603      	mov	r3, r0
 8007e96:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8007e9e:	7bf9      	ldrb	r1, [r7, #15]
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	9300      	str	r3, [sp, #0]
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	687a      	ldr	r2, [r7, #4]
 8007ea8:	4813      	ldr	r0, [pc, #76]	; (8007ef8 <USBH_read+0x70>)
 8007eaa:	f000 fe41 	bl	8008b30 <USBH_MSC_Read>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d103      	bne.n	8007ebc <USBH_read+0x34>
  {
    res = RES_OK;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007eba:	e017      	b.n	8007eec <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8007ebc:	f107 0210 	add.w	r2, r7, #16
 8007ec0:	7bfb      	ldrb	r3, [r7, #15]
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	480c      	ldr	r0, [pc, #48]	; (8007ef8 <USBH_read+0x70>)
 8007ec6:	f000 fe0f 	bl	8008ae8 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8007eca:	7f7b      	ldrb	r3, [r7, #29]
 8007ecc:	2b3a      	cmp	r3, #58	; 0x3a
 8007ece:	d005      	beq.n	8007edc <USBH_read+0x54>
 8007ed0:	2b3a      	cmp	r3, #58	; 0x3a
 8007ed2:	dc07      	bgt.n	8007ee4 <USBH_read+0x5c>
 8007ed4:	2b04      	cmp	r3, #4
 8007ed6:	d001      	beq.n	8007edc <USBH_read+0x54>
 8007ed8:	2b28      	cmp	r3, #40	; 0x28
 8007eda:	d103      	bne.n	8007ee4 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8007edc:	2303      	movs	r3, #3
 8007ede:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8007ee2:	e003      	b.n	8007eec <USBH_read+0x64>

    default:
      res = RES_ERROR;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8007eea:	bf00      	nop
    }
  }

  return res;
 8007eec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3748      	adds	r7, #72	; 0x48
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}
 8007ef8:	2000340c 	.word	0x2000340c

08007efc <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b094      	sub	sp, #80	; 0x50
 8007f00:	af02      	add	r7, sp, #8
 8007f02:	60b9      	str	r1, [r7, #8]
 8007f04:	607a      	str	r2, [r7, #4]
 8007f06:	603b      	str	r3, [r7, #0]
 8007f08:	4603      	mov	r3, r0
 8007f0a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8007f12:	7bf9      	ldrb	r1, [r7, #15]
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	9300      	str	r3, [sp, #0]
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	687a      	ldr	r2, [r7, #4]
 8007f1c:	4817      	ldr	r0, [pc, #92]	; (8007f7c <USBH_write+0x80>)
 8007f1e:	f000 fe70 	bl	8008c02 <USBH_MSC_Write>
 8007f22:	4603      	mov	r3, r0
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d103      	bne.n	8007f30 <USBH_write+0x34>
  {
    res = RES_OK;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007f2e:	e01f      	b.n	8007f70 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8007f30:	f107 0210 	add.w	r2, r7, #16
 8007f34:	7bfb      	ldrb	r3, [r7, #15]
 8007f36:	4619      	mov	r1, r3
 8007f38:	4810      	ldr	r0, [pc, #64]	; (8007f7c <USBH_write+0x80>)
 8007f3a:	f000 fdd5 	bl	8008ae8 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8007f3e:	7f7b      	ldrb	r3, [r7, #29]
 8007f40:	2b3a      	cmp	r3, #58	; 0x3a
 8007f42:	d00d      	beq.n	8007f60 <USBH_write+0x64>
 8007f44:	2b3a      	cmp	r3, #58	; 0x3a
 8007f46:	dc0f      	bgt.n	8007f68 <USBH_write+0x6c>
 8007f48:	2b28      	cmp	r3, #40	; 0x28
 8007f4a:	d009      	beq.n	8007f60 <USBH_write+0x64>
 8007f4c:	2b28      	cmp	r3, #40	; 0x28
 8007f4e:	dc0b      	bgt.n	8007f68 <USBH_write+0x6c>
 8007f50:	2b04      	cmp	r3, #4
 8007f52:	d005      	beq.n	8007f60 <USBH_write+0x64>
 8007f54:	2b27      	cmp	r3, #39	; 0x27
 8007f56:	d107      	bne.n	8007f68 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8007f58:	2302      	movs	r3, #2
 8007f5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8007f5e:	e007      	b.n	8007f70 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8007f60:	2303      	movs	r3, #3
 8007f62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8007f66:	e003      	b.n	8007f70 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8007f68:	2301      	movs	r3, #1
 8007f6a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8007f6e:	bf00      	nop
    }
  }

  return res;
 8007f70:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3748      	adds	r7, #72	; 0x48
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}
 8007f7c:	2000340c 	.word	0x2000340c

08007f80 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b090      	sub	sp, #64	; 0x40
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	4603      	mov	r3, r0
 8007f88:	603a      	str	r2, [r7, #0]
 8007f8a:	71fb      	strb	r3, [r7, #7]
 8007f8c:	460b      	mov	r3, r1
 8007f8e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007f90:	2301      	movs	r3, #1
 8007f92:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8007f96:	79bb      	ldrb	r3, [r7, #6]
 8007f98:	2b03      	cmp	r3, #3
 8007f9a:	d852      	bhi.n	8008042 <USBH_ioctl+0xc2>
 8007f9c:	a201      	add	r2, pc, #4	; (adr r2, 8007fa4 <USBH_ioctl+0x24>)
 8007f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fa2:	bf00      	nop
 8007fa4:	08007fb5 	.word	0x08007fb5
 8007fa8:	08007fbd 	.word	0x08007fbd
 8007fac:	08007fe7 	.word	0x08007fe7
 8007fb0:	08008013 	.word	0x08008013
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8007fba:	e045      	b.n	8008048 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8007fbc:	f107 0208 	add.w	r2, r7, #8
 8007fc0:	79fb      	ldrb	r3, [r7, #7]
 8007fc2:	4619      	mov	r1, r3
 8007fc4:	4823      	ldr	r0, [pc, #140]	; (8008054 <USBH_ioctl+0xd4>)
 8007fc6:	f000 fd8f 	bl	8008ae8 <USBH_MSC_GetLUNInfo>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d106      	bne.n	8007fde <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8007fd0:	68fa      	ldr	r2, [r7, #12]
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8007fdc:	e034      	b.n	8008048 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8007fe4:	e030      	b.n	8008048 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8007fe6:	f107 0208 	add.w	r2, r7, #8
 8007fea:	79fb      	ldrb	r3, [r7, #7]
 8007fec:	4619      	mov	r1, r3
 8007fee:	4819      	ldr	r0, [pc, #100]	; (8008054 <USBH_ioctl+0xd4>)
 8007ff0:	f000 fd7a 	bl	8008ae8 <USBH_MSC_GetLUNInfo>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d107      	bne.n	800800a <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8007ffa:	8a3b      	ldrh	r3, [r7, #16]
 8007ffc:	461a      	mov	r2, r3
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008002:	2300      	movs	r3, #0
 8008004:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008008:	e01e      	b.n	8008048 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800800a:	2301      	movs	r3, #1
 800800c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008010:	e01a      	b.n	8008048 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008012:	f107 0208 	add.w	r2, r7, #8
 8008016:	79fb      	ldrb	r3, [r7, #7]
 8008018:	4619      	mov	r1, r3
 800801a:	480e      	ldr	r0, [pc, #56]	; (8008054 <USBH_ioctl+0xd4>)
 800801c:	f000 fd64 	bl	8008ae8 <USBH_MSC_GetLUNInfo>
 8008020:	4603      	mov	r3, r0
 8008022:	2b00      	cmp	r3, #0
 8008024:	d109      	bne.n	800803a <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8008026:	8a3b      	ldrh	r3, [r7, #16]
 8008028:	0a5b      	lsrs	r3, r3, #9
 800802a:	b29b      	uxth	r3, r3
 800802c:	461a      	mov	r2, r3
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008032:	2300      	movs	r3, #0
 8008034:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008038:	e006      	b.n	8008048 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800803a:	2301      	movs	r3, #1
 800803c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008040:	e002      	b.n	8008048 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8008042:	2304      	movs	r3, #4
 8008044:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8008048:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800804c:	4618      	mov	r0, r3
 800804e:	3740      	adds	r7, #64	; 0x40
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}
 8008054:	2000340c 	.word	0x2000340c

08008058 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008058:	b590      	push	{r4, r7, lr}
 800805a:	b089      	sub	sp, #36	; 0x24
 800805c:	af04      	add	r7, sp, #16
 800805e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008066:	7919      	ldrb	r1, [r3, #4]
 8008068:	2350      	movs	r3, #80	; 0x50
 800806a:	2206      	movs	r2, #6
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f001 fc53 	bl	8009918 <USBH_FindInterface>
 8008072:	4603      	mov	r3, r0
 8008074:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8008076:	7bfb      	ldrb	r3, [r7, #15]
 8008078:	2bff      	cmp	r3, #255	; 0xff
 800807a:	d002      	beq.n	8008082 <USBH_MSC_InterfaceInit+0x2a>
 800807c:	7bfb      	ldrb	r3, [r7, #15]
 800807e:	2b01      	cmp	r3, #1
 8008080:	d901      	bls.n	8008086 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008082:	2302      	movs	r3, #2
 8008084:	e0ef      	b.n	8008266 <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 8008086:	7bfb      	ldrb	r3, [r7, #15]
 8008088:	4619      	mov	r1, r3
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f001 fc28 	bl	80098e0 <USBH_SelectInterface>
 8008090:	4603      	mov	r3, r0
 8008092:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008094:	7bbb      	ldrb	r3, [r7, #14]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d001      	beq.n	800809e <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800809a:	2302      	movs	r3, #2
 800809c:	e0e3      	b.n	8008266 <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80080a4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80080a8:	f003 fa78 	bl	800b59c <malloc>
 80080ac:	4603      	mov	r3, r0
 80080ae:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80080b6:	69db      	ldr	r3, [r3, #28]
 80080b8:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d101      	bne.n	80080c4 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 80080c0:	2302      	movs	r3, #2
 80080c2:	e0d0      	b.n	8008266 <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 80080c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80080c8:	2100      	movs	r1, #0
 80080ca:	68b8      	ldr	r0, [r7, #8]
 80080cc:	f003 fa84 	bl	800b5d8 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80080d0:	7bfb      	ldrb	r3, [r7, #15]
 80080d2:	687a      	ldr	r2, [r7, #4]
 80080d4:	211a      	movs	r1, #26
 80080d6:	fb01 f303 	mul.w	r3, r1, r3
 80080da:	4413      	add	r3, r2
 80080dc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	b25b      	sxtb	r3, r3
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	da16      	bge.n	8008116 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80080e8:	7bfb      	ldrb	r3, [r7, #15]
 80080ea:	687a      	ldr	r2, [r7, #4]
 80080ec:	211a      	movs	r1, #26
 80080ee:	fb01 f303 	mul.w	r3, r1, r3
 80080f2:	4413      	add	r3, r2
 80080f4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80080f8:	781a      	ldrb	r2, [r3, #0]
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80080fe:	7bfb      	ldrb	r3, [r7, #15]
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	211a      	movs	r1, #26
 8008104:	fb01 f303 	mul.w	r3, r1, r3
 8008108:	4413      	add	r3, r2
 800810a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800810e:	881a      	ldrh	r2, [r3, #0]
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	815a      	strh	r2, [r3, #10]
 8008114:	e015      	b.n	8008142 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008116:	7bfb      	ldrb	r3, [r7, #15]
 8008118:	687a      	ldr	r2, [r7, #4]
 800811a:	211a      	movs	r1, #26
 800811c:	fb01 f303 	mul.w	r3, r1, r3
 8008120:	4413      	add	r3, r2
 8008122:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008126:	781a      	ldrb	r2, [r3, #0]
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800812c:	7bfb      	ldrb	r3, [r7, #15]
 800812e:	687a      	ldr	r2, [r7, #4]
 8008130:	211a      	movs	r1, #26
 8008132:	fb01 f303 	mul.w	r3, r1, r3
 8008136:	4413      	add	r3, r2
 8008138:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800813c:	881a      	ldrh	r2, [r3, #0]
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8008142:	7bfb      	ldrb	r3, [r7, #15]
 8008144:	687a      	ldr	r2, [r7, #4]
 8008146:	211a      	movs	r1, #26
 8008148:	fb01 f303 	mul.w	r3, r1, r3
 800814c:	4413      	add	r3, r2
 800814e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	b25b      	sxtb	r3, r3
 8008156:	2b00      	cmp	r3, #0
 8008158:	da16      	bge.n	8008188 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800815a:	7bfb      	ldrb	r3, [r7, #15]
 800815c:	687a      	ldr	r2, [r7, #4]
 800815e:	211a      	movs	r1, #26
 8008160:	fb01 f303 	mul.w	r3, r1, r3
 8008164:	4413      	add	r3, r2
 8008166:	f203 3356 	addw	r3, r3, #854	; 0x356
 800816a:	781a      	ldrb	r2, [r3, #0]
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008170:	7bfb      	ldrb	r3, [r7, #15]
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	211a      	movs	r1, #26
 8008176:	fb01 f303 	mul.w	r3, r1, r3
 800817a:	4413      	add	r3, r2
 800817c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008180:	881a      	ldrh	r2, [r3, #0]
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	815a      	strh	r2, [r3, #10]
 8008186:	e015      	b.n	80081b4 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008188:	7bfb      	ldrb	r3, [r7, #15]
 800818a:	687a      	ldr	r2, [r7, #4]
 800818c:	211a      	movs	r1, #26
 800818e:	fb01 f303 	mul.w	r3, r1, r3
 8008192:	4413      	add	r3, r2
 8008194:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008198:	781a      	ldrb	r2, [r3, #0]
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800819e:	7bfb      	ldrb	r3, [r7, #15]
 80081a0:	687a      	ldr	r2, [r7, #4]
 80081a2:	211a      	movs	r1, #26
 80081a4:	fb01 f303 	mul.w	r3, r1, r3
 80081a8:	4413      	add	r3, r2
 80081aa:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80081ae:	881a      	ldrh	r2, [r3, #0]
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	2200      	movs	r2, #0
 80081b8:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	2200      	movs	r2, #0
 80081be:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	2200      	movs	r2, #0
 80081c4:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	799b      	ldrb	r3, [r3, #6]
 80081ca:	4619      	mov	r1, r3
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f002 fdc4 	bl	800ad5a <USBH_AllocPipe>
 80081d2:	4603      	mov	r3, r0
 80081d4:	461a      	mov	r2, r3
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	79db      	ldrb	r3, [r3, #7]
 80081de:	4619      	mov	r1, r3
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f002 fdba 	bl	800ad5a <USBH_AllocPipe>
 80081e6:	4603      	mov	r3, r0
 80081e8:	461a      	mov	r2, r3
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 fdac 	bl	8008d4c <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	7959      	ldrb	r1, [r3, #5]
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	7998      	ldrb	r0, [r3, #6]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008208:	68ba      	ldr	r2, [r7, #8]
 800820a:	8912      	ldrh	r2, [r2, #8]
 800820c:	9202      	str	r2, [sp, #8]
 800820e:	2202      	movs	r2, #2
 8008210:	9201      	str	r2, [sp, #4]
 8008212:	9300      	str	r3, [sp, #0]
 8008214:	4623      	mov	r3, r4
 8008216:	4602      	mov	r2, r0
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f002 fd6f 	bl	800acfc <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	7919      	ldrb	r1, [r3, #4]
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	79d8      	ldrb	r0, [r3, #7]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008232:	68ba      	ldr	r2, [r7, #8]
 8008234:	8952      	ldrh	r2, [r2, #10]
 8008236:	9202      	str	r2, [sp, #8]
 8008238:	2202      	movs	r2, #2
 800823a:	9201      	str	r2, [sp, #4]
 800823c:	9300      	str	r3, [sp, #0]
 800823e:	4623      	mov	r3, r4
 8008240:	4602      	mov	r2, r0
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f002 fd5a 	bl	800acfc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	791b      	ldrb	r3, [r3, #4]
 800824c:	2200      	movs	r2, #0
 800824e:	4619      	mov	r1, r3
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f003 f8c5 	bl	800b3e0 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	795b      	ldrb	r3, [r3, #5]
 800825a:	2200      	movs	r2, #0
 800825c:	4619      	mov	r1, r3
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f003 f8be 	bl	800b3e0 <USBH_LL_SetToggle>

  return USBH_OK;
 8008264:	2300      	movs	r3, #0
}
 8008266:	4618      	mov	r0, r3
 8008268:	3714      	adds	r7, #20
 800826a:	46bd      	mov	sp, r7
 800826c:	bd90      	pop	{r4, r7, pc}

0800826e <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800826e:	b580      	push	{r7, lr}
 8008270:	b084      	sub	sp, #16
 8008272:	af00      	add	r7, sp, #0
 8008274:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800827c:	69db      	ldr	r3, [r3, #28]
 800827e:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	795b      	ldrb	r3, [r3, #5]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d00e      	beq.n	80082a6 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	795b      	ldrb	r3, [r3, #5]
 800828c:	4619      	mov	r1, r3
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f002 fd53 	bl	800ad3a <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	795b      	ldrb	r3, [r3, #5]
 8008298:	4619      	mov	r1, r3
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f002 fd7e 	bl	800ad9c <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2200      	movs	r2, #0
 80082a4:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	791b      	ldrb	r3, [r3, #4]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d00e      	beq.n	80082cc <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	791b      	ldrb	r3, [r3, #4]
 80082b2:	4619      	mov	r1, r3
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f002 fd40 	bl	800ad3a <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	791b      	ldrb	r3, [r3, #4]
 80082be:	4619      	mov	r1, r3
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f002 fd6b 	bl	800ad9c <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2200      	movs	r2, #0
 80082ca:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80082d2:	69db      	ldr	r3, [r3, #28]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d00b      	beq.n	80082f0 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80082de:	69db      	ldr	r3, [r3, #28]
 80082e0:	4618      	mov	r0, r3
 80082e2:	f003 f963 	bl	800b5ac <free>
    phost->pActiveClass->pData = 0U;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80082ec:	2200      	movs	r2, #0
 80082ee:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80082f0:	2300      	movs	r3, #0
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3710      	adds	r7, #16
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}

080082fa <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80082fa:	b580      	push	{r7, lr}
 80082fc:	b084      	sub	sp, #16
 80082fe:	af00      	add	r7, sp, #0
 8008300:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008308:	69db      	ldr	r3, [r3, #28]
 800830a:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800830c:	2301      	movs	r3, #1
 800830e:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	7b9b      	ldrb	r3, [r3, #14]
 8008314:	2b03      	cmp	r3, #3
 8008316:	d041      	beq.n	800839c <USBH_MSC_ClassRequest+0xa2>
 8008318:	2b03      	cmp	r3, #3
 800831a:	dc4b      	bgt.n	80083b4 <USBH_MSC_ClassRequest+0xba>
 800831c:	2b00      	cmp	r3, #0
 800831e:	d001      	beq.n	8008324 <USBH_MSC_ClassRequest+0x2a>
 8008320:	2b02      	cmp	r3, #2
 8008322:	d147      	bne.n	80083b4 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	4619      	mov	r1, r3
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 fcf0 	bl	8008d0e <USBH_MSC_BOT_REQ_GetMaxLUN>
 800832e:	4603      	mov	r3, r0
 8008330:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8008332:	7bfb      	ldrb	r3, [r7, #15]
 8008334:	2b03      	cmp	r3, #3
 8008336:	d104      	bne.n	8008342 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	2200      	movs	r2, #0
 800833c:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800833e:	2300      	movs	r3, #0
 8008340:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8008342:	7bfb      	ldrb	r3, [r7, #15]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d137      	bne.n	80083b8 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	781b      	ldrb	r3, [r3, #0]
 800834c:	2b02      	cmp	r3, #2
 800834e:	d804      	bhi.n	800835a <USBH_MSC_ClassRequest+0x60>
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	3301      	adds	r3, #1
 8008356:	b2da      	uxtb	r2, r3
 8008358:	e000      	b.n	800835c <USBH_MSC_ClassRequest+0x62>
 800835a:	2202      	movs	r2, #2
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8008360:	2300      	movs	r3, #0
 8008362:	73bb      	strb	r3, [r7, #14]
 8008364:	e014      	b.n	8008390 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8008366:	7bbb      	ldrb	r3, [r7, #14]
 8008368:	68ba      	ldr	r2, [r7, #8]
 800836a:	2134      	movs	r1, #52	; 0x34
 800836c:	fb01 f303 	mul.w	r3, r1, r3
 8008370:	4413      	add	r3, r2
 8008372:	3392      	adds	r3, #146	; 0x92
 8008374:	2202      	movs	r2, #2
 8008376:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8008378:	7bbb      	ldrb	r3, [r7, #14]
 800837a:	68ba      	ldr	r2, [r7, #8]
 800837c:	2134      	movs	r1, #52	; 0x34
 800837e:	fb01 f303 	mul.w	r3, r1, r3
 8008382:	4413      	add	r3, r2
 8008384:	33c1      	adds	r3, #193	; 0xc1
 8008386:	2200      	movs	r2, #0
 8008388:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800838a:	7bbb      	ldrb	r3, [r7, #14]
 800838c:	3301      	adds	r3, #1
 800838e:	73bb      	strb	r3, [r7, #14]
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	7bba      	ldrb	r2, [r7, #14]
 8008396:	429a      	cmp	r2, r3
 8008398:	d3e5      	bcc.n	8008366 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 800839a:	e00d      	b.n	80083b8 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800839c:	2100      	movs	r1, #0
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f002 f87b 	bl	800a49a <USBH_ClrFeature>
 80083a4:	4603      	mov	r3, r0
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d108      	bne.n	80083bc <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	7bda      	ldrb	r2, [r3, #15]
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	739a      	strb	r2, [r3, #14]
      }
      break;
 80083b2:	e003      	b.n	80083bc <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 80083b4:	bf00      	nop
 80083b6:	e002      	b.n	80083be <USBH_MSC_ClassRequest+0xc4>
      break;
 80083b8:	bf00      	nop
 80083ba:	e000      	b.n	80083be <USBH_MSC_ClassRequest+0xc4>
      break;
 80083bc:	bf00      	nop
  }

  return status;
 80083be:	7bfb      	ldrb	r3, [r7, #15]
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3710      	adds	r7, #16
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b086      	sub	sp, #24
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80083d6:	69db      	ldr	r3, [r3, #28]
 80083d8:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 80083da:	2301      	movs	r3, #1
 80083dc:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 80083de:	2301      	movs	r3, #1
 80083e0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 80083e2:	2301      	movs	r3, #1
 80083e4:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	7b1b      	ldrb	r3, [r3, #12]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d003      	beq.n	80083f6 <USBH_MSC_Process+0x2e>
 80083ee:	2b01      	cmp	r3, #1
 80083f0:	f000 8271 	beq.w	80088d6 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 80083f4:	e272      	b.n	80088dc <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	781b      	ldrb	r3, [r3, #0]
 8008400:	b29b      	uxth	r3, r3
 8008402:	429a      	cmp	r2, r3
 8008404:	f080 824f 	bcs.w	80088a6 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800840e:	4619      	mov	r1, r3
 8008410:	693a      	ldr	r2, [r7, #16]
 8008412:	2334      	movs	r3, #52	; 0x34
 8008414:	fb03 f301 	mul.w	r3, r3, r1
 8008418:	4413      	add	r3, r2
 800841a:	3391      	adds	r3, #145	; 0x91
 800841c:	2201      	movs	r2, #1
 800841e:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008426:	4619      	mov	r1, r3
 8008428:	693a      	ldr	r2, [r7, #16]
 800842a:	2334      	movs	r3, #52	; 0x34
 800842c:	fb03 f301 	mul.w	r3, r3, r1
 8008430:	4413      	add	r3, r2
 8008432:	3390      	adds	r3, #144	; 0x90
 8008434:	781b      	ldrb	r3, [r3, #0]
 8008436:	2b08      	cmp	r3, #8
 8008438:	f200 8243 	bhi.w	80088c2 <USBH_MSC_Process+0x4fa>
 800843c:	a201      	add	r2, pc, #4	; (adr r2, 8008444 <USBH_MSC_Process+0x7c>)
 800843e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008442:	bf00      	nop
 8008444:	08008469 	.word	0x08008469
 8008448:	080088c3 	.word	0x080088c3
 800844c:	08008531 	.word	0x08008531
 8008450:	080086b5 	.word	0x080086b5
 8008454:	0800848f 	.word	0x0800848f
 8008458:	08008781 	.word	0x08008781
 800845c:	080088c3 	.word	0x080088c3
 8008460:	080088c3 	.word	0x080088c3
 8008464:	08008895 	.word	0x08008895
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800846e:	4619      	mov	r1, r3
 8008470:	693a      	ldr	r2, [r7, #16]
 8008472:	2334      	movs	r3, #52	; 0x34
 8008474:	fb03 f301 	mul.w	r3, r3, r1
 8008478:	4413      	add	r3, r2
 800847a:	3390      	adds	r3, #144	; 0x90
 800847c:	2204      	movs	r2, #4
 800847e:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 800848c:	e222      	b.n	80088d4 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008494:	b2d9      	uxtb	r1, r3
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800849c:	461a      	mov	r2, r3
 800849e:	2334      	movs	r3, #52	; 0x34
 80084a0:	fb03 f302 	mul.w	r3, r3, r2
 80084a4:	3398      	adds	r3, #152	; 0x98
 80084a6:	693a      	ldr	r2, [r7, #16]
 80084a8:	4413      	add	r3, r2
 80084aa:	3307      	adds	r3, #7
 80084ac:	461a      	mov	r2, r3
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 ff6a 	bl	8009388 <USBH_MSC_SCSI_Inquiry>
 80084b4:	4603      	mov	r3, r0
 80084b6:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80084b8:	7bfb      	ldrb	r3, [r7, #15]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d10b      	bne.n	80084d6 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80084c4:	4619      	mov	r1, r3
 80084c6:	693a      	ldr	r2, [r7, #16]
 80084c8:	2334      	movs	r3, #52	; 0x34
 80084ca:	fb03 f301 	mul.w	r3, r3, r1
 80084ce:	4413      	add	r3, r2
 80084d0:	3390      	adds	r3, #144	; 0x90
 80084d2:	2202      	movs	r2, #2
 80084d4:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 80084d6:	7bfb      	ldrb	r3, [r7, #15]
 80084d8:	2b02      	cmp	r3, #2
 80084da:	d10c      	bne.n	80084f6 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80084e2:	4619      	mov	r1, r3
 80084e4:	693a      	ldr	r2, [r7, #16]
 80084e6:	2334      	movs	r3, #52	; 0x34
 80084e8:	fb03 f301 	mul.w	r3, r3, r1
 80084ec:	4413      	add	r3, r2
 80084ee:	3390      	adds	r3, #144	; 0x90
 80084f0:	2205      	movs	r2, #5
 80084f2:	701a      	strb	r2, [r3, #0]
            break;
 80084f4:	e1e7      	b.n	80088c6 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80084f6:	7bfb      	ldrb	r3, [r7, #15]
 80084f8:	2b04      	cmp	r3, #4
 80084fa:	f040 81e4 	bne.w	80088c6 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008504:	4619      	mov	r1, r3
 8008506:	693a      	ldr	r2, [r7, #16]
 8008508:	2334      	movs	r3, #52	; 0x34
 800850a:	fb03 f301 	mul.w	r3, r3, r1
 800850e:	4413      	add	r3, r2
 8008510:	3390      	adds	r3, #144	; 0x90
 8008512:	2201      	movs	r2, #1
 8008514:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008516:	693b      	ldr	r3, [r7, #16]
 8008518:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800851c:	4619      	mov	r1, r3
 800851e:	693a      	ldr	r2, [r7, #16]
 8008520:	2334      	movs	r3, #52	; 0x34
 8008522:	fb03 f301 	mul.w	r3, r3, r1
 8008526:	4413      	add	r3, r2
 8008528:	3391      	adds	r3, #145	; 0x91
 800852a:	2202      	movs	r2, #2
 800852c:	701a      	strb	r2, [r3, #0]
            break;
 800852e:	e1ca      	b.n	80088c6 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008536:	b2db      	uxtb	r3, r3
 8008538:	4619      	mov	r1, r3
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f000 fe66 	bl	800920c <USBH_MSC_SCSI_TestUnitReady>
 8008540:	4603      	mov	r3, r0
 8008542:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8008544:	7bbb      	ldrb	r3, [r7, #14]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d149      	bne.n	80085de <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008550:	4619      	mov	r1, r3
 8008552:	693a      	ldr	r2, [r7, #16]
 8008554:	2334      	movs	r3, #52	; 0x34
 8008556:	fb03 f301 	mul.w	r3, r3, r1
 800855a:	4413      	add	r3, r2
 800855c:	3392      	adds	r3, #146	; 0x92
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d00c      	beq.n	800857e <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800856a:	4619      	mov	r1, r3
 800856c:	693a      	ldr	r2, [r7, #16]
 800856e:	2334      	movs	r3, #52	; 0x34
 8008570:	fb03 f301 	mul.w	r3, r3, r1
 8008574:	4413      	add	r3, r2
 8008576:	33c1      	adds	r3, #193	; 0xc1
 8008578:	2201      	movs	r2, #1
 800857a:	701a      	strb	r2, [r3, #0]
 800857c:	e00b      	b.n	8008596 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008584:	4619      	mov	r1, r3
 8008586:	693a      	ldr	r2, [r7, #16]
 8008588:	2334      	movs	r3, #52	; 0x34
 800858a:	fb03 f301 	mul.w	r3, r3, r1
 800858e:	4413      	add	r3, r2
 8008590:	33c1      	adds	r3, #193	; 0xc1
 8008592:	2200      	movs	r2, #0
 8008594:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800859c:	4619      	mov	r1, r3
 800859e:	693a      	ldr	r2, [r7, #16]
 80085a0:	2334      	movs	r3, #52	; 0x34
 80085a2:	fb03 f301 	mul.w	r3, r3, r1
 80085a6:	4413      	add	r3, r2
 80085a8:	3390      	adds	r3, #144	; 0x90
 80085aa:	2203      	movs	r2, #3
 80085ac:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80085b4:	4619      	mov	r1, r3
 80085b6:	693a      	ldr	r2, [r7, #16]
 80085b8:	2334      	movs	r3, #52	; 0x34
 80085ba:	fb03 f301 	mul.w	r3, r3, r1
 80085be:	4413      	add	r3, r2
 80085c0:	3391      	adds	r3, #145	; 0x91
 80085c2:	2200      	movs	r2, #0
 80085c4:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80085cc:	4619      	mov	r1, r3
 80085ce:	693a      	ldr	r2, [r7, #16]
 80085d0:	2334      	movs	r3, #52	; 0x34
 80085d2:	fb03 f301 	mul.w	r3, r3, r1
 80085d6:	4413      	add	r3, r2
 80085d8:	3392      	adds	r3, #146	; 0x92
 80085da:	2200      	movs	r2, #0
 80085dc:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 80085de:	7bbb      	ldrb	r3, [r7, #14]
 80085e0:	2b02      	cmp	r3, #2
 80085e2:	d14a      	bne.n	800867a <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80085ea:	4619      	mov	r1, r3
 80085ec:	693a      	ldr	r2, [r7, #16]
 80085ee:	2334      	movs	r3, #52	; 0x34
 80085f0:	fb03 f301 	mul.w	r3, r3, r1
 80085f4:	4413      	add	r3, r2
 80085f6:	3392      	adds	r3, #146	; 0x92
 80085f8:	781b      	ldrb	r3, [r3, #0]
 80085fa:	2b02      	cmp	r3, #2
 80085fc:	d00c      	beq.n	8008618 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008604:	4619      	mov	r1, r3
 8008606:	693a      	ldr	r2, [r7, #16]
 8008608:	2334      	movs	r3, #52	; 0x34
 800860a:	fb03 f301 	mul.w	r3, r3, r1
 800860e:	4413      	add	r3, r2
 8008610:	33c1      	adds	r3, #193	; 0xc1
 8008612:	2201      	movs	r2, #1
 8008614:	701a      	strb	r2, [r3, #0]
 8008616:	e00b      	b.n	8008630 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800861e:	4619      	mov	r1, r3
 8008620:	693a      	ldr	r2, [r7, #16]
 8008622:	2334      	movs	r3, #52	; 0x34
 8008624:	fb03 f301 	mul.w	r3, r3, r1
 8008628:	4413      	add	r3, r2
 800862a:	33c1      	adds	r3, #193	; 0xc1
 800862c:	2200      	movs	r2, #0
 800862e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008636:	4619      	mov	r1, r3
 8008638:	693a      	ldr	r2, [r7, #16]
 800863a:	2334      	movs	r3, #52	; 0x34
 800863c:	fb03 f301 	mul.w	r3, r3, r1
 8008640:	4413      	add	r3, r2
 8008642:	3390      	adds	r3, #144	; 0x90
 8008644:	2205      	movs	r2, #5
 8008646:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800864e:	4619      	mov	r1, r3
 8008650:	693a      	ldr	r2, [r7, #16]
 8008652:	2334      	movs	r3, #52	; 0x34
 8008654:	fb03 f301 	mul.w	r3, r3, r1
 8008658:	4413      	add	r3, r2
 800865a:	3391      	adds	r3, #145	; 0x91
 800865c:	2201      	movs	r2, #1
 800865e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008666:	4619      	mov	r1, r3
 8008668:	693a      	ldr	r2, [r7, #16]
 800866a:	2334      	movs	r3, #52	; 0x34
 800866c:	fb03 f301 	mul.w	r3, r3, r1
 8008670:	4413      	add	r3, r2
 8008672:	3392      	adds	r3, #146	; 0x92
 8008674:	2202      	movs	r2, #2
 8008676:	701a      	strb	r2, [r3, #0]
            break;
 8008678:	e127      	b.n	80088ca <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800867a:	7bbb      	ldrb	r3, [r7, #14]
 800867c:	2b04      	cmp	r3, #4
 800867e:	f040 8124 	bne.w	80088ca <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008688:	4619      	mov	r1, r3
 800868a:	693a      	ldr	r2, [r7, #16]
 800868c:	2334      	movs	r3, #52	; 0x34
 800868e:	fb03 f301 	mul.w	r3, r3, r1
 8008692:	4413      	add	r3, r2
 8008694:	3390      	adds	r3, #144	; 0x90
 8008696:	2201      	movs	r2, #1
 8008698:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80086a0:	4619      	mov	r1, r3
 80086a2:	693a      	ldr	r2, [r7, #16]
 80086a4:	2334      	movs	r3, #52	; 0x34
 80086a6:	fb03 f301 	mul.w	r3, r3, r1
 80086aa:	4413      	add	r3, r2
 80086ac:	3391      	adds	r3, #145	; 0x91
 80086ae:	2202      	movs	r2, #2
 80086b0:	701a      	strb	r2, [r3, #0]
            break;
 80086b2:	e10a      	b.n	80088ca <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80086ba:	b2d9      	uxtb	r1, r3
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80086c2:	461a      	mov	r2, r3
 80086c4:	2334      	movs	r3, #52	; 0x34
 80086c6:	fb03 f302 	mul.w	r3, r3, r2
 80086ca:	3390      	adds	r3, #144	; 0x90
 80086cc:	693a      	ldr	r2, [r7, #16]
 80086ce:	4413      	add	r3, r2
 80086d0:	3304      	adds	r3, #4
 80086d2:	461a      	mov	r2, r3
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f000 fddc 	bl	8009292 <USBH_MSC_SCSI_ReadCapacity>
 80086da:	4603      	mov	r3, r0
 80086dc:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80086de:	7bfb      	ldrb	r3, [r7, #15]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d120      	bne.n	8008726 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80086ea:	4619      	mov	r1, r3
 80086ec:	693a      	ldr	r2, [r7, #16]
 80086ee:	2334      	movs	r3, #52	; 0x34
 80086f0:	fb03 f301 	mul.w	r3, r3, r1
 80086f4:	4413      	add	r3, r2
 80086f6:	3390      	adds	r3, #144	; 0x90
 80086f8:	2201      	movs	r2, #1
 80086fa:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008702:	4619      	mov	r1, r3
 8008704:	693a      	ldr	r2, [r7, #16]
 8008706:	2334      	movs	r3, #52	; 0x34
 8008708:	fb03 f301 	mul.w	r3, r3, r1
 800870c:	4413      	add	r3, r2
 800870e:	3391      	adds	r3, #145	; 0x91
 8008710:	2200      	movs	r2, #0
 8008712:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800871a:	3301      	adds	r3, #1
 800871c:	b29a      	uxth	r2, r3
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8008724:	e0d3      	b.n	80088ce <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 8008726:	7bfb      	ldrb	r3, [r7, #15]
 8008728:	2b02      	cmp	r3, #2
 800872a:	d10c      	bne.n	8008746 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008732:	4619      	mov	r1, r3
 8008734:	693a      	ldr	r2, [r7, #16]
 8008736:	2334      	movs	r3, #52	; 0x34
 8008738:	fb03 f301 	mul.w	r3, r3, r1
 800873c:	4413      	add	r3, r2
 800873e:	3390      	adds	r3, #144	; 0x90
 8008740:	2205      	movs	r2, #5
 8008742:	701a      	strb	r2, [r3, #0]
            break;
 8008744:	e0c3      	b.n	80088ce <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008746:	7bfb      	ldrb	r3, [r7, #15]
 8008748:	2b04      	cmp	r3, #4
 800874a:	f040 80c0 	bne.w	80088ce <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008754:	4619      	mov	r1, r3
 8008756:	693a      	ldr	r2, [r7, #16]
 8008758:	2334      	movs	r3, #52	; 0x34
 800875a:	fb03 f301 	mul.w	r3, r3, r1
 800875e:	4413      	add	r3, r2
 8008760:	3390      	adds	r3, #144	; 0x90
 8008762:	2201      	movs	r2, #1
 8008764:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800876c:	4619      	mov	r1, r3
 800876e:	693a      	ldr	r2, [r7, #16]
 8008770:	2334      	movs	r3, #52	; 0x34
 8008772:	fb03 f301 	mul.w	r3, r3, r1
 8008776:	4413      	add	r3, r2
 8008778:	3391      	adds	r3, #145	; 0x91
 800877a:	2202      	movs	r2, #2
 800877c:	701a      	strb	r2, [r3, #0]
            break;
 800877e:	e0a6      	b.n	80088ce <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008786:	b2d9      	uxtb	r1, r3
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800878e:	461a      	mov	r2, r3
 8008790:	2334      	movs	r3, #52	; 0x34
 8008792:	fb03 f302 	mul.w	r3, r3, r2
 8008796:	3398      	adds	r3, #152	; 0x98
 8008798:	693a      	ldr	r2, [r7, #16]
 800879a:	4413      	add	r3, r2
 800879c:	3304      	adds	r3, #4
 800879e:	461a      	mov	r2, r3
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f000 fe96 	bl	80094d2 <USBH_MSC_SCSI_RequestSense>
 80087a6:	4603      	mov	r3, r0
 80087a8:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80087aa:	7bfb      	ldrb	r3, [r7, #15]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d145      	bne.n	800883c <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80087b6:	4619      	mov	r1, r3
 80087b8:	693a      	ldr	r2, [r7, #16]
 80087ba:	2334      	movs	r3, #52	; 0x34
 80087bc:	fb03 f301 	mul.w	r3, r3, r1
 80087c0:	4413      	add	r3, r2
 80087c2:	339c      	adds	r3, #156	; 0x9c
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	2b06      	cmp	r3, #6
 80087c8:	d00c      	beq.n	80087e4 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80087d0:	4619      	mov	r1, r3
 80087d2:	693a      	ldr	r2, [r7, #16]
 80087d4:	2334      	movs	r3, #52	; 0x34
 80087d6:	fb03 f301 	mul.w	r3, r3, r1
 80087da:	4413      	add	r3, r2
 80087dc:	339c      	adds	r3, #156	; 0x9c
 80087de:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80087e0:	2b02      	cmp	r3, #2
 80087e2:	d117      	bne.n	8008814 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80087f0:	1ad3      	subs	r3, r2, r3
 80087f2:	f242 720f 	movw	r2, #9999	; 0x270f
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d80c      	bhi.n	8008814 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008800:	4619      	mov	r1, r3
 8008802:	693a      	ldr	r2, [r7, #16]
 8008804:	2334      	movs	r3, #52	; 0x34
 8008806:	fb03 f301 	mul.w	r3, r3, r1
 800880a:	4413      	add	r3, r2
 800880c:	3390      	adds	r3, #144	; 0x90
 800880e:	2202      	movs	r2, #2
 8008810:	701a      	strb	r2, [r3, #0]
                  break;
 8008812:	e05f      	b.n	80088d4 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800881a:	4619      	mov	r1, r3
 800881c:	693a      	ldr	r2, [r7, #16]
 800881e:	2334      	movs	r3, #52	; 0x34
 8008820:	fb03 f301 	mul.w	r3, r3, r1
 8008824:	4413      	add	r3, r2
 8008826:	3390      	adds	r3, #144	; 0x90
 8008828:	2201      	movs	r2, #1
 800882a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008832:	3301      	adds	r3, #1
 8008834:	b29a      	uxth	r2, r3
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800883c:	7bfb      	ldrb	r3, [r7, #15]
 800883e:	2b02      	cmp	r3, #2
 8008840:	d10c      	bne.n	800885c <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008848:	4619      	mov	r1, r3
 800884a:	693a      	ldr	r2, [r7, #16]
 800884c:	2334      	movs	r3, #52	; 0x34
 800884e:	fb03 f301 	mul.w	r3, r3, r1
 8008852:	4413      	add	r3, r2
 8008854:	3390      	adds	r3, #144	; 0x90
 8008856:	2208      	movs	r2, #8
 8008858:	701a      	strb	r2, [r3, #0]
            break;
 800885a:	e03a      	b.n	80088d2 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800885c:	7bfb      	ldrb	r3, [r7, #15]
 800885e:	2b04      	cmp	r3, #4
 8008860:	d137      	bne.n	80088d2 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008868:	4619      	mov	r1, r3
 800886a:	693a      	ldr	r2, [r7, #16]
 800886c:	2334      	movs	r3, #52	; 0x34
 800886e:	fb03 f301 	mul.w	r3, r3, r1
 8008872:	4413      	add	r3, r2
 8008874:	3390      	adds	r3, #144	; 0x90
 8008876:	2201      	movs	r2, #1
 8008878:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008880:	4619      	mov	r1, r3
 8008882:	693a      	ldr	r2, [r7, #16]
 8008884:	2334      	movs	r3, #52	; 0x34
 8008886:	fb03 f301 	mul.w	r3, r3, r1
 800888a:	4413      	add	r3, r2
 800888c:	3391      	adds	r3, #145	; 0x91
 800888e:	2202      	movs	r2, #2
 8008890:	701a      	strb	r2, [r3, #0]
            break;
 8008892:	e01e      	b.n	80088d2 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800889a:	3301      	adds	r3, #1
 800889c:	b29a      	uxth	r2, r3
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 80088a4:	e016      	b.n	80088d4 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	2200      	movs	r2, #0
 80088aa:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	2201      	movs	r2, #1
 80088b2:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80088ba:	2102      	movs	r1, #2
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	4798      	blx	r3
      break;
 80088c0:	e00c      	b.n	80088dc <USBH_MSC_Process+0x514>
            break;
 80088c2:	bf00      	nop
 80088c4:	e00a      	b.n	80088dc <USBH_MSC_Process+0x514>
            break;
 80088c6:	bf00      	nop
 80088c8:	e008      	b.n	80088dc <USBH_MSC_Process+0x514>
            break;
 80088ca:	bf00      	nop
 80088cc:	e006      	b.n	80088dc <USBH_MSC_Process+0x514>
            break;
 80088ce:	bf00      	nop
 80088d0:	e004      	b.n	80088dc <USBH_MSC_Process+0x514>
            break;
 80088d2:	bf00      	nop
      break;
 80088d4:	e002      	b.n	80088dc <USBH_MSC_Process+0x514>
      error = USBH_OK;
 80088d6:	2300      	movs	r3, #0
 80088d8:	75fb      	strb	r3, [r7, #23]
      break;
 80088da:	bf00      	nop
  }
  return error;
 80088dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3718      	adds	r7, #24
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}
 80088e6:	bf00      	nop

080088e8 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b083      	sub	sp, #12
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80088f0:	2300      	movs	r3, #0
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	370c      	adds	r7, #12
 80088f6:	46bd      	mov	sp, r7
 80088f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fc:	4770      	bx	lr

080088fe <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80088fe:	b580      	push	{r7, lr}
 8008900:	b088      	sub	sp, #32
 8008902:	af02      	add	r7, sp, #8
 8008904:	6078      	str	r0, [r7, #4]
 8008906:	460b      	mov	r3, r1
 8008908:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008910:	69db      	ldr	r3, [r3, #28]
 8008912:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8008914:	2301      	movs	r3, #1
 8008916:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8008918:	2301      	movs	r3, #1
 800891a:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800891c:	78fb      	ldrb	r3, [r7, #3]
 800891e:	693a      	ldr	r2, [r7, #16]
 8008920:	2134      	movs	r1, #52	; 0x34
 8008922:	fb01 f303 	mul.w	r3, r1, r3
 8008926:	4413      	add	r3, r2
 8008928:	3390      	adds	r3, #144	; 0x90
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	2b07      	cmp	r3, #7
 800892e:	d03c      	beq.n	80089aa <USBH_MSC_RdWrProcess+0xac>
 8008930:	2b07      	cmp	r3, #7
 8008932:	f300 80a7 	bgt.w	8008a84 <USBH_MSC_RdWrProcess+0x186>
 8008936:	2b05      	cmp	r3, #5
 8008938:	d06c      	beq.n	8008a14 <USBH_MSC_RdWrProcess+0x116>
 800893a:	2b06      	cmp	r3, #6
 800893c:	f040 80a2 	bne.w	8008a84 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8008940:	78f9      	ldrb	r1, [r7, #3]
 8008942:	2300      	movs	r3, #0
 8008944:	9300      	str	r3, [sp, #0]
 8008946:	2300      	movs	r3, #0
 8008948:	2200      	movs	r2, #0
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f000 fea5 	bl	800969a <USBH_MSC_SCSI_Read>
 8008950:	4603      	mov	r3, r0
 8008952:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8008954:	7bfb      	ldrb	r3, [r7, #15]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d10b      	bne.n	8008972 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800895a:	78fb      	ldrb	r3, [r7, #3]
 800895c:	693a      	ldr	r2, [r7, #16]
 800895e:	2134      	movs	r1, #52	; 0x34
 8008960:	fb01 f303 	mul.w	r3, r1, r3
 8008964:	4413      	add	r3, r2
 8008966:	3390      	adds	r3, #144	; 0x90
 8008968:	2201      	movs	r2, #1
 800896a:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800896c:	2300      	movs	r3, #0
 800896e:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008970:	e08a      	b.n	8008a88 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 8008972:	7bfb      	ldrb	r3, [r7, #15]
 8008974:	2b02      	cmp	r3, #2
 8008976:	d109      	bne.n	800898c <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8008978:	78fb      	ldrb	r3, [r7, #3]
 800897a:	693a      	ldr	r2, [r7, #16]
 800897c:	2134      	movs	r1, #52	; 0x34
 800897e:	fb01 f303 	mul.w	r3, r1, r3
 8008982:	4413      	add	r3, r2
 8008984:	3390      	adds	r3, #144	; 0x90
 8008986:	2205      	movs	r2, #5
 8008988:	701a      	strb	r2, [r3, #0]
      break;
 800898a:	e07d      	b.n	8008a88 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800898c:	7bfb      	ldrb	r3, [r7, #15]
 800898e:	2b04      	cmp	r3, #4
 8008990:	d17a      	bne.n	8008a88 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8008992:	78fb      	ldrb	r3, [r7, #3]
 8008994:	693a      	ldr	r2, [r7, #16]
 8008996:	2134      	movs	r1, #52	; 0x34
 8008998:	fb01 f303 	mul.w	r3, r1, r3
 800899c:	4413      	add	r3, r2
 800899e:	3390      	adds	r3, #144	; 0x90
 80089a0:	2208      	movs	r2, #8
 80089a2:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80089a4:	2302      	movs	r3, #2
 80089a6:	75fb      	strb	r3, [r7, #23]
      break;
 80089a8:	e06e      	b.n	8008a88 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 80089aa:	78f9      	ldrb	r1, [r7, #3]
 80089ac:	2300      	movs	r3, #0
 80089ae:	9300      	str	r3, [sp, #0]
 80089b0:	2300      	movs	r3, #0
 80089b2:	2200      	movs	r2, #0
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f000 fe05 	bl	80095c4 <USBH_MSC_SCSI_Write>
 80089ba:	4603      	mov	r3, r0
 80089bc:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80089be:	7bfb      	ldrb	r3, [r7, #15]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d10b      	bne.n	80089dc <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80089c4:	78fb      	ldrb	r3, [r7, #3]
 80089c6:	693a      	ldr	r2, [r7, #16]
 80089c8:	2134      	movs	r1, #52	; 0x34
 80089ca:	fb01 f303 	mul.w	r3, r1, r3
 80089ce:	4413      	add	r3, r2
 80089d0:	3390      	adds	r3, #144	; 0x90
 80089d2:	2201      	movs	r2, #1
 80089d4:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 80089d6:	2300      	movs	r3, #0
 80089d8:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80089da:	e057      	b.n	8008a8c <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 80089dc:	7bfb      	ldrb	r3, [r7, #15]
 80089de:	2b02      	cmp	r3, #2
 80089e0:	d109      	bne.n	80089f6 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80089e2:	78fb      	ldrb	r3, [r7, #3]
 80089e4:	693a      	ldr	r2, [r7, #16]
 80089e6:	2134      	movs	r1, #52	; 0x34
 80089e8:	fb01 f303 	mul.w	r3, r1, r3
 80089ec:	4413      	add	r3, r2
 80089ee:	3390      	adds	r3, #144	; 0x90
 80089f0:	2205      	movs	r2, #5
 80089f2:	701a      	strb	r2, [r3, #0]
      break;
 80089f4:	e04a      	b.n	8008a8c <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80089f6:	7bfb      	ldrb	r3, [r7, #15]
 80089f8:	2b04      	cmp	r3, #4
 80089fa:	d147      	bne.n	8008a8c <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80089fc:	78fb      	ldrb	r3, [r7, #3]
 80089fe:	693a      	ldr	r2, [r7, #16]
 8008a00:	2134      	movs	r1, #52	; 0x34
 8008a02:	fb01 f303 	mul.w	r3, r1, r3
 8008a06:	4413      	add	r3, r2
 8008a08:	3390      	adds	r3, #144	; 0x90
 8008a0a:	2208      	movs	r2, #8
 8008a0c:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8008a0e:	2302      	movs	r3, #2
 8008a10:	75fb      	strb	r3, [r7, #23]
      break;
 8008a12:	e03b      	b.n	8008a8c <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8008a14:	78fb      	ldrb	r3, [r7, #3]
 8008a16:	2234      	movs	r2, #52	; 0x34
 8008a18:	fb02 f303 	mul.w	r3, r2, r3
 8008a1c:	3398      	adds	r3, #152	; 0x98
 8008a1e:	693a      	ldr	r2, [r7, #16]
 8008a20:	4413      	add	r3, r2
 8008a22:	1d1a      	adds	r2, r3, #4
 8008a24:	78fb      	ldrb	r3, [r7, #3]
 8008a26:	4619      	mov	r1, r3
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f000 fd52 	bl	80094d2 <USBH_MSC_SCSI_RequestSense>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8008a32:	7bfb      	ldrb	r3, [r7, #15]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d113      	bne.n	8008a60 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8008a38:	78fb      	ldrb	r3, [r7, #3]
 8008a3a:	693a      	ldr	r2, [r7, #16]
 8008a3c:	2134      	movs	r1, #52	; 0x34
 8008a3e:	fb01 f303 	mul.w	r3, r1, r3
 8008a42:	4413      	add	r3, r2
 8008a44:	3390      	adds	r3, #144	; 0x90
 8008a46:	2201      	movs	r2, #1
 8008a48:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8008a4a:	78fb      	ldrb	r3, [r7, #3]
 8008a4c:	693a      	ldr	r2, [r7, #16]
 8008a4e:	2134      	movs	r1, #52	; 0x34
 8008a50:	fb01 f303 	mul.w	r3, r1, r3
 8008a54:	4413      	add	r3, r2
 8008a56:	3391      	adds	r3, #145	; 0x91
 8008a58:	2202      	movs	r2, #2
 8008a5a:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 8008a5c:	2302      	movs	r3, #2
 8008a5e:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 8008a60:	7bfb      	ldrb	r3, [r7, #15]
 8008a62:	2b02      	cmp	r3, #2
 8008a64:	d014      	beq.n	8008a90 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008a66:	7bfb      	ldrb	r3, [r7, #15]
 8008a68:	2b04      	cmp	r3, #4
 8008a6a:	d111      	bne.n	8008a90 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8008a6c:	78fb      	ldrb	r3, [r7, #3]
 8008a6e:	693a      	ldr	r2, [r7, #16]
 8008a70:	2134      	movs	r1, #52	; 0x34
 8008a72:	fb01 f303 	mul.w	r3, r1, r3
 8008a76:	4413      	add	r3, r2
 8008a78:	3390      	adds	r3, #144	; 0x90
 8008a7a:	2208      	movs	r2, #8
 8008a7c:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8008a7e:	2302      	movs	r3, #2
 8008a80:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008a82:	e005      	b.n	8008a90 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 8008a84:	bf00      	nop
 8008a86:	e004      	b.n	8008a92 <USBH_MSC_RdWrProcess+0x194>
      break;
 8008a88:	bf00      	nop
 8008a8a:	e002      	b.n	8008a92 <USBH_MSC_RdWrProcess+0x194>
      break;
 8008a8c:	bf00      	nop
 8008a8e:	e000      	b.n	8008a92 <USBH_MSC_RdWrProcess+0x194>
      break;
 8008a90:	bf00      	nop

  }
  return error;
 8008a92:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3718      	adds	r7, #24
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}

08008a9c <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b085      	sub	sp, #20
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	460b      	mov	r3, r1
 8008aa6:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008aae:	69db      	ldr	r3, [r3, #28]
 8008ab0:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	781b      	ldrb	r3, [r3, #0]
 8008ab6:	b2db      	uxtb	r3, r3
 8008ab8:	2b0b      	cmp	r3, #11
 8008aba:	d10c      	bne.n	8008ad6 <USBH_MSC_UnitIsReady+0x3a>
 8008abc:	78fb      	ldrb	r3, [r7, #3]
 8008abe:	68ba      	ldr	r2, [r7, #8]
 8008ac0:	2134      	movs	r1, #52	; 0x34
 8008ac2:	fb01 f303 	mul.w	r3, r1, r3
 8008ac6:	4413      	add	r3, r2
 8008ac8:	3391      	adds	r3, #145	; 0x91
 8008aca:	781b      	ldrb	r3, [r3, #0]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d102      	bne.n	8008ad6 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	73fb      	strb	r3, [r7, #15]
 8008ad4:	e001      	b.n	8008ada <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8008ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3714      	adds	r7, #20
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae6:	4770      	bx	lr

08008ae8 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b086      	sub	sp, #24
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	60f8      	str	r0, [r7, #12]
 8008af0:	460b      	mov	r3, r1
 8008af2:	607a      	str	r2, [r7, #4]
 8008af4:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008afc:	69db      	ldr	r3, [r3, #28]
 8008afe:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	781b      	ldrb	r3, [r3, #0]
 8008b04:	b2db      	uxtb	r3, r3
 8008b06:	2b0b      	cmp	r3, #11
 8008b08:	d10d      	bne.n	8008b26 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8008b0a:	7afb      	ldrb	r3, [r7, #11]
 8008b0c:	2234      	movs	r2, #52	; 0x34
 8008b0e:	fb02 f303 	mul.w	r3, r2, r3
 8008b12:	3390      	adds	r3, #144	; 0x90
 8008b14:	697a      	ldr	r2, [r7, #20]
 8008b16:	4413      	add	r3, r2
 8008b18:	2234      	movs	r2, #52	; 0x34
 8008b1a:	4619      	mov	r1, r3
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f002 fd4d 	bl	800b5bc <memcpy>
    return USBH_OK;
 8008b22:	2300      	movs	r3, #0
 8008b24:	e000      	b.n	8008b28 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8008b26:	2302      	movs	r3, #2
  }
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3718      	adds	r7, #24
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b088      	sub	sp, #32
 8008b34:	af02      	add	r7, sp, #8
 8008b36:	60f8      	str	r0, [r7, #12]
 8008b38:	607a      	str	r2, [r7, #4]
 8008b3a:	603b      	str	r3, [r7, #0]
 8008b3c:	460b      	mov	r3, r1
 8008b3e:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b46:	69db      	ldr	r3, [r3, #28]
 8008b48:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008b50:	b2db      	uxtb	r3, r3
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d00e      	beq.n	8008b74 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8008b5c:	2b0b      	cmp	r3, #11
 8008b5e:	d109      	bne.n	8008b74 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8008b60:	7afb      	ldrb	r3, [r7, #11]
 8008b62:	697a      	ldr	r2, [r7, #20]
 8008b64:	2134      	movs	r1, #52	; 0x34
 8008b66:	fb01 f303 	mul.w	r3, r1, r3
 8008b6a:	4413      	add	r3, r2
 8008b6c:	3390      	adds	r3, #144	; 0x90
 8008b6e:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	d001      	beq.n	8008b78 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8008b74:	2302      	movs	r3, #2
 8008b76:	e040      	b.n	8008bfa <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	2206      	movs	r2, #6
 8008b7c:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8008b7e:	7afb      	ldrb	r3, [r7, #11]
 8008b80:	697a      	ldr	r2, [r7, #20]
 8008b82:	2134      	movs	r1, #52	; 0x34
 8008b84:	fb01 f303 	mul.w	r3, r1, r3
 8008b88:	4413      	add	r3, r2
 8008b8a:	3390      	adds	r3, #144	; 0x90
 8008b8c:	2206      	movs	r2, #6
 8008b8e:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8008b90:	7afb      	ldrb	r3, [r7, #11]
 8008b92:	b29a      	uxth	r2, r3
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8008b9a:	7af9      	ldrb	r1, [r7, #11]
 8008b9c:	6a3b      	ldr	r3, [r7, #32]
 8008b9e:	9300      	str	r3, [sp, #0]
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	687a      	ldr	r2, [r7, #4]
 8008ba4:	68f8      	ldr	r0, [r7, #12]
 8008ba6:	f000 fd78 	bl	800969a <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008bb0:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008bb2:	e016      	b.n	8008be2 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	1ad2      	subs	r2, r2, r3
 8008bbe:	6a3b      	ldr	r3, [r7, #32]
 8008bc0:	f242 7110 	movw	r1, #10000	; 0x2710
 8008bc4:	fb01 f303 	mul.w	r3, r1, r3
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	d805      	bhi.n	8008bd8 <USBH_MSC_Read+0xa8>
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008bd2:	b2db      	uxtb	r3, r3
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d104      	bne.n	8008be2 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	2201      	movs	r2, #1
 8008bdc:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8008bde:	2302      	movs	r3, #2
 8008be0:	e00b      	b.n	8008bfa <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008be2:	7afb      	ldrb	r3, [r7, #11]
 8008be4:	4619      	mov	r1, r3
 8008be6:	68f8      	ldr	r0, [r7, #12]
 8008be8:	f7ff fe89 	bl	80088fe <USBH_MSC_RdWrProcess>
 8008bec:	4603      	mov	r3, r0
 8008bee:	2b01      	cmp	r3, #1
 8008bf0:	d0e0      	beq.n	8008bb4 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8008bf8:	2300      	movs	r3, #0
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3718      	adds	r7, #24
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}

08008c02 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8008c02:	b580      	push	{r7, lr}
 8008c04:	b088      	sub	sp, #32
 8008c06:	af02      	add	r7, sp, #8
 8008c08:	60f8      	str	r0, [r7, #12]
 8008c0a:	607a      	str	r2, [r7, #4]
 8008c0c:	603b      	str	r3, [r7, #0]
 8008c0e:	460b      	mov	r3, r1
 8008c10:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c18:	69db      	ldr	r3, [r3, #28]
 8008c1a:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008c22:	b2db      	uxtb	r3, r3
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d00e      	beq.n	8008c46 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	781b      	ldrb	r3, [r3, #0]
 8008c2c:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8008c2e:	2b0b      	cmp	r3, #11
 8008c30:	d109      	bne.n	8008c46 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8008c32:	7afb      	ldrb	r3, [r7, #11]
 8008c34:	697a      	ldr	r2, [r7, #20]
 8008c36:	2134      	movs	r1, #52	; 0x34
 8008c38:	fb01 f303 	mul.w	r3, r1, r3
 8008c3c:	4413      	add	r3, r2
 8008c3e:	3390      	adds	r3, #144	; 0x90
 8008c40:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8008c42:	2b01      	cmp	r3, #1
 8008c44:	d001      	beq.n	8008c4a <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8008c46:	2302      	movs	r3, #2
 8008c48:	e040      	b.n	8008ccc <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	2207      	movs	r2, #7
 8008c4e:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8008c50:	7afb      	ldrb	r3, [r7, #11]
 8008c52:	697a      	ldr	r2, [r7, #20]
 8008c54:	2134      	movs	r1, #52	; 0x34
 8008c56:	fb01 f303 	mul.w	r3, r1, r3
 8008c5a:	4413      	add	r3, r2
 8008c5c:	3390      	adds	r3, #144	; 0x90
 8008c5e:	2207      	movs	r2, #7
 8008c60:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8008c62:	7afb      	ldrb	r3, [r7, #11]
 8008c64:	b29a      	uxth	r2, r3
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8008c6c:	7af9      	ldrb	r1, [r7, #11]
 8008c6e:	6a3b      	ldr	r3, [r7, #32]
 8008c70:	9300      	str	r3, [sp, #0]
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	687a      	ldr	r2, [r7, #4]
 8008c76:	68f8      	ldr	r0, [r7, #12]
 8008c78:	f000 fca4 	bl	80095c4 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008c82:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008c84:	e016      	b.n	8008cb4 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	1ad2      	subs	r2, r2, r3
 8008c90:	6a3b      	ldr	r3, [r7, #32]
 8008c92:	f242 7110 	movw	r1, #10000	; 0x2710
 8008c96:	fb01 f303 	mul.w	r3, r1, r3
 8008c9a:	429a      	cmp	r2, r3
 8008c9c:	d805      	bhi.n	8008caa <USBH_MSC_Write+0xa8>
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008ca4:	b2db      	uxtb	r3, r3
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d104      	bne.n	8008cb4 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	2201      	movs	r2, #1
 8008cae:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8008cb0:	2302      	movs	r3, #2
 8008cb2:	e00b      	b.n	8008ccc <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008cb4:	7afb      	ldrb	r3, [r7, #11]
 8008cb6:	4619      	mov	r1, r3
 8008cb8:	68f8      	ldr	r0, [r7, #12]
 8008cba:	f7ff fe20 	bl	80088fe <USBH_MSC_RdWrProcess>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	2b01      	cmp	r3, #1
 8008cc2:	d0e0      	beq.n	8008c86 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8008cca:	2300      	movs	r3, #0
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3718      	adds	r7, #24
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b082      	sub	sp, #8
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2221      	movs	r2, #33	; 0x21
 8008ce0:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	22ff      	movs	r2, #255	; 0xff
 8008ce6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2200      	movs	r2, #0
 8008cec:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	2100      	movs	r1, #0
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f001 fdab 	bl	800a85a <USBH_CtlReq>
 8008d04:	4603      	mov	r3, r0
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3708      	adds	r7, #8
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}

08008d0e <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8008d0e:	b580      	push	{r7, lr}
 8008d10:	b082      	sub	sp, #8
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	6078      	str	r0, [r7, #4]
 8008d16:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	22a1      	movs	r2, #161	; 0xa1
 8008d1c:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	22fe      	movs	r2, #254	; 0xfe
 8008d22:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2200      	movs	r2, #0
 8008d28:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2201      	movs	r2, #1
 8008d34:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8008d36:	2201      	movs	r2, #1
 8008d38:	6839      	ldr	r1, [r7, #0]
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f001 fd8d 	bl	800a85a <USBH_CtlReq>
 8008d40:	4603      	mov	r3, r0
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3708      	adds	r7, #8
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}
	...

08008d4c <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b085      	sub	sp, #20
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d5a:	69db      	ldr	r3, [r3, #28]
 8008d5c:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	4a09      	ldr	r2, [pc, #36]	; (8008d88 <USBH_MSC_BOT_Init+0x3c>)
 8008d62:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	4a09      	ldr	r2, [pc, #36]	; (8008d8c <USBH_MSC_BOT_Init+0x40>)
 8008d68:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2201      	movs	r2, #1
 8008d76:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8008d7a:	2300      	movs	r3, #0
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3714      	adds	r7, #20
 8008d80:	46bd      	mov	sp, r7
 8008d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d86:	4770      	bx	lr
 8008d88:	43425355 	.word	0x43425355
 8008d8c:	20304050 	.word	0x20304050

08008d90 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b088      	sub	sp, #32
 8008d94:	af02      	add	r7, sp, #8
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	460b      	mov	r3, r1
 8008d9a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8008da0:	2301      	movs	r3, #1
 8008da2:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8008da4:	2301      	movs	r3, #1
 8008da6:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008da8:	2300      	movs	r3, #0
 8008daa:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008db2:	69db      	ldr	r3, [r3, #28]
 8008db4:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8008db6:	2300      	movs	r3, #0
 8008db8:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8008dba:	693b      	ldr	r3, [r7, #16]
 8008dbc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008dc0:	3b01      	subs	r3, #1
 8008dc2:	2b0a      	cmp	r3, #10
 8008dc4:	f200 819e 	bhi.w	8009104 <USBH_MSC_BOT_Process+0x374>
 8008dc8:	a201      	add	r2, pc, #4	; (adr r2, 8008dd0 <USBH_MSC_BOT_Process+0x40>)
 8008dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dce:	bf00      	nop
 8008dd0:	08008dfd 	.word	0x08008dfd
 8008dd4:	08008e25 	.word	0x08008e25
 8008dd8:	08008e8f 	.word	0x08008e8f
 8008ddc:	08008ead 	.word	0x08008ead
 8008de0:	08008f31 	.word	0x08008f31
 8008de4:	08008f53 	.word	0x08008f53
 8008de8:	08008feb 	.word	0x08008feb
 8008dec:	08009007 	.word	0x08009007
 8008df0:	08009059 	.word	0x08009059
 8008df4:	08009089 	.word	0x08009089
 8008df8:	080090eb 	.word	0x080090eb
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	78fa      	ldrb	r2, [r7, #3]
 8008e00:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	2202      	movs	r2, #2
 8008e08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	795b      	ldrb	r3, [r3, #5]
 8008e16:	2201      	movs	r2, #1
 8008e18:	9200      	str	r2, [sp, #0]
 8008e1a:	221f      	movs	r2, #31
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f001 ff2a 	bl	800ac76 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8008e22:	e17e      	b.n	8009122 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	795b      	ldrb	r3, [r3, #5]
 8008e28:	4619      	mov	r1, r3
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f002 faae 	bl	800b38c <USBH_LL_GetURBState>
 8008e30:	4603      	mov	r3, r0
 8008e32:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8008e34:	7d3b      	ldrb	r3, [r7, #20]
 8008e36:	2b01      	cmp	r3, #1
 8008e38:	d118      	bne.n	8008e6c <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d00f      	beq.n	8008e62 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8008e48:	b25b      	sxtb	r3, r3
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	da04      	bge.n	8008e58 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	2203      	movs	r2, #3
 8008e52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008e56:	e157      	b.n	8009108 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	2205      	movs	r2, #5
 8008e5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008e60:	e152      	b.n	8009108 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	2207      	movs	r2, #7
 8008e66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008e6a:	e14d      	b.n	8009108 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008e6c:	7d3b      	ldrb	r3, [r7, #20]
 8008e6e:	2b02      	cmp	r3, #2
 8008e70:	d104      	bne.n	8008e7c <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	2201      	movs	r2, #1
 8008e76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008e7a:	e145      	b.n	8009108 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 8008e7c:	7d3b      	ldrb	r3, [r7, #20]
 8008e7e:	2b05      	cmp	r3, #5
 8008e80:	f040 8142 	bne.w	8009108 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	220a      	movs	r2, #10
 8008e88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008e8c:	e13c      	b.n	8009108 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8008e8e:	693b      	ldr	r3, [r7, #16]
 8008e90:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	895a      	ldrh	r2, [r3, #10]
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	791b      	ldrb	r3, [r3, #4]
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f001 ff0f 	bl	800acc0 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	2204      	movs	r2, #4
 8008ea6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8008eaa:	e13a      	b.n	8009122 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	791b      	ldrb	r3, [r3, #4]
 8008eb0:	4619      	mov	r1, r3
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f002 fa6a 	bl	800b38c <USBH_LL_GetURBState>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8008ebc:	7d3b      	ldrb	r3, [r7, #20]
 8008ebe:	2b01      	cmp	r3, #1
 8008ec0:	d12d      	bne.n	8008f1e <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ec6:	693a      	ldr	r2, [r7, #16]
 8008ec8:	8952      	ldrh	r2, [r2, #10]
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d910      	bls.n	8008ef0 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ed4:	693a      	ldr	r2, [r7, #16]
 8008ed6:	8952      	ldrh	r2, [r2, #10]
 8008ed8:	441a      	add	r2, r3
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ee4:	693a      	ldr	r2, [r7, #16]
 8008ee6:	8952      	ldrh	r2, [r2, #10]
 8008ee8:	1a9a      	subs	r2, r3, r2
 8008eea:	693b      	ldr	r3, [r7, #16]
 8008eec:	65da      	str	r2, [r3, #92]	; 0x5c
 8008eee:	e002      	b.n	8008ef6 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8008ef0:	693b      	ldr	r3, [r7, #16]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d00a      	beq.n	8008f14 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	895a      	ldrh	r2, [r3, #10]
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	791b      	ldrb	r3, [r3, #4]
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f001 fed7 	bl	800acc0 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8008f12:	e0fb      	b.n	800910c <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	2207      	movs	r2, #7
 8008f18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008f1c:	e0f6      	b.n	800910c <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 8008f1e:	7d3b      	ldrb	r3, [r7, #20]
 8008f20:	2b05      	cmp	r3, #5
 8008f22:	f040 80f3 	bne.w	800910c <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8008f26:	693b      	ldr	r3, [r7, #16]
 8008f28:	2209      	movs	r2, #9
 8008f2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008f2e:	e0ed      	b.n	800910c <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	891a      	ldrh	r2, [r3, #8]
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	795b      	ldrb	r3, [r3, #5]
 8008f3e:	2001      	movs	r0, #1
 8008f40:	9000      	str	r0, [sp, #0]
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f001 fe97 	bl	800ac76 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	2206      	movs	r2, #6
 8008f4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008f50:	e0e7      	b.n	8009122 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	795b      	ldrb	r3, [r3, #5]
 8008f56:	4619      	mov	r1, r3
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f002 fa17 	bl	800b38c <USBH_LL_GetURBState>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8008f62:	7d3b      	ldrb	r3, [r7, #20]
 8008f64:	2b01      	cmp	r3, #1
 8008f66:	d12f      	bne.n	8008fc8 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f6c:	693a      	ldr	r2, [r7, #16]
 8008f6e:	8912      	ldrh	r2, [r2, #8]
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d910      	bls.n	8008f96 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f7a:	693a      	ldr	r2, [r7, #16]
 8008f7c:	8912      	ldrh	r2, [r2, #8]
 8008f7e:	441a      	add	r2, r3
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f8a:	693a      	ldr	r2, [r7, #16]
 8008f8c:	8912      	ldrh	r2, [r2, #8]
 8008f8e:	1a9a      	subs	r2, r3, r2
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	65da      	str	r2, [r3, #92]	; 0x5c
 8008f94:	e002      	b.n	8008f9c <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d00c      	beq.n	8008fbe <USBH_MSC_BOT_Process+0x22e>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	891a      	ldrh	r2, [r3, #8]
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	795b      	ldrb	r3, [r3, #5]
 8008fb2:	2001      	movs	r0, #1
 8008fb4:	9000      	str	r0, [sp, #0]
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f001 fe5d 	bl	800ac76 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8008fbc:	e0a8      	b.n	8009110 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	2207      	movs	r2, #7
 8008fc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008fc6:	e0a3      	b.n	8009110 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008fc8:	7d3b      	ldrb	r3, [r7, #20]
 8008fca:	2b02      	cmp	r3, #2
 8008fcc:	d104      	bne.n	8008fd8 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	2205      	movs	r2, #5
 8008fd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008fd6:	e09b      	b.n	8009110 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 8008fd8:	7d3b      	ldrb	r3, [r7, #20]
 8008fda:	2b05      	cmp	r3, #5
 8008fdc:	f040 8098 	bne.w	8009110 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	220a      	movs	r2, #10
 8008fe4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008fe8:	e092      	b.n	8009110 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	791b      	ldrb	r3, [r3, #4]
 8008ff4:	220d      	movs	r2, #13
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f001 fe62 	bl	800acc0 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	2208      	movs	r2, #8
 8009000:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009004:	e08d      	b.n	8009122 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	791b      	ldrb	r3, [r3, #4]
 800900a:	4619      	mov	r1, r3
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f002 f9bd 	bl	800b38c <USBH_LL_GetURBState>
 8009012:	4603      	mov	r3, r0
 8009014:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8009016:	7d3b      	ldrb	r3, [r7, #20]
 8009018:	2b01      	cmp	r3, #1
 800901a:	d115      	bne.n	8009048 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	2201      	movs	r2, #1
 8009020:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	2201      	movs	r2, #1
 8009028:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f000 f8a9 	bl	8009184 <USBH_MSC_DecodeCSW>
 8009032:	4603      	mov	r3, r0
 8009034:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8009036:	7d7b      	ldrb	r3, [r7, #21]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d102      	bne.n	8009042 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800903c:	2300      	movs	r3, #0
 800903e:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8009040:	e068      	b.n	8009114 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 8009042:	2302      	movs	r3, #2
 8009044:	75fb      	strb	r3, [r7, #23]
      break;
 8009046:	e065      	b.n	8009114 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 8009048:	7d3b      	ldrb	r3, [r7, #20]
 800904a:	2b05      	cmp	r3, #5
 800904c:	d162      	bne.n	8009114 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	2209      	movs	r2, #9
 8009052:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009056:	e05d      	b.n	8009114 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8009058:	78fb      	ldrb	r3, [r7, #3]
 800905a:	2200      	movs	r2, #0
 800905c:	4619      	mov	r1, r3
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 f864 	bl	800912c <USBH_MSC_BOT_Abort>
 8009064:	4603      	mov	r3, r0
 8009066:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009068:	7dbb      	ldrb	r3, [r7, #22]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d104      	bne.n	8009078 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	2207      	movs	r2, #7
 8009072:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8009076:	e04f      	b.n	8009118 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 8009078:	7dbb      	ldrb	r3, [r7, #22]
 800907a:	2b04      	cmp	r3, #4
 800907c:	d14c      	bne.n	8009118 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	220b      	movs	r2, #11
 8009082:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009086:	e047      	b.n	8009118 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8009088:	78fb      	ldrb	r3, [r7, #3]
 800908a:	2201      	movs	r2, #1
 800908c:	4619      	mov	r1, r3
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f000 f84c 	bl	800912c <USBH_MSC_BOT_Abort>
 8009094:	4603      	mov	r3, r0
 8009096:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009098:	7dbb      	ldrb	r3, [r7, #22]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d11d      	bne.n	80090da <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800909e:	693b      	ldr	r3, [r7, #16]
 80090a0:	795b      	ldrb	r3, [r3, #5]
 80090a2:	4619      	mov	r1, r3
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f002 f9cb 	bl	800b440 <USBH_LL_GetToggle>
 80090aa:	4603      	mov	r3, r0
 80090ac:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 80090ae:	693b      	ldr	r3, [r7, #16]
 80090b0:	7959      	ldrb	r1, [r3, #5]
 80090b2:	7bfb      	ldrb	r3, [r7, #15]
 80090b4:	f1c3 0301 	rsb	r3, r3, #1
 80090b8:	b2db      	uxtb	r3, r3
 80090ba:	461a      	mov	r2, r3
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f002 f98f 	bl	800b3e0 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 80090c2:	693b      	ldr	r3, [r7, #16]
 80090c4:	791b      	ldrb	r3, [r3, #4]
 80090c6:	2200      	movs	r2, #0
 80090c8:	4619      	mov	r1, r3
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f002 f988 	bl	800b3e0 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	2209      	movs	r2, #9
 80090d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 80090d8:	e020      	b.n	800911c <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 80090da:	7dbb      	ldrb	r3, [r7, #22]
 80090dc:	2b04      	cmp	r3, #4
 80090de:	d11d      	bne.n	800911c <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	220b      	movs	r2, #11
 80090e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80090e8:	e018      	b.n	800911c <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f7ff fdf2 	bl	8008cd4 <USBH_MSC_BOT_REQ_Reset>
 80090f0:	4603      	mov	r3, r0
 80090f2:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 80090f4:	7dfb      	ldrb	r3, [r7, #23]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d112      	bne.n	8009120 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	2201      	movs	r2, #1
 80090fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8009102:	e00d      	b.n	8009120 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 8009104:	bf00      	nop
 8009106:	e00c      	b.n	8009122 <USBH_MSC_BOT_Process+0x392>
      break;
 8009108:	bf00      	nop
 800910a:	e00a      	b.n	8009122 <USBH_MSC_BOT_Process+0x392>
      break;
 800910c:	bf00      	nop
 800910e:	e008      	b.n	8009122 <USBH_MSC_BOT_Process+0x392>
      break;
 8009110:	bf00      	nop
 8009112:	e006      	b.n	8009122 <USBH_MSC_BOT_Process+0x392>
      break;
 8009114:	bf00      	nop
 8009116:	e004      	b.n	8009122 <USBH_MSC_BOT_Process+0x392>
      break;
 8009118:	bf00      	nop
 800911a:	e002      	b.n	8009122 <USBH_MSC_BOT_Process+0x392>
      break;
 800911c:	bf00      	nop
 800911e:	e000      	b.n	8009122 <USBH_MSC_BOT_Process+0x392>
      break;
 8009120:	bf00      	nop
  }
  return status;
 8009122:	7dfb      	ldrb	r3, [r7, #23]
}
 8009124:	4618      	mov	r0, r3
 8009126:	3718      	adds	r7, #24
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}

0800912c <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b084      	sub	sp, #16
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	460b      	mov	r3, r1
 8009136:	70fb      	strb	r3, [r7, #3]
 8009138:	4613      	mov	r3, r2
 800913a:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800913c:	2302      	movs	r3, #2
 800913e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009146:	69db      	ldr	r3, [r3, #28]
 8009148:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800914a:	78bb      	ldrb	r3, [r7, #2]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d002      	beq.n	8009156 <USBH_MSC_BOT_Abort+0x2a>
 8009150:	2b01      	cmp	r3, #1
 8009152:	d009      	beq.n	8009168 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8009154:	e011      	b.n	800917a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	79db      	ldrb	r3, [r3, #7]
 800915a:	4619      	mov	r1, r3
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f001 f99c 	bl	800a49a <USBH_ClrFeature>
 8009162:	4603      	mov	r3, r0
 8009164:	73fb      	strb	r3, [r7, #15]
      break;
 8009166:	e008      	b.n	800917a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	799b      	ldrb	r3, [r3, #6]
 800916c:	4619      	mov	r1, r3
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f001 f993 	bl	800a49a <USBH_ClrFeature>
 8009174:	4603      	mov	r3, r0
 8009176:	73fb      	strb	r3, [r7, #15]
      break;
 8009178:	bf00      	nop
  }
  return status;
 800917a:	7bfb      	ldrb	r3, [r7, #15]
}
 800917c:	4618      	mov	r0, r3
 800917e:	3710      	adds	r7, #16
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}

08009184 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b084      	sub	sp, #16
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009192:	69db      	ldr	r3, [r3, #28]
 8009194:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8009196:	2301      	movs	r3, #1
 8009198:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	791b      	ldrb	r3, [r3, #4]
 800919e:	4619      	mov	r1, r3
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f002 f861 	bl	800b268 <USBH_LL_GetLastXferSize>
 80091a6:	4603      	mov	r3, r0
 80091a8:	2b0d      	cmp	r3, #13
 80091aa:	d002      	beq.n	80091b2 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 80091ac:	2302      	movs	r3, #2
 80091ae:	73fb      	strb	r3, [r7, #15]
 80091b0:	e024      	b.n	80091fc <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80091b6:	4a14      	ldr	r2, [pc, #80]	; (8009208 <USBH_MSC_DecodeCSW+0x84>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d11d      	bne.n	80091f8 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091c4:	429a      	cmp	r2, r3
 80091c6:	d119      	bne.n	80091fc <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d102      	bne.n	80091d8 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 80091d2:	2300      	movs	r3, #0
 80091d4:	73fb      	strb	r3, [r7, #15]
 80091d6:	e011      	b.n	80091fc <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80091de:	2b01      	cmp	r3, #1
 80091e0:	d102      	bne.n	80091e8 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 80091e2:	2301      	movs	r3, #1
 80091e4:	73fb      	strb	r3, [r7, #15]
 80091e6:	e009      	b.n	80091fc <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80091ee:	2b02      	cmp	r3, #2
 80091f0:	d104      	bne.n	80091fc <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 80091f2:	2302      	movs	r3, #2
 80091f4:	73fb      	strb	r3, [r7, #15]
 80091f6:	e001      	b.n	80091fc <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 80091f8:	2302      	movs	r3, #2
 80091fa:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 80091fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3710      	adds	r7, #16
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}
 8009206:	bf00      	nop
 8009208:	53425355 	.word	0x53425355

0800920c <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b084      	sub	sp, #16
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
 8009214:	460b      	mov	r3, r1
 8009216:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009218:	2302      	movs	r3, #2
 800921a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009222:	69db      	ldr	r3, [r3, #28]
 8009224:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800922c:	2b01      	cmp	r3, #1
 800922e:	d002      	beq.n	8009236 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8009230:	2b02      	cmp	r3, #2
 8009232:	d021      	beq.n	8009278 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8009234:	e028      	b.n	8009288 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	2200      	movs	r2, #0
 800923a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	2200      	movs	r2, #0
 8009240:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	220a      	movs	r2, #10
 8009248:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	3363      	adds	r3, #99	; 0x63
 8009250:	2210      	movs	r2, #16
 8009252:	2100      	movs	r1, #0
 8009254:	4618      	mov	r0, r3
 8009256:	f002 f9bf 	bl	800b5d8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	2200      	movs	r2, #0
 800925e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	2201      	movs	r2, #1
 8009266:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	2202      	movs	r2, #2
 800926e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8009272:	2301      	movs	r3, #1
 8009274:	73fb      	strb	r3, [r7, #15]
      break;
 8009276:	e007      	b.n	8009288 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009278:	78fb      	ldrb	r3, [r7, #3]
 800927a:	4619      	mov	r1, r3
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f7ff fd87 	bl	8008d90 <USBH_MSC_BOT_Process>
 8009282:	4603      	mov	r3, r0
 8009284:	73fb      	strb	r3, [r7, #15]
      break;
 8009286:	bf00      	nop
  }

  return error;
 8009288:	7bfb      	ldrb	r3, [r7, #15]
}
 800928a:	4618      	mov	r0, r3
 800928c:	3710      	adds	r7, #16
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}

08009292 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8009292:	b580      	push	{r7, lr}
 8009294:	b086      	sub	sp, #24
 8009296:	af00      	add	r7, sp, #0
 8009298:	60f8      	str	r0, [r7, #12]
 800929a:	460b      	mov	r3, r1
 800929c:	607a      	str	r2, [r7, #4]
 800929e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 80092a0:	2301      	movs	r3, #1
 80092a2:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80092aa:	69db      	ldr	r3, [r3, #28]
 80092ac:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80092b4:	2b01      	cmp	r3, #1
 80092b6:	d002      	beq.n	80092be <USBH_MSC_SCSI_ReadCapacity+0x2c>
 80092b8:	2b02      	cmp	r3, #2
 80092ba:	d027      	beq.n	800930c <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 80092bc:	e05f      	b.n	800937e <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	2208      	movs	r2, #8
 80092c2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	2280      	movs	r2, #128	; 0x80
 80092c8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80092cc:	693b      	ldr	r3, [r7, #16]
 80092ce:	220a      	movs	r2, #10
 80092d0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	3363      	adds	r3, #99	; 0x63
 80092d8:	2210      	movs	r2, #16
 80092da:	2100      	movs	r1, #0
 80092dc:	4618      	mov	r0, r3
 80092de:	f002 f97b 	bl	800b5d8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	2225      	movs	r2, #37	; 0x25
 80092e6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	2201      	movs	r2, #1
 80092ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	2202      	movs	r2, #2
 80092f6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80092fa:	693b      	ldr	r3, [r7, #16]
 80092fc:	f103 0210 	add.w	r2, r3, #16
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009306:	2301      	movs	r3, #1
 8009308:	75fb      	strb	r3, [r7, #23]
      break;
 800930a:	e038      	b.n	800937e <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800930c:	7afb      	ldrb	r3, [r7, #11]
 800930e:	4619      	mov	r1, r3
 8009310:	68f8      	ldr	r0, [r7, #12]
 8009312:	f7ff fd3d 	bl	8008d90 <USBH_MSC_BOT_Process>
 8009316:	4603      	mov	r3, r0
 8009318:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800931a:	7dfb      	ldrb	r3, [r7, #23]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d12d      	bne.n	800937c <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009320:	693b      	ldr	r3, [r7, #16]
 8009322:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009326:	3303      	adds	r3, #3
 8009328:	781b      	ldrb	r3, [r3, #0]
 800932a:	461a      	mov	r2, r3
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009332:	3302      	adds	r3, #2
 8009334:	781b      	ldrb	r3, [r3, #0]
 8009336:	021b      	lsls	r3, r3, #8
 8009338:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009340:	3301      	adds	r3, #1
 8009342:	781b      	ldrb	r3, [r3, #0]
 8009344:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009346:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800934e:	781b      	ldrb	r3, [r3, #0]
 8009350:	061b      	lsls	r3, r3, #24
 8009352:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800935e:	3307      	adds	r3, #7
 8009360:	781b      	ldrb	r3, [r3, #0]
 8009362:	b29a      	uxth	r2, r3
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800936a:	3306      	adds	r3, #6
 800936c:	781b      	ldrb	r3, [r3, #0]
 800936e:	b29b      	uxth	r3, r3
 8009370:	021b      	lsls	r3, r3, #8
 8009372:	b29b      	uxth	r3, r3
 8009374:	4313      	orrs	r3, r2
 8009376:	b29a      	uxth	r2, r3
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	809a      	strh	r2, [r3, #4]
      break;
 800937c:	bf00      	nop
  }

  return error;
 800937e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009380:	4618      	mov	r0, r3
 8009382:	3718      	adds	r7, #24
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}

08009388 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b086      	sub	sp, #24
 800938c:	af00      	add	r7, sp, #0
 800938e:	60f8      	str	r0, [r7, #12]
 8009390:	460b      	mov	r3, r1
 8009392:	607a      	str	r2, [r7, #4]
 8009394:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8009396:	2302      	movs	r3, #2
 8009398:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80093a0:	69db      	ldr	r3, [r3, #28]
 80093a2:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80093aa:	2b01      	cmp	r3, #1
 80093ac:	d002      	beq.n	80093b4 <USBH_MSC_SCSI_Inquiry+0x2c>
 80093ae:	2b02      	cmp	r3, #2
 80093b0:	d03d      	beq.n	800942e <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 80093b2:	e089      	b.n	80094c8 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	2224      	movs	r2, #36	; 0x24
 80093b8:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	2280      	movs	r2, #128	; 0x80
 80093be:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	220a      	movs	r2, #10
 80093c6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 80093ca:	693b      	ldr	r3, [r7, #16]
 80093cc:	3363      	adds	r3, #99	; 0x63
 80093ce:	220a      	movs	r2, #10
 80093d0:	2100      	movs	r1, #0
 80093d2:	4618      	mov	r0, r3
 80093d4:	f002 f900 	bl	800b5d8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	2212      	movs	r2, #18
 80093dc:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80093e0:	7afb      	ldrb	r3, [r7, #11]
 80093e2:	015b      	lsls	r3, r3, #5
 80093e4:	b2da      	uxtb	r2, r3
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 80093ec:	693b      	ldr	r3, [r7, #16]
 80093ee:	2200      	movs	r2, #0
 80093f0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	2200      	movs	r2, #0
 80093f8:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	2224      	movs	r2, #36	; 0x24
 8009400:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	2200      	movs	r2, #0
 8009408:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	2201      	movs	r2, #1
 8009410:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	2202      	movs	r2, #2
 8009418:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800941c:	693b      	ldr	r3, [r7, #16]
 800941e:	f103 0210 	add.w	r2, r3, #16
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009428:	2301      	movs	r3, #1
 800942a:	75fb      	strb	r3, [r7, #23]
      break;
 800942c:	e04c      	b.n	80094c8 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800942e:	7afb      	ldrb	r3, [r7, #11]
 8009430:	4619      	mov	r1, r3
 8009432:	68f8      	ldr	r0, [r7, #12]
 8009434:	f7ff fcac 	bl	8008d90 <USBH_MSC_BOT_Process>
 8009438:	4603      	mov	r3, r0
 800943a:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800943c:	7dfb      	ldrb	r3, [r7, #23]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d141      	bne.n	80094c6 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8009442:	2222      	movs	r2, #34	; 0x22
 8009444:	2100      	movs	r1, #0
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f002 f8c6 	bl	800b5d8 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800944c:	693b      	ldr	r3, [r7, #16]
 800944e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009452:	781b      	ldrb	r3, [r3, #0]
 8009454:	f003 031f 	and.w	r3, r3, #31
 8009458:	b2da      	uxtb	r2, r3
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009464:	781b      	ldrb	r3, [r3, #0]
 8009466:	095b      	lsrs	r3, r3, #5
 8009468:	b2da      	uxtb	r2, r3
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009474:	3301      	adds	r3, #1
 8009476:	781b      	ldrb	r3, [r3, #0]
 8009478:	b25b      	sxtb	r3, r3
 800947a:	2b00      	cmp	r3, #0
 800947c:	da03      	bge.n	8009486 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2201      	movs	r2, #1
 8009482:	709a      	strb	r2, [r3, #2]
 8009484:	e002      	b.n	800948c <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2200      	movs	r2, #0
 800948a:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	1cd8      	adds	r0, r3, #3
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009496:	3308      	adds	r3, #8
 8009498:	2208      	movs	r2, #8
 800949a:	4619      	mov	r1, r3
 800949c:	f002 f88e 	bl	800b5bc <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f103 000c 	add.w	r0, r3, #12
 80094a6:	693b      	ldr	r3, [r7, #16]
 80094a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094ac:	3310      	adds	r3, #16
 80094ae:	2210      	movs	r2, #16
 80094b0:	4619      	mov	r1, r3
 80094b2:	f002 f883 	bl	800b5bc <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	331d      	adds	r3, #29
 80094ba:	693a      	ldr	r2, [r7, #16]
 80094bc:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 80094c0:	3220      	adds	r2, #32
 80094c2:	6812      	ldr	r2, [r2, #0]
 80094c4:	601a      	str	r2, [r3, #0]
      break;
 80094c6:	bf00      	nop
  }

  return error;
 80094c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3718      	adds	r7, #24
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}

080094d2 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 80094d2:	b580      	push	{r7, lr}
 80094d4:	b086      	sub	sp, #24
 80094d6:	af00      	add	r7, sp, #0
 80094d8:	60f8      	str	r0, [r7, #12]
 80094da:	460b      	mov	r3, r1
 80094dc:	607a      	str	r2, [r7, #4]
 80094de:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80094e0:	2302      	movs	r3, #2
 80094e2:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80094ea:	69db      	ldr	r3, [r3, #28]
 80094ec:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80094ee:	693b      	ldr	r3, [r7, #16]
 80094f0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80094f4:	2b01      	cmp	r3, #1
 80094f6:	d002      	beq.n	80094fe <USBH_MSC_SCSI_RequestSense+0x2c>
 80094f8:	2b02      	cmp	r3, #2
 80094fa:	d03d      	beq.n	8009578 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 80094fc:	e05d      	b.n	80095ba <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 80094fe:	693b      	ldr	r3, [r7, #16]
 8009500:	220e      	movs	r2, #14
 8009502:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	2280      	movs	r2, #128	; 0x80
 8009508:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	220a      	movs	r2, #10
 8009510:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	3363      	adds	r3, #99	; 0x63
 8009518:	2210      	movs	r2, #16
 800951a:	2100      	movs	r1, #0
 800951c:	4618      	mov	r0, r3
 800951e:	f002 f85b 	bl	800b5d8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8009522:	693b      	ldr	r3, [r7, #16]
 8009524:	2203      	movs	r2, #3
 8009526:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800952a:	7afb      	ldrb	r3, [r7, #11]
 800952c:	015b      	lsls	r3, r3, #5
 800952e:	b2da      	uxtb	r2, r3
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	2200      	movs	r2, #0
 800953a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	2200      	movs	r2, #0
 8009542:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8009546:	693b      	ldr	r3, [r7, #16]
 8009548:	220e      	movs	r2, #14
 800954a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	2200      	movs	r2, #0
 8009552:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	2201      	movs	r2, #1
 800955a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800955e:	693b      	ldr	r3, [r7, #16]
 8009560:	2202      	movs	r2, #2
 8009562:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	f103 0210 	add.w	r2, r3, #16
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009572:	2301      	movs	r3, #1
 8009574:	75fb      	strb	r3, [r7, #23]
      break;
 8009576:	e020      	b.n	80095ba <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009578:	7afb      	ldrb	r3, [r7, #11]
 800957a:	4619      	mov	r1, r3
 800957c:	68f8      	ldr	r0, [r7, #12]
 800957e:	f7ff fc07 	bl	8008d90 <USBH_MSC_BOT_Process>
 8009582:	4603      	mov	r3, r0
 8009584:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009586:	7dfb      	ldrb	r3, [r7, #23]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d115      	bne.n	80095b8 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009592:	3302      	adds	r3, #2
 8009594:	781b      	ldrb	r3, [r3, #0]
 8009596:	f003 030f 	and.w	r3, r3, #15
 800959a:	b2da      	uxtb	r2, r3
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095a6:	7b1a      	ldrb	r2, [r3, #12]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095b2:	7b5a      	ldrb	r2, [r3, #13]
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	709a      	strb	r2, [r3, #2]
      break;
 80095b8:	bf00      	nop
  }

  return error;
 80095ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80095bc:	4618      	mov	r0, r3
 80095be:	3718      	adds	r7, #24
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}

080095c4 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b086      	sub	sp, #24
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	60f8      	str	r0, [r7, #12]
 80095cc:	607a      	str	r2, [r7, #4]
 80095ce:	603b      	str	r3, [r7, #0]
 80095d0:	460b      	mov	r3, r1
 80095d2:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80095d4:	2302      	movs	r3, #2
 80095d6:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80095de:	69db      	ldr	r3, [r3, #28]
 80095e0:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80095e8:	2b01      	cmp	r3, #1
 80095ea:	d002      	beq.n	80095f2 <USBH_MSC_SCSI_Write+0x2e>
 80095ec:	2b02      	cmp	r3, #2
 80095ee:	d047      	beq.n	8009680 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80095f0:	e04e      	b.n	8009690 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 80095f8:	461a      	mov	r2, r3
 80095fa:	6a3b      	ldr	r3, [r7, #32]
 80095fc:	fb03 f202 	mul.w	r2, r3, r2
 8009600:	693b      	ldr	r3, [r7, #16]
 8009602:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	2200      	movs	r2, #0
 8009608:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	220a      	movs	r2, #10
 8009610:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	3363      	adds	r3, #99	; 0x63
 8009618:	2210      	movs	r2, #16
 800961a:	2100      	movs	r1, #0
 800961c:	4618      	mov	r0, r3
 800961e:	f001 ffdb 	bl	800b5d8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	222a      	movs	r2, #42	; 0x2a
 8009626:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800962a:	79fa      	ldrb	r2, [r7, #7]
 800962c:	693b      	ldr	r3, [r7, #16]
 800962e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8009632:	79ba      	ldrb	r2, [r7, #6]
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800963a:	797a      	ldrb	r2, [r7, #5]
 800963c:	693b      	ldr	r3, [r7, #16]
 800963e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8009642:	1d3b      	adds	r3, r7, #4
 8009644:	781a      	ldrb	r2, [r3, #0]
 8009646:	693b      	ldr	r3, [r7, #16]
 8009648:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800964c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8009656:	f107 0320 	add.w	r3, r7, #32
 800965a:	781a      	ldrb	r2, [r3, #0]
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	2201      	movs	r2, #1
 8009666:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	2202      	movs	r2, #2
 800966e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	683a      	ldr	r2, [r7, #0]
 8009676:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800967a:	2301      	movs	r3, #1
 800967c:	75fb      	strb	r3, [r7, #23]
      break;
 800967e:	e007      	b.n	8009690 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009680:	7afb      	ldrb	r3, [r7, #11]
 8009682:	4619      	mov	r1, r3
 8009684:	68f8      	ldr	r0, [r7, #12]
 8009686:	f7ff fb83 	bl	8008d90 <USBH_MSC_BOT_Process>
 800968a:	4603      	mov	r3, r0
 800968c:	75fb      	strb	r3, [r7, #23]
      break;
 800968e:	bf00      	nop
  }

  return error;
 8009690:	7dfb      	ldrb	r3, [r7, #23]
}
 8009692:	4618      	mov	r0, r3
 8009694:	3718      	adds	r7, #24
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}

0800969a <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800969a:	b580      	push	{r7, lr}
 800969c:	b086      	sub	sp, #24
 800969e:	af00      	add	r7, sp, #0
 80096a0:	60f8      	str	r0, [r7, #12]
 80096a2:	607a      	str	r2, [r7, #4]
 80096a4:	603b      	str	r3, [r7, #0]
 80096a6:	460b      	mov	r3, r1
 80096a8:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80096aa:	2302      	movs	r3, #2
 80096ac:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80096b4:	69db      	ldr	r3, [r3, #28]
 80096b6:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80096b8:	693b      	ldr	r3, [r7, #16]
 80096ba:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80096be:	2b01      	cmp	r3, #1
 80096c0:	d002      	beq.n	80096c8 <USBH_MSC_SCSI_Read+0x2e>
 80096c2:	2b02      	cmp	r3, #2
 80096c4:	d047      	beq.n	8009756 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80096c6:	e04e      	b.n	8009766 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 80096c8:	693b      	ldr	r3, [r7, #16]
 80096ca:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 80096ce:	461a      	mov	r2, r3
 80096d0:	6a3b      	ldr	r3, [r7, #32]
 80096d2:	fb03 f202 	mul.w	r2, r3, r2
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80096da:	693b      	ldr	r3, [r7, #16]
 80096dc:	2280      	movs	r2, #128	; 0x80
 80096de:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	220a      	movs	r2, #10
 80096e6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80096ea:	693b      	ldr	r3, [r7, #16]
 80096ec:	3363      	adds	r3, #99	; 0x63
 80096ee:	2210      	movs	r2, #16
 80096f0:	2100      	movs	r1, #0
 80096f2:	4618      	mov	r0, r3
 80096f4:	f001 ff70 	bl	800b5d8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	2228      	movs	r2, #40	; 0x28
 80096fc:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8009700:	79fa      	ldrb	r2, [r7, #7]
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8009708:	79ba      	ldrb	r2, [r7, #6]
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8009710:	797a      	ldrb	r2, [r7, #5]
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8009718:	1d3b      	adds	r3, r7, #4
 800971a:	781a      	ldrb	r2, [r3, #0]
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8009722:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800972c:	f107 0320 	add.w	r3, r7, #32
 8009730:	781a      	ldrb	r2, [r3, #0]
 8009732:	693b      	ldr	r3, [r7, #16]
 8009734:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	2201      	movs	r2, #1
 800973c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	2202      	movs	r2, #2
 8009744:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	683a      	ldr	r2, [r7, #0]
 800974c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009750:	2301      	movs	r3, #1
 8009752:	75fb      	strb	r3, [r7, #23]
      break;
 8009754:	e007      	b.n	8009766 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009756:	7afb      	ldrb	r3, [r7, #11]
 8009758:	4619      	mov	r1, r3
 800975a:	68f8      	ldr	r0, [r7, #12]
 800975c:	f7ff fb18 	bl	8008d90 <USBH_MSC_BOT_Process>
 8009760:	4603      	mov	r3, r0
 8009762:	75fb      	strb	r3, [r7, #23]
      break;
 8009764:	bf00      	nop
  }

  return error;
 8009766:	7dfb      	ldrb	r3, [r7, #23]
}
 8009768:	4618      	mov	r0, r3
 800976a:	3718      	adds	r7, #24
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}

08009770 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b084      	sub	sp, #16
 8009774:	af00      	add	r7, sp, #0
 8009776:	60f8      	str	r0, [r7, #12]
 8009778:	60b9      	str	r1, [r7, #8]
 800977a:	4613      	mov	r3, r2
 800977c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d101      	bne.n	8009788 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009784:	2302      	movs	r3, #2
 8009786:	e029      	b.n	80097dc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	79fa      	ldrb	r2, [r7, #7]
 800978c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	2200      	movs	r2, #0
 8009794:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	2200      	movs	r2, #0
 800979c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80097a0:	68f8      	ldr	r0, [r7, #12]
 80097a2:	f000 f81f 	bl	80097e4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	2200      	movs	r2, #0
 80097aa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	2200      	movs	r2, #0
 80097b2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	2200      	movs	r2, #0
 80097ba:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	2200      	movs	r2, #0
 80097c2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d003      	beq.n	80097d4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	68ba      	ldr	r2, [r7, #8]
 80097d0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80097d4:	68f8      	ldr	r0, [r7, #12]
 80097d6:	f001 fc93 	bl	800b100 <USBH_LL_Init>

  return USBH_OK;
 80097da:	2300      	movs	r3, #0
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3710      	adds	r7, #16
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}

080097e4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80097e4:	b480      	push	{r7}
 80097e6:	b085      	sub	sp, #20
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80097ec:	2300      	movs	r3, #0
 80097ee:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80097f0:	2300      	movs	r3, #0
 80097f2:	60fb      	str	r3, [r7, #12]
 80097f4:	e009      	b.n	800980a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80097f6:	687a      	ldr	r2, [r7, #4]
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	33e0      	adds	r3, #224	; 0xe0
 80097fc:	009b      	lsls	r3, r3, #2
 80097fe:	4413      	add	r3, r2
 8009800:	2200      	movs	r2, #0
 8009802:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	3301      	adds	r3, #1
 8009808:	60fb      	str	r3, [r7, #12]
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2b0e      	cmp	r3, #14
 800980e:	d9f2      	bls.n	80097f6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009810:	2300      	movs	r3, #0
 8009812:	60fb      	str	r3, [r7, #12]
 8009814:	e009      	b.n	800982a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009816:	687a      	ldr	r2, [r7, #4]
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	4413      	add	r3, r2
 800981c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009820:	2200      	movs	r2, #0
 8009822:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	3301      	adds	r3, #1
 8009828:	60fb      	str	r3, [r7, #12]
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009830:	d3f1      	bcc.n	8009816 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2200      	movs	r2, #0
 8009836:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2200      	movs	r2, #0
 800983c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2201      	movs	r2, #1
 8009842:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2200      	movs	r2, #0
 8009848:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2201      	movs	r2, #1
 8009850:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2240      	movs	r2, #64	; 0x40
 8009856:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2200      	movs	r2, #0
 800985c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2200      	movs	r2, #0
 8009862:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2201      	movs	r2, #1
 800986a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2200      	movs	r2, #0
 8009872:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2200      	movs	r2, #0
 800987a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800987e:	2300      	movs	r3, #0
}
 8009880:	4618      	mov	r0, r3
 8009882:	3714      	adds	r7, #20
 8009884:	46bd      	mov	sp, r7
 8009886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988a:	4770      	bx	lr

0800988c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800988c:	b480      	push	{r7}
 800988e:	b085      	sub	sp, #20
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
 8009894:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009896:	2300      	movs	r3, #0
 8009898:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d016      	beq.n	80098ce <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d10e      	bne.n	80098c8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80098b0:	1c59      	adds	r1, r3, #1
 80098b2:	687a      	ldr	r2, [r7, #4]
 80098b4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80098b8:	687a      	ldr	r2, [r7, #4]
 80098ba:	33de      	adds	r3, #222	; 0xde
 80098bc:	6839      	ldr	r1, [r7, #0]
 80098be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80098c2:	2300      	movs	r3, #0
 80098c4:	73fb      	strb	r3, [r7, #15]
 80098c6:	e004      	b.n	80098d2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80098c8:	2302      	movs	r3, #2
 80098ca:	73fb      	strb	r3, [r7, #15]
 80098cc:	e001      	b.n	80098d2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80098ce:	2302      	movs	r3, #2
 80098d0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80098d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	3714      	adds	r7, #20
 80098d8:	46bd      	mov	sp, r7
 80098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098de:	4770      	bx	lr

080098e0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b085      	sub	sp, #20
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	460b      	mov	r3, r1
 80098ea:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80098ec:	2300      	movs	r3, #0
 80098ee:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80098f6:	78fa      	ldrb	r2, [r7, #3]
 80098f8:	429a      	cmp	r2, r3
 80098fa:	d204      	bcs.n	8009906 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	78fa      	ldrb	r2, [r7, #3]
 8009900:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8009904:	e001      	b.n	800990a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009906:	2302      	movs	r3, #2
 8009908:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800990a:	7bfb      	ldrb	r3, [r7, #15]
}
 800990c:	4618      	mov	r0, r3
 800990e:	3714      	adds	r7, #20
 8009910:	46bd      	mov	sp, r7
 8009912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009916:	4770      	bx	lr

08009918 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009918:	b480      	push	{r7}
 800991a:	b087      	sub	sp, #28
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
 8009920:	4608      	mov	r0, r1
 8009922:	4611      	mov	r1, r2
 8009924:	461a      	mov	r2, r3
 8009926:	4603      	mov	r3, r0
 8009928:	70fb      	strb	r3, [r7, #3]
 800992a:	460b      	mov	r3, r1
 800992c:	70bb      	strb	r3, [r7, #2]
 800992e:	4613      	mov	r3, r2
 8009930:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009932:	2300      	movs	r3, #0
 8009934:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8009936:	2300      	movs	r3, #0
 8009938:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009940:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009942:	e025      	b.n	8009990 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009944:	7dfb      	ldrb	r3, [r7, #23]
 8009946:	221a      	movs	r2, #26
 8009948:	fb02 f303 	mul.w	r3, r2, r3
 800994c:	3308      	adds	r3, #8
 800994e:	68fa      	ldr	r2, [r7, #12]
 8009950:	4413      	add	r3, r2
 8009952:	3302      	adds	r3, #2
 8009954:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	795b      	ldrb	r3, [r3, #5]
 800995a:	78fa      	ldrb	r2, [r7, #3]
 800995c:	429a      	cmp	r2, r3
 800995e:	d002      	beq.n	8009966 <USBH_FindInterface+0x4e>
 8009960:	78fb      	ldrb	r3, [r7, #3]
 8009962:	2bff      	cmp	r3, #255	; 0xff
 8009964:	d111      	bne.n	800998a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800996a:	78ba      	ldrb	r2, [r7, #2]
 800996c:	429a      	cmp	r2, r3
 800996e:	d002      	beq.n	8009976 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009970:	78bb      	ldrb	r3, [r7, #2]
 8009972:	2bff      	cmp	r3, #255	; 0xff
 8009974:	d109      	bne.n	800998a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800997a:	787a      	ldrb	r2, [r7, #1]
 800997c:	429a      	cmp	r2, r3
 800997e:	d002      	beq.n	8009986 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009980:	787b      	ldrb	r3, [r7, #1]
 8009982:	2bff      	cmp	r3, #255	; 0xff
 8009984:	d101      	bne.n	800998a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009986:	7dfb      	ldrb	r3, [r7, #23]
 8009988:	e006      	b.n	8009998 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800998a:	7dfb      	ldrb	r3, [r7, #23]
 800998c:	3301      	adds	r3, #1
 800998e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009990:	7dfb      	ldrb	r3, [r7, #23]
 8009992:	2b01      	cmp	r3, #1
 8009994:	d9d6      	bls.n	8009944 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009996:	23ff      	movs	r3, #255	; 0xff
}
 8009998:	4618      	mov	r0, r3
 800999a:	371c      	adds	r7, #28
 800999c:	46bd      	mov	sp, r7
 800999e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a2:	4770      	bx	lr

080099a4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b082      	sub	sp, #8
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f001 fbe3 	bl	800b178 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80099b2:	2101      	movs	r1, #1
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f001 fcfc 	bl	800b3b2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80099ba:	2300      	movs	r3, #0
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3708      	adds	r7, #8
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b088      	sub	sp, #32
 80099c8:	af04      	add	r7, sp, #16
 80099ca:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80099cc:	2302      	movs	r3, #2
 80099ce:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80099d0:	2300      	movs	r3, #0
 80099d2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80099da:	b2db      	uxtb	r3, r3
 80099dc:	2b01      	cmp	r3, #1
 80099de:	d102      	bne.n	80099e6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2203      	movs	r2, #3
 80099e4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	781b      	ldrb	r3, [r3, #0]
 80099ea:	b2db      	uxtb	r3, r3
 80099ec:	2b0b      	cmp	r3, #11
 80099ee:	f200 81b3 	bhi.w	8009d58 <USBH_Process+0x394>
 80099f2:	a201      	add	r2, pc, #4	; (adr r2, 80099f8 <USBH_Process+0x34>)
 80099f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099f8:	08009a29 	.word	0x08009a29
 80099fc:	08009a5b 	.word	0x08009a5b
 8009a00:	08009ac3 	.word	0x08009ac3
 8009a04:	08009cf3 	.word	0x08009cf3
 8009a08:	08009d59 	.word	0x08009d59
 8009a0c:	08009b67 	.word	0x08009b67
 8009a10:	08009c99 	.word	0x08009c99
 8009a14:	08009b9d 	.word	0x08009b9d
 8009a18:	08009bbd 	.word	0x08009bbd
 8009a1c:	08009bdd 	.word	0x08009bdd
 8009a20:	08009c0b 	.word	0x08009c0b
 8009a24:	08009cdb 	.word	0x08009cdb
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009a2e:	b2db      	uxtb	r3, r3
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	f000 8193 	beq.w	8009d5c <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2201      	movs	r2, #1
 8009a3a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009a3c:	20c8      	movs	r0, #200	; 0xc8
 8009a3e:	f001 fd2f 	bl	800b4a0 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f001 fbf5 	bl	800b232 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2200      	movs	r2, #0
 8009a54:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009a58:	e180      	b.n	8009d5c <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	d107      	bne.n	8009a74 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2200      	movs	r2, #0
 8009a68:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2202      	movs	r2, #2
 8009a70:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009a72:	e182      	b.n	8009d7a <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009a7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009a7e:	d914      	bls.n	8009aaa <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009a86:	3301      	adds	r3, #1
 8009a88:	b2da      	uxtb	r2, r3
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009a96:	2b03      	cmp	r3, #3
 8009a98:	d903      	bls.n	8009aa2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	220d      	movs	r2, #13
 8009a9e:	701a      	strb	r2, [r3, #0]
      break;
 8009aa0:	e16b      	b.n	8009d7a <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	701a      	strb	r2, [r3, #0]
      break;
 8009aa8:	e167      	b.n	8009d7a <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009ab0:	f103 020a 	add.w	r2, r3, #10
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8009aba:	200a      	movs	r0, #10
 8009abc:	f001 fcf0 	bl	800b4a0 <USBH_Delay>
      break;
 8009ac0:	e15b      	b.n	8009d7a <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d005      	beq.n	8009ad8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009ad2:	2104      	movs	r1, #4
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009ad8:	2064      	movs	r0, #100	; 0x64
 8009ada:	f001 fce1 	bl	800b4a0 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f001 fb80 	bl	800b1e4 <USBH_LL_GetSpeed>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	461a      	mov	r2, r3
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2205      	movs	r2, #5
 8009af2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009af4:	2100      	movs	r1, #0
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f001 f92f 	bl	800ad5a <USBH_AllocPipe>
 8009afc:	4603      	mov	r3, r0
 8009afe:	461a      	mov	r2, r3
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009b04:	2180      	movs	r1, #128	; 0x80
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f001 f927 	bl	800ad5a <USBH_AllocPipe>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	461a      	mov	r2, r3
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	7919      	ldrb	r1, [r3, #4]
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009b24:	687a      	ldr	r2, [r7, #4]
 8009b26:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009b28:	b292      	uxth	r2, r2
 8009b2a:	9202      	str	r2, [sp, #8]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	9201      	str	r2, [sp, #4]
 8009b30:	9300      	str	r3, [sp, #0]
 8009b32:	4603      	mov	r3, r0
 8009b34:	2280      	movs	r2, #128	; 0x80
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f001 f8e0 	bl	800acfc <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	7959      	ldrb	r1, [r3, #5]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009b4c:	687a      	ldr	r2, [r7, #4]
 8009b4e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009b50:	b292      	uxth	r2, r2
 8009b52:	9202      	str	r2, [sp, #8]
 8009b54:	2200      	movs	r2, #0
 8009b56:	9201      	str	r2, [sp, #4]
 8009b58:	9300      	str	r3, [sp, #0]
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f001 f8cc 	bl	800acfc <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009b64:	e109      	b.n	8009d7a <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f000 f90c 	bl	8009d84 <USBH_HandleEnum>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009b70:	7bbb      	ldrb	r3, [r7, #14]
 8009b72:	b2db      	uxtb	r3, r3
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	f040 80f3 	bne.w	8009d60 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8009b88:	2b01      	cmp	r3, #1
 8009b8a:	d103      	bne.n	8009b94 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2208      	movs	r2, #8
 8009b90:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009b92:	e0e5      	b.n	8009d60 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2207      	movs	r2, #7
 8009b98:	701a      	strb	r2, [r3, #0]
      break;
 8009b9a:	e0e1      	b.n	8009d60 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	f000 80de 	beq.w	8009d64 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009bae:	2101      	movs	r1, #1
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2208      	movs	r2, #8
 8009bb8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8009bba:	e0d3      	b.n	8009d64 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8009bc2:	b29b      	uxth	r3, r3
 8009bc4:	4619      	mov	r1, r3
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f000 fc20 	bl	800a40c <USBH_SetCfg>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	f040 80ca 	bne.w	8009d68 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2209      	movs	r2, #9
 8009bd8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009bda:	e0c5      	b.n	8009d68 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8009be2:	f003 0320 	and.w	r3, r3, #32
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d00b      	beq.n	8009c02 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8009bea:	2101      	movs	r1, #1
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f000 fc30 	bl	800a452 <USBH_SetFeature>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	f040 80b9 	bne.w	8009d6c <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	220a      	movs	r2, #10
 8009bfe:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009c00:	e0b4      	b.n	8009d6c <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	220a      	movs	r2, #10
 8009c06:	701a      	strb	r2, [r3, #0]
      break;
 8009c08:	e0b0      	b.n	8009d6c <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	f000 80ad 	beq.w	8009d70 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009c1e:	2300      	movs	r3, #0
 8009c20:	73fb      	strb	r3, [r7, #15]
 8009c22:	e016      	b.n	8009c52 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009c24:	7bfa      	ldrb	r2, [r7, #15]
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	32de      	adds	r2, #222	; 0xde
 8009c2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c2e:	791a      	ldrb	r2, [r3, #4]
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8009c36:	429a      	cmp	r2, r3
 8009c38:	d108      	bne.n	8009c4c <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009c3a:	7bfa      	ldrb	r2, [r7, #15]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	32de      	adds	r2, #222	; 0xde
 8009c40:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8009c4a:	e005      	b.n	8009c58 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009c4c:	7bfb      	ldrb	r3, [r7, #15]
 8009c4e:	3301      	adds	r3, #1
 8009c50:	73fb      	strb	r3, [r7, #15]
 8009c52:	7bfb      	ldrb	r3, [r7, #15]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d0e5      	beq.n	8009c24 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d016      	beq.n	8009c90 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c68:	689b      	ldr	r3, [r3, #8]
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	4798      	blx	r3
 8009c6e:	4603      	mov	r3, r0
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d109      	bne.n	8009c88 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2206      	movs	r2, #6
 8009c78:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009c80:	2103      	movs	r1, #3
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009c86:	e073      	b.n	8009d70 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	220d      	movs	r2, #13
 8009c8c:	701a      	strb	r2, [r3, #0]
      break;
 8009c8e:	e06f      	b.n	8009d70 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	220d      	movs	r2, #13
 8009c94:	701a      	strb	r2, [r3, #0]
      break;
 8009c96:	e06b      	b.n	8009d70 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d017      	beq.n	8009cd2 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ca8:	691b      	ldr	r3, [r3, #16]
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	4798      	blx	r3
 8009cae:	4603      	mov	r3, r0
 8009cb0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009cb2:	7bbb      	ldrb	r3, [r7, #14]
 8009cb4:	b2db      	uxtb	r3, r3
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d103      	bne.n	8009cc2 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	220b      	movs	r2, #11
 8009cbe:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009cc0:	e058      	b.n	8009d74 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8009cc2:	7bbb      	ldrb	r3, [r7, #14]
 8009cc4:	b2db      	uxtb	r3, r3
 8009cc6:	2b02      	cmp	r3, #2
 8009cc8:	d154      	bne.n	8009d74 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	220d      	movs	r2, #13
 8009cce:	701a      	strb	r2, [r3, #0]
      break;
 8009cd0:	e050      	b.n	8009d74 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	220d      	movs	r2, #13
 8009cd6:	701a      	strb	r2, [r3, #0]
      break;
 8009cd8:	e04c      	b.n	8009d74 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d049      	beq.n	8009d78 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009cea:	695b      	ldr	r3, [r3, #20]
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	4798      	blx	r3
      }
      break;
 8009cf0:	e042      	b.n	8009d78 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f7ff fd72 	bl	80097e4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d009      	beq.n	8009d1e <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d10:	68db      	ldr	r3, [r3, #12]
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2200      	movs	r2, #0
 8009d1a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d005      	beq.n	8009d34 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009d2e:	2105      	movs	r1, #5
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8009d3a:	b2db      	uxtb	r3, r3
 8009d3c:	2b01      	cmp	r3, #1
 8009d3e:	d107      	bne.n	8009d50 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2200      	movs	r2, #0
 8009d44:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f7ff fe2b 	bl	80099a4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009d4e:	e014      	b.n	8009d7a <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f001 fa11 	bl	800b178 <USBH_LL_Start>
      break;
 8009d56:	e010      	b.n	8009d7a <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8009d58:	bf00      	nop
 8009d5a:	e00e      	b.n	8009d7a <USBH_Process+0x3b6>
      break;
 8009d5c:	bf00      	nop
 8009d5e:	e00c      	b.n	8009d7a <USBH_Process+0x3b6>
      break;
 8009d60:	bf00      	nop
 8009d62:	e00a      	b.n	8009d7a <USBH_Process+0x3b6>
    break;
 8009d64:	bf00      	nop
 8009d66:	e008      	b.n	8009d7a <USBH_Process+0x3b6>
      break;
 8009d68:	bf00      	nop
 8009d6a:	e006      	b.n	8009d7a <USBH_Process+0x3b6>
      break;
 8009d6c:	bf00      	nop
 8009d6e:	e004      	b.n	8009d7a <USBH_Process+0x3b6>
      break;
 8009d70:	bf00      	nop
 8009d72:	e002      	b.n	8009d7a <USBH_Process+0x3b6>
      break;
 8009d74:	bf00      	nop
 8009d76:	e000      	b.n	8009d7a <USBH_Process+0x3b6>
      break;
 8009d78:	bf00      	nop
  }
  return USBH_OK;
 8009d7a:	2300      	movs	r3, #0
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3710      	adds	r7, #16
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}

08009d84 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b088      	sub	sp, #32
 8009d88:	af04      	add	r7, sp, #16
 8009d8a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009d90:	2301      	movs	r3, #1
 8009d92:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	785b      	ldrb	r3, [r3, #1]
 8009d98:	2b07      	cmp	r3, #7
 8009d9a:	f200 81c1 	bhi.w	800a120 <USBH_HandleEnum+0x39c>
 8009d9e:	a201      	add	r2, pc, #4	; (adr r2, 8009da4 <USBH_HandleEnum+0x20>)
 8009da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009da4:	08009dc5 	.word	0x08009dc5
 8009da8:	08009e83 	.word	0x08009e83
 8009dac:	08009eed 	.word	0x08009eed
 8009db0:	08009f7b 	.word	0x08009f7b
 8009db4:	08009fe5 	.word	0x08009fe5
 8009db8:	0800a055 	.word	0x0800a055
 8009dbc:	0800a09b 	.word	0x0800a09b
 8009dc0:	0800a0e1 	.word	0x0800a0e1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009dc4:	2108      	movs	r1, #8
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f000 fa50 	bl	800a26c <USBH_Get_DevDesc>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009dd0:	7bbb      	ldrb	r3, [r7, #14]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d130      	bne.n	8009e38 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2201      	movs	r2, #1
 8009de4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	7919      	ldrb	r1, [r3, #4]
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009df6:	687a      	ldr	r2, [r7, #4]
 8009df8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009dfa:	b292      	uxth	r2, r2
 8009dfc:	9202      	str	r2, [sp, #8]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	9201      	str	r2, [sp, #4]
 8009e02:	9300      	str	r3, [sp, #0]
 8009e04:	4603      	mov	r3, r0
 8009e06:	2280      	movs	r2, #128	; 0x80
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f000 ff77 	bl	800acfc <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	7959      	ldrb	r1, [r3, #5]
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009e1e:	687a      	ldr	r2, [r7, #4]
 8009e20:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009e22:	b292      	uxth	r2, r2
 8009e24:	9202      	str	r2, [sp, #8]
 8009e26:	2200      	movs	r2, #0
 8009e28:	9201      	str	r2, [sp, #4]
 8009e2a:	9300      	str	r3, [sp, #0]
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	2200      	movs	r2, #0
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f000 ff63 	bl	800acfc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009e36:	e175      	b.n	800a124 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009e38:	7bbb      	ldrb	r3, [r7, #14]
 8009e3a:	2b03      	cmp	r3, #3
 8009e3c:	f040 8172 	bne.w	800a124 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009e46:	3301      	adds	r3, #1
 8009e48:	b2da      	uxtb	r2, r3
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009e56:	2b03      	cmp	r3, #3
 8009e58:	d903      	bls.n	8009e62 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	220d      	movs	r2, #13
 8009e5e:	701a      	strb	r2, [r3, #0]
      break;
 8009e60:	e160      	b.n	800a124 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	795b      	ldrb	r3, [r3, #5]
 8009e66:	4619      	mov	r1, r3
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f000 ff97 	bl	800ad9c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	791b      	ldrb	r3, [r3, #4]
 8009e72:	4619      	mov	r1, r3
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f000 ff91 	bl	800ad9c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	701a      	strb	r2, [r3, #0]
      break;
 8009e80:	e150      	b.n	800a124 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009e82:	2112      	movs	r1, #18
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f000 f9f1 	bl	800a26c <USBH_Get_DevDesc>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009e8e:	7bbb      	ldrb	r3, [r7, #14]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d103      	bne.n	8009e9c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2202      	movs	r2, #2
 8009e98:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009e9a:	e145      	b.n	800a128 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009e9c:	7bbb      	ldrb	r3, [r7, #14]
 8009e9e:	2b03      	cmp	r3, #3
 8009ea0:	f040 8142 	bne.w	800a128 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009eaa:	3301      	adds	r3, #1
 8009eac:	b2da      	uxtb	r2, r3
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009eba:	2b03      	cmp	r3, #3
 8009ebc:	d903      	bls.n	8009ec6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	220d      	movs	r2, #13
 8009ec2:	701a      	strb	r2, [r3, #0]
      break;
 8009ec4:	e130      	b.n	800a128 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	795b      	ldrb	r3, [r3, #5]
 8009eca:	4619      	mov	r1, r3
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f000 ff65 	bl	800ad9c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	791b      	ldrb	r3, [r3, #4]
 8009ed6:	4619      	mov	r1, r3
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f000 ff5f 	bl	800ad9c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	701a      	strb	r2, [r3, #0]
      break;
 8009eea:	e11d      	b.n	800a128 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009eec:	2101      	movs	r1, #1
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f000 fa68 	bl	800a3c4 <USBH_SetAddress>
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009ef8:	7bbb      	ldrb	r3, [r7, #14]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d132      	bne.n	8009f64 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8009efe:	2002      	movs	r0, #2
 8009f00:	f001 face 	bl	800b4a0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2201      	movs	r2, #1
 8009f08:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2203      	movs	r2, #3
 8009f10:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	7919      	ldrb	r1, [r3, #4]
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009f22:	687a      	ldr	r2, [r7, #4]
 8009f24:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009f26:	b292      	uxth	r2, r2
 8009f28:	9202      	str	r2, [sp, #8]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	9201      	str	r2, [sp, #4]
 8009f2e:	9300      	str	r3, [sp, #0]
 8009f30:	4603      	mov	r3, r0
 8009f32:	2280      	movs	r2, #128	; 0x80
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f000 fee1 	bl	800acfc <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	7959      	ldrb	r1, [r3, #5]
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009f4a:	687a      	ldr	r2, [r7, #4]
 8009f4c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009f4e:	b292      	uxth	r2, r2
 8009f50:	9202      	str	r2, [sp, #8]
 8009f52:	2200      	movs	r2, #0
 8009f54:	9201      	str	r2, [sp, #4]
 8009f56:	9300      	str	r3, [sp, #0]
 8009f58:	4603      	mov	r3, r0
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f000 fecd 	bl	800acfc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009f62:	e0e3      	b.n	800a12c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009f64:	7bbb      	ldrb	r3, [r7, #14]
 8009f66:	2b03      	cmp	r3, #3
 8009f68:	f040 80e0 	bne.w	800a12c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	220d      	movs	r2, #13
 8009f70:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2200      	movs	r2, #0
 8009f76:	705a      	strb	r2, [r3, #1]
      break;
 8009f78:	e0d8      	b.n	800a12c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009f7a:	2109      	movs	r1, #9
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f000 f99d 	bl	800a2bc <USBH_Get_CfgDesc>
 8009f82:	4603      	mov	r3, r0
 8009f84:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009f86:	7bbb      	ldrb	r3, [r7, #14]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d103      	bne.n	8009f94 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2204      	movs	r2, #4
 8009f90:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009f92:	e0cd      	b.n	800a130 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009f94:	7bbb      	ldrb	r3, [r7, #14]
 8009f96:	2b03      	cmp	r3, #3
 8009f98:	f040 80ca 	bne.w	800a130 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009fa2:	3301      	adds	r3, #1
 8009fa4:	b2da      	uxtb	r2, r3
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009fb2:	2b03      	cmp	r3, #3
 8009fb4:	d903      	bls.n	8009fbe <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	220d      	movs	r2, #13
 8009fba:	701a      	strb	r2, [r3, #0]
      break;
 8009fbc:	e0b8      	b.n	800a130 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	795b      	ldrb	r3, [r3, #5]
 8009fc2:	4619      	mov	r1, r3
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f000 fee9 	bl	800ad9c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	791b      	ldrb	r3, [r3, #4]
 8009fce:	4619      	mov	r1, r3
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f000 fee3 	bl	800ad9c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	701a      	strb	r2, [r3, #0]
      break;
 8009fe2:	e0a5      	b.n	800a130 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8009fea:	4619      	mov	r1, r3
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f000 f965 	bl	800a2bc <USBH_Get_CfgDesc>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009ff6:	7bbb      	ldrb	r3, [r7, #14]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d103      	bne.n	800a004 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2205      	movs	r2, #5
 800a000:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a002:	e097      	b.n	800a134 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a004:	7bbb      	ldrb	r3, [r7, #14]
 800a006:	2b03      	cmp	r3, #3
 800a008:	f040 8094 	bne.w	800a134 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a012:	3301      	adds	r3, #1
 800a014:	b2da      	uxtb	r2, r3
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a022:	2b03      	cmp	r3, #3
 800a024:	d903      	bls.n	800a02e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	220d      	movs	r2, #13
 800a02a:	701a      	strb	r2, [r3, #0]
      break;
 800a02c:	e082      	b.n	800a134 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	795b      	ldrb	r3, [r3, #5]
 800a032:	4619      	mov	r1, r3
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f000 feb1 	bl	800ad9c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	791b      	ldrb	r3, [r3, #4]
 800a03e:	4619      	mov	r1, r3
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	f000 feab 	bl	800ad9c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2200      	movs	r2, #0
 800a04a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2200      	movs	r2, #0
 800a050:	701a      	strb	r2, [r3, #0]
      break;
 800a052:	e06f      	b.n	800a134 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d019      	beq.n	800a092 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a06a:	23ff      	movs	r3, #255	; 0xff
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f000 f949 	bl	800a304 <USBH_Get_StringDesc>
 800a072:	4603      	mov	r3, r0
 800a074:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a076:	7bbb      	ldrb	r3, [r7, #14]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d103      	bne.n	800a084 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2206      	movs	r2, #6
 800a080:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a082:	e059      	b.n	800a138 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a084:	7bbb      	ldrb	r3, [r7, #14]
 800a086:	2b03      	cmp	r3, #3
 800a088:	d156      	bne.n	800a138 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2206      	movs	r2, #6
 800a08e:	705a      	strb	r2, [r3, #1]
      break;
 800a090:	e052      	b.n	800a138 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2206      	movs	r2, #6
 800a096:	705a      	strb	r2, [r3, #1]
      break;
 800a098:	e04e      	b.n	800a138 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d019      	beq.n	800a0d8 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a0b0:	23ff      	movs	r3, #255	; 0xff
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f000 f926 	bl	800a304 <USBH_Get_StringDesc>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a0bc:	7bbb      	ldrb	r3, [r7, #14]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d103      	bne.n	800a0ca <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2207      	movs	r2, #7
 800a0c6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a0c8:	e038      	b.n	800a13c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a0ca:	7bbb      	ldrb	r3, [r7, #14]
 800a0cc:	2b03      	cmp	r3, #3
 800a0ce:	d135      	bne.n	800a13c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2207      	movs	r2, #7
 800a0d4:	705a      	strb	r2, [r3, #1]
      break;
 800a0d6:	e031      	b.n	800a13c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2207      	movs	r2, #7
 800a0dc:	705a      	strb	r2, [r3, #1]
      break;
 800a0de:	e02d      	b.n	800a13c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d017      	beq.n	800a11a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a0f6:	23ff      	movs	r3, #255	; 0xff
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f000 f903 	bl	800a304 <USBH_Get_StringDesc>
 800a0fe:	4603      	mov	r3, r0
 800a100:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a102:	7bbb      	ldrb	r3, [r7, #14]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d102      	bne.n	800a10e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a108:	2300      	movs	r3, #0
 800a10a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a10c:	e018      	b.n	800a140 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a10e:	7bbb      	ldrb	r3, [r7, #14]
 800a110:	2b03      	cmp	r3, #3
 800a112:	d115      	bne.n	800a140 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800a114:	2300      	movs	r3, #0
 800a116:	73fb      	strb	r3, [r7, #15]
      break;
 800a118:	e012      	b.n	800a140 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800a11a:	2300      	movs	r3, #0
 800a11c:	73fb      	strb	r3, [r7, #15]
      break;
 800a11e:	e00f      	b.n	800a140 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800a120:	bf00      	nop
 800a122:	e00e      	b.n	800a142 <USBH_HandleEnum+0x3be>
      break;
 800a124:	bf00      	nop
 800a126:	e00c      	b.n	800a142 <USBH_HandleEnum+0x3be>
      break;
 800a128:	bf00      	nop
 800a12a:	e00a      	b.n	800a142 <USBH_HandleEnum+0x3be>
      break;
 800a12c:	bf00      	nop
 800a12e:	e008      	b.n	800a142 <USBH_HandleEnum+0x3be>
      break;
 800a130:	bf00      	nop
 800a132:	e006      	b.n	800a142 <USBH_HandleEnum+0x3be>
      break;
 800a134:	bf00      	nop
 800a136:	e004      	b.n	800a142 <USBH_HandleEnum+0x3be>
      break;
 800a138:	bf00      	nop
 800a13a:	e002      	b.n	800a142 <USBH_HandleEnum+0x3be>
      break;
 800a13c:	bf00      	nop
 800a13e:	e000      	b.n	800a142 <USBH_HandleEnum+0x3be>
      break;
 800a140:	bf00      	nop
  }
  return Status;
 800a142:	7bfb      	ldrb	r3, [r7, #15]
}
 800a144:	4618      	mov	r0, r3
 800a146:	3710      	adds	r7, #16
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}

0800a14c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a14c:	b480      	push	{r7}
 800a14e:	b083      	sub	sp, #12
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
 800a154:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	683a      	ldr	r2, [r7, #0]
 800a15a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800a15e:	bf00      	nop
 800a160:	370c      	adds	r7, #12
 800a162:	46bd      	mov	sp, r7
 800a164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a168:	4770      	bx	lr

0800a16a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a16a:	b580      	push	{r7, lr}
 800a16c:	b082      	sub	sp, #8
 800a16e:	af00      	add	r7, sp, #0
 800a170:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a178:	1c5a      	adds	r2, r3, #1
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f000 f804 	bl	800a18e <USBH_HandleSof>
}
 800a186:	bf00      	nop
 800a188:	3708      	adds	r7, #8
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}

0800a18e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a18e:	b580      	push	{r7, lr}
 800a190:	b082      	sub	sp, #8
 800a192:	af00      	add	r7, sp, #0
 800a194:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	781b      	ldrb	r3, [r3, #0]
 800a19a:	b2db      	uxtb	r3, r3
 800a19c:	2b0b      	cmp	r3, #11
 800a19e:	d10a      	bne.n	800a1b6 <USBH_HandleSof+0x28>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d005      	beq.n	800a1b6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a1b0:	699b      	ldr	r3, [r3, #24]
 800a1b2:	6878      	ldr	r0, [r7, #4]
 800a1b4:	4798      	blx	r3
  }
}
 800a1b6:	bf00      	nop
 800a1b8:	3708      	adds	r7, #8
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}

0800a1be <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a1be:	b480      	push	{r7}
 800a1c0:	b083      	sub	sp, #12
 800a1c2:	af00      	add	r7, sp, #0
 800a1c4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2201      	movs	r2, #1
 800a1ca:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800a1ce:	bf00      	nop
}
 800a1d0:	370c      	adds	r7, #12
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d8:	4770      	bx	lr

0800a1da <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a1da:	b480      	push	{r7}
 800a1dc:	b083      	sub	sp, #12
 800a1de:	af00      	add	r7, sp, #0
 800a1e0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800a1ea:	bf00      	nop
}
 800a1ec:	370c      	adds	r7, #12
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f4:	4770      	bx	lr

0800a1f6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a1f6:	b480      	push	{r7}
 800a1f8:	b083      	sub	sp, #12
 800a1fa:	af00      	add	r7, sp, #0
 800a1fc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2201      	movs	r2, #1
 800a202:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2200      	movs	r2, #0
 800a20a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2200      	movs	r2, #0
 800a212:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800a216:	2300      	movs	r3, #0
}
 800a218:	4618      	mov	r0, r3
 800a21a:	370c      	adds	r7, #12
 800a21c:	46bd      	mov	sp, r7
 800a21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a222:	4770      	bx	lr

0800a224 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b082      	sub	sp, #8
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2201      	movs	r2, #1
 800a230:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2200      	movs	r2, #0
 800a238:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2200      	movs	r2, #0
 800a240:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f000 ffb2 	bl	800b1ae <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	791b      	ldrb	r3, [r3, #4]
 800a24e:	4619      	mov	r1, r3
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f000 fda3 	bl	800ad9c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	795b      	ldrb	r3, [r3, #5]
 800a25a:	4619      	mov	r1, r3
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f000 fd9d 	bl	800ad9c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800a262:	2300      	movs	r3, #0
}
 800a264:	4618      	mov	r0, r3
 800a266:	3708      	adds	r7, #8
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}

0800a26c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b086      	sub	sp, #24
 800a270:	af02      	add	r7, sp, #8
 800a272:	6078      	str	r0, [r7, #4]
 800a274:	460b      	mov	r3, r1
 800a276:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800a27e:	78fb      	ldrb	r3, [r7, #3]
 800a280:	b29b      	uxth	r3, r3
 800a282:	9300      	str	r3, [sp, #0]
 800a284:	4613      	mov	r3, r2
 800a286:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a28a:	2100      	movs	r1, #0
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f000 f864 	bl	800a35a <USBH_GetDescriptor>
 800a292:	4603      	mov	r3, r0
 800a294:	73fb      	strb	r3, [r7, #15]
 800a296:	7bfb      	ldrb	r3, [r7, #15]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d10a      	bne.n	800a2b2 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f203 3026 	addw	r0, r3, #806	; 0x326
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a2a8:	78fa      	ldrb	r2, [r7, #3]
 800a2aa:	b292      	uxth	r2, r2
 800a2ac:	4619      	mov	r1, r3
 800a2ae:	f000 f918 	bl	800a4e2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800a2b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3710      	adds	r7, #16
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}

0800a2bc <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b086      	sub	sp, #24
 800a2c0:	af02      	add	r7, sp, #8
 800a2c2:	6078      	str	r0, [r7, #4]
 800a2c4:	460b      	mov	r3, r1
 800a2c6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	331c      	adds	r3, #28
 800a2cc:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a2ce:	887b      	ldrh	r3, [r7, #2]
 800a2d0:	9300      	str	r3, [sp, #0]
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a2d8:	2100      	movs	r1, #0
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f000 f83d 	bl	800a35a <USBH_GetDescriptor>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	72fb      	strb	r3, [r7, #11]
 800a2e4:	7afb      	ldrb	r3, [r7, #11]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d107      	bne.n	800a2fa <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a2f0:	887a      	ldrh	r2, [r7, #2]
 800a2f2:	68f9      	ldr	r1, [r7, #12]
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f000 f964 	bl	800a5c2 <USBH_ParseCfgDesc>
  }

  return status;
 800a2fa:	7afb      	ldrb	r3, [r7, #11]
}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	3710      	adds	r7, #16
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}

0800a304 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b088      	sub	sp, #32
 800a308:	af02      	add	r7, sp, #8
 800a30a:	60f8      	str	r0, [r7, #12]
 800a30c:	607a      	str	r2, [r7, #4]
 800a30e:	461a      	mov	r2, r3
 800a310:	460b      	mov	r3, r1
 800a312:	72fb      	strb	r3, [r7, #11]
 800a314:	4613      	mov	r3, r2
 800a316:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800a318:	7afb      	ldrb	r3, [r7, #11]
 800a31a:	b29b      	uxth	r3, r3
 800a31c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a320:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800a328:	893b      	ldrh	r3, [r7, #8]
 800a32a:	9300      	str	r3, [sp, #0]
 800a32c:	460b      	mov	r3, r1
 800a32e:	2100      	movs	r1, #0
 800a330:	68f8      	ldr	r0, [r7, #12]
 800a332:	f000 f812 	bl	800a35a <USBH_GetDescriptor>
 800a336:	4603      	mov	r3, r0
 800a338:	75fb      	strb	r3, [r7, #23]
 800a33a:	7dfb      	ldrb	r3, [r7, #23]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d107      	bne.n	800a350 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a346:	893a      	ldrh	r2, [r7, #8]
 800a348:	6879      	ldr	r1, [r7, #4]
 800a34a:	4618      	mov	r0, r3
 800a34c:	f000 fa37 	bl	800a7be <USBH_ParseStringDesc>
  }

  return status;
 800a350:	7dfb      	ldrb	r3, [r7, #23]
}
 800a352:	4618      	mov	r0, r3
 800a354:	3718      	adds	r7, #24
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}

0800a35a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800a35a:	b580      	push	{r7, lr}
 800a35c:	b084      	sub	sp, #16
 800a35e:	af00      	add	r7, sp, #0
 800a360:	60f8      	str	r0, [r7, #12]
 800a362:	607b      	str	r3, [r7, #4]
 800a364:	460b      	mov	r3, r1
 800a366:	72fb      	strb	r3, [r7, #11]
 800a368:	4613      	mov	r3, r2
 800a36a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	789b      	ldrb	r3, [r3, #2]
 800a370:	2b01      	cmp	r3, #1
 800a372:	d11c      	bne.n	800a3ae <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a374:	7afb      	ldrb	r3, [r7, #11]
 800a376:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a37a:	b2da      	uxtb	r2, r3
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	2206      	movs	r2, #6
 800a384:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	893a      	ldrh	r2, [r7, #8]
 800a38a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a38c:	893b      	ldrh	r3, [r7, #8]
 800a38e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a392:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a396:	d104      	bne.n	800a3a2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	f240 4209 	movw	r2, #1033	; 0x409
 800a39e:	829a      	strh	r2, [r3, #20]
 800a3a0:	e002      	b.n	800a3a8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	8b3a      	ldrh	r2, [r7, #24]
 800a3ac:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a3ae:	8b3b      	ldrh	r3, [r7, #24]
 800a3b0:	461a      	mov	r2, r3
 800a3b2:	6879      	ldr	r1, [r7, #4]
 800a3b4:	68f8      	ldr	r0, [r7, #12]
 800a3b6:	f000 fa50 	bl	800a85a <USBH_CtlReq>
 800a3ba:	4603      	mov	r3, r0
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	3710      	adds	r7, #16
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd80      	pop	{r7, pc}

0800a3c4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b082      	sub	sp, #8
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
 800a3cc:	460b      	mov	r3, r1
 800a3ce:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	789b      	ldrb	r3, [r3, #2]
 800a3d4:	2b01      	cmp	r3, #1
 800a3d6:	d10f      	bne.n	800a3f8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2205      	movs	r2, #5
 800a3e2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a3e4:	78fb      	ldrb	r3, [r7, #3]
 800a3e6:	b29a      	uxth	r2, r3
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	2100      	movs	r1, #0
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	f000 fa2c 	bl	800a85a <USBH_CtlReq>
 800a402:	4603      	mov	r3, r0
}
 800a404:	4618      	mov	r0, r3
 800a406:	3708      	adds	r7, #8
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}

0800a40c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b082      	sub	sp, #8
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
 800a414:	460b      	mov	r3, r1
 800a416:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	789b      	ldrb	r3, [r3, #2]
 800a41c:	2b01      	cmp	r3, #1
 800a41e:	d10e      	bne.n	800a43e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2200      	movs	r2, #0
 800a424:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2209      	movs	r2, #9
 800a42a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	887a      	ldrh	r2, [r7, #2]
 800a430:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2200      	movs	r2, #0
 800a436:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2200      	movs	r2, #0
 800a43c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a43e:	2200      	movs	r2, #0
 800a440:	2100      	movs	r1, #0
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f000 fa09 	bl	800a85a <USBH_CtlReq>
 800a448:	4603      	mov	r3, r0
}
 800a44a:	4618      	mov	r0, r3
 800a44c:	3708      	adds	r7, #8
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}

0800a452 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a452:	b580      	push	{r7, lr}
 800a454:	b082      	sub	sp, #8
 800a456:	af00      	add	r7, sp, #0
 800a458:	6078      	str	r0, [r7, #4]
 800a45a:	460b      	mov	r3, r1
 800a45c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	789b      	ldrb	r3, [r3, #2]
 800a462:	2b01      	cmp	r3, #1
 800a464:	d10f      	bne.n	800a486 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2200      	movs	r2, #0
 800a46a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2203      	movs	r2, #3
 800a470:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a472:	78fb      	ldrb	r3, [r7, #3]
 800a474:	b29a      	uxth	r2, r3
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2200      	movs	r2, #0
 800a47e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2200      	movs	r2, #0
 800a484:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a486:	2200      	movs	r2, #0
 800a488:	2100      	movs	r1, #0
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f000 f9e5 	bl	800a85a <USBH_CtlReq>
 800a490:	4603      	mov	r3, r0
}
 800a492:	4618      	mov	r0, r3
 800a494:	3708      	adds	r7, #8
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}

0800a49a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a49a:	b580      	push	{r7, lr}
 800a49c:	b082      	sub	sp, #8
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	6078      	str	r0, [r7, #4]
 800a4a2:	460b      	mov	r3, r1
 800a4a4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	789b      	ldrb	r3, [r3, #2]
 800a4aa:	2b01      	cmp	r3, #1
 800a4ac:	d10f      	bne.n	800a4ce <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2202      	movs	r2, #2
 800a4b2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2201      	movs	r2, #1
 800a4b8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a4c0:	78fb      	ldrb	r3, [r7, #3]
 800a4c2:	b29a      	uxth	r2, r3
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	2100      	movs	r1, #0
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	f000 f9c1 	bl	800a85a <USBH_CtlReq>
 800a4d8:	4603      	mov	r3, r0
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3708      	adds	r7, #8
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}

0800a4e2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800a4e2:	b480      	push	{r7}
 800a4e4:	b085      	sub	sp, #20
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	60f8      	str	r0, [r7, #12]
 800a4ea:	60b9      	str	r1, [r7, #8]
 800a4ec:	4613      	mov	r3, r2
 800a4ee:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	781a      	ldrb	r2, [r3, #0]
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	785a      	ldrb	r2, [r3, #1]
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	3302      	adds	r3, #2
 800a504:	781b      	ldrb	r3, [r3, #0]
 800a506:	b29a      	uxth	r2, r3
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	3303      	adds	r3, #3
 800a50c:	781b      	ldrb	r3, [r3, #0]
 800a50e:	b29b      	uxth	r3, r3
 800a510:	021b      	lsls	r3, r3, #8
 800a512:	b29b      	uxth	r3, r3
 800a514:	4313      	orrs	r3, r2
 800a516:	b29a      	uxth	r2, r3
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	791a      	ldrb	r2, [r3, #4]
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	795a      	ldrb	r2, [r3, #5]
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	799a      	ldrb	r2, [r3, #6]
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	79da      	ldrb	r2, [r3, #7]
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800a53c:	88fb      	ldrh	r3, [r7, #6]
 800a53e:	2b08      	cmp	r3, #8
 800a540:	d939      	bls.n	800a5b6 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	3308      	adds	r3, #8
 800a546:	781b      	ldrb	r3, [r3, #0]
 800a548:	b29a      	uxth	r2, r3
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	3309      	adds	r3, #9
 800a54e:	781b      	ldrb	r3, [r3, #0]
 800a550:	b29b      	uxth	r3, r3
 800a552:	021b      	lsls	r3, r3, #8
 800a554:	b29b      	uxth	r3, r3
 800a556:	4313      	orrs	r3, r2
 800a558:	b29a      	uxth	r2, r3
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800a55e:	68bb      	ldr	r3, [r7, #8]
 800a560:	330a      	adds	r3, #10
 800a562:	781b      	ldrb	r3, [r3, #0]
 800a564:	b29a      	uxth	r2, r3
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	330b      	adds	r3, #11
 800a56a:	781b      	ldrb	r3, [r3, #0]
 800a56c:	b29b      	uxth	r3, r3
 800a56e:	021b      	lsls	r3, r3, #8
 800a570:	b29b      	uxth	r3, r3
 800a572:	4313      	orrs	r3, r2
 800a574:	b29a      	uxth	r2, r3
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	330c      	adds	r3, #12
 800a57e:	781b      	ldrb	r3, [r3, #0]
 800a580:	b29a      	uxth	r2, r3
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	330d      	adds	r3, #13
 800a586:	781b      	ldrb	r3, [r3, #0]
 800a588:	b29b      	uxth	r3, r3
 800a58a:	021b      	lsls	r3, r3, #8
 800a58c:	b29b      	uxth	r3, r3
 800a58e:	4313      	orrs	r3, r2
 800a590:	b29a      	uxth	r2, r3
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	7b9a      	ldrb	r2, [r3, #14]
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	7bda      	ldrb	r2, [r3, #15]
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	7c1a      	ldrb	r2, [r3, #16]
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	7c5a      	ldrb	r2, [r3, #17]
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	745a      	strb	r2, [r3, #17]
  }
}
 800a5b6:	bf00      	nop
 800a5b8:	3714      	adds	r7, #20
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c0:	4770      	bx	lr

0800a5c2 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800a5c2:	b580      	push	{r7, lr}
 800a5c4:	b08a      	sub	sp, #40	; 0x28
 800a5c6:	af00      	add	r7, sp, #0
 800a5c8:	60f8      	str	r0, [r7, #12]
 800a5ca:	60b9      	str	r1, [r7, #8]
 800a5cc:	4613      	mov	r3, r2
 800a5ce:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	781a      	ldrb	r2, [r3, #0]
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	785a      	ldrb	r2, [r3, #1]
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	3302      	adds	r3, #2
 800a5f8:	781b      	ldrb	r3, [r3, #0]
 800a5fa:	b29a      	uxth	r2, r3
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	3303      	adds	r3, #3
 800a600:	781b      	ldrb	r3, [r3, #0]
 800a602:	b29b      	uxth	r3, r3
 800a604:	021b      	lsls	r3, r3, #8
 800a606:	b29b      	uxth	r3, r3
 800a608:	4313      	orrs	r3, r2
 800a60a:	b29a      	uxth	r2, r3
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	791a      	ldrb	r2, [r3, #4]
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	795a      	ldrb	r2, [r3, #5]
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	799a      	ldrb	r2, [r3, #6]
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	79da      	ldrb	r2, [r3, #7]
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	7a1a      	ldrb	r2, [r3, #8]
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a638:	88fb      	ldrh	r3, [r7, #6]
 800a63a:	2b09      	cmp	r3, #9
 800a63c:	d95f      	bls.n	800a6fe <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800a63e:	2309      	movs	r3, #9
 800a640:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800a642:	2300      	movs	r3, #0
 800a644:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a646:	e051      	b.n	800a6ec <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a648:	f107 0316 	add.w	r3, r7, #22
 800a64c:	4619      	mov	r1, r3
 800a64e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a650:	f000 f8e8 	bl	800a824 <USBH_GetNextDesc>
 800a654:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800a656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a658:	785b      	ldrb	r3, [r3, #1]
 800a65a:	2b04      	cmp	r3, #4
 800a65c:	d146      	bne.n	800a6ec <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800a65e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a662:	221a      	movs	r2, #26
 800a664:	fb02 f303 	mul.w	r3, r2, r3
 800a668:	3308      	adds	r3, #8
 800a66a:	68fa      	ldr	r2, [r7, #12]
 800a66c:	4413      	add	r3, r2
 800a66e:	3302      	adds	r3, #2
 800a670:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a672:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a674:	69f8      	ldr	r0, [r7, #28]
 800a676:	f000 f846 	bl	800a706 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a67a:	2300      	movs	r3, #0
 800a67c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800a680:	2300      	movs	r3, #0
 800a682:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a684:	e022      	b.n	800a6cc <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a686:	f107 0316 	add.w	r3, r7, #22
 800a68a:	4619      	mov	r1, r3
 800a68c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a68e:	f000 f8c9 	bl	800a824 <USBH_GetNextDesc>
 800a692:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800a694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a696:	785b      	ldrb	r3, [r3, #1]
 800a698:	2b05      	cmp	r3, #5
 800a69a:	d117      	bne.n	800a6cc <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a69c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a6a0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a6a4:	3201      	adds	r2, #1
 800a6a6:	00d2      	lsls	r2, r2, #3
 800a6a8:	211a      	movs	r1, #26
 800a6aa:	fb01 f303 	mul.w	r3, r1, r3
 800a6ae:	4413      	add	r3, r2
 800a6b0:	3308      	adds	r3, #8
 800a6b2:	68fa      	ldr	r2, [r7, #12]
 800a6b4:	4413      	add	r3, r2
 800a6b6:	3304      	adds	r3, #4
 800a6b8:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800a6ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a6bc:	69b8      	ldr	r0, [r7, #24]
 800a6be:	f000 f851 	bl	800a764 <USBH_ParseEPDesc>
            ep_ix++;
 800a6c2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a6c6:	3301      	adds	r3, #1
 800a6c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a6cc:	69fb      	ldr	r3, [r7, #28]
 800a6ce:	791b      	ldrb	r3, [r3, #4]
 800a6d0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a6d4:	429a      	cmp	r2, r3
 800a6d6:	d204      	bcs.n	800a6e2 <USBH_ParseCfgDesc+0x120>
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	885a      	ldrh	r2, [r3, #2]
 800a6dc:	8afb      	ldrh	r3, [r7, #22]
 800a6de:	429a      	cmp	r2, r3
 800a6e0:	d8d1      	bhi.n	800a686 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800a6e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a6e6:	3301      	adds	r3, #1
 800a6e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a6ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a6f0:	2b01      	cmp	r3, #1
 800a6f2:	d804      	bhi.n	800a6fe <USBH_ParseCfgDesc+0x13c>
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	885a      	ldrh	r2, [r3, #2]
 800a6f8:	8afb      	ldrh	r3, [r7, #22]
 800a6fa:	429a      	cmp	r2, r3
 800a6fc:	d8a4      	bhi.n	800a648 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800a6fe:	bf00      	nop
 800a700:	3728      	adds	r7, #40	; 0x28
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}

0800a706 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800a706:	b480      	push	{r7}
 800a708:	b083      	sub	sp, #12
 800a70a:	af00      	add	r7, sp, #0
 800a70c:	6078      	str	r0, [r7, #4]
 800a70e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	781a      	ldrb	r2, [r3, #0]
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	785a      	ldrb	r2, [r3, #1]
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	789a      	ldrb	r2, [r3, #2]
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	78da      	ldrb	r2, [r3, #3]
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	791a      	ldrb	r2, [r3, #4]
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	795a      	ldrb	r2, [r3, #5]
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	799a      	ldrb	r2, [r3, #6]
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	79da      	ldrb	r2, [r3, #7]
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	7a1a      	ldrb	r2, [r3, #8]
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	721a      	strb	r2, [r3, #8]
}
 800a758:	bf00      	nop
 800a75a:	370c      	adds	r7, #12
 800a75c:	46bd      	mov	sp, r7
 800a75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a762:	4770      	bx	lr

0800a764 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800a764:	b480      	push	{r7}
 800a766:	b083      	sub	sp, #12
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
 800a76c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	781a      	ldrb	r2, [r3, #0]
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	785a      	ldrb	r2, [r3, #1]
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	789a      	ldrb	r2, [r3, #2]
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	78da      	ldrb	r2, [r3, #3]
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	3304      	adds	r3, #4
 800a792:	781b      	ldrb	r3, [r3, #0]
 800a794:	b29a      	uxth	r2, r3
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	3305      	adds	r3, #5
 800a79a:	781b      	ldrb	r3, [r3, #0]
 800a79c:	b29b      	uxth	r3, r3
 800a79e:	021b      	lsls	r3, r3, #8
 800a7a0:	b29b      	uxth	r3, r3
 800a7a2:	4313      	orrs	r3, r2
 800a7a4:	b29a      	uxth	r2, r3
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	799a      	ldrb	r2, [r3, #6]
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	719a      	strb	r2, [r3, #6]
}
 800a7b2:	bf00      	nop
 800a7b4:	370c      	adds	r7, #12
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7bc:	4770      	bx	lr

0800a7be <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a7be:	b480      	push	{r7}
 800a7c0:	b087      	sub	sp, #28
 800a7c2:	af00      	add	r7, sp, #0
 800a7c4:	60f8      	str	r0, [r7, #12]
 800a7c6:	60b9      	str	r1, [r7, #8]
 800a7c8:	4613      	mov	r3, r2
 800a7ca:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	3301      	adds	r3, #1
 800a7d0:	781b      	ldrb	r3, [r3, #0]
 800a7d2:	2b03      	cmp	r3, #3
 800a7d4:	d120      	bne.n	800a818 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	781b      	ldrb	r3, [r3, #0]
 800a7da:	1e9a      	subs	r2, r3, #2
 800a7dc:	88fb      	ldrh	r3, [r7, #6]
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	bf28      	it	cs
 800a7e2:	4613      	movcs	r3, r2
 800a7e4:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	3302      	adds	r3, #2
 800a7ea:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	82fb      	strh	r3, [r7, #22]
 800a7f0:	e00b      	b.n	800a80a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a7f2:	8afb      	ldrh	r3, [r7, #22]
 800a7f4:	68fa      	ldr	r2, [r7, #12]
 800a7f6:	4413      	add	r3, r2
 800a7f8:	781a      	ldrb	r2, [r3, #0]
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	3301      	adds	r3, #1
 800a802:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a804:	8afb      	ldrh	r3, [r7, #22]
 800a806:	3302      	adds	r3, #2
 800a808:	82fb      	strh	r3, [r7, #22]
 800a80a:	8afa      	ldrh	r2, [r7, #22]
 800a80c:	8abb      	ldrh	r3, [r7, #20]
 800a80e:	429a      	cmp	r2, r3
 800a810:	d3ef      	bcc.n	800a7f2 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	2200      	movs	r2, #0
 800a816:	701a      	strb	r2, [r3, #0]
  }
}
 800a818:	bf00      	nop
 800a81a:	371c      	adds	r7, #28
 800a81c:	46bd      	mov	sp, r7
 800a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a822:	4770      	bx	lr

0800a824 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800a824:	b480      	push	{r7}
 800a826:	b085      	sub	sp, #20
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
 800a82c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	881a      	ldrh	r2, [r3, #0]
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	781b      	ldrb	r3, [r3, #0]
 800a836:	b29b      	uxth	r3, r3
 800a838:	4413      	add	r3, r2
 800a83a:	b29a      	uxth	r2, r3
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	781b      	ldrb	r3, [r3, #0]
 800a844:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	4413      	add	r3, r2
 800a84a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a84c:	68fb      	ldr	r3, [r7, #12]
}
 800a84e:	4618      	mov	r0, r3
 800a850:	3714      	adds	r7, #20
 800a852:	46bd      	mov	sp, r7
 800a854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a858:	4770      	bx	lr

0800a85a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a85a:	b580      	push	{r7, lr}
 800a85c:	b086      	sub	sp, #24
 800a85e:	af00      	add	r7, sp, #0
 800a860:	60f8      	str	r0, [r7, #12]
 800a862:	60b9      	str	r1, [r7, #8]
 800a864:	4613      	mov	r3, r2
 800a866:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a868:	2301      	movs	r3, #1
 800a86a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	789b      	ldrb	r3, [r3, #2]
 800a870:	2b01      	cmp	r3, #1
 800a872:	d002      	beq.n	800a87a <USBH_CtlReq+0x20>
 800a874:	2b02      	cmp	r3, #2
 800a876:	d00f      	beq.n	800a898 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a878:	e027      	b.n	800a8ca <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	68ba      	ldr	r2, [r7, #8]
 800a87e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	88fa      	ldrh	r2, [r7, #6]
 800a884:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	2201      	movs	r2, #1
 800a88a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	2202      	movs	r2, #2
 800a890:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a892:	2301      	movs	r3, #1
 800a894:	75fb      	strb	r3, [r7, #23]
      break;
 800a896:	e018      	b.n	800a8ca <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a898:	68f8      	ldr	r0, [r7, #12]
 800a89a:	f000 f81b 	bl	800a8d4 <USBH_HandleControl>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a8a2:	7dfb      	ldrb	r3, [r7, #23]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d002      	beq.n	800a8ae <USBH_CtlReq+0x54>
 800a8a8:	7dfb      	ldrb	r3, [r7, #23]
 800a8aa:	2b03      	cmp	r3, #3
 800a8ac:	d106      	bne.n	800a8bc <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	2201      	movs	r2, #1
 800a8b2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	761a      	strb	r2, [r3, #24]
      break;
 800a8ba:	e005      	b.n	800a8c8 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a8bc:	7dfb      	ldrb	r3, [r7, #23]
 800a8be:	2b02      	cmp	r3, #2
 800a8c0:	d102      	bne.n	800a8c8 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	2201      	movs	r2, #1
 800a8c6:	709a      	strb	r2, [r3, #2]
      break;
 800a8c8:	bf00      	nop
  }
  return status;
 800a8ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3718      	adds	r7, #24
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}

0800a8d4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b086      	sub	sp, #24
 800a8d8:	af02      	add	r7, sp, #8
 800a8da:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a8dc:	2301      	movs	r3, #1
 800a8de:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	7e1b      	ldrb	r3, [r3, #24]
 800a8e8:	3b01      	subs	r3, #1
 800a8ea:	2b0a      	cmp	r3, #10
 800a8ec:	f200 8156 	bhi.w	800ab9c <USBH_HandleControl+0x2c8>
 800a8f0:	a201      	add	r2, pc, #4	; (adr r2, 800a8f8 <USBH_HandleControl+0x24>)
 800a8f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8f6:	bf00      	nop
 800a8f8:	0800a925 	.word	0x0800a925
 800a8fc:	0800a93f 	.word	0x0800a93f
 800a900:	0800a9a9 	.word	0x0800a9a9
 800a904:	0800a9cf 	.word	0x0800a9cf
 800a908:	0800aa07 	.word	0x0800aa07
 800a90c:	0800aa31 	.word	0x0800aa31
 800a910:	0800aa83 	.word	0x0800aa83
 800a914:	0800aaa5 	.word	0x0800aaa5
 800a918:	0800aae1 	.word	0x0800aae1
 800a91c:	0800ab07 	.word	0x0800ab07
 800a920:	0800ab45 	.word	0x0800ab45
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	f103 0110 	add.w	r1, r3, #16
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	795b      	ldrb	r3, [r3, #5]
 800a92e:	461a      	mov	r2, r3
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f000 f943 	bl	800abbc <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2202      	movs	r2, #2
 800a93a:	761a      	strb	r2, [r3, #24]
      break;
 800a93c:	e139      	b.n	800abb2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	795b      	ldrb	r3, [r3, #5]
 800a942:	4619      	mov	r1, r3
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	f000 fd21 	bl	800b38c <USBH_LL_GetURBState>
 800a94a:	4603      	mov	r3, r0
 800a94c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a94e:	7bbb      	ldrb	r3, [r7, #14]
 800a950:	2b01      	cmp	r3, #1
 800a952:	d11e      	bne.n	800a992 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	7c1b      	ldrb	r3, [r3, #16]
 800a958:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a95c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	8adb      	ldrh	r3, [r3, #22]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d00a      	beq.n	800a97c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a966:	7b7b      	ldrb	r3, [r7, #13]
 800a968:	2b80      	cmp	r3, #128	; 0x80
 800a96a:	d103      	bne.n	800a974 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2203      	movs	r2, #3
 800a970:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a972:	e115      	b.n	800aba0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2205      	movs	r2, #5
 800a978:	761a      	strb	r2, [r3, #24]
      break;
 800a97a:	e111      	b.n	800aba0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a97c:	7b7b      	ldrb	r3, [r7, #13]
 800a97e:	2b80      	cmp	r3, #128	; 0x80
 800a980:	d103      	bne.n	800a98a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2209      	movs	r2, #9
 800a986:	761a      	strb	r2, [r3, #24]
      break;
 800a988:	e10a      	b.n	800aba0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2207      	movs	r2, #7
 800a98e:	761a      	strb	r2, [r3, #24]
      break;
 800a990:	e106      	b.n	800aba0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a992:	7bbb      	ldrb	r3, [r7, #14]
 800a994:	2b04      	cmp	r3, #4
 800a996:	d003      	beq.n	800a9a0 <USBH_HandleControl+0xcc>
 800a998:	7bbb      	ldrb	r3, [r7, #14]
 800a99a:	2b02      	cmp	r3, #2
 800a99c:	f040 8100 	bne.w	800aba0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	220b      	movs	r2, #11
 800a9a4:	761a      	strb	r2, [r3, #24]
      break;
 800a9a6:	e0fb      	b.n	800aba0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a9ae:	b29a      	uxth	r2, r3
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6899      	ldr	r1, [r3, #8]
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	899a      	ldrh	r2, [r3, #12]
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	791b      	ldrb	r3, [r3, #4]
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f000 f93a 	bl	800ac3a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2204      	movs	r2, #4
 800a9ca:	761a      	strb	r2, [r3, #24]
      break;
 800a9cc:	e0f1      	b.n	800abb2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	791b      	ldrb	r3, [r3, #4]
 800a9d2:	4619      	mov	r1, r3
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	f000 fcd9 	bl	800b38c <USBH_LL_GetURBState>
 800a9da:	4603      	mov	r3, r0
 800a9dc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a9de:	7bbb      	ldrb	r3, [r7, #14]
 800a9e0:	2b01      	cmp	r3, #1
 800a9e2:	d102      	bne.n	800a9ea <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2209      	movs	r2, #9
 800a9e8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a9ea:	7bbb      	ldrb	r3, [r7, #14]
 800a9ec:	2b05      	cmp	r3, #5
 800a9ee:	d102      	bne.n	800a9f6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a9f0:	2303      	movs	r3, #3
 800a9f2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a9f4:	e0d6      	b.n	800aba4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a9f6:	7bbb      	ldrb	r3, [r7, #14]
 800a9f8:	2b04      	cmp	r3, #4
 800a9fa:	f040 80d3 	bne.w	800aba4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	220b      	movs	r2, #11
 800aa02:	761a      	strb	r2, [r3, #24]
      break;
 800aa04:	e0ce      	b.n	800aba4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6899      	ldr	r1, [r3, #8]
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	899a      	ldrh	r2, [r3, #12]
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	795b      	ldrb	r3, [r3, #5]
 800aa12:	2001      	movs	r0, #1
 800aa14:	9000      	str	r0, [sp, #0]
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f000 f8ea 	bl	800abf0 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800aa22:	b29a      	uxth	r2, r3
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2206      	movs	r2, #6
 800aa2c:	761a      	strb	r2, [r3, #24]
      break;
 800aa2e:	e0c0      	b.n	800abb2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	795b      	ldrb	r3, [r3, #5]
 800aa34:	4619      	mov	r1, r3
 800aa36:	6878      	ldr	r0, [r7, #4]
 800aa38:	f000 fca8 	bl	800b38c <USBH_LL_GetURBState>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800aa40:	7bbb      	ldrb	r3, [r7, #14]
 800aa42:	2b01      	cmp	r3, #1
 800aa44:	d103      	bne.n	800aa4e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2207      	movs	r2, #7
 800aa4a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800aa4c:	e0ac      	b.n	800aba8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800aa4e:	7bbb      	ldrb	r3, [r7, #14]
 800aa50:	2b05      	cmp	r3, #5
 800aa52:	d105      	bne.n	800aa60 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	220c      	movs	r2, #12
 800aa58:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800aa5a:	2303      	movs	r3, #3
 800aa5c:	73fb      	strb	r3, [r7, #15]
      break;
 800aa5e:	e0a3      	b.n	800aba8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800aa60:	7bbb      	ldrb	r3, [r7, #14]
 800aa62:	2b02      	cmp	r3, #2
 800aa64:	d103      	bne.n	800aa6e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2205      	movs	r2, #5
 800aa6a:	761a      	strb	r2, [r3, #24]
      break;
 800aa6c:	e09c      	b.n	800aba8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800aa6e:	7bbb      	ldrb	r3, [r7, #14]
 800aa70:	2b04      	cmp	r3, #4
 800aa72:	f040 8099 	bne.w	800aba8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	220b      	movs	r2, #11
 800aa7a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800aa7c:	2302      	movs	r3, #2
 800aa7e:	73fb      	strb	r3, [r7, #15]
      break;
 800aa80:	e092      	b.n	800aba8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	791b      	ldrb	r3, [r3, #4]
 800aa86:	2200      	movs	r2, #0
 800aa88:	2100      	movs	r1, #0
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f000 f8d5 	bl	800ac3a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800aa96:	b29a      	uxth	r2, r3
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2208      	movs	r2, #8
 800aaa0:	761a      	strb	r2, [r3, #24]

      break;
 800aaa2:	e086      	b.n	800abb2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	791b      	ldrb	r3, [r3, #4]
 800aaa8:	4619      	mov	r1, r3
 800aaaa:	6878      	ldr	r0, [r7, #4]
 800aaac:	f000 fc6e 	bl	800b38c <USBH_LL_GetURBState>
 800aab0:	4603      	mov	r3, r0
 800aab2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800aab4:	7bbb      	ldrb	r3, [r7, #14]
 800aab6:	2b01      	cmp	r3, #1
 800aab8:	d105      	bne.n	800aac6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	220d      	movs	r2, #13
 800aabe:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800aac0:	2300      	movs	r3, #0
 800aac2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800aac4:	e072      	b.n	800abac <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800aac6:	7bbb      	ldrb	r3, [r7, #14]
 800aac8:	2b04      	cmp	r3, #4
 800aaca:	d103      	bne.n	800aad4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	220b      	movs	r2, #11
 800aad0:	761a      	strb	r2, [r3, #24]
      break;
 800aad2:	e06b      	b.n	800abac <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800aad4:	7bbb      	ldrb	r3, [r7, #14]
 800aad6:	2b05      	cmp	r3, #5
 800aad8:	d168      	bne.n	800abac <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800aada:	2303      	movs	r3, #3
 800aadc:	73fb      	strb	r3, [r7, #15]
      break;
 800aade:	e065      	b.n	800abac <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	795b      	ldrb	r3, [r3, #5]
 800aae4:	2201      	movs	r2, #1
 800aae6:	9200      	str	r2, [sp, #0]
 800aae8:	2200      	movs	r2, #0
 800aaea:	2100      	movs	r1, #0
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f000 f87f 	bl	800abf0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800aaf8:	b29a      	uxth	r2, r3
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	220a      	movs	r2, #10
 800ab02:	761a      	strb	r2, [r3, #24]
      break;
 800ab04:	e055      	b.n	800abb2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	795b      	ldrb	r3, [r3, #5]
 800ab0a:	4619      	mov	r1, r3
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f000 fc3d 	bl	800b38c <USBH_LL_GetURBState>
 800ab12:	4603      	mov	r3, r0
 800ab14:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800ab16:	7bbb      	ldrb	r3, [r7, #14]
 800ab18:	2b01      	cmp	r3, #1
 800ab1a:	d105      	bne.n	800ab28 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	220d      	movs	r2, #13
 800ab24:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ab26:	e043      	b.n	800abb0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ab28:	7bbb      	ldrb	r3, [r7, #14]
 800ab2a:	2b02      	cmp	r3, #2
 800ab2c:	d103      	bne.n	800ab36 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2209      	movs	r2, #9
 800ab32:	761a      	strb	r2, [r3, #24]
      break;
 800ab34:	e03c      	b.n	800abb0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800ab36:	7bbb      	ldrb	r3, [r7, #14]
 800ab38:	2b04      	cmp	r3, #4
 800ab3a:	d139      	bne.n	800abb0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	220b      	movs	r2, #11
 800ab40:	761a      	strb	r2, [r3, #24]
      break;
 800ab42:	e035      	b.n	800abb0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	7e5b      	ldrb	r3, [r3, #25]
 800ab48:	3301      	adds	r3, #1
 800ab4a:	b2da      	uxtb	r2, r3
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	765a      	strb	r2, [r3, #25]
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	7e5b      	ldrb	r3, [r3, #25]
 800ab54:	2b02      	cmp	r3, #2
 800ab56:	d806      	bhi.n	800ab66 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2201      	movs	r2, #1
 800ab5c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2201      	movs	r2, #1
 800ab62:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800ab64:	e025      	b.n	800abb2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ab6c:	2106      	movs	r1, #6
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2200      	movs	r2, #0
 800ab76:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	795b      	ldrb	r3, [r3, #5]
 800ab7c:	4619      	mov	r1, r3
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	f000 f90c 	bl	800ad9c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	791b      	ldrb	r3, [r3, #4]
 800ab88:	4619      	mov	r1, r3
 800ab8a:	6878      	ldr	r0, [r7, #4]
 800ab8c:	f000 f906 	bl	800ad9c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2200      	movs	r2, #0
 800ab94:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800ab96:	2302      	movs	r3, #2
 800ab98:	73fb      	strb	r3, [r7, #15]
      break;
 800ab9a:	e00a      	b.n	800abb2 <USBH_HandleControl+0x2de>

    default:
      break;
 800ab9c:	bf00      	nop
 800ab9e:	e008      	b.n	800abb2 <USBH_HandleControl+0x2de>
      break;
 800aba0:	bf00      	nop
 800aba2:	e006      	b.n	800abb2 <USBH_HandleControl+0x2de>
      break;
 800aba4:	bf00      	nop
 800aba6:	e004      	b.n	800abb2 <USBH_HandleControl+0x2de>
      break;
 800aba8:	bf00      	nop
 800abaa:	e002      	b.n	800abb2 <USBH_HandleControl+0x2de>
      break;
 800abac:	bf00      	nop
 800abae:	e000      	b.n	800abb2 <USBH_HandleControl+0x2de>
      break;
 800abb0:	bf00      	nop
  }

  return status;
 800abb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800abb4:	4618      	mov	r0, r3
 800abb6:	3710      	adds	r7, #16
 800abb8:	46bd      	mov	sp, r7
 800abba:	bd80      	pop	{r7, pc}

0800abbc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b088      	sub	sp, #32
 800abc0:	af04      	add	r7, sp, #16
 800abc2:	60f8      	str	r0, [r7, #12]
 800abc4:	60b9      	str	r1, [r7, #8]
 800abc6:	4613      	mov	r3, r2
 800abc8:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800abca:	79f9      	ldrb	r1, [r7, #7]
 800abcc:	2300      	movs	r3, #0
 800abce:	9303      	str	r3, [sp, #12]
 800abd0:	2308      	movs	r3, #8
 800abd2:	9302      	str	r3, [sp, #8]
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	9301      	str	r3, [sp, #4]
 800abd8:	2300      	movs	r3, #0
 800abda:	9300      	str	r3, [sp, #0]
 800abdc:	2300      	movs	r3, #0
 800abde:	2200      	movs	r2, #0
 800abe0:	68f8      	ldr	r0, [r7, #12]
 800abe2:	f000 fba2 	bl	800b32a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800abe6:	2300      	movs	r3, #0
}
 800abe8:	4618      	mov	r0, r3
 800abea:	3710      	adds	r7, #16
 800abec:	46bd      	mov	sp, r7
 800abee:	bd80      	pop	{r7, pc}

0800abf0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b088      	sub	sp, #32
 800abf4:	af04      	add	r7, sp, #16
 800abf6:	60f8      	str	r0, [r7, #12]
 800abf8:	60b9      	str	r1, [r7, #8]
 800abfa:	4611      	mov	r1, r2
 800abfc:	461a      	mov	r2, r3
 800abfe:	460b      	mov	r3, r1
 800ac00:	80fb      	strh	r3, [r7, #6]
 800ac02:	4613      	mov	r3, r2
 800ac04:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d001      	beq.n	800ac14 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800ac10:	2300      	movs	r3, #0
 800ac12:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ac14:	7979      	ldrb	r1, [r7, #5]
 800ac16:	7e3b      	ldrb	r3, [r7, #24]
 800ac18:	9303      	str	r3, [sp, #12]
 800ac1a:	88fb      	ldrh	r3, [r7, #6]
 800ac1c:	9302      	str	r3, [sp, #8]
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	9301      	str	r3, [sp, #4]
 800ac22:	2301      	movs	r3, #1
 800ac24:	9300      	str	r3, [sp, #0]
 800ac26:	2300      	movs	r3, #0
 800ac28:	2200      	movs	r2, #0
 800ac2a:	68f8      	ldr	r0, [r7, #12]
 800ac2c:	f000 fb7d 	bl	800b32a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800ac30:	2300      	movs	r3, #0
}
 800ac32:	4618      	mov	r0, r3
 800ac34:	3710      	adds	r7, #16
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}

0800ac3a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800ac3a:	b580      	push	{r7, lr}
 800ac3c:	b088      	sub	sp, #32
 800ac3e:	af04      	add	r7, sp, #16
 800ac40:	60f8      	str	r0, [r7, #12]
 800ac42:	60b9      	str	r1, [r7, #8]
 800ac44:	4611      	mov	r1, r2
 800ac46:	461a      	mov	r2, r3
 800ac48:	460b      	mov	r3, r1
 800ac4a:	80fb      	strh	r3, [r7, #6]
 800ac4c:	4613      	mov	r3, r2
 800ac4e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ac50:	7979      	ldrb	r1, [r7, #5]
 800ac52:	2300      	movs	r3, #0
 800ac54:	9303      	str	r3, [sp, #12]
 800ac56:	88fb      	ldrh	r3, [r7, #6]
 800ac58:	9302      	str	r3, [sp, #8]
 800ac5a:	68bb      	ldr	r3, [r7, #8]
 800ac5c:	9301      	str	r3, [sp, #4]
 800ac5e:	2301      	movs	r3, #1
 800ac60:	9300      	str	r3, [sp, #0]
 800ac62:	2300      	movs	r3, #0
 800ac64:	2201      	movs	r2, #1
 800ac66:	68f8      	ldr	r0, [r7, #12]
 800ac68:	f000 fb5f 	bl	800b32a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800ac6c:	2300      	movs	r3, #0

}
 800ac6e:	4618      	mov	r0, r3
 800ac70:	3710      	adds	r7, #16
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}

0800ac76 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800ac76:	b580      	push	{r7, lr}
 800ac78:	b088      	sub	sp, #32
 800ac7a:	af04      	add	r7, sp, #16
 800ac7c:	60f8      	str	r0, [r7, #12]
 800ac7e:	60b9      	str	r1, [r7, #8]
 800ac80:	4611      	mov	r1, r2
 800ac82:	461a      	mov	r2, r3
 800ac84:	460b      	mov	r3, r1
 800ac86:	80fb      	strh	r3, [r7, #6]
 800ac88:	4613      	mov	r3, r2
 800ac8a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d001      	beq.n	800ac9a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800ac96:	2300      	movs	r3, #0
 800ac98:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ac9a:	7979      	ldrb	r1, [r7, #5]
 800ac9c:	7e3b      	ldrb	r3, [r7, #24]
 800ac9e:	9303      	str	r3, [sp, #12]
 800aca0:	88fb      	ldrh	r3, [r7, #6]
 800aca2:	9302      	str	r3, [sp, #8]
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	9301      	str	r3, [sp, #4]
 800aca8:	2301      	movs	r3, #1
 800acaa:	9300      	str	r3, [sp, #0]
 800acac:	2302      	movs	r3, #2
 800acae:	2200      	movs	r2, #0
 800acb0:	68f8      	ldr	r0, [r7, #12]
 800acb2:	f000 fb3a 	bl	800b32a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800acb6:	2300      	movs	r3, #0
}
 800acb8:	4618      	mov	r0, r3
 800acba:	3710      	adds	r7, #16
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bd80      	pop	{r7, pc}

0800acc0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b088      	sub	sp, #32
 800acc4:	af04      	add	r7, sp, #16
 800acc6:	60f8      	str	r0, [r7, #12]
 800acc8:	60b9      	str	r1, [r7, #8]
 800acca:	4611      	mov	r1, r2
 800accc:	461a      	mov	r2, r3
 800acce:	460b      	mov	r3, r1
 800acd0:	80fb      	strh	r3, [r7, #6]
 800acd2:	4613      	mov	r3, r2
 800acd4:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800acd6:	7979      	ldrb	r1, [r7, #5]
 800acd8:	2300      	movs	r3, #0
 800acda:	9303      	str	r3, [sp, #12]
 800acdc:	88fb      	ldrh	r3, [r7, #6]
 800acde:	9302      	str	r3, [sp, #8]
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	9301      	str	r3, [sp, #4]
 800ace4:	2301      	movs	r3, #1
 800ace6:	9300      	str	r3, [sp, #0]
 800ace8:	2302      	movs	r3, #2
 800acea:	2201      	movs	r2, #1
 800acec:	68f8      	ldr	r0, [r7, #12]
 800acee:	f000 fb1c 	bl	800b32a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800acf2:	2300      	movs	r3, #0
}
 800acf4:	4618      	mov	r0, r3
 800acf6:	3710      	adds	r7, #16
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}

0800acfc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b086      	sub	sp, #24
 800ad00:	af04      	add	r7, sp, #16
 800ad02:	6078      	str	r0, [r7, #4]
 800ad04:	4608      	mov	r0, r1
 800ad06:	4611      	mov	r1, r2
 800ad08:	461a      	mov	r2, r3
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	70fb      	strb	r3, [r7, #3]
 800ad0e:	460b      	mov	r3, r1
 800ad10:	70bb      	strb	r3, [r7, #2]
 800ad12:	4613      	mov	r3, r2
 800ad14:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800ad16:	7878      	ldrb	r0, [r7, #1]
 800ad18:	78ba      	ldrb	r2, [r7, #2]
 800ad1a:	78f9      	ldrb	r1, [r7, #3]
 800ad1c:	8b3b      	ldrh	r3, [r7, #24]
 800ad1e:	9302      	str	r3, [sp, #8]
 800ad20:	7d3b      	ldrb	r3, [r7, #20]
 800ad22:	9301      	str	r3, [sp, #4]
 800ad24:	7c3b      	ldrb	r3, [r7, #16]
 800ad26:	9300      	str	r3, [sp, #0]
 800ad28:	4603      	mov	r3, r0
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f000 faaf 	bl	800b28e <USBH_LL_OpenPipe>

  return USBH_OK;
 800ad30:	2300      	movs	r3, #0
}
 800ad32:	4618      	mov	r0, r3
 800ad34:	3708      	adds	r7, #8
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bd80      	pop	{r7, pc}

0800ad3a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800ad3a:	b580      	push	{r7, lr}
 800ad3c:	b082      	sub	sp, #8
 800ad3e:	af00      	add	r7, sp, #0
 800ad40:	6078      	str	r0, [r7, #4]
 800ad42:	460b      	mov	r3, r1
 800ad44:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800ad46:	78fb      	ldrb	r3, [r7, #3]
 800ad48:	4619      	mov	r1, r3
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f000 face 	bl	800b2ec <USBH_LL_ClosePipe>

  return USBH_OK;
 800ad50:	2300      	movs	r3, #0
}
 800ad52:	4618      	mov	r0, r3
 800ad54:	3708      	adds	r7, #8
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd80      	pop	{r7, pc}

0800ad5a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800ad5a:	b580      	push	{r7, lr}
 800ad5c:	b084      	sub	sp, #16
 800ad5e:	af00      	add	r7, sp, #0
 800ad60:	6078      	str	r0, [r7, #4]
 800ad62:	460b      	mov	r3, r1
 800ad64:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f000 f836 	bl	800add8 <USBH_GetFreePipe>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800ad70:	89fb      	ldrh	r3, [r7, #14]
 800ad72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad76:	4293      	cmp	r3, r2
 800ad78:	d00a      	beq.n	800ad90 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800ad7a:	78fa      	ldrb	r2, [r7, #3]
 800ad7c:	89fb      	ldrh	r3, [r7, #14]
 800ad7e:	f003 030f 	and.w	r3, r3, #15
 800ad82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ad86:	6879      	ldr	r1, [r7, #4]
 800ad88:	33e0      	adds	r3, #224	; 0xe0
 800ad8a:	009b      	lsls	r3, r3, #2
 800ad8c:	440b      	add	r3, r1
 800ad8e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800ad90:	89fb      	ldrh	r3, [r7, #14]
 800ad92:	b2db      	uxtb	r3, r3
}
 800ad94:	4618      	mov	r0, r3
 800ad96:	3710      	adds	r7, #16
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd80      	pop	{r7, pc}

0800ad9c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800ad9c:	b480      	push	{r7}
 800ad9e:	b083      	sub	sp, #12
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
 800ada4:	460b      	mov	r3, r1
 800ada6:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800ada8:	78fb      	ldrb	r3, [r7, #3]
 800adaa:	2b0a      	cmp	r3, #10
 800adac:	d80d      	bhi.n	800adca <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800adae:	78fb      	ldrb	r3, [r7, #3]
 800adb0:	687a      	ldr	r2, [r7, #4]
 800adb2:	33e0      	adds	r3, #224	; 0xe0
 800adb4:	009b      	lsls	r3, r3, #2
 800adb6:	4413      	add	r3, r2
 800adb8:	685a      	ldr	r2, [r3, #4]
 800adba:	78fb      	ldrb	r3, [r7, #3]
 800adbc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800adc0:	6879      	ldr	r1, [r7, #4]
 800adc2:	33e0      	adds	r3, #224	; 0xe0
 800adc4:	009b      	lsls	r3, r3, #2
 800adc6:	440b      	add	r3, r1
 800adc8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800adca:	2300      	movs	r3, #0
}
 800adcc:	4618      	mov	r0, r3
 800adce:	370c      	adds	r7, #12
 800add0:	46bd      	mov	sp, r7
 800add2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add6:	4770      	bx	lr

0800add8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800add8:	b480      	push	{r7}
 800adda:	b085      	sub	sp, #20
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800ade0:	2300      	movs	r3, #0
 800ade2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800ade4:	2300      	movs	r3, #0
 800ade6:	73fb      	strb	r3, [r7, #15]
 800ade8:	e00f      	b.n	800ae0a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800adea:	7bfb      	ldrb	r3, [r7, #15]
 800adec:	687a      	ldr	r2, [r7, #4]
 800adee:	33e0      	adds	r3, #224	; 0xe0
 800adf0:	009b      	lsls	r3, r3, #2
 800adf2:	4413      	add	r3, r2
 800adf4:	685b      	ldr	r3, [r3, #4]
 800adf6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d102      	bne.n	800ae04 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800adfe:	7bfb      	ldrb	r3, [r7, #15]
 800ae00:	b29b      	uxth	r3, r3
 800ae02:	e007      	b.n	800ae14 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800ae04:	7bfb      	ldrb	r3, [r7, #15]
 800ae06:	3301      	adds	r3, #1
 800ae08:	73fb      	strb	r3, [r7, #15]
 800ae0a:	7bfb      	ldrb	r3, [r7, #15]
 800ae0c:	2b0a      	cmp	r3, #10
 800ae0e:	d9ec      	bls.n	800adea <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800ae10:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	3714      	adds	r7, #20
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1e:	4770      	bx	lr

0800ae20 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ae20:	b480      	push	{r7}
 800ae22:	b087      	sub	sp, #28
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	60f8      	str	r0, [r7, #12]
 800ae28:	60b9      	str	r1, [r7, #8]
 800ae2a:	4613      	mov	r3, r2
 800ae2c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ae2e:	2301      	movs	r3, #1
 800ae30:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ae32:	2300      	movs	r3, #0
 800ae34:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ae36:	4b1f      	ldr	r3, [pc, #124]	; (800aeb4 <FATFS_LinkDriverEx+0x94>)
 800ae38:	7a5b      	ldrb	r3, [r3, #9]
 800ae3a:	b2db      	uxtb	r3, r3
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d131      	bne.n	800aea4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ae40:	4b1c      	ldr	r3, [pc, #112]	; (800aeb4 <FATFS_LinkDriverEx+0x94>)
 800ae42:	7a5b      	ldrb	r3, [r3, #9]
 800ae44:	b2db      	uxtb	r3, r3
 800ae46:	461a      	mov	r2, r3
 800ae48:	4b1a      	ldr	r3, [pc, #104]	; (800aeb4 <FATFS_LinkDriverEx+0x94>)
 800ae4a:	2100      	movs	r1, #0
 800ae4c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ae4e:	4b19      	ldr	r3, [pc, #100]	; (800aeb4 <FATFS_LinkDriverEx+0x94>)
 800ae50:	7a5b      	ldrb	r3, [r3, #9]
 800ae52:	b2db      	uxtb	r3, r3
 800ae54:	4a17      	ldr	r2, [pc, #92]	; (800aeb4 <FATFS_LinkDriverEx+0x94>)
 800ae56:	009b      	lsls	r3, r3, #2
 800ae58:	4413      	add	r3, r2
 800ae5a:	68fa      	ldr	r2, [r7, #12]
 800ae5c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ae5e:	4b15      	ldr	r3, [pc, #84]	; (800aeb4 <FATFS_LinkDriverEx+0x94>)
 800ae60:	7a5b      	ldrb	r3, [r3, #9]
 800ae62:	b2db      	uxtb	r3, r3
 800ae64:	461a      	mov	r2, r3
 800ae66:	4b13      	ldr	r3, [pc, #76]	; (800aeb4 <FATFS_LinkDriverEx+0x94>)
 800ae68:	4413      	add	r3, r2
 800ae6a:	79fa      	ldrb	r2, [r7, #7]
 800ae6c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ae6e:	4b11      	ldr	r3, [pc, #68]	; (800aeb4 <FATFS_LinkDriverEx+0x94>)
 800ae70:	7a5b      	ldrb	r3, [r3, #9]
 800ae72:	b2db      	uxtb	r3, r3
 800ae74:	1c5a      	adds	r2, r3, #1
 800ae76:	b2d1      	uxtb	r1, r2
 800ae78:	4a0e      	ldr	r2, [pc, #56]	; (800aeb4 <FATFS_LinkDriverEx+0x94>)
 800ae7a:	7251      	strb	r1, [r2, #9]
 800ae7c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ae7e:	7dbb      	ldrb	r3, [r7, #22]
 800ae80:	3330      	adds	r3, #48	; 0x30
 800ae82:	b2da      	uxtb	r2, r3
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ae88:	68bb      	ldr	r3, [r7, #8]
 800ae8a:	3301      	adds	r3, #1
 800ae8c:	223a      	movs	r2, #58	; 0x3a
 800ae8e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	3302      	adds	r3, #2
 800ae94:	222f      	movs	r2, #47	; 0x2f
 800ae96:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	3303      	adds	r3, #3
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800aea0:	2300      	movs	r3, #0
 800aea2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800aea4:	7dfb      	ldrb	r3, [r7, #23]
}
 800aea6:	4618      	mov	r0, r3
 800aea8:	371c      	adds	r7, #28
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb0:	4770      	bx	lr
 800aeb2:	bf00      	nop
 800aeb4:	20000108 	.word	0x20000108

0800aeb8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b082      	sub	sp, #8
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
 800aec0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800aec2:	2200      	movs	r2, #0
 800aec4:	6839      	ldr	r1, [r7, #0]
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f7ff ffaa 	bl	800ae20 <FATFS_LinkDriverEx>
 800aecc:	4603      	mov	r3, r0
}
 800aece:	4618      	mov	r0, r3
 800aed0:	3708      	adds	r7, #8
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}
	...

0800aed8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800aedc:	2201      	movs	r2, #1
 800aede:	490e      	ldr	r1, [pc, #56]	; (800af18 <MX_USB_HOST_Init+0x40>)
 800aee0:	480e      	ldr	r0, [pc, #56]	; (800af1c <MX_USB_HOST_Init+0x44>)
 800aee2:	f7fe fc45 	bl	8009770 <USBH_Init>
 800aee6:	4603      	mov	r3, r0
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d001      	beq.n	800aef0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800aeec:	f7f6 f832 	bl	8000f54 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800aef0:	490b      	ldr	r1, [pc, #44]	; (800af20 <MX_USB_HOST_Init+0x48>)
 800aef2:	480a      	ldr	r0, [pc, #40]	; (800af1c <MX_USB_HOST_Init+0x44>)
 800aef4:	f7fe fcca 	bl	800988c <USBH_RegisterClass>
 800aef8:	4603      	mov	r3, r0
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d001      	beq.n	800af02 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800aefe:	f7f6 f829 	bl	8000f54 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800af02:	4806      	ldr	r0, [pc, #24]	; (800af1c <MX_USB_HOST_Init+0x44>)
 800af04:	f7fe fd4e 	bl	80099a4 <USBH_Start>
 800af08:	4603      	mov	r3, r0
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d001      	beq.n	800af12 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800af0e:	f7f6 f821 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800af12:	bf00      	nop
 800af14:	bd80      	pop	{r7, pc}
 800af16:	bf00      	nop
 800af18:	0800af39 	.word	0x0800af39
 800af1c:	2000340c 	.word	0x2000340c
 800af20:	2000000c 	.word	0x2000000c

0800af24 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800af28:	4802      	ldr	r0, [pc, #8]	; (800af34 <MX_USB_HOST_Process+0x10>)
 800af2a:	f7fe fd4b 	bl	80099c4 <USBH_Process>
}
 800af2e:	bf00      	nop
 800af30:	bd80      	pop	{r7, pc}
 800af32:	bf00      	nop
 800af34:	2000340c 	.word	0x2000340c

0800af38 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800af38:	b480      	push	{r7}
 800af3a:	b083      	sub	sp, #12
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
 800af40:	460b      	mov	r3, r1
 800af42:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800af44:	78fb      	ldrb	r3, [r7, #3]
 800af46:	3b01      	subs	r3, #1
 800af48:	2b04      	cmp	r3, #4
 800af4a:	d819      	bhi.n	800af80 <USBH_UserProcess+0x48>
 800af4c:	a201      	add	r2, pc, #4	; (adr r2, 800af54 <USBH_UserProcess+0x1c>)
 800af4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af52:	bf00      	nop
 800af54:	0800af81 	.word	0x0800af81
 800af58:	0800af71 	.word	0x0800af71
 800af5c:	0800af81 	.word	0x0800af81
 800af60:	0800af79 	.word	0x0800af79
 800af64:	0800af69 	.word	0x0800af69
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800af68:	4b09      	ldr	r3, [pc, #36]	; (800af90 <USBH_UserProcess+0x58>)
 800af6a:	2203      	movs	r2, #3
 800af6c:	701a      	strb	r2, [r3, #0]
  break;
 800af6e:	e008      	b.n	800af82 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800af70:	4b07      	ldr	r3, [pc, #28]	; (800af90 <USBH_UserProcess+0x58>)
 800af72:	2202      	movs	r2, #2
 800af74:	701a      	strb	r2, [r3, #0]
  break;
 800af76:	e004      	b.n	800af82 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800af78:	4b05      	ldr	r3, [pc, #20]	; (800af90 <USBH_UserProcess+0x58>)
 800af7a:	2201      	movs	r2, #1
 800af7c:	701a      	strb	r2, [r3, #0]
  break;
 800af7e:	e000      	b.n	800af82 <USBH_UserProcess+0x4a>

  default:
  break;
 800af80:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800af82:	bf00      	nop
 800af84:	370c      	adds	r7, #12
 800af86:	46bd      	mov	sp, r7
 800af88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8c:	4770      	bx	lr
 800af8e:	bf00      	nop
 800af90:	20000114 	.word	0x20000114

0800af94 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b08a      	sub	sp, #40	; 0x28
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800af9c:	f107 0314 	add.w	r3, r7, #20
 800afa0:	2200      	movs	r2, #0
 800afa2:	601a      	str	r2, [r3, #0]
 800afa4:	605a      	str	r2, [r3, #4]
 800afa6:	609a      	str	r2, [r3, #8]
 800afa8:	60da      	str	r2, [r3, #12]
 800afaa:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800afb4:	d147      	bne.n	800b046 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800afb6:	2300      	movs	r3, #0
 800afb8:	613b      	str	r3, [r7, #16]
 800afba:	4b25      	ldr	r3, [pc, #148]	; (800b050 <HAL_HCD_MspInit+0xbc>)
 800afbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afbe:	4a24      	ldr	r2, [pc, #144]	; (800b050 <HAL_HCD_MspInit+0xbc>)
 800afc0:	f043 0301 	orr.w	r3, r3, #1
 800afc4:	6313      	str	r3, [r2, #48]	; 0x30
 800afc6:	4b22      	ldr	r3, [pc, #136]	; (800b050 <HAL_HCD_MspInit+0xbc>)
 800afc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afca:	f003 0301 	and.w	r3, r3, #1
 800afce:	613b      	str	r3, [r7, #16]
 800afd0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800afd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800afd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800afd8:	2300      	movs	r3, #0
 800afda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800afdc:	2300      	movs	r3, #0
 800afde:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800afe0:	f107 0314 	add.w	r3, r7, #20
 800afe4:	4619      	mov	r1, r3
 800afe6:	481b      	ldr	r0, [pc, #108]	; (800b054 <HAL_HCD_MspInit+0xc0>)
 800afe8:	f7f7 fd40 	bl	8002a6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800afec:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800aff0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aff2:	2302      	movs	r3, #2
 800aff4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aff6:	2300      	movs	r3, #0
 800aff8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800affa:	2300      	movs	r3, #0
 800affc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800affe:	230a      	movs	r3, #10
 800b000:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b002:	f107 0314 	add.w	r3, r7, #20
 800b006:	4619      	mov	r1, r3
 800b008:	4812      	ldr	r0, [pc, #72]	; (800b054 <HAL_HCD_MspInit+0xc0>)
 800b00a:	f7f7 fd2f 	bl	8002a6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b00e:	4b10      	ldr	r3, [pc, #64]	; (800b050 <HAL_HCD_MspInit+0xbc>)
 800b010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b012:	4a0f      	ldr	r2, [pc, #60]	; (800b050 <HAL_HCD_MspInit+0xbc>)
 800b014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b018:	6353      	str	r3, [r2, #52]	; 0x34
 800b01a:	2300      	movs	r3, #0
 800b01c:	60fb      	str	r3, [r7, #12]
 800b01e:	4b0c      	ldr	r3, [pc, #48]	; (800b050 <HAL_HCD_MspInit+0xbc>)
 800b020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b022:	4a0b      	ldr	r2, [pc, #44]	; (800b050 <HAL_HCD_MspInit+0xbc>)
 800b024:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b028:	6453      	str	r3, [r2, #68]	; 0x44
 800b02a:	4b09      	ldr	r3, [pc, #36]	; (800b050 <HAL_HCD_MspInit+0xbc>)
 800b02c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b02e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b032:	60fb      	str	r3, [r7, #12]
 800b034:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b036:	2200      	movs	r2, #0
 800b038:	2100      	movs	r1, #0
 800b03a:	2043      	movs	r0, #67	; 0x43
 800b03c:	f7f7 f96f 	bl	800231e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b040:	2043      	movs	r0, #67	; 0x43
 800b042:	f7f7 f988 	bl	8002356 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b046:	bf00      	nop
 800b048:	3728      	adds	r7, #40	; 0x28
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}
 800b04e:	bf00      	nop
 800b050:	40023800 	.word	0x40023800
 800b054:	40020000 	.word	0x40020000

0800b058 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b082      	sub	sp, #8
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b066:	4618      	mov	r0, r3
 800b068:	f7ff f87f 	bl	800a16a <USBH_LL_IncTimer>
}
 800b06c:	bf00      	nop
 800b06e:	3708      	adds	r7, #8
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}

0800b074 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b082      	sub	sp, #8
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b082:	4618      	mov	r0, r3
 800b084:	f7ff f8b7 	bl	800a1f6 <USBH_LL_Connect>
}
 800b088:	bf00      	nop
 800b08a:	3708      	adds	r7, #8
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}

0800b090 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b082      	sub	sp, #8
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b09e:	4618      	mov	r0, r3
 800b0a0:	f7ff f8c0 	bl	800a224 <USBH_LL_Disconnect>
}
 800b0a4:	bf00      	nop
 800b0a6:	3708      	adds	r7, #8
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	bd80      	pop	{r7, pc}

0800b0ac <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b0ac:	b480      	push	{r7}
 800b0ae:	b083      	sub	sp, #12
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
 800b0b4:	460b      	mov	r3, r1
 800b0b6:	70fb      	strb	r3, [r7, #3]
 800b0b8:	4613      	mov	r3, r2
 800b0ba:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b0bc:	bf00      	nop
 800b0be:	370c      	adds	r7, #12
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c6:	4770      	bx	lr

0800b0c8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b082      	sub	sp, #8
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	f7ff f871 	bl	800a1be <USBH_LL_PortEnabled>
}
 800b0dc:	bf00      	nop
 800b0de:	3708      	adds	r7, #8
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}

0800b0e4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b082      	sub	sp, #8
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	f7ff f871 	bl	800a1da <USBH_LL_PortDisabled>
}
 800b0f8:	bf00      	nop
 800b0fa:	3708      	adds	r7, #8
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	bd80      	pop	{r7, pc}

0800b100 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b082      	sub	sp, #8
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b10e:	2b01      	cmp	r3, #1
 800b110:	d12a      	bne.n	800b168 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b112:	4a18      	ldr	r2, [pc, #96]	; (800b174 <USBH_LL_Init+0x74>)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	4a15      	ldr	r2, [pc, #84]	; (800b174 <USBH_LL_Init+0x74>)
 800b11e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b122:	4b14      	ldr	r3, [pc, #80]	; (800b174 <USBH_LL_Init+0x74>)
 800b124:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b128:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b12a:	4b12      	ldr	r3, [pc, #72]	; (800b174 <USBH_LL_Init+0x74>)
 800b12c:	2208      	movs	r2, #8
 800b12e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b130:	4b10      	ldr	r3, [pc, #64]	; (800b174 <USBH_LL_Init+0x74>)
 800b132:	2201      	movs	r2, #1
 800b134:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b136:	4b0f      	ldr	r3, [pc, #60]	; (800b174 <USBH_LL_Init+0x74>)
 800b138:	2200      	movs	r2, #0
 800b13a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b13c:	4b0d      	ldr	r3, [pc, #52]	; (800b174 <USBH_LL_Init+0x74>)
 800b13e:	2202      	movs	r2, #2
 800b140:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b142:	4b0c      	ldr	r3, [pc, #48]	; (800b174 <USBH_LL_Init+0x74>)
 800b144:	2200      	movs	r2, #0
 800b146:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b148:	480a      	ldr	r0, [pc, #40]	; (800b174 <USBH_LL_Init+0x74>)
 800b14a:	f7f7 fe5c 	bl	8002e06 <HAL_HCD_Init>
 800b14e:	4603      	mov	r3, r0
 800b150:	2b00      	cmp	r3, #0
 800b152:	d001      	beq.n	800b158 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b154:	f7f5 fefe 	bl	8000f54 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b158:	4806      	ldr	r0, [pc, #24]	; (800b174 <USBH_LL_Init+0x74>)
 800b15a:	f7f8 fa40 	bl	80035de <HAL_HCD_GetCurrentFrame>
 800b15e:	4603      	mov	r3, r0
 800b160:	4619      	mov	r1, r3
 800b162:	6878      	ldr	r0, [r7, #4]
 800b164:	f7fe fff2 	bl	800a14c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b168:	2300      	movs	r3, #0
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	3708      	adds	r7, #8
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}
 800b172:	bf00      	nop
 800b174:	200037e4 	.word	0x200037e4

0800b178 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b084      	sub	sp, #16
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b180:	2300      	movs	r3, #0
 800b182:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b184:	2300      	movs	r3, #0
 800b186:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b18e:	4618      	mov	r0, r3
 800b190:	f7f8 f9af 	bl	80034f2 <HAL_HCD_Start>
 800b194:	4603      	mov	r3, r0
 800b196:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b198:	7bfb      	ldrb	r3, [r7, #15]
 800b19a:	4618      	mov	r0, r3
 800b19c:	f000 f98c 	bl	800b4b8 <USBH_Get_USB_Status>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b1a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	3710      	adds	r7, #16
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}

0800b1ae <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b1ae:	b580      	push	{r7, lr}
 800b1b0:	b084      	sub	sp, #16
 800b1b2:	af00      	add	r7, sp, #0
 800b1b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f7f8 f9b7 	bl	8003538 <HAL_HCD_Stop>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b1ce:	7bfb      	ldrb	r3, [r7, #15]
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	f000 f971 	bl	800b4b8 <USBH_Get_USB_Status>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b1da:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1dc:	4618      	mov	r0, r3
 800b1de:	3710      	adds	r7, #16
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bd80      	pop	{r7, pc}

0800b1e4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b084      	sub	sp, #16
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b1ec:	2301      	movs	r3, #1
 800b1ee:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	f7f8 f9ff 	bl	80035fa <HAL_HCD_GetCurrentSpeed>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	2b02      	cmp	r3, #2
 800b200:	d00c      	beq.n	800b21c <USBH_LL_GetSpeed+0x38>
 800b202:	2b02      	cmp	r3, #2
 800b204:	d80d      	bhi.n	800b222 <USBH_LL_GetSpeed+0x3e>
 800b206:	2b00      	cmp	r3, #0
 800b208:	d002      	beq.n	800b210 <USBH_LL_GetSpeed+0x2c>
 800b20a:	2b01      	cmp	r3, #1
 800b20c:	d003      	beq.n	800b216 <USBH_LL_GetSpeed+0x32>
 800b20e:	e008      	b.n	800b222 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b210:	2300      	movs	r3, #0
 800b212:	73fb      	strb	r3, [r7, #15]
    break;
 800b214:	e008      	b.n	800b228 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b216:	2301      	movs	r3, #1
 800b218:	73fb      	strb	r3, [r7, #15]
    break;
 800b21a:	e005      	b.n	800b228 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b21c:	2302      	movs	r3, #2
 800b21e:	73fb      	strb	r3, [r7, #15]
    break;
 800b220:	e002      	b.n	800b228 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b222:	2301      	movs	r3, #1
 800b224:	73fb      	strb	r3, [r7, #15]
    break;
 800b226:	bf00      	nop
  }
  return  speed;
 800b228:	7bfb      	ldrb	r3, [r7, #15]
}
 800b22a:	4618      	mov	r0, r3
 800b22c:	3710      	adds	r7, #16
 800b22e:	46bd      	mov	sp, r7
 800b230:	bd80      	pop	{r7, pc}

0800b232 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b232:	b580      	push	{r7, lr}
 800b234:	b084      	sub	sp, #16
 800b236:	af00      	add	r7, sp, #0
 800b238:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b23a:	2300      	movs	r3, #0
 800b23c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b23e:	2300      	movs	r3, #0
 800b240:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b248:	4618      	mov	r0, r3
 800b24a:	f7f8 f992 	bl	8003572 <HAL_HCD_ResetPort>
 800b24e:	4603      	mov	r3, r0
 800b250:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b252:	7bfb      	ldrb	r3, [r7, #15]
 800b254:	4618      	mov	r0, r3
 800b256:	f000 f92f 	bl	800b4b8 <USBH_Get_USB_Status>
 800b25a:	4603      	mov	r3, r0
 800b25c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b25e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b260:	4618      	mov	r0, r3
 800b262:	3710      	adds	r7, #16
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}

0800b268 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b082      	sub	sp, #8
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
 800b270:	460b      	mov	r3, r1
 800b272:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b27a:	78fa      	ldrb	r2, [r7, #3]
 800b27c:	4611      	mov	r1, r2
 800b27e:	4618      	mov	r0, r3
 800b280:	f7f8 f999 	bl	80035b6 <HAL_HCD_HC_GetXferCount>
 800b284:	4603      	mov	r3, r0
}
 800b286:	4618      	mov	r0, r3
 800b288:	3708      	adds	r7, #8
 800b28a:	46bd      	mov	sp, r7
 800b28c:	bd80      	pop	{r7, pc}

0800b28e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b28e:	b590      	push	{r4, r7, lr}
 800b290:	b089      	sub	sp, #36	; 0x24
 800b292:	af04      	add	r7, sp, #16
 800b294:	6078      	str	r0, [r7, #4]
 800b296:	4608      	mov	r0, r1
 800b298:	4611      	mov	r1, r2
 800b29a:	461a      	mov	r2, r3
 800b29c:	4603      	mov	r3, r0
 800b29e:	70fb      	strb	r3, [r7, #3]
 800b2a0:	460b      	mov	r3, r1
 800b2a2:	70bb      	strb	r3, [r7, #2]
 800b2a4:	4613      	mov	r3, r2
 800b2a6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b2b6:	787c      	ldrb	r4, [r7, #1]
 800b2b8:	78ba      	ldrb	r2, [r7, #2]
 800b2ba:	78f9      	ldrb	r1, [r7, #3]
 800b2bc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b2be:	9302      	str	r3, [sp, #8]
 800b2c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b2c4:	9301      	str	r3, [sp, #4]
 800b2c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b2ca:	9300      	str	r3, [sp, #0]
 800b2cc:	4623      	mov	r3, r4
 800b2ce:	f7f7 fdfc 	bl	8002eca <HAL_HCD_HC_Init>
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b2d6:	7bfb      	ldrb	r3, [r7, #15]
 800b2d8:	4618      	mov	r0, r3
 800b2da:	f000 f8ed 	bl	800b4b8 <USBH_Get_USB_Status>
 800b2de:	4603      	mov	r3, r0
 800b2e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b2e2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	3714      	adds	r7, #20
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	bd90      	pop	{r4, r7, pc}

0800b2ec <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b084      	sub	sp, #16
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
 800b2f4:	460b      	mov	r3, r1
 800b2f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b306:	78fa      	ldrb	r2, [r7, #3]
 800b308:	4611      	mov	r1, r2
 800b30a:	4618      	mov	r0, r3
 800b30c:	f7f7 fe6c 	bl	8002fe8 <HAL_HCD_HC_Halt>
 800b310:	4603      	mov	r3, r0
 800b312:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b314:	7bfb      	ldrb	r3, [r7, #15]
 800b316:	4618      	mov	r0, r3
 800b318:	f000 f8ce 	bl	800b4b8 <USBH_Get_USB_Status>
 800b31c:	4603      	mov	r3, r0
 800b31e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b320:	7bbb      	ldrb	r3, [r7, #14]
}
 800b322:	4618      	mov	r0, r3
 800b324:	3710      	adds	r7, #16
 800b326:	46bd      	mov	sp, r7
 800b328:	bd80      	pop	{r7, pc}

0800b32a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b32a:	b590      	push	{r4, r7, lr}
 800b32c:	b089      	sub	sp, #36	; 0x24
 800b32e:	af04      	add	r7, sp, #16
 800b330:	6078      	str	r0, [r7, #4]
 800b332:	4608      	mov	r0, r1
 800b334:	4611      	mov	r1, r2
 800b336:	461a      	mov	r2, r3
 800b338:	4603      	mov	r3, r0
 800b33a:	70fb      	strb	r3, [r7, #3]
 800b33c:	460b      	mov	r3, r1
 800b33e:	70bb      	strb	r3, [r7, #2]
 800b340:	4613      	mov	r3, r2
 800b342:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b344:	2300      	movs	r3, #0
 800b346:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b348:	2300      	movs	r3, #0
 800b34a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b352:	787c      	ldrb	r4, [r7, #1]
 800b354:	78ba      	ldrb	r2, [r7, #2]
 800b356:	78f9      	ldrb	r1, [r7, #3]
 800b358:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b35c:	9303      	str	r3, [sp, #12]
 800b35e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b360:	9302      	str	r3, [sp, #8]
 800b362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b364:	9301      	str	r3, [sp, #4]
 800b366:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b36a:	9300      	str	r3, [sp, #0]
 800b36c:	4623      	mov	r3, r4
 800b36e:	f7f7 fe5f 	bl	8003030 <HAL_HCD_HC_SubmitRequest>
 800b372:	4603      	mov	r3, r0
 800b374:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b376:	7bfb      	ldrb	r3, [r7, #15]
 800b378:	4618      	mov	r0, r3
 800b37a:	f000 f89d 	bl	800b4b8 <USBH_Get_USB_Status>
 800b37e:	4603      	mov	r3, r0
 800b380:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b382:	7bbb      	ldrb	r3, [r7, #14]
}
 800b384:	4618      	mov	r0, r3
 800b386:	3714      	adds	r7, #20
 800b388:	46bd      	mov	sp, r7
 800b38a:	bd90      	pop	{r4, r7, pc}

0800b38c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b082      	sub	sp, #8
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
 800b394:	460b      	mov	r3, r1
 800b396:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b39e:	78fa      	ldrb	r2, [r7, #3]
 800b3a0:	4611      	mov	r1, r2
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	f7f8 f8f3 	bl	800358e <HAL_HCD_HC_GetURBState>
 800b3a8:	4603      	mov	r3, r0
}
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	3708      	adds	r7, #8
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	bd80      	pop	{r7, pc}

0800b3b2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b3b2:	b580      	push	{r7, lr}
 800b3b4:	b082      	sub	sp, #8
 800b3b6:	af00      	add	r7, sp, #0
 800b3b8:	6078      	str	r0, [r7, #4]
 800b3ba:	460b      	mov	r3, r1
 800b3bc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b3c4:	2b01      	cmp	r3, #1
 800b3c6:	d103      	bne.n	800b3d0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b3c8:	78fb      	ldrb	r3, [r7, #3]
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	f000 f8a0 	bl	800b510 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b3d0:	20c8      	movs	r0, #200	; 0xc8
 800b3d2:	f7f6 fea5 	bl	8002120 <HAL_Delay>
  return USBH_OK;
 800b3d6:	2300      	movs	r3, #0
}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	3708      	adds	r7, #8
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bd80      	pop	{r7, pc}

0800b3e0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b3e0:	b480      	push	{r7}
 800b3e2:	b085      	sub	sp, #20
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
 800b3e8:	460b      	mov	r3, r1
 800b3ea:	70fb      	strb	r3, [r7, #3]
 800b3ec:	4613      	mov	r3, r2
 800b3ee:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b3f6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b3f8:	78fb      	ldrb	r3, [r7, #3]
 800b3fa:	68fa      	ldr	r2, [r7, #12]
 800b3fc:	212c      	movs	r1, #44	; 0x2c
 800b3fe:	fb01 f303 	mul.w	r3, r1, r3
 800b402:	4413      	add	r3, r2
 800b404:	333b      	adds	r3, #59	; 0x3b
 800b406:	781b      	ldrb	r3, [r3, #0]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d009      	beq.n	800b420 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b40c:	78fb      	ldrb	r3, [r7, #3]
 800b40e:	68fa      	ldr	r2, [r7, #12]
 800b410:	212c      	movs	r1, #44	; 0x2c
 800b412:	fb01 f303 	mul.w	r3, r1, r3
 800b416:	4413      	add	r3, r2
 800b418:	3354      	adds	r3, #84	; 0x54
 800b41a:	78ba      	ldrb	r2, [r7, #2]
 800b41c:	701a      	strb	r2, [r3, #0]
 800b41e:	e008      	b.n	800b432 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b420:	78fb      	ldrb	r3, [r7, #3]
 800b422:	68fa      	ldr	r2, [r7, #12]
 800b424:	212c      	movs	r1, #44	; 0x2c
 800b426:	fb01 f303 	mul.w	r3, r1, r3
 800b42a:	4413      	add	r3, r2
 800b42c:	3355      	adds	r3, #85	; 0x55
 800b42e:	78ba      	ldrb	r2, [r7, #2]
 800b430:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b432:	2300      	movs	r3, #0
}
 800b434:	4618      	mov	r0, r3
 800b436:	3714      	adds	r7, #20
 800b438:	46bd      	mov	sp, r7
 800b43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43e:	4770      	bx	lr

0800b440 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b440:	b480      	push	{r7}
 800b442:	b085      	sub	sp, #20
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
 800b448:	460b      	mov	r3, r1
 800b44a:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800b44c:	2300      	movs	r3, #0
 800b44e:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b456:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800b458:	78fb      	ldrb	r3, [r7, #3]
 800b45a:	68ba      	ldr	r2, [r7, #8]
 800b45c:	212c      	movs	r1, #44	; 0x2c
 800b45e:	fb01 f303 	mul.w	r3, r1, r3
 800b462:	4413      	add	r3, r2
 800b464:	333b      	adds	r3, #59	; 0x3b
 800b466:	781b      	ldrb	r3, [r3, #0]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d009      	beq.n	800b480 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800b46c:	78fb      	ldrb	r3, [r7, #3]
 800b46e:	68ba      	ldr	r2, [r7, #8]
 800b470:	212c      	movs	r1, #44	; 0x2c
 800b472:	fb01 f303 	mul.w	r3, r1, r3
 800b476:	4413      	add	r3, r2
 800b478:	3354      	adds	r3, #84	; 0x54
 800b47a:	781b      	ldrb	r3, [r3, #0]
 800b47c:	73fb      	strb	r3, [r7, #15]
 800b47e:	e008      	b.n	800b492 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800b480:	78fb      	ldrb	r3, [r7, #3]
 800b482:	68ba      	ldr	r2, [r7, #8]
 800b484:	212c      	movs	r1, #44	; 0x2c
 800b486:	fb01 f303 	mul.w	r3, r1, r3
 800b48a:	4413      	add	r3, r2
 800b48c:	3355      	adds	r3, #85	; 0x55
 800b48e:	781b      	ldrb	r3, [r3, #0]
 800b490:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800b492:	7bfb      	ldrb	r3, [r7, #15]
}
 800b494:	4618      	mov	r0, r3
 800b496:	3714      	adds	r7, #20
 800b498:	46bd      	mov	sp, r7
 800b49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49e:	4770      	bx	lr

0800b4a0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b082      	sub	sp, #8
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b4a8:	6878      	ldr	r0, [r7, #4]
 800b4aa:	f7f6 fe39 	bl	8002120 <HAL_Delay>
}
 800b4ae:	bf00      	nop
 800b4b0:	3708      	adds	r7, #8
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bd80      	pop	{r7, pc}
	...

0800b4b8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	b085      	sub	sp, #20
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	4603      	mov	r3, r0
 800b4c0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b4c6:	79fb      	ldrb	r3, [r7, #7]
 800b4c8:	2b03      	cmp	r3, #3
 800b4ca:	d817      	bhi.n	800b4fc <USBH_Get_USB_Status+0x44>
 800b4cc:	a201      	add	r2, pc, #4	; (adr r2, 800b4d4 <USBH_Get_USB_Status+0x1c>)
 800b4ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4d2:	bf00      	nop
 800b4d4:	0800b4e5 	.word	0x0800b4e5
 800b4d8:	0800b4eb 	.word	0x0800b4eb
 800b4dc:	0800b4f1 	.word	0x0800b4f1
 800b4e0:	0800b4f7 	.word	0x0800b4f7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	73fb      	strb	r3, [r7, #15]
    break;
 800b4e8:	e00b      	b.n	800b502 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b4ea:	2302      	movs	r3, #2
 800b4ec:	73fb      	strb	r3, [r7, #15]
    break;
 800b4ee:	e008      	b.n	800b502 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b4f0:	2301      	movs	r3, #1
 800b4f2:	73fb      	strb	r3, [r7, #15]
    break;
 800b4f4:	e005      	b.n	800b502 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b4f6:	2302      	movs	r3, #2
 800b4f8:	73fb      	strb	r3, [r7, #15]
    break;
 800b4fa:	e002      	b.n	800b502 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b4fc:	2302      	movs	r3, #2
 800b4fe:	73fb      	strb	r3, [r7, #15]
    break;
 800b500:	bf00      	nop
  }
  return usb_status;
 800b502:	7bfb      	ldrb	r3, [r7, #15]
}
 800b504:	4618      	mov	r0, r3
 800b506:	3714      	adds	r7, #20
 800b508:	46bd      	mov	sp, r7
 800b50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50e:	4770      	bx	lr

0800b510 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b084      	sub	sp, #16
 800b514:	af00      	add	r7, sp, #0
 800b516:	4603      	mov	r3, r0
 800b518:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b51a:	79fb      	ldrb	r3, [r7, #7]
 800b51c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b51e:	79fb      	ldrb	r3, [r7, #7]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d102      	bne.n	800b52a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800b524:	2300      	movs	r3, #0
 800b526:	73fb      	strb	r3, [r7, #15]
 800b528:	e001      	b.n	800b52e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800b52a:	2301      	movs	r3, #1
 800b52c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b52e:	7bfb      	ldrb	r3, [r7, #15]
 800b530:	461a      	mov	r2, r3
 800b532:	2101      	movs	r1, #1
 800b534:	4803      	ldr	r0, [pc, #12]	; (800b544 <MX_DriverVbusFS+0x34>)
 800b536:	f7f7 fc4d 	bl	8002dd4 <HAL_GPIO_WritePin>
}
 800b53a:	bf00      	nop
 800b53c:	3710      	adds	r7, #16
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}
 800b542:	bf00      	nop
 800b544:	40020800 	.word	0x40020800

0800b548 <__errno>:
 800b548:	4b01      	ldr	r3, [pc, #4]	; (800b550 <__errno+0x8>)
 800b54a:	6818      	ldr	r0, [r3, #0]
 800b54c:	4770      	bx	lr
 800b54e:	bf00      	nop
 800b550:	2000002c 	.word	0x2000002c

0800b554 <__libc_init_array>:
 800b554:	b570      	push	{r4, r5, r6, lr}
 800b556:	4d0d      	ldr	r5, [pc, #52]	; (800b58c <__libc_init_array+0x38>)
 800b558:	4c0d      	ldr	r4, [pc, #52]	; (800b590 <__libc_init_array+0x3c>)
 800b55a:	1b64      	subs	r4, r4, r5
 800b55c:	10a4      	asrs	r4, r4, #2
 800b55e:	2600      	movs	r6, #0
 800b560:	42a6      	cmp	r6, r4
 800b562:	d109      	bne.n	800b578 <__libc_init_array+0x24>
 800b564:	4d0b      	ldr	r5, [pc, #44]	; (800b594 <__libc_init_array+0x40>)
 800b566:	4c0c      	ldr	r4, [pc, #48]	; (800b598 <__libc_init_array+0x44>)
 800b568:	f000 f906 	bl	800b778 <_init>
 800b56c:	1b64      	subs	r4, r4, r5
 800b56e:	10a4      	asrs	r4, r4, #2
 800b570:	2600      	movs	r6, #0
 800b572:	42a6      	cmp	r6, r4
 800b574:	d105      	bne.n	800b582 <__libc_init_array+0x2e>
 800b576:	bd70      	pop	{r4, r5, r6, pc}
 800b578:	f855 3b04 	ldr.w	r3, [r5], #4
 800b57c:	4798      	blx	r3
 800b57e:	3601      	adds	r6, #1
 800b580:	e7ee      	b.n	800b560 <__libc_init_array+0xc>
 800b582:	f855 3b04 	ldr.w	r3, [r5], #4
 800b586:	4798      	blx	r3
 800b588:	3601      	adds	r6, #1
 800b58a:	e7f2      	b.n	800b572 <__libc_init_array+0x1e>
 800b58c:	0800bae0 	.word	0x0800bae0
 800b590:	0800bae0 	.word	0x0800bae0
 800b594:	0800bae0 	.word	0x0800bae0
 800b598:	0800bae4 	.word	0x0800bae4

0800b59c <malloc>:
 800b59c:	4b02      	ldr	r3, [pc, #8]	; (800b5a8 <malloc+0xc>)
 800b59e:	4601      	mov	r1, r0
 800b5a0:	6818      	ldr	r0, [r3, #0]
 800b5a2:	f000 b871 	b.w	800b688 <_malloc_r>
 800b5a6:	bf00      	nop
 800b5a8:	2000002c 	.word	0x2000002c

0800b5ac <free>:
 800b5ac:	4b02      	ldr	r3, [pc, #8]	; (800b5b8 <free+0xc>)
 800b5ae:	4601      	mov	r1, r0
 800b5b0:	6818      	ldr	r0, [r3, #0]
 800b5b2:	f000 b819 	b.w	800b5e8 <_free_r>
 800b5b6:	bf00      	nop
 800b5b8:	2000002c 	.word	0x2000002c

0800b5bc <memcpy>:
 800b5bc:	440a      	add	r2, r1
 800b5be:	4291      	cmp	r1, r2
 800b5c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b5c4:	d100      	bne.n	800b5c8 <memcpy+0xc>
 800b5c6:	4770      	bx	lr
 800b5c8:	b510      	push	{r4, lr}
 800b5ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b5d2:	4291      	cmp	r1, r2
 800b5d4:	d1f9      	bne.n	800b5ca <memcpy+0xe>
 800b5d6:	bd10      	pop	{r4, pc}

0800b5d8 <memset>:
 800b5d8:	4402      	add	r2, r0
 800b5da:	4603      	mov	r3, r0
 800b5dc:	4293      	cmp	r3, r2
 800b5de:	d100      	bne.n	800b5e2 <memset+0xa>
 800b5e0:	4770      	bx	lr
 800b5e2:	f803 1b01 	strb.w	r1, [r3], #1
 800b5e6:	e7f9      	b.n	800b5dc <memset+0x4>

0800b5e8 <_free_r>:
 800b5e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b5ea:	2900      	cmp	r1, #0
 800b5ec:	d048      	beq.n	800b680 <_free_r+0x98>
 800b5ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5f2:	9001      	str	r0, [sp, #4]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	f1a1 0404 	sub.w	r4, r1, #4
 800b5fa:	bfb8      	it	lt
 800b5fc:	18e4      	addlt	r4, r4, r3
 800b5fe:	f000 f8ad 	bl	800b75c <__malloc_lock>
 800b602:	4a20      	ldr	r2, [pc, #128]	; (800b684 <_free_r+0x9c>)
 800b604:	9801      	ldr	r0, [sp, #4]
 800b606:	6813      	ldr	r3, [r2, #0]
 800b608:	4615      	mov	r5, r2
 800b60a:	b933      	cbnz	r3, 800b61a <_free_r+0x32>
 800b60c:	6063      	str	r3, [r4, #4]
 800b60e:	6014      	str	r4, [r2, #0]
 800b610:	b003      	add	sp, #12
 800b612:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b616:	f000 b8a7 	b.w	800b768 <__malloc_unlock>
 800b61a:	42a3      	cmp	r3, r4
 800b61c:	d90b      	bls.n	800b636 <_free_r+0x4e>
 800b61e:	6821      	ldr	r1, [r4, #0]
 800b620:	1862      	adds	r2, r4, r1
 800b622:	4293      	cmp	r3, r2
 800b624:	bf04      	itt	eq
 800b626:	681a      	ldreq	r2, [r3, #0]
 800b628:	685b      	ldreq	r3, [r3, #4]
 800b62a:	6063      	str	r3, [r4, #4]
 800b62c:	bf04      	itt	eq
 800b62e:	1852      	addeq	r2, r2, r1
 800b630:	6022      	streq	r2, [r4, #0]
 800b632:	602c      	str	r4, [r5, #0]
 800b634:	e7ec      	b.n	800b610 <_free_r+0x28>
 800b636:	461a      	mov	r2, r3
 800b638:	685b      	ldr	r3, [r3, #4]
 800b63a:	b10b      	cbz	r3, 800b640 <_free_r+0x58>
 800b63c:	42a3      	cmp	r3, r4
 800b63e:	d9fa      	bls.n	800b636 <_free_r+0x4e>
 800b640:	6811      	ldr	r1, [r2, #0]
 800b642:	1855      	adds	r5, r2, r1
 800b644:	42a5      	cmp	r5, r4
 800b646:	d10b      	bne.n	800b660 <_free_r+0x78>
 800b648:	6824      	ldr	r4, [r4, #0]
 800b64a:	4421      	add	r1, r4
 800b64c:	1854      	adds	r4, r2, r1
 800b64e:	42a3      	cmp	r3, r4
 800b650:	6011      	str	r1, [r2, #0]
 800b652:	d1dd      	bne.n	800b610 <_free_r+0x28>
 800b654:	681c      	ldr	r4, [r3, #0]
 800b656:	685b      	ldr	r3, [r3, #4]
 800b658:	6053      	str	r3, [r2, #4]
 800b65a:	4421      	add	r1, r4
 800b65c:	6011      	str	r1, [r2, #0]
 800b65e:	e7d7      	b.n	800b610 <_free_r+0x28>
 800b660:	d902      	bls.n	800b668 <_free_r+0x80>
 800b662:	230c      	movs	r3, #12
 800b664:	6003      	str	r3, [r0, #0]
 800b666:	e7d3      	b.n	800b610 <_free_r+0x28>
 800b668:	6825      	ldr	r5, [r4, #0]
 800b66a:	1961      	adds	r1, r4, r5
 800b66c:	428b      	cmp	r3, r1
 800b66e:	bf04      	itt	eq
 800b670:	6819      	ldreq	r1, [r3, #0]
 800b672:	685b      	ldreq	r3, [r3, #4]
 800b674:	6063      	str	r3, [r4, #4]
 800b676:	bf04      	itt	eq
 800b678:	1949      	addeq	r1, r1, r5
 800b67a:	6021      	streq	r1, [r4, #0]
 800b67c:	6054      	str	r4, [r2, #4]
 800b67e:	e7c7      	b.n	800b610 <_free_r+0x28>
 800b680:	b003      	add	sp, #12
 800b682:	bd30      	pop	{r4, r5, pc}
 800b684:	20000118 	.word	0x20000118

0800b688 <_malloc_r>:
 800b688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b68a:	1ccd      	adds	r5, r1, #3
 800b68c:	f025 0503 	bic.w	r5, r5, #3
 800b690:	3508      	adds	r5, #8
 800b692:	2d0c      	cmp	r5, #12
 800b694:	bf38      	it	cc
 800b696:	250c      	movcc	r5, #12
 800b698:	2d00      	cmp	r5, #0
 800b69a:	4606      	mov	r6, r0
 800b69c:	db01      	blt.n	800b6a2 <_malloc_r+0x1a>
 800b69e:	42a9      	cmp	r1, r5
 800b6a0:	d903      	bls.n	800b6aa <_malloc_r+0x22>
 800b6a2:	230c      	movs	r3, #12
 800b6a4:	6033      	str	r3, [r6, #0]
 800b6a6:	2000      	movs	r0, #0
 800b6a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6aa:	f000 f857 	bl	800b75c <__malloc_lock>
 800b6ae:	4921      	ldr	r1, [pc, #132]	; (800b734 <_malloc_r+0xac>)
 800b6b0:	680a      	ldr	r2, [r1, #0]
 800b6b2:	4614      	mov	r4, r2
 800b6b4:	b99c      	cbnz	r4, 800b6de <_malloc_r+0x56>
 800b6b6:	4f20      	ldr	r7, [pc, #128]	; (800b738 <_malloc_r+0xb0>)
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	b923      	cbnz	r3, 800b6c6 <_malloc_r+0x3e>
 800b6bc:	4621      	mov	r1, r4
 800b6be:	4630      	mov	r0, r6
 800b6c0:	f000 f83c 	bl	800b73c <_sbrk_r>
 800b6c4:	6038      	str	r0, [r7, #0]
 800b6c6:	4629      	mov	r1, r5
 800b6c8:	4630      	mov	r0, r6
 800b6ca:	f000 f837 	bl	800b73c <_sbrk_r>
 800b6ce:	1c43      	adds	r3, r0, #1
 800b6d0:	d123      	bne.n	800b71a <_malloc_r+0x92>
 800b6d2:	230c      	movs	r3, #12
 800b6d4:	6033      	str	r3, [r6, #0]
 800b6d6:	4630      	mov	r0, r6
 800b6d8:	f000 f846 	bl	800b768 <__malloc_unlock>
 800b6dc:	e7e3      	b.n	800b6a6 <_malloc_r+0x1e>
 800b6de:	6823      	ldr	r3, [r4, #0]
 800b6e0:	1b5b      	subs	r3, r3, r5
 800b6e2:	d417      	bmi.n	800b714 <_malloc_r+0x8c>
 800b6e4:	2b0b      	cmp	r3, #11
 800b6e6:	d903      	bls.n	800b6f0 <_malloc_r+0x68>
 800b6e8:	6023      	str	r3, [r4, #0]
 800b6ea:	441c      	add	r4, r3
 800b6ec:	6025      	str	r5, [r4, #0]
 800b6ee:	e004      	b.n	800b6fa <_malloc_r+0x72>
 800b6f0:	6863      	ldr	r3, [r4, #4]
 800b6f2:	42a2      	cmp	r2, r4
 800b6f4:	bf0c      	ite	eq
 800b6f6:	600b      	streq	r3, [r1, #0]
 800b6f8:	6053      	strne	r3, [r2, #4]
 800b6fa:	4630      	mov	r0, r6
 800b6fc:	f000 f834 	bl	800b768 <__malloc_unlock>
 800b700:	f104 000b 	add.w	r0, r4, #11
 800b704:	1d23      	adds	r3, r4, #4
 800b706:	f020 0007 	bic.w	r0, r0, #7
 800b70a:	1ac2      	subs	r2, r0, r3
 800b70c:	d0cc      	beq.n	800b6a8 <_malloc_r+0x20>
 800b70e:	1a1b      	subs	r3, r3, r0
 800b710:	50a3      	str	r3, [r4, r2]
 800b712:	e7c9      	b.n	800b6a8 <_malloc_r+0x20>
 800b714:	4622      	mov	r2, r4
 800b716:	6864      	ldr	r4, [r4, #4]
 800b718:	e7cc      	b.n	800b6b4 <_malloc_r+0x2c>
 800b71a:	1cc4      	adds	r4, r0, #3
 800b71c:	f024 0403 	bic.w	r4, r4, #3
 800b720:	42a0      	cmp	r0, r4
 800b722:	d0e3      	beq.n	800b6ec <_malloc_r+0x64>
 800b724:	1a21      	subs	r1, r4, r0
 800b726:	4630      	mov	r0, r6
 800b728:	f000 f808 	bl	800b73c <_sbrk_r>
 800b72c:	3001      	adds	r0, #1
 800b72e:	d1dd      	bne.n	800b6ec <_malloc_r+0x64>
 800b730:	e7cf      	b.n	800b6d2 <_malloc_r+0x4a>
 800b732:	bf00      	nop
 800b734:	20000118 	.word	0x20000118
 800b738:	2000011c 	.word	0x2000011c

0800b73c <_sbrk_r>:
 800b73c:	b538      	push	{r3, r4, r5, lr}
 800b73e:	4d06      	ldr	r5, [pc, #24]	; (800b758 <_sbrk_r+0x1c>)
 800b740:	2300      	movs	r3, #0
 800b742:	4604      	mov	r4, r0
 800b744:	4608      	mov	r0, r1
 800b746:	602b      	str	r3, [r5, #0]
 800b748:	f7f6 fc06 	bl	8001f58 <_sbrk>
 800b74c:	1c43      	adds	r3, r0, #1
 800b74e:	d102      	bne.n	800b756 <_sbrk_r+0x1a>
 800b750:	682b      	ldr	r3, [r5, #0]
 800b752:	b103      	cbz	r3, 800b756 <_sbrk_r+0x1a>
 800b754:	6023      	str	r3, [r4, #0]
 800b756:	bd38      	pop	{r3, r4, r5, pc}
 800b758:	20003ae8 	.word	0x20003ae8

0800b75c <__malloc_lock>:
 800b75c:	4801      	ldr	r0, [pc, #4]	; (800b764 <__malloc_lock+0x8>)
 800b75e:	f000 b809 	b.w	800b774 <__retarget_lock_acquire_recursive>
 800b762:	bf00      	nop
 800b764:	20003af0 	.word	0x20003af0

0800b768 <__malloc_unlock>:
 800b768:	4801      	ldr	r0, [pc, #4]	; (800b770 <__malloc_unlock+0x8>)
 800b76a:	f000 b804 	b.w	800b776 <__retarget_lock_release_recursive>
 800b76e:	bf00      	nop
 800b770:	20003af0 	.word	0x20003af0

0800b774 <__retarget_lock_acquire_recursive>:
 800b774:	4770      	bx	lr

0800b776 <__retarget_lock_release_recursive>:
 800b776:	4770      	bx	lr

0800b778 <_init>:
 800b778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b77a:	bf00      	nop
 800b77c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b77e:	bc08      	pop	{r3}
 800b780:	469e      	mov	lr, r3
 800b782:	4770      	bx	lr

0800b784 <_fini>:
 800b784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b786:	bf00      	nop
 800b788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b78a:	bc08      	pop	{r3}
 800b78c:	469e      	mov	lr, r3
 800b78e:	4770      	bx	lr
