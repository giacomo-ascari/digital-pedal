
mcu-test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c264  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000364  0800c3ec  0800c3ec  0001c3ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c750  0800c750  00020334  2**0
                  CONTENTS
  4 .ARM          00000008  0800c750  0800c750  0001c750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c758  0800c758  00020334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c758  0800c758  0001c758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c75c  0800c75c  0001c75c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000334  20000000  0800c760  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020334  2**0
                  CONTENTS
 10 .bss          00005358  20000334  20000334  00020334  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000568c  2000568c  00020334  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020334  2**0
                  CONTENTS, READONLY
 13 .debug_info   00027fb5  00000000  00000000  00020364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000564a  00000000  00000000  00048319  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014e0  00000000  00000000  0004d968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001428  00000000  00000000  0004ee48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000277ac  00000000  00000000  00050270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e869  00000000  00000000  00077a1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd4fa  00000000  00000000  00096285  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0016377f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005674  00000000  00000000  001637d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000001a7  00000000  00000000  00168e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000334 	.word	0x20000334
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800c3d4 	.word	0x0800c3d4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000338 	.word	0x20000338
 80001c4:	0800c3d4 	.word	0x0800c3d4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <write_register>:

//(1): Functions definitions
//-------------- Static Functions ---------------//
// Function(1): Write to register
static void write_register(uint8_t reg, uint8_t *data)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af02      	add	r7, sp, #8
 80004c6:	4603      	mov	r3, r0
 80004c8:	6039      	str	r1, [r7, #0]
 80004ca:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 80004cc:	4a09      	ldr	r2, [pc, #36]	; (80004f4 <write_register+0x34>)
 80004ce:	79fb      	ldrb	r3, [r7, #7]
 80004d0:	7013      	strb	r3, [r2, #0]
	iData[1] = data[0];
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	781a      	ldrb	r2, [r3, #0]
 80004d6:	4b07      	ldr	r3, [pc, #28]	; (80004f4 <write_register+0x34>)
 80004d8:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100);
 80004da:	2364      	movs	r3, #100	; 0x64
 80004dc:	9300      	str	r3, [sp, #0]
 80004de:	2302      	movs	r3, #2
 80004e0:	4a04      	ldr	r2, [pc, #16]	; (80004f4 <write_register+0x34>)
 80004e2:	2194      	movs	r1, #148	; 0x94
 80004e4:	4804      	ldr	r0, [pc, #16]	; (80004f8 <write_register+0x38>)
 80004e6:	f004 fee1 	bl	80052ac <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, data, size, 100);
}
 80004ea:	bf00      	nop
 80004ec:	3708      	adds	r7, #8
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	20000350 	.word	0x20000350
 80004f8:	20000354 	.word	0x20000354

080004fc <read_register>:
// Function(2): Read from register
static void read_register(uint8_t reg, uint8_t *data)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af02      	add	r7, sp, #8
 8000502:	4603      	mov	r3, r0
 8000504:	6039      	str	r1, [r7, #0]
 8000506:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 8000508:	4a0b      	ldr	r2, [pc, #44]	; (8000538 <read_register+0x3c>)
 800050a:	79fb      	ldrb	r3, [r7, #7]
 800050c:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100);
 800050e:	2364      	movs	r3, #100	; 0x64
 8000510:	9300      	str	r3, [sp, #0]
 8000512:	2301      	movs	r3, #1
 8000514:	4a08      	ldr	r2, [pc, #32]	; (8000538 <read_register+0x3c>)
 8000516:	2194      	movs	r1, #148	; 0x94
 8000518:	4808      	ldr	r0, [pc, #32]	; (800053c <read_register+0x40>)
 800051a:	f004 fec7 	bl	80052ac <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100);
 800051e:	2364      	movs	r3, #100	; 0x64
 8000520:	9300      	str	r3, [sp, #0]
 8000522:	2301      	movs	r3, #1
 8000524:	683a      	ldr	r2, [r7, #0]
 8000526:	2194      	movs	r1, #148	; 0x94
 8000528:	4804      	ldr	r0, [pc, #16]	; (800053c <read_register+0x40>)
 800052a:	f004 ffbd 	bl	80054a8 <HAL_I2C_Master_Receive>
}
 800052e:	bf00      	nop
 8000530:	3708      	adds	r7, #8
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	20000350 	.word	0x20000350
 800053c:	20000354 	.word	0x20000354

08000540 <CS43_Init>:

//-------------- Public Functions ----------------//
// Function(1): Initialisation
void CS43_Init(I2C_HandleTypeDef i2c_handle, CS43_MODE outputMode)
{
 8000540:	b084      	sub	sp, #16
 8000542:	b580      	push	{r7, lr}
 8000544:	af00      	add	r7, sp, #0
 8000546:	f107 0c08 	add.w	ip, r7, #8
 800054a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 800054e:	4b81      	ldr	r3, [pc, #516]	; (8000754 <CS43_Init+0x214>)
 8000550:	2200      	movs	r2, #0
 8000552:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000556:	4b7f      	ldr	r3, [pc, #508]	; (8000754 <CS43_Init+0x214>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	69da      	ldr	r2, [r3, #28]
 800055c:	4b7d      	ldr	r3, [pc, #500]	; (8000754 <CS43_Init+0x214>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000564:	61da      	str	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8000566:	2201      	movs	r2, #1
 8000568:	2110      	movs	r1, #16
 800056a:	487b      	ldr	r0, [pc, #492]	; (8000758 <CS43_Init+0x218>)
 800056c:	f002 ffd0 	bl	8003510 <HAL_GPIO_WritePin>
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 8000570:	4b7a      	ldr	r3, [pc, #488]	; (800075c <CS43_Init+0x21c>)
 8000572:	4618      	mov	r0, r3
 8000574:	f107 0308 	add.w	r3, r7, #8
 8000578:	2254      	movs	r2, #84	; 0x54
 800057a:	4619      	mov	r1, r3
 800057c:	f00b fe4c 	bl	800c218 <memcpy>
	//(2): Power down
	iData[1] = 0x01;
 8000580:	4b77      	ldr	r3, [pc, #476]	; (8000760 <CS43_Init+0x220>)
 8000582:	2201      	movs	r2, #1
 8000584:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,iData);
 8000586:	4976      	ldr	r1, [pc, #472]	; (8000760 <CS43_Init+0x220>)
 8000588:	2002      	movs	r0, #2
 800058a:	f7ff ff99 	bl	80004c0 <write_register>
	//(3): Enable Right and Left headphones
	iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 800058e:	4b74      	ldr	r3, [pc, #464]	; (8000760 <CS43_Init+0x220>)
 8000590:	2280      	movs	r2, #128	; 0x80
 8000592:	705a      	strb	r2, [r3, #1]
	iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000594:	4b72      	ldr	r3, [pc, #456]	; (8000760 <CS43_Init+0x220>)
 8000596:	785b      	ldrb	r3, [r3, #1]
 8000598:	f043 0320 	orr.w	r3, r3, #32
 800059c:	b2da      	uxtb	r2, r3
 800059e:	4b70      	ldr	r3, [pc, #448]	; (8000760 <CS43_Init+0x220>)
 80005a0:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 80005a2:	4b6f      	ldr	r3, [pc, #444]	; (8000760 <CS43_Init+0x220>)
 80005a4:	785b      	ldrb	r3, [r3, #1]
 80005a6:	f043 030c 	orr.w	r3, r3, #12
 80005aa:	b2da      	uxtb	r2, r3
 80005ac:	4b6c      	ldr	r3, [pc, #432]	; (8000760 <CS43_Init+0x220>)
 80005ae:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80005b0:	4b6b      	ldr	r3, [pc, #428]	; (8000760 <CS43_Init+0x220>)
 80005b2:	785b      	ldrb	r3, [r3, #1]
 80005b4:	f043 0303 	orr.w	r3, r3, #3
 80005b8:	b2da      	uxtb	r2, r3
 80005ba:	4b69      	ldr	r3, [pc, #420]	; (8000760 <CS43_Init+0x220>)
 80005bc:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 80005be:	4969      	ldr	r1, [pc, #420]	; (8000764 <CS43_Init+0x224>)
 80005c0:	2004      	movs	r0, #4
 80005c2:	f7ff ff7d 	bl	80004c0 <write_register>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
 80005c6:	4b66      	ldr	r3, [pc, #408]	; (8000760 <CS43_Init+0x220>)
 80005c8:	2280      	movs	r2, #128	; 0x80
 80005ca:	705a      	strb	r2, [r3, #1]
	write_register(CLOCKING_CONTROL,&iData[1]);
 80005cc:	4965      	ldr	r1, [pc, #404]	; (8000764 <CS43_Init+0x224>)
 80005ce:	2005      	movs	r0, #5
 80005d0:	f7ff ff76 	bl	80004c0 <write_register>
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
 80005d4:	4962      	ldr	r1, [pc, #392]	; (8000760 <CS43_Init+0x220>)
 80005d6:	2006      	movs	r0, #6
 80005d8:	f7ff ff90 	bl	80004fc <read_register>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 80005dc:	4b60      	ldr	r3, [pc, #384]	; (8000760 <CS43_Init+0x220>)
 80005de:	785b      	ldrb	r3, [r3, #1]
 80005e0:	f003 0320 	and.w	r3, r3, #32
 80005e4:	b2da      	uxtb	r2, r3
 80005e6:	4b5e      	ldr	r3, [pc, #376]	; (8000760 <CS43_Init+0x220>)
 80005e8:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 7);  // Slave
 80005ea:	4b5d      	ldr	r3, [pc, #372]	; (8000760 <CS43_Init+0x220>)
 80005ec:	785b      	ldrb	r3, [r3, #1]
 80005ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80005f2:	b2da      	uxtb	r2, r3
 80005f4:	4b5a      	ldr	r3, [pc, #360]	; (8000760 <CS43_Init+0x220>)
 80005f6:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
 80005f8:	4b59      	ldr	r3, [pc, #356]	; (8000760 <CS43_Init+0x220>)
 80005fa:	785b      	ldrb	r3, [r3, #1]
 80005fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000600:	b2da      	uxtb	r2, r3
 8000602:	4b57      	ldr	r3, [pc, #348]	; (8000760 <CS43_Init+0x220>)
 8000604:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 4);  // No DSP mode
 8000606:	4b56      	ldr	r3, [pc, #344]	; (8000760 <CS43_Init+0x220>)
 8000608:	785b      	ldrb	r3, [r3, #1]
 800060a:	f023 0310 	bic.w	r3, r3, #16
 800060e:	b2da      	uxtb	r2, r3
 8000610:	4b53      	ldr	r3, [pc, #332]	; (8000760 <CS43_Init+0x220>)
 8000612:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
 8000614:	4b52      	ldr	r3, [pc, #328]	; (8000760 <CS43_Init+0x220>)
 8000616:	785b      	ldrb	r3, [r3, #1]
 8000618:	f023 0304 	bic.w	r3, r3, #4
 800061c:	b2da      	uxtb	r2, r3
 800061e:	4b50      	ldr	r3, [pc, #320]	; (8000760 <CS43_Init+0x220>)
 8000620:	705a      	strb	r2, [r3, #1]
	iData[1] |= (1 << 2);
 8000622:	4b4f      	ldr	r3, [pc, #316]	; (8000760 <CS43_Init+0x220>)
 8000624:	785b      	ldrb	r3, [r3, #1]
 8000626:	f043 0304 	orr.w	r3, r3, #4
 800062a:	b2da      	uxtb	r2, r3
 800062c:	4b4c      	ldr	r3, [pc, #304]	; (8000760 <CS43_Init+0x220>)
 800062e:	705a      	strb	r2, [r3, #1]

	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 8000630:	4b4b      	ldr	r3, [pc, #300]	; (8000760 <CS43_Init+0x220>)
 8000632:	785b      	ldrb	r3, [r3, #1]
 8000634:	f043 0303 	orr.w	r3, r3, #3
 8000638:	b2da      	uxtb	r2, r3
 800063a:	4b49      	ldr	r3, [pc, #292]	; (8000760 <CS43_Init+0x220>)
 800063c:	705a      	strb	r2, [r3, #1]
	write_register(INTERFACE_CONTROL1,&iData[1]);
 800063e:	4949      	ldr	r1, [pc, #292]	; (8000764 <CS43_Init+0x224>)
 8000640:	2006      	movs	r0, #6
 8000642:	f7ff ff3d 	bl	80004c0 <write_register>
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
 8000646:	4947      	ldr	r1, [pc, #284]	; (8000764 <CS43_Init+0x224>)
 8000648:	2008      	movs	r0, #8
 800064a:	f7ff ff57 	bl	80004fc <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 800064e:	4b44      	ldr	r3, [pc, #272]	; (8000760 <CS43_Init+0x220>)
 8000650:	785b      	ldrb	r3, [r3, #1]
 8000652:	f023 030f 	bic.w	r3, r3, #15
 8000656:	b2da      	uxtb	r2, r3
 8000658:	4b41      	ldr	r3, [pc, #260]	; (8000760 <CS43_Init+0x220>)
 800065a:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 800065c:	4b40      	ldr	r3, [pc, #256]	; (8000760 <CS43_Init+0x220>)
 800065e:	785b      	ldrb	r3, [r3, #1]
 8000660:	f043 0301 	orr.w	r3, r3, #1
 8000664:	b2da      	uxtb	r2, r3
 8000666:	4b3e      	ldr	r3, [pc, #248]	; (8000760 <CS43_Init+0x220>)
 8000668:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_A,&iData[1]);
 800066a:	493e      	ldr	r1, [pc, #248]	; (8000764 <CS43_Init+0x224>)
 800066c:	2008      	movs	r0, #8
 800066e:	f7ff ff27 	bl	80004c0 <write_register>
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
 8000672:	493c      	ldr	r1, [pc, #240]	; (8000764 <CS43_Init+0x224>)
 8000674:	2009      	movs	r0, #9
 8000676:	f7ff ff41 	bl	80004fc <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 800067a:	4b39      	ldr	r3, [pc, #228]	; (8000760 <CS43_Init+0x220>)
 800067c:	785b      	ldrb	r3, [r3, #1]
 800067e:	f023 030f 	bic.w	r3, r3, #15
 8000682:	b2da      	uxtb	r2, r3
 8000684:	4b36      	ldr	r3, [pc, #216]	; (8000760 <CS43_Init+0x220>)
 8000686:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 8000688:	4b35      	ldr	r3, [pc, #212]	; (8000760 <CS43_Init+0x220>)
 800068a:	785b      	ldrb	r3, [r3, #1]
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	b2da      	uxtb	r2, r3
 8000692:	4b33      	ldr	r3, [pc, #204]	; (8000760 <CS43_Init+0x220>)
 8000694:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_B,&iData[1]);
 8000696:	4933      	ldr	r1, [pc, #204]	; (8000764 <CS43_Init+0x224>)
 8000698:	2009      	movs	r0, #9
 800069a:	f7ff ff11 	bl	80004c0 <write_register>
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
 800069e:	4931      	ldr	r1, [pc, #196]	; (8000764 <CS43_Init+0x224>)
 80006a0:	200e      	movs	r0, #14
 80006a2:	f7ff ff2b 	bl	80004fc <read_register>
	if(outputMode == MODE_ANAL)
 80006a6:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d123      	bne.n	80006f6 <CS43_Init+0x1b6>
	{
		iData[1] |=  (1 << 7);   // Enable passthrough for AIN-A
 80006ae:	4b2c      	ldr	r3, [pc, #176]	; (8000760 <CS43_Init+0x220>)
 80006b0:	785b      	ldrb	r3, [r3, #1]
 80006b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006b6:	b2da      	uxtb	r2, r3
 80006b8:	4b29      	ldr	r3, [pc, #164]	; (8000760 <CS43_Init+0x220>)
 80006ba:	705a      	strb	r2, [r3, #1]
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
 80006bc:	4b28      	ldr	r3, [pc, #160]	; (8000760 <CS43_Init+0x220>)
 80006be:	785b      	ldrb	r3, [r3, #1]
 80006c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006c4:	b2da      	uxtb	r2, r3
 80006c6:	4b26      	ldr	r3, [pc, #152]	; (8000760 <CS43_Init+0x220>)
 80006c8:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
 80006ca:	4b25      	ldr	r3, [pc, #148]	; (8000760 <CS43_Init+0x220>)
 80006cc:	785b      	ldrb	r3, [r3, #1]
 80006ce:	f023 0320 	bic.w	r3, r3, #32
 80006d2:	b2da      	uxtb	r2, r3
 80006d4:	4b22      	ldr	r3, [pc, #136]	; (8000760 <CS43_Init+0x220>)
 80006d6:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
 80006d8:	4b21      	ldr	r3, [pc, #132]	; (8000760 <CS43_Init+0x220>)
 80006da:	785b      	ldrb	r3, [r3, #1]
 80006dc:	f023 0310 	bic.w	r3, r3, #16
 80006e0:	b2da      	uxtb	r2, r3
 80006e2:	4b1f      	ldr	r3, [pc, #124]	; (8000760 <CS43_Init+0x220>)
 80006e4:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 80006e6:	4b1e      	ldr	r3, [pc, #120]	; (8000760 <CS43_Init+0x220>)
 80006e8:	785b      	ldrb	r3, [r3, #1]
 80006ea:	f023 0308 	bic.w	r3, r3, #8
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	4b1b      	ldr	r3, [pc, #108]	; (8000760 <CS43_Init+0x220>)
 80006f2:	705a      	strb	r2, [r3, #1]
 80006f4:	e006      	b.n	8000704 <CS43_Init+0x1c4>
	}
	else if(outputMode == MODE_I2S)
 80006f6:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d102      	bne.n	8000704 <CS43_Init+0x1c4>
	{
		iData[1] = 0x02;
 80006fe:	4b18      	ldr	r3, [pc, #96]	; (8000760 <CS43_Init+0x220>)
 8000700:	2202      	movs	r2, #2
 8000702:	705a      	strb	r2, [r3, #1]
	}
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 8000704:	4917      	ldr	r1, [pc, #92]	; (8000764 <CS43_Init+0x224>)
 8000706:	200e      	movs	r0, #14
 8000708:	f7ff feda 	bl	80004c0 <write_register>
	//(9): Unmute headphone and speaker
	read_register(PLAYBACK_CONTROL, &iData[1]);
 800070c:	4915      	ldr	r1, [pc, #84]	; (8000764 <CS43_Init+0x224>)
 800070e:	200f      	movs	r0, #15
 8000710:	f7ff fef4 	bl	80004fc <read_register>
	iData[1] = 0x00;
 8000714:	4b12      	ldr	r3, [pc, #72]	; (8000760 <CS43_Init+0x220>)
 8000716:	2200      	movs	r2, #0
 8000718:	705a      	strb	r2, [r3, #1]
	write_register(PLAYBACK_CONTROL,&iData[1]);
 800071a:	4912      	ldr	r1, [pc, #72]	; (8000764 <CS43_Init+0x224>)
 800071c:	200f      	movs	r0, #15
 800071e:	f7ff fecf 	bl	80004c0 <write_register>
	//(10): Set volume to default (0dB)
	iData[1] = 0x00;
 8000722:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <CS43_Init+0x220>)
 8000724:	2200      	movs	r2, #0
 8000726:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 8000728:	490e      	ldr	r1, [pc, #56]	; (8000764 <CS43_Init+0x224>)
 800072a:	2014      	movs	r0, #20
 800072c:	f7ff fec8 	bl	80004c0 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 8000730:	490c      	ldr	r1, [pc, #48]	; (8000764 <CS43_Init+0x224>)
 8000732:	2015      	movs	r0, #21
 8000734:	f7ff fec4 	bl	80004c0 <write_register>
	write_register(PCM_VOLUME_A,&iData[1]);
 8000738:	490a      	ldr	r1, [pc, #40]	; (8000764 <CS43_Init+0x224>)
 800073a:	201a      	movs	r0, #26
 800073c:	f7ff fec0 	bl	80004c0 <write_register>
	write_register(PCM_VOLUME_B,&iData[1]);
 8000740:	4908      	ldr	r1, [pc, #32]	; (8000764 <CS43_Init+0x224>)
 8000742:	201b      	movs	r0, #27
 8000744:	f7ff febc 	bl	80004c0 <write_register>
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000750:	b004      	add	sp, #16
 8000752:	4770      	bx	lr
 8000754:	20002ee8 	.word	0x20002ee8
 8000758:	40020c00 	.word	0x40020c00
 800075c:	20000354 	.word	0x20000354
 8000760:	20000350 	.word	0x20000350
 8000764:	20000351 	.word	0x20000351

08000768 <CS43_Enable_RightLeft>:

// Function(2): Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	71fb      	strb	r3, [r7, #7]
	switch (side)
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	2b03      	cmp	r3, #3
 8000776:	d837      	bhi.n	80007e8 <CS43_Enable_RightLeft+0x80>
 8000778:	a201      	add	r2, pc, #4	; (adr r2, 8000780 <CS43_Enable_RightLeft+0x18>)
 800077a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800077e:	bf00      	nop
 8000780:	08000791 	.word	0x08000791
 8000784:	080007a7 	.word	0x080007a7
 8000788:	080007bd 	.word	0x080007bd
 800078c:	080007d3 	.word	0x080007d3
	{
		case 0:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000790:	4b21      	ldr	r3, [pc, #132]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 8000792:	22c0      	movs	r2, #192	; 0xc0
 8000794:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000796:	4b20      	ldr	r3, [pc, #128]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 8000798:	785b      	ldrb	r3, [r3, #1]
 800079a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800079e:	b2da      	uxtb	r2, r3
 80007a0:	4b1d      	ldr	r3, [pc, #116]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007a2:	705a      	strb	r2, [r3, #1]
			break;
 80007a4:	e021      	b.n	80007ea <CS43_Enable_RightLeft+0x82>
		case 1:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007a6:	4b1c      	ldr	r3, [pc, #112]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007a8:	2280      	movs	r2, #128	; 0x80
 80007aa:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007ac:	4b1a      	ldr	r3, [pc, #104]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007ae:	785b      	ldrb	r3, [r3, #1]
 80007b0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80007b4:	b2da      	uxtb	r2, r3
 80007b6:	4b18      	ldr	r3, [pc, #96]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007b8:	705a      	strb	r2, [r3, #1]
			break;
 80007ba:	e016      	b.n	80007ea <CS43_Enable_RightLeft+0x82>
		case 2:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007bc:	4b16      	ldr	r3, [pc, #88]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007be:	22c0      	movs	r2, #192	; 0xc0
 80007c0:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007c2:	4b15      	ldr	r3, [pc, #84]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007c4:	785b      	ldrb	r3, [r3, #1]
 80007c6:	f043 0320 	orr.w	r3, r3, #32
 80007ca:	b2da      	uxtb	r2, r3
 80007cc:	4b12      	ldr	r3, [pc, #72]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007ce:	705a      	strb	r2, [r3, #1]
			break;
 80007d0:	e00b      	b.n	80007ea <CS43_Enable_RightLeft+0x82>
		case 3:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007d2:	4b11      	ldr	r3, [pc, #68]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007d4:	2280      	movs	r2, #128	; 0x80
 80007d6:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007d8:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007da:	785b      	ldrb	r3, [r3, #1]
 80007dc:	f043 0320 	orr.w	r3, r3, #32
 80007e0:	b2da      	uxtb	r2, r3
 80007e2:	4b0d      	ldr	r3, [pc, #52]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007e4:	705a      	strb	r2, [r3, #1]
			break;
 80007e6:	e000      	b.n	80007ea <CS43_Enable_RightLeft+0x82>
		default:
			break;
 80007e8:	bf00      	nop
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 80007ea:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007ec:	785b      	ldrb	r3, [r3, #1]
 80007ee:	f043 030c 	orr.w	r3, r3, #12
 80007f2:	b2da      	uxtb	r2, r3
 80007f4:	4b08      	ldr	r3, [pc, #32]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007f6:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80007f8:	4b07      	ldr	r3, [pc, #28]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007fa:	785b      	ldrb	r3, [r3, #1]
 80007fc:	f043 0303 	orr.w	r3, r3, #3
 8000800:	b2da      	uxtb	r2, r3
 8000802:	4b05      	ldr	r3, [pc, #20]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 8000804:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 8000806:	4905      	ldr	r1, [pc, #20]	; (800081c <CS43_Enable_RightLeft+0xb4>)
 8000808:	2004      	movs	r0, #4
 800080a:	f7ff fe59 	bl	80004c0 <write_register>
}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000350 	.word	0x20000350
 800081c:	20000351 	.word	0x20000351

08000820 <CS43_SetVolume>:

// Function(3): Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	71fb      	strb	r3, [r7, #7]
	int8_t tempVol = volume - 50;
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	3b32      	subs	r3, #50	; 0x32
 800082e:	b2db      	uxtb	r3, r3
 8000830:	73fb      	strb	r3, [r7, #15]
	tempVol = tempVol*(127/50);
 8000832:	7bfb      	ldrb	r3, [r7, #15]
 8000834:	005b      	lsls	r3, r3, #1
 8000836:	b2db      	uxtb	r3, r3
 8000838:	73fb      	strb	r3, [r7, #15]
	uint8_t myVolume =  (uint8_t )tempVol;
 800083a:	7bfb      	ldrb	r3, [r7, #15]
 800083c:	73bb      	strb	r3, [r7, #14]
	iData[1] = myVolume;
 800083e:	4a16      	ldr	r2, [pc, #88]	; (8000898 <CS43_SetVolume+0x78>)
 8000840:	7bbb      	ldrb	r3, [r7, #14]
 8000842:	7053      	strb	r3, [r2, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 8000844:	4915      	ldr	r1, [pc, #84]	; (800089c <CS43_SetVolume+0x7c>)
 8000846:	2014      	movs	r0, #20
 8000848:	f7ff fe3a 	bl	80004c0 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 800084c:	4913      	ldr	r1, [pc, #76]	; (800089c <CS43_SetVolume+0x7c>)
 800084e:	2015      	movs	r0, #21
 8000850:	f7ff fe36 	bl	80004c0 <write_register>

	iData[1] = VOLUME_CONVERT_D(volume);
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	2b64      	cmp	r3, #100	; 0x64
 8000858:	d80e      	bhi.n	8000878 <CS43_SetVolume+0x58>
 800085a:	79fa      	ldrb	r2, [r7, #7]
 800085c:	4613      	mov	r3, r2
 800085e:	005b      	lsls	r3, r3, #1
 8000860:	4413      	add	r3, r2
 8000862:	011b      	lsls	r3, r3, #4
 8000864:	4a0e      	ldr	r2, [pc, #56]	; (80008a0 <CS43_SetVolume+0x80>)
 8000866:	fb82 1203 	smull	r1, r2, r2, r3
 800086a:	1152      	asrs	r2, r2, #5
 800086c:	17db      	asrs	r3, r3, #31
 800086e:	1ad3      	subs	r3, r2, r3
 8000870:	b2db      	uxtb	r3, r3
 8000872:	3b18      	subs	r3, #24
 8000874:	b2db      	uxtb	r3, r3
 8000876:	e000      	b.n	800087a <CS43_SetVolume+0x5a>
 8000878:	2318      	movs	r3, #24
 800087a:	4a07      	ldr	r2, [pc, #28]	; (8000898 <CS43_SetVolume+0x78>)
 800087c:	7053      	strb	r3, [r2, #1]

	/* Set the Master volume */
	write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
 800087e:	4907      	ldr	r1, [pc, #28]	; (800089c <CS43_SetVolume+0x7c>)
 8000880:	2020      	movs	r0, #32
 8000882:	f7ff fe1d 	bl	80004c0 <write_register>
	write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
 8000886:	4905      	ldr	r1, [pc, #20]	; (800089c <CS43_SetVolume+0x7c>)
 8000888:	2021      	movs	r0, #33	; 0x21
 800088a:	f7ff fe19 	bl	80004c0 <write_register>
}
 800088e:	bf00      	nop
 8000890:	3710      	adds	r7, #16
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	20000350 	.word	0x20000350
 800089c:	20000351 	.word	0x20000351
 80008a0:	51eb851f 	.word	0x51eb851f

080008a4 <CS43_Start>:

// Function(4): Start the Audio DAC
void CS43_Start(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
	// Write 0x99 to register 0x00.
	iData[1] = 0x99;
 80008a8:	4b1d      	ldr	r3, [pc, #116]	; (8000920 <CS43_Start+0x7c>)
 80008aa:	2299      	movs	r2, #153	; 0x99
 80008ac:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 80008ae:	491d      	ldr	r1, [pc, #116]	; (8000924 <CS43_Start+0x80>)
 80008b0:	2000      	movs	r0, #0
 80008b2:	f7ff fe05 	bl	80004c0 <write_register>
	// Write 0x80 to register 0x47.
	iData[1] = 0x80;
 80008b6:	4b1a      	ldr	r3, [pc, #104]	; (8000920 <CS43_Start+0x7c>)
 80008b8:	2280      	movs	r2, #128	; 0x80
 80008ba:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_47,&iData[1]);
 80008bc:	4919      	ldr	r1, [pc, #100]	; (8000924 <CS43_Start+0x80>)
 80008be:	2047      	movs	r0, #71	; 0x47
 80008c0:	f7ff fdfe 	bl	80004c0 <write_register>
	// Write '1'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80008c4:	4917      	ldr	r1, [pc, #92]	; (8000924 <CS43_Start+0x80>)
 80008c6:	2032      	movs	r0, #50	; 0x32
 80008c8:	f7ff fe18 	bl	80004fc <read_register>
	iData[1] |= 0x80;
 80008cc:	4b14      	ldr	r3, [pc, #80]	; (8000920 <CS43_Start+0x7c>)
 80008ce:	785b      	ldrb	r3, [r3, #1]
 80008d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008d4:	b2da      	uxtb	r2, r3
 80008d6:	4b12      	ldr	r3, [pc, #72]	; (8000920 <CS43_Start+0x7c>)
 80008d8:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 80008da:	4912      	ldr	r1, [pc, #72]	; (8000924 <CS43_Start+0x80>)
 80008dc:	2032      	movs	r0, #50	; 0x32
 80008de:	f7ff fdef 	bl	80004c0 <write_register>
	// Write '0'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80008e2:	4910      	ldr	r1, [pc, #64]	; (8000924 <CS43_Start+0x80>)
 80008e4:	2032      	movs	r0, #50	; 0x32
 80008e6:	f7ff fe09 	bl	80004fc <read_register>
	iData[1] &= ~(0x80);
 80008ea:	4b0d      	ldr	r3, [pc, #52]	; (8000920 <CS43_Start+0x7c>)
 80008ec:	785b      	ldrb	r3, [r3, #1]
 80008ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008f2:	b2da      	uxtb	r2, r3
 80008f4:	4b0a      	ldr	r3, [pc, #40]	; (8000920 <CS43_Start+0x7c>)
 80008f6:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 80008f8:	490a      	ldr	r1, [pc, #40]	; (8000924 <CS43_Start+0x80>)
 80008fa:	2032      	movs	r0, #50	; 0x32
 80008fc:	f7ff fde0 	bl	80004c0 <write_register>
	// Write 0x00 to register 0x00.
	iData[1] = 0x00;
 8000900:	4b07      	ldr	r3, [pc, #28]	; (8000920 <CS43_Start+0x7c>)
 8000902:	2200      	movs	r2, #0
 8000904:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 8000906:	4907      	ldr	r1, [pc, #28]	; (8000924 <CS43_Start+0x80>)
 8000908:	2000      	movs	r0, #0
 800090a:	f7ff fdd9 	bl	80004c0 <write_register>
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	iData[1] = 0x9E;
 800090e:	4b04      	ldr	r3, [pc, #16]	; (8000920 <CS43_Start+0x7c>)
 8000910:	229e      	movs	r2, #158	; 0x9e
 8000912:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,&iData[1]);
 8000914:	4903      	ldr	r1, [pc, #12]	; (8000924 <CS43_Start+0x80>)
 8000916:	2002      	movs	r0, #2
 8000918:	f7ff fdd2 	bl	80004c0 <write_register>
}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000350 	.word	0x20000350
 8000924:	20000351 	.word	0x20000351

08000928 <_EPD_Reset>:

uint8_t WS_20_30[159] = { 0x80,0x66,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x10,0x66,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x0,0x80,0x66,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x10,0x66,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x14,0x8,0x0,0x0,0x0,0x0,0x1,0xA,0xA,0x0,0xA,0xA,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x14,0x8,0x0,0x1,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x44,0x44,0x44,0x44,0x44,0x44,0x0,0x0,0x0,0x22,0x17,0x41,0x0,0x32,0x36 };

extern SPI_HandleTypeDef hspi1;

static void _EPD_Reset(void) {
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, GPIO_PIN_SET);
 800092c:	2201      	movs	r2, #1
 800092e:	2102      	movs	r1, #2
 8000930:	480b      	ldr	r0, [pc, #44]	; (8000960 <_EPD_Reset+0x38>)
 8000932:	f002 fded 	bl	8003510 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000936:	2064      	movs	r0, #100	; 0x64
 8000938:	f001 ff90 	bl	800285c <HAL_Delay>
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, GPIO_PIN_RESET);
 800093c:	2200      	movs	r2, #0
 800093e:	2102      	movs	r1, #2
 8000940:	4807      	ldr	r0, [pc, #28]	; (8000960 <_EPD_Reset+0x38>)
 8000942:	f002 fde5 	bl	8003510 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8000946:	2002      	movs	r0, #2
 8000948:	f001 ff88 	bl	800285c <HAL_Delay>
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, GPIO_PIN_SET);
 800094c:	2201      	movs	r2, #1
 800094e:	2102      	movs	r1, #2
 8000950:	4803      	ldr	r0, [pc, #12]	; (8000960 <_EPD_Reset+0x38>)
 8000952:	f002 fddd 	bl	8003510 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000956:	2064      	movs	r0, #100	; 0x64
 8000958:	f001 ff80 	bl	800285c <HAL_Delay>
}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40020000 	.word	0x40020000

08000964 <_EPD_SendCommand>:

static void _EPD_SendCommand(uint8_t reg) {
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(EPD_DC_GPIO_Port, EPD_DC_Pin, GPIO_PIN_RESET);
 800096e:	2200      	movs	r2, #0
 8000970:	2104      	movs	r1, #4
 8000972:	480c      	ldr	r0, [pc, #48]	; (80009a4 <_EPD_SendCommand+0x40>)
 8000974:	f002 fdcc 	bl	8003510 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, GPIO_PIN_RESET);
 8000978:	2200      	movs	r2, #0
 800097a:	2140      	movs	r1, #64	; 0x40
 800097c:	4809      	ldr	r0, [pc, #36]	; (80009a4 <_EPD_SendCommand+0x40>)
 800097e:	f002 fdc7 	bl	8003510 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg, 1, 1000);
 8000982:	1df9      	adds	r1, r7, #7
 8000984:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000988:	2201      	movs	r2, #1
 800098a:	4807      	ldr	r0, [pc, #28]	; (80009a8 <_EPD_SendCommand+0x44>)
 800098c:	f006 feb1 	bl	80076f2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, GPIO_PIN_SET);
 8000990:	2201      	movs	r2, #1
 8000992:	2140      	movs	r1, #64	; 0x40
 8000994:	4803      	ldr	r0, [pc, #12]	; (80009a4 <_EPD_SendCommand+0x40>)
 8000996:	f002 fdbb 	bl	8003510 <HAL_GPIO_WritePin>
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40020000 	.word	0x40020000
 80009a8:	20002e24 	.word	0x20002e24

080009ac <_EPD_SendData>:

static void _EPD_SendData(uint8_t data) {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(EPD_DC_GPIO_Port, EPD_DC_Pin, GPIO_PIN_SET);
 80009b6:	2201      	movs	r2, #1
 80009b8:	2104      	movs	r1, #4
 80009ba:	480c      	ldr	r0, [pc, #48]	; (80009ec <_EPD_SendData+0x40>)
 80009bc:	f002 fda8 	bl	8003510 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, GPIO_PIN_RESET);
 80009c0:	2200      	movs	r2, #0
 80009c2:	2140      	movs	r1, #64	; 0x40
 80009c4:	4809      	ldr	r0, [pc, #36]	; (80009ec <_EPD_SendData+0x40>)
 80009c6:	f002 fda3 	bl	8003510 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 80009ca:	1df9      	adds	r1, r7, #7
 80009cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009d0:	2201      	movs	r2, #1
 80009d2:	4807      	ldr	r0, [pc, #28]	; (80009f0 <_EPD_SendData+0x44>)
 80009d4:	f006 fe8d 	bl	80076f2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, GPIO_PIN_SET);
 80009d8:	2201      	movs	r2, #1
 80009da:	2140      	movs	r1, #64	; 0x40
 80009dc:	4803      	ldr	r0, [pc, #12]	; (80009ec <_EPD_SendData+0x40>)
 80009de:	f002 fd97 	bl	8003510 <HAL_GPIO_WritePin>
}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40020000 	.word	0x40020000
 80009f0:	20002e24 	.word	0x20002e24

080009f4 <_EPD_ReadBusy>:

void _EPD_ReadBusy(void) {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
	while(1) {
		if(HAL_GPIO_ReadPin(EPD_BUSY_GPIO_Port, EPD_BUSY_Pin) == GPIO_PIN_RESET)
 80009f8:	2108      	movs	r1, #8
 80009fa:	4806      	ldr	r0, [pc, #24]	; (8000a14 <_EPD_ReadBusy+0x20>)
 80009fc:	f002 fd70 	bl	80034e0 <HAL_GPIO_ReadPin>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d003      	beq.n	8000a0e <_EPD_ReadBusy+0x1a>
			break;
		HAL_Delay(5);
 8000a06:	2005      	movs	r0, #5
 8000a08:	f001 ff28 	bl	800285c <HAL_Delay>
		if(HAL_GPIO_ReadPin(EPD_BUSY_GPIO_Port, EPD_BUSY_Pin) == GPIO_PIN_RESET)
 8000a0c:	e7f4      	b.n	80009f8 <_EPD_ReadBusy+0x4>
			break;
 8000a0e:	bf00      	nop
	}
}
 8000a10:	bf00      	nop
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40020000 	.word	0x40020000

08000a18 <_EPD_LUT>:

static void _EPD_LUT(uint8_t *lut) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
	uint8_t count;
	_EPD_SendCommand(0x32);
 8000a20:	2032      	movs	r0, #50	; 0x32
 8000a22:	f7ff ff9f 	bl	8000964 <_EPD_SendCommand>
	for(count=0; count<153; count++)
 8000a26:	2300      	movs	r3, #0
 8000a28:	73fb      	strb	r3, [r7, #15]
 8000a2a:	e009      	b.n	8000a40 <_EPD_LUT+0x28>
		_EPD_SendData(lut[count]);
 8000a2c:	7bfb      	ldrb	r3, [r7, #15]
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	4413      	add	r3, r2
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	4618      	mov	r0, r3
 8000a36:	f7ff ffb9 	bl	80009ac <_EPD_SendData>
	for(count=0; count<153; count++)
 8000a3a:	7bfb      	ldrb	r3, [r7, #15]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	73fb      	strb	r3, [r7, #15]
 8000a40:	7bfb      	ldrb	r3, [r7, #15]
 8000a42:	2b98      	cmp	r3, #152	; 0x98
 8000a44:	d9f2      	bls.n	8000a2c <_EPD_LUT+0x14>
	_EPD_ReadBusy();
 8000a46:	f7ff ffd5 	bl	80009f4 <_EPD_ReadBusy>
}
 8000a4a:	bf00      	nop
 8000a4c:	3710      	adds	r7, #16
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <_EPD_LUT_by_host>:

static void _EPD_LUT_by_host(uint8_t *lut) {
 8000a52:	b580      	push	{r7, lr}
 8000a54:	b082      	sub	sp, #8
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	6078      	str	r0, [r7, #4]
	_EPD_LUT((uint8_t *)lut);			//lut
 8000a5a:	6878      	ldr	r0, [r7, #4]
 8000a5c:	f7ff ffdc 	bl	8000a18 <_EPD_LUT>
	_EPD_SendCommand(0x3f);
 8000a60:	203f      	movs	r0, #63	; 0x3f
 8000a62:	f7ff ff7f 	bl	8000964 <_EPD_SendCommand>
	_EPD_SendData(*(lut+153));
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	3399      	adds	r3, #153	; 0x99
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff ff9d 	bl	80009ac <_EPD_SendData>
	_EPD_SendCommand(0x03);	// gate voltage
 8000a72:	2003      	movs	r0, #3
 8000a74:	f7ff ff76 	bl	8000964 <_EPD_SendCommand>
	_EPD_SendData(*(lut+154));
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	339a      	adds	r3, #154	; 0x9a
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff ff94 	bl	80009ac <_EPD_SendData>
	_EPD_SendCommand(0x04);	// source voltage
 8000a84:	2004      	movs	r0, #4
 8000a86:	f7ff ff6d 	bl	8000964 <_EPD_SendCommand>
	_EPD_SendData(*(lut+155));	// VSH
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	339b      	adds	r3, #155	; 0x9b
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff ff8b 	bl	80009ac <_EPD_SendData>
	_EPD_SendData(*(lut+156));	// VSH2
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	339c      	adds	r3, #156	; 0x9c
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff ff85 	bl	80009ac <_EPD_SendData>
	_EPD_SendData(*(lut+157));	// VSL
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	339d      	adds	r3, #157	; 0x9d
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff ff7f 	bl	80009ac <_EPD_SendData>
	_EPD_SendCommand(0x2c);		// VCOM
 8000aae:	202c      	movs	r0, #44	; 0x2c
 8000ab0:	f7ff ff58 	bl	8000964 <_EPD_SendCommand>
	_EPD_SendData(*(lut+158));
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	339e      	adds	r3, #158	; 0x9e
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	4618      	mov	r0, r3
 8000abc:	f7ff ff76 	bl	80009ac <_EPD_SendData>
}
 8000ac0:	bf00      	nop
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <_EPD_TurnOnDisplay>:

static void _EPD_TurnOnDisplay(void) {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
	_EPD_SendCommand(0x22); //Display Update Control
 8000acc:	2022      	movs	r0, #34	; 0x22
 8000ace:	f7ff ff49 	bl	8000964 <_EPD_SendCommand>
	_EPD_SendData(0xc7);
 8000ad2:	20c7      	movs	r0, #199	; 0xc7
 8000ad4:	f7ff ff6a 	bl	80009ac <_EPD_SendData>
	_EPD_SendCommand(0x20); //Activate Display Update Sequence
 8000ad8:	2020      	movs	r0, #32
 8000ada:	f7ff ff43 	bl	8000964 <_EPD_SendCommand>
	_EPD_ReadBusy();
 8000ade:	f7ff ff89 	bl	80009f4 <_EPD_ReadBusy>
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}

08000ae6 <_EPD_SetWindows>:
	_EPD_SendData(0x0F);
	_EPD_SendCommand(0x20); //Activate Display Update Sequence
	_EPD_ReadBusy();
}

static void _EPD_SetWindows(uint16_t Xstart, uint16_t Ystart, uint16_t Xend, uint16_t Yend) {
 8000ae6:	b590      	push	{r4, r7, lr}
 8000ae8:	b083      	sub	sp, #12
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	4604      	mov	r4, r0
 8000aee:	4608      	mov	r0, r1
 8000af0:	4611      	mov	r1, r2
 8000af2:	461a      	mov	r2, r3
 8000af4:	4623      	mov	r3, r4
 8000af6:	80fb      	strh	r3, [r7, #6]
 8000af8:	4603      	mov	r3, r0
 8000afa:	80bb      	strh	r3, [r7, #4]
 8000afc:	460b      	mov	r3, r1
 8000afe:	807b      	strh	r3, [r7, #2]
 8000b00:	4613      	mov	r3, r2
 8000b02:	803b      	strh	r3, [r7, #0]
	_EPD_SendCommand(0x44); // SET_RAM_X_ADDRESS_START_END_POSITION
 8000b04:	2044      	movs	r0, #68	; 0x44
 8000b06:	f7ff ff2d 	bl	8000964 <_EPD_SendCommand>
	_EPD_SendData((Xstart>>3) & 0xFF);
 8000b0a:	88fb      	ldrh	r3, [r7, #6]
 8000b0c:	08db      	lsrs	r3, r3, #3
 8000b0e:	b29b      	uxth	r3, r3
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff ff4a 	bl	80009ac <_EPD_SendData>
	_EPD_SendData((Xend>>3) & 0xFF);
 8000b18:	887b      	ldrh	r3, [r7, #2]
 8000b1a:	08db      	lsrs	r3, r3, #3
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff ff43 	bl	80009ac <_EPD_SendData>

	_EPD_SendCommand(0x45); // SET_RAM_Y_ADDRESS_START_END_POSITION
 8000b26:	2045      	movs	r0, #69	; 0x45
 8000b28:	f7ff ff1c 	bl	8000964 <_EPD_SendCommand>
	_EPD_SendData(Ystart & 0xFF);
 8000b2c:	88bb      	ldrh	r3, [r7, #4]
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff ff3b 	bl	80009ac <_EPD_SendData>
	_EPD_SendData((Ystart >> 8) & 0xFF);
 8000b36:	88bb      	ldrh	r3, [r7, #4]
 8000b38:	0a1b      	lsrs	r3, r3, #8
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff ff34 	bl	80009ac <_EPD_SendData>
	_EPD_SendData(Yend & 0xFF);
 8000b44:	883b      	ldrh	r3, [r7, #0]
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff ff2f 	bl	80009ac <_EPD_SendData>
	_EPD_SendData((Yend >> 8) & 0xFF);
 8000b4e:	883b      	ldrh	r3, [r7, #0]
 8000b50:	0a1b      	lsrs	r3, r3, #8
 8000b52:	b29b      	uxth	r3, r3
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	4618      	mov	r0, r3
 8000b58:	f7ff ff28 	bl	80009ac <_EPD_SendData>
}
 8000b5c:	bf00      	nop
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd90      	pop	{r4, r7, pc}

08000b64 <_EPD_SetCursor>:

static void _EPD_SetCursor(uint16_t Xstart, uint16_t Ystart) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	460a      	mov	r2, r1
 8000b6e:	80fb      	strh	r3, [r7, #6]
 8000b70:	4613      	mov	r3, r2
 8000b72:	80bb      	strh	r3, [r7, #4]
	_EPD_SendCommand(0x4E); // SET_RAM_X_ADDRESS_COUNTER
 8000b74:	204e      	movs	r0, #78	; 0x4e
 8000b76:	f7ff fef5 	bl	8000964 <_EPD_SendCommand>
	_EPD_SendData(Xstart & 0xFF);
 8000b7a:	88fb      	ldrh	r3, [r7, #6]
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff ff14 	bl	80009ac <_EPD_SendData>

	_EPD_SendCommand(0x4F); // SET_RAM_Y_ADDRESS_COUNTER
 8000b84:	204f      	movs	r0, #79	; 0x4f
 8000b86:	f7ff feed 	bl	8000964 <_EPD_SendCommand>
	_EPD_SendData(Ystart & 0xFF);
 8000b8a:	88bb      	ldrh	r3, [r7, #4]
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff ff0c 	bl	80009ac <_EPD_SendData>
	_EPD_SendData((Ystart >> 8) & 0xFF);
 8000b94:	88bb      	ldrh	r3, [r7, #4]
 8000b96:	0a1b      	lsrs	r3, r3, #8
 8000b98:	b29b      	uxth	r3, r3
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff ff05 	bl	80009ac <_EPD_SendData>
}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
	...

08000bac <EPD_Init>:



void EPD_Init(void) {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EPD_DC_GPIO_Port, EPD_DC_Pin, GPIO_PIN_RESET);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2104      	movs	r1, #4
 8000bb4:	4822      	ldr	r0, [pc, #136]	; (8000c40 <EPD_Init+0x94>)
 8000bb6:	f002 fcab 	bl	8003510 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, GPIO_PIN_RESET);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2140      	movs	r1, #64	; 0x40
 8000bbe:	4820      	ldr	r0, [pc, #128]	; (8000c40 <EPD_Init+0x94>)
 8000bc0:	f002 fca6 	bl	8003510 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, GPIO_PIN_SET);
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	2102      	movs	r1, #2
 8000bc8:	481d      	ldr	r0, [pc, #116]	; (8000c40 <EPD_Init+0x94>)
 8000bca:	f002 fca1 	bl	8003510 <HAL_GPIO_WritePin>

	_EPD_Reset();
 8000bce:	f7ff feab 	bl	8000928 <_EPD_Reset>
	HAL_Delay(100);
 8000bd2:	2064      	movs	r0, #100	; 0x64
 8000bd4:	f001 fe42 	bl	800285c <HAL_Delay>

	_EPD_ReadBusy();
 8000bd8:	f7ff ff0c 	bl	80009f4 <_EPD_ReadBusy>
	_EPD_SendCommand(0x12);  //SWRESET
 8000bdc:	2012      	movs	r0, #18
 8000bde:	f7ff fec1 	bl	8000964 <_EPD_SendCommand>
	_EPD_ReadBusy();
 8000be2:	f7ff ff07 	bl	80009f4 <_EPD_ReadBusy>

	_EPD_SendCommand(0x01); //Driver output control
 8000be6:	2001      	movs	r0, #1
 8000be8:	f7ff febc 	bl	8000964 <_EPD_SendCommand>
	_EPD_SendData(0x27);
 8000bec:	2027      	movs	r0, #39	; 0x27
 8000bee:	f7ff fedd 	bl	80009ac <_EPD_SendData>
	_EPD_SendData(0x01);
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	f7ff feda 	bl	80009ac <_EPD_SendData>
	_EPD_SendData(0x00);
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	f7ff fed7 	bl	80009ac <_EPD_SendData>

	_EPD_SendCommand(0x11); //data entry mode
 8000bfe:	2011      	movs	r0, #17
 8000c00:	f7ff feb0 	bl	8000964 <_EPD_SendCommand>
	_EPD_SendData(0x03);
 8000c04:	2003      	movs	r0, #3
 8000c06:	f7ff fed1 	bl	80009ac <_EPD_SendData>

	_EPD_SetWindows(0, 0, EPD_WIDTH-1, EPD_HEIGHT-1);
 8000c0a:	f240 1327 	movw	r3, #295	; 0x127
 8000c0e:	227f      	movs	r2, #127	; 0x7f
 8000c10:	2100      	movs	r1, #0
 8000c12:	2000      	movs	r0, #0
 8000c14:	f7ff ff67 	bl	8000ae6 <_EPD_SetWindows>

	_EPD_SendCommand(0x21); //  Display update control
 8000c18:	2021      	movs	r0, #33	; 0x21
 8000c1a:	f7ff fea3 	bl	8000964 <_EPD_SendCommand>
	_EPD_SendData(0x00);
 8000c1e:	2000      	movs	r0, #0
 8000c20:	f7ff fec4 	bl	80009ac <_EPD_SendData>
	_EPD_SendData(0x80);
 8000c24:	2080      	movs	r0, #128	; 0x80
 8000c26:	f7ff fec1 	bl	80009ac <_EPD_SendData>

	_EPD_SetCursor(0, 0);
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	f7ff ff99 	bl	8000b64 <_EPD_SetCursor>
	_EPD_ReadBusy();
 8000c32:	f7ff fedf 	bl	80009f4 <_EPD_ReadBusy>

	_EPD_LUT_by_host(WS_20_30);
 8000c36:	4803      	ldr	r0, [pc, #12]	; (8000c44 <EPD_Init+0x98>)
 8000c38:	f7ff ff0b 	bl	8000a52 <_EPD_LUT_by_host>
}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40020000 	.word	0x40020000
 8000c44:	20000000 	.word	0x20000000

08000c48 <EPD_Clear>:

void EPD_Clear(void) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
	uint16_t i;
	_EPD_SendCommand(0x24);   //write RAM for black(0)/white (1)
 8000c4e:	2024      	movs	r0, #36	; 0x24
 8000c50:	f7ff fe88 	bl	8000964 <_EPD_SendCommand>
	for(i = 0; i < EPD_BYTES; i++) {
 8000c54:	2300      	movs	r3, #0
 8000c56:	80fb      	strh	r3, [r7, #6]
 8000c58:	e005      	b.n	8000c66 <EPD_Clear+0x1e>
		_EPD_SendData(0xff);
 8000c5a:	20ff      	movs	r0, #255	; 0xff
 8000c5c:	f7ff fea6 	bl	80009ac <_EPD_SendData>
	for(i = 0; i < EPD_BYTES; i++) {
 8000c60:	88fb      	ldrh	r3, [r7, #6]
 8000c62:	3301      	adds	r3, #1
 8000c64:	80fb      	strh	r3, [r7, #6]
 8000c66:	88fb      	ldrh	r3, [r7, #6]
 8000c68:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 8000c6c:	d3f5      	bcc.n	8000c5a <EPD_Clear+0x12>
	}
	_EPD_TurnOnDisplay();
 8000c6e:	f7ff ff2b 	bl	8000ac8 <_EPD_TurnOnDisplay>
}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <EPD_Display>:

void EPD_Display(uint8_t *image) {
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b084      	sub	sp, #16
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
	uint16_t i;
	_EPD_SendCommand(0x24);   //write RAM for black(0)/white (1)
 8000c82:	2024      	movs	r0, #36	; 0x24
 8000c84:	f7ff fe6e 	bl	8000964 <_EPD_SendCommand>
	for(i=0; i<EPD_BYTES; i++) {
 8000c88:	2300      	movs	r3, #0
 8000c8a:	81fb      	strh	r3, [r7, #14]
 8000c8c:	e009      	b.n	8000ca2 <EPD_Display+0x28>
		_EPD_SendData(image[i]);
 8000c8e:	89fb      	ldrh	r3, [r7, #14]
 8000c90:	687a      	ldr	r2, [r7, #4]
 8000c92:	4413      	add	r3, r2
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff fe88 	bl	80009ac <_EPD_SendData>
	for(i=0; i<EPD_BYTES; i++) {
 8000c9c:	89fb      	ldrh	r3, [r7, #14]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	81fb      	strh	r3, [r7, #14]
 8000ca2:	89fb      	ldrh	r3, [r7, #14]
 8000ca4:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 8000ca8:	d3f1      	bcc.n	8000c8e <EPD_Display+0x14>
	}
	_EPD_TurnOnDisplay();
 8000caa:	f7ff ff0d 	bl	8000ac8 <_EPD_TurnOnDisplay>
}
 8000cae:	bf00      	nop
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <EPD_Sleep>:
		_EPD_SendData(image[i]);
	}
	_EPD_TurnOnDisplay_Partial();
}

void EPD_Sleep(void) {
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	af00      	add	r7, sp, #0
	_EPD_SendCommand(0x10); //enter deep sleep
 8000cba:	2010      	movs	r0, #16
 8000cbc:	f7ff fe52 	bl	8000964 <_EPD_SendCommand>
	_EPD_SendData(0x01);
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	f7ff fe73 	bl	80009ac <_EPD_SendData>
	HAL_Delay(100);
 8000cc6:	2064      	movs	r0, #100	; 0x64
 8000cc8:	f001 fdc8 	bl	800285c <HAL_Delay>
}
 8000ccc:	bf00      	nop
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <Conv_ADC>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Conv_ADC(uint8_t *buf, int32_t *result) {
 8000cd0:	b410      	push	{r4}
	*result = 0xFF000000 * ((buf[1] >> 7) & 1) + (buf[1] << 16) + (buf[0] << 8) + buf[3];
 8000cd2:	7843      	ldrb	r3, [r0, #1]
 8000cd4:	09dc      	lsrs	r4, r3, #7
 8000cd6:	0222      	lsls	r2, r4, #8
 8000cd8:	1b12      	subs	r2, r2, r4
 8000cda:	041b      	lsls	r3, r3, #16
 8000cdc:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 8000ce0:	78c2      	ldrb	r2, [r0, #3]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	7802      	ldrb	r2, [r0, #0]
 8000ce6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8000cea:	600b      	str	r3, [r1, #0]
}
 8000cec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000cf0:	4770      	bx	lr
	...

08000cf4 <HAL_I2S_RxHalfCpltCallback>:

uint32_t rxHalfCpltCounter = 0;
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000cf4:	b538      	push	{r3, r4, r5, lr}
	if (hi2s->Instance == SPI2)
 8000cf6:	6802      	ldr	r2, [r0, #0]
 8000cf8:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <HAL_I2S_RxHalfCpltCallback+0x44>)
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	d000      	beq.n	8000d00 <HAL_I2S_RxHalfCpltCallback+0xc>
		Conv_ADC(&ADC_BUFF.ADC8[4], &BUFF_CONV[1]); // RIGHT
		RAW_SAMPLES[0] = (float)BUFF_CONV[0];
		RAW_SAMPLES[1] = (float)BUFF_CONV[1];
		rxHalfCpltCounter++;
	}
}
 8000cfe:	bd38      	pop	{r3, r4, r5, pc}
		Conv_ADC(&ADC_BUFF.ADC8[0], &BUFF_CONV[0]); // LEFT
 8000d00:	4c0e      	ldr	r4, [pc, #56]	; (8000d3c <HAL_I2S_RxHalfCpltCallback+0x48>)
 8000d02:	4d0f      	ldr	r5, [pc, #60]	; (8000d40 <HAL_I2S_RxHalfCpltCallback+0x4c>)
 8000d04:	4621      	mov	r1, r4
 8000d06:	4628      	mov	r0, r5
 8000d08:	f7ff ffe2 	bl	8000cd0 <Conv_ADC>
		Conv_ADC(&ADC_BUFF.ADC8[4], &BUFF_CONV[1]); // RIGHT
 8000d0c:	1d21      	adds	r1, r4, #4
 8000d0e:	1d28      	adds	r0, r5, #4
 8000d10:	f7ff ffde 	bl	8000cd0 <Conv_ADC>
		RAW_SAMPLES[0] = (float)BUFF_CONV[0];
 8000d14:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <HAL_I2S_RxHalfCpltCallback+0x50>)
 8000d16:	edd4 7a00 	vldr	s15, [r4]
 8000d1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d1e:	edc3 7a00 	vstr	s15, [r3]
		RAW_SAMPLES[1] = (float)BUFF_CONV[1];
 8000d22:	edd4 7a01 	vldr	s15, [r4, #4]
 8000d26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d2a:	edc3 7a01 	vstr	s15, [r3, #4]
		rxHalfCpltCounter++;
 8000d2e:	4a06      	ldr	r2, [pc, #24]	; (8000d48 <HAL_I2S_RxHalfCpltCallback+0x54>)
 8000d30:	6813      	ldr	r3, [r2, #0]
 8000d32:	3301      	adds	r3, #1
 8000d34:	6013      	str	r3, [r2, #0]
}
 8000d36:	e7e2      	b.n	8000cfe <HAL_I2S_RxHalfCpltCallback+0xa>
 8000d38:	40003800 	.word	0x40003800
 8000d3c:	200027b0 	.word	0x200027b0
 8000d40:	20002e80 	.word	0x20002e80
 8000d44:	2000170c 	.word	0x2000170c
 8000d48:	200003b0 	.word	0x200003b0

08000d4c <HAL_I2S_RxCpltCallback>:

uint32_t rxCpltCounter = 0;
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000d4c:	b538      	push	{r3, r4, r5, lr}
	if (hi2s->Instance == SPI2)
 8000d4e:	6802      	ldr	r2, [r0, #0]
 8000d50:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <HAL_I2S_RxCpltCallback+0x44>)
 8000d52:	429a      	cmp	r2, r3
 8000d54:	d000      	beq.n	8000d58 <HAL_I2S_RxCpltCallback+0xc>
		Conv_ADC(&ADC_BUFF.ADC8[12], &BUFF_CONV[3]); // RIGHT
		RAW_SAMPLES[0] = (float)BUFF_CONV[2];
		RAW_SAMPLES[1] = (float)BUFF_CONV[3];
		rxCpltCounter++;
	}
}
 8000d56:	bd38      	pop	{r3, r4, r5, pc}
		Conv_ADC(&ADC_BUFF.ADC8[8], &BUFF_CONV[2]); // LEFT
 8000d58:	4c0e      	ldr	r4, [pc, #56]	; (8000d94 <HAL_I2S_RxCpltCallback+0x48>)
 8000d5a:	4d0f      	ldr	r5, [pc, #60]	; (8000d98 <HAL_I2S_RxCpltCallback+0x4c>)
 8000d5c:	4621      	mov	r1, r4
 8000d5e:	4628      	mov	r0, r5
 8000d60:	f7ff ffb6 	bl	8000cd0 <Conv_ADC>
		Conv_ADC(&ADC_BUFF.ADC8[12], &BUFF_CONV[3]); // RIGHT
 8000d64:	1d21      	adds	r1, r4, #4
 8000d66:	1d28      	adds	r0, r5, #4
 8000d68:	f7ff ffb2 	bl	8000cd0 <Conv_ADC>
		RAW_SAMPLES[0] = (float)BUFF_CONV[2];
 8000d6c:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <HAL_I2S_RxCpltCallback+0x50>)
 8000d6e:	edd4 7a00 	vldr	s15, [r4]
 8000d72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d76:	edc3 7a00 	vstr	s15, [r3]
		RAW_SAMPLES[1] = (float)BUFF_CONV[3];
 8000d7a:	edd4 7a01 	vldr	s15, [r4, #4]
 8000d7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d82:	edc3 7a01 	vstr	s15, [r3, #4]
		rxCpltCounter++;
 8000d86:	4a06      	ldr	r2, [pc, #24]	; (8000da0 <HAL_I2S_RxCpltCallback+0x54>)
 8000d88:	6813      	ldr	r3, [r2, #0]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	6013      	str	r3, [r2, #0]
}
 8000d8e:	e7e2      	b.n	8000d56 <HAL_I2S_RxCpltCallback+0xa>
 8000d90:	40003800 	.word	0x40003800
 8000d94:	200027b8 	.word	0x200027b8
 8000d98:	20002e88 	.word	0x20002e88
 8000d9c:	2000170c 	.word	0x2000170c
 8000da0:	200003ac 	.word	0x200003ac

08000da4 <HAL_I2S_TxCpltCallback>:
	}
}

uint32_t txCpltCounter = 0;
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000da4:	b538      	push	{r3, r4, r5, lr}
	if (hi2s->Instance == SPI3)
 8000da6:	6802      	ldr	r2, [r0, #0]
 8000da8:	4b10      	ldr	r3, [pc, #64]	; (8000dec <HAL_I2S_TxCpltCallback+0x48>)
 8000daa:	429a      	cmp	r2, r3
 8000dac:	d000      	beq.n	8000db0 <HAL_I2S_TxCpltCallback+0xc>
	{
		PROC_SAMPLES[1] = wave_gen('s', txCpltCounter, 440.0F) * 10000;
		DAC_BUFF.DAC16[__HAL_DMA_GET_COUNTER(hi2s->hdmatx)] = (int16_t)PROC_SAMPLES[1];
		txCpltCounter++;
	}
}
 8000dae:	bd38      	pop	{r3, r4, r5, pc}
 8000db0:	4604      	mov	r4, r0
		PROC_SAMPLES[1] = wave_gen('s', txCpltCounter, 440.0F) * 10000;
 8000db2:	4d0f      	ldr	r5, [pc, #60]	; (8000df0 <HAL_I2S_TxCpltCallback+0x4c>)
 8000db4:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8000df4 <HAL_I2S_TxCpltCallback+0x50>
 8000db8:	6829      	ldr	r1, [r5, #0]
 8000dba:	2073      	movs	r0, #115	; 0x73
 8000dbc:	f001 f89a 	bl	8001ef4 <wave_gen>
 8000dc0:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8000df8 <HAL_I2S_TxCpltCallback+0x54>
 8000dc4:	ee20 0a27 	vmul.f32	s0, s0, s15
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <HAL_I2S_TxCpltCallback+0x58>)
 8000dca:	ed83 0a01 	vstr	s0, [r3, #4]
		DAC_BUFF.DAC16[__HAL_DMA_GET_COUNTER(hi2s->hdmatx)] = (int16_t)PROC_SAMPLES[1];
 8000dce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	685a      	ldr	r2, [r3, #4]
 8000dd4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8000dd8:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <HAL_I2S_TxCpltCallback+0x5c>)
 8000dda:	ee10 1a10 	vmov	r1, s0
 8000dde:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		txCpltCounter++;
 8000de2:	682b      	ldr	r3, [r5, #0]
 8000de4:	3301      	adds	r3, #1
 8000de6:	602b      	str	r3, [r5, #0]
}
 8000de8:	e7e1      	b.n	8000dae <HAL_I2S_TxCpltCallback+0xa>
 8000dea:	bf00      	nop
 8000dec:	40003c00 	.word	0x40003c00
 8000df0:	200003b4 	.word	0x200003b4
 8000df4:	43dc0000 	.word	0x43dc0000
 8000df8:	461c4000 	.word	0x461c4000
 8000dfc:	20001714 	.word	0x20001714
 8000e00:	200027c0 	.word	0x200027c0

08000e04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e04:	b500      	push	{lr}
 8000e06:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e08:	2230      	movs	r2, #48	; 0x30
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	a808      	add	r0, sp, #32
 8000e0e:	f00b fa11 	bl	800c234 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e12:	2300      	movs	r3, #0
 8000e14:	9303      	str	r3, [sp, #12]
 8000e16:	9304      	str	r3, [sp, #16]
 8000e18:	9305      	str	r3, [sp, #20]
 8000e1a:	9306      	str	r3, [sp, #24]
 8000e1c:	9307      	str	r3, [sp, #28]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e1e:	9301      	str	r3, [sp, #4]
 8000e20:	4a21      	ldr	r2, [pc, #132]	; (8000ea8 <SystemClock_Config+0xa4>)
 8000e22:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000e24:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000e28:	6411      	str	r1, [r2, #64]	; 0x40
 8000e2a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000e2c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000e30:	9201      	str	r2, [sp, #4]
 8000e32:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e34:	9302      	str	r3, [sp, #8]
 8000e36:	4b1d      	ldr	r3, [pc, #116]	; (8000eac <SystemClock_Config+0xa8>)
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e46:	9302      	str	r3, [sp, #8]
 8000e48:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e52:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e54:	2302      	movs	r3, #2
 8000e56:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e58:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000e5c:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e5e:	2208      	movs	r2, #8
 8000e60:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000e62:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8000e66:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e68:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e6a:	2307      	movs	r3, #7
 8000e6c:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e6e:	a808      	add	r0, sp, #32
 8000e70:	f005 fe16 	bl	8006aa0 <HAL_RCC_OscConfig>
 8000e74:	b998      	cbnz	r0, 8000e9e <SystemClock_Config+0x9a>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e76:	230f      	movs	r3, #15
 8000e78:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000e82:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e86:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e8c:	9307      	str	r3, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e8e:	2105      	movs	r1, #5
 8000e90:	a803      	add	r0, sp, #12
 8000e92:	f006 f87d 	bl	8006f90 <HAL_RCC_ClockConfig>
 8000e96:	b920      	cbnz	r0, 8000ea2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
  }
}
 8000e98:	b015      	add	sp, #84	; 0x54
 8000e9a:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e9e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <SystemClock_Config+0x9c>
 8000ea2:	b672      	cpsid	i
 8000ea4:	e7fe      	b.n	8000ea4 <SystemClock_Config+0xa0>
 8000ea6:	bf00      	nop
 8000ea8:	40023800 	.word	0x40023800
 8000eac:	40007000 	.word	0x40007000

08000eb0 <PeriphCommonClock_Config>:
{
 8000eb0:	b500      	push	{lr}
 8000eb2:	b085      	sub	sp, #20
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	9303      	str	r3, [sp, #12]
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	9300      	str	r3, [sp, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 181;
 8000ebc:	23b5      	movs	r3, #181	; 0xb5
 8000ebe:	9301      	str	r3, [sp, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ec4:	4668      	mov	r0, sp
 8000ec6:	f006 fa4b 	bl	8007360 <HAL_RCCEx_PeriphCLKConfig>
 8000eca:	b910      	cbnz	r0, 8000ed2 <PeriphCommonClock_Config+0x22>
}
 8000ecc:	b005      	add	sp, #20
 8000ece:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ed2:	b672      	cpsid	i
	while (1)
 8000ed4:	e7fe      	b.n	8000ed4 <PeriphCommonClock_Config+0x24>
	...

08000ed8 <main>:
{
 8000ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000edc:	b0a3      	sub	sp, #140	; 0x8c
  HAL_Init();
 8000ede:	f001 fc4b 	bl	8002778 <HAL_Init>
  SystemClock_Config();
 8000ee2:	f7ff ff8f 	bl	8000e04 <SystemClock_Config>
  PeriphCommonClock_Config();
 8000ee6:	f7ff ffe3 	bl	8000eb0 <PeriphCommonClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eea:	2400      	movs	r4, #0
 8000eec:	9418      	str	r4, [sp, #96]	; 0x60
 8000eee:	9419      	str	r4, [sp, #100]	; 0x64
 8000ef0:	941a      	str	r4, [sp, #104]	; 0x68
 8000ef2:	941b      	str	r4, [sp, #108]	; 0x6c
 8000ef4:	941c      	str	r4, [sp, #112]	; 0x70
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ef6:	9413      	str	r4, [sp, #76]	; 0x4c
 8000ef8:	4db4      	ldr	r5, [pc, #720]	; (80011cc <main+0x2f4>)
 8000efa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000efc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f00:	632b      	str	r3, [r5, #48]	; 0x30
 8000f02:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f08:	9313      	str	r3, [sp, #76]	; 0x4c
 8000f0a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f0c:	9414      	str	r4, [sp, #80]	; 0x50
 8000f0e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000f10:	f043 0304 	orr.w	r3, r3, #4
 8000f14:	632b      	str	r3, [r5, #48]	; 0x30
 8000f16:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000f18:	f003 0304 	and.w	r3, r3, #4
 8000f1c:	9314      	str	r3, [sp, #80]	; 0x50
 8000f1e:	9b14      	ldr	r3, [sp, #80]	; 0x50
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f20:	9415      	str	r4, [sp, #84]	; 0x54
 8000f22:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	632b      	str	r3, [r5, #48]	; 0x30
 8000f2a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000f2c:	f003 0301 	and.w	r3, r3, #1
 8000f30:	9315      	str	r3, [sp, #84]	; 0x54
 8000f32:	9b15      	ldr	r3, [sp, #84]	; 0x54
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f34:	9416      	str	r4, [sp, #88]	; 0x58
 8000f36:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000f38:	f043 0302 	orr.w	r3, r3, #2
 8000f3c:	632b      	str	r3, [r5, #48]	; 0x30
 8000f3e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000f40:	f003 0302 	and.w	r3, r3, #2
 8000f44:	9316      	str	r3, [sp, #88]	; 0x58
 8000f46:	9b16      	ldr	r3, [sp, #88]	; 0x58
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f48:	9417      	str	r4, [sp, #92]	; 0x5c
 8000f4a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000f4c:	f043 0308 	orr.w	r3, r3, #8
 8000f50:	632b      	str	r3, [r5, #48]	; 0x30
 8000f52:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000f54:	f003 0308 	and.w	r3, r3, #8
 8000f58:	9317      	str	r3, [sp, #92]	; 0x5c
 8000f5a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  HAL_GPIO_WritePin(OtgPower_GPIO_Port, OtgPower_Pin, GPIO_PIN_RESET);
 8000f5c:	f8df 92bc 	ldr.w	r9, [pc, #700]	; 800121c <main+0x344>
 8000f60:	4622      	mov	r2, r4
 8000f62:	2101      	movs	r1, #1
 8000f64:	4648      	mov	r0, r9
 8000f66:	f002 fad3 	bl	8003510 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, EPD_RST_Pin|EPD_DC_Pin|EPD_CS_Pin, GPIO_PIN_RESET);
 8000f6a:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 8001220 <main+0x348>
 8000f6e:	4622      	mov	r2, r4
 8000f70:	2146      	movs	r1, #70	; 0x46
 8000f72:	4640      	mov	r0, r8
 8000f74:	f002 facc 	bl	8003510 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, Led1_Pin|Led2_Pin|Led3_Pin|Led4_Pin, GPIO_PIN_RESET);
 8000f78:	4f95      	ldr	r7, [pc, #596]	; (80011d0 <main+0x2f8>)
 8000f7a:	4622      	mov	r2, r4
 8000f7c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000f80:	4638      	mov	r0, r7
 8000f82:	f002 fac5 	bl	8003510 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(AudioPower_GPIO_Port, AudioPower_Pin, GPIO_PIN_SET);
 8000f86:	2201      	movs	r2, #1
 8000f88:	2110      	movs	r1, #16
 8000f8a:	4638      	mov	r0, r7
 8000f8c:	f002 fac0 	bl	8003510 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = OtgPower_Pin;
 8000f90:	2601      	movs	r6, #1
 8000f92:	9618      	str	r6, [sp, #96]	; 0x60
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f94:	9619      	str	r6, [sp, #100]	; 0x64
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	941a      	str	r4, [sp, #104]	; 0x68
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f98:	941b      	str	r4, [sp, #108]	; 0x6c
  HAL_GPIO_Init(OtgPower_GPIO_Port, &GPIO_InitStruct);
 8000f9a:	a918      	add	r1, sp, #96	; 0x60
 8000f9c:	4648      	mov	r0, r9
 8000f9e:	f002 f903 	bl	80031a8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = EncB_Pin|EncA_Pin;
 8000fa2:	230c      	movs	r3, #12
 8000fa4:	9318      	str	r3, [sp, #96]	; 0x60
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fa6:	9419      	str	r4, [sp, #100]	; 0x64
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	941a      	str	r4, [sp, #104]	; 0x68
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000faa:	a918      	add	r1, sp, #96	; 0x60
 8000fac:	4648      	mov	r0, r9
 8000fae:	f002 f8fb 	bl	80031a8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Btn0_Pin|EPD_BUSY_Pin;
 8000fb2:	2309      	movs	r3, #9
 8000fb4:	9318      	str	r3, [sp, #96]	; 0x60
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb6:	9419      	str	r4, [sp, #100]	; 0x64
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	941a      	str	r4, [sp, #104]	; 0x68
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fba:	a918      	add	r1, sp, #96	; 0x60
 8000fbc:	4640      	mov	r0, r8
 8000fbe:	f002 f8f3 	bl	80031a8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = EPD_RST_Pin|EPD_DC_Pin|EPD_CS_Pin;
 8000fc2:	2346      	movs	r3, #70	; 0x46
 8000fc4:	9318      	str	r3, [sp, #96]	; 0x60
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc6:	9619      	str	r6, [sp, #100]	; 0x64
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	941a      	str	r4, [sp, #104]	; 0x68
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fca:	941b      	str	r4, [sp, #108]	; 0x6c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fcc:	a918      	add	r1, sp, #96	; 0x60
 8000fce:	4640      	mov	r0, r8
 8000fd0:	f002 f8ea 	bl	80031a8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Btn3_Pin|Btn2_Pin;
 8000fd4:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8000fd8:	9318      	str	r3, [sp, #96]	; 0x60
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fda:	9419      	str	r4, [sp, #100]	; 0x64
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fdc:	961a      	str	r6, [sp, #104]	; 0x68
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fde:	a918      	add	r1, sp, #96	; 0x60
 8000fe0:	487c      	ldr	r0, [pc, #496]	; (80011d4 <main+0x2fc>)
 8000fe2:	f002 f8e1 	bl	80031a8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Btn1_Pin;
 8000fe6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fea:	9318      	str	r3, [sp, #96]	; 0x60
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fec:	9419      	str	r4, [sp, #100]	; 0x64
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fee:	961a      	str	r6, [sp, #104]	; 0x68
  HAL_GPIO_Init(Btn1_GPIO_Port, &GPIO_InitStruct);
 8000ff0:	a918      	add	r1, sp, #96	; 0x60
 8000ff2:	4638      	mov	r0, r7
 8000ff4:	f002 f8d8 	bl	80031a8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Led1_Pin|Led2_Pin|Led3_Pin|Led4_Pin
 8000ff8:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000ffc:	9318      	str	r3, [sp, #96]	; 0x60
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffe:	9619      	str	r6, [sp, #100]	; 0x64
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	941a      	str	r4, [sp, #104]	; 0x68
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001002:	941b      	str	r4, [sp, #108]	; 0x6c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001004:	a918      	add	r1, sp, #96	; 0x60
 8001006:	4638      	mov	r0, r7
 8001008:	f002 f8ce 	bl	80031a8 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800100c:	9418      	str	r4, [sp, #96]	; 0x60
 800100e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001010:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001014:	632b      	str	r3, [r5, #48]	; 0x30
 8001016:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001018:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800101c:	9318      	str	r3, [sp, #96]	; 0x60
 800101e:	9b18      	ldr	r3, [sp, #96]	; 0x60
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001020:	4622      	mov	r2, r4
 8001022:	4621      	mov	r1, r4
 8001024:	200e      	movs	r0, #14
 8001026:	f001 fd18 	bl	8002a5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800102a:	200e      	movs	r0, #14
 800102c:	f001 fd31 	bl	8002a92 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001030:	4622      	mov	r2, r4
 8001032:	4621      	mov	r1, r4
 8001034:	2010      	movs	r0, #16
 8001036:	f001 fd10 	bl	8002a5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800103a:	2010      	movs	r0, #16
 800103c:	f001 fd29 	bl	8002a92 <HAL_NVIC_EnableIRQ>
  hi2c1.Instance = I2C1;
 8001040:	4865      	ldr	r0, [pc, #404]	; (80011d8 <main+0x300>)
 8001042:	4b66      	ldr	r3, [pc, #408]	; (80011dc <main+0x304>)
 8001044:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001046:	4b66      	ldr	r3, [pc, #408]	; (80011e0 <main+0x308>)
 8001048:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800104a:	6084      	str	r4, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800104c:	60c4      	str	r4, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800104e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001052:	6103      	str	r3, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001054:	6144      	str	r4, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001056:	6184      	str	r4, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001058:	61c4      	str	r4, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800105a:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800105c:	f003 ffe2 	bl	8005024 <HAL_I2C_Init>
 8001060:	2800      	cmp	r0, #0
 8001062:	f040 80df 	bne.w	8001224 <main+0x34c>
  hi2s2.Instance = SPI2;
 8001066:	485f      	ldr	r0, [pc, #380]	; (80011e4 <main+0x30c>)
 8001068:	4b5f      	ldr	r3, [pc, #380]	; (80011e8 <main+0x310>)
 800106a:	6003      	str	r3, [r0, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 800106c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001070:	6043      	str	r3, [r0, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001072:	2300      	movs	r3, #0
 8001074:	6083      	str	r3, [r0, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8001076:	2203      	movs	r2, #3
 8001078:	60c2      	str	r2, [r0, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800107a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800107e:	6102      	str	r2, [r0, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8001080:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001084:	6142      	str	r2, [r0, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001086:	6183      	str	r3, [r0, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001088:	61c3      	str	r3, [r0, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800108a:	6203      	str	r3, [r0, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800108c:	f004 ff60 	bl	8005f50 <HAL_I2S_Init>
 8001090:	2800      	cmp	r0, #0
 8001092:	f040 80c9 	bne.w	8001228 <main+0x350>
  hi2s3.Instance = SPI3;
 8001096:	4855      	ldr	r0, [pc, #340]	; (80011ec <main+0x314>)
 8001098:	4b55      	ldr	r3, [pc, #340]	; (80011f0 <main+0x318>)
 800109a:	6003      	str	r3, [r0, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800109c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010a0:	6042      	str	r2, [r0, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80010a2:	2300      	movs	r3, #0
 80010a4:	6083      	str	r3, [r0, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80010a6:	60c3      	str	r3, [r0, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80010a8:	6102      	str	r2, [r0, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 80010aa:	f64a 4244 	movw	r2, #44100	; 0xac44
 80010ae:	6142      	str	r2, [r0, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80010b0:	6183      	str	r3, [r0, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80010b2:	61c3      	str	r3, [r0, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80010b4:	6203      	str	r3, [r0, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80010b6:	f004 ff4b 	bl	8005f50 <HAL_I2S_Init>
 80010ba:	2800      	cmp	r0, #0
 80010bc:	f040 80b6 	bne.w	800122c <main+0x354>
  MX_USB_HOST_Init();
 80010c0:	f00a fd38 	bl	800bb34 <MX_USB_HOST_Init>
  MX_FATFS_Init();
 80010c4:	f007 fcd4 	bl	8008a70 <MX_FATFS_Init>
  hspi1.Instance = SPI1;
 80010c8:	484a      	ldr	r0, [pc, #296]	; (80011f4 <main+0x31c>)
 80010ca:	4b4b      	ldr	r3, [pc, #300]	; (80011f8 <main+0x320>)
 80010cc:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010ce:	f44f 7382 	mov.w	r3, #260	; 0x104
 80010d2:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80010d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010d8:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010da:	2300      	movs	r3, #0
 80010dc:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010de:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010e0:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010e6:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80010e8:	2228      	movs	r2, #40	; 0x28
 80010ea:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010ec:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010ee:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010f0:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010f2:	230a      	movs	r3, #10
 80010f4:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010f6:	f006 fa73 	bl	80075e0 <HAL_SPI_Init>
 80010fa:	2800      	cmp	r0, #0
 80010fc:	f040 8098 	bne.w	8001230 <main+0x358>
	HAL_GPIO_WritePin(Led2_GPIO_Port, Led2_Pin, GPIO_PIN_SET);
 8001100:	4f33      	ldr	r7, [pc, #204]	; (80011d0 <main+0x2f8>)
 8001102:	2201      	movs	r2, #1
 8001104:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001108:	4638      	mov	r0, r7
 800110a:	f002 fa01 	bl	8003510 <HAL_GPIO_WritePin>
	pedalboard.active_pedals = 0;
 800110e:	483b      	ldr	r0, [pc, #236]	; (80011fc <main+0x324>)
 8001110:	2400      	movs	r4, #0
 8001112:	7004      	strb	r4, [r0, #0]
	pedalboard_append(&pedalboard, LPF);
 8001114:	2105      	movs	r1, #5
 8001116:	f000 ff5d 	bl	8001fd4 <pedalboard_append>
	CS43_Init(hi2c1, MODE_I2S);
 800111a:	4d2f      	ldr	r5, [pc, #188]	; (80011d8 <main+0x300>)
 800111c:	9411      	str	r4, [sp, #68]	; 0x44
 800111e:	2244      	movs	r2, #68	; 0x44
 8001120:	f105 0110 	add.w	r1, r5, #16
 8001124:	4668      	mov	r0, sp
 8001126:	f00b f877 	bl	800c218 <memcpy>
 800112a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800112e:	f7ff fa07 	bl	8000540 <CS43_Init>
	CS43_SetVolume(0);
 8001132:	4620      	mov	r0, r4
 8001134:	f7ff fb74 	bl	8000820 <CS43_SetVolume>
	CS43_Enable_RightLeft(CS43_RIGHT_LEFT);
 8001138:	2003      	movs	r0, #3
 800113a:	f7ff fb15 	bl	8000768 <CS43_Enable_RightLeft>
	CS43_Start();
 800113e:	f7ff fbb1 	bl	80008a4 <CS43_Start>
	HAL_I2S_Receive_DMA(&hi2s2, &ADC_BUFF.ADC16[0], 4);
 8001142:	2204      	movs	r2, #4
 8001144:	492e      	ldr	r1, [pc, #184]	; (8001200 <main+0x328>)
 8001146:	4827      	ldr	r0, [pc, #156]	; (80011e4 <main+0x30c>)
 8001148:	f005 f842 	bl	80061d0 <HAL_I2S_Receive_DMA>
	EPD_Init();
 800114c:	f7ff fd2e 	bl	8000bac <EPD_Init>
	EPD_Clear();
 8001150:	f7ff fd7a 	bl	8000c48 <EPD_Clear>
	draw_clean(image);
 8001154:	4e2b      	ldr	r6, [pc, #172]	; (8001204 <main+0x32c>)
 8001156:	4630      	mov	r0, r6
 8001158:	f000 fa26 	bl	80015a8 <draw_clean>
	draw_rectangle(image, 36, 56, 88, 20);
 800115c:	f04f 0814 	mov.w	r8, #20
 8001160:	f8cd 8000 	str.w	r8, [sp]
 8001164:	2358      	movs	r3, #88	; 0x58
 8001166:	2238      	movs	r2, #56	; 0x38
 8001168:	2124      	movs	r1, #36	; 0x24
 800116a:	4630      	mov	r0, r6
 800116c:	f000 f92b 	bl	80013c6 <draw_rectangle>
	sprintf(row, "g33ky toad");
 8001170:	4a25      	ldr	r2, [pc, #148]	; (8001208 <main+0x330>)
 8001172:	ab1d      	add	r3, sp, #116	; 0x74
 8001174:	ca07      	ldmia	r2, {r0, r1, r2}
 8001176:	c303      	stmia	r3!, {r0, r1}
 8001178:	f823 2b02 	strh.w	r2, [r3], #2
 800117c:	0c12      	lsrs	r2, r2, #16
 800117e:	701a      	strb	r2, [r3, #0]
	draw_text(image, row, 40, 60);
 8001180:	233c      	movs	r3, #60	; 0x3c
 8001182:	2228      	movs	r2, #40	; 0x28
 8001184:	a91d      	add	r1, sp, #116	; 0x74
 8001186:	4630      	mov	r0, r6
 8001188:	f000 f9df 	bl	800154a <draw_text>
	sprintf(row, "digital pedal");
 800118c:	4b1f      	ldr	r3, [pc, #124]	; (800120c <main+0x334>)
 800118e:	ad1d      	add	r5, sp, #116	; 0x74
 8001190:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001192:	c507      	stmia	r5!, {r0, r1, r2}
 8001194:	802b      	strh	r3, [r5, #0]
	draw_text(image, row, 20, 90);
 8001196:	235a      	movs	r3, #90	; 0x5a
 8001198:	4642      	mov	r2, r8
 800119a:	a91d      	add	r1, sp, #116	; 0x74
 800119c:	4630      	mov	r0, r6
 800119e:	f000 f9d4 	bl	800154a <draw_text>
	EPD_Display(image);
 80011a2:	4630      	mov	r0, r6
 80011a4:	f7ff fd69 	bl	8000c7a <EPD_Display>
	EPD_Sleep();
 80011a8:	f7ff fd85 	bl	8000cb6 <EPD_Sleep>
	encoderA.current = 0;
 80011ac:	4b18      	ldr	r3, [pc, #96]	; (8001210 <main+0x338>)
 80011ae:	805c      	strh	r4, [r3, #2]
	encoderB.current = 0;
 80011b0:	4b18      	ldr	r3, [pc, #96]	; (8001214 <main+0x33c>)
 80011b2:	805c      	strh	r4, [r3, #2]
	HAL_GPIO_WritePin(Led2_GPIO_Port, Led2_Pin, GPIO_PIN_RESET);
 80011b4:	4622      	mov	r2, r4
 80011b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011ba:	4638      	mov	r0, r7
 80011bc:	f002 f9a8 	bl	8003510 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OtgPower_GPIO_Port, OtgPower_Pin, GPIO_PIN_RESET);
 80011c0:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800121c <main+0x344>
		encoderA.last = encoderA.current;
 80011c4:	f8df 8048 	ldr.w	r8, [pc, #72]	; 8001210 <main+0x338>
		encoderA.current = (encoderA.last * alpha / 100) + (temp * (100 - alpha) / 100);
 80011c8:	4f13      	ldr	r7, [pc, #76]	; (8001218 <main+0x340>)
 80011ca:	e03e      	b.n	800124a <main+0x372>
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40020c00 	.word	0x40020c00
 80011d4:	40020400 	.word	0x40020400
 80011d8:	200003d4 	.word	0x200003d4
 80011dc:	40005400 	.word	0x40005400
 80011e0:	000186a0 	.word	0x000186a0
 80011e4:	20002ea0 	.word	0x20002ea0
 80011e8:	40003800 	.word	0x40003800
 80011ec:	20002ee8 	.word	0x20002ee8
 80011f0:	40003c00 	.word	0x40003c00
 80011f4:	20002e24 	.word	0x20002e24
 80011f8:	40013000 	.word	0x40013000
 80011fc:	200027e0 	.word	0x200027e0
 8001200:	20002e80 	.word	0x20002e80
 8001204:	2000048c 	.word	0x2000048c
 8001208:	0800c700 	.word	0x0800c700
 800120c:	0800c70c 	.word	0x0800c70c
 8001210:	20002e7c 	.word	0x20002e7c
 8001214:	20000488 	.word	0x20000488
 8001218:	51eb851f 	.word	0x51eb851f
 800121c:	40020800 	.word	0x40020800
 8001220:	40020000 	.word	0x40020000
 8001224:	b672      	cpsid	i
	while (1)
 8001226:	e7fe      	b.n	8001226 <main+0x34e>
 8001228:	b672      	cpsid	i
 800122a:	e7fe      	b.n	800122a <main+0x352>
 800122c:	b672      	cpsid	i
 800122e:	e7fe      	b.n	800122e <main+0x356>
 8001230:	b672      	cpsid	i
 8001232:	e7fe      	b.n	8001232 <main+0x35a>
			if (encoderB.current > thr) {
 8001234:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
				encoderCounter++;
 8001238:	4b32      	ldr	r3, [pc, #200]	; (8001304 <main+0x42c>)
 800123a:	881b      	ldrh	r3, [r3, #0]
 800123c:	bf8c      	ite	hi
 800123e:	3301      	addhi	r3, #1
				encoderCounter--;
 8001240:	f103 33ff 	addls.w	r3, r3, #4294967295	; 0xffffffff
 8001244:	b21b      	sxth	r3, r3
 8001246:	4a2f      	ldr	r2, [pc, #188]	; (8001304 <main+0x42c>)
 8001248:	8013      	strh	r3, [r2, #0]
		encoderB.last = encoderB.current;
 800124a:	4e2f      	ldr	r6, [pc, #188]	; (8001308 <main+0x430>)
		HAL_GPIO_WritePin(Led2_GPIO_Port, Led2_Pin, sA);
 800124c:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 800130c <main+0x434>
		temp = sA == GPIO_PIN_SET ? 1023 : 0;
 8001250:	f240 3aff 	movw	sl, #1023	; 0x3ff
    MX_USB_HOST_Process();
 8001254:	f00a fc94 	bl	800bb80 <MX_USB_HOST_Process>
		HAL_GPIO_WritePin(OtgPower_GPIO_Port, OtgPower_Pin, GPIO_PIN_RESET);
 8001258:	2200      	movs	r2, #0
 800125a:	2101      	movs	r1, #1
 800125c:	4648      	mov	r0, r9
 800125e:	f002 f957 	bl	8003510 <HAL_GPIO_WritePin>
		encoderA.last = encoderA.current;
 8001262:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 8001266:	f8a8 3000 	strh.w	r3, [r8]
		encoderB.last = encoderB.current;
 800126a:	8873      	ldrh	r3, [r6, #2]
 800126c:	8033      	strh	r3, [r6, #0]
		sA = HAL_GPIO_ReadPin(EncA_GPIO_Port, EncA_Pin);
 800126e:	2108      	movs	r1, #8
 8001270:	4648      	mov	r0, r9
 8001272:	f002 f935 	bl	80034e0 <HAL_GPIO_ReadPin>
 8001276:	4605      	mov	r5, r0
		sB = HAL_GPIO_ReadPin(EncB_GPIO_Port, EncB_Pin);
 8001278:	2104      	movs	r1, #4
 800127a:	4648      	mov	r0, r9
 800127c:	f002 f930 	bl	80034e0 <HAL_GPIO_ReadPin>
 8001280:	4604      	mov	r4, r0
		HAL_GPIO_WritePin(Led2_GPIO_Port, Led2_Pin, sA);
 8001282:	462a      	mov	r2, r5
 8001284:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001288:	4658      	mov	r0, fp
 800128a:	f002 f941 	bl	8003510 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led3_GPIO_Port, Led3_Pin, sB);
 800128e:	4622      	mov	r2, r4
 8001290:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001294:	4658      	mov	r0, fp
 8001296:	f002 f93b 	bl	8003510 <HAL_GPIO_WritePin>
		temp = sA == GPIO_PIN_SET ? 1023 : 0;
 800129a:	2d01      	cmp	r5, #1
 800129c:	bf0c      	ite	eq
 800129e:	4650      	moveq	r0, sl
 80012a0:	2000      	movne	r0, #0
		encoderA.current = (encoderA.last * alpha / 100) + (temp * (100 - alpha) / 100);
 80012a2:	f8b8 1000 	ldrh.w	r1, [r8]
 80012a6:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 80012aa:	0052      	lsls	r2, r2, #1
 80012ac:	fb87 3202 	smull	r3, r2, r7, r2
 80012b0:	235a      	movs	r3, #90	; 0x5a
 80012b2:	fb03 f300 	mul.w	r3, r3, r0
 80012b6:	fb87 0303 	smull	r0, r3, r7, r3
 80012ba:	115b      	asrs	r3, r3, #5
 80012bc:	eb03 1352 	add.w	r3, r3, r2, lsr #5
 80012c0:	f8a8 3002 	strh.w	r3, [r8, #2]
		temp = sB == GPIO_PIN_SET ? 1023 : 0;
 80012c4:	2c01      	cmp	r4, #1
 80012c6:	bf0c      	ite	eq
 80012c8:	4654      	moveq	r4, sl
 80012ca:	2400      	movne	r4, #0
		encoderB.current = (encoderB.last * alpha / 100) + (temp * (100 - alpha) / 100);
 80012cc:	8830      	ldrh	r0, [r6, #0]
 80012ce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80012d2:	0040      	lsls	r0, r0, #1
 80012d4:	fb87 2000 	smull	r2, r0, r7, r0
 80012d8:	225a      	movs	r2, #90	; 0x5a
 80012da:	fb02 f204 	mul.w	r2, r2, r4
 80012de:	fb87 4202 	smull	r4, r2, r7, r2
 80012e2:	1152      	asrs	r2, r2, #5
 80012e4:	eb02 1250 	add.w	r2, r2, r0, lsr #5
 80012e8:	8072      	strh	r2, [r6, #2]
		if (encoderA.last < thr != encoderA.current < thr) {
 80012ea:	f240 10f3 	movw	r0, #499	; 0x1f3
 80012ee:	4281      	cmp	r1, r0
 80012f0:	bf8c      	ite	hi
 80012f2:	2100      	movhi	r1, #0
 80012f4:	2101      	movls	r1, #1
 80012f6:	4283      	cmp	r3, r0
 80012f8:	bf8c      	ite	hi
 80012fa:	2300      	movhi	r3, #0
 80012fc:	2301      	movls	r3, #1
 80012fe:	4299      	cmp	r1, r3
 8001300:	d0a8      	beq.n	8001254 <main+0x37c>
 8001302:	e797      	b.n	8001234 <main+0x35c>
 8001304:	200003a8 	.word	0x200003a8
 8001308:	20000488 	.word	0x20000488
 800130c:	40020c00 	.word	0x40020c00

08001310 <Error_Handler>:
 8001310:	b672      	cpsid	i
	while (1)
 8001312:	e7fe      	b.n	8001312 <Error_Handler+0x2>

08001314 <read_font_pixel>:
#define CANVAS_WIDTH 128
#define CANVAS_HEIGHT 296

uint8_t font[516] = { 0x0, 0x18, 0x3C, 0x66, 0x66, 0x66, 0x7E, 0x66, 0x66, 0x66, 0x0, 0x0, 0x0, 0x7C, 0x66, 0x66, 0x66, 0x7C, 0x66, 0x66, 0x66, 0x7C, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x60, 0x60, 0x60, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x78, 0x6C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6C, 0x78, 0x0, 0x0, 0x0, 0x7E, 0x60, 0x60, 0x60, 0x78, 0x60, 0x60, 0x60, 0x7E, 0x0, 0x0, 0x0, 0x7E, 0x60, 0x60, 0x60, 0x78, 0x60, 0x60, 0x60, 0x60, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x60, 0x60, 0x6E, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x66, 0x66, 0x66, 0x66, 0x7E, 0x66, 0x66, 0x66, 0x66, 0x0, 0x0, 0x0, 0x3C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x0, 0x0, 0x0, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x66, 0x66, 0x6C, 0x6C, 0x78, 0x6C, 0x6C, 0x66, 0x66, 0x0, 0x0, 0x0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x7E, 0x0, 0x0, 0x0, 0x63, 0x63, 0x77, 0x7F, 0x6B, 0x6B, 0x63, 0x63, 0x63, 0x0, 0x0, 0x0, 0x63, 0x63, 0x73, 0x7B, 0x6F, 0x67, 0x63, 0x63, 0x63, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x7C, 0x66, 0x66, 0x66, 0x7C, 0x60, 0x60, 0x60, 0x60, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0xC, 0x6, 0x0, 0x7C, 0x66, 0x66, 0x66, 0x7C, 0x6C, 0x66, 0x66, 0x64, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x60, 0x30, 0x18, 0xC, 0x6, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x7E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x0, 0x0, 0x0, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x0, 0x0, 0x0, 0x63, 0x63, 0x63, 0x63, 0x6B, 0x6B, 0x36, 0x36, 0x36, 0x0, 0x0, 0x0, 0x66, 0x66, 0x34, 0x18, 0x18, 0x2C, 0x66, 0x66, 0x66, 0x0, 0x0, 0x0, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x18, 0x18, 0x18, 0x0, 0x0, 0x0, 0x7E, 0x6, 0x6, 0xC, 0x18, 0x30, 0x60, 0x60, 0x7E, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x6E, 0x6E, 0x66, 0x76, 0x76, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x6, 0xE, 0x3E, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x6, 0xC, 0x18, 0x30, 0x60, 0x7E, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x6, 0x1C, 0x6, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x30, 0x30, 0x36, 0x36, 0x36, 0x66, 0x7F, 0x6, 0x6, 0x0, 0x0, 0x0, 0x7E, 0x60, 0x60, 0x60, 0x7C, 0x6, 0x6, 0xC, 0x78, 0x0, 0x0, 0x0, 0x1C, 0x38, 0x30, 0x7C, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x7E, 0x6, 0xC, 0xC, 0x18, 0x18, 0x30, 0x30, 0x30, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x76, 0x3C, 0x6E, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x66, 0x66, 0x3E, 0xC, 0x1C, 0x38, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0x38, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0x38, 0x18, 0x30, 0x0, 0x0, 0x0, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7E, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0xC, 0x18, 0x30, 0x60, 0x30, 0x18, 0xC, 0x6, 0x0, 0x0, 0x0, 0x60, 0x30, 0x18, 0xC, 0x6, 0xC, 0x18, 0x30, 0x60, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};

uint8_t read_font_pixel(uint8_t *image, uint16_t x, uint16_t y) {
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	460b      	mov	r3, r1
 800131e:	807b      	strh	r3, [r7, #2]
 8001320:	4613      	mov	r3, r2
 8001322:	803b      	strh	r3, [r7, #0]
	uint16_t i = (x +  y * FONT_WIDTH) / 8;
 8001324:	887a      	ldrh	r2, [r7, #2]
 8001326:	883b      	ldrh	r3, [r7, #0]
 8001328:	00db      	lsls	r3, r3, #3
 800132a:	4413      	add	r3, r2
 800132c:	2b00      	cmp	r3, #0
 800132e:	da00      	bge.n	8001332 <read_font_pixel+0x1e>
 8001330:	3307      	adds	r3, #7
 8001332:	10db      	asrs	r3, r3, #3
 8001334:	81fb      	strh	r3, [r7, #14]
	uint8_t pixel_group = image[i];
 8001336:	89fb      	ldrh	r3, [r7, #14]
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	4413      	add	r3, r2
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	737b      	strb	r3, [r7, #13]
	return ((pixel_group >> (7 - x % 8)) & 0x01);
 8001340:	7b7a      	ldrb	r2, [r7, #13]
 8001342:	887b      	ldrh	r3, [r7, #2]
 8001344:	43db      	mvns	r3, r3
 8001346:	f003 0307 	and.w	r3, r3, #7
 800134a:	fa42 f303 	asr.w	r3, r2, r3
 800134e:	b2db      	uxtb	r3, r3
 8001350:	f003 0301 	and.w	r3, r3, #1
 8001354:	b2db      	uxtb	r3, r3
}
 8001356:	4618      	mov	r0, r3
 8001358:	3714      	adds	r7, #20
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr

08001362 <toggle_single_pixel>:

void toggle_single_pixel(uint8_t *image, uint16_t x, uint16_t y) {
 8001362:	b480      	push	{r7}
 8001364:	b085      	sub	sp, #20
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
 800136a:	460b      	mov	r3, r1
 800136c:	807b      	strh	r3, [r7, #2]
 800136e:	4613      	mov	r3, r2
 8001370:	803b      	strh	r3, [r7, #0]
	uint16_t i = (x +  y * CANVAS_WIDTH) / 8;
 8001372:	887a      	ldrh	r2, [r7, #2]
 8001374:	883b      	ldrh	r3, [r7, #0]
 8001376:	01db      	lsls	r3, r3, #7
 8001378:	4413      	add	r3, r2
 800137a:	2b00      	cmp	r3, #0
 800137c:	da00      	bge.n	8001380 <toggle_single_pixel+0x1e>
 800137e:	3307      	adds	r3, #7
 8001380:	10db      	asrs	r3, r3, #3
 8001382:	81fb      	strh	r3, [r7, #14]
	if (x < CANVAS_WIDTH && y < CANVAS_HEIGHT) image[i] ^= (0x01 << (7 - x % 8));
 8001384:	887b      	ldrh	r3, [r7, #2]
 8001386:	2b7f      	cmp	r3, #127	; 0x7f
 8001388:	d817      	bhi.n	80013ba <toggle_single_pixel+0x58>
 800138a:	883b      	ldrh	r3, [r7, #0]
 800138c:	f5b3 7f94 	cmp.w	r3, #296	; 0x128
 8001390:	d213      	bcs.n	80013ba <toggle_single_pixel+0x58>
 8001392:	89fb      	ldrh	r3, [r7, #14]
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	4413      	add	r3, r2
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	b25a      	sxtb	r2, r3
 800139c:	887b      	ldrh	r3, [r7, #2]
 800139e:	43db      	mvns	r3, r3
 80013a0:	f003 0307 	and.w	r3, r3, #7
 80013a4:	2101      	movs	r1, #1
 80013a6:	fa01 f303 	lsl.w	r3, r1, r3
 80013aa:	b25b      	sxtb	r3, r3
 80013ac:	4053      	eors	r3, r2
 80013ae:	b259      	sxtb	r1, r3
 80013b0:	89fb      	ldrh	r3, [r7, #14]
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	4413      	add	r3, r2
 80013b6:	b2ca      	uxtb	r2, r1
 80013b8:	701a      	strb	r2, [r3, #0]
}
 80013ba:	bf00      	nop
 80013bc:	3714      	adds	r7, #20
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <draw_rectangle>:

void draw_rectangle(uint8_t *image, uint16_t x, uint16_t y, uint16_t w, uint16_t h) {
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b086      	sub	sp, #24
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	60f8      	str	r0, [r7, #12]
 80013ce:	4608      	mov	r0, r1
 80013d0:	4611      	mov	r1, r2
 80013d2:	461a      	mov	r2, r3
 80013d4:	4603      	mov	r3, r0
 80013d6:	817b      	strh	r3, [r7, #10]
 80013d8:	460b      	mov	r3, r1
 80013da:	813b      	strh	r3, [r7, #8]
 80013dc:	4613      	mov	r3, r2
 80013de:	80fb      	strh	r3, [r7, #6]
	for (uint16_t i = 0; i < h; i++) {
 80013e0:	2300      	movs	r3, #0
 80013e2:	82fb      	strh	r3, [r7, #22]
 80013e4:	e018      	b.n	8001418 <draw_rectangle+0x52>
		for (uint16_t j = 0; j < w; j++) {
 80013e6:	2300      	movs	r3, #0
 80013e8:	82bb      	strh	r3, [r7, #20]
 80013ea:	e00e      	b.n	800140a <draw_rectangle+0x44>
			toggle_single_pixel(image, x + j, y + i);
 80013ec:	897a      	ldrh	r2, [r7, #10]
 80013ee:	8abb      	ldrh	r3, [r7, #20]
 80013f0:	4413      	add	r3, r2
 80013f2:	b299      	uxth	r1, r3
 80013f4:	893a      	ldrh	r2, [r7, #8]
 80013f6:	8afb      	ldrh	r3, [r7, #22]
 80013f8:	4413      	add	r3, r2
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	461a      	mov	r2, r3
 80013fe:	68f8      	ldr	r0, [r7, #12]
 8001400:	f7ff ffaf 	bl	8001362 <toggle_single_pixel>
		for (uint16_t j = 0; j < w; j++) {
 8001404:	8abb      	ldrh	r3, [r7, #20]
 8001406:	3301      	adds	r3, #1
 8001408:	82bb      	strh	r3, [r7, #20]
 800140a:	8aba      	ldrh	r2, [r7, #20]
 800140c:	88fb      	ldrh	r3, [r7, #6]
 800140e:	429a      	cmp	r2, r3
 8001410:	d3ec      	bcc.n	80013ec <draw_rectangle+0x26>
	for (uint16_t i = 0; i < h; i++) {
 8001412:	8afb      	ldrh	r3, [r7, #22]
 8001414:	3301      	adds	r3, #1
 8001416:	82fb      	strh	r3, [r7, #22]
 8001418:	8afa      	ldrh	r2, [r7, #22]
 800141a:	8c3b      	ldrh	r3, [r7, #32]
 800141c:	429a      	cmp	r2, r3
 800141e:	d3e2      	bcc.n	80013e6 <draw_rectangle+0x20>
		}
	}
}
 8001420:	bf00      	nop
 8001422:	bf00      	nop
 8001424:	3718      	adds	r7, #24
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
	...

0800142c <draw_char>:

void draw_char(uint8_t *image, uint16_t x, uint16_t y, uint16_t c) {
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	4608      	mov	r0, r1
 8001436:	4611      	mov	r1, r2
 8001438:	461a      	mov	r2, r3
 800143a:	4603      	mov	r3, r0
 800143c:	817b      	strh	r3, [r7, #10]
 800143e:	460b      	mov	r3, r1
 8001440:	813b      	strh	r3, [r7, #8]
 8001442:	4613      	mov	r3, r2
 8001444:	80fb      	strh	r3, [r7, #6]
	uint16_t font_offset = c * FONT_HEIGHT;
 8001446:	88fb      	ldrh	r3, [r7, #6]
 8001448:	461a      	mov	r2, r3
 800144a:	0052      	lsls	r2, r2, #1
 800144c:	4413      	add	r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	827b      	strh	r3, [r7, #18]
	for (uint16_t i = 0; i < FONT_HEIGHT; i++) {
 8001452:	2300      	movs	r3, #0
 8001454:	82fb      	strh	r3, [r7, #22]
 8001456:	e023      	b.n	80014a0 <draw_char+0x74>
		for (uint16_t j = 0; j < FONT_WIDTH; j++) {
 8001458:	2300      	movs	r3, #0
 800145a:	82bb      	strh	r3, [r7, #20]
 800145c:	e01a      	b.n	8001494 <draw_char+0x68>
			if (read_font_pixel(font, j, i + font_offset)) {
 800145e:	8afa      	ldrh	r2, [r7, #22]
 8001460:	8a7b      	ldrh	r3, [r7, #18]
 8001462:	4413      	add	r3, r2
 8001464:	b29a      	uxth	r2, r3
 8001466:	8abb      	ldrh	r3, [r7, #20]
 8001468:	4619      	mov	r1, r3
 800146a:	4811      	ldr	r0, [pc, #68]	; (80014b0 <draw_char+0x84>)
 800146c:	f7ff ff52 	bl	8001314 <read_font_pixel>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d00b      	beq.n	800148e <draw_char+0x62>
				toggle_single_pixel(image, x + j, y + i);
 8001476:	897a      	ldrh	r2, [r7, #10]
 8001478:	8abb      	ldrh	r3, [r7, #20]
 800147a:	4413      	add	r3, r2
 800147c:	b299      	uxth	r1, r3
 800147e:	893a      	ldrh	r2, [r7, #8]
 8001480:	8afb      	ldrh	r3, [r7, #22]
 8001482:	4413      	add	r3, r2
 8001484:	b29b      	uxth	r3, r3
 8001486:	461a      	mov	r2, r3
 8001488:	68f8      	ldr	r0, [r7, #12]
 800148a:	f7ff ff6a 	bl	8001362 <toggle_single_pixel>
		for (uint16_t j = 0; j < FONT_WIDTH; j++) {
 800148e:	8abb      	ldrh	r3, [r7, #20]
 8001490:	3301      	adds	r3, #1
 8001492:	82bb      	strh	r3, [r7, #20]
 8001494:	8abb      	ldrh	r3, [r7, #20]
 8001496:	2b07      	cmp	r3, #7
 8001498:	d9e1      	bls.n	800145e <draw_char+0x32>
	for (uint16_t i = 0; i < FONT_HEIGHT; i++) {
 800149a:	8afb      	ldrh	r3, [r7, #22]
 800149c:	3301      	adds	r3, #1
 800149e:	82fb      	strh	r3, [r7, #22]
 80014a0:	8afb      	ldrh	r3, [r7, #22]
 80014a2:	2b0b      	cmp	r3, #11
 80014a4:	d9d8      	bls.n	8001458 <draw_char+0x2c>
			}
		}
	}
}
 80014a6:	bf00      	nop
 80014a8:	bf00      	nop
 80014aa:	3718      	adds	r7, #24
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	200000a0 	.word	0x200000a0

080014b4 <translate>:

uint16_t translate(char c) {
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	71fb      	strb	r3, [r7, #7]
	if (c >= 'A' && c <= 'Z') {
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	2b40      	cmp	r3, #64	; 0x40
 80014c2:	d907      	bls.n	80014d4 <translate+0x20>
 80014c4:	79fb      	ldrb	r3, [r7, #7]
 80014c6:	2b5a      	cmp	r3, #90	; 0x5a
 80014c8:	d804      	bhi.n	80014d4 <translate+0x20>
		return c - 'A';
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	3b41      	subs	r3, #65	; 0x41
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	e034      	b.n	800153e <translate+0x8a>
	} else if (c >= 'a' && c <= 'z') {
 80014d4:	79fb      	ldrb	r3, [r7, #7]
 80014d6:	2b60      	cmp	r3, #96	; 0x60
 80014d8:	d907      	bls.n	80014ea <translate+0x36>
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	2b7a      	cmp	r3, #122	; 0x7a
 80014de:	d804      	bhi.n	80014ea <translate+0x36>
		return c - 'a';
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	3b61      	subs	r3, #97	; 0x61
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	e029      	b.n	800153e <translate+0x8a>
	} else if (c >= '0' && c <= '9') {
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	2b2f      	cmp	r3, #47	; 0x2f
 80014ee:	d907      	bls.n	8001500 <translate+0x4c>
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	2b39      	cmp	r3, #57	; 0x39
 80014f4:	d804      	bhi.n	8001500 <translate+0x4c>
		return c - '0' + 26;
 80014f6:	79fb      	ldrb	r3, [r7, #7]
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	3b16      	subs	r3, #22
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	e01e      	b.n	800153e <translate+0x8a>
	} else if (c == '.') {
 8001500:	79fb      	ldrb	r3, [r7, #7]
 8001502:	2b2e      	cmp	r3, #46	; 0x2e
 8001504:	d101      	bne.n	800150a <translate+0x56>
		return 36;
 8001506:	2324      	movs	r3, #36	; 0x24
 8001508:	e019      	b.n	800153e <translate+0x8a>
	} else if (c == ',') {
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	2b2c      	cmp	r3, #44	; 0x2c
 800150e:	d101      	bne.n	8001514 <translate+0x60>
		return 37;
 8001510:	2325      	movs	r3, #37	; 0x25
 8001512:	e014      	b.n	800153e <translate+0x8a>
	} else if (c == '+') {
 8001514:	79fb      	ldrb	r3, [r7, #7]
 8001516:	2b2b      	cmp	r3, #43	; 0x2b
 8001518:	d101      	bne.n	800151e <translate+0x6a>
		return 38;
 800151a:	2326      	movs	r3, #38	; 0x26
 800151c:	e00f      	b.n	800153e <translate+0x8a>
	} else if (c == '-') {
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	2b2d      	cmp	r3, #45	; 0x2d
 8001522:	d101      	bne.n	8001528 <translate+0x74>
		return 39;
 8001524:	2327      	movs	r3, #39	; 0x27
 8001526:	e00a      	b.n	800153e <translate+0x8a>
	} else if (c == '<') {
 8001528:	79fb      	ldrb	r3, [r7, #7]
 800152a:	2b3c      	cmp	r3, #60	; 0x3c
 800152c:	d101      	bne.n	8001532 <translate+0x7e>
		return 40;
 800152e:	2328      	movs	r3, #40	; 0x28
 8001530:	e005      	b.n	800153e <translate+0x8a>
	} else if (c == '>') {
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	2b3e      	cmp	r3, #62	; 0x3e
 8001536:	d101      	bne.n	800153c <translate+0x88>
		return 41;
 8001538:	2329      	movs	r3, #41	; 0x29
 800153a:	e000      	b.n	800153e <translate+0x8a>
	} else {
		return 42; // ' '
 800153c:	232a      	movs	r3, #42	; 0x2a
	}
}
 800153e:	4618      	mov	r0, r3
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr

0800154a <draw_text>:

void draw_text(uint8_t *image, char *text, uint16_t x, uint16_t y) {
 800154a:	b590      	push	{r4, r7, lr}
 800154c:	b087      	sub	sp, #28
 800154e:	af00      	add	r7, sp, #0
 8001550:	60f8      	str	r0, [r7, #12]
 8001552:	60b9      	str	r1, [r7, #8]
 8001554:	4611      	mov	r1, r2
 8001556:	461a      	mov	r2, r3
 8001558:	460b      	mov	r3, r1
 800155a:	80fb      	strh	r3, [r7, #6]
 800155c:	4613      	mov	r3, r2
 800155e:	80bb      	strh	r3, [r7, #4]
	uint16_t i = 0;
 8001560:	2300      	movs	r3, #0
 8001562:	82fb      	strh	r3, [r7, #22]
	while(text[i] > 0) {
 8001564:	e015      	b.n	8001592 <draw_text+0x48>
		draw_char(image, x + FONT_WIDTH * i, y, translate(text[i]));
 8001566:	8afb      	ldrh	r3, [r7, #22]
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	b29a      	uxth	r2, r3
 800156c:	88fb      	ldrh	r3, [r7, #6]
 800156e:	4413      	add	r3, r2
 8001570:	b29c      	uxth	r4, r3
 8001572:	8afb      	ldrh	r3, [r7, #22]
 8001574:	68ba      	ldr	r2, [r7, #8]
 8001576:	4413      	add	r3, r2
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff ff9a 	bl	80014b4 <translate>
 8001580:	4603      	mov	r3, r0
 8001582:	88ba      	ldrh	r2, [r7, #4]
 8001584:	4621      	mov	r1, r4
 8001586:	68f8      	ldr	r0, [r7, #12]
 8001588:	f7ff ff50 	bl	800142c <draw_char>
		i++;
 800158c:	8afb      	ldrh	r3, [r7, #22]
 800158e:	3301      	adds	r3, #1
 8001590:	82fb      	strh	r3, [r7, #22]
	while(text[i] > 0) {
 8001592:	8afb      	ldrh	r3, [r7, #22]
 8001594:	68ba      	ldr	r2, [r7, #8]
 8001596:	4413      	add	r3, r2
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d1e3      	bne.n	8001566 <draw_text+0x1c>
	}
}
 800159e:	bf00      	nop
 80015a0:	bf00      	nop
 80015a2:	371c      	adds	r7, #28
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd90      	pop	{r4, r7, pc}

080015a8 <draw_clean>:

void draw_clean(uint8_t *image) {
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
	uint16_t bytes = CANVAS_WIDTH * CANVAS_HEIGHT / 8;
 80015b0:	f44f 5394 	mov.w	r3, #4736	; 0x1280
 80015b4:	81bb      	strh	r3, [r7, #12]
	for (uint16_t i = 0; i < bytes; i++) image[i] = 0xFF;
 80015b6:	2300      	movs	r3, #0
 80015b8:	81fb      	strh	r3, [r7, #14]
 80015ba:	e007      	b.n	80015cc <draw_clean+0x24>
 80015bc:	89fb      	ldrh	r3, [r7, #14]
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	4413      	add	r3, r2
 80015c2:	22ff      	movs	r2, #255	; 0xff
 80015c4:	701a      	strb	r2, [r3, #0]
 80015c6:	89fb      	ldrh	r3, [r7, #14]
 80015c8:	3301      	adds	r3, #1
 80015ca:	81fb      	strh	r3, [r7, #14]
 80015cc:	89fa      	ldrh	r2, [r7, #14]
 80015ce:	89bb      	ldrh	r3, [r7, #12]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d3f3      	bcc.n	80015bc <draw_clean+0x14>
}
 80015d4:	bf00      	nop
 80015d6:	bf00      	nop
 80015d8:	3714      	adds	r7, #20
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
	...

080015e4 <overdrive_pedal_init>:
#include "pedalboard_min.h"

// OVERDRIVE

void overdrive_pedal_init(pedal_config_t *conf) {
 80015e4:	b490      	push	{r4, r7}
 80015e6:	b09a      	sub	sp, #104	; 0x68
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
    conf->float_params[INTENSITY] = (float_parameter_t){4.F, 1.F, 10.F, 0.5F};
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4a1a      	ldr	r2, [pc, #104]	; (8001658 <overdrive_pedal_init+0x74>)
 80015f0:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80015f4:	4613      	mov	r3, r2
 80015f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[THRESHOLD_HIGH] = (float_parameter_t){32767.F, 0.F, 32767.F, 1.F};
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a17      	ldr	r2, [pc, #92]	; (800165c <overdrive_pedal_init+0x78>)
 8001600:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8001604:	4613      	mov	r3, r2
 8001606:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001608:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[THRESHOLD_LOW] = (float_parameter_t){28000.F, 0.F, 32767.F, 1.F};
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a14      	ldr	r2, [pc, #80]	; (8001660 <overdrive_pedal_init+0x7c>)
 8001610:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8001614:	4613      	mov	r3, r2
 8001616:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001618:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[SOFTENER] = (float_parameter_t){4.F, 1.F, 10.F, 0.5F};
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4a0e      	ldr	r2, [pc, #56]	; (8001658 <overdrive_pedal_init+0x74>)
 8001620:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8001624:	4613      	mov	r3, r2
 8001626:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001628:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_1] = (float_parameter_t){1.F, 0.F, 1.F, 0.1F};
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4a0d      	ldr	r2, [pc, #52]	; (8001664 <overdrive_pedal_init+0x80>)
 8001630:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8001634:	4613      	mov	r3, r2
 8001636:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001638:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_2] = (float_parameter_t){0.F, 0.F, 1.F, 0.1F};
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4a0a      	ldr	r2, [pc, #40]	; (8001668 <overdrive_pedal_init+0x84>)
 8001640:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8001644:	4613      	mov	r3, r2
 8001646:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001648:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800164c:	bf00      	nop
 800164e:	3768      	adds	r7, #104	; 0x68
 8001650:	46bd      	mov	sp, r7
 8001652:	bc90      	pop	{r4, r7}
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	0800c3ec 	.word	0x0800c3ec
 800165c:	0800c3fc 	.word	0x0800c3fc
 8001660:	0800c40c 	.word	0x0800c40c
 8001664:	0800c41c 	.word	0x0800c41c
 8001668:	0800c42c 	.word	0x0800c42c

0800166c <overdrive_process>:

float overdrive_process(float in, pedal_config_t *conf) {
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	ed87 0a01 	vstr	s0, [r7, #4]
 8001676:	6038      	str	r0, [r7, #0]
    float out = in *  conf->float_params[INTENSITY].value;
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800167e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001686:	edc7 7a03 	vstr	s15, [r7, #12]
    out = soft_clip(out, conf->float_params[THRESHOLD_LOW].value, conf->float_params[SOFTENER].value);
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8001696:	eeb0 1a47 	vmov.f32	s2, s14
 800169a:	eef0 0a67 	vmov.f32	s1, s15
 800169e:	ed97 0a03 	vldr	s0, [r7, #12]
 80016a2:	f000 fbab 	bl	8001dfc <soft_clip>
 80016a6:	ed87 0a03 	vstr	s0, [r7, #12]
    out = hard_clip(out, conf->float_params[THRESHOLD_HIGH].value);
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80016b0:	eef0 0a67 	vmov.f32	s1, s15
 80016b4:	ed97 0a03 	vldr	s0, [r7, #12]
 80016b8:	f000 fb70 	bl	8001d9c <hard_clip>
 80016bc:	ed87 0a03 	vstr	s0, [r7, #12]
    out = mix(out, in, conf->float_params[BALANCE_1].value, conf->float_params[BALANCE_2].value);
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 80016cc:	eef0 1a47 	vmov.f32	s3, s14
 80016d0:	eeb0 1a67 	vmov.f32	s2, s15
 80016d4:	edd7 0a01 	vldr	s1, [r7, #4]
 80016d8:	ed97 0a03 	vldr	s0, [r7, #12]
 80016dc:	f000 fb3e 	bl	8001d5c <mix>
 80016e0:	ed87 0a03 	vstr	s0, [r7, #12]
    return out;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	ee07 3a90 	vmov	s15, r3
}
 80016ea:	eeb0 0a67 	vmov.f32	s0, s15
 80016ee:	3710      	adds	r7, #16
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <bitcrusher_rs_pedal_init>:

// BITCRUSHER resolution

void bitcrusher_rs_pedal_init(pedal_config_t *conf) {
 80016f4:	b490      	push	{r4, r7}
 80016f6:	b08e      	sub	sp, #56	; 0x38
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
    conf->int_params[REDUCT_INTENSITY] = (int_parameter_t){12, 1, 16, 1};
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	4a0e      	ldr	r2, [pc, #56]	; (8001738 <bitcrusher_rs_pedal_init+0x44>)
 8001700:	f103 0420 	add.w	r4, r3, #32
 8001704:	4613      	mov	r3, r2
 8001706:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001708:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_1] = (float_parameter_t){0.5F, 0.F, 1.F, 0.1F};
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4a0b      	ldr	r2, [pc, #44]	; (800173c <bitcrusher_rs_pedal_init+0x48>)
 8001710:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8001714:	4613      	mov	r3, r2
 8001716:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001718:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_2] = (float_parameter_t){0.5F, 0.F, 1.F, 0.1F};
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4a07      	ldr	r2, [pc, #28]	; (800173c <bitcrusher_rs_pedal_init+0x48>)
 8001720:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8001724:	4613      	mov	r3, r2
 8001726:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001728:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800172c:	bf00      	nop
 800172e:	3738      	adds	r7, #56	; 0x38
 8001730:	46bd      	mov	sp, r7
 8001732:	bc90      	pop	{r4, r7}
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	0800c43c 	.word	0x0800c43c
 800173c:	0800c44c 	.word	0x0800c44c

08001740 <bitcrusher_rs_process>:

float bitcrusher_rs_process(float in, pedal_config_t *conf) {
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	ed87 0a01 	vstr	s0, [r7, #4]
 800174a:	6038      	str	r0, [r7, #0]
    int16_t shift = conf->int_params[REDUCT_INTENSITY].value;
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	6a1b      	ldr	r3, [r3, #32]
 8001750:	81fb      	strh	r3, [r7, #14]
    int16_t _out = (int16_t)in;
 8001752:	edd7 7a01 	vldr	s15, [r7, #4]
 8001756:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800175a:	ee17 3a90 	vmov	r3, s15
 800175e:	81bb      	strh	r3, [r7, #12]
    _out = _out >> shift;
 8001760:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001764:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001768:	fa42 f303 	asr.w	r3, r2, r3
 800176c:	81bb      	strh	r3, [r7, #12]
    _out = _out << shift;
 800176e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001772:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	81bb      	strh	r3, [r7, #12]
    _out += (2 << shift -2);
 800177c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001780:	3b02      	subs	r3, #2
 8001782:	2202      	movs	r2, #2
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	b29a      	uxth	r2, r3
 800178a:	89bb      	ldrh	r3, [r7, #12]
 800178c:	4413      	add	r3, r2
 800178e:	b29b      	uxth	r3, r3
 8001790:	81bb      	strh	r3, [r7, #12]
    float out = (float)_out;
 8001792:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001796:	ee07 3a90 	vmov	s15, r3
 800179a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800179e:	edc7 7a02 	vstr	s15, [r7, #8]
    out = mix(out, in, conf->float_params[BALANCE_1].value, conf->float_params[BALANCE_2].value);
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 80017ae:	eef0 1a47 	vmov.f32	s3, s14
 80017b2:	eeb0 1a67 	vmov.f32	s2, s15
 80017b6:	edd7 0a01 	vldr	s1, [r7, #4]
 80017ba:	ed97 0a02 	vldr	s0, [r7, #8]
 80017be:	f000 facd 	bl	8001d5c <mix>
 80017c2:	ed87 0a02 	vstr	s0, [r7, #8]
    return out;
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	ee07 3a90 	vmov	s15, r3
}
 80017cc:	eeb0 0a67 	vmov.f32	s0, s15
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
	...

080017d8 <tremolo_pedal_init>:

// TREMOLO

void tremolo_pedal_init(pedal_config_t *conf) {
 80017d8:	b490      	push	{r4, r7}
 80017da:	b092      	sub	sp, #72	; 0x48
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
    conf->int_params[COUNTER] = (int_parameter_t){0, 1, 0, 0};
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	611a      	str	r2, [r3, #16]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2201      	movs	r2, #1
 80017ea:	615a      	str	r2, [r3, #20]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	619a      	str	r2, [r3, #24]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2200      	movs	r2, #0
 80017f6:	61da      	str	r2, [r3, #28]
    conf->float_params[SPEED] = (float_parameter_t){2.F, 0.1F, 10.F, 0.1F};
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4a0e      	ldr	r2, [pc, #56]	; (8001834 <tremolo_pedal_init+0x5c>)
 80017fc:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8001800:	4613      	mov	r3, r2
 8001802:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001804:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_1] = (float_parameter_t){0.2F, 0.F, 1.F, 0.1F};
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4a0b      	ldr	r2, [pc, #44]	; (8001838 <tremolo_pedal_init+0x60>)
 800180c:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8001810:	4613      	mov	r3, r2
 8001812:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001814:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_2] = (float_parameter_t){0.8F, 0.F, 1.F, 0.1F};
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4a08      	ldr	r2, [pc, #32]	; (800183c <tremolo_pedal_init+0x64>)
 800181c:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8001820:	4613      	mov	r3, r2
 8001822:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001824:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001828:	bf00      	nop
 800182a:	3748      	adds	r7, #72	; 0x48
 800182c:	46bd      	mov	sp, r7
 800182e:	bc90      	pop	{r4, r7}
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	0800c45c 	.word	0x0800c45c
 8001838:	0800c46c 	.word	0x0800c46c
 800183c:	0800c47c 	.word	0x0800c47c

08001840 <tremolo_process>:

float tremolo_process(float in, pedal_config_t *conf) {
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	ed87 0a01 	vstr	s0, [r7, #4]
 800184a:	6038      	str	r0, [r7, #0]
    float tone = 440.0F;
 800184c:	4b1c      	ldr	r3, [pc, #112]	; (80018c0 <tremolo_process+0x80>)
 800184e:	60fb      	str	r3, [r7, #12]
    float out = in * wave_gen('s', conf->int_params[COUNTER].value, tone * conf->float_params[SPEED].value);
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	691b      	ldr	r3, [r3, #16]
 8001854:	461a      	mov	r2, r3
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 800185c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001860:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001864:	eeb0 0a67 	vmov.f32	s0, s15
 8001868:	4611      	mov	r1, r2
 800186a:	2073      	movs	r0, #115	; 0x73
 800186c:	f000 fb42 	bl	8001ef4 <wave_gen>
 8001870:	eeb0 7a40 	vmov.f32	s14, s0
 8001874:	edd7 7a01 	vldr	s15, [r7, #4]
 8001878:	ee67 7a87 	vmul.f32	s15, s15, s14
 800187c:	edc7 7a02 	vstr	s15, [r7, #8]
    conf->int_params[COUNTER].value++;
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	691b      	ldr	r3, [r3, #16]
 8001884:	1c5a      	adds	r2, r3, #1
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	611a      	str	r2, [r3, #16]
    out = mix(out, in, conf->float_params[BALANCE_1].value, conf->float_params[BALANCE_2].value);
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8001896:	eef0 1a47 	vmov.f32	s3, s14
 800189a:	eeb0 1a67 	vmov.f32	s2, s15
 800189e:	edd7 0a01 	vldr	s1, [r7, #4]
 80018a2:	ed97 0a02 	vldr	s0, [r7, #8]
 80018a6:	f000 fa59 	bl	8001d5c <mix>
 80018aa:	ed87 0a02 	vstr	s0, [r7, #8]
    return out;
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	ee07 3a90 	vmov	s15, r3
}
 80018b4:	eeb0 0a67 	vmov.f32	s0, s15
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	43dc0000 	.word	0x43dc0000

080018c4 <overdrive_sqrt_pedal_init>:

// OVERDRIVE_SQRT

void overdrive_sqrt_pedal_init(pedal_config_t *conf) {
 80018c4:	b490      	push	{r4, r7}
 80018c6:	b092      	sub	sp, #72	; 0x48
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
    conf->float_params[INTENSITY] = (float_parameter_t){500.F, 0.F, 2000.F, 100.F};
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4a12      	ldr	r2, [pc, #72]	; (8001918 <overdrive_sqrt_pedal_init+0x54>)
 80018d0:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80018d4:	4613      	mov	r3, r2
 80018d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[THRESHOLD_HIGH] = (float_parameter_t){32767.F, 0.F, 32767.F, 1.F};
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4a0f      	ldr	r2, [pc, #60]	; (800191c <overdrive_sqrt_pedal_init+0x58>)
 80018e0:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80018e4:	4613      	mov	r3, r2
 80018e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_1] = (float_parameter_t){0.25F, 0.F, 1.F, 0.1F};
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4a0c      	ldr	r2, [pc, #48]	; (8001920 <overdrive_sqrt_pedal_init+0x5c>)
 80018f0:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80018f4:	4613      	mov	r3, r2
 80018f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_2] = (float_parameter_t){0.75F, 0.F, 1.F, 0.1F};
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4a09      	ldr	r2, [pc, #36]	; (8001924 <overdrive_sqrt_pedal_init+0x60>)
 8001900:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8001904:	4613      	mov	r3, r2
 8001906:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001908:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800190c:	bf00      	nop
 800190e:	3748      	adds	r7, #72	; 0x48
 8001910:	46bd      	mov	sp, r7
 8001912:	bc90      	pop	{r4, r7}
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	0800c48c 	.word	0x0800c48c
 800191c:	0800c3fc 	.word	0x0800c3fc
 8001920:	0800c49c 	.word	0x0800c49c
 8001924:	0800c4ac 	.word	0x0800c4ac

08001928 <overdrive_sqrt_process>:

float overdrive_sqrt_process(float in, pedal_config_t *conf) {
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001932:	6038      	str	r0, [r7, #0]
    float out;
    if (in > 0.0F) {
 8001934:	edd7 7a01 	vldr	s15, [r7, #4]
 8001938:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800193c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001940:	dd06      	ble.n	8001950 <overdrive_sqrt_process+0x28>
        out = square_root(in);
 8001942:	ed97 0a01 	vldr	s0, [r7, #4]
 8001946:	f000 faa4 	bl	8001e92 <square_root>
 800194a:	ed87 0a03 	vstr	s0, [r7, #12]
 800194e:	e00d      	b.n	800196c <overdrive_sqrt_process+0x44>
    } else {
        out = -square_root(-in);
 8001950:	edd7 7a01 	vldr	s15, [r7, #4]
 8001954:	eef1 7a67 	vneg.f32	s15, s15
 8001958:	eeb0 0a67 	vmov.f32	s0, s15
 800195c:	f000 fa99 	bl	8001e92 <square_root>
 8001960:	eef0 7a40 	vmov.f32	s15, s0
 8001964:	eef1 7a67 	vneg.f32	s15, s15
 8001968:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    out = out * conf->float_params[INTENSITY].value;
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001972:	ed97 7a03 	vldr	s14, [r7, #12]
 8001976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800197a:	edc7 7a03 	vstr	s15, [r7, #12]
    out = hard_clip(out, conf->float_params[THRESHOLD_HIGH].value);
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001984:	eef0 0a67 	vmov.f32	s1, s15
 8001988:	ed97 0a03 	vldr	s0, [r7, #12]
 800198c:	f000 fa06 	bl	8001d9c <hard_clip>
 8001990:	ed87 0a03 	vstr	s0, [r7, #12]
    out = mix(out, in, conf->float_params[BALANCE_1].value, conf->float_params[BALANCE_2].value);
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 80019a0:	eef0 1a47 	vmov.f32	s3, s14
 80019a4:	eeb0 1a67 	vmov.f32	s2, s15
 80019a8:	edd7 0a01 	vldr	s1, [r7, #4]
 80019ac:	ed97 0a03 	vldr	s0, [r7, #12]
 80019b0:	f000 f9d4 	bl	8001d5c <mix>
 80019b4:	ed87 0a03 	vstr	s0, [r7, #12]
    return out;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	ee07 3a90 	vmov	s15, r3
}
 80019be:	eeb0 0a67 	vmov.f32	s0, s15
 80019c2:	3710      	adds	r7, #16
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <amplifier_pedal_init>:

// AMPLIFIER

void amplifier_pedal_init(pedal_config_t *conf) {
 80019c8:	b490      	push	{r4, r7}
 80019ca:	b08a      	sub	sp, #40	; 0x28
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
    conf->float_params[INTENSITY] = (float_parameter_t){0.5F, 0.1F, 10.F, 0.1F};
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4a0a      	ldr	r2, [pc, #40]	; (80019fc <amplifier_pedal_init+0x34>)
 80019d4:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80019d8:	4613      	mov	r3, r2
 80019da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[THRESHOLD_HIGH] = (float_parameter_t){32767.F, 0.F, 32767.F, 1.F};
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4a07      	ldr	r2, [pc, #28]	; (8001a00 <amplifier_pedal_init+0x38>)
 80019e4:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80019e8:	4613      	mov	r3, r2
 80019ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80019f0:	bf00      	nop
 80019f2:	3728      	adds	r7, #40	; 0x28
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bc90      	pop	{r4, r7}
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	0800c4bc 	.word	0x0800c4bc
 8001a00:	0800c3fc 	.word	0x0800c3fc

08001a04 <amplifier_process>:

float amplifier_process(float in, pedal_config_t *conf) {
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001a0e:	6038      	str	r0, [r7, #0]
    float out = in * conf->float_params[INTENSITY].value;
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001a16:	ed97 7a01 	vldr	s14, [r7, #4]
 8001a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a1e:	edc7 7a03 	vstr	s15, [r7, #12]
    out = hard_clip(out, conf->float_params[THRESHOLD_HIGH].value);
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001a28:	eef0 0a67 	vmov.f32	s1, s15
 8001a2c:	ed97 0a03 	vldr	s0, [r7, #12]
 8001a30:	f000 f9b4 	bl	8001d9c <hard_clip>
 8001a34:	ed87 0a03 	vstr	s0, [r7, #12]
    return out;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	ee07 3a90 	vmov	s15, r3
}
 8001a3e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a42:	3710      	adds	r7, #16
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <dyn_amplifier_pedal_init>:

// DYN_AMPLIFIER

void dyn_amplifier_pedal_init(pedal_config_t *conf) {
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
    //conf->float_params[GAIN_INTENSITY] = (float_parameter_t){1000, 0.1, 10, 0.1};
    //conf->float_params[CLIP_THRESHOLD] = (float_parameter_t){32767, 0, 32767, 1};
    //conf->float_params[SOFT_THRESHOLD] = (float_parameter_t){28000, 0, 32767, 1};
    //conf->float_params[BALANCE] = (float_parameter_t){0.5, 0, 1, 0.1};
}
 8001a50:	bf00      	nop
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <dyn_amplifier_process>:

float dyn_amplifier_process(float in, pedal_config_t *conf) {
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	ed87 0a01 	vstr	s0, [r7, #4]
 8001a66:	6038      	str	r0, [r7, #0]
    //    else if (max < conf->float_params[SOFT_THRESHOLD].value) dyn += 0.01;
    //    max = 0;
    //}
    //out = hard_clip(out, conf->float_params[CLIP_THRESHOLD].value);
    //return out;
    return in;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	ee07 3a90 	vmov	s15, r3
}
 8001a6e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <low_pass_filter_pedal_init>:

// LPF

void low_pass_filter_pedal_init(pedal_config_t *conf) {
 8001a7c:	b490      	push	{r4, r7}
 8001a7e:	b092      	sub	sp, #72	; 0x48
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
    conf->float_params[INTENSITY] = (float_parameter_t){0.9F, 0.0F, 1.0F, 0.01F};
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4a11      	ldr	r2, [pc, #68]	; (8001acc <low_pass_filter_pedal_init+0x50>)
 8001a88:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_1] = (float_parameter_t){1.F, 0.F, 1.F, 0.1F};
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	4a0e      	ldr	r2, [pc, #56]	; (8001ad0 <low_pass_filter_pedal_init+0x54>)
 8001a98:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001aa0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_2] = (float_parameter_t){0.F, 0.F, 1.F, 0.1F};
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	4a0b      	ldr	r2, [pc, #44]	; (8001ad4 <low_pass_filter_pedal_init+0x58>)
 8001aa8:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8001aac:	4613      	mov	r3, r2
 8001aae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ab0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[PAST] = (float_parameter_t){0.F, 0.F, 0.F, 0.F};
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	33b0      	adds	r3, #176	; 0xb0
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	609a      	str	r2, [r3, #8]
 8001ac0:	60da      	str	r2, [r3, #12]
}
 8001ac2:	bf00      	nop
 8001ac4:	3748      	adds	r7, #72	; 0x48
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc90      	pop	{r4, r7}
 8001aca:	4770      	bx	lr
 8001acc:	0800c4cc 	.word	0x0800c4cc
 8001ad0:	0800c41c 	.word	0x0800c41c
 8001ad4:	0800c42c 	.word	0x0800c42c

08001ad8 <low_pass_filter_process>:

float low_pass_filter_process(float in, pedal_config_t *conf) {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	ed87 0a01 	vstr	s0, [r7, #4]
 8001ae2:	6038      	str	r0, [r7, #0]
    float alpha = conf->float_params[INTENSITY].value;
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae8:	60fb      	str	r3, [r7, #12]
    float out = conf->float_params[PAST].value * alpha + (1.F - alpha) * in;
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 8001af0:	edd7 7a03 	vldr	s15, [r7, #12]
 8001af4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001af8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001afc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b00:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001b04:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b10:	edc7 7a02 	vstr	s15, [r7, #8]
    conf->float_params[PAST].value = out;
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	68ba      	ldr	r2, [r7, #8]
 8001b18:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    out = mix(out, in, conf->float_params[BALANCE_1].value, conf->float_params[BALANCE_2].value);
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8001b28:	eef0 1a47 	vmov.f32	s3, s14
 8001b2c:	eeb0 1a67 	vmov.f32	s2, s15
 8001b30:	edd7 0a01 	vldr	s1, [r7, #4]
 8001b34:	ed97 0a02 	vldr	s0, [r7, #8]
 8001b38:	f000 f910 	bl	8001d5c <mix>
 8001b3c:	ed87 0a02 	vstr	s0, [r7, #8]
    return out;
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	ee07 3a90 	vmov	s15, r3
}
 8001b46:	eeb0 0a67 	vmov.f32	s0, s15
 8001b4a:	3710      	adds	r7, #16
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <fuzz_pedal_init>:

// FUZZ

void fuzz_pedal_init(pedal_config_t *conf) {
 8001b50:	b490      	push	{r4, r7}
 8001b52:	b09e      	sub	sp, #120	; 0x78
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
    conf->int_params[COUNTER] = (int_parameter_t){0, 1, 0, 0};
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	611a      	str	r2, [r3, #16]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2201      	movs	r2, #1
 8001b62:	615a      	str	r2, [r3, #20]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	619a      	str	r2, [r3, #24]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	61da      	str	r2, [r3, #28]
    conf->float_params[INTENSITY] = (float_parameter_t){4.F, 1.F, 10.F, 0.5F};
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	4a1a      	ldr	r2, [pc, #104]	; (8001bdc <fuzz_pedal_init+0x8c>)
 8001b74:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8001b78:	4613      	mov	r3, r2
 8001b7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[THRESHOLD_HIGH] = (float_parameter_t){32767.F, 0.F, 32767.F, 1.F};
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	4a17      	ldr	r2, [pc, #92]	; (8001be0 <fuzz_pedal_init+0x90>)
 8001b84:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8001b88:	4613      	mov	r3, r2
 8001b8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[HEIGHT] = (float_parameter_t){2048.F, 0.F, 8192.F, 32.F};
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	4a14      	ldr	r2, [pc, #80]	; (8001be4 <fuzz_pedal_init+0x94>)
 8001b94:	f103 0490 	add.w	r4, r3, #144	; 0x90
 8001b98:	4613      	mov	r3, r2
 8001b9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[SPEED] = (float_parameter_t){1.F, 0.1F, 10.F, 0.1F};
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	4a11      	ldr	r2, [pc, #68]	; (8001be8 <fuzz_pedal_init+0x98>)
 8001ba4:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8001ba8:	4613      	mov	r3, r2
 8001baa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_1] = (float_parameter_t){1.F, 0.F, 1.F, 0.1F};
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4a0e      	ldr	r2, [pc, #56]	; (8001bec <fuzz_pedal_init+0x9c>)
 8001bb4:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8001bb8:	4613      	mov	r3, r2
 8001bba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bbc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_2] = (float_parameter_t){0.F, 0.F, 1.F, 0.1F};
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4a0b      	ldr	r2, [pc, #44]	; (8001bf0 <fuzz_pedal_init+0xa0>)
 8001bc4:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8001bc8:	4613      	mov	r3, r2
 8001bca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bcc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001bd0:	bf00      	nop
 8001bd2:	3778      	adds	r7, #120	; 0x78
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc90      	pop	{r4, r7}
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	0800c3ec 	.word	0x0800c3ec
 8001be0:	0800c3fc 	.word	0x0800c3fc
 8001be4:	0800c4dc 	.word	0x0800c4dc
 8001be8:	0800c4ec 	.word	0x0800c4ec
 8001bec:	0800c41c 	.word	0x0800c41c
 8001bf0:	0800c42c 	.word	0x0800c42c

08001bf4 <fuzz_process>:

float fuzz_process(float in, pedal_config_t *conf) {
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b088      	sub	sp, #32
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	ed87 0a01 	vstr	s0, [r7, #4]
 8001bfe:	6038      	str	r0, [r7, #0]
    float out = in * conf->float_params[INTENSITY].value;
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001c06:	ed97 7a01 	vldr	s14, [r7, #4]
 8001c0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c0e:	edc7 7a07 	vstr	s15, [r7, #28]
    float threshold_high = conf->float_params[THRESHOLD_HIGH].value;
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c16:	61bb      	str	r3, [r7, #24]
    float height = conf->float_params[HEIGHT].value;
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c1e:	617b      	str	r3, [r7, #20]
    float speed = conf->float_params[SPEED].value;
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001c26:	613b      	str	r3, [r7, #16]
    float tone = 440.0F;
 8001c28:	4b3e      	ldr	r3, [pc, #248]	; (8001d24 <fuzz_process+0x130>)
 8001c2a:	60fb      	str	r3, [r7, #12]

    out = hard_clip(out, threshold_high);
 8001c2c:	edd7 0a06 	vldr	s1, [r7, #24]
 8001c30:	ed97 0a07 	vldr	s0, [r7, #28]
 8001c34:	f000 f8b2 	bl	8001d9c <hard_clip>
 8001c38:	ed87 0a07 	vstr	s0, [r7, #28]
    if (out == threshold_high) {
 8001c3c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001c40:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c44:	eeb4 7a67 	vcmp.f32	s14, s15
 8001c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c4c:	d11e      	bne.n	8001c8c <fuzz_process+0x98>
        out += (wave_gen('s', conf->int_params[COUNTER].value, tone * speed) - 1) * height;
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	691b      	ldr	r3, [r3, #16]
 8001c52:	ed97 7a03 	vldr	s14, [r7, #12]
 8001c56:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c5e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c62:	4619      	mov	r1, r3
 8001c64:	2073      	movs	r0, #115	; 0x73
 8001c66:	f000 f945 	bl	8001ef4 <wave_gen>
 8001c6a:	eef0 7a40 	vmov.f32	s15, s0
 8001c6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001c72:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001c76:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c7e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001c82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c86:	edc7 7a07 	vstr	s15, [r7, #28]
 8001c8a:	e02c      	b.n	8001ce6 <fuzz_process+0xf2>
    } else if (out == - threshold_high - 1.F) {
 8001c8c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c90:	eef1 7a67 	vneg.f32	s15, s15
 8001c94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001c98:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c9c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001ca0:	eeb4 7a67 	vcmp.f32	s14, s15
 8001ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ca8:	d11d      	bne.n	8001ce6 <fuzz_process+0xf2>
        out += (wave_gen('s', conf->int_params[COUNTER].value, tone * speed) + 1) * height;
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	ed97 7a03 	vldr	s14, [r7, #12]
 8001cb2:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cba:	eeb0 0a67 	vmov.f32	s0, s15
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	2073      	movs	r0, #115	; 0x73
 8001cc2:	f000 f917 	bl	8001ef4 <wave_gen>
 8001cc6:	eef0 7a40 	vmov.f32	s15, s0
 8001cca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001cce:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001cd2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cda:	ed97 7a07 	vldr	s14, [r7, #28]
 8001cde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ce2:	edc7 7a07 	vstr	s15, [r7, #28]
    }
    conf->int_params[COUNTER].value++;
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	1c5a      	adds	r2, r3, #1
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	611a      	str	r2, [r3, #16]
    out = mix(out, in, conf->float_params[BALANCE_1].value, conf->float_params[BALANCE_2].value);
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8001cfc:	eef0 1a47 	vmov.f32	s3, s14
 8001d00:	eeb0 1a67 	vmov.f32	s2, s15
 8001d04:	edd7 0a01 	vldr	s1, [r7, #4]
 8001d08:	ed97 0a07 	vldr	s0, [r7, #28]
 8001d0c:	f000 f826 	bl	8001d5c <mix>
 8001d10:	ed87 0a07 	vstr	s0, [r7, #28]
    return out;
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	ee07 3a90 	vmov	s15, r3
}
 8001d1a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d1e:	3720      	adds	r7, #32
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	43dc0000 	.word	0x43dc0000

08001d28 <bypass_pedal_init>:

// BYPASS

void bypass_pedal_init(pedal_config_t *conf) {
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
    return;
 8001d30:	bf00      	nop
}
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <bypass_process>:

float bypass_process(float in, pedal_config_t *conf) {
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	ed87 0a01 	vstr	s0, [r7, #4]
 8001d46:	6038      	str	r0, [r7, #0]
    return in;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	ee07 3a90 	vmov	s15, r3
}
 8001d4e:	eeb0 0a67 	vmov.f32	s0, s15
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <mix>:


float mix(float in_1, float in_2, float balance_1, float balance_2) {
 8001d5c:	b480      	push	{r7}
 8001d5e:	b085      	sub	sp, #20
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	ed87 0a03 	vstr	s0, [r7, #12]
 8001d66:	edc7 0a02 	vstr	s1, [r7, #8]
 8001d6a:	ed87 1a01 	vstr	s2, [r7, #4]
 8001d6e:	edc7 1a00 	vstr	s3, [r7]
    return in_1 * balance_1 + in_2 * balance_2;
 8001d72:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d76:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d7e:	edd7 6a02 	vldr	s13, [r7, #8]
 8001d82:	edd7 7a00 	vldr	s15, [r7]
 8001d86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d8a:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001d8e:	eeb0 0a67 	vmov.f32	s0, s15
 8001d92:	3714      	adds	r7, #20
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <hard_clip>:

float hard_clip(float in, float clip_threshold) {
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	ed87 0a01 	vstr	s0, [r7, #4]
 8001da6:	edc7 0a00 	vstr	s1, [r7]
    if (in > clip_threshold) {
 8001daa:	ed97 7a01 	vldr	s14, [r7, #4]
 8001dae:	edd7 7a00 	vldr	s15, [r7]
 8001db2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dba:	dd02      	ble.n	8001dc2 <hard_clip+0x26>
        return clip_threshold;
 8001dbc:	edd7 7a00 	vldr	s15, [r7]
 8001dc0:	e015      	b.n	8001dee <hard_clip+0x52>
    } else if (in < -clip_threshold) {
 8001dc2:	edd7 7a00 	vldr	s15, [r7]
 8001dc6:	eef1 7a67 	vneg.f32	s15, s15
 8001dca:	ed97 7a01 	vldr	s14, [r7, #4]
 8001dce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dd6:	d508      	bpl.n	8001dea <hard_clip+0x4e>
        return -clip_threshold - 1;
 8001dd8:	edd7 7a00 	vldr	s15, [r7]
 8001ddc:	eef1 7a67 	vneg.f32	s15, s15
 8001de0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001de4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001de8:	e001      	b.n	8001dee <hard_clip+0x52>
    }
    return in;
 8001dea:	edd7 7a01 	vldr	s15, [r7, #4]
}
 8001dee:	eeb0 0a67 	vmov.f32	s0, s15
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <soft_clip>:

float soft_clip(float in, float soft_threshold, float softener) {
 8001dfc:	b480      	push	{r7}
 8001dfe:	b087      	sub	sp, #28
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	ed87 0a03 	vstr	s0, [r7, #12]
 8001e06:	edc7 0a02 	vstr	s1, [r7, #8]
 8001e0a:	ed87 1a01 	vstr	s2, [r7, #4]
    float out;
    if (in > soft_threshold) {
 8001e0e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e12:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e1e:	dd10      	ble.n	8001e42 <soft_clip+0x46>
        out = soft_threshold + (in - soft_threshold) / softener;
 8001e20:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e24:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e28:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001e2c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e34:	ed97 7a02 	vldr	s14, [r7, #8]
 8001e38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e3c:	edc7 7a05 	vstr	s15, [r7, #20]
 8001e40:	e01d      	b.n	8001e7e <soft_clip+0x82>
    } else if (in < -soft_threshold) {
 8001e42:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e46:	eef1 7a67 	vneg.f32	s15, s15
 8001e4a:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e56:	d510      	bpl.n	8001e7a <soft_clip+0x7e>
        out = -soft_threshold + (in + soft_threshold) / softener;
 8001e58:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e5c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e60:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001e64:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e6c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e74:	edc7 7a05 	vstr	s15, [r7, #20]
 8001e78:	e001      	b.n	8001e7e <soft_clip+0x82>
    } else {
        out = in;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	617b      	str	r3, [r7, #20]
    }
    return out;
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	ee07 3a90 	vmov	s15, r3
}
 8001e84:	eeb0 0a67 	vmov.f32	s0, s15
 8001e88:	371c      	adds	r7, #28
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <square_root>:

float square_root(float in) {
 8001e92:	b480      	push	{r7}
 8001e94:	b085      	sub	sp, #20
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	ed87 0a01 	vstr	s0, [r7, #4]
    float out;
    out = in * 0.5F;
 8001e9c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ea0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001ea4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ea8:	edc7 7a03 	vstr	s15, [r7, #12]
    for (u_int8_t i = 0; i < 8; i++) {
 8001eac:	2300      	movs	r3, #0
 8001eae:	72fb      	strb	r3, [r7, #11]
 8001eb0:	e012      	b.n	8001ed8 <square_root+0x46>
        out = 0.5F * (out + (in / out));
 8001eb2:	edd7 6a01 	vldr	s13, [r7, #4]
 8001eb6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001eba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ebe:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ec2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ec6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001eca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ece:	edc7 7a03 	vstr	s15, [r7, #12]
    for (u_int8_t i = 0; i < 8; i++) {
 8001ed2:	7afb      	ldrb	r3, [r7, #11]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	72fb      	strb	r3, [r7, #11]
 8001ed8:	7afb      	ldrb	r3, [r7, #11]
 8001eda:	2b07      	cmp	r3, #7
 8001edc:	d9e9      	bls.n	8001eb2 <square_root+0x20>
    }
    return out;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	ee07 3a90 	vmov	s15, r3
}
 8001ee4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ee8:	3714      	adds	r7, #20
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
	...

08001ef4 <wave_gen>:

float wave_gen(char t, u_int32_t i, float tone) {
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	4602      	mov	r2, r0
 8001efe:	f107 0308 	add.w	r3, r7, #8
 8001f02:	6019      	str	r1, [r3, #0]
 8001f04:	1d3b      	adds	r3, r7, #4
 8001f06:	ed83 0a00 	vstr	s0, [r3]
 8001f0a:	f107 030f 	add.w	r3, r7, #15
 8001f0e:	701a      	strb	r2, [r3, #0]

    float sin_table[128] = { 0.000000F, 0.024541F, 0.049068F, 0.073565F, 0.098017F, 0.122411F, 0.146730F, 0.170962F, 0.195090F, 0.219101F, 0.242980F, 0.266713F, 0.290284F, 0.313681F, 0.336890F, 0.359895F, 0.382683F, 0.405241F, 0.427555F, 0.449611F, 0.471396F, 0.492898F, 0.514102F, 0.534997F, 0.555570F, 0.575808F, 0.595699F, 0.615231F, 0.634393F, 0.653172F, 0.671559F, 0.689540F, 0.707106F, 0.724247F, 0.740951F, 0.757208F, 0.773010F, 0.788346F, 0.803207F, 0.817584F, 0.831469F, 0.844853F, 0.857728F, 0.870087F, 0.881921F, 0.893224F, 0.903989F, 0.914209F, 0.923879F, 0.932992F, 0.941544F, 0.949528F, 0.956940F, 0.963776F, 0.970031F, 0.975702F, 0.980785F, 0.985277F, 0.989176F, 0.992479F, 0.995185F, 0.997290F, 0.998795F, 0.999699F, 1.000000F, 0.999699F, 0.998796F, 0.997291F, 0.995185F, 0.992480F, 0.989177F, 0.985278F, 0.980786F, 0.975702F, 0.970032F, 0.963776F, 0.956941F, 0.949529F, 0.941545F, 0.932993F, 0.923880F, 0.914210F, 0.903990F, 0.893225F, 0.881922F, 0.870088F, 0.857729F, 0.844855F, 0.831471F, 0.817586F, 0.803209F, 0.788348F, 0.773012F, 0.757210F, 0.740952F, 0.724248F, 0.707108F, 0.689542F, 0.671560F, 0.653174F, 0.634395F, 0.615233F, 0.595701F, 0.575810F, 0.555572F, 0.534999F, 0.514105F, 0.492900F, 0.471399F, 0.449613F, 0.427557F, 0.405243F, 0.382685F, 0.359897F, 0.336892F, 0.313684F, 0.290287F, 0.266715F, 0.242982F, 0.219104F, 0.195093F, 0.170964F, 0.146733F, 0.122413F, 0.098019F, 0.073567F, 0.049070F, 0.024544F };
 8001f10:	f107 0314 	add.w	r3, r7, #20
 8001f14:	4a2c      	ldr	r2, [pc, #176]	; (8001fc8 <wave_gen+0xd4>)
 8001f16:	4618      	mov	r0, r3
 8001f18:	4611      	mov	r1, r2
 8001f1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f1e:	461a      	mov	r2, r3
 8001f20:	f00a f97a 	bl	800c218 <memcpy>
    float period_f = 44180.F / tone;
 8001f24:	1d3b      	adds	r3, r7, #4
 8001f26:	eddf 6a29 	vldr	s13, [pc, #164]	; 8001fcc <wave_gen+0xd8>
 8001f2a:	ed93 7a00 	vldr	s14, [r3]
 8001f2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f32:	edc7 7a87 	vstr	s15, [r7, #540]	; 0x21c
    u_int32_t period_i = period_f;
 8001f36:	edd7 7a87 	vldr	s15, [r7, #540]	; 0x21c
 8001f3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f3e:	ee17 3a90 	vmov	r3, s15
 8001f42:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
    u_int32_t table_index = (i * 256 / period_i) % 256;
 8001f46:	f107 0308 	add.w	r3, r7, #8
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	021a      	lsls	r2, r3, #8
 8001f4e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214

    if (t == 's') {
 8001f5c:	f107 030f 	add.w	r3, r7, #15
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	2b73      	cmp	r3, #115	; 0x73
 8001f64:	d118      	bne.n	8001f98 <wave_gen+0xa4>
        if (table_index <= 127) {
 8001f66:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001f6a:	2b7f      	cmp	r3, #127	; 0x7f
 8001f6c:	d808      	bhi.n	8001f80 <wave_gen+0x8c>
            return sin_table[table_index];
 8001f6e:	f107 0214 	add.w	r2, r7, #20
 8001f72:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	4413      	add	r3, r2
 8001f7a:	edd3 7a00 	vldr	s15, [r3]
 8001f7e:	e01c      	b.n	8001fba <wave_gen+0xc6>
        } else {
            return -sin_table[table_index - 128];
 8001f80:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001f84:	3b80      	subs	r3, #128	; 0x80
 8001f86:	f107 0214 	add.w	r2, r7, #20
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	4413      	add	r3, r2
 8001f8e:	edd3 7a00 	vldr	s15, [r3]
 8001f92:	eef1 7a67 	vneg.f32	s15, s15
 8001f96:	e010      	b.n	8001fba <wave_gen+0xc6>
        }
    } else if (t == 'q') {
 8001f98:	f107 030f 	add.w	r3, r7, #15
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	2b71      	cmp	r3, #113	; 0x71
 8001fa0:	d109      	bne.n	8001fb6 <wave_gen+0xc2>
        if (table_index <= 127) {
 8001fa2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001fa6:	2b7f      	cmp	r3, #127	; 0x7f
 8001fa8:	d802      	bhi.n	8001fb0 <wave_gen+0xbc>
            return -1.F;
 8001faa:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8001fae:	e004      	b.n	8001fba <wave_gen+0xc6>
        } else {
            return 1.F;
 8001fb0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001fb4:	e001      	b.n	8001fba <wave_gen+0xc6>
        }
    } else {
        return 0;
 8001fb6:	eddf 7a06 	vldr	s15, [pc, #24]	; 8001fd0 <wave_gen+0xdc>
    }
}
 8001fba:	eeb0 0a67 	vmov.f32	s0, s15
 8001fbe:	f507 7708 	add.w	r7, r7, #544	; 0x220
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	0800c4fc 	.word	0x0800c4fc
 8001fcc:	472c9400 	.word	0x472c9400
 8001fd0:	00000000 	.word	0x00000000

08001fd4 <pedalboard_append>:



// PEDALBOARD

void pedalboard_append(pedalboard_t *p_pb, enum pedal_types type) {
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	460b      	mov	r3, r1
 8001fde:	70fb      	strb	r3, [r7, #3]
    u_int8_t i = p_pb->active_pedals;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	73fb      	strb	r3, [r7, #15]

    if (p_pb->active_pedals < MAX_PEDALS_COUNT) {
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	2b07      	cmp	r3, #7
 8001fec:	f200 80dd 	bhi.w	80021aa <pedalboard_append+0x1d6>
        u_int8_t i = p_pb->active_pedals;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	73bb      	strb	r3, [r7, #14]
        p_pb->pedals[i].type = type;
 8001ff6:	7bbb      	ldrb	r3, [r7, #14]
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	21c8      	movs	r1, #200	; 0xc8
 8001ffc:	fb01 f303 	mul.w	r3, r1, r3
 8002000:	4413      	add	r3, r2
 8002002:	33c4      	adds	r3, #196	; 0xc4
 8002004:	78fa      	ldrb	r2, [r7, #3]
 8002006:	701a      	strb	r2, [r3, #0]

        if (type == AMPLIFIER)
 8002008:	78fb      	ldrb	r3, [r7, #3]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d113      	bne.n	8002036 <pedalboard_append+0x62>
        {
            amplifier_pedal_init(&(p_pb->pedals[i].config));
 800200e:	7bbb      	ldrb	r3, [r7, #14]
 8002010:	22c8      	movs	r2, #200	; 0xc8
 8002012:	fb02 f303 	mul.w	r3, r2, r3
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	4413      	add	r3, r2
 800201a:	3304      	adds	r3, #4
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff fcd3 	bl	80019c8 <amplifier_pedal_init>
            p_pb->pedals[i].pedal_process = amplifier_process;
 8002022:	7bbb      	ldrb	r3, [r7, #14]
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	21c8      	movs	r1, #200	; 0xc8
 8002028:	fb01 f303 	mul.w	r3, r1, r3
 800202c:	4413      	add	r3, r2
 800202e:	33c8      	adds	r3, #200	; 0xc8
 8002030:	4a60      	ldr	r2, [pc, #384]	; (80021b4 <pedalboard_append+0x1e0>)
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	e0b3      	b.n	800219e <pedalboard_append+0x1ca>
        }
        else if (type == BITCRUSHER_RS)
 8002036:	78fb      	ldrb	r3, [r7, #3]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d113      	bne.n	8002064 <pedalboard_append+0x90>
        {
            bitcrusher_rs_pedal_init(&(p_pb->pedals[i].config));
 800203c:	7bbb      	ldrb	r3, [r7, #14]
 800203e:	22c8      	movs	r2, #200	; 0xc8
 8002040:	fb02 f303 	mul.w	r3, r2, r3
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	4413      	add	r3, r2
 8002048:	3304      	adds	r3, #4
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff fb52 	bl	80016f4 <bitcrusher_rs_pedal_init>
            p_pb->pedals[i].pedal_process = bitcrusher_rs_process;
 8002050:	7bbb      	ldrb	r3, [r7, #14]
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	21c8      	movs	r1, #200	; 0xc8
 8002056:	fb01 f303 	mul.w	r3, r1, r3
 800205a:	4413      	add	r3, r2
 800205c:	33c8      	adds	r3, #200	; 0xc8
 800205e:	4a56      	ldr	r2, [pc, #344]	; (80021b8 <pedalboard_append+0x1e4>)
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	e09c      	b.n	800219e <pedalboard_append+0x1ca>
        }
        else if (type == DYN_AMPLIFIER)
 8002064:	78fb      	ldrb	r3, [r7, #3]
 8002066:	2b03      	cmp	r3, #3
 8002068:	d113      	bne.n	8002092 <pedalboard_append+0xbe>
        {
            dyn_amplifier_pedal_init(&(p_pb->pedals[i].config));
 800206a:	7bbb      	ldrb	r3, [r7, #14]
 800206c:	22c8      	movs	r2, #200	; 0xc8
 800206e:	fb02 f303 	mul.w	r3, r2, r3
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	4413      	add	r3, r2
 8002076:	3304      	adds	r3, #4
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff fce5 	bl	8001a48 <dyn_amplifier_pedal_init>
            p_pb->pedals[i].pedal_process = dyn_amplifier_process;
 800207e:	7bbb      	ldrb	r3, [r7, #14]
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	21c8      	movs	r1, #200	; 0xc8
 8002084:	fb01 f303 	mul.w	r3, r1, r3
 8002088:	4413      	add	r3, r2
 800208a:	33c8      	adds	r3, #200	; 0xc8
 800208c:	4a4b      	ldr	r2, [pc, #300]	; (80021bc <pedalboard_append+0x1e8>)
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	e085      	b.n	800219e <pedalboard_append+0x1ca>
        }
        else if (type == FUZZ)
 8002092:	78fb      	ldrb	r3, [r7, #3]
 8002094:	2b04      	cmp	r3, #4
 8002096:	d113      	bne.n	80020c0 <pedalboard_append+0xec>
        {
            fuzz_pedal_init(&(p_pb->pedals[i].config));
 8002098:	7bbb      	ldrb	r3, [r7, #14]
 800209a:	22c8      	movs	r2, #200	; 0xc8
 800209c:	fb02 f303 	mul.w	r3, r2, r3
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	4413      	add	r3, r2
 80020a4:	3304      	adds	r3, #4
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7ff fd52 	bl	8001b50 <fuzz_pedal_init>
            p_pb->pedals[i].pedal_process = fuzz_process;
 80020ac:	7bbb      	ldrb	r3, [r7, #14]
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	21c8      	movs	r1, #200	; 0xc8
 80020b2:	fb01 f303 	mul.w	r3, r1, r3
 80020b6:	4413      	add	r3, r2
 80020b8:	33c8      	adds	r3, #200	; 0xc8
 80020ba:	4a41      	ldr	r2, [pc, #260]	; (80021c0 <pedalboard_append+0x1ec>)
 80020bc:	601a      	str	r2, [r3, #0]
 80020be:	e06e      	b.n	800219e <pedalboard_append+0x1ca>
        }
        else if (type == LPF)
 80020c0:	78fb      	ldrb	r3, [r7, #3]
 80020c2:	2b05      	cmp	r3, #5
 80020c4:	d113      	bne.n	80020ee <pedalboard_append+0x11a>
        {
            low_pass_filter_pedal_init(&(p_pb->pedals[i].config));
 80020c6:	7bbb      	ldrb	r3, [r7, #14]
 80020c8:	22c8      	movs	r2, #200	; 0xc8
 80020ca:	fb02 f303 	mul.w	r3, r2, r3
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	4413      	add	r3, r2
 80020d2:	3304      	adds	r3, #4
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff fcd1 	bl	8001a7c <low_pass_filter_pedal_init>
            p_pb->pedals[i].pedal_process = low_pass_filter_process;
 80020da:	7bbb      	ldrb	r3, [r7, #14]
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	21c8      	movs	r1, #200	; 0xc8
 80020e0:	fb01 f303 	mul.w	r3, r1, r3
 80020e4:	4413      	add	r3, r2
 80020e6:	33c8      	adds	r3, #200	; 0xc8
 80020e8:	4a36      	ldr	r2, [pc, #216]	; (80021c4 <pedalboard_append+0x1f0>)
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	e057      	b.n	800219e <pedalboard_append+0x1ca>
        }
        else if (type == OVERDRIVE)
 80020ee:	78fb      	ldrb	r3, [r7, #3]
 80020f0:	2b06      	cmp	r3, #6
 80020f2:	d113      	bne.n	800211c <pedalboard_append+0x148>
        {
            overdrive_pedal_init(&(p_pb->pedals[i].config));
 80020f4:	7bbb      	ldrb	r3, [r7, #14]
 80020f6:	22c8      	movs	r2, #200	; 0xc8
 80020f8:	fb02 f303 	mul.w	r3, r2, r3
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	4413      	add	r3, r2
 8002100:	3304      	adds	r3, #4
 8002102:	4618      	mov	r0, r3
 8002104:	f7ff fa6e 	bl	80015e4 <overdrive_pedal_init>
            p_pb->pedals[i].pedal_process = overdrive_process;
 8002108:	7bbb      	ldrb	r3, [r7, #14]
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	21c8      	movs	r1, #200	; 0xc8
 800210e:	fb01 f303 	mul.w	r3, r1, r3
 8002112:	4413      	add	r3, r2
 8002114:	33c8      	adds	r3, #200	; 0xc8
 8002116:	4a2c      	ldr	r2, [pc, #176]	; (80021c8 <pedalboard_append+0x1f4>)
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	e040      	b.n	800219e <pedalboard_append+0x1ca>
        }
        else if (type == OVERDRIVE_SQRT)
 800211c:	78fb      	ldrb	r3, [r7, #3]
 800211e:	2b07      	cmp	r3, #7
 8002120:	d113      	bne.n	800214a <pedalboard_append+0x176>
        {
            overdrive_sqrt_pedal_init(&(p_pb->pedals[i].config));
 8002122:	7bbb      	ldrb	r3, [r7, #14]
 8002124:	22c8      	movs	r2, #200	; 0xc8
 8002126:	fb02 f303 	mul.w	r3, r2, r3
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	4413      	add	r3, r2
 800212e:	3304      	adds	r3, #4
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff fbc7 	bl	80018c4 <overdrive_sqrt_pedal_init>
            p_pb->pedals[i].pedal_process = overdrive_sqrt_process;
 8002136:	7bbb      	ldrb	r3, [r7, #14]
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	21c8      	movs	r1, #200	; 0xc8
 800213c:	fb01 f303 	mul.w	r3, r1, r3
 8002140:	4413      	add	r3, r2
 8002142:	33c8      	adds	r3, #200	; 0xc8
 8002144:	4a21      	ldr	r2, [pc, #132]	; (80021cc <pedalboard_append+0x1f8>)
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	e029      	b.n	800219e <pedalboard_append+0x1ca>
        }
        else if (type == TREMOLO)
 800214a:	78fb      	ldrb	r3, [r7, #3]
 800214c:	2b08      	cmp	r3, #8
 800214e:	d113      	bne.n	8002178 <pedalboard_append+0x1a4>
        {
            tremolo_pedal_init(&(p_pb->pedals[i].config));
 8002150:	7bbb      	ldrb	r3, [r7, #14]
 8002152:	22c8      	movs	r2, #200	; 0xc8
 8002154:	fb02 f303 	mul.w	r3, r2, r3
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	4413      	add	r3, r2
 800215c:	3304      	adds	r3, #4
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff fb3a 	bl	80017d8 <tremolo_pedal_init>
            p_pb->pedals[i].pedal_process = tremolo_process;
 8002164:	7bbb      	ldrb	r3, [r7, #14]
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	21c8      	movs	r1, #200	; 0xc8
 800216a:	fb01 f303 	mul.w	r3, r1, r3
 800216e:	4413      	add	r3, r2
 8002170:	33c8      	adds	r3, #200	; 0xc8
 8002172:	4a17      	ldr	r2, [pc, #92]	; (80021d0 <pedalboard_append+0x1fc>)
 8002174:	601a      	str	r2, [r3, #0]
 8002176:	e012      	b.n	800219e <pedalboard_append+0x1ca>
        }
        else
        {
            // BYPASS AS DEFAULT
            bypass_pedal_init(&(p_pb->pedals[i].config));
 8002178:	7bbb      	ldrb	r3, [r7, #14]
 800217a:	22c8      	movs	r2, #200	; 0xc8
 800217c:	fb02 f303 	mul.w	r3, r2, r3
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	4413      	add	r3, r2
 8002184:	3304      	adds	r3, #4
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff fdce 	bl	8001d28 <bypass_pedal_init>
            p_pb->pedals[i].pedal_process = bypass_process;
 800218c:	7bbb      	ldrb	r3, [r7, #14]
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	21c8      	movs	r1, #200	; 0xc8
 8002192:	fb01 f303 	mul.w	r3, r1, r3
 8002196:	4413      	add	r3, r2
 8002198:	33c8      	adds	r3, #200	; 0xc8
 800219a:	4a0e      	ldr	r2, [pc, #56]	; (80021d4 <pedalboard_append+0x200>)
 800219c:	601a      	str	r2, [r3, #0]
        }
        p_pb->active_pedals++;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	3301      	adds	r3, #1
 80021a4:	b2da      	uxtb	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	701a      	strb	r2, [r3, #0]
    }
}
 80021aa:	bf00      	nop
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	08001a05 	.word	0x08001a05
 80021b8:	08001741 	.word	0x08001741
 80021bc:	08001a5d 	.word	0x08001a5d
 80021c0:	08001bf5 	.word	0x08001bf5
 80021c4:	08001ad9 	.word	0x08001ad9
 80021c8:	0800166d 	.word	0x0800166d
 80021cc:	08001929 	.word	0x08001929
 80021d0:	08001841 	.word	0x08001841
 80021d4:	08001d3d 	.word	0x08001d3d

080021d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021de:	2300      	movs	r3, #0
 80021e0:	607b      	str	r3, [r7, #4]
 80021e2:	4b10      	ldr	r3, [pc, #64]	; (8002224 <HAL_MspInit+0x4c>)
 80021e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e6:	4a0f      	ldr	r2, [pc, #60]	; (8002224 <HAL_MspInit+0x4c>)
 80021e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021ec:	6453      	str	r3, [r2, #68]	; 0x44
 80021ee:	4b0d      	ldr	r3, [pc, #52]	; (8002224 <HAL_MspInit+0x4c>)
 80021f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021f6:	607b      	str	r3, [r7, #4]
 80021f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021fa:	2300      	movs	r3, #0
 80021fc:	603b      	str	r3, [r7, #0]
 80021fe:	4b09      	ldr	r3, [pc, #36]	; (8002224 <HAL_MspInit+0x4c>)
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	4a08      	ldr	r2, [pc, #32]	; (8002224 <HAL_MspInit+0x4c>)
 8002204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002208:	6413      	str	r3, [r2, #64]	; 0x40
 800220a:	4b06      	ldr	r3, [pc, #24]	; (8002224 <HAL_MspInit+0x4c>)
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002212:	603b      	str	r3, [r7, #0]
 8002214:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002216:	bf00      	nop
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	40023800 	.word	0x40023800

08002228 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b08a      	sub	sp, #40	; 0x28
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002230:	f107 0314 	add.w	r3, r7, #20
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	605a      	str	r2, [r3, #4]
 800223a:	609a      	str	r2, [r3, #8]
 800223c:	60da      	str	r2, [r3, #12]
 800223e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a19      	ldr	r2, [pc, #100]	; (80022ac <HAL_I2C_MspInit+0x84>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d12c      	bne.n	80022a4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	613b      	str	r3, [r7, #16]
 800224e:	4b18      	ldr	r3, [pc, #96]	; (80022b0 <HAL_I2C_MspInit+0x88>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002252:	4a17      	ldr	r2, [pc, #92]	; (80022b0 <HAL_I2C_MspInit+0x88>)
 8002254:	f043 0302 	orr.w	r3, r3, #2
 8002258:	6313      	str	r3, [r2, #48]	; 0x30
 800225a:	4b15      	ldr	r3, [pc, #84]	; (80022b0 <HAL_I2C_MspInit+0x88>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	613b      	str	r3, [r7, #16]
 8002264:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8002266:	f44f 7310 	mov.w	r3, #576	; 0x240
 800226a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800226c:	2312      	movs	r3, #18
 800226e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002270:	2300      	movs	r3, #0
 8002272:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002274:	2303      	movs	r3, #3
 8002276:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002278:	2304      	movs	r3, #4
 800227a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800227c:	f107 0314 	add.w	r3, r7, #20
 8002280:	4619      	mov	r1, r3
 8002282:	480c      	ldr	r0, [pc, #48]	; (80022b4 <HAL_I2C_MspInit+0x8c>)
 8002284:	f000 ff90 	bl	80031a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002288:	2300      	movs	r3, #0
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	4b08      	ldr	r3, [pc, #32]	; (80022b0 <HAL_I2C_MspInit+0x88>)
 800228e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002290:	4a07      	ldr	r2, [pc, #28]	; (80022b0 <HAL_I2C_MspInit+0x88>)
 8002292:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002296:	6413      	str	r3, [r2, #64]	; 0x40
 8002298:	4b05      	ldr	r3, [pc, #20]	; (80022b0 <HAL_I2C_MspInit+0x88>)
 800229a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022a0:	60fb      	str	r3, [r7, #12]
 80022a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80022a4:	bf00      	nop
 80022a6:	3728      	adds	r7, #40	; 0x28
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40005400 	.word	0x40005400
 80022b0:	40023800 	.word	0x40023800
 80022b4:	40020400 	.word	0x40020400

080022b8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b08e      	sub	sp, #56	; 0x38
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	605a      	str	r2, [r3, #4]
 80022ca:	609a      	str	r2, [r3, #8]
 80022cc:	60da      	str	r2, [r3, #12]
 80022ce:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a93      	ldr	r2, [pc, #588]	; (8002524 <HAL_I2S_MspInit+0x26c>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	f040 808d 	bne.w	80023f6 <HAL_I2S_MspInit+0x13e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80022dc:	2300      	movs	r3, #0
 80022de:	623b      	str	r3, [r7, #32]
 80022e0:	4b91      	ldr	r3, [pc, #580]	; (8002528 <HAL_I2S_MspInit+0x270>)
 80022e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e4:	4a90      	ldr	r2, [pc, #576]	; (8002528 <HAL_I2S_MspInit+0x270>)
 80022e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022ea:	6413      	str	r3, [r2, #64]	; 0x40
 80022ec:	4b8e      	ldr	r3, [pc, #568]	; (8002528 <HAL_I2S_MspInit+0x270>)
 80022ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022f4:	623b      	str	r3, [r7, #32]
 80022f6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022f8:	2300      	movs	r3, #0
 80022fa:	61fb      	str	r3, [r7, #28]
 80022fc:	4b8a      	ldr	r3, [pc, #552]	; (8002528 <HAL_I2S_MspInit+0x270>)
 80022fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002300:	4a89      	ldr	r2, [pc, #548]	; (8002528 <HAL_I2S_MspInit+0x270>)
 8002302:	f043 0302 	orr.w	r3, r3, #2
 8002306:	6313      	str	r3, [r2, #48]	; 0x30
 8002308:	4b87      	ldr	r3, [pc, #540]	; (8002528 <HAL_I2S_MspInit+0x270>)
 800230a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	61fb      	str	r3, [r7, #28]
 8002312:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002314:	2300      	movs	r3, #0
 8002316:	61bb      	str	r3, [r7, #24]
 8002318:	4b83      	ldr	r3, [pc, #524]	; (8002528 <HAL_I2S_MspInit+0x270>)
 800231a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231c:	4a82      	ldr	r2, [pc, #520]	; (8002528 <HAL_I2S_MspInit+0x270>)
 800231e:	f043 0304 	orr.w	r3, r3, #4
 8002322:	6313      	str	r3, [r2, #48]	; 0x30
 8002324:	4b80      	ldr	r3, [pc, #512]	; (8002528 <HAL_I2S_MspInit+0x270>)
 8002326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002328:	f003 0304 	and.w	r3, r3, #4
 800232c:	61bb      	str	r3, [r7, #24]
 800232e:	69bb      	ldr	r3, [r7, #24]
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8002330:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8002334:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002336:	2302      	movs	r3, #2
 8002338:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233a:	2300      	movs	r3, #0
 800233c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800233e:	2301      	movs	r3, #1
 8002340:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002342:	2305      	movs	r3, #5
 8002344:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002346:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800234a:	4619      	mov	r1, r3
 800234c:	4877      	ldr	r0, [pc, #476]	; (800252c <HAL_I2S_MspInit+0x274>)
 800234e:	f000 ff2b 	bl	80031a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002352:	2340      	movs	r3, #64	; 0x40
 8002354:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002356:	2302      	movs	r3, #2
 8002358:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235a:	2300      	movs	r3, #0
 800235c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800235e:	2301      	movs	r3, #1
 8002360:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002362:	2305      	movs	r3, #5
 8002364:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002366:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800236a:	4619      	mov	r1, r3
 800236c:	4870      	ldr	r0, [pc, #448]	; (8002530 <HAL_I2S_MspInit+0x278>)
 800236e:	f000 ff1b 	bl	80031a8 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8002372:	4b70      	ldr	r3, [pc, #448]	; (8002534 <HAL_I2S_MspInit+0x27c>)
 8002374:	4a70      	ldr	r2, [pc, #448]	; (8002538 <HAL_I2S_MspInit+0x280>)
 8002376:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8002378:	4b6e      	ldr	r3, [pc, #440]	; (8002534 <HAL_I2S_MspInit+0x27c>)
 800237a:	2200      	movs	r2, #0
 800237c:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800237e:	4b6d      	ldr	r3, [pc, #436]	; (8002534 <HAL_I2S_MspInit+0x27c>)
 8002380:	2200      	movs	r2, #0
 8002382:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002384:	4b6b      	ldr	r3, [pc, #428]	; (8002534 <HAL_I2S_MspInit+0x27c>)
 8002386:	2200      	movs	r2, #0
 8002388:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800238a:	4b6a      	ldr	r3, [pc, #424]	; (8002534 <HAL_I2S_MspInit+0x27c>)
 800238c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002390:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002392:	4b68      	ldr	r3, [pc, #416]	; (8002534 <HAL_I2S_MspInit+0x27c>)
 8002394:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002398:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800239a:	4b66      	ldr	r3, [pc, #408]	; (8002534 <HAL_I2S_MspInit+0x27c>)
 800239c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023a0:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 80023a2:	4b64      	ldr	r3, [pc, #400]	; (8002534 <HAL_I2S_MspInit+0x27c>)
 80023a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023a8:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80023aa:	4b62      	ldr	r3, [pc, #392]	; (8002534 <HAL_I2S_MspInit+0x27c>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80023b0:	4b60      	ldr	r3, [pc, #384]	; (8002534 <HAL_I2S_MspInit+0x27c>)
 80023b2:	2204      	movs	r2, #4
 80023b4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80023b6:	4b5f      	ldr	r3, [pc, #380]	; (8002534 <HAL_I2S_MspInit+0x27c>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 80023bc:	4b5d      	ldr	r3, [pc, #372]	; (8002534 <HAL_I2S_MspInit+0x27c>)
 80023be:	2200      	movs	r2, #0
 80023c0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80023c2:	4b5c      	ldr	r3, [pc, #368]	; (8002534 <HAL_I2S_MspInit+0x27c>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80023c8:	485a      	ldr	r0, [pc, #360]	; (8002534 <HAL_I2S_MspInit+0x27c>)
 80023ca:	f000 fb7d 	bl	8002ac8 <HAL_DMA_Init>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <HAL_I2S_MspInit+0x120>
    {
      Error_Handler();
 80023d4:	f7fe ff9c 	bl	8001310 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a56      	ldr	r2, [pc, #344]	; (8002534 <HAL_I2S_MspInit+0x27c>)
 80023dc:	63da      	str	r2, [r3, #60]	; 0x3c
 80023de:	4a55      	ldr	r2, [pc, #340]	; (8002534 <HAL_I2S_MspInit+0x27c>)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2S2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80023e4:	2200      	movs	r2, #0
 80023e6:	2100      	movs	r1, #0
 80023e8:	2024      	movs	r0, #36	; 0x24
 80023ea:	f000 fb36 	bl	8002a5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80023ee:	2024      	movs	r0, #36	; 0x24
 80023f0:	f000 fb4f 	bl	8002a92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80023f4:	e091      	b.n	800251a <HAL_I2S_MspInit+0x262>
  else if(hi2s->Instance==SPI3)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a50      	ldr	r2, [pc, #320]	; (800253c <HAL_I2S_MspInit+0x284>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	f040 808c 	bne.w	800251a <HAL_I2S_MspInit+0x262>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002402:	2300      	movs	r3, #0
 8002404:	617b      	str	r3, [r7, #20]
 8002406:	4b48      	ldr	r3, [pc, #288]	; (8002528 <HAL_I2S_MspInit+0x270>)
 8002408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240a:	4a47      	ldr	r2, [pc, #284]	; (8002528 <HAL_I2S_MspInit+0x270>)
 800240c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002410:	6413      	str	r3, [r2, #64]	; 0x40
 8002412:	4b45      	ldr	r3, [pc, #276]	; (8002528 <HAL_I2S_MspInit+0x270>)
 8002414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002416:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800241a:	617b      	str	r3, [r7, #20]
 800241c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800241e:	2300      	movs	r3, #0
 8002420:	613b      	str	r3, [r7, #16]
 8002422:	4b41      	ldr	r3, [pc, #260]	; (8002528 <HAL_I2S_MspInit+0x270>)
 8002424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002426:	4a40      	ldr	r2, [pc, #256]	; (8002528 <HAL_I2S_MspInit+0x270>)
 8002428:	f043 0301 	orr.w	r3, r3, #1
 800242c:	6313      	str	r3, [r2, #48]	; 0x30
 800242e:	4b3e      	ldr	r3, [pc, #248]	; (8002528 <HAL_I2S_MspInit+0x270>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	613b      	str	r3, [r7, #16]
 8002438:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800243a:	2300      	movs	r3, #0
 800243c:	60fb      	str	r3, [r7, #12]
 800243e:	4b3a      	ldr	r3, [pc, #232]	; (8002528 <HAL_I2S_MspInit+0x270>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	4a39      	ldr	r2, [pc, #228]	; (8002528 <HAL_I2S_MspInit+0x270>)
 8002444:	f043 0304 	orr.w	r3, r3, #4
 8002448:	6313      	str	r3, [r2, #48]	; 0x30
 800244a:	4b37      	ldr	r3, [pc, #220]	; (8002528 <HAL_I2S_MspInit+0x270>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	f003 0304 	and.w	r3, r3, #4
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002456:	2310      	movs	r3, #16
 8002458:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245a:	2302      	movs	r3, #2
 800245c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245e:	2300      	movs	r3, #0
 8002460:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002462:	2301      	movs	r3, #1
 8002464:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002466:	2306      	movs	r3, #6
 8002468:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800246a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800246e:	4619      	mov	r1, r3
 8002470:	4833      	ldr	r0, [pc, #204]	; (8002540 <HAL_I2S_MspInit+0x288>)
 8002472:	f000 fe99 	bl	80031a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8002476:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800247a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247c:	2302      	movs	r3, #2
 800247e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002480:	2300      	movs	r3, #0
 8002482:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002484:	2301      	movs	r3, #1
 8002486:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002488:	2306      	movs	r3, #6
 800248a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800248c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002490:	4619      	mov	r1, r3
 8002492:	4827      	ldr	r0, [pc, #156]	; (8002530 <HAL_I2S_MspInit+0x278>)
 8002494:	f000 fe88 	bl	80031a8 <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8002498:	4b2a      	ldr	r3, [pc, #168]	; (8002544 <HAL_I2S_MspInit+0x28c>)
 800249a:	4a2b      	ldr	r2, [pc, #172]	; (8002548 <HAL_I2S_MspInit+0x290>)
 800249c:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 800249e:	4b29      	ldr	r3, [pc, #164]	; (8002544 <HAL_I2S_MspInit+0x28c>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024a4:	4b27      	ldr	r3, [pc, #156]	; (8002544 <HAL_I2S_MspInit+0x28c>)
 80024a6:	2240      	movs	r2, #64	; 0x40
 80024a8:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024aa:	4b26      	ldr	r3, [pc, #152]	; (8002544 <HAL_I2S_MspInit+0x28c>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024b0:	4b24      	ldr	r3, [pc, #144]	; (8002544 <HAL_I2S_MspInit+0x28c>)
 80024b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024b6:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80024b8:	4b22      	ldr	r3, [pc, #136]	; (8002544 <HAL_I2S_MspInit+0x28c>)
 80024ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024be:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80024c0:	4b20      	ldr	r3, [pc, #128]	; (8002544 <HAL_I2S_MspInit+0x28c>)
 80024c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024c6:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 80024c8:	4b1e      	ldr	r3, [pc, #120]	; (8002544 <HAL_I2S_MspInit+0x28c>)
 80024ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024ce:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80024d0:	4b1c      	ldr	r3, [pc, #112]	; (8002544 <HAL_I2S_MspInit+0x28c>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80024d6:	4b1b      	ldr	r3, [pc, #108]	; (8002544 <HAL_I2S_MspInit+0x28c>)
 80024d8:	2204      	movs	r2, #4
 80024da:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80024dc:	4b19      	ldr	r3, [pc, #100]	; (8002544 <HAL_I2S_MspInit+0x28c>)
 80024de:	2200      	movs	r2, #0
 80024e0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80024e2:	4b18      	ldr	r3, [pc, #96]	; (8002544 <HAL_I2S_MspInit+0x28c>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80024e8:	4b16      	ldr	r3, [pc, #88]	; (8002544 <HAL_I2S_MspInit+0x28c>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80024ee:	4815      	ldr	r0, [pc, #84]	; (8002544 <HAL_I2S_MspInit+0x28c>)
 80024f0:	f000 faea 	bl	8002ac8 <HAL_DMA_Init>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <HAL_I2S_MspInit+0x246>
      Error_Handler();
 80024fa:	f7fe ff09 	bl	8001310 <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a10      	ldr	r2, [pc, #64]	; (8002544 <HAL_I2S_MspInit+0x28c>)
 8002502:	639a      	str	r2, [r3, #56]	; 0x38
 8002504:	4a0f      	ldr	r2, [pc, #60]	; (8002544 <HAL_I2S_MspInit+0x28c>)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 800250a:	2200      	movs	r2, #0
 800250c:	2100      	movs	r1, #0
 800250e:	2033      	movs	r0, #51	; 0x33
 8002510:	f000 faa3 	bl	8002a5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8002514:	2033      	movs	r0, #51	; 0x33
 8002516:	f000 fabc 	bl	8002a92 <HAL_NVIC_EnableIRQ>
}
 800251a:	bf00      	nop
 800251c:	3738      	adds	r7, #56	; 0x38
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	40003800 	.word	0x40003800
 8002528:	40023800 	.word	0x40023800
 800252c:	40020400 	.word	0x40020400
 8002530:	40020800 	.word	0x40020800
 8002534:	20000428 	.word	0x20000428
 8002538:	40026058 	.word	0x40026058
 800253c:	40003c00 	.word	0x40003c00
 8002540:	40020000 	.word	0x40020000
 8002544:	2000171c 	.word	0x2000171c
 8002548:	40026088 	.word	0x40026088

0800254c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b08a      	sub	sp, #40	; 0x28
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002554:	f107 0314 	add.w	r3, r7, #20
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	605a      	str	r2, [r3, #4]
 800255e:	609a      	str	r2, [r3, #8]
 8002560:	60da      	str	r2, [r3, #12]
 8002562:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a19      	ldr	r2, [pc, #100]	; (80025d0 <HAL_SPI_MspInit+0x84>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d12b      	bne.n	80025c6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	613b      	str	r3, [r7, #16]
 8002572:	4b18      	ldr	r3, [pc, #96]	; (80025d4 <HAL_SPI_MspInit+0x88>)
 8002574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002576:	4a17      	ldr	r2, [pc, #92]	; (80025d4 <HAL_SPI_MspInit+0x88>)
 8002578:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800257c:	6453      	str	r3, [r2, #68]	; 0x44
 800257e:	4b15      	ldr	r3, [pc, #84]	; (80025d4 <HAL_SPI_MspInit+0x88>)
 8002580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002582:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002586:	613b      	str	r3, [r7, #16]
 8002588:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800258a:	2300      	movs	r3, #0
 800258c:	60fb      	str	r3, [r7, #12]
 800258e:	4b11      	ldr	r3, [pc, #68]	; (80025d4 <HAL_SPI_MspInit+0x88>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002592:	4a10      	ldr	r2, [pc, #64]	; (80025d4 <HAL_SPI_MspInit+0x88>)
 8002594:	f043 0301 	orr.w	r3, r3, #1
 8002598:	6313      	str	r3, [r2, #48]	; 0x30
 800259a:	4b0e      	ldr	r3, [pc, #56]	; (80025d4 <HAL_SPI_MspInit+0x88>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80025a6:	23a0      	movs	r3, #160	; 0xa0
 80025a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025aa:	2302      	movs	r3, #2
 80025ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ae:	2300      	movs	r3, #0
 80025b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b2:	2303      	movs	r3, #3
 80025b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025b6:	2305      	movs	r3, #5
 80025b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ba:	f107 0314 	add.w	r3, r7, #20
 80025be:	4619      	mov	r1, r3
 80025c0:	4805      	ldr	r0, [pc, #20]	; (80025d8 <HAL_SPI_MspInit+0x8c>)
 80025c2:	f000 fdf1 	bl	80031a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80025c6:	bf00      	nop
 80025c8:	3728      	adds	r7, #40	; 0x28
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	40013000 	.word	0x40013000
 80025d4:	40023800 	.word	0x40023800
 80025d8:	40020000 	.word	0x40020000

080025dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025e0:	e7fe      	b.n	80025e0 <NMI_Handler+0x4>

080025e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025e2:	b480      	push	{r7}
 80025e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025e6:	e7fe      	b.n	80025e6 <HardFault_Handler+0x4>

080025e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025ec:	e7fe      	b.n	80025ec <MemManage_Handler+0x4>

080025ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025ee:	b480      	push	{r7}
 80025f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025f2:	e7fe      	b.n	80025f2 <BusFault_Handler+0x4>

080025f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025f8:	e7fe      	b.n	80025f8 <UsageFault_Handler+0x4>

080025fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025fa:	b480      	push	{r7}
 80025fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025fe:	bf00      	nop
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800260c:	bf00      	nop
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr

08002616 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002616:	b480      	push	{r7}
 8002618:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800261a:	bf00      	nop
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002628:	f000 f8f8 	bl	800281c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800262c:	bf00      	nop
 800262e:	bd80      	pop	{r7, pc}

08002630 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8002634:	4802      	ldr	r0, [pc, #8]	; (8002640 <DMA1_Stream3_IRQHandler+0x10>)
 8002636:	f000 fb4d 	bl	8002cd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800263a:	bf00      	nop
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	20000428 	.word	0x20000428

08002644 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8002648:	4802      	ldr	r0, [pc, #8]	; (8002654 <DMA1_Stream5_IRQHandler+0x10>)
 800264a:	f000 fb43 	bl	8002cd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800264e:	bf00      	nop
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	2000171c 	.word	0x2000171c

08002658 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 800265c:	4802      	ldr	r0, [pc, #8]	; (8002668 <SPI2_IRQHandler+0x10>)
 800265e:	f003 fe73 	bl	8006348 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002662:	bf00      	nop
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	20002ea0 	.word	0x20002ea0

0800266c <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s3);
 8002670:	4802      	ldr	r0, [pc, #8]	; (800267c <SPI3_IRQHandler+0x10>)
 8002672:	f003 fe69 	bl	8006348 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8002676:	bf00      	nop
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	20002ee8 	.word	0x20002ee8

08002680 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002684:	4802      	ldr	r0, [pc, #8]	; (8002690 <OTG_FS_IRQHandler+0x10>)
 8002686:	f001 f9c7 	bl	8003a18 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800268a:	bf00      	nop
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	20005378 	.word	0x20005378

08002694 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b086      	sub	sp, #24
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800269c:	4a14      	ldr	r2, [pc, #80]	; (80026f0 <_sbrk+0x5c>)
 800269e:	4b15      	ldr	r3, [pc, #84]	; (80026f4 <_sbrk+0x60>)
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026a8:	4b13      	ldr	r3, [pc, #76]	; (80026f8 <_sbrk+0x64>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d102      	bne.n	80026b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026b0:	4b11      	ldr	r3, [pc, #68]	; (80026f8 <_sbrk+0x64>)
 80026b2:	4a12      	ldr	r2, [pc, #72]	; (80026fc <_sbrk+0x68>)
 80026b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026b6:	4b10      	ldr	r3, [pc, #64]	; (80026f8 <_sbrk+0x64>)
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4413      	add	r3, r2
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d207      	bcs.n	80026d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026c4:	f009 fd6e 	bl	800c1a4 <__errno>
 80026c8:	4603      	mov	r3, r0
 80026ca:	220c      	movs	r2, #12
 80026cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026d2:	e009      	b.n	80026e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026d4:	4b08      	ldr	r3, [pc, #32]	; (80026f8 <_sbrk+0x64>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026da:	4b07      	ldr	r3, [pc, #28]	; (80026f8 <_sbrk+0x64>)
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4413      	add	r3, r2
 80026e2:	4a05      	ldr	r2, [pc, #20]	; (80026f8 <_sbrk+0x64>)
 80026e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026e6:	68fb      	ldr	r3, [r7, #12]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3718      	adds	r7, #24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	20020000 	.word	0x20020000
 80026f4:	00000400 	.word	0x00000400
 80026f8:	200003b8 	.word	0x200003b8
 80026fc:	20005690 	.word	0x20005690

08002700 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002704:	4b06      	ldr	r3, [pc, #24]	; (8002720 <SystemInit+0x20>)
 8002706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800270a:	4a05      	ldr	r2, [pc, #20]	; (8002720 <SystemInit+0x20>)
 800270c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002710:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002714:	bf00      	nop
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	e000ed00 	.word	0xe000ed00

08002724 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002724:	f8df d034 	ldr.w	sp, [pc, #52]	; 800275c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002728:	480d      	ldr	r0, [pc, #52]	; (8002760 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800272a:	490e      	ldr	r1, [pc, #56]	; (8002764 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800272c:	4a0e      	ldr	r2, [pc, #56]	; (8002768 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800272e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002730:	e002      	b.n	8002738 <LoopCopyDataInit>

08002732 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002732:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002734:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002736:	3304      	adds	r3, #4

08002738 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002738:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800273a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800273c:	d3f9      	bcc.n	8002732 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800273e:	4a0b      	ldr	r2, [pc, #44]	; (800276c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002740:	4c0b      	ldr	r4, [pc, #44]	; (8002770 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002742:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002744:	e001      	b.n	800274a <LoopFillZerobss>

08002746 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002746:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002748:	3204      	adds	r2, #4

0800274a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800274a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800274c:	d3fb      	bcc.n	8002746 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800274e:	f7ff ffd7 	bl	8002700 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002752:	f009 fd2d 	bl	800c1b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002756:	f7fe fbbf 	bl	8000ed8 <main>
  bx  lr    
 800275a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800275c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002760:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002764:	20000334 	.word	0x20000334
  ldr r2, =_sidata
 8002768:	0800c760 	.word	0x0800c760
  ldr r2, =_sbss
 800276c:	20000334 	.word	0x20000334
  ldr r4, =_ebss
 8002770:	2000568c 	.word	0x2000568c

08002774 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002774:	e7fe      	b.n	8002774 <ADC_IRQHandler>
	...

08002778 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800277c:	4b0e      	ldr	r3, [pc, #56]	; (80027b8 <HAL_Init+0x40>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a0d      	ldr	r2, [pc, #52]	; (80027b8 <HAL_Init+0x40>)
 8002782:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002786:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002788:	4b0b      	ldr	r3, [pc, #44]	; (80027b8 <HAL_Init+0x40>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a0a      	ldr	r2, [pc, #40]	; (80027b8 <HAL_Init+0x40>)
 800278e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002792:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002794:	4b08      	ldr	r3, [pc, #32]	; (80027b8 <HAL_Init+0x40>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a07      	ldr	r2, [pc, #28]	; (80027b8 <HAL_Init+0x40>)
 800279a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800279e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027a0:	2003      	movs	r0, #3
 80027a2:	f000 f94f 	bl	8002a44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027a6:	200f      	movs	r0, #15
 80027a8:	f000 f808 	bl	80027bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027ac:	f7ff fd14 	bl	80021d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	40023c00 	.word	0x40023c00

080027bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027c4:	4b12      	ldr	r3, [pc, #72]	; (8002810 <HAL_InitTick+0x54>)
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	4b12      	ldr	r3, [pc, #72]	; (8002814 <HAL_InitTick+0x58>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	4619      	mov	r1, r3
 80027ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80027d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027da:	4618      	mov	r0, r3
 80027dc:	f000 f967 	bl	8002aae <HAL_SYSTICK_Config>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e00e      	b.n	8002808 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2b0f      	cmp	r3, #15
 80027ee:	d80a      	bhi.n	8002806 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027f0:	2200      	movs	r2, #0
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027f8:	f000 f92f 	bl	8002a5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027fc:	4a06      	ldr	r2, [pc, #24]	; (8002818 <HAL_InitTick+0x5c>)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002802:	2300      	movs	r3, #0
 8002804:	e000      	b.n	8002808 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
}
 8002808:	4618      	mov	r0, r3
 800280a:	3708      	adds	r7, #8
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	200002a4 	.word	0x200002a4
 8002814:	200002ac 	.word	0x200002ac
 8002818:	200002a8 	.word	0x200002a8

0800281c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002820:	4b06      	ldr	r3, [pc, #24]	; (800283c <HAL_IncTick+0x20>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	461a      	mov	r2, r3
 8002826:	4b06      	ldr	r3, [pc, #24]	; (8002840 <HAL_IncTick+0x24>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4413      	add	r3, r2
 800282c:	4a04      	ldr	r2, [pc, #16]	; (8002840 <HAL_IncTick+0x24>)
 800282e:	6013      	str	r3, [r2, #0]
}
 8002830:	bf00      	nop
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	200002ac 	.word	0x200002ac
 8002840:	20002f30 	.word	0x20002f30

08002844 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  return uwTick;
 8002848:	4b03      	ldr	r3, [pc, #12]	; (8002858 <HAL_GetTick+0x14>)
 800284a:	681b      	ldr	r3, [r3, #0]
}
 800284c:	4618      	mov	r0, r3
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	20002f30 	.word	0x20002f30

0800285c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002864:	f7ff ffee 	bl	8002844 <HAL_GetTick>
 8002868:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002874:	d005      	beq.n	8002882 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002876:	4b0a      	ldr	r3, [pc, #40]	; (80028a0 <HAL_Delay+0x44>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	461a      	mov	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	4413      	add	r3, r2
 8002880:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002882:	bf00      	nop
 8002884:	f7ff ffde 	bl	8002844 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	429a      	cmp	r2, r3
 8002892:	d8f7      	bhi.n	8002884 <HAL_Delay+0x28>
  {
  }
}
 8002894:	bf00      	nop
 8002896:	bf00      	nop
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	200002ac 	.word	0x200002ac

080028a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f003 0307 	and.w	r3, r3, #7
 80028b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028b4:	4b0c      	ldr	r3, [pc, #48]	; (80028e8 <__NVIC_SetPriorityGrouping+0x44>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ba:	68ba      	ldr	r2, [r7, #8]
 80028bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028c0:	4013      	ands	r3, r2
 80028c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028d6:	4a04      	ldr	r2, [pc, #16]	; (80028e8 <__NVIC_SetPriorityGrouping+0x44>)
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	60d3      	str	r3, [r2, #12]
}
 80028dc:	bf00      	nop
 80028de:	3714      	adds	r7, #20
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	e000ed00 	.word	0xe000ed00

080028ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028f0:	4b04      	ldr	r3, [pc, #16]	; (8002904 <__NVIC_GetPriorityGrouping+0x18>)
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	0a1b      	lsrs	r3, r3, #8
 80028f6:	f003 0307 	and.w	r3, r3, #7
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr
 8002904:	e000ed00 	.word	0xe000ed00

08002908 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	4603      	mov	r3, r0
 8002910:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002916:	2b00      	cmp	r3, #0
 8002918:	db0b      	blt.n	8002932 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800291a:	79fb      	ldrb	r3, [r7, #7]
 800291c:	f003 021f 	and.w	r2, r3, #31
 8002920:	4907      	ldr	r1, [pc, #28]	; (8002940 <__NVIC_EnableIRQ+0x38>)
 8002922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002926:	095b      	lsrs	r3, r3, #5
 8002928:	2001      	movs	r0, #1
 800292a:	fa00 f202 	lsl.w	r2, r0, r2
 800292e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	e000e100 	.word	0xe000e100

08002944 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	4603      	mov	r3, r0
 800294c:	6039      	str	r1, [r7, #0]
 800294e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002954:	2b00      	cmp	r3, #0
 8002956:	db0a      	blt.n	800296e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	b2da      	uxtb	r2, r3
 800295c:	490c      	ldr	r1, [pc, #48]	; (8002990 <__NVIC_SetPriority+0x4c>)
 800295e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002962:	0112      	lsls	r2, r2, #4
 8002964:	b2d2      	uxtb	r2, r2
 8002966:	440b      	add	r3, r1
 8002968:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800296c:	e00a      	b.n	8002984 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	b2da      	uxtb	r2, r3
 8002972:	4908      	ldr	r1, [pc, #32]	; (8002994 <__NVIC_SetPriority+0x50>)
 8002974:	79fb      	ldrb	r3, [r7, #7]
 8002976:	f003 030f 	and.w	r3, r3, #15
 800297a:	3b04      	subs	r3, #4
 800297c:	0112      	lsls	r2, r2, #4
 800297e:	b2d2      	uxtb	r2, r2
 8002980:	440b      	add	r3, r1
 8002982:	761a      	strb	r2, [r3, #24]
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr
 8002990:	e000e100 	.word	0xe000e100
 8002994:	e000ed00 	.word	0xe000ed00

08002998 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002998:	b480      	push	{r7}
 800299a:	b089      	sub	sp, #36	; 0x24
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f003 0307 	and.w	r3, r3, #7
 80029aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	f1c3 0307 	rsb	r3, r3, #7
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	bf28      	it	cs
 80029b6:	2304      	movcs	r3, #4
 80029b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	3304      	adds	r3, #4
 80029be:	2b06      	cmp	r3, #6
 80029c0:	d902      	bls.n	80029c8 <NVIC_EncodePriority+0x30>
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	3b03      	subs	r3, #3
 80029c6:	e000      	b.n	80029ca <NVIC_EncodePriority+0x32>
 80029c8:	2300      	movs	r3, #0
 80029ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	fa02 f303 	lsl.w	r3, r2, r3
 80029d6:	43da      	mvns	r2, r3
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	401a      	ands	r2, r3
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	fa01 f303 	lsl.w	r3, r1, r3
 80029ea:	43d9      	mvns	r1, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f0:	4313      	orrs	r3, r2
         );
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3724      	adds	r7, #36	; 0x24
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
	...

08002a00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a10:	d301      	bcc.n	8002a16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a12:	2301      	movs	r3, #1
 8002a14:	e00f      	b.n	8002a36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a16:	4a0a      	ldr	r2, [pc, #40]	; (8002a40 <SysTick_Config+0x40>)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a1e:	210f      	movs	r1, #15
 8002a20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a24:	f7ff ff8e 	bl	8002944 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a28:	4b05      	ldr	r3, [pc, #20]	; (8002a40 <SysTick_Config+0x40>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a2e:	4b04      	ldr	r3, [pc, #16]	; (8002a40 <SysTick_Config+0x40>)
 8002a30:	2207      	movs	r2, #7
 8002a32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	e000e010 	.word	0xe000e010

08002a44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f7ff ff29 	bl	80028a4 <__NVIC_SetPriorityGrouping>
}
 8002a52:	bf00      	nop
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b086      	sub	sp, #24
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	4603      	mov	r3, r0
 8002a62:	60b9      	str	r1, [r7, #8]
 8002a64:	607a      	str	r2, [r7, #4]
 8002a66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a6c:	f7ff ff3e 	bl	80028ec <__NVIC_GetPriorityGrouping>
 8002a70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	68b9      	ldr	r1, [r7, #8]
 8002a76:	6978      	ldr	r0, [r7, #20]
 8002a78:	f7ff ff8e 	bl	8002998 <NVIC_EncodePriority>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a82:	4611      	mov	r1, r2
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7ff ff5d 	bl	8002944 <__NVIC_SetPriority>
}
 8002a8a:	bf00      	nop
 8002a8c:	3718      	adds	r7, #24
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b082      	sub	sp, #8
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	4603      	mov	r3, r0
 8002a9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff ff31 	bl	8002908 <__NVIC_EnableIRQ>
}
 8002aa6:	bf00      	nop
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b082      	sub	sp, #8
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f7ff ffa2 	bl	8002a00 <SysTick_Config>
 8002abc:	4603      	mov	r3, r0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
	...

08002ac8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ad4:	f7ff feb6 	bl	8002844 <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d101      	bne.n	8002ae4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e099      	b.n	8002c18 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2202      	movs	r2, #2
 8002ae8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f022 0201 	bic.w	r2, r2, #1
 8002b02:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b04:	e00f      	b.n	8002b26 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b06:	f7ff fe9d 	bl	8002844 <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	2b05      	cmp	r3, #5
 8002b12:	d908      	bls.n	8002b26 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2220      	movs	r2, #32
 8002b18:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2203      	movs	r2, #3
 8002b1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e078      	b.n	8002c18 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1e8      	bne.n	8002b06 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b3c:	697a      	ldr	r2, [r7, #20]
 8002b3e:	4b38      	ldr	r3, [pc, #224]	; (8002c20 <HAL_DMA_Init+0x158>)
 8002b40:	4013      	ands	r3, r2
 8002b42:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685a      	ldr	r2, [r3, #4]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b52:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a1b      	ldr	r3, [r3, #32]
 8002b70:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d107      	bne.n	8002b90 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	f023 0307 	bic.w	r3, r3, #7
 8002ba6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bac:	697a      	ldr	r2, [r7, #20]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb6:	2b04      	cmp	r3, #4
 8002bb8:	d117      	bne.n	8002bea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d00e      	beq.n	8002bea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f000 fa6f 	bl	80030b0 <DMA_CheckFifoParam>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d008      	beq.n	8002bea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2240      	movs	r2, #64	; 0x40
 8002bdc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2201      	movs	r2, #1
 8002be2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002be6:	2301      	movs	r3, #1
 8002be8:	e016      	b.n	8002c18 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	697a      	ldr	r2, [r7, #20]
 8002bf0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 fa26 	bl	8003044 <DMA_CalcBaseAndBitshift>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c00:	223f      	movs	r2, #63	; 0x3f
 8002c02:	409a      	lsls	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2201      	movs	r2, #1
 8002c12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3718      	adds	r7, #24
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	f010803f 	.word	0xf010803f

08002c24 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b086      	sub	sp, #24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
 8002c30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c32:	2300      	movs	r3, #0
 8002c34:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c3a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d101      	bne.n	8002c4a <HAL_DMA_Start_IT+0x26>
 8002c46:	2302      	movs	r3, #2
 8002c48:	e040      	b.n	8002ccc <HAL_DMA_Start_IT+0xa8>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d12f      	bne.n	8002cbe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2202      	movs	r2, #2
 8002c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	68b9      	ldr	r1, [r7, #8]
 8002c72:	68f8      	ldr	r0, [r7, #12]
 8002c74:	f000 f9b8 	bl	8002fe8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c7c:	223f      	movs	r2, #63	; 0x3f
 8002c7e:	409a      	lsls	r2, r3
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f042 0216 	orr.w	r2, r2, #22
 8002c92:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d007      	beq.n	8002cac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f042 0208 	orr.w	r2, r2, #8
 8002caa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f042 0201 	orr.w	r2, r2, #1
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	e005      	b.n	8002cca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002cca:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3718      	adds	r7, #24
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ce0:	4b92      	ldr	r3, [pc, #584]	; (8002f2c <HAL_DMA_IRQHandler+0x258>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a92      	ldr	r2, [pc, #584]	; (8002f30 <HAL_DMA_IRQHandler+0x25c>)
 8002ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cea:	0a9b      	lsrs	r3, r3, #10
 8002cec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cfe:	2208      	movs	r2, #8
 8002d00:	409a      	lsls	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	4013      	ands	r3, r2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d01a      	beq.n	8002d40 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0304 	and.w	r3, r3, #4
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d013      	beq.n	8002d40 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f022 0204 	bic.w	r2, r2, #4
 8002d26:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d2c:	2208      	movs	r2, #8
 8002d2e:	409a      	lsls	r2, r3
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d38:	f043 0201 	orr.w	r2, r3, #1
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d44:	2201      	movs	r2, #1
 8002d46:	409a      	lsls	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d012      	beq.n	8002d76 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00b      	beq.n	8002d76 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d62:	2201      	movs	r2, #1
 8002d64:	409a      	lsls	r2, r3
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d6e:	f043 0202 	orr.w	r2, r3, #2
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d7a:	2204      	movs	r2, #4
 8002d7c:	409a      	lsls	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	4013      	ands	r3, r2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d012      	beq.n	8002dac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0302 	and.w	r3, r3, #2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00b      	beq.n	8002dac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d98:	2204      	movs	r2, #4
 8002d9a:	409a      	lsls	r2, r3
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da4:	f043 0204 	orr.w	r2, r3, #4
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db0:	2210      	movs	r2, #16
 8002db2:	409a      	lsls	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	4013      	ands	r3, r2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d043      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0308 	and.w	r3, r3, #8
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d03c      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dce:	2210      	movs	r2, #16
 8002dd0:	409a      	lsls	r2, r3
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d018      	beq.n	8002e16 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d108      	bne.n	8002e04 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d024      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	4798      	blx	r3
 8002e02:	e01f      	b.n	8002e44 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d01b      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	4798      	blx	r3
 8002e14:	e016      	b.n	8002e44 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d107      	bne.n	8002e34 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f022 0208 	bic.w	r2, r2, #8
 8002e32:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d003      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e48:	2220      	movs	r2, #32
 8002e4a:	409a      	lsls	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	4013      	ands	r3, r2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	f000 808e 	beq.w	8002f72 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0310 	and.w	r3, r3, #16
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f000 8086 	beq.w	8002f72 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	409a      	lsls	r2, r3
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b05      	cmp	r3, #5
 8002e7c:	d136      	bne.n	8002eec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 0216 	bic.w	r2, r2, #22
 8002e8c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	695a      	ldr	r2, [r3, #20]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e9c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d103      	bne.n	8002eae <HAL_DMA_IRQHandler+0x1da>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d007      	beq.n	8002ebe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f022 0208 	bic.w	r2, r2, #8
 8002ebc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec2:	223f      	movs	r2, #63	; 0x3f
 8002ec4:	409a      	lsls	r2, r3
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d07d      	beq.n	8002fde <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	4798      	blx	r3
        }
        return;
 8002eea:	e078      	b.n	8002fde <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d01c      	beq.n	8002f34 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d108      	bne.n	8002f1a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d030      	beq.n	8002f72 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	4798      	blx	r3
 8002f18:	e02b      	b.n	8002f72 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d027      	beq.n	8002f72 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	4798      	blx	r3
 8002f2a:	e022      	b.n	8002f72 <HAL_DMA_IRQHandler+0x29e>
 8002f2c:	200002a4 	.word	0x200002a4
 8002f30:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d10f      	bne.n	8002f62 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f022 0210 	bic.w	r2, r2, #16
 8002f50:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2201      	movs	r2, #1
 8002f56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d003      	beq.n	8002f72 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d032      	beq.n	8002fe0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d022      	beq.n	8002fcc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2205      	movs	r2, #5
 8002f8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f022 0201 	bic.w	r2, r2, #1
 8002f9c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	60bb      	str	r3, [r7, #8]
 8002fa4:	697a      	ldr	r2, [r7, #20]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d307      	bcc.n	8002fba <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0301 	and.w	r3, r3, #1
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1f2      	bne.n	8002f9e <HAL_DMA_IRQHandler+0x2ca>
 8002fb8:	e000      	b.n	8002fbc <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002fba:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d005      	beq.n	8002fe0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	4798      	blx	r3
 8002fdc:	e000      	b.n	8002fe0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002fde:	bf00      	nop
    }
  }
}
 8002fe0:	3718      	adds	r7, #24
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop

08002fe8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
 8002ff4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003004:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	2b40      	cmp	r3, #64	; 0x40
 8003014:	d108      	bne.n	8003028 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68ba      	ldr	r2, [r7, #8]
 8003024:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003026:	e007      	b.n	8003038 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68ba      	ldr	r2, [r7, #8]
 800302e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	60da      	str	r2, [r3, #12]
}
 8003038:	bf00      	nop
 800303a:	3714      	adds	r7, #20
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003044:	b480      	push	{r7}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	b2db      	uxtb	r3, r3
 8003052:	3b10      	subs	r3, #16
 8003054:	4a14      	ldr	r2, [pc, #80]	; (80030a8 <DMA_CalcBaseAndBitshift+0x64>)
 8003056:	fba2 2303 	umull	r2, r3, r2, r3
 800305a:	091b      	lsrs	r3, r3, #4
 800305c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800305e:	4a13      	ldr	r2, [pc, #76]	; (80030ac <DMA_CalcBaseAndBitshift+0x68>)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	4413      	add	r3, r2
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	461a      	mov	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2b03      	cmp	r3, #3
 8003070:	d909      	bls.n	8003086 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800307a:	f023 0303 	bic.w	r3, r3, #3
 800307e:	1d1a      	adds	r2, r3, #4
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	659a      	str	r2, [r3, #88]	; 0x58
 8003084:	e007      	b.n	8003096 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800308e:	f023 0303 	bic.w	r3, r3, #3
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800309a:	4618      	mov	r0, r3
 800309c:	3714      	adds	r7, #20
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	aaaaaaab 	.word	0xaaaaaaab
 80030ac:	0800c734 	.word	0x0800c734

080030b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b085      	sub	sp, #20
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030b8:	2300      	movs	r3, #0
 80030ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d11f      	bne.n	800310a <DMA_CheckFifoParam+0x5a>
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	2b03      	cmp	r3, #3
 80030ce:	d856      	bhi.n	800317e <DMA_CheckFifoParam+0xce>
 80030d0:	a201      	add	r2, pc, #4	; (adr r2, 80030d8 <DMA_CheckFifoParam+0x28>)
 80030d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d6:	bf00      	nop
 80030d8:	080030e9 	.word	0x080030e9
 80030dc:	080030fb 	.word	0x080030fb
 80030e0:	080030e9 	.word	0x080030e9
 80030e4:	0800317f 	.word	0x0800317f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d046      	beq.n	8003182 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030f8:	e043      	b.n	8003182 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003102:	d140      	bne.n	8003186 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003108:	e03d      	b.n	8003186 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003112:	d121      	bne.n	8003158 <DMA_CheckFifoParam+0xa8>
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	2b03      	cmp	r3, #3
 8003118:	d837      	bhi.n	800318a <DMA_CheckFifoParam+0xda>
 800311a:	a201      	add	r2, pc, #4	; (adr r2, 8003120 <DMA_CheckFifoParam+0x70>)
 800311c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003120:	08003131 	.word	0x08003131
 8003124:	08003137 	.word	0x08003137
 8003128:	08003131 	.word	0x08003131
 800312c:	08003149 	.word	0x08003149
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	73fb      	strb	r3, [r7, #15]
      break;
 8003134:	e030      	b.n	8003198 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d025      	beq.n	800318e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003146:	e022      	b.n	800318e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003150:	d11f      	bne.n	8003192 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003156:	e01c      	b.n	8003192 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	2b02      	cmp	r3, #2
 800315c:	d903      	bls.n	8003166 <DMA_CheckFifoParam+0xb6>
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	2b03      	cmp	r3, #3
 8003162:	d003      	beq.n	800316c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003164:	e018      	b.n	8003198 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	73fb      	strb	r3, [r7, #15]
      break;
 800316a:	e015      	b.n	8003198 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003170:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00e      	beq.n	8003196 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	73fb      	strb	r3, [r7, #15]
      break;
 800317c:	e00b      	b.n	8003196 <DMA_CheckFifoParam+0xe6>
      break;
 800317e:	bf00      	nop
 8003180:	e00a      	b.n	8003198 <DMA_CheckFifoParam+0xe8>
      break;
 8003182:	bf00      	nop
 8003184:	e008      	b.n	8003198 <DMA_CheckFifoParam+0xe8>
      break;
 8003186:	bf00      	nop
 8003188:	e006      	b.n	8003198 <DMA_CheckFifoParam+0xe8>
      break;
 800318a:	bf00      	nop
 800318c:	e004      	b.n	8003198 <DMA_CheckFifoParam+0xe8>
      break;
 800318e:	bf00      	nop
 8003190:	e002      	b.n	8003198 <DMA_CheckFifoParam+0xe8>
      break;   
 8003192:	bf00      	nop
 8003194:	e000      	b.n	8003198 <DMA_CheckFifoParam+0xe8>
      break;
 8003196:	bf00      	nop
    }
  } 
  
  return status; 
 8003198:	7bfb      	ldrb	r3, [r7, #15]
}
 800319a:	4618      	mov	r0, r3
 800319c:	3714      	adds	r7, #20
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop

080031a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b089      	sub	sp, #36	; 0x24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031b2:	2300      	movs	r3, #0
 80031b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031b6:	2300      	movs	r3, #0
 80031b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031ba:	2300      	movs	r3, #0
 80031bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031be:	2300      	movs	r3, #0
 80031c0:	61fb      	str	r3, [r7, #28]
 80031c2:	e16b      	b.n	800349c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031c4:	2201      	movs	r2, #1
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	4013      	ands	r3, r2
 80031d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	429a      	cmp	r2, r3
 80031de:	f040 815a 	bne.w	8003496 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f003 0303 	and.w	r3, r3, #3
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d005      	beq.n	80031fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d130      	bne.n	800325c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	2203      	movs	r2, #3
 8003206:	fa02 f303 	lsl.w	r3, r2, r3
 800320a:	43db      	mvns	r3, r3
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	4013      	ands	r3, r2
 8003210:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	68da      	ldr	r2, [r3, #12]
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	fa02 f303 	lsl.w	r3, r2, r3
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	4313      	orrs	r3, r2
 8003222:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003230:	2201      	movs	r2, #1
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	43db      	mvns	r3, r3
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	4013      	ands	r3, r2
 800323e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	091b      	lsrs	r3, r3, #4
 8003246:	f003 0201 	and.w	r2, r3, #1
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	fa02 f303 	lsl.w	r3, r2, r3
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	4313      	orrs	r3, r2
 8003254:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f003 0303 	and.w	r3, r3, #3
 8003264:	2b03      	cmp	r3, #3
 8003266:	d017      	beq.n	8003298 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	2203      	movs	r2, #3
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	43db      	mvns	r3, r3
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	4013      	ands	r3, r2
 800327e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	689a      	ldr	r2, [r3, #8]
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	005b      	lsls	r3, r3, #1
 8003288:	fa02 f303 	lsl.w	r3, r2, r3
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	4313      	orrs	r3, r2
 8003290:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f003 0303 	and.w	r3, r3, #3
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d123      	bne.n	80032ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	08da      	lsrs	r2, r3, #3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	3208      	adds	r2, #8
 80032ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	f003 0307 	and.w	r3, r3, #7
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	220f      	movs	r2, #15
 80032bc:	fa02 f303 	lsl.w	r3, r2, r3
 80032c0:	43db      	mvns	r3, r3
 80032c2:	69ba      	ldr	r2, [r7, #24]
 80032c4:	4013      	ands	r3, r2
 80032c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	691a      	ldr	r2, [r3, #16]
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	f003 0307 	and.w	r3, r3, #7
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	fa02 f303 	lsl.w	r3, r2, r3
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	4313      	orrs	r3, r2
 80032dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	08da      	lsrs	r2, r3, #3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	3208      	adds	r2, #8
 80032e6:	69b9      	ldr	r1, [r7, #24]
 80032e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	2203      	movs	r2, #3
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	43db      	mvns	r3, r3
 80032fe:	69ba      	ldr	r2, [r7, #24]
 8003300:	4013      	ands	r3, r2
 8003302:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f003 0203 	and.w	r2, r3, #3
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	fa02 f303 	lsl.w	r3, r2, r3
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	4313      	orrs	r3, r2
 8003318:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003328:	2b00      	cmp	r3, #0
 800332a:	f000 80b4 	beq.w	8003496 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800332e:	2300      	movs	r3, #0
 8003330:	60fb      	str	r3, [r7, #12]
 8003332:	4b60      	ldr	r3, [pc, #384]	; (80034b4 <HAL_GPIO_Init+0x30c>)
 8003334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003336:	4a5f      	ldr	r2, [pc, #380]	; (80034b4 <HAL_GPIO_Init+0x30c>)
 8003338:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800333c:	6453      	str	r3, [r2, #68]	; 0x44
 800333e:	4b5d      	ldr	r3, [pc, #372]	; (80034b4 <HAL_GPIO_Init+0x30c>)
 8003340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003342:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003346:	60fb      	str	r3, [r7, #12]
 8003348:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800334a:	4a5b      	ldr	r2, [pc, #364]	; (80034b8 <HAL_GPIO_Init+0x310>)
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	089b      	lsrs	r3, r3, #2
 8003350:	3302      	adds	r3, #2
 8003352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003356:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	f003 0303 	and.w	r3, r3, #3
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	220f      	movs	r2, #15
 8003362:	fa02 f303 	lsl.w	r3, r2, r3
 8003366:	43db      	mvns	r3, r3
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	4013      	ands	r3, r2
 800336c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a52      	ldr	r2, [pc, #328]	; (80034bc <HAL_GPIO_Init+0x314>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d02b      	beq.n	80033ce <HAL_GPIO_Init+0x226>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a51      	ldr	r2, [pc, #324]	; (80034c0 <HAL_GPIO_Init+0x318>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d025      	beq.n	80033ca <HAL_GPIO_Init+0x222>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a50      	ldr	r2, [pc, #320]	; (80034c4 <HAL_GPIO_Init+0x31c>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d01f      	beq.n	80033c6 <HAL_GPIO_Init+0x21e>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a4f      	ldr	r2, [pc, #316]	; (80034c8 <HAL_GPIO_Init+0x320>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d019      	beq.n	80033c2 <HAL_GPIO_Init+0x21a>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a4e      	ldr	r2, [pc, #312]	; (80034cc <HAL_GPIO_Init+0x324>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d013      	beq.n	80033be <HAL_GPIO_Init+0x216>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a4d      	ldr	r2, [pc, #308]	; (80034d0 <HAL_GPIO_Init+0x328>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d00d      	beq.n	80033ba <HAL_GPIO_Init+0x212>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a4c      	ldr	r2, [pc, #304]	; (80034d4 <HAL_GPIO_Init+0x32c>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d007      	beq.n	80033b6 <HAL_GPIO_Init+0x20e>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a4b      	ldr	r2, [pc, #300]	; (80034d8 <HAL_GPIO_Init+0x330>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d101      	bne.n	80033b2 <HAL_GPIO_Init+0x20a>
 80033ae:	2307      	movs	r3, #7
 80033b0:	e00e      	b.n	80033d0 <HAL_GPIO_Init+0x228>
 80033b2:	2308      	movs	r3, #8
 80033b4:	e00c      	b.n	80033d0 <HAL_GPIO_Init+0x228>
 80033b6:	2306      	movs	r3, #6
 80033b8:	e00a      	b.n	80033d0 <HAL_GPIO_Init+0x228>
 80033ba:	2305      	movs	r3, #5
 80033bc:	e008      	b.n	80033d0 <HAL_GPIO_Init+0x228>
 80033be:	2304      	movs	r3, #4
 80033c0:	e006      	b.n	80033d0 <HAL_GPIO_Init+0x228>
 80033c2:	2303      	movs	r3, #3
 80033c4:	e004      	b.n	80033d0 <HAL_GPIO_Init+0x228>
 80033c6:	2302      	movs	r3, #2
 80033c8:	e002      	b.n	80033d0 <HAL_GPIO_Init+0x228>
 80033ca:	2301      	movs	r3, #1
 80033cc:	e000      	b.n	80033d0 <HAL_GPIO_Init+0x228>
 80033ce:	2300      	movs	r3, #0
 80033d0:	69fa      	ldr	r2, [r7, #28]
 80033d2:	f002 0203 	and.w	r2, r2, #3
 80033d6:	0092      	lsls	r2, r2, #2
 80033d8:	4093      	lsls	r3, r2
 80033da:	69ba      	ldr	r2, [r7, #24]
 80033dc:	4313      	orrs	r3, r2
 80033de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033e0:	4935      	ldr	r1, [pc, #212]	; (80034b8 <HAL_GPIO_Init+0x310>)
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	089b      	lsrs	r3, r3, #2
 80033e6:	3302      	adds	r3, #2
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033ee:	4b3b      	ldr	r3, [pc, #236]	; (80034dc <HAL_GPIO_Init+0x334>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	43db      	mvns	r3, r3
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	4013      	ands	r3, r2
 80033fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d003      	beq.n	8003412 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800340a:	69ba      	ldr	r2, [r7, #24]
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	4313      	orrs	r3, r2
 8003410:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003412:	4a32      	ldr	r2, [pc, #200]	; (80034dc <HAL_GPIO_Init+0x334>)
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003418:	4b30      	ldr	r3, [pc, #192]	; (80034dc <HAL_GPIO_Init+0x334>)
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	43db      	mvns	r3, r3
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	4013      	ands	r3, r2
 8003426:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d003      	beq.n	800343c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	4313      	orrs	r3, r2
 800343a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800343c:	4a27      	ldr	r2, [pc, #156]	; (80034dc <HAL_GPIO_Init+0x334>)
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003442:	4b26      	ldr	r3, [pc, #152]	; (80034dc <HAL_GPIO_Init+0x334>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	43db      	mvns	r3, r3
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	4013      	ands	r3, r2
 8003450:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	4313      	orrs	r3, r2
 8003464:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003466:	4a1d      	ldr	r2, [pc, #116]	; (80034dc <HAL_GPIO_Init+0x334>)
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800346c:	4b1b      	ldr	r3, [pc, #108]	; (80034dc <HAL_GPIO_Init+0x334>)
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	43db      	mvns	r3, r3
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	4013      	ands	r3, r2
 800347a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d003      	beq.n	8003490 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	4313      	orrs	r3, r2
 800348e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003490:	4a12      	ldr	r2, [pc, #72]	; (80034dc <HAL_GPIO_Init+0x334>)
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	3301      	adds	r3, #1
 800349a:	61fb      	str	r3, [r7, #28]
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	2b0f      	cmp	r3, #15
 80034a0:	f67f ae90 	bls.w	80031c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034a4:	bf00      	nop
 80034a6:	bf00      	nop
 80034a8:	3724      	adds	r7, #36	; 0x24
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	40023800 	.word	0x40023800
 80034b8:	40013800 	.word	0x40013800
 80034bc:	40020000 	.word	0x40020000
 80034c0:	40020400 	.word	0x40020400
 80034c4:	40020800 	.word	0x40020800
 80034c8:	40020c00 	.word	0x40020c00
 80034cc:	40021000 	.word	0x40021000
 80034d0:	40021400 	.word	0x40021400
 80034d4:	40021800 	.word	0x40021800
 80034d8:	40021c00 	.word	0x40021c00
 80034dc:	40013c00 	.word	0x40013c00

080034e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	460b      	mov	r3, r1
 80034ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	691a      	ldr	r2, [r3, #16]
 80034f0:	887b      	ldrh	r3, [r7, #2]
 80034f2:	4013      	ands	r3, r2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d002      	beq.n	80034fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034f8:	2301      	movs	r3, #1
 80034fa:	73fb      	strb	r3, [r7, #15]
 80034fc:	e001      	b.n	8003502 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034fe:	2300      	movs	r3, #0
 8003500:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003502:	7bfb      	ldrb	r3, [r7, #15]
}
 8003504:	4618      	mov	r0, r3
 8003506:	3714      	adds	r7, #20
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	460b      	mov	r3, r1
 800351a:	807b      	strh	r3, [r7, #2]
 800351c:	4613      	mov	r3, r2
 800351e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003520:	787b      	ldrb	r3, [r7, #1]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d003      	beq.n	800352e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003526:	887a      	ldrh	r2, [r7, #2]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800352c:	e003      	b.n	8003536 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800352e:	887b      	ldrh	r3, [r7, #2]
 8003530:	041a      	lsls	r2, r3, #16
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	619a      	str	r2, [r3, #24]
}
 8003536:	bf00      	nop
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr

08003542 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003542:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003544:	b08f      	sub	sp, #60	; 0x3c
 8003546:	af0a      	add	r7, sp, #40	; 0x28
 8003548:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d101      	bne.n	8003554 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e054      	b.n	80035fe <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d106      	bne.n	8003574 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f008 fb3e 	bl	800bbf0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2203      	movs	r2, #3
 8003578:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003584:	2b00      	cmp	r3, #0
 8003586:	d102      	bne.n	800358e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4618      	mov	r0, r3
 8003594:	f004 fb26 	bl	8007be4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	603b      	str	r3, [r7, #0]
 800359e:	687e      	ldr	r6, [r7, #4]
 80035a0:	466d      	mov	r5, sp
 80035a2:	f106 0410 	add.w	r4, r6, #16
 80035a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80035b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80035b6:	1d33      	adds	r3, r6, #4
 80035b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035ba:	6838      	ldr	r0, [r7, #0]
 80035bc:	f004 faa0 	bl	8007b00 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2101      	movs	r1, #1
 80035c6:	4618      	mov	r0, r3
 80035c8:	f004 fb1d 	bl	8007c06 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	603b      	str	r3, [r7, #0]
 80035d2:	687e      	ldr	r6, [r7, #4]
 80035d4:	466d      	mov	r5, sp
 80035d6:	f106 0410 	add.w	r4, r6, #16
 80035da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035e2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80035e6:	e885 0003 	stmia.w	r5, {r0, r1}
 80035ea:	1d33      	adds	r3, r6, #4
 80035ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035ee:	6838      	ldr	r0, [r7, #0]
 80035f0:	f004 fc84 	bl	8007efc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3714      	adds	r7, #20
 8003602:	46bd      	mov	sp, r7
 8003604:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003606 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003606:	b590      	push	{r4, r7, lr}
 8003608:	b089      	sub	sp, #36	; 0x24
 800360a:	af04      	add	r7, sp, #16
 800360c:	6078      	str	r0, [r7, #4]
 800360e:	4608      	mov	r0, r1
 8003610:	4611      	mov	r1, r2
 8003612:	461a      	mov	r2, r3
 8003614:	4603      	mov	r3, r0
 8003616:	70fb      	strb	r3, [r7, #3]
 8003618:	460b      	mov	r3, r1
 800361a:	70bb      	strb	r3, [r7, #2]
 800361c:	4613      	mov	r3, r2
 800361e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003626:	2b01      	cmp	r3, #1
 8003628:	d101      	bne.n	800362e <HAL_HCD_HC_Init+0x28>
 800362a:	2302      	movs	r3, #2
 800362c:	e076      	b.n	800371c <HAL_HCD_HC_Init+0x116>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2201      	movs	r2, #1
 8003632:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003636:	78fb      	ldrb	r3, [r7, #3]
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	212c      	movs	r1, #44	; 0x2c
 800363c:	fb01 f303 	mul.w	r3, r1, r3
 8003640:	4413      	add	r3, r2
 8003642:	333d      	adds	r3, #61	; 0x3d
 8003644:	2200      	movs	r2, #0
 8003646:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003648:	78fb      	ldrb	r3, [r7, #3]
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	212c      	movs	r1, #44	; 0x2c
 800364e:	fb01 f303 	mul.w	r3, r1, r3
 8003652:	4413      	add	r3, r2
 8003654:	3338      	adds	r3, #56	; 0x38
 8003656:	787a      	ldrb	r2, [r7, #1]
 8003658:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800365a:	78fb      	ldrb	r3, [r7, #3]
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	212c      	movs	r1, #44	; 0x2c
 8003660:	fb01 f303 	mul.w	r3, r1, r3
 8003664:	4413      	add	r3, r2
 8003666:	3340      	adds	r3, #64	; 0x40
 8003668:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800366a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800366c:	78fb      	ldrb	r3, [r7, #3]
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	212c      	movs	r1, #44	; 0x2c
 8003672:	fb01 f303 	mul.w	r3, r1, r3
 8003676:	4413      	add	r3, r2
 8003678:	3339      	adds	r3, #57	; 0x39
 800367a:	78fa      	ldrb	r2, [r7, #3]
 800367c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800367e:	78fb      	ldrb	r3, [r7, #3]
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	212c      	movs	r1, #44	; 0x2c
 8003684:	fb01 f303 	mul.w	r3, r1, r3
 8003688:	4413      	add	r3, r2
 800368a:	333f      	adds	r3, #63	; 0x3f
 800368c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003690:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003692:	78fb      	ldrb	r3, [r7, #3]
 8003694:	78ba      	ldrb	r2, [r7, #2]
 8003696:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800369a:	b2d0      	uxtb	r0, r2
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	212c      	movs	r1, #44	; 0x2c
 80036a0:	fb01 f303 	mul.w	r3, r1, r3
 80036a4:	4413      	add	r3, r2
 80036a6:	333a      	adds	r3, #58	; 0x3a
 80036a8:	4602      	mov	r2, r0
 80036aa:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80036ac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	da09      	bge.n	80036c8 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80036b4:	78fb      	ldrb	r3, [r7, #3]
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	212c      	movs	r1, #44	; 0x2c
 80036ba:	fb01 f303 	mul.w	r3, r1, r3
 80036be:	4413      	add	r3, r2
 80036c0:	333b      	adds	r3, #59	; 0x3b
 80036c2:	2201      	movs	r2, #1
 80036c4:	701a      	strb	r2, [r3, #0]
 80036c6:	e008      	b.n	80036da <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80036c8:	78fb      	ldrb	r3, [r7, #3]
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	212c      	movs	r1, #44	; 0x2c
 80036ce:	fb01 f303 	mul.w	r3, r1, r3
 80036d2:	4413      	add	r3, r2
 80036d4:	333b      	adds	r3, #59	; 0x3b
 80036d6:	2200      	movs	r2, #0
 80036d8:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80036da:	78fb      	ldrb	r3, [r7, #3]
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	212c      	movs	r1, #44	; 0x2c
 80036e0:	fb01 f303 	mul.w	r3, r1, r3
 80036e4:	4413      	add	r3, r2
 80036e6:	333c      	adds	r3, #60	; 0x3c
 80036e8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80036ec:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6818      	ldr	r0, [r3, #0]
 80036f2:	787c      	ldrb	r4, [r7, #1]
 80036f4:	78ba      	ldrb	r2, [r7, #2]
 80036f6:	78f9      	ldrb	r1, [r7, #3]
 80036f8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80036fa:	9302      	str	r3, [sp, #8]
 80036fc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003700:	9301      	str	r3, [sp, #4]
 8003702:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003706:	9300      	str	r3, [sp, #0]
 8003708:	4623      	mov	r3, r4
 800370a:	f004 fd71 	bl	80081f0 <USB_HC_Init>
 800370e:	4603      	mov	r3, r0
 8003710:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800371a:	7bfb      	ldrb	r3, [r7, #15]
}
 800371c:	4618      	mov	r0, r3
 800371e:	3714      	adds	r7, #20
 8003720:	46bd      	mov	sp, r7
 8003722:	bd90      	pop	{r4, r7, pc}

08003724 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	460b      	mov	r3, r1
 800372e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003730:	2300      	movs	r3, #0
 8003732:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800373a:	2b01      	cmp	r3, #1
 800373c:	d101      	bne.n	8003742 <HAL_HCD_HC_Halt+0x1e>
 800373e:	2302      	movs	r3, #2
 8003740:	e00f      	b.n	8003762 <HAL_HCD_HC_Halt+0x3e>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	78fa      	ldrb	r2, [r7, #3]
 8003750:	4611      	mov	r1, r2
 8003752:	4618      	mov	r0, r3
 8003754:	f004 ffad 	bl	80086b2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003760:	7bfb      	ldrb	r3, [r7, #15]
}
 8003762:	4618      	mov	r0, r3
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
	...

0800376c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	4608      	mov	r0, r1
 8003776:	4611      	mov	r1, r2
 8003778:	461a      	mov	r2, r3
 800377a:	4603      	mov	r3, r0
 800377c:	70fb      	strb	r3, [r7, #3]
 800377e:	460b      	mov	r3, r1
 8003780:	70bb      	strb	r3, [r7, #2]
 8003782:	4613      	mov	r3, r2
 8003784:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003786:	78fb      	ldrb	r3, [r7, #3]
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	212c      	movs	r1, #44	; 0x2c
 800378c:	fb01 f303 	mul.w	r3, r1, r3
 8003790:	4413      	add	r3, r2
 8003792:	333b      	adds	r3, #59	; 0x3b
 8003794:	78ba      	ldrb	r2, [r7, #2]
 8003796:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003798:	78fb      	ldrb	r3, [r7, #3]
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	212c      	movs	r1, #44	; 0x2c
 800379e:	fb01 f303 	mul.w	r3, r1, r3
 80037a2:	4413      	add	r3, r2
 80037a4:	333f      	adds	r3, #63	; 0x3f
 80037a6:	787a      	ldrb	r2, [r7, #1]
 80037a8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80037aa:	7c3b      	ldrb	r3, [r7, #16]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d112      	bne.n	80037d6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80037b0:	78fb      	ldrb	r3, [r7, #3]
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	212c      	movs	r1, #44	; 0x2c
 80037b6:	fb01 f303 	mul.w	r3, r1, r3
 80037ba:	4413      	add	r3, r2
 80037bc:	3342      	adds	r3, #66	; 0x42
 80037be:	2203      	movs	r2, #3
 80037c0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80037c2:	78fb      	ldrb	r3, [r7, #3]
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	212c      	movs	r1, #44	; 0x2c
 80037c8:	fb01 f303 	mul.w	r3, r1, r3
 80037cc:	4413      	add	r3, r2
 80037ce:	333d      	adds	r3, #61	; 0x3d
 80037d0:	7f3a      	ldrb	r2, [r7, #28]
 80037d2:	701a      	strb	r2, [r3, #0]
 80037d4:	e008      	b.n	80037e8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80037d6:	78fb      	ldrb	r3, [r7, #3]
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	212c      	movs	r1, #44	; 0x2c
 80037dc:	fb01 f303 	mul.w	r3, r1, r3
 80037e0:	4413      	add	r3, r2
 80037e2:	3342      	adds	r3, #66	; 0x42
 80037e4:	2202      	movs	r2, #2
 80037e6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80037e8:	787b      	ldrb	r3, [r7, #1]
 80037ea:	2b03      	cmp	r3, #3
 80037ec:	f200 80c6 	bhi.w	800397c <HAL_HCD_HC_SubmitRequest+0x210>
 80037f0:	a201      	add	r2, pc, #4	; (adr r2, 80037f8 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80037f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037f6:	bf00      	nop
 80037f8:	08003809 	.word	0x08003809
 80037fc:	08003969 	.word	0x08003969
 8003800:	0800386d 	.word	0x0800386d
 8003804:	080038eb 	.word	0x080038eb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003808:	7c3b      	ldrb	r3, [r7, #16]
 800380a:	2b01      	cmp	r3, #1
 800380c:	f040 80b8 	bne.w	8003980 <HAL_HCD_HC_SubmitRequest+0x214>
 8003810:	78bb      	ldrb	r3, [r7, #2]
 8003812:	2b00      	cmp	r3, #0
 8003814:	f040 80b4 	bne.w	8003980 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003818:	8b3b      	ldrh	r3, [r7, #24]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d108      	bne.n	8003830 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800381e:	78fb      	ldrb	r3, [r7, #3]
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	212c      	movs	r1, #44	; 0x2c
 8003824:	fb01 f303 	mul.w	r3, r1, r3
 8003828:	4413      	add	r3, r2
 800382a:	3355      	adds	r3, #85	; 0x55
 800382c:	2201      	movs	r2, #1
 800382e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003830:	78fb      	ldrb	r3, [r7, #3]
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	212c      	movs	r1, #44	; 0x2c
 8003836:	fb01 f303 	mul.w	r3, r1, r3
 800383a:	4413      	add	r3, r2
 800383c:	3355      	adds	r3, #85	; 0x55
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d109      	bne.n	8003858 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003844:	78fb      	ldrb	r3, [r7, #3]
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	212c      	movs	r1, #44	; 0x2c
 800384a:	fb01 f303 	mul.w	r3, r1, r3
 800384e:	4413      	add	r3, r2
 8003850:	3342      	adds	r3, #66	; 0x42
 8003852:	2200      	movs	r2, #0
 8003854:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003856:	e093      	b.n	8003980 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003858:	78fb      	ldrb	r3, [r7, #3]
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	212c      	movs	r1, #44	; 0x2c
 800385e:	fb01 f303 	mul.w	r3, r1, r3
 8003862:	4413      	add	r3, r2
 8003864:	3342      	adds	r3, #66	; 0x42
 8003866:	2202      	movs	r2, #2
 8003868:	701a      	strb	r2, [r3, #0]
      break;
 800386a:	e089      	b.n	8003980 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800386c:	78bb      	ldrb	r3, [r7, #2]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d11d      	bne.n	80038ae <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003872:	78fb      	ldrb	r3, [r7, #3]
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	212c      	movs	r1, #44	; 0x2c
 8003878:	fb01 f303 	mul.w	r3, r1, r3
 800387c:	4413      	add	r3, r2
 800387e:	3355      	adds	r3, #85	; 0x55
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d109      	bne.n	800389a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003886:	78fb      	ldrb	r3, [r7, #3]
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	212c      	movs	r1, #44	; 0x2c
 800388c:	fb01 f303 	mul.w	r3, r1, r3
 8003890:	4413      	add	r3, r2
 8003892:	3342      	adds	r3, #66	; 0x42
 8003894:	2200      	movs	r2, #0
 8003896:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003898:	e073      	b.n	8003982 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800389a:	78fb      	ldrb	r3, [r7, #3]
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	212c      	movs	r1, #44	; 0x2c
 80038a0:	fb01 f303 	mul.w	r3, r1, r3
 80038a4:	4413      	add	r3, r2
 80038a6:	3342      	adds	r3, #66	; 0x42
 80038a8:	2202      	movs	r2, #2
 80038aa:	701a      	strb	r2, [r3, #0]
      break;
 80038ac:	e069      	b.n	8003982 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80038ae:	78fb      	ldrb	r3, [r7, #3]
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	212c      	movs	r1, #44	; 0x2c
 80038b4:	fb01 f303 	mul.w	r3, r1, r3
 80038b8:	4413      	add	r3, r2
 80038ba:	3354      	adds	r3, #84	; 0x54
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d109      	bne.n	80038d6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80038c2:	78fb      	ldrb	r3, [r7, #3]
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	212c      	movs	r1, #44	; 0x2c
 80038c8:	fb01 f303 	mul.w	r3, r1, r3
 80038cc:	4413      	add	r3, r2
 80038ce:	3342      	adds	r3, #66	; 0x42
 80038d0:	2200      	movs	r2, #0
 80038d2:	701a      	strb	r2, [r3, #0]
      break;
 80038d4:	e055      	b.n	8003982 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80038d6:	78fb      	ldrb	r3, [r7, #3]
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	212c      	movs	r1, #44	; 0x2c
 80038dc:	fb01 f303 	mul.w	r3, r1, r3
 80038e0:	4413      	add	r3, r2
 80038e2:	3342      	adds	r3, #66	; 0x42
 80038e4:	2202      	movs	r2, #2
 80038e6:	701a      	strb	r2, [r3, #0]
      break;
 80038e8:	e04b      	b.n	8003982 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80038ea:	78bb      	ldrb	r3, [r7, #2]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d11d      	bne.n	800392c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80038f0:	78fb      	ldrb	r3, [r7, #3]
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	212c      	movs	r1, #44	; 0x2c
 80038f6:	fb01 f303 	mul.w	r3, r1, r3
 80038fa:	4413      	add	r3, r2
 80038fc:	3355      	adds	r3, #85	; 0x55
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d109      	bne.n	8003918 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003904:	78fb      	ldrb	r3, [r7, #3]
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	212c      	movs	r1, #44	; 0x2c
 800390a:	fb01 f303 	mul.w	r3, r1, r3
 800390e:	4413      	add	r3, r2
 8003910:	3342      	adds	r3, #66	; 0x42
 8003912:	2200      	movs	r2, #0
 8003914:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003916:	e034      	b.n	8003982 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003918:	78fb      	ldrb	r3, [r7, #3]
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	212c      	movs	r1, #44	; 0x2c
 800391e:	fb01 f303 	mul.w	r3, r1, r3
 8003922:	4413      	add	r3, r2
 8003924:	3342      	adds	r3, #66	; 0x42
 8003926:	2202      	movs	r2, #2
 8003928:	701a      	strb	r2, [r3, #0]
      break;
 800392a:	e02a      	b.n	8003982 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800392c:	78fb      	ldrb	r3, [r7, #3]
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	212c      	movs	r1, #44	; 0x2c
 8003932:	fb01 f303 	mul.w	r3, r1, r3
 8003936:	4413      	add	r3, r2
 8003938:	3354      	adds	r3, #84	; 0x54
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d109      	bne.n	8003954 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003940:	78fb      	ldrb	r3, [r7, #3]
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	212c      	movs	r1, #44	; 0x2c
 8003946:	fb01 f303 	mul.w	r3, r1, r3
 800394a:	4413      	add	r3, r2
 800394c:	3342      	adds	r3, #66	; 0x42
 800394e:	2200      	movs	r2, #0
 8003950:	701a      	strb	r2, [r3, #0]
      break;
 8003952:	e016      	b.n	8003982 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003954:	78fb      	ldrb	r3, [r7, #3]
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	212c      	movs	r1, #44	; 0x2c
 800395a:	fb01 f303 	mul.w	r3, r1, r3
 800395e:	4413      	add	r3, r2
 8003960:	3342      	adds	r3, #66	; 0x42
 8003962:	2202      	movs	r2, #2
 8003964:	701a      	strb	r2, [r3, #0]
      break;
 8003966:	e00c      	b.n	8003982 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003968:	78fb      	ldrb	r3, [r7, #3]
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	212c      	movs	r1, #44	; 0x2c
 800396e:	fb01 f303 	mul.w	r3, r1, r3
 8003972:	4413      	add	r3, r2
 8003974:	3342      	adds	r3, #66	; 0x42
 8003976:	2200      	movs	r2, #0
 8003978:	701a      	strb	r2, [r3, #0]
      break;
 800397a:	e002      	b.n	8003982 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800397c:	bf00      	nop
 800397e:	e000      	b.n	8003982 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003980:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003982:	78fb      	ldrb	r3, [r7, #3]
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	212c      	movs	r1, #44	; 0x2c
 8003988:	fb01 f303 	mul.w	r3, r1, r3
 800398c:	4413      	add	r3, r2
 800398e:	3344      	adds	r3, #68	; 0x44
 8003990:	697a      	ldr	r2, [r7, #20]
 8003992:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003994:	78fb      	ldrb	r3, [r7, #3]
 8003996:	8b3a      	ldrh	r2, [r7, #24]
 8003998:	6879      	ldr	r1, [r7, #4]
 800399a:	202c      	movs	r0, #44	; 0x2c
 800399c:	fb00 f303 	mul.w	r3, r0, r3
 80039a0:	440b      	add	r3, r1
 80039a2:	334c      	adds	r3, #76	; 0x4c
 80039a4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80039a6:	78fb      	ldrb	r3, [r7, #3]
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	212c      	movs	r1, #44	; 0x2c
 80039ac:	fb01 f303 	mul.w	r3, r1, r3
 80039b0:	4413      	add	r3, r2
 80039b2:	3360      	adds	r3, #96	; 0x60
 80039b4:	2200      	movs	r2, #0
 80039b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80039b8:	78fb      	ldrb	r3, [r7, #3]
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	212c      	movs	r1, #44	; 0x2c
 80039be:	fb01 f303 	mul.w	r3, r1, r3
 80039c2:	4413      	add	r3, r2
 80039c4:	3350      	adds	r3, #80	; 0x50
 80039c6:	2200      	movs	r2, #0
 80039c8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80039ca:	78fb      	ldrb	r3, [r7, #3]
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	212c      	movs	r1, #44	; 0x2c
 80039d0:	fb01 f303 	mul.w	r3, r1, r3
 80039d4:	4413      	add	r3, r2
 80039d6:	3339      	adds	r3, #57	; 0x39
 80039d8:	78fa      	ldrb	r2, [r7, #3]
 80039da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80039dc:	78fb      	ldrb	r3, [r7, #3]
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	212c      	movs	r1, #44	; 0x2c
 80039e2:	fb01 f303 	mul.w	r3, r1, r3
 80039e6:	4413      	add	r3, r2
 80039e8:	3361      	adds	r3, #97	; 0x61
 80039ea:	2200      	movs	r2, #0
 80039ec:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6818      	ldr	r0, [r3, #0]
 80039f2:	78fb      	ldrb	r3, [r7, #3]
 80039f4:	222c      	movs	r2, #44	; 0x2c
 80039f6:	fb02 f303 	mul.w	r3, r2, r3
 80039fa:	3338      	adds	r3, #56	; 0x38
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	18d1      	adds	r1, r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	461a      	mov	r2, r3
 8003a08:	f004 fd00 	bl	800840c <USB_HC_StartXfer>
 8003a0c:	4603      	mov	r3, r0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3708      	adds	r7, #8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop

08003a18 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b086      	sub	sp, #24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f004 fa23 	bl	8007e7a <USB_GetMode>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	f040 80f6 	bne.w	8003c28 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f004 fa07 	bl	8007e54 <USB_ReadInterrupts>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f000 80ec 	beq.w	8003c26 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f004 f9fe 	bl	8007e54 <USB_ReadInterrupts>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a62:	d104      	bne.n	8003a6e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003a6c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f004 f9ee 	bl	8007e54 <USB_ReadInterrupts>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a82:	d104      	bne.n	8003a8e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003a8c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f004 f9de 	bl	8007e54 <USB_ReadInterrupts>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a9e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003aa2:	d104      	bne.n	8003aae <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003aac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f004 f9ce 	bl	8007e54 <USB_ReadInterrupts>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d103      	bne.n	8003aca <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f004 f9c0 	bl	8007e54 <USB_ReadInterrupts>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ada:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ade:	d11c      	bne.n	8003b1a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003ae8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d10f      	bne.n	8003b1a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003afa:	2110      	movs	r1, #16
 8003afc:	6938      	ldr	r0, [r7, #16]
 8003afe:	f004 f8cf 	bl	8007ca0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003b02:	6938      	ldr	r0, [r7, #16]
 8003b04:	f004 f8f0 	bl	8007ce8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2101      	movs	r1, #1
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f004 faa8 	bl	8008064 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f008 f8e9 	bl	800bcec <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f004 f998 	bl	8007e54 <USB_ReadInterrupts>
 8003b24:	4603      	mov	r3, r0
 8003b26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b2a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b2e:	d102      	bne.n	8003b36 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f001 fa03 	bl	8004f3c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f004 f98a 	bl	8007e54 <USB_ReadInterrupts>
 8003b40:	4603      	mov	r3, r0
 8003b42:	f003 0308 	and.w	r3, r3, #8
 8003b46:	2b08      	cmp	r3, #8
 8003b48:	d106      	bne.n	8003b58 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f008 f8b2 	bl	800bcb4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2208      	movs	r2, #8
 8003b56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f004 f979 	bl	8007e54 <USB_ReadInterrupts>
 8003b62:	4603      	mov	r3, r0
 8003b64:	f003 0310 	and.w	r3, r3, #16
 8003b68:	2b10      	cmp	r3, #16
 8003b6a:	d101      	bne.n	8003b70 <HAL_HCD_IRQHandler+0x158>
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e000      	b.n	8003b72 <HAL_HCD_IRQHandler+0x15a>
 8003b70:	2300      	movs	r3, #0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d012      	beq.n	8003b9c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	699a      	ldr	r2, [r3, #24]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f022 0210 	bic.w	r2, r2, #16
 8003b84:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f001 f906 	bl	8004d98 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	699a      	ldr	r2, [r3, #24]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f042 0210 	orr.w	r2, r2, #16
 8003b9a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f004 f957 	bl	8007e54 <USB_ReadInterrupts>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003bb0:	d13a      	bne.n	8003c28 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f004 fd6a 	bl	8008690 <USB_HC_ReadInterrupt>
 8003bbc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	617b      	str	r3, [r7, #20]
 8003bc2:	e025      	b.n	8003c10 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	f003 030f 	and.w	r3, r3, #15
 8003bca:	68ba      	ldr	r2, [r7, #8]
 8003bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8003bd0:	f003 0301 	and.w	r3, r3, #1
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d018      	beq.n	8003c0a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	015a      	lsls	r2, r3, #5
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	4413      	add	r3, r2
 8003be0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bee:	d106      	bne.n	8003bfe <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 f8ab 	bl	8003d52 <HCD_HC_IN_IRQHandler>
 8003bfc:	e005      	b.n	8003c0a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	4619      	mov	r1, r3
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f000 fcc6 	bl	8004596 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	617b      	str	r3, [r7, #20]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	697a      	ldr	r2, [r7, #20]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d3d4      	bcc.n	8003bc4 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c22:	615a      	str	r2, [r3, #20]
 8003c24:	e000      	b.n	8003c28 <HAL_HCD_IRQHandler+0x210>
      return;
 8003c26:	bf00      	nop
    }
  }
}
 8003c28:	3718      	adds	r7, #24
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b082      	sub	sp, #8
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d101      	bne.n	8003c44 <HAL_HCD_Start+0x16>
 8003c40:	2302      	movs	r3, #2
 8003c42:	e013      	b.n	8003c6c <HAL_HCD_Start+0x3e>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2101      	movs	r1, #1
 8003c52:	4618      	mov	r0, r3
 8003c54:	f004 fa6a 	bl	800812c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f003 ffb0 	bl	8007bc2 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3708      	adds	r7, #8
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d101      	bne.n	8003c8a <HAL_HCD_Stop+0x16>
 8003c86:	2302      	movs	r3, #2
 8003c88:	e00d      	b.n	8003ca6 <HAL_HCD_Stop+0x32>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f004 fe64 	bl	8008964 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3708      	adds	r7, #8
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b082      	sub	sp, #8
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f004 fa0c 	bl	80080d8 <USB_ResetPort>
 8003cc0:	4603      	mov	r3, r0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3708      	adds	r7, #8
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003cca:	b480      	push	{r7}
 8003ccc:	b083      	sub	sp, #12
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003cd6:	78fb      	ldrb	r3, [r7, #3]
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	212c      	movs	r1, #44	; 0x2c
 8003cdc:	fb01 f303 	mul.w	r3, r1, r3
 8003ce0:	4413      	add	r3, r2
 8003ce2:	3360      	adds	r3, #96	; 0x60
 8003ce4:	781b      	ldrb	r3, [r3, #0]
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	370c      	adds	r7, #12
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b083      	sub	sp, #12
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003cfe:	78fb      	ldrb	r3, [r7, #3]
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	212c      	movs	r1, #44	; 0x2c
 8003d04:	fb01 f303 	mul.w	r3, r1, r3
 8003d08:	4413      	add	r3, r2
 8003d0a:	3350      	adds	r3, #80	; 0x50
 8003d0c:	681b      	ldr	r3, [r3, #0]
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	370c      	adds	r7, #12
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr

08003d1a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b082      	sub	sp, #8
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4618      	mov	r0, r3
 8003d28:	f004 fa50 	bl	80081cc <USB_GetCurrentFrame>
 8003d2c:	4603      	mov	r3, r0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3708      	adds	r7, #8
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}

08003d36 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003d36:	b580      	push	{r7, lr}
 8003d38:	b082      	sub	sp, #8
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f004 fa2b 	bl	800819e <USB_GetHostSpeed>
 8003d48:	4603      	mov	r3, r0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3708      	adds	r7, #8
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b086      	sub	sp, #24
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003d68:	78fb      	ldrb	r3, [r7, #3]
 8003d6a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	015a      	lsls	r2, r3, #5
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	4413      	add	r3, r2
 8003d74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f003 0304 	and.w	r3, r3, #4
 8003d7e:	2b04      	cmp	r3, #4
 8003d80:	d119      	bne.n	8003db6 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	015a      	lsls	r2, r3, #5
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	4413      	add	r3, r2
 8003d8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d8e:	461a      	mov	r2, r3
 8003d90:	2304      	movs	r3, #4
 8003d92:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	015a      	lsls	r2, r3, #5
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	0151      	lsls	r1, r2, #5
 8003da6:	693a      	ldr	r2, [r7, #16]
 8003da8:	440a      	add	r2, r1
 8003daa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003dae:	f043 0302 	orr.w	r3, r3, #2
 8003db2:	60d3      	str	r3, [r2, #12]
 8003db4:	e101      	b.n	8003fba <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	015a      	lsls	r2, r3, #5
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dcc:	d12b      	bne.n	8003e26 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	015a      	lsls	r2, r3, #5
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dda:	461a      	mov	r2, r3
 8003ddc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003de0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	212c      	movs	r1, #44	; 0x2c
 8003de8:	fb01 f303 	mul.w	r3, r1, r3
 8003dec:	4413      	add	r3, r2
 8003dee:	3361      	adds	r3, #97	; 0x61
 8003df0:	2207      	movs	r2, #7
 8003df2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	015a      	lsls	r2, r3, #5
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	0151      	lsls	r1, r2, #5
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	440a      	add	r2, r1
 8003e0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e0e:	f043 0302 	orr.w	r3, r3, #2
 8003e12:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68fa      	ldr	r2, [r7, #12]
 8003e1a:	b2d2      	uxtb	r2, r2
 8003e1c:	4611      	mov	r1, r2
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f004 fc47 	bl	80086b2 <USB_HC_Halt>
 8003e24:	e0c9      	b.n	8003fba <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	015a      	lsls	r2, r3, #5
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f003 0320 	and.w	r3, r3, #32
 8003e38:	2b20      	cmp	r3, #32
 8003e3a:	d109      	bne.n	8003e50 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	015a      	lsls	r2, r3, #5
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	4413      	add	r3, r2
 8003e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e48:	461a      	mov	r2, r3
 8003e4a:	2320      	movs	r3, #32
 8003e4c:	6093      	str	r3, [r2, #8]
 8003e4e:	e0b4      	b.n	8003fba <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	015a      	lsls	r2, r3, #5
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	4413      	add	r3, r2
 8003e58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f003 0308 	and.w	r3, r3, #8
 8003e62:	2b08      	cmp	r3, #8
 8003e64:	d133      	bne.n	8003ece <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	015a      	lsls	r2, r3, #5
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	68fa      	ldr	r2, [r7, #12]
 8003e76:	0151      	lsls	r1, r2, #5
 8003e78:	693a      	ldr	r2, [r7, #16]
 8003e7a:	440a      	add	r2, r1
 8003e7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e80:	f043 0302 	orr.w	r3, r3, #2
 8003e84:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	212c      	movs	r1, #44	; 0x2c
 8003e8c:	fb01 f303 	mul.w	r3, r1, r3
 8003e90:	4413      	add	r3, r2
 8003e92:	3361      	adds	r3, #97	; 0x61
 8003e94:	2205      	movs	r2, #5
 8003e96:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	015a      	lsls	r2, r3, #5
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	4413      	add	r3, r2
 8003ea0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	2310      	movs	r3, #16
 8003ea8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	015a      	lsls	r2, r3, #5
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	2308      	movs	r3, #8
 8003eba:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	b2d2      	uxtb	r2, r2
 8003ec4:	4611      	mov	r1, r2
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f004 fbf3 	bl	80086b2 <USB_HC_Halt>
 8003ecc:	e075      	b.n	8003fba <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	015a      	lsls	r2, r3, #5
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ee0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ee4:	d134      	bne.n	8003f50 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	015a      	lsls	r2, r3, #5
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	4413      	add	r3, r2
 8003eee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	0151      	lsls	r1, r2, #5
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	440a      	add	r2, r1
 8003efc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f00:	f043 0302 	orr.w	r3, r3, #2
 8003f04:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	212c      	movs	r1, #44	; 0x2c
 8003f0c:	fb01 f303 	mul.w	r3, r1, r3
 8003f10:	4413      	add	r3, r2
 8003f12:	3361      	adds	r3, #97	; 0x61
 8003f14:	2208      	movs	r2, #8
 8003f16:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	015a      	lsls	r2, r3, #5
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	4413      	add	r3, r2
 8003f20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f24:	461a      	mov	r2, r3
 8003f26:	2310      	movs	r3, #16
 8003f28:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	015a      	lsls	r2, r3, #5
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	4413      	add	r3, r2
 8003f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f36:	461a      	mov	r2, r3
 8003f38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f3c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	b2d2      	uxtb	r2, r2
 8003f46:	4611      	mov	r1, r2
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f004 fbb2 	bl	80086b2 <USB_HC_Halt>
 8003f4e:	e034      	b.n	8003fba <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	015a      	lsls	r2, r3, #5
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	4413      	add	r3, r2
 8003f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f62:	2b80      	cmp	r3, #128	; 0x80
 8003f64:	d129      	bne.n	8003fba <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	015a      	lsls	r2, r3, #5
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	0151      	lsls	r1, r2, #5
 8003f78:	693a      	ldr	r2, [r7, #16]
 8003f7a:	440a      	add	r2, r1
 8003f7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f80:	f043 0302 	orr.w	r3, r3, #2
 8003f84:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	212c      	movs	r1, #44	; 0x2c
 8003f8c:	fb01 f303 	mul.w	r3, r1, r3
 8003f90:	4413      	add	r3, r2
 8003f92:	3361      	adds	r3, #97	; 0x61
 8003f94:	2206      	movs	r2, #6
 8003f96:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	b2d2      	uxtb	r2, r2
 8003fa0:	4611      	mov	r1, r2
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f004 fb85 	bl	80086b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	015a      	lsls	r2, r3, #5
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	4413      	add	r3, r2
 8003fb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	2380      	movs	r3, #128	; 0x80
 8003fb8:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	015a      	lsls	r2, r3, #5
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fd0:	d122      	bne.n	8004018 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	015a      	lsls	r2, r3, #5
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	4413      	add	r3, r2
 8003fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	0151      	lsls	r1, r2, #5
 8003fe4:	693a      	ldr	r2, [r7, #16]
 8003fe6:	440a      	add	r2, r1
 8003fe8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003fec:	f043 0302 	orr.w	r3, r3, #2
 8003ff0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	b2d2      	uxtb	r2, r2
 8003ffa:	4611      	mov	r1, r2
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f004 fb58 	bl	80086b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	015a      	lsls	r2, r3, #5
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	4413      	add	r3, r2
 800400a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800400e:	461a      	mov	r2, r3
 8004010:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004014:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004016:	e2ba      	b.n	800458e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	015a      	lsls	r2, r3, #5
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	4413      	add	r3, r2
 8004020:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	2b01      	cmp	r3, #1
 800402c:	f040 811b 	bne.w	8004266 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d019      	beq.n	800406c <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	212c      	movs	r1, #44	; 0x2c
 800403e:	fb01 f303 	mul.w	r3, r1, r3
 8004042:	4413      	add	r3, r2
 8004044:	3348      	adds	r3, #72	; 0x48
 8004046:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	0159      	lsls	r1, r3, #5
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	440b      	add	r3, r1
 8004050:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800405a:	1ad2      	subs	r2, r2, r3
 800405c:	6879      	ldr	r1, [r7, #4]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	202c      	movs	r0, #44	; 0x2c
 8004062:	fb00 f303 	mul.w	r3, r0, r3
 8004066:	440b      	add	r3, r1
 8004068:	3350      	adds	r3, #80	; 0x50
 800406a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	212c      	movs	r1, #44	; 0x2c
 8004072:	fb01 f303 	mul.w	r3, r1, r3
 8004076:	4413      	add	r3, r2
 8004078:	3361      	adds	r3, #97	; 0x61
 800407a:	2201      	movs	r2, #1
 800407c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	212c      	movs	r1, #44	; 0x2c
 8004084:	fb01 f303 	mul.w	r3, r1, r3
 8004088:	4413      	add	r3, r2
 800408a:	335c      	adds	r3, #92	; 0x5c
 800408c:	2200      	movs	r2, #0
 800408e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	015a      	lsls	r2, r3, #5
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	4413      	add	r3, r2
 8004098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800409c:	461a      	mov	r2, r3
 800409e:	2301      	movs	r3, #1
 80040a0:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	212c      	movs	r1, #44	; 0x2c
 80040a8:	fb01 f303 	mul.w	r3, r1, r3
 80040ac:	4413      	add	r3, r2
 80040ae:	333f      	adds	r3, #63	; 0x3f
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d009      	beq.n	80040ca <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	212c      	movs	r1, #44	; 0x2c
 80040bc:	fb01 f303 	mul.w	r3, r1, r3
 80040c0:	4413      	add	r3, r2
 80040c2:	333f      	adds	r3, #63	; 0x3f
 80040c4:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d121      	bne.n	800410e <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	015a      	lsls	r2, r3, #5
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	4413      	add	r3, r2
 80040d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	0151      	lsls	r1, r2, #5
 80040dc:	693a      	ldr	r2, [r7, #16]
 80040de:	440a      	add	r2, r1
 80040e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040e4:	f043 0302 	orr.w	r3, r3, #2
 80040e8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	b2d2      	uxtb	r2, r2
 80040f2:	4611      	mov	r1, r2
 80040f4:	4618      	mov	r0, r3
 80040f6:	f004 fadc 	bl	80086b2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	015a      	lsls	r2, r3, #5
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	4413      	add	r3, r2
 8004102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004106:	461a      	mov	r2, r3
 8004108:	2310      	movs	r3, #16
 800410a:	6093      	str	r3, [r2, #8]
 800410c:	e066      	b.n	80041dc <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	212c      	movs	r1, #44	; 0x2c
 8004114:	fb01 f303 	mul.w	r3, r1, r3
 8004118:	4413      	add	r3, r2
 800411a:	333f      	adds	r3, #63	; 0x3f
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	2b03      	cmp	r3, #3
 8004120:	d127      	bne.n	8004172 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	015a      	lsls	r2, r3, #5
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	4413      	add	r3, r2
 800412a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	0151      	lsls	r1, r2, #5
 8004134:	693a      	ldr	r2, [r7, #16]
 8004136:	440a      	add	r2, r1
 8004138:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800413c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004140:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	212c      	movs	r1, #44	; 0x2c
 8004148:	fb01 f303 	mul.w	r3, r1, r3
 800414c:	4413      	add	r3, r2
 800414e:	3360      	adds	r3, #96	; 0x60
 8004150:	2201      	movs	r2, #1
 8004152:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	b2d9      	uxtb	r1, r3
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	202c      	movs	r0, #44	; 0x2c
 800415e:	fb00 f303 	mul.w	r3, r0, r3
 8004162:	4413      	add	r3, r2
 8004164:	3360      	adds	r3, #96	; 0x60
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	461a      	mov	r2, r3
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f007 fdcc 	bl	800bd08 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004170:	e034      	b.n	80041dc <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	212c      	movs	r1, #44	; 0x2c
 8004178:	fb01 f303 	mul.w	r3, r1, r3
 800417c:	4413      	add	r3, r2
 800417e:	333f      	adds	r3, #63	; 0x3f
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d12a      	bne.n	80041dc <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	212c      	movs	r1, #44	; 0x2c
 800418c:	fb01 f303 	mul.w	r3, r1, r3
 8004190:	4413      	add	r3, r2
 8004192:	3360      	adds	r3, #96	; 0x60
 8004194:	2201      	movs	r2, #1
 8004196:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	212c      	movs	r1, #44	; 0x2c
 800419e:	fb01 f303 	mul.w	r3, r1, r3
 80041a2:	4413      	add	r3, r2
 80041a4:	3354      	adds	r3, #84	; 0x54
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	f083 0301 	eor.w	r3, r3, #1
 80041ac:	b2d8      	uxtb	r0, r3
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	212c      	movs	r1, #44	; 0x2c
 80041b4:	fb01 f303 	mul.w	r3, r1, r3
 80041b8:	4413      	add	r3, r2
 80041ba:	3354      	adds	r3, #84	; 0x54
 80041bc:	4602      	mov	r2, r0
 80041be:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	b2d9      	uxtb	r1, r3
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	202c      	movs	r0, #44	; 0x2c
 80041ca:	fb00 f303 	mul.w	r3, r0, r3
 80041ce:	4413      	add	r3, r2
 80041d0:	3360      	adds	r3, #96	; 0x60
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	461a      	mov	r2, r3
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f007 fd96 	bl	800bd08 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d12b      	bne.n	800423c <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	212c      	movs	r1, #44	; 0x2c
 80041ea:	fb01 f303 	mul.w	r3, r1, r3
 80041ee:	4413      	add	r3, r2
 80041f0:	3348      	adds	r3, #72	; 0x48
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	6879      	ldr	r1, [r7, #4]
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	202c      	movs	r0, #44	; 0x2c
 80041fa:	fb00 f202 	mul.w	r2, r0, r2
 80041fe:	440a      	add	r2, r1
 8004200:	3240      	adds	r2, #64	; 0x40
 8004202:	8812      	ldrh	r2, [r2, #0]
 8004204:	fbb3 f3f2 	udiv	r3, r3, r2
 8004208:	f003 0301 	and.w	r3, r3, #1
 800420c:	2b00      	cmp	r3, #0
 800420e:	f000 81be 	beq.w	800458e <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	212c      	movs	r1, #44	; 0x2c
 8004218:	fb01 f303 	mul.w	r3, r1, r3
 800421c:	4413      	add	r3, r2
 800421e:	3354      	adds	r3, #84	; 0x54
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	f083 0301 	eor.w	r3, r3, #1
 8004226:	b2d8      	uxtb	r0, r3
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	212c      	movs	r1, #44	; 0x2c
 800422e:	fb01 f303 	mul.w	r3, r1, r3
 8004232:	4413      	add	r3, r2
 8004234:	3354      	adds	r3, #84	; 0x54
 8004236:	4602      	mov	r2, r0
 8004238:	701a      	strb	r2, [r3, #0]
}
 800423a:	e1a8      	b.n	800458e <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	212c      	movs	r1, #44	; 0x2c
 8004242:	fb01 f303 	mul.w	r3, r1, r3
 8004246:	4413      	add	r3, r2
 8004248:	3354      	adds	r3, #84	; 0x54
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	f083 0301 	eor.w	r3, r3, #1
 8004250:	b2d8      	uxtb	r0, r3
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	212c      	movs	r1, #44	; 0x2c
 8004258:	fb01 f303 	mul.w	r3, r1, r3
 800425c:	4413      	add	r3, r2
 800425e:	3354      	adds	r3, #84	; 0x54
 8004260:	4602      	mov	r2, r0
 8004262:	701a      	strb	r2, [r3, #0]
}
 8004264:	e193      	b.n	800458e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	015a      	lsls	r2, r3, #5
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	4413      	add	r3, r2
 800426e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	2b02      	cmp	r3, #2
 800427a:	f040 8106 	bne.w	800448a <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	015a      	lsls	r2, r3, #5
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	4413      	add	r3, r2
 8004286:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	68fa      	ldr	r2, [r7, #12]
 800428e:	0151      	lsls	r1, r2, #5
 8004290:	693a      	ldr	r2, [r7, #16]
 8004292:	440a      	add	r2, r1
 8004294:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004298:	f023 0302 	bic.w	r3, r3, #2
 800429c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	212c      	movs	r1, #44	; 0x2c
 80042a4:	fb01 f303 	mul.w	r3, r1, r3
 80042a8:	4413      	add	r3, r2
 80042aa:	3361      	adds	r3, #97	; 0x61
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d109      	bne.n	80042c6 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	212c      	movs	r1, #44	; 0x2c
 80042b8:	fb01 f303 	mul.w	r3, r1, r3
 80042bc:	4413      	add	r3, r2
 80042be:	3360      	adds	r3, #96	; 0x60
 80042c0:	2201      	movs	r2, #1
 80042c2:	701a      	strb	r2, [r3, #0]
 80042c4:	e0c9      	b.n	800445a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	212c      	movs	r1, #44	; 0x2c
 80042cc:	fb01 f303 	mul.w	r3, r1, r3
 80042d0:	4413      	add	r3, r2
 80042d2:	3361      	adds	r3, #97	; 0x61
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	2b05      	cmp	r3, #5
 80042d8:	d109      	bne.n	80042ee <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	212c      	movs	r1, #44	; 0x2c
 80042e0:	fb01 f303 	mul.w	r3, r1, r3
 80042e4:	4413      	add	r3, r2
 80042e6:	3360      	adds	r3, #96	; 0x60
 80042e8:	2205      	movs	r2, #5
 80042ea:	701a      	strb	r2, [r3, #0]
 80042ec:	e0b5      	b.n	800445a <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	212c      	movs	r1, #44	; 0x2c
 80042f4:	fb01 f303 	mul.w	r3, r1, r3
 80042f8:	4413      	add	r3, r2
 80042fa:	3361      	adds	r3, #97	; 0x61
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	2b06      	cmp	r3, #6
 8004300:	d009      	beq.n	8004316 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	212c      	movs	r1, #44	; 0x2c
 8004308:	fb01 f303 	mul.w	r3, r1, r3
 800430c:	4413      	add	r3, r2
 800430e:	3361      	adds	r3, #97	; 0x61
 8004310:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004312:	2b08      	cmp	r3, #8
 8004314:	d150      	bne.n	80043b8 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	212c      	movs	r1, #44	; 0x2c
 800431c:	fb01 f303 	mul.w	r3, r1, r3
 8004320:	4413      	add	r3, r2
 8004322:	335c      	adds	r3, #92	; 0x5c
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	1c5a      	adds	r2, r3, #1
 8004328:	6879      	ldr	r1, [r7, #4]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	202c      	movs	r0, #44	; 0x2c
 800432e:	fb00 f303 	mul.w	r3, r0, r3
 8004332:	440b      	add	r3, r1
 8004334:	335c      	adds	r3, #92	; 0x5c
 8004336:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	212c      	movs	r1, #44	; 0x2c
 800433e:	fb01 f303 	mul.w	r3, r1, r3
 8004342:	4413      	add	r3, r2
 8004344:	335c      	adds	r3, #92	; 0x5c
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2b02      	cmp	r3, #2
 800434a:	d912      	bls.n	8004372 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	212c      	movs	r1, #44	; 0x2c
 8004352:	fb01 f303 	mul.w	r3, r1, r3
 8004356:	4413      	add	r3, r2
 8004358:	335c      	adds	r3, #92	; 0x5c
 800435a:	2200      	movs	r2, #0
 800435c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	212c      	movs	r1, #44	; 0x2c
 8004364:	fb01 f303 	mul.w	r3, r1, r3
 8004368:	4413      	add	r3, r2
 800436a:	3360      	adds	r3, #96	; 0x60
 800436c:	2204      	movs	r2, #4
 800436e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004370:	e073      	b.n	800445a <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	212c      	movs	r1, #44	; 0x2c
 8004378:	fb01 f303 	mul.w	r3, r1, r3
 800437c:	4413      	add	r3, r2
 800437e:	3360      	adds	r3, #96	; 0x60
 8004380:	2202      	movs	r2, #2
 8004382:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	015a      	lsls	r2, r3, #5
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	4413      	add	r3, r2
 800438c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800439a:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80043a2:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	015a      	lsls	r2, r3, #5
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	4413      	add	r3, r2
 80043ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043b0:	461a      	mov	r2, r3
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80043b6:	e050      	b.n	800445a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	212c      	movs	r1, #44	; 0x2c
 80043be:	fb01 f303 	mul.w	r3, r1, r3
 80043c2:	4413      	add	r3, r2
 80043c4:	3361      	adds	r3, #97	; 0x61
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	2b03      	cmp	r3, #3
 80043ca:	d122      	bne.n	8004412 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	212c      	movs	r1, #44	; 0x2c
 80043d2:	fb01 f303 	mul.w	r3, r1, r3
 80043d6:	4413      	add	r3, r2
 80043d8:	3360      	adds	r3, #96	; 0x60
 80043da:	2202      	movs	r2, #2
 80043dc:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	015a      	lsls	r2, r3, #5
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	4413      	add	r3, r2
 80043e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80043f4:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80043fc:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	015a      	lsls	r2, r3, #5
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	4413      	add	r3, r2
 8004406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800440a:	461a      	mov	r2, r3
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	6013      	str	r3, [r2, #0]
 8004410:	e023      	b.n	800445a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	212c      	movs	r1, #44	; 0x2c
 8004418:	fb01 f303 	mul.w	r3, r1, r3
 800441c:	4413      	add	r3, r2
 800441e:	3361      	adds	r3, #97	; 0x61
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	2b07      	cmp	r3, #7
 8004424:	d119      	bne.n	800445a <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	212c      	movs	r1, #44	; 0x2c
 800442c:	fb01 f303 	mul.w	r3, r1, r3
 8004430:	4413      	add	r3, r2
 8004432:	335c      	adds	r3, #92	; 0x5c
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	1c5a      	adds	r2, r3, #1
 8004438:	6879      	ldr	r1, [r7, #4]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	202c      	movs	r0, #44	; 0x2c
 800443e:	fb00 f303 	mul.w	r3, r0, r3
 8004442:	440b      	add	r3, r1
 8004444:	335c      	adds	r3, #92	; 0x5c
 8004446:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	212c      	movs	r1, #44	; 0x2c
 800444e:	fb01 f303 	mul.w	r3, r1, r3
 8004452:	4413      	add	r3, r2
 8004454:	3360      	adds	r3, #96	; 0x60
 8004456:	2204      	movs	r2, #4
 8004458:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	015a      	lsls	r2, r3, #5
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	4413      	add	r3, r2
 8004462:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004466:	461a      	mov	r2, r3
 8004468:	2302      	movs	r3, #2
 800446a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	b2d9      	uxtb	r1, r3
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	202c      	movs	r0, #44	; 0x2c
 8004476:	fb00 f303 	mul.w	r3, r0, r3
 800447a:	4413      	add	r3, r2
 800447c:	3360      	adds	r3, #96	; 0x60
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	461a      	mov	r2, r3
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f007 fc40 	bl	800bd08 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004488:	e081      	b.n	800458e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	015a      	lsls	r2, r3, #5
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	4413      	add	r3, r2
 8004492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f003 0310 	and.w	r3, r3, #16
 800449c:	2b10      	cmp	r3, #16
 800449e:	d176      	bne.n	800458e <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	212c      	movs	r1, #44	; 0x2c
 80044a6:	fb01 f303 	mul.w	r3, r1, r3
 80044aa:	4413      	add	r3, r2
 80044ac:	333f      	adds	r3, #63	; 0x3f
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	2b03      	cmp	r3, #3
 80044b2:	d121      	bne.n	80044f8 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	212c      	movs	r1, #44	; 0x2c
 80044ba:	fb01 f303 	mul.w	r3, r1, r3
 80044be:	4413      	add	r3, r2
 80044c0:	335c      	adds	r3, #92	; 0x5c
 80044c2:	2200      	movs	r2, #0
 80044c4:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	015a      	lsls	r2, r3, #5
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	4413      	add	r3, r2
 80044ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	0151      	lsls	r1, r2, #5
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	440a      	add	r2, r1
 80044dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80044e0:	f043 0302 	orr.w	r3, r3, #2
 80044e4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	b2d2      	uxtb	r2, r2
 80044ee:	4611      	mov	r1, r2
 80044f0:	4618      	mov	r0, r3
 80044f2:	f004 f8de 	bl	80086b2 <USB_HC_Halt>
 80044f6:	e041      	b.n	800457c <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	212c      	movs	r1, #44	; 0x2c
 80044fe:	fb01 f303 	mul.w	r3, r1, r3
 8004502:	4413      	add	r3, r2
 8004504:	333f      	adds	r3, #63	; 0x3f
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d009      	beq.n	8004520 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	212c      	movs	r1, #44	; 0x2c
 8004512:	fb01 f303 	mul.w	r3, r1, r3
 8004516:	4413      	add	r3, r2
 8004518:	333f      	adds	r3, #63	; 0x3f
 800451a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800451c:	2b02      	cmp	r3, #2
 800451e:	d12d      	bne.n	800457c <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	212c      	movs	r1, #44	; 0x2c
 8004526:	fb01 f303 	mul.w	r3, r1, r3
 800452a:	4413      	add	r3, r2
 800452c:	335c      	adds	r3, #92	; 0x5c
 800452e:	2200      	movs	r2, #0
 8004530:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d120      	bne.n	800457c <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	212c      	movs	r1, #44	; 0x2c
 8004540:	fb01 f303 	mul.w	r3, r1, r3
 8004544:	4413      	add	r3, r2
 8004546:	3361      	adds	r3, #97	; 0x61
 8004548:	2203      	movs	r2, #3
 800454a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	015a      	lsls	r2, r3, #5
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	4413      	add	r3, r2
 8004554:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	0151      	lsls	r1, r2, #5
 800455e:	693a      	ldr	r2, [r7, #16]
 8004560:	440a      	add	r2, r1
 8004562:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004566:	f043 0302 	orr.w	r3, r3, #2
 800456a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	b2d2      	uxtb	r2, r2
 8004574:	4611      	mov	r1, r2
 8004576:	4618      	mov	r0, r3
 8004578:	f004 f89b 	bl	80086b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	015a      	lsls	r2, r3, #5
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	4413      	add	r3, r2
 8004584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004588:	461a      	mov	r2, r3
 800458a:	2310      	movs	r3, #16
 800458c:	6093      	str	r3, [r2, #8]
}
 800458e:	bf00      	nop
 8004590:	3718      	adds	r7, #24
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}

08004596 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004596:	b580      	push	{r7, lr}
 8004598:	b088      	sub	sp, #32
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
 800459e:	460b      	mov	r3, r1
 80045a0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80045ac:	78fb      	ldrb	r3, [r7, #3]
 80045ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	015a      	lsls	r2, r3, #5
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	4413      	add	r3, r2
 80045b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f003 0304 	and.w	r3, r3, #4
 80045c2:	2b04      	cmp	r3, #4
 80045c4:	d119      	bne.n	80045fa <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	015a      	lsls	r2, r3, #5
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	4413      	add	r3, r2
 80045ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045d2:	461a      	mov	r2, r3
 80045d4:	2304      	movs	r3, #4
 80045d6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	015a      	lsls	r2, r3, #5
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	4413      	add	r3, r2
 80045e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	0151      	lsls	r1, r2, #5
 80045ea:	69ba      	ldr	r2, [r7, #24]
 80045ec:	440a      	add	r2, r1
 80045ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80045f2:	f043 0302 	orr.w	r3, r3, #2
 80045f6:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80045f8:	e3ca      	b.n	8004d90 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	015a      	lsls	r2, r3, #5
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	4413      	add	r3, r2
 8004602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f003 0320 	and.w	r3, r3, #32
 800460c:	2b20      	cmp	r3, #32
 800460e:	d13e      	bne.n	800468e <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	015a      	lsls	r2, r3, #5
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	4413      	add	r3, r2
 8004618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800461c:	461a      	mov	r2, r3
 800461e:	2320      	movs	r3, #32
 8004620:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	212c      	movs	r1, #44	; 0x2c
 8004628:	fb01 f303 	mul.w	r3, r1, r3
 800462c:	4413      	add	r3, r2
 800462e:	333d      	adds	r3, #61	; 0x3d
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	2b01      	cmp	r3, #1
 8004634:	f040 83ac 	bne.w	8004d90 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	212c      	movs	r1, #44	; 0x2c
 800463e:	fb01 f303 	mul.w	r3, r1, r3
 8004642:	4413      	add	r3, r2
 8004644:	333d      	adds	r3, #61	; 0x3d
 8004646:	2200      	movs	r2, #0
 8004648:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	212c      	movs	r1, #44	; 0x2c
 8004650:	fb01 f303 	mul.w	r3, r1, r3
 8004654:	4413      	add	r3, r2
 8004656:	3360      	adds	r3, #96	; 0x60
 8004658:	2202      	movs	r2, #2
 800465a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	015a      	lsls	r2, r3, #5
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	4413      	add	r3, r2
 8004664:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	697a      	ldr	r2, [r7, #20]
 800466c:	0151      	lsls	r1, r2, #5
 800466e:	69ba      	ldr	r2, [r7, #24]
 8004670:	440a      	add	r2, r1
 8004672:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004676:	f043 0302 	orr.w	r3, r3, #2
 800467a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	697a      	ldr	r2, [r7, #20]
 8004682:	b2d2      	uxtb	r2, r2
 8004684:	4611      	mov	r1, r2
 8004686:	4618      	mov	r0, r3
 8004688:	f004 f813 	bl	80086b2 <USB_HC_Halt>
}
 800468c:	e380      	b.n	8004d90 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	015a      	lsls	r2, r3, #5
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	4413      	add	r3, r2
 8004696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046a4:	d122      	bne.n	80046ec <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	015a      	lsls	r2, r3, #5
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	4413      	add	r3, r2
 80046ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	697a      	ldr	r2, [r7, #20]
 80046b6:	0151      	lsls	r1, r2, #5
 80046b8:	69ba      	ldr	r2, [r7, #24]
 80046ba:	440a      	add	r2, r1
 80046bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046c0:	f043 0302 	orr.w	r3, r3, #2
 80046c4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	697a      	ldr	r2, [r7, #20]
 80046cc:	b2d2      	uxtb	r2, r2
 80046ce:	4611      	mov	r1, r2
 80046d0:	4618      	mov	r0, r3
 80046d2:	f003 ffee 	bl	80086b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	015a      	lsls	r2, r3, #5
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	4413      	add	r3, r2
 80046de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046e2:	461a      	mov	r2, r3
 80046e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046e8:	6093      	str	r3, [r2, #8]
}
 80046ea:	e351      	b.n	8004d90 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	015a      	lsls	r2, r3, #5
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	4413      	add	r3, r2
 80046f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f003 0301 	and.w	r3, r3, #1
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d150      	bne.n	80047a4 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	212c      	movs	r1, #44	; 0x2c
 8004708:	fb01 f303 	mul.w	r3, r1, r3
 800470c:	4413      	add	r3, r2
 800470e:	335c      	adds	r3, #92	; 0x5c
 8004710:	2200      	movs	r2, #0
 8004712:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	015a      	lsls	r2, r3, #5
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	4413      	add	r3, r2
 800471c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004726:	2b40      	cmp	r3, #64	; 0x40
 8004728:	d111      	bne.n	800474e <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	212c      	movs	r1, #44	; 0x2c
 8004730:	fb01 f303 	mul.w	r3, r1, r3
 8004734:	4413      	add	r3, r2
 8004736:	333d      	adds	r3, #61	; 0x3d
 8004738:	2201      	movs	r2, #1
 800473a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	015a      	lsls	r2, r3, #5
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	4413      	add	r3, r2
 8004744:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004748:	461a      	mov	r2, r3
 800474a:	2340      	movs	r3, #64	; 0x40
 800474c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	015a      	lsls	r2, r3, #5
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	4413      	add	r3, r2
 8004756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	697a      	ldr	r2, [r7, #20]
 800475e:	0151      	lsls	r1, r2, #5
 8004760:	69ba      	ldr	r2, [r7, #24]
 8004762:	440a      	add	r2, r1
 8004764:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004768:	f043 0302 	orr.w	r3, r3, #2
 800476c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	b2d2      	uxtb	r2, r2
 8004776:	4611      	mov	r1, r2
 8004778:	4618      	mov	r0, r3
 800477a:	f003 ff9a 	bl	80086b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	015a      	lsls	r2, r3, #5
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	4413      	add	r3, r2
 8004786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800478a:	461a      	mov	r2, r3
 800478c:	2301      	movs	r3, #1
 800478e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	212c      	movs	r1, #44	; 0x2c
 8004796:	fb01 f303 	mul.w	r3, r1, r3
 800479a:	4413      	add	r3, r2
 800479c:	3361      	adds	r3, #97	; 0x61
 800479e:	2201      	movs	r2, #1
 80047a0:	701a      	strb	r2, [r3, #0]
}
 80047a2:	e2f5      	b.n	8004d90 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	015a      	lsls	r2, r3, #5
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	4413      	add	r3, r2
 80047ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b6:	2b40      	cmp	r3, #64	; 0x40
 80047b8:	d13c      	bne.n	8004834 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	212c      	movs	r1, #44	; 0x2c
 80047c0:	fb01 f303 	mul.w	r3, r1, r3
 80047c4:	4413      	add	r3, r2
 80047c6:	3361      	adds	r3, #97	; 0x61
 80047c8:	2204      	movs	r2, #4
 80047ca:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	212c      	movs	r1, #44	; 0x2c
 80047d2:	fb01 f303 	mul.w	r3, r1, r3
 80047d6:	4413      	add	r3, r2
 80047d8:	333d      	adds	r3, #61	; 0x3d
 80047da:	2201      	movs	r2, #1
 80047dc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	212c      	movs	r1, #44	; 0x2c
 80047e4:	fb01 f303 	mul.w	r3, r1, r3
 80047e8:	4413      	add	r3, r2
 80047ea:	335c      	adds	r3, #92	; 0x5c
 80047ec:	2200      	movs	r2, #0
 80047ee:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	015a      	lsls	r2, r3, #5
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	4413      	add	r3, r2
 80047f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	697a      	ldr	r2, [r7, #20]
 8004800:	0151      	lsls	r1, r2, #5
 8004802:	69ba      	ldr	r2, [r7, #24]
 8004804:	440a      	add	r2, r1
 8004806:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800480a:	f043 0302 	orr.w	r3, r3, #2
 800480e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	b2d2      	uxtb	r2, r2
 8004818:	4611      	mov	r1, r2
 800481a:	4618      	mov	r0, r3
 800481c:	f003 ff49 	bl	80086b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	015a      	lsls	r2, r3, #5
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	4413      	add	r3, r2
 8004828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800482c:	461a      	mov	r2, r3
 800482e:	2340      	movs	r3, #64	; 0x40
 8004830:	6093      	str	r3, [r2, #8]
}
 8004832:	e2ad      	b.n	8004d90 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	015a      	lsls	r2, r3, #5
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	4413      	add	r3, r2
 800483c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f003 0308 	and.w	r3, r3, #8
 8004846:	2b08      	cmp	r3, #8
 8004848:	d12a      	bne.n	80048a0 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	015a      	lsls	r2, r3, #5
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	4413      	add	r3, r2
 8004852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004856:	461a      	mov	r2, r3
 8004858:	2308      	movs	r3, #8
 800485a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	015a      	lsls	r2, r3, #5
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	4413      	add	r3, r2
 8004864:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	697a      	ldr	r2, [r7, #20]
 800486c:	0151      	lsls	r1, r2, #5
 800486e:	69ba      	ldr	r2, [r7, #24]
 8004870:	440a      	add	r2, r1
 8004872:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004876:	f043 0302 	orr.w	r3, r3, #2
 800487a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	697a      	ldr	r2, [r7, #20]
 8004882:	b2d2      	uxtb	r2, r2
 8004884:	4611      	mov	r1, r2
 8004886:	4618      	mov	r0, r3
 8004888:	f003 ff13 	bl	80086b2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	212c      	movs	r1, #44	; 0x2c
 8004892:	fb01 f303 	mul.w	r3, r1, r3
 8004896:	4413      	add	r3, r2
 8004898:	3361      	adds	r3, #97	; 0x61
 800489a:	2205      	movs	r2, #5
 800489c:	701a      	strb	r2, [r3, #0]
}
 800489e:	e277      	b.n	8004d90 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	015a      	lsls	r2, r3, #5
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	4413      	add	r3, r2
 80048a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f003 0310 	and.w	r3, r3, #16
 80048b2:	2b10      	cmp	r3, #16
 80048b4:	d150      	bne.n	8004958 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	212c      	movs	r1, #44	; 0x2c
 80048bc:	fb01 f303 	mul.w	r3, r1, r3
 80048c0:	4413      	add	r3, r2
 80048c2:	335c      	adds	r3, #92	; 0x5c
 80048c4:	2200      	movs	r2, #0
 80048c6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	212c      	movs	r1, #44	; 0x2c
 80048ce:	fb01 f303 	mul.w	r3, r1, r3
 80048d2:	4413      	add	r3, r2
 80048d4:	3361      	adds	r3, #97	; 0x61
 80048d6:	2203      	movs	r2, #3
 80048d8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	212c      	movs	r1, #44	; 0x2c
 80048e0:	fb01 f303 	mul.w	r3, r1, r3
 80048e4:	4413      	add	r3, r2
 80048e6:	333d      	adds	r3, #61	; 0x3d
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d112      	bne.n	8004914 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	212c      	movs	r1, #44	; 0x2c
 80048f4:	fb01 f303 	mul.w	r3, r1, r3
 80048f8:	4413      	add	r3, r2
 80048fa:	333c      	adds	r3, #60	; 0x3c
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d108      	bne.n	8004914 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	212c      	movs	r1, #44	; 0x2c
 8004908:	fb01 f303 	mul.w	r3, r1, r3
 800490c:	4413      	add	r3, r2
 800490e:	333d      	adds	r3, #61	; 0x3d
 8004910:	2201      	movs	r2, #1
 8004912:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	015a      	lsls	r2, r3, #5
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	4413      	add	r3, r2
 800491c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	0151      	lsls	r1, r2, #5
 8004926:	69ba      	ldr	r2, [r7, #24]
 8004928:	440a      	add	r2, r1
 800492a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800492e:	f043 0302 	orr.w	r3, r3, #2
 8004932:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	697a      	ldr	r2, [r7, #20]
 800493a:	b2d2      	uxtb	r2, r2
 800493c:	4611      	mov	r1, r2
 800493e:	4618      	mov	r0, r3
 8004940:	f003 feb7 	bl	80086b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	015a      	lsls	r2, r3, #5
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	4413      	add	r3, r2
 800494c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004950:	461a      	mov	r2, r3
 8004952:	2310      	movs	r3, #16
 8004954:	6093      	str	r3, [r2, #8]
}
 8004956:	e21b      	b.n	8004d90 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	015a      	lsls	r2, r3, #5
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	4413      	add	r3, r2
 8004960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800496a:	2b80      	cmp	r3, #128	; 0x80
 800496c:	d174      	bne.n	8004a58 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d121      	bne.n	80049ba <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	212c      	movs	r1, #44	; 0x2c
 800497c:	fb01 f303 	mul.w	r3, r1, r3
 8004980:	4413      	add	r3, r2
 8004982:	3361      	adds	r3, #97	; 0x61
 8004984:	2206      	movs	r2, #6
 8004986:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	015a      	lsls	r2, r3, #5
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	4413      	add	r3, r2
 8004990:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	697a      	ldr	r2, [r7, #20]
 8004998:	0151      	lsls	r1, r2, #5
 800499a:	69ba      	ldr	r2, [r7, #24]
 800499c:	440a      	add	r2, r1
 800499e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049a2:	f043 0302 	orr.w	r3, r3, #2
 80049a6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	697a      	ldr	r2, [r7, #20]
 80049ae:	b2d2      	uxtb	r2, r2
 80049b0:	4611      	mov	r1, r2
 80049b2:	4618      	mov	r0, r3
 80049b4:	f003 fe7d 	bl	80086b2 <USB_HC_Halt>
 80049b8:	e044      	b.n	8004a44 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	212c      	movs	r1, #44	; 0x2c
 80049c0:	fb01 f303 	mul.w	r3, r1, r3
 80049c4:	4413      	add	r3, r2
 80049c6:	335c      	adds	r3, #92	; 0x5c
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	1c5a      	adds	r2, r3, #1
 80049cc:	6879      	ldr	r1, [r7, #4]
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	202c      	movs	r0, #44	; 0x2c
 80049d2:	fb00 f303 	mul.w	r3, r0, r3
 80049d6:	440b      	add	r3, r1
 80049d8:	335c      	adds	r3, #92	; 0x5c
 80049da:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	212c      	movs	r1, #44	; 0x2c
 80049e2:	fb01 f303 	mul.w	r3, r1, r3
 80049e6:	4413      	add	r3, r2
 80049e8:	335c      	adds	r3, #92	; 0x5c
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	d920      	bls.n	8004a32 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	212c      	movs	r1, #44	; 0x2c
 80049f6:	fb01 f303 	mul.w	r3, r1, r3
 80049fa:	4413      	add	r3, r2
 80049fc:	335c      	adds	r3, #92	; 0x5c
 80049fe:	2200      	movs	r2, #0
 8004a00:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	212c      	movs	r1, #44	; 0x2c
 8004a08:	fb01 f303 	mul.w	r3, r1, r3
 8004a0c:	4413      	add	r3, r2
 8004a0e:	3360      	adds	r3, #96	; 0x60
 8004a10:	2204      	movs	r2, #4
 8004a12:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	b2d9      	uxtb	r1, r3
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	202c      	movs	r0, #44	; 0x2c
 8004a1e:	fb00 f303 	mul.w	r3, r0, r3
 8004a22:	4413      	add	r3, r2
 8004a24:	3360      	adds	r3, #96	; 0x60
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	461a      	mov	r2, r3
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f007 f96c 	bl	800bd08 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004a30:	e008      	b.n	8004a44 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	212c      	movs	r1, #44	; 0x2c
 8004a38:	fb01 f303 	mul.w	r3, r1, r3
 8004a3c:	4413      	add	r3, r2
 8004a3e:	3360      	adds	r3, #96	; 0x60
 8004a40:	2202      	movs	r2, #2
 8004a42:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	015a      	lsls	r2, r3, #5
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a50:	461a      	mov	r2, r3
 8004a52:	2380      	movs	r3, #128	; 0x80
 8004a54:	6093      	str	r3, [r2, #8]
}
 8004a56:	e19b      	b.n	8004d90 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	015a      	lsls	r2, r3, #5
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	4413      	add	r3, r2
 8004a60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a6e:	d134      	bne.n	8004ada <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	015a      	lsls	r2, r3, #5
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	4413      	add	r3, r2
 8004a78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	697a      	ldr	r2, [r7, #20]
 8004a80:	0151      	lsls	r1, r2, #5
 8004a82:	69ba      	ldr	r2, [r7, #24]
 8004a84:	440a      	add	r2, r1
 8004a86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a8a:	f043 0302 	orr.w	r3, r3, #2
 8004a8e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	b2d2      	uxtb	r2, r2
 8004a98:	4611      	mov	r1, r2
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f003 fe09 	bl	80086b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	015a      	lsls	r2, r3, #5
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aac:	461a      	mov	r2, r3
 8004aae:	2310      	movs	r3, #16
 8004ab0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	015a      	lsls	r2, r3, #5
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	4413      	add	r3, r2
 8004aba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004abe:	461a      	mov	r2, r3
 8004ac0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ac4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	212c      	movs	r1, #44	; 0x2c
 8004acc:	fb01 f303 	mul.w	r3, r1, r3
 8004ad0:	4413      	add	r3, r2
 8004ad2:	3361      	adds	r3, #97	; 0x61
 8004ad4:	2208      	movs	r2, #8
 8004ad6:	701a      	strb	r2, [r3, #0]
}
 8004ad8:	e15a      	b.n	8004d90 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	015a      	lsls	r2, r3, #5
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	f003 0302 	and.w	r3, r3, #2
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	f040 814f 	bne.w	8004d90 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	015a      	lsls	r2, r3, #5
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	4413      	add	r3, r2
 8004afa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	697a      	ldr	r2, [r7, #20]
 8004b02:	0151      	lsls	r1, r2, #5
 8004b04:	69ba      	ldr	r2, [r7, #24]
 8004b06:	440a      	add	r2, r1
 8004b08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b0c:	f023 0302 	bic.w	r3, r3, #2
 8004b10:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	212c      	movs	r1, #44	; 0x2c
 8004b18:	fb01 f303 	mul.w	r3, r1, r3
 8004b1c:	4413      	add	r3, r2
 8004b1e:	3361      	adds	r3, #97	; 0x61
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d17d      	bne.n	8004c22 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	212c      	movs	r1, #44	; 0x2c
 8004b2c:	fb01 f303 	mul.w	r3, r1, r3
 8004b30:	4413      	add	r3, r2
 8004b32:	3360      	adds	r3, #96	; 0x60
 8004b34:	2201      	movs	r2, #1
 8004b36:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	212c      	movs	r1, #44	; 0x2c
 8004b3e:	fb01 f303 	mul.w	r3, r1, r3
 8004b42:	4413      	add	r3, r2
 8004b44:	333f      	adds	r3, #63	; 0x3f
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d00a      	beq.n	8004b62 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	212c      	movs	r1, #44	; 0x2c
 8004b52:	fb01 f303 	mul.w	r3, r1, r3
 8004b56:	4413      	add	r3, r2
 8004b58:	333f      	adds	r3, #63	; 0x3f
 8004b5a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004b5c:	2b03      	cmp	r3, #3
 8004b5e:	f040 8100 	bne.w	8004d62 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d113      	bne.n	8004b92 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	212c      	movs	r1, #44	; 0x2c
 8004b70:	fb01 f303 	mul.w	r3, r1, r3
 8004b74:	4413      	add	r3, r2
 8004b76:	3355      	adds	r3, #85	; 0x55
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	f083 0301 	eor.w	r3, r3, #1
 8004b7e:	b2d8      	uxtb	r0, r3
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	212c      	movs	r1, #44	; 0x2c
 8004b86:	fb01 f303 	mul.w	r3, r1, r3
 8004b8a:	4413      	add	r3, r2
 8004b8c:	3355      	adds	r3, #85	; 0x55
 8004b8e:	4602      	mov	r2, r0
 8004b90:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	f040 80e3 	bne.w	8004d62 <HCD_HC_OUT_IRQHandler+0x7cc>
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	212c      	movs	r1, #44	; 0x2c
 8004ba2:	fb01 f303 	mul.w	r3, r1, r3
 8004ba6:	4413      	add	r3, r2
 8004ba8:	334c      	adds	r3, #76	; 0x4c
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	f000 80d8 	beq.w	8004d62 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	212c      	movs	r1, #44	; 0x2c
 8004bb8:	fb01 f303 	mul.w	r3, r1, r3
 8004bbc:	4413      	add	r3, r2
 8004bbe:	334c      	adds	r3, #76	; 0x4c
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	6879      	ldr	r1, [r7, #4]
 8004bc4:	697a      	ldr	r2, [r7, #20]
 8004bc6:	202c      	movs	r0, #44	; 0x2c
 8004bc8:	fb00 f202 	mul.w	r2, r0, r2
 8004bcc:	440a      	add	r2, r1
 8004bce:	3240      	adds	r2, #64	; 0x40
 8004bd0:	8812      	ldrh	r2, [r2, #0]
 8004bd2:	4413      	add	r3, r2
 8004bd4:	3b01      	subs	r3, #1
 8004bd6:	6879      	ldr	r1, [r7, #4]
 8004bd8:	697a      	ldr	r2, [r7, #20]
 8004bda:	202c      	movs	r0, #44	; 0x2c
 8004bdc:	fb00 f202 	mul.w	r2, r0, r2
 8004be0:	440a      	add	r2, r1
 8004be2:	3240      	adds	r2, #64	; 0x40
 8004be4:	8812      	ldrh	r2, [r2, #0]
 8004be6:	fbb3 f3f2 	udiv	r3, r3, r2
 8004bea:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f003 0301 	and.w	r3, r3, #1
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	f000 80b5 	beq.w	8004d62 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	212c      	movs	r1, #44	; 0x2c
 8004bfe:	fb01 f303 	mul.w	r3, r1, r3
 8004c02:	4413      	add	r3, r2
 8004c04:	3355      	adds	r3, #85	; 0x55
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	f083 0301 	eor.w	r3, r3, #1
 8004c0c:	b2d8      	uxtb	r0, r3
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	212c      	movs	r1, #44	; 0x2c
 8004c14:	fb01 f303 	mul.w	r3, r1, r3
 8004c18:	4413      	add	r3, r2
 8004c1a:	3355      	adds	r3, #85	; 0x55
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	701a      	strb	r2, [r3, #0]
 8004c20:	e09f      	b.n	8004d62 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	212c      	movs	r1, #44	; 0x2c
 8004c28:	fb01 f303 	mul.w	r3, r1, r3
 8004c2c:	4413      	add	r3, r2
 8004c2e:	3361      	adds	r3, #97	; 0x61
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	2b03      	cmp	r3, #3
 8004c34:	d109      	bne.n	8004c4a <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	212c      	movs	r1, #44	; 0x2c
 8004c3c:	fb01 f303 	mul.w	r3, r1, r3
 8004c40:	4413      	add	r3, r2
 8004c42:	3360      	adds	r3, #96	; 0x60
 8004c44:	2202      	movs	r2, #2
 8004c46:	701a      	strb	r2, [r3, #0]
 8004c48:	e08b      	b.n	8004d62 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	212c      	movs	r1, #44	; 0x2c
 8004c50:	fb01 f303 	mul.w	r3, r1, r3
 8004c54:	4413      	add	r3, r2
 8004c56:	3361      	adds	r3, #97	; 0x61
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	2b04      	cmp	r3, #4
 8004c5c:	d109      	bne.n	8004c72 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	212c      	movs	r1, #44	; 0x2c
 8004c64:	fb01 f303 	mul.w	r3, r1, r3
 8004c68:	4413      	add	r3, r2
 8004c6a:	3360      	adds	r3, #96	; 0x60
 8004c6c:	2202      	movs	r2, #2
 8004c6e:	701a      	strb	r2, [r3, #0]
 8004c70:	e077      	b.n	8004d62 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	212c      	movs	r1, #44	; 0x2c
 8004c78:	fb01 f303 	mul.w	r3, r1, r3
 8004c7c:	4413      	add	r3, r2
 8004c7e:	3361      	adds	r3, #97	; 0x61
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	2b05      	cmp	r3, #5
 8004c84:	d109      	bne.n	8004c9a <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	212c      	movs	r1, #44	; 0x2c
 8004c8c:	fb01 f303 	mul.w	r3, r1, r3
 8004c90:	4413      	add	r3, r2
 8004c92:	3360      	adds	r3, #96	; 0x60
 8004c94:	2205      	movs	r2, #5
 8004c96:	701a      	strb	r2, [r3, #0]
 8004c98:	e063      	b.n	8004d62 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	212c      	movs	r1, #44	; 0x2c
 8004ca0:	fb01 f303 	mul.w	r3, r1, r3
 8004ca4:	4413      	add	r3, r2
 8004ca6:	3361      	adds	r3, #97	; 0x61
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	2b06      	cmp	r3, #6
 8004cac:	d009      	beq.n	8004cc2 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	212c      	movs	r1, #44	; 0x2c
 8004cb4:	fb01 f303 	mul.w	r3, r1, r3
 8004cb8:	4413      	add	r3, r2
 8004cba:	3361      	adds	r3, #97	; 0x61
 8004cbc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004cbe:	2b08      	cmp	r3, #8
 8004cc0:	d14f      	bne.n	8004d62 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	212c      	movs	r1, #44	; 0x2c
 8004cc8:	fb01 f303 	mul.w	r3, r1, r3
 8004ccc:	4413      	add	r3, r2
 8004cce:	335c      	adds	r3, #92	; 0x5c
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	1c5a      	adds	r2, r3, #1
 8004cd4:	6879      	ldr	r1, [r7, #4]
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	202c      	movs	r0, #44	; 0x2c
 8004cda:	fb00 f303 	mul.w	r3, r0, r3
 8004cde:	440b      	add	r3, r1
 8004ce0:	335c      	adds	r3, #92	; 0x5c
 8004ce2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	212c      	movs	r1, #44	; 0x2c
 8004cea:	fb01 f303 	mul.w	r3, r1, r3
 8004cee:	4413      	add	r3, r2
 8004cf0:	335c      	adds	r3, #92	; 0x5c
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d912      	bls.n	8004d1e <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	212c      	movs	r1, #44	; 0x2c
 8004cfe:	fb01 f303 	mul.w	r3, r1, r3
 8004d02:	4413      	add	r3, r2
 8004d04:	335c      	adds	r3, #92	; 0x5c
 8004d06:	2200      	movs	r2, #0
 8004d08:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	212c      	movs	r1, #44	; 0x2c
 8004d10:	fb01 f303 	mul.w	r3, r1, r3
 8004d14:	4413      	add	r3, r2
 8004d16:	3360      	adds	r3, #96	; 0x60
 8004d18:	2204      	movs	r2, #4
 8004d1a:	701a      	strb	r2, [r3, #0]
 8004d1c:	e021      	b.n	8004d62 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	212c      	movs	r1, #44	; 0x2c
 8004d24:	fb01 f303 	mul.w	r3, r1, r3
 8004d28:	4413      	add	r3, r2
 8004d2a:	3360      	adds	r3, #96	; 0x60
 8004d2c:	2202      	movs	r2, #2
 8004d2e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	015a      	lsls	r2, r3, #5
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	4413      	add	r3, r2
 8004d38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004d46:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004d4e:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	015a      	lsls	r2, r3, #5
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	4413      	add	r3, r2
 8004d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	015a      	lsls	r2, r3, #5
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	4413      	add	r3, r2
 8004d6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d6e:	461a      	mov	r2, r3
 8004d70:	2302      	movs	r3, #2
 8004d72:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	b2d9      	uxtb	r1, r3
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	202c      	movs	r0, #44	; 0x2c
 8004d7e:	fb00 f303 	mul.w	r3, r0, r3
 8004d82:	4413      	add	r3, r2
 8004d84:	3360      	adds	r3, #96	; 0x60
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	461a      	mov	r2, r3
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f006 ffbc 	bl	800bd08 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004d90:	bf00      	nop
 8004d92:	3720      	adds	r7, #32
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b08a      	sub	sp, #40	; 0x28
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da8:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	6a1b      	ldr	r3, [r3, #32]
 8004db0:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	f003 030f 	and.w	r3, r3, #15
 8004db8:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	0c5b      	lsrs	r3, r3, #17
 8004dbe:	f003 030f 	and.w	r3, r3, #15
 8004dc2:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	091b      	lsrs	r3, r3, #4
 8004dc8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004dcc:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d004      	beq.n	8004dde <HCD_RXQLVL_IRQHandler+0x46>
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	2b05      	cmp	r3, #5
 8004dd8:	f000 80a9 	beq.w	8004f2e <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004ddc:	e0aa      	b.n	8004f34 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	f000 80a6 	beq.w	8004f32 <HCD_RXQLVL_IRQHandler+0x19a>
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	212c      	movs	r1, #44	; 0x2c
 8004dec:	fb01 f303 	mul.w	r3, r1, r3
 8004df0:	4413      	add	r3, r2
 8004df2:	3344      	adds	r3, #68	; 0x44
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	f000 809b 	beq.w	8004f32 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	212c      	movs	r1, #44	; 0x2c
 8004e02:	fb01 f303 	mul.w	r3, r1, r3
 8004e06:	4413      	add	r3, r2
 8004e08:	3350      	adds	r3, #80	; 0x50
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	441a      	add	r2, r3
 8004e10:	6879      	ldr	r1, [r7, #4]
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	202c      	movs	r0, #44	; 0x2c
 8004e16:	fb00 f303 	mul.w	r3, r0, r3
 8004e1a:	440b      	add	r3, r1
 8004e1c:	334c      	adds	r3, #76	; 0x4c
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d87a      	bhi.n	8004f1a <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6818      	ldr	r0, [r3, #0]
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	212c      	movs	r1, #44	; 0x2c
 8004e2e:	fb01 f303 	mul.w	r3, r1, r3
 8004e32:	4413      	add	r3, r2
 8004e34:	3344      	adds	r3, #68	; 0x44
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	b292      	uxth	r2, r2
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	f002 ffb1 	bl	8007da4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	212c      	movs	r1, #44	; 0x2c
 8004e48:	fb01 f303 	mul.w	r3, r1, r3
 8004e4c:	4413      	add	r3, r2
 8004e4e:	3344      	adds	r3, #68	; 0x44
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	441a      	add	r2, r3
 8004e56:	6879      	ldr	r1, [r7, #4]
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	202c      	movs	r0, #44	; 0x2c
 8004e5c:	fb00 f303 	mul.w	r3, r0, r3
 8004e60:	440b      	add	r3, r1
 8004e62:	3344      	adds	r3, #68	; 0x44
 8004e64:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	212c      	movs	r1, #44	; 0x2c
 8004e6c:	fb01 f303 	mul.w	r3, r1, r3
 8004e70:	4413      	add	r3, r2
 8004e72:	3350      	adds	r3, #80	; 0x50
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	441a      	add	r2, r3
 8004e7a:	6879      	ldr	r1, [r7, #4]
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	202c      	movs	r0, #44	; 0x2c
 8004e80:	fb00 f303 	mul.w	r3, r0, r3
 8004e84:	440b      	add	r3, r1
 8004e86:	3350      	adds	r3, #80	; 0x50
 8004e88:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	015a      	lsls	r2, r3, #5
 8004e8e:	6a3b      	ldr	r3, [r7, #32]
 8004e90:	4413      	add	r3, r2
 8004e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	0cdb      	lsrs	r3, r3, #19
 8004e9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e9e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	212c      	movs	r1, #44	; 0x2c
 8004ea6:	fb01 f303 	mul.w	r3, r1, r3
 8004eaa:	4413      	add	r3, r2
 8004eac:	3340      	adds	r3, #64	; 0x40
 8004eae:	881b      	ldrh	r3, [r3, #0]
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d13c      	bne.n	8004f32 <HCD_RXQLVL_IRQHandler+0x19a>
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d039      	beq.n	8004f32 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	015a      	lsls	r2, r3, #5
 8004ec2:	6a3b      	ldr	r3, [r7, #32]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004ed4:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004edc:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	015a      	lsls	r2, r3, #5
 8004ee2:	6a3b      	ldr	r3, [r7, #32]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eea:	461a      	mov	r2, r3
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	212c      	movs	r1, #44	; 0x2c
 8004ef6:	fb01 f303 	mul.w	r3, r1, r3
 8004efa:	4413      	add	r3, r2
 8004efc:	3354      	adds	r3, #84	; 0x54
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	f083 0301 	eor.w	r3, r3, #1
 8004f04:	b2d8      	uxtb	r0, r3
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	212c      	movs	r1, #44	; 0x2c
 8004f0c:	fb01 f303 	mul.w	r3, r1, r3
 8004f10:	4413      	add	r3, r2
 8004f12:	3354      	adds	r3, #84	; 0x54
 8004f14:	4602      	mov	r2, r0
 8004f16:	701a      	strb	r2, [r3, #0]
      break;
 8004f18:	e00b      	b.n	8004f32 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	212c      	movs	r1, #44	; 0x2c
 8004f20:	fb01 f303 	mul.w	r3, r1, r3
 8004f24:	4413      	add	r3, r2
 8004f26:	3360      	adds	r3, #96	; 0x60
 8004f28:	2204      	movs	r2, #4
 8004f2a:	701a      	strb	r2, [r3, #0]
      break;
 8004f2c:	e001      	b.n	8004f32 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004f2e:	bf00      	nop
 8004f30:	e000      	b.n	8004f34 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004f32:	bf00      	nop
  }
}
 8004f34:	bf00      	nop
 8004f36:	3728      	adds	r7, #40	; 0x28
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b086      	sub	sp, #24
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004f68:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f003 0302 	and.w	r3, r3, #2
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d10b      	bne.n	8004f8c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f003 0301 	and.w	r3, r3, #1
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d102      	bne.n	8004f84 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f006 fea6 	bl	800bcd0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	f043 0302 	orr.w	r3, r3, #2
 8004f8a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f003 0308 	and.w	r3, r3, #8
 8004f92:	2b08      	cmp	r3, #8
 8004f94:	d132      	bne.n	8004ffc <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	f043 0308 	orr.w	r3, r3, #8
 8004f9c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f003 0304 	and.w	r3, r3, #4
 8004fa4:	2b04      	cmp	r3, #4
 8004fa6:	d126      	bne.n	8004ff6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	699b      	ldr	r3, [r3, #24]
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d113      	bne.n	8004fd8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004fb6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004fba:	d106      	bne.n	8004fca <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	2102      	movs	r1, #2
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f003 f84e 	bl	8008064 <USB_InitFSLSPClkSel>
 8004fc8:	e011      	b.n	8004fee <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2101      	movs	r1, #1
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f003 f847 	bl	8008064 <USB_InitFSLSPClkSel>
 8004fd6:	e00a      	b.n	8004fee <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d106      	bne.n	8004fee <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004fec:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f006 fe98 	bl	800bd24 <HAL_HCD_PortEnabled_Callback>
 8004ff4:	e002      	b.n	8004ffc <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f006 fea2 	bl	800bd40 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f003 0320 	and.w	r3, r3, #32
 8005002:	2b20      	cmp	r3, #32
 8005004:	d103      	bne.n	800500e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	f043 0320 	orr.w	r3, r3, #32
 800500c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005014:	461a      	mov	r2, r3
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	6013      	str	r3, [r2, #0]
}
 800501a:	bf00      	nop
 800501c:	3718      	adds	r7, #24
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
	...

08005024 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d101      	bne.n	8005036 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e12b      	b.n	800528e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800503c:	b2db      	uxtb	r3, r3
 800503e:	2b00      	cmp	r3, #0
 8005040:	d106      	bne.n	8005050 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f7fd f8ec 	bl	8002228 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2224      	movs	r2, #36	; 0x24
 8005054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f022 0201 	bic.w	r2, r2, #1
 8005066:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005076:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005086:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005088:	f002 f956 	bl	8007338 <HAL_RCC_GetPCLK1Freq>
 800508c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	4a81      	ldr	r2, [pc, #516]	; (8005298 <HAL_I2C_Init+0x274>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d807      	bhi.n	80050a8 <HAL_I2C_Init+0x84>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	4a80      	ldr	r2, [pc, #512]	; (800529c <HAL_I2C_Init+0x278>)
 800509c:	4293      	cmp	r3, r2
 800509e:	bf94      	ite	ls
 80050a0:	2301      	movls	r3, #1
 80050a2:	2300      	movhi	r3, #0
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	e006      	b.n	80050b6 <HAL_I2C_Init+0x92>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	4a7d      	ldr	r2, [pc, #500]	; (80052a0 <HAL_I2C_Init+0x27c>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	bf94      	ite	ls
 80050b0:	2301      	movls	r3, #1
 80050b2:	2300      	movhi	r3, #0
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d001      	beq.n	80050be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e0e7      	b.n	800528e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	4a78      	ldr	r2, [pc, #480]	; (80052a4 <HAL_I2C_Init+0x280>)
 80050c2:	fba2 2303 	umull	r2, r3, r2, r3
 80050c6:	0c9b      	lsrs	r3, r3, #18
 80050c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68ba      	ldr	r2, [r7, #8]
 80050da:	430a      	orrs	r2, r1
 80050dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	6a1b      	ldr	r3, [r3, #32]
 80050e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	4a6a      	ldr	r2, [pc, #424]	; (8005298 <HAL_I2C_Init+0x274>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d802      	bhi.n	80050f8 <HAL_I2C_Init+0xd4>
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	3301      	adds	r3, #1
 80050f6:	e009      	b.n	800510c <HAL_I2C_Init+0xe8>
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80050fe:	fb02 f303 	mul.w	r3, r2, r3
 8005102:	4a69      	ldr	r2, [pc, #420]	; (80052a8 <HAL_I2C_Init+0x284>)
 8005104:	fba2 2303 	umull	r2, r3, r2, r3
 8005108:	099b      	lsrs	r3, r3, #6
 800510a:	3301      	adds	r3, #1
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	6812      	ldr	r2, [r2, #0]
 8005110:	430b      	orrs	r3, r1
 8005112:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	69db      	ldr	r3, [r3, #28]
 800511a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800511e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	495c      	ldr	r1, [pc, #368]	; (8005298 <HAL_I2C_Init+0x274>)
 8005128:	428b      	cmp	r3, r1
 800512a:	d819      	bhi.n	8005160 <HAL_I2C_Init+0x13c>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	1e59      	subs	r1, r3, #1
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	005b      	lsls	r3, r3, #1
 8005136:	fbb1 f3f3 	udiv	r3, r1, r3
 800513a:	1c59      	adds	r1, r3, #1
 800513c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005140:	400b      	ands	r3, r1
 8005142:	2b00      	cmp	r3, #0
 8005144:	d00a      	beq.n	800515c <HAL_I2C_Init+0x138>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	1e59      	subs	r1, r3, #1
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	005b      	lsls	r3, r3, #1
 8005150:	fbb1 f3f3 	udiv	r3, r1, r3
 8005154:	3301      	adds	r3, #1
 8005156:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800515a:	e051      	b.n	8005200 <HAL_I2C_Init+0x1dc>
 800515c:	2304      	movs	r3, #4
 800515e:	e04f      	b.n	8005200 <HAL_I2C_Init+0x1dc>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d111      	bne.n	800518c <HAL_I2C_Init+0x168>
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	1e58      	subs	r0, r3, #1
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6859      	ldr	r1, [r3, #4]
 8005170:	460b      	mov	r3, r1
 8005172:	005b      	lsls	r3, r3, #1
 8005174:	440b      	add	r3, r1
 8005176:	fbb0 f3f3 	udiv	r3, r0, r3
 800517a:	3301      	adds	r3, #1
 800517c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005180:	2b00      	cmp	r3, #0
 8005182:	bf0c      	ite	eq
 8005184:	2301      	moveq	r3, #1
 8005186:	2300      	movne	r3, #0
 8005188:	b2db      	uxtb	r3, r3
 800518a:	e012      	b.n	80051b2 <HAL_I2C_Init+0x18e>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	1e58      	subs	r0, r3, #1
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6859      	ldr	r1, [r3, #4]
 8005194:	460b      	mov	r3, r1
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	440b      	add	r3, r1
 800519a:	0099      	lsls	r1, r3, #2
 800519c:	440b      	add	r3, r1
 800519e:	fbb0 f3f3 	udiv	r3, r0, r3
 80051a2:	3301      	adds	r3, #1
 80051a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	bf0c      	ite	eq
 80051ac:	2301      	moveq	r3, #1
 80051ae:	2300      	movne	r3, #0
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d001      	beq.n	80051ba <HAL_I2C_Init+0x196>
 80051b6:	2301      	movs	r3, #1
 80051b8:	e022      	b.n	8005200 <HAL_I2C_Init+0x1dc>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d10e      	bne.n	80051e0 <HAL_I2C_Init+0x1bc>
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	1e58      	subs	r0, r3, #1
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6859      	ldr	r1, [r3, #4]
 80051ca:	460b      	mov	r3, r1
 80051cc:	005b      	lsls	r3, r3, #1
 80051ce:	440b      	add	r3, r1
 80051d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80051d4:	3301      	adds	r3, #1
 80051d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051de:	e00f      	b.n	8005200 <HAL_I2C_Init+0x1dc>
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	1e58      	subs	r0, r3, #1
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6859      	ldr	r1, [r3, #4]
 80051e8:	460b      	mov	r3, r1
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	440b      	add	r3, r1
 80051ee:	0099      	lsls	r1, r3, #2
 80051f0:	440b      	add	r3, r1
 80051f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80051f6:	3301      	adds	r3, #1
 80051f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005200:	6879      	ldr	r1, [r7, #4]
 8005202:	6809      	ldr	r1, [r1, #0]
 8005204:	4313      	orrs	r3, r2
 8005206:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	69da      	ldr	r2, [r3, #28]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a1b      	ldr	r3, [r3, #32]
 800521a:	431a      	orrs	r2, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	430a      	orrs	r2, r1
 8005222:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800522e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	6911      	ldr	r1, [r2, #16]
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	68d2      	ldr	r2, [r2, #12]
 800523a:	4311      	orrs	r1, r2
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	6812      	ldr	r2, [r2, #0]
 8005240:	430b      	orrs	r3, r1
 8005242:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	695a      	ldr	r2, [r3, #20]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	699b      	ldr	r3, [r3, #24]
 8005256:	431a      	orrs	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	430a      	orrs	r2, r1
 800525e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f042 0201 	orr.w	r2, r2, #1
 800526e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2220      	movs	r2, #32
 800527a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3710      	adds	r7, #16
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	000186a0 	.word	0x000186a0
 800529c:	001e847f 	.word	0x001e847f
 80052a0:	003d08ff 	.word	0x003d08ff
 80052a4:	431bde83 	.word	0x431bde83
 80052a8:	10624dd3 	.word	0x10624dd3

080052ac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b088      	sub	sp, #32
 80052b0:	af02      	add	r7, sp, #8
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	607a      	str	r2, [r7, #4]
 80052b6:	461a      	mov	r2, r3
 80052b8:	460b      	mov	r3, r1
 80052ba:	817b      	strh	r3, [r7, #10]
 80052bc:	4613      	mov	r3, r2
 80052be:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80052c0:	f7fd fac0 	bl	8002844 <HAL_GetTick>
 80052c4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	2b20      	cmp	r3, #32
 80052d0:	f040 80e0 	bne.w	8005494 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	9300      	str	r3, [sp, #0]
 80052d8:	2319      	movs	r3, #25
 80052da:	2201      	movs	r2, #1
 80052dc:	4970      	ldr	r1, [pc, #448]	; (80054a0 <HAL_I2C_Master_Transmit+0x1f4>)
 80052de:	68f8      	ldr	r0, [r7, #12]
 80052e0:	f000 fc58 	bl	8005b94 <I2C_WaitOnFlagUntilTimeout>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d001      	beq.n	80052ee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80052ea:	2302      	movs	r3, #2
 80052ec:	e0d3      	b.n	8005496 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d101      	bne.n	80052fc <HAL_I2C_Master_Transmit+0x50>
 80052f8:	2302      	movs	r3, #2
 80052fa:	e0cc      	b.n	8005496 <HAL_I2C_Master_Transmit+0x1ea>
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0301 	and.w	r3, r3, #1
 800530e:	2b01      	cmp	r3, #1
 8005310:	d007      	beq.n	8005322 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f042 0201 	orr.w	r2, r2, #1
 8005320:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005330:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2221      	movs	r2, #33	; 0x21
 8005336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2210      	movs	r2, #16
 800533e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2200      	movs	r2, #0
 8005346:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	893a      	ldrh	r2, [r7, #8]
 8005352:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005358:	b29a      	uxth	r2, r3
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	4a50      	ldr	r2, [pc, #320]	; (80054a4 <HAL_I2C_Master_Transmit+0x1f8>)
 8005362:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005364:	8979      	ldrh	r1, [r7, #10]
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	6a3a      	ldr	r2, [r7, #32]
 800536a:	68f8      	ldr	r0, [r7, #12]
 800536c:	f000 fac2 	bl	80058f4 <I2C_MasterRequestWrite>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d001      	beq.n	800537a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e08d      	b.n	8005496 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800537a:	2300      	movs	r3, #0
 800537c:	613b      	str	r3, [r7, #16]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	695b      	ldr	r3, [r3, #20]
 8005384:	613b      	str	r3, [r7, #16]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	699b      	ldr	r3, [r3, #24]
 800538c:	613b      	str	r3, [r7, #16]
 800538e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005390:	e066      	b.n	8005460 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005392:	697a      	ldr	r2, [r7, #20]
 8005394:	6a39      	ldr	r1, [r7, #32]
 8005396:	68f8      	ldr	r0, [r7, #12]
 8005398:	f000 fcd2 	bl	8005d40 <I2C_WaitOnTXEFlagUntilTimeout>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00d      	beq.n	80053be <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a6:	2b04      	cmp	r3, #4
 80053a8:	d107      	bne.n	80053ba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e06b      	b.n	8005496 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c2:	781a      	ldrb	r2, [r3, #0]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ce:	1c5a      	adds	r2, r3, #1
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053d8:	b29b      	uxth	r3, r3
 80053da:	3b01      	subs	r3, #1
 80053dc:	b29a      	uxth	r2, r3
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053e6:	3b01      	subs	r3, #1
 80053e8:	b29a      	uxth	r2, r3
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	695b      	ldr	r3, [r3, #20]
 80053f4:	f003 0304 	and.w	r3, r3, #4
 80053f8:	2b04      	cmp	r3, #4
 80053fa:	d11b      	bne.n	8005434 <HAL_I2C_Master_Transmit+0x188>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005400:	2b00      	cmp	r3, #0
 8005402:	d017      	beq.n	8005434 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005408:	781a      	ldrb	r2, [r3, #0]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005414:	1c5a      	adds	r2, r3, #1
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800541e:	b29b      	uxth	r3, r3
 8005420:	3b01      	subs	r3, #1
 8005422:	b29a      	uxth	r2, r3
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800542c:	3b01      	subs	r3, #1
 800542e:	b29a      	uxth	r2, r3
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005434:	697a      	ldr	r2, [r7, #20]
 8005436:	6a39      	ldr	r1, [r7, #32]
 8005438:	68f8      	ldr	r0, [r7, #12]
 800543a:	f000 fcc2 	bl	8005dc2 <I2C_WaitOnBTFFlagUntilTimeout>
 800543e:	4603      	mov	r3, r0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d00d      	beq.n	8005460 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005448:	2b04      	cmp	r3, #4
 800544a:	d107      	bne.n	800545c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800545a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e01a      	b.n	8005496 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005464:	2b00      	cmp	r3, #0
 8005466:	d194      	bne.n	8005392 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005476:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2220      	movs	r2, #32
 800547c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2200      	movs	r2, #0
 8005484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005490:	2300      	movs	r3, #0
 8005492:	e000      	b.n	8005496 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005494:	2302      	movs	r3, #2
  }
}
 8005496:	4618      	mov	r0, r3
 8005498:	3718      	adds	r7, #24
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	00100002 	.word	0x00100002
 80054a4:	ffff0000 	.word	0xffff0000

080054a8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b08c      	sub	sp, #48	; 0x30
 80054ac:	af02      	add	r7, sp, #8
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	607a      	str	r2, [r7, #4]
 80054b2:	461a      	mov	r2, r3
 80054b4:	460b      	mov	r3, r1
 80054b6:	817b      	strh	r3, [r7, #10]
 80054b8:	4613      	mov	r3, r2
 80054ba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80054bc:	f7fd f9c2 	bl	8002844 <HAL_GetTick>
 80054c0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	2b20      	cmp	r3, #32
 80054cc:	f040 820b 	bne.w	80058e6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80054d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d2:	9300      	str	r3, [sp, #0]
 80054d4:	2319      	movs	r3, #25
 80054d6:	2201      	movs	r2, #1
 80054d8:	497c      	ldr	r1, [pc, #496]	; (80056cc <HAL_I2C_Master_Receive+0x224>)
 80054da:	68f8      	ldr	r0, [r7, #12]
 80054dc:	f000 fb5a 	bl	8005b94 <I2C_WaitOnFlagUntilTimeout>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d001      	beq.n	80054ea <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80054e6:	2302      	movs	r3, #2
 80054e8:	e1fe      	b.n	80058e8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d101      	bne.n	80054f8 <HAL_I2C_Master_Receive+0x50>
 80054f4:	2302      	movs	r3, #2
 80054f6:	e1f7      	b.n	80058e8 <HAL_I2C_Master_Receive+0x440>
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 0301 	and.w	r3, r3, #1
 800550a:	2b01      	cmp	r3, #1
 800550c:	d007      	beq.n	800551e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f042 0201 	orr.w	r2, r2, #1
 800551c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800552c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2222      	movs	r2, #34	; 0x22
 8005532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2210      	movs	r2, #16
 800553a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2200      	movs	r2, #0
 8005542:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	893a      	ldrh	r2, [r7, #8]
 800554e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005554:	b29a      	uxth	r2, r3
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	4a5c      	ldr	r2, [pc, #368]	; (80056d0 <HAL_I2C_Master_Receive+0x228>)
 800555e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005560:	8979      	ldrh	r1, [r7, #10]
 8005562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005564:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005566:	68f8      	ldr	r0, [r7, #12]
 8005568:	f000 fa46 	bl	80059f8 <I2C_MasterRequestRead>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d001      	beq.n	8005576 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e1b8      	b.n	80058e8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800557a:	2b00      	cmp	r3, #0
 800557c:	d113      	bne.n	80055a6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800557e:	2300      	movs	r3, #0
 8005580:	623b      	str	r3, [r7, #32]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	695b      	ldr	r3, [r3, #20]
 8005588:	623b      	str	r3, [r7, #32]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	623b      	str	r3, [r7, #32]
 8005592:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055a2:	601a      	str	r2, [r3, #0]
 80055a4:	e18c      	b.n	80058c0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d11b      	bne.n	80055e6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055be:	2300      	movs	r3, #0
 80055c0:	61fb      	str	r3, [r7, #28]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	695b      	ldr	r3, [r3, #20]
 80055c8:	61fb      	str	r3, [r7, #28]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	699b      	ldr	r3, [r3, #24]
 80055d0:	61fb      	str	r3, [r7, #28]
 80055d2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055e2:	601a      	str	r2, [r3, #0]
 80055e4:	e16c      	b.n	80058c0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d11b      	bne.n	8005626 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055fc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800560c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800560e:	2300      	movs	r3, #0
 8005610:	61bb      	str	r3, [r7, #24]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	695b      	ldr	r3, [r3, #20]
 8005618:	61bb      	str	r3, [r7, #24]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	699b      	ldr	r3, [r3, #24]
 8005620:	61bb      	str	r3, [r7, #24]
 8005622:	69bb      	ldr	r3, [r7, #24]
 8005624:	e14c      	b.n	80058c0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005634:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005636:	2300      	movs	r3, #0
 8005638:	617b      	str	r3, [r7, #20]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	695b      	ldr	r3, [r3, #20]
 8005640:	617b      	str	r3, [r7, #20]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	699b      	ldr	r3, [r3, #24]
 8005648:	617b      	str	r3, [r7, #20]
 800564a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800564c:	e138      	b.n	80058c0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005652:	2b03      	cmp	r3, #3
 8005654:	f200 80f1 	bhi.w	800583a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800565c:	2b01      	cmp	r3, #1
 800565e:	d123      	bne.n	80056a8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005662:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005664:	68f8      	ldr	r0, [r7, #12]
 8005666:	f000 fbed 	bl	8005e44 <I2C_WaitOnRXNEFlagUntilTimeout>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d001      	beq.n	8005674 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e139      	b.n	80058e8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	691a      	ldr	r2, [r3, #16]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567e:	b2d2      	uxtb	r2, r2
 8005680:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005686:	1c5a      	adds	r2, r3, #1
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005690:	3b01      	subs	r3, #1
 8005692:	b29a      	uxth	r2, r3
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800569c:	b29b      	uxth	r3, r3
 800569e:	3b01      	subs	r3, #1
 80056a0:	b29a      	uxth	r2, r3
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80056a6:	e10b      	b.n	80058c0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	d14e      	bne.n	800574e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80056b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b2:	9300      	str	r3, [sp, #0]
 80056b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b6:	2200      	movs	r2, #0
 80056b8:	4906      	ldr	r1, [pc, #24]	; (80056d4 <HAL_I2C_Master_Receive+0x22c>)
 80056ba:	68f8      	ldr	r0, [r7, #12]
 80056bc:	f000 fa6a 	bl	8005b94 <I2C_WaitOnFlagUntilTimeout>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d008      	beq.n	80056d8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e10e      	b.n	80058e8 <HAL_I2C_Master_Receive+0x440>
 80056ca:	bf00      	nop
 80056cc:	00100002 	.word	0x00100002
 80056d0:	ffff0000 	.word	0xffff0000
 80056d4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	691a      	ldr	r2, [r3, #16]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f2:	b2d2      	uxtb	r2, r2
 80056f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fa:	1c5a      	adds	r2, r3, #1
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005704:	3b01      	subs	r3, #1
 8005706:	b29a      	uxth	r2, r3
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005710:	b29b      	uxth	r3, r3
 8005712:	3b01      	subs	r3, #1
 8005714:	b29a      	uxth	r2, r3
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	691a      	ldr	r2, [r3, #16]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005724:	b2d2      	uxtb	r2, r2
 8005726:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572c:	1c5a      	adds	r2, r3, #1
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005736:	3b01      	subs	r3, #1
 8005738:	b29a      	uxth	r2, r3
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005742:	b29b      	uxth	r3, r3
 8005744:	3b01      	subs	r3, #1
 8005746:	b29a      	uxth	r2, r3
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800574c:	e0b8      	b.n	80058c0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800574e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005750:	9300      	str	r3, [sp, #0]
 8005752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005754:	2200      	movs	r2, #0
 8005756:	4966      	ldr	r1, [pc, #408]	; (80058f0 <HAL_I2C_Master_Receive+0x448>)
 8005758:	68f8      	ldr	r0, [r7, #12]
 800575a:	f000 fa1b 	bl	8005b94 <I2C_WaitOnFlagUntilTimeout>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d001      	beq.n	8005768 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e0bf      	b.n	80058e8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005776:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	691a      	ldr	r2, [r3, #16]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005782:	b2d2      	uxtb	r2, r2
 8005784:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578a:	1c5a      	adds	r2, r3, #1
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005794:	3b01      	subs	r3, #1
 8005796:	b29a      	uxth	r2, r3
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	3b01      	subs	r3, #1
 80057a4:	b29a      	uxth	r2, r3
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80057aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ac:	9300      	str	r3, [sp, #0]
 80057ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b0:	2200      	movs	r2, #0
 80057b2:	494f      	ldr	r1, [pc, #316]	; (80058f0 <HAL_I2C_Master_Receive+0x448>)
 80057b4:	68f8      	ldr	r0, [r7, #12]
 80057b6:	f000 f9ed 	bl	8005b94 <I2C_WaitOnFlagUntilTimeout>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d001      	beq.n	80057c4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e091      	b.n	80058e8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	691a      	ldr	r2, [r3, #16]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057de:	b2d2      	uxtb	r2, r2
 80057e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e6:	1c5a      	adds	r2, r3, #1
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057f0:	3b01      	subs	r3, #1
 80057f2:	b29a      	uxth	r2, r3
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	3b01      	subs	r3, #1
 8005800:	b29a      	uxth	r2, r3
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	691a      	ldr	r2, [r3, #16]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005810:	b2d2      	uxtb	r2, r2
 8005812:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005818:	1c5a      	adds	r2, r3, #1
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005822:	3b01      	subs	r3, #1
 8005824:	b29a      	uxth	r2, r3
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800582e:	b29b      	uxth	r3, r3
 8005830:	3b01      	subs	r3, #1
 8005832:	b29a      	uxth	r2, r3
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005838:	e042      	b.n	80058c0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800583a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800583c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800583e:	68f8      	ldr	r0, [r7, #12]
 8005840:	f000 fb00 	bl	8005e44 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d001      	beq.n	800584e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e04c      	b.n	80058e8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	691a      	ldr	r2, [r3, #16]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005858:	b2d2      	uxtb	r2, r2
 800585a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005860:	1c5a      	adds	r2, r3, #1
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800586a:	3b01      	subs	r3, #1
 800586c:	b29a      	uxth	r2, r3
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005876:	b29b      	uxth	r3, r3
 8005878:	3b01      	subs	r3, #1
 800587a:	b29a      	uxth	r2, r3
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	695b      	ldr	r3, [r3, #20]
 8005886:	f003 0304 	and.w	r3, r3, #4
 800588a:	2b04      	cmp	r3, #4
 800588c:	d118      	bne.n	80058c0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	691a      	ldr	r2, [r3, #16]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005898:	b2d2      	uxtb	r2, r2
 800589a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a0:	1c5a      	adds	r2, r3, #1
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058aa:	3b01      	subs	r3, #1
 80058ac:	b29a      	uxth	r2, r3
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	3b01      	subs	r3, #1
 80058ba:	b29a      	uxth	r2, r3
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	f47f aec2 	bne.w	800564e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2220      	movs	r2, #32
 80058ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80058e2:	2300      	movs	r3, #0
 80058e4:	e000      	b.n	80058e8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80058e6:	2302      	movs	r3, #2
  }
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3728      	adds	r7, #40	; 0x28
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	00010004 	.word	0x00010004

080058f4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b088      	sub	sp, #32
 80058f8:	af02      	add	r7, sp, #8
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	607a      	str	r2, [r7, #4]
 80058fe:	603b      	str	r3, [r7, #0]
 8005900:	460b      	mov	r3, r1
 8005902:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005908:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	2b08      	cmp	r3, #8
 800590e:	d006      	beq.n	800591e <I2C_MasterRequestWrite+0x2a>
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	2b01      	cmp	r3, #1
 8005914:	d003      	beq.n	800591e <I2C_MasterRequestWrite+0x2a>
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800591c:	d108      	bne.n	8005930 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800592c:	601a      	str	r2, [r3, #0]
 800592e:	e00b      	b.n	8005948 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005934:	2b12      	cmp	r3, #18
 8005936:	d107      	bne.n	8005948 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005946:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	9300      	str	r3, [sp, #0]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005954:	68f8      	ldr	r0, [r7, #12]
 8005956:	f000 f91d 	bl	8005b94 <I2C_WaitOnFlagUntilTimeout>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d00d      	beq.n	800597c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800596a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800596e:	d103      	bne.n	8005978 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005976:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005978:	2303      	movs	r3, #3
 800597a:	e035      	b.n	80059e8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005984:	d108      	bne.n	8005998 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005986:	897b      	ldrh	r3, [r7, #10]
 8005988:	b2db      	uxtb	r3, r3
 800598a:	461a      	mov	r2, r3
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005994:	611a      	str	r2, [r3, #16]
 8005996:	e01b      	b.n	80059d0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005998:	897b      	ldrh	r3, [r7, #10]
 800599a:	11db      	asrs	r3, r3, #7
 800599c:	b2db      	uxtb	r3, r3
 800599e:	f003 0306 	and.w	r3, r3, #6
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	f063 030f 	orn	r3, r3, #15
 80059a8:	b2da      	uxtb	r2, r3
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	490e      	ldr	r1, [pc, #56]	; (80059f0 <I2C_MasterRequestWrite+0xfc>)
 80059b6:	68f8      	ldr	r0, [r7, #12]
 80059b8:	f000 f943 	bl	8005c42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d001      	beq.n	80059c6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e010      	b.n	80059e8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80059c6:	897b      	ldrh	r3, [r7, #10]
 80059c8:	b2da      	uxtb	r2, r3
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	4907      	ldr	r1, [pc, #28]	; (80059f4 <I2C_MasterRequestWrite+0x100>)
 80059d6:	68f8      	ldr	r0, [r7, #12]
 80059d8:	f000 f933 	bl	8005c42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d001      	beq.n	80059e6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e000      	b.n	80059e8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80059e6:	2300      	movs	r3, #0
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3718      	adds	r7, #24
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}
 80059f0:	00010008 	.word	0x00010008
 80059f4:	00010002 	.word	0x00010002

080059f8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b088      	sub	sp, #32
 80059fc:	af02      	add	r7, sp, #8
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	607a      	str	r2, [r7, #4]
 8005a02:	603b      	str	r3, [r7, #0]
 8005a04:	460b      	mov	r3, r1
 8005a06:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a0c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a1c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	2b08      	cmp	r3, #8
 8005a22:	d006      	beq.n	8005a32 <I2C_MasterRequestRead+0x3a>
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d003      	beq.n	8005a32 <I2C_MasterRequestRead+0x3a>
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a30:	d108      	bne.n	8005a44 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a40:	601a      	str	r2, [r3, #0]
 8005a42:	e00b      	b.n	8005a5c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a48:	2b11      	cmp	r3, #17
 8005a4a:	d107      	bne.n	8005a5c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a5a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	9300      	str	r3, [sp, #0]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a68:	68f8      	ldr	r0, [r7, #12]
 8005a6a:	f000 f893 	bl	8005b94 <I2C_WaitOnFlagUntilTimeout>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d00d      	beq.n	8005a90 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a82:	d103      	bne.n	8005a8c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a8a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	e079      	b.n	8005b84 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a98:	d108      	bne.n	8005aac <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005a9a:	897b      	ldrh	r3, [r7, #10]
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	f043 0301 	orr.w	r3, r3, #1
 8005aa2:	b2da      	uxtb	r2, r3
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	611a      	str	r2, [r3, #16]
 8005aaa:	e05f      	b.n	8005b6c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005aac:	897b      	ldrh	r3, [r7, #10]
 8005aae:	11db      	asrs	r3, r3, #7
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	f003 0306 	and.w	r3, r3, #6
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	f063 030f 	orn	r3, r3, #15
 8005abc:	b2da      	uxtb	r2, r3
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	4930      	ldr	r1, [pc, #192]	; (8005b8c <I2C_MasterRequestRead+0x194>)
 8005aca:	68f8      	ldr	r0, [r7, #12]
 8005acc:	f000 f8b9 	bl	8005c42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d001      	beq.n	8005ada <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e054      	b.n	8005b84 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005ada:	897b      	ldrh	r3, [r7, #10]
 8005adc:	b2da      	uxtb	r2, r3
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	4929      	ldr	r1, [pc, #164]	; (8005b90 <I2C_MasterRequestRead+0x198>)
 8005aea:	68f8      	ldr	r0, [r7, #12]
 8005aec:	f000 f8a9 	bl	8005c42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005af0:	4603      	mov	r3, r0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d001      	beq.n	8005afa <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	e044      	b.n	8005b84 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005afa:	2300      	movs	r3, #0
 8005afc:	613b      	str	r3, [r7, #16]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	695b      	ldr	r3, [r3, #20]
 8005b04:	613b      	str	r3, [r7, #16]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	699b      	ldr	r3, [r3, #24]
 8005b0c:	613b      	str	r3, [r7, #16]
 8005b0e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b1e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	9300      	str	r3, [sp, #0]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b2c:	68f8      	ldr	r0, [r7, #12]
 8005b2e:	f000 f831 	bl	8005b94 <I2C_WaitOnFlagUntilTimeout>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d00d      	beq.n	8005b54 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b46:	d103      	bne.n	8005b50 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b4e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005b50:	2303      	movs	r3, #3
 8005b52:	e017      	b.n	8005b84 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005b54:	897b      	ldrh	r3, [r7, #10]
 8005b56:	11db      	asrs	r3, r3, #7
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	f003 0306 	and.w	r3, r3, #6
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	f063 030e 	orn	r3, r3, #14
 8005b64:	b2da      	uxtb	r2, r3
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	4907      	ldr	r1, [pc, #28]	; (8005b90 <I2C_MasterRequestRead+0x198>)
 8005b72:	68f8      	ldr	r0, [r7, #12]
 8005b74:	f000 f865 	bl	8005c42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d001      	beq.n	8005b82 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e000      	b.n	8005b84 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3718      	adds	r7, #24
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	00010008 	.word	0x00010008
 8005b90:	00010002 	.word	0x00010002

08005b94 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	603b      	str	r3, [r7, #0]
 8005ba0:	4613      	mov	r3, r2
 8005ba2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ba4:	e025      	b.n	8005bf2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bac:	d021      	beq.n	8005bf2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bae:	f7fc fe49 	bl	8002844 <HAL_GetTick>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	1ad3      	subs	r3, r2, r3
 8005bb8:	683a      	ldr	r2, [r7, #0]
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d302      	bcc.n	8005bc4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d116      	bne.n	8005bf2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2220      	movs	r2, #32
 8005bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bde:	f043 0220 	orr.w	r2, r3, #32
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e023      	b.n	8005c3a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	0c1b      	lsrs	r3, r3, #16
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d10d      	bne.n	8005c18 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	695b      	ldr	r3, [r3, #20]
 8005c02:	43da      	mvns	r2, r3
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	4013      	ands	r3, r2
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	bf0c      	ite	eq
 8005c0e:	2301      	moveq	r3, #1
 8005c10:	2300      	movne	r3, #0
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	461a      	mov	r2, r3
 8005c16:	e00c      	b.n	8005c32 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	43da      	mvns	r2, r3
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	4013      	ands	r3, r2
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	bf0c      	ite	eq
 8005c2a:	2301      	moveq	r3, #1
 8005c2c:	2300      	movne	r3, #0
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	461a      	mov	r2, r3
 8005c32:	79fb      	ldrb	r3, [r7, #7]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d0b6      	beq.n	8005ba6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3710      	adds	r7, #16
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}

08005c42 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005c42:	b580      	push	{r7, lr}
 8005c44:	b084      	sub	sp, #16
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	60f8      	str	r0, [r7, #12]
 8005c4a:	60b9      	str	r1, [r7, #8]
 8005c4c:	607a      	str	r2, [r7, #4]
 8005c4e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c50:	e051      	b.n	8005cf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	695b      	ldr	r3, [r3, #20]
 8005c58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c60:	d123      	bne.n	8005caa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c70:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c7a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2220      	movs	r2, #32
 8005c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c96:	f043 0204 	orr.w	r2, r3, #4
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e046      	b.n	8005d38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cb0:	d021      	beq.n	8005cf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cb2:	f7fc fdc7 	bl	8002844 <HAL_GetTick>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d302      	bcc.n	8005cc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d116      	bne.n	8005cf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2220      	movs	r2, #32
 8005cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce2:	f043 0220 	orr.w	r2, r3, #32
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e020      	b.n	8005d38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	0c1b      	lsrs	r3, r3, #16
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d10c      	bne.n	8005d1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	695b      	ldr	r3, [r3, #20]
 8005d06:	43da      	mvns	r2, r3
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	bf14      	ite	ne
 8005d12:	2301      	movne	r3, #1
 8005d14:	2300      	moveq	r3, #0
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	e00b      	b.n	8005d32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	699b      	ldr	r3, [r3, #24]
 8005d20:	43da      	mvns	r2, r3
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	4013      	ands	r3, r2
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	bf14      	ite	ne
 8005d2c:	2301      	movne	r3, #1
 8005d2e:	2300      	moveq	r3, #0
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d18d      	bne.n	8005c52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005d36:	2300      	movs	r3, #0
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3710      	adds	r7, #16
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}

08005d40 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	60b9      	str	r1, [r7, #8]
 8005d4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d4c:	e02d      	b.n	8005daa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d4e:	68f8      	ldr	r0, [r7, #12]
 8005d50:	f000 f8ce 	bl	8005ef0 <I2C_IsAcknowledgeFailed>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d001      	beq.n	8005d5e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e02d      	b.n	8005dba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d64:	d021      	beq.n	8005daa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d66:	f7fc fd6d 	bl	8002844 <HAL_GetTick>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	1ad3      	subs	r3, r2, r3
 8005d70:	68ba      	ldr	r2, [r7, #8]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d302      	bcc.n	8005d7c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d116      	bne.n	8005daa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2220      	movs	r2, #32
 8005d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d96:	f043 0220 	orr.w	r2, r3, #32
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e007      	b.n	8005dba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	695b      	ldr	r3, [r3, #20]
 8005db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005db4:	2b80      	cmp	r3, #128	; 0x80
 8005db6:	d1ca      	bne.n	8005d4e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005db8:	2300      	movs	r3, #0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3710      	adds	r7, #16
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}

08005dc2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005dc2:	b580      	push	{r7, lr}
 8005dc4:	b084      	sub	sp, #16
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	60f8      	str	r0, [r7, #12]
 8005dca:	60b9      	str	r1, [r7, #8]
 8005dcc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005dce:	e02d      	b.n	8005e2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005dd0:	68f8      	ldr	r0, [r7, #12]
 8005dd2:	f000 f88d 	bl	8005ef0 <I2C_IsAcknowledgeFailed>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d001      	beq.n	8005de0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e02d      	b.n	8005e3c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005de6:	d021      	beq.n	8005e2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005de8:	f7fc fd2c 	bl	8002844 <HAL_GetTick>
 8005dec:	4602      	mov	r2, r0
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	1ad3      	subs	r3, r2, r3
 8005df2:	68ba      	ldr	r2, [r7, #8]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d302      	bcc.n	8005dfe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d116      	bne.n	8005e2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2200      	movs	r2, #0
 8005e02:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2220      	movs	r2, #32
 8005e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e18:	f043 0220 	orr.w	r2, r3, #32
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e007      	b.n	8005e3c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	695b      	ldr	r3, [r3, #20]
 8005e32:	f003 0304 	and.w	r3, r3, #4
 8005e36:	2b04      	cmp	r3, #4
 8005e38:	d1ca      	bne.n	8005dd0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e3a:	2300      	movs	r3, #0
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3710      	adds	r7, #16
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005e50:	e042      	b.n	8005ed8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	695b      	ldr	r3, [r3, #20]
 8005e58:	f003 0310 	and.w	r3, r3, #16
 8005e5c:	2b10      	cmp	r3, #16
 8005e5e:	d119      	bne.n	8005e94 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f06f 0210 	mvn.w	r2, #16
 8005e68:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2220      	movs	r2, #32
 8005e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	e029      	b.n	8005ee8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e94:	f7fc fcd6 	bl	8002844 <HAL_GetTick>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	68ba      	ldr	r2, [r7, #8]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d302      	bcc.n	8005eaa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d116      	bne.n	8005ed8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2200      	movs	r2, #0
 8005eae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2220      	movs	r2, #32
 8005eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec4:	f043 0220 	orr.w	r2, r3, #32
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e007      	b.n	8005ee8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	695b      	ldr	r3, [r3, #20]
 8005ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee2:	2b40      	cmp	r3, #64	; 0x40
 8005ee4:	d1b5      	bne.n	8005e52 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005ee6:	2300      	movs	r3, #0
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3710      	adds	r7, #16
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	695b      	ldr	r3, [r3, #20]
 8005efe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f06:	d11b      	bne.n	8005f40 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f10:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2220      	movs	r2, #32
 8005f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2200      	movs	r2, #0
 8005f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2c:	f043 0204 	orr.w	r2, r3, #4
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e000      	b.n	8005f42 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	370c      	adds	r7, #12
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr
	...

08005f50 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b088      	sub	sp, #32
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d101      	bne.n	8005f62 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e128      	b.n	80061b4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d109      	bne.n	8005f82 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4a90      	ldr	r2, [pc, #576]	; (80061bc <HAL_I2S_Init+0x26c>)
 8005f7a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f7fc f99b 	bl	80022b8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2202      	movs	r2, #2
 8005f86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	69db      	ldr	r3, [r3, #28]
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	6812      	ldr	r2, [r2, #0]
 8005f94:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005f98:	f023 030f 	bic.w	r3, r3, #15
 8005f9c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	2202      	movs	r2, #2
 8005fa4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	695b      	ldr	r3, [r3, #20]
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	d060      	beq.n	8006070 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d102      	bne.n	8005fbc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005fb6:	2310      	movs	r3, #16
 8005fb8:	617b      	str	r3, [r7, #20]
 8005fba:	e001      	b.n	8005fc0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005fbc:	2320      	movs	r3, #32
 8005fbe:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	2b20      	cmp	r3, #32
 8005fc6:	d802      	bhi.n	8005fce <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	005b      	lsls	r3, r3, #1
 8005fcc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005fce:	2001      	movs	r0, #1
 8005fd0:	f001 faa8 	bl	8007524 <HAL_RCCEx_GetPeriphCLKFreq>
 8005fd4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	691b      	ldr	r3, [r3, #16]
 8005fda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fde:	d125      	bne.n	800602c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d010      	beq.n	800600a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ff2:	4613      	mov	r3, r2
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	4413      	add	r3, r2
 8005ff8:	005b      	lsls	r3, r3, #1
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	695b      	ldr	r3, [r3, #20]
 8006000:	fbb2 f3f3 	udiv	r3, r2, r3
 8006004:	3305      	adds	r3, #5
 8006006:	613b      	str	r3, [r7, #16]
 8006008:	e01f      	b.n	800604a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	00db      	lsls	r3, r3, #3
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	fbb2 f2f3 	udiv	r2, r2, r3
 8006014:	4613      	mov	r3, r2
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	4413      	add	r3, r2
 800601a:	005b      	lsls	r3, r3, #1
 800601c:	461a      	mov	r2, r3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	695b      	ldr	r3, [r3, #20]
 8006022:	fbb2 f3f3 	udiv	r3, r2, r3
 8006026:	3305      	adds	r3, #5
 8006028:	613b      	str	r3, [r7, #16]
 800602a:	e00e      	b.n	800604a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	fbb2 f2f3 	udiv	r2, r2, r3
 8006034:	4613      	mov	r3, r2
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	4413      	add	r3, r2
 800603a:	005b      	lsls	r3, r3, #1
 800603c:	461a      	mov	r2, r3
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	695b      	ldr	r3, [r3, #20]
 8006042:	fbb2 f3f3 	udiv	r3, r2, r3
 8006046:	3305      	adds	r3, #5
 8006048:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	4a5c      	ldr	r2, [pc, #368]	; (80061c0 <HAL_I2S_Init+0x270>)
 800604e:	fba2 2303 	umull	r2, r3, r2, r3
 8006052:	08db      	lsrs	r3, r3, #3
 8006054:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	f003 0301 	and.w	r3, r3, #1
 800605c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800605e:	693a      	ldr	r2, [r7, #16]
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	1ad3      	subs	r3, r2, r3
 8006064:	085b      	lsrs	r3, r3, #1
 8006066:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	021b      	lsls	r3, r3, #8
 800606c:	61bb      	str	r3, [r7, #24]
 800606e:	e003      	b.n	8006078 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8006070:	2302      	movs	r3, #2
 8006072:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8006074:	2300      	movs	r3, #0
 8006076:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	2b01      	cmp	r3, #1
 800607c:	d902      	bls.n	8006084 <HAL_I2S_Init+0x134>
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	2bff      	cmp	r3, #255	; 0xff
 8006082:	d907      	bls.n	8006094 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006088:	f043 0210 	orr.w	r2, r3, #16
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	e08f      	b.n	80061b4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	691a      	ldr	r2, [r3, #16]
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	ea42 0103 	orr.w	r1, r2, r3
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	69fa      	ldr	r2, [r7, #28]
 80060a4:	430a      	orrs	r2, r1
 80060a6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	69db      	ldr	r3, [r3, #28]
 80060ae:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80060b2:	f023 030f 	bic.w	r3, r3, #15
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	6851      	ldr	r1, [r2, #4]
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	6892      	ldr	r2, [r2, #8]
 80060be:	4311      	orrs	r1, r2
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	68d2      	ldr	r2, [r2, #12]
 80060c4:	4311      	orrs	r1, r2
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	6992      	ldr	r2, [r2, #24]
 80060ca:	430a      	orrs	r2, r1
 80060cc:	431a      	orrs	r2, r3
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060d6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6a1b      	ldr	r3, [r3, #32]
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d161      	bne.n	80061a4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	4a38      	ldr	r2, [pc, #224]	; (80061c4 <HAL_I2S_Init+0x274>)
 80060e4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a37      	ldr	r2, [pc, #220]	; (80061c8 <HAL_I2S_Init+0x278>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d101      	bne.n	80060f4 <HAL_I2S_Init+0x1a4>
 80060f0:	4b36      	ldr	r3, [pc, #216]	; (80061cc <HAL_I2S_Init+0x27c>)
 80060f2:	e001      	b.n	80060f8 <HAL_I2S_Init+0x1a8>
 80060f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060f8:	69db      	ldr	r3, [r3, #28]
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	6812      	ldr	r2, [r2, #0]
 80060fe:	4932      	ldr	r1, [pc, #200]	; (80061c8 <HAL_I2S_Init+0x278>)
 8006100:	428a      	cmp	r2, r1
 8006102:	d101      	bne.n	8006108 <HAL_I2S_Init+0x1b8>
 8006104:	4a31      	ldr	r2, [pc, #196]	; (80061cc <HAL_I2S_Init+0x27c>)
 8006106:	e001      	b.n	800610c <HAL_I2S_Init+0x1bc>
 8006108:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800610c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006110:	f023 030f 	bic.w	r3, r3, #15
 8006114:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a2b      	ldr	r2, [pc, #172]	; (80061c8 <HAL_I2S_Init+0x278>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d101      	bne.n	8006124 <HAL_I2S_Init+0x1d4>
 8006120:	4b2a      	ldr	r3, [pc, #168]	; (80061cc <HAL_I2S_Init+0x27c>)
 8006122:	e001      	b.n	8006128 <HAL_I2S_Init+0x1d8>
 8006124:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006128:	2202      	movs	r2, #2
 800612a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a25      	ldr	r2, [pc, #148]	; (80061c8 <HAL_I2S_Init+0x278>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d101      	bne.n	800613a <HAL_I2S_Init+0x1ea>
 8006136:	4b25      	ldr	r3, [pc, #148]	; (80061cc <HAL_I2S_Init+0x27c>)
 8006138:	e001      	b.n	800613e <HAL_I2S_Init+0x1ee>
 800613a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800613e:	69db      	ldr	r3, [r3, #28]
 8006140:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800614a:	d003      	beq.n	8006154 <HAL_I2S_Init+0x204>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d103      	bne.n	800615c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8006154:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006158:	613b      	str	r3, [r7, #16]
 800615a:	e001      	b.n	8006160 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800615c:	2300      	movs	r3, #0
 800615e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800616a:	4313      	orrs	r3, r2
 800616c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006174:	4313      	orrs	r3, r2
 8006176:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	699b      	ldr	r3, [r3, #24]
 800617c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800617e:	4313      	orrs	r3, r2
 8006180:	b29a      	uxth	r2, r3
 8006182:	897b      	ldrh	r3, [r7, #10]
 8006184:	4313      	orrs	r3, r2
 8006186:	b29b      	uxth	r3, r3
 8006188:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800618c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a0d      	ldr	r2, [pc, #52]	; (80061c8 <HAL_I2S_Init+0x278>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d101      	bne.n	800619c <HAL_I2S_Init+0x24c>
 8006198:	4b0c      	ldr	r3, [pc, #48]	; (80061cc <HAL_I2S_Init+0x27c>)
 800619a:	e001      	b.n	80061a0 <HAL_I2S_Init+0x250>
 800619c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80061a0:	897a      	ldrh	r2, [r7, #10]
 80061a2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2201      	movs	r2, #1
 80061ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80061b2:	2300      	movs	r3, #0
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3720      	adds	r7, #32
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}
 80061bc:	080064d9 	.word	0x080064d9
 80061c0:	cccccccd 	.word	0xcccccccd
 80061c4:	080065ed 	.word	0x080065ed
 80061c8:	40003800 	.word	0x40003800
 80061cc:	40003400 	.word	0x40003400

080061d0 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b086      	sub	sp, #24
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	60f8      	str	r0, [r7, #12]
 80061d8:	60b9      	str	r1, [r7, #8]
 80061da:	4613      	mov	r3, r2
 80061dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d002      	beq.n	80061ea <HAL_I2S_Receive_DMA+0x1a>
 80061e4:	88fb      	ldrh	r3, [r7, #6]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d101      	bne.n	80061ee <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e0a1      	b.n	8006332 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d101      	bne.n	80061fe <HAL_I2S_Receive_DMA+0x2e>
 80061fa:	2302      	movs	r3, #2
 80061fc:	e099      	b.n	8006332 <HAL_I2S_Receive_DMA+0x162>
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2201      	movs	r2, #1
 8006202:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800620c:	b2db      	uxtb	r3, r3
 800620e:	2b01      	cmp	r3, #1
 8006210:	d005      	beq.n	800621e <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2200      	movs	r2, #0
 8006216:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 800621a:	2302      	movs	r3, #2
 800621c:	e089      	b.n	8006332 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2204      	movs	r2, #4
 8006222:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2200      	movs	r2, #0
 800622a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	68ba      	ldr	r2, [r7, #8]
 8006230:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	69db      	ldr	r3, [r3, #28]
 8006238:	f003 0307 	and.w	r3, r3, #7
 800623c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	2b03      	cmp	r3, #3
 8006242:	d002      	beq.n	800624a <HAL_I2S_Receive_DMA+0x7a>
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	2b05      	cmp	r3, #5
 8006248:	d10a      	bne.n	8006260 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 800624a:	88fb      	ldrh	r3, [r7, #6]
 800624c:	005b      	lsls	r3, r3, #1
 800624e:	b29a      	uxth	r2, r3
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8006254:	88fb      	ldrh	r3, [r7, #6]
 8006256:	005b      	lsls	r3, r3, #1
 8006258:	b29a      	uxth	r2, r3
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	865a      	strh	r2, [r3, #50]	; 0x32
 800625e:	e005      	b.n	800626c <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	88fa      	ldrh	r2, [r7, #6]
 8006264:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	88fa      	ldrh	r2, [r7, #6]
 800626a:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006270:	4a32      	ldr	r2, [pc, #200]	; (800633c <HAL_I2S_Receive_DMA+0x16c>)
 8006272:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006278:	4a31      	ldr	r2, [pc, #196]	; (8006340 <HAL_I2S_Receive_DMA+0x170>)
 800627a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006280:	4a30      	ldr	r2, [pc, #192]	; (8006344 <HAL_I2S_Receive_DMA+0x174>)
 8006282:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	69db      	ldr	r3, [r3, #28]
 800628a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800628e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006292:	d10a      	bne.n	80062aa <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006294:	2300      	movs	r3, #0
 8006296:	613b      	str	r3, [r7, #16]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	68db      	ldr	r3, [r3, #12]
 800629e:	613b      	str	r3, [r7, #16]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	613b      	str	r3, [r7, #16]
 80062a8:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	330c      	adds	r3, #12
 80062b4:	4619      	mov	r1, r3
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ba:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80062c0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80062c2:	f7fc fcaf 	bl	8002c24 <HAL_DMA_Start_IT>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d00f      	beq.n	80062ec <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062d0:	f043 0208 	orr.w	r2, r3, #8
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	e022      	b.n	8006332 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	69db      	ldr	r3, [r3, #28]
 80062f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d107      	bne.n	800630a <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	69da      	ldr	r2, [r3, #28]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006308:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	f003 0301 	and.w	r3, r3, #1
 8006314:	2b00      	cmp	r3, #0
 8006316:	d107      	bne.n	8006328 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	685a      	ldr	r2, [r3, #4]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f042 0201 	orr.w	r2, r2, #1
 8006326:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2200      	movs	r2, #0
 800632c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	4618      	mov	r0, r3
 8006334:	3718      	adds	r7, #24
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop
 800633c:	080063b7 	.word	0x080063b7
 8006340:	08006375 	.word	0x08006375
 8006344:	080063d3 	.word	0x080063d3

08006348 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	4798      	blx	r3
}
 8006358:	bf00      	nop
 800635a:	3708      	adds	r7, #8
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8006368:	bf00      	nop
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006380:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	69db      	ldr	r3, [r3, #28]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d10e      	bne.n	80063a8 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	685a      	ldr	r2, [r3, #4]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f022 0201 	bic.w	r2, r2, #1
 8006398:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2200      	movs	r2, #0
 800639e:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 80063a8:	68f8      	ldr	r0, [r7, #12]
 80063aa:	f7fa fccf 	bl	8000d4c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80063ae:	bf00      	nop
 80063b0:	3710      	adds	r7, #16
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}

080063b6 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80063b6:	b580      	push	{r7, lr}
 80063b8:	b084      	sub	sp, #16
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c2:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 80063c4:	68f8      	ldr	r0, [r7, #12]
 80063c6:	f7fa fc95 	bl	8000cf4 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80063ca:	bf00      	nop
 80063cc:	3710      	adds	r7, #16
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}

080063d2 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80063d2:	b580      	push	{r7, lr}
 80063d4:	b084      	sub	sp, #16
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063de:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	685a      	ldr	r2, [r3, #4]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f022 0203 	bic.w	r2, r2, #3
 80063ee:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2200      	movs	r2, #0
 80063f4:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2200      	movs	r2, #0
 80063fa:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2201      	movs	r2, #1
 8006400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006408:	f043 0208 	orr.w	r2, r3, #8
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8006410:	68f8      	ldr	r0, [r7, #12]
 8006412:	f7ff ffa5 	bl	8006360 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006416:	bf00      	nop
 8006418:	3710      	adds	r7, #16
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800641e:	b580      	push	{r7, lr}
 8006420:	b082      	sub	sp, #8
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642a:	881a      	ldrh	r2, [r3, #0]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006436:	1c9a      	adds	r2, r3, #2
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006440:	b29b      	uxth	r3, r3
 8006442:	3b01      	subs	r3, #1
 8006444:	b29a      	uxth	r2, r3
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800644e:	b29b      	uxth	r3, r3
 8006450:	2b00      	cmp	r3, #0
 8006452:	d10e      	bne.n	8006472 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	685a      	ldr	r2, [r3, #4]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006462:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f7fa fc99 	bl	8000da4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006472:	bf00      	nop
 8006474:	3708      	adds	r7, #8
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}

0800647a <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800647a:	b580      	push	{r7, lr}
 800647c:	b082      	sub	sp, #8
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	68da      	ldr	r2, [r3, #12]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800648c:	b292      	uxth	r2, r2
 800648e:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006494:	1c9a      	adds	r2, r3, #2
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800649e:	b29b      	uxth	r3, r3
 80064a0:	3b01      	subs	r3, #1
 80064a2:	b29a      	uxth	r2, r3
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d10e      	bne.n	80064d0 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	685a      	ldr	r2, [r3, #4]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80064c0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2201      	movs	r2, #1
 80064c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f7fa fc3e 	bl	8000d4c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80064d0:	bf00      	nop
 80064d2:	3708      	adds	r7, #8
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b086      	sub	sp, #24
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	2b04      	cmp	r3, #4
 80064f2:	d13a      	bne.n	800656a <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	f003 0301 	and.w	r3, r3, #1
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d109      	bne.n	8006512 <I2S_IRQHandler+0x3a>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006508:	2b40      	cmp	r3, #64	; 0x40
 800650a:	d102      	bne.n	8006512 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f7ff ffb4 	bl	800647a <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006518:	2b40      	cmp	r3, #64	; 0x40
 800651a:	d126      	bne.n	800656a <I2S_IRQHandler+0x92>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	f003 0320 	and.w	r3, r3, #32
 8006526:	2b20      	cmp	r3, #32
 8006528:	d11f      	bne.n	800656a <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	685a      	ldr	r2, [r3, #4]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006538:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800653a:	2300      	movs	r3, #0
 800653c:	613b      	str	r3, [r7, #16]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	613b      	str	r3, [r7, #16]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	613b      	str	r3, [r7, #16]
 800654e:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800655c:	f043 0202 	orr.w	r2, r3, #2
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f7ff fefb 	bl	8006360 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006570:	b2db      	uxtb	r3, r3
 8006572:	2b03      	cmp	r3, #3
 8006574:	d136      	bne.n	80065e4 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	f003 0302 	and.w	r3, r3, #2
 800657c:	2b02      	cmp	r3, #2
 800657e:	d109      	bne.n	8006594 <I2S_IRQHandler+0xbc>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800658a:	2b80      	cmp	r3, #128	; 0x80
 800658c:	d102      	bne.n	8006594 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f7ff ff45 	bl	800641e <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	f003 0308 	and.w	r3, r3, #8
 800659a:	2b08      	cmp	r3, #8
 800659c:	d122      	bne.n	80065e4 <I2S_IRQHandler+0x10c>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	f003 0320 	and.w	r3, r3, #32
 80065a8:	2b20      	cmp	r3, #32
 80065aa:	d11b      	bne.n	80065e4 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	685a      	ldr	r2, [r3, #4]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80065ba:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80065bc:	2300      	movs	r3, #0
 80065be:	60fb      	str	r3, [r7, #12]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	60fb      	str	r3, [r7, #12]
 80065c8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2201      	movs	r2, #1
 80065ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065d6:	f043 0204 	orr.w	r2, r3, #4
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f7ff febe 	bl	8006360 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80065e4:	bf00      	nop
 80065e6:	3718      	adds	r7, #24
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b088      	sub	sp, #32
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4aa2      	ldr	r2, [pc, #648]	; (800688c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d101      	bne.n	800660a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8006606:	4ba2      	ldr	r3, [pc, #648]	; (8006890 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006608:	e001      	b.n	800660e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800660a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a9b      	ldr	r2, [pc, #620]	; (800688c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d101      	bne.n	8006628 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006624:	4b9a      	ldr	r3, [pc, #616]	; (8006890 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006626:	e001      	b.n	800662c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006628:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006638:	d004      	beq.n	8006644 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	2b00      	cmp	r3, #0
 8006640:	f040 8099 	bne.w	8006776 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006644:	69fb      	ldr	r3, [r7, #28]
 8006646:	f003 0302 	and.w	r3, r3, #2
 800664a:	2b02      	cmp	r3, #2
 800664c:	d107      	bne.n	800665e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006654:	2b00      	cmp	r3, #0
 8006656:	d002      	beq.n	800665e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 f925 	bl	80068a8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800665e:	69bb      	ldr	r3, [r7, #24]
 8006660:	f003 0301 	and.w	r3, r3, #1
 8006664:	2b01      	cmp	r3, #1
 8006666:	d107      	bne.n	8006678 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800666e:	2b00      	cmp	r3, #0
 8006670:	d002      	beq.n	8006678 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 f9c8 	bl	8006a08 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006678:	69bb      	ldr	r3, [r7, #24]
 800667a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800667e:	2b40      	cmp	r3, #64	; 0x40
 8006680:	d13a      	bne.n	80066f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	f003 0320 	and.w	r3, r3, #32
 8006688:	2b00      	cmp	r3, #0
 800668a:	d035      	beq.n	80066f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a7e      	ldr	r2, [pc, #504]	; (800688c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d101      	bne.n	800669a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8006696:	4b7e      	ldr	r3, [pc, #504]	; (8006890 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006698:	e001      	b.n	800669e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800669a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800669e:	685a      	ldr	r2, [r3, #4]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4979      	ldr	r1, [pc, #484]	; (800688c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80066a6:	428b      	cmp	r3, r1
 80066a8:	d101      	bne.n	80066ae <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80066aa:	4b79      	ldr	r3, [pc, #484]	; (8006890 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80066ac:	e001      	b.n	80066b2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80066ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80066b2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80066b6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	685a      	ldr	r2, [r3, #4]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80066c6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80066c8:	2300      	movs	r3, #0
 80066ca:	60fb      	str	r3, [r7, #12]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	68db      	ldr	r3, [r3, #12]
 80066d2:	60fb      	str	r3, [r7, #12]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	60fb      	str	r3, [r7, #12]
 80066dc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2201      	movs	r2, #1
 80066e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ea:	f043 0202 	orr.w	r2, r3, #2
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f7ff fe34 	bl	8006360 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	f003 0308 	and.w	r3, r3, #8
 80066fe:	2b08      	cmp	r3, #8
 8006700:	f040 80be 	bne.w	8006880 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	f003 0320 	and.w	r3, r3, #32
 800670a:	2b00      	cmp	r3, #0
 800670c:	f000 80b8 	beq.w	8006880 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	685a      	ldr	r2, [r3, #4]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800671e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a59      	ldr	r2, [pc, #356]	; (800688c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d101      	bne.n	800672e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800672a:	4b59      	ldr	r3, [pc, #356]	; (8006890 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800672c:	e001      	b.n	8006732 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800672e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006732:	685a      	ldr	r2, [r3, #4]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4954      	ldr	r1, [pc, #336]	; (800688c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800673a:	428b      	cmp	r3, r1
 800673c:	d101      	bne.n	8006742 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800673e:	4b54      	ldr	r3, [pc, #336]	; (8006890 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006740:	e001      	b.n	8006746 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8006742:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006746:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800674a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800674c:	2300      	movs	r3, #0
 800674e:	60bb      	str	r3, [r7, #8]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	60bb      	str	r3, [r7, #8]
 8006758:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2201      	movs	r2, #1
 800675e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006766:	f043 0204 	orr.w	r2, r3, #4
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f7ff fdf6 	bl	8006360 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006774:	e084      	b.n	8006880 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8006776:	69bb      	ldr	r3, [r7, #24]
 8006778:	f003 0302 	and.w	r3, r3, #2
 800677c:	2b02      	cmp	r3, #2
 800677e:	d107      	bne.n	8006790 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006786:	2b00      	cmp	r3, #0
 8006788:	d002      	beq.n	8006790 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 f8be 	bl	800690c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	f003 0301 	and.w	r3, r3, #1
 8006796:	2b01      	cmp	r3, #1
 8006798:	d107      	bne.n	80067aa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d002      	beq.n	80067aa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f000 f8fd 	bl	80069a4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067b0:	2b40      	cmp	r3, #64	; 0x40
 80067b2:	d12f      	bne.n	8006814 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	f003 0320 	and.w	r3, r3, #32
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d02a      	beq.n	8006814 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	685a      	ldr	r2, [r3, #4]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80067cc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a2e      	ldr	r2, [pc, #184]	; (800688c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d101      	bne.n	80067dc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80067d8:	4b2d      	ldr	r3, [pc, #180]	; (8006890 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80067da:	e001      	b.n	80067e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80067dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80067e0:	685a      	ldr	r2, [r3, #4]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4929      	ldr	r1, [pc, #164]	; (800688c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80067e8:	428b      	cmp	r3, r1
 80067ea:	d101      	bne.n	80067f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80067ec:	4b28      	ldr	r3, [pc, #160]	; (8006890 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80067ee:	e001      	b.n	80067f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80067f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80067f4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80067f8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2201      	movs	r2, #1
 80067fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006806:	f043 0202 	orr.w	r2, r3, #2
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f7ff fda6 	bl	8006360 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006814:	69bb      	ldr	r3, [r7, #24]
 8006816:	f003 0308 	and.w	r3, r3, #8
 800681a:	2b08      	cmp	r3, #8
 800681c:	d131      	bne.n	8006882 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	f003 0320 	and.w	r3, r3, #32
 8006824:	2b00      	cmp	r3, #0
 8006826:	d02c      	beq.n	8006882 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a17      	ldr	r2, [pc, #92]	; (800688c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d101      	bne.n	8006836 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006832:	4b17      	ldr	r3, [pc, #92]	; (8006890 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006834:	e001      	b.n	800683a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006836:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800683a:	685a      	ldr	r2, [r3, #4]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4912      	ldr	r1, [pc, #72]	; (800688c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006842:	428b      	cmp	r3, r1
 8006844:	d101      	bne.n	800684a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8006846:	4b12      	ldr	r3, [pc, #72]	; (8006890 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006848:	e001      	b.n	800684e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800684a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800684e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006852:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	685a      	ldr	r2, [r3, #4]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006862:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006870:	f043 0204 	orr.w	r2, r3, #4
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f7ff fd71 	bl	8006360 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800687e:	e000      	b.n	8006882 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006880:	bf00      	nop
}
 8006882:	bf00      	nop
 8006884:	3720      	adds	r7, #32
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	40003800 	.word	0x40003800
 8006890:	40003400 	.word	0x40003400

08006894 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006894:	b480      	push	{r7}
 8006896:	b083      	sub	sp, #12
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800689c:	bf00      	nop
 800689e:	370c      	adds	r7, #12
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b4:	1c99      	adds	r1, r3, #2
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	6251      	str	r1, [r2, #36]	; 0x24
 80068ba:	881a      	ldrh	r2, [r3, #0]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	3b01      	subs	r3, #1
 80068ca:	b29a      	uxth	r2, r3
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d113      	bne.n	8006902 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	685a      	ldr	r2, [r3, #4]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80068e8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d106      	bne.n	8006902 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f7ff ffc9 	bl	8006894 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006902:	bf00      	nop
 8006904:	3708      	adds	r7, #8
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
	...

0800690c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b082      	sub	sp, #8
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006918:	1c99      	adds	r1, r3, #2
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	6251      	str	r1, [r2, #36]	; 0x24
 800691e:	8819      	ldrh	r1, [r3, #0]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a1d      	ldr	r2, [pc, #116]	; (800699c <I2SEx_TxISR_I2SExt+0x90>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d101      	bne.n	800692e <I2SEx_TxISR_I2SExt+0x22>
 800692a:	4b1d      	ldr	r3, [pc, #116]	; (80069a0 <I2SEx_TxISR_I2SExt+0x94>)
 800692c:	e001      	b.n	8006932 <I2SEx_TxISR_I2SExt+0x26>
 800692e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006932:	460a      	mov	r2, r1
 8006934:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800693a:	b29b      	uxth	r3, r3
 800693c:	3b01      	subs	r3, #1
 800693e:	b29a      	uxth	r2, r3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006948:	b29b      	uxth	r3, r3
 800694a:	2b00      	cmp	r3, #0
 800694c:	d121      	bne.n	8006992 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a12      	ldr	r2, [pc, #72]	; (800699c <I2SEx_TxISR_I2SExt+0x90>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d101      	bne.n	800695c <I2SEx_TxISR_I2SExt+0x50>
 8006958:	4b11      	ldr	r3, [pc, #68]	; (80069a0 <I2SEx_TxISR_I2SExt+0x94>)
 800695a:	e001      	b.n	8006960 <I2SEx_TxISR_I2SExt+0x54>
 800695c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006960:	685a      	ldr	r2, [r3, #4]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	490d      	ldr	r1, [pc, #52]	; (800699c <I2SEx_TxISR_I2SExt+0x90>)
 8006968:	428b      	cmp	r3, r1
 800696a:	d101      	bne.n	8006970 <I2SEx_TxISR_I2SExt+0x64>
 800696c:	4b0c      	ldr	r3, [pc, #48]	; (80069a0 <I2SEx_TxISR_I2SExt+0x94>)
 800696e:	e001      	b.n	8006974 <I2SEx_TxISR_I2SExt+0x68>
 8006970:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006974:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006978:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800697e:	b29b      	uxth	r3, r3
 8006980:	2b00      	cmp	r3, #0
 8006982:	d106      	bne.n	8006992 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f7ff ff81 	bl	8006894 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006992:	bf00      	nop
 8006994:	3708      	adds	r7, #8
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	40003800 	.word	0x40003800
 80069a0:	40003400 	.word	0x40003400

080069a4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b082      	sub	sp, #8
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	68d8      	ldr	r0, [r3, #12]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b6:	1c99      	adds	r1, r3, #2
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	62d1      	str	r1, [r2, #44]	; 0x2c
 80069bc:	b282      	uxth	r2, r0
 80069be:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	3b01      	subs	r3, #1
 80069c8:	b29a      	uxth	r2, r3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d113      	bne.n	8006a00 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	685a      	ldr	r2, [r3, #4]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80069e6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d106      	bne.n	8006a00 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2201      	movs	r2, #1
 80069f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f7ff ff4a 	bl	8006894 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006a00:	bf00      	nop
 8006a02:	3708      	adds	r7, #8
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b082      	sub	sp, #8
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a20      	ldr	r2, [pc, #128]	; (8006a98 <I2SEx_RxISR_I2SExt+0x90>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d101      	bne.n	8006a1e <I2SEx_RxISR_I2SExt+0x16>
 8006a1a:	4b20      	ldr	r3, [pc, #128]	; (8006a9c <I2SEx_RxISR_I2SExt+0x94>)
 8006a1c:	e001      	b.n	8006a22 <I2SEx_RxISR_I2SExt+0x1a>
 8006a1e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a22:	68d8      	ldr	r0, [r3, #12]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a28:	1c99      	adds	r1, r3, #2
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006a2e:	b282      	uxth	r2, r0
 8006a30:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	3b01      	subs	r3, #1
 8006a3a:	b29a      	uxth	r2, r3
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d121      	bne.n	8006a8e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a12      	ldr	r2, [pc, #72]	; (8006a98 <I2SEx_RxISR_I2SExt+0x90>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d101      	bne.n	8006a58 <I2SEx_RxISR_I2SExt+0x50>
 8006a54:	4b11      	ldr	r3, [pc, #68]	; (8006a9c <I2SEx_RxISR_I2SExt+0x94>)
 8006a56:	e001      	b.n	8006a5c <I2SEx_RxISR_I2SExt+0x54>
 8006a58:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a5c:	685a      	ldr	r2, [r3, #4]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	490d      	ldr	r1, [pc, #52]	; (8006a98 <I2SEx_RxISR_I2SExt+0x90>)
 8006a64:	428b      	cmp	r3, r1
 8006a66:	d101      	bne.n	8006a6c <I2SEx_RxISR_I2SExt+0x64>
 8006a68:	4b0c      	ldr	r3, [pc, #48]	; (8006a9c <I2SEx_RxISR_I2SExt+0x94>)
 8006a6a:	e001      	b.n	8006a70 <I2SEx_RxISR_I2SExt+0x68>
 8006a6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a70:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006a74:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d106      	bne.n	8006a8e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f7ff ff03 	bl	8006894 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006a8e:	bf00      	nop
 8006a90:	3708      	adds	r7, #8
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	40003800 	.word	0x40003800
 8006a9c:	40003400 	.word	0x40003400

08006aa0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b086      	sub	sp, #24
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d101      	bne.n	8006ab2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e264      	b.n	8006f7c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 0301 	and.w	r3, r3, #1
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d075      	beq.n	8006baa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006abe:	4ba3      	ldr	r3, [pc, #652]	; (8006d4c <HAL_RCC_OscConfig+0x2ac>)
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	f003 030c 	and.w	r3, r3, #12
 8006ac6:	2b04      	cmp	r3, #4
 8006ac8:	d00c      	beq.n	8006ae4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006aca:	4ba0      	ldr	r3, [pc, #640]	; (8006d4c <HAL_RCC_OscConfig+0x2ac>)
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006ad2:	2b08      	cmp	r3, #8
 8006ad4:	d112      	bne.n	8006afc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ad6:	4b9d      	ldr	r3, [pc, #628]	; (8006d4c <HAL_RCC_OscConfig+0x2ac>)
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ade:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ae2:	d10b      	bne.n	8006afc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ae4:	4b99      	ldr	r3, [pc, #612]	; (8006d4c <HAL_RCC_OscConfig+0x2ac>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d05b      	beq.n	8006ba8 <HAL_RCC_OscConfig+0x108>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d157      	bne.n	8006ba8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	e23f      	b.n	8006f7c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b04:	d106      	bne.n	8006b14 <HAL_RCC_OscConfig+0x74>
 8006b06:	4b91      	ldr	r3, [pc, #580]	; (8006d4c <HAL_RCC_OscConfig+0x2ac>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a90      	ldr	r2, [pc, #576]	; (8006d4c <HAL_RCC_OscConfig+0x2ac>)
 8006b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b10:	6013      	str	r3, [r2, #0]
 8006b12:	e01d      	b.n	8006b50 <HAL_RCC_OscConfig+0xb0>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b1c:	d10c      	bne.n	8006b38 <HAL_RCC_OscConfig+0x98>
 8006b1e:	4b8b      	ldr	r3, [pc, #556]	; (8006d4c <HAL_RCC_OscConfig+0x2ac>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a8a      	ldr	r2, [pc, #552]	; (8006d4c <HAL_RCC_OscConfig+0x2ac>)
 8006b24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b28:	6013      	str	r3, [r2, #0]
 8006b2a:	4b88      	ldr	r3, [pc, #544]	; (8006d4c <HAL_RCC_OscConfig+0x2ac>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a87      	ldr	r2, [pc, #540]	; (8006d4c <HAL_RCC_OscConfig+0x2ac>)
 8006b30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b34:	6013      	str	r3, [r2, #0]
 8006b36:	e00b      	b.n	8006b50 <HAL_RCC_OscConfig+0xb0>
 8006b38:	4b84      	ldr	r3, [pc, #528]	; (8006d4c <HAL_RCC_OscConfig+0x2ac>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a83      	ldr	r2, [pc, #524]	; (8006d4c <HAL_RCC_OscConfig+0x2ac>)
 8006b3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b42:	6013      	str	r3, [r2, #0]
 8006b44:	4b81      	ldr	r3, [pc, #516]	; (8006d4c <HAL_RCC_OscConfig+0x2ac>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a80      	ldr	r2, [pc, #512]	; (8006d4c <HAL_RCC_OscConfig+0x2ac>)
 8006b4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d013      	beq.n	8006b80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b58:	f7fb fe74 	bl	8002844 <HAL_GetTick>
 8006b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b5e:	e008      	b.n	8006b72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b60:	f7fb fe70 	bl	8002844 <HAL_GetTick>
 8006b64:	4602      	mov	r2, r0
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	1ad3      	subs	r3, r2, r3
 8006b6a:	2b64      	cmp	r3, #100	; 0x64
 8006b6c:	d901      	bls.n	8006b72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006b6e:	2303      	movs	r3, #3
 8006b70:	e204      	b.n	8006f7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b72:	4b76      	ldr	r3, [pc, #472]	; (8006d4c <HAL_RCC_OscConfig+0x2ac>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d0f0      	beq.n	8006b60 <HAL_RCC_OscConfig+0xc0>
 8006b7e:	e014      	b.n	8006baa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b80:	f7fb fe60 	bl	8002844 <HAL_GetTick>
 8006b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b86:	e008      	b.n	8006b9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b88:	f7fb fe5c 	bl	8002844 <HAL_GetTick>
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	1ad3      	subs	r3, r2, r3
 8006b92:	2b64      	cmp	r3, #100	; 0x64
 8006b94:	d901      	bls.n	8006b9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006b96:	2303      	movs	r3, #3
 8006b98:	e1f0      	b.n	8006f7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b9a:	4b6c      	ldr	r3, [pc, #432]	; (8006d4c <HAL_RCC_OscConfig+0x2ac>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d1f0      	bne.n	8006b88 <HAL_RCC_OscConfig+0xe8>
 8006ba6:	e000      	b.n	8006baa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ba8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f003 0302 	and.w	r3, r3, #2
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d063      	beq.n	8006c7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006bb6:	4b65      	ldr	r3, [pc, #404]	; (8006d4c <HAL_RCC_OscConfig+0x2ac>)
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	f003 030c 	and.w	r3, r3, #12
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d00b      	beq.n	8006bda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006bc2:	4b62      	ldr	r3, [pc, #392]	; (8006d4c <HAL_RCC_OscConfig+0x2ac>)
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006bca:	2b08      	cmp	r3, #8
 8006bcc:	d11c      	bne.n	8006c08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006bce:	4b5f      	ldr	r3, [pc, #380]	; (8006d4c <HAL_RCC_OscConfig+0x2ac>)
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d116      	bne.n	8006c08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bda:	4b5c      	ldr	r3, [pc, #368]	; (8006d4c <HAL_RCC_OscConfig+0x2ac>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f003 0302 	and.w	r3, r3, #2
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d005      	beq.n	8006bf2 <HAL_RCC_OscConfig+0x152>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	68db      	ldr	r3, [r3, #12]
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d001      	beq.n	8006bf2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e1c4      	b.n	8006f7c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bf2:	4b56      	ldr	r3, [pc, #344]	; (8006d4c <HAL_RCC_OscConfig+0x2ac>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	691b      	ldr	r3, [r3, #16]
 8006bfe:	00db      	lsls	r3, r3, #3
 8006c00:	4952      	ldr	r1, [pc, #328]	; (8006d4c <HAL_RCC_OscConfig+0x2ac>)
 8006c02:	4313      	orrs	r3, r2
 8006c04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c06:	e03a      	b.n	8006c7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d020      	beq.n	8006c52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c10:	4b4f      	ldr	r3, [pc, #316]	; (8006d50 <HAL_RCC_OscConfig+0x2b0>)
 8006c12:	2201      	movs	r2, #1
 8006c14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c16:	f7fb fe15 	bl	8002844 <HAL_GetTick>
 8006c1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c1c:	e008      	b.n	8006c30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c1e:	f7fb fe11 	bl	8002844 <HAL_GetTick>
 8006c22:	4602      	mov	r2, r0
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	1ad3      	subs	r3, r2, r3
 8006c28:	2b02      	cmp	r3, #2
 8006c2a:	d901      	bls.n	8006c30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006c2c:	2303      	movs	r3, #3
 8006c2e:	e1a5      	b.n	8006f7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c30:	4b46      	ldr	r3, [pc, #280]	; (8006d4c <HAL_RCC_OscConfig+0x2ac>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f003 0302 	and.w	r3, r3, #2
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d0f0      	beq.n	8006c1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c3c:	4b43      	ldr	r3, [pc, #268]	; (8006d4c <HAL_RCC_OscConfig+0x2ac>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	691b      	ldr	r3, [r3, #16]
 8006c48:	00db      	lsls	r3, r3, #3
 8006c4a:	4940      	ldr	r1, [pc, #256]	; (8006d4c <HAL_RCC_OscConfig+0x2ac>)
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	600b      	str	r3, [r1, #0]
 8006c50:	e015      	b.n	8006c7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c52:	4b3f      	ldr	r3, [pc, #252]	; (8006d50 <HAL_RCC_OscConfig+0x2b0>)
 8006c54:	2200      	movs	r2, #0
 8006c56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c58:	f7fb fdf4 	bl	8002844 <HAL_GetTick>
 8006c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c5e:	e008      	b.n	8006c72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c60:	f7fb fdf0 	bl	8002844 <HAL_GetTick>
 8006c64:	4602      	mov	r2, r0
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	1ad3      	subs	r3, r2, r3
 8006c6a:	2b02      	cmp	r3, #2
 8006c6c:	d901      	bls.n	8006c72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006c6e:	2303      	movs	r3, #3
 8006c70:	e184      	b.n	8006f7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c72:	4b36      	ldr	r3, [pc, #216]	; (8006d4c <HAL_RCC_OscConfig+0x2ac>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f003 0302 	and.w	r3, r3, #2
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d1f0      	bne.n	8006c60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f003 0308 	and.w	r3, r3, #8
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d030      	beq.n	8006cec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	695b      	ldr	r3, [r3, #20]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d016      	beq.n	8006cc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c92:	4b30      	ldr	r3, [pc, #192]	; (8006d54 <HAL_RCC_OscConfig+0x2b4>)
 8006c94:	2201      	movs	r2, #1
 8006c96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c98:	f7fb fdd4 	bl	8002844 <HAL_GetTick>
 8006c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c9e:	e008      	b.n	8006cb2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ca0:	f7fb fdd0 	bl	8002844 <HAL_GetTick>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	1ad3      	subs	r3, r2, r3
 8006caa:	2b02      	cmp	r3, #2
 8006cac:	d901      	bls.n	8006cb2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006cae:	2303      	movs	r3, #3
 8006cb0:	e164      	b.n	8006f7c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006cb2:	4b26      	ldr	r3, [pc, #152]	; (8006d4c <HAL_RCC_OscConfig+0x2ac>)
 8006cb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cb6:	f003 0302 	and.w	r3, r3, #2
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d0f0      	beq.n	8006ca0 <HAL_RCC_OscConfig+0x200>
 8006cbe:	e015      	b.n	8006cec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006cc0:	4b24      	ldr	r3, [pc, #144]	; (8006d54 <HAL_RCC_OscConfig+0x2b4>)
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006cc6:	f7fb fdbd 	bl	8002844 <HAL_GetTick>
 8006cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ccc:	e008      	b.n	8006ce0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006cce:	f7fb fdb9 	bl	8002844 <HAL_GetTick>
 8006cd2:	4602      	mov	r2, r0
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	1ad3      	subs	r3, r2, r3
 8006cd8:	2b02      	cmp	r3, #2
 8006cda:	d901      	bls.n	8006ce0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006cdc:	2303      	movs	r3, #3
 8006cde:	e14d      	b.n	8006f7c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ce0:	4b1a      	ldr	r3, [pc, #104]	; (8006d4c <HAL_RCC_OscConfig+0x2ac>)
 8006ce2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ce4:	f003 0302 	and.w	r3, r3, #2
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d1f0      	bne.n	8006cce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f003 0304 	and.w	r3, r3, #4
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	f000 80a0 	beq.w	8006e3a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006cfe:	4b13      	ldr	r3, [pc, #76]	; (8006d4c <HAL_RCC_OscConfig+0x2ac>)
 8006d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d10f      	bne.n	8006d2a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	60bb      	str	r3, [r7, #8]
 8006d0e:	4b0f      	ldr	r3, [pc, #60]	; (8006d4c <HAL_RCC_OscConfig+0x2ac>)
 8006d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d12:	4a0e      	ldr	r2, [pc, #56]	; (8006d4c <HAL_RCC_OscConfig+0x2ac>)
 8006d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d18:	6413      	str	r3, [r2, #64]	; 0x40
 8006d1a:	4b0c      	ldr	r3, [pc, #48]	; (8006d4c <HAL_RCC_OscConfig+0x2ac>)
 8006d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d22:	60bb      	str	r3, [r7, #8]
 8006d24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d26:	2301      	movs	r3, #1
 8006d28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d2a:	4b0b      	ldr	r3, [pc, #44]	; (8006d58 <HAL_RCC_OscConfig+0x2b8>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d121      	bne.n	8006d7a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d36:	4b08      	ldr	r3, [pc, #32]	; (8006d58 <HAL_RCC_OscConfig+0x2b8>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a07      	ldr	r2, [pc, #28]	; (8006d58 <HAL_RCC_OscConfig+0x2b8>)
 8006d3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d42:	f7fb fd7f 	bl	8002844 <HAL_GetTick>
 8006d46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d48:	e011      	b.n	8006d6e <HAL_RCC_OscConfig+0x2ce>
 8006d4a:	bf00      	nop
 8006d4c:	40023800 	.word	0x40023800
 8006d50:	42470000 	.word	0x42470000
 8006d54:	42470e80 	.word	0x42470e80
 8006d58:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d5c:	f7fb fd72 	bl	8002844 <HAL_GetTick>
 8006d60:	4602      	mov	r2, r0
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	1ad3      	subs	r3, r2, r3
 8006d66:	2b02      	cmp	r3, #2
 8006d68:	d901      	bls.n	8006d6e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006d6a:	2303      	movs	r3, #3
 8006d6c:	e106      	b.n	8006f7c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d6e:	4b85      	ldr	r3, [pc, #532]	; (8006f84 <HAL_RCC_OscConfig+0x4e4>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d0f0      	beq.n	8006d5c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d106      	bne.n	8006d90 <HAL_RCC_OscConfig+0x2f0>
 8006d82:	4b81      	ldr	r3, [pc, #516]	; (8006f88 <HAL_RCC_OscConfig+0x4e8>)
 8006d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d86:	4a80      	ldr	r2, [pc, #512]	; (8006f88 <HAL_RCC_OscConfig+0x4e8>)
 8006d88:	f043 0301 	orr.w	r3, r3, #1
 8006d8c:	6713      	str	r3, [r2, #112]	; 0x70
 8006d8e:	e01c      	b.n	8006dca <HAL_RCC_OscConfig+0x32a>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	2b05      	cmp	r3, #5
 8006d96:	d10c      	bne.n	8006db2 <HAL_RCC_OscConfig+0x312>
 8006d98:	4b7b      	ldr	r3, [pc, #492]	; (8006f88 <HAL_RCC_OscConfig+0x4e8>)
 8006d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d9c:	4a7a      	ldr	r2, [pc, #488]	; (8006f88 <HAL_RCC_OscConfig+0x4e8>)
 8006d9e:	f043 0304 	orr.w	r3, r3, #4
 8006da2:	6713      	str	r3, [r2, #112]	; 0x70
 8006da4:	4b78      	ldr	r3, [pc, #480]	; (8006f88 <HAL_RCC_OscConfig+0x4e8>)
 8006da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006da8:	4a77      	ldr	r2, [pc, #476]	; (8006f88 <HAL_RCC_OscConfig+0x4e8>)
 8006daa:	f043 0301 	orr.w	r3, r3, #1
 8006dae:	6713      	str	r3, [r2, #112]	; 0x70
 8006db0:	e00b      	b.n	8006dca <HAL_RCC_OscConfig+0x32a>
 8006db2:	4b75      	ldr	r3, [pc, #468]	; (8006f88 <HAL_RCC_OscConfig+0x4e8>)
 8006db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006db6:	4a74      	ldr	r2, [pc, #464]	; (8006f88 <HAL_RCC_OscConfig+0x4e8>)
 8006db8:	f023 0301 	bic.w	r3, r3, #1
 8006dbc:	6713      	str	r3, [r2, #112]	; 0x70
 8006dbe:	4b72      	ldr	r3, [pc, #456]	; (8006f88 <HAL_RCC_OscConfig+0x4e8>)
 8006dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dc2:	4a71      	ldr	r2, [pc, #452]	; (8006f88 <HAL_RCC_OscConfig+0x4e8>)
 8006dc4:	f023 0304 	bic.w	r3, r3, #4
 8006dc8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d015      	beq.n	8006dfe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dd2:	f7fb fd37 	bl	8002844 <HAL_GetTick>
 8006dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dd8:	e00a      	b.n	8006df0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006dda:	f7fb fd33 	bl	8002844 <HAL_GetTick>
 8006dde:	4602      	mov	r2, r0
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	1ad3      	subs	r3, r2, r3
 8006de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d901      	bls.n	8006df0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006dec:	2303      	movs	r3, #3
 8006dee:	e0c5      	b.n	8006f7c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006df0:	4b65      	ldr	r3, [pc, #404]	; (8006f88 <HAL_RCC_OscConfig+0x4e8>)
 8006df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006df4:	f003 0302 	and.w	r3, r3, #2
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d0ee      	beq.n	8006dda <HAL_RCC_OscConfig+0x33a>
 8006dfc:	e014      	b.n	8006e28 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006dfe:	f7fb fd21 	bl	8002844 <HAL_GetTick>
 8006e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e04:	e00a      	b.n	8006e1c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e06:	f7fb fd1d 	bl	8002844 <HAL_GetTick>
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	1ad3      	subs	r3, r2, r3
 8006e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d901      	bls.n	8006e1c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006e18:	2303      	movs	r3, #3
 8006e1a:	e0af      	b.n	8006f7c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e1c:	4b5a      	ldr	r3, [pc, #360]	; (8006f88 <HAL_RCC_OscConfig+0x4e8>)
 8006e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e20:	f003 0302 	and.w	r3, r3, #2
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d1ee      	bne.n	8006e06 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e28:	7dfb      	ldrb	r3, [r7, #23]
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d105      	bne.n	8006e3a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e2e:	4b56      	ldr	r3, [pc, #344]	; (8006f88 <HAL_RCC_OscConfig+0x4e8>)
 8006e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e32:	4a55      	ldr	r2, [pc, #340]	; (8006f88 <HAL_RCC_OscConfig+0x4e8>)
 8006e34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e38:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	699b      	ldr	r3, [r3, #24]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	f000 809b 	beq.w	8006f7a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006e44:	4b50      	ldr	r3, [pc, #320]	; (8006f88 <HAL_RCC_OscConfig+0x4e8>)
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	f003 030c 	and.w	r3, r3, #12
 8006e4c:	2b08      	cmp	r3, #8
 8006e4e:	d05c      	beq.n	8006f0a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	699b      	ldr	r3, [r3, #24]
 8006e54:	2b02      	cmp	r3, #2
 8006e56:	d141      	bne.n	8006edc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e58:	4b4c      	ldr	r3, [pc, #304]	; (8006f8c <HAL_RCC_OscConfig+0x4ec>)
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e5e:	f7fb fcf1 	bl	8002844 <HAL_GetTick>
 8006e62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e64:	e008      	b.n	8006e78 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e66:	f7fb fced 	bl	8002844 <HAL_GetTick>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	1ad3      	subs	r3, r2, r3
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d901      	bls.n	8006e78 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006e74:	2303      	movs	r3, #3
 8006e76:	e081      	b.n	8006f7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e78:	4b43      	ldr	r3, [pc, #268]	; (8006f88 <HAL_RCC_OscConfig+0x4e8>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d1f0      	bne.n	8006e66 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	69da      	ldr	r2, [r3, #28]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6a1b      	ldr	r3, [r3, #32]
 8006e8c:	431a      	orrs	r2, r3
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e92:	019b      	lsls	r3, r3, #6
 8006e94:	431a      	orrs	r2, r3
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e9a:	085b      	lsrs	r3, r3, #1
 8006e9c:	3b01      	subs	r3, #1
 8006e9e:	041b      	lsls	r3, r3, #16
 8006ea0:	431a      	orrs	r2, r3
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea6:	061b      	lsls	r3, r3, #24
 8006ea8:	4937      	ldr	r1, [pc, #220]	; (8006f88 <HAL_RCC_OscConfig+0x4e8>)
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006eae:	4b37      	ldr	r3, [pc, #220]	; (8006f8c <HAL_RCC_OscConfig+0x4ec>)
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006eb4:	f7fb fcc6 	bl	8002844 <HAL_GetTick>
 8006eb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006eba:	e008      	b.n	8006ece <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ebc:	f7fb fcc2 	bl	8002844 <HAL_GetTick>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	1ad3      	subs	r3, r2, r3
 8006ec6:	2b02      	cmp	r3, #2
 8006ec8:	d901      	bls.n	8006ece <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006eca:	2303      	movs	r3, #3
 8006ecc:	e056      	b.n	8006f7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ece:	4b2e      	ldr	r3, [pc, #184]	; (8006f88 <HAL_RCC_OscConfig+0x4e8>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d0f0      	beq.n	8006ebc <HAL_RCC_OscConfig+0x41c>
 8006eda:	e04e      	b.n	8006f7a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006edc:	4b2b      	ldr	r3, [pc, #172]	; (8006f8c <HAL_RCC_OscConfig+0x4ec>)
 8006ede:	2200      	movs	r2, #0
 8006ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ee2:	f7fb fcaf 	bl	8002844 <HAL_GetTick>
 8006ee6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ee8:	e008      	b.n	8006efc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006eea:	f7fb fcab 	bl	8002844 <HAL_GetTick>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	1ad3      	subs	r3, r2, r3
 8006ef4:	2b02      	cmp	r3, #2
 8006ef6:	d901      	bls.n	8006efc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006ef8:	2303      	movs	r3, #3
 8006efa:	e03f      	b.n	8006f7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006efc:	4b22      	ldr	r3, [pc, #136]	; (8006f88 <HAL_RCC_OscConfig+0x4e8>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d1f0      	bne.n	8006eea <HAL_RCC_OscConfig+0x44a>
 8006f08:	e037      	b.n	8006f7a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	699b      	ldr	r3, [r3, #24]
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d101      	bne.n	8006f16 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	e032      	b.n	8006f7c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006f16:	4b1c      	ldr	r3, [pc, #112]	; (8006f88 <HAL_RCC_OscConfig+0x4e8>)
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	699b      	ldr	r3, [r3, #24]
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d028      	beq.n	8006f76 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d121      	bne.n	8006f76 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d11a      	bne.n	8006f76 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f40:	68fa      	ldr	r2, [r7, #12]
 8006f42:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006f46:	4013      	ands	r3, r2
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006f4c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d111      	bne.n	8006f76 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f5c:	085b      	lsrs	r3, r3, #1
 8006f5e:	3b01      	subs	r3, #1
 8006f60:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d107      	bne.n	8006f76 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f70:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d001      	beq.n	8006f7a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	e000      	b.n	8006f7c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3718      	adds	r7, #24
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}
 8006f84:	40007000 	.word	0x40007000
 8006f88:	40023800 	.word	0x40023800
 8006f8c:	42470060 	.word	0x42470060

08006f90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d101      	bne.n	8006fa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	e0cc      	b.n	800713e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006fa4:	4b68      	ldr	r3, [pc, #416]	; (8007148 <HAL_RCC_ClockConfig+0x1b8>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 0307 	and.w	r3, r3, #7
 8006fac:	683a      	ldr	r2, [r7, #0]
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d90c      	bls.n	8006fcc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fb2:	4b65      	ldr	r3, [pc, #404]	; (8007148 <HAL_RCC_ClockConfig+0x1b8>)
 8006fb4:	683a      	ldr	r2, [r7, #0]
 8006fb6:	b2d2      	uxtb	r2, r2
 8006fb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fba:	4b63      	ldr	r3, [pc, #396]	; (8007148 <HAL_RCC_ClockConfig+0x1b8>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f003 0307 	and.w	r3, r3, #7
 8006fc2:	683a      	ldr	r2, [r7, #0]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d001      	beq.n	8006fcc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	e0b8      	b.n	800713e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f003 0302 	and.w	r3, r3, #2
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d020      	beq.n	800701a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f003 0304 	and.w	r3, r3, #4
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d005      	beq.n	8006ff0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006fe4:	4b59      	ldr	r3, [pc, #356]	; (800714c <HAL_RCC_ClockConfig+0x1bc>)
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	4a58      	ldr	r2, [pc, #352]	; (800714c <HAL_RCC_ClockConfig+0x1bc>)
 8006fea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006fee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f003 0308 	and.w	r3, r3, #8
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d005      	beq.n	8007008 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ffc:	4b53      	ldr	r3, [pc, #332]	; (800714c <HAL_RCC_ClockConfig+0x1bc>)
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	4a52      	ldr	r2, [pc, #328]	; (800714c <HAL_RCC_ClockConfig+0x1bc>)
 8007002:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007006:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007008:	4b50      	ldr	r3, [pc, #320]	; (800714c <HAL_RCC_ClockConfig+0x1bc>)
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	494d      	ldr	r1, [pc, #308]	; (800714c <HAL_RCC_ClockConfig+0x1bc>)
 8007016:	4313      	orrs	r3, r2
 8007018:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f003 0301 	and.w	r3, r3, #1
 8007022:	2b00      	cmp	r3, #0
 8007024:	d044      	beq.n	80070b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	2b01      	cmp	r3, #1
 800702c:	d107      	bne.n	800703e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800702e:	4b47      	ldr	r3, [pc, #284]	; (800714c <HAL_RCC_ClockConfig+0x1bc>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007036:	2b00      	cmp	r3, #0
 8007038:	d119      	bne.n	800706e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800703a:	2301      	movs	r3, #1
 800703c:	e07f      	b.n	800713e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	2b02      	cmp	r3, #2
 8007044:	d003      	beq.n	800704e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800704a:	2b03      	cmp	r3, #3
 800704c:	d107      	bne.n	800705e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800704e:	4b3f      	ldr	r3, [pc, #252]	; (800714c <HAL_RCC_ClockConfig+0x1bc>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007056:	2b00      	cmp	r3, #0
 8007058:	d109      	bne.n	800706e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800705a:	2301      	movs	r3, #1
 800705c:	e06f      	b.n	800713e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800705e:	4b3b      	ldr	r3, [pc, #236]	; (800714c <HAL_RCC_ClockConfig+0x1bc>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f003 0302 	and.w	r3, r3, #2
 8007066:	2b00      	cmp	r3, #0
 8007068:	d101      	bne.n	800706e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	e067      	b.n	800713e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800706e:	4b37      	ldr	r3, [pc, #220]	; (800714c <HAL_RCC_ClockConfig+0x1bc>)
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	f023 0203 	bic.w	r2, r3, #3
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	4934      	ldr	r1, [pc, #208]	; (800714c <HAL_RCC_ClockConfig+0x1bc>)
 800707c:	4313      	orrs	r3, r2
 800707e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007080:	f7fb fbe0 	bl	8002844 <HAL_GetTick>
 8007084:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007086:	e00a      	b.n	800709e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007088:	f7fb fbdc 	bl	8002844 <HAL_GetTick>
 800708c:	4602      	mov	r2, r0
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	1ad3      	subs	r3, r2, r3
 8007092:	f241 3288 	movw	r2, #5000	; 0x1388
 8007096:	4293      	cmp	r3, r2
 8007098:	d901      	bls.n	800709e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800709a:	2303      	movs	r3, #3
 800709c:	e04f      	b.n	800713e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800709e:	4b2b      	ldr	r3, [pc, #172]	; (800714c <HAL_RCC_ClockConfig+0x1bc>)
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	f003 020c 	and.w	r2, r3, #12
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	009b      	lsls	r3, r3, #2
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d1eb      	bne.n	8007088 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80070b0:	4b25      	ldr	r3, [pc, #148]	; (8007148 <HAL_RCC_ClockConfig+0x1b8>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f003 0307 	and.w	r3, r3, #7
 80070b8:	683a      	ldr	r2, [r7, #0]
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d20c      	bcs.n	80070d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070be:	4b22      	ldr	r3, [pc, #136]	; (8007148 <HAL_RCC_ClockConfig+0x1b8>)
 80070c0:	683a      	ldr	r2, [r7, #0]
 80070c2:	b2d2      	uxtb	r2, r2
 80070c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80070c6:	4b20      	ldr	r3, [pc, #128]	; (8007148 <HAL_RCC_ClockConfig+0x1b8>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f003 0307 	and.w	r3, r3, #7
 80070ce:	683a      	ldr	r2, [r7, #0]
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d001      	beq.n	80070d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80070d4:	2301      	movs	r3, #1
 80070d6:	e032      	b.n	800713e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f003 0304 	and.w	r3, r3, #4
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d008      	beq.n	80070f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80070e4:	4b19      	ldr	r3, [pc, #100]	; (800714c <HAL_RCC_ClockConfig+0x1bc>)
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	4916      	ldr	r1, [pc, #88]	; (800714c <HAL_RCC_ClockConfig+0x1bc>)
 80070f2:	4313      	orrs	r3, r2
 80070f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f003 0308 	and.w	r3, r3, #8
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d009      	beq.n	8007116 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007102:	4b12      	ldr	r3, [pc, #72]	; (800714c <HAL_RCC_ClockConfig+0x1bc>)
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	691b      	ldr	r3, [r3, #16]
 800710e:	00db      	lsls	r3, r3, #3
 8007110:	490e      	ldr	r1, [pc, #56]	; (800714c <HAL_RCC_ClockConfig+0x1bc>)
 8007112:	4313      	orrs	r3, r2
 8007114:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007116:	f000 f821 	bl	800715c <HAL_RCC_GetSysClockFreq>
 800711a:	4602      	mov	r2, r0
 800711c:	4b0b      	ldr	r3, [pc, #44]	; (800714c <HAL_RCC_ClockConfig+0x1bc>)
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	091b      	lsrs	r3, r3, #4
 8007122:	f003 030f 	and.w	r3, r3, #15
 8007126:	490a      	ldr	r1, [pc, #40]	; (8007150 <HAL_RCC_ClockConfig+0x1c0>)
 8007128:	5ccb      	ldrb	r3, [r1, r3]
 800712a:	fa22 f303 	lsr.w	r3, r2, r3
 800712e:	4a09      	ldr	r2, [pc, #36]	; (8007154 <HAL_RCC_ClockConfig+0x1c4>)
 8007130:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007132:	4b09      	ldr	r3, [pc, #36]	; (8007158 <HAL_RCC_ClockConfig+0x1c8>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4618      	mov	r0, r3
 8007138:	f7fb fb40 	bl	80027bc <HAL_InitTick>

  return HAL_OK;
 800713c:	2300      	movs	r3, #0
}
 800713e:	4618      	mov	r0, r3
 8007140:	3710      	adds	r7, #16
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}
 8007146:	bf00      	nop
 8007148:	40023c00 	.word	0x40023c00
 800714c:	40023800 	.word	0x40023800
 8007150:	0800c71c 	.word	0x0800c71c
 8007154:	200002a4 	.word	0x200002a4
 8007158:	200002a8 	.word	0x200002a8

0800715c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800715c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007160:	b084      	sub	sp, #16
 8007162:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007164:	2300      	movs	r3, #0
 8007166:	607b      	str	r3, [r7, #4]
 8007168:	2300      	movs	r3, #0
 800716a:	60fb      	str	r3, [r7, #12]
 800716c:	2300      	movs	r3, #0
 800716e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007170:	2300      	movs	r3, #0
 8007172:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007174:	4b67      	ldr	r3, [pc, #412]	; (8007314 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	f003 030c 	and.w	r3, r3, #12
 800717c:	2b08      	cmp	r3, #8
 800717e:	d00d      	beq.n	800719c <HAL_RCC_GetSysClockFreq+0x40>
 8007180:	2b08      	cmp	r3, #8
 8007182:	f200 80bd 	bhi.w	8007300 <HAL_RCC_GetSysClockFreq+0x1a4>
 8007186:	2b00      	cmp	r3, #0
 8007188:	d002      	beq.n	8007190 <HAL_RCC_GetSysClockFreq+0x34>
 800718a:	2b04      	cmp	r3, #4
 800718c:	d003      	beq.n	8007196 <HAL_RCC_GetSysClockFreq+0x3a>
 800718e:	e0b7      	b.n	8007300 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007190:	4b61      	ldr	r3, [pc, #388]	; (8007318 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007192:	60bb      	str	r3, [r7, #8]
       break;
 8007194:	e0b7      	b.n	8007306 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007196:	4b61      	ldr	r3, [pc, #388]	; (800731c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007198:	60bb      	str	r3, [r7, #8]
      break;
 800719a:	e0b4      	b.n	8007306 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800719c:	4b5d      	ldr	r3, [pc, #372]	; (8007314 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071a4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80071a6:	4b5b      	ldr	r3, [pc, #364]	; (8007314 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d04d      	beq.n	800724e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80071b2:	4b58      	ldr	r3, [pc, #352]	; (8007314 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	099b      	lsrs	r3, r3, #6
 80071b8:	461a      	mov	r2, r3
 80071ba:	f04f 0300 	mov.w	r3, #0
 80071be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80071c2:	f04f 0100 	mov.w	r1, #0
 80071c6:	ea02 0800 	and.w	r8, r2, r0
 80071ca:	ea03 0901 	and.w	r9, r3, r1
 80071ce:	4640      	mov	r0, r8
 80071d0:	4649      	mov	r1, r9
 80071d2:	f04f 0200 	mov.w	r2, #0
 80071d6:	f04f 0300 	mov.w	r3, #0
 80071da:	014b      	lsls	r3, r1, #5
 80071dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80071e0:	0142      	lsls	r2, r0, #5
 80071e2:	4610      	mov	r0, r2
 80071e4:	4619      	mov	r1, r3
 80071e6:	ebb0 0008 	subs.w	r0, r0, r8
 80071ea:	eb61 0109 	sbc.w	r1, r1, r9
 80071ee:	f04f 0200 	mov.w	r2, #0
 80071f2:	f04f 0300 	mov.w	r3, #0
 80071f6:	018b      	lsls	r3, r1, #6
 80071f8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80071fc:	0182      	lsls	r2, r0, #6
 80071fe:	1a12      	subs	r2, r2, r0
 8007200:	eb63 0301 	sbc.w	r3, r3, r1
 8007204:	f04f 0000 	mov.w	r0, #0
 8007208:	f04f 0100 	mov.w	r1, #0
 800720c:	00d9      	lsls	r1, r3, #3
 800720e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007212:	00d0      	lsls	r0, r2, #3
 8007214:	4602      	mov	r2, r0
 8007216:	460b      	mov	r3, r1
 8007218:	eb12 0208 	adds.w	r2, r2, r8
 800721c:	eb43 0309 	adc.w	r3, r3, r9
 8007220:	f04f 0000 	mov.w	r0, #0
 8007224:	f04f 0100 	mov.w	r1, #0
 8007228:	0259      	lsls	r1, r3, #9
 800722a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800722e:	0250      	lsls	r0, r2, #9
 8007230:	4602      	mov	r2, r0
 8007232:	460b      	mov	r3, r1
 8007234:	4610      	mov	r0, r2
 8007236:	4619      	mov	r1, r3
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	461a      	mov	r2, r3
 800723c:	f04f 0300 	mov.w	r3, #0
 8007240:	f7f8 ffc2 	bl	80001c8 <__aeabi_uldivmod>
 8007244:	4602      	mov	r2, r0
 8007246:	460b      	mov	r3, r1
 8007248:	4613      	mov	r3, r2
 800724a:	60fb      	str	r3, [r7, #12]
 800724c:	e04a      	b.n	80072e4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800724e:	4b31      	ldr	r3, [pc, #196]	; (8007314 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	099b      	lsrs	r3, r3, #6
 8007254:	461a      	mov	r2, r3
 8007256:	f04f 0300 	mov.w	r3, #0
 800725a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800725e:	f04f 0100 	mov.w	r1, #0
 8007262:	ea02 0400 	and.w	r4, r2, r0
 8007266:	ea03 0501 	and.w	r5, r3, r1
 800726a:	4620      	mov	r0, r4
 800726c:	4629      	mov	r1, r5
 800726e:	f04f 0200 	mov.w	r2, #0
 8007272:	f04f 0300 	mov.w	r3, #0
 8007276:	014b      	lsls	r3, r1, #5
 8007278:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800727c:	0142      	lsls	r2, r0, #5
 800727e:	4610      	mov	r0, r2
 8007280:	4619      	mov	r1, r3
 8007282:	1b00      	subs	r0, r0, r4
 8007284:	eb61 0105 	sbc.w	r1, r1, r5
 8007288:	f04f 0200 	mov.w	r2, #0
 800728c:	f04f 0300 	mov.w	r3, #0
 8007290:	018b      	lsls	r3, r1, #6
 8007292:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007296:	0182      	lsls	r2, r0, #6
 8007298:	1a12      	subs	r2, r2, r0
 800729a:	eb63 0301 	sbc.w	r3, r3, r1
 800729e:	f04f 0000 	mov.w	r0, #0
 80072a2:	f04f 0100 	mov.w	r1, #0
 80072a6:	00d9      	lsls	r1, r3, #3
 80072a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80072ac:	00d0      	lsls	r0, r2, #3
 80072ae:	4602      	mov	r2, r0
 80072b0:	460b      	mov	r3, r1
 80072b2:	1912      	adds	r2, r2, r4
 80072b4:	eb45 0303 	adc.w	r3, r5, r3
 80072b8:	f04f 0000 	mov.w	r0, #0
 80072bc:	f04f 0100 	mov.w	r1, #0
 80072c0:	0299      	lsls	r1, r3, #10
 80072c2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80072c6:	0290      	lsls	r0, r2, #10
 80072c8:	4602      	mov	r2, r0
 80072ca:	460b      	mov	r3, r1
 80072cc:	4610      	mov	r0, r2
 80072ce:	4619      	mov	r1, r3
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	461a      	mov	r2, r3
 80072d4:	f04f 0300 	mov.w	r3, #0
 80072d8:	f7f8 ff76 	bl	80001c8 <__aeabi_uldivmod>
 80072dc:	4602      	mov	r2, r0
 80072de:	460b      	mov	r3, r1
 80072e0:	4613      	mov	r3, r2
 80072e2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80072e4:	4b0b      	ldr	r3, [pc, #44]	; (8007314 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	0c1b      	lsrs	r3, r3, #16
 80072ea:	f003 0303 	and.w	r3, r3, #3
 80072ee:	3301      	adds	r3, #1
 80072f0:	005b      	lsls	r3, r3, #1
 80072f2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80072f4:	68fa      	ldr	r2, [r7, #12]
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80072fc:	60bb      	str	r3, [r7, #8]
      break;
 80072fe:	e002      	b.n	8007306 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007300:	4b05      	ldr	r3, [pc, #20]	; (8007318 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007302:	60bb      	str	r3, [r7, #8]
      break;
 8007304:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007306:	68bb      	ldr	r3, [r7, #8]
}
 8007308:	4618      	mov	r0, r3
 800730a:	3710      	adds	r7, #16
 800730c:	46bd      	mov	sp, r7
 800730e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007312:	bf00      	nop
 8007314:	40023800 	.word	0x40023800
 8007318:	00f42400 	.word	0x00f42400
 800731c:	007a1200 	.word	0x007a1200

08007320 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007320:	b480      	push	{r7}
 8007322:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007324:	4b03      	ldr	r3, [pc, #12]	; (8007334 <HAL_RCC_GetHCLKFreq+0x14>)
 8007326:	681b      	ldr	r3, [r3, #0]
}
 8007328:	4618      	mov	r0, r3
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr
 8007332:	bf00      	nop
 8007334:	200002a4 	.word	0x200002a4

08007338 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800733c:	f7ff fff0 	bl	8007320 <HAL_RCC_GetHCLKFreq>
 8007340:	4602      	mov	r2, r0
 8007342:	4b05      	ldr	r3, [pc, #20]	; (8007358 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	0a9b      	lsrs	r3, r3, #10
 8007348:	f003 0307 	and.w	r3, r3, #7
 800734c:	4903      	ldr	r1, [pc, #12]	; (800735c <HAL_RCC_GetPCLK1Freq+0x24>)
 800734e:	5ccb      	ldrb	r3, [r1, r3]
 8007350:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007354:	4618      	mov	r0, r3
 8007356:	bd80      	pop	{r7, pc}
 8007358:	40023800 	.word	0x40023800
 800735c:	0800c72c 	.word	0x0800c72c

08007360 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b086      	sub	sp, #24
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007368:	2300      	movs	r3, #0
 800736a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800736c:	2300      	movs	r3, #0
 800736e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f003 0301 	and.w	r3, r3, #1
 8007378:	2b00      	cmp	r3, #0
 800737a:	d105      	bne.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007384:	2b00      	cmp	r3, #0
 8007386:	d035      	beq.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007388:	4b62      	ldr	r3, [pc, #392]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800738a:	2200      	movs	r2, #0
 800738c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800738e:	f7fb fa59 	bl	8002844 <HAL_GetTick>
 8007392:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007394:	e008      	b.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007396:	f7fb fa55 	bl	8002844 <HAL_GetTick>
 800739a:	4602      	mov	r2, r0
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	1ad3      	subs	r3, r2, r3
 80073a0:	2b02      	cmp	r3, #2
 80073a2:	d901      	bls.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80073a4:	2303      	movs	r3, #3
 80073a6:	e0b0      	b.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80073a8:	4b5b      	ldr	r3, [pc, #364]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d1f0      	bne.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	019a      	lsls	r2, r3, #6
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	071b      	lsls	r3, r3, #28
 80073c0:	4955      	ldr	r1, [pc, #340]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073c2:	4313      	orrs	r3, r2
 80073c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80073c8:	4b52      	ldr	r3, [pc, #328]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80073ca:	2201      	movs	r2, #1
 80073cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80073ce:	f7fb fa39 	bl	8002844 <HAL_GetTick>
 80073d2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80073d4:	e008      	b.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80073d6:	f7fb fa35 	bl	8002844 <HAL_GetTick>
 80073da:	4602      	mov	r2, r0
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	1ad3      	subs	r3, r2, r3
 80073e0:	2b02      	cmp	r3, #2
 80073e2:	d901      	bls.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80073e4:	2303      	movs	r3, #3
 80073e6:	e090      	b.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80073e8:	4b4b      	ldr	r3, [pc, #300]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d0f0      	beq.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f003 0302 	and.w	r3, r3, #2
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	f000 8083 	beq.w	8007508 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007402:	2300      	movs	r3, #0
 8007404:	60fb      	str	r3, [r7, #12]
 8007406:	4b44      	ldr	r3, [pc, #272]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800740a:	4a43      	ldr	r2, [pc, #268]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800740c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007410:	6413      	str	r3, [r2, #64]	; 0x40
 8007412:	4b41      	ldr	r3, [pc, #260]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800741a:	60fb      	str	r3, [r7, #12]
 800741c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800741e:	4b3f      	ldr	r3, [pc, #252]	; (800751c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a3e      	ldr	r2, [pc, #248]	; (800751c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007428:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800742a:	f7fb fa0b 	bl	8002844 <HAL_GetTick>
 800742e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007430:	e008      	b.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007432:	f7fb fa07 	bl	8002844 <HAL_GetTick>
 8007436:	4602      	mov	r2, r0
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	1ad3      	subs	r3, r2, r3
 800743c:	2b02      	cmp	r3, #2
 800743e:	d901      	bls.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007440:	2303      	movs	r3, #3
 8007442:	e062      	b.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007444:	4b35      	ldr	r3, [pc, #212]	; (800751c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800744c:	2b00      	cmp	r3, #0
 800744e:	d0f0      	beq.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007450:	4b31      	ldr	r3, [pc, #196]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007454:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007458:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d02f      	beq.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	68db      	ldr	r3, [r3, #12]
 8007464:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007468:	693a      	ldr	r2, [r7, #16]
 800746a:	429a      	cmp	r2, r3
 800746c:	d028      	beq.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800746e:	4b2a      	ldr	r3, [pc, #168]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007472:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007476:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007478:	4b29      	ldr	r3, [pc, #164]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800747a:	2201      	movs	r2, #1
 800747c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800747e:	4b28      	ldr	r3, [pc, #160]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007480:	2200      	movs	r2, #0
 8007482:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007484:	4a24      	ldr	r2, [pc, #144]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800748a:	4b23      	ldr	r3, [pc, #140]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800748c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800748e:	f003 0301 	and.w	r3, r3, #1
 8007492:	2b01      	cmp	r3, #1
 8007494:	d114      	bne.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007496:	f7fb f9d5 	bl	8002844 <HAL_GetTick>
 800749a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800749c:	e00a      	b.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800749e:	f7fb f9d1 	bl	8002844 <HAL_GetTick>
 80074a2:	4602      	mov	r2, r0
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	1ad3      	subs	r3, r2, r3
 80074a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d901      	bls.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80074b0:	2303      	movs	r3, #3
 80074b2:	e02a      	b.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074b4:	4b18      	ldr	r3, [pc, #96]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80074b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074b8:	f003 0302 	and.w	r3, r3, #2
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d0ee      	beq.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	68db      	ldr	r3, [r3, #12]
 80074c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074cc:	d10d      	bne.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80074ce:	4b12      	ldr	r3, [pc, #72]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	68db      	ldr	r3, [r3, #12]
 80074da:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80074de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074e2:	490d      	ldr	r1, [pc, #52]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80074e4:	4313      	orrs	r3, r2
 80074e6:	608b      	str	r3, [r1, #8]
 80074e8:	e005      	b.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80074ea:	4b0b      	ldr	r3, [pc, #44]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	4a0a      	ldr	r2, [pc, #40]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80074f0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80074f4:	6093      	str	r3, [r2, #8]
 80074f6:	4b08      	ldr	r3, [pc, #32]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80074f8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007502:	4905      	ldr	r1, [pc, #20]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007504:	4313      	orrs	r3, r2
 8007506:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007508:	2300      	movs	r3, #0
}
 800750a:	4618      	mov	r0, r3
 800750c:	3718      	adds	r7, #24
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
 8007512:	bf00      	nop
 8007514:	42470068 	.word	0x42470068
 8007518:	40023800 	.word	0x40023800
 800751c:	40007000 	.word	0x40007000
 8007520:	42470e40 	.word	0x42470e40

08007524 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007524:	b480      	push	{r7}
 8007526:	b087      	sub	sp, #28
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800752c:	2300      	movs	r3, #0
 800752e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007530:	2300      	movs	r3, #0
 8007532:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007534:	2300      	movs	r3, #0
 8007536:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007538:	2300      	movs	r3, #0
 800753a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2b01      	cmp	r3, #1
 8007540:	d13e      	bne.n	80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8007542:	4b23      	ldr	r3, [pc, #140]	; (80075d0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007544:	689b      	ldr	r3, [r3, #8]
 8007546:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800754a:	60fb      	str	r3, [r7, #12]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d005      	beq.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2b01      	cmp	r3, #1
 8007556:	d12f      	bne.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007558:	4b1e      	ldr	r3, [pc, #120]	; (80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800755a:	617b      	str	r3, [r7, #20]
          break;
 800755c:	e02f      	b.n	80075be <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800755e:	4b1c      	ldr	r3, [pc, #112]	; (80075d0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007566:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800756a:	d108      	bne.n	800757e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800756c:	4b18      	ldr	r3, [pc, #96]	; (80075d0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007574:	4a18      	ldr	r2, [pc, #96]	; (80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007576:	fbb2 f3f3 	udiv	r3, r2, r3
 800757a:	613b      	str	r3, [r7, #16]
 800757c:	e007      	b.n	800758e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800757e:	4b14      	ldr	r3, [pc, #80]	; (80075d0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007586:	4a15      	ldr	r2, [pc, #84]	; (80075dc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007588:	fbb2 f3f3 	udiv	r3, r2, r3
 800758c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800758e:	4b10      	ldr	r3, [pc, #64]	; (80075d0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007590:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007594:	099b      	lsrs	r3, r3, #6
 8007596:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	fb02 f303 	mul.w	r3, r2, r3
 80075a0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80075a2:	4b0b      	ldr	r3, [pc, #44]	; (80075d0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80075a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075a8:	0f1b      	lsrs	r3, r3, #28
 80075aa:	f003 0307 	and.w	r3, r3, #7
 80075ae:	68ba      	ldr	r2, [r7, #8]
 80075b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80075b4:	617b      	str	r3, [r7, #20]
          break;
 80075b6:	e002      	b.n	80075be <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80075b8:	2300      	movs	r3, #0
 80075ba:	617b      	str	r3, [r7, #20]
          break;
 80075bc:	bf00      	nop
        }
      }
      break;
 80075be:	bf00      	nop
    }
  }
  return frequency;
 80075c0:	697b      	ldr	r3, [r7, #20]
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	371c      	adds	r7, #28
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr
 80075ce:	bf00      	nop
 80075d0:	40023800 	.word	0x40023800
 80075d4:	00bb8000 	.word	0x00bb8000
 80075d8:	007a1200 	.word	0x007a1200
 80075dc:	00f42400 	.word	0x00f42400

080075e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b082      	sub	sp, #8
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d101      	bne.n	80075f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80075ee:	2301      	movs	r3, #1
 80075f0:	e07b      	b.n	80076ea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d108      	bne.n	800760c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007602:	d009      	beq.n	8007618 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2200      	movs	r2, #0
 8007608:	61da      	str	r2, [r3, #28]
 800760a:	e005      	b.n	8007618 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007624:	b2db      	uxtb	r3, r3
 8007626:	2b00      	cmp	r3, #0
 8007628:	d106      	bne.n	8007638 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f7fa ff8a 	bl	800254c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2202      	movs	r2, #2
 800763c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800764e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007660:	431a      	orrs	r2, r3
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800766a:	431a      	orrs	r2, r3
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	691b      	ldr	r3, [r3, #16]
 8007670:	f003 0302 	and.w	r3, r3, #2
 8007674:	431a      	orrs	r2, r3
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	695b      	ldr	r3, [r3, #20]
 800767a:	f003 0301 	and.w	r3, r3, #1
 800767e:	431a      	orrs	r2, r3
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	699b      	ldr	r3, [r3, #24]
 8007684:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007688:	431a      	orrs	r2, r3
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	69db      	ldr	r3, [r3, #28]
 800768e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007692:	431a      	orrs	r2, r3
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6a1b      	ldr	r3, [r3, #32]
 8007698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800769c:	ea42 0103 	orr.w	r1, r2, r3
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	430a      	orrs	r2, r1
 80076ae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	699b      	ldr	r3, [r3, #24]
 80076b4:	0c1b      	lsrs	r3, r3, #16
 80076b6:	f003 0104 	and.w	r1, r3, #4
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076be:	f003 0210 	and.w	r2, r3, #16
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	430a      	orrs	r2, r1
 80076c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	69da      	ldr	r2, [r3, #28]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80076d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2200      	movs	r2, #0
 80076de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2201      	movs	r2, #1
 80076e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80076e8:	2300      	movs	r3, #0
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3708      	adds	r7, #8
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}

080076f2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076f2:	b580      	push	{r7, lr}
 80076f4:	b088      	sub	sp, #32
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	60f8      	str	r0, [r7, #12]
 80076fa:	60b9      	str	r1, [r7, #8]
 80076fc:	603b      	str	r3, [r7, #0]
 80076fe:	4613      	mov	r3, r2
 8007700:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007702:	2300      	movs	r3, #0
 8007704:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800770c:	2b01      	cmp	r3, #1
 800770e:	d101      	bne.n	8007714 <HAL_SPI_Transmit+0x22>
 8007710:	2302      	movs	r3, #2
 8007712:	e126      	b.n	8007962 <HAL_SPI_Transmit+0x270>
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2201      	movs	r2, #1
 8007718:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800771c:	f7fb f892 	bl	8002844 <HAL_GetTick>
 8007720:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007722:	88fb      	ldrh	r3, [r7, #6]
 8007724:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800772c:	b2db      	uxtb	r3, r3
 800772e:	2b01      	cmp	r3, #1
 8007730:	d002      	beq.n	8007738 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007732:	2302      	movs	r3, #2
 8007734:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007736:	e10b      	b.n	8007950 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d002      	beq.n	8007744 <HAL_SPI_Transmit+0x52>
 800773e:	88fb      	ldrh	r3, [r7, #6]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d102      	bne.n	800774a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007744:	2301      	movs	r3, #1
 8007746:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007748:	e102      	b.n	8007950 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2203      	movs	r2, #3
 800774e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2200      	movs	r2, #0
 8007756:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	68ba      	ldr	r2, [r7, #8]
 800775c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	88fa      	ldrh	r2, [r7, #6]
 8007762:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	88fa      	ldrh	r2, [r7, #6]
 8007768:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2200      	movs	r2, #0
 800776e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2200      	movs	r2, #0
 8007774:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2200      	movs	r2, #0
 800777a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2200      	movs	r2, #0
 8007780:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2200      	movs	r2, #0
 8007786:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007790:	d10f      	bne.n	80077b2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80077b0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077bc:	2b40      	cmp	r3, #64	; 0x40
 80077be:	d007      	beq.n	80077d0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	681a      	ldr	r2, [r3, #0]
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	68db      	ldr	r3, [r3, #12]
 80077d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077d8:	d14b      	bne.n	8007872 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d002      	beq.n	80077e8 <HAL_SPI_Transmit+0xf6>
 80077e2:	8afb      	ldrh	r3, [r7, #22]
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d13e      	bne.n	8007866 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ec:	881a      	ldrh	r2, [r3, #0]
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077f8:	1c9a      	adds	r2, r3, #2
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007802:	b29b      	uxth	r3, r3
 8007804:	3b01      	subs	r3, #1
 8007806:	b29a      	uxth	r2, r3
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800780c:	e02b      	b.n	8007866 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	f003 0302 	and.w	r3, r3, #2
 8007818:	2b02      	cmp	r3, #2
 800781a:	d112      	bne.n	8007842 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007820:	881a      	ldrh	r2, [r3, #0]
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800782c:	1c9a      	adds	r2, r3, #2
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007836:	b29b      	uxth	r3, r3
 8007838:	3b01      	subs	r3, #1
 800783a:	b29a      	uxth	r2, r3
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	86da      	strh	r2, [r3, #54]	; 0x36
 8007840:	e011      	b.n	8007866 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007842:	f7fa ffff 	bl	8002844 <HAL_GetTick>
 8007846:	4602      	mov	r2, r0
 8007848:	69bb      	ldr	r3, [r7, #24]
 800784a:	1ad3      	subs	r3, r2, r3
 800784c:	683a      	ldr	r2, [r7, #0]
 800784e:	429a      	cmp	r2, r3
 8007850:	d803      	bhi.n	800785a <HAL_SPI_Transmit+0x168>
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007858:	d102      	bne.n	8007860 <HAL_SPI_Transmit+0x16e>
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d102      	bne.n	8007866 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007860:	2303      	movs	r3, #3
 8007862:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007864:	e074      	b.n	8007950 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800786a:	b29b      	uxth	r3, r3
 800786c:	2b00      	cmp	r3, #0
 800786e:	d1ce      	bne.n	800780e <HAL_SPI_Transmit+0x11c>
 8007870:	e04c      	b.n	800790c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d002      	beq.n	8007880 <HAL_SPI_Transmit+0x18e>
 800787a:	8afb      	ldrh	r3, [r7, #22]
 800787c:	2b01      	cmp	r3, #1
 800787e:	d140      	bne.n	8007902 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	330c      	adds	r3, #12
 800788a:	7812      	ldrb	r2, [r2, #0]
 800788c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007892:	1c5a      	adds	r2, r3, #1
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800789c:	b29b      	uxth	r3, r3
 800789e:	3b01      	subs	r3, #1
 80078a0:	b29a      	uxth	r2, r3
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80078a6:	e02c      	b.n	8007902 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	f003 0302 	and.w	r3, r3, #2
 80078b2:	2b02      	cmp	r3, #2
 80078b4:	d113      	bne.n	80078de <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	330c      	adds	r3, #12
 80078c0:	7812      	ldrb	r2, [r2, #0]
 80078c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078c8:	1c5a      	adds	r2, r3, #1
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	3b01      	subs	r3, #1
 80078d6:	b29a      	uxth	r2, r3
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	86da      	strh	r2, [r3, #54]	; 0x36
 80078dc:	e011      	b.n	8007902 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80078de:	f7fa ffb1 	bl	8002844 <HAL_GetTick>
 80078e2:	4602      	mov	r2, r0
 80078e4:	69bb      	ldr	r3, [r7, #24]
 80078e6:	1ad3      	subs	r3, r2, r3
 80078e8:	683a      	ldr	r2, [r7, #0]
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d803      	bhi.n	80078f6 <HAL_SPI_Transmit+0x204>
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078f4:	d102      	bne.n	80078fc <HAL_SPI_Transmit+0x20a>
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d102      	bne.n	8007902 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80078fc:	2303      	movs	r3, #3
 80078fe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007900:	e026      	b.n	8007950 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007906:	b29b      	uxth	r3, r3
 8007908:	2b00      	cmp	r3, #0
 800790a:	d1cd      	bne.n	80078a8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800790c:	69ba      	ldr	r2, [r7, #24]
 800790e:	6839      	ldr	r1, [r7, #0]
 8007910:	68f8      	ldr	r0, [r7, #12]
 8007912:	f000 f8b3 	bl	8007a7c <SPI_EndRxTxTransaction>
 8007916:	4603      	mov	r3, r0
 8007918:	2b00      	cmp	r3, #0
 800791a:	d002      	beq.n	8007922 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2220      	movs	r2, #32
 8007920:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	689b      	ldr	r3, [r3, #8]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d10a      	bne.n	8007940 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800792a:	2300      	movs	r3, #0
 800792c:	613b      	str	r3, [r7, #16]
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	68db      	ldr	r3, [r3, #12]
 8007934:	613b      	str	r3, [r7, #16]
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	689b      	ldr	r3, [r3, #8]
 800793c:	613b      	str	r3, [r7, #16]
 800793e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007944:	2b00      	cmp	r3, #0
 8007946:	d002      	beq.n	800794e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007948:	2301      	movs	r3, #1
 800794a:	77fb      	strb	r3, [r7, #31]
 800794c:	e000      	b.n	8007950 <HAL_SPI_Transmit+0x25e>
  }

error:
 800794e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2201      	movs	r2, #1
 8007954:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2200      	movs	r2, #0
 800795c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007960:	7ffb      	ldrb	r3, [r7, #31]
}
 8007962:	4618      	mov	r0, r3
 8007964:	3720      	adds	r7, #32
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
	...

0800796c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b088      	sub	sp, #32
 8007970:	af00      	add	r7, sp, #0
 8007972:	60f8      	str	r0, [r7, #12]
 8007974:	60b9      	str	r1, [r7, #8]
 8007976:	603b      	str	r3, [r7, #0]
 8007978:	4613      	mov	r3, r2
 800797a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800797c:	f7fa ff62 	bl	8002844 <HAL_GetTick>
 8007980:	4602      	mov	r2, r0
 8007982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007984:	1a9b      	subs	r3, r3, r2
 8007986:	683a      	ldr	r2, [r7, #0]
 8007988:	4413      	add	r3, r2
 800798a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800798c:	f7fa ff5a 	bl	8002844 <HAL_GetTick>
 8007990:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007992:	4b39      	ldr	r3, [pc, #228]	; (8007a78 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	015b      	lsls	r3, r3, #5
 8007998:	0d1b      	lsrs	r3, r3, #20
 800799a:	69fa      	ldr	r2, [r7, #28]
 800799c:	fb02 f303 	mul.w	r3, r2, r3
 80079a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80079a2:	e054      	b.n	8007a4e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079aa:	d050      	beq.n	8007a4e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80079ac:	f7fa ff4a 	bl	8002844 <HAL_GetTick>
 80079b0:	4602      	mov	r2, r0
 80079b2:	69bb      	ldr	r3, [r7, #24]
 80079b4:	1ad3      	subs	r3, r2, r3
 80079b6:	69fa      	ldr	r2, [r7, #28]
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d902      	bls.n	80079c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80079bc:	69fb      	ldr	r3, [r7, #28]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d13d      	bne.n	8007a3e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	685a      	ldr	r2, [r3, #4]
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80079d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80079da:	d111      	bne.n	8007a00 <SPI_WaitFlagStateUntilTimeout+0x94>
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079e4:	d004      	beq.n	80079f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079ee:	d107      	bne.n	8007a00 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a08:	d10f      	bne.n	8007a2a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a18:	601a      	str	r2, [r3, #0]
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a28:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2200      	movs	r2, #0
 8007a36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007a3a:	2303      	movs	r3, #3
 8007a3c:	e017      	b.n	8007a6e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d101      	bne.n	8007a48 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007a44:	2300      	movs	r3, #0
 8007a46:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	3b01      	subs	r3, #1
 8007a4c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	689a      	ldr	r2, [r3, #8]
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	4013      	ands	r3, r2
 8007a58:	68ba      	ldr	r2, [r7, #8]
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	bf0c      	ite	eq
 8007a5e:	2301      	moveq	r3, #1
 8007a60:	2300      	movne	r3, #0
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	461a      	mov	r2, r3
 8007a66:	79fb      	ldrb	r3, [r7, #7]
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d19b      	bne.n	80079a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007a6c:	2300      	movs	r3, #0
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3720      	adds	r7, #32
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop
 8007a78:	200002a4 	.word	0x200002a4

08007a7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b088      	sub	sp, #32
 8007a80:	af02      	add	r7, sp, #8
 8007a82:	60f8      	str	r0, [r7, #12]
 8007a84:	60b9      	str	r1, [r7, #8]
 8007a86:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007a88:	4b1b      	ldr	r3, [pc, #108]	; (8007af8 <SPI_EndRxTxTransaction+0x7c>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a1b      	ldr	r2, [pc, #108]	; (8007afc <SPI_EndRxTxTransaction+0x80>)
 8007a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a92:	0d5b      	lsrs	r3, r3, #21
 8007a94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007a98:	fb02 f303 	mul.w	r3, r2, r3
 8007a9c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007aa6:	d112      	bne.n	8007ace <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	9300      	str	r3, [sp, #0]
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	2180      	movs	r1, #128	; 0x80
 8007ab2:	68f8      	ldr	r0, [r7, #12]
 8007ab4:	f7ff ff5a 	bl	800796c <SPI_WaitFlagStateUntilTimeout>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d016      	beq.n	8007aec <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ac2:	f043 0220 	orr.w	r2, r3, #32
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007aca:	2303      	movs	r3, #3
 8007acc:	e00f      	b.n	8007aee <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d00a      	beq.n	8007aea <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	3b01      	subs	r3, #1
 8007ad8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ae4:	2b80      	cmp	r3, #128	; 0x80
 8007ae6:	d0f2      	beq.n	8007ace <SPI_EndRxTxTransaction+0x52>
 8007ae8:	e000      	b.n	8007aec <SPI_EndRxTxTransaction+0x70>
        break;
 8007aea:	bf00      	nop
  }

  return HAL_OK;
 8007aec:	2300      	movs	r3, #0
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3718      	adds	r7, #24
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}
 8007af6:	bf00      	nop
 8007af8:	200002a4 	.word	0x200002a4
 8007afc:	165e9f81 	.word	0x165e9f81

08007b00 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007b00:	b084      	sub	sp, #16
 8007b02:	b580      	push	{r7, lr}
 8007b04:	b084      	sub	sp, #16
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
 8007b0a:	f107 001c 	add.w	r0, r7, #28
 8007b0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d122      	bne.n	8007b5e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b1c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007b2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	68db      	ldr	r3, [r3, #12]
 8007b38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007b40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	d105      	bne.n	8007b52 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	68db      	ldr	r3, [r3, #12]
 8007b4a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 f9a0 	bl	8007e98 <USB_CoreReset>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	73fb      	strb	r3, [r7, #15]
 8007b5c:	e01a      	b.n	8007b94 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	68db      	ldr	r3, [r3, #12]
 8007b62:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 f994 	bl	8007e98 <USB_CoreReset>
 8007b70:	4603      	mov	r3, r0
 8007b72:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007b74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d106      	bne.n	8007b88 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b7e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	639a      	str	r2, [r3, #56]	; 0x38
 8007b86:	e005      	b.n	8007b94 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b96:	2b01      	cmp	r3, #1
 8007b98:	d10b      	bne.n	8007bb2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	f043 0206 	orr.w	r2, r3, #6
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	689b      	ldr	r3, [r3, #8]
 8007baa:	f043 0220 	orr.w	r2, r3, #32
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3710      	adds	r7, #16
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007bbe:	b004      	add	sp, #16
 8007bc0:	4770      	bx	lr

08007bc2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007bc2:	b480      	push	{r7}
 8007bc4:	b083      	sub	sp, #12
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	f043 0201 	orr.w	r2, r3, #1
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007bd6:	2300      	movs	r3, #0
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	370c      	adds	r7, #12
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr

08007be4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b083      	sub	sp, #12
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	f023 0201 	bic.w	r2, r3, #1
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007bf8:	2300      	movs	r3, #0
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	370c      	adds	r7, #12
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c04:	4770      	bx	lr

08007c06 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007c06:	b580      	push	{r7, lr}
 8007c08:	b084      	sub	sp, #16
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
 8007c0e:	460b      	mov	r3, r1
 8007c10:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007c12:	2300      	movs	r3, #0
 8007c14:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	68db      	ldr	r3, [r3, #12]
 8007c1a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007c22:	78fb      	ldrb	r3, [r7, #3]
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d115      	bne.n	8007c54 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	68db      	ldr	r3, [r3, #12]
 8007c2c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007c34:	2001      	movs	r0, #1
 8007c36:	f7fa fe11 	bl	800285c <HAL_Delay>
      ms++;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 f91a 	bl	8007e7a <USB_GetMode>
 8007c46:	4603      	mov	r3, r0
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d01e      	beq.n	8007c8a <USB_SetCurrentMode+0x84>
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2b31      	cmp	r3, #49	; 0x31
 8007c50:	d9f0      	bls.n	8007c34 <USB_SetCurrentMode+0x2e>
 8007c52:	e01a      	b.n	8007c8a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007c54:	78fb      	ldrb	r3, [r7, #3]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d115      	bne.n	8007c86 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	68db      	ldr	r3, [r3, #12]
 8007c5e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007c66:	2001      	movs	r0, #1
 8007c68:	f7fa fdf8 	bl	800285c <HAL_Delay>
      ms++;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	3301      	adds	r3, #1
 8007c70:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 f901 	bl	8007e7a <USB_GetMode>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d005      	beq.n	8007c8a <USB_SetCurrentMode+0x84>
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2b31      	cmp	r3, #49	; 0x31
 8007c82:	d9f0      	bls.n	8007c66 <USB_SetCurrentMode+0x60>
 8007c84:	e001      	b.n	8007c8a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
 8007c88:	e005      	b.n	8007c96 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2b32      	cmp	r3, #50	; 0x32
 8007c8e:	d101      	bne.n	8007c94 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007c90:	2301      	movs	r3, #1
 8007c92:	e000      	b.n	8007c96 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007c94:	2300      	movs	r3, #0
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3710      	adds	r7, #16
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
	...

08007ca0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b085      	sub	sp, #20
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007caa:	2300      	movs	r3, #0
 8007cac:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	019b      	lsls	r3, r3, #6
 8007cb2:	f043 0220 	orr.w	r2, r3, #32
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	3301      	adds	r3, #1
 8007cbe:	60fb      	str	r3, [r7, #12]
 8007cc0:	4a08      	ldr	r2, [pc, #32]	; (8007ce4 <USB_FlushTxFifo+0x44>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d901      	bls.n	8007cca <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8007cc6:	2303      	movs	r3, #3
 8007cc8:	e006      	b.n	8007cd8 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	691b      	ldr	r3, [r3, #16]
 8007cce:	f003 0320 	and.w	r3, r3, #32
 8007cd2:	2b20      	cmp	r3, #32
 8007cd4:	d0f1      	beq.n	8007cba <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007cd6:	2300      	movs	r3, #0
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3714      	adds	r7, #20
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr
 8007ce4:	00030d40 	.word	0x00030d40

08007ce8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b085      	sub	sp, #20
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2210      	movs	r2, #16
 8007cf8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	3301      	adds	r3, #1
 8007cfe:	60fb      	str	r3, [r7, #12]
 8007d00:	4a08      	ldr	r2, [pc, #32]	; (8007d24 <USB_FlushRxFifo+0x3c>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d901      	bls.n	8007d0a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8007d06:	2303      	movs	r3, #3
 8007d08:	e006      	b.n	8007d18 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	691b      	ldr	r3, [r3, #16]
 8007d0e:	f003 0310 	and.w	r3, r3, #16
 8007d12:	2b10      	cmp	r3, #16
 8007d14:	d0f1      	beq.n	8007cfa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007d16:	2300      	movs	r3, #0
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3714      	adds	r7, #20
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d22:	4770      	bx	lr
 8007d24:	00030d40 	.word	0x00030d40

08007d28 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b089      	sub	sp, #36	; 0x24
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	60f8      	str	r0, [r7, #12]
 8007d30:	60b9      	str	r1, [r7, #8]
 8007d32:	4611      	mov	r1, r2
 8007d34:	461a      	mov	r2, r3
 8007d36:	460b      	mov	r3, r1
 8007d38:	71fb      	strb	r3, [r7, #7]
 8007d3a:	4613      	mov	r3, r2
 8007d3c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007d46:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d123      	bne.n	8007d96 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007d4e:	88bb      	ldrh	r3, [r7, #4]
 8007d50:	3303      	adds	r3, #3
 8007d52:	089b      	lsrs	r3, r3, #2
 8007d54:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007d56:	2300      	movs	r3, #0
 8007d58:	61bb      	str	r3, [r7, #24]
 8007d5a:	e018      	b.n	8007d8e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007d5c:	79fb      	ldrb	r3, [r7, #7]
 8007d5e:	031a      	lsls	r2, r3, #12
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	4413      	add	r3, r2
 8007d64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d68:	461a      	mov	r2, r3
 8007d6a:	69fb      	ldr	r3, [r7, #28]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007d70:	69fb      	ldr	r3, [r7, #28]
 8007d72:	3301      	adds	r3, #1
 8007d74:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007d76:	69fb      	ldr	r3, [r7, #28]
 8007d78:	3301      	adds	r3, #1
 8007d7a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007d7c:	69fb      	ldr	r3, [r7, #28]
 8007d7e:	3301      	adds	r3, #1
 8007d80:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007d82:	69fb      	ldr	r3, [r7, #28]
 8007d84:	3301      	adds	r3, #1
 8007d86:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007d88:	69bb      	ldr	r3, [r7, #24]
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	61bb      	str	r3, [r7, #24]
 8007d8e:	69ba      	ldr	r2, [r7, #24]
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d3e2      	bcc.n	8007d5c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007d96:	2300      	movs	r3, #0
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3724      	adds	r7, #36	; 0x24
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr

08007da4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b08b      	sub	sp, #44	; 0x2c
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	60b9      	str	r1, [r7, #8]
 8007dae:	4613      	mov	r3, r2
 8007db0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007dba:	88fb      	ldrh	r3, [r7, #6]
 8007dbc:	089b      	lsrs	r3, r3, #2
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007dc2:	88fb      	ldrh	r3, [r7, #6]
 8007dc4:	f003 0303 	and.w	r3, r3, #3
 8007dc8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007dca:	2300      	movs	r3, #0
 8007dcc:	623b      	str	r3, [r7, #32]
 8007dce:	e014      	b.n	8007dfa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007dd0:	69bb      	ldr	r3, [r7, #24]
 8007dd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dda:	601a      	str	r2, [r3, #0]
    pDest++;
 8007ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dde:	3301      	adds	r3, #1
 8007de0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de4:	3301      	adds	r3, #1
 8007de6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dea:	3301      	adds	r3, #1
 8007dec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df0:	3301      	adds	r3, #1
 8007df2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007df4:	6a3b      	ldr	r3, [r7, #32]
 8007df6:	3301      	adds	r3, #1
 8007df8:	623b      	str	r3, [r7, #32]
 8007dfa:	6a3a      	ldr	r2, [r7, #32]
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d3e6      	bcc.n	8007dd0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007e02:	8bfb      	ldrh	r3, [r7, #30]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d01e      	beq.n	8007e46 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007e0c:	69bb      	ldr	r3, [r7, #24]
 8007e0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e12:	461a      	mov	r2, r3
 8007e14:	f107 0310 	add.w	r3, r7, #16
 8007e18:	6812      	ldr	r2, [r2, #0]
 8007e1a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007e1c:	693a      	ldr	r2, [r7, #16]
 8007e1e:	6a3b      	ldr	r3, [r7, #32]
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	00db      	lsls	r3, r3, #3
 8007e24:	fa22 f303 	lsr.w	r3, r2, r3
 8007e28:	b2da      	uxtb	r2, r3
 8007e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2c:	701a      	strb	r2, [r3, #0]
      i++;
 8007e2e:	6a3b      	ldr	r3, [r7, #32]
 8007e30:	3301      	adds	r3, #1
 8007e32:	623b      	str	r3, [r7, #32]
      pDest++;
 8007e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e36:	3301      	adds	r3, #1
 8007e38:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007e3a:	8bfb      	ldrh	r3, [r7, #30]
 8007e3c:	3b01      	subs	r3, #1
 8007e3e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007e40:	8bfb      	ldrh	r3, [r7, #30]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d1ea      	bne.n	8007e1c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	372c      	adds	r7, #44	; 0x2c
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b085      	sub	sp, #20
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	695b      	ldr	r3, [r3, #20]
 8007e60:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	699b      	ldr	r3, [r3, #24]
 8007e66:	68fa      	ldr	r2, [r7, #12]
 8007e68:	4013      	ands	r3, r2
 8007e6a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3714      	adds	r7, #20
 8007e72:	46bd      	mov	sp, r7
 8007e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e78:	4770      	bx	lr

08007e7a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007e7a:	b480      	push	{r7}
 8007e7c:	b083      	sub	sp, #12
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	695b      	ldr	r3, [r3, #20]
 8007e86:	f003 0301 	and.w	r3, r3, #1
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	370c      	adds	r7, #12
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr
	...

08007e98 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b085      	sub	sp, #20
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	3301      	adds	r3, #1
 8007ea8:	60fb      	str	r3, [r7, #12]
 8007eaa:	4a13      	ldr	r2, [pc, #76]	; (8007ef8 <USB_CoreReset+0x60>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d901      	bls.n	8007eb4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007eb0:	2303      	movs	r3, #3
 8007eb2:	e01a      	b.n	8007eea <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	691b      	ldr	r3, [r3, #16]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	daf3      	bge.n	8007ea4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	691b      	ldr	r3, [r3, #16]
 8007ec4:	f043 0201 	orr.w	r2, r3, #1
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	3301      	adds	r3, #1
 8007ed0:	60fb      	str	r3, [r7, #12]
 8007ed2:	4a09      	ldr	r2, [pc, #36]	; (8007ef8 <USB_CoreReset+0x60>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d901      	bls.n	8007edc <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8007ed8:	2303      	movs	r3, #3
 8007eda:	e006      	b.n	8007eea <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	691b      	ldr	r3, [r3, #16]
 8007ee0:	f003 0301 	and.w	r3, r3, #1
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d0f1      	beq.n	8007ecc <USB_CoreReset+0x34>

  return HAL_OK;
 8007ee8:	2300      	movs	r3, #0
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3714      	adds	r7, #20
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr
 8007ef6:	bf00      	nop
 8007ef8:	00030d40 	.word	0x00030d40

08007efc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007efc:	b084      	sub	sp, #16
 8007efe:	b580      	push	{r7, lr}
 8007f00:	b084      	sub	sp, #16
 8007f02:	af00      	add	r7, sp, #0
 8007f04:	6078      	str	r0, [r7, #4]
 8007f06:	f107 001c 	add.w	r0, r7, #28
 8007f0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007f18:	461a      	mov	r2, r3
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f22:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f2e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f3a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d018      	beq.n	8007f80 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	d10a      	bne.n	8007f6a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	68ba      	ldr	r2, [r7, #8]
 8007f5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f62:	f043 0304 	orr.w	r3, r3, #4
 8007f66:	6013      	str	r3, [r2, #0]
 8007f68:	e014      	b.n	8007f94 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	68ba      	ldr	r2, [r7, #8]
 8007f74:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f78:	f023 0304 	bic.w	r3, r3, #4
 8007f7c:	6013      	str	r3, [r2, #0]
 8007f7e:	e009      	b.n	8007f94 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	68ba      	ldr	r2, [r7, #8]
 8007f8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f8e:	f023 0304 	bic.w	r3, r3, #4
 8007f92:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8007f94:	2110      	movs	r1, #16
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f7ff fe82 	bl	8007ca0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f7ff fea3 	bl	8007ce8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	60fb      	str	r3, [r7, #12]
 8007fa6:	e015      	b.n	8007fd4 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	015a      	lsls	r2, r3, #5
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	4413      	add	r3, r2
 8007fb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fb4:	461a      	mov	r2, r3
 8007fb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007fba:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	015a      	lsls	r2, r3, #5
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	4413      	add	r3, r2
 8007fc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fc8:	461a      	mov	r2, r3
 8007fca:	2300      	movs	r3, #0
 8007fcc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	3301      	adds	r3, #1
 8007fd2:	60fb      	str	r3, [r7, #12]
 8007fd4:	6a3b      	ldr	r3, [r7, #32]
 8007fd6:	68fa      	ldr	r2, [r7, #12]
 8007fd8:	429a      	cmp	r2, r3
 8007fda:	d3e5      	bcc.n	8007fa8 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007fe8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d00b      	beq.n	800800e <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ffc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	4a13      	ldr	r2, [pc, #76]	; (8008050 <USB_HostInit+0x154>)
 8008002:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	4a13      	ldr	r2, [pc, #76]	; (8008054 <USB_HostInit+0x158>)
 8008008:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800800c:	e009      	b.n	8008022 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2280      	movs	r2, #128	; 0x80
 8008012:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	4a10      	ldr	r2, [pc, #64]	; (8008058 <USB_HostInit+0x15c>)
 8008018:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	4a0f      	ldr	r2, [pc, #60]	; (800805c <USB_HostInit+0x160>)
 800801e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008024:	2b00      	cmp	r3, #0
 8008026:	d105      	bne.n	8008034 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	699b      	ldr	r3, [r3, #24]
 800802c:	f043 0210 	orr.w	r2, r3, #16
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	699a      	ldr	r2, [r3, #24]
 8008038:	4b09      	ldr	r3, [pc, #36]	; (8008060 <USB_HostInit+0x164>)
 800803a:	4313      	orrs	r3, r2
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8008040:	2300      	movs	r3, #0
}
 8008042:	4618      	mov	r0, r3
 8008044:	3710      	adds	r7, #16
 8008046:	46bd      	mov	sp, r7
 8008048:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800804c:	b004      	add	sp, #16
 800804e:	4770      	bx	lr
 8008050:	01000200 	.word	0x01000200
 8008054:	00e00300 	.word	0x00e00300
 8008058:	00600080 	.word	0x00600080
 800805c:	004000e0 	.word	0x004000e0
 8008060:	a3200008 	.word	0xa3200008

08008064 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008064:	b480      	push	{r7}
 8008066:	b085      	sub	sp, #20
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	460b      	mov	r3, r1
 800806e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	68fa      	ldr	r2, [r7, #12]
 800807e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008082:	f023 0303 	bic.w	r3, r3, #3
 8008086:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800808e:	681a      	ldr	r2, [r3, #0]
 8008090:	78fb      	ldrb	r3, [r7, #3]
 8008092:	f003 0303 	and.w	r3, r3, #3
 8008096:	68f9      	ldr	r1, [r7, #12]
 8008098:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800809c:	4313      	orrs	r3, r2
 800809e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80080a0:	78fb      	ldrb	r3, [r7, #3]
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	d107      	bne.n	80080b6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080ac:	461a      	mov	r2, r3
 80080ae:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80080b2:	6053      	str	r3, [r2, #4]
 80080b4:	e009      	b.n	80080ca <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80080b6:	78fb      	ldrb	r3, [r7, #3]
 80080b8:	2b02      	cmp	r3, #2
 80080ba:	d106      	bne.n	80080ca <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080c2:	461a      	mov	r2, r3
 80080c4:	f241 7370 	movw	r3, #6000	; 0x1770
 80080c8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80080ca:	2300      	movs	r3, #0
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3714      	adds	r7, #20
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr

080080d8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b084      	sub	sp, #16
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80080e4:	2300      	movs	r3, #0
 80080e6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80080f8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	68fa      	ldr	r2, [r7, #12]
 80080fe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008102:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008106:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008108:	2064      	movs	r0, #100	; 0x64
 800810a:	f7fa fba7 	bl	800285c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	68fa      	ldr	r2, [r7, #12]
 8008112:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008116:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800811a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800811c:	200a      	movs	r0, #10
 800811e:	f7fa fb9d 	bl	800285c <HAL_Delay>

  return HAL_OK;
 8008122:	2300      	movs	r3, #0
}
 8008124:	4618      	mov	r0, r3
 8008126:	3710      	adds	r7, #16
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}

0800812c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800812c:	b480      	push	{r7}
 800812e:	b085      	sub	sp, #20
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	460b      	mov	r3, r1
 8008136:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800813c:	2300      	movs	r3, #0
 800813e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008150:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008158:	2b00      	cmp	r3, #0
 800815a:	d109      	bne.n	8008170 <USB_DriveVbus+0x44>
 800815c:	78fb      	ldrb	r3, [r7, #3]
 800815e:	2b01      	cmp	r3, #1
 8008160:	d106      	bne.n	8008170 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	68fa      	ldr	r2, [r7, #12]
 8008166:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800816a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800816e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008176:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800817a:	d109      	bne.n	8008190 <USB_DriveVbus+0x64>
 800817c:	78fb      	ldrb	r3, [r7, #3]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d106      	bne.n	8008190 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	68fa      	ldr	r2, [r7, #12]
 8008186:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800818a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800818e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008190:	2300      	movs	r3, #0
}
 8008192:	4618      	mov	r0, r3
 8008194:	3714      	adds	r7, #20
 8008196:	46bd      	mov	sp, r7
 8008198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819c:	4770      	bx	lr

0800819e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800819e:	b480      	push	{r7}
 80081a0:	b085      	sub	sp, #20
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80081aa:	2300      	movs	r3, #0
 80081ac:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	0c5b      	lsrs	r3, r3, #17
 80081bc:	f003 0303 	and.w	r3, r3, #3
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3714      	adds	r7, #20
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr

080081cc <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b085      	sub	sp, #20
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081de:	689b      	ldr	r3, [r3, #8]
 80081e0:	b29b      	uxth	r3, r3
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3714      	adds	r7, #20
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr
	...

080081f0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b088      	sub	sp, #32
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	4608      	mov	r0, r1
 80081fa:	4611      	mov	r1, r2
 80081fc:	461a      	mov	r2, r3
 80081fe:	4603      	mov	r3, r0
 8008200:	70fb      	strb	r3, [r7, #3]
 8008202:	460b      	mov	r3, r1
 8008204:	70bb      	strb	r3, [r7, #2]
 8008206:	4613      	mov	r3, r2
 8008208:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800820a:	2300      	movs	r3, #0
 800820c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8008212:	78fb      	ldrb	r3, [r7, #3]
 8008214:	015a      	lsls	r2, r3, #5
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	4413      	add	r3, r2
 800821a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800821e:	461a      	mov	r2, r3
 8008220:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008224:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008226:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800822a:	2b03      	cmp	r3, #3
 800822c:	d87e      	bhi.n	800832c <USB_HC_Init+0x13c>
 800822e:	a201      	add	r2, pc, #4	; (adr r2, 8008234 <USB_HC_Init+0x44>)
 8008230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008234:	08008245 	.word	0x08008245
 8008238:	080082ef 	.word	0x080082ef
 800823c:	08008245 	.word	0x08008245
 8008240:	080082b1 	.word	0x080082b1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008244:	78fb      	ldrb	r3, [r7, #3]
 8008246:	015a      	lsls	r2, r3, #5
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	4413      	add	r3, r2
 800824c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008250:	461a      	mov	r2, r3
 8008252:	f240 439d 	movw	r3, #1181	; 0x49d
 8008256:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008258:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800825c:	2b00      	cmp	r3, #0
 800825e:	da10      	bge.n	8008282 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008260:	78fb      	ldrb	r3, [r7, #3]
 8008262:	015a      	lsls	r2, r3, #5
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	4413      	add	r3, r2
 8008268:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800826c:	68db      	ldr	r3, [r3, #12]
 800826e:	78fa      	ldrb	r2, [r7, #3]
 8008270:	0151      	lsls	r1, r2, #5
 8008272:	693a      	ldr	r2, [r7, #16]
 8008274:	440a      	add	r2, r1
 8008276:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800827a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800827e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8008280:	e057      	b.n	8008332 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800828a:	2b00      	cmp	r3, #0
 800828c:	d051      	beq.n	8008332 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800828e:	78fb      	ldrb	r3, [r7, #3]
 8008290:	015a      	lsls	r2, r3, #5
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	4413      	add	r3, r2
 8008296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800829a:	68db      	ldr	r3, [r3, #12]
 800829c:	78fa      	ldrb	r2, [r7, #3]
 800829e:	0151      	lsls	r1, r2, #5
 80082a0:	693a      	ldr	r2, [r7, #16]
 80082a2:	440a      	add	r2, r1
 80082a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082a8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80082ac:	60d3      	str	r3, [r2, #12]
      break;
 80082ae:	e040      	b.n	8008332 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80082b0:	78fb      	ldrb	r3, [r7, #3]
 80082b2:	015a      	lsls	r2, r3, #5
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	4413      	add	r3, r2
 80082b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082bc:	461a      	mov	r2, r3
 80082be:	f240 639d 	movw	r3, #1693	; 0x69d
 80082c2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80082c4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	da34      	bge.n	8008336 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80082cc:	78fb      	ldrb	r3, [r7, #3]
 80082ce:	015a      	lsls	r2, r3, #5
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	4413      	add	r3, r2
 80082d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082d8:	68db      	ldr	r3, [r3, #12]
 80082da:	78fa      	ldrb	r2, [r7, #3]
 80082dc:	0151      	lsls	r1, r2, #5
 80082de:	693a      	ldr	r2, [r7, #16]
 80082e0:	440a      	add	r2, r1
 80082e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082ea:	60d3      	str	r3, [r2, #12]
      }

      break;
 80082ec:	e023      	b.n	8008336 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80082ee:	78fb      	ldrb	r3, [r7, #3]
 80082f0:	015a      	lsls	r2, r3, #5
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	4413      	add	r3, r2
 80082f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082fa:	461a      	mov	r2, r3
 80082fc:	f240 2325 	movw	r3, #549	; 0x225
 8008300:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008302:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008306:	2b00      	cmp	r3, #0
 8008308:	da17      	bge.n	800833a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800830a:	78fb      	ldrb	r3, [r7, #3]
 800830c:	015a      	lsls	r2, r3, #5
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	4413      	add	r3, r2
 8008312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008316:	68db      	ldr	r3, [r3, #12]
 8008318:	78fa      	ldrb	r2, [r7, #3]
 800831a:	0151      	lsls	r1, r2, #5
 800831c:	693a      	ldr	r2, [r7, #16]
 800831e:	440a      	add	r2, r1
 8008320:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008324:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008328:	60d3      	str	r3, [r2, #12]
      }
      break;
 800832a:	e006      	b.n	800833a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800832c:	2301      	movs	r3, #1
 800832e:	77fb      	strb	r3, [r7, #31]
      break;
 8008330:	e004      	b.n	800833c <USB_HC_Init+0x14c>
      break;
 8008332:	bf00      	nop
 8008334:	e002      	b.n	800833c <USB_HC_Init+0x14c>
      break;
 8008336:	bf00      	nop
 8008338:	e000      	b.n	800833c <USB_HC_Init+0x14c>
      break;
 800833a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008342:	699a      	ldr	r2, [r3, #24]
 8008344:	78fb      	ldrb	r3, [r7, #3]
 8008346:	f003 030f 	and.w	r3, r3, #15
 800834a:	2101      	movs	r1, #1
 800834c:	fa01 f303 	lsl.w	r3, r1, r3
 8008350:	6939      	ldr	r1, [r7, #16]
 8008352:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008356:	4313      	orrs	r3, r2
 8008358:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	699b      	ldr	r3, [r3, #24]
 800835e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008366:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800836a:	2b00      	cmp	r3, #0
 800836c:	da03      	bge.n	8008376 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800836e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008372:	61bb      	str	r3, [r7, #24]
 8008374:	e001      	b.n	800837a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8008376:	2300      	movs	r3, #0
 8008378:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f7ff ff0f 	bl	800819e <USB_GetHostSpeed>
 8008380:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008382:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008386:	2b02      	cmp	r3, #2
 8008388:	d106      	bne.n	8008398 <USB_HC_Init+0x1a8>
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	2b02      	cmp	r3, #2
 800838e:	d003      	beq.n	8008398 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008390:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008394:	617b      	str	r3, [r7, #20]
 8008396:	e001      	b.n	800839c <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008398:	2300      	movs	r3, #0
 800839a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800839c:	787b      	ldrb	r3, [r7, #1]
 800839e:	059b      	lsls	r3, r3, #22
 80083a0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80083a4:	78bb      	ldrb	r3, [r7, #2]
 80083a6:	02db      	lsls	r3, r3, #11
 80083a8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80083ac:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80083ae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80083b2:	049b      	lsls	r3, r3, #18
 80083b4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80083b8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80083ba:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80083bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80083c0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80083c2:	69bb      	ldr	r3, [r7, #24]
 80083c4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80083c6:	78fb      	ldrb	r3, [r7, #3]
 80083c8:	0159      	lsls	r1, r3, #5
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	440b      	add	r3, r1
 80083ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083d2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80083d8:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80083da:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80083de:	2b03      	cmp	r3, #3
 80083e0:	d10f      	bne.n	8008402 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80083e2:	78fb      	ldrb	r3, [r7, #3]
 80083e4:	015a      	lsls	r2, r3, #5
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	4413      	add	r3, r2
 80083ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	78fa      	ldrb	r2, [r7, #3]
 80083f2:	0151      	lsls	r1, r2, #5
 80083f4:	693a      	ldr	r2, [r7, #16]
 80083f6:	440a      	add	r2, r1
 80083f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008400:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008402:	7ffb      	ldrb	r3, [r7, #31]
}
 8008404:	4618      	mov	r0, r3
 8008406:	3720      	adds	r7, #32
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}

0800840c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b08c      	sub	sp, #48	; 0x30
 8008410:	af02      	add	r7, sp, #8
 8008412:	60f8      	str	r0, [r7, #12]
 8008414:	60b9      	str	r1, [r7, #8]
 8008416:	4613      	mov	r3, r2
 8008418:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	785b      	ldrb	r3, [r3, #1]
 8008422:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008424:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008428:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800842e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008432:	2b00      	cmp	r3, #0
 8008434:	d02d      	beq.n	8008492 <USB_HC_StartXfer+0x86>
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	791b      	ldrb	r3, [r3, #4]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d129      	bne.n	8008492 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800843e:	79fb      	ldrb	r3, [r7, #7]
 8008440:	2b01      	cmp	r3, #1
 8008442:	d117      	bne.n	8008474 <USB_HC_StartXfer+0x68>
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	79db      	ldrb	r3, [r3, #7]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d003      	beq.n	8008454 <USB_HC_StartXfer+0x48>
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	79db      	ldrb	r3, [r3, #7]
 8008450:	2b02      	cmp	r3, #2
 8008452:	d10f      	bne.n	8008474 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008454:	69fb      	ldr	r3, [r7, #28]
 8008456:	015a      	lsls	r2, r3, #5
 8008458:	6a3b      	ldr	r3, [r7, #32]
 800845a:	4413      	add	r3, r2
 800845c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008460:	68db      	ldr	r3, [r3, #12]
 8008462:	69fa      	ldr	r2, [r7, #28]
 8008464:	0151      	lsls	r1, r2, #5
 8008466:	6a3a      	ldr	r2, [r7, #32]
 8008468:	440a      	add	r2, r1
 800846a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800846e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008472:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8008474:	79fb      	ldrb	r3, [r7, #7]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d10b      	bne.n	8008492 <USB_HC_StartXfer+0x86>
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	795b      	ldrb	r3, [r3, #5]
 800847e:	2b01      	cmp	r3, #1
 8008480:	d107      	bne.n	8008492 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	785b      	ldrb	r3, [r3, #1]
 8008486:	4619      	mov	r1, r3
 8008488:	68f8      	ldr	r0, [r7, #12]
 800848a:	f000 fa2f 	bl	80088ec <USB_DoPing>
      return HAL_OK;
 800848e:	2300      	movs	r3, #0
 8008490:	e0f8      	b.n	8008684 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	695b      	ldr	r3, [r3, #20]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d018      	beq.n	80084cc <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	695b      	ldr	r3, [r3, #20]
 800849e:	68ba      	ldr	r2, [r7, #8]
 80084a0:	8912      	ldrh	r2, [r2, #8]
 80084a2:	4413      	add	r3, r2
 80084a4:	3b01      	subs	r3, #1
 80084a6:	68ba      	ldr	r2, [r7, #8]
 80084a8:	8912      	ldrh	r2, [r2, #8]
 80084aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80084ae:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80084b0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80084b2:	8b7b      	ldrh	r3, [r7, #26]
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d90b      	bls.n	80084d0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80084b8:	8b7b      	ldrh	r3, [r7, #26]
 80084ba:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80084bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80084be:	68ba      	ldr	r2, [r7, #8]
 80084c0:	8912      	ldrh	r2, [r2, #8]
 80084c2:	fb02 f203 	mul.w	r2, r2, r3
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	611a      	str	r2, [r3, #16]
 80084ca:	e001      	b.n	80084d0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80084cc:	2301      	movs	r3, #1
 80084ce:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	78db      	ldrb	r3, [r3, #3]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d007      	beq.n	80084e8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80084d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80084da:	68ba      	ldr	r2, [r7, #8]
 80084dc:	8912      	ldrh	r2, [r2, #8]
 80084de:	fb02 f203 	mul.w	r2, r2, r3
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	611a      	str	r2, [r3, #16]
 80084e6:	e003      	b.n	80084f0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	695a      	ldr	r2, [r3, #20]
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	691b      	ldr	r3, [r3, #16]
 80084f4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80084f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80084fa:	04d9      	lsls	r1, r3, #19
 80084fc:	4b63      	ldr	r3, [pc, #396]	; (800868c <USB_HC_StartXfer+0x280>)
 80084fe:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008500:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	7a9b      	ldrb	r3, [r3, #10]
 8008506:	075b      	lsls	r3, r3, #29
 8008508:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800850c:	69f9      	ldr	r1, [r7, #28]
 800850e:	0148      	lsls	r0, r1, #5
 8008510:	6a39      	ldr	r1, [r7, #32]
 8008512:	4401      	add	r1, r0
 8008514:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008518:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800851a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800851c:	79fb      	ldrb	r3, [r7, #7]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d009      	beq.n	8008536 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	68d9      	ldr	r1, [r3, #12]
 8008526:	69fb      	ldr	r3, [r7, #28]
 8008528:	015a      	lsls	r2, r3, #5
 800852a:	6a3b      	ldr	r3, [r7, #32]
 800852c:	4413      	add	r3, r2
 800852e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008532:	460a      	mov	r2, r1
 8008534:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008536:	6a3b      	ldr	r3, [r7, #32]
 8008538:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800853c:	689b      	ldr	r3, [r3, #8]
 800853e:	f003 0301 	and.w	r3, r3, #1
 8008542:	2b00      	cmp	r3, #0
 8008544:	bf0c      	ite	eq
 8008546:	2301      	moveq	r3, #1
 8008548:	2300      	movne	r3, #0
 800854a:	b2db      	uxtb	r3, r3
 800854c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800854e:	69fb      	ldr	r3, [r7, #28]
 8008550:	015a      	lsls	r2, r3, #5
 8008552:	6a3b      	ldr	r3, [r7, #32]
 8008554:	4413      	add	r3, r2
 8008556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	69fa      	ldr	r2, [r7, #28]
 800855e:	0151      	lsls	r1, r2, #5
 8008560:	6a3a      	ldr	r2, [r7, #32]
 8008562:	440a      	add	r2, r1
 8008564:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008568:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800856c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800856e:	69fb      	ldr	r3, [r7, #28]
 8008570:	015a      	lsls	r2, r3, #5
 8008572:	6a3b      	ldr	r3, [r7, #32]
 8008574:	4413      	add	r3, r2
 8008576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800857a:	681a      	ldr	r2, [r3, #0]
 800857c:	7e7b      	ldrb	r3, [r7, #25]
 800857e:	075b      	lsls	r3, r3, #29
 8008580:	69f9      	ldr	r1, [r7, #28]
 8008582:	0148      	lsls	r0, r1, #5
 8008584:	6a39      	ldr	r1, [r7, #32]
 8008586:	4401      	add	r1, r0
 8008588:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800858c:	4313      	orrs	r3, r2
 800858e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008590:	69fb      	ldr	r3, [r7, #28]
 8008592:	015a      	lsls	r2, r3, #5
 8008594:	6a3b      	ldr	r3, [r7, #32]
 8008596:	4413      	add	r3, r2
 8008598:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80085a6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	78db      	ldrb	r3, [r3, #3]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d004      	beq.n	80085ba <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085b6:	613b      	str	r3, [r7, #16]
 80085b8:	e003      	b.n	80085c2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80085c0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80085c8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80085ca:	69fb      	ldr	r3, [r7, #28]
 80085cc:	015a      	lsls	r2, r3, #5
 80085ce:	6a3b      	ldr	r3, [r7, #32]
 80085d0:	4413      	add	r3, r2
 80085d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085d6:	461a      	mov	r2, r3
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80085dc:	79fb      	ldrb	r3, [r7, #7]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d001      	beq.n	80085e6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80085e2:	2300      	movs	r3, #0
 80085e4:	e04e      	b.n	8008684 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	78db      	ldrb	r3, [r3, #3]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d149      	bne.n	8008682 <USB_HC_StartXfer+0x276>
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	695b      	ldr	r3, [r3, #20]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d045      	beq.n	8008682 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	79db      	ldrb	r3, [r3, #7]
 80085fa:	2b03      	cmp	r3, #3
 80085fc:	d830      	bhi.n	8008660 <USB_HC_StartXfer+0x254>
 80085fe:	a201      	add	r2, pc, #4	; (adr r2, 8008604 <USB_HC_StartXfer+0x1f8>)
 8008600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008604:	08008615 	.word	0x08008615
 8008608:	08008639 	.word	0x08008639
 800860c:	08008615 	.word	0x08008615
 8008610:	08008639 	.word	0x08008639
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	695b      	ldr	r3, [r3, #20]
 8008618:	3303      	adds	r3, #3
 800861a:	089b      	lsrs	r3, r3, #2
 800861c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800861e:	8afa      	ldrh	r2, [r7, #22]
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008624:	b29b      	uxth	r3, r3
 8008626:	429a      	cmp	r2, r3
 8008628:	d91c      	bls.n	8008664 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	699b      	ldr	r3, [r3, #24]
 800862e:	f043 0220 	orr.w	r2, r3, #32
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	619a      	str	r2, [r3, #24]
        }
        break;
 8008636:	e015      	b.n	8008664 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	695b      	ldr	r3, [r3, #20]
 800863c:	3303      	adds	r3, #3
 800863e:	089b      	lsrs	r3, r3, #2
 8008640:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008642:	8afa      	ldrh	r2, [r7, #22]
 8008644:	6a3b      	ldr	r3, [r7, #32]
 8008646:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800864a:	691b      	ldr	r3, [r3, #16]
 800864c:	b29b      	uxth	r3, r3
 800864e:	429a      	cmp	r2, r3
 8008650:	d90a      	bls.n	8008668 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	699b      	ldr	r3, [r3, #24]
 8008656:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	619a      	str	r2, [r3, #24]
        }
        break;
 800865e:	e003      	b.n	8008668 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8008660:	bf00      	nop
 8008662:	e002      	b.n	800866a <USB_HC_StartXfer+0x25e>
        break;
 8008664:	bf00      	nop
 8008666:	e000      	b.n	800866a <USB_HC_StartXfer+0x25e>
        break;
 8008668:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	68d9      	ldr	r1, [r3, #12]
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	785a      	ldrb	r2, [r3, #1]
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	695b      	ldr	r3, [r3, #20]
 8008676:	b29b      	uxth	r3, r3
 8008678:	2000      	movs	r0, #0
 800867a:	9000      	str	r0, [sp, #0]
 800867c:	68f8      	ldr	r0, [r7, #12]
 800867e:	f7ff fb53 	bl	8007d28 <USB_WritePacket>
  }

  return HAL_OK;
 8008682:	2300      	movs	r3, #0
}
 8008684:	4618      	mov	r0, r3
 8008686:	3728      	adds	r7, #40	; 0x28
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}
 800868c:	1ff80000 	.word	0x1ff80000

08008690 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008690:	b480      	push	{r7}
 8008692:	b085      	sub	sp, #20
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80086a2:	695b      	ldr	r3, [r3, #20]
 80086a4:	b29b      	uxth	r3, r3
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3714      	adds	r7, #20
 80086aa:	46bd      	mov	sp, r7
 80086ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b0:	4770      	bx	lr

080086b2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80086b2:	b480      	push	{r7}
 80086b4:	b089      	sub	sp, #36	; 0x24
 80086b6:	af00      	add	r7, sp, #0
 80086b8:	6078      	str	r0, [r7, #4]
 80086ba:	460b      	mov	r3, r1
 80086bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80086c2:	78fb      	ldrb	r3, [r7, #3]
 80086c4:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80086c6:	2300      	movs	r3, #0
 80086c8:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	015a      	lsls	r2, r3, #5
 80086ce:	69bb      	ldr	r3, [r7, #24]
 80086d0:	4413      	add	r3, r2
 80086d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	0c9b      	lsrs	r3, r3, #18
 80086da:	f003 0303 	and.w	r3, r3, #3
 80086de:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	015a      	lsls	r2, r3, #5
 80086e4:	69bb      	ldr	r3, [r7, #24]
 80086e6:	4413      	add	r3, r2
 80086e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	0fdb      	lsrs	r3, r3, #31
 80086f0:	f003 0301 	and.w	r3, r3, #1
 80086f4:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	689b      	ldr	r3, [r3, #8]
 80086fa:	f003 0320 	and.w	r3, r3, #32
 80086fe:	2b20      	cmp	r3, #32
 8008700:	d104      	bne.n	800870c <USB_HC_Halt+0x5a>
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d101      	bne.n	800870c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8008708:	2300      	movs	r3, #0
 800870a:	e0e8      	b.n	80088de <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d002      	beq.n	8008718 <USB_HC_Halt+0x66>
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	2b02      	cmp	r3, #2
 8008716:	d173      	bne.n	8008800 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	015a      	lsls	r2, r3, #5
 800871c:	69bb      	ldr	r3, [r7, #24]
 800871e:	4413      	add	r3, r2
 8008720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	697a      	ldr	r2, [r7, #20]
 8008728:	0151      	lsls	r1, r2, #5
 800872a:	69ba      	ldr	r2, [r7, #24]
 800872c:	440a      	add	r2, r1
 800872e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008732:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008736:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	689b      	ldr	r3, [r3, #8]
 800873c:	f003 0320 	and.w	r3, r3, #32
 8008740:	2b00      	cmp	r3, #0
 8008742:	f040 80cb 	bne.w	80088dc <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800874a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800874e:	2b00      	cmp	r3, #0
 8008750:	d143      	bne.n	80087da <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	015a      	lsls	r2, r3, #5
 8008756:	69bb      	ldr	r3, [r7, #24]
 8008758:	4413      	add	r3, r2
 800875a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	697a      	ldr	r2, [r7, #20]
 8008762:	0151      	lsls	r1, r2, #5
 8008764:	69ba      	ldr	r2, [r7, #24]
 8008766:	440a      	add	r2, r1
 8008768:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800876c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008770:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	015a      	lsls	r2, r3, #5
 8008776:	69bb      	ldr	r3, [r7, #24]
 8008778:	4413      	add	r3, r2
 800877a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	697a      	ldr	r2, [r7, #20]
 8008782:	0151      	lsls	r1, r2, #5
 8008784:	69ba      	ldr	r2, [r7, #24]
 8008786:	440a      	add	r2, r1
 8008788:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800878c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008790:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	015a      	lsls	r2, r3, #5
 8008796:	69bb      	ldr	r3, [r7, #24]
 8008798:	4413      	add	r3, r2
 800879a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	697a      	ldr	r2, [r7, #20]
 80087a2:	0151      	lsls	r1, r2, #5
 80087a4:	69ba      	ldr	r2, [r7, #24]
 80087a6:	440a      	add	r2, r1
 80087a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80087b0:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 80087b2:	69fb      	ldr	r3, [r7, #28]
 80087b4:	3301      	adds	r3, #1
 80087b6:	61fb      	str	r3, [r7, #28]
 80087b8:	69fb      	ldr	r3, [r7, #28]
 80087ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80087be:	d81d      	bhi.n	80087fc <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	015a      	lsls	r2, r3, #5
 80087c4:	69bb      	ldr	r3, [r7, #24]
 80087c6:	4413      	add	r3, r2
 80087c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80087d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80087d6:	d0ec      	beq.n	80087b2 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80087d8:	e080      	b.n	80088dc <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	015a      	lsls	r2, r3, #5
 80087de:	69bb      	ldr	r3, [r7, #24]
 80087e0:	4413      	add	r3, r2
 80087e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	697a      	ldr	r2, [r7, #20]
 80087ea:	0151      	lsls	r1, r2, #5
 80087ec:	69ba      	ldr	r2, [r7, #24]
 80087ee:	440a      	add	r2, r1
 80087f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80087f8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80087fa:	e06f      	b.n	80088dc <USB_HC_Halt+0x22a>
            break;
 80087fc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80087fe:	e06d      	b.n	80088dc <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	015a      	lsls	r2, r3, #5
 8008804:	69bb      	ldr	r3, [r7, #24]
 8008806:	4413      	add	r3, r2
 8008808:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	697a      	ldr	r2, [r7, #20]
 8008810:	0151      	lsls	r1, r2, #5
 8008812:	69ba      	ldr	r2, [r7, #24]
 8008814:	440a      	add	r2, r1
 8008816:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800881a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800881e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008820:	69bb      	ldr	r3, [r7, #24]
 8008822:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008826:	691b      	ldr	r3, [r3, #16]
 8008828:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800882c:	2b00      	cmp	r3, #0
 800882e:	d143      	bne.n	80088b8 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	015a      	lsls	r2, r3, #5
 8008834:	69bb      	ldr	r3, [r7, #24]
 8008836:	4413      	add	r3, r2
 8008838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	697a      	ldr	r2, [r7, #20]
 8008840:	0151      	lsls	r1, r2, #5
 8008842:	69ba      	ldr	r2, [r7, #24]
 8008844:	440a      	add	r2, r1
 8008846:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800884a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800884e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	015a      	lsls	r2, r3, #5
 8008854:	69bb      	ldr	r3, [r7, #24]
 8008856:	4413      	add	r3, r2
 8008858:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	697a      	ldr	r2, [r7, #20]
 8008860:	0151      	lsls	r1, r2, #5
 8008862:	69ba      	ldr	r2, [r7, #24]
 8008864:	440a      	add	r2, r1
 8008866:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800886a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800886e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	015a      	lsls	r2, r3, #5
 8008874:	69bb      	ldr	r3, [r7, #24]
 8008876:	4413      	add	r3, r2
 8008878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	697a      	ldr	r2, [r7, #20]
 8008880:	0151      	lsls	r1, r2, #5
 8008882:	69ba      	ldr	r2, [r7, #24]
 8008884:	440a      	add	r2, r1
 8008886:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800888a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800888e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008890:	69fb      	ldr	r3, [r7, #28]
 8008892:	3301      	adds	r3, #1
 8008894:	61fb      	str	r3, [r7, #28]
 8008896:	69fb      	ldr	r3, [r7, #28]
 8008898:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800889c:	d81d      	bhi.n	80088da <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	015a      	lsls	r2, r3, #5
 80088a2:	69bb      	ldr	r3, [r7, #24]
 80088a4:	4413      	add	r3, r2
 80088a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80088b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088b4:	d0ec      	beq.n	8008890 <USB_HC_Halt+0x1de>
 80088b6:	e011      	b.n	80088dc <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	015a      	lsls	r2, r3, #5
 80088bc:	69bb      	ldr	r3, [r7, #24]
 80088be:	4413      	add	r3, r2
 80088c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	697a      	ldr	r2, [r7, #20]
 80088c8:	0151      	lsls	r1, r2, #5
 80088ca:	69ba      	ldr	r2, [r7, #24]
 80088cc:	440a      	add	r2, r1
 80088ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80088d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80088d6:	6013      	str	r3, [r2, #0]
 80088d8:	e000      	b.n	80088dc <USB_HC_Halt+0x22a>
          break;
 80088da:	bf00      	nop
    }
  }

  return HAL_OK;
 80088dc:	2300      	movs	r3, #0
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3724      	adds	r7, #36	; 0x24
 80088e2:	46bd      	mov	sp, r7
 80088e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e8:	4770      	bx	lr
	...

080088ec <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b087      	sub	sp, #28
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	460b      	mov	r3, r1
 80088f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80088fc:	78fb      	ldrb	r3, [r7, #3]
 80088fe:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008900:	2301      	movs	r3, #1
 8008902:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	04da      	lsls	r2, r3, #19
 8008908:	4b15      	ldr	r3, [pc, #84]	; (8008960 <USB_DoPing+0x74>)
 800890a:	4013      	ands	r3, r2
 800890c:	693a      	ldr	r2, [r7, #16]
 800890e:	0151      	lsls	r1, r2, #5
 8008910:	697a      	ldr	r2, [r7, #20]
 8008912:	440a      	add	r2, r1
 8008914:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008918:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800891c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	015a      	lsls	r2, r3, #5
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	4413      	add	r3, r2
 8008926:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008934:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800893c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	015a      	lsls	r2, r3, #5
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	4413      	add	r3, r2
 8008946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800894a:	461a      	mov	r2, r3
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008950:	2300      	movs	r3, #0
}
 8008952:	4618      	mov	r0, r3
 8008954:	371c      	adds	r7, #28
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr
 800895e:	bf00      	nop
 8008960:	1ff80000 	.word	0x1ff80000

08008964 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b086      	sub	sp, #24
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8008970:	2300      	movs	r3, #0
 8008972:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f7ff f935 	bl	8007be4 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800897a:	2110      	movs	r1, #16
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f7ff f98f 	bl	8007ca0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f7ff f9b0 	bl	8007ce8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008988:	2300      	movs	r3, #0
 800898a:	613b      	str	r3, [r7, #16]
 800898c:	e01f      	b.n	80089ce <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	015a      	lsls	r2, r3, #5
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	4413      	add	r3, r2
 8008996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80089a4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80089ac:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80089b4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	015a      	lsls	r2, r3, #5
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	4413      	add	r3, r2
 80089be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089c2:	461a      	mov	r2, r3
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	3301      	adds	r3, #1
 80089cc:	613b      	str	r3, [r7, #16]
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	2b0f      	cmp	r3, #15
 80089d2:	d9dc      	bls.n	800898e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80089d4:	2300      	movs	r3, #0
 80089d6:	613b      	str	r3, [r7, #16]
 80089d8:	e034      	b.n	8008a44 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	015a      	lsls	r2, r3, #5
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	4413      	add	r3, r2
 80089e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80089f0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089f8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008a00:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	015a      	lsls	r2, r3, #5
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	4413      	add	r3, r2
 8008a0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a0e:	461a      	mov	r2, r3
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	3301      	adds	r3, #1
 8008a18:	617b      	str	r3, [r7, #20]
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a20:	d80c      	bhi.n	8008a3c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	015a      	lsls	r2, r3, #5
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	4413      	add	r3, r2
 8008a2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a38:	d0ec      	beq.n	8008a14 <USB_StopHost+0xb0>
 8008a3a:	e000      	b.n	8008a3e <USB_StopHost+0xda>
        break;
 8008a3c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	3301      	adds	r3, #1
 8008a42:	613b      	str	r3, [r7, #16]
 8008a44:	693b      	ldr	r3, [r7, #16]
 8008a46:	2b0f      	cmp	r3, #15
 8008a48:	d9c7      	bls.n	80089da <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a50:	461a      	mov	r2, r3
 8008a52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a56:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a5e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f7ff f8ae 	bl	8007bc2 <USB_EnableGlobalInt>

  return HAL_OK;
 8008a66:	2300      	movs	r3, #0
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	3718      	adds	r7, #24
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}

08008a70 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8008a74:	4904      	ldr	r1, [pc, #16]	; (8008a88 <MX_FATFS_Init+0x18>)
 8008a76:	4805      	ldr	r0, [pc, #20]	; (8008a8c <MX_FATFS_Init+0x1c>)
 8008a78:	f003 f84c 	bl	800bb14 <FATFS_LinkDriver>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	461a      	mov	r2, r3
 8008a80:	4b03      	ldr	r3, [pc, #12]	; (8008a90 <MX_FATFS_Init+0x20>)
 8008a82:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008a84:	bf00      	nop
 8008a86:	bd80      	pop	{r7, pc}
 8008a88:	20002f34 	.word	0x20002f34
 8008a8c:	0800c73c 	.word	0x0800c73c
 8008a90:	20004f9c 	.word	0x20004f9c

08008a94 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b083      	sub	sp, #12
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8008a9e:	2300      	movs	r3, #0
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	370c      	adds	r7, #12
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr

08008aac <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b084      	sub	sp, #16
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8008aba:	79fb      	ldrb	r3, [r7, #7]
 8008abc:	4619      	mov	r1, r3
 8008abe:	4808      	ldr	r0, [pc, #32]	; (8008ae0 <USBH_status+0x34>)
 8008ac0:	f000 fe1a 	bl	80096f8 <USBH_MSC_UnitIsReady>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d002      	beq.n	8008ad0 <USBH_status+0x24>
  {
    res = RES_OK;
 8008aca:	2300      	movs	r3, #0
 8008acc:	73fb      	strb	r3, [r7, #15]
 8008ace:	e001      	b.n	8008ad4 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8008ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3710      	adds	r7, #16
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}
 8008ade:	bf00      	nop
 8008ae0:	20004fa0 	.word	0x20004fa0

08008ae4 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b094      	sub	sp, #80	; 0x50
 8008ae8:	af02      	add	r7, sp, #8
 8008aea:	60b9      	str	r1, [r7, #8]
 8008aec:	607a      	str	r2, [r7, #4]
 8008aee:	603b      	str	r3, [r7, #0]
 8008af0:	4603      	mov	r3, r0
 8008af2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008af4:	2301      	movs	r3, #1
 8008af6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8008afa:	7bf9      	ldrb	r1, [r7, #15]
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	9300      	str	r3, [sp, #0]
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	687a      	ldr	r2, [r7, #4]
 8008b04:	4813      	ldr	r0, [pc, #76]	; (8008b54 <USBH_read+0x70>)
 8008b06:	f000 fe41 	bl	800978c <USBH_MSC_Read>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d103      	bne.n	8008b18 <USBH_read+0x34>
  {
    res = RES_OK;
 8008b10:	2300      	movs	r3, #0
 8008b12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008b16:	e017      	b.n	8008b48 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8008b18:	f107 0210 	add.w	r2, r7, #16
 8008b1c:	7bfb      	ldrb	r3, [r7, #15]
 8008b1e:	4619      	mov	r1, r3
 8008b20:	480c      	ldr	r0, [pc, #48]	; (8008b54 <USBH_read+0x70>)
 8008b22:	f000 fe0f 	bl	8009744 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8008b26:	7f7b      	ldrb	r3, [r7, #29]
 8008b28:	2b3a      	cmp	r3, #58	; 0x3a
 8008b2a:	d005      	beq.n	8008b38 <USBH_read+0x54>
 8008b2c:	2b3a      	cmp	r3, #58	; 0x3a
 8008b2e:	dc07      	bgt.n	8008b40 <USBH_read+0x5c>
 8008b30:	2b04      	cmp	r3, #4
 8008b32:	d001      	beq.n	8008b38 <USBH_read+0x54>
 8008b34:	2b28      	cmp	r3, #40	; 0x28
 8008b36:	d103      	bne.n	8008b40 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8008b38:	2303      	movs	r3, #3
 8008b3a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008b3e:	e003      	b.n	8008b48 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 8008b40:	2301      	movs	r3, #1
 8008b42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008b46:	bf00      	nop
    }
  }

  return res;
 8008b48:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3748      	adds	r7, #72	; 0x48
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}
 8008b54:	20004fa0 	.word	0x20004fa0

08008b58 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b094      	sub	sp, #80	; 0x50
 8008b5c:	af02      	add	r7, sp, #8
 8008b5e:	60b9      	str	r1, [r7, #8]
 8008b60:	607a      	str	r2, [r7, #4]
 8008b62:	603b      	str	r3, [r7, #0]
 8008b64:	4603      	mov	r3, r0
 8008b66:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008b68:	2301      	movs	r3, #1
 8008b6a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8008b6e:	7bf9      	ldrb	r1, [r7, #15]
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	9300      	str	r3, [sp, #0]
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	687a      	ldr	r2, [r7, #4]
 8008b78:	4817      	ldr	r0, [pc, #92]	; (8008bd8 <USBH_write+0x80>)
 8008b7a:	f000 fe70 	bl	800985e <USBH_MSC_Write>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d103      	bne.n	8008b8c <USBH_write+0x34>
  {
    res = RES_OK;
 8008b84:	2300      	movs	r3, #0
 8008b86:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008b8a:	e01f      	b.n	8008bcc <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8008b8c:	f107 0210 	add.w	r2, r7, #16
 8008b90:	7bfb      	ldrb	r3, [r7, #15]
 8008b92:	4619      	mov	r1, r3
 8008b94:	4810      	ldr	r0, [pc, #64]	; (8008bd8 <USBH_write+0x80>)
 8008b96:	f000 fdd5 	bl	8009744 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8008b9a:	7f7b      	ldrb	r3, [r7, #29]
 8008b9c:	2b3a      	cmp	r3, #58	; 0x3a
 8008b9e:	d00d      	beq.n	8008bbc <USBH_write+0x64>
 8008ba0:	2b3a      	cmp	r3, #58	; 0x3a
 8008ba2:	dc0f      	bgt.n	8008bc4 <USBH_write+0x6c>
 8008ba4:	2b28      	cmp	r3, #40	; 0x28
 8008ba6:	d009      	beq.n	8008bbc <USBH_write+0x64>
 8008ba8:	2b28      	cmp	r3, #40	; 0x28
 8008baa:	dc0b      	bgt.n	8008bc4 <USBH_write+0x6c>
 8008bac:	2b04      	cmp	r3, #4
 8008bae:	d005      	beq.n	8008bbc <USBH_write+0x64>
 8008bb0:	2b27      	cmp	r3, #39	; 0x27
 8008bb2:	d107      	bne.n	8008bc4 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8008bb4:	2302      	movs	r3, #2
 8008bb6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008bba:	e007      	b.n	8008bcc <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8008bbc:	2303      	movs	r3, #3
 8008bbe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008bc2:	e003      	b.n	8008bcc <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008bca:	bf00      	nop
    }
  }

  return res;
 8008bcc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3748      	adds	r7, #72	; 0x48
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}
 8008bd8:	20004fa0 	.word	0x20004fa0

08008bdc <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b090      	sub	sp, #64	; 0x40
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	4603      	mov	r3, r0
 8008be4:	603a      	str	r2, [r7, #0]
 8008be6:	71fb      	strb	r3, [r7, #7]
 8008be8:	460b      	mov	r3, r1
 8008bea:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008bec:	2301      	movs	r3, #1
 8008bee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8008bf2:	79bb      	ldrb	r3, [r7, #6]
 8008bf4:	2b03      	cmp	r3, #3
 8008bf6:	d852      	bhi.n	8008c9e <USBH_ioctl+0xc2>
 8008bf8:	a201      	add	r2, pc, #4	; (adr r2, 8008c00 <USBH_ioctl+0x24>)
 8008bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bfe:	bf00      	nop
 8008c00:	08008c11 	.word	0x08008c11
 8008c04:	08008c19 	.word	0x08008c19
 8008c08:	08008c43 	.word	0x08008c43
 8008c0c:	08008c6f 	.word	0x08008c6f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8008c10:	2300      	movs	r3, #0
 8008c12:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008c16:	e045      	b.n	8008ca4 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008c18:	f107 0208 	add.w	r2, r7, #8
 8008c1c:	79fb      	ldrb	r3, [r7, #7]
 8008c1e:	4619      	mov	r1, r3
 8008c20:	4823      	ldr	r0, [pc, #140]	; (8008cb0 <USBH_ioctl+0xd4>)
 8008c22:	f000 fd8f 	bl	8009744 <USBH_MSC_GetLUNInfo>
 8008c26:	4603      	mov	r3, r0
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d106      	bne.n	8008c3a <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8008c2c:	68fa      	ldr	r2, [r7, #12]
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008c32:	2300      	movs	r3, #0
 8008c34:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008c38:	e034      	b.n	8008ca4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008c40:	e030      	b.n	8008ca4 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008c42:	f107 0208 	add.w	r2, r7, #8
 8008c46:	79fb      	ldrb	r3, [r7, #7]
 8008c48:	4619      	mov	r1, r3
 8008c4a:	4819      	ldr	r0, [pc, #100]	; (8008cb0 <USBH_ioctl+0xd4>)
 8008c4c:	f000 fd7a 	bl	8009744 <USBH_MSC_GetLUNInfo>
 8008c50:	4603      	mov	r3, r0
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d107      	bne.n	8008c66 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8008c56:	8a3b      	ldrh	r3, [r7, #16]
 8008c58:	461a      	mov	r2, r3
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008c64:	e01e      	b.n	8008ca4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008c66:	2301      	movs	r3, #1
 8008c68:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008c6c:	e01a      	b.n	8008ca4 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008c6e:	f107 0208 	add.w	r2, r7, #8
 8008c72:	79fb      	ldrb	r3, [r7, #7]
 8008c74:	4619      	mov	r1, r3
 8008c76:	480e      	ldr	r0, [pc, #56]	; (8008cb0 <USBH_ioctl+0xd4>)
 8008c78:	f000 fd64 	bl	8009744 <USBH_MSC_GetLUNInfo>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d109      	bne.n	8008c96 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8008c82:	8a3b      	ldrh	r3, [r7, #16]
 8008c84:	0a5b      	lsrs	r3, r3, #9
 8008c86:	b29b      	uxth	r3, r3
 8008c88:	461a      	mov	r2, r3
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008c94:	e006      	b.n	8008ca4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008c96:	2301      	movs	r3, #1
 8008c98:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008c9c:	e002      	b.n	8008ca4 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8008c9e:	2304      	movs	r3, #4
 8008ca0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8008ca4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3740      	adds	r7, #64	; 0x40
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}
 8008cb0:	20004fa0 	.word	0x20004fa0

08008cb4 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008cb4:	b590      	push	{r4, r7, lr}
 8008cb6:	b089      	sub	sp, #36	; 0x24
 8008cb8:	af04      	add	r7, sp, #16
 8008cba:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008cc2:	7919      	ldrb	r1, [r3, #4]
 8008cc4:	2350      	movs	r3, #80	; 0x50
 8008cc6:	2206      	movs	r2, #6
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f001 fc53 	bl	800a574 <USBH_FindInterface>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8008cd2:	7bfb      	ldrb	r3, [r7, #15]
 8008cd4:	2bff      	cmp	r3, #255	; 0xff
 8008cd6:	d002      	beq.n	8008cde <USBH_MSC_InterfaceInit+0x2a>
 8008cd8:	7bfb      	ldrb	r3, [r7, #15]
 8008cda:	2b01      	cmp	r3, #1
 8008cdc:	d901      	bls.n	8008ce2 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008cde:	2302      	movs	r3, #2
 8008ce0:	e0ef      	b.n	8008ec2 <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 8008ce2:	7bfb      	ldrb	r3, [r7, #15]
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f001 fc28 	bl	800a53c <USBH_SelectInterface>
 8008cec:	4603      	mov	r3, r0
 8008cee:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008cf0:	7bbb      	ldrb	r3, [r7, #14]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d001      	beq.n	8008cfa <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8008cf6:	2302      	movs	r3, #2
 8008cf8:	e0e3      	b.n	8008ec2 <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008d00:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008d04:	f003 fa78 	bl	800c1f8 <malloc>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d12:	69db      	ldr	r3, [r3, #28]
 8008d14:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d101      	bne.n	8008d20 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8008d1c:	2302      	movs	r3, #2
 8008d1e:	e0d0      	b.n	8008ec2 <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8008d20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008d24:	2100      	movs	r1, #0
 8008d26:	68b8      	ldr	r0, [r7, #8]
 8008d28:	f003 fa84 	bl	800c234 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008d2c:	7bfb      	ldrb	r3, [r7, #15]
 8008d2e:	687a      	ldr	r2, [r7, #4]
 8008d30:	211a      	movs	r1, #26
 8008d32:	fb01 f303 	mul.w	r3, r1, r3
 8008d36:	4413      	add	r3, r2
 8008d38:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008d3c:	781b      	ldrb	r3, [r3, #0]
 8008d3e:	b25b      	sxtb	r3, r3
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	da16      	bge.n	8008d72 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008d44:	7bfb      	ldrb	r3, [r7, #15]
 8008d46:	687a      	ldr	r2, [r7, #4]
 8008d48:	211a      	movs	r1, #26
 8008d4a:	fb01 f303 	mul.w	r3, r1, r3
 8008d4e:	4413      	add	r3, r2
 8008d50:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008d54:	781a      	ldrb	r2, [r3, #0]
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008d5a:	7bfb      	ldrb	r3, [r7, #15]
 8008d5c:	687a      	ldr	r2, [r7, #4]
 8008d5e:	211a      	movs	r1, #26
 8008d60:	fb01 f303 	mul.w	r3, r1, r3
 8008d64:	4413      	add	r3, r2
 8008d66:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008d6a:	881a      	ldrh	r2, [r3, #0]
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	815a      	strh	r2, [r3, #10]
 8008d70:	e015      	b.n	8008d9e <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008d72:	7bfb      	ldrb	r3, [r7, #15]
 8008d74:	687a      	ldr	r2, [r7, #4]
 8008d76:	211a      	movs	r1, #26
 8008d78:	fb01 f303 	mul.w	r3, r1, r3
 8008d7c:	4413      	add	r3, r2
 8008d7e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008d82:	781a      	ldrb	r2, [r3, #0]
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008d88:	7bfb      	ldrb	r3, [r7, #15]
 8008d8a:	687a      	ldr	r2, [r7, #4]
 8008d8c:	211a      	movs	r1, #26
 8008d8e:	fb01 f303 	mul.w	r3, r1, r3
 8008d92:	4413      	add	r3, r2
 8008d94:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008d98:	881a      	ldrh	r2, [r3, #0]
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8008d9e:	7bfb      	ldrb	r3, [r7, #15]
 8008da0:	687a      	ldr	r2, [r7, #4]
 8008da2:	211a      	movs	r1, #26
 8008da4:	fb01 f303 	mul.w	r3, r1, r3
 8008da8:	4413      	add	r3, r2
 8008daa:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	b25b      	sxtb	r3, r3
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	da16      	bge.n	8008de4 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008db6:	7bfb      	ldrb	r3, [r7, #15]
 8008db8:	687a      	ldr	r2, [r7, #4]
 8008dba:	211a      	movs	r1, #26
 8008dbc:	fb01 f303 	mul.w	r3, r1, r3
 8008dc0:	4413      	add	r3, r2
 8008dc2:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008dc6:	781a      	ldrb	r2, [r3, #0]
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008dcc:	7bfb      	ldrb	r3, [r7, #15]
 8008dce:	687a      	ldr	r2, [r7, #4]
 8008dd0:	211a      	movs	r1, #26
 8008dd2:	fb01 f303 	mul.w	r3, r1, r3
 8008dd6:	4413      	add	r3, r2
 8008dd8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008ddc:	881a      	ldrh	r2, [r3, #0]
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	815a      	strh	r2, [r3, #10]
 8008de2:	e015      	b.n	8008e10 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008de4:	7bfb      	ldrb	r3, [r7, #15]
 8008de6:	687a      	ldr	r2, [r7, #4]
 8008de8:	211a      	movs	r1, #26
 8008dea:	fb01 f303 	mul.w	r3, r1, r3
 8008dee:	4413      	add	r3, r2
 8008df0:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008df4:	781a      	ldrb	r2, [r3, #0]
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008dfa:	7bfb      	ldrb	r3, [r7, #15]
 8008dfc:	687a      	ldr	r2, [r7, #4]
 8008dfe:	211a      	movs	r1, #26
 8008e00:	fb01 f303 	mul.w	r3, r1, r3
 8008e04:	4413      	add	r3, r2
 8008e06:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008e0a:	881a      	ldrh	r2, [r3, #0]
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	2200      	movs	r2, #0
 8008e14:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	799b      	ldrb	r3, [r3, #6]
 8008e26:	4619      	mov	r1, r3
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f002 fdc4 	bl	800b9b6 <USBH_AllocPipe>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	461a      	mov	r2, r3
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	79db      	ldrb	r3, [r3, #7]
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f002 fdba 	bl	800b9b6 <USBH_AllocPipe>
 8008e42:	4603      	mov	r3, r0
 8008e44:	461a      	mov	r2, r3
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f000 fdac 	bl	80099a8 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	7959      	ldrb	r1, [r3, #5]
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	7998      	ldrb	r0, [r3, #6]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008e64:	68ba      	ldr	r2, [r7, #8]
 8008e66:	8912      	ldrh	r2, [r2, #8]
 8008e68:	9202      	str	r2, [sp, #8]
 8008e6a:	2202      	movs	r2, #2
 8008e6c:	9201      	str	r2, [sp, #4]
 8008e6e:	9300      	str	r3, [sp, #0]
 8008e70:	4623      	mov	r3, r4
 8008e72:	4602      	mov	r2, r0
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f002 fd6f 	bl	800b958 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	7919      	ldrb	r1, [r3, #4]
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	79d8      	ldrb	r0, [r3, #7]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008e8e:	68ba      	ldr	r2, [r7, #8]
 8008e90:	8952      	ldrh	r2, [r2, #10]
 8008e92:	9202      	str	r2, [sp, #8]
 8008e94:	2202      	movs	r2, #2
 8008e96:	9201      	str	r2, [sp, #4]
 8008e98:	9300      	str	r3, [sp, #0]
 8008e9a:	4623      	mov	r3, r4
 8008e9c:	4602      	mov	r2, r0
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f002 fd5a 	bl	800b958 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	791b      	ldrb	r3, [r3, #4]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	4619      	mov	r1, r3
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f003 f8c5 	bl	800c03c <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	795b      	ldrb	r3, [r3, #5]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	4619      	mov	r1, r3
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f003 f8be 	bl	800c03c <USBH_LL_SetToggle>

  return USBH_OK;
 8008ec0:	2300      	movs	r3, #0
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3714      	adds	r7, #20
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd90      	pop	{r4, r7, pc}

08008eca <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008eca:	b580      	push	{r7, lr}
 8008ecc:	b084      	sub	sp, #16
 8008ece:	af00      	add	r7, sp, #0
 8008ed0:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ed8:	69db      	ldr	r3, [r3, #28]
 8008eda:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	795b      	ldrb	r3, [r3, #5]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d00e      	beq.n	8008f02 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	795b      	ldrb	r3, [r3, #5]
 8008ee8:	4619      	mov	r1, r3
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f002 fd53 	bl	800b996 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	795b      	ldrb	r3, [r3, #5]
 8008ef4:	4619      	mov	r1, r3
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f002 fd7e 	bl	800b9f8 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2200      	movs	r2, #0
 8008f00:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	791b      	ldrb	r3, [r3, #4]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d00e      	beq.n	8008f28 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	791b      	ldrb	r3, [r3, #4]
 8008f0e:	4619      	mov	r1, r3
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f002 fd40 	bl	800b996 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	791b      	ldrb	r3, [r3, #4]
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f002 fd6b 	bl	800b9f8 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2200      	movs	r2, #0
 8008f26:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f2e:	69db      	ldr	r3, [r3, #28]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d00b      	beq.n	8008f4c <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f3a:	69db      	ldr	r3, [r3, #28]
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f003 f963 	bl	800c208 <free>
    phost->pActiveClass->pData = 0U;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f48:	2200      	movs	r2, #0
 8008f4a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008f4c:	2300      	movs	r3, #0
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3710      	adds	r7, #16
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}

08008f56 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008f56:	b580      	push	{r7, lr}
 8008f58:	b084      	sub	sp, #16
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f64:	69db      	ldr	r3, [r3, #28]
 8008f66:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	7b9b      	ldrb	r3, [r3, #14]
 8008f70:	2b03      	cmp	r3, #3
 8008f72:	d041      	beq.n	8008ff8 <USBH_MSC_ClassRequest+0xa2>
 8008f74:	2b03      	cmp	r3, #3
 8008f76:	dc4b      	bgt.n	8009010 <USBH_MSC_ClassRequest+0xba>
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d001      	beq.n	8008f80 <USBH_MSC_ClassRequest+0x2a>
 8008f7c:	2b02      	cmp	r3, #2
 8008f7e:	d147      	bne.n	8009010 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	4619      	mov	r1, r3
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f000 fcf0 	bl	800996a <USBH_MSC_BOT_REQ_GetMaxLUN>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8008f8e:	7bfb      	ldrb	r3, [r7, #15]
 8008f90:	2b03      	cmp	r3, #3
 8008f92:	d104      	bne.n	8008f9e <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	2200      	movs	r2, #0
 8008f98:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8008f9e:	7bfb      	ldrb	r3, [r7, #15]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d137      	bne.n	8009014 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	781b      	ldrb	r3, [r3, #0]
 8008fa8:	2b02      	cmp	r3, #2
 8008faa:	d804      	bhi.n	8008fb6 <USBH_MSC_ClassRequest+0x60>
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	781b      	ldrb	r3, [r3, #0]
 8008fb0:	3301      	adds	r3, #1
 8008fb2:	b2da      	uxtb	r2, r3
 8008fb4:	e000      	b.n	8008fb8 <USBH_MSC_ClassRequest+0x62>
 8008fb6:	2202      	movs	r2, #2
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	73bb      	strb	r3, [r7, #14]
 8008fc0:	e014      	b.n	8008fec <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8008fc2:	7bbb      	ldrb	r3, [r7, #14]
 8008fc4:	68ba      	ldr	r2, [r7, #8]
 8008fc6:	2134      	movs	r1, #52	; 0x34
 8008fc8:	fb01 f303 	mul.w	r3, r1, r3
 8008fcc:	4413      	add	r3, r2
 8008fce:	3392      	adds	r3, #146	; 0x92
 8008fd0:	2202      	movs	r2, #2
 8008fd2:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8008fd4:	7bbb      	ldrb	r3, [r7, #14]
 8008fd6:	68ba      	ldr	r2, [r7, #8]
 8008fd8:	2134      	movs	r1, #52	; 0x34
 8008fda:	fb01 f303 	mul.w	r3, r1, r3
 8008fde:	4413      	add	r3, r2
 8008fe0:	33c1      	adds	r3, #193	; 0xc1
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8008fe6:	7bbb      	ldrb	r3, [r7, #14]
 8008fe8:	3301      	adds	r3, #1
 8008fea:	73bb      	strb	r3, [r7, #14]
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	781b      	ldrb	r3, [r3, #0]
 8008ff0:	7bba      	ldrb	r2, [r7, #14]
 8008ff2:	429a      	cmp	r2, r3
 8008ff4:	d3e5      	bcc.n	8008fc2 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8008ff6:	e00d      	b.n	8009014 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8008ff8:	2100      	movs	r1, #0
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f002 f87b 	bl	800b0f6 <USBH_ClrFeature>
 8009000:	4603      	mov	r3, r0
 8009002:	2b00      	cmp	r3, #0
 8009004:	d108      	bne.n	8009018 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	7bda      	ldrb	r2, [r3, #15]
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	739a      	strb	r2, [r3, #14]
      }
      break;
 800900e:	e003      	b.n	8009018 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 8009010:	bf00      	nop
 8009012:	e002      	b.n	800901a <USBH_MSC_ClassRequest+0xc4>
      break;
 8009014:	bf00      	nop
 8009016:	e000      	b.n	800901a <USBH_MSC_ClassRequest+0xc4>
      break;
 8009018:	bf00      	nop
  }

  return status;
 800901a:	7bfb      	ldrb	r3, [r7, #15]
}
 800901c:	4618      	mov	r0, r3
 800901e:	3710      	adds	r7, #16
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}

08009024 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b086      	sub	sp, #24
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009032:	69db      	ldr	r3, [r3, #28]
 8009034:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8009036:	2301      	movs	r3, #1
 8009038:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800903a:	2301      	movs	r3, #1
 800903c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800903e:	2301      	movs	r3, #1
 8009040:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	7b1b      	ldrb	r3, [r3, #12]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d003      	beq.n	8009052 <USBH_MSC_Process+0x2e>
 800904a:	2b01      	cmp	r3, #1
 800904c:	f000 8271 	beq.w	8009532 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8009050:	e272      	b.n	8009538 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	781b      	ldrb	r3, [r3, #0]
 800905c:	b29b      	uxth	r3, r3
 800905e:	429a      	cmp	r2, r3
 8009060:	f080 824f 	bcs.w	8009502 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800906a:	4619      	mov	r1, r3
 800906c:	693a      	ldr	r2, [r7, #16]
 800906e:	2334      	movs	r3, #52	; 0x34
 8009070:	fb03 f301 	mul.w	r3, r3, r1
 8009074:	4413      	add	r3, r2
 8009076:	3391      	adds	r3, #145	; 0x91
 8009078:	2201      	movs	r2, #1
 800907a:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009082:	4619      	mov	r1, r3
 8009084:	693a      	ldr	r2, [r7, #16]
 8009086:	2334      	movs	r3, #52	; 0x34
 8009088:	fb03 f301 	mul.w	r3, r3, r1
 800908c:	4413      	add	r3, r2
 800908e:	3390      	adds	r3, #144	; 0x90
 8009090:	781b      	ldrb	r3, [r3, #0]
 8009092:	2b08      	cmp	r3, #8
 8009094:	f200 8243 	bhi.w	800951e <USBH_MSC_Process+0x4fa>
 8009098:	a201      	add	r2, pc, #4	; (adr r2, 80090a0 <USBH_MSC_Process+0x7c>)
 800909a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800909e:	bf00      	nop
 80090a0:	080090c5 	.word	0x080090c5
 80090a4:	0800951f 	.word	0x0800951f
 80090a8:	0800918d 	.word	0x0800918d
 80090ac:	08009311 	.word	0x08009311
 80090b0:	080090eb 	.word	0x080090eb
 80090b4:	080093dd 	.word	0x080093dd
 80090b8:	0800951f 	.word	0x0800951f
 80090bc:	0800951f 	.word	0x0800951f
 80090c0:	080094f1 	.word	0x080094f1
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090ca:	4619      	mov	r1, r3
 80090cc:	693a      	ldr	r2, [r7, #16]
 80090ce:	2334      	movs	r3, #52	; 0x34
 80090d0:	fb03 f301 	mul.w	r3, r3, r1
 80090d4:	4413      	add	r3, r2
 80090d6:	3390      	adds	r3, #144	; 0x90
 80090d8:	2204      	movs	r2, #4
 80090da:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 80090e8:	e222      	b.n	8009530 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090f0:	b2d9      	uxtb	r1, r3
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090f8:	461a      	mov	r2, r3
 80090fa:	2334      	movs	r3, #52	; 0x34
 80090fc:	fb03 f302 	mul.w	r3, r3, r2
 8009100:	3398      	adds	r3, #152	; 0x98
 8009102:	693a      	ldr	r2, [r7, #16]
 8009104:	4413      	add	r3, r2
 8009106:	3307      	adds	r3, #7
 8009108:	461a      	mov	r2, r3
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f000 ff6a 	bl	8009fe4 <USBH_MSC_SCSI_Inquiry>
 8009110:	4603      	mov	r3, r0
 8009112:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009114:	7bfb      	ldrb	r3, [r7, #15]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d10b      	bne.n	8009132 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009120:	4619      	mov	r1, r3
 8009122:	693a      	ldr	r2, [r7, #16]
 8009124:	2334      	movs	r3, #52	; 0x34
 8009126:	fb03 f301 	mul.w	r3, r3, r1
 800912a:	4413      	add	r3, r2
 800912c:	3390      	adds	r3, #144	; 0x90
 800912e:	2202      	movs	r2, #2
 8009130:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8009132:	7bfb      	ldrb	r3, [r7, #15]
 8009134:	2b02      	cmp	r3, #2
 8009136:	d10c      	bne.n	8009152 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800913e:	4619      	mov	r1, r3
 8009140:	693a      	ldr	r2, [r7, #16]
 8009142:	2334      	movs	r3, #52	; 0x34
 8009144:	fb03 f301 	mul.w	r3, r3, r1
 8009148:	4413      	add	r3, r2
 800914a:	3390      	adds	r3, #144	; 0x90
 800914c:	2205      	movs	r2, #5
 800914e:	701a      	strb	r2, [r3, #0]
            break;
 8009150:	e1e7      	b.n	8009522 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009152:	7bfb      	ldrb	r3, [r7, #15]
 8009154:	2b04      	cmp	r3, #4
 8009156:	f040 81e4 	bne.w	8009522 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009160:	4619      	mov	r1, r3
 8009162:	693a      	ldr	r2, [r7, #16]
 8009164:	2334      	movs	r3, #52	; 0x34
 8009166:	fb03 f301 	mul.w	r3, r3, r1
 800916a:	4413      	add	r3, r2
 800916c:	3390      	adds	r3, #144	; 0x90
 800916e:	2201      	movs	r2, #1
 8009170:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009172:	693b      	ldr	r3, [r7, #16]
 8009174:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009178:	4619      	mov	r1, r3
 800917a:	693a      	ldr	r2, [r7, #16]
 800917c:	2334      	movs	r3, #52	; 0x34
 800917e:	fb03 f301 	mul.w	r3, r3, r1
 8009182:	4413      	add	r3, r2
 8009184:	3391      	adds	r3, #145	; 0x91
 8009186:	2202      	movs	r2, #2
 8009188:	701a      	strb	r2, [r3, #0]
            break;
 800918a:	e1ca      	b.n	8009522 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009192:	b2db      	uxtb	r3, r3
 8009194:	4619      	mov	r1, r3
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f000 fe66 	bl	8009e68 <USBH_MSC_SCSI_TestUnitReady>
 800919c:	4603      	mov	r3, r0
 800919e:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 80091a0:	7bbb      	ldrb	r3, [r7, #14]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d149      	bne.n	800923a <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091ac:	4619      	mov	r1, r3
 80091ae:	693a      	ldr	r2, [r7, #16]
 80091b0:	2334      	movs	r3, #52	; 0x34
 80091b2:	fb03 f301 	mul.w	r3, r3, r1
 80091b6:	4413      	add	r3, r2
 80091b8:	3392      	adds	r3, #146	; 0x92
 80091ba:	781b      	ldrb	r3, [r3, #0]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d00c      	beq.n	80091da <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091c6:	4619      	mov	r1, r3
 80091c8:	693a      	ldr	r2, [r7, #16]
 80091ca:	2334      	movs	r3, #52	; 0x34
 80091cc:	fb03 f301 	mul.w	r3, r3, r1
 80091d0:	4413      	add	r3, r2
 80091d2:	33c1      	adds	r3, #193	; 0xc1
 80091d4:	2201      	movs	r2, #1
 80091d6:	701a      	strb	r2, [r3, #0]
 80091d8:	e00b      	b.n	80091f2 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091e0:	4619      	mov	r1, r3
 80091e2:	693a      	ldr	r2, [r7, #16]
 80091e4:	2334      	movs	r3, #52	; 0x34
 80091e6:	fb03 f301 	mul.w	r3, r3, r1
 80091ea:	4413      	add	r3, r2
 80091ec:	33c1      	adds	r3, #193	; 0xc1
 80091ee:	2200      	movs	r2, #0
 80091f0:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091f8:	4619      	mov	r1, r3
 80091fa:	693a      	ldr	r2, [r7, #16]
 80091fc:	2334      	movs	r3, #52	; 0x34
 80091fe:	fb03 f301 	mul.w	r3, r3, r1
 8009202:	4413      	add	r3, r2
 8009204:	3390      	adds	r3, #144	; 0x90
 8009206:	2203      	movs	r2, #3
 8009208:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800920a:	693b      	ldr	r3, [r7, #16]
 800920c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009210:	4619      	mov	r1, r3
 8009212:	693a      	ldr	r2, [r7, #16]
 8009214:	2334      	movs	r3, #52	; 0x34
 8009216:	fb03 f301 	mul.w	r3, r3, r1
 800921a:	4413      	add	r3, r2
 800921c:	3391      	adds	r3, #145	; 0x91
 800921e:	2200      	movs	r2, #0
 8009220:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8009222:	693b      	ldr	r3, [r7, #16]
 8009224:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009228:	4619      	mov	r1, r3
 800922a:	693a      	ldr	r2, [r7, #16]
 800922c:	2334      	movs	r3, #52	; 0x34
 800922e:	fb03 f301 	mul.w	r3, r3, r1
 8009232:	4413      	add	r3, r2
 8009234:	3392      	adds	r3, #146	; 0x92
 8009236:	2200      	movs	r2, #0
 8009238:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800923a:	7bbb      	ldrb	r3, [r7, #14]
 800923c:	2b02      	cmp	r3, #2
 800923e:	d14a      	bne.n	80092d6 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009246:	4619      	mov	r1, r3
 8009248:	693a      	ldr	r2, [r7, #16]
 800924a:	2334      	movs	r3, #52	; 0x34
 800924c:	fb03 f301 	mul.w	r3, r3, r1
 8009250:	4413      	add	r3, r2
 8009252:	3392      	adds	r3, #146	; 0x92
 8009254:	781b      	ldrb	r3, [r3, #0]
 8009256:	2b02      	cmp	r3, #2
 8009258:	d00c      	beq.n	8009274 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009260:	4619      	mov	r1, r3
 8009262:	693a      	ldr	r2, [r7, #16]
 8009264:	2334      	movs	r3, #52	; 0x34
 8009266:	fb03 f301 	mul.w	r3, r3, r1
 800926a:	4413      	add	r3, r2
 800926c:	33c1      	adds	r3, #193	; 0xc1
 800926e:	2201      	movs	r2, #1
 8009270:	701a      	strb	r2, [r3, #0]
 8009272:	e00b      	b.n	800928c <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8009274:	693b      	ldr	r3, [r7, #16]
 8009276:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800927a:	4619      	mov	r1, r3
 800927c:	693a      	ldr	r2, [r7, #16]
 800927e:	2334      	movs	r3, #52	; 0x34
 8009280:	fb03 f301 	mul.w	r3, r3, r1
 8009284:	4413      	add	r3, r2
 8009286:	33c1      	adds	r3, #193	; 0xc1
 8009288:	2200      	movs	r2, #0
 800928a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009292:	4619      	mov	r1, r3
 8009294:	693a      	ldr	r2, [r7, #16]
 8009296:	2334      	movs	r3, #52	; 0x34
 8009298:	fb03 f301 	mul.w	r3, r3, r1
 800929c:	4413      	add	r3, r2
 800929e:	3390      	adds	r3, #144	; 0x90
 80092a0:	2205      	movs	r2, #5
 80092a2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092aa:	4619      	mov	r1, r3
 80092ac:	693a      	ldr	r2, [r7, #16]
 80092ae:	2334      	movs	r3, #52	; 0x34
 80092b0:	fb03 f301 	mul.w	r3, r3, r1
 80092b4:	4413      	add	r3, r2
 80092b6:	3391      	adds	r3, #145	; 0x91
 80092b8:	2201      	movs	r2, #1
 80092ba:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092c2:	4619      	mov	r1, r3
 80092c4:	693a      	ldr	r2, [r7, #16]
 80092c6:	2334      	movs	r3, #52	; 0x34
 80092c8:	fb03 f301 	mul.w	r3, r3, r1
 80092cc:	4413      	add	r3, r2
 80092ce:	3392      	adds	r3, #146	; 0x92
 80092d0:	2202      	movs	r2, #2
 80092d2:	701a      	strb	r2, [r3, #0]
            break;
 80092d4:	e127      	b.n	8009526 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 80092d6:	7bbb      	ldrb	r3, [r7, #14]
 80092d8:	2b04      	cmp	r3, #4
 80092da:	f040 8124 	bne.w	8009526 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092e4:	4619      	mov	r1, r3
 80092e6:	693a      	ldr	r2, [r7, #16]
 80092e8:	2334      	movs	r3, #52	; 0x34
 80092ea:	fb03 f301 	mul.w	r3, r3, r1
 80092ee:	4413      	add	r3, r2
 80092f0:	3390      	adds	r3, #144	; 0x90
 80092f2:	2201      	movs	r2, #1
 80092f4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80092f6:	693b      	ldr	r3, [r7, #16]
 80092f8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092fc:	4619      	mov	r1, r3
 80092fe:	693a      	ldr	r2, [r7, #16]
 8009300:	2334      	movs	r3, #52	; 0x34
 8009302:	fb03 f301 	mul.w	r3, r3, r1
 8009306:	4413      	add	r3, r2
 8009308:	3391      	adds	r3, #145	; 0x91
 800930a:	2202      	movs	r2, #2
 800930c:	701a      	strb	r2, [r3, #0]
            break;
 800930e:	e10a      	b.n	8009526 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009316:	b2d9      	uxtb	r1, r3
 8009318:	693b      	ldr	r3, [r7, #16]
 800931a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800931e:	461a      	mov	r2, r3
 8009320:	2334      	movs	r3, #52	; 0x34
 8009322:	fb03 f302 	mul.w	r3, r3, r2
 8009326:	3390      	adds	r3, #144	; 0x90
 8009328:	693a      	ldr	r2, [r7, #16]
 800932a:	4413      	add	r3, r2
 800932c:	3304      	adds	r3, #4
 800932e:	461a      	mov	r2, r3
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f000 fddc 	bl	8009eee <USBH_MSC_SCSI_ReadCapacity>
 8009336:	4603      	mov	r3, r0
 8009338:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800933a:	7bfb      	ldrb	r3, [r7, #15]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d120      	bne.n	8009382 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009346:	4619      	mov	r1, r3
 8009348:	693a      	ldr	r2, [r7, #16]
 800934a:	2334      	movs	r3, #52	; 0x34
 800934c:	fb03 f301 	mul.w	r3, r3, r1
 8009350:	4413      	add	r3, r2
 8009352:	3390      	adds	r3, #144	; 0x90
 8009354:	2201      	movs	r2, #1
 8009356:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800935e:	4619      	mov	r1, r3
 8009360:	693a      	ldr	r2, [r7, #16]
 8009362:	2334      	movs	r3, #52	; 0x34
 8009364:	fb03 f301 	mul.w	r3, r3, r1
 8009368:	4413      	add	r3, r2
 800936a:	3391      	adds	r3, #145	; 0x91
 800936c:	2200      	movs	r2, #0
 800936e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009376:	3301      	adds	r3, #1
 8009378:	b29a      	uxth	r2, r3
 800937a:	693b      	ldr	r3, [r7, #16]
 800937c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8009380:	e0d3      	b.n	800952a <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 8009382:	7bfb      	ldrb	r3, [r7, #15]
 8009384:	2b02      	cmp	r3, #2
 8009386:	d10c      	bne.n	80093a2 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800938e:	4619      	mov	r1, r3
 8009390:	693a      	ldr	r2, [r7, #16]
 8009392:	2334      	movs	r3, #52	; 0x34
 8009394:	fb03 f301 	mul.w	r3, r3, r1
 8009398:	4413      	add	r3, r2
 800939a:	3390      	adds	r3, #144	; 0x90
 800939c:	2205      	movs	r2, #5
 800939e:	701a      	strb	r2, [r3, #0]
            break;
 80093a0:	e0c3      	b.n	800952a <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80093a2:	7bfb      	ldrb	r3, [r7, #15]
 80093a4:	2b04      	cmp	r3, #4
 80093a6:	f040 80c0 	bne.w	800952a <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80093aa:	693b      	ldr	r3, [r7, #16]
 80093ac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80093b0:	4619      	mov	r1, r3
 80093b2:	693a      	ldr	r2, [r7, #16]
 80093b4:	2334      	movs	r3, #52	; 0x34
 80093b6:	fb03 f301 	mul.w	r3, r3, r1
 80093ba:	4413      	add	r3, r2
 80093bc:	3390      	adds	r3, #144	; 0x90
 80093be:	2201      	movs	r2, #1
 80093c0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80093c8:	4619      	mov	r1, r3
 80093ca:	693a      	ldr	r2, [r7, #16]
 80093cc:	2334      	movs	r3, #52	; 0x34
 80093ce:	fb03 f301 	mul.w	r3, r3, r1
 80093d2:	4413      	add	r3, r2
 80093d4:	3391      	adds	r3, #145	; 0x91
 80093d6:	2202      	movs	r2, #2
 80093d8:	701a      	strb	r2, [r3, #0]
            break;
 80093da:	e0a6      	b.n	800952a <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80093e2:	b2d9      	uxtb	r1, r3
 80093e4:	693b      	ldr	r3, [r7, #16]
 80093e6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80093ea:	461a      	mov	r2, r3
 80093ec:	2334      	movs	r3, #52	; 0x34
 80093ee:	fb03 f302 	mul.w	r3, r3, r2
 80093f2:	3398      	adds	r3, #152	; 0x98
 80093f4:	693a      	ldr	r2, [r7, #16]
 80093f6:	4413      	add	r3, r2
 80093f8:	3304      	adds	r3, #4
 80093fa:	461a      	mov	r2, r3
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f000 fe96 	bl	800a12e <USBH_MSC_SCSI_RequestSense>
 8009402:	4603      	mov	r3, r0
 8009404:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009406:	7bfb      	ldrb	r3, [r7, #15]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d145      	bne.n	8009498 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009412:	4619      	mov	r1, r3
 8009414:	693a      	ldr	r2, [r7, #16]
 8009416:	2334      	movs	r3, #52	; 0x34
 8009418:	fb03 f301 	mul.w	r3, r3, r1
 800941c:	4413      	add	r3, r2
 800941e:	339c      	adds	r3, #156	; 0x9c
 8009420:	781b      	ldrb	r3, [r3, #0]
 8009422:	2b06      	cmp	r3, #6
 8009424:	d00c      	beq.n	8009440 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800942c:	4619      	mov	r1, r3
 800942e:	693a      	ldr	r2, [r7, #16]
 8009430:	2334      	movs	r3, #52	; 0x34
 8009432:	fb03 f301 	mul.w	r3, r3, r1
 8009436:	4413      	add	r3, r2
 8009438:	339c      	adds	r3, #156	; 0x9c
 800943a:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800943c:	2b02      	cmp	r3, #2
 800943e:	d117      	bne.n	8009470 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800944c:	1ad3      	subs	r3, r2, r3
 800944e:	f242 720f 	movw	r2, #9999	; 0x270f
 8009452:	4293      	cmp	r3, r2
 8009454:	d80c      	bhi.n	8009470 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800945c:	4619      	mov	r1, r3
 800945e:	693a      	ldr	r2, [r7, #16]
 8009460:	2334      	movs	r3, #52	; 0x34
 8009462:	fb03 f301 	mul.w	r3, r3, r1
 8009466:	4413      	add	r3, r2
 8009468:	3390      	adds	r3, #144	; 0x90
 800946a:	2202      	movs	r2, #2
 800946c:	701a      	strb	r2, [r3, #0]
                  break;
 800946e:	e05f      	b.n	8009530 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009476:	4619      	mov	r1, r3
 8009478:	693a      	ldr	r2, [r7, #16]
 800947a:	2334      	movs	r3, #52	; 0x34
 800947c:	fb03 f301 	mul.w	r3, r3, r1
 8009480:	4413      	add	r3, r2
 8009482:	3390      	adds	r3, #144	; 0x90
 8009484:	2201      	movs	r2, #1
 8009486:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800948e:	3301      	adds	r3, #1
 8009490:	b29a      	uxth	r2, r3
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8009498:	7bfb      	ldrb	r3, [r7, #15]
 800949a:	2b02      	cmp	r3, #2
 800949c:	d10c      	bne.n	80094b8 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800949e:	693b      	ldr	r3, [r7, #16]
 80094a0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80094a4:	4619      	mov	r1, r3
 80094a6:	693a      	ldr	r2, [r7, #16]
 80094a8:	2334      	movs	r3, #52	; 0x34
 80094aa:	fb03 f301 	mul.w	r3, r3, r1
 80094ae:	4413      	add	r3, r2
 80094b0:	3390      	adds	r3, #144	; 0x90
 80094b2:	2208      	movs	r2, #8
 80094b4:	701a      	strb	r2, [r3, #0]
            break;
 80094b6:	e03a      	b.n	800952e <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80094b8:	7bfb      	ldrb	r3, [r7, #15]
 80094ba:	2b04      	cmp	r3, #4
 80094bc:	d137      	bne.n	800952e <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80094c4:	4619      	mov	r1, r3
 80094c6:	693a      	ldr	r2, [r7, #16]
 80094c8:	2334      	movs	r3, #52	; 0x34
 80094ca:	fb03 f301 	mul.w	r3, r3, r1
 80094ce:	4413      	add	r3, r2
 80094d0:	3390      	adds	r3, #144	; 0x90
 80094d2:	2201      	movs	r2, #1
 80094d4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80094dc:	4619      	mov	r1, r3
 80094de:	693a      	ldr	r2, [r7, #16]
 80094e0:	2334      	movs	r3, #52	; 0x34
 80094e2:	fb03 f301 	mul.w	r3, r3, r1
 80094e6:	4413      	add	r3, r2
 80094e8:	3391      	adds	r3, #145	; 0x91
 80094ea:	2202      	movs	r2, #2
 80094ec:	701a      	strb	r2, [r3, #0]
            break;
 80094ee:	e01e      	b.n	800952e <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80094f6:	3301      	adds	r3, #1
 80094f8:	b29a      	uxth	r2, r3
 80094fa:	693b      	ldr	r3, [r7, #16]
 80094fc:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8009500:	e016      	b.n	8009530 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 8009502:	693b      	ldr	r3, [r7, #16]
 8009504:	2200      	movs	r2, #0
 8009506:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800950a:	693b      	ldr	r3, [r7, #16]
 800950c:	2201      	movs	r2, #1
 800950e:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009516:	2102      	movs	r1, #2
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	4798      	blx	r3
      break;
 800951c:	e00c      	b.n	8009538 <USBH_MSC_Process+0x514>
            break;
 800951e:	bf00      	nop
 8009520:	e00a      	b.n	8009538 <USBH_MSC_Process+0x514>
            break;
 8009522:	bf00      	nop
 8009524:	e008      	b.n	8009538 <USBH_MSC_Process+0x514>
            break;
 8009526:	bf00      	nop
 8009528:	e006      	b.n	8009538 <USBH_MSC_Process+0x514>
            break;
 800952a:	bf00      	nop
 800952c:	e004      	b.n	8009538 <USBH_MSC_Process+0x514>
            break;
 800952e:	bf00      	nop
      break;
 8009530:	e002      	b.n	8009538 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 8009532:	2300      	movs	r3, #0
 8009534:	75fb      	strb	r3, [r7, #23]
      break;
 8009536:	bf00      	nop
  }
  return error;
 8009538:	7dfb      	ldrb	r3, [r7, #23]
}
 800953a:	4618      	mov	r0, r3
 800953c:	3718      	adds	r7, #24
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}
 8009542:	bf00      	nop

08009544 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009544:	b480      	push	{r7}
 8009546:	b083      	sub	sp, #12
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800954c:	2300      	movs	r3, #0
}
 800954e:	4618      	mov	r0, r3
 8009550:	370c      	adds	r7, #12
 8009552:	46bd      	mov	sp, r7
 8009554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009558:	4770      	bx	lr

0800955a <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800955a:	b580      	push	{r7, lr}
 800955c:	b088      	sub	sp, #32
 800955e:	af02      	add	r7, sp, #8
 8009560:	6078      	str	r0, [r7, #4]
 8009562:	460b      	mov	r3, r1
 8009564:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800956c:	69db      	ldr	r3, [r3, #28]
 800956e:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8009570:	2301      	movs	r3, #1
 8009572:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8009574:	2301      	movs	r3, #1
 8009576:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8009578:	78fb      	ldrb	r3, [r7, #3]
 800957a:	693a      	ldr	r2, [r7, #16]
 800957c:	2134      	movs	r1, #52	; 0x34
 800957e:	fb01 f303 	mul.w	r3, r1, r3
 8009582:	4413      	add	r3, r2
 8009584:	3390      	adds	r3, #144	; 0x90
 8009586:	781b      	ldrb	r3, [r3, #0]
 8009588:	2b07      	cmp	r3, #7
 800958a:	d03c      	beq.n	8009606 <USBH_MSC_RdWrProcess+0xac>
 800958c:	2b07      	cmp	r3, #7
 800958e:	f300 80a7 	bgt.w	80096e0 <USBH_MSC_RdWrProcess+0x186>
 8009592:	2b05      	cmp	r3, #5
 8009594:	d06c      	beq.n	8009670 <USBH_MSC_RdWrProcess+0x116>
 8009596:	2b06      	cmp	r3, #6
 8009598:	f040 80a2 	bne.w	80096e0 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800959c:	78f9      	ldrb	r1, [r7, #3]
 800959e:	2300      	movs	r3, #0
 80095a0:	9300      	str	r3, [sp, #0]
 80095a2:	2300      	movs	r3, #0
 80095a4:	2200      	movs	r2, #0
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f000 fea5 	bl	800a2f6 <USBH_MSC_SCSI_Read>
 80095ac:	4603      	mov	r3, r0
 80095ae:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80095b0:	7bfb      	ldrb	r3, [r7, #15]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d10b      	bne.n	80095ce <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80095b6:	78fb      	ldrb	r3, [r7, #3]
 80095b8:	693a      	ldr	r2, [r7, #16]
 80095ba:	2134      	movs	r1, #52	; 0x34
 80095bc:	fb01 f303 	mul.w	r3, r1, r3
 80095c0:	4413      	add	r3, r2
 80095c2:	3390      	adds	r3, #144	; 0x90
 80095c4:	2201      	movs	r2, #1
 80095c6:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 80095c8:	2300      	movs	r3, #0
 80095ca:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80095cc:	e08a      	b.n	80096e4 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 80095ce:	7bfb      	ldrb	r3, [r7, #15]
 80095d0:	2b02      	cmp	r3, #2
 80095d2:	d109      	bne.n	80095e8 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80095d4:	78fb      	ldrb	r3, [r7, #3]
 80095d6:	693a      	ldr	r2, [r7, #16]
 80095d8:	2134      	movs	r1, #52	; 0x34
 80095da:	fb01 f303 	mul.w	r3, r1, r3
 80095de:	4413      	add	r3, r2
 80095e0:	3390      	adds	r3, #144	; 0x90
 80095e2:	2205      	movs	r2, #5
 80095e4:	701a      	strb	r2, [r3, #0]
      break;
 80095e6:	e07d      	b.n	80096e4 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80095e8:	7bfb      	ldrb	r3, [r7, #15]
 80095ea:	2b04      	cmp	r3, #4
 80095ec:	d17a      	bne.n	80096e4 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80095ee:	78fb      	ldrb	r3, [r7, #3]
 80095f0:	693a      	ldr	r2, [r7, #16]
 80095f2:	2134      	movs	r1, #52	; 0x34
 80095f4:	fb01 f303 	mul.w	r3, r1, r3
 80095f8:	4413      	add	r3, r2
 80095fa:	3390      	adds	r3, #144	; 0x90
 80095fc:	2208      	movs	r2, #8
 80095fe:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8009600:	2302      	movs	r3, #2
 8009602:	75fb      	strb	r3, [r7, #23]
      break;
 8009604:	e06e      	b.n	80096e4 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8009606:	78f9      	ldrb	r1, [r7, #3]
 8009608:	2300      	movs	r3, #0
 800960a:	9300      	str	r3, [sp, #0]
 800960c:	2300      	movs	r3, #0
 800960e:	2200      	movs	r2, #0
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f000 fe05 	bl	800a220 <USBH_MSC_SCSI_Write>
 8009616:	4603      	mov	r3, r0
 8009618:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800961a:	7bfb      	ldrb	r3, [r7, #15]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d10b      	bne.n	8009638 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009620:	78fb      	ldrb	r3, [r7, #3]
 8009622:	693a      	ldr	r2, [r7, #16]
 8009624:	2134      	movs	r1, #52	; 0x34
 8009626:	fb01 f303 	mul.w	r3, r1, r3
 800962a:	4413      	add	r3, r2
 800962c:	3390      	adds	r3, #144	; 0x90
 800962e:	2201      	movs	r2, #1
 8009630:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8009632:	2300      	movs	r3, #0
 8009634:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009636:	e057      	b.n	80096e8 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 8009638:	7bfb      	ldrb	r3, [r7, #15]
 800963a:	2b02      	cmp	r3, #2
 800963c:	d109      	bne.n	8009652 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800963e:	78fb      	ldrb	r3, [r7, #3]
 8009640:	693a      	ldr	r2, [r7, #16]
 8009642:	2134      	movs	r1, #52	; 0x34
 8009644:	fb01 f303 	mul.w	r3, r1, r3
 8009648:	4413      	add	r3, r2
 800964a:	3390      	adds	r3, #144	; 0x90
 800964c:	2205      	movs	r2, #5
 800964e:	701a      	strb	r2, [r3, #0]
      break;
 8009650:	e04a      	b.n	80096e8 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009652:	7bfb      	ldrb	r3, [r7, #15]
 8009654:	2b04      	cmp	r3, #4
 8009656:	d147      	bne.n	80096e8 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009658:	78fb      	ldrb	r3, [r7, #3]
 800965a:	693a      	ldr	r2, [r7, #16]
 800965c:	2134      	movs	r1, #52	; 0x34
 800965e:	fb01 f303 	mul.w	r3, r1, r3
 8009662:	4413      	add	r3, r2
 8009664:	3390      	adds	r3, #144	; 0x90
 8009666:	2208      	movs	r2, #8
 8009668:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800966a:	2302      	movs	r3, #2
 800966c:	75fb      	strb	r3, [r7, #23]
      break;
 800966e:	e03b      	b.n	80096e8 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8009670:	78fb      	ldrb	r3, [r7, #3]
 8009672:	2234      	movs	r2, #52	; 0x34
 8009674:	fb02 f303 	mul.w	r3, r2, r3
 8009678:	3398      	adds	r3, #152	; 0x98
 800967a:	693a      	ldr	r2, [r7, #16]
 800967c:	4413      	add	r3, r2
 800967e:	1d1a      	adds	r2, r3, #4
 8009680:	78fb      	ldrb	r3, [r7, #3]
 8009682:	4619      	mov	r1, r3
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f000 fd52 	bl	800a12e <USBH_MSC_SCSI_RequestSense>
 800968a:	4603      	mov	r3, r0
 800968c:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800968e:	7bfb      	ldrb	r3, [r7, #15]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d113      	bne.n	80096bc <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009694:	78fb      	ldrb	r3, [r7, #3]
 8009696:	693a      	ldr	r2, [r7, #16]
 8009698:	2134      	movs	r1, #52	; 0x34
 800969a:	fb01 f303 	mul.w	r3, r1, r3
 800969e:	4413      	add	r3, r2
 80096a0:	3390      	adds	r3, #144	; 0x90
 80096a2:	2201      	movs	r2, #1
 80096a4:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 80096a6:	78fb      	ldrb	r3, [r7, #3]
 80096a8:	693a      	ldr	r2, [r7, #16]
 80096aa:	2134      	movs	r1, #52	; 0x34
 80096ac:	fb01 f303 	mul.w	r3, r1, r3
 80096b0:	4413      	add	r3, r2
 80096b2:	3391      	adds	r3, #145	; 0x91
 80096b4:	2202      	movs	r2, #2
 80096b6:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 80096b8:	2302      	movs	r3, #2
 80096ba:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 80096bc:	7bfb      	ldrb	r3, [r7, #15]
 80096be:	2b02      	cmp	r3, #2
 80096c0:	d014      	beq.n	80096ec <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80096c2:	7bfb      	ldrb	r3, [r7, #15]
 80096c4:	2b04      	cmp	r3, #4
 80096c6:	d111      	bne.n	80096ec <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80096c8:	78fb      	ldrb	r3, [r7, #3]
 80096ca:	693a      	ldr	r2, [r7, #16]
 80096cc:	2134      	movs	r1, #52	; 0x34
 80096ce:	fb01 f303 	mul.w	r3, r1, r3
 80096d2:	4413      	add	r3, r2
 80096d4:	3390      	adds	r3, #144	; 0x90
 80096d6:	2208      	movs	r2, #8
 80096d8:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80096da:	2302      	movs	r3, #2
 80096dc:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80096de:	e005      	b.n	80096ec <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 80096e0:	bf00      	nop
 80096e2:	e004      	b.n	80096ee <USBH_MSC_RdWrProcess+0x194>
      break;
 80096e4:	bf00      	nop
 80096e6:	e002      	b.n	80096ee <USBH_MSC_RdWrProcess+0x194>
      break;
 80096e8:	bf00      	nop
 80096ea:	e000      	b.n	80096ee <USBH_MSC_RdWrProcess+0x194>
      break;
 80096ec:	bf00      	nop

  }
  return error;
 80096ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3718      	adds	r7, #24
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b085      	sub	sp, #20
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	460b      	mov	r3, r1
 8009702:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800970a:	69db      	ldr	r3, [r3, #28]
 800970c:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	781b      	ldrb	r3, [r3, #0]
 8009712:	b2db      	uxtb	r3, r3
 8009714:	2b0b      	cmp	r3, #11
 8009716:	d10c      	bne.n	8009732 <USBH_MSC_UnitIsReady+0x3a>
 8009718:	78fb      	ldrb	r3, [r7, #3]
 800971a:	68ba      	ldr	r2, [r7, #8]
 800971c:	2134      	movs	r1, #52	; 0x34
 800971e:	fb01 f303 	mul.w	r3, r1, r3
 8009722:	4413      	add	r3, r2
 8009724:	3391      	adds	r3, #145	; 0x91
 8009726:	781b      	ldrb	r3, [r3, #0]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d102      	bne.n	8009732 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800972c:	2301      	movs	r3, #1
 800972e:	73fb      	strb	r3, [r7, #15]
 8009730:	e001      	b.n	8009736 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8009732:	2300      	movs	r3, #0
 8009734:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8009736:	7bfb      	ldrb	r3, [r7, #15]
}
 8009738:	4618      	mov	r0, r3
 800973a:	3714      	adds	r7, #20
 800973c:	46bd      	mov	sp, r7
 800973e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009742:	4770      	bx	lr

08009744 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b086      	sub	sp, #24
 8009748:	af00      	add	r7, sp, #0
 800974a:	60f8      	str	r0, [r7, #12]
 800974c:	460b      	mov	r3, r1
 800974e:	607a      	str	r2, [r7, #4]
 8009750:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009758:	69db      	ldr	r3, [r3, #28]
 800975a:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	781b      	ldrb	r3, [r3, #0]
 8009760:	b2db      	uxtb	r3, r3
 8009762:	2b0b      	cmp	r3, #11
 8009764:	d10d      	bne.n	8009782 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8009766:	7afb      	ldrb	r3, [r7, #11]
 8009768:	2234      	movs	r2, #52	; 0x34
 800976a:	fb02 f303 	mul.w	r3, r2, r3
 800976e:	3390      	adds	r3, #144	; 0x90
 8009770:	697a      	ldr	r2, [r7, #20]
 8009772:	4413      	add	r3, r2
 8009774:	2234      	movs	r2, #52	; 0x34
 8009776:	4619      	mov	r1, r3
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f002 fd4d 	bl	800c218 <memcpy>
    return USBH_OK;
 800977e:	2300      	movs	r3, #0
 8009780:	e000      	b.n	8009784 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8009782:	2302      	movs	r3, #2
  }
}
 8009784:	4618      	mov	r0, r3
 8009786:	3718      	adds	r7, #24
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}

0800978c <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b088      	sub	sp, #32
 8009790:	af02      	add	r7, sp, #8
 8009792:	60f8      	str	r0, [r7, #12]
 8009794:	607a      	str	r2, [r7, #4]
 8009796:	603b      	str	r3, [r7, #0]
 8009798:	460b      	mov	r3, r1
 800979a:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80097a2:	69db      	ldr	r3, [r3, #28]
 80097a4:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80097ac:	b2db      	uxtb	r3, r3
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d00e      	beq.n	80097d0 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	781b      	ldrb	r3, [r3, #0]
 80097b6:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 80097b8:	2b0b      	cmp	r3, #11
 80097ba:	d109      	bne.n	80097d0 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80097bc:	7afb      	ldrb	r3, [r7, #11]
 80097be:	697a      	ldr	r2, [r7, #20]
 80097c0:	2134      	movs	r1, #52	; 0x34
 80097c2:	fb01 f303 	mul.w	r3, r1, r3
 80097c6:	4413      	add	r3, r2
 80097c8:	3390      	adds	r3, #144	; 0x90
 80097ca:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 80097cc:	2b01      	cmp	r3, #1
 80097ce:	d001      	beq.n	80097d4 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 80097d0:	2302      	movs	r3, #2
 80097d2:	e040      	b.n	8009856 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 80097d4:	697b      	ldr	r3, [r7, #20]
 80097d6:	2206      	movs	r2, #6
 80097d8:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 80097da:	7afb      	ldrb	r3, [r7, #11]
 80097dc:	697a      	ldr	r2, [r7, #20]
 80097de:	2134      	movs	r1, #52	; 0x34
 80097e0:	fb01 f303 	mul.w	r3, r1, r3
 80097e4:	4413      	add	r3, r2
 80097e6:	3390      	adds	r3, #144	; 0x90
 80097e8:	2206      	movs	r2, #6
 80097ea:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 80097ec:	7afb      	ldrb	r3, [r7, #11]
 80097ee:	b29a      	uxth	r2, r3
 80097f0:	697b      	ldr	r3, [r7, #20]
 80097f2:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 80097f6:	7af9      	ldrb	r1, [r7, #11]
 80097f8:	6a3b      	ldr	r3, [r7, #32]
 80097fa:	9300      	str	r3, [sp, #0]
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	687a      	ldr	r2, [r7, #4]
 8009800:	68f8      	ldr	r0, [r7, #12]
 8009802:	f000 fd78 	bl	800a2f6 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800980c:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800980e:	e016      	b.n	800983e <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009816:	693b      	ldr	r3, [r7, #16]
 8009818:	1ad2      	subs	r2, r2, r3
 800981a:	6a3b      	ldr	r3, [r7, #32]
 800981c:	f242 7110 	movw	r1, #10000	; 0x2710
 8009820:	fb01 f303 	mul.w	r3, r1, r3
 8009824:	429a      	cmp	r2, r3
 8009826:	d805      	bhi.n	8009834 <USBH_MSC_Read+0xa8>
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800982e:	b2db      	uxtb	r3, r3
 8009830:	2b00      	cmp	r3, #0
 8009832:	d104      	bne.n	800983e <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	2201      	movs	r2, #1
 8009838:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800983a:	2302      	movs	r3, #2
 800983c:	e00b      	b.n	8009856 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800983e:	7afb      	ldrb	r3, [r7, #11]
 8009840:	4619      	mov	r1, r3
 8009842:	68f8      	ldr	r0, [r7, #12]
 8009844:	f7ff fe89 	bl	800955a <USBH_MSC_RdWrProcess>
 8009848:	4603      	mov	r3, r0
 800984a:	2b01      	cmp	r3, #1
 800984c:	d0e0      	beq.n	8009810 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	2201      	movs	r2, #1
 8009852:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8009854:	2300      	movs	r3, #0
}
 8009856:	4618      	mov	r0, r3
 8009858:	3718      	adds	r7, #24
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}

0800985e <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800985e:	b580      	push	{r7, lr}
 8009860:	b088      	sub	sp, #32
 8009862:	af02      	add	r7, sp, #8
 8009864:	60f8      	str	r0, [r7, #12]
 8009866:	607a      	str	r2, [r7, #4]
 8009868:	603b      	str	r3, [r7, #0]
 800986a:	460b      	mov	r3, r1
 800986c:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009874:	69db      	ldr	r3, [r3, #28]
 8009876:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800987e:	b2db      	uxtb	r3, r3
 8009880:	2b00      	cmp	r3, #0
 8009882:	d00e      	beq.n	80098a2 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	781b      	ldrb	r3, [r3, #0]
 8009888:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800988a:	2b0b      	cmp	r3, #11
 800988c:	d109      	bne.n	80098a2 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800988e:	7afb      	ldrb	r3, [r7, #11]
 8009890:	697a      	ldr	r2, [r7, #20]
 8009892:	2134      	movs	r1, #52	; 0x34
 8009894:	fb01 f303 	mul.w	r3, r1, r3
 8009898:	4413      	add	r3, r2
 800989a:	3390      	adds	r3, #144	; 0x90
 800989c:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800989e:	2b01      	cmp	r3, #1
 80098a0:	d001      	beq.n	80098a6 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 80098a2:	2302      	movs	r3, #2
 80098a4:	e040      	b.n	8009928 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	2207      	movs	r2, #7
 80098aa:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 80098ac:	7afb      	ldrb	r3, [r7, #11]
 80098ae:	697a      	ldr	r2, [r7, #20]
 80098b0:	2134      	movs	r1, #52	; 0x34
 80098b2:	fb01 f303 	mul.w	r3, r1, r3
 80098b6:	4413      	add	r3, r2
 80098b8:	3390      	adds	r3, #144	; 0x90
 80098ba:	2207      	movs	r2, #7
 80098bc:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 80098be:	7afb      	ldrb	r3, [r7, #11]
 80098c0:	b29a      	uxth	r2, r3
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 80098c8:	7af9      	ldrb	r1, [r7, #11]
 80098ca:	6a3b      	ldr	r3, [r7, #32]
 80098cc:	9300      	str	r3, [sp, #0]
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	687a      	ldr	r2, [r7, #4]
 80098d2:	68f8      	ldr	r0, [r7, #12]
 80098d4:	f000 fca4 	bl	800a220 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80098de:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80098e0:	e016      	b.n	8009910 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80098e8:	693b      	ldr	r3, [r7, #16]
 80098ea:	1ad2      	subs	r2, r2, r3
 80098ec:	6a3b      	ldr	r3, [r7, #32]
 80098ee:	f242 7110 	movw	r1, #10000	; 0x2710
 80098f2:	fb01 f303 	mul.w	r3, r1, r3
 80098f6:	429a      	cmp	r2, r3
 80098f8:	d805      	bhi.n	8009906 <USBH_MSC_Write+0xa8>
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009900:	b2db      	uxtb	r3, r3
 8009902:	2b00      	cmp	r3, #0
 8009904:	d104      	bne.n	8009910 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	2201      	movs	r2, #1
 800990a:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800990c:	2302      	movs	r3, #2
 800990e:	e00b      	b.n	8009928 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009910:	7afb      	ldrb	r3, [r7, #11]
 8009912:	4619      	mov	r1, r3
 8009914:	68f8      	ldr	r0, [r7, #12]
 8009916:	f7ff fe20 	bl	800955a <USBH_MSC_RdWrProcess>
 800991a:	4603      	mov	r3, r0
 800991c:	2b01      	cmp	r3, #1
 800991e:	d0e0      	beq.n	80098e2 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8009920:	697b      	ldr	r3, [r7, #20]
 8009922:	2201      	movs	r2, #1
 8009924:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8009926:	2300      	movs	r3, #0
}
 8009928:	4618      	mov	r0, r3
 800992a:	3718      	adds	r7, #24
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}

08009930 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b082      	sub	sp, #8
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2221      	movs	r2, #33	; 0x21
 800993c:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	22ff      	movs	r2, #255	; 0xff
 8009942:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2200      	movs	r2, #0
 8009948:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2200      	movs	r2, #0
 800994e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2200      	movs	r2, #0
 8009954:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8009956:	2200      	movs	r2, #0
 8009958:	2100      	movs	r1, #0
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f001 fdab 	bl	800b4b6 <USBH_CtlReq>
 8009960:	4603      	mov	r3, r0
}
 8009962:	4618      	mov	r0, r3
 8009964:	3708      	adds	r7, #8
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}

0800996a <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800996a:	b580      	push	{r7, lr}
 800996c:	b082      	sub	sp, #8
 800996e:	af00      	add	r7, sp, #0
 8009970:	6078      	str	r0, [r7, #4]
 8009972:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	22a1      	movs	r2, #161	; 0xa1
 8009978:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	22fe      	movs	r2, #254	; 0xfe
 800997e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2200      	movs	r2, #0
 8009984:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2200      	movs	r2, #0
 800998a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2201      	movs	r2, #1
 8009990:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8009992:	2201      	movs	r2, #1
 8009994:	6839      	ldr	r1, [r7, #0]
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f001 fd8d 	bl	800b4b6 <USBH_CtlReq>
 800999c:	4603      	mov	r3, r0
}
 800999e:	4618      	mov	r0, r3
 80099a0:	3708      	adds	r7, #8
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}
	...

080099a8 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 80099a8:	b480      	push	{r7}
 80099aa:	b085      	sub	sp, #20
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099b6:	69db      	ldr	r3, [r3, #28]
 80099b8:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	4a09      	ldr	r2, [pc, #36]	; (80099e4 <USBH_MSC_BOT_Init+0x3c>)
 80099be:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	4a09      	ldr	r2, [pc, #36]	; (80099e8 <USBH_MSC_BOT_Init+0x40>)
 80099c4:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	2201      	movs	r2, #1
 80099ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	2201      	movs	r2, #1
 80099d2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 80099d6:	2300      	movs	r3, #0
}
 80099d8:	4618      	mov	r0, r3
 80099da:	3714      	adds	r7, #20
 80099dc:	46bd      	mov	sp, r7
 80099de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e2:	4770      	bx	lr
 80099e4:	43425355 	.word	0x43425355
 80099e8:	20304050 	.word	0x20304050

080099ec <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b088      	sub	sp, #32
 80099f0:	af02      	add	r7, sp, #8
 80099f2:	6078      	str	r0, [r7, #4]
 80099f4:	460b      	mov	r3, r1
 80099f6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 80099f8:	2301      	movs	r3, #1
 80099fa:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 80099fc:	2301      	movs	r3, #1
 80099fe:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8009a00:	2301      	movs	r3, #1
 8009a02:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009a04:	2300      	movs	r3, #0
 8009a06:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a0e:	69db      	ldr	r3, [r3, #28]
 8009a10:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8009a12:	2300      	movs	r3, #0
 8009a14:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009a1c:	3b01      	subs	r3, #1
 8009a1e:	2b0a      	cmp	r3, #10
 8009a20:	f200 819e 	bhi.w	8009d60 <USBH_MSC_BOT_Process+0x374>
 8009a24:	a201      	add	r2, pc, #4	; (adr r2, 8009a2c <USBH_MSC_BOT_Process+0x40>)
 8009a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a2a:	bf00      	nop
 8009a2c:	08009a59 	.word	0x08009a59
 8009a30:	08009a81 	.word	0x08009a81
 8009a34:	08009aeb 	.word	0x08009aeb
 8009a38:	08009b09 	.word	0x08009b09
 8009a3c:	08009b8d 	.word	0x08009b8d
 8009a40:	08009baf 	.word	0x08009baf
 8009a44:	08009c47 	.word	0x08009c47
 8009a48:	08009c63 	.word	0x08009c63
 8009a4c:	08009cb5 	.word	0x08009cb5
 8009a50:	08009ce5 	.word	0x08009ce5
 8009a54:	08009d47 	.word	0x08009d47
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	78fa      	ldrb	r2, [r7, #3]
 8009a5c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	2202      	movs	r2, #2
 8009a64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8009a6e:	693b      	ldr	r3, [r7, #16]
 8009a70:	795b      	ldrb	r3, [r3, #5]
 8009a72:	2201      	movs	r2, #1
 8009a74:	9200      	str	r2, [sp, #0]
 8009a76:	221f      	movs	r2, #31
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f001 ff2a 	bl	800b8d2 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8009a7e:	e17e      	b.n	8009d7e <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8009a80:	693b      	ldr	r3, [r7, #16]
 8009a82:	795b      	ldrb	r3, [r3, #5]
 8009a84:	4619      	mov	r1, r3
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f002 faae 	bl	800bfe8 <USBH_LL_GetURBState>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009a90:	7d3b      	ldrb	r3, [r7, #20]
 8009a92:	2b01      	cmp	r3, #1
 8009a94:	d118      	bne.n	8009ac8 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d00f      	beq.n	8009abe <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8009aa4:	b25b      	sxtb	r3, r3
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	da04      	bge.n	8009ab4 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	2203      	movs	r2, #3
 8009aae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009ab2:	e157      	b.n	8009d64 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	2205      	movs	r2, #5
 8009ab8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009abc:	e152      	b.n	8009d64 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	2207      	movs	r2, #7
 8009ac2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009ac6:	e14d      	b.n	8009d64 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009ac8:	7d3b      	ldrb	r3, [r7, #20]
 8009aca:	2b02      	cmp	r3, #2
 8009acc:	d104      	bne.n	8009ad8 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	2201      	movs	r2, #1
 8009ad2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009ad6:	e145      	b.n	8009d64 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 8009ad8:	7d3b      	ldrb	r3, [r7, #20]
 8009ada:	2b05      	cmp	r3, #5
 8009adc:	f040 8142 	bne.w	8009d64 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8009ae0:	693b      	ldr	r3, [r7, #16]
 8009ae2:	220a      	movs	r2, #10
 8009ae4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009ae8:	e13c      	b.n	8009d64 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8009aea:	693b      	ldr	r3, [r7, #16]
 8009aec:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	895a      	ldrh	r2, [r3, #10]
 8009af4:	693b      	ldr	r3, [r7, #16]
 8009af6:	791b      	ldrb	r3, [r3, #4]
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f001 ff0f 	bl	800b91c <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8009afe:	693b      	ldr	r3, [r7, #16]
 8009b00:	2204      	movs	r2, #4
 8009b02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8009b06:	e13a      	b.n	8009d7e <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	791b      	ldrb	r3, [r3, #4]
 8009b0c:	4619      	mov	r1, r3
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f002 fa6a 	bl	800bfe8 <USBH_LL_GetURBState>
 8009b14:	4603      	mov	r3, r0
 8009b16:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009b18:	7d3b      	ldrb	r3, [r7, #20]
 8009b1a:	2b01      	cmp	r3, #1
 8009b1c:	d12d      	bne.n	8009b7a <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8009b1e:	693b      	ldr	r3, [r7, #16]
 8009b20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b22:	693a      	ldr	r2, [r7, #16]
 8009b24:	8952      	ldrh	r2, [r2, #10]
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d910      	bls.n	8009b4c <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8009b2a:	693b      	ldr	r3, [r7, #16]
 8009b2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b30:	693a      	ldr	r2, [r7, #16]
 8009b32:	8952      	ldrh	r2, [r2, #10]
 8009b34:	441a      	add	r2, r3
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b40:	693a      	ldr	r2, [r7, #16]
 8009b42:	8952      	ldrh	r2, [r2, #10]
 8009b44:	1a9a      	subs	r2, r3, r2
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	65da      	str	r2, [r3, #92]	; 0x5c
 8009b4a:	e002      	b.n	8009b52 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009b52:	693b      	ldr	r3, [r7, #16]
 8009b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d00a      	beq.n	8009b70 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8009b5a:	693b      	ldr	r3, [r7, #16]
 8009b5c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009b60:	693b      	ldr	r3, [r7, #16]
 8009b62:	895a      	ldrh	r2, [r3, #10]
 8009b64:	693b      	ldr	r3, [r7, #16]
 8009b66:	791b      	ldrb	r3, [r3, #4]
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f001 fed7 	bl	800b91c <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8009b6e:	e0fb      	b.n	8009d68 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	2207      	movs	r2, #7
 8009b74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009b78:	e0f6      	b.n	8009d68 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 8009b7a:	7d3b      	ldrb	r3, [r7, #20]
 8009b7c:	2b05      	cmp	r3, #5
 8009b7e:	f040 80f3 	bne.w	8009d68 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	2209      	movs	r2, #9
 8009b86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009b8a:	e0ed      	b.n	8009d68 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	891a      	ldrh	r2, [r3, #8]
 8009b96:	693b      	ldr	r3, [r7, #16]
 8009b98:	795b      	ldrb	r3, [r3, #5]
 8009b9a:	2001      	movs	r0, #1
 8009b9c:	9000      	str	r0, [sp, #0]
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f001 fe97 	bl	800b8d2 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	2206      	movs	r2, #6
 8009ba8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009bac:	e0e7      	b.n	8009d7e <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8009bae:	693b      	ldr	r3, [r7, #16]
 8009bb0:	795b      	ldrb	r3, [r3, #5]
 8009bb2:	4619      	mov	r1, r3
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f002 fa17 	bl	800bfe8 <USBH_LL_GetURBState>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009bbe:	7d3b      	ldrb	r3, [r7, #20]
 8009bc0:	2b01      	cmp	r3, #1
 8009bc2:	d12f      	bne.n	8009c24 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009bc8:	693a      	ldr	r2, [r7, #16]
 8009bca:	8912      	ldrh	r2, [r2, #8]
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d910      	bls.n	8009bf2 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009bd6:	693a      	ldr	r2, [r7, #16]
 8009bd8:	8912      	ldrh	r2, [r2, #8]
 8009bda:	441a      	add	r2, r3
 8009bdc:	693b      	ldr	r3, [r7, #16]
 8009bde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009be6:	693a      	ldr	r2, [r7, #16]
 8009be8:	8912      	ldrh	r2, [r2, #8]
 8009bea:	1a9a      	subs	r2, r3, r2
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	65da      	str	r2, [r3, #92]	; 0x5c
 8009bf0:	e002      	b.n	8009bf8 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009bf2:	693b      	ldr	r3, [r7, #16]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d00c      	beq.n	8009c1a <USBH_MSC_BOT_Process+0x22e>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8009c00:	693b      	ldr	r3, [r7, #16]
 8009c02:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	891a      	ldrh	r2, [r3, #8]
 8009c0a:	693b      	ldr	r3, [r7, #16]
 8009c0c:	795b      	ldrb	r3, [r3, #5]
 8009c0e:	2001      	movs	r0, #1
 8009c10:	9000      	str	r0, [sp, #0]
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f001 fe5d 	bl	800b8d2 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8009c18:	e0a8      	b.n	8009d6c <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	2207      	movs	r2, #7
 8009c1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009c22:	e0a3      	b.n	8009d6c <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009c24:	7d3b      	ldrb	r3, [r7, #20]
 8009c26:	2b02      	cmp	r3, #2
 8009c28:	d104      	bne.n	8009c34 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8009c2a:	693b      	ldr	r3, [r7, #16]
 8009c2c:	2205      	movs	r2, #5
 8009c2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009c32:	e09b      	b.n	8009d6c <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 8009c34:	7d3b      	ldrb	r3, [r7, #20]
 8009c36:	2b05      	cmp	r3, #5
 8009c38:	f040 8098 	bne.w	8009d6c <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8009c3c:	693b      	ldr	r3, [r7, #16]
 8009c3e:	220a      	movs	r2, #10
 8009c40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009c44:	e092      	b.n	8009d6c <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8009c46:	693b      	ldr	r3, [r7, #16]
 8009c48:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8009c4c:	693b      	ldr	r3, [r7, #16]
 8009c4e:	791b      	ldrb	r3, [r3, #4]
 8009c50:	220d      	movs	r2, #13
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f001 fe62 	bl	800b91c <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8009c58:	693b      	ldr	r3, [r7, #16]
 8009c5a:	2208      	movs	r2, #8
 8009c5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009c60:	e08d      	b.n	8009d7e <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009c62:	693b      	ldr	r3, [r7, #16]
 8009c64:	791b      	ldrb	r3, [r3, #4]
 8009c66:	4619      	mov	r1, r3
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f002 f9bd 	bl	800bfe8 <USBH_LL_GetURBState>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8009c72:	7d3b      	ldrb	r3, [r7, #20]
 8009c74:	2b01      	cmp	r3, #1
 8009c76:	d115      	bne.n	8009ca4 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	2201      	movs	r2, #1
 8009c7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8009c80:	693b      	ldr	r3, [r7, #16]
 8009c82:	2201      	movs	r2, #1
 8009c84:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f000 f8a9 	bl	8009de0 <USBH_MSC_DecodeCSW>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8009c92:	7d7b      	ldrb	r3, [r7, #21]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d102      	bne.n	8009c9e <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8009c9c:	e068      	b.n	8009d70 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 8009c9e:	2302      	movs	r3, #2
 8009ca0:	75fb      	strb	r3, [r7, #23]
      break;
 8009ca2:	e065      	b.n	8009d70 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 8009ca4:	7d3b      	ldrb	r3, [r7, #20]
 8009ca6:	2b05      	cmp	r3, #5
 8009ca8:	d162      	bne.n	8009d70 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8009caa:	693b      	ldr	r3, [r7, #16]
 8009cac:	2209      	movs	r2, #9
 8009cae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009cb2:	e05d      	b.n	8009d70 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8009cb4:	78fb      	ldrb	r3, [r7, #3]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	4619      	mov	r1, r3
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f000 f864 	bl	8009d88 <USBH_MSC_BOT_Abort>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009cc4:	7dbb      	ldrb	r3, [r7, #22]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d104      	bne.n	8009cd4 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8009cca:	693b      	ldr	r3, [r7, #16]
 8009ccc:	2207      	movs	r2, #7
 8009cce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8009cd2:	e04f      	b.n	8009d74 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 8009cd4:	7dbb      	ldrb	r3, [r7, #22]
 8009cd6:	2b04      	cmp	r3, #4
 8009cd8:	d14c      	bne.n	8009d74 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009cda:	693b      	ldr	r3, [r7, #16]
 8009cdc:	220b      	movs	r2, #11
 8009cde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009ce2:	e047      	b.n	8009d74 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8009ce4:	78fb      	ldrb	r3, [r7, #3]
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	4619      	mov	r1, r3
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f000 f84c 	bl	8009d88 <USBH_MSC_BOT_Abort>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009cf4:	7dbb      	ldrb	r3, [r7, #22]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d11d      	bne.n	8009d36 <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	795b      	ldrb	r3, [r3, #5]
 8009cfe:	4619      	mov	r1, r3
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f002 f9cb 	bl	800c09c <USBH_LL_GetToggle>
 8009d06:	4603      	mov	r3, r0
 8009d08:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8009d0a:	693b      	ldr	r3, [r7, #16]
 8009d0c:	7959      	ldrb	r1, [r3, #5]
 8009d0e:	7bfb      	ldrb	r3, [r7, #15]
 8009d10:	f1c3 0301 	rsb	r3, r3, #1
 8009d14:	b2db      	uxtb	r3, r3
 8009d16:	461a      	mov	r2, r3
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f002 f98f 	bl	800c03c <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8009d1e:	693b      	ldr	r3, [r7, #16]
 8009d20:	791b      	ldrb	r3, [r3, #4]
 8009d22:	2200      	movs	r2, #0
 8009d24:	4619      	mov	r1, r3
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f002 f988 	bl	800c03c <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8009d2c:	693b      	ldr	r3, [r7, #16]
 8009d2e:	2209      	movs	r2, #9
 8009d30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8009d34:	e020      	b.n	8009d78 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 8009d36:	7dbb      	ldrb	r3, [r7, #22]
 8009d38:	2b04      	cmp	r3, #4
 8009d3a:	d11d      	bne.n	8009d78 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009d3c:	693b      	ldr	r3, [r7, #16]
 8009d3e:	220b      	movs	r2, #11
 8009d40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009d44:	e018      	b.n	8009d78 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f7ff fdf2 	bl	8009930 <USBH_MSC_BOT_REQ_Reset>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8009d50:	7dfb      	ldrb	r3, [r7, #23]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d112      	bne.n	8009d7c <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	2201      	movs	r2, #1
 8009d5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8009d5e:	e00d      	b.n	8009d7c <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 8009d60:	bf00      	nop
 8009d62:	e00c      	b.n	8009d7e <USBH_MSC_BOT_Process+0x392>
      break;
 8009d64:	bf00      	nop
 8009d66:	e00a      	b.n	8009d7e <USBH_MSC_BOT_Process+0x392>
      break;
 8009d68:	bf00      	nop
 8009d6a:	e008      	b.n	8009d7e <USBH_MSC_BOT_Process+0x392>
      break;
 8009d6c:	bf00      	nop
 8009d6e:	e006      	b.n	8009d7e <USBH_MSC_BOT_Process+0x392>
      break;
 8009d70:	bf00      	nop
 8009d72:	e004      	b.n	8009d7e <USBH_MSC_BOT_Process+0x392>
      break;
 8009d74:	bf00      	nop
 8009d76:	e002      	b.n	8009d7e <USBH_MSC_BOT_Process+0x392>
      break;
 8009d78:	bf00      	nop
 8009d7a:	e000      	b.n	8009d7e <USBH_MSC_BOT_Process+0x392>
      break;
 8009d7c:	bf00      	nop
  }
  return status;
 8009d7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	3718      	adds	r7, #24
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}

08009d88 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b084      	sub	sp, #16
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	460b      	mov	r3, r1
 8009d92:	70fb      	strb	r3, [r7, #3]
 8009d94:	4613      	mov	r3, r2
 8009d96:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8009d98:	2302      	movs	r3, #2
 8009d9a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009da2:	69db      	ldr	r3, [r3, #28]
 8009da4:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8009da6:	78bb      	ldrb	r3, [r7, #2]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d002      	beq.n	8009db2 <USBH_MSC_BOT_Abort+0x2a>
 8009dac:	2b01      	cmp	r3, #1
 8009dae:	d009      	beq.n	8009dc4 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8009db0:	e011      	b.n	8009dd6 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	79db      	ldrb	r3, [r3, #7]
 8009db6:	4619      	mov	r1, r3
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f001 f99c 	bl	800b0f6 <USBH_ClrFeature>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	73fb      	strb	r3, [r7, #15]
      break;
 8009dc2:	e008      	b.n	8009dd6 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	799b      	ldrb	r3, [r3, #6]
 8009dc8:	4619      	mov	r1, r3
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f001 f993 	bl	800b0f6 <USBH_ClrFeature>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	73fb      	strb	r3, [r7, #15]
      break;
 8009dd4:	bf00      	nop
  }
  return status;
 8009dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3710      	adds	r7, #16
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}

08009de0 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b084      	sub	sp, #16
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009dee:	69db      	ldr	r3, [r3, #28]
 8009df0:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8009df2:	2301      	movs	r3, #1
 8009df4:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	791b      	ldrb	r3, [r3, #4]
 8009dfa:	4619      	mov	r1, r3
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f002 f861 	bl	800bec4 <USBH_LL_GetLastXferSize>
 8009e02:	4603      	mov	r3, r0
 8009e04:	2b0d      	cmp	r3, #13
 8009e06:	d002      	beq.n	8009e0e <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8009e08:	2302      	movs	r3, #2
 8009e0a:	73fb      	strb	r3, [r7, #15]
 8009e0c:	e024      	b.n	8009e58 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009e12:	4a14      	ldr	r2, [pc, #80]	; (8009e64 <USBH_MSC_DecodeCSW+0x84>)
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d11d      	bne.n	8009e54 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e20:	429a      	cmp	r2, r3
 8009e22:	d119      	bne.n	8009e58 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d102      	bne.n	8009e34 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8009e2e:	2300      	movs	r3, #0
 8009e30:	73fb      	strb	r3, [r7, #15]
 8009e32:	e011      	b.n	8009e58 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009e3a:	2b01      	cmp	r3, #1
 8009e3c:	d102      	bne.n	8009e44 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8009e3e:	2301      	movs	r3, #1
 8009e40:	73fb      	strb	r3, [r7, #15]
 8009e42:	e009      	b.n	8009e58 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009e4a:	2b02      	cmp	r3, #2
 8009e4c:	d104      	bne.n	8009e58 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8009e4e:	2302      	movs	r3, #2
 8009e50:	73fb      	strb	r3, [r7, #15]
 8009e52:	e001      	b.n	8009e58 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8009e54:	2302      	movs	r3, #2
 8009e56:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8009e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3710      	adds	r7, #16
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}
 8009e62:	bf00      	nop
 8009e64:	53425355 	.word	0x53425355

08009e68 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b084      	sub	sp, #16
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
 8009e70:	460b      	mov	r3, r1
 8009e72:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009e74:	2302      	movs	r3, #2
 8009e76:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e7e:	69db      	ldr	r3, [r3, #28]
 8009e80:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009e88:	2b01      	cmp	r3, #1
 8009e8a:	d002      	beq.n	8009e92 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8009e8c:	2b02      	cmp	r3, #2
 8009e8e:	d021      	beq.n	8009ed4 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8009e90:	e028      	b.n	8009ee4 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	2200      	movs	r2, #0
 8009e96:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	220a      	movs	r2, #10
 8009ea4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	3363      	adds	r3, #99	; 0x63
 8009eac:	2210      	movs	r2, #16
 8009eae:	2100      	movs	r1, #0
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	f002 f9bf 	bl	800c234 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	2200      	movs	r2, #0
 8009eba:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	2201      	movs	r2, #1
 8009ec2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	2202      	movs	r2, #2
 8009eca:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	73fb      	strb	r3, [r7, #15]
      break;
 8009ed2:	e007      	b.n	8009ee4 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009ed4:	78fb      	ldrb	r3, [r7, #3]
 8009ed6:	4619      	mov	r1, r3
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f7ff fd87 	bl	80099ec <USBH_MSC_BOT_Process>
 8009ede:	4603      	mov	r3, r0
 8009ee0:	73fb      	strb	r3, [r7, #15]
      break;
 8009ee2:	bf00      	nop
  }

  return error;
 8009ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3710      	adds	r7, #16
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}

08009eee <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8009eee:	b580      	push	{r7, lr}
 8009ef0:	b086      	sub	sp, #24
 8009ef2:	af00      	add	r7, sp, #0
 8009ef4:	60f8      	str	r0, [r7, #12]
 8009ef6:	460b      	mov	r3, r1
 8009ef8:	607a      	str	r2, [r7, #4]
 8009efa:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8009efc:	2301      	movs	r3, #1
 8009efe:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009f06:	69db      	ldr	r3, [r3, #28]
 8009f08:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009f0a:	693b      	ldr	r3, [r7, #16]
 8009f0c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009f10:	2b01      	cmp	r3, #1
 8009f12:	d002      	beq.n	8009f1a <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8009f14:	2b02      	cmp	r3, #2
 8009f16:	d027      	beq.n	8009f68 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8009f18:	e05f      	b.n	8009fda <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	2208      	movs	r2, #8
 8009f1e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	2280      	movs	r2, #128	; 0x80
 8009f24:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009f28:	693b      	ldr	r3, [r7, #16]
 8009f2a:	220a      	movs	r2, #10
 8009f2c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	3363      	adds	r3, #99	; 0x63
 8009f34:	2210      	movs	r2, #16
 8009f36:	2100      	movs	r1, #0
 8009f38:	4618      	mov	r0, r3
 8009f3a:	f002 f97b 	bl	800c234 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8009f3e:	693b      	ldr	r3, [r7, #16]
 8009f40:	2225      	movs	r2, #37	; 0x25
 8009f42:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009f46:	693b      	ldr	r3, [r7, #16]
 8009f48:	2201      	movs	r2, #1
 8009f4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009f4e:	693b      	ldr	r3, [r7, #16]
 8009f50:	2202      	movs	r2, #2
 8009f52:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009f56:	693b      	ldr	r3, [r7, #16]
 8009f58:	f103 0210 	add.w	r2, r3, #16
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009f62:	2301      	movs	r3, #1
 8009f64:	75fb      	strb	r3, [r7, #23]
      break;
 8009f66:	e038      	b.n	8009fda <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009f68:	7afb      	ldrb	r3, [r7, #11]
 8009f6a:	4619      	mov	r1, r3
 8009f6c:	68f8      	ldr	r0, [r7, #12]
 8009f6e:	f7ff fd3d 	bl	80099ec <USBH_MSC_BOT_Process>
 8009f72:	4603      	mov	r3, r0
 8009f74:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009f76:	7dfb      	ldrb	r3, [r7, #23]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d12d      	bne.n	8009fd8 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009f7c:	693b      	ldr	r3, [r7, #16]
 8009f7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f82:	3303      	adds	r3, #3
 8009f84:	781b      	ldrb	r3, [r3, #0]
 8009f86:	461a      	mov	r2, r3
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f8e:	3302      	adds	r3, #2
 8009f90:	781b      	ldrb	r3, [r3, #0]
 8009f92:	021b      	lsls	r3, r3, #8
 8009f94:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f9c:	3301      	adds	r3, #1
 8009f9e:	781b      	ldrb	r3, [r3, #0]
 8009fa0:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009fa2:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009faa:	781b      	ldrb	r3, [r3, #0]
 8009fac:	061b      	lsls	r3, r3, #24
 8009fae:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8009fb4:	693b      	ldr	r3, [r7, #16]
 8009fb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009fba:	3307      	adds	r3, #7
 8009fbc:	781b      	ldrb	r3, [r3, #0]
 8009fbe:	b29a      	uxth	r2, r3
 8009fc0:	693b      	ldr	r3, [r7, #16]
 8009fc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009fc6:	3306      	adds	r3, #6
 8009fc8:	781b      	ldrb	r3, [r3, #0]
 8009fca:	b29b      	uxth	r3, r3
 8009fcc:	021b      	lsls	r3, r3, #8
 8009fce:	b29b      	uxth	r3, r3
 8009fd0:	4313      	orrs	r3, r2
 8009fd2:	b29a      	uxth	r2, r3
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	809a      	strh	r2, [r3, #4]
      break;
 8009fd8:	bf00      	nop
  }

  return error;
 8009fda:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3718      	adds	r7, #24
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}

08009fe4 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b086      	sub	sp, #24
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	60f8      	str	r0, [r7, #12]
 8009fec:	460b      	mov	r3, r1
 8009fee:	607a      	str	r2, [r7, #4]
 8009ff0:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8009ff2:	2302      	movs	r3, #2
 8009ff4:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ffc:	69db      	ldr	r3, [r3, #28]
 8009ffe:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a000:	693b      	ldr	r3, [r7, #16]
 800a002:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a006:	2b01      	cmp	r3, #1
 800a008:	d002      	beq.n	800a010 <USBH_MSC_SCSI_Inquiry+0x2c>
 800a00a:	2b02      	cmp	r3, #2
 800a00c:	d03d      	beq.n	800a08a <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800a00e:	e089      	b.n	800a124 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800a010:	693b      	ldr	r3, [r7, #16]
 800a012:	2224      	movs	r2, #36	; 0x24
 800a014:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a016:	693b      	ldr	r3, [r7, #16]
 800a018:	2280      	movs	r2, #128	; 0x80
 800a01a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a01e:	693b      	ldr	r3, [r7, #16]
 800a020:	220a      	movs	r2, #10
 800a022:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800a026:	693b      	ldr	r3, [r7, #16]
 800a028:	3363      	adds	r3, #99	; 0x63
 800a02a:	220a      	movs	r2, #10
 800a02c:	2100      	movs	r1, #0
 800a02e:	4618      	mov	r0, r3
 800a030:	f002 f900 	bl	800c234 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	2212      	movs	r2, #18
 800a038:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800a03c:	7afb      	ldrb	r3, [r7, #11]
 800a03e:	015b      	lsls	r3, r3, #5
 800a040:	b2da      	uxtb	r2, r3
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800a048:	693b      	ldr	r3, [r7, #16]
 800a04a:	2200      	movs	r2, #0
 800a04c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800a050:	693b      	ldr	r3, [r7, #16]
 800a052:	2200      	movs	r2, #0
 800a054:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	2224      	movs	r2, #36	; 0x24
 800a05c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800a060:	693b      	ldr	r3, [r7, #16]
 800a062:	2200      	movs	r2, #0
 800a064:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a068:	693b      	ldr	r3, [r7, #16]
 800a06a:	2201      	movs	r2, #1
 800a06c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a070:	693b      	ldr	r3, [r7, #16]
 800a072:	2202      	movs	r2, #2
 800a074:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a078:	693b      	ldr	r3, [r7, #16]
 800a07a:	f103 0210 	add.w	r2, r3, #16
 800a07e:	693b      	ldr	r3, [r7, #16]
 800a080:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a084:	2301      	movs	r3, #1
 800a086:	75fb      	strb	r3, [r7, #23]
      break;
 800a088:	e04c      	b.n	800a124 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a08a:	7afb      	ldrb	r3, [r7, #11]
 800a08c:	4619      	mov	r1, r3
 800a08e:	68f8      	ldr	r0, [r7, #12]
 800a090:	f7ff fcac 	bl	80099ec <USBH_MSC_BOT_Process>
 800a094:	4603      	mov	r3, r0
 800a096:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a098:	7dfb      	ldrb	r3, [r7, #23]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d141      	bne.n	800a122 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800a09e:	2222      	movs	r2, #34	; 0x22
 800a0a0:	2100      	movs	r1, #0
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f002 f8c6 	bl	800c234 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a0ae:	781b      	ldrb	r3, [r3, #0]
 800a0b0:	f003 031f 	and.w	r3, r3, #31
 800a0b4:	b2da      	uxtb	r2, r3
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a0c0:	781b      	ldrb	r3, [r3, #0]
 800a0c2:	095b      	lsrs	r3, r3, #5
 800a0c4:	b2da      	uxtb	r2, r3
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800a0ca:	693b      	ldr	r3, [r7, #16]
 800a0cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a0d0:	3301      	adds	r3, #1
 800a0d2:	781b      	ldrb	r3, [r3, #0]
 800a0d4:	b25b      	sxtb	r3, r3
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	da03      	bge.n	800a0e2 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2201      	movs	r2, #1
 800a0de:	709a      	strb	r2, [r3, #2]
 800a0e0:	e002      	b.n	800a0e8 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	1cd8      	adds	r0, r3, #3
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a0f2:	3308      	adds	r3, #8
 800a0f4:	2208      	movs	r2, #8
 800a0f6:	4619      	mov	r1, r3
 800a0f8:	f002 f88e 	bl	800c218 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f103 000c 	add.w	r0, r3, #12
 800a102:	693b      	ldr	r3, [r7, #16]
 800a104:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a108:	3310      	adds	r3, #16
 800a10a:	2210      	movs	r2, #16
 800a10c:	4619      	mov	r1, r3
 800a10e:	f002 f883 	bl	800c218 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	331d      	adds	r3, #29
 800a116:	693a      	ldr	r2, [r7, #16]
 800a118:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800a11c:	3220      	adds	r2, #32
 800a11e:	6812      	ldr	r2, [r2, #0]
 800a120:	601a      	str	r2, [r3, #0]
      break;
 800a122:	bf00      	nop
  }

  return error;
 800a124:	7dfb      	ldrb	r3, [r7, #23]
}
 800a126:	4618      	mov	r0, r3
 800a128:	3718      	adds	r7, #24
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}

0800a12e <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800a12e:	b580      	push	{r7, lr}
 800a130:	b086      	sub	sp, #24
 800a132:	af00      	add	r7, sp, #0
 800a134:	60f8      	str	r0, [r7, #12]
 800a136:	460b      	mov	r3, r1
 800a138:	607a      	str	r2, [r7, #4]
 800a13a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a13c:	2302      	movs	r3, #2
 800a13e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a146:	69db      	ldr	r3, [r3, #28]
 800a148:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a150:	2b01      	cmp	r3, #1
 800a152:	d002      	beq.n	800a15a <USBH_MSC_SCSI_RequestSense+0x2c>
 800a154:	2b02      	cmp	r3, #2
 800a156:	d03d      	beq.n	800a1d4 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800a158:	e05d      	b.n	800a216 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800a15a:	693b      	ldr	r3, [r7, #16]
 800a15c:	220e      	movs	r2, #14
 800a15e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a160:	693b      	ldr	r3, [r7, #16]
 800a162:	2280      	movs	r2, #128	; 0x80
 800a164:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a168:	693b      	ldr	r3, [r7, #16]
 800a16a:	220a      	movs	r2, #10
 800a16c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a170:	693b      	ldr	r3, [r7, #16]
 800a172:	3363      	adds	r3, #99	; 0x63
 800a174:	2210      	movs	r2, #16
 800a176:	2100      	movs	r1, #0
 800a178:	4618      	mov	r0, r3
 800a17a:	f002 f85b 	bl	800c234 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800a17e:	693b      	ldr	r3, [r7, #16]
 800a180:	2203      	movs	r2, #3
 800a182:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800a186:	7afb      	ldrb	r3, [r7, #11]
 800a188:	015b      	lsls	r3, r3, #5
 800a18a:	b2da      	uxtb	r2, r3
 800a18c:	693b      	ldr	r3, [r7, #16]
 800a18e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800a192:	693b      	ldr	r3, [r7, #16]
 800a194:	2200      	movs	r2, #0
 800a196:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800a19a:	693b      	ldr	r3, [r7, #16]
 800a19c:	2200      	movs	r2, #0
 800a19e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800a1a2:	693b      	ldr	r3, [r7, #16]
 800a1a4:	220e      	movs	r2, #14
 800a1a6:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800a1aa:	693b      	ldr	r3, [r7, #16]
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a1b2:	693b      	ldr	r3, [r7, #16]
 800a1b4:	2201      	movs	r2, #1
 800a1b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	2202      	movs	r2, #2
 800a1be:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a1c2:	693b      	ldr	r3, [r7, #16]
 800a1c4:	f103 0210 	add.w	r2, r3, #16
 800a1c8:	693b      	ldr	r3, [r7, #16]
 800a1ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	75fb      	strb	r3, [r7, #23]
      break;
 800a1d2:	e020      	b.n	800a216 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a1d4:	7afb      	ldrb	r3, [r7, #11]
 800a1d6:	4619      	mov	r1, r3
 800a1d8:	68f8      	ldr	r0, [r7, #12]
 800a1da:	f7ff fc07 	bl	80099ec <USBH_MSC_BOT_Process>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a1e2:	7dfb      	ldrb	r3, [r7, #23]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d115      	bne.n	800a214 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800a1e8:	693b      	ldr	r3, [r7, #16]
 800a1ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1ee:	3302      	adds	r3, #2
 800a1f0:	781b      	ldrb	r3, [r3, #0]
 800a1f2:	f003 030f 	and.w	r3, r3, #15
 800a1f6:	b2da      	uxtb	r2, r3
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800a1fc:	693b      	ldr	r3, [r7, #16]
 800a1fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a202:	7b1a      	ldrb	r2, [r3, #12]
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a20e:	7b5a      	ldrb	r2, [r3, #13]
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	709a      	strb	r2, [r3, #2]
      break;
 800a214:	bf00      	nop
  }

  return error;
 800a216:	7dfb      	ldrb	r3, [r7, #23]
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3718      	adds	r7, #24
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}

0800a220 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b086      	sub	sp, #24
 800a224:	af00      	add	r7, sp, #0
 800a226:	60f8      	str	r0, [r7, #12]
 800a228:	607a      	str	r2, [r7, #4]
 800a22a:	603b      	str	r3, [r7, #0]
 800a22c:	460b      	mov	r3, r1
 800a22e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a230:	2302      	movs	r3, #2
 800a232:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a23a:	69db      	ldr	r3, [r3, #28]
 800a23c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a244:	2b01      	cmp	r3, #1
 800a246:	d002      	beq.n	800a24e <USBH_MSC_SCSI_Write+0x2e>
 800a248:	2b02      	cmp	r3, #2
 800a24a:	d047      	beq.n	800a2dc <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a24c:	e04e      	b.n	800a2ec <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800a24e:	693b      	ldr	r3, [r7, #16]
 800a250:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800a254:	461a      	mov	r2, r3
 800a256:	6a3b      	ldr	r3, [r7, #32]
 800a258:	fb03 f202 	mul.w	r2, r3, r2
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800a260:	693b      	ldr	r3, [r7, #16]
 800a262:	2200      	movs	r2, #0
 800a264:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a268:	693b      	ldr	r3, [r7, #16]
 800a26a:	220a      	movs	r2, #10
 800a26c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	3363      	adds	r3, #99	; 0x63
 800a274:	2210      	movs	r2, #16
 800a276:	2100      	movs	r1, #0
 800a278:	4618      	mov	r0, r3
 800a27a:	f001 ffdb 	bl	800c234 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800a27e:	693b      	ldr	r3, [r7, #16]
 800a280:	222a      	movs	r2, #42	; 0x2a
 800a282:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800a286:	79fa      	ldrb	r2, [r7, #7]
 800a288:	693b      	ldr	r3, [r7, #16]
 800a28a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800a28e:	79ba      	ldrb	r2, [r7, #6]
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800a296:	797a      	ldrb	r2, [r7, #5]
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800a29e:	1d3b      	adds	r3, r7, #4
 800a2a0:	781a      	ldrb	r2, [r3, #0]
 800a2a2:	693b      	ldr	r3, [r7, #16]
 800a2a4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800a2a8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800a2b2:	f107 0320 	add.w	r3, r7, #32
 800a2b6:	781a      	ldrb	r2, [r3, #0]
 800a2b8:	693b      	ldr	r3, [r7, #16]
 800a2ba:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a2be:	693b      	ldr	r3, [r7, #16]
 800a2c0:	2201      	movs	r2, #1
 800a2c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a2c6:	693b      	ldr	r3, [r7, #16]
 800a2c8:	2202      	movs	r2, #2
 800a2ca:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800a2ce:	693b      	ldr	r3, [r7, #16]
 800a2d0:	683a      	ldr	r2, [r7, #0]
 800a2d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a2d6:	2301      	movs	r3, #1
 800a2d8:	75fb      	strb	r3, [r7, #23]
      break;
 800a2da:	e007      	b.n	800a2ec <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a2dc:	7afb      	ldrb	r3, [r7, #11]
 800a2de:	4619      	mov	r1, r3
 800a2e0:	68f8      	ldr	r0, [r7, #12]
 800a2e2:	f7ff fb83 	bl	80099ec <USBH_MSC_BOT_Process>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	75fb      	strb	r3, [r7, #23]
      break;
 800a2ea:	bf00      	nop
  }

  return error;
 800a2ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	3718      	adds	r7, #24
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}

0800a2f6 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800a2f6:	b580      	push	{r7, lr}
 800a2f8:	b086      	sub	sp, #24
 800a2fa:	af00      	add	r7, sp, #0
 800a2fc:	60f8      	str	r0, [r7, #12]
 800a2fe:	607a      	str	r2, [r7, #4]
 800a300:	603b      	str	r3, [r7, #0]
 800a302:	460b      	mov	r3, r1
 800a304:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a306:	2302      	movs	r3, #2
 800a308:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a310:	69db      	ldr	r3, [r3, #28]
 800a312:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a31a:	2b01      	cmp	r3, #1
 800a31c:	d002      	beq.n	800a324 <USBH_MSC_SCSI_Read+0x2e>
 800a31e:	2b02      	cmp	r3, #2
 800a320:	d047      	beq.n	800a3b2 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a322:	e04e      	b.n	800a3c2 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800a324:	693b      	ldr	r3, [r7, #16]
 800a326:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800a32a:	461a      	mov	r2, r3
 800a32c:	6a3b      	ldr	r3, [r7, #32]
 800a32e:	fb03 f202 	mul.w	r2, r3, r2
 800a332:	693b      	ldr	r3, [r7, #16]
 800a334:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a336:	693b      	ldr	r3, [r7, #16]
 800a338:	2280      	movs	r2, #128	; 0x80
 800a33a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a33e:	693b      	ldr	r3, [r7, #16]
 800a340:	220a      	movs	r2, #10
 800a342:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a346:	693b      	ldr	r3, [r7, #16]
 800a348:	3363      	adds	r3, #99	; 0x63
 800a34a:	2210      	movs	r2, #16
 800a34c:	2100      	movs	r1, #0
 800a34e:	4618      	mov	r0, r3
 800a350:	f001 ff70 	bl	800c234 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	2228      	movs	r2, #40	; 0x28
 800a358:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800a35c:	79fa      	ldrb	r2, [r7, #7]
 800a35e:	693b      	ldr	r3, [r7, #16]
 800a360:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800a364:	79ba      	ldrb	r2, [r7, #6]
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800a36c:	797a      	ldrb	r2, [r7, #5]
 800a36e:	693b      	ldr	r3, [r7, #16]
 800a370:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800a374:	1d3b      	adds	r3, r7, #4
 800a376:	781a      	ldrb	r2, [r3, #0]
 800a378:	693b      	ldr	r3, [r7, #16]
 800a37a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800a37e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a382:	693b      	ldr	r3, [r7, #16]
 800a384:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800a388:	f107 0320 	add.w	r3, r7, #32
 800a38c:	781a      	ldrb	r2, [r3, #0]
 800a38e:	693b      	ldr	r3, [r7, #16]
 800a390:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a394:	693b      	ldr	r3, [r7, #16]
 800a396:	2201      	movs	r2, #1
 800a398:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a39c:	693b      	ldr	r3, [r7, #16]
 800a39e:	2202      	movs	r2, #2
 800a3a0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800a3a4:	693b      	ldr	r3, [r7, #16]
 800a3a6:	683a      	ldr	r2, [r7, #0]
 800a3a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	75fb      	strb	r3, [r7, #23]
      break;
 800a3b0:	e007      	b.n	800a3c2 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a3b2:	7afb      	ldrb	r3, [r7, #11]
 800a3b4:	4619      	mov	r1, r3
 800a3b6:	68f8      	ldr	r0, [r7, #12]
 800a3b8:	f7ff fb18 	bl	80099ec <USBH_MSC_BOT_Process>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	75fb      	strb	r3, [r7, #23]
      break;
 800a3c0:	bf00      	nop
  }

  return error;
 800a3c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	3718      	adds	r7, #24
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}

0800a3cc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b084      	sub	sp, #16
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	60f8      	str	r0, [r7, #12]
 800a3d4:	60b9      	str	r1, [r7, #8]
 800a3d6:	4613      	mov	r3, r2
 800a3d8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d101      	bne.n	800a3e4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a3e0:	2302      	movs	r3, #2
 800a3e2:	e029      	b.n	800a438 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	79fa      	ldrb	r2, [r7, #7]
 800a3e8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800a3fc:	68f8      	ldr	r0, [r7, #12]
 800a3fe:	f000 f81f 	bl	800a440 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	2200      	movs	r2, #0
 800a406:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	2200      	movs	r2, #0
 800a40e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	2200      	movs	r2, #0
 800a416:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	2200      	movs	r2, #0
 800a41e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d003      	beq.n	800a430 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	68ba      	ldr	r2, [r7, #8]
 800a42c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800a430:	68f8      	ldr	r0, [r7, #12]
 800a432:	f001 fc93 	bl	800bd5c <USBH_LL_Init>

  return USBH_OK;
 800a436:	2300      	movs	r3, #0
}
 800a438:	4618      	mov	r0, r3
 800a43a:	3710      	adds	r7, #16
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}

0800a440 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a440:	b480      	push	{r7}
 800a442:	b085      	sub	sp, #20
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a448:	2300      	movs	r3, #0
 800a44a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a44c:	2300      	movs	r3, #0
 800a44e:	60fb      	str	r3, [r7, #12]
 800a450:	e009      	b.n	800a466 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a452:	687a      	ldr	r2, [r7, #4]
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	33e0      	adds	r3, #224	; 0xe0
 800a458:	009b      	lsls	r3, r3, #2
 800a45a:	4413      	add	r3, r2
 800a45c:	2200      	movs	r2, #0
 800a45e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	3301      	adds	r3, #1
 800a464:	60fb      	str	r3, [r7, #12]
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	2b0e      	cmp	r3, #14
 800a46a:	d9f2      	bls.n	800a452 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a46c:	2300      	movs	r3, #0
 800a46e:	60fb      	str	r3, [r7, #12]
 800a470:	e009      	b.n	800a486 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a472:	687a      	ldr	r2, [r7, #4]
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	4413      	add	r3, r2
 800a478:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a47c:	2200      	movs	r2, #0
 800a47e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	3301      	adds	r3, #1
 800a484:	60fb      	str	r3, [r7, #12]
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a48c:	d3f1      	bcc.n	800a472 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2200      	movs	r2, #0
 800a492:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2200      	movs	r2, #0
 800a498:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2201      	movs	r2, #1
 800a49e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2240      	movs	r2, #64	; 0x40
 800a4b2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2201      	movs	r2, #1
 800a4c6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800a4da:	2300      	movs	r3, #0
}
 800a4dc:	4618      	mov	r0, r3
 800a4de:	3714      	adds	r7, #20
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e6:	4770      	bx	lr

0800a4e8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a4e8:	b480      	push	{r7}
 800a4ea:	b085      	sub	sp, #20
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
 800a4f0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d016      	beq.n	800a52a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a502:	2b00      	cmp	r3, #0
 800a504:	d10e      	bne.n	800a524 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a50c:	1c59      	adds	r1, r3, #1
 800a50e:	687a      	ldr	r2, [r7, #4]
 800a510:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800a514:	687a      	ldr	r2, [r7, #4]
 800a516:	33de      	adds	r3, #222	; 0xde
 800a518:	6839      	ldr	r1, [r7, #0]
 800a51a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a51e:	2300      	movs	r3, #0
 800a520:	73fb      	strb	r3, [r7, #15]
 800a522:	e004      	b.n	800a52e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a524:	2302      	movs	r3, #2
 800a526:	73fb      	strb	r3, [r7, #15]
 800a528:	e001      	b.n	800a52e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a52a:	2302      	movs	r3, #2
 800a52c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a52e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a530:	4618      	mov	r0, r3
 800a532:	3714      	adds	r7, #20
 800a534:	46bd      	mov	sp, r7
 800a536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53a:	4770      	bx	lr

0800a53c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a53c:	b480      	push	{r7}
 800a53e:	b085      	sub	sp, #20
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
 800a544:	460b      	mov	r3, r1
 800a546:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a548:	2300      	movs	r3, #0
 800a54a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800a552:	78fa      	ldrb	r2, [r7, #3]
 800a554:	429a      	cmp	r2, r3
 800a556:	d204      	bcs.n	800a562 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	78fa      	ldrb	r2, [r7, #3]
 800a55c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800a560:	e001      	b.n	800a566 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a562:	2302      	movs	r3, #2
 800a564:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a566:	7bfb      	ldrb	r3, [r7, #15]
}
 800a568:	4618      	mov	r0, r3
 800a56a:	3714      	adds	r7, #20
 800a56c:	46bd      	mov	sp, r7
 800a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a572:	4770      	bx	lr

0800a574 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a574:	b480      	push	{r7}
 800a576:	b087      	sub	sp, #28
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
 800a57c:	4608      	mov	r0, r1
 800a57e:	4611      	mov	r1, r2
 800a580:	461a      	mov	r2, r3
 800a582:	4603      	mov	r3, r0
 800a584:	70fb      	strb	r3, [r7, #3]
 800a586:	460b      	mov	r3, r1
 800a588:	70bb      	strb	r3, [r7, #2]
 800a58a:	4613      	mov	r3, r2
 800a58c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a58e:	2300      	movs	r3, #0
 800a590:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800a592:	2300      	movs	r3, #0
 800a594:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a59c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a59e:	e025      	b.n	800a5ec <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a5a0:	7dfb      	ldrb	r3, [r7, #23]
 800a5a2:	221a      	movs	r2, #26
 800a5a4:	fb02 f303 	mul.w	r3, r2, r3
 800a5a8:	3308      	adds	r3, #8
 800a5aa:	68fa      	ldr	r2, [r7, #12]
 800a5ac:	4413      	add	r3, r2
 800a5ae:	3302      	adds	r3, #2
 800a5b0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a5b2:	693b      	ldr	r3, [r7, #16]
 800a5b4:	795b      	ldrb	r3, [r3, #5]
 800a5b6:	78fa      	ldrb	r2, [r7, #3]
 800a5b8:	429a      	cmp	r2, r3
 800a5ba:	d002      	beq.n	800a5c2 <USBH_FindInterface+0x4e>
 800a5bc:	78fb      	ldrb	r3, [r7, #3]
 800a5be:	2bff      	cmp	r3, #255	; 0xff
 800a5c0:	d111      	bne.n	800a5e6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a5c6:	78ba      	ldrb	r2, [r7, #2]
 800a5c8:	429a      	cmp	r2, r3
 800a5ca:	d002      	beq.n	800a5d2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a5cc:	78bb      	ldrb	r3, [r7, #2]
 800a5ce:	2bff      	cmp	r3, #255	; 0xff
 800a5d0:	d109      	bne.n	800a5e6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a5d6:	787a      	ldrb	r2, [r7, #1]
 800a5d8:	429a      	cmp	r2, r3
 800a5da:	d002      	beq.n	800a5e2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a5dc:	787b      	ldrb	r3, [r7, #1]
 800a5de:	2bff      	cmp	r3, #255	; 0xff
 800a5e0:	d101      	bne.n	800a5e6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a5e2:	7dfb      	ldrb	r3, [r7, #23]
 800a5e4:	e006      	b.n	800a5f4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a5e6:	7dfb      	ldrb	r3, [r7, #23]
 800a5e8:	3301      	adds	r3, #1
 800a5ea:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a5ec:	7dfb      	ldrb	r3, [r7, #23]
 800a5ee:	2b01      	cmp	r3, #1
 800a5f0:	d9d6      	bls.n	800a5a0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a5f2:	23ff      	movs	r3, #255	; 0xff
}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	371c      	adds	r7, #28
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fe:	4770      	bx	lr

0800a600 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b082      	sub	sp, #8
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	f001 fbe3 	bl	800bdd4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800a60e:	2101      	movs	r1, #1
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f001 fcfc 	bl	800c00e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a616:	2300      	movs	r3, #0
}
 800a618:	4618      	mov	r0, r3
 800a61a:	3708      	adds	r7, #8
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}

0800a620 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b088      	sub	sp, #32
 800a624:	af04      	add	r7, sp, #16
 800a626:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a628:	2302      	movs	r3, #2
 800a62a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a62c:	2300      	movs	r3, #0
 800a62e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a636:	b2db      	uxtb	r3, r3
 800a638:	2b01      	cmp	r3, #1
 800a63a:	d102      	bne.n	800a642 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2203      	movs	r2, #3
 800a640:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	781b      	ldrb	r3, [r3, #0]
 800a646:	b2db      	uxtb	r3, r3
 800a648:	2b0b      	cmp	r3, #11
 800a64a:	f200 81b3 	bhi.w	800a9b4 <USBH_Process+0x394>
 800a64e:	a201      	add	r2, pc, #4	; (adr r2, 800a654 <USBH_Process+0x34>)
 800a650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a654:	0800a685 	.word	0x0800a685
 800a658:	0800a6b7 	.word	0x0800a6b7
 800a65c:	0800a71f 	.word	0x0800a71f
 800a660:	0800a94f 	.word	0x0800a94f
 800a664:	0800a9b5 	.word	0x0800a9b5
 800a668:	0800a7c3 	.word	0x0800a7c3
 800a66c:	0800a8f5 	.word	0x0800a8f5
 800a670:	0800a7f9 	.word	0x0800a7f9
 800a674:	0800a819 	.word	0x0800a819
 800a678:	0800a839 	.word	0x0800a839
 800a67c:	0800a867 	.word	0x0800a867
 800a680:	0800a937 	.word	0x0800a937
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a68a:	b2db      	uxtb	r3, r3
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	f000 8193 	beq.w	800a9b8 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2201      	movs	r2, #1
 800a696:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a698:	20c8      	movs	r0, #200	; 0xc8
 800a69a:	f001 fd2f 	bl	800c0fc <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800a69e:	6878      	ldr	r0, [r7, #4]
 800a6a0:	f001 fbf5 	bl	800be8e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a6b4:	e180      	b.n	800a9b8 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800a6bc:	2b01      	cmp	r3, #1
 800a6be:	d107      	bne.n	800a6d0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2202      	movs	r2, #2
 800a6cc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a6ce:	e182      	b.n	800a9d6 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a6d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a6da:	d914      	bls.n	800a706 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a6e2:	3301      	adds	r3, #1
 800a6e4:	b2da      	uxtb	r2, r3
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a6f2:	2b03      	cmp	r3, #3
 800a6f4:	d903      	bls.n	800a6fe <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	220d      	movs	r2, #13
 800a6fa:	701a      	strb	r2, [r3, #0]
      break;
 800a6fc:	e16b      	b.n	800a9d6 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2200      	movs	r2, #0
 800a702:	701a      	strb	r2, [r3, #0]
      break;
 800a704:	e167      	b.n	800a9d6 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a70c:	f103 020a 	add.w	r2, r3, #10
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800a716:	200a      	movs	r0, #10
 800a718:	f001 fcf0 	bl	800c0fc <USBH_Delay>
      break;
 800a71c:	e15b      	b.n	800a9d6 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a724:	2b00      	cmp	r3, #0
 800a726:	d005      	beq.n	800a734 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a72e:	2104      	movs	r1, #4
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a734:	2064      	movs	r0, #100	; 0x64
 800a736:	f001 fce1 	bl	800c0fc <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f001 fb80 	bl	800be40 <USBH_LL_GetSpeed>
 800a740:	4603      	mov	r3, r0
 800a742:	461a      	mov	r2, r3
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2205      	movs	r2, #5
 800a74e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a750:	2100      	movs	r1, #0
 800a752:	6878      	ldr	r0, [r7, #4]
 800a754:	f001 f92f 	bl	800b9b6 <USBH_AllocPipe>
 800a758:	4603      	mov	r3, r0
 800a75a:	461a      	mov	r2, r3
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a760:	2180      	movs	r1, #128	; 0x80
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f001 f927 	bl	800b9b6 <USBH_AllocPipe>
 800a768:	4603      	mov	r3, r0
 800a76a:	461a      	mov	r2, r3
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	7919      	ldrb	r1, [r3, #4]
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a780:	687a      	ldr	r2, [r7, #4]
 800a782:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a784:	b292      	uxth	r2, r2
 800a786:	9202      	str	r2, [sp, #8]
 800a788:	2200      	movs	r2, #0
 800a78a:	9201      	str	r2, [sp, #4]
 800a78c:	9300      	str	r3, [sp, #0]
 800a78e:	4603      	mov	r3, r0
 800a790:	2280      	movs	r2, #128	; 0x80
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f001 f8e0 	bl	800b958 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	7959      	ldrb	r1, [r3, #5]
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a7a8:	687a      	ldr	r2, [r7, #4]
 800a7aa:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a7ac:	b292      	uxth	r2, r2
 800a7ae:	9202      	str	r2, [sp, #8]
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	9201      	str	r2, [sp, #4]
 800a7b4:	9300      	str	r3, [sp, #0]
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f001 f8cc 	bl	800b958 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a7c0:	e109      	b.n	800a9d6 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f000 f90c 	bl	800a9e0 <USBH_HandleEnum>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a7cc:	7bbb      	ldrb	r3, [r7, #14]
 800a7ce:	b2db      	uxtb	r3, r3
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	f040 80f3 	bne.w	800a9bc <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800a7e4:	2b01      	cmp	r3, #1
 800a7e6:	d103      	bne.n	800a7f0 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2208      	movs	r2, #8
 800a7ec:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a7ee:	e0e5      	b.n	800a9bc <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2207      	movs	r2, #7
 800a7f4:	701a      	strb	r2, [r3, #0]
      break;
 800a7f6:	e0e1      	b.n	800a9bc <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	f000 80de 	beq.w	800a9c0 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a80a:	2101      	movs	r1, #1
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2208      	movs	r2, #8
 800a814:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800a816:	e0d3      	b.n	800a9c0 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800a81e:	b29b      	uxth	r3, r3
 800a820:	4619      	mov	r1, r3
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f000 fc20 	bl	800b068 <USBH_SetCfg>
 800a828:	4603      	mov	r3, r0
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	f040 80ca 	bne.w	800a9c4 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2209      	movs	r2, #9
 800a834:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a836:	e0c5      	b.n	800a9c4 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800a83e:	f003 0320 	and.w	r3, r3, #32
 800a842:	2b00      	cmp	r3, #0
 800a844:	d00b      	beq.n	800a85e <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800a846:	2101      	movs	r1, #1
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f000 fc30 	bl	800b0ae <USBH_SetFeature>
 800a84e:	4603      	mov	r3, r0
 800a850:	2b00      	cmp	r3, #0
 800a852:	f040 80b9 	bne.w	800a9c8 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	220a      	movs	r2, #10
 800a85a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a85c:	e0b4      	b.n	800a9c8 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	220a      	movs	r2, #10
 800a862:	701a      	strb	r2, [r3, #0]
      break;
 800a864:	e0b0      	b.n	800a9c8 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	f000 80ad 	beq.w	800a9cc <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2200      	movs	r2, #0
 800a876:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a87a:	2300      	movs	r3, #0
 800a87c:	73fb      	strb	r3, [r7, #15]
 800a87e:	e016      	b.n	800a8ae <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a880:	7bfa      	ldrb	r2, [r7, #15]
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	32de      	adds	r2, #222	; 0xde
 800a886:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a88a:	791a      	ldrb	r2, [r3, #4]
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800a892:	429a      	cmp	r2, r3
 800a894:	d108      	bne.n	800a8a8 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a896:	7bfa      	ldrb	r2, [r7, #15]
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	32de      	adds	r2, #222	; 0xde
 800a89c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800a8a6:	e005      	b.n	800a8b4 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a8a8:	7bfb      	ldrb	r3, [r7, #15]
 800a8aa:	3301      	adds	r3, #1
 800a8ac:	73fb      	strb	r3, [r7, #15]
 800a8ae:	7bfb      	ldrb	r3, [r7, #15]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d0e5      	beq.n	800a880 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d016      	beq.n	800a8ec <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a8c4:	689b      	ldr	r3, [r3, #8]
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	4798      	blx	r3
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d109      	bne.n	800a8e4 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2206      	movs	r2, #6
 800a8d4:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a8dc:	2103      	movs	r1, #3
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a8e2:	e073      	b.n	800a9cc <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	220d      	movs	r2, #13
 800a8e8:	701a      	strb	r2, [r3, #0]
      break;
 800a8ea:	e06f      	b.n	800a9cc <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	220d      	movs	r2, #13
 800a8f0:	701a      	strb	r2, [r3, #0]
      break;
 800a8f2:	e06b      	b.n	800a9cc <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d017      	beq.n	800a92e <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a904:	691b      	ldr	r3, [r3, #16]
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	4798      	blx	r3
 800a90a:	4603      	mov	r3, r0
 800a90c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a90e:	7bbb      	ldrb	r3, [r7, #14]
 800a910:	b2db      	uxtb	r3, r3
 800a912:	2b00      	cmp	r3, #0
 800a914:	d103      	bne.n	800a91e <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	220b      	movs	r2, #11
 800a91a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a91c:	e058      	b.n	800a9d0 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800a91e:	7bbb      	ldrb	r3, [r7, #14]
 800a920:	b2db      	uxtb	r3, r3
 800a922:	2b02      	cmp	r3, #2
 800a924:	d154      	bne.n	800a9d0 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	220d      	movs	r2, #13
 800a92a:	701a      	strb	r2, [r3, #0]
      break;
 800a92c:	e050      	b.n	800a9d0 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	220d      	movs	r2, #13
 800a932:	701a      	strb	r2, [r3, #0]
      break;
 800a934:	e04c      	b.n	800a9d0 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d049      	beq.n	800a9d4 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a946:	695b      	ldr	r3, [r3, #20]
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	4798      	blx	r3
      }
      break;
 800a94c:	e042      	b.n	800a9d4 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2200      	movs	r2, #0
 800a952:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f7ff fd72 	bl	800a440 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a962:	2b00      	cmp	r3, #0
 800a964:	d009      	beq.n	800a97a <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a96c:	68db      	ldr	r3, [r3, #12]
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2200      	movs	r2, #0
 800a976:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a980:	2b00      	cmp	r3, #0
 800a982:	d005      	beq.n	800a990 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a98a:	2105      	movs	r1, #5
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800a996:	b2db      	uxtb	r3, r3
 800a998:	2b01      	cmp	r3, #1
 800a99a:	d107      	bne.n	800a9ac <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2200      	movs	r2, #0
 800a9a0:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f7ff fe2b 	bl	800a600 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a9aa:	e014      	b.n	800a9d6 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f001 fa11 	bl	800bdd4 <USBH_LL_Start>
      break;
 800a9b2:	e010      	b.n	800a9d6 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800a9b4:	bf00      	nop
 800a9b6:	e00e      	b.n	800a9d6 <USBH_Process+0x3b6>
      break;
 800a9b8:	bf00      	nop
 800a9ba:	e00c      	b.n	800a9d6 <USBH_Process+0x3b6>
      break;
 800a9bc:	bf00      	nop
 800a9be:	e00a      	b.n	800a9d6 <USBH_Process+0x3b6>
    break;
 800a9c0:	bf00      	nop
 800a9c2:	e008      	b.n	800a9d6 <USBH_Process+0x3b6>
      break;
 800a9c4:	bf00      	nop
 800a9c6:	e006      	b.n	800a9d6 <USBH_Process+0x3b6>
      break;
 800a9c8:	bf00      	nop
 800a9ca:	e004      	b.n	800a9d6 <USBH_Process+0x3b6>
      break;
 800a9cc:	bf00      	nop
 800a9ce:	e002      	b.n	800a9d6 <USBH_Process+0x3b6>
      break;
 800a9d0:	bf00      	nop
 800a9d2:	e000      	b.n	800a9d6 <USBH_Process+0x3b6>
      break;
 800a9d4:	bf00      	nop
  }
  return USBH_OK;
 800a9d6:	2300      	movs	r3, #0
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	3710      	adds	r7, #16
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bd80      	pop	{r7, pc}

0800a9e0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b088      	sub	sp, #32
 800a9e4:	af04      	add	r7, sp, #16
 800a9e6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a9e8:	2301      	movs	r3, #1
 800a9ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	785b      	ldrb	r3, [r3, #1]
 800a9f4:	2b07      	cmp	r3, #7
 800a9f6:	f200 81c1 	bhi.w	800ad7c <USBH_HandleEnum+0x39c>
 800a9fa:	a201      	add	r2, pc, #4	; (adr r2, 800aa00 <USBH_HandleEnum+0x20>)
 800a9fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa00:	0800aa21 	.word	0x0800aa21
 800aa04:	0800aadf 	.word	0x0800aadf
 800aa08:	0800ab49 	.word	0x0800ab49
 800aa0c:	0800abd7 	.word	0x0800abd7
 800aa10:	0800ac41 	.word	0x0800ac41
 800aa14:	0800acb1 	.word	0x0800acb1
 800aa18:	0800acf7 	.word	0x0800acf7
 800aa1c:	0800ad3d 	.word	0x0800ad3d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800aa20:	2108      	movs	r1, #8
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f000 fa50 	bl	800aec8 <USBH_Get_DevDesc>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aa2c:	7bbb      	ldrb	r3, [r7, #14]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d130      	bne.n	800aa94 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2201      	movs	r2, #1
 800aa40:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	7919      	ldrb	r1, [r3, #4]
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800aa52:	687a      	ldr	r2, [r7, #4]
 800aa54:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800aa56:	b292      	uxth	r2, r2
 800aa58:	9202      	str	r2, [sp, #8]
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	9201      	str	r2, [sp, #4]
 800aa5e:	9300      	str	r3, [sp, #0]
 800aa60:	4603      	mov	r3, r0
 800aa62:	2280      	movs	r2, #128	; 0x80
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f000 ff77 	bl	800b958 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	7959      	ldrb	r1, [r3, #5]
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800aa7a:	687a      	ldr	r2, [r7, #4]
 800aa7c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800aa7e:	b292      	uxth	r2, r2
 800aa80:	9202      	str	r2, [sp, #8]
 800aa82:	2200      	movs	r2, #0
 800aa84:	9201      	str	r2, [sp, #4]
 800aa86:	9300      	str	r3, [sp, #0]
 800aa88:	4603      	mov	r3, r0
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f000 ff63 	bl	800b958 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800aa92:	e175      	b.n	800ad80 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aa94:	7bbb      	ldrb	r3, [r7, #14]
 800aa96:	2b03      	cmp	r3, #3
 800aa98:	f040 8172 	bne.w	800ad80 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aaa2:	3301      	adds	r3, #1
 800aaa4:	b2da      	uxtb	r2, r3
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aab2:	2b03      	cmp	r3, #3
 800aab4:	d903      	bls.n	800aabe <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	220d      	movs	r2, #13
 800aaba:	701a      	strb	r2, [r3, #0]
      break;
 800aabc:	e160      	b.n	800ad80 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	795b      	ldrb	r3, [r3, #5]
 800aac2:	4619      	mov	r1, r3
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	f000 ff97 	bl	800b9f8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	791b      	ldrb	r3, [r3, #4]
 800aace:	4619      	mov	r1, r3
 800aad0:	6878      	ldr	r0, [r7, #4]
 800aad2:	f000 ff91 	bl	800b9f8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2200      	movs	r2, #0
 800aada:	701a      	strb	r2, [r3, #0]
      break;
 800aadc:	e150      	b.n	800ad80 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800aade:	2112      	movs	r1, #18
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f000 f9f1 	bl	800aec8 <USBH_Get_DevDesc>
 800aae6:	4603      	mov	r3, r0
 800aae8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aaea:	7bbb      	ldrb	r3, [r7, #14]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d103      	bne.n	800aaf8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2202      	movs	r2, #2
 800aaf4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800aaf6:	e145      	b.n	800ad84 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aaf8:	7bbb      	ldrb	r3, [r7, #14]
 800aafa:	2b03      	cmp	r3, #3
 800aafc:	f040 8142 	bne.w	800ad84 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ab06:	3301      	adds	r3, #1
 800ab08:	b2da      	uxtb	r2, r3
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ab16:	2b03      	cmp	r3, #3
 800ab18:	d903      	bls.n	800ab22 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	220d      	movs	r2, #13
 800ab1e:	701a      	strb	r2, [r3, #0]
      break;
 800ab20:	e130      	b.n	800ad84 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	795b      	ldrb	r3, [r3, #5]
 800ab26:	4619      	mov	r1, r3
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f000 ff65 	bl	800b9f8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	791b      	ldrb	r3, [r3, #4]
 800ab32:	4619      	mov	r1, r3
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f000 ff5f 	bl	800b9f8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2200      	movs	r2, #0
 800ab44:	701a      	strb	r2, [r3, #0]
      break;
 800ab46:	e11d      	b.n	800ad84 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800ab48:	2101      	movs	r1, #1
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f000 fa68 	bl	800b020 <USBH_SetAddress>
 800ab50:	4603      	mov	r3, r0
 800ab52:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ab54:	7bbb      	ldrb	r3, [r7, #14]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d132      	bne.n	800abc0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800ab5a:	2002      	movs	r0, #2
 800ab5c:	f001 face 	bl	800c0fc <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2201      	movs	r2, #1
 800ab64:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2203      	movs	r2, #3
 800ab6c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	7919      	ldrb	r1, [r3, #4]
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ab7e:	687a      	ldr	r2, [r7, #4]
 800ab80:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ab82:	b292      	uxth	r2, r2
 800ab84:	9202      	str	r2, [sp, #8]
 800ab86:	2200      	movs	r2, #0
 800ab88:	9201      	str	r2, [sp, #4]
 800ab8a:	9300      	str	r3, [sp, #0]
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	2280      	movs	r2, #128	; 0x80
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f000 fee1 	bl	800b958 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	7959      	ldrb	r1, [r3, #5]
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800aba6:	687a      	ldr	r2, [r7, #4]
 800aba8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800abaa:	b292      	uxth	r2, r2
 800abac:	9202      	str	r2, [sp, #8]
 800abae:	2200      	movs	r2, #0
 800abb0:	9201      	str	r2, [sp, #4]
 800abb2:	9300      	str	r3, [sp, #0]
 800abb4:	4603      	mov	r3, r0
 800abb6:	2200      	movs	r2, #0
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f000 fecd 	bl	800b958 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800abbe:	e0e3      	b.n	800ad88 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800abc0:	7bbb      	ldrb	r3, [r7, #14]
 800abc2:	2b03      	cmp	r3, #3
 800abc4:	f040 80e0 	bne.w	800ad88 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	220d      	movs	r2, #13
 800abcc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2200      	movs	r2, #0
 800abd2:	705a      	strb	r2, [r3, #1]
      break;
 800abd4:	e0d8      	b.n	800ad88 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800abd6:	2109      	movs	r1, #9
 800abd8:	6878      	ldr	r0, [r7, #4]
 800abda:	f000 f99d 	bl	800af18 <USBH_Get_CfgDesc>
 800abde:	4603      	mov	r3, r0
 800abe0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800abe2:	7bbb      	ldrb	r3, [r7, #14]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d103      	bne.n	800abf0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2204      	movs	r2, #4
 800abec:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800abee:	e0cd      	b.n	800ad8c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800abf0:	7bbb      	ldrb	r3, [r7, #14]
 800abf2:	2b03      	cmp	r3, #3
 800abf4:	f040 80ca 	bne.w	800ad8c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800abfe:	3301      	adds	r3, #1
 800ac00:	b2da      	uxtb	r2, r3
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ac0e:	2b03      	cmp	r3, #3
 800ac10:	d903      	bls.n	800ac1a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	220d      	movs	r2, #13
 800ac16:	701a      	strb	r2, [r3, #0]
      break;
 800ac18:	e0b8      	b.n	800ad8c <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	795b      	ldrb	r3, [r3, #5]
 800ac1e:	4619      	mov	r1, r3
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	f000 fee9 	bl	800b9f8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	791b      	ldrb	r3, [r3, #4]
 800ac2a:	4619      	mov	r1, r3
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f000 fee3 	bl	800b9f8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2200      	movs	r2, #0
 800ac36:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	701a      	strb	r2, [r3, #0]
      break;
 800ac3e:	e0a5      	b.n	800ad8c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800ac46:	4619      	mov	r1, r3
 800ac48:	6878      	ldr	r0, [r7, #4]
 800ac4a:	f000 f965 	bl	800af18 <USBH_Get_CfgDesc>
 800ac4e:	4603      	mov	r3, r0
 800ac50:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ac52:	7bbb      	ldrb	r3, [r7, #14]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d103      	bne.n	800ac60 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	2205      	movs	r2, #5
 800ac5c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ac5e:	e097      	b.n	800ad90 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ac60:	7bbb      	ldrb	r3, [r7, #14]
 800ac62:	2b03      	cmp	r3, #3
 800ac64:	f040 8094 	bne.w	800ad90 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ac6e:	3301      	adds	r3, #1
 800ac70:	b2da      	uxtb	r2, r3
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ac7e:	2b03      	cmp	r3, #3
 800ac80:	d903      	bls.n	800ac8a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	220d      	movs	r2, #13
 800ac86:	701a      	strb	r2, [r3, #0]
      break;
 800ac88:	e082      	b.n	800ad90 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	795b      	ldrb	r3, [r3, #5]
 800ac8e:	4619      	mov	r1, r3
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f000 feb1 	bl	800b9f8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	791b      	ldrb	r3, [r3, #4]
 800ac9a:	4619      	mov	r1, r3
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f000 feab 	bl	800b9f8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2200      	movs	r2, #0
 800aca6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2200      	movs	r2, #0
 800acac:	701a      	strb	r2, [r3, #0]
      break;
 800acae:	e06f      	b.n	800ad90 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d019      	beq.n	800acee <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800acc6:	23ff      	movs	r3, #255	; 0xff
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f000 f949 	bl	800af60 <USBH_Get_StringDesc>
 800acce:	4603      	mov	r3, r0
 800acd0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800acd2:	7bbb      	ldrb	r3, [r7, #14]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d103      	bne.n	800ace0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2206      	movs	r2, #6
 800acdc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800acde:	e059      	b.n	800ad94 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ace0:	7bbb      	ldrb	r3, [r7, #14]
 800ace2:	2b03      	cmp	r3, #3
 800ace4:	d156      	bne.n	800ad94 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2206      	movs	r2, #6
 800acea:	705a      	strb	r2, [r3, #1]
      break;
 800acec:	e052      	b.n	800ad94 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2206      	movs	r2, #6
 800acf2:	705a      	strb	r2, [r3, #1]
      break;
 800acf4:	e04e      	b.n	800ad94 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d019      	beq.n	800ad34 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ad0c:	23ff      	movs	r3, #255	; 0xff
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	f000 f926 	bl	800af60 <USBH_Get_StringDesc>
 800ad14:	4603      	mov	r3, r0
 800ad16:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ad18:	7bbb      	ldrb	r3, [r7, #14]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d103      	bne.n	800ad26 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2207      	movs	r2, #7
 800ad22:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ad24:	e038      	b.n	800ad98 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ad26:	7bbb      	ldrb	r3, [r7, #14]
 800ad28:	2b03      	cmp	r3, #3
 800ad2a:	d135      	bne.n	800ad98 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2207      	movs	r2, #7
 800ad30:	705a      	strb	r2, [r3, #1]
      break;
 800ad32:	e031      	b.n	800ad98 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2207      	movs	r2, #7
 800ad38:	705a      	strb	r2, [r3, #1]
      break;
 800ad3a:	e02d      	b.n	800ad98 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d017      	beq.n	800ad76 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ad52:	23ff      	movs	r3, #255	; 0xff
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f000 f903 	bl	800af60 <USBH_Get_StringDesc>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ad5e:	7bbb      	ldrb	r3, [r7, #14]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d102      	bne.n	800ad6a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800ad64:	2300      	movs	r3, #0
 800ad66:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800ad68:	e018      	b.n	800ad9c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ad6a:	7bbb      	ldrb	r3, [r7, #14]
 800ad6c:	2b03      	cmp	r3, #3
 800ad6e:	d115      	bne.n	800ad9c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800ad70:	2300      	movs	r3, #0
 800ad72:	73fb      	strb	r3, [r7, #15]
      break;
 800ad74:	e012      	b.n	800ad9c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800ad76:	2300      	movs	r3, #0
 800ad78:	73fb      	strb	r3, [r7, #15]
      break;
 800ad7a:	e00f      	b.n	800ad9c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800ad7c:	bf00      	nop
 800ad7e:	e00e      	b.n	800ad9e <USBH_HandleEnum+0x3be>
      break;
 800ad80:	bf00      	nop
 800ad82:	e00c      	b.n	800ad9e <USBH_HandleEnum+0x3be>
      break;
 800ad84:	bf00      	nop
 800ad86:	e00a      	b.n	800ad9e <USBH_HandleEnum+0x3be>
      break;
 800ad88:	bf00      	nop
 800ad8a:	e008      	b.n	800ad9e <USBH_HandleEnum+0x3be>
      break;
 800ad8c:	bf00      	nop
 800ad8e:	e006      	b.n	800ad9e <USBH_HandleEnum+0x3be>
      break;
 800ad90:	bf00      	nop
 800ad92:	e004      	b.n	800ad9e <USBH_HandleEnum+0x3be>
      break;
 800ad94:	bf00      	nop
 800ad96:	e002      	b.n	800ad9e <USBH_HandleEnum+0x3be>
      break;
 800ad98:	bf00      	nop
 800ad9a:	e000      	b.n	800ad9e <USBH_HandleEnum+0x3be>
      break;
 800ad9c:	bf00      	nop
  }
  return Status;
 800ad9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ada0:	4618      	mov	r0, r3
 800ada2:	3710      	adds	r7, #16
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bd80      	pop	{r7, pc}

0800ada8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800ada8:	b480      	push	{r7}
 800adaa:	b083      	sub	sp, #12
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
 800adb0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	683a      	ldr	r2, [r7, #0]
 800adb6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800adba:	bf00      	nop
 800adbc:	370c      	adds	r7, #12
 800adbe:	46bd      	mov	sp, r7
 800adc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc4:	4770      	bx	lr

0800adc6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800adc6:	b580      	push	{r7, lr}
 800adc8:	b082      	sub	sp, #8
 800adca:	af00      	add	r7, sp, #0
 800adcc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800add4:	1c5a      	adds	r2, r3, #1
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f000 f804 	bl	800adea <USBH_HandleSof>
}
 800ade2:	bf00      	nop
 800ade4:	3708      	adds	r7, #8
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}

0800adea <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800adea:	b580      	push	{r7, lr}
 800adec:	b082      	sub	sp, #8
 800adee:	af00      	add	r7, sp, #0
 800adf0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	781b      	ldrb	r3, [r3, #0]
 800adf6:	b2db      	uxtb	r3, r3
 800adf8:	2b0b      	cmp	r3, #11
 800adfa:	d10a      	bne.n	800ae12 <USBH_HandleSof+0x28>
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d005      	beq.n	800ae12 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae0c:	699b      	ldr	r3, [r3, #24]
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	4798      	blx	r3
  }
}
 800ae12:	bf00      	nop
 800ae14:	3708      	adds	r7, #8
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}

0800ae1a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800ae1a:	b480      	push	{r7}
 800ae1c:	b083      	sub	sp, #12
 800ae1e:	af00      	add	r7, sp, #0
 800ae20:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2201      	movs	r2, #1
 800ae26:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800ae2a:	bf00      	nop
}
 800ae2c:	370c      	adds	r7, #12
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae34:	4770      	bx	lr

0800ae36 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800ae36:	b480      	push	{r7}
 800ae38:	b083      	sub	sp, #12
 800ae3a:	af00      	add	r7, sp, #0
 800ae3c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	2200      	movs	r2, #0
 800ae42:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800ae46:	bf00      	nop
}
 800ae48:	370c      	adds	r7, #12
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae50:	4770      	bx	lr

0800ae52 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800ae52:	b480      	push	{r7}
 800ae54:	b083      	sub	sp, #12
 800ae56:	af00      	add	r7, sp, #0
 800ae58:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2201      	movs	r2, #1
 800ae5e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	2200      	movs	r2, #0
 800ae66:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800ae72:	2300      	movs	r3, #0
}
 800ae74:	4618      	mov	r0, r3
 800ae76:	370c      	adds	r7, #12
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7e:	4770      	bx	lr

0800ae80 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b082      	sub	sp, #8
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2201      	movs	r2, #1
 800ae8c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2200      	movs	r2, #0
 800ae94:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800aea0:	6878      	ldr	r0, [r7, #4]
 800aea2:	f000 ffb2 	bl	800be0a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	791b      	ldrb	r3, [r3, #4]
 800aeaa:	4619      	mov	r1, r3
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f000 fda3 	bl	800b9f8 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	795b      	ldrb	r3, [r3, #5]
 800aeb6:	4619      	mov	r1, r3
 800aeb8:	6878      	ldr	r0, [r7, #4]
 800aeba:	f000 fd9d 	bl	800b9f8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800aebe:	2300      	movs	r3, #0
}
 800aec0:	4618      	mov	r0, r3
 800aec2:	3708      	adds	r7, #8
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bd80      	pop	{r7, pc}

0800aec8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b086      	sub	sp, #24
 800aecc:	af02      	add	r7, sp, #8
 800aece:	6078      	str	r0, [r7, #4]
 800aed0:	460b      	mov	r3, r1
 800aed2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800aeda:	78fb      	ldrb	r3, [r7, #3]
 800aedc:	b29b      	uxth	r3, r3
 800aede:	9300      	str	r3, [sp, #0]
 800aee0:	4613      	mov	r3, r2
 800aee2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aee6:	2100      	movs	r1, #0
 800aee8:	6878      	ldr	r0, [r7, #4]
 800aeea:	f000 f864 	bl	800afb6 <USBH_GetDescriptor>
 800aeee:	4603      	mov	r3, r0
 800aef0:	73fb      	strb	r3, [r7, #15]
 800aef2:	7bfb      	ldrb	r3, [r7, #15]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d10a      	bne.n	800af0e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f203 3026 	addw	r0, r3, #806	; 0x326
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800af04:	78fa      	ldrb	r2, [r7, #3]
 800af06:	b292      	uxth	r2, r2
 800af08:	4619      	mov	r1, r3
 800af0a:	f000 f918 	bl	800b13e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800af0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800af10:	4618      	mov	r0, r3
 800af12:	3710      	adds	r7, #16
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}

0800af18 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b086      	sub	sp, #24
 800af1c:	af02      	add	r7, sp, #8
 800af1e:	6078      	str	r0, [r7, #4]
 800af20:	460b      	mov	r3, r1
 800af22:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	331c      	adds	r3, #28
 800af28:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800af2a:	887b      	ldrh	r3, [r7, #2]
 800af2c:	9300      	str	r3, [sp, #0]
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	f44f 7200 	mov.w	r2, #512	; 0x200
 800af34:	2100      	movs	r1, #0
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	f000 f83d 	bl	800afb6 <USBH_GetDescriptor>
 800af3c:	4603      	mov	r3, r0
 800af3e:	72fb      	strb	r3, [r7, #11]
 800af40:	7afb      	ldrb	r3, [r7, #11]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d107      	bne.n	800af56 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800af4c:	887a      	ldrh	r2, [r7, #2]
 800af4e:	68f9      	ldr	r1, [r7, #12]
 800af50:	4618      	mov	r0, r3
 800af52:	f000 f964 	bl	800b21e <USBH_ParseCfgDesc>
  }

  return status;
 800af56:	7afb      	ldrb	r3, [r7, #11]
}
 800af58:	4618      	mov	r0, r3
 800af5a:	3710      	adds	r7, #16
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bd80      	pop	{r7, pc}

0800af60 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b088      	sub	sp, #32
 800af64:	af02      	add	r7, sp, #8
 800af66:	60f8      	str	r0, [r7, #12]
 800af68:	607a      	str	r2, [r7, #4]
 800af6a:	461a      	mov	r2, r3
 800af6c:	460b      	mov	r3, r1
 800af6e:	72fb      	strb	r3, [r7, #11]
 800af70:	4613      	mov	r3, r2
 800af72:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800af74:	7afb      	ldrb	r3, [r7, #11]
 800af76:	b29b      	uxth	r3, r3
 800af78:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800af7c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800af84:	893b      	ldrh	r3, [r7, #8]
 800af86:	9300      	str	r3, [sp, #0]
 800af88:	460b      	mov	r3, r1
 800af8a:	2100      	movs	r1, #0
 800af8c:	68f8      	ldr	r0, [r7, #12]
 800af8e:	f000 f812 	bl	800afb6 <USBH_GetDescriptor>
 800af92:	4603      	mov	r3, r0
 800af94:	75fb      	strb	r3, [r7, #23]
 800af96:	7dfb      	ldrb	r3, [r7, #23]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d107      	bne.n	800afac <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800afa2:	893a      	ldrh	r2, [r7, #8]
 800afa4:	6879      	ldr	r1, [r7, #4]
 800afa6:	4618      	mov	r0, r3
 800afa8:	f000 fa37 	bl	800b41a <USBH_ParseStringDesc>
  }

  return status;
 800afac:	7dfb      	ldrb	r3, [r7, #23]
}
 800afae:	4618      	mov	r0, r3
 800afb0:	3718      	adds	r7, #24
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bd80      	pop	{r7, pc}

0800afb6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800afb6:	b580      	push	{r7, lr}
 800afb8:	b084      	sub	sp, #16
 800afba:	af00      	add	r7, sp, #0
 800afbc:	60f8      	str	r0, [r7, #12]
 800afbe:	607b      	str	r3, [r7, #4]
 800afc0:	460b      	mov	r3, r1
 800afc2:	72fb      	strb	r3, [r7, #11]
 800afc4:	4613      	mov	r3, r2
 800afc6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	789b      	ldrb	r3, [r3, #2]
 800afcc:	2b01      	cmp	r3, #1
 800afce:	d11c      	bne.n	800b00a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800afd0:	7afb      	ldrb	r3, [r7, #11]
 800afd2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800afd6:	b2da      	uxtb	r2, r3
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	2206      	movs	r2, #6
 800afe0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	893a      	ldrh	r2, [r7, #8]
 800afe6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800afe8:	893b      	ldrh	r3, [r7, #8]
 800afea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800afee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aff2:	d104      	bne.n	800affe <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	f240 4209 	movw	r2, #1033	; 0x409
 800affa:	829a      	strh	r2, [r3, #20]
 800affc:	e002      	b.n	800b004 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	2200      	movs	r2, #0
 800b002:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	8b3a      	ldrh	r2, [r7, #24]
 800b008:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b00a:	8b3b      	ldrh	r3, [r7, #24]
 800b00c:	461a      	mov	r2, r3
 800b00e:	6879      	ldr	r1, [r7, #4]
 800b010:	68f8      	ldr	r0, [r7, #12]
 800b012:	f000 fa50 	bl	800b4b6 <USBH_CtlReq>
 800b016:	4603      	mov	r3, r0
}
 800b018:	4618      	mov	r0, r3
 800b01a:	3710      	adds	r7, #16
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}

0800b020 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b082      	sub	sp, #8
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
 800b028:	460b      	mov	r3, r1
 800b02a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	789b      	ldrb	r3, [r3, #2]
 800b030:	2b01      	cmp	r3, #1
 800b032:	d10f      	bne.n	800b054 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2200      	movs	r2, #0
 800b038:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2205      	movs	r2, #5
 800b03e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b040:	78fb      	ldrb	r3, [r7, #3]
 800b042:	b29a      	uxth	r2, r3
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2200      	movs	r2, #0
 800b04c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2200      	movs	r2, #0
 800b052:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b054:	2200      	movs	r2, #0
 800b056:	2100      	movs	r1, #0
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	f000 fa2c 	bl	800b4b6 <USBH_CtlReq>
 800b05e:	4603      	mov	r3, r0
}
 800b060:	4618      	mov	r0, r3
 800b062:	3708      	adds	r7, #8
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}

0800b068 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b082      	sub	sp, #8
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
 800b070:	460b      	mov	r3, r1
 800b072:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	789b      	ldrb	r3, [r3, #2]
 800b078:	2b01      	cmp	r3, #1
 800b07a:	d10e      	bne.n	800b09a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2200      	movs	r2, #0
 800b080:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	2209      	movs	r2, #9
 800b086:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	887a      	ldrh	r2, [r7, #2]
 800b08c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2200      	movs	r2, #0
 800b092:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2200      	movs	r2, #0
 800b098:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b09a:	2200      	movs	r2, #0
 800b09c:	2100      	movs	r1, #0
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f000 fa09 	bl	800b4b6 <USBH_CtlReq>
 800b0a4:	4603      	mov	r3, r0
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	3708      	adds	r7, #8
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}

0800b0ae <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b0ae:	b580      	push	{r7, lr}
 800b0b0:	b082      	sub	sp, #8
 800b0b2:	af00      	add	r7, sp, #0
 800b0b4:	6078      	str	r0, [r7, #4]
 800b0b6:	460b      	mov	r3, r1
 800b0b8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	789b      	ldrb	r3, [r3, #2]
 800b0be:	2b01      	cmp	r3, #1
 800b0c0:	d10f      	bne.n	800b0e2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2203      	movs	r2, #3
 800b0cc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b0ce:	78fb      	ldrb	r3, [r7, #3]
 800b0d0:	b29a      	uxth	r2, r3
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2200      	movs	r2, #0
 800b0da:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2200      	movs	r2, #0
 800b0e0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	2100      	movs	r1, #0
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f000 f9e5 	bl	800b4b6 <USBH_CtlReq>
 800b0ec:	4603      	mov	r3, r0
}
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	3708      	adds	r7, #8
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bd80      	pop	{r7, pc}

0800b0f6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b0f6:	b580      	push	{r7, lr}
 800b0f8:	b082      	sub	sp, #8
 800b0fa:	af00      	add	r7, sp, #0
 800b0fc:	6078      	str	r0, [r7, #4]
 800b0fe:	460b      	mov	r3, r1
 800b100:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	789b      	ldrb	r3, [r3, #2]
 800b106:	2b01      	cmp	r3, #1
 800b108:	d10f      	bne.n	800b12a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2202      	movs	r2, #2
 800b10e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2201      	movs	r2, #1
 800b114:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2200      	movs	r2, #0
 800b11a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b11c:	78fb      	ldrb	r3, [r7, #3]
 800b11e:	b29a      	uxth	r2, r3
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2200      	movs	r2, #0
 800b128:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800b12a:	2200      	movs	r2, #0
 800b12c:	2100      	movs	r1, #0
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f000 f9c1 	bl	800b4b6 <USBH_CtlReq>
 800b134:	4603      	mov	r3, r0
}
 800b136:	4618      	mov	r0, r3
 800b138:	3708      	adds	r7, #8
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bd80      	pop	{r7, pc}

0800b13e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800b13e:	b480      	push	{r7}
 800b140:	b085      	sub	sp, #20
 800b142:	af00      	add	r7, sp, #0
 800b144:	60f8      	str	r0, [r7, #12]
 800b146:	60b9      	str	r1, [r7, #8]
 800b148:	4613      	mov	r3, r2
 800b14a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800b14c:	68bb      	ldr	r3, [r7, #8]
 800b14e:	781a      	ldrb	r2, [r3, #0]
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800b154:	68bb      	ldr	r3, [r7, #8]
 800b156:	785a      	ldrb	r2, [r3, #1]
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	3302      	adds	r3, #2
 800b160:	781b      	ldrb	r3, [r3, #0]
 800b162:	b29a      	uxth	r2, r3
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	3303      	adds	r3, #3
 800b168:	781b      	ldrb	r3, [r3, #0]
 800b16a:	b29b      	uxth	r3, r3
 800b16c:	021b      	lsls	r3, r3, #8
 800b16e:	b29b      	uxth	r3, r3
 800b170:	4313      	orrs	r3, r2
 800b172:	b29a      	uxth	r2, r3
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800b178:	68bb      	ldr	r3, [r7, #8]
 800b17a:	791a      	ldrb	r2, [r3, #4]
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	795a      	ldrb	r2, [r3, #5]
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	799a      	ldrb	r2, [r3, #6]
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800b190:	68bb      	ldr	r3, [r7, #8]
 800b192:	79da      	ldrb	r2, [r3, #7]
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800b198:	88fb      	ldrh	r3, [r7, #6]
 800b19a:	2b08      	cmp	r3, #8
 800b19c:	d939      	bls.n	800b212 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800b19e:	68bb      	ldr	r3, [r7, #8]
 800b1a0:	3308      	adds	r3, #8
 800b1a2:	781b      	ldrb	r3, [r3, #0]
 800b1a4:	b29a      	uxth	r2, r3
 800b1a6:	68bb      	ldr	r3, [r7, #8]
 800b1a8:	3309      	adds	r3, #9
 800b1aa:	781b      	ldrb	r3, [r3, #0]
 800b1ac:	b29b      	uxth	r3, r3
 800b1ae:	021b      	lsls	r3, r3, #8
 800b1b0:	b29b      	uxth	r3, r3
 800b1b2:	4313      	orrs	r3, r2
 800b1b4:	b29a      	uxth	r2, r3
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800b1ba:	68bb      	ldr	r3, [r7, #8]
 800b1bc:	330a      	adds	r3, #10
 800b1be:	781b      	ldrb	r3, [r3, #0]
 800b1c0:	b29a      	uxth	r2, r3
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	330b      	adds	r3, #11
 800b1c6:	781b      	ldrb	r3, [r3, #0]
 800b1c8:	b29b      	uxth	r3, r3
 800b1ca:	021b      	lsls	r3, r3, #8
 800b1cc:	b29b      	uxth	r3, r3
 800b1ce:	4313      	orrs	r3, r2
 800b1d0:	b29a      	uxth	r2, r3
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	330c      	adds	r3, #12
 800b1da:	781b      	ldrb	r3, [r3, #0]
 800b1dc:	b29a      	uxth	r2, r3
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	330d      	adds	r3, #13
 800b1e2:	781b      	ldrb	r3, [r3, #0]
 800b1e4:	b29b      	uxth	r3, r3
 800b1e6:	021b      	lsls	r3, r3, #8
 800b1e8:	b29b      	uxth	r3, r3
 800b1ea:	4313      	orrs	r3, r2
 800b1ec:	b29a      	uxth	r2, r3
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	7b9a      	ldrb	r2, [r3, #14]
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800b1fa:	68bb      	ldr	r3, [r7, #8]
 800b1fc:	7bda      	ldrb	r2, [r3, #15]
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800b202:	68bb      	ldr	r3, [r7, #8]
 800b204:	7c1a      	ldrb	r2, [r3, #16]
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800b20a:	68bb      	ldr	r3, [r7, #8]
 800b20c:	7c5a      	ldrb	r2, [r3, #17]
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	745a      	strb	r2, [r3, #17]
  }
}
 800b212:	bf00      	nop
 800b214:	3714      	adds	r7, #20
 800b216:	46bd      	mov	sp, r7
 800b218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21c:	4770      	bx	lr

0800b21e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800b21e:	b580      	push	{r7, lr}
 800b220:	b08a      	sub	sp, #40	; 0x28
 800b222:	af00      	add	r7, sp, #0
 800b224:	60f8      	str	r0, [r7, #12]
 800b226:	60b9      	str	r1, [r7, #8]
 800b228:	4613      	mov	r3, r2
 800b22a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b230:	2300      	movs	r3, #0
 800b232:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800b236:	2300      	movs	r3, #0
 800b238:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800b23c:	68bb      	ldr	r3, [r7, #8]
 800b23e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800b240:	68bb      	ldr	r3, [r7, #8]
 800b242:	781a      	ldrb	r2, [r3, #0]
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b248:	68bb      	ldr	r3, [r7, #8]
 800b24a:	785a      	ldrb	r2, [r3, #1]
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	3302      	adds	r3, #2
 800b254:	781b      	ldrb	r3, [r3, #0]
 800b256:	b29a      	uxth	r2, r3
 800b258:	68bb      	ldr	r3, [r7, #8]
 800b25a:	3303      	adds	r3, #3
 800b25c:	781b      	ldrb	r3, [r3, #0]
 800b25e:	b29b      	uxth	r3, r3
 800b260:	021b      	lsls	r3, r3, #8
 800b262:	b29b      	uxth	r3, r3
 800b264:	4313      	orrs	r3, r2
 800b266:	b29a      	uxth	r2, r3
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800b26c:	68bb      	ldr	r3, [r7, #8]
 800b26e:	791a      	ldrb	r2, [r3, #4]
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800b274:	68bb      	ldr	r3, [r7, #8]
 800b276:	795a      	ldrb	r2, [r3, #5]
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	799a      	ldrb	r2, [r3, #6]
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800b284:	68bb      	ldr	r3, [r7, #8]
 800b286:	79da      	ldrb	r2, [r3, #7]
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	7a1a      	ldrb	r2, [r3, #8]
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b294:	88fb      	ldrh	r3, [r7, #6]
 800b296:	2b09      	cmp	r3, #9
 800b298:	d95f      	bls.n	800b35a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800b29a:	2309      	movs	r3, #9
 800b29c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800b29e:	2300      	movs	r3, #0
 800b2a0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b2a2:	e051      	b.n	800b348 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b2a4:	f107 0316 	add.w	r3, r7, #22
 800b2a8:	4619      	mov	r1, r3
 800b2aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b2ac:	f000 f8e8 	bl	800b480 <USBH_GetNextDesc>
 800b2b0:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800b2b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2b4:	785b      	ldrb	r3, [r3, #1]
 800b2b6:	2b04      	cmp	r3, #4
 800b2b8:	d146      	bne.n	800b348 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800b2ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b2be:	221a      	movs	r2, #26
 800b2c0:	fb02 f303 	mul.w	r3, r2, r3
 800b2c4:	3308      	adds	r3, #8
 800b2c6:	68fa      	ldr	r2, [r7, #12]
 800b2c8:	4413      	add	r3, r2
 800b2ca:	3302      	adds	r3, #2
 800b2cc:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b2ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b2d0:	69f8      	ldr	r0, [r7, #28]
 800b2d2:	f000 f846 	bl	800b362 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800b2dc:	2300      	movs	r3, #0
 800b2de:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b2e0:	e022      	b.n	800b328 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b2e2:	f107 0316 	add.w	r3, r7, #22
 800b2e6:	4619      	mov	r1, r3
 800b2e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b2ea:	f000 f8c9 	bl	800b480 <USBH_GetNextDesc>
 800b2ee:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800b2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2f2:	785b      	ldrb	r3, [r3, #1]
 800b2f4:	2b05      	cmp	r3, #5
 800b2f6:	d117      	bne.n	800b328 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b2f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b2fc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b300:	3201      	adds	r2, #1
 800b302:	00d2      	lsls	r2, r2, #3
 800b304:	211a      	movs	r1, #26
 800b306:	fb01 f303 	mul.w	r3, r1, r3
 800b30a:	4413      	add	r3, r2
 800b30c:	3308      	adds	r3, #8
 800b30e:	68fa      	ldr	r2, [r7, #12]
 800b310:	4413      	add	r3, r2
 800b312:	3304      	adds	r3, #4
 800b314:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800b316:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b318:	69b8      	ldr	r0, [r7, #24]
 800b31a:	f000 f851 	bl	800b3c0 <USBH_ParseEPDesc>
            ep_ix++;
 800b31e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b322:	3301      	adds	r3, #1
 800b324:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b328:	69fb      	ldr	r3, [r7, #28]
 800b32a:	791b      	ldrb	r3, [r3, #4]
 800b32c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b330:	429a      	cmp	r2, r3
 800b332:	d204      	bcs.n	800b33e <USBH_ParseCfgDesc+0x120>
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	885a      	ldrh	r2, [r3, #2]
 800b338:	8afb      	ldrh	r3, [r7, #22]
 800b33a:	429a      	cmp	r2, r3
 800b33c:	d8d1      	bhi.n	800b2e2 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800b33e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b342:	3301      	adds	r3, #1
 800b344:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b348:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b34c:	2b01      	cmp	r3, #1
 800b34e:	d804      	bhi.n	800b35a <USBH_ParseCfgDesc+0x13c>
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	885a      	ldrh	r2, [r3, #2]
 800b354:	8afb      	ldrh	r3, [r7, #22]
 800b356:	429a      	cmp	r2, r3
 800b358:	d8a4      	bhi.n	800b2a4 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800b35a:	bf00      	nop
 800b35c:	3728      	adds	r7, #40	; 0x28
 800b35e:	46bd      	mov	sp, r7
 800b360:	bd80      	pop	{r7, pc}

0800b362 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800b362:	b480      	push	{r7}
 800b364:	b083      	sub	sp, #12
 800b366:	af00      	add	r7, sp, #0
 800b368:	6078      	str	r0, [r7, #4]
 800b36a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	781a      	ldrb	r2, [r3, #0]
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	785a      	ldrb	r2, [r3, #1]
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	789a      	ldrb	r2, [r3, #2]
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	78da      	ldrb	r2, [r3, #3]
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	791a      	ldrb	r2, [r3, #4]
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	795a      	ldrb	r2, [r3, #5]
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	799a      	ldrb	r2, [r3, #6]
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800b3a4:	683b      	ldr	r3, [r7, #0]
 800b3a6:	79da      	ldrb	r2, [r3, #7]
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	7a1a      	ldrb	r2, [r3, #8]
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	721a      	strb	r2, [r3, #8]
}
 800b3b4:	bf00      	nop
 800b3b6:	370c      	adds	r7, #12
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3be:	4770      	bx	lr

0800b3c0 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	b083      	sub	sp, #12
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
 800b3c8:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	781a      	ldrb	r2, [r3, #0]
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	785a      	ldrb	r2, [r3, #1]
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	789a      	ldrb	r2, [r3, #2]
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	78da      	ldrb	r2, [r3, #3]
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	3304      	adds	r3, #4
 800b3ee:	781b      	ldrb	r3, [r3, #0]
 800b3f0:	b29a      	uxth	r2, r3
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	3305      	adds	r3, #5
 800b3f6:	781b      	ldrb	r3, [r3, #0]
 800b3f8:	b29b      	uxth	r3, r3
 800b3fa:	021b      	lsls	r3, r3, #8
 800b3fc:	b29b      	uxth	r3, r3
 800b3fe:	4313      	orrs	r3, r2
 800b400:	b29a      	uxth	r2, r3
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	799a      	ldrb	r2, [r3, #6]
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	719a      	strb	r2, [r3, #6]
}
 800b40e:	bf00      	nop
 800b410:	370c      	adds	r7, #12
 800b412:	46bd      	mov	sp, r7
 800b414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b418:	4770      	bx	lr

0800b41a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b41a:	b480      	push	{r7}
 800b41c:	b087      	sub	sp, #28
 800b41e:	af00      	add	r7, sp, #0
 800b420:	60f8      	str	r0, [r7, #12]
 800b422:	60b9      	str	r1, [r7, #8]
 800b424:	4613      	mov	r3, r2
 800b426:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	3301      	adds	r3, #1
 800b42c:	781b      	ldrb	r3, [r3, #0]
 800b42e:	2b03      	cmp	r3, #3
 800b430:	d120      	bne.n	800b474 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	781b      	ldrb	r3, [r3, #0]
 800b436:	1e9a      	subs	r2, r3, #2
 800b438:	88fb      	ldrh	r3, [r7, #6]
 800b43a:	4293      	cmp	r3, r2
 800b43c:	bf28      	it	cs
 800b43e:	4613      	movcs	r3, r2
 800b440:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	3302      	adds	r3, #2
 800b446:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b448:	2300      	movs	r3, #0
 800b44a:	82fb      	strh	r3, [r7, #22]
 800b44c:	e00b      	b.n	800b466 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b44e:	8afb      	ldrh	r3, [r7, #22]
 800b450:	68fa      	ldr	r2, [r7, #12]
 800b452:	4413      	add	r3, r2
 800b454:	781a      	ldrb	r2, [r3, #0]
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	3301      	adds	r3, #1
 800b45e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b460:	8afb      	ldrh	r3, [r7, #22]
 800b462:	3302      	adds	r3, #2
 800b464:	82fb      	strh	r3, [r7, #22]
 800b466:	8afa      	ldrh	r2, [r7, #22]
 800b468:	8abb      	ldrh	r3, [r7, #20]
 800b46a:	429a      	cmp	r2, r3
 800b46c:	d3ef      	bcc.n	800b44e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b46e:	68bb      	ldr	r3, [r7, #8]
 800b470:	2200      	movs	r2, #0
 800b472:	701a      	strb	r2, [r3, #0]
  }
}
 800b474:	bf00      	nop
 800b476:	371c      	adds	r7, #28
 800b478:	46bd      	mov	sp, r7
 800b47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47e:	4770      	bx	lr

0800b480 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b480:	b480      	push	{r7}
 800b482:	b085      	sub	sp, #20
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
 800b488:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	881a      	ldrh	r2, [r3, #0]
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	781b      	ldrb	r3, [r3, #0]
 800b492:	b29b      	uxth	r3, r3
 800b494:	4413      	add	r3, r2
 800b496:	b29a      	uxth	r2, r3
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	781b      	ldrb	r3, [r3, #0]
 800b4a0:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	4413      	add	r3, r2
 800b4a6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b4a8:	68fb      	ldr	r3, [r7, #12]
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3714      	adds	r7, #20
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b4:	4770      	bx	lr

0800b4b6 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b4b6:	b580      	push	{r7, lr}
 800b4b8:	b086      	sub	sp, #24
 800b4ba:	af00      	add	r7, sp, #0
 800b4bc:	60f8      	str	r0, [r7, #12]
 800b4be:	60b9      	str	r1, [r7, #8]
 800b4c0:	4613      	mov	r3, r2
 800b4c2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b4c4:	2301      	movs	r3, #1
 800b4c6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	789b      	ldrb	r3, [r3, #2]
 800b4cc:	2b01      	cmp	r3, #1
 800b4ce:	d002      	beq.n	800b4d6 <USBH_CtlReq+0x20>
 800b4d0:	2b02      	cmp	r3, #2
 800b4d2:	d00f      	beq.n	800b4f4 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800b4d4:	e027      	b.n	800b526 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	68ba      	ldr	r2, [r7, #8]
 800b4da:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	88fa      	ldrh	r2, [r7, #6]
 800b4e0:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	2201      	movs	r2, #1
 800b4e6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	2202      	movs	r2, #2
 800b4ec:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	75fb      	strb	r3, [r7, #23]
      break;
 800b4f2:	e018      	b.n	800b526 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800b4f4:	68f8      	ldr	r0, [r7, #12]
 800b4f6:	f000 f81b 	bl	800b530 <USBH_HandleControl>
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b4fe:	7dfb      	ldrb	r3, [r7, #23]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d002      	beq.n	800b50a <USBH_CtlReq+0x54>
 800b504:	7dfb      	ldrb	r3, [r7, #23]
 800b506:	2b03      	cmp	r3, #3
 800b508:	d106      	bne.n	800b518 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	2201      	movs	r2, #1
 800b50e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	2200      	movs	r2, #0
 800b514:	761a      	strb	r2, [r3, #24]
      break;
 800b516:	e005      	b.n	800b524 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800b518:	7dfb      	ldrb	r3, [r7, #23]
 800b51a:	2b02      	cmp	r3, #2
 800b51c:	d102      	bne.n	800b524 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	2201      	movs	r2, #1
 800b522:	709a      	strb	r2, [r3, #2]
      break;
 800b524:	bf00      	nop
  }
  return status;
 800b526:	7dfb      	ldrb	r3, [r7, #23]
}
 800b528:	4618      	mov	r0, r3
 800b52a:	3718      	adds	r7, #24
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd80      	pop	{r7, pc}

0800b530 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b086      	sub	sp, #24
 800b534:	af02      	add	r7, sp, #8
 800b536:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b538:	2301      	movs	r3, #1
 800b53a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b53c:	2300      	movs	r3, #0
 800b53e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	7e1b      	ldrb	r3, [r3, #24]
 800b544:	3b01      	subs	r3, #1
 800b546:	2b0a      	cmp	r3, #10
 800b548:	f200 8156 	bhi.w	800b7f8 <USBH_HandleControl+0x2c8>
 800b54c:	a201      	add	r2, pc, #4	; (adr r2, 800b554 <USBH_HandleControl+0x24>)
 800b54e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b552:	bf00      	nop
 800b554:	0800b581 	.word	0x0800b581
 800b558:	0800b59b 	.word	0x0800b59b
 800b55c:	0800b605 	.word	0x0800b605
 800b560:	0800b62b 	.word	0x0800b62b
 800b564:	0800b663 	.word	0x0800b663
 800b568:	0800b68d 	.word	0x0800b68d
 800b56c:	0800b6df 	.word	0x0800b6df
 800b570:	0800b701 	.word	0x0800b701
 800b574:	0800b73d 	.word	0x0800b73d
 800b578:	0800b763 	.word	0x0800b763
 800b57c:	0800b7a1 	.word	0x0800b7a1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f103 0110 	add.w	r1, r3, #16
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	795b      	ldrb	r3, [r3, #5]
 800b58a:	461a      	mov	r2, r3
 800b58c:	6878      	ldr	r0, [r7, #4]
 800b58e:	f000 f943 	bl	800b818 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	2202      	movs	r2, #2
 800b596:	761a      	strb	r2, [r3, #24]
      break;
 800b598:	e139      	b.n	800b80e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	795b      	ldrb	r3, [r3, #5]
 800b59e:	4619      	mov	r1, r3
 800b5a0:	6878      	ldr	r0, [r7, #4]
 800b5a2:	f000 fd21 	bl	800bfe8 <USBH_LL_GetURBState>
 800b5a6:	4603      	mov	r3, r0
 800b5a8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b5aa:	7bbb      	ldrb	r3, [r7, #14]
 800b5ac:	2b01      	cmp	r3, #1
 800b5ae:	d11e      	bne.n	800b5ee <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	7c1b      	ldrb	r3, [r3, #16]
 800b5b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b5b8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	8adb      	ldrh	r3, [r3, #22]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d00a      	beq.n	800b5d8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b5c2:	7b7b      	ldrb	r3, [r7, #13]
 800b5c4:	2b80      	cmp	r3, #128	; 0x80
 800b5c6:	d103      	bne.n	800b5d0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2203      	movs	r2, #3
 800b5cc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b5ce:	e115      	b.n	800b7fc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2205      	movs	r2, #5
 800b5d4:	761a      	strb	r2, [r3, #24]
      break;
 800b5d6:	e111      	b.n	800b7fc <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800b5d8:	7b7b      	ldrb	r3, [r7, #13]
 800b5da:	2b80      	cmp	r3, #128	; 0x80
 800b5dc:	d103      	bne.n	800b5e6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2209      	movs	r2, #9
 800b5e2:	761a      	strb	r2, [r3, #24]
      break;
 800b5e4:	e10a      	b.n	800b7fc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2207      	movs	r2, #7
 800b5ea:	761a      	strb	r2, [r3, #24]
      break;
 800b5ec:	e106      	b.n	800b7fc <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b5ee:	7bbb      	ldrb	r3, [r7, #14]
 800b5f0:	2b04      	cmp	r3, #4
 800b5f2:	d003      	beq.n	800b5fc <USBH_HandleControl+0xcc>
 800b5f4:	7bbb      	ldrb	r3, [r7, #14]
 800b5f6:	2b02      	cmp	r3, #2
 800b5f8:	f040 8100 	bne.w	800b7fc <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	220b      	movs	r2, #11
 800b600:	761a      	strb	r2, [r3, #24]
      break;
 800b602:	e0fb      	b.n	800b7fc <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b60a:	b29a      	uxth	r2, r3
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6899      	ldr	r1, [r3, #8]
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	899a      	ldrh	r2, [r3, #12]
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	791b      	ldrb	r3, [r3, #4]
 800b61c:	6878      	ldr	r0, [r7, #4]
 800b61e:	f000 f93a 	bl	800b896 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	2204      	movs	r2, #4
 800b626:	761a      	strb	r2, [r3, #24]
      break;
 800b628:	e0f1      	b.n	800b80e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	791b      	ldrb	r3, [r3, #4]
 800b62e:	4619      	mov	r1, r3
 800b630:	6878      	ldr	r0, [r7, #4]
 800b632:	f000 fcd9 	bl	800bfe8 <USBH_LL_GetURBState>
 800b636:	4603      	mov	r3, r0
 800b638:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b63a:	7bbb      	ldrb	r3, [r7, #14]
 800b63c:	2b01      	cmp	r3, #1
 800b63e:	d102      	bne.n	800b646 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2209      	movs	r2, #9
 800b644:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b646:	7bbb      	ldrb	r3, [r7, #14]
 800b648:	2b05      	cmp	r3, #5
 800b64a:	d102      	bne.n	800b652 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b64c:	2303      	movs	r3, #3
 800b64e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b650:	e0d6      	b.n	800b800 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800b652:	7bbb      	ldrb	r3, [r7, #14]
 800b654:	2b04      	cmp	r3, #4
 800b656:	f040 80d3 	bne.w	800b800 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	220b      	movs	r2, #11
 800b65e:	761a      	strb	r2, [r3, #24]
      break;
 800b660:	e0ce      	b.n	800b800 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	6899      	ldr	r1, [r3, #8]
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	899a      	ldrh	r2, [r3, #12]
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	795b      	ldrb	r3, [r3, #5]
 800b66e:	2001      	movs	r0, #1
 800b670:	9000      	str	r0, [sp, #0]
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f000 f8ea 	bl	800b84c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b67e:	b29a      	uxth	r2, r3
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2206      	movs	r2, #6
 800b688:	761a      	strb	r2, [r3, #24]
      break;
 800b68a:	e0c0      	b.n	800b80e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	795b      	ldrb	r3, [r3, #5]
 800b690:	4619      	mov	r1, r3
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f000 fca8 	bl	800bfe8 <USBH_LL_GetURBState>
 800b698:	4603      	mov	r3, r0
 800b69a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b69c:	7bbb      	ldrb	r3, [r7, #14]
 800b69e:	2b01      	cmp	r3, #1
 800b6a0:	d103      	bne.n	800b6aa <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2207      	movs	r2, #7
 800b6a6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b6a8:	e0ac      	b.n	800b804 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800b6aa:	7bbb      	ldrb	r3, [r7, #14]
 800b6ac:	2b05      	cmp	r3, #5
 800b6ae:	d105      	bne.n	800b6bc <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	220c      	movs	r2, #12
 800b6b4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b6b6:	2303      	movs	r3, #3
 800b6b8:	73fb      	strb	r3, [r7, #15]
      break;
 800b6ba:	e0a3      	b.n	800b804 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b6bc:	7bbb      	ldrb	r3, [r7, #14]
 800b6be:	2b02      	cmp	r3, #2
 800b6c0:	d103      	bne.n	800b6ca <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2205      	movs	r2, #5
 800b6c6:	761a      	strb	r2, [r3, #24]
      break;
 800b6c8:	e09c      	b.n	800b804 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800b6ca:	7bbb      	ldrb	r3, [r7, #14]
 800b6cc:	2b04      	cmp	r3, #4
 800b6ce:	f040 8099 	bne.w	800b804 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	220b      	movs	r2, #11
 800b6d6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b6d8:	2302      	movs	r3, #2
 800b6da:	73fb      	strb	r3, [r7, #15]
      break;
 800b6dc:	e092      	b.n	800b804 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	791b      	ldrb	r3, [r3, #4]
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	2100      	movs	r1, #0
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f000 f8d5 	bl	800b896 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b6f2:	b29a      	uxth	r2, r3
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2208      	movs	r2, #8
 800b6fc:	761a      	strb	r2, [r3, #24]

      break;
 800b6fe:	e086      	b.n	800b80e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	791b      	ldrb	r3, [r3, #4]
 800b704:	4619      	mov	r1, r3
 800b706:	6878      	ldr	r0, [r7, #4]
 800b708:	f000 fc6e 	bl	800bfe8 <USBH_LL_GetURBState>
 800b70c:	4603      	mov	r3, r0
 800b70e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b710:	7bbb      	ldrb	r3, [r7, #14]
 800b712:	2b01      	cmp	r3, #1
 800b714:	d105      	bne.n	800b722 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	220d      	movs	r2, #13
 800b71a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b71c:	2300      	movs	r3, #0
 800b71e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b720:	e072      	b.n	800b808 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800b722:	7bbb      	ldrb	r3, [r7, #14]
 800b724:	2b04      	cmp	r3, #4
 800b726:	d103      	bne.n	800b730 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	220b      	movs	r2, #11
 800b72c:	761a      	strb	r2, [r3, #24]
      break;
 800b72e:	e06b      	b.n	800b808 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800b730:	7bbb      	ldrb	r3, [r7, #14]
 800b732:	2b05      	cmp	r3, #5
 800b734:	d168      	bne.n	800b808 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800b736:	2303      	movs	r3, #3
 800b738:	73fb      	strb	r3, [r7, #15]
      break;
 800b73a:	e065      	b.n	800b808 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	795b      	ldrb	r3, [r3, #5]
 800b740:	2201      	movs	r2, #1
 800b742:	9200      	str	r2, [sp, #0]
 800b744:	2200      	movs	r2, #0
 800b746:	2100      	movs	r1, #0
 800b748:	6878      	ldr	r0, [r7, #4]
 800b74a:	f000 f87f 	bl	800b84c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b754:	b29a      	uxth	r2, r3
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	220a      	movs	r2, #10
 800b75e:	761a      	strb	r2, [r3, #24]
      break;
 800b760:	e055      	b.n	800b80e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	795b      	ldrb	r3, [r3, #5]
 800b766:	4619      	mov	r1, r3
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f000 fc3d 	bl	800bfe8 <USBH_LL_GetURBState>
 800b76e:	4603      	mov	r3, r0
 800b770:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b772:	7bbb      	ldrb	r3, [r7, #14]
 800b774:	2b01      	cmp	r3, #1
 800b776:	d105      	bne.n	800b784 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800b778:	2300      	movs	r3, #0
 800b77a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	220d      	movs	r2, #13
 800b780:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b782:	e043      	b.n	800b80c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b784:	7bbb      	ldrb	r3, [r7, #14]
 800b786:	2b02      	cmp	r3, #2
 800b788:	d103      	bne.n	800b792 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	2209      	movs	r2, #9
 800b78e:	761a      	strb	r2, [r3, #24]
      break;
 800b790:	e03c      	b.n	800b80c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800b792:	7bbb      	ldrb	r3, [r7, #14]
 800b794:	2b04      	cmp	r3, #4
 800b796:	d139      	bne.n	800b80c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	220b      	movs	r2, #11
 800b79c:	761a      	strb	r2, [r3, #24]
      break;
 800b79e:	e035      	b.n	800b80c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	7e5b      	ldrb	r3, [r3, #25]
 800b7a4:	3301      	adds	r3, #1
 800b7a6:	b2da      	uxtb	r2, r3
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	765a      	strb	r2, [r3, #25]
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	7e5b      	ldrb	r3, [r3, #25]
 800b7b0:	2b02      	cmp	r3, #2
 800b7b2:	d806      	bhi.n	800b7c2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2201      	movs	r2, #1
 800b7b8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	2201      	movs	r2, #1
 800b7be:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b7c0:	e025      	b.n	800b80e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b7c8:	2106      	movs	r1, #6
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	795b      	ldrb	r3, [r3, #5]
 800b7d8:	4619      	mov	r1, r3
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	f000 f90c 	bl	800b9f8 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	791b      	ldrb	r3, [r3, #4]
 800b7e4:	4619      	mov	r1, r3
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f000 f906 	bl	800b9f8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b7f2:	2302      	movs	r3, #2
 800b7f4:	73fb      	strb	r3, [r7, #15]
      break;
 800b7f6:	e00a      	b.n	800b80e <USBH_HandleControl+0x2de>

    default:
      break;
 800b7f8:	bf00      	nop
 800b7fa:	e008      	b.n	800b80e <USBH_HandleControl+0x2de>
      break;
 800b7fc:	bf00      	nop
 800b7fe:	e006      	b.n	800b80e <USBH_HandleControl+0x2de>
      break;
 800b800:	bf00      	nop
 800b802:	e004      	b.n	800b80e <USBH_HandleControl+0x2de>
      break;
 800b804:	bf00      	nop
 800b806:	e002      	b.n	800b80e <USBH_HandleControl+0x2de>
      break;
 800b808:	bf00      	nop
 800b80a:	e000      	b.n	800b80e <USBH_HandleControl+0x2de>
      break;
 800b80c:	bf00      	nop
  }

  return status;
 800b80e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b810:	4618      	mov	r0, r3
 800b812:	3710      	adds	r7, #16
 800b814:	46bd      	mov	sp, r7
 800b816:	bd80      	pop	{r7, pc}

0800b818 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b088      	sub	sp, #32
 800b81c:	af04      	add	r7, sp, #16
 800b81e:	60f8      	str	r0, [r7, #12]
 800b820:	60b9      	str	r1, [r7, #8]
 800b822:	4613      	mov	r3, r2
 800b824:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b826:	79f9      	ldrb	r1, [r7, #7]
 800b828:	2300      	movs	r3, #0
 800b82a:	9303      	str	r3, [sp, #12]
 800b82c:	2308      	movs	r3, #8
 800b82e:	9302      	str	r3, [sp, #8]
 800b830:	68bb      	ldr	r3, [r7, #8]
 800b832:	9301      	str	r3, [sp, #4]
 800b834:	2300      	movs	r3, #0
 800b836:	9300      	str	r3, [sp, #0]
 800b838:	2300      	movs	r3, #0
 800b83a:	2200      	movs	r2, #0
 800b83c:	68f8      	ldr	r0, [r7, #12]
 800b83e:	f000 fba2 	bl	800bf86 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800b842:	2300      	movs	r3, #0
}
 800b844:	4618      	mov	r0, r3
 800b846:	3710      	adds	r7, #16
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd80      	pop	{r7, pc}

0800b84c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b088      	sub	sp, #32
 800b850:	af04      	add	r7, sp, #16
 800b852:	60f8      	str	r0, [r7, #12]
 800b854:	60b9      	str	r1, [r7, #8]
 800b856:	4611      	mov	r1, r2
 800b858:	461a      	mov	r2, r3
 800b85a:	460b      	mov	r3, r1
 800b85c:	80fb      	strh	r3, [r7, #6]
 800b85e:	4613      	mov	r3, r2
 800b860:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d001      	beq.n	800b870 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b86c:	2300      	movs	r3, #0
 800b86e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b870:	7979      	ldrb	r1, [r7, #5]
 800b872:	7e3b      	ldrb	r3, [r7, #24]
 800b874:	9303      	str	r3, [sp, #12]
 800b876:	88fb      	ldrh	r3, [r7, #6]
 800b878:	9302      	str	r3, [sp, #8]
 800b87a:	68bb      	ldr	r3, [r7, #8]
 800b87c:	9301      	str	r3, [sp, #4]
 800b87e:	2301      	movs	r3, #1
 800b880:	9300      	str	r3, [sp, #0]
 800b882:	2300      	movs	r3, #0
 800b884:	2200      	movs	r2, #0
 800b886:	68f8      	ldr	r0, [r7, #12]
 800b888:	f000 fb7d 	bl	800bf86 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b88c:	2300      	movs	r3, #0
}
 800b88e:	4618      	mov	r0, r3
 800b890:	3710      	adds	r7, #16
 800b892:	46bd      	mov	sp, r7
 800b894:	bd80      	pop	{r7, pc}

0800b896 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b896:	b580      	push	{r7, lr}
 800b898:	b088      	sub	sp, #32
 800b89a:	af04      	add	r7, sp, #16
 800b89c:	60f8      	str	r0, [r7, #12]
 800b89e:	60b9      	str	r1, [r7, #8]
 800b8a0:	4611      	mov	r1, r2
 800b8a2:	461a      	mov	r2, r3
 800b8a4:	460b      	mov	r3, r1
 800b8a6:	80fb      	strh	r3, [r7, #6]
 800b8a8:	4613      	mov	r3, r2
 800b8aa:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b8ac:	7979      	ldrb	r1, [r7, #5]
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	9303      	str	r3, [sp, #12]
 800b8b2:	88fb      	ldrh	r3, [r7, #6]
 800b8b4:	9302      	str	r3, [sp, #8]
 800b8b6:	68bb      	ldr	r3, [r7, #8]
 800b8b8:	9301      	str	r3, [sp, #4]
 800b8ba:	2301      	movs	r3, #1
 800b8bc:	9300      	str	r3, [sp, #0]
 800b8be:	2300      	movs	r3, #0
 800b8c0:	2201      	movs	r2, #1
 800b8c2:	68f8      	ldr	r0, [r7, #12]
 800b8c4:	f000 fb5f 	bl	800bf86 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b8c8:	2300      	movs	r3, #0

}
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	3710      	adds	r7, #16
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd80      	pop	{r7, pc}

0800b8d2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b8d2:	b580      	push	{r7, lr}
 800b8d4:	b088      	sub	sp, #32
 800b8d6:	af04      	add	r7, sp, #16
 800b8d8:	60f8      	str	r0, [r7, #12]
 800b8da:	60b9      	str	r1, [r7, #8]
 800b8dc:	4611      	mov	r1, r2
 800b8de:	461a      	mov	r2, r3
 800b8e0:	460b      	mov	r3, r1
 800b8e2:	80fb      	strh	r3, [r7, #6]
 800b8e4:	4613      	mov	r3, r2
 800b8e6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d001      	beq.n	800b8f6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b8f6:	7979      	ldrb	r1, [r7, #5]
 800b8f8:	7e3b      	ldrb	r3, [r7, #24]
 800b8fa:	9303      	str	r3, [sp, #12]
 800b8fc:	88fb      	ldrh	r3, [r7, #6]
 800b8fe:	9302      	str	r3, [sp, #8]
 800b900:	68bb      	ldr	r3, [r7, #8]
 800b902:	9301      	str	r3, [sp, #4]
 800b904:	2301      	movs	r3, #1
 800b906:	9300      	str	r3, [sp, #0]
 800b908:	2302      	movs	r3, #2
 800b90a:	2200      	movs	r2, #0
 800b90c:	68f8      	ldr	r0, [r7, #12]
 800b90e:	f000 fb3a 	bl	800bf86 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b912:	2300      	movs	r3, #0
}
 800b914:	4618      	mov	r0, r3
 800b916:	3710      	adds	r7, #16
 800b918:	46bd      	mov	sp, r7
 800b91a:	bd80      	pop	{r7, pc}

0800b91c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b088      	sub	sp, #32
 800b920:	af04      	add	r7, sp, #16
 800b922:	60f8      	str	r0, [r7, #12]
 800b924:	60b9      	str	r1, [r7, #8]
 800b926:	4611      	mov	r1, r2
 800b928:	461a      	mov	r2, r3
 800b92a:	460b      	mov	r3, r1
 800b92c:	80fb      	strh	r3, [r7, #6]
 800b92e:	4613      	mov	r3, r2
 800b930:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b932:	7979      	ldrb	r1, [r7, #5]
 800b934:	2300      	movs	r3, #0
 800b936:	9303      	str	r3, [sp, #12]
 800b938:	88fb      	ldrh	r3, [r7, #6]
 800b93a:	9302      	str	r3, [sp, #8]
 800b93c:	68bb      	ldr	r3, [r7, #8]
 800b93e:	9301      	str	r3, [sp, #4]
 800b940:	2301      	movs	r3, #1
 800b942:	9300      	str	r3, [sp, #0]
 800b944:	2302      	movs	r3, #2
 800b946:	2201      	movs	r2, #1
 800b948:	68f8      	ldr	r0, [r7, #12]
 800b94a:	f000 fb1c 	bl	800bf86 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b94e:	2300      	movs	r3, #0
}
 800b950:	4618      	mov	r0, r3
 800b952:	3710      	adds	r7, #16
 800b954:	46bd      	mov	sp, r7
 800b956:	bd80      	pop	{r7, pc}

0800b958 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b086      	sub	sp, #24
 800b95c:	af04      	add	r7, sp, #16
 800b95e:	6078      	str	r0, [r7, #4]
 800b960:	4608      	mov	r0, r1
 800b962:	4611      	mov	r1, r2
 800b964:	461a      	mov	r2, r3
 800b966:	4603      	mov	r3, r0
 800b968:	70fb      	strb	r3, [r7, #3]
 800b96a:	460b      	mov	r3, r1
 800b96c:	70bb      	strb	r3, [r7, #2]
 800b96e:	4613      	mov	r3, r2
 800b970:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b972:	7878      	ldrb	r0, [r7, #1]
 800b974:	78ba      	ldrb	r2, [r7, #2]
 800b976:	78f9      	ldrb	r1, [r7, #3]
 800b978:	8b3b      	ldrh	r3, [r7, #24]
 800b97a:	9302      	str	r3, [sp, #8]
 800b97c:	7d3b      	ldrb	r3, [r7, #20]
 800b97e:	9301      	str	r3, [sp, #4]
 800b980:	7c3b      	ldrb	r3, [r7, #16]
 800b982:	9300      	str	r3, [sp, #0]
 800b984:	4603      	mov	r3, r0
 800b986:	6878      	ldr	r0, [r7, #4]
 800b988:	f000 faaf 	bl	800beea <USBH_LL_OpenPipe>

  return USBH_OK;
 800b98c:	2300      	movs	r3, #0
}
 800b98e:	4618      	mov	r0, r3
 800b990:	3708      	adds	r7, #8
 800b992:	46bd      	mov	sp, r7
 800b994:	bd80      	pop	{r7, pc}

0800b996 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b996:	b580      	push	{r7, lr}
 800b998:	b082      	sub	sp, #8
 800b99a:	af00      	add	r7, sp, #0
 800b99c:	6078      	str	r0, [r7, #4]
 800b99e:	460b      	mov	r3, r1
 800b9a0:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800b9a2:	78fb      	ldrb	r3, [r7, #3]
 800b9a4:	4619      	mov	r1, r3
 800b9a6:	6878      	ldr	r0, [r7, #4]
 800b9a8:	f000 face 	bl	800bf48 <USBH_LL_ClosePipe>

  return USBH_OK;
 800b9ac:	2300      	movs	r3, #0
}
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	3708      	adds	r7, #8
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bd80      	pop	{r7, pc}

0800b9b6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b9b6:	b580      	push	{r7, lr}
 800b9b8:	b084      	sub	sp, #16
 800b9ba:	af00      	add	r7, sp, #0
 800b9bc:	6078      	str	r0, [r7, #4]
 800b9be:	460b      	mov	r3, r1
 800b9c0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f000 f836 	bl	800ba34 <USBH_GetFreePipe>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b9cc:	89fb      	ldrh	r3, [r7, #14]
 800b9ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b9d2:	4293      	cmp	r3, r2
 800b9d4:	d00a      	beq.n	800b9ec <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800b9d6:	78fa      	ldrb	r2, [r7, #3]
 800b9d8:	89fb      	ldrh	r3, [r7, #14]
 800b9da:	f003 030f 	and.w	r3, r3, #15
 800b9de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b9e2:	6879      	ldr	r1, [r7, #4]
 800b9e4:	33e0      	adds	r3, #224	; 0xe0
 800b9e6:	009b      	lsls	r3, r3, #2
 800b9e8:	440b      	add	r3, r1
 800b9ea:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b9ec:	89fb      	ldrh	r3, [r7, #14]
 800b9ee:	b2db      	uxtb	r3, r3
}
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	3710      	adds	r7, #16
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	bd80      	pop	{r7, pc}

0800b9f8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b9f8:	b480      	push	{r7}
 800b9fa:	b083      	sub	sp, #12
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
 800ba00:	460b      	mov	r3, r1
 800ba02:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800ba04:	78fb      	ldrb	r3, [r7, #3]
 800ba06:	2b0a      	cmp	r3, #10
 800ba08:	d80d      	bhi.n	800ba26 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800ba0a:	78fb      	ldrb	r3, [r7, #3]
 800ba0c:	687a      	ldr	r2, [r7, #4]
 800ba0e:	33e0      	adds	r3, #224	; 0xe0
 800ba10:	009b      	lsls	r3, r3, #2
 800ba12:	4413      	add	r3, r2
 800ba14:	685a      	ldr	r2, [r3, #4]
 800ba16:	78fb      	ldrb	r3, [r7, #3]
 800ba18:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800ba1c:	6879      	ldr	r1, [r7, #4]
 800ba1e:	33e0      	adds	r3, #224	; 0xe0
 800ba20:	009b      	lsls	r3, r3, #2
 800ba22:	440b      	add	r3, r1
 800ba24:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800ba26:	2300      	movs	r3, #0
}
 800ba28:	4618      	mov	r0, r3
 800ba2a:	370c      	adds	r7, #12
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba32:	4770      	bx	lr

0800ba34 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800ba34:	b480      	push	{r7}
 800ba36:	b085      	sub	sp, #20
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800ba40:	2300      	movs	r3, #0
 800ba42:	73fb      	strb	r3, [r7, #15]
 800ba44:	e00f      	b.n	800ba66 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800ba46:	7bfb      	ldrb	r3, [r7, #15]
 800ba48:	687a      	ldr	r2, [r7, #4]
 800ba4a:	33e0      	adds	r3, #224	; 0xe0
 800ba4c:	009b      	lsls	r3, r3, #2
 800ba4e:	4413      	add	r3, r2
 800ba50:	685b      	ldr	r3, [r3, #4]
 800ba52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d102      	bne.n	800ba60 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800ba5a:	7bfb      	ldrb	r3, [r7, #15]
 800ba5c:	b29b      	uxth	r3, r3
 800ba5e:	e007      	b.n	800ba70 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800ba60:	7bfb      	ldrb	r3, [r7, #15]
 800ba62:	3301      	adds	r3, #1
 800ba64:	73fb      	strb	r3, [r7, #15]
 800ba66:	7bfb      	ldrb	r3, [r7, #15]
 800ba68:	2b0a      	cmp	r3, #10
 800ba6a:	d9ec      	bls.n	800ba46 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800ba6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800ba70:	4618      	mov	r0, r3
 800ba72:	3714      	adds	r7, #20
 800ba74:	46bd      	mov	sp, r7
 800ba76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7a:	4770      	bx	lr

0800ba7c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ba7c:	b480      	push	{r7}
 800ba7e:	b087      	sub	sp, #28
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	60f8      	str	r0, [r7, #12]
 800ba84:	60b9      	str	r1, [r7, #8]
 800ba86:	4613      	mov	r3, r2
 800ba88:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ba8a:	2301      	movs	r3, #1
 800ba8c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ba92:	4b1f      	ldr	r3, [pc, #124]	; (800bb10 <FATFS_LinkDriverEx+0x94>)
 800ba94:	7a5b      	ldrb	r3, [r3, #9]
 800ba96:	b2db      	uxtb	r3, r3
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d131      	bne.n	800bb00 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ba9c:	4b1c      	ldr	r3, [pc, #112]	; (800bb10 <FATFS_LinkDriverEx+0x94>)
 800ba9e:	7a5b      	ldrb	r3, [r3, #9]
 800baa0:	b2db      	uxtb	r3, r3
 800baa2:	461a      	mov	r2, r3
 800baa4:	4b1a      	ldr	r3, [pc, #104]	; (800bb10 <FATFS_LinkDriverEx+0x94>)
 800baa6:	2100      	movs	r1, #0
 800baa8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800baaa:	4b19      	ldr	r3, [pc, #100]	; (800bb10 <FATFS_LinkDriverEx+0x94>)
 800baac:	7a5b      	ldrb	r3, [r3, #9]
 800baae:	b2db      	uxtb	r3, r3
 800bab0:	4a17      	ldr	r2, [pc, #92]	; (800bb10 <FATFS_LinkDriverEx+0x94>)
 800bab2:	009b      	lsls	r3, r3, #2
 800bab4:	4413      	add	r3, r2
 800bab6:	68fa      	ldr	r2, [r7, #12]
 800bab8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800baba:	4b15      	ldr	r3, [pc, #84]	; (800bb10 <FATFS_LinkDriverEx+0x94>)
 800babc:	7a5b      	ldrb	r3, [r3, #9]
 800babe:	b2db      	uxtb	r3, r3
 800bac0:	461a      	mov	r2, r3
 800bac2:	4b13      	ldr	r3, [pc, #76]	; (800bb10 <FATFS_LinkDriverEx+0x94>)
 800bac4:	4413      	add	r3, r2
 800bac6:	79fa      	ldrb	r2, [r7, #7]
 800bac8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800baca:	4b11      	ldr	r3, [pc, #68]	; (800bb10 <FATFS_LinkDriverEx+0x94>)
 800bacc:	7a5b      	ldrb	r3, [r3, #9]
 800bace:	b2db      	uxtb	r3, r3
 800bad0:	1c5a      	adds	r2, r3, #1
 800bad2:	b2d1      	uxtb	r1, r2
 800bad4:	4a0e      	ldr	r2, [pc, #56]	; (800bb10 <FATFS_LinkDriverEx+0x94>)
 800bad6:	7251      	strb	r1, [r2, #9]
 800bad8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800bada:	7dbb      	ldrb	r3, [r7, #22]
 800badc:	3330      	adds	r3, #48	; 0x30
 800bade:	b2da      	uxtb	r2, r3
 800bae0:	68bb      	ldr	r3, [r7, #8]
 800bae2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800bae4:	68bb      	ldr	r3, [r7, #8]
 800bae6:	3301      	adds	r3, #1
 800bae8:	223a      	movs	r2, #58	; 0x3a
 800baea:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800baec:	68bb      	ldr	r3, [r7, #8]
 800baee:	3302      	adds	r3, #2
 800baf0:	222f      	movs	r2, #47	; 0x2f
 800baf2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800baf4:	68bb      	ldr	r3, [r7, #8]
 800baf6:	3303      	adds	r3, #3
 800baf8:	2200      	movs	r2, #0
 800bafa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bafc:	2300      	movs	r3, #0
 800bafe:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800bb00:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb02:	4618      	mov	r0, r3
 800bb04:	371c      	adds	r7, #28
 800bb06:	46bd      	mov	sp, r7
 800bb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0c:	4770      	bx	lr
 800bb0e:	bf00      	nop
 800bb10:	200003bc 	.word	0x200003bc

0800bb14 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b082      	sub	sp, #8
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
 800bb1c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bb1e:	2200      	movs	r2, #0
 800bb20:	6839      	ldr	r1, [r7, #0]
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f7ff ffaa 	bl	800ba7c <FATFS_LinkDriverEx>
 800bb28:	4603      	mov	r3, r0
}
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	3708      	adds	r7, #8
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}
	...

0800bb34 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800bb38:	2201      	movs	r2, #1
 800bb3a:	490e      	ldr	r1, [pc, #56]	; (800bb74 <MX_USB_HOST_Init+0x40>)
 800bb3c:	480e      	ldr	r0, [pc, #56]	; (800bb78 <MX_USB_HOST_Init+0x44>)
 800bb3e:	f7fe fc45 	bl	800a3cc <USBH_Init>
 800bb42:	4603      	mov	r3, r0
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d001      	beq.n	800bb4c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800bb48:	f7f5 fbe2 	bl	8001310 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800bb4c:	490b      	ldr	r1, [pc, #44]	; (800bb7c <MX_USB_HOST_Init+0x48>)
 800bb4e:	480a      	ldr	r0, [pc, #40]	; (800bb78 <MX_USB_HOST_Init+0x44>)
 800bb50:	f7fe fcca 	bl	800a4e8 <USBH_RegisterClass>
 800bb54:	4603      	mov	r3, r0
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d001      	beq.n	800bb5e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800bb5a:	f7f5 fbd9 	bl	8001310 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800bb5e:	4806      	ldr	r0, [pc, #24]	; (800bb78 <MX_USB_HOST_Init+0x44>)
 800bb60:	f7fe fd4e 	bl	800a600 <USBH_Start>
 800bb64:	4603      	mov	r3, r0
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d001      	beq.n	800bb6e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800bb6a:	f7f5 fbd1 	bl	8001310 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800bb6e:	bf00      	nop
 800bb70:	bd80      	pop	{r7, pc}
 800bb72:	bf00      	nop
 800bb74:	0800bb95 	.word	0x0800bb95
 800bb78:	20004fa0 	.word	0x20004fa0
 800bb7c:	200002b0 	.word	0x200002b0

0800bb80 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800bb84:	4802      	ldr	r0, [pc, #8]	; (800bb90 <MX_USB_HOST_Process+0x10>)
 800bb86:	f7fe fd4b 	bl	800a620 <USBH_Process>
}
 800bb8a:	bf00      	nop
 800bb8c:	bd80      	pop	{r7, pc}
 800bb8e:	bf00      	nop
 800bb90:	20004fa0 	.word	0x20004fa0

0800bb94 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800bb94:	b480      	push	{r7}
 800bb96:	b083      	sub	sp, #12
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
 800bb9c:	460b      	mov	r3, r1
 800bb9e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800bba0:	78fb      	ldrb	r3, [r7, #3]
 800bba2:	3b01      	subs	r3, #1
 800bba4:	2b04      	cmp	r3, #4
 800bba6:	d819      	bhi.n	800bbdc <USBH_UserProcess+0x48>
 800bba8:	a201      	add	r2, pc, #4	; (adr r2, 800bbb0 <USBH_UserProcess+0x1c>)
 800bbaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbae:	bf00      	nop
 800bbb0:	0800bbdd 	.word	0x0800bbdd
 800bbb4:	0800bbcd 	.word	0x0800bbcd
 800bbb8:	0800bbdd 	.word	0x0800bbdd
 800bbbc:	0800bbd5 	.word	0x0800bbd5
 800bbc0:	0800bbc5 	.word	0x0800bbc5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800bbc4:	4b09      	ldr	r3, [pc, #36]	; (800bbec <USBH_UserProcess+0x58>)
 800bbc6:	2203      	movs	r2, #3
 800bbc8:	701a      	strb	r2, [r3, #0]
  break;
 800bbca:	e008      	b.n	800bbde <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800bbcc:	4b07      	ldr	r3, [pc, #28]	; (800bbec <USBH_UserProcess+0x58>)
 800bbce:	2202      	movs	r2, #2
 800bbd0:	701a      	strb	r2, [r3, #0]
  break;
 800bbd2:	e004      	b.n	800bbde <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800bbd4:	4b05      	ldr	r3, [pc, #20]	; (800bbec <USBH_UserProcess+0x58>)
 800bbd6:	2201      	movs	r2, #1
 800bbd8:	701a      	strb	r2, [r3, #0]
  break;
 800bbda:	e000      	b.n	800bbde <USBH_UserProcess+0x4a>

  default:
  break;
 800bbdc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800bbde:	bf00      	nop
 800bbe0:	370c      	adds	r7, #12
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe8:	4770      	bx	lr
 800bbea:	bf00      	nop
 800bbec:	200003c8 	.word	0x200003c8

0800bbf0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b08a      	sub	sp, #40	; 0x28
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bbf8:	f107 0314 	add.w	r3, r7, #20
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	601a      	str	r2, [r3, #0]
 800bc00:	605a      	str	r2, [r3, #4]
 800bc02:	609a      	str	r2, [r3, #8]
 800bc04:	60da      	str	r2, [r3, #12]
 800bc06:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bc10:	d147      	bne.n	800bca2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bc12:	2300      	movs	r3, #0
 800bc14:	613b      	str	r3, [r7, #16]
 800bc16:	4b25      	ldr	r3, [pc, #148]	; (800bcac <HAL_HCD_MspInit+0xbc>)
 800bc18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc1a:	4a24      	ldr	r2, [pc, #144]	; (800bcac <HAL_HCD_MspInit+0xbc>)
 800bc1c:	f043 0301 	orr.w	r3, r3, #1
 800bc20:	6313      	str	r3, [r2, #48]	; 0x30
 800bc22:	4b22      	ldr	r3, [pc, #136]	; (800bcac <HAL_HCD_MspInit+0xbc>)
 800bc24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc26:	f003 0301 	and.w	r3, r3, #1
 800bc2a:	613b      	str	r3, [r7, #16]
 800bc2c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800bc2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bc32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bc34:	2300      	movs	r3, #0
 800bc36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc38:	2300      	movs	r3, #0
 800bc3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bc3c:	f107 0314 	add.w	r3, r7, #20
 800bc40:	4619      	mov	r1, r3
 800bc42:	481b      	ldr	r0, [pc, #108]	; (800bcb0 <HAL_HCD_MspInit+0xc0>)
 800bc44:	f7f7 fab0 	bl	80031a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800bc48:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800bc4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bc4e:	2302      	movs	r3, #2
 800bc50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc52:	2300      	movs	r3, #0
 800bc54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bc56:	2300      	movs	r3, #0
 800bc58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bc5a:	230a      	movs	r3, #10
 800bc5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bc5e:	f107 0314 	add.w	r3, r7, #20
 800bc62:	4619      	mov	r1, r3
 800bc64:	4812      	ldr	r0, [pc, #72]	; (800bcb0 <HAL_HCD_MspInit+0xc0>)
 800bc66:	f7f7 fa9f 	bl	80031a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bc6a:	4b10      	ldr	r3, [pc, #64]	; (800bcac <HAL_HCD_MspInit+0xbc>)
 800bc6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc6e:	4a0f      	ldr	r2, [pc, #60]	; (800bcac <HAL_HCD_MspInit+0xbc>)
 800bc70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc74:	6353      	str	r3, [r2, #52]	; 0x34
 800bc76:	2300      	movs	r3, #0
 800bc78:	60fb      	str	r3, [r7, #12]
 800bc7a:	4b0c      	ldr	r3, [pc, #48]	; (800bcac <HAL_HCD_MspInit+0xbc>)
 800bc7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc7e:	4a0b      	ldr	r2, [pc, #44]	; (800bcac <HAL_HCD_MspInit+0xbc>)
 800bc80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bc84:	6453      	str	r3, [r2, #68]	; 0x44
 800bc86:	4b09      	ldr	r3, [pc, #36]	; (800bcac <HAL_HCD_MspInit+0xbc>)
 800bc88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bc8e:	60fb      	str	r3, [r7, #12]
 800bc90:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bc92:	2200      	movs	r2, #0
 800bc94:	2100      	movs	r1, #0
 800bc96:	2043      	movs	r0, #67	; 0x43
 800bc98:	f7f6 fedf 	bl	8002a5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bc9c:	2043      	movs	r0, #67	; 0x43
 800bc9e:	f7f6 fef8 	bl	8002a92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bca2:	bf00      	nop
 800bca4:	3728      	adds	r7, #40	; 0x28
 800bca6:	46bd      	mov	sp, r7
 800bca8:	bd80      	pop	{r7, pc}
 800bcaa:	bf00      	nop
 800bcac:	40023800 	.word	0x40023800
 800bcb0:	40020000 	.word	0x40020000

0800bcb4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b082      	sub	sp, #8
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f7ff f87f 	bl	800adc6 <USBH_LL_IncTimer>
}
 800bcc8:	bf00      	nop
 800bcca:	3708      	adds	r7, #8
 800bccc:	46bd      	mov	sp, r7
 800bcce:	bd80      	pop	{r7, pc}

0800bcd0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b082      	sub	sp, #8
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800bcde:	4618      	mov	r0, r3
 800bce0:	f7ff f8b7 	bl	800ae52 <USBH_LL_Connect>
}
 800bce4:	bf00      	nop
 800bce6:	3708      	adds	r7, #8
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bd80      	pop	{r7, pc}

0800bcec <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b082      	sub	sp, #8
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	f7ff f8c0 	bl	800ae80 <USBH_LL_Disconnect>
}
 800bd00:	bf00      	nop
 800bd02:	3708      	adds	r7, #8
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}

0800bd08 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800bd08:	b480      	push	{r7}
 800bd0a:	b083      	sub	sp, #12
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
 800bd10:	460b      	mov	r3, r1
 800bd12:	70fb      	strb	r3, [r7, #3]
 800bd14:	4613      	mov	r3, r2
 800bd16:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800bd18:	bf00      	nop
 800bd1a:	370c      	adds	r7, #12
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd22:	4770      	bx	lr

0800bd24 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b082      	sub	sp, #8
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800bd32:	4618      	mov	r0, r3
 800bd34:	f7ff f871 	bl	800ae1a <USBH_LL_PortEnabled>
}
 800bd38:	bf00      	nop
 800bd3a:	3708      	adds	r7, #8
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bd80      	pop	{r7, pc}

0800bd40 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b082      	sub	sp, #8
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800bd4e:	4618      	mov	r0, r3
 800bd50:	f7ff f871 	bl	800ae36 <USBH_LL_PortDisabled>
}
 800bd54:	bf00      	nop
 800bd56:	3708      	adds	r7, #8
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd80      	pop	{r7, pc}

0800bd5c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b082      	sub	sp, #8
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800bd6a:	2b01      	cmp	r3, #1
 800bd6c:	d12a      	bne.n	800bdc4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800bd6e:	4a18      	ldr	r2, [pc, #96]	; (800bdd0 <USBH_LL_Init+0x74>)
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	4a15      	ldr	r2, [pc, #84]	; (800bdd0 <USBH_LL_Init+0x74>)
 800bd7a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bd7e:	4b14      	ldr	r3, [pc, #80]	; (800bdd0 <USBH_LL_Init+0x74>)
 800bd80:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800bd84:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800bd86:	4b12      	ldr	r3, [pc, #72]	; (800bdd0 <USBH_LL_Init+0x74>)
 800bd88:	2208      	movs	r2, #8
 800bd8a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800bd8c:	4b10      	ldr	r3, [pc, #64]	; (800bdd0 <USBH_LL_Init+0x74>)
 800bd8e:	2201      	movs	r2, #1
 800bd90:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bd92:	4b0f      	ldr	r3, [pc, #60]	; (800bdd0 <USBH_LL_Init+0x74>)
 800bd94:	2200      	movs	r2, #0
 800bd96:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800bd98:	4b0d      	ldr	r3, [pc, #52]	; (800bdd0 <USBH_LL_Init+0x74>)
 800bd9a:	2202      	movs	r2, #2
 800bd9c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bd9e:	4b0c      	ldr	r3, [pc, #48]	; (800bdd0 <USBH_LL_Init+0x74>)
 800bda0:	2200      	movs	r2, #0
 800bda2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800bda4:	480a      	ldr	r0, [pc, #40]	; (800bdd0 <USBH_LL_Init+0x74>)
 800bda6:	f7f7 fbcc 	bl	8003542 <HAL_HCD_Init>
 800bdaa:	4603      	mov	r3, r0
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d001      	beq.n	800bdb4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800bdb0:	f7f5 faae 	bl	8001310 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800bdb4:	4806      	ldr	r0, [pc, #24]	; (800bdd0 <USBH_LL_Init+0x74>)
 800bdb6:	f7f7 ffb0 	bl	8003d1a <HAL_HCD_GetCurrentFrame>
 800bdba:	4603      	mov	r3, r0
 800bdbc:	4619      	mov	r1, r3
 800bdbe:	6878      	ldr	r0, [r7, #4]
 800bdc0:	f7fe fff2 	bl	800ada8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800bdc4:	2300      	movs	r3, #0
}
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	3708      	adds	r7, #8
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bd80      	pop	{r7, pc}
 800bdce:	bf00      	nop
 800bdd0:	20005378 	.word	0x20005378

0800bdd4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b084      	sub	sp, #16
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bddc:	2300      	movs	r3, #0
 800bdde:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bde0:	2300      	movs	r3, #0
 800bde2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bdea:	4618      	mov	r0, r3
 800bdec:	f7f7 ff1f 	bl	8003c2e <HAL_HCD_Start>
 800bdf0:	4603      	mov	r3, r0
 800bdf2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bdf4:	7bfb      	ldrb	r3, [r7, #15]
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	f000 f98c 	bl	800c114 <USBH_Get_USB_Status>
 800bdfc:	4603      	mov	r3, r0
 800bdfe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be00:	7bbb      	ldrb	r3, [r7, #14]
}
 800be02:	4618      	mov	r0, r3
 800be04:	3710      	adds	r7, #16
 800be06:	46bd      	mov	sp, r7
 800be08:	bd80      	pop	{r7, pc}

0800be0a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800be0a:	b580      	push	{r7, lr}
 800be0c:	b084      	sub	sp, #16
 800be0e:	af00      	add	r7, sp, #0
 800be10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be12:	2300      	movs	r3, #0
 800be14:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800be16:	2300      	movs	r3, #0
 800be18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800be20:	4618      	mov	r0, r3
 800be22:	f7f7 ff27 	bl	8003c74 <HAL_HCD_Stop>
 800be26:	4603      	mov	r3, r0
 800be28:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800be2a:	7bfb      	ldrb	r3, [r7, #15]
 800be2c:	4618      	mov	r0, r3
 800be2e:	f000 f971 	bl	800c114 <USBH_Get_USB_Status>
 800be32:	4603      	mov	r3, r0
 800be34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be36:	7bbb      	ldrb	r3, [r7, #14]
}
 800be38:	4618      	mov	r0, r3
 800be3a:	3710      	adds	r7, #16
 800be3c:	46bd      	mov	sp, r7
 800be3e:	bd80      	pop	{r7, pc}

0800be40 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800be40:	b580      	push	{r7, lr}
 800be42:	b084      	sub	sp, #16
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800be48:	2301      	movs	r3, #1
 800be4a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800be52:	4618      	mov	r0, r3
 800be54:	f7f7 ff6f 	bl	8003d36 <HAL_HCD_GetCurrentSpeed>
 800be58:	4603      	mov	r3, r0
 800be5a:	2b02      	cmp	r3, #2
 800be5c:	d00c      	beq.n	800be78 <USBH_LL_GetSpeed+0x38>
 800be5e:	2b02      	cmp	r3, #2
 800be60:	d80d      	bhi.n	800be7e <USBH_LL_GetSpeed+0x3e>
 800be62:	2b00      	cmp	r3, #0
 800be64:	d002      	beq.n	800be6c <USBH_LL_GetSpeed+0x2c>
 800be66:	2b01      	cmp	r3, #1
 800be68:	d003      	beq.n	800be72 <USBH_LL_GetSpeed+0x32>
 800be6a:	e008      	b.n	800be7e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800be6c:	2300      	movs	r3, #0
 800be6e:	73fb      	strb	r3, [r7, #15]
    break;
 800be70:	e008      	b.n	800be84 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800be72:	2301      	movs	r3, #1
 800be74:	73fb      	strb	r3, [r7, #15]
    break;
 800be76:	e005      	b.n	800be84 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800be78:	2302      	movs	r3, #2
 800be7a:	73fb      	strb	r3, [r7, #15]
    break;
 800be7c:	e002      	b.n	800be84 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800be7e:	2301      	movs	r3, #1
 800be80:	73fb      	strb	r3, [r7, #15]
    break;
 800be82:	bf00      	nop
  }
  return  speed;
 800be84:	7bfb      	ldrb	r3, [r7, #15]
}
 800be86:	4618      	mov	r0, r3
 800be88:	3710      	adds	r7, #16
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bd80      	pop	{r7, pc}

0800be8e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800be8e:	b580      	push	{r7, lr}
 800be90:	b084      	sub	sp, #16
 800be92:	af00      	add	r7, sp, #0
 800be94:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be96:	2300      	movs	r3, #0
 800be98:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800be9a:	2300      	movs	r3, #0
 800be9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bea4:	4618      	mov	r0, r3
 800bea6:	f7f7 ff02 	bl	8003cae <HAL_HCD_ResetPort>
 800beaa:	4603      	mov	r3, r0
 800beac:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800beae:	7bfb      	ldrb	r3, [r7, #15]
 800beb0:	4618      	mov	r0, r3
 800beb2:	f000 f92f 	bl	800c114 <USBH_Get_USB_Status>
 800beb6:	4603      	mov	r3, r0
 800beb8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800beba:	7bbb      	ldrb	r3, [r7, #14]
}
 800bebc:	4618      	mov	r0, r3
 800bebe:	3710      	adds	r7, #16
 800bec0:	46bd      	mov	sp, r7
 800bec2:	bd80      	pop	{r7, pc}

0800bec4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b082      	sub	sp, #8
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
 800becc:	460b      	mov	r3, r1
 800bece:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bed6:	78fa      	ldrb	r2, [r7, #3]
 800bed8:	4611      	mov	r1, r2
 800beda:	4618      	mov	r0, r3
 800bedc:	f7f7 ff09 	bl	8003cf2 <HAL_HCD_HC_GetXferCount>
 800bee0:	4603      	mov	r3, r0
}
 800bee2:	4618      	mov	r0, r3
 800bee4:	3708      	adds	r7, #8
 800bee6:	46bd      	mov	sp, r7
 800bee8:	bd80      	pop	{r7, pc}

0800beea <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800beea:	b590      	push	{r4, r7, lr}
 800beec:	b089      	sub	sp, #36	; 0x24
 800beee:	af04      	add	r7, sp, #16
 800bef0:	6078      	str	r0, [r7, #4]
 800bef2:	4608      	mov	r0, r1
 800bef4:	4611      	mov	r1, r2
 800bef6:	461a      	mov	r2, r3
 800bef8:	4603      	mov	r3, r0
 800befa:	70fb      	strb	r3, [r7, #3]
 800befc:	460b      	mov	r3, r1
 800befe:	70bb      	strb	r3, [r7, #2]
 800bf00:	4613      	mov	r3, r2
 800bf02:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf04:	2300      	movs	r3, #0
 800bf06:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bf08:	2300      	movs	r3, #0
 800bf0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800bf12:	787c      	ldrb	r4, [r7, #1]
 800bf14:	78ba      	ldrb	r2, [r7, #2]
 800bf16:	78f9      	ldrb	r1, [r7, #3]
 800bf18:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bf1a:	9302      	str	r3, [sp, #8]
 800bf1c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bf20:	9301      	str	r3, [sp, #4]
 800bf22:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bf26:	9300      	str	r3, [sp, #0]
 800bf28:	4623      	mov	r3, r4
 800bf2a:	f7f7 fb6c 	bl	8003606 <HAL_HCD_HC_Init>
 800bf2e:	4603      	mov	r3, r0
 800bf30:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800bf32:	7bfb      	ldrb	r3, [r7, #15]
 800bf34:	4618      	mov	r0, r3
 800bf36:	f000 f8ed 	bl	800c114 <USBH_Get_USB_Status>
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf3e:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf40:	4618      	mov	r0, r3
 800bf42:	3714      	adds	r7, #20
 800bf44:	46bd      	mov	sp, r7
 800bf46:	bd90      	pop	{r4, r7, pc}

0800bf48 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b084      	sub	sp, #16
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
 800bf50:	460b      	mov	r3, r1
 800bf52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf54:	2300      	movs	r3, #0
 800bf56:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bf58:	2300      	movs	r3, #0
 800bf5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bf62:	78fa      	ldrb	r2, [r7, #3]
 800bf64:	4611      	mov	r1, r2
 800bf66:	4618      	mov	r0, r3
 800bf68:	f7f7 fbdc 	bl	8003724 <HAL_HCD_HC_Halt>
 800bf6c:	4603      	mov	r3, r0
 800bf6e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bf70:	7bfb      	ldrb	r3, [r7, #15]
 800bf72:	4618      	mov	r0, r3
 800bf74:	f000 f8ce 	bl	800c114 <USBH_Get_USB_Status>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf7c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf7e:	4618      	mov	r0, r3
 800bf80:	3710      	adds	r7, #16
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}

0800bf86 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800bf86:	b590      	push	{r4, r7, lr}
 800bf88:	b089      	sub	sp, #36	; 0x24
 800bf8a:	af04      	add	r7, sp, #16
 800bf8c:	6078      	str	r0, [r7, #4]
 800bf8e:	4608      	mov	r0, r1
 800bf90:	4611      	mov	r1, r2
 800bf92:	461a      	mov	r2, r3
 800bf94:	4603      	mov	r3, r0
 800bf96:	70fb      	strb	r3, [r7, #3]
 800bf98:	460b      	mov	r3, r1
 800bf9a:	70bb      	strb	r3, [r7, #2]
 800bf9c:	4613      	mov	r3, r2
 800bf9e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800bfae:	787c      	ldrb	r4, [r7, #1]
 800bfb0:	78ba      	ldrb	r2, [r7, #2]
 800bfb2:	78f9      	ldrb	r1, [r7, #3]
 800bfb4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800bfb8:	9303      	str	r3, [sp, #12]
 800bfba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bfbc:	9302      	str	r3, [sp, #8]
 800bfbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfc0:	9301      	str	r3, [sp, #4]
 800bfc2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bfc6:	9300      	str	r3, [sp, #0]
 800bfc8:	4623      	mov	r3, r4
 800bfca:	f7f7 fbcf 	bl	800376c <HAL_HCD_HC_SubmitRequest>
 800bfce:	4603      	mov	r3, r0
 800bfd0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800bfd2:	7bfb      	ldrb	r3, [r7, #15]
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	f000 f89d 	bl	800c114 <USBH_Get_USB_Status>
 800bfda:	4603      	mov	r3, r0
 800bfdc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bfde:	7bbb      	ldrb	r3, [r7, #14]
}
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	3714      	adds	r7, #20
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd90      	pop	{r4, r7, pc}

0800bfe8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b082      	sub	sp, #8
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
 800bff0:	460b      	mov	r3, r1
 800bff2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bffa:	78fa      	ldrb	r2, [r7, #3]
 800bffc:	4611      	mov	r1, r2
 800bffe:	4618      	mov	r0, r3
 800c000:	f7f7 fe63 	bl	8003cca <HAL_HCD_HC_GetURBState>
 800c004:	4603      	mov	r3, r0
}
 800c006:	4618      	mov	r0, r3
 800c008:	3708      	adds	r7, #8
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bd80      	pop	{r7, pc}

0800c00e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800c00e:	b580      	push	{r7, lr}
 800c010:	b082      	sub	sp, #8
 800c012:	af00      	add	r7, sp, #0
 800c014:	6078      	str	r0, [r7, #4]
 800c016:	460b      	mov	r3, r1
 800c018:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c020:	2b01      	cmp	r3, #1
 800c022:	d103      	bne.n	800c02c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800c024:	78fb      	ldrb	r3, [r7, #3]
 800c026:	4618      	mov	r0, r3
 800c028:	f000 f8a0 	bl	800c16c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800c02c:	20c8      	movs	r0, #200	; 0xc8
 800c02e:	f7f6 fc15 	bl	800285c <HAL_Delay>
  return USBH_OK;
 800c032:	2300      	movs	r3, #0
}
 800c034:	4618      	mov	r0, r3
 800c036:	3708      	adds	r7, #8
 800c038:	46bd      	mov	sp, r7
 800c03a:	bd80      	pop	{r7, pc}

0800c03c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800c03c:	b480      	push	{r7}
 800c03e:	b085      	sub	sp, #20
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
 800c044:	460b      	mov	r3, r1
 800c046:	70fb      	strb	r3, [r7, #3]
 800c048:	4613      	mov	r3, r2
 800c04a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c052:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800c054:	78fb      	ldrb	r3, [r7, #3]
 800c056:	68fa      	ldr	r2, [r7, #12]
 800c058:	212c      	movs	r1, #44	; 0x2c
 800c05a:	fb01 f303 	mul.w	r3, r1, r3
 800c05e:	4413      	add	r3, r2
 800c060:	333b      	adds	r3, #59	; 0x3b
 800c062:	781b      	ldrb	r3, [r3, #0]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d009      	beq.n	800c07c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800c068:	78fb      	ldrb	r3, [r7, #3]
 800c06a:	68fa      	ldr	r2, [r7, #12]
 800c06c:	212c      	movs	r1, #44	; 0x2c
 800c06e:	fb01 f303 	mul.w	r3, r1, r3
 800c072:	4413      	add	r3, r2
 800c074:	3354      	adds	r3, #84	; 0x54
 800c076:	78ba      	ldrb	r2, [r7, #2]
 800c078:	701a      	strb	r2, [r3, #0]
 800c07a:	e008      	b.n	800c08e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800c07c:	78fb      	ldrb	r3, [r7, #3]
 800c07e:	68fa      	ldr	r2, [r7, #12]
 800c080:	212c      	movs	r1, #44	; 0x2c
 800c082:	fb01 f303 	mul.w	r3, r1, r3
 800c086:	4413      	add	r3, r2
 800c088:	3355      	adds	r3, #85	; 0x55
 800c08a:	78ba      	ldrb	r2, [r7, #2]
 800c08c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800c08e:	2300      	movs	r3, #0
}
 800c090:	4618      	mov	r0, r3
 800c092:	3714      	adds	r7, #20
 800c094:	46bd      	mov	sp, r7
 800c096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09a:	4770      	bx	lr

0800c09c <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c09c:	b480      	push	{r7}
 800c09e:	b085      	sub	sp, #20
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
 800c0a4:	460b      	mov	r3, r1
 800c0a6:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c0b2:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800c0b4:	78fb      	ldrb	r3, [r7, #3]
 800c0b6:	68ba      	ldr	r2, [r7, #8]
 800c0b8:	212c      	movs	r1, #44	; 0x2c
 800c0ba:	fb01 f303 	mul.w	r3, r1, r3
 800c0be:	4413      	add	r3, r2
 800c0c0:	333b      	adds	r3, #59	; 0x3b
 800c0c2:	781b      	ldrb	r3, [r3, #0]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d009      	beq.n	800c0dc <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800c0c8:	78fb      	ldrb	r3, [r7, #3]
 800c0ca:	68ba      	ldr	r2, [r7, #8]
 800c0cc:	212c      	movs	r1, #44	; 0x2c
 800c0ce:	fb01 f303 	mul.w	r3, r1, r3
 800c0d2:	4413      	add	r3, r2
 800c0d4:	3354      	adds	r3, #84	; 0x54
 800c0d6:	781b      	ldrb	r3, [r3, #0]
 800c0d8:	73fb      	strb	r3, [r7, #15]
 800c0da:	e008      	b.n	800c0ee <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800c0dc:	78fb      	ldrb	r3, [r7, #3]
 800c0de:	68ba      	ldr	r2, [r7, #8]
 800c0e0:	212c      	movs	r1, #44	; 0x2c
 800c0e2:	fb01 f303 	mul.w	r3, r1, r3
 800c0e6:	4413      	add	r3, r2
 800c0e8:	3355      	adds	r3, #85	; 0x55
 800c0ea:	781b      	ldrb	r3, [r3, #0]
 800c0ec:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800c0ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	3714      	adds	r7, #20
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fa:	4770      	bx	lr

0800c0fc <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b082      	sub	sp, #8
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f7f6 fba9 	bl	800285c <HAL_Delay>
}
 800c10a:	bf00      	nop
 800c10c:	3708      	adds	r7, #8
 800c10e:	46bd      	mov	sp, r7
 800c110:	bd80      	pop	{r7, pc}
	...

0800c114 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c114:	b480      	push	{r7}
 800c116:	b085      	sub	sp, #20
 800c118:	af00      	add	r7, sp, #0
 800c11a:	4603      	mov	r3, r0
 800c11c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c11e:	2300      	movs	r3, #0
 800c120:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c122:	79fb      	ldrb	r3, [r7, #7]
 800c124:	2b03      	cmp	r3, #3
 800c126:	d817      	bhi.n	800c158 <USBH_Get_USB_Status+0x44>
 800c128:	a201      	add	r2, pc, #4	; (adr r2, 800c130 <USBH_Get_USB_Status+0x1c>)
 800c12a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c12e:	bf00      	nop
 800c130:	0800c141 	.word	0x0800c141
 800c134:	0800c147 	.word	0x0800c147
 800c138:	0800c14d 	.word	0x0800c14d
 800c13c:	0800c153 	.word	0x0800c153
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c140:	2300      	movs	r3, #0
 800c142:	73fb      	strb	r3, [r7, #15]
    break;
 800c144:	e00b      	b.n	800c15e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c146:	2302      	movs	r3, #2
 800c148:	73fb      	strb	r3, [r7, #15]
    break;
 800c14a:	e008      	b.n	800c15e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c14c:	2301      	movs	r3, #1
 800c14e:	73fb      	strb	r3, [r7, #15]
    break;
 800c150:	e005      	b.n	800c15e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c152:	2302      	movs	r3, #2
 800c154:	73fb      	strb	r3, [r7, #15]
    break;
 800c156:	e002      	b.n	800c15e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c158:	2302      	movs	r3, #2
 800c15a:	73fb      	strb	r3, [r7, #15]
    break;
 800c15c:	bf00      	nop
  }
  return usb_status;
 800c15e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c160:	4618      	mov	r0, r3
 800c162:	3714      	adds	r7, #20
 800c164:	46bd      	mov	sp, r7
 800c166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16a:	4770      	bx	lr

0800c16c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b084      	sub	sp, #16
 800c170:	af00      	add	r7, sp, #0
 800c172:	4603      	mov	r3, r0
 800c174:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800c176:	79fb      	ldrb	r3, [r7, #7]
 800c178:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800c17a:	79fb      	ldrb	r3, [r7, #7]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d102      	bne.n	800c186 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800c180:	2300      	movs	r3, #0
 800c182:	73fb      	strb	r3, [r7, #15]
 800c184:	e001      	b.n	800c18a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800c186:	2301      	movs	r3, #1
 800c188:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800c18a:	7bfb      	ldrb	r3, [r7, #15]
 800c18c:	461a      	mov	r2, r3
 800c18e:	2101      	movs	r1, #1
 800c190:	4803      	ldr	r0, [pc, #12]	; (800c1a0 <MX_DriverVbusFS+0x34>)
 800c192:	f7f7 f9bd 	bl	8003510 <HAL_GPIO_WritePin>
}
 800c196:	bf00      	nop
 800c198:	3710      	adds	r7, #16
 800c19a:	46bd      	mov	sp, r7
 800c19c:	bd80      	pop	{r7, pc}
 800c19e:	bf00      	nop
 800c1a0:	40020800 	.word	0x40020800

0800c1a4 <__errno>:
 800c1a4:	4b01      	ldr	r3, [pc, #4]	; (800c1ac <__errno+0x8>)
 800c1a6:	6818      	ldr	r0, [r3, #0]
 800c1a8:	4770      	bx	lr
 800c1aa:	bf00      	nop
 800c1ac:	200002d0 	.word	0x200002d0

0800c1b0 <__libc_init_array>:
 800c1b0:	b570      	push	{r4, r5, r6, lr}
 800c1b2:	4d0d      	ldr	r5, [pc, #52]	; (800c1e8 <__libc_init_array+0x38>)
 800c1b4:	4c0d      	ldr	r4, [pc, #52]	; (800c1ec <__libc_init_array+0x3c>)
 800c1b6:	1b64      	subs	r4, r4, r5
 800c1b8:	10a4      	asrs	r4, r4, #2
 800c1ba:	2600      	movs	r6, #0
 800c1bc:	42a6      	cmp	r6, r4
 800c1be:	d109      	bne.n	800c1d4 <__libc_init_array+0x24>
 800c1c0:	4d0b      	ldr	r5, [pc, #44]	; (800c1f0 <__libc_init_array+0x40>)
 800c1c2:	4c0c      	ldr	r4, [pc, #48]	; (800c1f4 <__libc_init_array+0x44>)
 800c1c4:	f000 f906 	bl	800c3d4 <_init>
 800c1c8:	1b64      	subs	r4, r4, r5
 800c1ca:	10a4      	asrs	r4, r4, #2
 800c1cc:	2600      	movs	r6, #0
 800c1ce:	42a6      	cmp	r6, r4
 800c1d0:	d105      	bne.n	800c1de <__libc_init_array+0x2e>
 800c1d2:	bd70      	pop	{r4, r5, r6, pc}
 800c1d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1d8:	4798      	blx	r3
 800c1da:	3601      	adds	r6, #1
 800c1dc:	e7ee      	b.n	800c1bc <__libc_init_array+0xc>
 800c1de:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1e2:	4798      	blx	r3
 800c1e4:	3601      	adds	r6, #1
 800c1e6:	e7f2      	b.n	800c1ce <__libc_init_array+0x1e>
 800c1e8:	0800c758 	.word	0x0800c758
 800c1ec:	0800c758 	.word	0x0800c758
 800c1f0:	0800c758 	.word	0x0800c758
 800c1f4:	0800c75c 	.word	0x0800c75c

0800c1f8 <malloc>:
 800c1f8:	4b02      	ldr	r3, [pc, #8]	; (800c204 <malloc+0xc>)
 800c1fa:	4601      	mov	r1, r0
 800c1fc:	6818      	ldr	r0, [r3, #0]
 800c1fe:	f000 b871 	b.w	800c2e4 <_malloc_r>
 800c202:	bf00      	nop
 800c204:	200002d0 	.word	0x200002d0

0800c208 <free>:
 800c208:	4b02      	ldr	r3, [pc, #8]	; (800c214 <free+0xc>)
 800c20a:	4601      	mov	r1, r0
 800c20c:	6818      	ldr	r0, [r3, #0]
 800c20e:	f000 b819 	b.w	800c244 <_free_r>
 800c212:	bf00      	nop
 800c214:	200002d0 	.word	0x200002d0

0800c218 <memcpy>:
 800c218:	440a      	add	r2, r1
 800c21a:	4291      	cmp	r1, r2
 800c21c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c220:	d100      	bne.n	800c224 <memcpy+0xc>
 800c222:	4770      	bx	lr
 800c224:	b510      	push	{r4, lr}
 800c226:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c22a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c22e:	4291      	cmp	r1, r2
 800c230:	d1f9      	bne.n	800c226 <memcpy+0xe>
 800c232:	bd10      	pop	{r4, pc}

0800c234 <memset>:
 800c234:	4402      	add	r2, r0
 800c236:	4603      	mov	r3, r0
 800c238:	4293      	cmp	r3, r2
 800c23a:	d100      	bne.n	800c23e <memset+0xa>
 800c23c:	4770      	bx	lr
 800c23e:	f803 1b01 	strb.w	r1, [r3], #1
 800c242:	e7f9      	b.n	800c238 <memset+0x4>

0800c244 <_free_r>:
 800c244:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c246:	2900      	cmp	r1, #0
 800c248:	d048      	beq.n	800c2dc <_free_r+0x98>
 800c24a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c24e:	9001      	str	r0, [sp, #4]
 800c250:	2b00      	cmp	r3, #0
 800c252:	f1a1 0404 	sub.w	r4, r1, #4
 800c256:	bfb8      	it	lt
 800c258:	18e4      	addlt	r4, r4, r3
 800c25a:	f000 f8ad 	bl	800c3b8 <__malloc_lock>
 800c25e:	4a20      	ldr	r2, [pc, #128]	; (800c2e0 <_free_r+0x9c>)
 800c260:	9801      	ldr	r0, [sp, #4]
 800c262:	6813      	ldr	r3, [r2, #0]
 800c264:	4615      	mov	r5, r2
 800c266:	b933      	cbnz	r3, 800c276 <_free_r+0x32>
 800c268:	6063      	str	r3, [r4, #4]
 800c26a:	6014      	str	r4, [r2, #0]
 800c26c:	b003      	add	sp, #12
 800c26e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c272:	f000 b8a7 	b.w	800c3c4 <__malloc_unlock>
 800c276:	42a3      	cmp	r3, r4
 800c278:	d90b      	bls.n	800c292 <_free_r+0x4e>
 800c27a:	6821      	ldr	r1, [r4, #0]
 800c27c:	1862      	adds	r2, r4, r1
 800c27e:	4293      	cmp	r3, r2
 800c280:	bf04      	itt	eq
 800c282:	681a      	ldreq	r2, [r3, #0]
 800c284:	685b      	ldreq	r3, [r3, #4]
 800c286:	6063      	str	r3, [r4, #4]
 800c288:	bf04      	itt	eq
 800c28a:	1852      	addeq	r2, r2, r1
 800c28c:	6022      	streq	r2, [r4, #0]
 800c28e:	602c      	str	r4, [r5, #0]
 800c290:	e7ec      	b.n	800c26c <_free_r+0x28>
 800c292:	461a      	mov	r2, r3
 800c294:	685b      	ldr	r3, [r3, #4]
 800c296:	b10b      	cbz	r3, 800c29c <_free_r+0x58>
 800c298:	42a3      	cmp	r3, r4
 800c29a:	d9fa      	bls.n	800c292 <_free_r+0x4e>
 800c29c:	6811      	ldr	r1, [r2, #0]
 800c29e:	1855      	adds	r5, r2, r1
 800c2a0:	42a5      	cmp	r5, r4
 800c2a2:	d10b      	bne.n	800c2bc <_free_r+0x78>
 800c2a4:	6824      	ldr	r4, [r4, #0]
 800c2a6:	4421      	add	r1, r4
 800c2a8:	1854      	adds	r4, r2, r1
 800c2aa:	42a3      	cmp	r3, r4
 800c2ac:	6011      	str	r1, [r2, #0]
 800c2ae:	d1dd      	bne.n	800c26c <_free_r+0x28>
 800c2b0:	681c      	ldr	r4, [r3, #0]
 800c2b2:	685b      	ldr	r3, [r3, #4]
 800c2b4:	6053      	str	r3, [r2, #4]
 800c2b6:	4421      	add	r1, r4
 800c2b8:	6011      	str	r1, [r2, #0]
 800c2ba:	e7d7      	b.n	800c26c <_free_r+0x28>
 800c2bc:	d902      	bls.n	800c2c4 <_free_r+0x80>
 800c2be:	230c      	movs	r3, #12
 800c2c0:	6003      	str	r3, [r0, #0]
 800c2c2:	e7d3      	b.n	800c26c <_free_r+0x28>
 800c2c4:	6825      	ldr	r5, [r4, #0]
 800c2c6:	1961      	adds	r1, r4, r5
 800c2c8:	428b      	cmp	r3, r1
 800c2ca:	bf04      	itt	eq
 800c2cc:	6819      	ldreq	r1, [r3, #0]
 800c2ce:	685b      	ldreq	r3, [r3, #4]
 800c2d0:	6063      	str	r3, [r4, #4]
 800c2d2:	bf04      	itt	eq
 800c2d4:	1949      	addeq	r1, r1, r5
 800c2d6:	6021      	streq	r1, [r4, #0]
 800c2d8:	6054      	str	r4, [r2, #4]
 800c2da:	e7c7      	b.n	800c26c <_free_r+0x28>
 800c2dc:	b003      	add	sp, #12
 800c2de:	bd30      	pop	{r4, r5, pc}
 800c2e0:	200003cc 	.word	0x200003cc

0800c2e4 <_malloc_r>:
 800c2e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2e6:	1ccd      	adds	r5, r1, #3
 800c2e8:	f025 0503 	bic.w	r5, r5, #3
 800c2ec:	3508      	adds	r5, #8
 800c2ee:	2d0c      	cmp	r5, #12
 800c2f0:	bf38      	it	cc
 800c2f2:	250c      	movcc	r5, #12
 800c2f4:	2d00      	cmp	r5, #0
 800c2f6:	4606      	mov	r6, r0
 800c2f8:	db01      	blt.n	800c2fe <_malloc_r+0x1a>
 800c2fa:	42a9      	cmp	r1, r5
 800c2fc:	d903      	bls.n	800c306 <_malloc_r+0x22>
 800c2fe:	230c      	movs	r3, #12
 800c300:	6033      	str	r3, [r6, #0]
 800c302:	2000      	movs	r0, #0
 800c304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c306:	f000 f857 	bl	800c3b8 <__malloc_lock>
 800c30a:	4921      	ldr	r1, [pc, #132]	; (800c390 <_malloc_r+0xac>)
 800c30c:	680a      	ldr	r2, [r1, #0]
 800c30e:	4614      	mov	r4, r2
 800c310:	b99c      	cbnz	r4, 800c33a <_malloc_r+0x56>
 800c312:	4f20      	ldr	r7, [pc, #128]	; (800c394 <_malloc_r+0xb0>)
 800c314:	683b      	ldr	r3, [r7, #0]
 800c316:	b923      	cbnz	r3, 800c322 <_malloc_r+0x3e>
 800c318:	4621      	mov	r1, r4
 800c31a:	4630      	mov	r0, r6
 800c31c:	f000 f83c 	bl	800c398 <_sbrk_r>
 800c320:	6038      	str	r0, [r7, #0]
 800c322:	4629      	mov	r1, r5
 800c324:	4630      	mov	r0, r6
 800c326:	f000 f837 	bl	800c398 <_sbrk_r>
 800c32a:	1c43      	adds	r3, r0, #1
 800c32c:	d123      	bne.n	800c376 <_malloc_r+0x92>
 800c32e:	230c      	movs	r3, #12
 800c330:	6033      	str	r3, [r6, #0]
 800c332:	4630      	mov	r0, r6
 800c334:	f000 f846 	bl	800c3c4 <__malloc_unlock>
 800c338:	e7e3      	b.n	800c302 <_malloc_r+0x1e>
 800c33a:	6823      	ldr	r3, [r4, #0]
 800c33c:	1b5b      	subs	r3, r3, r5
 800c33e:	d417      	bmi.n	800c370 <_malloc_r+0x8c>
 800c340:	2b0b      	cmp	r3, #11
 800c342:	d903      	bls.n	800c34c <_malloc_r+0x68>
 800c344:	6023      	str	r3, [r4, #0]
 800c346:	441c      	add	r4, r3
 800c348:	6025      	str	r5, [r4, #0]
 800c34a:	e004      	b.n	800c356 <_malloc_r+0x72>
 800c34c:	6863      	ldr	r3, [r4, #4]
 800c34e:	42a2      	cmp	r2, r4
 800c350:	bf0c      	ite	eq
 800c352:	600b      	streq	r3, [r1, #0]
 800c354:	6053      	strne	r3, [r2, #4]
 800c356:	4630      	mov	r0, r6
 800c358:	f000 f834 	bl	800c3c4 <__malloc_unlock>
 800c35c:	f104 000b 	add.w	r0, r4, #11
 800c360:	1d23      	adds	r3, r4, #4
 800c362:	f020 0007 	bic.w	r0, r0, #7
 800c366:	1ac2      	subs	r2, r0, r3
 800c368:	d0cc      	beq.n	800c304 <_malloc_r+0x20>
 800c36a:	1a1b      	subs	r3, r3, r0
 800c36c:	50a3      	str	r3, [r4, r2]
 800c36e:	e7c9      	b.n	800c304 <_malloc_r+0x20>
 800c370:	4622      	mov	r2, r4
 800c372:	6864      	ldr	r4, [r4, #4]
 800c374:	e7cc      	b.n	800c310 <_malloc_r+0x2c>
 800c376:	1cc4      	adds	r4, r0, #3
 800c378:	f024 0403 	bic.w	r4, r4, #3
 800c37c:	42a0      	cmp	r0, r4
 800c37e:	d0e3      	beq.n	800c348 <_malloc_r+0x64>
 800c380:	1a21      	subs	r1, r4, r0
 800c382:	4630      	mov	r0, r6
 800c384:	f000 f808 	bl	800c398 <_sbrk_r>
 800c388:	3001      	adds	r0, #1
 800c38a:	d1dd      	bne.n	800c348 <_malloc_r+0x64>
 800c38c:	e7cf      	b.n	800c32e <_malloc_r+0x4a>
 800c38e:	bf00      	nop
 800c390:	200003cc 	.word	0x200003cc
 800c394:	200003d0 	.word	0x200003d0

0800c398 <_sbrk_r>:
 800c398:	b538      	push	{r3, r4, r5, lr}
 800c39a:	4d06      	ldr	r5, [pc, #24]	; (800c3b4 <_sbrk_r+0x1c>)
 800c39c:	2300      	movs	r3, #0
 800c39e:	4604      	mov	r4, r0
 800c3a0:	4608      	mov	r0, r1
 800c3a2:	602b      	str	r3, [r5, #0]
 800c3a4:	f7f6 f976 	bl	8002694 <_sbrk>
 800c3a8:	1c43      	adds	r3, r0, #1
 800c3aa:	d102      	bne.n	800c3b2 <_sbrk_r+0x1a>
 800c3ac:	682b      	ldr	r3, [r5, #0]
 800c3ae:	b103      	cbz	r3, 800c3b2 <_sbrk_r+0x1a>
 800c3b0:	6023      	str	r3, [r4, #0]
 800c3b2:	bd38      	pop	{r3, r4, r5, pc}
 800c3b4:	2000567c 	.word	0x2000567c

0800c3b8 <__malloc_lock>:
 800c3b8:	4801      	ldr	r0, [pc, #4]	; (800c3c0 <__malloc_lock+0x8>)
 800c3ba:	f000 b809 	b.w	800c3d0 <__retarget_lock_acquire_recursive>
 800c3be:	bf00      	nop
 800c3c0:	20005684 	.word	0x20005684

0800c3c4 <__malloc_unlock>:
 800c3c4:	4801      	ldr	r0, [pc, #4]	; (800c3cc <__malloc_unlock+0x8>)
 800c3c6:	f000 b804 	b.w	800c3d2 <__retarget_lock_release_recursive>
 800c3ca:	bf00      	nop
 800c3cc:	20005684 	.word	0x20005684

0800c3d0 <__retarget_lock_acquire_recursive>:
 800c3d0:	4770      	bx	lr

0800c3d2 <__retarget_lock_release_recursive>:
 800c3d2:	4770      	bx	lr

0800c3d4 <_init>:
 800c3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3d6:	bf00      	nop
 800c3d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3da:	bc08      	pop	{r3}
 800c3dc:	469e      	mov	lr, r3
 800c3de:	4770      	bx	lr

0800c3e0 <_fini>:
 800c3e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3e2:	bf00      	nop
 800c3e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3e6:	bc08      	pop	{r3}
 800c3e8:	469e      	mov	lr, r3
 800c3ea:	4770      	bx	lr
