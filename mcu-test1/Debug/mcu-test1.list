
mcu-test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c28  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08009db0  08009db0  00019db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ea4  08009ea4  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08009ea4  08009ea4  00019ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009eac  08009eac  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009eac  08009eac  00019eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009eb0  08009eb0  00019eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08009eb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00004890  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004920  20004920  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002032d  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000043d5  00000000  00000000  000403ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d98  00000000  00000000  000447c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000bf0  00000000  00000000  00045560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024efb  00000000  00000000  00046150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015bcd  00000000  00000000  0006b04b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6aa8  00000000  00000000  00080c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001476c0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000375c  00000000  00000000  00147714  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009d98 	.word	0x08009d98

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08009d98 	.word	0x08009d98

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004c4:	f000 fa54 	bl	8000970 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004c8:	f000 f890 	bl	80005ec <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004cc:	f000 f8f8 	bl	80006c0 <MX_GPIO_Init>
	MX_FATFS_Init();
 80004d0:	f003 ff2c 	bl	800432c <MX_FATFS_Init>
	MX_USB_HOST_Init();
 80004d4:	f009 f810 	bl	80094f8 <MX_USB_HOST_Init>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		/* USER CODE END WHILE */
		MX_USB_HOST_Process();
 80004d8:	f009 f834 	bl	8009544 <MX_USB_HOST_Process>

		/* USER CODE BEGIN 3 */
		HAL_GPIO_WritePin(OtgPower_GPIO_Port, OtgPower_Pin, GPIO_PIN_RESET);
 80004dc:	2200      	movs	r2, #0
 80004de:	2101      	movs	r1, #1
 80004e0:	483a      	ldr	r0, [pc, #232]	; (80005cc <main+0x10c>)
 80004e2:	f000 fda1 	bl	8001028 <HAL_GPIO_WritePin>

		if (Appli_state == APPLICATION_READY)
 80004e6:	4b3a      	ldr	r3, [pc, #232]	; (80005d0 <main+0x110>)
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	2b02      	cmp	r3, #2
 80004ec:	d133      	bne.n	8000556 <main+0x96>
		{
			//HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, GPIO_PIN_SET);
			if(HAL_GPIO_ReadPin(Btn1_GPIO_Port, Btn1_Pin) == GPIO_PIN_SET) {
 80004ee:	2101      	movs	r1, #1
 80004f0:	4838      	ldr	r0, [pc, #224]	; (80005d4 <main+0x114>)
 80004f2:	f000 fd81 	bl	8000ff8 <HAL_GPIO_ReadPin>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b01      	cmp	r3, #1
 80004fa:	d1ed      	bne.n	80004d8 <main+0x18>
				if(f_open(&inFile, "IN.TXT", FA_READ) == FR_OK)
 80004fc:	2201      	movs	r2, #1
 80004fe:	4936      	ldr	r1, [pc, #216]	; (80005d8 <main+0x118>)
 8000500:	4836      	ldr	r0, [pc, #216]	; (80005dc <main+0x11c>)
 8000502:	f008 fd29 	bl	8008f58 <f_open>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d110      	bne.n	800052e <main+0x6e>
				{
					// succ
					HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, GPIO_PIN_SET);
 800050c:	2201      	movs	r2, #1
 800050e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000512:	4833      	ldr	r0, [pc, #204]	; (80005e0 <main+0x120>)
 8000514:	f000 fd88 	bl	8001028 <HAL_GPIO_WritePin>
					HAL_Delay(1000);
 8000518:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800051c:	f000 fa9a 	bl	8000a54 <HAL_Delay>
					HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, GPIO_PIN_RESET);
 8000520:	2200      	movs	r2, #0
 8000522:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000526:	482e      	ldr	r0, [pc, #184]	; (80005e0 <main+0x120>)
 8000528:	f000 fd7e 	bl	8001028 <HAL_GPIO_WritePin>
 800052c:	e00f      	b.n	800054e <main+0x8e>
				} else {
					// wtf
					HAL_GPIO_WritePin(Led3_GPIO_Port, Led3_Pin, GPIO_PIN_SET);
 800052e:	2201      	movs	r2, #1
 8000530:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000534:	482a      	ldr	r0, [pc, #168]	; (80005e0 <main+0x120>)
 8000536:	f000 fd77 	bl	8001028 <HAL_GPIO_WritePin>
					HAL_Delay(1000);
 800053a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800053e:	f000 fa89 	bl	8000a54 <HAL_Delay>
					HAL_GPIO_WritePin(Led3_GPIO_Port, Led3_Pin, GPIO_PIN_RESET);
 8000542:	2200      	movs	r2, #0
 8000544:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000548:	4825      	ldr	r0, [pc, #148]	; (80005e0 <main+0x120>)
 800054a:	f000 fd6d 	bl	8001028 <HAL_GPIO_WritePin>
				}
				f_close(&inFile);
 800054e:	4823      	ldr	r0, [pc, #140]	; (80005dc <main+0x11c>)
 8000550:	f008 ff4c 	bl	80093ec <f_close>
 8000554:	e7c0      	b.n	80004d8 <main+0x18>
			}
		}
		else if (Appli_state == APPLICATION_DISCONNECT || Appli_state == APPLICATION_IDLE)
 8000556:	4b1e      	ldr	r3, [pc, #120]	; (80005d0 <main+0x110>)
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	2b03      	cmp	r3, #3
 800055c:	d003      	beq.n	8000566 <main+0xa6>
 800055e:	4b1c      	ldr	r3, [pc, #112]	; (80005d0 <main+0x110>)
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d118      	bne.n	8000598 <main+0xd8>
		{
			HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, GPIO_PIN_RESET);
 8000566:	2200      	movs	r2, #0
 8000568:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800056c:	481c      	ldr	r0, [pc, #112]	; (80005e0 <main+0x120>)
 800056e:	f000 fd5b 	bl	8001028 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led2_GPIO_Port, Led2_Pin, GPIO_PIN_RESET);
 8000572:	2200      	movs	r2, #0
 8000574:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000578:	4819      	ldr	r0, [pc, #100]	; (80005e0 <main+0x120>)
 800057a:	f000 fd55 	bl	8001028 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led3_GPIO_Port, Led3_Pin, GPIO_PIN_RESET);
 800057e:	2200      	movs	r2, #0
 8000580:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000584:	4816      	ldr	r0, [pc, #88]	; (80005e0 <main+0x120>)
 8000586:	f000 fd4f 	bl	8001028 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led4_GPIO_Port, Led4_Pin, GPIO_PIN_RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000590:	4813      	ldr	r0, [pc, #76]	; (80005e0 <main+0x120>)
 8000592:	f000 fd49 	bl	8001028 <HAL_GPIO_WritePin>
 8000596:	e018      	b.n	80005ca <main+0x10a>
		}
		else if (Appli_state == APPLICATION_START)
 8000598:	4b0d      	ldr	r3, [pc, #52]	; (80005d0 <main+0x110>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2b01      	cmp	r3, #1
 800059e:	d19b      	bne.n	80004d8 <main+0x18>
		{
			if (f_mount(&myUsbFatFS, (TCHAR const*)USBHPath, 0) == FR_OK)
 80005a0:	2200      	movs	r2, #0
 80005a2:	4910      	ldr	r1, [pc, #64]	; (80005e4 <main+0x124>)
 80005a4:	4810      	ldr	r0, [pc, #64]	; (80005e8 <main+0x128>)
 80005a6:	f008 fc91 	bl	8008ecc <f_mount>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d106      	bne.n	80005be <main+0xfe>
			{
				HAL_GPIO_WritePin(Led4_GPIO_Port, Led4_Pin, GPIO_PIN_SET);
 80005b0:	2201      	movs	r2, #1
 80005b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005b6:	480a      	ldr	r0, [pc, #40]	; (80005e0 <main+0x120>)
 80005b8:	f000 fd36 	bl	8001028 <HAL_GPIO_WritePin>
 80005bc:	e78c      	b.n	80004d8 <main+0x18>
			}
			else
			{
				HAL_GPIO_WritePin(Led3_GPIO_Port, Led3_Pin, GPIO_PIN_SET);
 80005be:	2201      	movs	r2, #1
 80005c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005c4:	4806      	ldr	r0, [pc, #24]	; (80005e0 <main+0x120>)
 80005c6:	f000 fd2f 	bl	8001028 <HAL_GPIO_WritePin>
		MX_USB_HOST_Process();
 80005ca:	e785      	b.n	80004d8 <main+0x18>
 80005cc:	40020800 	.word	0x40020800
 80005d0:	200000e4 	.word	0x200000e4
 80005d4:	40020000 	.word	0x40020000
 80005d8:	08009db0 	.word	0x08009db0
 80005dc:	200000f8 	.word	0x200000f8
 80005e0:	40020c00 	.word	0x40020c00
 80005e4:	200021c8 	.word	0x200021c8
 80005e8:	20001128 	.word	0x20001128

080005ec <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b094      	sub	sp, #80	; 0x50
 80005f0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 0320 	add.w	r3, r7, #32
 80005f6:	2230      	movs	r2, #48	; 0x30
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f009 fafc 	bl	8009bf8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000610:	2300      	movs	r3, #0
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	4b28      	ldr	r3, [pc, #160]	; (80006b8 <SystemClock_Config+0xcc>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000618:	4a27      	ldr	r2, [pc, #156]	; (80006b8 <SystemClock_Config+0xcc>)
 800061a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061e:	6413      	str	r3, [r2, #64]	; 0x40
 8000620:	4b25      	ldr	r3, [pc, #148]	; (80006b8 <SystemClock_Config+0xcc>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000628:	60bb      	str	r3, [r7, #8]
 800062a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800062c:	2300      	movs	r3, #0
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	4b22      	ldr	r3, [pc, #136]	; (80006bc <SystemClock_Config+0xd0>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a21      	ldr	r2, [pc, #132]	; (80006bc <SystemClock_Config+0xd0>)
 8000636:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800063a:	6013      	str	r3, [r2, #0]
 800063c:	4b1f      	ldr	r3, [pc, #124]	; (80006bc <SystemClock_Config+0xd0>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000648:	2301      	movs	r3, #1
 800064a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800064c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000650:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000652:	2302      	movs	r3, #2
 8000654:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000656:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800065a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 800065c:	2308      	movs	r3, #8
 800065e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000660:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000664:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000666:	2302      	movs	r3, #2
 8000668:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800066a:	2307      	movs	r3, #7
 800066c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066e:	f107 0320 	add.w	r3, r7, #32
 8000672:	4618      	mov	r0, r3
 8000674:	f002 fa62 	bl	8002b3c <HAL_RCC_OscConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0x96>
	{
		Error_Handler();
 800067e:	f000 f8a3 	bl	80007c8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000682:	230f      	movs	r3, #15
 8000684:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000686:	2302      	movs	r3, #2
 8000688:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800068e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000692:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000694:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000698:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800069a:	f107 030c 	add.w	r3, r7, #12
 800069e:	2105      	movs	r1, #5
 80006a0:	4618      	mov	r0, r3
 80006a2:	f002 fcc3 	bl	800302c <HAL_RCC_ClockConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 80006ac:	f000 f88c 	bl	80007c8 <Error_Handler>
	}
}
 80006b0:	bf00      	nop
 80006b2:	3750      	adds	r7, #80	; 0x50
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40007000 	.word	0x40007000

080006c0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b08a      	sub	sp, #40	; 0x28
 80006c4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c6:	f107 0314 	add.w	r3, r7, #20
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
 80006d4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	613b      	str	r3, [r7, #16]
 80006da:	4b37      	ldr	r3, [pc, #220]	; (80007b8 <MX_GPIO_Init+0xf8>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a36      	ldr	r2, [pc, #216]	; (80007b8 <MX_GPIO_Init+0xf8>)
 80006e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b34      	ldr	r3, [pc, #208]	; (80007b8 <MX_GPIO_Init+0xf8>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ee:	613b      	str	r3, [r7, #16]
 80006f0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	60fb      	str	r3, [r7, #12]
 80006f6:	4b30      	ldr	r3, [pc, #192]	; (80007b8 <MX_GPIO_Init+0xf8>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a2f      	ldr	r2, [pc, #188]	; (80007b8 <MX_GPIO_Init+0xf8>)
 80006fc:	f043 0304 	orr.w	r3, r3, #4
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b2d      	ldr	r3, [pc, #180]	; (80007b8 <MX_GPIO_Init+0xf8>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0304 	and.w	r3, r3, #4
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	4b29      	ldr	r3, [pc, #164]	; (80007b8 <MX_GPIO_Init+0xf8>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a28      	ldr	r2, [pc, #160]	; (80007b8 <MX_GPIO_Init+0xf8>)
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b26      	ldr	r3, [pc, #152]	; (80007b8 <MX_GPIO_Init+0xf8>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	4b22      	ldr	r3, [pc, #136]	; (80007b8 <MX_GPIO_Init+0xf8>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a21      	ldr	r2, [pc, #132]	; (80007b8 <MX_GPIO_Init+0xf8>)
 8000734:	f043 0308 	orr.w	r3, r3, #8
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b1f      	ldr	r3, [pc, #124]	; (80007b8 <MX_GPIO_Init+0xf8>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0308 	and.w	r3, r3, #8
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OtgPower_GPIO_Port, OtgPower_Pin, GPIO_PIN_RESET);
 8000746:	2200      	movs	r2, #0
 8000748:	2101      	movs	r1, #1
 800074a:	481c      	ldr	r0, [pc, #112]	; (80007bc <MX_GPIO_Init+0xfc>)
 800074c:	f000 fc6c 	bl	8001028 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, Led1_Pin|Led2_Pin|Led3_Pin|Led4_Pin, GPIO_PIN_RESET);
 8000750:	2200      	movs	r2, #0
 8000752:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000756:	481a      	ldr	r0, [pc, #104]	; (80007c0 <MX_GPIO_Init+0x100>)
 8000758:	f000 fc66 	bl	8001028 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : OtgPower_Pin */
	GPIO_InitStruct.Pin = OtgPower_Pin;
 800075c:	2301      	movs	r3, #1
 800075e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000760:	2301      	movs	r3, #1
 8000762:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000768:	2300      	movs	r3, #0
 800076a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(OtgPower_GPIO_Port, &GPIO_InitStruct);
 800076c:	f107 0314 	add.w	r3, r7, #20
 8000770:	4619      	mov	r1, r3
 8000772:	4812      	ldr	r0, [pc, #72]	; (80007bc <MX_GPIO_Init+0xfc>)
 8000774:	f000 faa4 	bl	8000cc0 <HAL_GPIO_Init>

	/*Configure GPIO pin : Btn1_Pin */
	GPIO_InitStruct.Pin = Btn1_Pin;
 8000778:	2301      	movs	r3, #1
 800077a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800077c:	2300      	movs	r3, #0
 800077e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(Btn1_GPIO_Port, &GPIO_InitStruct);
 8000784:	f107 0314 	add.w	r3, r7, #20
 8000788:	4619      	mov	r1, r3
 800078a:	480e      	ldr	r0, [pc, #56]	; (80007c4 <MX_GPIO_Init+0x104>)
 800078c:	f000 fa98 	bl	8000cc0 <HAL_GPIO_Init>

	/*Configure GPIO pins : Led1_Pin Led2_Pin Led3_Pin Led4_Pin */
	GPIO_InitStruct.Pin = Led1_Pin|Led2_Pin|Led3_Pin|Led4_Pin;
 8000790:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000794:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000796:	2301      	movs	r3, #1
 8000798:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079e:	2300      	movs	r3, #0
 80007a0:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007a2:	f107 0314 	add.w	r3, r7, #20
 80007a6:	4619      	mov	r1, r3
 80007a8:	4805      	ldr	r0, [pc, #20]	; (80007c0 <MX_GPIO_Init+0x100>)
 80007aa:	f000 fa89 	bl	8000cc0 <HAL_GPIO_Init>

}
 80007ae:	bf00      	nop
 80007b0:	3728      	adds	r7, #40	; 0x28
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40020800 	.word	0x40020800
 80007c0:	40020c00 	.word	0x40020c00
 80007c4:	40020000 	.word	0x40020000

080007c8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007cc:	b672      	cpsid	i
}
 80007ce:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80007d0:	e7fe      	b.n	80007d0 <Error_Handler+0x8>
	...

080007d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	4b10      	ldr	r3, [pc, #64]	; (8000820 <HAL_MspInit+0x4c>)
 80007e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e2:	4a0f      	ldr	r2, [pc, #60]	; (8000820 <HAL_MspInit+0x4c>)
 80007e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007e8:	6453      	str	r3, [r2, #68]	; 0x44
 80007ea:	4b0d      	ldr	r3, [pc, #52]	; (8000820 <HAL_MspInit+0x4c>)
 80007ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	603b      	str	r3, [r7, #0]
 80007fa:	4b09      	ldr	r3, [pc, #36]	; (8000820 <HAL_MspInit+0x4c>)
 80007fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fe:	4a08      	ldr	r2, [pc, #32]	; (8000820 <HAL_MspInit+0x4c>)
 8000800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000804:	6413      	str	r3, [r2, #64]	; 0x40
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <HAL_MspInit+0x4c>)
 8000808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800080e:	603b      	str	r3, [r7, #0]
 8000810:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000812:	bf00      	nop
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	40023800 	.word	0x40023800

08000824 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000828:	e7fe      	b.n	8000828 <NMI_Handler+0x4>

0800082a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800082e:	e7fe      	b.n	800082e <HardFault_Handler+0x4>

08000830 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000834:	e7fe      	b.n	8000834 <MemManage_Handler+0x4>

08000836 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000836:	b480      	push	{r7}
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800083a:	e7fe      	b.n	800083a <BusFault_Handler+0x4>

0800083c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000840:	e7fe      	b.n	8000840 <UsageFault_Handler+0x4>

08000842 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000846:	bf00      	nop
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr

0800085e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000862:	bf00      	nop
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr

0800086c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000870:	f000 f8d0 	bl	8000a14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}

08000878 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800087c:	4802      	ldr	r0, [pc, #8]	; (8000888 <OTG_FS_IRQHandler+0x10>)
 800087e:	f000 fe57 	bl	8001530 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	2000460c 	.word	0x2000460c

0800088c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000894:	4a14      	ldr	r2, [pc, #80]	; (80008e8 <_sbrk+0x5c>)
 8000896:	4b15      	ldr	r3, [pc, #84]	; (80008ec <_sbrk+0x60>)
 8000898:	1ad3      	subs	r3, r2, r3
 800089a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008a0:	4b13      	ldr	r3, [pc, #76]	; (80008f0 <_sbrk+0x64>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d102      	bne.n	80008ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008a8:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <_sbrk+0x64>)
 80008aa:	4a12      	ldr	r2, [pc, #72]	; (80008f4 <_sbrk+0x68>)
 80008ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008ae:	4b10      	ldr	r3, [pc, #64]	; (80008f0 <_sbrk+0x64>)
 80008b0:	681a      	ldr	r2, [r3, #0]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4413      	add	r3, r2
 80008b6:	693a      	ldr	r2, [r7, #16]
 80008b8:	429a      	cmp	r2, r3
 80008ba:	d207      	bcs.n	80008cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008bc:	f009 f954 	bl	8009b68 <__errno>
 80008c0:	4603      	mov	r3, r0
 80008c2:	220c      	movs	r2, #12
 80008c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008c6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ca:	e009      	b.n	80008e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008cc:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <_sbrk+0x64>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008d2:	4b07      	ldr	r3, [pc, #28]	; (80008f0 <_sbrk+0x64>)
 80008d4:	681a      	ldr	r2, [r3, #0]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	4413      	add	r3, r2
 80008da:	4a05      	ldr	r2, [pc, #20]	; (80008f0 <_sbrk+0x64>)
 80008dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008de:	68fb      	ldr	r3, [r7, #12]
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3718      	adds	r7, #24
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20020000 	.word	0x20020000
 80008ec:	00000400 	.word	0x00000400
 80008f0:	200000ac 	.word	0x200000ac
 80008f4:	20004920 	.word	0x20004920

080008f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <SystemInit+0x20>)
 80008fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000902:	4a05      	ldr	r2, [pc, #20]	; (8000918 <SystemInit+0x20>)
 8000904:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000908:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	e000ed00 	.word	0xe000ed00

0800091c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800091c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000954 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000920:	480d      	ldr	r0, [pc, #52]	; (8000958 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000922:	490e      	ldr	r1, [pc, #56]	; (800095c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000924:	4a0e      	ldr	r2, [pc, #56]	; (8000960 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000926:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000928:	e002      	b.n	8000930 <LoopCopyDataInit>

0800092a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800092a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800092c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800092e:	3304      	adds	r3, #4

08000930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000934:	d3f9      	bcc.n	800092a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000936:	4a0b      	ldr	r2, [pc, #44]	; (8000964 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000938:	4c0b      	ldr	r4, [pc, #44]	; (8000968 <LoopFillZerobss+0x26>)
  movs r3, #0
 800093a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800093c:	e001      	b.n	8000942 <LoopFillZerobss>

0800093e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800093e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000940:	3204      	adds	r2, #4

08000942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000944:	d3fb      	bcc.n	800093e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000946:	f7ff ffd7 	bl	80008f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800094a:	f009 f913 	bl	8009b74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800094e:	f7ff fdb7 	bl	80004c0 <main>
  bx  lr    
 8000952:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000954:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000958:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800095c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000960:	08009eb4 	.word	0x08009eb4
  ldr r2, =_sbss
 8000964:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000968:	20004920 	.word	0x20004920

0800096c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800096c:	e7fe      	b.n	800096c <ADC_IRQHandler>
	...

08000970 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000974:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <HAL_Init+0x40>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a0d      	ldr	r2, [pc, #52]	; (80009b0 <HAL_Init+0x40>)
 800097a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800097e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000980:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <HAL_Init+0x40>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a0a      	ldr	r2, [pc, #40]	; (80009b0 <HAL_Init+0x40>)
 8000986:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800098a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800098c:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <HAL_Init+0x40>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a07      	ldr	r2, [pc, #28]	; (80009b0 <HAL_Init+0x40>)
 8000992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000996:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000998:	2003      	movs	r0, #3
 800099a:	f000 f94f 	bl	8000c3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800099e:	200f      	movs	r0, #15
 80009a0:	f000 f808 	bl	80009b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009a4:	f7ff ff16 	bl	80007d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009a8:	2300      	movs	r3, #0
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40023c00 	.word	0x40023c00

080009b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009bc:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <HAL_InitTick+0x54>)
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <HAL_InitTick+0x58>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	4619      	mov	r1, r3
 80009c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80009d2:	4618      	mov	r0, r3
 80009d4:	f000 f967 	bl	8000ca6 <HAL_SYSTICK_Config>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009de:	2301      	movs	r3, #1
 80009e0:	e00e      	b.n	8000a00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2b0f      	cmp	r3, #15
 80009e6:	d80a      	bhi.n	80009fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009e8:	2200      	movs	r2, #0
 80009ea:	6879      	ldr	r1, [r7, #4]
 80009ec:	f04f 30ff 	mov.w	r0, #4294967295
 80009f0:	f000 f92f 	bl	8000c52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009f4:	4a06      	ldr	r2, [pc, #24]	; (8000a10 <HAL_InitTick+0x5c>)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009fa:	2300      	movs	r3, #0
 80009fc:	e000      	b.n	8000a00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20000000 	.word	0x20000000
 8000a0c:	20000008 	.word	0x20000008
 8000a10:	20000004 	.word	0x20000004

08000a14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <HAL_IncTick+0x20>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <HAL_IncTick+0x24>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4413      	add	r3, r2
 8000a24:	4a04      	ldr	r2, [pc, #16]	; (8000a38 <HAL_IncTick+0x24>)
 8000a26:	6013      	str	r3, [r2, #0]
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	20000008 	.word	0x20000008
 8000a38:	200021c4 	.word	0x200021c4

08000a3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a40:	4b03      	ldr	r3, [pc, #12]	; (8000a50 <HAL_GetTick+0x14>)
 8000a42:	681b      	ldr	r3, [r3, #0]
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	200021c4 	.word	0x200021c4

08000a54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a5c:	f7ff ffee 	bl	8000a3c <HAL_GetTick>
 8000a60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a6c:	d005      	beq.n	8000a7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a6e:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <HAL_Delay+0x44>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	461a      	mov	r2, r3
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	4413      	add	r3, r2
 8000a78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a7a:	bf00      	nop
 8000a7c:	f7ff ffde 	bl	8000a3c <HAL_GetTick>
 8000a80:	4602      	mov	r2, r0
 8000a82:	68bb      	ldr	r3, [r7, #8]
 8000a84:	1ad3      	subs	r3, r2, r3
 8000a86:	68fa      	ldr	r2, [r7, #12]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d8f7      	bhi.n	8000a7c <HAL_Delay+0x28>
  {
  }
}
 8000a8c:	bf00      	nop
 8000a8e:	bf00      	nop
 8000a90:	3710      	adds	r7, #16
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000008 	.word	0x20000008

08000a9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	f003 0307 	and.w	r3, r3, #7
 8000aaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aac:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ab2:	68ba      	ldr	r2, [r7, #8]
 8000ab4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ab8:	4013      	ands	r3, r2
 8000aba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ac4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000acc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ace:	4a04      	ldr	r2, [pc, #16]	; (8000ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	60d3      	str	r3, [r2, #12]
}
 8000ad4:	bf00      	nop
 8000ad6:	3714      	adds	r7, #20
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae8:	4b04      	ldr	r3, [pc, #16]	; (8000afc <__NVIC_GetPriorityGrouping+0x18>)
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	0a1b      	lsrs	r3, r3, #8
 8000aee:	f003 0307 	and.w	r3, r3, #7
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	db0b      	blt.n	8000b2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	f003 021f 	and.w	r2, r3, #31
 8000b18:	4907      	ldr	r1, [pc, #28]	; (8000b38 <__NVIC_EnableIRQ+0x38>)
 8000b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1e:	095b      	lsrs	r3, r3, #5
 8000b20:	2001      	movs	r0, #1
 8000b22:	fa00 f202 	lsl.w	r2, r0, r2
 8000b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b2a:	bf00      	nop
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	e000e100 	.word	0xe000e100

08000b3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	6039      	str	r1, [r7, #0]
 8000b46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	db0a      	blt.n	8000b66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	b2da      	uxtb	r2, r3
 8000b54:	490c      	ldr	r1, [pc, #48]	; (8000b88 <__NVIC_SetPriority+0x4c>)
 8000b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5a:	0112      	lsls	r2, r2, #4
 8000b5c:	b2d2      	uxtb	r2, r2
 8000b5e:	440b      	add	r3, r1
 8000b60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b64:	e00a      	b.n	8000b7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	b2da      	uxtb	r2, r3
 8000b6a:	4908      	ldr	r1, [pc, #32]	; (8000b8c <__NVIC_SetPriority+0x50>)
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	f003 030f 	and.w	r3, r3, #15
 8000b72:	3b04      	subs	r3, #4
 8000b74:	0112      	lsls	r2, r2, #4
 8000b76:	b2d2      	uxtb	r2, r2
 8000b78:	440b      	add	r3, r1
 8000b7a:	761a      	strb	r2, [r3, #24]
}
 8000b7c:	bf00      	nop
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	e000e100 	.word	0xe000e100
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b089      	sub	sp, #36	; 0x24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	f003 0307 	and.w	r3, r3, #7
 8000ba2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ba4:	69fb      	ldr	r3, [r7, #28]
 8000ba6:	f1c3 0307 	rsb	r3, r3, #7
 8000baa:	2b04      	cmp	r3, #4
 8000bac:	bf28      	it	cs
 8000bae:	2304      	movcs	r3, #4
 8000bb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	3304      	adds	r3, #4
 8000bb6:	2b06      	cmp	r3, #6
 8000bb8:	d902      	bls.n	8000bc0 <NVIC_EncodePriority+0x30>
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	3b03      	subs	r3, #3
 8000bbe:	e000      	b.n	8000bc2 <NVIC_EncodePriority+0x32>
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc8:	69bb      	ldr	r3, [r7, #24]
 8000bca:	fa02 f303 	lsl.w	r3, r2, r3
 8000bce:	43da      	mvns	r2, r3
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	401a      	ands	r2, r3
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	fa01 f303 	lsl.w	r3, r1, r3
 8000be2:	43d9      	mvns	r1, r3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be8:	4313      	orrs	r3, r2
         );
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3724      	adds	r7, #36	; 0x24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
	...

08000bf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	3b01      	subs	r3, #1
 8000c04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c08:	d301      	bcc.n	8000c0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e00f      	b.n	8000c2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c0e:	4a0a      	ldr	r2, [pc, #40]	; (8000c38 <SysTick_Config+0x40>)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	3b01      	subs	r3, #1
 8000c14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c16:	210f      	movs	r1, #15
 8000c18:	f04f 30ff 	mov.w	r0, #4294967295
 8000c1c:	f7ff ff8e 	bl	8000b3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c20:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <SysTick_Config+0x40>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c26:	4b04      	ldr	r3, [pc, #16]	; (8000c38 <SysTick_Config+0x40>)
 8000c28:	2207      	movs	r2, #7
 8000c2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	e000e010 	.word	0xe000e010

08000c3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f7ff ff29 	bl	8000a9c <__NVIC_SetPriorityGrouping>
}
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b086      	sub	sp, #24
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	4603      	mov	r3, r0
 8000c5a:	60b9      	str	r1, [r7, #8]
 8000c5c:	607a      	str	r2, [r7, #4]
 8000c5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c60:	2300      	movs	r3, #0
 8000c62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c64:	f7ff ff3e 	bl	8000ae4 <__NVIC_GetPriorityGrouping>
 8000c68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c6a:	687a      	ldr	r2, [r7, #4]
 8000c6c:	68b9      	ldr	r1, [r7, #8]
 8000c6e:	6978      	ldr	r0, [r7, #20]
 8000c70:	f7ff ff8e 	bl	8000b90 <NVIC_EncodePriority>
 8000c74:	4602      	mov	r2, r0
 8000c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c7a:	4611      	mov	r1, r2
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff ff5d 	bl	8000b3c <__NVIC_SetPriority>
}
 8000c82:	bf00      	nop
 8000c84:	3718      	adds	r7, #24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b082      	sub	sp, #8
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	4603      	mov	r3, r0
 8000c92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff ff31 	bl	8000b00 <__NVIC_EnableIRQ>
}
 8000c9e:	bf00      	nop
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b082      	sub	sp, #8
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cae:	6878      	ldr	r0, [r7, #4]
 8000cb0:	f7ff ffa2 	bl	8000bf8 <SysTick_Config>
 8000cb4:	4603      	mov	r3, r0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
	...

08000cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b089      	sub	sp, #36	; 0x24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61fb      	str	r3, [r7, #28]
 8000cda:	e16b      	b.n	8000fb4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cdc:	2201      	movs	r2, #1
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	697a      	ldr	r2, [r7, #20]
 8000cec:	4013      	ands	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	f040 815a 	bne.w	8000fae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f003 0303 	and.w	r3, r3, #3
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d005      	beq.n	8000d12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d0e:	2b02      	cmp	r3, #2
 8000d10:	d130      	bne.n	8000d74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	2203      	movs	r2, #3
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	43db      	mvns	r3, r3
 8000d24:	69ba      	ldr	r2, [r7, #24]
 8000d26:	4013      	ands	r3, r2
 8000d28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	68da      	ldr	r2, [r3, #12]
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	69ba      	ldr	r2, [r7, #24]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	69ba      	ldr	r2, [r7, #24]
 8000d40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d48:	2201      	movs	r2, #1
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	43db      	mvns	r3, r3
 8000d52:	69ba      	ldr	r2, [r7, #24]
 8000d54:	4013      	ands	r3, r2
 8000d56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	091b      	lsrs	r3, r3, #4
 8000d5e:	f003 0201 	and.w	r2, r3, #1
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f003 0303 	and.w	r3, r3, #3
 8000d7c:	2b03      	cmp	r3, #3
 8000d7e:	d017      	beq.n	8000db0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	2203      	movs	r2, #3
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	43db      	mvns	r3, r3
 8000d92:	69ba      	ldr	r2, [r7, #24]
 8000d94:	4013      	ands	r3, r2
 8000d96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	689a      	ldr	r2, [r3, #8]
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f003 0303 	and.w	r3, r3, #3
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	d123      	bne.n	8000e04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	08da      	lsrs	r2, r3, #3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	3208      	adds	r2, #8
 8000dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	f003 0307 	and.w	r3, r3, #7
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	220f      	movs	r2, #15
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	691a      	ldr	r2, [r3, #16]
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	f003 0307 	and.w	r3, r3, #7
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	08da      	lsrs	r2, r3, #3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	3208      	adds	r2, #8
 8000dfe:	69b9      	ldr	r1, [r7, #24]
 8000e00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	2203      	movs	r2, #3
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	43db      	mvns	r3, r3
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f003 0203 	and.w	r2, r3, #3
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	f000 80b4 	beq.w	8000fae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	4b60      	ldr	r3, [pc, #384]	; (8000fcc <HAL_GPIO_Init+0x30c>)
 8000e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4e:	4a5f      	ldr	r2, [pc, #380]	; (8000fcc <HAL_GPIO_Init+0x30c>)
 8000e50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e54:	6453      	str	r3, [r2, #68]	; 0x44
 8000e56:	4b5d      	ldr	r3, [pc, #372]	; (8000fcc <HAL_GPIO_Init+0x30c>)
 8000e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e62:	4a5b      	ldr	r2, [pc, #364]	; (8000fd0 <HAL_GPIO_Init+0x310>)
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	089b      	lsrs	r3, r3, #2
 8000e68:	3302      	adds	r3, #2
 8000e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	f003 0303 	and.w	r3, r3, #3
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	220f      	movs	r2, #15
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	4013      	ands	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a52      	ldr	r2, [pc, #328]	; (8000fd4 <HAL_GPIO_Init+0x314>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d02b      	beq.n	8000ee6 <HAL_GPIO_Init+0x226>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a51      	ldr	r2, [pc, #324]	; (8000fd8 <HAL_GPIO_Init+0x318>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d025      	beq.n	8000ee2 <HAL_GPIO_Init+0x222>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a50      	ldr	r2, [pc, #320]	; (8000fdc <HAL_GPIO_Init+0x31c>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d01f      	beq.n	8000ede <HAL_GPIO_Init+0x21e>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a4f      	ldr	r2, [pc, #316]	; (8000fe0 <HAL_GPIO_Init+0x320>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d019      	beq.n	8000eda <HAL_GPIO_Init+0x21a>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a4e      	ldr	r2, [pc, #312]	; (8000fe4 <HAL_GPIO_Init+0x324>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d013      	beq.n	8000ed6 <HAL_GPIO_Init+0x216>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a4d      	ldr	r2, [pc, #308]	; (8000fe8 <HAL_GPIO_Init+0x328>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d00d      	beq.n	8000ed2 <HAL_GPIO_Init+0x212>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a4c      	ldr	r2, [pc, #304]	; (8000fec <HAL_GPIO_Init+0x32c>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d007      	beq.n	8000ece <HAL_GPIO_Init+0x20e>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a4b      	ldr	r2, [pc, #300]	; (8000ff0 <HAL_GPIO_Init+0x330>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d101      	bne.n	8000eca <HAL_GPIO_Init+0x20a>
 8000ec6:	2307      	movs	r3, #7
 8000ec8:	e00e      	b.n	8000ee8 <HAL_GPIO_Init+0x228>
 8000eca:	2308      	movs	r3, #8
 8000ecc:	e00c      	b.n	8000ee8 <HAL_GPIO_Init+0x228>
 8000ece:	2306      	movs	r3, #6
 8000ed0:	e00a      	b.n	8000ee8 <HAL_GPIO_Init+0x228>
 8000ed2:	2305      	movs	r3, #5
 8000ed4:	e008      	b.n	8000ee8 <HAL_GPIO_Init+0x228>
 8000ed6:	2304      	movs	r3, #4
 8000ed8:	e006      	b.n	8000ee8 <HAL_GPIO_Init+0x228>
 8000eda:	2303      	movs	r3, #3
 8000edc:	e004      	b.n	8000ee8 <HAL_GPIO_Init+0x228>
 8000ede:	2302      	movs	r3, #2
 8000ee0:	e002      	b.n	8000ee8 <HAL_GPIO_Init+0x228>
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e000      	b.n	8000ee8 <HAL_GPIO_Init+0x228>
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	69fa      	ldr	r2, [r7, #28]
 8000eea:	f002 0203 	and.w	r2, r2, #3
 8000eee:	0092      	lsls	r2, r2, #2
 8000ef0:	4093      	lsls	r3, r2
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ef8:	4935      	ldr	r1, [pc, #212]	; (8000fd0 <HAL_GPIO_Init+0x310>)
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	089b      	lsrs	r3, r3, #2
 8000efe:	3302      	adds	r3, #2
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f06:	4b3b      	ldr	r3, [pc, #236]	; (8000ff4 <HAL_GPIO_Init+0x334>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4013      	ands	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d003      	beq.n	8000f2a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f2a:	4a32      	ldr	r2, [pc, #200]	; (8000ff4 <HAL_GPIO_Init+0x334>)
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f30:	4b30      	ldr	r3, [pc, #192]	; (8000ff4 <HAL_GPIO_Init+0x334>)
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d003      	beq.n	8000f54 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f54:	4a27      	ldr	r2, [pc, #156]	; (8000ff4 <HAL_GPIO_Init+0x334>)
 8000f56:	69bb      	ldr	r3, [r7, #24]
 8000f58:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f5a:	4b26      	ldr	r3, [pc, #152]	; (8000ff4 <HAL_GPIO_Init+0x334>)
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	43db      	mvns	r3, r3
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	4013      	ands	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d003      	beq.n	8000f7e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f7e:	4a1d      	ldr	r2, [pc, #116]	; (8000ff4 <HAL_GPIO_Init+0x334>)
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f84:	4b1b      	ldr	r3, [pc, #108]	; (8000ff4 <HAL_GPIO_Init+0x334>)
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	4013      	ands	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d003      	beq.n	8000fa8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fa8:	4a12      	ldr	r2, [pc, #72]	; (8000ff4 <HAL_GPIO_Init+0x334>)
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	61fb      	str	r3, [r7, #28]
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	2b0f      	cmp	r3, #15
 8000fb8:	f67f ae90 	bls.w	8000cdc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fbc:	bf00      	nop
 8000fbe:	bf00      	nop
 8000fc0:	3724      	adds	r7, #36	; 0x24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40013800 	.word	0x40013800
 8000fd4:	40020000 	.word	0x40020000
 8000fd8:	40020400 	.word	0x40020400
 8000fdc:	40020800 	.word	0x40020800
 8000fe0:	40020c00 	.word	0x40020c00
 8000fe4:	40021000 	.word	0x40021000
 8000fe8:	40021400 	.word	0x40021400
 8000fec:	40021800 	.word	0x40021800
 8000ff0:	40021c00 	.word	0x40021c00
 8000ff4:	40013c00 	.word	0x40013c00

08000ff8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	460b      	mov	r3, r1
 8001002:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	691a      	ldr	r2, [r3, #16]
 8001008:	887b      	ldrh	r3, [r7, #2]
 800100a:	4013      	ands	r3, r2
 800100c:	2b00      	cmp	r3, #0
 800100e:	d002      	beq.n	8001016 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001010:	2301      	movs	r3, #1
 8001012:	73fb      	strb	r3, [r7, #15]
 8001014:	e001      	b.n	800101a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001016:	2300      	movs	r3, #0
 8001018:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800101a:	7bfb      	ldrb	r3, [r7, #15]
}
 800101c:	4618      	mov	r0, r3
 800101e:	3714      	adds	r7, #20
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	460b      	mov	r3, r1
 8001032:	807b      	strh	r3, [r7, #2]
 8001034:	4613      	mov	r3, r2
 8001036:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001038:	787b      	ldrb	r3, [r7, #1]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d003      	beq.n	8001046 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800103e:	887a      	ldrh	r2, [r7, #2]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001044:	e003      	b.n	800104e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001046:	887b      	ldrh	r3, [r7, #2]
 8001048:	041a      	lsls	r2, r3, #16
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	619a      	str	r2, [r3, #24]
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800105a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800105c:	b08f      	sub	sp, #60	; 0x3c
 800105e:	af0a      	add	r7, sp, #40	; 0x28
 8001060:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d101      	bne.n	800106c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001068:	2301      	movs	r3, #1
 800106a:	e054      	b.n	8001116 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001078:	b2db      	uxtb	r3, r3
 800107a:	2b00      	cmp	r3, #0
 800107c:	d106      	bne.n	800108c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f008 fa94 	bl	80095b4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2203      	movs	r2, #3
 8001090:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800109c:	2b00      	cmp	r3, #0
 800109e:	d102      	bne.n	80010a6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2200      	movs	r2, #0
 80010a4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f002 f9f8 	bl	80034a0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	603b      	str	r3, [r7, #0]
 80010b6:	687e      	ldr	r6, [r7, #4]
 80010b8:	466d      	mov	r5, sp
 80010ba:	f106 0410 	add.w	r4, r6, #16
 80010be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80010ce:	1d33      	adds	r3, r6, #4
 80010d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010d2:	6838      	ldr	r0, [r7, #0]
 80010d4:	f002 f972 	bl	80033bc <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2101      	movs	r1, #1
 80010de:	4618      	mov	r0, r3
 80010e0:	f002 f9ef 	bl	80034c2 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	603b      	str	r3, [r7, #0]
 80010ea:	687e      	ldr	r6, [r7, #4]
 80010ec:	466d      	mov	r5, sp
 80010ee:	f106 0410 	add.w	r4, r6, #16
 80010f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8001102:	1d33      	adds	r3, r6, #4
 8001104:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001106:	6838      	ldr	r0, [r7, #0]
 8001108:	f002 fb56 	bl	80037b8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2201      	movs	r2, #1
 8001110:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	3714      	adds	r7, #20
 800111a:	46bd      	mov	sp, r7
 800111c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800111e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800111e:	b590      	push	{r4, r7, lr}
 8001120:	b089      	sub	sp, #36	; 0x24
 8001122:	af04      	add	r7, sp, #16
 8001124:	6078      	str	r0, [r7, #4]
 8001126:	4608      	mov	r0, r1
 8001128:	4611      	mov	r1, r2
 800112a:	461a      	mov	r2, r3
 800112c:	4603      	mov	r3, r0
 800112e:	70fb      	strb	r3, [r7, #3]
 8001130:	460b      	mov	r3, r1
 8001132:	70bb      	strb	r3, [r7, #2]
 8001134:	4613      	mov	r3, r2
 8001136:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800113e:	2b01      	cmp	r3, #1
 8001140:	d101      	bne.n	8001146 <HAL_HCD_HC_Init+0x28>
 8001142:	2302      	movs	r3, #2
 8001144:	e076      	b.n	8001234 <HAL_HCD_HC_Init+0x116>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2201      	movs	r2, #1
 800114a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800114e:	78fb      	ldrb	r3, [r7, #3]
 8001150:	687a      	ldr	r2, [r7, #4]
 8001152:	212c      	movs	r1, #44	; 0x2c
 8001154:	fb01 f303 	mul.w	r3, r1, r3
 8001158:	4413      	add	r3, r2
 800115a:	333d      	adds	r3, #61	; 0x3d
 800115c:	2200      	movs	r2, #0
 800115e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001160:	78fb      	ldrb	r3, [r7, #3]
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	212c      	movs	r1, #44	; 0x2c
 8001166:	fb01 f303 	mul.w	r3, r1, r3
 800116a:	4413      	add	r3, r2
 800116c:	3338      	adds	r3, #56	; 0x38
 800116e:	787a      	ldrb	r2, [r7, #1]
 8001170:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001172:	78fb      	ldrb	r3, [r7, #3]
 8001174:	687a      	ldr	r2, [r7, #4]
 8001176:	212c      	movs	r1, #44	; 0x2c
 8001178:	fb01 f303 	mul.w	r3, r1, r3
 800117c:	4413      	add	r3, r2
 800117e:	3340      	adds	r3, #64	; 0x40
 8001180:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001182:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001184:	78fb      	ldrb	r3, [r7, #3]
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	212c      	movs	r1, #44	; 0x2c
 800118a:	fb01 f303 	mul.w	r3, r1, r3
 800118e:	4413      	add	r3, r2
 8001190:	3339      	adds	r3, #57	; 0x39
 8001192:	78fa      	ldrb	r2, [r7, #3]
 8001194:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001196:	78fb      	ldrb	r3, [r7, #3]
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	212c      	movs	r1, #44	; 0x2c
 800119c:	fb01 f303 	mul.w	r3, r1, r3
 80011a0:	4413      	add	r3, r2
 80011a2:	333f      	adds	r3, #63	; 0x3f
 80011a4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80011a8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80011aa:	78fb      	ldrb	r3, [r7, #3]
 80011ac:	78ba      	ldrb	r2, [r7, #2]
 80011ae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80011b2:	b2d0      	uxtb	r0, r2
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	212c      	movs	r1, #44	; 0x2c
 80011b8:	fb01 f303 	mul.w	r3, r1, r3
 80011bc:	4413      	add	r3, r2
 80011be:	333a      	adds	r3, #58	; 0x3a
 80011c0:	4602      	mov	r2, r0
 80011c2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80011c4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	da09      	bge.n	80011e0 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80011cc:	78fb      	ldrb	r3, [r7, #3]
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	212c      	movs	r1, #44	; 0x2c
 80011d2:	fb01 f303 	mul.w	r3, r1, r3
 80011d6:	4413      	add	r3, r2
 80011d8:	333b      	adds	r3, #59	; 0x3b
 80011da:	2201      	movs	r2, #1
 80011dc:	701a      	strb	r2, [r3, #0]
 80011de:	e008      	b.n	80011f2 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80011e0:	78fb      	ldrb	r3, [r7, #3]
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	212c      	movs	r1, #44	; 0x2c
 80011e6:	fb01 f303 	mul.w	r3, r1, r3
 80011ea:	4413      	add	r3, r2
 80011ec:	333b      	adds	r3, #59	; 0x3b
 80011ee:	2200      	movs	r2, #0
 80011f0:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80011f2:	78fb      	ldrb	r3, [r7, #3]
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	212c      	movs	r1, #44	; 0x2c
 80011f8:	fb01 f303 	mul.w	r3, r1, r3
 80011fc:	4413      	add	r3, r2
 80011fe:	333c      	adds	r3, #60	; 0x3c
 8001200:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001204:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6818      	ldr	r0, [r3, #0]
 800120a:	787c      	ldrb	r4, [r7, #1]
 800120c:	78ba      	ldrb	r2, [r7, #2]
 800120e:	78f9      	ldrb	r1, [r7, #3]
 8001210:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001212:	9302      	str	r3, [sp, #8]
 8001214:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001218:	9301      	str	r3, [sp, #4]
 800121a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800121e:	9300      	str	r3, [sp, #0]
 8001220:	4623      	mov	r3, r4
 8001222:	f002 fc43 	bl	8003aac <USB_HC_Init>
 8001226:	4603      	mov	r3, r0
 8001228:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2200      	movs	r2, #0
 800122e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001232:	7bfb      	ldrb	r3, [r7, #15]
}
 8001234:	4618      	mov	r0, r3
 8001236:	3714      	adds	r7, #20
 8001238:	46bd      	mov	sp, r7
 800123a:	bd90      	pop	{r4, r7, pc}

0800123c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	460b      	mov	r3, r1
 8001246:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001248:	2300      	movs	r3, #0
 800124a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001252:	2b01      	cmp	r3, #1
 8001254:	d101      	bne.n	800125a <HAL_HCD_HC_Halt+0x1e>
 8001256:	2302      	movs	r3, #2
 8001258:	e00f      	b.n	800127a <HAL_HCD_HC_Halt+0x3e>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2201      	movs	r2, #1
 800125e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	78fa      	ldrb	r2, [r7, #3]
 8001268:	4611      	mov	r1, r2
 800126a:	4618      	mov	r0, r3
 800126c:	f002 fe7f 	bl	8003f6e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2200      	movs	r2, #0
 8001274:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001278:	7bfb      	ldrb	r3, [r7, #15]
}
 800127a:	4618      	mov	r0, r3
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
	...

08001284 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	4608      	mov	r0, r1
 800128e:	4611      	mov	r1, r2
 8001290:	461a      	mov	r2, r3
 8001292:	4603      	mov	r3, r0
 8001294:	70fb      	strb	r3, [r7, #3]
 8001296:	460b      	mov	r3, r1
 8001298:	70bb      	strb	r3, [r7, #2]
 800129a:	4613      	mov	r3, r2
 800129c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800129e:	78fb      	ldrb	r3, [r7, #3]
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	212c      	movs	r1, #44	; 0x2c
 80012a4:	fb01 f303 	mul.w	r3, r1, r3
 80012a8:	4413      	add	r3, r2
 80012aa:	333b      	adds	r3, #59	; 0x3b
 80012ac:	78ba      	ldrb	r2, [r7, #2]
 80012ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80012b0:	78fb      	ldrb	r3, [r7, #3]
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	212c      	movs	r1, #44	; 0x2c
 80012b6:	fb01 f303 	mul.w	r3, r1, r3
 80012ba:	4413      	add	r3, r2
 80012bc:	333f      	adds	r3, #63	; 0x3f
 80012be:	787a      	ldrb	r2, [r7, #1]
 80012c0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80012c2:	7c3b      	ldrb	r3, [r7, #16]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d112      	bne.n	80012ee <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80012c8:	78fb      	ldrb	r3, [r7, #3]
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	212c      	movs	r1, #44	; 0x2c
 80012ce:	fb01 f303 	mul.w	r3, r1, r3
 80012d2:	4413      	add	r3, r2
 80012d4:	3342      	adds	r3, #66	; 0x42
 80012d6:	2203      	movs	r2, #3
 80012d8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80012da:	78fb      	ldrb	r3, [r7, #3]
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	212c      	movs	r1, #44	; 0x2c
 80012e0:	fb01 f303 	mul.w	r3, r1, r3
 80012e4:	4413      	add	r3, r2
 80012e6:	333d      	adds	r3, #61	; 0x3d
 80012e8:	7f3a      	ldrb	r2, [r7, #28]
 80012ea:	701a      	strb	r2, [r3, #0]
 80012ec:	e008      	b.n	8001300 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80012ee:	78fb      	ldrb	r3, [r7, #3]
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	212c      	movs	r1, #44	; 0x2c
 80012f4:	fb01 f303 	mul.w	r3, r1, r3
 80012f8:	4413      	add	r3, r2
 80012fa:	3342      	adds	r3, #66	; 0x42
 80012fc:	2202      	movs	r2, #2
 80012fe:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001300:	787b      	ldrb	r3, [r7, #1]
 8001302:	2b03      	cmp	r3, #3
 8001304:	f200 80c6 	bhi.w	8001494 <HAL_HCD_HC_SubmitRequest+0x210>
 8001308:	a201      	add	r2, pc, #4	; (adr r2, 8001310 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800130a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800130e:	bf00      	nop
 8001310:	08001321 	.word	0x08001321
 8001314:	08001481 	.word	0x08001481
 8001318:	08001385 	.word	0x08001385
 800131c:	08001403 	.word	0x08001403
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001320:	7c3b      	ldrb	r3, [r7, #16]
 8001322:	2b01      	cmp	r3, #1
 8001324:	f040 80b8 	bne.w	8001498 <HAL_HCD_HC_SubmitRequest+0x214>
 8001328:	78bb      	ldrb	r3, [r7, #2]
 800132a:	2b00      	cmp	r3, #0
 800132c:	f040 80b4 	bne.w	8001498 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001330:	8b3b      	ldrh	r3, [r7, #24]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d108      	bne.n	8001348 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001336:	78fb      	ldrb	r3, [r7, #3]
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	212c      	movs	r1, #44	; 0x2c
 800133c:	fb01 f303 	mul.w	r3, r1, r3
 8001340:	4413      	add	r3, r2
 8001342:	3355      	adds	r3, #85	; 0x55
 8001344:	2201      	movs	r2, #1
 8001346:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001348:	78fb      	ldrb	r3, [r7, #3]
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	212c      	movs	r1, #44	; 0x2c
 800134e:	fb01 f303 	mul.w	r3, r1, r3
 8001352:	4413      	add	r3, r2
 8001354:	3355      	adds	r3, #85	; 0x55
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d109      	bne.n	8001370 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800135c:	78fb      	ldrb	r3, [r7, #3]
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	212c      	movs	r1, #44	; 0x2c
 8001362:	fb01 f303 	mul.w	r3, r1, r3
 8001366:	4413      	add	r3, r2
 8001368:	3342      	adds	r3, #66	; 0x42
 800136a:	2200      	movs	r2, #0
 800136c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800136e:	e093      	b.n	8001498 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001370:	78fb      	ldrb	r3, [r7, #3]
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	212c      	movs	r1, #44	; 0x2c
 8001376:	fb01 f303 	mul.w	r3, r1, r3
 800137a:	4413      	add	r3, r2
 800137c:	3342      	adds	r3, #66	; 0x42
 800137e:	2202      	movs	r2, #2
 8001380:	701a      	strb	r2, [r3, #0]
      break;
 8001382:	e089      	b.n	8001498 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001384:	78bb      	ldrb	r3, [r7, #2]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d11d      	bne.n	80013c6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800138a:	78fb      	ldrb	r3, [r7, #3]
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	212c      	movs	r1, #44	; 0x2c
 8001390:	fb01 f303 	mul.w	r3, r1, r3
 8001394:	4413      	add	r3, r2
 8001396:	3355      	adds	r3, #85	; 0x55
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d109      	bne.n	80013b2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800139e:	78fb      	ldrb	r3, [r7, #3]
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	212c      	movs	r1, #44	; 0x2c
 80013a4:	fb01 f303 	mul.w	r3, r1, r3
 80013a8:	4413      	add	r3, r2
 80013aa:	3342      	adds	r3, #66	; 0x42
 80013ac:	2200      	movs	r2, #0
 80013ae:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80013b0:	e073      	b.n	800149a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80013b2:	78fb      	ldrb	r3, [r7, #3]
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	212c      	movs	r1, #44	; 0x2c
 80013b8:	fb01 f303 	mul.w	r3, r1, r3
 80013bc:	4413      	add	r3, r2
 80013be:	3342      	adds	r3, #66	; 0x42
 80013c0:	2202      	movs	r2, #2
 80013c2:	701a      	strb	r2, [r3, #0]
      break;
 80013c4:	e069      	b.n	800149a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80013c6:	78fb      	ldrb	r3, [r7, #3]
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	212c      	movs	r1, #44	; 0x2c
 80013cc:	fb01 f303 	mul.w	r3, r1, r3
 80013d0:	4413      	add	r3, r2
 80013d2:	3354      	adds	r3, #84	; 0x54
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d109      	bne.n	80013ee <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80013da:	78fb      	ldrb	r3, [r7, #3]
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	212c      	movs	r1, #44	; 0x2c
 80013e0:	fb01 f303 	mul.w	r3, r1, r3
 80013e4:	4413      	add	r3, r2
 80013e6:	3342      	adds	r3, #66	; 0x42
 80013e8:	2200      	movs	r2, #0
 80013ea:	701a      	strb	r2, [r3, #0]
      break;
 80013ec:	e055      	b.n	800149a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80013ee:	78fb      	ldrb	r3, [r7, #3]
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	212c      	movs	r1, #44	; 0x2c
 80013f4:	fb01 f303 	mul.w	r3, r1, r3
 80013f8:	4413      	add	r3, r2
 80013fa:	3342      	adds	r3, #66	; 0x42
 80013fc:	2202      	movs	r2, #2
 80013fe:	701a      	strb	r2, [r3, #0]
      break;
 8001400:	e04b      	b.n	800149a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001402:	78bb      	ldrb	r3, [r7, #2]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d11d      	bne.n	8001444 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001408:	78fb      	ldrb	r3, [r7, #3]
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	212c      	movs	r1, #44	; 0x2c
 800140e:	fb01 f303 	mul.w	r3, r1, r3
 8001412:	4413      	add	r3, r2
 8001414:	3355      	adds	r3, #85	; 0x55
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d109      	bne.n	8001430 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800141c:	78fb      	ldrb	r3, [r7, #3]
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	212c      	movs	r1, #44	; 0x2c
 8001422:	fb01 f303 	mul.w	r3, r1, r3
 8001426:	4413      	add	r3, r2
 8001428:	3342      	adds	r3, #66	; 0x42
 800142a:	2200      	movs	r2, #0
 800142c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800142e:	e034      	b.n	800149a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001430:	78fb      	ldrb	r3, [r7, #3]
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	212c      	movs	r1, #44	; 0x2c
 8001436:	fb01 f303 	mul.w	r3, r1, r3
 800143a:	4413      	add	r3, r2
 800143c:	3342      	adds	r3, #66	; 0x42
 800143e:	2202      	movs	r2, #2
 8001440:	701a      	strb	r2, [r3, #0]
      break;
 8001442:	e02a      	b.n	800149a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001444:	78fb      	ldrb	r3, [r7, #3]
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	212c      	movs	r1, #44	; 0x2c
 800144a:	fb01 f303 	mul.w	r3, r1, r3
 800144e:	4413      	add	r3, r2
 8001450:	3354      	adds	r3, #84	; 0x54
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d109      	bne.n	800146c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001458:	78fb      	ldrb	r3, [r7, #3]
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	212c      	movs	r1, #44	; 0x2c
 800145e:	fb01 f303 	mul.w	r3, r1, r3
 8001462:	4413      	add	r3, r2
 8001464:	3342      	adds	r3, #66	; 0x42
 8001466:	2200      	movs	r2, #0
 8001468:	701a      	strb	r2, [r3, #0]
      break;
 800146a:	e016      	b.n	800149a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800146c:	78fb      	ldrb	r3, [r7, #3]
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	212c      	movs	r1, #44	; 0x2c
 8001472:	fb01 f303 	mul.w	r3, r1, r3
 8001476:	4413      	add	r3, r2
 8001478:	3342      	adds	r3, #66	; 0x42
 800147a:	2202      	movs	r2, #2
 800147c:	701a      	strb	r2, [r3, #0]
      break;
 800147e:	e00c      	b.n	800149a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001480:	78fb      	ldrb	r3, [r7, #3]
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	212c      	movs	r1, #44	; 0x2c
 8001486:	fb01 f303 	mul.w	r3, r1, r3
 800148a:	4413      	add	r3, r2
 800148c:	3342      	adds	r3, #66	; 0x42
 800148e:	2200      	movs	r2, #0
 8001490:	701a      	strb	r2, [r3, #0]
      break;
 8001492:	e002      	b.n	800149a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001494:	bf00      	nop
 8001496:	e000      	b.n	800149a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001498:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800149a:	78fb      	ldrb	r3, [r7, #3]
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	212c      	movs	r1, #44	; 0x2c
 80014a0:	fb01 f303 	mul.w	r3, r1, r3
 80014a4:	4413      	add	r3, r2
 80014a6:	3344      	adds	r3, #68	; 0x44
 80014a8:	697a      	ldr	r2, [r7, #20]
 80014aa:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80014ac:	78fb      	ldrb	r3, [r7, #3]
 80014ae:	8b3a      	ldrh	r2, [r7, #24]
 80014b0:	6879      	ldr	r1, [r7, #4]
 80014b2:	202c      	movs	r0, #44	; 0x2c
 80014b4:	fb00 f303 	mul.w	r3, r0, r3
 80014b8:	440b      	add	r3, r1
 80014ba:	334c      	adds	r3, #76	; 0x4c
 80014bc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80014be:	78fb      	ldrb	r3, [r7, #3]
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	212c      	movs	r1, #44	; 0x2c
 80014c4:	fb01 f303 	mul.w	r3, r1, r3
 80014c8:	4413      	add	r3, r2
 80014ca:	3360      	adds	r3, #96	; 0x60
 80014cc:	2200      	movs	r2, #0
 80014ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80014d0:	78fb      	ldrb	r3, [r7, #3]
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	212c      	movs	r1, #44	; 0x2c
 80014d6:	fb01 f303 	mul.w	r3, r1, r3
 80014da:	4413      	add	r3, r2
 80014dc:	3350      	adds	r3, #80	; 0x50
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80014e2:	78fb      	ldrb	r3, [r7, #3]
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	212c      	movs	r1, #44	; 0x2c
 80014e8:	fb01 f303 	mul.w	r3, r1, r3
 80014ec:	4413      	add	r3, r2
 80014ee:	3339      	adds	r3, #57	; 0x39
 80014f0:	78fa      	ldrb	r2, [r7, #3]
 80014f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80014f4:	78fb      	ldrb	r3, [r7, #3]
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	212c      	movs	r1, #44	; 0x2c
 80014fa:	fb01 f303 	mul.w	r3, r1, r3
 80014fe:	4413      	add	r3, r2
 8001500:	3361      	adds	r3, #97	; 0x61
 8001502:	2200      	movs	r2, #0
 8001504:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6818      	ldr	r0, [r3, #0]
 800150a:	78fb      	ldrb	r3, [r7, #3]
 800150c:	222c      	movs	r2, #44	; 0x2c
 800150e:	fb02 f303 	mul.w	r3, r2, r3
 8001512:	3338      	adds	r3, #56	; 0x38
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	18d1      	adds	r1, r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	691b      	ldr	r3, [r3, #16]
 800151c:	b2db      	uxtb	r3, r3
 800151e:	461a      	mov	r2, r3
 8001520:	f002 fbd2 	bl	8003cc8 <USB_HC_StartXfer>
 8001524:	4603      	mov	r3, r0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop

08001530 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4618      	mov	r0, r3
 8001548:	f002 f8f5 	bl	8003736 <USB_GetMode>
 800154c:	4603      	mov	r3, r0
 800154e:	2b01      	cmp	r3, #1
 8001550:	f040 80f6 	bne.w	8001740 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4618      	mov	r0, r3
 800155a:	f002 f8d9 	bl	8003710 <USB_ReadInterrupts>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	f000 80ec 	beq.w	800173e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f002 f8d0 	bl	8003710 <USB_ReadInterrupts>
 8001570:	4603      	mov	r3, r0
 8001572:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001576:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800157a:	d104      	bne.n	8001586 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001584:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f002 f8c0 	bl	8003710 <USB_ReadInterrupts>
 8001590:	4603      	mov	r3, r0
 8001592:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001596:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800159a:	d104      	bne.n	80015a6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80015a4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f002 f8b0 	bl	8003710 <USB_ReadInterrupts>
 80015b0:	4603      	mov	r3, r0
 80015b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80015b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80015ba:	d104      	bne.n	80015c6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80015c4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f002 f8a0 	bl	8003710 <USB_ReadInterrupts>
 80015d0:	4603      	mov	r3, r0
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d103      	bne.n	80015e2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2202      	movs	r2, #2
 80015e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f002 f892 	bl	8003710 <USB_ReadInterrupts>
 80015ec:	4603      	mov	r3, r0
 80015ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80015f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80015f6:	d11c      	bne.n	8001632 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001600:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	2b00      	cmp	r3, #0
 8001610:	d10f      	bne.n	8001632 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001612:	2110      	movs	r1, #16
 8001614:	6938      	ldr	r0, [r7, #16]
 8001616:	f001 ffa1 	bl	800355c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800161a:	6938      	ldr	r0, [r7, #16]
 800161c:	f001 ffc2 	bl	80035a4 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2101      	movs	r1, #1
 8001626:	4618      	mov	r0, r3
 8001628:	f002 f97a 	bl	8003920 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f008 f83f 	bl	80096b0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4618      	mov	r0, r3
 8001638:	f002 f86a 	bl	8003710 <USB_ReadInterrupts>
 800163c:	4603      	mov	r3, r0
 800163e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001642:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001646:	d102      	bne.n	800164e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f001 fa03 	bl	8002a54 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4618      	mov	r0, r3
 8001654:	f002 f85c 	bl	8003710 <USB_ReadInterrupts>
 8001658:	4603      	mov	r3, r0
 800165a:	f003 0308 	and.w	r3, r3, #8
 800165e:	2b08      	cmp	r3, #8
 8001660:	d106      	bne.n	8001670 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f008 f808 	bl	8009678 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2208      	movs	r2, #8
 800166e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4618      	mov	r0, r3
 8001676:	f002 f84b 	bl	8003710 <USB_ReadInterrupts>
 800167a:	4603      	mov	r3, r0
 800167c:	f003 0310 	and.w	r3, r3, #16
 8001680:	2b10      	cmp	r3, #16
 8001682:	d101      	bne.n	8001688 <HAL_HCD_IRQHandler+0x158>
 8001684:	2301      	movs	r3, #1
 8001686:	e000      	b.n	800168a <HAL_HCD_IRQHandler+0x15a>
 8001688:	2300      	movs	r3, #0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d012      	beq.n	80016b4 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	699a      	ldr	r2, [r3, #24]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f022 0210 	bic.w	r2, r2, #16
 800169c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f001 f906 	bl	80028b0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	699a      	ldr	r2, [r3, #24]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f042 0210 	orr.w	r2, r2, #16
 80016b2:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f002 f829 	bl	8003710 <USB_ReadInterrupts>
 80016be:	4603      	mov	r3, r0
 80016c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80016c8:	d13a      	bne.n	8001740 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f002 fc3c 	bl	8003f4c <USB_HC_ReadInterrupt>
 80016d4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80016d6:	2300      	movs	r3, #0
 80016d8:	617b      	str	r3, [r7, #20]
 80016da:	e025      	b.n	8001728 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	f003 030f 	and.w	r3, r3, #15
 80016e2:	68ba      	ldr	r2, [r7, #8]
 80016e4:	fa22 f303 	lsr.w	r3, r2, r3
 80016e8:	f003 0301 	and.w	r3, r3, #1
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d018      	beq.n	8001722 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	015a      	lsls	r2, r3, #5
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	4413      	add	r3, r2
 80016f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001702:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001706:	d106      	bne.n	8001716 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	b2db      	uxtb	r3, r3
 800170c:	4619      	mov	r1, r3
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f000 f8ab 	bl	800186a <HCD_HC_IN_IRQHandler>
 8001714:	e005      	b.n	8001722 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	b2db      	uxtb	r3, r3
 800171a:	4619      	mov	r1, r3
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f000 fcc6 	bl	80020ae <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	3301      	adds	r3, #1
 8001726:	617b      	str	r3, [r7, #20]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	697a      	ldr	r2, [r7, #20]
 800172e:	429a      	cmp	r2, r3
 8001730:	d3d4      	bcc.n	80016dc <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800173a:	615a      	str	r2, [r3, #20]
 800173c:	e000      	b.n	8001740 <HAL_HCD_IRQHandler+0x210>
      return;
 800173e:	bf00      	nop
    }
  }
}
 8001740:	3718      	adds	r7, #24
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b082      	sub	sp, #8
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001754:	2b01      	cmp	r3, #1
 8001756:	d101      	bne.n	800175c <HAL_HCD_Start+0x16>
 8001758:	2302      	movs	r3, #2
 800175a:	e013      	b.n	8001784 <HAL_HCD_Start+0x3e>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2201      	movs	r2, #1
 8001760:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2101      	movs	r1, #1
 800176a:	4618      	mov	r0, r3
 800176c:	f002 f93c 	bl	80039e8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f001 fe82 	bl	800347e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001782:	2300      	movs	r3, #0
}
 8001784:	4618      	mov	r0, r3
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800179a:	2b01      	cmp	r3, #1
 800179c:	d101      	bne.n	80017a2 <HAL_HCD_Stop+0x16>
 800179e:	2302      	movs	r3, #2
 80017a0:	e00d      	b.n	80017be <HAL_HCD_Stop+0x32>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2201      	movs	r2, #1
 80017a6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f002 fd36 	bl	8004220 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b082      	sub	sp, #8
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f002 f8de 	bl	8003994 <USB_ResetPort>
 80017d8:	4603      	mov	r3, r0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80017e2:	b480      	push	{r7}
 80017e4:	b083      	sub	sp, #12
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
 80017ea:	460b      	mov	r3, r1
 80017ec:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80017ee:	78fb      	ldrb	r3, [r7, #3]
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	212c      	movs	r1, #44	; 0x2c
 80017f4:	fb01 f303 	mul.w	r3, r1, r3
 80017f8:	4413      	add	r3, r2
 80017fa:	3360      	adds	r3, #96	; 0x60
 80017fc:	781b      	ldrb	r3, [r3, #0]
}
 80017fe:	4618      	mov	r0, r3
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr

0800180a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800180a:	b480      	push	{r7}
 800180c:	b083      	sub	sp, #12
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
 8001812:	460b      	mov	r3, r1
 8001814:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001816:	78fb      	ldrb	r3, [r7, #3]
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	212c      	movs	r1, #44	; 0x2c
 800181c:	fb01 f303 	mul.w	r3, r1, r3
 8001820:	4413      	add	r3, r2
 8001822:	3350      	adds	r3, #80	; 0x50
 8001824:	681b      	ldr	r3, [r3, #0]
}
 8001826:	4618      	mov	r0, r3
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b082      	sub	sp, #8
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4618      	mov	r0, r3
 8001840:	f002 f922 	bl	8003a88 <USB_GetCurrentFrame>
 8001844:	4603      	mov	r3, r0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b082      	sub	sp, #8
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4618      	mov	r0, r3
 800185c:	f002 f8fd 	bl	8003a5a <USB_GetHostSpeed>
 8001860:	4603      	mov	r3, r0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b086      	sub	sp, #24
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
 8001872:	460b      	mov	r3, r1
 8001874:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001880:	78fb      	ldrb	r3, [r7, #3]
 8001882:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	015a      	lsls	r2, r3, #5
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	4413      	add	r3, r2
 800188c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f003 0304 	and.w	r3, r3, #4
 8001896:	2b04      	cmp	r3, #4
 8001898:	d119      	bne.n	80018ce <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	015a      	lsls	r2, r3, #5
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	4413      	add	r3, r2
 80018a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018a6:	461a      	mov	r2, r3
 80018a8:	2304      	movs	r3, #4
 80018aa:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	015a      	lsls	r2, r3, #5
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	4413      	add	r3, r2
 80018b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	68fa      	ldr	r2, [r7, #12]
 80018bc:	0151      	lsls	r1, r2, #5
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	440a      	add	r2, r1
 80018c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80018c6:	f043 0302 	orr.w	r3, r3, #2
 80018ca:	60d3      	str	r3, [r2, #12]
 80018cc:	e101      	b.n	8001ad2 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	015a      	lsls	r2, r3, #5
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	4413      	add	r3, r2
 80018d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018e4:	d12b      	bne.n	800193e <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	015a      	lsls	r2, r3, #5
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	4413      	add	r3, r2
 80018ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018f2:	461a      	mov	r2, r3
 80018f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018f8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	212c      	movs	r1, #44	; 0x2c
 8001900:	fb01 f303 	mul.w	r3, r1, r3
 8001904:	4413      	add	r3, r2
 8001906:	3361      	adds	r3, #97	; 0x61
 8001908:	2207      	movs	r2, #7
 800190a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	015a      	lsls	r2, r3, #5
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	4413      	add	r3, r2
 8001914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	0151      	lsls	r1, r2, #5
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	440a      	add	r2, r1
 8001922:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001926:	f043 0302 	orr.w	r3, r3, #2
 800192a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	68fa      	ldr	r2, [r7, #12]
 8001932:	b2d2      	uxtb	r2, r2
 8001934:	4611      	mov	r1, r2
 8001936:	4618      	mov	r0, r3
 8001938:	f002 fb19 	bl	8003f6e <USB_HC_Halt>
 800193c:	e0c9      	b.n	8001ad2 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	015a      	lsls	r2, r3, #5
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	4413      	add	r3, r2
 8001946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f003 0320 	and.w	r3, r3, #32
 8001950:	2b20      	cmp	r3, #32
 8001952:	d109      	bne.n	8001968 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	015a      	lsls	r2, r3, #5
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	4413      	add	r3, r2
 800195c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001960:	461a      	mov	r2, r3
 8001962:	2320      	movs	r3, #32
 8001964:	6093      	str	r3, [r2, #8]
 8001966:	e0b4      	b.n	8001ad2 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	015a      	lsls	r2, r3, #5
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	4413      	add	r3, r2
 8001970:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f003 0308 	and.w	r3, r3, #8
 800197a:	2b08      	cmp	r3, #8
 800197c:	d133      	bne.n	80019e6 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	015a      	lsls	r2, r3, #5
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	4413      	add	r3, r2
 8001986:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	68fa      	ldr	r2, [r7, #12]
 800198e:	0151      	lsls	r1, r2, #5
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	440a      	add	r2, r1
 8001994:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001998:	f043 0302 	orr.w	r3, r3, #2
 800199c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	212c      	movs	r1, #44	; 0x2c
 80019a4:	fb01 f303 	mul.w	r3, r1, r3
 80019a8:	4413      	add	r3, r2
 80019aa:	3361      	adds	r3, #97	; 0x61
 80019ac:	2205      	movs	r2, #5
 80019ae:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	015a      	lsls	r2, r3, #5
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	4413      	add	r3, r2
 80019b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019bc:	461a      	mov	r2, r3
 80019be:	2310      	movs	r3, #16
 80019c0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	015a      	lsls	r2, r3, #5
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	4413      	add	r3, r2
 80019ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019ce:	461a      	mov	r2, r3
 80019d0:	2308      	movs	r3, #8
 80019d2:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	68fa      	ldr	r2, [r7, #12]
 80019da:	b2d2      	uxtb	r2, r2
 80019dc:	4611      	mov	r1, r2
 80019de:	4618      	mov	r0, r3
 80019e0:	f002 fac5 	bl	8003f6e <USB_HC_Halt>
 80019e4:	e075      	b.n	8001ad2 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	015a      	lsls	r2, r3, #5
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	4413      	add	r3, r2
 80019ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019fc:	d134      	bne.n	8001a68 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	015a      	lsls	r2, r3, #5
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	4413      	add	r3, r2
 8001a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	68fa      	ldr	r2, [r7, #12]
 8001a0e:	0151      	lsls	r1, r2, #5
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	440a      	add	r2, r1
 8001a14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a18:	f043 0302 	orr.w	r3, r3, #2
 8001a1c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	212c      	movs	r1, #44	; 0x2c
 8001a24:	fb01 f303 	mul.w	r3, r1, r3
 8001a28:	4413      	add	r3, r2
 8001a2a:	3361      	adds	r3, #97	; 0x61
 8001a2c:	2208      	movs	r2, #8
 8001a2e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	015a      	lsls	r2, r3, #5
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	4413      	add	r3, r2
 8001a38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	2310      	movs	r3, #16
 8001a40:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	015a      	lsls	r2, r3, #5
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	4413      	add	r3, r2
 8001a4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a4e:	461a      	mov	r2, r3
 8001a50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a54:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	68fa      	ldr	r2, [r7, #12]
 8001a5c:	b2d2      	uxtb	r2, r2
 8001a5e:	4611      	mov	r1, r2
 8001a60:	4618      	mov	r0, r3
 8001a62:	f002 fa84 	bl	8003f6e <USB_HC_Halt>
 8001a66:	e034      	b.n	8001ad2 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	015a      	lsls	r2, r3, #5
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	4413      	add	r3, r2
 8001a70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a7a:	2b80      	cmp	r3, #128	; 0x80
 8001a7c:	d129      	bne.n	8001ad2 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	015a      	lsls	r2, r3, #5
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	4413      	add	r3, r2
 8001a86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	68fa      	ldr	r2, [r7, #12]
 8001a8e:	0151      	lsls	r1, r2, #5
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	440a      	add	r2, r1
 8001a94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a98:	f043 0302 	orr.w	r3, r3, #2
 8001a9c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	212c      	movs	r1, #44	; 0x2c
 8001aa4:	fb01 f303 	mul.w	r3, r1, r3
 8001aa8:	4413      	add	r3, r2
 8001aaa:	3361      	adds	r3, #97	; 0x61
 8001aac:	2206      	movs	r2, #6
 8001aae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	68fa      	ldr	r2, [r7, #12]
 8001ab6:	b2d2      	uxtb	r2, r2
 8001ab8:	4611      	mov	r1, r2
 8001aba:	4618      	mov	r0, r3
 8001abc:	f002 fa57 	bl	8003f6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	015a      	lsls	r2, r3, #5
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001acc:	461a      	mov	r2, r3
 8001ace:	2380      	movs	r3, #128	; 0x80
 8001ad0:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	015a      	lsls	r2, r3, #5
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	4413      	add	r3, r2
 8001ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ae4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ae8:	d122      	bne.n	8001b30 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	015a      	lsls	r2, r3, #5
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	4413      	add	r3, r2
 8001af2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	0151      	lsls	r1, r2, #5
 8001afc:	693a      	ldr	r2, [r7, #16]
 8001afe:	440a      	add	r2, r1
 8001b00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b04:	f043 0302 	orr.w	r3, r3, #2
 8001b08:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	b2d2      	uxtb	r2, r2
 8001b12:	4611      	mov	r1, r2
 8001b14:	4618      	mov	r0, r3
 8001b16:	f002 fa2a 	bl	8003f6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	015a      	lsls	r2, r3, #5
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	4413      	add	r3, r2
 8001b22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b26:	461a      	mov	r2, r3
 8001b28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b2c:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001b2e:	e2ba      	b.n	80020a6 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	015a      	lsls	r2, r3, #5
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	4413      	add	r3, r2
 8001b38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	f040 811b 	bne.w	8001d7e <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	691b      	ldr	r3, [r3, #16]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d019      	beq.n	8001b84 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	212c      	movs	r1, #44	; 0x2c
 8001b56:	fb01 f303 	mul.w	r3, r1, r3
 8001b5a:	4413      	add	r3, r2
 8001b5c:	3348      	adds	r3, #72	; 0x48
 8001b5e:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	0159      	lsls	r1, r3, #5
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	440b      	add	r3, r1
 8001b68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001b72:	1ad2      	subs	r2, r2, r3
 8001b74:	6879      	ldr	r1, [r7, #4]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	202c      	movs	r0, #44	; 0x2c
 8001b7a:	fb00 f303 	mul.w	r3, r0, r3
 8001b7e:	440b      	add	r3, r1
 8001b80:	3350      	adds	r3, #80	; 0x50
 8001b82:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	212c      	movs	r1, #44	; 0x2c
 8001b8a:	fb01 f303 	mul.w	r3, r1, r3
 8001b8e:	4413      	add	r3, r2
 8001b90:	3361      	adds	r3, #97	; 0x61
 8001b92:	2201      	movs	r2, #1
 8001b94:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	212c      	movs	r1, #44	; 0x2c
 8001b9c:	fb01 f303 	mul.w	r3, r1, r3
 8001ba0:	4413      	add	r3, r2
 8001ba2:	335c      	adds	r3, #92	; 0x5c
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	015a      	lsls	r2, r3, #5
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	4413      	add	r3, r2
 8001bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	212c      	movs	r1, #44	; 0x2c
 8001bc0:	fb01 f303 	mul.w	r3, r1, r3
 8001bc4:	4413      	add	r3, r2
 8001bc6:	333f      	adds	r3, #63	; 0x3f
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d009      	beq.n	8001be2 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	212c      	movs	r1, #44	; 0x2c
 8001bd4:	fb01 f303 	mul.w	r3, r1, r3
 8001bd8:	4413      	add	r3, r2
 8001bda:	333f      	adds	r3, #63	; 0x3f
 8001bdc:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d121      	bne.n	8001c26 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	015a      	lsls	r2, r3, #5
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	4413      	add	r3, r2
 8001bea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	68fa      	ldr	r2, [r7, #12]
 8001bf2:	0151      	lsls	r1, r2, #5
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	440a      	add	r2, r1
 8001bf8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001bfc:	f043 0302 	orr.w	r3, r3, #2
 8001c00:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	b2d2      	uxtb	r2, r2
 8001c0a:	4611      	mov	r1, r2
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f002 f9ae 	bl	8003f6e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	015a      	lsls	r2, r3, #5
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	4413      	add	r3, r2
 8001c1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c1e:	461a      	mov	r2, r3
 8001c20:	2310      	movs	r3, #16
 8001c22:	6093      	str	r3, [r2, #8]
 8001c24:	e066      	b.n	8001cf4 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	212c      	movs	r1, #44	; 0x2c
 8001c2c:	fb01 f303 	mul.w	r3, r1, r3
 8001c30:	4413      	add	r3, r2
 8001c32:	333f      	adds	r3, #63	; 0x3f
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	2b03      	cmp	r3, #3
 8001c38:	d127      	bne.n	8001c8a <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	015a      	lsls	r2, r3, #5
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	4413      	add	r3, r2
 8001c42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	68fa      	ldr	r2, [r7, #12]
 8001c4a:	0151      	lsls	r1, r2, #5
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	440a      	add	r2, r1
 8001c50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c54:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001c58:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	212c      	movs	r1, #44	; 0x2c
 8001c60:	fb01 f303 	mul.w	r3, r1, r3
 8001c64:	4413      	add	r3, r2
 8001c66:	3360      	adds	r3, #96	; 0x60
 8001c68:	2201      	movs	r2, #1
 8001c6a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	b2d9      	uxtb	r1, r3
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	202c      	movs	r0, #44	; 0x2c
 8001c76:	fb00 f303 	mul.w	r3, r0, r3
 8001c7a:	4413      	add	r3, r2
 8001c7c:	3360      	adds	r3, #96	; 0x60
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	461a      	mov	r2, r3
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f007 fd22 	bl	80096cc <HAL_HCD_HC_NotifyURBChange_Callback>
 8001c88:	e034      	b.n	8001cf4 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	212c      	movs	r1, #44	; 0x2c
 8001c90:	fb01 f303 	mul.w	r3, r1, r3
 8001c94:	4413      	add	r3, r2
 8001c96:	333f      	adds	r3, #63	; 0x3f
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d12a      	bne.n	8001cf4 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	212c      	movs	r1, #44	; 0x2c
 8001ca4:	fb01 f303 	mul.w	r3, r1, r3
 8001ca8:	4413      	add	r3, r2
 8001caa:	3360      	adds	r3, #96	; 0x60
 8001cac:	2201      	movs	r2, #1
 8001cae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	212c      	movs	r1, #44	; 0x2c
 8001cb6:	fb01 f303 	mul.w	r3, r1, r3
 8001cba:	4413      	add	r3, r2
 8001cbc:	3354      	adds	r3, #84	; 0x54
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	f083 0301 	eor.w	r3, r3, #1
 8001cc4:	b2d8      	uxtb	r0, r3
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	212c      	movs	r1, #44	; 0x2c
 8001ccc:	fb01 f303 	mul.w	r3, r1, r3
 8001cd0:	4413      	add	r3, r2
 8001cd2:	3354      	adds	r3, #84	; 0x54
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	b2d9      	uxtb	r1, r3
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	202c      	movs	r0, #44	; 0x2c
 8001ce2:	fb00 f303 	mul.w	r3, r0, r3
 8001ce6:	4413      	add	r3, r2
 8001ce8:	3360      	adds	r3, #96	; 0x60
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	461a      	mov	r2, r3
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f007 fcec 	bl	80096cc <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	691b      	ldr	r3, [r3, #16]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d12b      	bne.n	8001d54 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	212c      	movs	r1, #44	; 0x2c
 8001d02:	fb01 f303 	mul.w	r3, r1, r3
 8001d06:	4413      	add	r3, r2
 8001d08:	3348      	adds	r3, #72	; 0x48
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	6879      	ldr	r1, [r7, #4]
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	202c      	movs	r0, #44	; 0x2c
 8001d12:	fb00 f202 	mul.w	r2, r0, r2
 8001d16:	440a      	add	r2, r1
 8001d18:	3240      	adds	r2, #64	; 0x40
 8001d1a:	8812      	ldrh	r2, [r2, #0]
 8001d1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001d20:	f003 0301 	and.w	r3, r3, #1
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	f000 81be 	beq.w	80020a6 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	212c      	movs	r1, #44	; 0x2c
 8001d30:	fb01 f303 	mul.w	r3, r1, r3
 8001d34:	4413      	add	r3, r2
 8001d36:	3354      	adds	r3, #84	; 0x54
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	f083 0301 	eor.w	r3, r3, #1
 8001d3e:	b2d8      	uxtb	r0, r3
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	212c      	movs	r1, #44	; 0x2c
 8001d46:	fb01 f303 	mul.w	r3, r1, r3
 8001d4a:	4413      	add	r3, r2
 8001d4c:	3354      	adds	r3, #84	; 0x54
 8001d4e:	4602      	mov	r2, r0
 8001d50:	701a      	strb	r2, [r3, #0]
}
 8001d52:	e1a8      	b.n	80020a6 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	212c      	movs	r1, #44	; 0x2c
 8001d5a:	fb01 f303 	mul.w	r3, r1, r3
 8001d5e:	4413      	add	r3, r2
 8001d60:	3354      	adds	r3, #84	; 0x54
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	f083 0301 	eor.w	r3, r3, #1
 8001d68:	b2d8      	uxtb	r0, r3
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	212c      	movs	r1, #44	; 0x2c
 8001d70:	fb01 f303 	mul.w	r3, r1, r3
 8001d74:	4413      	add	r3, r2
 8001d76:	3354      	adds	r3, #84	; 0x54
 8001d78:	4602      	mov	r2, r0
 8001d7a:	701a      	strb	r2, [r3, #0]
}
 8001d7c:	e193      	b.n	80020a6 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	015a      	lsls	r2, r3, #5
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	4413      	add	r3, r2
 8001d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	f040 8106 	bne.w	8001fa2 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	015a      	lsls	r2, r3, #5
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	68fa      	ldr	r2, [r7, #12]
 8001da6:	0151      	lsls	r1, r2, #5
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	440a      	add	r2, r1
 8001dac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001db0:	f023 0302 	bic.w	r3, r3, #2
 8001db4:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	212c      	movs	r1, #44	; 0x2c
 8001dbc:	fb01 f303 	mul.w	r3, r1, r3
 8001dc0:	4413      	add	r3, r2
 8001dc2:	3361      	adds	r3, #97	; 0x61
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d109      	bne.n	8001dde <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	212c      	movs	r1, #44	; 0x2c
 8001dd0:	fb01 f303 	mul.w	r3, r1, r3
 8001dd4:	4413      	add	r3, r2
 8001dd6:	3360      	adds	r3, #96	; 0x60
 8001dd8:	2201      	movs	r2, #1
 8001dda:	701a      	strb	r2, [r3, #0]
 8001ddc:	e0c9      	b.n	8001f72 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	212c      	movs	r1, #44	; 0x2c
 8001de4:	fb01 f303 	mul.w	r3, r1, r3
 8001de8:	4413      	add	r3, r2
 8001dea:	3361      	adds	r3, #97	; 0x61
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	2b05      	cmp	r3, #5
 8001df0:	d109      	bne.n	8001e06 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	212c      	movs	r1, #44	; 0x2c
 8001df8:	fb01 f303 	mul.w	r3, r1, r3
 8001dfc:	4413      	add	r3, r2
 8001dfe:	3360      	adds	r3, #96	; 0x60
 8001e00:	2205      	movs	r2, #5
 8001e02:	701a      	strb	r2, [r3, #0]
 8001e04:	e0b5      	b.n	8001f72 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	212c      	movs	r1, #44	; 0x2c
 8001e0c:	fb01 f303 	mul.w	r3, r1, r3
 8001e10:	4413      	add	r3, r2
 8001e12:	3361      	adds	r3, #97	; 0x61
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	2b06      	cmp	r3, #6
 8001e18:	d009      	beq.n	8001e2e <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	212c      	movs	r1, #44	; 0x2c
 8001e20:	fb01 f303 	mul.w	r3, r1, r3
 8001e24:	4413      	add	r3, r2
 8001e26:	3361      	adds	r3, #97	; 0x61
 8001e28:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001e2a:	2b08      	cmp	r3, #8
 8001e2c:	d150      	bne.n	8001ed0 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	212c      	movs	r1, #44	; 0x2c
 8001e34:	fb01 f303 	mul.w	r3, r1, r3
 8001e38:	4413      	add	r3, r2
 8001e3a:	335c      	adds	r3, #92	; 0x5c
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	1c5a      	adds	r2, r3, #1
 8001e40:	6879      	ldr	r1, [r7, #4]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	202c      	movs	r0, #44	; 0x2c
 8001e46:	fb00 f303 	mul.w	r3, r0, r3
 8001e4a:	440b      	add	r3, r1
 8001e4c:	335c      	adds	r3, #92	; 0x5c
 8001e4e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	212c      	movs	r1, #44	; 0x2c
 8001e56:	fb01 f303 	mul.w	r3, r1, r3
 8001e5a:	4413      	add	r3, r2
 8001e5c:	335c      	adds	r3, #92	; 0x5c
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d912      	bls.n	8001e8a <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	212c      	movs	r1, #44	; 0x2c
 8001e6a:	fb01 f303 	mul.w	r3, r1, r3
 8001e6e:	4413      	add	r3, r2
 8001e70:	335c      	adds	r3, #92	; 0x5c
 8001e72:	2200      	movs	r2, #0
 8001e74:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	212c      	movs	r1, #44	; 0x2c
 8001e7c:	fb01 f303 	mul.w	r3, r1, r3
 8001e80:	4413      	add	r3, r2
 8001e82:	3360      	adds	r3, #96	; 0x60
 8001e84:	2204      	movs	r2, #4
 8001e86:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001e88:	e073      	b.n	8001f72 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	212c      	movs	r1, #44	; 0x2c
 8001e90:	fb01 f303 	mul.w	r3, r1, r3
 8001e94:	4413      	add	r3, r2
 8001e96:	3360      	adds	r3, #96	; 0x60
 8001e98:	2202      	movs	r2, #2
 8001e9a:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	015a      	lsls	r2, r3, #5
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001eb2:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001eba:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	015a      	lsls	r2, r3, #5
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ec8:	461a      	mov	r2, r3
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001ece:	e050      	b.n	8001f72 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	212c      	movs	r1, #44	; 0x2c
 8001ed6:	fb01 f303 	mul.w	r3, r1, r3
 8001eda:	4413      	add	r3, r2
 8001edc:	3361      	adds	r3, #97	; 0x61
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	2b03      	cmp	r3, #3
 8001ee2:	d122      	bne.n	8001f2a <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	212c      	movs	r1, #44	; 0x2c
 8001eea:	fb01 f303 	mul.w	r3, r1, r3
 8001eee:	4413      	add	r3, r2
 8001ef0:	3360      	adds	r3, #96	; 0x60
 8001ef2:	2202      	movs	r2, #2
 8001ef4:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	015a      	lsls	r2, r3, #5
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	4413      	add	r3, r2
 8001efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001f0c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001f14:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	015a      	lsls	r2, r3, #5
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f22:	461a      	mov	r2, r3
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	6013      	str	r3, [r2, #0]
 8001f28:	e023      	b.n	8001f72 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	212c      	movs	r1, #44	; 0x2c
 8001f30:	fb01 f303 	mul.w	r3, r1, r3
 8001f34:	4413      	add	r3, r2
 8001f36:	3361      	adds	r3, #97	; 0x61
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	2b07      	cmp	r3, #7
 8001f3c:	d119      	bne.n	8001f72 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	212c      	movs	r1, #44	; 0x2c
 8001f44:	fb01 f303 	mul.w	r3, r1, r3
 8001f48:	4413      	add	r3, r2
 8001f4a:	335c      	adds	r3, #92	; 0x5c
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	1c5a      	adds	r2, r3, #1
 8001f50:	6879      	ldr	r1, [r7, #4]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	202c      	movs	r0, #44	; 0x2c
 8001f56:	fb00 f303 	mul.w	r3, r0, r3
 8001f5a:	440b      	add	r3, r1
 8001f5c:	335c      	adds	r3, #92	; 0x5c
 8001f5e:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	212c      	movs	r1, #44	; 0x2c
 8001f66:	fb01 f303 	mul.w	r3, r1, r3
 8001f6a:	4413      	add	r3, r2
 8001f6c:	3360      	adds	r3, #96	; 0x60
 8001f6e:	2204      	movs	r2, #4
 8001f70:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	015a      	lsls	r2, r3, #5
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	4413      	add	r3, r2
 8001f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f7e:	461a      	mov	r2, r3
 8001f80:	2302      	movs	r3, #2
 8001f82:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	b2d9      	uxtb	r1, r3
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	202c      	movs	r0, #44	; 0x2c
 8001f8e:	fb00 f303 	mul.w	r3, r0, r3
 8001f92:	4413      	add	r3, r2
 8001f94:	3360      	adds	r3, #96	; 0x60
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f007 fb96 	bl	80096cc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001fa0:	e081      	b.n	80020a6 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	015a      	lsls	r2, r3, #5
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	4413      	add	r3, r2
 8001faa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f003 0310 	and.w	r3, r3, #16
 8001fb4:	2b10      	cmp	r3, #16
 8001fb6:	d176      	bne.n	80020a6 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	212c      	movs	r1, #44	; 0x2c
 8001fbe:	fb01 f303 	mul.w	r3, r1, r3
 8001fc2:	4413      	add	r3, r2
 8001fc4:	333f      	adds	r3, #63	; 0x3f
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	2b03      	cmp	r3, #3
 8001fca:	d121      	bne.n	8002010 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	212c      	movs	r1, #44	; 0x2c
 8001fd2:	fb01 f303 	mul.w	r3, r1, r3
 8001fd6:	4413      	add	r3, r2
 8001fd8:	335c      	adds	r3, #92	; 0x5c
 8001fda:	2200      	movs	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	015a      	lsls	r2, r3, #5
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	0151      	lsls	r1, r2, #5
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	440a      	add	r2, r1
 8001ff4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ff8:	f043 0302 	orr.w	r3, r3, #2
 8001ffc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	b2d2      	uxtb	r2, r2
 8002006:	4611      	mov	r1, r2
 8002008:	4618      	mov	r0, r3
 800200a:	f001 ffb0 	bl	8003f6e <USB_HC_Halt>
 800200e:	e041      	b.n	8002094 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	212c      	movs	r1, #44	; 0x2c
 8002016:	fb01 f303 	mul.w	r3, r1, r3
 800201a:	4413      	add	r3, r2
 800201c:	333f      	adds	r3, #63	; 0x3f
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d009      	beq.n	8002038 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	212c      	movs	r1, #44	; 0x2c
 800202a:	fb01 f303 	mul.w	r3, r1, r3
 800202e:	4413      	add	r3, r2
 8002030:	333f      	adds	r3, #63	; 0x3f
 8002032:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002034:	2b02      	cmp	r3, #2
 8002036:	d12d      	bne.n	8002094 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	212c      	movs	r1, #44	; 0x2c
 800203e:	fb01 f303 	mul.w	r3, r1, r3
 8002042:	4413      	add	r3, r2
 8002044:	335c      	adds	r3, #92	; 0x5c
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d120      	bne.n	8002094 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	212c      	movs	r1, #44	; 0x2c
 8002058:	fb01 f303 	mul.w	r3, r1, r3
 800205c:	4413      	add	r3, r2
 800205e:	3361      	adds	r3, #97	; 0x61
 8002060:	2203      	movs	r2, #3
 8002062:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	015a      	lsls	r2, r3, #5
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	4413      	add	r3, r2
 800206c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	0151      	lsls	r1, r2, #5
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	440a      	add	r2, r1
 800207a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800207e:	f043 0302 	orr.w	r3, r3, #2
 8002082:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	b2d2      	uxtb	r2, r2
 800208c:	4611      	mov	r1, r2
 800208e:	4618      	mov	r0, r3
 8002090:	f001 ff6d 	bl	8003f6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	015a      	lsls	r2, r3, #5
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	4413      	add	r3, r2
 800209c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020a0:	461a      	mov	r2, r3
 80020a2:	2310      	movs	r3, #16
 80020a4:	6093      	str	r3, [r2, #8]
}
 80020a6:	bf00      	nop
 80020a8:	3718      	adds	r7, #24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b088      	sub	sp, #32
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
 80020b6:	460b      	mov	r3, r1
 80020b8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80020c4:	78fb      	ldrb	r3, [r7, #3]
 80020c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	015a      	lsls	r2, r3, #5
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	4413      	add	r3, r2
 80020d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f003 0304 	and.w	r3, r3, #4
 80020da:	2b04      	cmp	r3, #4
 80020dc:	d119      	bne.n	8002112 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	015a      	lsls	r2, r3, #5
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	4413      	add	r3, r2
 80020e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ea:	461a      	mov	r2, r3
 80020ec:	2304      	movs	r3, #4
 80020ee:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	015a      	lsls	r2, r3, #5
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	4413      	add	r3, r2
 80020f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	697a      	ldr	r2, [r7, #20]
 8002100:	0151      	lsls	r1, r2, #5
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	440a      	add	r2, r1
 8002106:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800210a:	f043 0302 	orr.w	r3, r3, #2
 800210e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002110:	e3ca      	b.n	80028a8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	015a      	lsls	r2, r3, #5
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	4413      	add	r3, r2
 800211a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f003 0320 	and.w	r3, r3, #32
 8002124:	2b20      	cmp	r3, #32
 8002126:	d13e      	bne.n	80021a6 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	015a      	lsls	r2, r3, #5
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	4413      	add	r3, r2
 8002130:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002134:	461a      	mov	r2, r3
 8002136:	2320      	movs	r3, #32
 8002138:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	212c      	movs	r1, #44	; 0x2c
 8002140:	fb01 f303 	mul.w	r3, r1, r3
 8002144:	4413      	add	r3, r2
 8002146:	333d      	adds	r3, #61	; 0x3d
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	2b01      	cmp	r3, #1
 800214c:	f040 83ac 	bne.w	80028a8 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	212c      	movs	r1, #44	; 0x2c
 8002156:	fb01 f303 	mul.w	r3, r1, r3
 800215a:	4413      	add	r3, r2
 800215c:	333d      	adds	r3, #61	; 0x3d
 800215e:	2200      	movs	r2, #0
 8002160:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	212c      	movs	r1, #44	; 0x2c
 8002168:	fb01 f303 	mul.w	r3, r1, r3
 800216c:	4413      	add	r3, r2
 800216e:	3360      	adds	r3, #96	; 0x60
 8002170:	2202      	movs	r2, #2
 8002172:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	015a      	lsls	r2, r3, #5
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	4413      	add	r3, r2
 800217c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	697a      	ldr	r2, [r7, #20]
 8002184:	0151      	lsls	r1, r2, #5
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	440a      	add	r2, r1
 800218a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800218e:	f043 0302 	orr.w	r3, r3, #2
 8002192:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	697a      	ldr	r2, [r7, #20]
 800219a:	b2d2      	uxtb	r2, r2
 800219c:	4611      	mov	r1, r2
 800219e:	4618      	mov	r0, r3
 80021a0:	f001 fee5 	bl	8003f6e <USB_HC_Halt>
}
 80021a4:	e380      	b.n	80028a8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	015a      	lsls	r2, r3, #5
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	4413      	add	r3, r2
 80021ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021bc:	d122      	bne.n	8002204 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	015a      	lsls	r2, r3, #5
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	4413      	add	r3, r2
 80021c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	697a      	ldr	r2, [r7, #20]
 80021ce:	0151      	lsls	r1, r2, #5
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	440a      	add	r2, r1
 80021d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021d8:	f043 0302 	orr.w	r3, r3, #2
 80021dc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	b2d2      	uxtb	r2, r2
 80021e6:	4611      	mov	r1, r2
 80021e8:	4618      	mov	r0, r3
 80021ea:	f001 fec0 	bl	8003f6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	015a      	lsls	r2, r3, #5
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	4413      	add	r3, r2
 80021f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021fa:	461a      	mov	r2, r3
 80021fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002200:	6093      	str	r3, [r2, #8]
}
 8002202:	e351      	b.n	80028a8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	015a      	lsls	r2, r3, #5
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	4413      	add	r3, r2
 800220c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	2b01      	cmp	r3, #1
 8002218:	d150      	bne.n	80022bc <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	212c      	movs	r1, #44	; 0x2c
 8002220:	fb01 f303 	mul.w	r3, r1, r3
 8002224:	4413      	add	r3, r2
 8002226:	335c      	adds	r3, #92	; 0x5c
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	015a      	lsls	r2, r3, #5
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	4413      	add	r3, r2
 8002234:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800223e:	2b40      	cmp	r3, #64	; 0x40
 8002240:	d111      	bne.n	8002266 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	212c      	movs	r1, #44	; 0x2c
 8002248:	fb01 f303 	mul.w	r3, r1, r3
 800224c:	4413      	add	r3, r2
 800224e:	333d      	adds	r3, #61	; 0x3d
 8002250:	2201      	movs	r2, #1
 8002252:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	015a      	lsls	r2, r3, #5
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	4413      	add	r3, r2
 800225c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002260:	461a      	mov	r2, r3
 8002262:	2340      	movs	r3, #64	; 0x40
 8002264:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	015a      	lsls	r2, r3, #5
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	4413      	add	r3, r2
 800226e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	697a      	ldr	r2, [r7, #20]
 8002276:	0151      	lsls	r1, r2, #5
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	440a      	add	r2, r1
 800227c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002280:	f043 0302 	orr.w	r3, r3, #2
 8002284:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	697a      	ldr	r2, [r7, #20]
 800228c:	b2d2      	uxtb	r2, r2
 800228e:	4611      	mov	r1, r2
 8002290:	4618      	mov	r0, r3
 8002292:	f001 fe6c 	bl	8003f6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	015a      	lsls	r2, r3, #5
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	4413      	add	r3, r2
 800229e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022a2:	461a      	mov	r2, r3
 80022a4:	2301      	movs	r3, #1
 80022a6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	212c      	movs	r1, #44	; 0x2c
 80022ae:	fb01 f303 	mul.w	r3, r1, r3
 80022b2:	4413      	add	r3, r2
 80022b4:	3361      	adds	r3, #97	; 0x61
 80022b6:	2201      	movs	r2, #1
 80022b8:	701a      	strb	r2, [r3, #0]
}
 80022ba:	e2f5      	b.n	80028a8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	015a      	lsls	r2, r3, #5
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	4413      	add	r3, r2
 80022c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ce:	2b40      	cmp	r3, #64	; 0x40
 80022d0:	d13c      	bne.n	800234c <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	212c      	movs	r1, #44	; 0x2c
 80022d8:	fb01 f303 	mul.w	r3, r1, r3
 80022dc:	4413      	add	r3, r2
 80022de:	3361      	adds	r3, #97	; 0x61
 80022e0:	2204      	movs	r2, #4
 80022e2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	212c      	movs	r1, #44	; 0x2c
 80022ea:	fb01 f303 	mul.w	r3, r1, r3
 80022ee:	4413      	add	r3, r2
 80022f0:	333d      	adds	r3, #61	; 0x3d
 80022f2:	2201      	movs	r2, #1
 80022f4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	212c      	movs	r1, #44	; 0x2c
 80022fc:	fb01 f303 	mul.w	r3, r1, r3
 8002300:	4413      	add	r3, r2
 8002302:	335c      	adds	r3, #92	; 0x5c
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	015a      	lsls	r2, r3, #5
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	4413      	add	r3, r2
 8002310:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	697a      	ldr	r2, [r7, #20]
 8002318:	0151      	lsls	r1, r2, #5
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	440a      	add	r2, r1
 800231e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002322:	f043 0302 	orr.w	r3, r3, #2
 8002326:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	697a      	ldr	r2, [r7, #20]
 800232e:	b2d2      	uxtb	r2, r2
 8002330:	4611      	mov	r1, r2
 8002332:	4618      	mov	r0, r3
 8002334:	f001 fe1b 	bl	8003f6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	015a      	lsls	r2, r3, #5
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	4413      	add	r3, r2
 8002340:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002344:	461a      	mov	r2, r3
 8002346:	2340      	movs	r3, #64	; 0x40
 8002348:	6093      	str	r3, [r2, #8]
}
 800234a:	e2ad      	b.n	80028a8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	015a      	lsls	r2, r3, #5
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	4413      	add	r3, r2
 8002354:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 0308 	and.w	r3, r3, #8
 800235e:	2b08      	cmp	r3, #8
 8002360:	d12a      	bne.n	80023b8 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	015a      	lsls	r2, r3, #5
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	4413      	add	r3, r2
 800236a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800236e:	461a      	mov	r2, r3
 8002370:	2308      	movs	r3, #8
 8002372:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	015a      	lsls	r2, r3, #5
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	4413      	add	r3, r2
 800237c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	697a      	ldr	r2, [r7, #20]
 8002384:	0151      	lsls	r1, r2, #5
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	440a      	add	r2, r1
 800238a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800238e:	f043 0302 	orr.w	r3, r3, #2
 8002392:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	697a      	ldr	r2, [r7, #20]
 800239a:	b2d2      	uxtb	r2, r2
 800239c:	4611      	mov	r1, r2
 800239e:	4618      	mov	r0, r3
 80023a0:	f001 fde5 	bl	8003f6e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	212c      	movs	r1, #44	; 0x2c
 80023aa:	fb01 f303 	mul.w	r3, r1, r3
 80023ae:	4413      	add	r3, r2
 80023b0:	3361      	adds	r3, #97	; 0x61
 80023b2:	2205      	movs	r2, #5
 80023b4:	701a      	strb	r2, [r3, #0]
}
 80023b6:	e277      	b.n	80028a8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	015a      	lsls	r2, r3, #5
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	4413      	add	r3, r2
 80023c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f003 0310 	and.w	r3, r3, #16
 80023ca:	2b10      	cmp	r3, #16
 80023cc:	d150      	bne.n	8002470 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	212c      	movs	r1, #44	; 0x2c
 80023d4:	fb01 f303 	mul.w	r3, r1, r3
 80023d8:	4413      	add	r3, r2
 80023da:	335c      	adds	r3, #92	; 0x5c
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	212c      	movs	r1, #44	; 0x2c
 80023e6:	fb01 f303 	mul.w	r3, r1, r3
 80023ea:	4413      	add	r3, r2
 80023ec:	3361      	adds	r3, #97	; 0x61
 80023ee:	2203      	movs	r2, #3
 80023f0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	212c      	movs	r1, #44	; 0x2c
 80023f8:	fb01 f303 	mul.w	r3, r1, r3
 80023fc:	4413      	add	r3, r2
 80023fe:	333d      	adds	r3, #61	; 0x3d
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d112      	bne.n	800242c <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	212c      	movs	r1, #44	; 0x2c
 800240c:	fb01 f303 	mul.w	r3, r1, r3
 8002410:	4413      	add	r3, r2
 8002412:	333c      	adds	r3, #60	; 0x3c
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d108      	bne.n	800242c <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	212c      	movs	r1, #44	; 0x2c
 8002420:	fb01 f303 	mul.w	r3, r1, r3
 8002424:	4413      	add	r3, r2
 8002426:	333d      	adds	r3, #61	; 0x3d
 8002428:	2201      	movs	r2, #1
 800242a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	015a      	lsls	r2, r3, #5
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	4413      	add	r3, r2
 8002434:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	697a      	ldr	r2, [r7, #20]
 800243c:	0151      	lsls	r1, r2, #5
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	440a      	add	r2, r1
 8002442:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002446:	f043 0302 	orr.w	r3, r3, #2
 800244a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	b2d2      	uxtb	r2, r2
 8002454:	4611      	mov	r1, r2
 8002456:	4618      	mov	r0, r3
 8002458:	f001 fd89 	bl	8003f6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	015a      	lsls	r2, r3, #5
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	4413      	add	r3, r2
 8002464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002468:	461a      	mov	r2, r3
 800246a:	2310      	movs	r3, #16
 800246c:	6093      	str	r3, [r2, #8]
}
 800246e:	e21b      	b.n	80028a8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	015a      	lsls	r2, r3, #5
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	4413      	add	r3, r2
 8002478:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002482:	2b80      	cmp	r3, #128	; 0x80
 8002484:	d174      	bne.n	8002570 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d121      	bne.n	80024d2 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	212c      	movs	r1, #44	; 0x2c
 8002494:	fb01 f303 	mul.w	r3, r1, r3
 8002498:	4413      	add	r3, r2
 800249a:	3361      	adds	r3, #97	; 0x61
 800249c:	2206      	movs	r2, #6
 800249e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	015a      	lsls	r2, r3, #5
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	4413      	add	r3, r2
 80024a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	697a      	ldr	r2, [r7, #20]
 80024b0:	0151      	lsls	r1, r2, #5
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	440a      	add	r2, r1
 80024b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024ba:	f043 0302 	orr.w	r3, r3, #2
 80024be:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	697a      	ldr	r2, [r7, #20]
 80024c6:	b2d2      	uxtb	r2, r2
 80024c8:	4611      	mov	r1, r2
 80024ca:	4618      	mov	r0, r3
 80024cc:	f001 fd4f 	bl	8003f6e <USB_HC_Halt>
 80024d0:	e044      	b.n	800255c <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	212c      	movs	r1, #44	; 0x2c
 80024d8:	fb01 f303 	mul.w	r3, r1, r3
 80024dc:	4413      	add	r3, r2
 80024de:	335c      	adds	r3, #92	; 0x5c
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	1c5a      	adds	r2, r3, #1
 80024e4:	6879      	ldr	r1, [r7, #4]
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	202c      	movs	r0, #44	; 0x2c
 80024ea:	fb00 f303 	mul.w	r3, r0, r3
 80024ee:	440b      	add	r3, r1
 80024f0:	335c      	adds	r3, #92	; 0x5c
 80024f2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	212c      	movs	r1, #44	; 0x2c
 80024fa:	fb01 f303 	mul.w	r3, r1, r3
 80024fe:	4413      	add	r3, r2
 8002500:	335c      	adds	r3, #92	; 0x5c
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2b02      	cmp	r3, #2
 8002506:	d920      	bls.n	800254a <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	212c      	movs	r1, #44	; 0x2c
 800250e:	fb01 f303 	mul.w	r3, r1, r3
 8002512:	4413      	add	r3, r2
 8002514:	335c      	adds	r3, #92	; 0x5c
 8002516:	2200      	movs	r2, #0
 8002518:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	212c      	movs	r1, #44	; 0x2c
 8002520:	fb01 f303 	mul.w	r3, r1, r3
 8002524:	4413      	add	r3, r2
 8002526:	3360      	adds	r3, #96	; 0x60
 8002528:	2204      	movs	r2, #4
 800252a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	b2d9      	uxtb	r1, r3
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	202c      	movs	r0, #44	; 0x2c
 8002536:	fb00 f303 	mul.w	r3, r0, r3
 800253a:	4413      	add	r3, r2
 800253c:	3360      	adds	r3, #96	; 0x60
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	461a      	mov	r2, r3
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f007 f8c2 	bl	80096cc <HAL_HCD_HC_NotifyURBChange_Callback>
 8002548:	e008      	b.n	800255c <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	212c      	movs	r1, #44	; 0x2c
 8002550:	fb01 f303 	mul.w	r3, r1, r3
 8002554:	4413      	add	r3, r2
 8002556:	3360      	adds	r3, #96	; 0x60
 8002558:	2202      	movs	r2, #2
 800255a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	015a      	lsls	r2, r3, #5
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	4413      	add	r3, r2
 8002564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002568:	461a      	mov	r2, r3
 800256a:	2380      	movs	r3, #128	; 0x80
 800256c:	6093      	str	r3, [r2, #8]
}
 800256e:	e19b      	b.n	80028a8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	015a      	lsls	r2, r3, #5
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	4413      	add	r3, r2
 8002578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002582:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002586:	d134      	bne.n	80025f2 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	015a      	lsls	r2, r3, #5
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	4413      	add	r3, r2
 8002590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	697a      	ldr	r2, [r7, #20]
 8002598:	0151      	lsls	r1, r2, #5
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	440a      	add	r2, r1
 800259e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025a2:	f043 0302 	orr.w	r3, r3, #2
 80025a6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	697a      	ldr	r2, [r7, #20]
 80025ae:	b2d2      	uxtb	r2, r2
 80025b0:	4611      	mov	r1, r2
 80025b2:	4618      	mov	r0, r3
 80025b4:	f001 fcdb 	bl	8003f6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	015a      	lsls	r2, r3, #5
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	4413      	add	r3, r2
 80025c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c4:	461a      	mov	r2, r3
 80025c6:	2310      	movs	r3, #16
 80025c8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	015a      	lsls	r2, r3, #5
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	4413      	add	r3, r2
 80025d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d6:	461a      	mov	r2, r3
 80025d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025dc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	212c      	movs	r1, #44	; 0x2c
 80025e4:	fb01 f303 	mul.w	r3, r1, r3
 80025e8:	4413      	add	r3, r2
 80025ea:	3361      	adds	r3, #97	; 0x61
 80025ec:	2208      	movs	r2, #8
 80025ee:	701a      	strb	r2, [r3, #0]
}
 80025f0:	e15a      	b.n	80028a8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	015a      	lsls	r2, r3, #5
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	4413      	add	r3, r2
 80025fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f003 0302 	and.w	r3, r3, #2
 8002604:	2b02      	cmp	r3, #2
 8002606:	f040 814f 	bne.w	80028a8 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	015a      	lsls	r2, r3, #5
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	4413      	add	r3, r2
 8002612:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	697a      	ldr	r2, [r7, #20]
 800261a:	0151      	lsls	r1, r2, #5
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	440a      	add	r2, r1
 8002620:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002624:	f023 0302 	bic.w	r3, r3, #2
 8002628:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	212c      	movs	r1, #44	; 0x2c
 8002630:	fb01 f303 	mul.w	r3, r1, r3
 8002634:	4413      	add	r3, r2
 8002636:	3361      	adds	r3, #97	; 0x61
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d17d      	bne.n	800273a <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	212c      	movs	r1, #44	; 0x2c
 8002644:	fb01 f303 	mul.w	r3, r1, r3
 8002648:	4413      	add	r3, r2
 800264a:	3360      	adds	r3, #96	; 0x60
 800264c:	2201      	movs	r2, #1
 800264e:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	212c      	movs	r1, #44	; 0x2c
 8002656:	fb01 f303 	mul.w	r3, r1, r3
 800265a:	4413      	add	r3, r2
 800265c:	333f      	adds	r3, #63	; 0x3f
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	2b02      	cmp	r3, #2
 8002662:	d00a      	beq.n	800267a <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	212c      	movs	r1, #44	; 0x2c
 800266a:	fb01 f303 	mul.w	r3, r1, r3
 800266e:	4413      	add	r3, r2
 8002670:	333f      	adds	r3, #63	; 0x3f
 8002672:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002674:	2b03      	cmp	r3, #3
 8002676:	f040 8100 	bne.w	800287a <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d113      	bne.n	80026aa <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	212c      	movs	r1, #44	; 0x2c
 8002688:	fb01 f303 	mul.w	r3, r1, r3
 800268c:	4413      	add	r3, r2
 800268e:	3355      	adds	r3, #85	; 0x55
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	f083 0301 	eor.w	r3, r3, #1
 8002696:	b2d8      	uxtb	r0, r3
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	212c      	movs	r1, #44	; 0x2c
 800269e:	fb01 f303 	mul.w	r3, r1, r3
 80026a2:	4413      	add	r3, r2
 80026a4:	3355      	adds	r3, #85	; 0x55
 80026a6:	4602      	mov	r2, r0
 80026a8:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	f040 80e3 	bne.w	800287a <HCD_HC_OUT_IRQHandler+0x7cc>
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	212c      	movs	r1, #44	; 0x2c
 80026ba:	fb01 f303 	mul.w	r3, r1, r3
 80026be:	4413      	add	r3, r2
 80026c0:	334c      	adds	r3, #76	; 0x4c
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f000 80d8 	beq.w	800287a <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	212c      	movs	r1, #44	; 0x2c
 80026d0:	fb01 f303 	mul.w	r3, r1, r3
 80026d4:	4413      	add	r3, r2
 80026d6:	334c      	adds	r3, #76	; 0x4c
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	697a      	ldr	r2, [r7, #20]
 80026de:	202c      	movs	r0, #44	; 0x2c
 80026e0:	fb00 f202 	mul.w	r2, r0, r2
 80026e4:	440a      	add	r2, r1
 80026e6:	3240      	adds	r2, #64	; 0x40
 80026e8:	8812      	ldrh	r2, [r2, #0]
 80026ea:	4413      	add	r3, r2
 80026ec:	3b01      	subs	r3, #1
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	697a      	ldr	r2, [r7, #20]
 80026f2:	202c      	movs	r0, #44	; 0x2c
 80026f4:	fb00 f202 	mul.w	r2, r0, r2
 80026f8:	440a      	add	r2, r1
 80026fa:	3240      	adds	r2, #64	; 0x40
 80026fc:	8812      	ldrh	r2, [r2, #0]
 80026fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8002702:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	2b00      	cmp	r3, #0
 800270c:	f000 80b5 	beq.w	800287a <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	212c      	movs	r1, #44	; 0x2c
 8002716:	fb01 f303 	mul.w	r3, r1, r3
 800271a:	4413      	add	r3, r2
 800271c:	3355      	adds	r3, #85	; 0x55
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	f083 0301 	eor.w	r3, r3, #1
 8002724:	b2d8      	uxtb	r0, r3
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	212c      	movs	r1, #44	; 0x2c
 800272c:	fb01 f303 	mul.w	r3, r1, r3
 8002730:	4413      	add	r3, r2
 8002732:	3355      	adds	r3, #85	; 0x55
 8002734:	4602      	mov	r2, r0
 8002736:	701a      	strb	r2, [r3, #0]
 8002738:	e09f      	b.n	800287a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	212c      	movs	r1, #44	; 0x2c
 8002740:	fb01 f303 	mul.w	r3, r1, r3
 8002744:	4413      	add	r3, r2
 8002746:	3361      	adds	r3, #97	; 0x61
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	2b03      	cmp	r3, #3
 800274c:	d109      	bne.n	8002762 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	212c      	movs	r1, #44	; 0x2c
 8002754:	fb01 f303 	mul.w	r3, r1, r3
 8002758:	4413      	add	r3, r2
 800275a:	3360      	adds	r3, #96	; 0x60
 800275c:	2202      	movs	r2, #2
 800275e:	701a      	strb	r2, [r3, #0]
 8002760:	e08b      	b.n	800287a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	212c      	movs	r1, #44	; 0x2c
 8002768:	fb01 f303 	mul.w	r3, r1, r3
 800276c:	4413      	add	r3, r2
 800276e:	3361      	adds	r3, #97	; 0x61
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	2b04      	cmp	r3, #4
 8002774:	d109      	bne.n	800278a <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	212c      	movs	r1, #44	; 0x2c
 800277c:	fb01 f303 	mul.w	r3, r1, r3
 8002780:	4413      	add	r3, r2
 8002782:	3360      	adds	r3, #96	; 0x60
 8002784:	2202      	movs	r2, #2
 8002786:	701a      	strb	r2, [r3, #0]
 8002788:	e077      	b.n	800287a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	212c      	movs	r1, #44	; 0x2c
 8002790:	fb01 f303 	mul.w	r3, r1, r3
 8002794:	4413      	add	r3, r2
 8002796:	3361      	adds	r3, #97	; 0x61
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	2b05      	cmp	r3, #5
 800279c:	d109      	bne.n	80027b2 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	212c      	movs	r1, #44	; 0x2c
 80027a4:	fb01 f303 	mul.w	r3, r1, r3
 80027a8:	4413      	add	r3, r2
 80027aa:	3360      	adds	r3, #96	; 0x60
 80027ac:	2205      	movs	r2, #5
 80027ae:	701a      	strb	r2, [r3, #0]
 80027b0:	e063      	b.n	800287a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	212c      	movs	r1, #44	; 0x2c
 80027b8:	fb01 f303 	mul.w	r3, r1, r3
 80027bc:	4413      	add	r3, r2
 80027be:	3361      	adds	r3, #97	; 0x61
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	2b06      	cmp	r3, #6
 80027c4:	d009      	beq.n	80027da <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	212c      	movs	r1, #44	; 0x2c
 80027cc:	fb01 f303 	mul.w	r3, r1, r3
 80027d0:	4413      	add	r3, r2
 80027d2:	3361      	adds	r3, #97	; 0x61
 80027d4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80027d6:	2b08      	cmp	r3, #8
 80027d8:	d14f      	bne.n	800287a <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	212c      	movs	r1, #44	; 0x2c
 80027e0:	fb01 f303 	mul.w	r3, r1, r3
 80027e4:	4413      	add	r3, r2
 80027e6:	335c      	adds	r3, #92	; 0x5c
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	1c5a      	adds	r2, r3, #1
 80027ec:	6879      	ldr	r1, [r7, #4]
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	202c      	movs	r0, #44	; 0x2c
 80027f2:	fb00 f303 	mul.w	r3, r0, r3
 80027f6:	440b      	add	r3, r1
 80027f8:	335c      	adds	r3, #92	; 0x5c
 80027fa:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	212c      	movs	r1, #44	; 0x2c
 8002802:	fb01 f303 	mul.w	r3, r1, r3
 8002806:	4413      	add	r3, r2
 8002808:	335c      	adds	r3, #92	; 0x5c
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2b02      	cmp	r3, #2
 800280e:	d912      	bls.n	8002836 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	212c      	movs	r1, #44	; 0x2c
 8002816:	fb01 f303 	mul.w	r3, r1, r3
 800281a:	4413      	add	r3, r2
 800281c:	335c      	adds	r3, #92	; 0x5c
 800281e:	2200      	movs	r2, #0
 8002820:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	212c      	movs	r1, #44	; 0x2c
 8002828:	fb01 f303 	mul.w	r3, r1, r3
 800282c:	4413      	add	r3, r2
 800282e:	3360      	adds	r3, #96	; 0x60
 8002830:	2204      	movs	r2, #4
 8002832:	701a      	strb	r2, [r3, #0]
 8002834:	e021      	b.n	800287a <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	212c      	movs	r1, #44	; 0x2c
 800283c:	fb01 f303 	mul.w	r3, r1, r3
 8002840:	4413      	add	r3, r2
 8002842:	3360      	adds	r3, #96	; 0x60
 8002844:	2202      	movs	r2, #2
 8002846:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	015a      	lsls	r2, r3, #5
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	4413      	add	r3, r2
 8002850:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800285e:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002866:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	015a      	lsls	r2, r3, #5
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	4413      	add	r3, r2
 8002870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002874:	461a      	mov	r2, r3
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	015a      	lsls	r2, r3, #5
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	4413      	add	r3, r2
 8002882:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002886:	461a      	mov	r2, r3
 8002888:	2302      	movs	r3, #2
 800288a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	b2d9      	uxtb	r1, r3
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	202c      	movs	r0, #44	; 0x2c
 8002896:	fb00 f303 	mul.w	r3, r0, r3
 800289a:	4413      	add	r3, r2
 800289c:	3360      	adds	r3, #96	; 0x60
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	461a      	mov	r2, r3
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f006 ff12 	bl	80096cc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80028a8:	bf00      	nop
 80028aa:	3720      	adds	r7, #32
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b08a      	sub	sp, #40	; 0x28
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c0:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	6a1b      	ldr	r3, [r3, #32]
 80028c8:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	f003 030f 	and.w	r3, r3, #15
 80028d0:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	0c5b      	lsrs	r3, r3, #17
 80028d6:	f003 030f 	and.w	r3, r3, #15
 80028da:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	091b      	lsrs	r3, r3, #4
 80028e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028e4:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d004      	beq.n	80028f6 <HCD_RXQLVL_IRQHandler+0x46>
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	2b05      	cmp	r3, #5
 80028f0:	f000 80a9 	beq.w	8002a46 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80028f4:	e0aa      	b.n	8002a4c <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f000 80a6 	beq.w	8002a4a <HCD_RXQLVL_IRQHandler+0x19a>
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	212c      	movs	r1, #44	; 0x2c
 8002904:	fb01 f303 	mul.w	r3, r1, r3
 8002908:	4413      	add	r3, r2
 800290a:	3344      	adds	r3, #68	; 0x44
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2b00      	cmp	r3, #0
 8002910:	f000 809b 	beq.w	8002a4a <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	212c      	movs	r1, #44	; 0x2c
 800291a:	fb01 f303 	mul.w	r3, r1, r3
 800291e:	4413      	add	r3, r2
 8002920:	3350      	adds	r3, #80	; 0x50
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	441a      	add	r2, r3
 8002928:	6879      	ldr	r1, [r7, #4]
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	202c      	movs	r0, #44	; 0x2c
 800292e:	fb00 f303 	mul.w	r3, r0, r3
 8002932:	440b      	add	r3, r1
 8002934:	334c      	adds	r3, #76	; 0x4c
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	429a      	cmp	r2, r3
 800293a:	d87a      	bhi.n	8002a32 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6818      	ldr	r0, [r3, #0]
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	212c      	movs	r1, #44	; 0x2c
 8002946:	fb01 f303 	mul.w	r3, r1, r3
 800294a:	4413      	add	r3, r2
 800294c:	3344      	adds	r3, #68	; 0x44
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	b292      	uxth	r2, r2
 8002954:	4619      	mov	r1, r3
 8002956:	f000 fe83 	bl	8003660 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	212c      	movs	r1, #44	; 0x2c
 8002960:	fb01 f303 	mul.w	r3, r1, r3
 8002964:	4413      	add	r3, r2
 8002966:	3344      	adds	r3, #68	; 0x44
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	441a      	add	r2, r3
 800296e:	6879      	ldr	r1, [r7, #4]
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	202c      	movs	r0, #44	; 0x2c
 8002974:	fb00 f303 	mul.w	r3, r0, r3
 8002978:	440b      	add	r3, r1
 800297a:	3344      	adds	r3, #68	; 0x44
 800297c:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	212c      	movs	r1, #44	; 0x2c
 8002984:	fb01 f303 	mul.w	r3, r1, r3
 8002988:	4413      	add	r3, r2
 800298a:	3350      	adds	r3, #80	; 0x50
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	441a      	add	r2, r3
 8002992:	6879      	ldr	r1, [r7, #4]
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	202c      	movs	r0, #44	; 0x2c
 8002998:	fb00 f303 	mul.w	r3, r0, r3
 800299c:	440b      	add	r3, r1
 800299e:	3350      	adds	r3, #80	; 0x50
 80029a0:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	015a      	lsls	r2, r3, #5
 80029a6:	6a3b      	ldr	r3, [r7, #32]
 80029a8:	4413      	add	r3, r2
 80029aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	0cdb      	lsrs	r3, r3, #19
 80029b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029b6:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	212c      	movs	r1, #44	; 0x2c
 80029be:	fb01 f303 	mul.w	r3, r1, r3
 80029c2:	4413      	add	r3, r2
 80029c4:	3340      	adds	r3, #64	; 0x40
 80029c6:	881b      	ldrh	r3, [r3, #0]
 80029c8:	461a      	mov	r2, r3
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d13c      	bne.n	8002a4a <HCD_RXQLVL_IRQHandler+0x19a>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d039      	beq.n	8002a4a <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	015a      	lsls	r2, r3, #5
 80029da:	6a3b      	ldr	r3, [r7, #32]
 80029dc:	4413      	add	r3, r2
 80029de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80029ec:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80029f4:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	015a      	lsls	r2, r3, #5
 80029fa:	6a3b      	ldr	r3, [r7, #32]
 80029fc:	4413      	add	r3, r2
 80029fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a02:	461a      	mov	r2, r3
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	212c      	movs	r1, #44	; 0x2c
 8002a0e:	fb01 f303 	mul.w	r3, r1, r3
 8002a12:	4413      	add	r3, r2
 8002a14:	3354      	adds	r3, #84	; 0x54
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	f083 0301 	eor.w	r3, r3, #1
 8002a1c:	b2d8      	uxtb	r0, r3
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	212c      	movs	r1, #44	; 0x2c
 8002a24:	fb01 f303 	mul.w	r3, r1, r3
 8002a28:	4413      	add	r3, r2
 8002a2a:	3354      	adds	r3, #84	; 0x54
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	701a      	strb	r2, [r3, #0]
      break;
 8002a30:	e00b      	b.n	8002a4a <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	212c      	movs	r1, #44	; 0x2c
 8002a38:	fb01 f303 	mul.w	r3, r1, r3
 8002a3c:	4413      	add	r3, r2
 8002a3e:	3360      	adds	r3, #96	; 0x60
 8002a40:	2204      	movs	r2, #4
 8002a42:	701a      	strb	r2, [r3, #0]
      break;
 8002a44:	e001      	b.n	8002a4a <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002a46:	bf00      	nop
 8002a48:	e000      	b.n	8002a4c <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002a4a:	bf00      	nop
  }
}
 8002a4c:	bf00      	nop
 8002a4e:	3728      	adds	r7, #40	; 0x28
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002a80:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d10b      	bne.n	8002aa4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d102      	bne.n	8002a9c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f006 fdfc 	bl	8009694 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	f043 0302 	orr.w	r3, r3, #2
 8002aa2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f003 0308 	and.w	r3, r3, #8
 8002aaa:	2b08      	cmp	r3, #8
 8002aac:	d132      	bne.n	8002b14 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	f043 0308 	orr.w	r3, r3, #8
 8002ab4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f003 0304 	and.w	r3, r3, #4
 8002abc:	2b04      	cmp	r3, #4
 8002abe:	d126      	bne.n	8002b0e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d113      	bne.n	8002af0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002ace:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ad2:	d106      	bne.n	8002ae2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2102      	movs	r1, #2
 8002ada:	4618      	mov	r0, r3
 8002adc:	f000 ff20 	bl	8003920 <USB_InitFSLSPClkSel>
 8002ae0:	e011      	b.n	8002b06 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f000 ff19 	bl	8003920 <USB_InitFSLSPClkSel>
 8002aee:	e00a      	b.n	8002b06 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d106      	bne.n	8002b06 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002afe:	461a      	mov	r2, r3
 8002b00:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002b04:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f006 fdee 	bl	80096e8 <HAL_HCD_PortEnabled_Callback>
 8002b0c:	e002      	b.n	8002b14 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f006 fdf8 	bl	8009704 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f003 0320 	and.w	r3, r3, #32
 8002b1a:	2b20      	cmp	r3, #32
 8002b1c:	d103      	bne.n	8002b26 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	f043 0320 	orr.w	r3, r3, #32
 8002b24:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	6013      	str	r3, [r2, #0]
}
 8002b32:	bf00      	nop
 8002b34:	3718      	adds	r7, #24
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
	...

08002b3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e264      	b.n	8003018 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d075      	beq.n	8002c46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b5a:	4ba3      	ldr	r3, [pc, #652]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 030c 	and.w	r3, r3, #12
 8002b62:	2b04      	cmp	r3, #4
 8002b64:	d00c      	beq.n	8002b80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b66:	4ba0      	ldr	r3, [pc, #640]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b6e:	2b08      	cmp	r3, #8
 8002b70:	d112      	bne.n	8002b98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b72:	4b9d      	ldr	r3, [pc, #628]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b7e:	d10b      	bne.n	8002b98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b80:	4b99      	ldr	r3, [pc, #612]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d05b      	beq.n	8002c44 <HAL_RCC_OscConfig+0x108>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d157      	bne.n	8002c44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e23f      	b.n	8003018 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ba0:	d106      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x74>
 8002ba2:	4b91      	ldr	r3, [pc, #580]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a90      	ldr	r2, [pc, #576]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002ba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bac:	6013      	str	r3, [r2, #0]
 8002bae:	e01d      	b.n	8002bec <HAL_RCC_OscConfig+0xb0>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bb8:	d10c      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x98>
 8002bba:	4b8b      	ldr	r3, [pc, #556]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a8a      	ldr	r2, [pc, #552]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002bc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bc4:	6013      	str	r3, [r2, #0]
 8002bc6:	4b88      	ldr	r3, [pc, #544]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a87      	ldr	r2, [pc, #540]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bd0:	6013      	str	r3, [r2, #0]
 8002bd2:	e00b      	b.n	8002bec <HAL_RCC_OscConfig+0xb0>
 8002bd4:	4b84      	ldr	r3, [pc, #528]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a83      	ldr	r2, [pc, #524]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002bda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bde:	6013      	str	r3, [r2, #0]
 8002be0:	4b81      	ldr	r3, [pc, #516]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a80      	ldr	r2, [pc, #512]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002be6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d013      	beq.n	8002c1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf4:	f7fd ff22 	bl	8000a3c <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bfa:	e008      	b.n	8002c0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bfc:	f7fd ff1e 	bl	8000a3c <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b64      	cmp	r3, #100	; 0x64
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e204      	b.n	8003018 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c0e:	4b76      	ldr	r3, [pc, #472]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d0f0      	beq.n	8002bfc <HAL_RCC_OscConfig+0xc0>
 8002c1a:	e014      	b.n	8002c46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c1c:	f7fd ff0e 	bl	8000a3c <HAL_GetTick>
 8002c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c24:	f7fd ff0a 	bl	8000a3c <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b64      	cmp	r3, #100	; 0x64
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e1f0      	b.n	8003018 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c36:	4b6c      	ldr	r3, [pc, #432]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d1f0      	bne.n	8002c24 <HAL_RCC_OscConfig+0xe8>
 8002c42:	e000      	b.n	8002c46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d063      	beq.n	8002d1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c52:	4b65      	ldr	r3, [pc, #404]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f003 030c 	and.w	r3, r3, #12
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00b      	beq.n	8002c76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c5e:	4b62      	ldr	r3, [pc, #392]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c66:	2b08      	cmp	r3, #8
 8002c68:	d11c      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c6a:	4b5f      	ldr	r3, [pc, #380]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d116      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c76:	4b5c      	ldr	r3, [pc, #368]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d005      	beq.n	8002c8e <HAL_RCC_OscConfig+0x152>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d001      	beq.n	8002c8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e1c4      	b.n	8003018 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c8e:	4b56      	ldr	r3, [pc, #344]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	4952      	ldr	r1, [pc, #328]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ca2:	e03a      	b.n	8002d1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d020      	beq.n	8002cee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cac:	4b4f      	ldr	r3, [pc, #316]	; (8002dec <HAL_RCC_OscConfig+0x2b0>)
 8002cae:	2201      	movs	r2, #1
 8002cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb2:	f7fd fec3 	bl	8000a3c <HAL_GetTick>
 8002cb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cb8:	e008      	b.n	8002ccc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cba:	f7fd febf 	bl	8000a3c <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d901      	bls.n	8002ccc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e1a5      	b.n	8003018 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ccc:	4b46      	ldr	r3, [pc, #280]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d0f0      	beq.n	8002cba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cd8:	4b43      	ldr	r3, [pc, #268]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	4940      	ldr	r1, [pc, #256]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	600b      	str	r3, [r1, #0]
 8002cec:	e015      	b.n	8002d1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cee:	4b3f      	ldr	r3, [pc, #252]	; (8002dec <HAL_RCC_OscConfig+0x2b0>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf4:	f7fd fea2 	bl	8000a3c <HAL_GetTick>
 8002cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cfa:	e008      	b.n	8002d0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cfc:	f7fd fe9e 	bl	8000a3c <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e184      	b.n	8003018 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d0e:	4b36      	ldr	r3, [pc, #216]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1f0      	bne.n	8002cfc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0308 	and.w	r3, r3, #8
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d030      	beq.n	8002d88 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d016      	beq.n	8002d5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d2e:	4b30      	ldr	r3, [pc, #192]	; (8002df0 <HAL_RCC_OscConfig+0x2b4>)
 8002d30:	2201      	movs	r2, #1
 8002d32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d34:	f7fd fe82 	bl	8000a3c <HAL_GetTick>
 8002d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d3a:	e008      	b.n	8002d4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d3c:	f7fd fe7e 	bl	8000a3c <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e164      	b.n	8003018 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d4e:	4b26      	ldr	r3, [pc, #152]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002d50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d0f0      	beq.n	8002d3c <HAL_RCC_OscConfig+0x200>
 8002d5a:	e015      	b.n	8002d88 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d5c:	4b24      	ldr	r3, [pc, #144]	; (8002df0 <HAL_RCC_OscConfig+0x2b4>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d62:	f7fd fe6b 	bl	8000a3c <HAL_GetTick>
 8002d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d68:	e008      	b.n	8002d7c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d6a:	f7fd fe67 	bl	8000a3c <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d901      	bls.n	8002d7c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e14d      	b.n	8003018 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d7c:	4b1a      	ldr	r3, [pc, #104]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002d7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1f0      	bne.n	8002d6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f000 80a0 	beq.w	8002ed6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d96:	2300      	movs	r3, #0
 8002d98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d9a:	4b13      	ldr	r3, [pc, #76]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10f      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002da6:	2300      	movs	r3, #0
 8002da8:	60bb      	str	r3, [r7, #8]
 8002daa:	4b0f      	ldr	r3, [pc, #60]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	4a0e      	ldr	r2, [pc, #56]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002db4:	6413      	str	r3, [r2, #64]	; 0x40
 8002db6:	4b0c      	ldr	r3, [pc, #48]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dbe:	60bb      	str	r3, [r7, #8]
 8002dc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc6:	4b0b      	ldr	r3, [pc, #44]	; (8002df4 <HAL_RCC_OscConfig+0x2b8>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d121      	bne.n	8002e16 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dd2:	4b08      	ldr	r3, [pc, #32]	; (8002df4 <HAL_RCC_OscConfig+0x2b8>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a07      	ldr	r2, [pc, #28]	; (8002df4 <HAL_RCC_OscConfig+0x2b8>)
 8002dd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ddc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dde:	f7fd fe2d 	bl	8000a3c <HAL_GetTick>
 8002de2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de4:	e011      	b.n	8002e0a <HAL_RCC_OscConfig+0x2ce>
 8002de6:	bf00      	nop
 8002de8:	40023800 	.word	0x40023800
 8002dec:	42470000 	.word	0x42470000
 8002df0:	42470e80 	.word	0x42470e80
 8002df4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002df8:	f7fd fe20 	bl	8000a3c <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e106      	b.n	8003018 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e0a:	4b85      	ldr	r3, [pc, #532]	; (8003020 <HAL_RCC_OscConfig+0x4e4>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d0f0      	beq.n	8002df8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d106      	bne.n	8002e2c <HAL_RCC_OscConfig+0x2f0>
 8002e1e:	4b81      	ldr	r3, [pc, #516]	; (8003024 <HAL_RCC_OscConfig+0x4e8>)
 8002e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e22:	4a80      	ldr	r2, [pc, #512]	; (8003024 <HAL_RCC_OscConfig+0x4e8>)
 8002e24:	f043 0301 	orr.w	r3, r3, #1
 8002e28:	6713      	str	r3, [r2, #112]	; 0x70
 8002e2a:	e01c      	b.n	8002e66 <HAL_RCC_OscConfig+0x32a>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	2b05      	cmp	r3, #5
 8002e32:	d10c      	bne.n	8002e4e <HAL_RCC_OscConfig+0x312>
 8002e34:	4b7b      	ldr	r3, [pc, #492]	; (8003024 <HAL_RCC_OscConfig+0x4e8>)
 8002e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e38:	4a7a      	ldr	r2, [pc, #488]	; (8003024 <HAL_RCC_OscConfig+0x4e8>)
 8002e3a:	f043 0304 	orr.w	r3, r3, #4
 8002e3e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e40:	4b78      	ldr	r3, [pc, #480]	; (8003024 <HAL_RCC_OscConfig+0x4e8>)
 8002e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e44:	4a77      	ldr	r2, [pc, #476]	; (8003024 <HAL_RCC_OscConfig+0x4e8>)
 8002e46:	f043 0301 	orr.w	r3, r3, #1
 8002e4a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e4c:	e00b      	b.n	8002e66 <HAL_RCC_OscConfig+0x32a>
 8002e4e:	4b75      	ldr	r3, [pc, #468]	; (8003024 <HAL_RCC_OscConfig+0x4e8>)
 8002e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e52:	4a74      	ldr	r2, [pc, #464]	; (8003024 <HAL_RCC_OscConfig+0x4e8>)
 8002e54:	f023 0301 	bic.w	r3, r3, #1
 8002e58:	6713      	str	r3, [r2, #112]	; 0x70
 8002e5a:	4b72      	ldr	r3, [pc, #456]	; (8003024 <HAL_RCC_OscConfig+0x4e8>)
 8002e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5e:	4a71      	ldr	r2, [pc, #452]	; (8003024 <HAL_RCC_OscConfig+0x4e8>)
 8002e60:	f023 0304 	bic.w	r3, r3, #4
 8002e64:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d015      	beq.n	8002e9a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e6e:	f7fd fde5 	bl	8000a3c <HAL_GetTick>
 8002e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e74:	e00a      	b.n	8002e8c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e76:	f7fd fde1 	bl	8000a3c <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e0c5      	b.n	8003018 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e8c:	4b65      	ldr	r3, [pc, #404]	; (8003024 <HAL_RCC_OscConfig+0x4e8>)
 8002e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d0ee      	beq.n	8002e76 <HAL_RCC_OscConfig+0x33a>
 8002e98:	e014      	b.n	8002ec4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e9a:	f7fd fdcf 	bl	8000a3c <HAL_GetTick>
 8002e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ea0:	e00a      	b.n	8002eb8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ea2:	f7fd fdcb 	bl	8000a3c <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d901      	bls.n	8002eb8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e0af      	b.n	8003018 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eb8:	4b5a      	ldr	r3, [pc, #360]	; (8003024 <HAL_RCC_OscConfig+0x4e8>)
 8002eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1ee      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ec4:	7dfb      	ldrb	r3, [r7, #23]
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d105      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eca:	4b56      	ldr	r3, [pc, #344]	; (8003024 <HAL_RCC_OscConfig+0x4e8>)
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	4a55      	ldr	r2, [pc, #340]	; (8003024 <HAL_RCC_OscConfig+0x4e8>)
 8002ed0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ed4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	f000 809b 	beq.w	8003016 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ee0:	4b50      	ldr	r3, [pc, #320]	; (8003024 <HAL_RCC_OscConfig+0x4e8>)
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f003 030c 	and.w	r3, r3, #12
 8002ee8:	2b08      	cmp	r3, #8
 8002eea:	d05c      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d141      	bne.n	8002f78 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ef4:	4b4c      	ldr	r3, [pc, #304]	; (8003028 <HAL_RCC_OscConfig+0x4ec>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002efa:	f7fd fd9f 	bl	8000a3c <HAL_GetTick>
 8002efe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f00:	e008      	b.n	8002f14 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f02:	f7fd fd9b 	bl	8000a3c <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d901      	bls.n	8002f14 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e081      	b.n	8003018 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f14:	4b43      	ldr	r3, [pc, #268]	; (8003024 <HAL_RCC_OscConfig+0x4e8>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d1f0      	bne.n	8002f02 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	69da      	ldr	r2, [r3, #28]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	431a      	orrs	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2e:	019b      	lsls	r3, r3, #6
 8002f30:	431a      	orrs	r2, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f36:	085b      	lsrs	r3, r3, #1
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	041b      	lsls	r3, r3, #16
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f42:	061b      	lsls	r3, r3, #24
 8002f44:	4937      	ldr	r1, [pc, #220]	; (8003024 <HAL_RCC_OscConfig+0x4e8>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f4a:	4b37      	ldr	r3, [pc, #220]	; (8003028 <HAL_RCC_OscConfig+0x4ec>)
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f50:	f7fd fd74 	bl	8000a3c <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f58:	f7fd fd70 	bl	8000a3c <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e056      	b.n	8003018 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f6a:	4b2e      	ldr	r3, [pc, #184]	; (8003024 <HAL_RCC_OscConfig+0x4e8>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d0f0      	beq.n	8002f58 <HAL_RCC_OscConfig+0x41c>
 8002f76:	e04e      	b.n	8003016 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f78:	4b2b      	ldr	r3, [pc, #172]	; (8003028 <HAL_RCC_OscConfig+0x4ec>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f7e:	f7fd fd5d 	bl	8000a3c <HAL_GetTick>
 8002f82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f84:	e008      	b.n	8002f98 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f86:	f7fd fd59 	bl	8000a3c <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d901      	bls.n	8002f98 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e03f      	b.n	8003018 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f98:	4b22      	ldr	r3, [pc, #136]	; (8003024 <HAL_RCC_OscConfig+0x4e8>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1f0      	bne.n	8002f86 <HAL_RCC_OscConfig+0x44a>
 8002fa4:	e037      	b.n	8003016 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d101      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e032      	b.n	8003018 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fb2:	4b1c      	ldr	r3, [pc, #112]	; (8003024 <HAL_RCC_OscConfig+0x4e8>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d028      	beq.n	8003012 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d121      	bne.n	8003012 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d11a      	bne.n	8003012 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002fe8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d111      	bne.n	8003012 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff8:	085b      	lsrs	r3, r3, #1
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d107      	bne.n	8003012 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800300e:	429a      	cmp	r2, r3
 8003010:	d001      	beq.n	8003016 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e000      	b.n	8003018 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	3718      	adds	r7, #24
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	40007000 	.word	0x40007000
 8003024:	40023800 	.word	0x40023800
 8003028:	42470060 	.word	0x42470060

0800302c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d101      	bne.n	8003040 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e0cc      	b.n	80031da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003040:	4b68      	ldr	r3, [pc, #416]	; (80031e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0307 	and.w	r3, r3, #7
 8003048:	683a      	ldr	r2, [r7, #0]
 800304a:	429a      	cmp	r2, r3
 800304c:	d90c      	bls.n	8003068 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800304e:	4b65      	ldr	r3, [pc, #404]	; (80031e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003050:	683a      	ldr	r2, [r7, #0]
 8003052:	b2d2      	uxtb	r2, r2
 8003054:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003056:	4b63      	ldr	r3, [pc, #396]	; (80031e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0307 	and.w	r3, r3, #7
 800305e:	683a      	ldr	r2, [r7, #0]
 8003060:	429a      	cmp	r2, r3
 8003062:	d001      	beq.n	8003068 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e0b8      	b.n	80031da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d020      	beq.n	80030b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0304 	and.w	r3, r3, #4
 800307c:	2b00      	cmp	r3, #0
 800307e:	d005      	beq.n	800308c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003080:	4b59      	ldr	r3, [pc, #356]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	4a58      	ldr	r2, [pc, #352]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003086:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800308a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0308 	and.w	r3, r3, #8
 8003094:	2b00      	cmp	r3, #0
 8003096:	d005      	beq.n	80030a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003098:	4b53      	ldr	r3, [pc, #332]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	4a52      	ldr	r2, [pc, #328]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 800309e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030a4:	4b50      	ldr	r3, [pc, #320]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	494d      	ldr	r1, [pc, #308]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d044      	beq.n	800314c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d107      	bne.n	80030da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ca:	4b47      	ldr	r3, [pc, #284]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d119      	bne.n	800310a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e07f      	b.n	80031da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d003      	beq.n	80030ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030e6:	2b03      	cmp	r3, #3
 80030e8:	d107      	bne.n	80030fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ea:	4b3f      	ldr	r3, [pc, #252]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d109      	bne.n	800310a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e06f      	b.n	80031da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030fa:	4b3b      	ldr	r3, [pc, #236]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d101      	bne.n	800310a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e067      	b.n	80031da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800310a:	4b37      	ldr	r3, [pc, #220]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f023 0203 	bic.w	r2, r3, #3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	4934      	ldr	r1, [pc, #208]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003118:	4313      	orrs	r3, r2
 800311a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800311c:	f7fd fc8e 	bl	8000a3c <HAL_GetTick>
 8003120:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003122:	e00a      	b.n	800313a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003124:	f7fd fc8a 	bl	8000a3c <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003132:	4293      	cmp	r3, r2
 8003134:	d901      	bls.n	800313a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e04f      	b.n	80031da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800313a:	4b2b      	ldr	r3, [pc, #172]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f003 020c 	and.w	r2, r3, #12
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	429a      	cmp	r2, r3
 800314a:	d1eb      	bne.n	8003124 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800314c:	4b25      	ldr	r3, [pc, #148]	; (80031e4 <HAL_RCC_ClockConfig+0x1b8>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0307 	and.w	r3, r3, #7
 8003154:	683a      	ldr	r2, [r7, #0]
 8003156:	429a      	cmp	r2, r3
 8003158:	d20c      	bcs.n	8003174 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800315a:	4b22      	ldr	r3, [pc, #136]	; (80031e4 <HAL_RCC_ClockConfig+0x1b8>)
 800315c:	683a      	ldr	r2, [r7, #0]
 800315e:	b2d2      	uxtb	r2, r2
 8003160:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003162:	4b20      	ldr	r3, [pc, #128]	; (80031e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0307 	and.w	r3, r3, #7
 800316a:	683a      	ldr	r2, [r7, #0]
 800316c:	429a      	cmp	r2, r3
 800316e:	d001      	beq.n	8003174 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e032      	b.n	80031da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0304 	and.w	r3, r3, #4
 800317c:	2b00      	cmp	r3, #0
 800317e:	d008      	beq.n	8003192 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003180:	4b19      	ldr	r3, [pc, #100]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	4916      	ldr	r1, [pc, #88]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 800318e:	4313      	orrs	r3, r2
 8003190:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0308 	and.w	r3, r3, #8
 800319a:	2b00      	cmp	r3, #0
 800319c:	d009      	beq.n	80031b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800319e:	4b12      	ldr	r3, [pc, #72]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	490e      	ldr	r1, [pc, #56]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031b2:	f000 f821 	bl	80031f8 <HAL_RCC_GetSysClockFreq>
 80031b6:	4602      	mov	r2, r0
 80031b8:	4b0b      	ldr	r3, [pc, #44]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	091b      	lsrs	r3, r3, #4
 80031be:	f003 030f 	and.w	r3, r3, #15
 80031c2:	490a      	ldr	r1, [pc, #40]	; (80031ec <HAL_RCC_ClockConfig+0x1c0>)
 80031c4:	5ccb      	ldrb	r3, [r1, r3]
 80031c6:	fa22 f303 	lsr.w	r3, r2, r3
 80031ca:	4a09      	ldr	r2, [pc, #36]	; (80031f0 <HAL_RCC_ClockConfig+0x1c4>)
 80031cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031ce:	4b09      	ldr	r3, [pc, #36]	; (80031f4 <HAL_RCC_ClockConfig+0x1c8>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7fd fbee 	bl	80009b4 <HAL_InitTick>

  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3710      	adds	r7, #16
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	40023c00 	.word	0x40023c00
 80031e8:	40023800 	.word	0x40023800
 80031ec:	08009e00 	.word	0x08009e00
 80031f0:	20000000 	.word	0x20000000
 80031f4:	20000004 	.word	0x20000004

080031f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80031fc:	b084      	sub	sp, #16
 80031fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003200:	2300      	movs	r3, #0
 8003202:	607b      	str	r3, [r7, #4]
 8003204:	2300      	movs	r3, #0
 8003206:	60fb      	str	r3, [r7, #12]
 8003208:	2300      	movs	r3, #0
 800320a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800320c:	2300      	movs	r3, #0
 800320e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003210:	4b67      	ldr	r3, [pc, #412]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f003 030c 	and.w	r3, r3, #12
 8003218:	2b08      	cmp	r3, #8
 800321a:	d00d      	beq.n	8003238 <HAL_RCC_GetSysClockFreq+0x40>
 800321c:	2b08      	cmp	r3, #8
 800321e:	f200 80bd 	bhi.w	800339c <HAL_RCC_GetSysClockFreq+0x1a4>
 8003222:	2b00      	cmp	r3, #0
 8003224:	d002      	beq.n	800322c <HAL_RCC_GetSysClockFreq+0x34>
 8003226:	2b04      	cmp	r3, #4
 8003228:	d003      	beq.n	8003232 <HAL_RCC_GetSysClockFreq+0x3a>
 800322a:	e0b7      	b.n	800339c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800322c:	4b61      	ldr	r3, [pc, #388]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800322e:	60bb      	str	r3, [r7, #8]
       break;
 8003230:	e0b7      	b.n	80033a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003232:	4b61      	ldr	r3, [pc, #388]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003234:	60bb      	str	r3, [r7, #8]
      break;
 8003236:	e0b4      	b.n	80033a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003238:	4b5d      	ldr	r3, [pc, #372]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003240:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003242:	4b5b      	ldr	r3, [pc, #364]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d04d      	beq.n	80032ea <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800324e:	4b58      	ldr	r3, [pc, #352]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	099b      	lsrs	r3, r3, #6
 8003254:	461a      	mov	r2, r3
 8003256:	f04f 0300 	mov.w	r3, #0
 800325a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800325e:	f04f 0100 	mov.w	r1, #0
 8003262:	ea02 0800 	and.w	r8, r2, r0
 8003266:	ea03 0901 	and.w	r9, r3, r1
 800326a:	4640      	mov	r0, r8
 800326c:	4649      	mov	r1, r9
 800326e:	f04f 0200 	mov.w	r2, #0
 8003272:	f04f 0300 	mov.w	r3, #0
 8003276:	014b      	lsls	r3, r1, #5
 8003278:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800327c:	0142      	lsls	r2, r0, #5
 800327e:	4610      	mov	r0, r2
 8003280:	4619      	mov	r1, r3
 8003282:	ebb0 0008 	subs.w	r0, r0, r8
 8003286:	eb61 0109 	sbc.w	r1, r1, r9
 800328a:	f04f 0200 	mov.w	r2, #0
 800328e:	f04f 0300 	mov.w	r3, #0
 8003292:	018b      	lsls	r3, r1, #6
 8003294:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003298:	0182      	lsls	r2, r0, #6
 800329a:	1a12      	subs	r2, r2, r0
 800329c:	eb63 0301 	sbc.w	r3, r3, r1
 80032a0:	f04f 0000 	mov.w	r0, #0
 80032a4:	f04f 0100 	mov.w	r1, #0
 80032a8:	00d9      	lsls	r1, r3, #3
 80032aa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032ae:	00d0      	lsls	r0, r2, #3
 80032b0:	4602      	mov	r2, r0
 80032b2:	460b      	mov	r3, r1
 80032b4:	eb12 0208 	adds.w	r2, r2, r8
 80032b8:	eb43 0309 	adc.w	r3, r3, r9
 80032bc:	f04f 0000 	mov.w	r0, #0
 80032c0:	f04f 0100 	mov.w	r1, #0
 80032c4:	0259      	lsls	r1, r3, #9
 80032c6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80032ca:	0250      	lsls	r0, r2, #9
 80032cc:	4602      	mov	r2, r0
 80032ce:	460b      	mov	r3, r1
 80032d0:	4610      	mov	r0, r2
 80032d2:	4619      	mov	r1, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	461a      	mov	r2, r3
 80032d8:	f04f 0300 	mov.w	r3, #0
 80032dc:	f7fc ff74 	bl	80001c8 <__aeabi_uldivmod>
 80032e0:	4602      	mov	r2, r0
 80032e2:	460b      	mov	r3, r1
 80032e4:	4613      	mov	r3, r2
 80032e6:	60fb      	str	r3, [r7, #12]
 80032e8:	e04a      	b.n	8003380 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032ea:	4b31      	ldr	r3, [pc, #196]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	099b      	lsrs	r3, r3, #6
 80032f0:	461a      	mov	r2, r3
 80032f2:	f04f 0300 	mov.w	r3, #0
 80032f6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80032fa:	f04f 0100 	mov.w	r1, #0
 80032fe:	ea02 0400 	and.w	r4, r2, r0
 8003302:	ea03 0501 	and.w	r5, r3, r1
 8003306:	4620      	mov	r0, r4
 8003308:	4629      	mov	r1, r5
 800330a:	f04f 0200 	mov.w	r2, #0
 800330e:	f04f 0300 	mov.w	r3, #0
 8003312:	014b      	lsls	r3, r1, #5
 8003314:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003318:	0142      	lsls	r2, r0, #5
 800331a:	4610      	mov	r0, r2
 800331c:	4619      	mov	r1, r3
 800331e:	1b00      	subs	r0, r0, r4
 8003320:	eb61 0105 	sbc.w	r1, r1, r5
 8003324:	f04f 0200 	mov.w	r2, #0
 8003328:	f04f 0300 	mov.w	r3, #0
 800332c:	018b      	lsls	r3, r1, #6
 800332e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003332:	0182      	lsls	r2, r0, #6
 8003334:	1a12      	subs	r2, r2, r0
 8003336:	eb63 0301 	sbc.w	r3, r3, r1
 800333a:	f04f 0000 	mov.w	r0, #0
 800333e:	f04f 0100 	mov.w	r1, #0
 8003342:	00d9      	lsls	r1, r3, #3
 8003344:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003348:	00d0      	lsls	r0, r2, #3
 800334a:	4602      	mov	r2, r0
 800334c:	460b      	mov	r3, r1
 800334e:	1912      	adds	r2, r2, r4
 8003350:	eb45 0303 	adc.w	r3, r5, r3
 8003354:	f04f 0000 	mov.w	r0, #0
 8003358:	f04f 0100 	mov.w	r1, #0
 800335c:	0299      	lsls	r1, r3, #10
 800335e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003362:	0290      	lsls	r0, r2, #10
 8003364:	4602      	mov	r2, r0
 8003366:	460b      	mov	r3, r1
 8003368:	4610      	mov	r0, r2
 800336a:	4619      	mov	r1, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	461a      	mov	r2, r3
 8003370:	f04f 0300 	mov.w	r3, #0
 8003374:	f7fc ff28 	bl	80001c8 <__aeabi_uldivmod>
 8003378:	4602      	mov	r2, r0
 800337a:	460b      	mov	r3, r1
 800337c:	4613      	mov	r3, r2
 800337e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003380:	4b0b      	ldr	r3, [pc, #44]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	0c1b      	lsrs	r3, r3, #16
 8003386:	f003 0303 	and.w	r3, r3, #3
 800338a:	3301      	adds	r3, #1
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	fbb2 f3f3 	udiv	r3, r2, r3
 8003398:	60bb      	str	r3, [r7, #8]
      break;
 800339a:	e002      	b.n	80033a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800339c:	4b05      	ldr	r3, [pc, #20]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800339e:	60bb      	str	r3, [r7, #8]
      break;
 80033a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033a2:	68bb      	ldr	r3, [r7, #8]
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3710      	adds	r7, #16
 80033a8:	46bd      	mov	sp, r7
 80033aa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80033ae:	bf00      	nop
 80033b0:	40023800 	.word	0x40023800
 80033b4:	00f42400 	.word	0x00f42400
 80033b8:	007a1200 	.word	0x007a1200

080033bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80033bc:	b084      	sub	sp, #16
 80033be:	b580      	push	{r7, lr}
 80033c0:	b084      	sub	sp, #16
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
 80033c6:	f107 001c 	add.w	r0, r7, #28
 80033ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80033ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d122      	bne.n	800341a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80033e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80033fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d105      	bne.n	800340e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 f9a0 	bl	8003754 <USB_CoreReset>
 8003414:	4603      	mov	r3, r0
 8003416:	73fb      	strb	r3, [r7, #15]
 8003418:	e01a      	b.n	8003450 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 f994 	bl	8003754 <USB_CoreReset>
 800342c:	4603      	mov	r3, r0
 800342e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003430:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003432:	2b00      	cmp	r3, #0
 8003434:	d106      	bne.n	8003444 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	639a      	str	r2, [r3, #56]	; 0x38
 8003442:	e005      	b.n	8003450 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003448:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003452:	2b01      	cmp	r3, #1
 8003454:	d10b      	bne.n	800346e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f043 0206 	orr.w	r2, r3, #6
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f043 0220 	orr.w	r2, r3, #32
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800346e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003470:	4618      	mov	r0, r3
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800347a:	b004      	add	sp, #16
 800347c:	4770      	bx	lr

0800347e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800347e:	b480      	push	{r7}
 8003480:	b083      	sub	sp, #12
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f043 0201 	orr.w	r2, r3, #1
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f023 0201 	bic.w	r2, r3, #1
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr

080034c2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b084      	sub	sp, #16
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
 80034ca:	460b      	mov	r3, r1
 80034cc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80034ce:	2300      	movs	r3, #0
 80034d0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80034de:	78fb      	ldrb	r3, [r7, #3]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d115      	bne.n	8003510 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80034f0:	2001      	movs	r0, #1
 80034f2:	f7fd faaf 	bl	8000a54 <HAL_Delay>
      ms++;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	3301      	adds	r3, #1
 80034fa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 f91a 	bl	8003736 <USB_GetMode>
 8003502:	4603      	mov	r3, r0
 8003504:	2b01      	cmp	r3, #1
 8003506:	d01e      	beq.n	8003546 <USB_SetCurrentMode+0x84>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2b31      	cmp	r3, #49	; 0x31
 800350c:	d9f0      	bls.n	80034f0 <USB_SetCurrentMode+0x2e>
 800350e:	e01a      	b.n	8003546 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003510:	78fb      	ldrb	r3, [r7, #3]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d115      	bne.n	8003542 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003522:	2001      	movs	r0, #1
 8003524:	f7fd fa96 	bl	8000a54 <HAL_Delay>
      ms++;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	3301      	adds	r3, #1
 800352c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 f901 	bl	8003736 <USB_GetMode>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d005      	beq.n	8003546 <USB_SetCurrentMode+0x84>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2b31      	cmp	r3, #49	; 0x31
 800353e:	d9f0      	bls.n	8003522 <USB_SetCurrentMode+0x60>
 8003540:	e001      	b.n	8003546 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e005      	b.n	8003552 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2b32      	cmp	r3, #50	; 0x32
 800354a:	d101      	bne.n	8003550 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e000      	b.n	8003552 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
	...

0800355c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003566:	2300      	movs	r3, #0
 8003568:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	019b      	lsls	r3, r3, #6
 800356e:	f043 0220 	orr.w	r2, r3, #32
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	3301      	adds	r3, #1
 800357a:	60fb      	str	r3, [r7, #12]
 800357c:	4a08      	ldr	r2, [pc, #32]	; (80035a0 <USB_FlushTxFifo+0x44>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d901      	bls.n	8003586 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e006      	b.n	8003594 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	f003 0320 	and.w	r3, r3, #32
 800358e:	2b20      	cmp	r3, #32
 8003590:	d0f1      	beq.n	8003576 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3714      	adds	r7, #20
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr
 80035a0:	00030d40 	.word	0x00030d40

080035a4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b085      	sub	sp, #20
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80035ac:	2300      	movs	r3, #0
 80035ae:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2210      	movs	r2, #16
 80035b4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	3301      	adds	r3, #1
 80035ba:	60fb      	str	r3, [r7, #12]
 80035bc:	4a08      	ldr	r2, [pc, #32]	; (80035e0 <USB_FlushRxFifo+0x3c>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d901      	bls.n	80035c6 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e006      	b.n	80035d4 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	f003 0310 	and.w	r3, r3, #16
 80035ce:	2b10      	cmp	r3, #16
 80035d0:	d0f1      	beq.n	80035b6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3714      	adds	r7, #20
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr
 80035e0:	00030d40 	.word	0x00030d40

080035e4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b089      	sub	sp, #36	; 0x24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	4611      	mov	r1, r2
 80035f0:	461a      	mov	r2, r3
 80035f2:	460b      	mov	r3, r1
 80035f4:	71fb      	strb	r3, [r7, #7]
 80035f6:	4613      	mov	r3, r2
 80035f8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003602:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003606:	2b00      	cmp	r3, #0
 8003608:	d123      	bne.n	8003652 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800360a:	88bb      	ldrh	r3, [r7, #4]
 800360c:	3303      	adds	r3, #3
 800360e:	089b      	lsrs	r3, r3, #2
 8003610:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003612:	2300      	movs	r3, #0
 8003614:	61bb      	str	r3, [r7, #24]
 8003616:	e018      	b.n	800364a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003618:	79fb      	ldrb	r3, [r7, #7]
 800361a:	031a      	lsls	r2, r3, #12
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	4413      	add	r3, r2
 8003620:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003624:	461a      	mov	r2, r3
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	3301      	adds	r3, #1
 8003630:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	3301      	adds	r3, #1
 8003636:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	3301      	adds	r3, #1
 800363c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	3301      	adds	r3, #1
 8003642:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	3301      	adds	r3, #1
 8003648:	61bb      	str	r3, [r7, #24]
 800364a:	69ba      	ldr	r2, [r7, #24]
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	429a      	cmp	r2, r3
 8003650:	d3e2      	bcc.n	8003618 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3724      	adds	r7, #36	; 0x24
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003660:	b480      	push	{r7}
 8003662:	b08b      	sub	sp, #44	; 0x2c
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	4613      	mov	r3, r2
 800366c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003676:	88fb      	ldrh	r3, [r7, #6]
 8003678:	089b      	lsrs	r3, r3, #2
 800367a:	b29b      	uxth	r3, r3
 800367c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800367e:	88fb      	ldrh	r3, [r7, #6]
 8003680:	f003 0303 	and.w	r3, r3, #3
 8003684:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003686:	2300      	movs	r3, #0
 8003688:	623b      	str	r3, [r7, #32]
 800368a:	e014      	b.n	80036b6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003696:	601a      	str	r2, [r3, #0]
    pDest++;
 8003698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369a:	3301      	adds	r3, #1
 800369c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800369e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a0:	3301      	adds	r3, #1
 80036a2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80036a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a6:	3301      	adds	r3, #1
 80036a8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80036aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ac:	3301      	adds	r3, #1
 80036ae:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80036b0:	6a3b      	ldr	r3, [r7, #32]
 80036b2:	3301      	adds	r3, #1
 80036b4:	623b      	str	r3, [r7, #32]
 80036b6:	6a3a      	ldr	r2, [r7, #32]
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d3e6      	bcc.n	800368c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80036be:	8bfb      	ldrh	r3, [r7, #30]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d01e      	beq.n	8003702 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80036c4:	2300      	movs	r3, #0
 80036c6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036ce:	461a      	mov	r2, r3
 80036d0:	f107 0310 	add.w	r3, r7, #16
 80036d4:	6812      	ldr	r2, [r2, #0]
 80036d6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	6a3b      	ldr	r3, [r7, #32]
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	fa22 f303 	lsr.w	r3, r2, r3
 80036e4:	b2da      	uxtb	r2, r3
 80036e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e8:	701a      	strb	r2, [r3, #0]
      i++;
 80036ea:	6a3b      	ldr	r3, [r7, #32]
 80036ec:	3301      	adds	r3, #1
 80036ee:	623b      	str	r3, [r7, #32]
      pDest++;
 80036f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f2:	3301      	adds	r3, #1
 80036f4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80036f6:	8bfb      	ldrh	r3, [r7, #30]
 80036f8:	3b01      	subs	r3, #1
 80036fa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80036fc:	8bfb      	ldrh	r3, [r7, #30]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1ea      	bne.n	80036d8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003704:	4618      	mov	r0, r3
 8003706:	372c      	adds	r7, #44	; 0x2c
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003710:	b480      	push	{r7}
 8003712:	b085      	sub	sp, #20
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	695b      	ldr	r3, [r3, #20]
 800371c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	4013      	ands	r3, r2
 8003726:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003728:	68fb      	ldr	r3, [r7, #12]
}
 800372a:	4618      	mov	r0, r3
 800372c:	3714      	adds	r7, #20
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr

08003736 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003736:	b480      	push	{r7}
 8003738:	b083      	sub	sp, #12
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	f003 0301 	and.w	r3, r3, #1
}
 8003746:	4618      	mov	r0, r3
 8003748:	370c      	adds	r7, #12
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
	...

08003754 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800375c:	2300      	movs	r3, #0
 800375e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	3301      	adds	r3, #1
 8003764:	60fb      	str	r3, [r7, #12]
 8003766:	4a13      	ldr	r2, [pc, #76]	; (80037b4 <USB_CoreReset+0x60>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d901      	bls.n	8003770 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e01a      	b.n	80037a6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	2b00      	cmp	r3, #0
 8003776:	daf3      	bge.n	8003760 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003778:	2300      	movs	r3, #0
 800377a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	691b      	ldr	r3, [r3, #16]
 8003780:	f043 0201 	orr.w	r2, r3, #1
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	3301      	adds	r3, #1
 800378c:	60fb      	str	r3, [r7, #12]
 800378e:	4a09      	ldr	r2, [pc, #36]	; (80037b4 <USB_CoreReset+0x60>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d901      	bls.n	8003798 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	e006      	b.n	80037a6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	691b      	ldr	r3, [r3, #16]
 800379c:	f003 0301 	and.w	r3, r3, #1
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d0f1      	beq.n	8003788 <USB_CoreReset+0x34>

  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3714      	adds	r7, #20
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	00030d40 	.word	0x00030d40

080037b8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80037b8:	b084      	sub	sp, #16
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b084      	sub	sp, #16
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
 80037c2:	f107 001c 	add.w	r0, r7, #28
 80037c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80037d4:	461a      	mov	r2, r3
 80037d6:	2300      	movs	r3, #0
 80037d8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037de:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ea:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003806:	2b00      	cmp	r3, #0
 8003808:	d018      	beq.n	800383c <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800380a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380c:	2b01      	cmp	r3, #1
 800380e:	d10a      	bne.n	8003826 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68ba      	ldr	r2, [r7, #8]
 800381a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800381e:	f043 0304 	orr.w	r3, r3, #4
 8003822:	6013      	str	r3, [r2, #0]
 8003824:	e014      	b.n	8003850 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68ba      	ldr	r2, [r7, #8]
 8003830:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003834:	f023 0304 	bic.w	r3, r3, #4
 8003838:	6013      	str	r3, [r2, #0]
 800383a:	e009      	b.n	8003850 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68ba      	ldr	r2, [r7, #8]
 8003846:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800384a:	f023 0304 	bic.w	r3, r3, #4
 800384e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8003850:	2110      	movs	r1, #16
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f7ff fe82 	bl	800355c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f7ff fea3 	bl	80035a4 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800385e:	2300      	movs	r3, #0
 8003860:	60fb      	str	r3, [r7, #12]
 8003862:	e015      	b.n	8003890 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	015a      	lsls	r2, r3, #5
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	4413      	add	r3, r2
 800386c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003870:	461a      	mov	r2, r3
 8003872:	f04f 33ff 	mov.w	r3, #4294967295
 8003876:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	015a      	lsls	r2, r3, #5
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	4413      	add	r3, r2
 8003880:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003884:	461a      	mov	r2, r3
 8003886:	2300      	movs	r3, #0
 8003888:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	3301      	adds	r3, #1
 800388e:	60fb      	str	r3, [r7, #12]
 8003890:	6a3b      	ldr	r3, [r7, #32]
 8003892:	68fa      	ldr	r2, [r7, #12]
 8003894:	429a      	cmp	r2, r3
 8003896:	d3e5      	bcc.n	8003864 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f04f 32ff 	mov.w	r2, #4294967295
 80038a4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00b      	beq.n	80038ca <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038b8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a13      	ldr	r2, [pc, #76]	; (800390c <USB_HostInit+0x154>)
 80038be:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a13      	ldr	r2, [pc, #76]	; (8003910 <USB_HostInit+0x158>)
 80038c4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80038c8:	e009      	b.n	80038de <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2280      	movs	r2, #128	; 0x80
 80038ce:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a10      	ldr	r2, [pc, #64]	; (8003914 <USB_HostInit+0x15c>)
 80038d4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a0f      	ldr	r2, [pc, #60]	; (8003918 <USB_HostInit+0x160>)
 80038da:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80038de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d105      	bne.n	80038f0 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	f043 0210 	orr.w	r2, r3, #16
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	699a      	ldr	r2, [r3, #24]
 80038f4:	4b09      	ldr	r3, [pc, #36]	; (800391c <USB_HostInit+0x164>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3710      	adds	r7, #16
 8003902:	46bd      	mov	sp, r7
 8003904:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003908:	b004      	add	sp, #16
 800390a:	4770      	bx	lr
 800390c:	01000200 	.word	0x01000200
 8003910:	00e00300 	.word	0x00e00300
 8003914:	00600080 	.word	0x00600080
 8003918:	004000e0 	.word	0x004000e0
 800391c:	a3200008 	.word	0xa3200008

08003920 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8003920:	b480      	push	{r7}
 8003922:	b085      	sub	sp, #20
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	460b      	mov	r3, r1
 800392a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800393e:	f023 0303 	bic.w	r3, r3, #3
 8003942:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	78fb      	ldrb	r3, [r7, #3]
 800394e:	f003 0303 	and.w	r3, r3, #3
 8003952:	68f9      	ldr	r1, [r7, #12]
 8003954:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003958:	4313      	orrs	r3, r2
 800395a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800395c:	78fb      	ldrb	r3, [r7, #3]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d107      	bne.n	8003972 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003968:	461a      	mov	r2, r3
 800396a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800396e:	6053      	str	r3, [r2, #4]
 8003970:	e009      	b.n	8003986 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8003972:	78fb      	ldrb	r3, [r7, #3]
 8003974:	2b02      	cmp	r3, #2
 8003976:	d106      	bne.n	8003986 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800397e:	461a      	mov	r2, r3
 8003980:	f241 7370 	movw	r3, #6000	; 0x1770
 8003984:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8003986:	2300      	movs	r3, #0
}
 8003988:	4618      	mov	r0, r3
 800398a:	3714      	adds	r7, #20
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80039a0:	2300      	movs	r3, #0
 80039a2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80039b4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	68fa      	ldr	r2, [r7, #12]
 80039ba:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80039be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039c2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80039c4:	2064      	movs	r0, #100	; 0x64
 80039c6:	f7fd f845 	bl	8000a54 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80039d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039d6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80039d8:	200a      	movs	r0, #10
 80039da:	f7fd f83b 	bl	8000a54 <HAL_Delay>

  return HAL_OK;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3710      	adds	r7, #16
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	460b      	mov	r3, r1
 80039f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80039f8:	2300      	movs	r3, #0
 80039fa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003a0c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d109      	bne.n	8003a2c <USB_DriveVbus+0x44>
 8003a18:	78fb      	ldrb	r3, [r7, #3]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d106      	bne.n	8003a2c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003a26:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003a2a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a36:	d109      	bne.n	8003a4c <USB_DriveVbus+0x64>
 8003a38:	78fb      	ldrb	r3, [r7, #3]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d106      	bne.n	8003a4c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003a46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a4a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3714      	adds	r7, #20
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr

08003a5a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b085      	sub	sp, #20
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8003a66:	2300      	movs	r3, #0
 8003a68:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	0c5b      	lsrs	r3, r3, #17
 8003a78:	f003 0303 	and.w	r3, r3, #3
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3714      	adds	r7, #20
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b085      	sub	sp, #20
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	b29b      	uxth	r3, r3
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3714      	adds	r7, #20
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
	...

08003aac <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b088      	sub	sp, #32
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	4608      	mov	r0, r1
 8003ab6:	4611      	mov	r1, r2
 8003ab8:	461a      	mov	r2, r3
 8003aba:	4603      	mov	r3, r0
 8003abc:	70fb      	strb	r3, [r7, #3]
 8003abe:	460b      	mov	r3, r1
 8003ac0:	70bb      	strb	r3, [r7, #2]
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8003ace:	78fb      	ldrb	r3, [r7, #3]
 8003ad0:	015a      	lsls	r2, r3, #5
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ada:	461a      	mov	r2, r3
 8003adc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ae0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8003ae2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003ae6:	2b03      	cmp	r3, #3
 8003ae8:	d87e      	bhi.n	8003be8 <USB_HC_Init+0x13c>
 8003aea:	a201      	add	r2, pc, #4	; (adr r2, 8003af0 <USB_HC_Init+0x44>)
 8003aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af0:	08003b01 	.word	0x08003b01
 8003af4:	08003bab 	.word	0x08003bab
 8003af8:	08003b01 	.word	0x08003b01
 8003afc:	08003b6d 	.word	0x08003b6d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003b00:	78fb      	ldrb	r3, [r7, #3]
 8003b02:	015a      	lsls	r2, r3, #5
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	4413      	add	r3, r2
 8003b08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	f240 439d 	movw	r3, #1181	; 0x49d
 8003b12:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8003b14:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	da10      	bge.n	8003b3e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8003b1c:	78fb      	ldrb	r3, [r7, #3]
 8003b1e:	015a      	lsls	r2, r3, #5
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	4413      	add	r3, r2
 8003b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	78fa      	ldrb	r2, [r7, #3]
 8003b2c:	0151      	lsls	r1, r2, #5
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	440a      	add	r2, r1
 8003b32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b3a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8003b3c:	e057      	b.n	8003bee <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d051      	beq.n	8003bee <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8003b4a:	78fb      	ldrb	r3, [r7, #3]
 8003b4c:	015a      	lsls	r2, r3, #5
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	4413      	add	r3, r2
 8003b52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	78fa      	ldrb	r2, [r7, #3]
 8003b5a:	0151      	lsls	r1, r2, #5
 8003b5c:	693a      	ldr	r2, [r7, #16]
 8003b5e:	440a      	add	r2, r1
 8003b60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b64:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003b68:	60d3      	str	r3, [r2, #12]
      break;
 8003b6a:	e040      	b.n	8003bee <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003b6c:	78fb      	ldrb	r3, [r7, #3]
 8003b6e:	015a      	lsls	r2, r3, #5
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	4413      	add	r3, r2
 8003b74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b78:	461a      	mov	r2, r3
 8003b7a:	f240 639d 	movw	r3, #1693	; 0x69d
 8003b7e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8003b80:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	da34      	bge.n	8003bf2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8003b88:	78fb      	ldrb	r3, [r7, #3]
 8003b8a:	015a      	lsls	r2, r3, #5
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	4413      	add	r3, r2
 8003b90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	78fa      	ldrb	r2, [r7, #3]
 8003b98:	0151      	lsls	r1, r2, #5
 8003b9a:	693a      	ldr	r2, [r7, #16]
 8003b9c:	440a      	add	r2, r1
 8003b9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ba2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ba6:	60d3      	str	r3, [r2, #12]
      }

      break;
 8003ba8:	e023      	b.n	8003bf2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003baa:	78fb      	ldrb	r3, [r7, #3]
 8003bac:	015a      	lsls	r2, r3, #5
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	f240 2325 	movw	r3, #549	; 0x225
 8003bbc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8003bbe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	da17      	bge.n	8003bf6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8003bc6:	78fb      	ldrb	r3, [r7, #3]
 8003bc8:	015a      	lsls	r2, r3, #5
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	4413      	add	r3, r2
 8003bce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	78fa      	ldrb	r2, [r7, #3]
 8003bd6:	0151      	lsls	r1, r2, #5
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	440a      	add	r2, r1
 8003bdc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003be0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8003be4:	60d3      	str	r3, [r2, #12]
      }
      break;
 8003be6:	e006      	b.n	8003bf6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	77fb      	strb	r3, [r7, #31]
      break;
 8003bec:	e004      	b.n	8003bf8 <USB_HC_Init+0x14c>
      break;
 8003bee:	bf00      	nop
 8003bf0:	e002      	b.n	8003bf8 <USB_HC_Init+0x14c>
      break;
 8003bf2:	bf00      	nop
 8003bf4:	e000      	b.n	8003bf8 <USB_HC_Init+0x14c>
      break;
 8003bf6:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bfe:	699a      	ldr	r2, [r3, #24]
 8003c00:	78fb      	ldrb	r3, [r7, #3]
 8003c02:	f003 030f 	and.w	r3, r3, #15
 8003c06:	2101      	movs	r1, #1
 8003c08:	fa01 f303 	lsl.w	r3, r1, r3
 8003c0c:	6939      	ldr	r1, [r7, #16]
 8003c0e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003c12:	4313      	orrs	r3, r2
 8003c14:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8003c22:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	da03      	bge.n	8003c32 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8003c2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c2e:	61bb      	str	r3, [r7, #24]
 8003c30:	e001      	b.n	8003c36 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8003c32:	2300      	movs	r3, #0
 8003c34:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f7ff ff0f 	bl	8003a5a <USB_GetHostSpeed>
 8003c3c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8003c3e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d106      	bne.n	8003c54 <USB_HC_Init+0x1a8>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d003      	beq.n	8003c54 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8003c4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c50:	617b      	str	r3, [r7, #20]
 8003c52:	e001      	b.n	8003c58 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8003c54:	2300      	movs	r3, #0
 8003c56:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8003c58:	787b      	ldrb	r3, [r7, #1]
 8003c5a:	059b      	lsls	r3, r3, #22
 8003c5c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8003c60:	78bb      	ldrb	r3, [r7, #2]
 8003c62:	02db      	lsls	r3, r3, #11
 8003c64:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8003c68:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8003c6a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003c6e:	049b      	lsls	r3, r3, #18
 8003c70:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8003c74:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8003c76:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003c78:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8003c7c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8003c82:	78fb      	ldrb	r3, [r7, #3]
 8003c84:	0159      	lsls	r1, r3, #5
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	440b      	add	r3, r1
 8003c8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c8e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8003c94:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8003c96:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003c9a:	2b03      	cmp	r3, #3
 8003c9c:	d10f      	bne.n	8003cbe <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8003c9e:	78fb      	ldrb	r3, [r7, #3]
 8003ca0:	015a      	lsls	r2, r3, #5
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	78fa      	ldrb	r2, [r7, #3]
 8003cae:	0151      	lsls	r1, r2, #5
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	440a      	add	r2, r1
 8003cb4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003cb8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003cbc:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8003cbe:	7ffb      	ldrb	r3, [r7, #31]
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3720      	adds	r7, #32
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b08c      	sub	sp, #48	; 0x30
 8003ccc:	af02      	add	r7, sp, #8
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	785b      	ldrb	r3, [r3, #1]
 8003cde:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8003ce0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ce4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d02d      	beq.n	8003d4e <USB_HC_StartXfer+0x86>
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	791b      	ldrb	r3, [r3, #4]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d129      	bne.n	8003d4e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8003cfa:	79fb      	ldrb	r3, [r7, #7]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d117      	bne.n	8003d30 <USB_HC_StartXfer+0x68>
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	79db      	ldrb	r3, [r3, #7]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d003      	beq.n	8003d10 <USB_HC_StartXfer+0x48>
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	79db      	ldrb	r3, [r3, #7]
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d10f      	bne.n	8003d30 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	015a      	lsls	r2, r3, #5
 8003d14:	6a3b      	ldr	r3, [r7, #32]
 8003d16:	4413      	add	r3, r2
 8003d18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	69fa      	ldr	r2, [r7, #28]
 8003d20:	0151      	lsls	r1, r2, #5
 8003d22:	6a3a      	ldr	r2, [r7, #32]
 8003d24:	440a      	add	r2, r1
 8003d26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d2e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8003d30:	79fb      	ldrb	r3, [r7, #7]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d10b      	bne.n	8003d4e <USB_HC_StartXfer+0x86>
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	795b      	ldrb	r3, [r3, #5]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d107      	bne.n	8003d4e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	785b      	ldrb	r3, [r3, #1]
 8003d42:	4619      	mov	r1, r3
 8003d44:	68f8      	ldr	r0, [r7, #12]
 8003d46:	f000 fa2f 	bl	80041a8 <USB_DoPing>
      return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	e0f8      	b.n	8003f40 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d018      	beq.n	8003d88 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	68ba      	ldr	r2, [r7, #8]
 8003d5c:	8912      	ldrh	r2, [r2, #8]
 8003d5e:	4413      	add	r3, r2
 8003d60:	3b01      	subs	r3, #1
 8003d62:	68ba      	ldr	r2, [r7, #8]
 8003d64:	8912      	ldrh	r2, [r2, #8]
 8003d66:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d6a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8003d6c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003d6e:	8b7b      	ldrh	r3, [r7, #26]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d90b      	bls.n	8003d8c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8003d74:	8b7b      	ldrh	r3, [r7, #26]
 8003d76:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8003d78:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003d7a:	68ba      	ldr	r2, [r7, #8]
 8003d7c:	8912      	ldrh	r2, [r2, #8]
 8003d7e:	fb02 f203 	mul.w	r2, r2, r3
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	611a      	str	r2, [r3, #16]
 8003d86:	e001      	b.n	8003d8c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	78db      	ldrb	r3, [r3, #3]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d007      	beq.n	8003da4 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8003d94:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003d96:	68ba      	ldr	r2, [r7, #8]
 8003d98:	8912      	ldrh	r2, [r2, #8]
 8003d9a:	fb02 f203 	mul.w	r2, r2, r3
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	611a      	str	r2, [r3, #16]
 8003da2:	e003      	b.n	8003dac <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	695a      	ldr	r2, [r3, #20]
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8003db4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003db6:	04d9      	lsls	r1, r3, #19
 8003db8:	4b63      	ldr	r3, [pc, #396]	; (8003f48 <USB_HC_StartXfer+0x280>)
 8003dba:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8003dbc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	7a9b      	ldrb	r3, [r3, #10]
 8003dc2:	075b      	lsls	r3, r3, #29
 8003dc4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8003dc8:	69f9      	ldr	r1, [r7, #28]
 8003dca:	0148      	lsls	r0, r1, #5
 8003dcc:	6a39      	ldr	r1, [r7, #32]
 8003dce:	4401      	add	r1, r0
 8003dd0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8003dd4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8003dd6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8003dd8:	79fb      	ldrb	r3, [r7, #7]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d009      	beq.n	8003df2 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	68d9      	ldr	r1, [r3, #12]
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	015a      	lsls	r2, r3, #5
 8003de6:	6a3b      	ldr	r3, [r7, #32]
 8003de8:	4413      	add	r3, r2
 8003dea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dee:	460a      	mov	r2, r1
 8003df0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8003df2:	6a3b      	ldr	r3, [r7, #32]
 8003df4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f003 0301 	and.w	r3, r3, #1
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	bf0c      	ite	eq
 8003e02:	2301      	moveq	r3, #1
 8003e04:	2300      	movne	r3, #0
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	015a      	lsls	r2, r3, #5
 8003e0e:	6a3b      	ldr	r3, [r7, #32]
 8003e10:	4413      	add	r3, r2
 8003e12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	69fa      	ldr	r2, [r7, #28]
 8003e1a:	0151      	lsls	r1, r2, #5
 8003e1c:	6a3a      	ldr	r2, [r7, #32]
 8003e1e:	440a      	add	r2, r1
 8003e20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e24:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003e28:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	015a      	lsls	r2, r3, #5
 8003e2e:	6a3b      	ldr	r3, [r7, #32]
 8003e30:	4413      	add	r3, r2
 8003e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	7e7b      	ldrb	r3, [r7, #25]
 8003e3a:	075b      	lsls	r3, r3, #29
 8003e3c:	69f9      	ldr	r1, [r7, #28]
 8003e3e:	0148      	lsls	r0, r1, #5
 8003e40:	6a39      	ldr	r1, [r7, #32]
 8003e42:	4401      	add	r1, r0
 8003e44:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	015a      	lsls	r2, r3, #5
 8003e50:	6a3b      	ldr	r3, [r7, #32]
 8003e52:	4413      	add	r3, r2
 8003e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003e62:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	78db      	ldrb	r3, [r3, #3]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d004      	beq.n	8003e76 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e72:	613b      	str	r3, [r7, #16]
 8003e74:	e003      	b.n	8003e7e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003e7c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e84:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	015a      	lsls	r2, r3, #5
 8003e8a:	6a3b      	ldr	r3, [r7, #32]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e92:	461a      	mov	r2, r3
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8003e98:	79fb      	ldrb	r3, [r7, #7]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d001      	beq.n	8003ea2 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	e04e      	b.n	8003f40 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	78db      	ldrb	r3, [r3, #3]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d149      	bne.n	8003f3e <USB_HC_StartXfer+0x276>
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d045      	beq.n	8003f3e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	79db      	ldrb	r3, [r3, #7]
 8003eb6:	2b03      	cmp	r3, #3
 8003eb8:	d830      	bhi.n	8003f1c <USB_HC_StartXfer+0x254>
 8003eba:	a201      	add	r2, pc, #4	; (adr r2, 8003ec0 <USB_HC_StartXfer+0x1f8>)
 8003ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec0:	08003ed1 	.word	0x08003ed1
 8003ec4:	08003ef5 	.word	0x08003ef5
 8003ec8:	08003ed1 	.word	0x08003ed1
 8003ecc:	08003ef5 	.word	0x08003ef5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	695b      	ldr	r3, [r3, #20]
 8003ed4:	3303      	adds	r3, #3
 8003ed6:	089b      	lsrs	r3, r3, #2
 8003ed8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8003eda:	8afa      	ldrh	r2, [r7, #22]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d91c      	bls.n	8003f20 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	f043 0220 	orr.w	r2, r3, #32
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	619a      	str	r2, [r3, #24]
        }
        break;
 8003ef2:	e015      	b.n	8003f20 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	695b      	ldr	r3, [r3, #20]
 8003ef8:	3303      	adds	r3, #3
 8003efa:	089b      	lsrs	r3, r3, #2
 8003efc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8003efe:	8afa      	ldrh	r2, [r7, #22]
 8003f00:	6a3b      	ldr	r3, [r7, #32]
 8003f02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d90a      	bls.n	8003f24 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	619a      	str	r2, [r3, #24]
        }
        break;
 8003f1a:	e003      	b.n	8003f24 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8003f1c:	bf00      	nop
 8003f1e:	e002      	b.n	8003f26 <USB_HC_StartXfer+0x25e>
        break;
 8003f20:	bf00      	nop
 8003f22:	e000      	b.n	8003f26 <USB_HC_StartXfer+0x25e>
        break;
 8003f24:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	68d9      	ldr	r1, [r3, #12]
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	785a      	ldrb	r2, [r3, #1]
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	2000      	movs	r0, #0
 8003f36:	9000      	str	r0, [sp, #0]
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	f7ff fb53 	bl	80035e4 <USB_WritePacket>
  }

  return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3728      	adds	r7, #40	; 0x28
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	1ff80000 	.word	0x1ff80000

08003f4c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b085      	sub	sp, #20
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f5e:	695b      	ldr	r3, [r3, #20]
 8003f60:	b29b      	uxth	r3, r3
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3714      	adds	r7, #20
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr

08003f6e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8003f6e:	b480      	push	{r7}
 8003f70:	b089      	sub	sp, #36	; 0x24
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
 8003f76:	460b      	mov	r3, r1
 8003f78:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8003f7e:	78fb      	ldrb	r3, [r7, #3]
 8003f80:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8003f82:	2300      	movs	r3, #0
 8003f84:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	015a      	lsls	r2, r3, #5
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	0c9b      	lsrs	r3, r3, #18
 8003f96:	f003 0303 	and.w	r3, r3, #3
 8003f9a:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	015a      	lsls	r2, r3, #5
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	0fdb      	lsrs	r3, r3, #31
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f003 0320 	and.w	r3, r3, #32
 8003fba:	2b20      	cmp	r3, #32
 8003fbc:	d104      	bne.n	8003fc8 <USB_HC_Halt+0x5a>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d101      	bne.n	8003fc8 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	e0e8      	b.n	800419a <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d002      	beq.n	8003fd4 <USB_HC_Halt+0x66>
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d173      	bne.n	80040bc <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	015a      	lsls	r2, r3, #5
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	4413      	add	r3, r2
 8003fdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	0151      	lsls	r1, r2, #5
 8003fe6:	69ba      	ldr	r2, [r7, #24]
 8003fe8:	440a      	add	r2, r1
 8003fea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003fee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ff2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f003 0320 	and.w	r3, r3, #32
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	f040 80cb 	bne.w	8004198 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004006:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d143      	bne.n	8004096 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	015a      	lsls	r2, r3, #5
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	4413      	add	r3, r2
 8004016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	697a      	ldr	r2, [r7, #20]
 800401e:	0151      	lsls	r1, r2, #5
 8004020:	69ba      	ldr	r2, [r7, #24]
 8004022:	440a      	add	r2, r1
 8004024:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004028:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800402c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	015a      	lsls	r2, r3, #5
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	4413      	add	r3, r2
 8004036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	697a      	ldr	r2, [r7, #20]
 800403e:	0151      	lsls	r1, r2, #5
 8004040:	69ba      	ldr	r2, [r7, #24]
 8004042:	440a      	add	r2, r1
 8004044:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004048:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800404c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	015a      	lsls	r2, r3, #5
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	4413      	add	r3, r2
 8004056:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	697a      	ldr	r2, [r7, #20]
 800405e:	0151      	lsls	r1, r2, #5
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	440a      	add	r2, r1
 8004064:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004068:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800406c:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	3301      	adds	r3, #1
 8004072:	61fb      	str	r3, [r7, #28]
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800407a:	d81d      	bhi.n	80040b8 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	015a      	lsls	r2, r3, #5
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	4413      	add	r3, r2
 8004084:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800408e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004092:	d0ec      	beq.n	800406e <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004094:	e080      	b.n	8004198 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	015a      	lsls	r2, r3, #5
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	4413      	add	r3, r2
 800409e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	697a      	ldr	r2, [r7, #20]
 80040a6:	0151      	lsls	r1, r2, #5
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	440a      	add	r2, r1
 80040ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80040b4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80040b6:	e06f      	b.n	8004198 <USB_HC_Halt+0x22a>
            break;
 80040b8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80040ba:	e06d      	b.n	8004198 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	015a      	lsls	r2, r3, #5
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	4413      	add	r3, r2
 80040c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	0151      	lsls	r1, r2, #5
 80040ce:	69ba      	ldr	r2, [r7, #24]
 80040d0:	440a      	add	r2, r1
 80040d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80040da:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d143      	bne.n	8004174 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	015a      	lsls	r2, r3, #5
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	4413      	add	r3, r2
 80040f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	697a      	ldr	r2, [r7, #20]
 80040fc:	0151      	lsls	r1, r2, #5
 80040fe:	69ba      	ldr	r2, [r7, #24]
 8004100:	440a      	add	r2, r1
 8004102:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004106:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800410a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	015a      	lsls	r2, r3, #5
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	4413      	add	r3, r2
 8004114:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	0151      	lsls	r1, r2, #5
 800411e:	69ba      	ldr	r2, [r7, #24]
 8004120:	440a      	add	r2, r1
 8004122:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004126:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800412a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	015a      	lsls	r2, r3, #5
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	4413      	add	r3, r2
 8004134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	0151      	lsls	r1, r2, #5
 800413e:	69ba      	ldr	r2, [r7, #24]
 8004140:	440a      	add	r2, r1
 8004142:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004146:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800414a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	3301      	adds	r3, #1
 8004150:	61fb      	str	r3, [r7, #28]
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004158:	d81d      	bhi.n	8004196 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	015a      	lsls	r2, r3, #5
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	4413      	add	r3, r2
 8004162:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800416c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004170:	d0ec      	beq.n	800414c <USB_HC_Halt+0x1de>
 8004172:	e011      	b.n	8004198 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	015a      	lsls	r2, r3, #5
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	4413      	add	r3, r2
 800417c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	697a      	ldr	r2, [r7, #20]
 8004184:	0151      	lsls	r1, r2, #5
 8004186:	69ba      	ldr	r2, [r7, #24]
 8004188:	440a      	add	r2, r1
 800418a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800418e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004192:	6013      	str	r3, [r2, #0]
 8004194:	e000      	b.n	8004198 <USB_HC_Halt+0x22a>
          break;
 8004196:	bf00      	nop
    }
  }

  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3724      	adds	r7, #36	; 0x24
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
	...

080041a8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b087      	sub	sp, #28
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	460b      	mov	r3, r1
 80041b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80041b8:	78fb      	ldrb	r3, [r7, #3]
 80041ba:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80041bc:	2301      	movs	r3, #1
 80041be:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	04da      	lsls	r2, r3, #19
 80041c4:	4b15      	ldr	r3, [pc, #84]	; (800421c <USB_DoPing+0x74>)
 80041c6:	4013      	ands	r3, r2
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	0151      	lsls	r1, r2, #5
 80041cc:	697a      	ldr	r2, [r7, #20]
 80041ce:	440a      	add	r2, r1
 80041d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80041d8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	015a      	lsls	r2, r3, #5
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	4413      	add	r3, r2
 80041e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80041f0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80041f8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	015a      	lsls	r2, r3, #5
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	4413      	add	r3, r2
 8004202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004206:	461a      	mov	r2, r3
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	371c      	adds	r7, #28
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	1ff80000 	.word	0x1ff80000

08004220 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b086      	sub	sp, #24
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800422c:	2300      	movs	r3, #0
 800422e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f7ff f935 	bl	80034a0 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8004236:	2110      	movs	r1, #16
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f7ff f98f 	bl	800355c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f7ff f9b0 	bl	80035a4 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8004244:	2300      	movs	r3, #0
 8004246:	613b      	str	r3, [r7, #16]
 8004248:	e01f      	b.n	800428a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	015a      	lsls	r2, r3, #5
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	4413      	add	r3, r2
 8004252:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004260:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004268:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004270:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	015a      	lsls	r2, r3, #5
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	4413      	add	r3, r2
 800427a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800427e:	461a      	mov	r2, r3
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	3301      	adds	r3, #1
 8004288:	613b      	str	r3, [r7, #16]
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	2b0f      	cmp	r3, #15
 800428e:	d9dc      	bls.n	800424a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8004290:	2300      	movs	r3, #0
 8004292:	613b      	str	r3, [r7, #16]
 8004294:	e034      	b.n	8004300 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	015a      	lsls	r2, r3, #5
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	4413      	add	r3, r2
 800429e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80042ac:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80042b4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80042bc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	015a      	lsls	r2, r3, #5
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	4413      	add	r3, r2
 80042c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ca:	461a      	mov	r2, r3
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	3301      	adds	r3, #1
 80042d4:	617b      	str	r3, [r7, #20]
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042dc:	d80c      	bhi.n	80042f8 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	015a      	lsls	r2, r3, #5
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	4413      	add	r3, r2
 80042e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042f4:	d0ec      	beq.n	80042d0 <USB_StopHost+0xb0>
 80042f6:	e000      	b.n	80042fa <USB_StopHost+0xda>
        break;
 80042f8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	3301      	adds	r3, #1
 80042fe:	613b      	str	r3, [r7, #16]
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	2b0f      	cmp	r3, #15
 8004304:	d9c7      	bls.n	8004296 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800430c:	461a      	mov	r2, r3
 800430e:	f04f 33ff 	mov.w	r3, #4294967295
 8004312:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f04f 32ff 	mov.w	r2, #4294967295
 800431a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f7ff f8ae 	bl	800347e <USB_EnableGlobalInt>

  return HAL_OK;
 8004322:	2300      	movs	r3, #0
}
 8004324:	4618      	mov	r0, r3
 8004326:	3718      	adds	r7, #24
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8004330:	4904      	ldr	r1, [pc, #16]	; (8004344 <MX_FATFS_Init+0x18>)
 8004332:	4805      	ldr	r0, [pc, #20]	; (8004348 <MX_FATFS_Init+0x1c>)
 8004334:	f005 f8d0 	bl	80094d8 <FATFS_LinkDriver>
 8004338:	4603      	mov	r3, r0
 800433a:	461a      	mov	r2, r3
 800433c:	4b03      	ldr	r3, [pc, #12]	; (800434c <MX_FATFS_Init+0x20>)
 800433e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004340:	bf00      	nop
 8004342:	bd80      	pop	{r7, pc}
 8004344:	200021c8 	.word	0x200021c8
 8004348:	08009e10 	.word	0x08009e10
 800434c:	20004230 	.word	0x20004230

08004350 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004350:	b480      	push	{r7}
 8004352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004354:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004356:	4618      	mov	r0, r3
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	4603      	mov	r3, r0
 8004368:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 800436a:	2300      	movs	r3, #0
}
 800436c:	4618      	mov	r0, r3
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	4603      	mov	r3, r0
 8004380:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8004386:	79fb      	ldrb	r3, [r7, #7]
 8004388:	4619      	mov	r1, r3
 800438a:	4808      	ldr	r0, [pc, #32]	; (80043ac <USBH_status+0x34>)
 800438c:	f000 fe1a 	bl	8004fc4 <USBH_MSC_UnitIsReady>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d002      	beq.n	800439c <USBH_status+0x24>
  {
    res = RES_OK;
 8004396:	2300      	movs	r3, #0
 8004398:	73fb      	strb	r3, [r7, #15]
 800439a:	e001      	b.n	80043a0 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80043a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3710      	adds	r7, #16
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	20004234 	.word	0x20004234

080043b0 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b094      	sub	sp, #80	; 0x50
 80043b4:	af02      	add	r7, sp, #8
 80043b6:	60b9      	str	r1, [r7, #8]
 80043b8:	607a      	str	r2, [r7, #4]
 80043ba:	603b      	str	r3, [r7, #0]
 80043bc:	4603      	mov	r3, r0
 80043be:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 80043c6:	7bf9      	ldrb	r1, [r7, #15]
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	9300      	str	r3, [sp, #0]
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	4813      	ldr	r0, [pc, #76]	; (8004420 <USBH_read+0x70>)
 80043d2:	f000 fe41 	bl	8005058 <USBH_MSC_Read>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d103      	bne.n	80043e4 <USBH_read+0x34>
  {
    res = RES_OK;
 80043dc:	2300      	movs	r3, #0
 80043de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80043e2:	e017      	b.n	8004414 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80043e4:	f107 0210 	add.w	r2, r7, #16
 80043e8:	7bfb      	ldrb	r3, [r7, #15]
 80043ea:	4619      	mov	r1, r3
 80043ec:	480c      	ldr	r0, [pc, #48]	; (8004420 <USBH_read+0x70>)
 80043ee:	f000 fe0f 	bl	8005010 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80043f2:	7f7b      	ldrb	r3, [r7, #29]
 80043f4:	2b3a      	cmp	r3, #58	; 0x3a
 80043f6:	d005      	beq.n	8004404 <USBH_read+0x54>
 80043f8:	2b3a      	cmp	r3, #58	; 0x3a
 80043fa:	dc07      	bgt.n	800440c <USBH_read+0x5c>
 80043fc:	2b04      	cmp	r3, #4
 80043fe:	d001      	beq.n	8004404 <USBH_read+0x54>
 8004400:	2b28      	cmp	r3, #40	; 0x28
 8004402:	d103      	bne.n	800440c <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8004404:	2303      	movs	r3, #3
 8004406:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800440a:	e003      	b.n	8004414 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8004412:	bf00      	nop
    }
  }

  return res;
 8004414:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8004418:	4618      	mov	r0, r3
 800441a:	3748      	adds	r7, #72	; 0x48
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	20004234 	.word	0x20004234

08004424 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b094      	sub	sp, #80	; 0x50
 8004428:	af02      	add	r7, sp, #8
 800442a:	60b9      	str	r1, [r7, #8]
 800442c:	607a      	str	r2, [r7, #4]
 800442e:	603b      	str	r3, [r7, #0]
 8004430:	4603      	mov	r3, r0
 8004432:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800443a:	7bf9      	ldrb	r1, [r7, #15]
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	9300      	str	r3, [sp, #0]
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	4817      	ldr	r0, [pc, #92]	; (80044a4 <USBH_write+0x80>)
 8004446:	f000 fe70 	bl	800512a <USBH_MSC_Write>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d103      	bne.n	8004458 <USBH_write+0x34>
  {
    res = RES_OK;
 8004450:	2300      	movs	r3, #0
 8004452:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8004456:	e01f      	b.n	8004498 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8004458:	f107 0210 	add.w	r2, r7, #16
 800445c:	7bfb      	ldrb	r3, [r7, #15]
 800445e:	4619      	mov	r1, r3
 8004460:	4810      	ldr	r0, [pc, #64]	; (80044a4 <USBH_write+0x80>)
 8004462:	f000 fdd5 	bl	8005010 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8004466:	7f7b      	ldrb	r3, [r7, #29]
 8004468:	2b3a      	cmp	r3, #58	; 0x3a
 800446a:	d00d      	beq.n	8004488 <USBH_write+0x64>
 800446c:	2b3a      	cmp	r3, #58	; 0x3a
 800446e:	dc0f      	bgt.n	8004490 <USBH_write+0x6c>
 8004470:	2b28      	cmp	r3, #40	; 0x28
 8004472:	d009      	beq.n	8004488 <USBH_write+0x64>
 8004474:	2b28      	cmp	r3, #40	; 0x28
 8004476:	dc0b      	bgt.n	8004490 <USBH_write+0x6c>
 8004478:	2b04      	cmp	r3, #4
 800447a:	d005      	beq.n	8004488 <USBH_write+0x64>
 800447c:	2b27      	cmp	r3, #39	; 0x27
 800447e:	d107      	bne.n	8004490 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8004480:	2302      	movs	r3, #2
 8004482:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8004486:	e007      	b.n	8004498 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8004488:	2303      	movs	r3, #3
 800448a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800448e:	e003      	b.n	8004498 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8004496:	bf00      	nop
    }
  }

  return res;
 8004498:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800449c:	4618      	mov	r0, r3
 800449e:	3748      	adds	r7, #72	; 0x48
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	20004234 	.word	0x20004234

080044a8 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b090      	sub	sp, #64	; 0x40
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	4603      	mov	r3, r0
 80044b0:	603a      	str	r2, [r7, #0]
 80044b2:	71fb      	strb	r3, [r7, #7]
 80044b4:	460b      	mov	r3, r1
 80044b6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 80044be:	79bb      	ldrb	r3, [r7, #6]
 80044c0:	2b03      	cmp	r3, #3
 80044c2:	d852      	bhi.n	800456a <USBH_ioctl+0xc2>
 80044c4:	a201      	add	r2, pc, #4	; (adr r2, 80044cc <USBH_ioctl+0x24>)
 80044c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ca:	bf00      	nop
 80044cc:	080044dd 	.word	0x080044dd
 80044d0:	080044e5 	.word	0x080044e5
 80044d4:	0800450f 	.word	0x0800450f
 80044d8:	0800453b 	.word	0x0800453b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 80044dc:	2300      	movs	r3, #0
 80044de:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80044e2:	e045      	b.n	8004570 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80044e4:	f107 0208 	add.w	r2, r7, #8
 80044e8:	79fb      	ldrb	r3, [r7, #7]
 80044ea:	4619      	mov	r1, r3
 80044ec:	4823      	ldr	r0, [pc, #140]	; (800457c <USBH_ioctl+0xd4>)
 80044ee:	f000 fd8f 	bl	8005010 <USBH_MSC_GetLUNInfo>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d106      	bne.n	8004506 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80044fe:	2300      	movs	r3, #0
 8004500:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8004504:	e034      	b.n	8004570 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800450c:	e030      	b.n	8004570 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800450e:	f107 0208 	add.w	r2, r7, #8
 8004512:	79fb      	ldrb	r3, [r7, #7]
 8004514:	4619      	mov	r1, r3
 8004516:	4819      	ldr	r0, [pc, #100]	; (800457c <USBH_ioctl+0xd4>)
 8004518:	f000 fd7a 	bl	8005010 <USBH_MSC_GetLUNInfo>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d107      	bne.n	8004532 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8004522:	8a3b      	ldrh	r3, [r7, #16]
 8004524:	461a      	mov	r2, r3
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800452a:	2300      	movs	r3, #0
 800452c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8004530:	e01e      	b.n	8004570 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8004538:	e01a      	b.n	8004570 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800453a:	f107 0208 	add.w	r2, r7, #8
 800453e:	79fb      	ldrb	r3, [r7, #7]
 8004540:	4619      	mov	r1, r3
 8004542:	480e      	ldr	r0, [pc, #56]	; (800457c <USBH_ioctl+0xd4>)
 8004544:	f000 fd64 	bl	8005010 <USBH_MSC_GetLUNInfo>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d109      	bne.n	8004562 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800454e:	8a3b      	ldrh	r3, [r7, #16]
 8004550:	0a5b      	lsrs	r3, r3, #9
 8004552:	b29b      	uxth	r3, r3
 8004554:	461a      	mov	r2, r3
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800455a:	2300      	movs	r3, #0
 800455c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8004560:	e006      	b.n	8004570 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8004568:	e002      	b.n	8004570 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 800456a:	2304      	movs	r3, #4
 800456c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8004570:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8004574:	4618      	mov	r0, r3
 8004576:	3740      	adds	r7, #64	; 0x40
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	20004234 	.word	0x20004234

08004580 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8004580:	b590      	push	{r4, r7, lr}
 8004582:	b089      	sub	sp, #36	; 0x24
 8004584:	af04      	add	r7, sp, #16
 8004586:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800458e:	7919      	ldrb	r1, [r3, #4]
 8004590:	2350      	movs	r3, #80	; 0x50
 8004592:	2206      	movs	r2, #6
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f001 fc53 	bl	8005e40 <USBH_FindInterface>
 800459a:	4603      	mov	r3, r0
 800459c:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800459e:	7bfb      	ldrb	r3, [r7, #15]
 80045a0:	2bff      	cmp	r3, #255	; 0xff
 80045a2:	d002      	beq.n	80045aa <USBH_MSC_InterfaceInit+0x2a>
 80045a4:	7bfb      	ldrb	r3, [r7, #15]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d901      	bls.n	80045ae <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80045aa:	2302      	movs	r3, #2
 80045ac:	e0ef      	b.n	800478e <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 80045ae:	7bfb      	ldrb	r3, [r7, #15]
 80045b0:	4619      	mov	r1, r3
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f001 fc28 	bl	8005e08 <USBH_SelectInterface>
 80045b8:	4603      	mov	r3, r0
 80045ba:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80045bc:	7bbb      	ldrb	r3, [r7, #14]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d001      	beq.n	80045c6 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 80045c2:	2302      	movs	r3, #2
 80045c4:	e0e3      	b.n	800478e <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80045cc:	f44f 7080 	mov.w	r0, #256	; 0x100
 80045d0:	f005 faf4 	bl	8009bbc <malloc>
 80045d4:	4603      	mov	r3, r0
 80045d6:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80045de:	69db      	ldr	r3, [r3, #28]
 80045e0:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d101      	bne.n	80045ec <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 80045e8:	2302      	movs	r3, #2
 80045ea:	e0d0      	b.n	800478e <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 80045ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80045f0:	2100      	movs	r1, #0
 80045f2:	68b8      	ldr	r0, [r7, #8]
 80045f4:	f005 fb00 	bl	8009bf8 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80045f8:	7bfb      	ldrb	r3, [r7, #15]
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	211a      	movs	r1, #26
 80045fe:	fb01 f303 	mul.w	r3, r1, r3
 8004602:	4413      	add	r3, r2
 8004604:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	b25b      	sxtb	r3, r3
 800460c:	2b00      	cmp	r3, #0
 800460e:	da16      	bge.n	800463e <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8004610:	7bfb      	ldrb	r3, [r7, #15]
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	211a      	movs	r1, #26
 8004616:	fb01 f303 	mul.w	r3, r1, r3
 800461a:	4413      	add	r3, r2
 800461c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004620:	781a      	ldrb	r2, [r3, #0]
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8004626:	7bfb      	ldrb	r3, [r7, #15]
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	211a      	movs	r1, #26
 800462c:	fb01 f303 	mul.w	r3, r1, r3
 8004630:	4413      	add	r3, r2
 8004632:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004636:	881a      	ldrh	r2, [r3, #0]
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	815a      	strh	r2, [r3, #10]
 800463c:	e015      	b.n	800466a <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800463e:	7bfb      	ldrb	r3, [r7, #15]
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	211a      	movs	r1, #26
 8004644:	fb01 f303 	mul.w	r3, r1, r3
 8004648:	4413      	add	r3, r2
 800464a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800464e:	781a      	ldrb	r2, [r3, #0]
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8004654:	7bfb      	ldrb	r3, [r7, #15]
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	211a      	movs	r1, #26
 800465a:	fb01 f303 	mul.w	r3, r1, r3
 800465e:	4413      	add	r3, r2
 8004660:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004664:	881a      	ldrh	r2, [r3, #0]
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800466a:	7bfb      	ldrb	r3, [r7, #15]
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	211a      	movs	r1, #26
 8004670:	fb01 f303 	mul.w	r3, r1, r3
 8004674:	4413      	add	r3, r2
 8004676:	f203 3356 	addw	r3, r3, #854	; 0x356
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	b25b      	sxtb	r3, r3
 800467e:	2b00      	cmp	r3, #0
 8004680:	da16      	bge.n	80046b0 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8004682:	7bfb      	ldrb	r3, [r7, #15]
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	211a      	movs	r1, #26
 8004688:	fb01 f303 	mul.w	r3, r1, r3
 800468c:	4413      	add	r3, r2
 800468e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8004692:	781a      	ldrb	r2, [r3, #0]
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8004698:	7bfb      	ldrb	r3, [r7, #15]
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	211a      	movs	r1, #26
 800469e:	fb01 f303 	mul.w	r3, r1, r3
 80046a2:	4413      	add	r3, r2
 80046a4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80046a8:	881a      	ldrh	r2, [r3, #0]
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	815a      	strh	r2, [r3, #10]
 80046ae:	e015      	b.n	80046dc <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 80046b0:	7bfb      	ldrb	r3, [r7, #15]
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	211a      	movs	r1, #26
 80046b6:	fb01 f303 	mul.w	r3, r1, r3
 80046ba:	4413      	add	r3, r2
 80046bc:	f203 3356 	addw	r3, r3, #854	; 0x356
 80046c0:	781a      	ldrb	r2, [r3, #0]
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80046c6:	7bfb      	ldrb	r3, [r7, #15]
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	211a      	movs	r1, #26
 80046cc:	fb01 f303 	mul.w	r3, r1, r3
 80046d0:	4413      	add	r3, r2
 80046d2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80046d6:	881a      	ldrh	r2, [r3, #0]
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	2200      	movs	r2, #0
 80046e0:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	2200      	movs	r2, #0
 80046e6:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	2200      	movs	r2, #0
 80046ec:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	799b      	ldrb	r3, [r3, #6]
 80046f2:	4619      	mov	r1, r3
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f002 fdc4 	bl	8007282 <USBH_AllocPipe>
 80046fa:	4603      	mov	r3, r0
 80046fc:	461a      	mov	r2, r3
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	79db      	ldrb	r3, [r3, #7]
 8004706:	4619      	mov	r1, r3
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f002 fdba 	bl	8007282 <USBH_AllocPipe>
 800470e:	4603      	mov	r3, r0
 8004710:	461a      	mov	r2, r3
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 fdac 	bl	8005274 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	7959      	ldrb	r1, [r3, #5]
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	7998      	ldrb	r0, [r3, #6]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8004730:	68ba      	ldr	r2, [r7, #8]
 8004732:	8912      	ldrh	r2, [r2, #8]
 8004734:	9202      	str	r2, [sp, #8]
 8004736:	2202      	movs	r2, #2
 8004738:	9201      	str	r2, [sp, #4]
 800473a:	9300      	str	r3, [sp, #0]
 800473c:	4623      	mov	r3, r4
 800473e:	4602      	mov	r2, r0
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f002 fd6f 	bl	8007224 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	7919      	ldrb	r1, [r3, #4]
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	79d8      	ldrb	r0, [r3, #7]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800475a:	68ba      	ldr	r2, [r7, #8]
 800475c:	8952      	ldrh	r2, [r2, #10]
 800475e:	9202      	str	r2, [sp, #8]
 8004760:	2202      	movs	r2, #2
 8004762:	9201      	str	r2, [sp, #4]
 8004764:	9300      	str	r3, [sp, #0]
 8004766:	4623      	mov	r3, r4
 8004768:	4602      	mov	r2, r0
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f002 fd5a 	bl	8007224 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	791b      	ldrb	r3, [r3, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	4619      	mov	r1, r3
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f005 f941 	bl	8009a00 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	795b      	ldrb	r3, [r3, #5]
 8004782:	2200      	movs	r2, #0
 8004784:	4619      	mov	r1, r3
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f005 f93a 	bl	8009a00 <USBH_LL_SetToggle>

  return USBH_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3714      	adds	r7, #20
 8004792:	46bd      	mov	sp, r7
 8004794:	bd90      	pop	{r4, r7, pc}

08004796 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8004796:	b580      	push	{r7, lr}
 8004798:	b084      	sub	sp, #16
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80047a4:	69db      	ldr	r3, [r3, #28]
 80047a6:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	795b      	ldrb	r3, [r3, #5]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00e      	beq.n	80047ce <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	795b      	ldrb	r3, [r3, #5]
 80047b4:	4619      	mov	r1, r3
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f002 fd53 	bl	8007262 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	795b      	ldrb	r3, [r3, #5]
 80047c0:	4619      	mov	r1, r3
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f002 fd7e 	bl	80072c4 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2200      	movs	r2, #0
 80047cc:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	791b      	ldrb	r3, [r3, #4]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00e      	beq.n	80047f4 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	791b      	ldrb	r3, [r3, #4]
 80047da:	4619      	mov	r1, r3
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f002 fd40 	bl	8007262 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	791b      	ldrb	r3, [r3, #4]
 80047e6:	4619      	mov	r1, r3
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f002 fd6b 	bl	80072c4 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80047fa:	69db      	ldr	r3, [r3, #28]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00b      	beq.n	8004818 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004806:	69db      	ldr	r3, [r3, #28]
 8004808:	4618      	mov	r0, r3
 800480a:	f005 f9df 	bl	8009bcc <free>
    phost->pActiveClass->pData = 0U;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004814:	2200      	movs	r2, #0
 8004816:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3710      	adds	r7, #16
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}

08004822 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8004822:	b580      	push	{r7, lr}
 8004824:	b084      	sub	sp, #16
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004830:	69db      	ldr	r3, [r3, #28]
 8004832:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8004834:	2301      	movs	r3, #1
 8004836:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	7b9b      	ldrb	r3, [r3, #14]
 800483c:	2b03      	cmp	r3, #3
 800483e:	d041      	beq.n	80048c4 <USBH_MSC_ClassRequest+0xa2>
 8004840:	2b03      	cmp	r3, #3
 8004842:	dc4b      	bgt.n	80048dc <USBH_MSC_ClassRequest+0xba>
 8004844:	2b00      	cmp	r3, #0
 8004846:	d001      	beq.n	800484c <USBH_MSC_ClassRequest+0x2a>
 8004848:	2b02      	cmp	r3, #2
 800484a:	d147      	bne.n	80048dc <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	4619      	mov	r1, r3
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 fcf0 	bl	8005236 <USBH_MSC_BOT_REQ_GetMaxLUN>
 8004856:	4603      	mov	r3, r0
 8004858:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 800485a:	7bfb      	ldrb	r3, [r7, #15]
 800485c:	2b03      	cmp	r3, #3
 800485e:	d104      	bne.n	800486a <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	2200      	movs	r2, #0
 8004864:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8004866:	2300      	movs	r3, #0
 8004868:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 800486a:	7bfb      	ldrb	r3, [r7, #15]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d137      	bne.n	80048e0 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	2b02      	cmp	r3, #2
 8004876:	d804      	bhi.n	8004882 <USBH_MSC_ClassRequest+0x60>
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	3301      	adds	r3, #1
 800487e:	b2da      	uxtb	r2, r3
 8004880:	e000      	b.n	8004884 <USBH_MSC_ClassRequest+0x62>
 8004882:	2202      	movs	r2, #2
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8004888:	2300      	movs	r3, #0
 800488a:	73bb      	strb	r3, [r7, #14]
 800488c:	e014      	b.n	80048b8 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800488e:	7bbb      	ldrb	r3, [r7, #14]
 8004890:	68ba      	ldr	r2, [r7, #8]
 8004892:	2134      	movs	r1, #52	; 0x34
 8004894:	fb01 f303 	mul.w	r3, r1, r3
 8004898:	4413      	add	r3, r2
 800489a:	3392      	adds	r3, #146	; 0x92
 800489c:	2202      	movs	r2, #2
 800489e:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 80048a0:	7bbb      	ldrb	r3, [r7, #14]
 80048a2:	68ba      	ldr	r2, [r7, #8]
 80048a4:	2134      	movs	r1, #52	; 0x34
 80048a6:	fb01 f303 	mul.w	r3, r1, r3
 80048aa:	4413      	add	r3, r2
 80048ac:	33c1      	adds	r3, #193	; 0xc1
 80048ae:	2200      	movs	r2, #0
 80048b0:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 80048b2:	7bbb      	ldrb	r3, [r7, #14]
 80048b4:	3301      	adds	r3, #1
 80048b6:	73bb      	strb	r3, [r7, #14]
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	7bba      	ldrb	r2, [r7, #14]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d3e5      	bcc.n	800488e <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 80048c2:	e00d      	b.n	80048e0 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 80048c4:	2100      	movs	r1, #0
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f002 f87b 	bl	80069c2 <USBH_ClrFeature>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d108      	bne.n	80048e4 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	7bda      	ldrb	r2, [r3, #15]
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	739a      	strb	r2, [r3, #14]
      }
      break;
 80048da:	e003      	b.n	80048e4 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 80048dc:	bf00      	nop
 80048de:	e002      	b.n	80048e6 <USBH_MSC_ClassRequest+0xc4>
      break;
 80048e0:	bf00      	nop
 80048e2:	e000      	b.n	80048e6 <USBH_MSC_ClassRequest+0xc4>
      break;
 80048e4:	bf00      	nop
  }

  return status;
 80048e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3710      	adds	r7, #16
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b086      	sub	sp, #24
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80048fe:	69db      	ldr	r3, [r3, #28]
 8004900:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8004902:	2301      	movs	r3, #1
 8004904:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8004906:	2301      	movs	r3, #1
 8004908:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800490a:	2301      	movs	r3, #1
 800490c:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	7b1b      	ldrb	r3, [r3, #12]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d003      	beq.n	800491e <USBH_MSC_Process+0x2e>
 8004916:	2b01      	cmp	r3, #1
 8004918:	f000 8271 	beq.w	8004dfe <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 800491c:	e272      	b.n	8004e04 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	b29b      	uxth	r3, r3
 800492a:	429a      	cmp	r2, r3
 800492c:	f080 824f 	bcs.w	8004dce <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004936:	4619      	mov	r1, r3
 8004938:	693a      	ldr	r2, [r7, #16]
 800493a:	2334      	movs	r3, #52	; 0x34
 800493c:	fb03 f301 	mul.w	r3, r3, r1
 8004940:	4413      	add	r3, r2
 8004942:	3391      	adds	r3, #145	; 0x91
 8004944:	2201      	movs	r2, #1
 8004946:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800494e:	4619      	mov	r1, r3
 8004950:	693a      	ldr	r2, [r7, #16]
 8004952:	2334      	movs	r3, #52	; 0x34
 8004954:	fb03 f301 	mul.w	r3, r3, r1
 8004958:	4413      	add	r3, r2
 800495a:	3390      	adds	r3, #144	; 0x90
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	2b08      	cmp	r3, #8
 8004960:	f200 8243 	bhi.w	8004dea <USBH_MSC_Process+0x4fa>
 8004964:	a201      	add	r2, pc, #4	; (adr r2, 800496c <USBH_MSC_Process+0x7c>)
 8004966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800496a:	bf00      	nop
 800496c:	08004991 	.word	0x08004991
 8004970:	08004deb 	.word	0x08004deb
 8004974:	08004a59 	.word	0x08004a59
 8004978:	08004bdd 	.word	0x08004bdd
 800497c:	080049b7 	.word	0x080049b7
 8004980:	08004ca9 	.word	0x08004ca9
 8004984:	08004deb 	.word	0x08004deb
 8004988:	08004deb 	.word	0x08004deb
 800498c:	08004dbd 	.word	0x08004dbd
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004996:	4619      	mov	r1, r3
 8004998:	693a      	ldr	r2, [r7, #16]
 800499a:	2334      	movs	r3, #52	; 0x34
 800499c:	fb03 f301 	mul.w	r3, r3, r1
 80049a0:	4413      	add	r3, r2
 80049a2:	3390      	adds	r3, #144	; 0x90
 80049a4:	2204      	movs	r2, #4
 80049a6:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 80049b4:	e222      	b.n	8004dfc <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80049bc:	b2d9      	uxtb	r1, r3
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80049c4:	461a      	mov	r2, r3
 80049c6:	2334      	movs	r3, #52	; 0x34
 80049c8:	fb03 f302 	mul.w	r3, r3, r2
 80049cc:	3398      	adds	r3, #152	; 0x98
 80049ce:	693a      	ldr	r2, [r7, #16]
 80049d0:	4413      	add	r3, r2
 80049d2:	3307      	adds	r3, #7
 80049d4:	461a      	mov	r2, r3
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 ff6a 	bl	80058b0 <USBH_MSC_SCSI_Inquiry>
 80049dc:	4603      	mov	r3, r0
 80049de:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80049e0:	7bfb      	ldrb	r3, [r7, #15]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10b      	bne.n	80049fe <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80049ec:	4619      	mov	r1, r3
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	2334      	movs	r3, #52	; 0x34
 80049f2:	fb03 f301 	mul.w	r3, r3, r1
 80049f6:	4413      	add	r3, r2
 80049f8:	3390      	adds	r3, #144	; 0x90
 80049fa:	2202      	movs	r2, #2
 80049fc:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 80049fe:	7bfb      	ldrb	r3, [r7, #15]
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d10c      	bne.n	8004a1e <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	693a      	ldr	r2, [r7, #16]
 8004a0e:	2334      	movs	r3, #52	; 0x34
 8004a10:	fb03 f301 	mul.w	r3, r3, r1
 8004a14:	4413      	add	r3, r2
 8004a16:	3390      	adds	r3, #144	; 0x90
 8004a18:	2205      	movs	r2, #5
 8004a1a:	701a      	strb	r2, [r3, #0]
            break;
 8004a1c:	e1e7      	b.n	8004dee <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8004a1e:	7bfb      	ldrb	r3, [r7, #15]
 8004a20:	2b04      	cmp	r3, #4
 8004a22:	f040 81e4 	bne.w	8004dee <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	693a      	ldr	r2, [r7, #16]
 8004a30:	2334      	movs	r3, #52	; 0x34
 8004a32:	fb03 f301 	mul.w	r3, r3, r1
 8004a36:	4413      	add	r3, r2
 8004a38:	3390      	adds	r3, #144	; 0x90
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004a44:	4619      	mov	r1, r3
 8004a46:	693a      	ldr	r2, [r7, #16]
 8004a48:	2334      	movs	r3, #52	; 0x34
 8004a4a:	fb03 f301 	mul.w	r3, r3, r1
 8004a4e:	4413      	add	r3, r2
 8004a50:	3391      	adds	r3, #145	; 0x91
 8004a52:	2202      	movs	r2, #2
 8004a54:	701a      	strb	r2, [r3, #0]
            break;
 8004a56:	e1ca      	b.n	8004dee <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	4619      	mov	r1, r3
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 fe66 	bl	8005734 <USBH_MSC_SCSI_TestUnitReady>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8004a6c:	7bbb      	ldrb	r3, [r7, #14]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d149      	bne.n	8004b06 <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004a78:	4619      	mov	r1, r3
 8004a7a:	693a      	ldr	r2, [r7, #16]
 8004a7c:	2334      	movs	r3, #52	; 0x34
 8004a7e:	fb03 f301 	mul.w	r3, r3, r1
 8004a82:	4413      	add	r3, r2
 8004a84:	3392      	adds	r3, #146	; 0x92
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00c      	beq.n	8004aa6 <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004a92:	4619      	mov	r1, r3
 8004a94:	693a      	ldr	r2, [r7, #16]
 8004a96:	2334      	movs	r3, #52	; 0x34
 8004a98:	fb03 f301 	mul.w	r3, r3, r1
 8004a9c:	4413      	add	r3, r2
 8004a9e:	33c1      	adds	r3, #193	; 0xc1
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	701a      	strb	r2, [r3, #0]
 8004aa4:	e00b      	b.n	8004abe <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004aac:	4619      	mov	r1, r3
 8004aae:	693a      	ldr	r2, [r7, #16]
 8004ab0:	2334      	movs	r3, #52	; 0x34
 8004ab2:	fb03 f301 	mul.w	r3, r3, r1
 8004ab6:	4413      	add	r3, r2
 8004ab8:	33c1      	adds	r3, #193	; 0xc1
 8004aba:	2200      	movs	r2, #0
 8004abc:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	693a      	ldr	r2, [r7, #16]
 8004ac8:	2334      	movs	r3, #52	; 0x34
 8004aca:	fb03 f301 	mul.w	r3, r3, r1
 8004ace:	4413      	add	r3, r2
 8004ad0:	3390      	adds	r3, #144	; 0x90
 8004ad2:	2203      	movs	r2, #3
 8004ad4:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004adc:	4619      	mov	r1, r3
 8004ade:	693a      	ldr	r2, [r7, #16]
 8004ae0:	2334      	movs	r3, #52	; 0x34
 8004ae2:	fb03 f301 	mul.w	r3, r3, r1
 8004ae6:	4413      	add	r3, r2
 8004ae8:	3391      	adds	r3, #145	; 0x91
 8004aea:	2200      	movs	r2, #0
 8004aec:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004af4:	4619      	mov	r1, r3
 8004af6:	693a      	ldr	r2, [r7, #16]
 8004af8:	2334      	movs	r3, #52	; 0x34
 8004afa:	fb03 f301 	mul.w	r3, r3, r1
 8004afe:	4413      	add	r3, r2
 8004b00:	3392      	adds	r3, #146	; 0x92
 8004b02:	2200      	movs	r2, #0
 8004b04:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8004b06:	7bbb      	ldrb	r3, [r7, #14]
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d14a      	bne.n	8004ba2 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004b12:	4619      	mov	r1, r3
 8004b14:	693a      	ldr	r2, [r7, #16]
 8004b16:	2334      	movs	r3, #52	; 0x34
 8004b18:	fb03 f301 	mul.w	r3, r3, r1
 8004b1c:	4413      	add	r3, r2
 8004b1e:	3392      	adds	r3, #146	; 0x92
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d00c      	beq.n	8004b40 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	693a      	ldr	r2, [r7, #16]
 8004b30:	2334      	movs	r3, #52	; 0x34
 8004b32:	fb03 f301 	mul.w	r3, r3, r1
 8004b36:	4413      	add	r3, r2
 8004b38:	33c1      	adds	r3, #193	; 0xc1
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	701a      	strb	r2, [r3, #0]
 8004b3e:	e00b      	b.n	8004b58 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004b46:	4619      	mov	r1, r3
 8004b48:	693a      	ldr	r2, [r7, #16]
 8004b4a:	2334      	movs	r3, #52	; 0x34
 8004b4c:	fb03 f301 	mul.w	r3, r3, r1
 8004b50:	4413      	add	r3, r2
 8004b52:	33c1      	adds	r3, #193	; 0xc1
 8004b54:	2200      	movs	r2, #0
 8004b56:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004b5e:	4619      	mov	r1, r3
 8004b60:	693a      	ldr	r2, [r7, #16]
 8004b62:	2334      	movs	r3, #52	; 0x34
 8004b64:	fb03 f301 	mul.w	r3, r3, r1
 8004b68:	4413      	add	r3, r2
 8004b6a:	3390      	adds	r3, #144	; 0x90
 8004b6c:	2205      	movs	r2, #5
 8004b6e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004b76:	4619      	mov	r1, r3
 8004b78:	693a      	ldr	r2, [r7, #16]
 8004b7a:	2334      	movs	r3, #52	; 0x34
 8004b7c:	fb03 f301 	mul.w	r3, r3, r1
 8004b80:	4413      	add	r3, r2
 8004b82:	3391      	adds	r3, #145	; 0x91
 8004b84:	2201      	movs	r2, #1
 8004b86:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004b8e:	4619      	mov	r1, r3
 8004b90:	693a      	ldr	r2, [r7, #16]
 8004b92:	2334      	movs	r3, #52	; 0x34
 8004b94:	fb03 f301 	mul.w	r3, r3, r1
 8004b98:	4413      	add	r3, r2
 8004b9a:	3392      	adds	r3, #146	; 0x92
 8004b9c:	2202      	movs	r2, #2
 8004b9e:	701a      	strb	r2, [r3, #0]
            break;
 8004ba0:	e127      	b.n	8004df2 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8004ba2:	7bbb      	ldrb	r3, [r7, #14]
 8004ba4:	2b04      	cmp	r3, #4
 8004ba6:	f040 8124 	bne.w	8004df2 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	693a      	ldr	r2, [r7, #16]
 8004bb4:	2334      	movs	r3, #52	; 0x34
 8004bb6:	fb03 f301 	mul.w	r3, r3, r1
 8004bba:	4413      	add	r3, r2
 8004bbc:	3390      	adds	r3, #144	; 0x90
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004bc8:	4619      	mov	r1, r3
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	2334      	movs	r3, #52	; 0x34
 8004bce:	fb03 f301 	mul.w	r3, r3, r1
 8004bd2:	4413      	add	r3, r2
 8004bd4:	3391      	adds	r3, #145	; 0x91
 8004bd6:	2202      	movs	r2, #2
 8004bd8:	701a      	strb	r2, [r3, #0]
            break;
 8004bda:	e10a      	b.n	8004df2 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004be2:	b2d9      	uxtb	r1, r3
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004bea:	461a      	mov	r2, r3
 8004bec:	2334      	movs	r3, #52	; 0x34
 8004bee:	fb03 f302 	mul.w	r3, r3, r2
 8004bf2:	3390      	adds	r3, #144	; 0x90
 8004bf4:	693a      	ldr	r2, [r7, #16]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	3304      	adds	r3, #4
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f000 fddc 	bl	80057ba <USBH_MSC_SCSI_ReadCapacity>
 8004c02:	4603      	mov	r3, r0
 8004c04:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8004c06:	7bfb      	ldrb	r3, [r7, #15]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d120      	bne.n	8004c4e <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004c12:	4619      	mov	r1, r3
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	2334      	movs	r3, #52	; 0x34
 8004c18:	fb03 f301 	mul.w	r3, r3, r1
 8004c1c:	4413      	add	r3, r2
 8004c1e:	3390      	adds	r3, #144	; 0x90
 8004c20:	2201      	movs	r2, #1
 8004c22:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	2334      	movs	r3, #52	; 0x34
 8004c30:	fb03 f301 	mul.w	r3, r3, r1
 8004c34:	4413      	add	r3, r2
 8004c36:	3391      	adds	r3, #145	; 0x91
 8004c38:	2200      	movs	r2, #0
 8004c3a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004c42:	3301      	adds	r3, #1
 8004c44:	b29a      	uxth	r2, r3
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8004c4c:	e0d3      	b.n	8004df6 <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 8004c4e:	7bfb      	ldrb	r3, [r7, #15]
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d10c      	bne.n	8004c6e <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	693a      	ldr	r2, [r7, #16]
 8004c5e:	2334      	movs	r3, #52	; 0x34
 8004c60:	fb03 f301 	mul.w	r3, r3, r1
 8004c64:	4413      	add	r3, r2
 8004c66:	3390      	adds	r3, #144	; 0x90
 8004c68:	2205      	movs	r2, #5
 8004c6a:	701a      	strb	r2, [r3, #0]
            break;
 8004c6c:	e0c3      	b.n	8004df6 <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8004c6e:	7bfb      	ldrb	r3, [r7, #15]
 8004c70:	2b04      	cmp	r3, #4
 8004c72:	f040 80c0 	bne.w	8004df6 <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	693a      	ldr	r2, [r7, #16]
 8004c80:	2334      	movs	r3, #52	; 0x34
 8004c82:	fb03 f301 	mul.w	r3, r3, r1
 8004c86:	4413      	add	r3, r2
 8004c88:	3390      	adds	r3, #144	; 0x90
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004c94:	4619      	mov	r1, r3
 8004c96:	693a      	ldr	r2, [r7, #16]
 8004c98:	2334      	movs	r3, #52	; 0x34
 8004c9a:	fb03 f301 	mul.w	r3, r3, r1
 8004c9e:	4413      	add	r3, r2
 8004ca0:	3391      	adds	r3, #145	; 0x91
 8004ca2:	2202      	movs	r2, #2
 8004ca4:	701a      	strb	r2, [r3, #0]
            break;
 8004ca6:	e0a6      	b.n	8004df6 <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004cae:	b2d9      	uxtb	r1, r3
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	2334      	movs	r3, #52	; 0x34
 8004cba:	fb03 f302 	mul.w	r3, r3, r2
 8004cbe:	3398      	adds	r3, #152	; 0x98
 8004cc0:	693a      	ldr	r2, [r7, #16]
 8004cc2:	4413      	add	r3, r2
 8004cc4:	3304      	adds	r3, #4
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 fe96 	bl	80059fa <USBH_MSC_SCSI_RequestSense>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8004cd2:	7bfb      	ldrb	r3, [r7, #15]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d145      	bne.n	8004d64 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004cde:	4619      	mov	r1, r3
 8004ce0:	693a      	ldr	r2, [r7, #16]
 8004ce2:	2334      	movs	r3, #52	; 0x34
 8004ce4:	fb03 f301 	mul.w	r3, r3, r1
 8004ce8:	4413      	add	r3, r2
 8004cea:	339c      	adds	r3, #156	; 0x9c
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	2b06      	cmp	r3, #6
 8004cf0:	d00c      	beq.n	8004d0c <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	2334      	movs	r3, #52	; 0x34
 8004cfe:	fb03 f301 	mul.w	r3, r3, r1
 8004d02:	4413      	add	r3, r2
 8004d04:	339c      	adds	r3, #156	; 0x9c
 8004d06:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d117      	bne.n	8004d3c <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	f242 720f 	movw	r2, #9999	; 0x270f
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d80c      	bhi.n	8004d3c <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004d28:	4619      	mov	r1, r3
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	2334      	movs	r3, #52	; 0x34
 8004d2e:	fb03 f301 	mul.w	r3, r3, r1
 8004d32:	4413      	add	r3, r2
 8004d34:	3390      	adds	r3, #144	; 0x90
 8004d36:	2202      	movs	r2, #2
 8004d38:	701a      	strb	r2, [r3, #0]
                  break;
 8004d3a:	e05f      	b.n	8004dfc <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004d42:	4619      	mov	r1, r3
 8004d44:	693a      	ldr	r2, [r7, #16]
 8004d46:	2334      	movs	r3, #52	; 0x34
 8004d48:	fb03 f301 	mul.w	r3, r3, r1
 8004d4c:	4413      	add	r3, r2
 8004d4e:	3390      	adds	r3, #144	; 0x90
 8004d50:	2201      	movs	r2, #1
 8004d52:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8004d64:	7bfb      	ldrb	r3, [r7, #15]
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d10c      	bne.n	8004d84 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004d70:	4619      	mov	r1, r3
 8004d72:	693a      	ldr	r2, [r7, #16]
 8004d74:	2334      	movs	r3, #52	; 0x34
 8004d76:	fb03 f301 	mul.w	r3, r3, r1
 8004d7a:	4413      	add	r3, r2
 8004d7c:	3390      	adds	r3, #144	; 0x90
 8004d7e:	2208      	movs	r2, #8
 8004d80:	701a      	strb	r2, [r3, #0]
            break;
 8004d82:	e03a      	b.n	8004dfa <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8004d84:	7bfb      	ldrb	r3, [r7, #15]
 8004d86:	2b04      	cmp	r3, #4
 8004d88:	d137      	bne.n	8004dfa <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004d90:	4619      	mov	r1, r3
 8004d92:	693a      	ldr	r2, [r7, #16]
 8004d94:	2334      	movs	r3, #52	; 0x34
 8004d96:	fb03 f301 	mul.w	r3, r3, r1
 8004d9a:	4413      	add	r3, r2
 8004d9c:	3390      	adds	r3, #144	; 0x90
 8004d9e:	2201      	movs	r2, #1
 8004da0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004da8:	4619      	mov	r1, r3
 8004daa:	693a      	ldr	r2, [r7, #16]
 8004dac:	2334      	movs	r3, #52	; 0x34
 8004dae:	fb03 f301 	mul.w	r3, r3, r1
 8004db2:	4413      	add	r3, r2
 8004db4:	3391      	adds	r3, #145	; 0x91
 8004db6:	2202      	movs	r2, #2
 8004db8:	701a      	strb	r2, [r3, #0]
            break;
 8004dba:	e01e      	b.n	8004dfa <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	b29a      	uxth	r2, r3
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8004dcc:	e016      	b.n	8004dfc <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8004de2:	2102      	movs	r1, #2
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	4798      	blx	r3
      break;
 8004de8:	e00c      	b.n	8004e04 <USBH_MSC_Process+0x514>
            break;
 8004dea:	bf00      	nop
 8004dec:	e00a      	b.n	8004e04 <USBH_MSC_Process+0x514>
            break;
 8004dee:	bf00      	nop
 8004df0:	e008      	b.n	8004e04 <USBH_MSC_Process+0x514>
            break;
 8004df2:	bf00      	nop
 8004df4:	e006      	b.n	8004e04 <USBH_MSC_Process+0x514>
            break;
 8004df6:	bf00      	nop
 8004df8:	e004      	b.n	8004e04 <USBH_MSC_Process+0x514>
            break;
 8004dfa:	bf00      	nop
      break;
 8004dfc:	e002      	b.n	8004e04 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	75fb      	strb	r3, [r7, #23]
      break;
 8004e02:	bf00      	nop
  }
  return error;
 8004e04:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3718      	adds	r7, #24
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop

08004e10 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	370c      	adds	r7, #12
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr

08004e26 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8004e26:	b580      	push	{r7, lr}
 8004e28:	b088      	sub	sp, #32
 8004e2a:	af02      	add	r7, sp, #8
 8004e2c:	6078      	str	r0, [r7, #4]
 8004e2e:	460b      	mov	r3, r1
 8004e30:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004e38:	69db      	ldr	r3, [r3, #28]
 8004e3a:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8004e40:	2301      	movs	r3, #1
 8004e42:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8004e44:	78fb      	ldrb	r3, [r7, #3]
 8004e46:	693a      	ldr	r2, [r7, #16]
 8004e48:	2134      	movs	r1, #52	; 0x34
 8004e4a:	fb01 f303 	mul.w	r3, r1, r3
 8004e4e:	4413      	add	r3, r2
 8004e50:	3390      	adds	r3, #144	; 0x90
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	2b07      	cmp	r3, #7
 8004e56:	d03c      	beq.n	8004ed2 <USBH_MSC_RdWrProcess+0xac>
 8004e58:	2b07      	cmp	r3, #7
 8004e5a:	f300 80a7 	bgt.w	8004fac <USBH_MSC_RdWrProcess+0x186>
 8004e5e:	2b05      	cmp	r3, #5
 8004e60:	d06c      	beq.n	8004f3c <USBH_MSC_RdWrProcess+0x116>
 8004e62:	2b06      	cmp	r3, #6
 8004e64:	f040 80a2 	bne.w	8004fac <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8004e68:	78f9      	ldrb	r1, [r7, #3]
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	9300      	str	r3, [sp, #0]
 8004e6e:	2300      	movs	r3, #0
 8004e70:	2200      	movs	r2, #0
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 fea5 	bl	8005bc2 <USBH_MSC_SCSI_Read>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8004e7c:	7bfb      	ldrb	r3, [r7, #15]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d10b      	bne.n	8004e9a <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8004e82:	78fb      	ldrb	r3, [r7, #3]
 8004e84:	693a      	ldr	r2, [r7, #16]
 8004e86:	2134      	movs	r1, #52	; 0x34
 8004e88:	fb01 f303 	mul.w	r3, r1, r3
 8004e8c:	4413      	add	r3, r2
 8004e8e:	3390      	adds	r3, #144	; 0x90
 8004e90:	2201      	movs	r2, #1
 8004e92:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8004e94:	2300      	movs	r3, #0
 8004e96:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8004e98:	e08a      	b.n	8004fb0 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 8004e9a:	7bfb      	ldrb	r3, [r7, #15]
 8004e9c:	2b02      	cmp	r3, #2
 8004e9e:	d109      	bne.n	8004eb4 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8004ea0:	78fb      	ldrb	r3, [r7, #3]
 8004ea2:	693a      	ldr	r2, [r7, #16]
 8004ea4:	2134      	movs	r1, #52	; 0x34
 8004ea6:	fb01 f303 	mul.w	r3, r1, r3
 8004eaa:	4413      	add	r3, r2
 8004eac:	3390      	adds	r3, #144	; 0x90
 8004eae:	2205      	movs	r2, #5
 8004eb0:	701a      	strb	r2, [r3, #0]
      break;
 8004eb2:	e07d      	b.n	8004fb0 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8004eb4:	7bfb      	ldrb	r3, [r7, #15]
 8004eb6:	2b04      	cmp	r3, #4
 8004eb8:	d17a      	bne.n	8004fb0 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8004eba:	78fb      	ldrb	r3, [r7, #3]
 8004ebc:	693a      	ldr	r2, [r7, #16]
 8004ebe:	2134      	movs	r1, #52	; 0x34
 8004ec0:	fb01 f303 	mul.w	r3, r1, r3
 8004ec4:	4413      	add	r3, r2
 8004ec6:	3390      	adds	r3, #144	; 0x90
 8004ec8:	2208      	movs	r2, #8
 8004eca:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8004ecc:	2302      	movs	r3, #2
 8004ece:	75fb      	strb	r3, [r7, #23]
      break;
 8004ed0:	e06e      	b.n	8004fb0 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8004ed2:	78f9      	ldrb	r1, [r7, #3]
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	9300      	str	r3, [sp, #0]
 8004ed8:	2300      	movs	r3, #0
 8004eda:	2200      	movs	r2, #0
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 fe05 	bl	8005aec <USBH_MSC_SCSI_Write>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8004ee6:	7bfb      	ldrb	r3, [r7, #15]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d10b      	bne.n	8004f04 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8004eec:	78fb      	ldrb	r3, [r7, #3]
 8004eee:	693a      	ldr	r2, [r7, #16]
 8004ef0:	2134      	movs	r1, #52	; 0x34
 8004ef2:	fb01 f303 	mul.w	r3, r1, r3
 8004ef6:	4413      	add	r3, r2
 8004ef8:	3390      	adds	r3, #144	; 0x90
 8004efa:	2201      	movs	r2, #1
 8004efc:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8004efe:	2300      	movs	r3, #0
 8004f00:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8004f02:	e057      	b.n	8004fb4 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 8004f04:	7bfb      	ldrb	r3, [r7, #15]
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d109      	bne.n	8004f1e <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8004f0a:	78fb      	ldrb	r3, [r7, #3]
 8004f0c:	693a      	ldr	r2, [r7, #16]
 8004f0e:	2134      	movs	r1, #52	; 0x34
 8004f10:	fb01 f303 	mul.w	r3, r1, r3
 8004f14:	4413      	add	r3, r2
 8004f16:	3390      	adds	r3, #144	; 0x90
 8004f18:	2205      	movs	r2, #5
 8004f1a:	701a      	strb	r2, [r3, #0]
      break;
 8004f1c:	e04a      	b.n	8004fb4 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8004f1e:	7bfb      	ldrb	r3, [r7, #15]
 8004f20:	2b04      	cmp	r3, #4
 8004f22:	d147      	bne.n	8004fb4 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8004f24:	78fb      	ldrb	r3, [r7, #3]
 8004f26:	693a      	ldr	r2, [r7, #16]
 8004f28:	2134      	movs	r1, #52	; 0x34
 8004f2a:	fb01 f303 	mul.w	r3, r1, r3
 8004f2e:	4413      	add	r3, r2
 8004f30:	3390      	adds	r3, #144	; 0x90
 8004f32:	2208      	movs	r2, #8
 8004f34:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8004f36:	2302      	movs	r3, #2
 8004f38:	75fb      	strb	r3, [r7, #23]
      break;
 8004f3a:	e03b      	b.n	8004fb4 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8004f3c:	78fb      	ldrb	r3, [r7, #3]
 8004f3e:	2234      	movs	r2, #52	; 0x34
 8004f40:	fb02 f303 	mul.w	r3, r2, r3
 8004f44:	3398      	adds	r3, #152	; 0x98
 8004f46:	693a      	ldr	r2, [r7, #16]
 8004f48:	4413      	add	r3, r2
 8004f4a:	1d1a      	adds	r2, r3, #4
 8004f4c:	78fb      	ldrb	r3, [r7, #3]
 8004f4e:	4619      	mov	r1, r3
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f000 fd52 	bl	80059fa <USBH_MSC_SCSI_RequestSense>
 8004f56:	4603      	mov	r3, r0
 8004f58:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8004f5a:	7bfb      	ldrb	r3, [r7, #15]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d113      	bne.n	8004f88 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8004f60:	78fb      	ldrb	r3, [r7, #3]
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	2134      	movs	r1, #52	; 0x34
 8004f66:	fb01 f303 	mul.w	r3, r1, r3
 8004f6a:	4413      	add	r3, r2
 8004f6c:	3390      	adds	r3, #144	; 0x90
 8004f6e:	2201      	movs	r2, #1
 8004f70:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8004f72:	78fb      	ldrb	r3, [r7, #3]
 8004f74:	693a      	ldr	r2, [r7, #16]
 8004f76:	2134      	movs	r1, #52	; 0x34
 8004f78:	fb01 f303 	mul.w	r3, r1, r3
 8004f7c:	4413      	add	r3, r2
 8004f7e:	3391      	adds	r3, #145	; 0x91
 8004f80:	2202      	movs	r2, #2
 8004f82:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 8004f84:	2302      	movs	r3, #2
 8004f86:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 8004f88:	7bfb      	ldrb	r3, [r7, #15]
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d014      	beq.n	8004fb8 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8004f8e:	7bfb      	ldrb	r3, [r7, #15]
 8004f90:	2b04      	cmp	r3, #4
 8004f92:	d111      	bne.n	8004fb8 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8004f94:	78fb      	ldrb	r3, [r7, #3]
 8004f96:	693a      	ldr	r2, [r7, #16]
 8004f98:	2134      	movs	r1, #52	; 0x34
 8004f9a:	fb01 f303 	mul.w	r3, r1, r3
 8004f9e:	4413      	add	r3, r2
 8004fa0:	3390      	adds	r3, #144	; 0x90
 8004fa2:	2208      	movs	r2, #8
 8004fa4:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8004fa6:	2302      	movs	r3, #2
 8004fa8:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8004faa:	e005      	b.n	8004fb8 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 8004fac:	bf00      	nop
 8004fae:	e004      	b.n	8004fba <USBH_MSC_RdWrProcess+0x194>
      break;
 8004fb0:	bf00      	nop
 8004fb2:	e002      	b.n	8004fba <USBH_MSC_RdWrProcess+0x194>
      break;
 8004fb4:	bf00      	nop
 8004fb6:	e000      	b.n	8004fba <USBH_MSC_RdWrProcess+0x194>
      break;
 8004fb8:	bf00      	nop

  }
  return error;
 8004fba:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3718      	adds	r7, #24
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	460b      	mov	r3, r1
 8004fce:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004fd6:	69db      	ldr	r3, [r3, #28]
 8004fd8:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	2b0b      	cmp	r3, #11
 8004fe2:	d10c      	bne.n	8004ffe <USBH_MSC_UnitIsReady+0x3a>
 8004fe4:	78fb      	ldrb	r3, [r7, #3]
 8004fe6:	68ba      	ldr	r2, [r7, #8]
 8004fe8:	2134      	movs	r1, #52	; 0x34
 8004fea:	fb01 f303 	mul.w	r3, r1, r3
 8004fee:	4413      	add	r3, r2
 8004ff0:	3391      	adds	r3, #145	; 0x91
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d102      	bne.n	8004ffe <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	73fb      	strb	r3, [r7, #15]
 8004ffc:	e001      	b.n	8005002 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8004ffe:	2300      	movs	r3, #0
 8005000:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8005002:	7bfb      	ldrb	r3, [r7, #15]
}
 8005004:	4618      	mov	r0, r3
 8005006:	3714      	adds	r7, #20
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b086      	sub	sp, #24
 8005014:	af00      	add	r7, sp, #0
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	460b      	mov	r3, r1
 800501a:	607a      	str	r2, [r7, #4]
 800501c:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005024:	69db      	ldr	r3, [r3, #28]
 8005026:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	b2db      	uxtb	r3, r3
 800502e:	2b0b      	cmp	r3, #11
 8005030:	d10d      	bne.n	800504e <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8005032:	7afb      	ldrb	r3, [r7, #11]
 8005034:	2234      	movs	r2, #52	; 0x34
 8005036:	fb02 f303 	mul.w	r3, r2, r3
 800503a:	3390      	adds	r3, #144	; 0x90
 800503c:	697a      	ldr	r2, [r7, #20]
 800503e:	4413      	add	r3, r2
 8005040:	2234      	movs	r2, #52	; 0x34
 8005042:	4619      	mov	r1, r3
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f004 fdc9 	bl	8009bdc <memcpy>
    return USBH_OK;
 800504a:	2300      	movs	r3, #0
 800504c:	e000      	b.n	8005050 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800504e:	2302      	movs	r3, #2
  }
}
 8005050:	4618      	mov	r0, r3
 8005052:	3718      	adds	r7, #24
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b088      	sub	sp, #32
 800505c:	af02      	add	r7, sp, #8
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	607a      	str	r2, [r7, #4]
 8005062:	603b      	str	r3, [r7, #0]
 8005064:	460b      	mov	r3, r1
 8005066:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800506e:	69db      	ldr	r3, [r3, #28]
 8005070:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005078:	b2db      	uxtb	r3, r3
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00e      	beq.n	800509c <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8005084:	2b0b      	cmp	r3, #11
 8005086:	d109      	bne.n	800509c <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8005088:	7afb      	ldrb	r3, [r7, #11]
 800508a:	697a      	ldr	r2, [r7, #20]
 800508c:	2134      	movs	r1, #52	; 0x34
 800508e:	fb01 f303 	mul.w	r3, r1, r3
 8005092:	4413      	add	r3, r2
 8005094:	3390      	adds	r3, #144	; 0x90
 8005096:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8005098:	2b01      	cmp	r3, #1
 800509a:	d001      	beq.n	80050a0 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800509c:	2302      	movs	r3, #2
 800509e:	e040      	b.n	8005122 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	2206      	movs	r2, #6
 80050a4:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 80050a6:	7afb      	ldrb	r3, [r7, #11]
 80050a8:	697a      	ldr	r2, [r7, #20]
 80050aa:	2134      	movs	r1, #52	; 0x34
 80050ac:	fb01 f303 	mul.w	r3, r1, r3
 80050b0:	4413      	add	r3, r2
 80050b2:	3390      	adds	r3, #144	; 0x90
 80050b4:	2206      	movs	r2, #6
 80050b6:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 80050b8:	7afb      	ldrb	r3, [r7, #11]
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 80050c2:	7af9      	ldrb	r1, [r7, #11]
 80050c4:	6a3b      	ldr	r3, [r7, #32]
 80050c6:	9300      	str	r3, [sp, #0]
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	68f8      	ldr	r0, [r7, #12]
 80050ce:	f000 fd78 	bl	8005bc2 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80050d8:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80050da:	e016      	b.n	800510a <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	1ad2      	subs	r2, r2, r3
 80050e6:	6a3b      	ldr	r3, [r7, #32]
 80050e8:	f242 7110 	movw	r1, #10000	; 0x2710
 80050ec:	fb01 f303 	mul.w	r3, r1, r3
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d805      	bhi.n	8005100 <USBH_MSC_Read+0xa8>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d104      	bne.n	800510a <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	2201      	movs	r2, #1
 8005104:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8005106:	2302      	movs	r3, #2
 8005108:	e00b      	b.n	8005122 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800510a:	7afb      	ldrb	r3, [r7, #11]
 800510c:	4619      	mov	r1, r3
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f7ff fe89 	bl	8004e26 <USBH_MSC_RdWrProcess>
 8005114:	4603      	mov	r3, r0
 8005116:	2b01      	cmp	r3, #1
 8005118:	d0e0      	beq.n	80050dc <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	2201      	movs	r2, #1
 800511e:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3718      	adds	r7, #24
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}

0800512a <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800512a:	b580      	push	{r7, lr}
 800512c:	b088      	sub	sp, #32
 800512e:	af02      	add	r7, sp, #8
 8005130:	60f8      	str	r0, [r7, #12]
 8005132:	607a      	str	r2, [r7, #4]
 8005134:	603b      	str	r3, [r7, #0]
 8005136:	460b      	mov	r3, r1
 8005138:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005140:	69db      	ldr	r3, [r3, #28]
 8005142:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800514a:	b2db      	uxtb	r3, r3
 800514c:	2b00      	cmp	r3, #0
 800514e:	d00e      	beq.n	800516e <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8005156:	2b0b      	cmp	r3, #11
 8005158:	d109      	bne.n	800516e <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800515a:	7afb      	ldrb	r3, [r7, #11]
 800515c:	697a      	ldr	r2, [r7, #20]
 800515e:	2134      	movs	r1, #52	; 0x34
 8005160:	fb01 f303 	mul.w	r3, r1, r3
 8005164:	4413      	add	r3, r2
 8005166:	3390      	adds	r3, #144	; 0x90
 8005168:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800516a:	2b01      	cmp	r3, #1
 800516c:	d001      	beq.n	8005172 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800516e:	2302      	movs	r3, #2
 8005170:	e040      	b.n	80051f4 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	2207      	movs	r2, #7
 8005176:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8005178:	7afb      	ldrb	r3, [r7, #11]
 800517a:	697a      	ldr	r2, [r7, #20]
 800517c:	2134      	movs	r1, #52	; 0x34
 800517e:	fb01 f303 	mul.w	r3, r1, r3
 8005182:	4413      	add	r3, r2
 8005184:	3390      	adds	r3, #144	; 0x90
 8005186:	2207      	movs	r2, #7
 8005188:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800518a:	7afb      	ldrb	r3, [r7, #11]
 800518c:	b29a      	uxth	r2, r3
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8005194:	7af9      	ldrb	r1, [r7, #11]
 8005196:	6a3b      	ldr	r3, [r7, #32]
 8005198:	9300      	str	r3, [sp, #0]
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	68f8      	ldr	r0, [r7, #12]
 80051a0:	f000 fca4 	bl	8005aec <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80051aa:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80051ac:	e016      	b.n	80051dc <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	1ad2      	subs	r2, r2, r3
 80051b8:	6a3b      	ldr	r3, [r7, #32]
 80051ba:	f242 7110 	movw	r1, #10000	; 0x2710
 80051be:	fb01 f303 	mul.w	r3, r1, r3
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d805      	bhi.n	80051d2 <USBH_MSC_Write+0xa8>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d104      	bne.n	80051dc <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	2201      	movs	r2, #1
 80051d6:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80051d8:	2302      	movs	r3, #2
 80051da:	e00b      	b.n	80051f4 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80051dc:	7afb      	ldrb	r3, [r7, #11]
 80051de:	4619      	mov	r1, r3
 80051e0:	68f8      	ldr	r0, [r7, #12]
 80051e2:	f7ff fe20 	bl	8004e26 <USBH_MSC_RdWrProcess>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d0e0      	beq.n	80051ae <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	2201      	movs	r2, #1
 80051f0:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 80051f2:	2300      	movs	r3, #0
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3718      	adds	r7, #24
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b082      	sub	sp, #8
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2221      	movs	r2, #33	; 0x21
 8005208:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	22ff      	movs	r2, #255	; 0xff
 800520e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8005222:	2200      	movs	r2, #0
 8005224:	2100      	movs	r1, #0
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f001 fdab 	bl	8006d82 <USBH_CtlReq>
 800522c:	4603      	mov	r3, r0
}
 800522e:	4618      	mov	r0, r3
 8005230:	3708      	adds	r7, #8
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}

08005236 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8005236:	b580      	push	{r7, lr}
 8005238:	b082      	sub	sp, #8
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
 800523e:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	22a1      	movs	r2, #161	; 0xa1
 8005244:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	22fe      	movs	r2, #254	; 0xfe
 800524a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800525e:	2201      	movs	r2, #1
 8005260:	6839      	ldr	r1, [r7, #0]
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f001 fd8d 	bl	8006d82 <USBH_CtlReq>
 8005268:	4603      	mov	r3, r0
}
 800526a:	4618      	mov	r0, r3
 800526c:	3708      	adds	r7, #8
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
	...

08005274 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8005274:	b480      	push	{r7}
 8005276:	b085      	sub	sp, #20
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005282:	69db      	ldr	r3, [r3, #28]
 8005284:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	4a09      	ldr	r2, [pc, #36]	; (80052b0 <USBH_MSC_BOT_Init+0x3c>)
 800528a:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	4a09      	ldr	r2, [pc, #36]	; (80052b4 <USBH_MSC_BOT_Init+0x40>)
 8005290:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2201      	movs	r2, #1
 8005296:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2201      	movs	r2, #1
 800529e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 80052a2:	2300      	movs	r3, #0
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3714      	adds	r7, #20
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr
 80052b0:	43425355 	.word	0x43425355
 80052b4:	20304050 	.word	0x20304050

080052b8 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b088      	sub	sp, #32
 80052bc:	af02      	add	r7, sp, #8
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	460b      	mov	r3, r1
 80052c2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 80052c4:	2301      	movs	r3, #1
 80052c6:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 80052c8:	2301      	movs	r3, #1
 80052ca:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 80052cc:	2301      	movs	r3, #1
 80052ce:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80052d0:	2300      	movs	r3, #0
 80052d2:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80052da:	69db      	ldr	r3, [r3, #28]
 80052dc:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 80052de:	2300      	movs	r3, #0
 80052e0:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80052e8:	3b01      	subs	r3, #1
 80052ea:	2b0a      	cmp	r3, #10
 80052ec:	f200 819e 	bhi.w	800562c <USBH_MSC_BOT_Process+0x374>
 80052f0:	a201      	add	r2, pc, #4	; (adr r2, 80052f8 <USBH_MSC_BOT_Process+0x40>)
 80052f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052f6:	bf00      	nop
 80052f8:	08005325 	.word	0x08005325
 80052fc:	0800534d 	.word	0x0800534d
 8005300:	080053b7 	.word	0x080053b7
 8005304:	080053d5 	.word	0x080053d5
 8005308:	08005459 	.word	0x08005459
 800530c:	0800547b 	.word	0x0800547b
 8005310:	08005513 	.word	0x08005513
 8005314:	0800552f 	.word	0x0800552f
 8005318:	08005581 	.word	0x08005581
 800531c:	080055b1 	.word	0x080055b1
 8005320:	08005613 	.word	0x08005613
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	78fa      	ldrb	r2, [r7, #3]
 8005328:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	2202      	movs	r2, #2
 8005330:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	795b      	ldrb	r3, [r3, #5]
 800533e:	2201      	movs	r2, #1
 8005340:	9200      	str	r2, [sp, #0]
 8005342:	221f      	movs	r2, #31
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f001 ff2a 	bl	800719e <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800534a:	e17e      	b.n	800564a <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	795b      	ldrb	r3, [r3, #5]
 8005350:	4619      	mov	r1, r3
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f004 fb2a 	bl	80099ac <USBH_LL_GetURBState>
 8005358:	4603      	mov	r3, r0
 800535a:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800535c:	7d3b      	ldrb	r3, [r7, #20]
 800535e:	2b01      	cmp	r3, #1
 8005360:	d118      	bne.n	8005394 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005366:	2b00      	cmp	r3, #0
 8005368:	d00f      	beq.n	800538a <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8005370:	b25b      	sxtb	r3, r3
 8005372:	2b00      	cmp	r3, #0
 8005374:	da04      	bge.n	8005380 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	2203      	movs	r2, #3
 800537a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800537e:	e157      	b.n	8005630 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	2205      	movs	r2, #5
 8005384:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8005388:	e152      	b.n	8005630 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	2207      	movs	r2, #7
 800538e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8005392:	e14d      	b.n	8005630 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 8005394:	7d3b      	ldrb	r3, [r7, #20]
 8005396:	2b02      	cmp	r3, #2
 8005398:	d104      	bne.n	80053a4 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	2201      	movs	r2, #1
 800539e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80053a2:	e145      	b.n	8005630 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 80053a4:	7d3b      	ldrb	r3, [r7, #20]
 80053a6:	2b05      	cmp	r3, #5
 80053a8:	f040 8142 	bne.w	8005630 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	220a      	movs	r2, #10
 80053b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80053b4:	e13c      	b.n	8005630 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	895a      	ldrh	r2, [r3, #10]
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	791b      	ldrb	r3, [r3, #4]
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f001 ff0f 	bl	80071e8 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	2204      	movs	r2, #4
 80053ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 80053d2:	e13a      	b.n	800564a <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	791b      	ldrb	r3, [r3, #4]
 80053d8:	4619      	mov	r1, r3
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f004 fae6 	bl	80099ac <USBH_LL_GetURBState>
 80053e0:	4603      	mov	r3, r0
 80053e2:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80053e4:	7d3b      	ldrb	r3, [r7, #20]
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d12d      	bne.n	8005446 <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053ee:	693a      	ldr	r2, [r7, #16]
 80053f0:	8952      	ldrh	r2, [r2, #10]
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d910      	bls.n	8005418 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053fc:	693a      	ldr	r2, [r7, #16]
 80053fe:	8952      	ldrh	r2, [r2, #10]
 8005400:	441a      	add	r2, r3
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800540c:	693a      	ldr	r2, [r7, #16]
 800540e:	8952      	ldrh	r2, [r2, #10]
 8005410:	1a9a      	subs	r2, r3, r2
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	65da      	str	r2, [r3, #92]	; 0x5c
 8005416:	e002      	b.n	800541e <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	2200      	movs	r2, #0
 800541c:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00a      	beq.n	800543c <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	895a      	ldrh	r2, [r3, #10]
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	791b      	ldrb	r3, [r3, #4]
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f001 fed7 	bl	80071e8 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800543a:	e0fb      	b.n	8005634 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	2207      	movs	r2, #7
 8005440:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8005444:	e0f6      	b.n	8005634 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 8005446:	7d3b      	ldrb	r3, [r7, #20]
 8005448:	2b05      	cmp	r3, #5
 800544a:	f040 80f3 	bne.w	8005634 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	2209      	movs	r2, #9
 8005452:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8005456:	e0ed      	b.n	8005634 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	891a      	ldrh	r2, [r3, #8]
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	795b      	ldrb	r3, [r3, #5]
 8005466:	2001      	movs	r0, #1
 8005468:	9000      	str	r0, [sp, #0]
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f001 fe97 	bl	800719e <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	2206      	movs	r2, #6
 8005474:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8005478:	e0e7      	b.n	800564a <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	795b      	ldrb	r3, [r3, #5]
 800547e:	4619      	mov	r1, r3
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f004 fa93 	bl	80099ac <USBH_LL_GetURBState>
 8005486:	4603      	mov	r3, r0
 8005488:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800548a:	7d3b      	ldrb	r3, [r7, #20]
 800548c:	2b01      	cmp	r3, #1
 800548e:	d12f      	bne.n	80054f0 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005494:	693a      	ldr	r2, [r7, #16]
 8005496:	8912      	ldrh	r2, [r2, #8]
 8005498:	4293      	cmp	r3, r2
 800549a:	d910      	bls.n	80054be <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054a2:	693a      	ldr	r2, [r7, #16]
 80054a4:	8912      	ldrh	r2, [r2, #8]
 80054a6:	441a      	add	r2, r3
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054b2:	693a      	ldr	r2, [r7, #16]
 80054b4:	8912      	ldrh	r2, [r2, #8]
 80054b6:	1a9a      	subs	r2, r3, r2
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	65da      	str	r2, [r3, #92]	; 0x5c
 80054bc:	e002      	b.n	80054c4 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	2200      	movs	r2, #0
 80054c2:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00c      	beq.n	80054e6 <USBH_MSC_BOT_Process+0x22e>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	891a      	ldrh	r2, [r3, #8]
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	795b      	ldrb	r3, [r3, #5]
 80054da:	2001      	movs	r0, #1
 80054dc:	9000      	str	r0, [sp, #0]
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f001 fe5d 	bl	800719e <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 80054e4:	e0a8      	b.n	8005638 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	2207      	movs	r2, #7
 80054ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80054ee:	e0a3      	b.n	8005638 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 80054f0:	7d3b      	ldrb	r3, [r7, #20]
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d104      	bne.n	8005500 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	2205      	movs	r2, #5
 80054fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80054fe:	e09b      	b.n	8005638 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 8005500:	7d3b      	ldrb	r3, [r7, #20]
 8005502:	2b05      	cmp	r3, #5
 8005504:	f040 8098 	bne.w	8005638 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	220a      	movs	r2, #10
 800550c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8005510:	e092      	b.n	8005638 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	791b      	ldrb	r3, [r3, #4]
 800551c:	220d      	movs	r2, #13
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f001 fe62 	bl	80071e8 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	2208      	movs	r2, #8
 8005528:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800552c:	e08d      	b.n	800564a <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	791b      	ldrb	r3, [r3, #4]
 8005532:	4619      	mov	r1, r3
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f004 fa39 	bl	80099ac <USBH_LL_GetURBState>
 800553a:	4603      	mov	r3, r0
 800553c:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800553e:	7d3b      	ldrb	r3, [r7, #20]
 8005540:	2b01      	cmp	r3, #1
 8005542:	d115      	bne.n	8005570 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 f8a9 	bl	80056ac <USBH_MSC_DecodeCSW>
 800555a:	4603      	mov	r3, r0
 800555c:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800555e:	7d7b      	ldrb	r3, [r7, #21]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d102      	bne.n	800556a <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 8005564:	2300      	movs	r3, #0
 8005566:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8005568:	e068      	b.n	800563c <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800556a:	2302      	movs	r3, #2
 800556c:	75fb      	strb	r3, [r7, #23]
      break;
 800556e:	e065      	b.n	800563c <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 8005570:	7d3b      	ldrb	r3, [r7, #20]
 8005572:	2b05      	cmp	r3, #5
 8005574:	d162      	bne.n	800563c <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	2209      	movs	r2, #9
 800557a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800557e:	e05d      	b.n	800563c <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8005580:	78fb      	ldrb	r3, [r7, #3]
 8005582:	2200      	movs	r2, #0
 8005584:	4619      	mov	r1, r3
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 f864 	bl	8005654 <USBH_MSC_BOT_Abort>
 800558c:	4603      	mov	r3, r0
 800558e:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8005590:	7dbb      	ldrb	r3, [r7, #22]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d104      	bne.n	80055a0 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	2207      	movs	r2, #7
 800559a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800559e:	e04f      	b.n	8005640 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 80055a0:	7dbb      	ldrb	r3, [r7, #22]
 80055a2:	2b04      	cmp	r3, #4
 80055a4:	d14c      	bne.n	8005640 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	220b      	movs	r2, #11
 80055aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80055ae:	e047      	b.n	8005640 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 80055b0:	78fb      	ldrb	r3, [r7, #3]
 80055b2:	2201      	movs	r2, #1
 80055b4:	4619      	mov	r1, r3
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 f84c 	bl	8005654 <USBH_MSC_BOT_Abort>
 80055bc:	4603      	mov	r3, r0
 80055be:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 80055c0:	7dbb      	ldrb	r3, [r7, #22]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d11d      	bne.n	8005602 <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	795b      	ldrb	r3, [r3, #5]
 80055ca:	4619      	mov	r1, r3
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f004 fa47 	bl	8009a60 <USBH_LL_GetToggle>
 80055d2:	4603      	mov	r3, r0
 80055d4:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	7959      	ldrb	r1, [r3, #5]
 80055da:	7bfb      	ldrb	r3, [r7, #15]
 80055dc:	f1c3 0301 	rsb	r3, r3, #1
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	461a      	mov	r2, r3
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f004 fa0b 	bl	8009a00 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	791b      	ldrb	r3, [r3, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	4619      	mov	r1, r3
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f004 fa04 	bl	8009a00 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	2209      	movs	r2, #9
 80055fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8005600:	e020      	b.n	8005644 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 8005602:	7dbb      	ldrb	r3, [r7, #22]
 8005604:	2b04      	cmp	r3, #4
 8005606:	d11d      	bne.n	8005644 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	220b      	movs	r2, #11
 800560c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8005610:	e018      	b.n	8005644 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f7ff fdf2 	bl	80051fc <USBH_MSC_BOT_REQ_Reset>
 8005618:	4603      	mov	r3, r0
 800561a:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800561c:	7dfb      	ldrb	r3, [r7, #23]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d112      	bne.n	8005648 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	2201      	movs	r2, #1
 8005626:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800562a:	e00d      	b.n	8005648 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800562c:	bf00      	nop
 800562e:	e00c      	b.n	800564a <USBH_MSC_BOT_Process+0x392>
      break;
 8005630:	bf00      	nop
 8005632:	e00a      	b.n	800564a <USBH_MSC_BOT_Process+0x392>
      break;
 8005634:	bf00      	nop
 8005636:	e008      	b.n	800564a <USBH_MSC_BOT_Process+0x392>
      break;
 8005638:	bf00      	nop
 800563a:	e006      	b.n	800564a <USBH_MSC_BOT_Process+0x392>
      break;
 800563c:	bf00      	nop
 800563e:	e004      	b.n	800564a <USBH_MSC_BOT_Process+0x392>
      break;
 8005640:	bf00      	nop
 8005642:	e002      	b.n	800564a <USBH_MSC_BOT_Process+0x392>
      break;
 8005644:	bf00      	nop
 8005646:	e000      	b.n	800564a <USBH_MSC_BOT_Process+0x392>
      break;
 8005648:	bf00      	nop
  }
  return status;
 800564a:	7dfb      	ldrb	r3, [r7, #23]
}
 800564c:	4618      	mov	r0, r3
 800564e:	3718      	adds	r7, #24
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	460b      	mov	r3, r1
 800565e:	70fb      	strb	r3, [r7, #3]
 8005660:	4613      	mov	r3, r2
 8005662:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8005664:	2302      	movs	r3, #2
 8005666:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800566e:	69db      	ldr	r3, [r3, #28]
 8005670:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8005672:	78bb      	ldrb	r3, [r7, #2]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d002      	beq.n	800567e <USBH_MSC_BOT_Abort+0x2a>
 8005678:	2b01      	cmp	r3, #1
 800567a:	d009      	beq.n	8005690 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800567c:	e011      	b.n	80056a2 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	79db      	ldrb	r3, [r3, #7]
 8005682:	4619      	mov	r1, r3
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f001 f99c 	bl	80069c2 <USBH_ClrFeature>
 800568a:	4603      	mov	r3, r0
 800568c:	73fb      	strb	r3, [r7, #15]
      break;
 800568e:	e008      	b.n	80056a2 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	799b      	ldrb	r3, [r3, #6]
 8005694:	4619      	mov	r1, r3
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f001 f993 	bl	80069c2 <USBH_ClrFeature>
 800569c:	4603      	mov	r3, r0
 800569e:	73fb      	strb	r3, [r7, #15]
      break;
 80056a0:	bf00      	nop
  }
  return status;
 80056a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3710      	adds	r7, #16
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80056ba:	69db      	ldr	r3, [r3, #28]
 80056bc:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 80056be:	2301      	movs	r3, #1
 80056c0:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	791b      	ldrb	r3, [r3, #4]
 80056c6:	4619      	mov	r1, r3
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f004 f8dd 	bl	8009888 <USBH_LL_GetLastXferSize>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b0d      	cmp	r3, #13
 80056d2:	d002      	beq.n	80056da <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 80056d4:	2302      	movs	r3, #2
 80056d6:	73fb      	strb	r3, [r7, #15]
 80056d8:	e024      	b.n	8005724 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056de:	4a14      	ldr	r2, [pc, #80]	; (8005730 <USBH_MSC_DecodeCSW+0x84>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d11d      	bne.n	8005720 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d119      	bne.n	8005724 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d102      	bne.n	8005700 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 80056fa:	2300      	movs	r3, #0
 80056fc:	73fb      	strb	r3, [r7, #15]
 80056fe:	e011      	b.n	8005724 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005706:	2b01      	cmp	r3, #1
 8005708:	d102      	bne.n	8005710 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800570a:	2301      	movs	r3, #1
 800570c:	73fb      	strb	r3, [r7, #15]
 800570e:	e009      	b.n	8005724 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005716:	2b02      	cmp	r3, #2
 8005718:	d104      	bne.n	8005724 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800571a:	2302      	movs	r3, #2
 800571c:	73fb      	strb	r3, [r7, #15]
 800571e:	e001      	b.n	8005724 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8005720:	2302      	movs	r3, #2
 8005722:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8005724:	7bfb      	ldrb	r3, [r7, #15]
}
 8005726:	4618      	mov	r0, r3
 8005728:	3710      	adds	r7, #16
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	53425355 	.word	0x53425355

08005734 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	460b      	mov	r3, r1
 800573e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8005740:	2302      	movs	r3, #2
 8005742:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800574a:	69db      	ldr	r3, [r3, #28]
 800574c:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8005754:	2b01      	cmp	r3, #1
 8005756:	d002      	beq.n	800575e <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8005758:	2b02      	cmp	r3, #2
 800575a:	d021      	beq.n	80057a0 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800575c:	e028      	b.n	80057b0 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	2200      	movs	r2, #0
 8005762:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	2200      	movs	r2, #0
 8005768:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	220a      	movs	r2, #10
 8005770:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	3363      	adds	r3, #99	; 0x63
 8005778:	2210      	movs	r2, #16
 800577a:	2100      	movs	r1, #0
 800577c:	4618      	mov	r0, r3
 800577e:	f004 fa3b 	bl	8009bf8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	2200      	movs	r2, #0
 8005786:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	2201      	movs	r2, #1
 800578e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	2202      	movs	r2, #2
 8005796:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800579a:	2301      	movs	r3, #1
 800579c:	73fb      	strb	r3, [r7, #15]
      break;
 800579e:	e007      	b.n	80057b0 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 80057a0:	78fb      	ldrb	r3, [r7, #3]
 80057a2:	4619      	mov	r1, r3
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f7ff fd87 	bl	80052b8 <USBH_MSC_BOT_Process>
 80057aa:	4603      	mov	r3, r0
 80057ac:	73fb      	strb	r3, [r7, #15]
      break;
 80057ae:	bf00      	nop
  }

  return error;
 80057b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3710      	adds	r7, #16
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}

080057ba <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 80057ba:	b580      	push	{r7, lr}
 80057bc:	b086      	sub	sp, #24
 80057be:	af00      	add	r7, sp, #0
 80057c0:	60f8      	str	r0, [r7, #12]
 80057c2:	460b      	mov	r3, r1
 80057c4:	607a      	str	r2, [r7, #4]
 80057c6:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 80057c8:	2301      	movs	r3, #1
 80057ca:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80057d2:	69db      	ldr	r3, [r3, #28]
 80057d4:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d002      	beq.n	80057e6 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d027      	beq.n	8005834 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 80057e4:	e05f      	b.n	80058a6 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	2208      	movs	r2, #8
 80057ea:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	2280      	movs	r2, #128	; 0x80
 80057f0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	220a      	movs	r2, #10
 80057f8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	3363      	adds	r3, #99	; 0x63
 8005800:	2210      	movs	r2, #16
 8005802:	2100      	movs	r1, #0
 8005804:	4618      	mov	r0, r3
 8005806:	f004 f9f7 	bl	8009bf8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	2225      	movs	r2, #37	; 0x25
 800580e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	2201      	movs	r2, #1
 8005816:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	2202      	movs	r2, #2
 800581e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	f103 0210 	add.w	r2, r3, #16
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800582e:	2301      	movs	r3, #1
 8005830:	75fb      	strb	r3, [r7, #23]
      break;
 8005832:	e038      	b.n	80058a6 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8005834:	7afb      	ldrb	r3, [r7, #11]
 8005836:	4619      	mov	r1, r3
 8005838:	68f8      	ldr	r0, [r7, #12]
 800583a:	f7ff fd3d 	bl	80052b8 <USBH_MSC_BOT_Process>
 800583e:	4603      	mov	r3, r0
 8005840:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8005842:	7dfb      	ldrb	r3, [r7, #23]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d12d      	bne.n	80058a4 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800584e:	3303      	adds	r3, #3
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	461a      	mov	r2, r3
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800585a:	3302      	adds	r3, #2
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	021b      	lsls	r3, r3, #8
 8005860:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005868:	3301      	adds	r3, #1
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800586e:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	061b      	lsls	r3, r3, #24
 800587a:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005886:	3307      	adds	r3, #7
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	b29a      	uxth	r2, r3
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005892:	3306      	adds	r3, #6
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	b29b      	uxth	r3, r3
 8005898:	021b      	lsls	r3, r3, #8
 800589a:	b29b      	uxth	r3, r3
 800589c:	4313      	orrs	r3, r2
 800589e:	b29a      	uxth	r2, r3
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	809a      	strh	r2, [r3, #4]
      break;
 80058a4:	bf00      	nop
  }

  return error;
 80058a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3718      	adds	r7, #24
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b086      	sub	sp, #24
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	460b      	mov	r3, r1
 80058ba:	607a      	str	r2, [r7, #4]
 80058bc:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 80058be:	2302      	movs	r3, #2
 80058c0:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80058c8:	69db      	ldr	r3, [r3, #28]
 80058ca:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d002      	beq.n	80058dc <USBH_MSC_SCSI_Inquiry+0x2c>
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d03d      	beq.n	8005956 <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 80058da:	e089      	b.n	80059f0 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	2224      	movs	r2, #36	; 0x24
 80058e0:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	2280      	movs	r2, #128	; 0x80
 80058e6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	220a      	movs	r2, #10
 80058ee:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	3363      	adds	r3, #99	; 0x63
 80058f6:	220a      	movs	r2, #10
 80058f8:	2100      	movs	r1, #0
 80058fa:	4618      	mov	r0, r3
 80058fc:	f004 f97c 	bl	8009bf8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	2212      	movs	r2, #18
 8005904:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8005908:	7afb      	ldrb	r3, [r7, #11]
 800590a:	015b      	lsls	r3, r3, #5
 800590c:	b2da      	uxtb	r2, r3
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	2200      	movs	r2, #0
 8005920:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	2224      	movs	r2, #36	; 0x24
 8005928:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	2202      	movs	r2, #2
 8005940:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	f103 0210 	add.w	r2, r3, #16
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8005950:	2301      	movs	r3, #1
 8005952:	75fb      	strb	r3, [r7, #23]
      break;
 8005954:	e04c      	b.n	80059f0 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 8005956:	7afb      	ldrb	r3, [r7, #11]
 8005958:	4619      	mov	r1, r3
 800595a:	68f8      	ldr	r0, [r7, #12]
 800595c:	f7ff fcac 	bl	80052b8 <USBH_MSC_BOT_Process>
 8005960:	4603      	mov	r3, r0
 8005962:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8005964:	7dfb      	ldrb	r3, [r7, #23]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d141      	bne.n	80059ee <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800596a:	2222      	movs	r2, #34	; 0x22
 800596c:	2100      	movs	r1, #0
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f004 f942 	bl	8009bf8 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	f003 031f 	and.w	r3, r3, #31
 8005980:	b2da      	uxtb	r2, r3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	095b      	lsrs	r3, r3, #5
 8005990:	b2da      	uxtb	r2, r3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800599c:	3301      	adds	r3, #1
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	b25b      	sxtb	r3, r3
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	da03      	bge.n	80059ae <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2201      	movs	r2, #1
 80059aa:	709a      	strb	r2, [r3, #2]
 80059ac:	e002      	b.n	80059b4 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	1cd8      	adds	r0, r3, #3
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059be:	3308      	adds	r3, #8
 80059c0:	2208      	movs	r2, #8
 80059c2:	4619      	mov	r1, r3
 80059c4:	f004 f90a 	bl	8009bdc <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f103 000c 	add.w	r0, r3, #12
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059d4:	3310      	adds	r3, #16
 80059d6:	2210      	movs	r2, #16
 80059d8:	4619      	mov	r1, r3
 80059da:	f004 f8ff 	bl	8009bdc <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	331d      	adds	r3, #29
 80059e2:	693a      	ldr	r2, [r7, #16]
 80059e4:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 80059e8:	3220      	adds	r2, #32
 80059ea:	6812      	ldr	r2, [r2, #0]
 80059ec:	601a      	str	r2, [r3, #0]
      break;
 80059ee:	bf00      	nop
  }

  return error;
 80059f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3718      	adds	r7, #24
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}

080059fa <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 80059fa:	b580      	push	{r7, lr}
 80059fc:	b086      	sub	sp, #24
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	60f8      	str	r0, [r7, #12]
 8005a02:	460b      	mov	r3, r1
 8005a04:	607a      	str	r2, [r7, #4]
 8005a06:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8005a08:	2302      	movs	r3, #2
 8005a0a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a12:	69db      	ldr	r3, [r3, #28]
 8005a14:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d002      	beq.n	8005a26 <USBH_MSC_SCSI_RequestSense+0x2c>
 8005a20:	2b02      	cmp	r3, #2
 8005a22:	d03d      	beq.n	8005aa0 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8005a24:	e05d      	b.n	8005ae2 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	220e      	movs	r2, #14
 8005a2a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	2280      	movs	r2, #128	; 0x80
 8005a30:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	220a      	movs	r2, #10
 8005a38:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	3363      	adds	r3, #99	; 0x63
 8005a40:	2210      	movs	r2, #16
 8005a42:	2100      	movs	r1, #0
 8005a44:	4618      	mov	r0, r3
 8005a46:	f004 f8d7 	bl	8009bf8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	2203      	movs	r2, #3
 8005a4e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8005a52:	7afb      	ldrb	r3, [r7, #11]
 8005a54:	015b      	lsls	r3, r3, #5
 8005a56:	b2da      	uxtb	r2, r3
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	220e      	movs	r2, #14
 8005a72:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	2201      	movs	r2, #1
 8005a82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	2202      	movs	r2, #2
 8005a8a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	f103 0210 	add.w	r2, r3, #16
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	75fb      	strb	r3, [r7, #23]
      break;
 8005a9e:	e020      	b.n	8005ae2 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8005aa0:	7afb      	ldrb	r3, [r7, #11]
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	68f8      	ldr	r0, [r7, #12]
 8005aa6:	f7ff fc07 	bl	80052b8 <USBH_MSC_BOT_Process>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8005aae:	7dfb      	ldrb	r3, [r7, #23]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d115      	bne.n	8005ae0 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005aba:	3302      	adds	r3, #2
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	f003 030f 	and.w	r3, r3, #15
 8005ac2:	b2da      	uxtb	r2, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ace:	7b1a      	ldrb	r2, [r3, #12]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ada:	7b5a      	ldrb	r2, [r3, #13]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	709a      	strb	r2, [r3, #2]
      break;
 8005ae0:	bf00      	nop
  }

  return error;
 8005ae2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3718      	adds	r7, #24
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}

08005aec <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b086      	sub	sp, #24
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	60f8      	str	r0, [r7, #12]
 8005af4:	607a      	str	r2, [r7, #4]
 8005af6:	603b      	str	r3, [r7, #0]
 8005af8:	460b      	mov	r3, r1
 8005afa:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8005afc:	2302      	movs	r3, #2
 8005afe:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005b06:	69db      	ldr	r3, [r3, #28]
 8005b08:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d002      	beq.n	8005b1a <USBH_MSC_SCSI_Write+0x2e>
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d047      	beq.n	8005ba8 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8005b18:	e04e      	b.n	8005bb8 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8005b20:	461a      	mov	r2, r3
 8005b22:	6a3b      	ldr	r3, [r7, #32]
 8005b24:	fb03 f202 	mul.w	r2, r3, r2
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	220a      	movs	r2, #10
 8005b38:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	3363      	adds	r3, #99	; 0x63
 8005b40:	2210      	movs	r2, #16
 8005b42:	2100      	movs	r1, #0
 8005b44:	4618      	mov	r0, r3
 8005b46:	f004 f857 	bl	8009bf8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	222a      	movs	r2, #42	; 0x2a
 8005b4e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8005b52:	79fa      	ldrb	r2, [r7, #7]
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8005b5a:	79ba      	ldrb	r2, [r7, #6]
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8005b62:	797a      	ldrb	r2, [r7, #5]
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8005b6a:	1d3b      	adds	r3, r7, #4
 8005b6c:	781a      	ldrb	r2, [r3, #0]
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8005b74:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8005b7e:	f107 0320 	add.w	r3, r7, #32
 8005b82:	781a      	ldrb	r2, [r3, #0]
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	2202      	movs	r2, #2
 8005b96:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	683a      	ldr	r2, [r7, #0]
 8005b9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	75fb      	strb	r3, [r7, #23]
      break;
 8005ba6:	e007      	b.n	8005bb8 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8005ba8:	7afb      	ldrb	r3, [r7, #11]
 8005baa:	4619      	mov	r1, r3
 8005bac:	68f8      	ldr	r0, [r7, #12]
 8005bae:	f7ff fb83 	bl	80052b8 <USBH_MSC_BOT_Process>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	75fb      	strb	r3, [r7, #23]
      break;
 8005bb6:	bf00      	nop
  }

  return error;
 8005bb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3718      	adds	r7, #24
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}

08005bc2 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8005bc2:	b580      	push	{r7, lr}
 8005bc4:	b086      	sub	sp, #24
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	60f8      	str	r0, [r7, #12]
 8005bca:	607a      	str	r2, [r7, #4]
 8005bcc:	603b      	str	r3, [r7, #0]
 8005bce:	460b      	mov	r3, r1
 8005bd0:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8005bd2:	2302      	movs	r3, #2
 8005bd4:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005bdc:	69db      	ldr	r3, [r3, #28]
 8005bde:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d002      	beq.n	8005bf0 <USBH_MSC_SCSI_Read+0x2e>
 8005bea:	2b02      	cmp	r3, #2
 8005bec:	d047      	beq.n	8005c7e <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8005bee:	e04e      	b.n	8005c8e <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	6a3b      	ldr	r3, [r7, #32]
 8005bfa:	fb03 f202 	mul.w	r2, r3, r2
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	2280      	movs	r2, #128	; 0x80
 8005c06:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	220a      	movs	r2, #10
 8005c0e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	3363      	adds	r3, #99	; 0x63
 8005c16:	2210      	movs	r2, #16
 8005c18:	2100      	movs	r1, #0
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f003 ffec 	bl	8009bf8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	2228      	movs	r2, #40	; 0x28
 8005c24:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8005c28:	79fa      	ldrb	r2, [r7, #7]
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8005c30:	79ba      	ldrb	r2, [r7, #6]
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8005c38:	797a      	ldrb	r2, [r7, #5]
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8005c40:	1d3b      	adds	r3, r7, #4
 8005c42:	781a      	ldrb	r2, [r3, #0]
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8005c4a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8005c54:	f107 0320 	add.w	r3, r7, #32
 8005c58:	781a      	ldrb	r2, [r3, #0]
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	2202      	movs	r2, #2
 8005c6c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	683a      	ldr	r2, [r7, #0]
 8005c74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	75fb      	strb	r3, [r7, #23]
      break;
 8005c7c:	e007      	b.n	8005c8e <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8005c7e:	7afb      	ldrb	r3, [r7, #11]
 8005c80:	4619      	mov	r1, r3
 8005c82:	68f8      	ldr	r0, [r7, #12]
 8005c84:	f7ff fb18 	bl	80052b8 <USBH_MSC_BOT_Process>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	75fb      	strb	r3, [r7, #23]
      break;
 8005c8c:	bf00      	nop
  }

  return error;
 8005c8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3718      	adds	r7, #24
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b084      	sub	sp, #16
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	60b9      	str	r1, [r7, #8]
 8005ca2:	4613      	mov	r3, r2
 8005ca4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d101      	bne.n	8005cb0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005cac:	2302      	movs	r3, #2
 8005cae:	e029      	b.n	8005d04 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	79fa      	ldrb	r2, [r7, #7]
 8005cb4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8005cc8:	68f8      	ldr	r0, [r7, #12]
 8005cca:	f000 f81f 	bl	8005d0c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d003      	beq.n	8005cfc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	68ba      	ldr	r2, [r7, #8]
 8005cf8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8005cfc:	68f8      	ldr	r0, [r7, #12]
 8005cfe:	f003 fd0f 	bl	8009720 <USBH_LL_Init>

  return USBH_OK;
 8005d02:	2300      	movs	r3, #0
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3710      	adds	r7, #16
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b085      	sub	sp, #20
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005d14:	2300      	movs	r3, #0
 8005d16:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005d18:	2300      	movs	r3, #0
 8005d1a:	60fb      	str	r3, [r7, #12]
 8005d1c:	e009      	b.n	8005d32 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	33e0      	adds	r3, #224	; 0xe0
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	4413      	add	r3, r2
 8005d28:	2200      	movs	r2, #0
 8005d2a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	3301      	adds	r3, #1
 8005d30:	60fb      	str	r3, [r7, #12]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2b0e      	cmp	r3, #14
 8005d36:	d9f2      	bls.n	8005d1e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005d38:	2300      	movs	r3, #0
 8005d3a:	60fb      	str	r3, [r7, #12]
 8005d3c:	e009      	b.n	8005d52 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	4413      	add	r3, r2
 8005d44:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005d48:	2200      	movs	r2, #0
 8005d4a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	3301      	adds	r3, #1
 8005d50:	60fb      	str	r3, [r7, #12]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d58:	d3f1      	bcc.n	8005d3e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2240      	movs	r2, #64	; 0x40
 8005d7e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2201      	movs	r2, #1
 8005d92:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8005da6:	2300      	movs	r3, #0
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3714      	adds	r7, #20
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b085      	sub	sp, #20
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d016      	beq.n	8005df6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d10e      	bne.n	8005df0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005dd8:	1c59      	adds	r1, r3, #1
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	33de      	adds	r3, #222	; 0xde
 8005de4:	6839      	ldr	r1, [r7, #0]
 8005de6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8005dea:	2300      	movs	r3, #0
 8005dec:	73fb      	strb	r3, [r7, #15]
 8005dee:	e004      	b.n	8005dfa <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005df0:	2302      	movs	r3, #2
 8005df2:	73fb      	strb	r3, [r7, #15]
 8005df4:	e001      	b.n	8005dfa <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005df6:	2302      	movs	r3, #2
 8005df8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3714      	adds	r7, #20
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr

08005e08 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b085      	sub	sp, #20
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	460b      	mov	r3, r1
 8005e12:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8005e14:	2300      	movs	r3, #0
 8005e16:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8005e1e:	78fa      	ldrb	r2, [r7, #3]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d204      	bcs.n	8005e2e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	78fa      	ldrb	r2, [r7, #3]
 8005e28:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8005e2c:	e001      	b.n	8005e32 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005e2e:	2302      	movs	r3, #2
 8005e30:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3714      	adds	r7, #20
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b087      	sub	sp, #28
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	4608      	mov	r0, r1
 8005e4a:	4611      	mov	r1, r2
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	4603      	mov	r3, r0
 8005e50:	70fb      	strb	r3, [r7, #3]
 8005e52:	460b      	mov	r3, r1
 8005e54:	70bb      	strb	r3, [r7, #2]
 8005e56:	4613      	mov	r3, r2
 8005e58:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005e68:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005e6a:	e025      	b.n	8005eb8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005e6c:	7dfb      	ldrb	r3, [r7, #23]
 8005e6e:	221a      	movs	r2, #26
 8005e70:	fb02 f303 	mul.w	r3, r2, r3
 8005e74:	3308      	adds	r3, #8
 8005e76:	68fa      	ldr	r2, [r7, #12]
 8005e78:	4413      	add	r3, r2
 8005e7a:	3302      	adds	r3, #2
 8005e7c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	795b      	ldrb	r3, [r3, #5]
 8005e82:	78fa      	ldrb	r2, [r7, #3]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d002      	beq.n	8005e8e <USBH_FindInterface+0x4e>
 8005e88:	78fb      	ldrb	r3, [r7, #3]
 8005e8a:	2bff      	cmp	r3, #255	; 0xff
 8005e8c:	d111      	bne.n	8005eb2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005e92:	78ba      	ldrb	r2, [r7, #2]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d002      	beq.n	8005e9e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005e98:	78bb      	ldrb	r3, [r7, #2]
 8005e9a:	2bff      	cmp	r3, #255	; 0xff
 8005e9c:	d109      	bne.n	8005eb2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005ea2:	787a      	ldrb	r2, [r7, #1]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d002      	beq.n	8005eae <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005ea8:	787b      	ldrb	r3, [r7, #1]
 8005eaa:	2bff      	cmp	r3, #255	; 0xff
 8005eac:	d101      	bne.n	8005eb2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005eae:	7dfb      	ldrb	r3, [r7, #23]
 8005eb0:	e006      	b.n	8005ec0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005eb2:	7dfb      	ldrb	r3, [r7, #23]
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005eb8:	7dfb      	ldrb	r3, [r7, #23]
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d9d6      	bls.n	8005e6c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005ebe:	23ff      	movs	r3, #255	; 0xff
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	371c      	adds	r7, #28
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b082      	sub	sp, #8
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f003 fc5f 	bl	8009798 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8005eda:	2101      	movs	r1, #1
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f003 fd78 	bl	80099d2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3708      	adds	r7, #8
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b088      	sub	sp, #32
 8005ef0:	af04      	add	r7, sp, #16
 8005ef2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d102      	bne.n	8005f0e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2203      	movs	r2, #3
 8005f0c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	2b0b      	cmp	r3, #11
 8005f16:	f200 81b3 	bhi.w	8006280 <USBH_Process+0x394>
 8005f1a:	a201      	add	r2, pc, #4	; (adr r2, 8005f20 <USBH_Process+0x34>)
 8005f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f20:	08005f51 	.word	0x08005f51
 8005f24:	08005f83 	.word	0x08005f83
 8005f28:	08005feb 	.word	0x08005feb
 8005f2c:	0800621b 	.word	0x0800621b
 8005f30:	08006281 	.word	0x08006281
 8005f34:	0800608f 	.word	0x0800608f
 8005f38:	080061c1 	.word	0x080061c1
 8005f3c:	080060c5 	.word	0x080060c5
 8005f40:	080060e5 	.word	0x080060e5
 8005f44:	08006105 	.word	0x08006105
 8005f48:	08006133 	.word	0x08006133
 8005f4c:	08006203 	.word	0x08006203
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	f000 8193 	beq.w	8006284 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2201      	movs	r2, #1
 8005f62:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8005f64:	20c8      	movs	r0, #200	; 0xc8
 8005f66:	f003 fdab 	bl	8009ac0 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f003 fc71 	bl	8009852 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8005f80:	e180      	b.n	8006284 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d107      	bne.n	8005f9c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2202      	movs	r2, #2
 8005f98:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005f9a:	e182      	b.n	80062a2 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005fa2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fa6:	d914      	bls.n	8005fd2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005fae:	3301      	adds	r3, #1
 8005fb0:	b2da      	uxtb	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005fbe:	2b03      	cmp	r3, #3
 8005fc0:	d903      	bls.n	8005fca <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	220d      	movs	r2, #13
 8005fc6:	701a      	strb	r2, [r3, #0]
      break;
 8005fc8:	e16b      	b.n	80062a2 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	701a      	strb	r2, [r3, #0]
      break;
 8005fd0:	e167      	b.n	80062a2 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005fd8:	f103 020a 	add.w	r2, r3, #10
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8005fe2:	200a      	movs	r0, #10
 8005fe4:	f003 fd6c 	bl	8009ac0 <USBH_Delay>
      break;
 8005fe8:	e15b      	b.n	80062a2 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d005      	beq.n	8006000 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005ffa:	2104      	movs	r1, #4
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006000:	2064      	movs	r0, #100	; 0x64
 8006002:	f003 fd5d 	bl	8009ac0 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f003 fbfc 	bl	8009804 <USBH_LL_GetSpeed>
 800600c:	4603      	mov	r3, r0
 800600e:	461a      	mov	r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2205      	movs	r2, #5
 800601a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800601c:	2100      	movs	r1, #0
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f001 f92f 	bl	8007282 <USBH_AllocPipe>
 8006024:	4603      	mov	r3, r0
 8006026:	461a      	mov	r2, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800602c:	2180      	movs	r1, #128	; 0x80
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f001 f927 	bl	8007282 <USBH_AllocPipe>
 8006034:	4603      	mov	r3, r0
 8006036:	461a      	mov	r2, r3
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	7919      	ldrb	r1, [r3, #4]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006050:	b292      	uxth	r2, r2
 8006052:	9202      	str	r2, [sp, #8]
 8006054:	2200      	movs	r2, #0
 8006056:	9201      	str	r2, [sp, #4]
 8006058:	9300      	str	r3, [sp, #0]
 800605a:	4603      	mov	r3, r0
 800605c:	2280      	movs	r2, #128	; 0x80
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f001 f8e0 	bl	8007224 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	7959      	ldrb	r1, [r3, #5]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006078:	b292      	uxth	r2, r2
 800607a:	9202      	str	r2, [sp, #8]
 800607c:	2200      	movs	r2, #0
 800607e:	9201      	str	r2, [sp, #4]
 8006080:	9300      	str	r3, [sp, #0]
 8006082:	4603      	mov	r3, r0
 8006084:	2200      	movs	r2, #0
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f001 f8cc 	bl	8007224 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800608c:	e109      	b.n	80062a2 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 f90c 	bl	80062ac <USBH_HandleEnum>
 8006094:	4603      	mov	r3, r0
 8006096:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006098:	7bbb      	ldrb	r3, [r7, #14]
 800609a:	b2db      	uxtb	r3, r3
 800609c:	2b00      	cmp	r3, #0
 800609e:	f040 80f3 	bne.w	8006288 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d103      	bne.n	80060bc <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2208      	movs	r2, #8
 80060b8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80060ba:	e0e5      	b.n	8006288 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2207      	movs	r2, #7
 80060c0:	701a      	strb	r2, [r3, #0]
      break;
 80060c2:	e0e1      	b.n	8006288 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	f000 80de 	beq.w	800628c <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80060d6:	2101      	movs	r1, #1
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2208      	movs	r2, #8
 80060e0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80060e2:	e0d3      	b.n	800628c <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	4619      	mov	r1, r3
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 fc20 	bl	8006934 <USBH_SetCfg>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	f040 80ca 	bne.w	8006290 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2209      	movs	r2, #9
 8006100:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006102:	e0c5      	b.n	8006290 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800610a:	f003 0320 	and.w	r3, r3, #32
 800610e:	2b00      	cmp	r3, #0
 8006110:	d00b      	beq.n	800612a <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006112:	2101      	movs	r1, #1
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 fc30 	bl	800697a <USBH_SetFeature>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	f040 80b9 	bne.w	8006294 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	220a      	movs	r2, #10
 8006126:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006128:	e0b4      	b.n	8006294 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	220a      	movs	r2, #10
 800612e:	701a      	strb	r2, [r3, #0]
      break;
 8006130:	e0b0      	b.n	8006294 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006138:	2b00      	cmp	r3, #0
 800613a:	f000 80ad 	beq.w	8006298 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2200      	movs	r2, #0
 8006142:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006146:	2300      	movs	r3, #0
 8006148:	73fb      	strb	r3, [r7, #15]
 800614a:	e016      	b.n	800617a <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800614c:	7bfa      	ldrb	r2, [r7, #15]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	32de      	adds	r2, #222	; 0xde
 8006152:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006156:	791a      	ldrb	r2, [r3, #4]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800615e:	429a      	cmp	r2, r3
 8006160:	d108      	bne.n	8006174 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006162:	7bfa      	ldrb	r2, [r7, #15]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	32de      	adds	r2, #222	; 0xde
 8006168:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006172:	e005      	b.n	8006180 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006174:	7bfb      	ldrb	r3, [r7, #15]
 8006176:	3301      	adds	r3, #1
 8006178:	73fb      	strb	r3, [r7, #15]
 800617a:	7bfb      	ldrb	r3, [r7, #15]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d0e5      	beq.n	800614c <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006186:	2b00      	cmp	r3, #0
 8006188:	d016      	beq.n	80061b8 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	4798      	blx	r3
 8006196:	4603      	mov	r3, r0
 8006198:	2b00      	cmp	r3, #0
 800619a:	d109      	bne.n	80061b0 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2206      	movs	r2, #6
 80061a0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80061a8:	2103      	movs	r1, #3
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80061ae:	e073      	b.n	8006298 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	220d      	movs	r2, #13
 80061b4:	701a      	strb	r2, [r3, #0]
      break;
 80061b6:	e06f      	b.n	8006298 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	220d      	movs	r2, #13
 80061bc:	701a      	strb	r2, [r3, #0]
      break;
 80061be:	e06b      	b.n	8006298 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d017      	beq.n	80061fa <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061d0:	691b      	ldr	r3, [r3, #16]
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	4798      	blx	r3
 80061d6:	4603      	mov	r3, r0
 80061d8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80061da:	7bbb      	ldrb	r3, [r7, #14]
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d103      	bne.n	80061ea <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	220b      	movs	r2, #11
 80061e6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80061e8:	e058      	b.n	800629c <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 80061ea:	7bbb      	ldrb	r3, [r7, #14]
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	2b02      	cmp	r3, #2
 80061f0:	d154      	bne.n	800629c <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	220d      	movs	r2, #13
 80061f6:	701a      	strb	r2, [r3, #0]
      break;
 80061f8:	e050      	b.n	800629c <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	220d      	movs	r2, #13
 80061fe:	701a      	strb	r2, [r3, #0]
      break;
 8006200:	e04c      	b.n	800629c <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006208:	2b00      	cmp	r3, #0
 800620a:	d049      	beq.n	80062a0 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006212:	695b      	ldr	r3, [r3, #20]
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	4798      	blx	r3
      }
      break;
 8006218:	e042      	b.n	80062a0 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f7ff fd72 	bl	8005d0c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800622e:	2b00      	cmp	r3, #0
 8006230:	d009      	beq.n	8006246 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800624c:	2b00      	cmp	r3, #0
 800624e:	d005      	beq.n	800625c <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006256:	2105      	movs	r1, #5
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006262:	b2db      	uxtb	r3, r3
 8006264:	2b01      	cmp	r3, #1
 8006266:	d107      	bne.n	8006278 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f7ff fe2b 	bl	8005ecc <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006276:	e014      	b.n	80062a2 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f003 fa8d 	bl	8009798 <USBH_LL_Start>
      break;
 800627e:	e010      	b.n	80062a2 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8006280:	bf00      	nop
 8006282:	e00e      	b.n	80062a2 <USBH_Process+0x3b6>
      break;
 8006284:	bf00      	nop
 8006286:	e00c      	b.n	80062a2 <USBH_Process+0x3b6>
      break;
 8006288:	bf00      	nop
 800628a:	e00a      	b.n	80062a2 <USBH_Process+0x3b6>
    break;
 800628c:	bf00      	nop
 800628e:	e008      	b.n	80062a2 <USBH_Process+0x3b6>
      break;
 8006290:	bf00      	nop
 8006292:	e006      	b.n	80062a2 <USBH_Process+0x3b6>
      break;
 8006294:	bf00      	nop
 8006296:	e004      	b.n	80062a2 <USBH_Process+0x3b6>
      break;
 8006298:	bf00      	nop
 800629a:	e002      	b.n	80062a2 <USBH_Process+0x3b6>
      break;
 800629c:	bf00      	nop
 800629e:	e000      	b.n	80062a2 <USBH_Process+0x3b6>
      break;
 80062a0:	bf00      	nop
  }
  return USBH_OK;
 80062a2:	2300      	movs	r3, #0
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3710      	adds	r7, #16
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b088      	sub	sp, #32
 80062b0:	af04      	add	r7, sp, #16
 80062b2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80062b4:	2301      	movs	r3, #1
 80062b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80062b8:	2301      	movs	r3, #1
 80062ba:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	785b      	ldrb	r3, [r3, #1]
 80062c0:	2b07      	cmp	r3, #7
 80062c2:	f200 81c1 	bhi.w	8006648 <USBH_HandleEnum+0x39c>
 80062c6:	a201      	add	r2, pc, #4	; (adr r2, 80062cc <USBH_HandleEnum+0x20>)
 80062c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062cc:	080062ed 	.word	0x080062ed
 80062d0:	080063ab 	.word	0x080063ab
 80062d4:	08006415 	.word	0x08006415
 80062d8:	080064a3 	.word	0x080064a3
 80062dc:	0800650d 	.word	0x0800650d
 80062e0:	0800657d 	.word	0x0800657d
 80062e4:	080065c3 	.word	0x080065c3
 80062e8:	08006609 	.word	0x08006609
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80062ec:	2108      	movs	r1, #8
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 fa50 	bl	8006794 <USBH_Get_DevDesc>
 80062f4:	4603      	mov	r3, r0
 80062f6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80062f8:	7bbb      	ldrb	r3, [r7, #14]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d130      	bne.n	8006360 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2201      	movs	r2, #1
 800630c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	7919      	ldrb	r1, [r3, #4]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006322:	b292      	uxth	r2, r2
 8006324:	9202      	str	r2, [sp, #8]
 8006326:	2200      	movs	r2, #0
 8006328:	9201      	str	r2, [sp, #4]
 800632a:	9300      	str	r3, [sp, #0]
 800632c:	4603      	mov	r3, r0
 800632e:	2280      	movs	r2, #128	; 0x80
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 ff77 	bl	8007224 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	7959      	ldrb	r1, [r3, #5]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800634a:	b292      	uxth	r2, r2
 800634c:	9202      	str	r2, [sp, #8]
 800634e:	2200      	movs	r2, #0
 8006350:	9201      	str	r2, [sp, #4]
 8006352:	9300      	str	r3, [sp, #0]
 8006354:	4603      	mov	r3, r0
 8006356:	2200      	movs	r2, #0
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f000 ff63 	bl	8007224 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800635e:	e175      	b.n	800664c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006360:	7bbb      	ldrb	r3, [r7, #14]
 8006362:	2b03      	cmp	r3, #3
 8006364:	f040 8172 	bne.w	800664c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800636e:	3301      	adds	r3, #1
 8006370:	b2da      	uxtb	r2, r3
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800637e:	2b03      	cmp	r3, #3
 8006380:	d903      	bls.n	800638a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	220d      	movs	r2, #13
 8006386:	701a      	strb	r2, [r3, #0]
      break;
 8006388:	e160      	b.n	800664c <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	795b      	ldrb	r3, [r3, #5]
 800638e:	4619      	mov	r1, r3
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 ff97 	bl	80072c4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	791b      	ldrb	r3, [r3, #4]
 800639a:	4619      	mov	r1, r3
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f000 ff91 	bl	80072c4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	701a      	strb	r2, [r3, #0]
      break;
 80063a8:	e150      	b.n	800664c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80063aa:	2112      	movs	r1, #18
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f000 f9f1 	bl	8006794 <USBH_Get_DevDesc>
 80063b2:	4603      	mov	r3, r0
 80063b4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80063b6:	7bbb      	ldrb	r3, [r7, #14]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d103      	bne.n	80063c4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2202      	movs	r2, #2
 80063c0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80063c2:	e145      	b.n	8006650 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80063c4:	7bbb      	ldrb	r3, [r7, #14]
 80063c6:	2b03      	cmp	r3, #3
 80063c8:	f040 8142 	bne.w	8006650 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80063d2:	3301      	adds	r3, #1
 80063d4:	b2da      	uxtb	r2, r3
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80063e2:	2b03      	cmp	r3, #3
 80063e4:	d903      	bls.n	80063ee <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	220d      	movs	r2, #13
 80063ea:	701a      	strb	r2, [r3, #0]
      break;
 80063ec:	e130      	b.n	8006650 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	795b      	ldrb	r3, [r3, #5]
 80063f2:	4619      	mov	r1, r3
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 ff65 	bl	80072c4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	791b      	ldrb	r3, [r3, #4]
 80063fe:	4619      	mov	r1, r3
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 ff5f 	bl	80072c4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	701a      	strb	r2, [r3, #0]
      break;
 8006412:	e11d      	b.n	8006650 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006414:	2101      	movs	r1, #1
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 fa68 	bl	80068ec <USBH_SetAddress>
 800641c:	4603      	mov	r3, r0
 800641e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006420:	7bbb      	ldrb	r3, [r7, #14]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d132      	bne.n	800648c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006426:	2002      	movs	r0, #2
 8006428:	f003 fb4a 	bl	8009ac0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2203      	movs	r2, #3
 8006438:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	7919      	ldrb	r1, [r3, #4]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800644e:	b292      	uxth	r2, r2
 8006450:	9202      	str	r2, [sp, #8]
 8006452:	2200      	movs	r2, #0
 8006454:	9201      	str	r2, [sp, #4]
 8006456:	9300      	str	r3, [sp, #0]
 8006458:	4603      	mov	r3, r0
 800645a:	2280      	movs	r2, #128	; 0x80
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 fee1 	bl	8007224 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	7959      	ldrb	r1, [r3, #5]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006476:	b292      	uxth	r2, r2
 8006478:	9202      	str	r2, [sp, #8]
 800647a:	2200      	movs	r2, #0
 800647c:	9201      	str	r2, [sp, #4]
 800647e:	9300      	str	r3, [sp, #0]
 8006480:	4603      	mov	r3, r0
 8006482:	2200      	movs	r2, #0
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f000 fecd 	bl	8007224 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800648a:	e0e3      	b.n	8006654 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800648c:	7bbb      	ldrb	r3, [r7, #14]
 800648e:	2b03      	cmp	r3, #3
 8006490:	f040 80e0 	bne.w	8006654 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	220d      	movs	r2, #13
 8006498:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	705a      	strb	r2, [r3, #1]
      break;
 80064a0:	e0d8      	b.n	8006654 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80064a2:	2109      	movs	r1, #9
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f000 f99d 	bl	80067e4 <USBH_Get_CfgDesc>
 80064aa:	4603      	mov	r3, r0
 80064ac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80064ae:	7bbb      	ldrb	r3, [r7, #14]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d103      	bne.n	80064bc <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2204      	movs	r2, #4
 80064b8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80064ba:	e0cd      	b.n	8006658 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80064bc:	7bbb      	ldrb	r3, [r7, #14]
 80064be:	2b03      	cmp	r3, #3
 80064c0:	f040 80ca 	bne.w	8006658 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80064ca:	3301      	adds	r3, #1
 80064cc:	b2da      	uxtb	r2, r3
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80064da:	2b03      	cmp	r3, #3
 80064dc:	d903      	bls.n	80064e6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	220d      	movs	r2, #13
 80064e2:	701a      	strb	r2, [r3, #0]
      break;
 80064e4:	e0b8      	b.n	8006658 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	795b      	ldrb	r3, [r3, #5]
 80064ea:	4619      	mov	r1, r3
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 fee9 	bl	80072c4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	791b      	ldrb	r3, [r3, #4]
 80064f6:	4619      	mov	r1, r3
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f000 fee3 	bl	80072c4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	701a      	strb	r2, [r3, #0]
      break;
 800650a:	e0a5      	b.n	8006658 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006512:	4619      	mov	r1, r3
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 f965 	bl	80067e4 <USBH_Get_CfgDesc>
 800651a:	4603      	mov	r3, r0
 800651c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800651e:	7bbb      	ldrb	r3, [r7, #14]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d103      	bne.n	800652c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2205      	movs	r2, #5
 8006528:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800652a:	e097      	b.n	800665c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800652c:	7bbb      	ldrb	r3, [r7, #14]
 800652e:	2b03      	cmp	r3, #3
 8006530:	f040 8094 	bne.w	800665c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800653a:	3301      	adds	r3, #1
 800653c:	b2da      	uxtb	r2, r3
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800654a:	2b03      	cmp	r3, #3
 800654c:	d903      	bls.n	8006556 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	220d      	movs	r2, #13
 8006552:	701a      	strb	r2, [r3, #0]
      break;
 8006554:	e082      	b.n	800665c <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	795b      	ldrb	r3, [r3, #5]
 800655a:	4619      	mov	r1, r3
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 feb1 	bl	80072c4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	791b      	ldrb	r3, [r3, #4]
 8006566:	4619      	mov	r1, r3
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f000 feab 	bl	80072c4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	701a      	strb	r2, [r3, #0]
      break;
 800657a:	e06f      	b.n	800665c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006582:	2b00      	cmp	r3, #0
 8006584:	d019      	beq.n	80065ba <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006592:	23ff      	movs	r3, #255	; 0xff
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f000 f949 	bl	800682c <USBH_Get_StringDesc>
 800659a:	4603      	mov	r3, r0
 800659c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800659e:	7bbb      	ldrb	r3, [r7, #14]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d103      	bne.n	80065ac <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2206      	movs	r2, #6
 80065a8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80065aa:	e059      	b.n	8006660 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80065ac:	7bbb      	ldrb	r3, [r7, #14]
 80065ae:	2b03      	cmp	r3, #3
 80065b0:	d156      	bne.n	8006660 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2206      	movs	r2, #6
 80065b6:	705a      	strb	r2, [r3, #1]
      break;
 80065b8:	e052      	b.n	8006660 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2206      	movs	r2, #6
 80065be:	705a      	strb	r2, [r3, #1]
      break;
 80065c0:	e04e      	b.n	8006660 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d019      	beq.n	8006600 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80065d8:	23ff      	movs	r3, #255	; 0xff
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 f926 	bl	800682c <USBH_Get_StringDesc>
 80065e0:	4603      	mov	r3, r0
 80065e2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80065e4:	7bbb      	ldrb	r3, [r7, #14]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d103      	bne.n	80065f2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2207      	movs	r2, #7
 80065ee:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80065f0:	e038      	b.n	8006664 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80065f2:	7bbb      	ldrb	r3, [r7, #14]
 80065f4:	2b03      	cmp	r3, #3
 80065f6:	d135      	bne.n	8006664 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2207      	movs	r2, #7
 80065fc:	705a      	strb	r2, [r3, #1]
      break;
 80065fe:	e031      	b.n	8006664 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2207      	movs	r2, #7
 8006604:	705a      	strb	r2, [r3, #1]
      break;
 8006606:	e02d      	b.n	8006664 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800660e:	2b00      	cmp	r3, #0
 8006610:	d017      	beq.n	8006642 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800661e:	23ff      	movs	r3, #255	; 0xff
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f000 f903 	bl	800682c <USBH_Get_StringDesc>
 8006626:	4603      	mov	r3, r0
 8006628:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800662a:	7bbb      	ldrb	r3, [r7, #14]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d102      	bne.n	8006636 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006630:	2300      	movs	r3, #0
 8006632:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006634:	e018      	b.n	8006668 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006636:	7bbb      	ldrb	r3, [r7, #14]
 8006638:	2b03      	cmp	r3, #3
 800663a:	d115      	bne.n	8006668 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800663c:	2300      	movs	r3, #0
 800663e:	73fb      	strb	r3, [r7, #15]
      break;
 8006640:	e012      	b.n	8006668 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8006642:	2300      	movs	r3, #0
 8006644:	73fb      	strb	r3, [r7, #15]
      break;
 8006646:	e00f      	b.n	8006668 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8006648:	bf00      	nop
 800664a:	e00e      	b.n	800666a <USBH_HandleEnum+0x3be>
      break;
 800664c:	bf00      	nop
 800664e:	e00c      	b.n	800666a <USBH_HandleEnum+0x3be>
      break;
 8006650:	bf00      	nop
 8006652:	e00a      	b.n	800666a <USBH_HandleEnum+0x3be>
      break;
 8006654:	bf00      	nop
 8006656:	e008      	b.n	800666a <USBH_HandleEnum+0x3be>
      break;
 8006658:	bf00      	nop
 800665a:	e006      	b.n	800666a <USBH_HandleEnum+0x3be>
      break;
 800665c:	bf00      	nop
 800665e:	e004      	b.n	800666a <USBH_HandleEnum+0x3be>
      break;
 8006660:	bf00      	nop
 8006662:	e002      	b.n	800666a <USBH_HandleEnum+0x3be>
      break;
 8006664:	bf00      	nop
 8006666:	e000      	b.n	800666a <USBH_HandleEnum+0x3be>
      break;
 8006668:	bf00      	nop
  }
  return Status;
 800666a:	7bfb      	ldrb	r3, [r7, #15]
}
 800666c:	4618      	mov	r0, r3
 800666e:	3710      	adds	r7, #16
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	683a      	ldr	r2, [r7, #0]
 8006682:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006686:	bf00      	nop
 8006688:	370c      	adds	r7, #12
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr

08006692 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006692:	b580      	push	{r7, lr}
 8006694:	b082      	sub	sp, #8
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80066a0:	1c5a      	adds	r2, r3, #1
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 f804 	bl	80066b6 <USBH_HandleSof>
}
 80066ae:	bf00      	nop
 80066b0:	3708      	adds	r7, #8
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}

080066b6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80066b6:	b580      	push	{r7, lr}
 80066b8:	b082      	sub	sp, #8
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	2b0b      	cmp	r3, #11
 80066c6:	d10a      	bne.n	80066de <USBH_HandleSof+0x28>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d005      	beq.n	80066de <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066d8:	699b      	ldr	r3, [r3, #24]
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	4798      	blx	r3
  }
}
 80066de:	bf00      	nop
 80066e0:	3708      	adds	r7, #8
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}

080066e6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80066e6:	b480      	push	{r7}
 80066e8:	b083      	sub	sp, #12
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2201      	movs	r2, #1
 80066f2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80066f6:	bf00      	nop
}
 80066f8:	370c      	adds	r7, #12
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr

08006702 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006702:	b480      	push	{r7}
 8006704:	b083      	sub	sp, #12
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006712:	bf00      	nop
}
 8006714:	370c      	adds	r7, #12
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr

0800671e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800671e:	b480      	push	{r7}
 8006720:	b083      	sub	sp, #12
 8006722:	af00      	add	r7, sp, #0
 8006724:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2201      	movs	r2, #1
 800672a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800673e:	2300      	movs	r3, #0
}
 8006740:	4618      	mov	r0, r3
 8006742:	370c      	adds	r7, #12
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr

0800674c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b082      	sub	sp, #8
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2201      	movs	r2, #1
 8006758:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f003 f82e 	bl	80097ce <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	791b      	ldrb	r3, [r3, #4]
 8006776:	4619      	mov	r1, r3
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 fda3 	bl	80072c4 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	795b      	ldrb	r3, [r3, #5]
 8006782:	4619      	mov	r1, r3
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 fd9d 	bl	80072c4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800678a:	2300      	movs	r3, #0
}
 800678c:	4618      	mov	r0, r3
 800678e:	3708      	adds	r7, #8
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b086      	sub	sp, #24
 8006798:	af02      	add	r7, sp, #8
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	460b      	mov	r3, r1
 800679e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80067a6:	78fb      	ldrb	r3, [r7, #3]
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	9300      	str	r3, [sp, #0]
 80067ac:	4613      	mov	r3, r2
 80067ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80067b2:	2100      	movs	r1, #0
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 f864 	bl	8006882 <USBH_GetDescriptor>
 80067ba:	4603      	mov	r3, r0
 80067bc:	73fb      	strb	r3, [r7, #15]
 80067be:	7bfb      	ldrb	r3, [r7, #15]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d10a      	bne.n	80067da <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f203 3026 	addw	r0, r3, #806	; 0x326
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80067d0:	78fa      	ldrb	r2, [r7, #3]
 80067d2:	b292      	uxth	r2, r2
 80067d4:	4619      	mov	r1, r3
 80067d6:	f000 f918 	bl	8006a0a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80067da:	7bfb      	ldrb	r3, [r7, #15]
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3710      	adds	r7, #16
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b086      	sub	sp, #24
 80067e8:	af02      	add	r7, sp, #8
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	460b      	mov	r3, r1
 80067ee:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	331c      	adds	r3, #28
 80067f4:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80067f6:	887b      	ldrh	r3, [r7, #2]
 80067f8:	9300      	str	r3, [sp, #0]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006800:	2100      	movs	r1, #0
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 f83d 	bl	8006882 <USBH_GetDescriptor>
 8006808:	4603      	mov	r3, r0
 800680a:	72fb      	strb	r3, [r7, #11]
 800680c:	7afb      	ldrb	r3, [r7, #11]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d107      	bne.n	8006822 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006818:	887a      	ldrh	r2, [r7, #2]
 800681a:	68f9      	ldr	r1, [r7, #12]
 800681c:	4618      	mov	r0, r3
 800681e:	f000 f964 	bl	8006aea <USBH_ParseCfgDesc>
  }

  return status;
 8006822:	7afb      	ldrb	r3, [r7, #11]
}
 8006824:	4618      	mov	r0, r3
 8006826:	3710      	adds	r7, #16
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b088      	sub	sp, #32
 8006830:	af02      	add	r7, sp, #8
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	607a      	str	r2, [r7, #4]
 8006836:	461a      	mov	r2, r3
 8006838:	460b      	mov	r3, r1
 800683a:	72fb      	strb	r3, [r7, #11]
 800683c:	4613      	mov	r3, r2
 800683e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8006840:	7afb      	ldrb	r3, [r7, #11]
 8006842:	b29b      	uxth	r3, r3
 8006844:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006848:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8006850:	893b      	ldrh	r3, [r7, #8]
 8006852:	9300      	str	r3, [sp, #0]
 8006854:	460b      	mov	r3, r1
 8006856:	2100      	movs	r1, #0
 8006858:	68f8      	ldr	r0, [r7, #12]
 800685a:	f000 f812 	bl	8006882 <USBH_GetDescriptor>
 800685e:	4603      	mov	r3, r0
 8006860:	75fb      	strb	r3, [r7, #23]
 8006862:	7dfb      	ldrb	r3, [r7, #23]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d107      	bne.n	8006878 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800686e:	893a      	ldrh	r2, [r7, #8]
 8006870:	6879      	ldr	r1, [r7, #4]
 8006872:	4618      	mov	r0, r3
 8006874:	f000 fa37 	bl	8006ce6 <USBH_ParseStringDesc>
  }

  return status;
 8006878:	7dfb      	ldrb	r3, [r7, #23]
}
 800687a:	4618      	mov	r0, r3
 800687c:	3718      	adds	r7, #24
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}

08006882 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8006882:	b580      	push	{r7, lr}
 8006884:	b084      	sub	sp, #16
 8006886:	af00      	add	r7, sp, #0
 8006888:	60f8      	str	r0, [r7, #12]
 800688a:	607b      	str	r3, [r7, #4]
 800688c:	460b      	mov	r3, r1
 800688e:	72fb      	strb	r3, [r7, #11]
 8006890:	4613      	mov	r3, r2
 8006892:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	789b      	ldrb	r3, [r3, #2]
 8006898:	2b01      	cmp	r3, #1
 800689a:	d11c      	bne.n	80068d6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800689c:	7afb      	ldrb	r3, [r7, #11]
 800689e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80068a2:	b2da      	uxtb	r2, r3
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2206      	movs	r2, #6
 80068ac:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	893a      	ldrh	r2, [r7, #8]
 80068b2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80068b4:	893b      	ldrh	r3, [r7, #8]
 80068b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80068ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068be:	d104      	bne.n	80068ca <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f240 4209 	movw	r2, #1033	; 0x409
 80068c6:	829a      	strh	r2, [r3, #20]
 80068c8:	e002      	b.n	80068d0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2200      	movs	r2, #0
 80068ce:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	8b3a      	ldrh	r2, [r7, #24]
 80068d4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80068d6:	8b3b      	ldrh	r3, [r7, #24]
 80068d8:	461a      	mov	r2, r3
 80068da:	6879      	ldr	r1, [r7, #4]
 80068dc:	68f8      	ldr	r0, [r7, #12]
 80068de:	f000 fa50 	bl	8006d82 <USBH_CtlReq>
 80068e2:	4603      	mov	r3, r0
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3710      	adds	r7, #16
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b082      	sub	sp, #8
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	460b      	mov	r3, r1
 80068f6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	789b      	ldrb	r3, [r3, #2]
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d10f      	bne.n	8006920 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2205      	movs	r2, #5
 800690a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800690c:	78fb      	ldrb	r3, [r7, #3]
 800690e:	b29a      	uxth	r2, r3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006920:	2200      	movs	r2, #0
 8006922:	2100      	movs	r1, #0
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 fa2c 	bl	8006d82 <USBH_CtlReq>
 800692a:	4603      	mov	r3, r0
}
 800692c:	4618      	mov	r0, r3
 800692e:	3708      	adds	r7, #8
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	460b      	mov	r3, r1
 800693e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	789b      	ldrb	r3, [r3, #2]
 8006944:	2b01      	cmp	r3, #1
 8006946:	d10e      	bne.n	8006966 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2209      	movs	r2, #9
 8006952:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	887a      	ldrh	r2, [r7, #2]
 8006958:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2200      	movs	r2, #0
 800695e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006966:	2200      	movs	r2, #0
 8006968:	2100      	movs	r1, #0
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 fa09 	bl	8006d82 <USBH_CtlReq>
 8006970:	4603      	mov	r3, r0
}
 8006972:	4618      	mov	r0, r3
 8006974:	3708      	adds	r7, #8
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}

0800697a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800697a:	b580      	push	{r7, lr}
 800697c:	b082      	sub	sp, #8
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
 8006982:	460b      	mov	r3, r1
 8006984:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	789b      	ldrb	r3, [r3, #2]
 800698a:	2b01      	cmp	r3, #1
 800698c:	d10f      	bne.n	80069ae <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2203      	movs	r2, #3
 8006998:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800699a:	78fb      	ldrb	r3, [r7, #3]
 800699c:	b29a      	uxth	r2, r3
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80069ae:	2200      	movs	r2, #0
 80069b0:	2100      	movs	r1, #0
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 f9e5 	bl	8006d82 <USBH_CtlReq>
 80069b8:	4603      	mov	r3, r0
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3708      	adds	r7, #8
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}

080069c2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80069c2:	b580      	push	{r7, lr}
 80069c4:	b082      	sub	sp, #8
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
 80069ca:	460b      	mov	r3, r1
 80069cc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	789b      	ldrb	r3, [r3, #2]
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d10f      	bne.n	80069f6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2202      	movs	r2, #2
 80069da:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2200      	movs	r2, #0
 80069e6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80069e8:	78fb      	ldrb	r3, [r7, #3]
 80069ea:	b29a      	uxth	r2, r3
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80069f6:	2200      	movs	r2, #0
 80069f8:	2100      	movs	r1, #0
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 f9c1 	bl	8006d82 <USBH_CtlReq>
 8006a00:	4603      	mov	r3, r0
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3708      	adds	r7, #8
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}

08006a0a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8006a0a:	b480      	push	{r7}
 8006a0c:	b085      	sub	sp, #20
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	60f8      	str	r0, [r7, #12]
 8006a12:	60b9      	str	r1, [r7, #8]
 8006a14:	4613      	mov	r3, r2
 8006a16:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	781a      	ldrb	r2, [r3, #0]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	785a      	ldrb	r2, [r3, #1]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	3302      	adds	r3, #2
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	b29a      	uxth	r2, r3
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	3303      	adds	r3, #3
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	021b      	lsls	r3, r3, #8
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	b29a      	uxth	r2, r3
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	791a      	ldrb	r2, [r3, #4]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	795a      	ldrb	r2, [r3, #5]
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	799a      	ldrb	r2, [r3, #6]
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	79da      	ldrb	r2, [r3, #7]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8006a64:	88fb      	ldrh	r3, [r7, #6]
 8006a66:	2b08      	cmp	r3, #8
 8006a68:	d939      	bls.n	8006ade <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	3308      	adds	r3, #8
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	b29a      	uxth	r2, r3
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	3309      	adds	r3, #9
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	021b      	lsls	r3, r3, #8
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	b29a      	uxth	r2, r3
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	330a      	adds	r3, #10
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	b29a      	uxth	r2, r3
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	330b      	adds	r3, #11
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	021b      	lsls	r3, r3, #8
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	b29a      	uxth	r2, r3
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	330c      	adds	r3, #12
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	b29a      	uxth	r2, r3
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	330d      	adds	r3, #13
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	021b      	lsls	r3, r3, #8
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	b29a      	uxth	r2, r3
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	7b9a      	ldrb	r2, [r3, #14]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	7bda      	ldrb	r2, [r3, #15]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	7c1a      	ldrb	r2, [r3, #16]
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	7c5a      	ldrb	r2, [r3, #17]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	745a      	strb	r2, [r3, #17]
  }
}
 8006ade:	bf00      	nop
 8006ae0:	3714      	adds	r7, #20
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr

08006aea <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8006aea:	b580      	push	{r7, lr}
 8006aec:	b08a      	sub	sp, #40	; 0x28
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	60f8      	str	r0, [r7, #12]
 8006af2:	60b9      	str	r1, [r7, #8]
 8006af4:	4613      	mov	r3, r2
 8006af6:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006afc:	2300      	movs	r3, #0
 8006afe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8006b02:	2300      	movs	r3, #0
 8006b04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	781a      	ldrb	r2, [r3, #0]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	785a      	ldrb	r2, [r3, #1]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	3302      	adds	r3, #2
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	b29a      	uxth	r2, r3
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	3303      	adds	r3, #3
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	021b      	lsls	r3, r3, #8
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	4313      	orrs	r3, r2
 8006b32:	b29a      	uxth	r2, r3
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	791a      	ldrb	r2, [r3, #4]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	795a      	ldrb	r2, [r3, #5]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	799a      	ldrb	r2, [r3, #6]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	79da      	ldrb	r2, [r3, #7]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	7a1a      	ldrb	r2, [r3, #8]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006b60:	88fb      	ldrh	r3, [r7, #6]
 8006b62:	2b09      	cmp	r3, #9
 8006b64:	d95f      	bls.n	8006c26 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8006b66:	2309      	movs	r3, #9
 8006b68:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006b6e:	e051      	b.n	8006c14 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006b70:	f107 0316 	add.w	r3, r7, #22
 8006b74:	4619      	mov	r1, r3
 8006b76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b78:	f000 f8e8 	bl	8006d4c <USBH_GetNextDesc>
 8006b7c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8006b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b80:	785b      	ldrb	r3, [r3, #1]
 8006b82:	2b04      	cmp	r3, #4
 8006b84:	d146      	bne.n	8006c14 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8006b86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b8a:	221a      	movs	r2, #26
 8006b8c:	fb02 f303 	mul.w	r3, r2, r3
 8006b90:	3308      	adds	r3, #8
 8006b92:	68fa      	ldr	r2, [r7, #12]
 8006b94:	4413      	add	r3, r2
 8006b96:	3302      	adds	r3, #2
 8006b98:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8006b9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b9c:	69f8      	ldr	r0, [r7, #28]
 8006b9e:	f000 f846 	bl	8006c2e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006bac:	e022      	b.n	8006bf4 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006bae:	f107 0316 	add.w	r3, r7, #22
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006bb6:	f000 f8c9 	bl	8006d4c <USBH_GetNextDesc>
 8006bba:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8006bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bbe:	785b      	ldrb	r3, [r3, #1]
 8006bc0:	2b05      	cmp	r3, #5
 8006bc2:	d117      	bne.n	8006bf4 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006bc4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006bc8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006bcc:	3201      	adds	r2, #1
 8006bce:	00d2      	lsls	r2, r2, #3
 8006bd0:	211a      	movs	r1, #26
 8006bd2:	fb01 f303 	mul.w	r3, r1, r3
 8006bd6:	4413      	add	r3, r2
 8006bd8:	3308      	adds	r3, #8
 8006bda:	68fa      	ldr	r2, [r7, #12]
 8006bdc:	4413      	add	r3, r2
 8006bde:	3304      	adds	r3, #4
 8006be0:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8006be2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006be4:	69b8      	ldr	r0, [r7, #24]
 8006be6:	f000 f851 	bl	8006c8c <USBH_ParseEPDesc>
            ep_ix++;
 8006bea:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006bee:	3301      	adds	r3, #1
 8006bf0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	791b      	ldrb	r3, [r3, #4]
 8006bf8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d204      	bcs.n	8006c0a <USBH_ParseCfgDesc+0x120>
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	885a      	ldrh	r2, [r3, #2]
 8006c04:	8afb      	ldrh	r3, [r7, #22]
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d8d1      	bhi.n	8006bae <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8006c0a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c0e:	3301      	adds	r3, #1
 8006c10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006c14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d804      	bhi.n	8006c26 <USBH_ParseCfgDesc+0x13c>
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	885a      	ldrh	r2, [r3, #2]
 8006c20:	8afb      	ldrh	r3, [r7, #22]
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d8a4      	bhi.n	8006b70 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8006c26:	bf00      	nop
 8006c28:	3728      	adds	r7, #40	; 0x28
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}

08006c2e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8006c2e:	b480      	push	{r7}
 8006c30:	b083      	sub	sp, #12
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
 8006c36:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	781a      	ldrb	r2, [r3, #0]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	785a      	ldrb	r2, [r3, #1]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	789a      	ldrb	r2, [r3, #2]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	78da      	ldrb	r2, [r3, #3]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	791a      	ldrb	r2, [r3, #4]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	795a      	ldrb	r2, [r3, #5]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	799a      	ldrb	r2, [r3, #6]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	79da      	ldrb	r2, [r3, #7]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	7a1a      	ldrb	r2, [r3, #8]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	721a      	strb	r2, [r3, #8]
}
 8006c80:	bf00      	nop
 8006c82:	370c      	adds	r7, #12
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr

08006c8c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	781a      	ldrb	r2, [r3, #0]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	785a      	ldrb	r2, [r3, #1]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	789a      	ldrb	r2, [r3, #2]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	78da      	ldrb	r2, [r3, #3]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	3304      	adds	r3, #4
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	b29a      	uxth	r2, r3
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	3305      	adds	r3, #5
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	021b      	lsls	r3, r3, #8
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	b29a      	uxth	r2, r3
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	799a      	ldrb	r2, [r3, #6]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	719a      	strb	r2, [r3, #6]
}
 8006cda:	bf00      	nop
 8006cdc:	370c      	adds	r7, #12
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr

08006ce6 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8006ce6:	b480      	push	{r7}
 8006ce8:	b087      	sub	sp, #28
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	60f8      	str	r0, [r7, #12]
 8006cee:	60b9      	str	r1, [r7, #8]
 8006cf0:	4613      	mov	r3, r2
 8006cf2:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	2b03      	cmp	r3, #3
 8006cfc:	d120      	bne.n	8006d40 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	781b      	ldrb	r3, [r3, #0]
 8006d02:	1e9a      	subs	r2, r3, #2
 8006d04:	88fb      	ldrh	r3, [r7, #6]
 8006d06:	4293      	cmp	r3, r2
 8006d08:	bf28      	it	cs
 8006d0a:	4613      	movcs	r3, r2
 8006d0c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	3302      	adds	r3, #2
 8006d12:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006d14:	2300      	movs	r3, #0
 8006d16:	82fb      	strh	r3, [r7, #22]
 8006d18:	e00b      	b.n	8006d32 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8006d1a:	8afb      	ldrh	r3, [r7, #22]
 8006d1c:	68fa      	ldr	r2, [r7, #12]
 8006d1e:	4413      	add	r3, r2
 8006d20:	781a      	ldrb	r2, [r3, #0]
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	701a      	strb	r2, [r3, #0]
      pdest++;
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	3301      	adds	r3, #1
 8006d2a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8006d2c:	8afb      	ldrh	r3, [r7, #22]
 8006d2e:	3302      	adds	r3, #2
 8006d30:	82fb      	strh	r3, [r7, #22]
 8006d32:	8afa      	ldrh	r2, [r7, #22]
 8006d34:	8abb      	ldrh	r3, [r7, #20]
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d3ef      	bcc.n	8006d1a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	701a      	strb	r2, [r3, #0]
  }
}
 8006d40:	bf00      	nop
 8006d42:	371c      	adds	r7, #28
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b085      	sub	sp, #20
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	881a      	ldrh	r2, [r3, #0]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	4413      	add	r3, r2
 8006d62:	b29a      	uxth	r2, r3
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4413      	add	r3, r2
 8006d72:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006d74:	68fb      	ldr	r3, [r7, #12]
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3714      	adds	r7, #20
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr

08006d82 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006d82:	b580      	push	{r7, lr}
 8006d84:	b086      	sub	sp, #24
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	60f8      	str	r0, [r7, #12]
 8006d8a:	60b9      	str	r1, [r7, #8]
 8006d8c:	4613      	mov	r3, r2
 8006d8e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006d90:	2301      	movs	r3, #1
 8006d92:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	789b      	ldrb	r3, [r3, #2]
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d002      	beq.n	8006da2 <USBH_CtlReq+0x20>
 8006d9c:	2b02      	cmp	r3, #2
 8006d9e:	d00f      	beq.n	8006dc0 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8006da0:	e027      	b.n	8006df2 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	68ba      	ldr	r2, [r7, #8]
 8006da6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	88fa      	ldrh	r2, [r7, #6]
 8006dac:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2201      	movs	r2, #1
 8006db2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2202      	movs	r2, #2
 8006db8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	75fb      	strb	r3, [r7, #23]
      break;
 8006dbe:	e018      	b.n	8006df2 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8006dc0:	68f8      	ldr	r0, [r7, #12]
 8006dc2:	f000 f81b 	bl	8006dfc <USBH_HandleControl>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8006dca:	7dfb      	ldrb	r3, [r7, #23]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d002      	beq.n	8006dd6 <USBH_CtlReq+0x54>
 8006dd0:	7dfb      	ldrb	r3, [r7, #23]
 8006dd2:	2b03      	cmp	r3, #3
 8006dd4:	d106      	bne.n	8006de4 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2201      	movs	r2, #1
 8006dda:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2200      	movs	r2, #0
 8006de0:	761a      	strb	r2, [r3, #24]
      break;
 8006de2:	e005      	b.n	8006df0 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8006de4:	7dfb      	ldrb	r3, [r7, #23]
 8006de6:	2b02      	cmp	r3, #2
 8006de8:	d102      	bne.n	8006df0 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2201      	movs	r2, #1
 8006dee:	709a      	strb	r2, [r3, #2]
      break;
 8006df0:	bf00      	nop
  }
  return status;
 8006df2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3718      	adds	r7, #24
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}

08006dfc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b086      	sub	sp, #24
 8006e00:	af02      	add	r7, sp, #8
 8006e02:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006e04:	2301      	movs	r3, #1
 8006e06:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	7e1b      	ldrb	r3, [r3, #24]
 8006e10:	3b01      	subs	r3, #1
 8006e12:	2b0a      	cmp	r3, #10
 8006e14:	f200 8156 	bhi.w	80070c4 <USBH_HandleControl+0x2c8>
 8006e18:	a201      	add	r2, pc, #4	; (adr r2, 8006e20 <USBH_HandleControl+0x24>)
 8006e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e1e:	bf00      	nop
 8006e20:	08006e4d 	.word	0x08006e4d
 8006e24:	08006e67 	.word	0x08006e67
 8006e28:	08006ed1 	.word	0x08006ed1
 8006e2c:	08006ef7 	.word	0x08006ef7
 8006e30:	08006f2f 	.word	0x08006f2f
 8006e34:	08006f59 	.word	0x08006f59
 8006e38:	08006fab 	.word	0x08006fab
 8006e3c:	08006fcd 	.word	0x08006fcd
 8006e40:	08007009 	.word	0x08007009
 8006e44:	0800702f 	.word	0x0800702f
 8006e48:	0800706d 	.word	0x0800706d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f103 0110 	add.w	r1, r3, #16
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	795b      	ldrb	r3, [r3, #5]
 8006e56:	461a      	mov	r2, r3
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 f943 	bl	80070e4 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2202      	movs	r2, #2
 8006e62:	761a      	strb	r2, [r3, #24]
      break;
 8006e64:	e139      	b.n	80070da <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	795b      	ldrb	r3, [r3, #5]
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f002 fd9d 	bl	80099ac <USBH_LL_GetURBState>
 8006e72:	4603      	mov	r3, r0
 8006e74:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8006e76:	7bbb      	ldrb	r3, [r7, #14]
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d11e      	bne.n	8006eba <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	7c1b      	ldrb	r3, [r3, #16]
 8006e80:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006e84:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	8adb      	ldrh	r3, [r3, #22]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00a      	beq.n	8006ea4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8006e8e:	7b7b      	ldrb	r3, [r7, #13]
 8006e90:	2b80      	cmp	r3, #128	; 0x80
 8006e92:	d103      	bne.n	8006e9c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2203      	movs	r2, #3
 8006e98:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006e9a:	e115      	b.n	80070c8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2205      	movs	r2, #5
 8006ea0:	761a      	strb	r2, [r3, #24]
      break;
 8006ea2:	e111      	b.n	80070c8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8006ea4:	7b7b      	ldrb	r3, [r7, #13]
 8006ea6:	2b80      	cmp	r3, #128	; 0x80
 8006ea8:	d103      	bne.n	8006eb2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2209      	movs	r2, #9
 8006eae:	761a      	strb	r2, [r3, #24]
      break;
 8006eb0:	e10a      	b.n	80070c8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2207      	movs	r2, #7
 8006eb6:	761a      	strb	r2, [r3, #24]
      break;
 8006eb8:	e106      	b.n	80070c8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006eba:	7bbb      	ldrb	r3, [r7, #14]
 8006ebc:	2b04      	cmp	r3, #4
 8006ebe:	d003      	beq.n	8006ec8 <USBH_HandleControl+0xcc>
 8006ec0:	7bbb      	ldrb	r3, [r7, #14]
 8006ec2:	2b02      	cmp	r3, #2
 8006ec4:	f040 8100 	bne.w	80070c8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	220b      	movs	r2, #11
 8006ecc:	761a      	strb	r2, [r3, #24]
      break;
 8006ece:	e0fb      	b.n	80070c8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006ed6:	b29a      	uxth	r2, r3
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6899      	ldr	r1, [r3, #8]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	899a      	ldrh	r2, [r3, #12]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	791b      	ldrb	r3, [r3, #4]
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f000 f93a 	bl	8007162 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2204      	movs	r2, #4
 8006ef2:	761a      	strb	r2, [r3, #24]
      break;
 8006ef4:	e0f1      	b.n	80070da <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	791b      	ldrb	r3, [r3, #4]
 8006efa:	4619      	mov	r1, r3
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f002 fd55 	bl	80099ac <USBH_LL_GetURBState>
 8006f02:	4603      	mov	r3, r0
 8006f04:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8006f06:	7bbb      	ldrb	r3, [r7, #14]
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d102      	bne.n	8006f12 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2209      	movs	r2, #9
 8006f10:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8006f12:	7bbb      	ldrb	r3, [r7, #14]
 8006f14:	2b05      	cmp	r3, #5
 8006f16:	d102      	bne.n	8006f1e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8006f18:	2303      	movs	r3, #3
 8006f1a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006f1c:	e0d6      	b.n	80070cc <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8006f1e:	7bbb      	ldrb	r3, [r7, #14]
 8006f20:	2b04      	cmp	r3, #4
 8006f22:	f040 80d3 	bne.w	80070cc <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	220b      	movs	r2, #11
 8006f2a:	761a      	strb	r2, [r3, #24]
      break;
 8006f2c:	e0ce      	b.n	80070cc <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6899      	ldr	r1, [r3, #8]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	899a      	ldrh	r2, [r3, #12]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	795b      	ldrb	r3, [r3, #5]
 8006f3a:	2001      	movs	r0, #1
 8006f3c:	9000      	str	r0, [sp, #0]
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f000 f8ea 	bl	8007118 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006f4a:	b29a      	uxth	r2, r3
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2206      	movs	r2, #6
 8006f54:	761a      	strb	r2, [r3, #24]
      break;
 8006f56:	e0c0      	b.n	80070da <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	795b      	ldrb	r3, [r3, #5]
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f002 fd24 	bl	80099ac <USBH_LL_GetURBState>
 8006f64:	4603      	mov	r3, r0
 8006f66:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006f68:	7bbb      	ldrb	r3, [r7, #14]
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d103      	bne.n	8006f76 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2207      	movs	r2, #7
 8006f72:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006f74:	e0ac      	b.n	80070d0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8006f76:	7bbb      	ldrb	r3, [r7, #14]
 8006f78:	2b05      	cmp	r3, #5
 8006f7a:	d105      	bne.n	8006f88 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	220c      	movs	r2, #12
 8006f80:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8006f82:	2303      	movs	r3, #3
 8006f84:	73fb      	strb	r3, [r7, #15]
      break;
 8006f86:	e0a3      	b.n	80070d0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006f88:	7bbb      	ldrb	r3, [r7, #14]
 8006f8a:	2b02      	cmp	r3, #2
 8006f8c:	d103      	bne.n	8006f96 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2205      	movs	r2, #5
 8006f92:	761a      	strb	r2, [r3, #24]
      break;
 8006f94:	e09c      	b.n	80070d0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8006f96:	7bbb      	ldrb	r3, [r7, #14]
 8006f98:	2b04      	cmp	r3, #4
 8006f9a:	f040 8099 	bne.w	80070d0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	220b      	movs	r2, #11
 8006fa2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8006fa4:	2302      	movs	r3, #2
 8006fa6:	73fb      	strb	r3, [r7, #15]
      break;
 8006fa8:	e092      	b.n	80070d0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	791b      	ldrb	r3, [r3, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	2100      	movs	r1, #0
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 f8d5 	bl	8007162 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006fbe:	b29a      	uxth	r2, r3
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2208      	movs	r2, #8
 8006fc8:	761a      	strb	r2, [r3, #24]

      break;
 8006fca:	e086      	b.n	80070da <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	791b      	ldrb	r3, [r3, #4]
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f002 fcea 	bl	80099ac <USBH_LL_GetURBState>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006fdc:	7bbb      	ldrb	r3, [r7, #14]
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d105      	bne.n	8006fee <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	220d      	movs	r2, #13
 8006fe6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006fec:	e072      	b.n	80070d4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8006fee:	7bbb      	ldrb	r3, [r7, #14]
 8006ff0:	2b04      	cmp	r3, #4
 8006ff2:	d103      	bne.n	8006ffc <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	220b      	movs	r2, #11
 8006ff8:	761a      	strb	r2, [r3, #24]
      break;
 8006ffa:	e06b      	b.n	80070d4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8006ffc:	7bbb      	ldrb	r3, [r7, #14]
 8006ffe:	2b05      	cmp	r3, #5
 8007000:	d168      	bne.n	80070d4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007002:	2303      	movs	r3, #3
 8007004:	73fb      	strb	r3, [r7, #15]
      break;
 8007006:	e065      	b.n	80070d4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	795b      	ldrb	r3, [r3, #5]
 800700c:	2201      	movs	r2, #1
 800700e:	9200      	str	r2, [sp, #0]
 8007010:	2200      	movs	r2, #0
 8007012:	2100      	movs	r1, #0
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f000 f87f 	bl	8007118 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007020:	b29a      	uxth	r2, r3
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	220a      	movs	r2, #10
 800702a:	761a      	strb	r2, [r3, #24]
      break;
 800702c:	e055      	b.n	80070da <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	795b      	ldrb	r3, [r3, #5]
 8007032:	4619      	mov	r1, r3
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f002 fcb9 	bl	80099ac <USBH_LL_GetURBState>
 800703a:	4603      	mov	r3, r0
 800703c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800703e:	7bbb      	ldrb	r3, [r7, #14]
 8007040:	2b01      	cmp	r3, #1
 8007042:	d105      	bne.n	8007050 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007044:	2300      	movs	r3, #0
 8007046:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	220d      	movs	r2, #13
 800704c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800704e:	e043      	b.n	80070d8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007050:	7bbb      	ldrb	r3, [r7, #14]
 8007052:	2b02      	cmp	r3, #2
 8007054:	d103      	bne.n	800705e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2209      	movs	r2, #9
 800705a:	761a      	strb	r2, [r3, #24]
      break;
 800705c:	e03c      	b.n	80070d8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800705e:	7bbb      	ldrb	r3, [r7, #14]
 8007060:	2b04      	cmp	r3, #4
 8007062:	d139      	bne.n	80070d8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	220b      	movs	r2, #11
 8007068:	761a      	strb	r2, [r3, #24]
      break;
 800706a:	e035      	b.n	80070d8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	7e5b      	ldrb	r3, [r3, #25]
 8007070:	3301      	adds	r3, #1
 8007072:	b2da      	uxtb	r2, r3
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	765a      	strb	r2, [r3, #25]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	7e5b      	ldrb	r3, [r3, #25]
 800707c:	2b02      	cmp	r3, #2
 800707e:	d806      	bhi.n	800708e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2201      	movs	r2, #1
 8007084:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2201      	movs	r2, #1
 800708a:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800708c:	e025      	b.n	80070da <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007094:	2106      	movs	r1, #6
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2200      	movs	r2, #0
 800709e:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	795b      	ldrb	r3, [r3, #5]
 80070a4:	4619      	mov	r1, r3
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 f90c 	bl	80072c4 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	791b      	ldrb	r3, [r3, #4]
 80070b0:	4619      	mov	r1, r3
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 f906 	bl	80072c4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80070be:	2302      	movs	r3, #2
 80070c0:	73fb      	strb	r3, [r7, #15]
      break;
 80070c2:	e00a      	b.n	80070da <USBH_HandleControl+0x2de>

    default:
      break;
 80070c4:	bf00      	nop
 80070c6:	e008      	b.n	80070da <USBH_HandleControl+0x2de>
      break;
 80070c8:	bf00      	nop
 80070ca:	e006      	b.n	80070da <USBH_HandleControl+0x2de>
      break;
 80070cc:	bf00      	nop
 80070ce:	e004      	b.n	80070da <USBH_HandleControl+0x2de>
      break;
 80070d0:	bf00      	nop
 80070d2:	e002      	b.n	80070da <USBH_HandleControl+0x2de>
      break;
 80070d4:	bf00      	nop
 80070d6:	e000      	b.n	80070da <USBH_HandleControl+0x2de>
      break;
 80070d8:	bf00      	nop
  }

  return status;
 80070da:	7bfb      	ldrb	r3, [r7, #15]
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3710      	adds	r7, #16
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b088      	sub	sp, #32
 80070e8:	af04      	add	r7, sp, #16
 80070ea:	60f8      	str	r0, [r7, #12]
 80070ec:	60b9      	str	r1, [r7, #8]
 80070ee:	4613      	mov	r3, r2
 80070f0:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80070f2:	79f9      	ldrb	r1, [r7, #7]
 80070f4:	2300      	movs	r3, #0
 80070f6:	9303      	str	r3, [sp, #12]
 80070f8:	2308      	movs	r3, #8
 80070fa:	9302      	str	r3, [sp, #8]
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	9301      	str	r3, [sp, #4]
 8007100:	2300      	movs	r3, #0
 8007102:	9300      	str	r3, [sp, #0]
 8007104:	2300      	movs	r3, #0
 8007106:	2200      	movs	r2, #0
 8007108:	68f8      	ldr	r0, [r7, #12]
 800710a:	f002 fc1e 	bl	800994a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800710e:	2300      	movs	r3, #0
}
 8007110:	4618      	mov	r0, r3
 8007112:	3710      	adds	r7, #16
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b088      	sub	sp, #32
 800711c:	af04      	add	r7, sp, #16
 800711e:	60f8      	str	r0, [r7, #12]
 8007120:	60b9      	str	r1, [r7, #8]
 8007122:	4611      	mov	r1, r2
 8007124:	461a      	mov	r2, r3
 8007126:	460b      	mov	r3, r1
 8007128:	80fb      	strh	r3, [r7, #6]
 800712a:	4613      	mov	r3, r2
 800712c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007134:	2b00      	cmp	r3, #0
 8007136:	d001      	beq.n	800713c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007138:	2300      	movs	r3, #0
 800713a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800713c:	7979      	ldrb	r1, [r7, #5]
 800713e:	7e3b      	ldrb	r3, [r7, #24]
 8007140:	9303      	str	r3, [sp, #12]
 8007142:	88fb      	ldrh	r3, [r7, #6]
 8007144:	9302      	str	r3, [sp, #8]
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	9301      	str	r3, [sp, #4]
 800714a:	2301      	movs	r3, #1
 800714c:	9300      	str	r3, [sp, #0]
 800714e:	2300      	movs	r3, #0
 8007150:	2200      	movs	r2, #0
 8007152:	68f8      	ldr	r0, [r7, #12]
 8007154:	f002 fbf9 	bl	800994a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007158:	2300      	movs	r3, #0
}
 800715a:	4618      	mov	r0, r3
 800715c:	3710      	adds	r7, #16
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}

08007162 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007162:	b580      	push	{r7, lr}
 8007164:	b088      	sub	sp, #32
 8007166:	af04      	add	r7, sp, #16
 8007168:	60f8      	str	r0, [r7, #12]
 800716a:	60b9      	str	r1, [r7, #8]
 800716c:	4611      	mov	r1, r2
 800716e:	461a      	mov	r2, r3
 8007170:	460b      	mov	r3, r1
 8007172:	80fb      	strh	r3, [r7, #6]
 8007174:	4613      	mov	r3, r2
 8007176:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007178:	7979      	ldrb	r1, [r7, #5]
 800717a:	2300      	movs	r3, #0
 800717c:	9303      	str	r3, [sp, #12]
 800717e:	88fb      	ldrh	r3, [r7, #6]
 8007180:	9302      	str	r3, [sp, #8]
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	9301      	str	r3, [sp, #4]
 8007186:	2301      	movs	r3, #1
 8007188:	9300      	str	r3, [sp, #0]
 800718a:	2300      	movs	r3, #0
 800718c:	2201      	movs	r2, #1
 800718e:	68f8      	ldr	r0, [r7, #12]
 8007190:	f002 fbdb 	bl	800994a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007194:	2300      	movs	r3, #0

}
 8007196:	4618      	mov	r0, r3
 8007198:	3710      	adds	r7, #16
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}

0800719e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800719e:	b580      	push	{r7, lr}
 80071a0:	b088      	sub	sp, #32
 80071a2:	af04      	add	r7, sp, #16
 80071a4:	60f8      	str	r0, [r7, #12]
 80071a6:	60b9      	str	r1, [r7, #8]
 80071a8:	4611      	mov	r1, r2
 80071aa:	461a      	mov	r2, r3
 80071ac:	460b      	mov	r3, r1
 80071ae:	80fb      	strh	r3, [r7, #6]
 80071b0:	4613      	mov	r3, r2
 80071b2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d001      	beq.n	80071c2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80071be:	2300      	movs	r3, #0
 80071c0:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80071c2:	7979      	ldrb	r1, [r7, #5]
 80071c4:	7e3b      	ldrb	r3, [r7, #24]
 80071c6:	9303      	str	r3, [sp, #12]
 80071c8:	88fb      	ldrh	r3, [r7, #6]
 80071ca:	9302      	str	r3, [sp, #8]
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	9301      	str	r3, [sp, #4]
 80071d0:	2301      	movs	r3, #1
 80071d2:	9300      	str	r3, [sp, #0]
 80071d4:	2302      	movs	r3, #2
 80071d6:	2200      	movs	r2, #0
 80071d8:	68f8      	ldr	r0, [r7, #12]
 80071da:	f002 fbb6 	bl	800994a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80071de:	2300      	movs	r3, #0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3710      	adds	r7, #16
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b088      	sub	sp, #32
 80071ec:	af04      	add	r7, sp, #16
 80071ee:	60f8      	str	r0, [r7, #12]
 80071f0:	60b9      	str	r1, [r7, #8]
 80071f2:	4611      	mov	r1, r2
 80071f4:	461a      	mov	r2, r3
 80071f6:	460b      	mov	r3, r1
 80071f8:	80fb      	strh	r3, [r7, #6]
 80071fa:	4613      	mov	r3, r2
 80071fc:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80071fe:	7979      	ldrb	r1, [r7, #5]
 8007200:	2300      	movs	r3, #0
 8007202:	9303      	str	r3, [sp, #12]
 8007204:	88fb      	ldrh	r3, [r7, #6]
 8007206:	9302      	str	r3, [sp, #8]
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	9301      	str	r3, [sp, #4]
 800720c:	2301      	movs	r3, #1
 800720e:	9300      	str	r3, [sp, #0]
 8007210:	2302      	movs	r3, #2
 8007212:	2201      	movs	r2, #1
 8007214:	68f8      	ldr	r0, [r7, #12]
 8007216:	f002 fb98 	bl	800994a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800721a:	2300      	movs	r3, #0
}
 800721c:	4618      	mov	r0, r3
 800721e:	3710      	adds	r7, #16
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}

08007224 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b086      	sub	sp, #24
 8007228:	af04      	add	r7, sp, #16
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	4608      	mov	r0, r1
 800722e:	4611      	mov	r1, r2
 8007230:	461a      	mov	r2, r3
 8007232:	4603      	mov	r3, r0
 8007234:	70fb      	strb	r3, [r7, #3]
 8007236:	460b      	mov	r3, r1
 8007238:	70bb      	strb	r3, [r7, #2]
 800723a:	4613      	mov	r3, r2
 800723c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800723e:	7878      	ldrb	r0, [r7, #1]
 8007240:	78ba      	ldrb	r2, [r7, #2]
 8007242:	78f9      	ldrb	r1, [r7, #3]
 8007244:	8b3b      	ldrh	r3, [r7, #24]
 8007246:	9302      	str	r3, [sp, #8]
 8007248:	7d3b      	ldrb	r3, [r7, #20]
 800724a:	9301      	str	r3, [sp, #4]
 800724c:	7c3b      	ldrb	r3, [r7, #16]
 800724e:	9300      	str	r3, [sp, #0]
 8007250:	4603      	mov	r3, r0
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f002 fb2b 	bl	80098ae <USBH_LL_OpenPipe>

  return USBH_OK;
 8007258:	2300      	movs	r3, #0
}
 800725a:	4618      	mov	r0, r3
 800725c:	3708      	adds	r7, #8
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}

08007262 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007262:	b580      	push	{r7, lr}
 8007264:	b082      	sub	sp, #8
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
 800726a:	460b      	mov	r3, r1
 800726c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800726e:	78fb      	ldrb	r3, [r7, #3]
 8007270:	4619      	mov	r1, r3
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f002 fb4a 	bl	800990c <USBH_LL_ClosePipe>

  return USBH_OK;
 8007278:	2300      	movs	r3, #0
}
 800727a:	4618      	mov	r0, r3
 800727c:	3708      	adds	r7, #8
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}

08007282 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007282:	b580      	push	{r7, lr}
 8007284:	b084      	sub	sp, #16
 8007286:	af00      	add	r7, sp, #0
 8007288:	6078      	str	r0, [r7, #4]
 800728a:	460b      	mov	r3, r1
 800728c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 f836 	bl	8007300 <USBH_GetFreePipe>
 8007294:	4603      	mov	r3, r0
 8007296:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007298:	89fb      	ldrh	r3, [r7, #14]
 800729a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800729e:	4293      	cmp	r3, r2
 80072a0:	d00a      	beq.n	80072b8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80072a2:	78fa      	ldrb	r2, [r7, #3]
 80072a4:	89fb      	ldrh	r3, [r7, #14]
 80072a6:	f003 030f 	and.w	r3, r3, #15
 80072aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80072ae:	6879      	ldr	r1, [r7, #4]
 80072b0:	33e0      	adds	r3, #224	; 0xe0
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	440b      	add	r3, r1
 80072b6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80072b8:	89fb      	ldrh	r3, [r7, #14]
 80072ba:	b2db      	uxtb	r3, r3
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3710      	adds	r7, #16
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b083      	sub	sp, #12
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	460b      	mov	r3, r1
 80072ce:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80072d0:	78fb      	ldrb	r3, [r7, #3]
 80072d2:	2b0a      	cmp	r3, #10
 80072d4:	d80d      	bhi.n	80072f2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80072d6:	78fb      	ldrb	r3, [r7, #3]
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	33e0      	adds	r3, #224	; 0xe0
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	4413      	add	r3, r2
 80072e0:	685a      	ldr	r2, [r3, #4]
 80072e2:	78fb      	ldrb	r3, [r7, #3]
 80072e4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80072e8:	6879      	ldr	r1, [r7, #4]
 80072ea:	33e0      	adds	r3, #224	; 0xe0
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	440b      	add	r3, r1
 80072f0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80072f2:	2300      	movs	r3, #0
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	370c      	adds	r7, #12
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr

08007300 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007300:	b480      	push	{r7}
 8007302:	b085      	sub	sp, #20
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007308:	2300      	movs	r3, #0
 800730a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800730c:	2300      	movs	r3, #0
 800730e:	73fb      	strb	r3, [r7, #15]
 8007310:	e00f      	b.n	8007332 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007312:	7bfb      	ldrb	r3, [r7, #15]
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	33e0      	adds	r3, #224	; 0xe0
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	4413      	add	r3, r2
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007322:	2b00      	cmp	r3, #0
 8007324:	d102      	bne.n	800732c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007326:	7bfb      	ldrb	r3, [r7, #15]
 8007328:	b29b      	uxth	r3, r3
 800732a:	e007      	b.n	800733c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800732c:	7bfb      	ldrb	r3, [r7, #15]
 800732e:	3301      	adds	r3, #1
 8007330:	73fb      	strb	r3, [r7, #15]
 8007332:	7bfb      	ldrb	r3, [r7, #15]
 8007334:	2b0a      	cmp	r3, #10
 8007336:	d9ec      	bls.n	8007312 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007338:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800733c:	4618      	mov	r0, r3
 800733e:	3714      	adds	r7, #20
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr

08007348 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b084      	sub	sp, #16
 800734c:	af00      	add	r7, sp, #0
 800734e:	4603      	mov	r3, r0
 8007350:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007352:	79fb      	ldrb	r3, [r7, #7]
 8007354:	4a08      	ldr	r2, [pc, #32]	; (8007378 <disk_status+0x30>)
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	4413      	add	r3, r2
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	79fa      	ldrb	r2, [r7, #7]
 8007360:	4905      	ldr	r1, [pc, #20]	; (8007378 <disk_status+0x30>)
 8007362:	440a      	add	r2, r1
 8007364:	7a12      	ldrb	r2, [r2, #8]
 8007366:	4610      	mov	r0, r2
 8007368:	4798      	blx	r3
 800736a:	4603      	mov	r3, r0
 800736c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800736e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007370:	4618      	mov	r0, r3
 8007372:	3710      	adds	r7, #16
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}
 8007378:	200000d8 	.word	0x200000d8

0800737c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	4603      	mov	r3, r0
 8007384:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007386:	2300      	movs	r3, #0
 8007388:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800738a:	79fb      	ldrb	r3, [r7, #7]
 800738c:	4a0d      	ldr	r2, [pc, #52]	; (80073c4 <disk_initialize+0x48>)
 800738e:	5cd3      	ldrb	r3, [r2, r3]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d111      	bne.n	80073b8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007394:	79fb      	ldrb	r3, [r7, #7]
 8007396:	4a0b      	ldr	r2, [pc, #44]	; (80073c4 <disk_initialize+0x48>)
 8007398:	2101      	movs	r1, #1
 800739a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800739c:	79fb      	ldrb	r3, [r7, #7]
 800739e:	4a09      	ldr	r2, [pc, #36]	; (80073c4 <disk_initialize+0x48>)
 80073a0:	009b      	lsls	r3, r3, #2
 80073a2:	4413      	add	r3, r2
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	79fa      	ldrb	r2, [r7, #7]
 80073aa:	4906      	ldr	r1, [pc, #24]	; (80073c4 <disk_initialize+0x48>)
 80073ac:	440a      	add	r2, r1
 80073ae:	7a12      	ldrb	r2, [r2, #8]
 80073b0:	4610      	mov	r0, r2
 80073b2:	4798      	blx	r3
 80073b4:	4603      	mov	r3, r0
 80073b6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80073b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3710      	adds	r7, #16
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
 80073c2:	bf00      	nop
 80073c4:	200000d8 	.word	0x200000d8

080073c8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80073c8:	b590      	push	{r4, r7, lr}
 80073ca:	b087      	sub	sp, #28
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	60b9      	str	r1, [r7, #8]
 80073d0:	607a      	str	r2, [r7, #4]
 80073d2:	603b      	str	r3, [r7, #0]
 80073d4:	4603      	mov	r3, r0
 80073d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80073d8:	7bfb      	ldrb	r3, [r7, #15]
 80073da:	4a0a      	ldr	r2, [pc, #40]	; (8007404 <disk_read+0x3c>)
 80073dc:	009b      	lsls	r3, r3, #2
 80073de:	4413      	add	r3, r2
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	689c      	ldr	r4, [r3, #8]
 80073e4:	7bfb      	ldrb	r3, [r7, #15]
 80073e6:	4a07      	ldr	r2, [pc, #28]	; (8007404 <disk_read+0x3c>)
 80073e8:	4413      	add	r3, r2
 80073ea:	7a18      	ldrb	r0, [r3, #8]
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	68b9      	ldr	r1, [r7, #8]
 80073f2:	47a0      	blx	r4
 80073f4:	4603      	mov	r3, r0
 80073f6:	75fb      	strb	r3, [r7, #23]
  return res;
 80073f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	371c      	adds	r7, #28
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd90      	pop	{r4, r7, pc}
 8007402:	bf00      	nop
 8007404:	200000d8 	.word	0x200000d8

08007408 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007408:	b590      	push	{r4, r7, lr}
 800740a:	b087      	sub	sp, #28
 800740c:	af00      	add	r7, sp, #0
 800740e:	60b9      	str	r1, [r7, #8]
 8007410:	607a      	str	r2, [r7, #4]
 8007412:	603b      	str	r3, [r7, #0]
 8007414:	4603      	mov	r3, r0
 8007416:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007418:	7bfb      	ldrb	r3, [r7, #15]
 800741a:	4a0a      	ldr	r2, [pc, #40]	; (8007444 <disk_write+0x3c>)
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	4413      	add	r3, r2
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	68dc      	ldr	r4, [r3, #12]
 8007424:	7bfb      	ldrb	r3, [r7, #15]
 8007426:	4a07      	ldr	r2, [pc, #28]	; (8007444 <disk_write+0x3c>)
 8007428:	4413      	add	r3, r2
 800742a:	7a18      	ldrb	r0, [r3, #8]
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	68b9      	ldr	r1, [r7, #8]
 8007432:	47a0      	blx	r4
 8007434:	4603      	mov	r3, r0
 8007436:	75fb      	strb	r3, [r7, #23]
  return res;
 8007438:	7dfb      	ldrb	r3, [r7, #23]
}
 800743a:	4618      	mov	r0, r3
 800743c:	371c      	adds	r7, #28
 800743e:	46bd      	mov	sp, r7
 8007440:	bd90      	pop	{r4, r7, pc}
 8007442:	bf00      	nop
 8007444:	200000d8 	.word	0x200000d8

08007448 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	4603      	mov	r3, r0
 8007450:	603a      	str	r2, [r7, #0]
 8007452:	71fb      	strb	r3, [r7, #7]
 8007454:	460b      	mov	r3, r1
 8007456:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007458:	79fb      	ldrb	r3, [r7, #7]
 800745a:	4a09      	ldr	r2, [pc, #36]	; (8007480 <disk_ioctl+0x38>)
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	4413      	add	r3, r2
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	691b      	ldr	r3, [r3, #16]
 8007464:	79fa      	ldrb	r2, [r7, #7]
 8007466:	4906      	ldr	r1, [pc, #24]	; (8007480 <disk_ioctl+0x38>)
 8007468:	440a      	add	r2, r1
 800746a:	7a10      	ldrb	r0, [r2, #8]
 800746c:	79b9      	ldrb	r1, [r7, #6]
 800746e:	683a      	ldr	r2, [r7, #0]
 8007470:	4798      	blx	r3
 8007472:	4603      	mov	r3, r0
 8007474:	73fb      	strb	r3, [r7, #15]
  return res;
 8007476:	7bfb      	ldrb	r3, [r7, #15]
}
 8007478:	4618      	mov	r0, r3
 800747a:	3710      	adds	r7, #16
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}
 8007480:	200000d8 	.word	0x200000d8

08007484 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007484:	b480      	push	{r7}
 8007486:	b085      	sub	sp, #20
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	3301      	adds	r3, #1
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007494:	89fb      	ldrh	r3, [r7, #14]
 8007496:	021b      	lsls	r3, r3, #8
 8007498:	b21a      	sxth	r2, r3
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	b21b      	sxth	r3, r3
 80074a0:	4313      	orrs	r3, r2
 80074a2:	b21b      	sxth	r3, r3
 80074a4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80074a6:	89fb      	ldrh	r3, [r7, #14]
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3714      	adds	r7, #20
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80074b4:	b480      	push	{r7}
 80074b6:	b085      	sub	sp, #20
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	3303      	adds	r3, #3
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	021b      	lsls	r3, r3, #8
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	3202      	adds	r2, #2
 80074cc:	7812      	ldrb	r2, [r2, #0]
 80074ce:	4313      	orrs	r3, r2
 80074d0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	021b      	lsls	r3, r3, #8
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	3201      	adds	r2, #1
 80074da:	7812      	ldrb	r2, [r2, #0]
 80074dc:	4313      	orrs	r3, r2
 80074de:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	021b      	lsls	r3, r3, #8
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	7812      	ldrb	r2, [r2, #0]
 80074e8:	4313      	orrs	r3, r2
 80074ea:	60fb      	str	r3, [r7, #12]
	return rv;
 80074ec:	68fb      	ldr	r3, [r7, #12]
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3714      	adds	r7, #20
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr

080074fa <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80074fa:	b480      	push	{r7}
 80074fc:	b083      	sub	sp, #12
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
 8007502:	460b      	mov	r3, r1
 8007504:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	1c5a      	adds	r2, r3, #1
 800750a:	607a      	str	r2, [r7, #4]
 800750c:	887a      	ldrh	r2, [r7, #2]
 800750e:	b2d2      	uxtb	r2, r2
 8007510:	701a      	strb	r2, [r3, #0]
 8007512:	887b      	ldrh	r3, [r7, #2]
 8007514:	0a1b      	lsrs	r3, r3, #8
 8007516:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	1c5a      	adds	r2, r3, #1
 800751c:	607a      	str	r2, [r7, #4]
 800751e:	887a      	ldrh	r2, [r7, #2]
 8007520:	b2d2      	uxtb	r2, r2
 8007522:	701a      	strb	r2, [r3, #0]
}
 8007524:	bf00      	nop
 8007526:	370c      	adds	r7, #12
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr

08007530 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007530:	b480      	push	{r7}
 8007532:	b083      	sub	sp, #12
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	1c5a      	adds	r2, r3, #1
 800753e:	607a      	str	r2, [r7, #4]
 8007540:	683a      	ldr	r2, [r7, #0]
 8007542:	b2d2      	uxtb	r2, r2
 8007544:	701a      	strb	r2, [r3, #0]
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	0a1b      	lsrs	r3, r3, #8
 800754a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	1c5a      	adds	r2, r3, #1
 8007550:	607a      	str	r2, [r7, #4]
 8007552:	683a      	ldr	r2, [r7, #0]
 8007554:	b2d2      	uxtb	r2, r2
 8007556:	701a      	strb	r2, [r3, #0]
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	0a1b      	lsrs	r3, r3, #8
 800755c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	1c5a      	adds	r2, r3, #1
 8007562:	607a      	str	r2, [r7, #4]
 8007564:	683a      	ldr	r2, [r7, #0]
 8007566:	b2d2      	uxtb	r2, r2
 8007568:	701a      	strb	r2, [r3, #0]
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	0a1b      	lsrs	r3, r3, #8
 800756e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	1c5a      	adds	r2, r3, #1
 8007574:	607a      	str	r2, [r7, #4]
 8007576:	683a      	ldr	r2, [r7, #0]
 8007578:	b2d2      	uxtb	r2, r2
 800757a:	701a      	strb	r2, [r3, #0]
}
 800757c:	bf00      	nop
 800757e:	370c      	adds	r7, #12
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr

08007588 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007588:	b480      	push	{r7}
 800758a:	b087      	sub	sp, #28
 800758c:	af00      	add	r7, sp, #0
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	60b9      	str	r1, [r7, #8]
 8007592:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d00d      	beq.n	80075be <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80075a2:	693a      	ldr	r2, [r7, #16]
 80075a4:	1c53      	adds	r3, r2, #1
 80075a6:	613b      	str	r3, [r7, #16]
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	1c59      	adds	r1, r3, #1
 80075ac:	6179      	str	r1, [r7, #20]
 80075ae:	7812      	ldrb	r2, [r2, #0]
 80075b0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	3b01      	subs	r3, #1
 80075b6:	607b      	str	r3, [r7, #4]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d1f1      	bne.n	80075a2 <mem_cpy+0x1a>
	}
}
 80075be:	bf00      	nop
 80075c0:	371c      	adds	r7, #28
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr

080075ca <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80075ca:	b480      	push	{r7}
 80075cc:	b087      	sub	sp, #28
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	60f8      	str	r0, [r7, #12]
 80075d2:	60b9      	str	r1, [r7, #8]
 80075d4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	1c5a      	adds	r2, r3, #1
 80075de:	617a      	str	r2, [r7, #20]
 80075e0:	68ba      	ldr	r2, [r7, #8]
 80075e2:	b2d2      	uxtb	r2, r2
 80075e4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	3b01      	subs	r3, #1
 80075ea:	607b      	str	r3, [r7, #4]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d1f3      	bne.n	80075da <mem_set+0x10>
}
 80075f2:	bf00      	nop
 80075f4:	bf00      	nop
 80075f6:	371c      	adds	r7, #28
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr

08007600 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007600:	b480      	push	{r7}
 8007602:	b089      	sub	sp, #36	; 0x24
 8007604:	af00      	add	r7, sp, #0
 8007606:	60f8      	str	r0, [r7, #12]
 8007608:	60b9      	str	r1, [r7, #8]
 800760a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	61fb      	str	r3, [r7, #28]
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007614:	2300      	movs	r3, #0
 8007616:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007618:	69fb      	ldr	r3, [r7, #28]
 800761a:	1c5a      	adds	r2, r3, #1
 800761c:	61fa      	str	r2, [r7, #28]
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	4619      	mov	r1, r3
 8007622:	69bb      	ldr	r3, [r7, #24]
 8007624:	1c5a      	adds	r2, r3, #1
 8007626:	61ba      	str	r2, [r7, #24]
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	1acb      	subs	r3, r1, r3
 800762c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	3b01      	subs	r3, #1
 8007632:	607b      	str	r3, [r7, #4]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d002      	beq.n	8007640 <mem_cmp+0x40>
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d0eb      	beq.n	8007618 <mem_cmp+0x18>

	return r;
 8007640:	697b      	ldr	r3, [r7, #20]
}
 8007642:	4618      	mov	r0, r3
 8007644:	3724      	adds	r7, #36	; 0x24
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr

0800764e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800764e:	b480      	push	{r7}
 8007650:	b083      	sub	sp, #12
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
 8007656:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007658:	e002      	b.n	8007660 <chk_chr+0x12>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	3301      	adds	r3, #1
 800765e:	607b      	str	r3, [r7, #4]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d005      	beq.n	8007674 <chk_chr+0x26>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	461a      	mov	r2, r3
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	4293      	cmp	r3, r2
 8007672:	d1f2      	bne.n	800765a <chk_chr+0xc>
	return *str;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	781b      	ldrb	r3, [r3, #0]
}
 8007678:	4618      	mov	r0, r3
 800767a:	370c      	adds	r7, #12
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr

08007684 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007684:	b480      	push	{r7}
 8007686:	b085      	sub	sp, #20
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800768e:	2300      	movs	r3, #0
 8007690:	60bb      	str	r3, [r7, #8]
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	60fb      	str	r3, [r7, #12]
 8007696:	e029      	b.n	80076ec <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007698:	4a27      	ldr	r2, [pc, #156]	; (8007738 <chk_lock+0xb4>)
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	011b      	lsls	r3, r3, #4
 800769e:	4413      	add	r3, r2
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d01d      	beq.n	80076e2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80076a6:	4a24      	ldr	r2, [pc, #144]	; (8007738 <chk_lock+0xb4>)
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	011b      	lsls	r3, r3, #4
 80076ac:	4413      	add	r3, r2
 80076ae:	681a      	ldr	r2, [r3, #0]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d116      	bne.n	80076e6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80076b8:	4a1f      	ldr	r2, [pc, #124]	; (8007738 <chk_lock+0xb4>)
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	011b      	lsls	r3, r3, #4
 80076be:	4413      	add	r3, r2
 80076c0:	3304      	adds	r3, #4
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d10c      	bne.n	80076e6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80076cc:	4a1a      	ldr	r2, [pc, #104]	; (8007738 <chk_lock+0xb4>)
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	011b      	lsls	r3, r3, #4
 80076d2:	4413      	add	r3, r2
 80076d4:	3308      	adds	r3, #8
 80076d6:	681a      	ldr	r2, [r3, #0]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80076dc:	429a      	cmp	r2, r3
 80076de:	d102      	bne.n	80076e6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80076e0:	e007      	b.n	80076f2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80076e2:	2301      	movs	r3, #1
 80076e4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	3301      	adds	r3, #1
 80076ea:	60fb      	str	r3, [r7, #12]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d9d2      	bls.n	8007698 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2b02      	cmp	r3, #2
 80076f6:	d109      	bne.n	800770c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d102      	bne.n	8007704 <chk_lock+0x80>
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	2b02      	cmp	r3, #2
 8007702:	d101      	bne.n	8007708 <chk_lock+0x84>
 8007704:	2300      	movs	r3, #0
 8007706:	e010      	b.n	800772a <chk_lock+0xa6>
 8007708:	2312      	movs	r3, #18
 800770a:	e00e      	b.n	800772a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d108      	bne.n	8007724 <chk_lock+0xa0>
 8007712:	4a09      	ldr	r2, [pc, #36]	; (8007738 <chk_lock+0xb4>)
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	011b      	lsls	r3, r3, #4
 8007718:	4413      	add	r3, r2
 800771a:	330c      	adds	r3, #12
 800771c:	881b      	ldrh	r3, [r3, #0]
 800771e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007722:	d101      	bne.n	8007728 <chk_lock+0xa4>
 8007724:	2310      	movs	r3, #16
 8007726:	e000      	b.n	800772a <chk_lock+0xa6>
 8007728:	2300      	movs	r3, #0
}
 800772a:	4618      	mov	r0, r3
 800772c:	3714      	adds	r7, #20
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr
 8007736:	bf00      	nop
 8007738:	200000b8 	.word	0x200000b8

0800773c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800773c:	b480      	push	{r7}
 800773e:	b083      	sub	sp, #12
 8007740:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007742:	2300      	movs	r3, #0
 8007744:	607b      	str	r3, [r7, #4]
 8007746:	e002      	b.n	800774e <enq_lock+0x12>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	3301      	adds	r3, #1
 800774c:	607b      	str	r3, [r7, #4]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2b01      	cmp	r3, #1
 8007752:	d806      	bhi.n	8007762 <enq_lock+0x26>
 8007754:	4a09      	ldr	r2, [pc, #36]	; (800777c <enq_lock+0x40>)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	011b      	lsls	r3, r3, #4
 800775a:	4413      	add	r3, r2
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d1f2      	bne.n	8007748 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2b02      	cmp	r3, #2
 8007766:	bf14      	ite	ne
 8007768:	2301      	movne	r3, #1
 800776a:	2300      	moveq	r3, #0
 800776c:	b2db      	uxtb	r3, r3
}
 800776e:	4618      	mov	r0, r3
 8007770:	370c      	adds	r7, #12
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr
 800777a:	bf00      	nop
 800777c:	200000b8 	.word	0x200000b8

08007780 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007780:	b480      	push	{r7}
 8007782:	b085      	sub	sp, #20
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800778a:	2300      	movs	r3, #0
 800778c:	60fb      	str	r3, [r7, #12]
 800778e:	e01f      	b.n	80077d0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007790:	4a41      	ldr	r2, [pc, #260]	; (8007898 <inc_lock+0x118>)
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	011b      	lsls	r3, r3, #4
 8007796:	4413      	add	r3, r2
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	429a      	cmp	r2, r3
 80077a0:	d113      	bne.n	80077ca <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80077a2:	4a3d      	ldr	r2, [pc, #244]	; (8007898 <inc_lock+0x118>)
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	011b      	lsls	r3, r3, #4
 80077a8:	4413      	add	r3, r2
 80077aa:	3304      	adds	r3, #4
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80077b2:	429a      	cmp	r2, r3
 80077b4:	d109      	bne.n	80077ca <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80077b6:	4a38      	ldr	r2, [pc, #224]	; (8007898 <inc_lock+0x118>)
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	011b      	lsls	r3, r3, #4
 80077bc:	4413      	add	r3, r2
 80077be:	3308      	adds	r3, #8
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d006      	beq.n	80077d8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	3301      	adds	r3, #1
 80077ce:	60fb      	str	r3, [r7, #12]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d9dc      	bls.n	8007790 <inc_lock+0x10>
 80077d6:	e000      	b.n	80077da <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80077d8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2b02      	cmp	r3, #2
 80077de:	d132      	bne.n	8007846 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80077e0:	2300      	movs	r3, #0
 80077e2:	60fb      	str	r3, [r7, #12]
 80077e4:	e002      	b.n	80077ec <inc_lock+0x6c>
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	3301      	adds	r3, #1
 80077ea:	60fb      	str	r3, [r7, #12]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d806      	bhi.n	8007800 <inc_lock+0x80>
 80077f2:	4a29      	ldr	r2, [pc, #164]	; (8007898 <inc_lock+0x118>)
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	011b      	lsls	r3, r3, #4
 80077f8:	4413      	add	r3, r2
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d1f2      	bne.n	80077e6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2b02      	cmp	r3, #2
 8007804:	d101      	bne.n	800780a <inc_lock+0x8a>
 8007806:	2300      	movs	r3, #0
 8007808:	e040      	b.n	800788c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681a      	ldr	r2, [r3, #0]
 800780e:	4922      	ldr	r1, [pc, #136]	; (8007898 <inc_lock+0x118>)
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	011b      	lsls	r3, r3, #4
 8007814:	440b      	add	r3, r1
 8007816:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	689a      	ldr	r2, [r3, #8]
 800781c:	491e      	ldr	r1, [pc, #120]	; (8007898 <inc_lock+0x118>)
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	011b      	lsls	r3, r3, #4
 8007822:	440b      	add	r3, r1
 8007824:	3304      	adds	r3, #4
 8007826:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	695a      	ldr	r2, [r3, #20]
 800782c:	491a      	ldr	r1, [pc, #104]	; (8007898 <inc_lock+0x118>)
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	011b      	lsls	r3, r3, #4
 8007832:	440b      	add	r3, r1
 8007834:	3308      	adds	r3, #8
 8007836:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007838:	4a17      	ldr	r2, [pc, #92]	; (8007898 <inc_lock+0x118>)
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	011b      	lsls	r3, r3, #4
 800783e:	4413      	add	r3, r2
 8007840:	330c      	adds	r3, #12
 8007842:	2200      	movs	r2, #0
 8007844:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d009      	beq.n	8007860 <inc_lock+0xe0>
 800784c:	4a12      	ldr	r2, [pc, #72]	; (8007898 <inc_lock+0x118>)
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	011b      	lsls	r3, r3, #4
 8007852:	4413      	add	r3, r2
 8007854:	330c      	adds	r3, #12
 8007856:	881b      	ldrh	r3, [r3, #0]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d001      	beq.n	8007860 <inc_lock+0xe0>
 800785c:	2300      	movs	r3, #0
 800785e:	e015      	b.n	800788c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d108      	bne.n	8007878 <inc_lock+0xf8>
 8007866:	4a0c      	ldr	r2, [pc, #48]	; (8007898 <inc_lock+0x118>)
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	011b      	lsls	r3, r3, #4
 800786c:	4413      	add	r3, r2
 800786e:	330c      	adds	r3, #12
 8007870:	881b      	ldrh	r3, [r3, #0]
 8007872:	3301      	adds	r3, #1
 8007874:	b29a      	uxth	r2, r3
 8007876:	e001      	b.n	800787c <inc_lock+0xfc>
 8007878:	f44f 7280 	mov.w	r2, #256	; 0x100
 800787c:	4906      	ldr	r1, [pc, #24]	; (8007898 <inc_lock+0x118>)
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	011b      	lsls	r3, r3, #4
 8007882:	440b      	add	r3, r1
 8007884:	330c      	adds	r3, #12
 8007886:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	3301      	adds	r3, #1
}
 800788c:	4618      	mov	r0, r3
 800788e:	3714      	adds	r7, #20
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr
 8007898:	200000b8 	.word	0x200000b8

0800789c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800789c:	b480      	push	{r7}
 800789e:	b085      	sub	sp, #20
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	3b01      	subs	r3, #1
 80078a8:	607b      	str	r3, [r7, #4]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d825      	bhi.n	80078fc <dec_lock+0x60>
		n = Files[i].ctr;
 80078b0:	4a17      	ldr	r2, [pc, #92]	; (8007910 <dec_lock+0x74>)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	011b      	lsls	r3, r3, #4
 80078b6:	4413      	add	r3, r2
 80078b8:	330c      	adds	r3, #12
 80078ba:	881b      	ldrh	r3, [r3, #0]
 80078bc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80078be:	89fb      	ldrh	r3, [r7, #14]
 80078c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078c4:	d101      	bne.n	80078ca <dec_lock+0x2e>
 80078c6:	2300      	movs	r3, #0
 80078c8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80078ca:	89fb      	ldrh	r3, [r7, #14]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d002      	beq.n	80078d6 <dec_lock+0x3a>
 80078d0:	89fb      	ldrh	r3, [r7, #14]
 80078d2:	3b01      	subs	r3, #1
 80078d4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80078d6:	4a0e      	ldr	r2, [pc, #56]	; (8007910 <dec_lock+0x74>)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	011b      	lsls	r3, r3, #4
 80078dc:	4413      	add	r3, r2
 80078de:	330c      	adds	r3, #12
 80078e0:	89fa      	ldrh	r2, [r7, #14]
 80078e2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80078e4:	89fb      	ldrh	r3, [r7, #14]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d105      	bne.n	80078f6 <dec_lock+0x5a>
 80078ea:	4a09      	ldr	r2, [pc, #36]	; (8007910 <dec_lock+0x74>)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	011b      	lsls	r3, r3, #4
 80078f0:	4413      	add	r3, r2
 80078f2:	2200      	movs	r2, #0
 80078f4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80078f6:	2300      	movs	r3, #0
 80078f8:	737b      	strb	r3, [r7, #13]
 80078fa:	e001      	b.n	8007900 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80078fc:	2302      	movs	r3, #2
 80078fe:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007900:	7b7b      	ldrb	r3, [r7, #13]
}
 8007902:	4618      	mov	r0, r3
 8007904:	3714      	adds	r7, #20
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr
 800790e:	bf00      	nop
 8007910:	200000b8 	.word	0x200000b8

08007914 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007914:	b480      	push	{r7}
 8007916:	b085      	sub	sp, #20
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800791c:	2300      	movs	r3, #0
 800791e:	60fb      	str	r3, [r7, #12]
 8007920:	e010      	b.n	8007944 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007922:	4a0d      	ldr	r2, [pc, #52]	; (8007958 <clear_lock+0x44>)
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	011b      	lsls	r3, r3, #4
 8007928:	4413      	add	r3, r2
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	687a      	ldr	r2, [r7, #4]
 800792e:	429a      	cmp	r2, r3
 8007930:	d105      	bne.n	800793e <clear_lock+0x2a>
 8007932:	4a09      	ldr	r2, [pc, #36]	; (8007958 <clear_lock+0x44>)
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	011b      	lsls	r3, r3, #4
 8007938:	4413      	add	r3, r2
 800793a:	2200      	movs	r2, #0
 800793c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	3301      	adds	r3, #1
 8007942:	60fb      	str	r3, [r7, #12]
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2b01      	cmp	r3, #1
 8007948:	d9eb      	bls.n	8007922 <clear_lock+0xe>
	}
}
 800794a:	bf00      	nop
 800794c:	bf00      	nop
 800794e:	3714      	adds	r7, #20
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr
 8007958:	200000b8 	.word	0x200000b8

0800795c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b086      	sub	sp, #24
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007964:	2300      	movs	r3, #0
 8007966:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	78db      	ldrb	r3, [r3, #3]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d034      	beq.n	80079da <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007974:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	7858      	ldrb	r0, [r3, #1]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007980:	2301      	movs	r3, #1
 8007982:	697a      	ldr	r2, [r7, #20]
 8007984:	f7ff fd40 	bl	8007408 <disk_write>
 8007988:	4603      	mov	r3, r0
 800798a:	2b00      	cmp	r3, #0
 800798c:	d002      	beq.n	8007994 <sync_window+0x38>
			res = FR_DISK_ERR;
 800798e:	2301      	movs	r3, #1
 8007990:	73fb      	strb	r3, [r7, #15]
 8007992:	e022      	b.n	80079da <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800799e:	697a      	ldr	r2, [r7, #20]
 80079a0:	1ad2      	subs	r2, r2, r3
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	69db      	ldr	r3, [r3, #28]
 80079a6:	429a      	cmp	r2, r3
 80079a8:	d217      	bcs.n	80079da <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	789b      	ldrb	r3, [r3, #2]
 80079ae:	613b      	str	r3, [r7, #16]
 80079b0:	e010      	b.n	80079d4 <sync_window+0x78>
					wsect += fs->fsize;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	69db      	ldr	r3, [r3, #28]
 80079b6:	697a      	ldr	r2, [r7, #20]
 80079b8:	4413      	add	r3, r2
 80079ba:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	7858      	ldrb	r0, [r3, #1]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80079c6:	2301      	movs	r3, #1
 80079c8:	697a      	ldr	r2, [r7, #20]
 80079ca:	f7ff fd1d 	bl	8007408 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	3b01      	subs	r3, #1
 80079d2:	613b      	str	r3, [r7, #16]
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	d8eb      	bhi.n	80079b2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80079da:	7bfb      	ldrb	r3, [r7, #15]
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3718      	adds	r7, #24
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b084      	sub	sp, #16
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80079ee:	2300      	movs	r3, #0
 80079f0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079f6:	683a      	ldr	r2, [r7, #0]
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d01b      	beq.n	8007a34 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f7ff ffad 	bl	800795c <sync_window>
 8007a02:	4603      	mov	r3, r0
 8007a04:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007a06:	7bfb      	ldrb	r3, [r7, #15]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d113      	bne.n	8007a34 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	7858      	ldrb	r0, [r3, #1]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007a16:	2301      	movs	r3, #1
 8007a18:	683a      	ldr	r2, [r7, #0]
 8007a1a:	f7ff fcd5 	bl	80073c8 <disk_read>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d004      	beq.n	8007a2e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007a24:	f04f 33ff 	mov.w	r3, #4294967295
 8007a28:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	683a      	ldr	r2, [r7, #0]
 8007a32:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8007a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3710      	adds	r7, #16
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
	...

08007a40 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b084      	sub	sp, #16
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f7ff ff87 	bl	800795c <sync_window>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007a52:	7bfb      	ldrb	r3, [r7, #15]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d159      	bne.n	8007b0c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	2b03      	cmp	r3, #3
 8007a5e:	d149      	bne.n	8007af4 <sync_fs+0xb4>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	791b      	ldrb	r3, [r3, #4]
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d145      	bne.n	8007af4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	899b      	ldrh	r3, [r3, #12]
 8007a72:	461a      	mov	r2, r3
 8007a74:	2100      	movs	r1, #0
 8007a76:	f7ff fda8 	bl	80075ca <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	3334      	adds	r3, #52	; 0x34
 8007a7e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007a82:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007a86:	4618      	mov	r0, r3
 8007a88:	f7ff fd37 	bl	80074fa <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	3334      	adds	r3, #52	; 0x34
 8007a90:	4921      	ldr	r1, [pc, #132]	; (8007b18 <sync_fs+0xd8>)
 8007a92:	4618      	mov	r0, r3
 8007a94:	f7ff fd4c 	bl	8007530 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	3334      	adds	r3, #52	; 0x34
 8007a9c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007aa0:	491e      	ldr	r1, [pc, #120]	; (8007b1c <sync_fs+0xdc>)
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f7ff fd44 	bl	8007530 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	3334      	adds	r3, #52	; 0x34
 8007aac:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	695b      	ldr	r3, [r3, #20]
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	4610      	mov	r0, r2
 8007ab8:	f7ff fd3a 	bl	8007530 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	3334      	adds	r3, #52	; 0x34
 8007ac0:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	691b      	ldr	r3, [r3, #16]
 8007ac8:	4619      	mov	r1, r3
 8007aca:	4610      	mov	r0, r2
 8007acc:	f7ff fd30 	bl	8007530 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6a1b      	ldr	r3, [r3, #32]
 8007ad4:	1c5a      	adds	r2, r3, #1
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	7858      	ldrb	r0, [r3, #1]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ae8:	2301      	movs	r3, #1
 8007aea:	f7ff fc8d 	bl	8007408 <disk_write>
			fs->fsi_flag = 0;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2200      	movs	r2, #0
 8007af2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	785b      	ldrb	r3, [r3, #1]
 8007af8:	2200      	movs	r2, #0
 8007afa:	2100      	movs	r1, #0
 8007afc:	4618      	mov	r0, r3
 8007afe:	f7ff fca3 	bl	8007448 <disk_ioctl>
 8007b02:	4603      	mov	r3, r0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d001      	beq.n	8007b0c <sync_fs+0xcc>
 8007b08:	2301      	movs	r3, #1
 8007b0a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3710      	adds	r7, #16
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	41615252 	.word	0x41615252
 8007b1c:	61417272 	.word	0x61417272

08007b20 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b083      	sub	sp, #12
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	3b02      	subs	r3, #2
 8007b2e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	699b      	ldr	r3, [r3, #24]
 8007b34:	3b02      	subs	r3, #2
 8007b36:	683a      	ldr	r2, [r7, #0]
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d301      	bcc.n	8007b40 <clust2sect+0x20>
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	e008      	b.n	8007b52 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	895b      	ldrh	r3, [r3, #10]
 8007b44:	461a      	mov	r2, r3
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	fb03 f202 	mul.w	r2, r3, r2
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b50:	4413      	add	r3, r2
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	370c      	adds	r7, #12
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr

08007b5e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007b5e:	b580      	push	{r7, lr}
 8007b60:	b086      	sub	sp, #24
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	6078      	str	r0, [r7, #4]
 8007b66:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d904      	bls.n	8007b7e <get_fat+0x20>
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	699b      	ldr	r3, [r3, #24]
 8007b78:	683a      	ldr	r2, [r7, #0]
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d302      	bcc.n	8007b84 <get_fat+0x26>
		val = 1;	/* Internal error */
 8007b7e:	2301      	movs	r3, #1
 8007b80:	617b      	str	r3, [r7, #20]
 8007b82:	e0bb      	b.n	8007cfc <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007b84:	f04f 33ff 	mov.w	r3, #4294967295
 8007b88:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	781b      	ldrb	r3, [r3, #0]
 8007b8e:	2b03      	cmp	r3, #3
 8007b90:	f000 8083 	beq.w	8007c9a <get_fat+0x13c>
 8007b94:	2b03      	cmp	r3, #3
 8007b96:	f300 80a7 	bgt.w	8007ce8 <get_fat+0x18a>
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	d002      	beq.n	8007ba4 <get_fat+0x46>
 8007b9e:	2b02      	cmp	r3, #2
 8007ba0:	d056      	beq.n	8007c50 <get_fat+0xf2>
 8007ba2:	e0a1      	b.n	8007ce8 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	60fb      	str	r3, [r7, #12]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	085b      	lsrs	r3, r3, #1
 8007bac:	68fa      	ldr	r2, [r7, #12]
 8007bae:	4413      	add	r3, r2
 8007bb0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	899b      	ldrh	r3, [r3, #12]
 8007bba:	4619      	mov	r1, r3
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8007bc2:	4413      	add	r3, r2
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	6938      	ldr	r0, [r7, #16]
 8007bc8:	f7ff ff0c 	bl	80079e4 <move_window>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	f040 808d 	bne.w	8007cee <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	1c5a      	adds	r2, r3, #1
 8007bd8:	60fa      	str	r2, [r7, #12]
 8007bda:	693a      	ldr	r2, [r7, #16]
 8007bdc:	8992      	ldrh	r2, [r2, #12]
 8007bde:	fbb3 f1f2 	udiv	r1, r3, r2
 8007be2:	fb02 f201 	mul.w	r2, r2, r1
 8007be6:	1a9b      	subs	r3, r3, r2
 8007be8:	693a      	ldr	r2, [r7, #16]
 8007bea:	4413      	add	r3, r2
 8007bec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007bf0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	899b      	ldrh	r3, [r3, #12]
 8007bfa:	4619      	mov	r1, r3
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8007c02:	4413      	add	r3, r2
 8007c04:	4619      	mov	r1, r3
 8007c06:	6938      	ldr	r0, [r7, #16]
 8007c08:	f7ff feec 	bl	80079e4 <move_window>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d16f      	bne.n	8007cf2 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	899b      	ldrh	r3, [r3, #12]
 8007c16:	461a      	mov	r2, r3
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	fbb3 f1f2 	udiv	r1, r3, r2
 8007c1e:	fb02 f201 	mul.w	r2, r2, r1
 8007c22:	1a9b      	subs	r3, r3, r2
 8007c24:	693a      	ldr	r2, [r7, #16]
 8007c26:	4413      	add	r3, r2
 8007c28:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007c2c:	021b      	lsls	r3, r3, #8
 8007c2e:	461a      	mov	r2, r3
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	4313      	orrs	r3, r2
 8007c34:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	f003 0301 	and.w	r3, r3, #1
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d002      	beq.n	8007c46 <get_fat+0xe8>
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	091b      	lsrs	r3, r3, #4
 8007c44:	e002      	b.n	8007c4c <get_fat+0xee>
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c4c:	617b      	str	r3, [r7, #20]
			break;
 8007c4e:	e055      	b.n	8007cfc <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	899b      	ldrh	r3, [r3, #12]
 8007c58:	085b      	lsrs	r3, r3, #1
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	fbb3 f3f1 	udiv	r3, r3, r1
 8007c64:	4413      	add	r3, r2
 8007c66:	4619      	mov	r1, r3
 8007c68:	6938      	ldr	r0, [r7, #16]
 8007c6a:	f7ff febb 	bl	80079e4 <move_window>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d140      	bne.n	8007cf6 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	005b      	lsls	r3, r3, #1
 8007c7e:	693a      	ldr	r2, [r7, #16]
 8007c80:	8992      	ldrh	r2, [r2, #12]
 8007c82:	fbb3 f0f2 	udiv	r0, r3, r2
 8007c86:	fb02 f200 	mul.w	r2, r2, r0
 8007c8a:	1a9b      	subs	r3, r3, r2
 8007c8c:	440b      	add	r3, r1
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f7ff fbf8 	bl	8007484 <ld_word>
 8007c94:	4603      	mov	r3, r0
 8007c96:	617b      	str	r3, [r7, #20]
			break;
 8007c98:	e030      	b.n	8007cfc <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	899b      	ldrh	r3, [r3, #12]
 8007ca2:	089b      	lsrs	r3, r3, #2
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	4619      	mov	r1, r3
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	fbb3 f3f1 	udiv	r3, r3, r1
 8007cae:	4413      	add	r3, r2
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	6938      	ldr	r0, [r7, #16]
 8007cb4:	f7ff fe96 	bl	80079e4 <move_window>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d11d      	bne.n	8007cfa <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	009b      	lsls	r3, r3, #2
 8007cc8:	693a      	ldr	r2, [r7, #16]
 8007cca:	8992      	ldrh	r2, [r2, #12]
 8007ccc:	fbb3 f0f2 	udiv	r0, r3, r2
 8007cd0:	fb02 f200 	mul.w	r2, r2, r0
 8007cd4:	1a9b      	subs	r3, r3, r2
 8007cd6:	440b      	add	r3, r1
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f7ff fbeb 	bl	80074b4 <ld_dword>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007ce4:	617b      	str	r3, [r7, #20]
			break;
 8007ce6:	e009      	b.n	8007cfc <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007ce8:	2301      	movs	r3, #1
 8007cea:	617b      	str	r3, [r7, #20]
 8007cec:	e006      	b.n	8007cfc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007cee:	bf00      	nop
 8007cf0:	e004      	b.n	8007cfc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007cf2:	bf00      	nop
 8007cf4:	e002      	b.n	8007cfc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007cf6:	bf00      	nop
 8007cf8:	e000      	b.n	8007cfc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007cfa:	bf00      	nop
		}
	}

	return val;
 8007cfc:	697b      	ldr	r3, [r7, #20]
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3718      	adds	r7, #24
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}

08007d06 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007d06:	b590      	push	{r4, r7, lr}
 8007d08:	b089      	sub	sp, #36	; 0x24
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	60f8      	str	r0, [r7, #12]
 8007d0e:	60b9      	str	r1, [r7, #8]
 8007d10:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007d12:	2302      	movs	r3, #2
 8007d14:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	f240 8102 	bls.w	8007f22 <put_fat+0x21c>
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	699b      	ldr	r3, [r3, #24]
 8007d22:	68ba      	ldr	r2, [r7, #8]
 8007d24:	429a      	cmp	r2, r3
 8007d26:	f080 80fc 	bcs.w	8007f22 <put_fat+0x21c>
		switch (fs->fs_type) {
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	2b03      	cmp	r3, #3
 8007d30:	f000 80b6 	beq.w	8007ea0 <put_fat+0x19a>
 8007d34:	2b03      	cmp	r3, #3
 8007d36:	f300 80fd 	bgt.w	8007f34 <put_fat+0x22e>
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d003      	beq.n	8007d46 <put_fat+0x40>
 8007d3e:	2b02      	cmp	r3, #2
 8007d40:	f000 8083 	beq.w	8007e4a <put_fat+0x144>
 8007d44:	e0f6      	b.n	8007f34 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	61bb      	str	r3, [r7, #24]
 8007d4a:	69bb      	ldr	r3, [r7, #24]
 8007d4c:	085b      	lsrs	r3, r3, #1
 8007d4e:	69ba      	ldr	r2, [r7, #24]
 8007d50:	4413      	add	r3, r2
 8007d52:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	899b      	ldrh	r3, [r3, #12]
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	69bb      	ldr	r3, [r7, #24]
 8007d60:	fbb3 f3f1 	udiv	r3, r3, r1
 8007d64:	4413      	add	r3, r2
 8007d66:	4619      	mov	r1, r3
 8007d68:	68f8      	ldr	r0, [r7, #12]
 8007d6a:	f7ff fe3b 	bl	80079e4 <move_window>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007d72:	7ffb      	ldrb	r3, [r7, #31]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	f040 80d6 	bne.w	8007f26 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007d80:	69bb      	ldr	r3, [r7, #24]
 8007d82:	1c5a      	adds	r2, r3, #1
 8007d84:	61ba      	str	r2, [r7, #24]
 8007d86:	68fa      	ldr	r2, [r7, #12]
 8007d88:	8992      	ldrh	r2, [r2, #12]
 8007d8a:	fbb3 f0f2 	udiv	r0, r3, r2
 8007d8e:	fb02 f200 	mul.w	r2, r2, r0
 8007d92:	1a9b      	subs	r3, r3, r2
 8007d94:	440b      	add	r3, r1
 8007d96:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	f003 0301 	and.w	r3, r3, #1
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d00d      	beq.n	8007dbe <put_fat+0xb8>
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	781b      	ldrb	r3, [r3, #0]
 8007da6:	b25b      	sxtb	r3, r3
 8007da8:	f003 030f 	and.w	r3, r3, #15
 8007dac:	b25a      	sxtb	r2, r3
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	011b      	lsls	r3, r3, #4
 8007db4:	b25b      	sxtb	r3, r3
 8007db6:	4313      	orrs	r3, r2
 8007db8:	b25b      	sxtb	r3, r3
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	e001      	b.n	8007dc2 <put_fat+0xbc>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	b2db      	uxtb	r3, r3
 8007dc2:	697a      	ldr	r2, [r7, #20]
 8007dc4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2201      	movs	r2, #1
 8007dca:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	899b      	ldrh	r3, [r3, #12]
 8007dd4:	4619      	mov	r1, r3
 8007dd6:	69bb      	ldr	r3, [r7, #24]
 8007dd8:	fbb3 f3f1 	udiv	r3, r3, r1
 8007ddc:	4413      	add	r3, r2
 8007dde:	4619      	mov	r1, r3
 8007de0:	68f8      	ldr	r0, [r7, #12]
 8007de2:	f7ff fdff 	bl	80079e4 <move_window>
 8007de6:	4603      	mov	r3, r0
 8007de8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007dea:	7ffb      	ldrb	r3, [r7, #31]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	f040 809c 	bne.w	8007f2a <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	899b      	ldrh	r3, [r3, #12]
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	69bb      	ldr	r3, [r7, #24]
 8007e00:	fbb3 f0f2 	udiv	r0, r3, r2
 8007e04:	fb02 f200 	mul.w	r2, r2, r0
 8007e08:	1a9b      	subs	r3, r3, r2
 8007e0a:	440b      	add	r3, r1
 8007e0c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	f003 0301 	and.w	r3, r3, #1
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d003      	beq.n	8007e20 <put_fat+0x11a>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	091b      	lsrs	r3, r3, #4
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	e00e      	b.n	8007e3e <put_fat+0x138>
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	b25b      	sxtb	r3, r3
 8007e26:	f023 030f 	bic.w	r3, r3, #15
 8007e2a:	b25a      	sxtb	r2, r3
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	0a1b      	lsrs	r3, r3, #8
 8007e30:	b25b      	sxtb	r3, r3
 8007e32:	f003 030f 	and.w	r3, r3, #15
 8007e36:	b25b      	sxtb	r3, r3
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	b25b      	sxtb	r3, r3
 8007e3c:	b2db      	uxtb	r3, r3
 8007e3e:	697a      	ldr	r2, [r7, #20]
 8007e40:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2201      	movs	r2, #1
 8007e46:	70da      	strb	r2, [r3, #3]
			break;
 8007e48:	e074      	b.n	8007f34 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	899b      	ldrh	r3, [r3, #12]
 8007e52:	085b      	lsrs	r3, r3, #1
 8007e54:	b29b      	uxth	r3, r3
 8007e56:	4619      	mov	r1, r3
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e5e:	4413      	add	r3, r2
 8007e60:	4619      	mov	r1, r3
 8007e62:	68f8      	ldr	r0, [r7, #12]
 8007e64:	f7ff fdbe 	bl	80079e4 <move_window>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007e6c:	7ffb      	ldrb	r3, [r7, #31]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d15d      	bne.n	8007f2e <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	005b      	lsls	r3, r3, #1
 8007e7c:	68fa      	ldr	r2, [r7, #12]
 8007e7e:	8992      	ldrh	r2, [r2, #12]
 8007e80:	fbb3 f0f2 	udiv	r0, r3, r2
 8007e84:	fb02 f200 	mul.w	r2, r2, r0
 8007e88:	1a9b      	subs	r3, r3, r2
 8007e8a:	440b      	add	r3, r1
 8007e8c:	687a      	ldr	r2, [r7, #4]
 8007e8e:	b292      	uxth	r2, r2
 8007e90:	4611      	mov	r1, r2
 8007e92:	4618      	mov	r0, r3
 8007e94:	f7ff fb31 	bl	80074fa <st_word>
			fs->wflag = 1;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	70da      	strb	r2, [r3, #3]
			break;
 8007e9e:	e049      	b.n	8007f34 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	899b      	ldrh	r3, [r3, #12]
 8007ea8:	089b      	lsrs	r3, r3, #2
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	4619      	mov	r1, r3
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	fbb3 f3f1 	udiv	r3, r3, r1
 8007eb4:	4413      	add	r3, r2
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	68f8      	ldr	r0, [r7, #12]
 8007eba:	f7ff fd93 	bl	80079e4 <move_window>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007ec2:	7ffb      	ldrb	r3, [r7, #31]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d134      	bne.n	8007f32 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	009b      	lsls	r3, r3, #2
 8007ed8:	68fa      	ldr	r2, [r7, #12]
 8007eda:	8992      	ldrh	r2, [r2, #12]
 8007edc:	fbb3 f0f2 	udiv	r0, r3, r2
 8007ee0:	fb02 f200 	mul.w	r2, r2, r0
 8007ee4:	1a9b      	subs	r3, r3, r2
 8007ee6:	440b      	add	r3, r1
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f7ff fae3 	bl	80074b4 <ld_dword>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007ef4:	4323      	orrs	r3, r4
 8007ef6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	68fa      	ldr	r2, [r7, #12]
 8007f04:	8992      	ldrh	r2, [r2, #12]
 8007f06:	fbb3 f0f2 	udiv	r0, r3, r2
 8007f0a:	fb02 f200 	mul.w	r2, r2, r0
 8007f0e:	1a9b      	subs	r3, r3, r2
 8007f10:	440b      	add	r3, r1
 8007f12:	6879      	ldr	r1, [r7, #4]
 8007f14:	4618      	mov	r0, r3
 8007f16:	f7ff fb0b 	bl	8007530 <st_dword>
			fs->wflag = 1;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	70da      	strb	r2, [r3, #3]
			break;
 8007f20:	e008      	b.n	8007f34 <put_fat+0x22e>
		}
	}
 8007f22:	bf00      	nop
 8007f24:	e006      	b.n	8007f34 <put_fat+0x22e>
			if (res != FR_OK) break;
 8007f26:	bf00      	nop
 8007f28:	e004      	b.n	8007f34 <put_fat+0x22e>
			if (res != FR_OK) break;
 8007f2a:	bf00      	nop
 8007f2c:	e002      	b.n	8007f34 <put_fat+0x22e>
			if (res != FR_OK) break;
 8007f2e:	bf00      	nop
 8007f30:	e000      	b.n	8007f34 <put_fat+0x22e>
			if (res != FR_OK) break;
 8007f32:	bf00      	nop
	return res;
 8007f34:	7ffb      	ldrb	r3, [r7, #31]
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3724      	adds	r7, #36	; 0x24
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd90      	pop	{r4, r7, pc}

08007f3e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007f3e:	b580      	push	{r7, lr}
 8007f40:	b088      	sub	sp, #32
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	60f8      	str	r0, [r7, #12]
 8007f46:	60b9      	str	r1, [r7, #8]
 8007f48:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	d904      	bls.n	8007f64 <remove_chain+0x26>
 8007f5a:	69bb      	ldr	r3, [r7, #24]
 8007f5c:	699b      	ldr	r3, [r3, #24]
 8007f5e:	68ba      	ldr	r2, [r7, #8]
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d301      	bcc.n	8007f68 <remove_chain+0x2a>
 8007f64:	2302      	movs	r3, #2
 8007f66:	e04b      	b.n	8008000 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d00c      	beq.n	8007f88 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007f6e:	f04f 32ff 	mov.w	r2, #4294967295
 8007f72:	6879      	ldr	r1, [r7, #4]
 8007f74:	69b8      	ldr	r0, [r7, #24]
 8007f76:	f7ff fec6 	bl	8007d06 <put_fat>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007f7e:	7ffb      	ldrb	r3, [r7, #31]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d001      	beq.n	8007f88 <remove_chain+0x4a>
 8007f84:	7ffb      	ldrb	r3, [r7, #31]
 8007f86:	e03b      	b.n	8008000 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007f88:	68b9      	ldr	r1, [r7, #8]
 8007f8a:	68f8      	ldr	r0, [r7, #12]
 8007f8c:	f7ff fde7 	bl	8007b5e <get_fat>
 8007f90:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d031      	beq.n	8007ffc <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d101      	bne.n	8007fa2 <remove_chain+0x64>
 8007f9e:	2302      	movs	r3, #2
 8007fa0:	e02e      	b.n	8008000 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fa8:	d101      	bne.n	8007fae <remove_chain+0x70>
 8007faa:	2301      	movs	r3, #1
 8007fac:	e028      	b.n	8008000 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007fae:	2200      	movs	r2, #0
 8007fb0:	68b9      	ldr	r1, [r7, #8]
 8007fb2:	69b8      	ldr	r0, [r7, #24]
 8007fb4:	f7ff fea7 	bl	8007d06 <put_fat>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007fbc:	7ffb      	ldrb	r3, [r7, #31]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d001      	beq.n	8007fc6 <remove_chain+0x88>
 8007fc2:	7ffb      	ldrb	r3, [r7, #31]
 8007fc4:	e01c      	b.n	8008000 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007fc6:	69bb      	ldr	r3, [r7, #24]
 8007fc8:	695a      	ldr	r2, [r3, #20]
 8007fca:	69bb      	ldr	r3, [r7, #24]
 8007fcc:	699b      	ldr	r3, [r3, #24]
 8007fce:	3b02      	subs	r3, #2
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d20b      	bcs.n	8007fec <remove_chain+0xae>
			fs->free_clst++;
 8007fd4:	69bb      	ldr	r3, [r7, #24]
 8007fd6:	695b      	ldr	r3, [r3, #20]
 8007fd8:	1c5a      	adds	r2, r3, #1
 8007fda:	69bb      	ldr	r3, [r7, #24]
 8007fdc:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8007fde:	69bb      	ldr	r3, [r7, #24]
 8007fe0:	791b      	ldrb	r3, [r3, #4]
 8007fe2:	f043 0301 	orr.w	r3, r3, #1
 8007fe6:	b2da      	uxtb	r2, r3
 8007fe8:	69bb      	ldr	r3, [r7, #24]
 8007fea:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007ff0:	69bb      	ldr	r3, [r7, #24]
 8007ff2:	699b      	ldr	r3, [r3, #24]
 8007ff4:	68ba      	ldr	r2, [r7, #8]
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d3c6      	bcc.n	8007f88 <remove_chain+0x4a>
 8007ffa:	e000      	b.n	8007ffe <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007ffc:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007ffe:	2300      	movs	r3, #0
}
 8008000:	4618      	mov	r0, r3
 8008002:	3720      	adds	r7, #32
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}

08008008 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b088      	sub	sp, #32
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d10d      	bne.n	800803a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	691b      	ldr	r3, [r3, #16]
 8008022:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008024:	69bb      	ldr	r3, [r7, #24]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d004      	beq.n	8008034 <create_chain+0x2c>
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	699b      	ldr	r3, [r3, #24]
 800802e:	69ba      	ldr	r2, [r7, #24]
 8008030:	429a      	cmp	r2, r3
 8008032:	d31b      	bcc.n	800806c <create_chain+0x64>
 8008034:	2301      	movs	r3, #1
 8008036:	61bb      	str	r3, [r7, #24]
 8008038:	e018      	b.n	800806c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800803a:	6839      	ldr	r1, [r7, #0]
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f7ff fd8e 	bl	8007b5e <get_fat>
 8008042:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2b01      	cmp	r3, #1
 8008048:	d801      	bhi.n	800804e <create_chain+0x46>
 800804a:	2301      	movs	r3, #1
 800804c:	e070      	b.n	8008130 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008054:	d101      	bne.n	800805a <create_chain+0x52>
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	e06a      	b.n	8008130 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	699b      	ldr	r3, [r3, #24]
 800805e:	68fa      	ldr	r2, [r7, #12]
 8008060:	429a      	cmp	r2, r3
 8008062:	d201      	bcs.n	8008068 <create_chain+0x60>
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	e063      	b.n	8008130 <create_chain+0x128>
		scl = clst;
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800806c:	69bb      	ldr	r3, [r7, #24]
 800806e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008070:	69fb      	ldr	r3, [r7, #28]
 8008072:	3301      	adds	r3, #1
 8008074:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	699b      	ldr	r3, [r3, #24]
 800807a:	69fa      	ldr	r2, [r7, #28]
 800807c:	429a      	cmp	r2, r3
 800807e:	d307      	bcc.n	8008090 <create_chain+0x88>
				ncl = 2;
 8008080:	2302      	movs	r3, #2
 8008082:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008084:	69fa      	ldr	r2, [r7, #28]
 8008086:	69bb      	ldr	r3, [r7, #24]
 8008088:	429a      	cmp	r2, r3
 800808a:	d901      	bls.n	8008090 <create_chain+0x88>
 800808c:	2300      	movs	r3, #0
 800808e:	e04f      	b.n	8008130 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008090:	69f9      	ldr	r1, [r7, #28]
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f7ff fd63 	bl	8007b5e <get_fat>
 8008098:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d00e      	beq.n	80080be <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	d003      	beq.n	80080ae <create_chain+0xa6>
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ac:	d101      	bne.n	80080b2 <create_chain+0xaa>
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	e03e      	b.n	8008130 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80080b2:	69fa      	ldr	r2, [r7, #28]
 80080b4:	69bb      	ldr	r3, [r7, #24]
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d1da      	bne.n	8008070 <create_chain+0x68>
 80080ba:	2300      	movs	r3, #0
 80080bc:	e038      	b.n	8008130 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80080be:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80080c0:	f04f 32ff 	mov.w	r2, #4294967295
 80080c4:	69f9      	ldr	r1, [r7, #28]
 80080c6:	6938      	ldr	r0, [r7, #16]
 80080c8:	f7ff fe1d 	bl	8007d06 <put_fat>
 80080cc:	4603      	mov	r3, r0
 80080ce:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80080d0:	7dfb      	ldrb	r3, [r7, #23]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d109      	bne.n	80080ea <create_chain+0xe2>
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d006      	beq.n	80080ea <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80080dc:	69fa      	ldr	r2, [r7, #28]
 80080de:	6839      	ldr	r1, [r7, #0]
 80080e0:	6938      	ldr	r0, [r7, #16]
 80080e2:	f7ff fe10 	bl	8007d06 <put_fat>
 80080e6:	4603      	mov	r3, r0
 80080e8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80080ea:	7dfb      	ldrb	r3, [r7, #23]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d116      	bne.n	800811e <create_chain+0x116>
		fs->last_clst = ncl;
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	69fa      	ldr	r2, [r7, #28]
 80080f4:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	695a      	ldr	r2, [r3, #20]
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	699b      	ldr	r3, [r3, #24]
 80080fe:	3b02      	subs	r3, #2
 8008100:	429a      	cmp	r2, r3
 8008102:	d804      	bhi.n	800810e <create_chain+0x106>
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	695b      	ldr	r3, [r3, #20]
 8008108:	1e5a      	subs	r2, r3, #1
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	791b      	ldrb	r3, [r3, #4]
 8008112:	f043 0301 	orr.w	r3, r3, #1
 8008116:	b2da      	uxtb	r2, r3
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	711a      	strb	r2, [r3, #4]
 800811c:	e007      	b.n	800812e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800811e:	7dfb      	ldrb	r3, [r7, #23]
 8008120:	2b01      	cmp	r3, #1
 8008122:	d102      	bne.n	800812a <create_chain+0x122>
 8008124:	f04f 33ff 	mov.w	r3, #4294967295
 8008128:	e000      	b.n	800812c <create_chain+0x124>
 800812a:	2301      	movs	r3, #1
 800812c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800812e:	69fb      	ldr	r3, [r7, #28]
}
 8008130:	4618      	mov	r0, r3
 8008132:	3720      	adds	r7, #32
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b086      	sub	sp, #24
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800814e:	d204      	bcs.n	800815a <dir_sdi+0x22>
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	f003 031f 	and.w	r3, r3, #31
 8008156:	2b00      	cmp	r3, #0
 8008158:	d001      	beq.n	800815e <dir_sdi+0x26>
		return FR_INT_ERR;
 800815a:	2302      	movs	r3, #2
 800815c:	e071      	b.n	8008242 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	683a      	ldr	r2, [r7, #0]
 8008162:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	689b      	ldr	r3, [r3, #8]
 8008168:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d106      	bne.n	800817e <dir_sdi+0x46>
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	2b02      	cmp	r3, #2
 8008176:	d902      	bls.n	800817e <dir_sdi+0x46>
		clst = fs->dirbase;
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800817c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d10c      	bne.n	800819e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	095b      	lsrs	r3, r3, #5
 8008188:	693a      	ldr	r2, [r7, #16]
 800818a:	8912      	ldrh	r2, [r2, #8]
 800818c:	4293      	cmp	r3, r2
 800818e:	d301      	bcc.n	8008194 <dir_sdi+0x5c>
 8008190:	2302      	movs	r3, #2
 8008192:	e056      	b.n	8008242 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	61da      	str	r2, [r3, #28]
 800819c:	e02d      	b.n	80081fa <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	895b      	ldrh	r3, [r3, #10]
 80081a2:	461a      	mov	r2, r3
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	899b      	ldrh	r3, [r3, #12]
 80081a8:	fb03 f302 	mul.w	r3, r3, r2
 80081ac:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80081ae:	e019      	b.n	80081e4 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6979      	ldr	r1, [r7, #20]
 80081b4:	4618      	mov	r0, r3
 80081b6:	f7ff fcd2 	bl	8007b5e <get_fat>
 80081ba:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081c2:	d101      	bne.n	80081c8 <dir_sdi+0x90>
 80081c4:	2301      	movs	r3, #1
 80081c6:	e03c      	b.n	8008242 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d904      	bls.n	80081d8 <dir_sdi+0xa0>
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	699b      	ldr	r3, [r3, #24]
 80081d2:	697a      	ldr	r2, [r7, #20]
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d301      	bcc.n	80081dc <dir_sdi+0xa4>
 80081d8:	2302      	movs	r3, #2
 80081da:	e032      	b.n	8008242 <dir_sdi+0x10a>
			ofs -= csz;
 80081dc:	683a      	ldr	r2, [r7, #0]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	1ad3      	subs	r3, r2, r3
 80081e2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80081e4:	683a      	ldr	r2, [r7, #0]
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d2e1      	bcs.n	80081b0 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80081ec:	6979      	ldr	r1, [r7, #20]
 80081ee:	6938      	ldr	r0, [r7, #16]
 80081f0:	f7ff fc96 	bl	8007b20 <clust2sect>
 80081f4:	4602      	mov	r2, r0
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	697a      	ldr	r2, [r7, #20]
 80081fe:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	69db      	ldr	r3, [r3, #28]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d101      	bne.n	800820c <dir_sdi+0xd4>
 8008208:	2302      	movs	r3, #2
 800820a:	e01a      	b.n	8008242 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	69da      	ldr	r2, [r3, #28]
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	899b      	ldrh	r3, [r3, #12]
 8008214:	4619      	mov	r1, r3
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	fbb3 f3f1 	udiv	r3, r3, r1
 800821c:	441a      	add	r2, r3
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	899b      	ldrh	r3, [r3, #12]
 800822c:	461a      	mov	r2, r3
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	fbb3 f0f2 	udiv	r0, r3, r2
 8008234:	fb02 f200 	mul.w	r2, r2, r0
 8008238:	1a9b      	subs	r3, r3, r2
 800823a:	18ca      	adds	r2, r1, r3
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008240:	2300      	movs	r3, #0
}
 8008242:	4618      	mov	r0, r3
 8008244:	3718      	adds	r7, #24
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}

0800824a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800824a:	b580      	push	{r7, lr}
 800824c:	b086      	sub	sp, #24
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
 8008252:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	695b      	ldr	r3, [r3, #20]
 800825e:	3320      	adds	r3, #32
 8008260:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	69db      	ldr	r3, [r3, #28]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d003      	beq.n	8008272 <dir_next+0x28>
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008270:	d301      	bcc.n	8008276 <dir_next+0x2c>
 8008272:	2304      	movs	r3, #4
 8008274:	e0bb      	b.n	80083ee <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	899b      	ldrh	r3, [r3, #12]
 800827a:	461a      	mov	r2, r3
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008282:	fb02 f201 	mul.w	r2, r2, r1
 8008286:	1a9b      	subs	r3, r3, r2
 8008288:	2b00      	cmp	r3, #0
 800828a:	f040 809d 	bne.w	80083c8 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	69db      	ldr	r3, [r3, #28]
 8008292:	1c5a      	adds	r2, r3, #1
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	699b      	ldr	r3, [r3, #24]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d10b      	bne.n	80082b8 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	095b      	lsrs	r3, r3, #5
 80082a4:	68fa      	ldr	r2, [r7, #12]
 80082a6:	8912      	ldrh	r2, [r2, #8]
 80082a8:	4293      	cmp	r3, r2
 80082aa:	f0c0 808d 	bcc.w	80083c8 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2200      	movs	r2, #0
 80082b2:	61da      	str	r2, [r3, #28]
 80082b4:	2304      	movs	r3, #4
 80082b6:	e09a      	b.n	80083ee <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	899b      	ldrh	r3, [r3, #12]
 80082bc:	461a      	mov	r2, r3
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80082c4:	68fa      	ldr	r2, [r7, #12]
 80082c6:	8952      	ldrh	r2, [r2, #10]
 80082c8:	3a01      	subs	r2, #1
 80082ca:	4013      	ands	r3, r2
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d17b      	bne.n	80083c8 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80082d0:	687a      	ldr	r2, [r7, #4]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	699b      	ldr	r3, [r3, #24]
 80082d6:	4619      	mov	r1, r3
 80082d8:	4610      	mov	r0, r2
 80082da:	f7ff fc40 	bl	8007b5e <get_fat>
 80082de:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d801      	bhi.n	80082ea <dir_next+0xa0>
 80082e6:	2302      	movs	r3, #2
 80082e8:	e081      	b.n	80083ee <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082f0:	d101      	bne.n	80082f6 <dir_next+0xac>
 80082f2:	2301      	movs	r3, #1
 80082f4:	e07b      	b.n	80083ee <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	699b      	ldr	r3, [r3, #24]
 80082fa:	697a      	ldr	r2, [r7, #20]
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d359      	bcc.n	80083b4 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d104      	bne.n	8008310 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2200      	movs	r2, #0
 800830a:	61da      	str	r2, [r3, #28]
 800830c:	2304      	movs	r3, #4
 800830e:	e06e      	b.n	80083ee <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008310:	687a      	ldr	r2, [r7, #4]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	699b      	ldr	r3, [r3, #24]
 8008316:	4619      	mov	r1, r3
 8008318:	4610      	mov	r0, r2
 800831a:	f7ff fe75 	bl	8008008 <create_chain>
 800831e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d101      	bne.n	800832a <dir_next+0xe0>
 8008326:	2307      	movs	r3, #7
 8008328:	e061      	b.n	80083ee <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	2b01      	cmp	r3, #1
 800832e:	d101      	bne.n	8008334 <dir_next+0xea>
 8008330:	2302      	movs	r3, #2
 8008332:	e05c      	b.n	80083ee <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800833a:	d101      	bne.n	8008340 <dir_next+0xf6>
 800833c:	2301      	movs	r3, #1
 800833e:	e056      	b.n	80083ee <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008340:	68f8      	ldr	r0, [r7, #12]
 8008342:	f7ff fb0b 	bl	800795c <sync_window>
 8008346:	4603      	mov	r3, r0
 8008348:	2b00      	cmp	r3, #0
 800834a:	d001      	beq.n	8008350 <dir_next+0x106>
 800834c:	2301      	movs	r3, #1
 800834e:	e04e      	b.n	80083ee <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	899b      	ldrh	r3, [r3, #12]
 800835a:	461a      	mov	r2, r3
 800835c:	2100      	movs	r1, #0
 800835e:	f7ff f934 	bl	80075ca <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008362:	2300      	movs	r3, #0
 8008364:	613b      	str	r3, [r7, #16]
 8008366:	6979      	ldr	r1, [r7, #20]
 8008368:	68f8      	ldr	r0, [r7, #12]
 800836a:	f7ff fbd9 	bl	8007b20 <clust2sect>
 800836e:	4602      	mov	r2, r0
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	631a      	str	r2, [r3, #48]	; 0x30
 8008374:	e012      	b.n	800839c <dir_next+0x152>
						fs->wflag = 1;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2201      	movs	r2, #1
 800837a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800837c:	68f8      	ldr	r0, [r7, #12]
 800837e:	f7ff faed 	bl	800795c <sync_window>
 8008382:	4603      	mov	r3, r0
 8008384:	2b00      	cmp	r3, #0
 8008386:	d001      	beq.n	800838c <dir_next+0x142>
 8008388:	2301      	movs	r3, #1
 800838a:	e030      	b.n	80083ee <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	3301      	adds	r3, #1
 8008390:	613b      	str	r3, [r7, #16]
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008396:	1c5a      	adds	r2, r3, #1
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	631a      	str	r2, [r3, #48]	; 0x30
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	895b      	ldrh	r3, [r3, #10]
 80083a0:	461a      	mov	r2, r3
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d3e6      	bcc.n	8008376 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	1ad2      	subs	r2, r2, r3
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	697a      	ldr	r2, [r7, #20]
 80083b8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80083ba:	6979      	ldr	r1, [r7, #20]
 80083bc:	68f8      	ldr	r0, [r7, #12]
 80083be:	f7ff fbaf 	bl	8007b20 <clust2sect>
 80083c2:	4602      	mov	r2, r0
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	68ba      	ldr	r2, [r7, #8]
 80083cc:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	899b      	ldrh	r3, [r3, #12]
 80083d8:	461a      	mov	r2, r3
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	fbb3 f0f2 	udiv	r0, r3, r2
 80083e0:	fb02 f200 	mul.w	r2, r2, r0
 80083e4:	1a9b      	subs	r3, r3, r2
 80083e6:	18ca      	adds	r2, r1, r3
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80083ec:	2300      	movs	r3, #0
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3718      	adds	r7, #24
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}

080083f6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80083f6:	b580      	push	{r7, lr}
 80083f8:	b086      	sub	sp, #24
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	6078      	str	r0, [r7, #4]
 80083fe:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008406:	2100      	movs	r1, #0
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f7ff fe95 	bl	8008138 <dir_sdi>
 800840e:	4603      	mov	r3, r0
 8008410:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008412:	7dfb      	ldrb	r3, [r7, #23]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d12b      	bne.n	8008470 <dir_alloc+0x7a>
		n = 0;
 8008418:	2300      	movs	r3, #0
 800841a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	69db      	ldr	r3, [r3, #28]
 8008420:	4619      	mov	r1, r3
 8008422:	68f8      	ldr	r0, [r7, #12]
 8008424:	f7ff fade 	bl	80079e4 <move_window>
 8008428:	4603      	mov	r3, r0
 800842a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800842c:	7dfb      	ldrb	r3, [r7, #23]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d11d      	bne.n	800846e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6a1b      	ldr	r3, [r3, #32]
 8008436:	781b      	ldrb	r3, [r3, #0]
 8008438:	2be5      	cmp	r3, #229	; 0xe5
 800843a:	d004      	beq.n	8008446 <dir_alloc+0x50>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6a1b      	ldr	r3, [r3, #32]
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d107      	bne.n	8008456 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	3301      	adds	r3, #1
 800844a:	613b      	str	r3, [r7, #16]
 800844c:	693a      	ldr	r2, [r7, #16]
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	429a      	cmp	r2, r3
 8008452:	d102      	bne.n	800845a <dir_alloc+0x64>
 8008454:	e00c      	b.n	8008470 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008456:	2300      	movs	r3, #0
 8008458:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800845a:	2101      	movs	r1, #1
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f7ff fef4 	bl	800824a <dir_next>
 8008462:	4603      	mov	r3, r0
 8008464:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008466:	7dfb      	ldrb	r3, [r7, #23]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d0d7      	beq.n	800841c <dir_alloc+0x26>
 800846c:	e000      	b.n	8008470 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800846e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008470:	7dfb      	ldrb	r3, [r7, #23]
 8008472:	2b04      	cmp	r3, #4
 8008474:	d101      	bne.n	800847a <dir_alloc+0x84>
 8008476:	2307      	movs	r3, #7
 8008478:	75fb      	strb	r3, [r7, #23]
	return res;
 800847a:	7dfb      	ldrb	r3, [r7, #23]
}
 800847c:	4618      	mov	r0, r3
 800847e:	3718      	adds	r7, #24
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b084      	sub	sp, #16
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	331a      	adds	r3, #26
 8008492:	4618      	mov	r0, r3
 8008494:	f7fe fff6 	bl	8007484 <ld_word>
 8008498:	4603      	mov	r3, r0
 800849a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	781b      	ldrb	r3, [r3, #0]
 80084a0:	2b03      	cmp	r3, #3
 80084a2:	d109      	bne.n	80084b8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	3314      	adds	r3, #20
 80084a8:	4618      	mov	r0, r3
 80084aa:	f7fe ffeb 	bl	8007484 <ld_word>
 80084ae:	4603      	mov	r3, r0
 80084b0:	041b      	lsls	r3, r3, #16
 80084b2:	68fa      	ldr	r2, [r7, #12]
 80084b4:	4313      	orrs	r3, r2
 80084b6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80084b8:	68fb      	ldr	r3, [r7, #12]
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	3710      	adds	r7, #16
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}

080084c2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80084c2:	b580      	push	{r7, lr}
 80084c4:	b084      	sub	sp, #16
 80084c6:	af00      	add	r7, sp, #0
 80084c8:	60f8      	str	r0, [r7, #12]
 80084ca:	60b9      	str	r1, [r7, #8]
 80084cc:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	331a      	adds	r3, #26
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	b292      	uxth	r2, r2
 80084d6:	4611      	mov	r1, r2
 80084d8:	4618      	mov	r0, r3
 80084da:	f7ff f80e 	bl	80074fa <st_word>
	if (fs->fs_type == FS_FAT32) {
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	2b03      	cmp	r3, #3
 80084e4:	d109      	bne.n	80084fa <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	f103 0214 	add.w	r2, r3, #20
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	0c1b      	lsrs	r3, r3, #16
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	4619      	mov	r1, r3
 80084f4:	4610      	mov	r0, r2
 80084f6:	f7ff f800 	bl	80074fa <st_word>
	}
}
 80084fa:	bf00      	nop
 80084fc:	3710      	adds	r7, #16
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}

08008502 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008502:	b580      	push	{r7, lr}
 8008504:	b086      	sub	sp, #24
 8008506:	af00      	add	r7, sp, #0
 8008508:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008510:	2100      	movs	r1, #0
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f7ff fe10 	bl	8008138 <dir_sdi>
 8008518:	4603      	mov	r3, r0
 800851a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800851c:	7dfb      	ldrb	r3, [r7, #23]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d001      	beq.n	8008526 <dir_find+0x24>
 8008522:	7dfb      	ldrb	r3, [r7, #23]
 8008524:	e03e      	b.n	80085a4 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	69db      	ldr	r3, [r3, #28]
 800852a:	4619      	mov	r1, r3
 800852c:	6938      	ldr	r0, [r7, #16]
 800852e:	f7ff fa59 	bl	80079e4 <move_window>
 8008532:	4603      	mov	r3, r0
 8008534:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008536:	7dfb      	ldrb	r3, [r7, #23]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d12f      	bne.n	800859c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6a1b      	ldr	r3, [r3, #32]
 8008540:	781b      	ldrb	r3, [r3, #0]
 8008542:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008544:	7bfb      	ldrb	r3, [r7, #15]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d102      	bne.n	8008550 <dir_find+0x4e>
 800854a:	2304      	movs	r3, #4
 800854c:	75fb      	strb	r3, [r7, #23]
 800854e:	e028      	b.n	80085a2 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6a1b      	ldr	r3, [r3, #32]
 8008554:	330b      	adds	r3, #11
 8008556:	781b      	ldrb	r3, [r3, #0]
 8008558:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800855c:	b2da      	uxtb	r2, r3
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6a1b      	ldr	r3, [r3, #32]
 8008566:	330b      	adds	r3, #11
 8008568:	781b      	ldrb	r3, [r3, #0]
 800856a:	f003 0308 	and.w	r3, r3, #8
 800856e:	2b00      	cmp	r3, #0
 8008570:	d10a      	bne.n	8008588 <dir_find+0x86>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6a18      	ldr	r0, [r3, #32]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	3324      	adds	r3, #36	; 0x24
 800857a:	220b      	movs	r2, #11
 800857c:	4619      	mov	r1, r3
 800857e:	f7ff f83f 	bl	8007600 <mem_cmp>
 8008582:	4603      	mov	r3, r0
 8008584:	2b00      	cmp	r3, #0
 8008586:	d00b      	beq.n	80085a0 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008588:	2100      	movs	r1, #0
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f7ff fe5d 	bl	800824a <dir_next>
 8008590:	4603      	mov	r3, r0
 8008592:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008594:	7dfb      	ldrb	r3, [r7, #23]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d0c5      	beq.n	8008526 <dir_find+0x24>
 800859a:	e002      	b.n	80085a2 <dir_find+0xa0>
		if (res != FR_OK) break;
 800859c:	bf00      	nop
 800859e:	e000      	b.n	80085a2 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80085a0:	bf00      	nop

	return res;
 80085a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3718      	adds	r7, #24
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b084      	sub	sp, #16
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80085ba:	2101      	movs	r1, #1
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f7ff ff1a 	bl	80083f6 <dir_alloc>
 80085c2:	4603      	mov	r3, r0
 80085c4:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80085c6:	7bfb      	ldrb	r3, [r7, #15]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d11c      	bne.n	8008606 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	69db      	ldr	r3, [r3, #28]
 80085d0:	4619      	mov	r1, r3
 80085d2:	68b8      	ldr	r0, [r7, #8]
 80085d4:	f7ff fa06 	bl	80079e4 <move_window>
 80085d8:	4603      	mov	r3, r0
 80085da:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80085dc:	7bfb      	ldrb	r3, [r7, #15]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d111      	bne.n	8008606 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6a1b      	ldr	r3, [r3, #32]
 80085e6:	2220      	movs	r2, #32
 80085e8:	2100      	movs	r1, #0
 80085ea:	4618      	mov	r0, r3
 80085ec:	f7fe ffed 	bl	80075ca <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6a18      	ldr	r0, [r3, #32]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	3324      	adds	r3, #36	; 0x24
 80085f8:	220b      	movs	r2, #11
 80085fa:	4619      	mov	r1, r3
 80085fc:	f7fe ffc4 	bl	8007588 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	2201      	movs	r2, #1
 8008604:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008606:	7bfb      	ldrb	r3, [r7, #15]
}
 8008608:	4618      	mov	r0, r3
 800860a:	3710      	adds	r7, #16
 800860c:	46bd      	mov	sp, r7
 800860e:	bd80      	pop	{r7, pc}

08008610 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b088      	sub	sp, #32
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
 8008618:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	60fb      	str	r3, [r7, #12]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	3324      	adds	r3, #36	; 0x24
 8008624:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8008626:	220b      	movs	r2, #11
 8008628:	2120      	movs	r1, #32
 800862a:	68b8      	ldr	r0, [r7, #8]
 800862c:	f7fe ffcd 	bl	80075ca <mem_set>
	si = i = 0; ni = 8;
 8008630:	2300      	movs	r3, #0
 8008632:	613b      	str	r3, [r7, #16]
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	61fb      	str	r3, [r7, #28]
 8008638:	2308      	movs	r3, #8
 800863a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800863c:	69fb      	ldr	r3, [r7, #28]
 800863e:	1c5a      	adds	r2, r3, #1
 8008640:	61fa      	str	r2, [r7, #28]
 8008642:	68fa      	ldr	r2, [r7, #12]
 8008644:	4413      	add	r3, r2
 8008646:	781b      	ldrb	r3, [r3, #0]
 8008648:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800864a:	7efb      	ldrb	r3, [r7, #27]
 800864c:	2b20      	cmp	r3, #32
 800864e:	d94e      	bls.n	80086ee <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8008650:	7efb      	ldrb	r3, [r7, #27]
 8008652:	2b2f      	cmp	r3, #47	; 0x2f
 8008654:	d006      	beq.n	8008664 <create_name+0x54>
 8008656:	7efb      	ldrb	r3, [r7, #27]
 8008658:	2b5c      	cmp	r3, #92	; 0x5c
 800865a:	d110      	bne.n	800867e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800865c:	e002      	b.n	8008664 <create_name+0x54>
 800865e:	69fb      	ldr	r3, [r7, #28]
 8008660:	3301      	adds	r3, #1
 8008662:	61fb      	str	r3, [r7, #28]
 8008664:	68fa      	ldr	r2, [r7, #12]
 8008666:	69fb      	ldr	r3, [r7, #28]
 8008668:	4413      	add	r3, r2
 800866a:	781b      	ldrb	r3, [r3, #0]
 800866c:	2b2f      	cmp	r3, #47	; 0x2f
 800866e:	d0f6      	beq.n	800865e <create_name+0x4e>
 8008670:	68fa      	ldr	r2, [r7, #12]
 8008672:	69fb      	ldr	r3, [r7, #28]
 8008674:	4413      	add	r3, r2
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	2b5c      	cmp	r3, #92	; 0x5c
 800867a:	d0f0      	beq.n	800865e <create_name+0x4e>
			break;
 800867c:	e038      	b.n	80086f0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800867e:	7efb      	ldrb	r3, [r7, #27]
 8008680:	2b2e      	cmp	r3, #46	; 0x2e
 8008682:	d003      	beq.n	800868c <create_name+0x7c>
 8008684:	693a      	ldr	r2, [r7, #16]
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	429a      	cmp	r2, r3
 800868a:	d30c      	bcc.n	80086a6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	2b0b      	cmp	r3, #11
 8008690:	d002      	beq.n	8008698 <create_name+0x88>
 8008692:	7efb      	ldrb	r3, [r7, #27]
 8008694:	2b2e      	cmp	r3, #46	; 0x2e
 8008696:	d001      	beq.n	800869c <create_name+0x8c>
 8008698:	2306      	movs	r3, #6
 800869a:	e044      	b.n	8008726 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800869c:	2308      	movs	r3, #8
 800869e:	613b      	str	r3, [r7, #16]
 80086a0:	230b      	movs	r3, #11
 80086a2:	617b      	str	r3, [r7, #20]
			continue;
 80086a4:	e022      	b.n	80086ec <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80086a6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	da04      	bge.n	80086b8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80086ae:	7efb      	ldrb	r3, [r7, #27]
 80086b0:	3b80      	subs	r3, #128	; 0x80
 80086b2:	4a1f      	ldr	r2, [pc, #124]	; (8008730 <create_name+0x120>)
 80086b4:	5cd3      	ldrb	r3, [r2, r3]
 80086b6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80086b8:	7efb      	ldrb	r3, [r7, #27]
 80086ba:	4619      	mov	r1, r3
 80086bc:	481d      	ldr	r0, [pc, #116]	; (8008734 <create_name+0x124>)
 80086be:	f7fe ffc6 	bl	800764e <chk_chr>
 80086c2:	4603      	mov	r3, r0
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d001      	beq.n	80086cc <create_name+0xbc>
 80086c8:	2306      	movs	r3, #6
 80086ca:	e02c      	b.n	8008726 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80086cc:	7efb      	ldrb	r3, [r7, #27]
 80086ce:	2b60      	cmp	r3, #96	; 0x60
 80086d0:	d905      	bls.n	80086de <create_name+0xce>
 80086d2:	7efb      	ldrb	r3, [r7, #27]
 80086d4:	2b7a      	cmp	r3, #122	; 0x7a
 80086d6:	d802      	bhi.n	80086de <create_name+0xce>
 80086d8:	7efb      	ldrb	r3, [r7, #27]
 80086da:	3b20      	subs	r3, #32
 80086dc:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	1c5a      	adds	r2, r3, #1
 80086e2:	613a      	str	r2, [r7, #16]
 80086e4:	68ba      	ldr	r2, [r7, #8]
 80086e6:	4413      	add	r3, r2
 80086e8:	7efa      	ldrb	r2, [r7, #27]
 80086ea:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80086ec:	e7a6      	b.n	800863c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80086ee:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80086f0:	68fa      	ldr	r2, [r7, #12]
 80086f2:	69fb      	ldr	r3, [r7, #28]
 80086f4:	441a      	add	r2, r3
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d101      	bne.n	8008704 <create_name+0xf4>
 8008700:	2306      	movs	r3, #6
 8008702:	e010      	b.n	8008726 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	2be5      	cmp	r3, #229	; 0xe5
 800870a:	d102      	bne.n	8008712 <create_name+0x102>
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	2205      	movs	r2, #5
 8008710:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008712:	7efb      	ldrb	r3, [r7, #27]
 8008714:	2b20      	cmp	r3, #32
 8008716:	d801      	bhi.n	800871c <create_name+0x10c>
 8008718:	2204      	movs	r2, #4
 800871a:	e000      	b.n	800871e <create_name+0x10e>
 800871c:	2200      	movs	r2, #0
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	330b      	adds	r3, #11
 8008722:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008724:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8008726:	4618      	mov	r0, r3
 8008728:	3720      	adds	r7, #32
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}
 800872e:	bf00      	nop
 8008730:	08009e24 	.word	0x08009e24
 8008734:	08009dbc 	.word	0x08009dbc

08008738 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b086      	sub	sp, #24
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800874c:	e002      	b.n	8008754 <follow_path+0x1c>
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	3301      	adds	r3, #1
 8008752:	603b      	str	r3, [r7, #0]
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	2b2f      	cmp	r3, #47	; 0x2f
 800875a:	d0f8      	beq.n	800874e <follow_path+0x16>
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	781b      	ldrb	r3, [r3, #0]
 8008760:	2b5c      	cmp	r3, #92	; 0x5c
 8008762:	d0f4      	beq.n	800874e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	2200      	movs	r2, #0
 8008768:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	781b      	ldrb	r3, [r3, #0]
 800876e:	2b1f      	cmp	r3, #31
 8008770:	d80a      	bhi.n	8008788 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2280      	movs	r2, #128	; 0x80
 8008776:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800877a:	2100      	movs	r1, #0
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f7ff fcdb 	bl	8008138 <dir_sdi>
 8008782:	4603      	mov	r3, r0
 8008784:	75fb      	strb	r3, [r7, #23]
 8008786:	e048      	b.n	800881a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008788:	463b      	mov	r3, r7
 800878a:	4619      	mov	r1, r3
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f7ff ff3f 	bl	8008610 <create_name>
 8008792:	4603      	mov	r3, r0
 8008794:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008796:	7dfb      	ldrb	r3, [r7, #23]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d139      	bne.n	8008810 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f7ff feb0 	bl	8008502 <dir_find>
 80087a2:	4603      	mov	r3, r0
 80087a4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80087ac:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80087ae:	7dfb      	ldrb	r3, [r7, #23]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d00a      	beq.n	80087ca <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80087b4:	7dfb      	ldrb	r3, [r7, #23]
 80087b6:	2b04      	cmp	r3, #4
 80087b8:	d12c      	bne.n	8008814 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80087ba:	7afb      	ldrb	r3, [r7, #11]
 80087bc:	f003 0304 	and.w	r3, r3, #4
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d127      	bne.n	8008814 <follow_path+0xdc>
 80087c4:	2305      	movs	r3, #5
 80087c6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80087c8:	e024      	b.n	8008814 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80087ca:	7afb      	ldrb	r3, [r7, #11]
 80087cc:	f003 0304 	and.w	r3, r3, #4
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d121      	bne.n	8008818 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	799b      	ldrb	r3, [r3, #6]
 80087d8:	f003 0310 	and.w	r3, r3, #16
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d102      	bne.n	80087e6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80087e0:	2305      	movs	r3, #5
 80087e2:	75fb      	strb	r3, [r7, #23]
 80087e4:	e019      	b.n	800881a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	695b      	ldr	r3, [r3, #20]
 80087f0:	68fa      	ldr	r2, [r7, #12]
 80087f2:	8992      	ldrh	r2, [r2, #12]
 80087f4:	fbb3 f0f2 	udiv	r0, r3, r2
 80087f8:	fb02 f200 	mul.w	r2, r2, r0
 80087fc:	1a9b      	subs	r3, r3, r2
 80087fe:	440b      	add	r3, r1
 8008800:	4619      	mov	r1, r3
 8008802:	68f8      	ldr	r0, [r7, #12]
 8008804:	f7ff fe3e 	bl	8008484 <ld_clust>
 8008808:	4602      	mov	r2, r0
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800880e:	e7bb      	b.n	8008788 <follow_path+0x50>
			if (res != FR_OK) break;
 8008810:	bf00      	nop
 8008812:	e002      	b.n	800881a <follow_path+0xe2>
				break;
 8008814:	bf00      	nop
 8008816:	e000      	b.n	800881a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008818:	bf00      	nop
			}
		}
	}

	return res;
 800881a:	7dfb      	ldrb	r3, [r7, #23]
}
 800881c:	4618      	mov	r0, r3
 800881e:	3718      	adds	r7, #24
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}

08008824 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008824:	b480      	push	{r7}
 8008826:	b087      	sub	sp, #28
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800882c:	f04f 33ff 	mov.w	r3, #4294967295
 8008830:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d031      	beq.n	800889e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	617b      	str	r3, [r7, #20]
 8008840:	e002      	b.n	8008848 <get_ldnumber+0x24>
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	3301      	adds	r3, #1
 8008846:	617b      	str	r3, [r7, #20]
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	781b      	ldrb	r3, [r3, #0]
 800884c:	2b20      	cmp	r3, #32
 800884e:	d903      	bls.n	8008858 <get_ldnumber+0x34>
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	2b3a      	cmp	r3, #58	; 0x3a
 8008856:	d1f4      	bne.n	8008842 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	781b      	ldrb	r3, [r3, #0]
 800885c:	2b3a      	cmp	r3, #58	; 0x3a
 800885e:	d11c      	bne.n	800889a <get_ldnumber+0x76>
			tp = *path;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	1c5a      	adds	r2, r3, #1
 800886a:	60fa      	str	r2, [r7, #12]
 800886c:	781b      	ldrb	r3, [r3, #0]
 800886e:	3b30      	subs	r3, #48	; 0x30
 8008870:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	2b09      	cmp	r3, #9
 8008876:	d80e      	bhi.n	8008896 <get_ldnumber+0x72>
 8008878:	68fa      	ldr	r2, [r7, #12]
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	429a      	cmp	r2, r3
 800887e:	d10a      	bne.n	8008896 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d107      	bne.n	8008896 <get_ldnumber+0x72>
					vol = (int)i;
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	3301      	adds	r3, #1
 800888e:	617b      	str	r3, [r7, #20]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	697a      	ldr	r2, [r7, #20]
 8008894:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	e002      	b.n	80088a0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800889a:	2300      	movs	r3, #0
 800889c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800889e:	693b      	ldr	r3, [r7, #16]
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	371c      	adds	r7, #28
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr

080088ac <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b082      	sub	sp, #8
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2200      	movs	r2, #0
 80088ba:	70da      	strb	r2, [r3, #3]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f04f 32ff 	mov.w	r2, #4294967295
 80088c2:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80088c4:	6839      	ldr	r1, [r7, #0]
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f7ff f88c 	bl	80079e4 <move_window>
 80088cc:	4603      	mov	r3, r0
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d001      	beq.n	80088d6 <check_fs+0x2a>
 80088d2:	2304      	movs	r3, #4
 80088d4:	e038      	b.n	8008948 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	3334      	adds	r3, #52	; 0x34
 80088da:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80088de:	4618      	mov	r0, r3
 80088e0:	f7fe fdd0 	bl	8007484 <ld_word>
 80088e4:	4603      	mov	r3, r0
 80088e6:	461a      	mov	r2, r3
 80088e8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d001      	beq.n	80088f4 <check_fs+0x48>
 80088f0:	2303      	movs	r3, #3
 80088f2:	e029      	b.n	8008948 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80088fa:	2be9      	cmp	r3, #233	; 0xe9
 80088fc:	d009      	beq.n	8008912 <check_fs+0x66>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008904:	2beb      	cmp	r3, #235	; 0xeb
 8008906:	d11e      	bne.n	8008946 <check_fs+0x9a>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800890e:	2b90      	cmp	r3, #144	; 0x90
 8008910:	d119      	bne.n	8008946 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	3334      	adds	r3, #52	; 0x34
 8008916:	3336      	adds	r3, #54	; 0x36
 8008918:	4618      	mov	r0, r3
 800891a:	f7fe fdcb 	bl	80074b4 <ld_dword>
 800891e:	4603      	mov	r3, r0
 8008920:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008924:	4a0a      	ldr	r2, [pc, #40]	; (8008950 <check_fs+0xa4>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d101      	bne.n	800892e <check_fs+0x82>
 800892a:	2300      	movs	r3, #0
 800892c:	e00c      	b.n	8008948 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	3334      	adds	r3, #52	; 0x34
 8008932:	3352      	adds	r3, #82	; 0x52
 8008934:	4618      	mov	r0, r3
 8008936:	f7fe fdbd 	bl	80074b4 <ld_dword>
 800893a:	4603      	mov	r3, r0
 800893c:	4a05      	ldr	r2, [pc, #20]	; (8008954 <check_fs+0xa8>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d101      	bne.n	8008946 <check_fs+0x9a>
 8008942:	2300      	movs	r3, #0
 8008944:	e000      	b.n	8008948 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008946:	2302      	movs	r3, #2
}
 8008948:	4618      	mov	r0, r3
 800894a:	3708      	adds	r7, #8
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}
 8008950:	00544146 	.word	0x00544146
 8008954:	33544146 	.word	0x33544146

08008958 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b096      	sub	sp, #88	; 0x58
 800895c:	af00      	add	r7, sp, #0
 800895e:	60f8      	str	r0, [r7, #12]
 8008960:	60b9      	str	r1, [r7, #8]
 8008962:	4613      	mov	r3, r2
 8008964:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	2200      	movs	r2, #0
 800896a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800896c:	68f8      	ldr	r0, [r7, #12]
 800896e:	f7ff ff59 	bl	8008824 <get_ldnumber>
 8008972:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008976:	2b00      	cmp	r3, #0
 8008978:	da01      	bge.n	800897e <find_volume+0x26>
 800897a:	230b      	movs	r3, #11
 800897c:	e265      	b.n	8008e4a <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800897e:	4ab0      	ldr	r2, [pc, #704]	; (8008c40 <find_volume+0x2e8>)
 8008980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008986:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800898a:	2b00      	cmp	r3, #0
 800898c:	d101      	bne.n	8008992 <find_volume+0x3a>
 800898e:	230c      	movs	r3, #12
 8008990:	e25b      	b.n	8008e4a <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008996:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008998:	79fb      	ldrb	r3, [r7, #7]
 800899a:	f023 0301 	bic.w	r3, r3, #1
 800899e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80089a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089a2:	781b      	ldrb	r3, [r3, #0]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d01a      	beq.n	80089de <find_volume+0x86>
		stat = disk_status(fs->drv);
 80089a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089aa:	785b      	ldrb	r3, [r3, #1]
 80089ac:	4618      	mov	r0, r3
 80089ae:	f7fe fccb 	bl	8007348 <disk_status>
 80089b2:	4603      	mov	r3, r0
 80089b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80089b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80089bc:	f003 0301 	and.w	r3, r3, #1
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d10c      	bne.n	80089de <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80089c4:	79fb      	ldrb	r3, [r7, #7]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d007      	beq.n	80089da <find_volume+0x82>
 80089ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80089ce:	f003 0304 	and.w	r3, r3, #4
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d001      	beq.n	80089da <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80089d6:	230a      	movs	r3, #10
 80089d8:	e237      	b.n	8008e4a <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 80089da:	2300      	movs	r3, #0
 80089dc:	e235      	b.n	8008e4a <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80089de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089e0:	2200      	movs	r2, #0
 80089e2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80089e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089e6:	b2da      	uxtb	r2, r3
 80089e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ea:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80089ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ee:	785b      	ldrb	r3, [r3, #1]
 80089f0:	4618      	mov	r0, r3
 80089f2:	f7fe fcc3 	bl	800737c <disk_initialize>
 80089f6:	4603      	mov	r3, r0
 80089f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80089fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008a00:	f003 0301 	and.w	r3, r3, #1
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d001      	beq.n	8008a0c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008a08:	2303      	movs	r3, #3
 8008a0a:	e21e      	b.n	8008e4a <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008a0c:	79fb      	ldrb	r3, [r7, #7]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d007      	beq.n	8008a22 <find_volume+0xca>
 8008a12:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008a16:	f003 0304 	and.w	r3, r3, #4
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d001      	beq.n	8008a22 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008a1e:	230a      	movs	r3, #10
 8008a20:	e213      	b.n	8008e4a <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8008a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a24:	7858      	ldrb	r0, [r3, #1]
 8008a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a28:	330c      	adds	r3, #12
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	2102      	movs	r1, #2
 8008a2e:	f7fe fd0b 	bl	8007448 <disk_ioctl>
 8008a32:	4603      	mov	r3, r0
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d001      	beq.n	8008a3c <find_volume+0xe4>
 8008a38:	2301      	movs	r3, #1
 8008a3a:	e206      	b.n	8008e4a <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8008a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a3e:	899b      	ldrh	r3, [r3, #12]
 8008a40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a44:	d80d      	bhi.n	8008a62 <find_volume+0x10a>
 8008a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a48:	899b      	ldrh	r3, [r3, #12]
 8008a4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a4e:	d308      	bcc.n	8008a62 <find_volume+0x10a>
 8008a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a52:	899b      	ldrh	r3, [r3, #12]
 8008a54:	461a      	mov	r2, r3
 8008a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a58:	899b      	ldrh	r3, [r3, #12]
 8008a5a:	3b01      	subs	r3, #1
 8008a5c:	4013      	ands	r3, r2
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d001      	beq.n	8008a66 <find_volume+0x10e>
 8008a62:	2301      	movs	r3, #1
 8008a64:	e1f1      	b.n	8008e4a <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008a66:	2300      	movs	r3, #0
 8008a68:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008a6a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008a6c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008a6e:	f7ff ff1d 	bl	80088ac <check_fs>
 8008a72:	4603      	mov	r3, r0
 8008a74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008a78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008a7c:	2b02      	cmp	r3, #2
 8008a7e:	d14b      	bne.n	8008b18 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008a80:	2300      	movs	r3, #0
 8008a82:	643b      	str	r3, [r7, #64]	; 0x40
 8008a84:	e01f      	b.n	8008ac6 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a88:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008a8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a8e:	011b      	lsls	r3, r3, #4
 8008a90:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008a94:	4413      	add	r3, r2
 8008a96:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a9a:	3304      	adds	r3, #4
 8008a9c:	781b      	ldrb	r3, [r3, #0]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d006      	beq.n	8008ab0 <find_volume+0x158>
 8008aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa4:	3308      	adds	r3, #8
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f7fe fd04 	bl	80074b4 <ld_dword>
 8008aac:	4602      	mov	r2, r0
 8008aae:	e000      	b.n	8008ab2 <find_volume+0x15a>
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ab4:	009b      	lsls	r3, r3, #2
 8008ab6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8008aba:	440b      	add	r3, r1
 8008abc:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008ac0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	643b      	str	r3, [r7, #64]	; 0x40
 8008ac6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ac8:	2b03      	cmp	r3, #3
 8008aca:	d9dc      	bls.n	8008a86 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008acc:	2300      	movs	r3, #0
 8008ace:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008ad0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d002      	beq.n	8008adc <find_volume+0x184>
 8008ad6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ad8:	3b01      	subs	r3, #1
 8008ada:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008adc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ade:	009b      	lsls	r3, r3, #2
 8008ae0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008ae4:	4413      	add	r3, r2
 8008ae6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008aea:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008aec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d005      	beq.n	8008afe <find_volume+0x1a6>
 8008af2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008af4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008af6:	f7ff fed9 	bl	80088ac <check_fs>
 8008afa:	4603      	mov	r3, r0
 8008afc:	e000      	b.n	8008b00 <find_volume+0x1a8>
 8008afe:	2303      	movs	r3, #3
 8008b00:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008b04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008b08:	2b01      	cmp	r3, #1
 8008b0a:	d905      	bls.n	8008b18 <find_volume+0x1c0>
 8008b0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b0e:	3301      	adds	r3, #1
 8008b10:	643b      	str	r3, [r7, #64]	; 0x40
 8008b12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b14:	2b03      	cmp	r3, #3
 8008b16:	d9e1      	bls.n	8008adc <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008b18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008b1c:	2b04      	cmp	r3, #4
 8008b1e:	d101      	bne.n	8008b24 <find_volume+0x1cc>
 8008b20:	2301      	movs	r3, #1
 8008b22:	e192      	b.n	8008e4a <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008b24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008b28:	2b01      	cmp	r3, #1
 8008b2a:	d901      	bls.n	8008b30 <find_volume+0x1d8>
 8008b2c:	230d      	movs	r3, #13
 8008b2e:	e18c      	b.n	8008e4a <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b32:	3334      	adds	r3, #52	; 0x34
 8008b34:	330b      	adds	r3, #11
 8008b36:	4618      	mov	r0, r3
 8008b38:	f7fe fca4 	bl	8007484 <ld_word>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	461a      	mov	r2, r3
 8008b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b42:	899b      	ldrh	r3, [r3, #12]
 8008b44:	429a      	cmp	r2, r3
 8008b46:	d001      	beq.n	8008b4c <find_volume+0x1f4>
 8008b48:	230d      	movs	r3, #13
 8008b4a:	e17e      	b.n	8008e4a <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b4e:	3334      	adds	r3, #52	; 0x34
 8008b50:	3316      	adds	r3, #22
 8008b52:	4618      	mov	r0, r3
 8008b54:	f7fe fc96 	bl	8007484 <ld_word>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008b5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d106      	bne.n	8008b70 <find_volume+0x218>
 8008b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b64:	3334      	adds	r3, #52	; 0x34
 8008b66:	3324      	adds	r3, #36	; 0x24
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f7fe fca3 	bl	80074b4 <ld_dword>
 8008b6e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008b74:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b78:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b7e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b82:	789b      	ldrb	r3, [r3, #2]
 8008b84:	2b01      	cmp	r3, #1
 8008b86:	d005      	beq.n	8008b94 <find_volume+0x23c>
 8008b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b8a:	789b      	ldrb	r3, [r3, #2]
 8008b8c:	2b02      	cmp	r3, #2
 8008b8e:	d001      	beq.n	8008b94 <find_volume+0x23c>
 8008b90:	230d      	movs	r3, #13
 8008b92:	e15a      	b.n	8008e4a <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b96:	789b      	ldrb	r3, [r3, #2]
 8008b98:	461a      	mov	r2, r3
 8008b9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b9c:	fb02 f303 	mul.w	r3, r2, r3
 8008ba0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ba4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ba8:	b29a      	uxth	r2, r3
 8008baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bac:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bb0:	895b      	ldrh	r3, [r3, #10]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d008      	beq.n	8008bc8 <find_volume+0x270>
 8008bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bb8:	895b      	ldrh	r3, [r3, #10]
 8008bba:	461a      	mov	r2, r3
 8008bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bbe:	895b      	ldrh	r3, [r3, #10]
 8008bc0:	3b01      	subs	r3, #1
 8008bc2:	4013      	ands	r3, r2
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d001      	beq.n	8008bcc <find_volume+0x274>
 8008bc8:	230d      	movs	r3, #13
 8008bca:	e13e      	b.n	8008e4a <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bce:	3334      	adds	r3, #52	; 0x34
 8008bd0:	3311      	adds	r3, #17
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f7fe fc56 	bl	8007484 <ld_word>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	461a      	mov	r2, r3
 8008bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bde:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008be2:	891b      	ldrh	r3, [r3, #8]
 8008be4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008be6:	8992      	ldrh	r2, [r2, #12]
 8008be8:	0952      	lsrs	r2, r2, #5
 8008bea:	b292      	uxth	r2, r2
 8008bec:	fbb3 f1f2 	udiv	r1, r3, r2
 8008bf0:	fb02 f201 	mul.w	r2, r2, r1
 8008bf4:	1a9b      	subs	r3, r3, r2
 8008bf6:	b29b      	uxth	r3, r3
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d001      	beq.n	8008c00 <find_volume+0x2a8>
 8008bfc:	230d      	movs	r3, #13
 8008bfe:	e124      	b.n	8008e4a <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c02:	3334      	adds	r3, #52	; 0x34
 8008c04:	3313      	adds	r3, #19
 8008c06:	4618      	mov	r0, r3
 8008c08:	f7fe fc3c 	bl	8007484 <ld_word>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008c10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d106      	bne.n	8008c24 <find_volume+0x2cc>
 8008c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c18:	3334      	adds	r3, #52	; 0x34
 8008c1a:	3320      	adds	r3, #32
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f7fe fc49 	bl	80074b4 <ld_dword>
 8008c22:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c26:	3334      	adds	r3, #52	; 0x34
 8008c28:	330e      	adds	r3, #14
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f7fe fc2a 	bl	8007484 <ld_word>
 8008c30:	4603      	mov	r3, r0
 8008c32:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008c34:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d104      	bne.n	8008c44 <find_volume+0x2ec>
 8008c3a:	230d      	movs	r3, #13
 8008c3c:	e105      	b.n	8008e4a <find_volume+0x4f2>
 8008c3e:	bf00      	nop
 8008c40:	200000b0 	.word	0x200000b0

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008c44:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008c46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c48:	4413      	add	r3, r2
 8008c4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c4c:	8911      	ldrh	r1, [r2, #8]
 8008c4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c50:	8992      	ldrh	r2, [r2, #12]
 8008c52:	0952      	lsrs	r2, r2, #5
 8008c54:	b292      	uxth	r2, r2
 8008c56:	fbb1 f2f2 	udiv	r2, r1, r2
 8008c5a:	b292      	uxth	r2, r2
 8008c5c:	4413      	add	r3, r2
 8008c5e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008c60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c64:	429a      	cmp	r2, r3
 8008c66:	d201      	bcs.n	8008c6c <find_volume+0x314>
 8008c68:	230d      	movs	r3, #13
 8008c6a:	e0ee      	b.n	8008e4a <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008c6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c70:	1ad3      	subs	r3, r2, r3
 8008c72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c74:	8952      	ldrh	r2, [r2, #10]
 8008c76:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c7a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d101      	bne.n	8008c86 <find_volume+0x32e>
 8008c82:	230d      	movs	r3, #13
 8008c84:	e0e1      	b.n	8008e4a <find_volume+0x4f2>
		fmt = FS_FAT32;
 8008c86:	2303      	movs	r3, #3
 8008c88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c8e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d802      	bhi.n	8008c9c <find_volume+0x344>
 8008c96:	2302      	movs	r3, #2
 8008c98:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c9e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d802      	bhi.n	8008cac <find_volume+0x354>
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cae:	1c9a      	adds	r2, r3, #2
 8008cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cb2:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8008cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cb6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008cb8:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008cba:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008cbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cbe:	441a      	add	r2, r3
 8008cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cc2:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8008cc4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc8:	441a      	add	r2, r3
 8008cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ccc:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8008cce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008cd2:	2b03      	cmp	r3, #3
 8008cd4:	d11e      	bne.n	8008d14 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cd8:	3334      	adds	r3, #52	; 0x34
 8008cda:	332a      	adds	r3, #42	; 0x2a
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f7fe fbd1 	bl	8007484 <ld_word>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d001      	beq.n	8008cec <find_volume+0x394>
 8008ce8:	230d      	movs	r3, #13
 8008cea:	e0ae      	b.n	8008e4a <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cee:	891b      	ldrh	r3, [r3, #8]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d001      	beq.n	8008cf8 <find_volume+0x3a0>
 8008cf4:	230d      	movs	r3, #13
 8008cf6:	e0a8      	b.n	8008e4a <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cfa:	3334      	adds	r3, #52	; 0x34
 8008cfc:	332c      	adds	r3, #44	; 0x2c
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f7fe fbd8 	bl	80074b4 <ld_dword>
 8008d04:	4602      	mov	r2, r0
 8008d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d08:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d0c:	699b      	ldr	r3, [r3, #24]
 8008d0e:	009b      	lsls	r3, r3, #2
 8008d10:	647b      	str	r3, [r7, #68]	; 0x44
 8008d12:	e01f      	b.n	8008d54 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d16:	891b      	ldrh	r3, [r3, #8]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d101      	bne.n	8008d20 <find_volume+0x3c8>
 8008d1c:	230d      	movs	r3, #13
 8008d1e:	e094      	b.n	8008e4a <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008d24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d26:	441a      	add	r2, r3
 8008d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d2a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008d2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008d30:	2b02      	cmp	r3, #2
 8008d32:	d103      	bne.n	8008d3c <find_volume+0x3e4>
 8008d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d36:	699b      	ldr	r3, [r3, #24]
 8008d38:	005b      	lsls	r3, r3, #1
 8008d3a:	e00a      	b.n	8008d52 <find_volume+0x3fa>
 8008d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d3e:	699a      	ldr	r2, [r3, #24]
 8008d40:	4613      	mov	r3, r2
 8008d42:	005b      	lsls	r3, r3, #1
 8008d44:	4413      	add	r3, r2
 8008d46:	085a      	lsrs	r2, r3, #1
 8008d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d4a:	699b      	ldr	r3, [r3, #24]
 8008d4c:	f003 0301 	and.w	r3, r3, #1
 8008d50:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008d52:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d56:	69da      	ldr	r2, [r3, #28]
 8008d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d5a:	899b      	ldrh	r3, [r3, #12]
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d60:	440b      	add	r3, r1
 8008d62:	3b01      	subs	r3, #1
 8008d64:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008d66:	8989      	ldrh	r1, [r1, #12]
 8008d68:	fbb3 f3f1 	udiv	r3, r3, r1
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d201      	bcs.n	8008d74 <find_volume+0x41c>
 8008d70:	230d      	movs	r3, #13
 8008d72:	e06a      	b.n	8008e4a <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d76:	f04f 32ff 	mov.w	r2, #4294967295
 8008d7a:	615a      	str	r2, [r3, #20]
 8008d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d7e:	695a      	ldr	r2, [r3, #20]
 8008d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d82:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8008d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d86:	2280      	movs	r2, #128	; 0x80
 8008d88:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008d8a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008d8e:	2b03      	cmp	r3, #3
 8008d90:	d149      	bne.n	8008e26 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d94:	3334      	adds	r3, #52	; 0x34
 8008d96:	3330      	adds	r3, #48	; 0x30
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f7fe fb73 	bl	8007484 <ld_word>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	2b01      	cmp	r3, #1
 8008da2:	d140      	bne.n	8008e26 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008da4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008da6:	3301      	adds	r3, #1
 8008da8:	4619      	mov	r1, r3
 8008daa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008dac:	f7fe fe1a 	bl	80079e4 <move_window>
 8008db0:	4603      	mov	r3, r0
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d137      	bne.n	8008e26 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8008db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008db8:	2200      	movs	r2, #0
 8008dba:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dbe:	3334      	adds	r3, #52	; 0x34
 8008dc0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f7fe fb5d 	bl	8007484 <ld_word>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	461a      	mov	r2, r3
 8008dce:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d127      	bne.n	8008e26 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dd8:	3334      	adds	r3, #52	; 0x34
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f7fe fb6a 	bl	80074b4 <ld_dword>
 8008de0:	4603      	mov	r3, r0
 8008de2:	4a1c      	ldr	r2, [pc, #112]	; (8008e54 <find_volume+0x4fc>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d11e      	bne.n	8008e26 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dea:	3334      	adds	r3, #52	; 0x34
 8008dec:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008df0:	4618      	mov	r0, r3
 8008df2:	f7fe fb5f 	bl	80074b4 <ld_dword>
 8008df6:	4603      	mov	r3, r0
 8008df8:	4a17      	ldr	r2, [pc, #92]	; (8008e58 <find_volume+0x500>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d113      	bne.n	8008e26 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e00:	3334      	adds	r3, #52	; 0x34
 8008e02:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008e06:	4618      	mov	r0, r3
 8008e08:	f7fe fb54 	bl	80074b4 <ld_dword>
 8008e0c:	4602      	mov	r2, r0
 8008e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e10:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e14:	3334      	adds	r3, #52	; 0x34
 8008e16:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f7fe fb4a 	bl	80074b4 <ld_dword>
 8008e20:	4602      	mov	r2, r0
 8008e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e24:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e28:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008e2c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008e2e:	4b0b      	ldr	r3, [pc, #44]	; (8008e5c <find_volume+0x504>)
 8008e30:	881b      	ldrh	r3, [r3, #0]
 8008e32:	3301      	adds	r3, #1
 8008e34:	b29a      	uxth	r2, r3
 8008e36:	4b09      	ldr	r3, [pc, #36]	; (8008e5c <find_volume+0x504>)
 8008e38:	801a      	strh	r2, [r3, #0]
 8008e3a:	4b08      	ldr	r3, [pc, #32]	; (8008e5c <find_volume+0x504>)
 8008e3c:	881a      	ldrh	r2, [r3, #0]
 8008e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e40:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008e42:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008e44:	f7fe fd66 	bl	8007914 <clear_lock>
#endif
	return FR_OK;
 8008e48:	2300      	movs	r3, #0
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3758      	adds	r7, #88	; 0x58
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}
 8008e52:	bf00      	nop
 8008e54:	41615252 	.word	0x41615252
 8008e58:	61417272 	.word	0x61417272
 8008e5c:	200000b4 	.word	0x200000b4

08008e60 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b084      	sub	sp, #16
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008e6a:	2309      	movs	r3, #9
 8008e6c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d01c      	beq.n	8008eae <validate+0x4e>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d018      	beq.n	8008eae <validate+0x4e>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	781b      	ldrb	r3, [r3, #0]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d013      	beq.n	8008eae <validate+0x4e>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	889a      	ldrh	r2, [r3, #4]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	88db      	ldrh	r3, [r3, #6]
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d10c      	bne.n	8008eae <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	785b      	ldrb	r3, [r3, #1]
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f7fe fa54 	bl	8007348 <disk_status>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	f003 0301 	and.w	r3, r3, #1
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d101      	bne.n	8008eae <validate+0x4e>
			res = FR_OK;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008eae:	7bfb      	ldrb	r3, [r7, #15]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d102      	bne.n	8008eba <validate+0x5a>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	e000      	b.n	8008ebc <validate+0x5c>
 8008eba:	2300      	movs	r3, #0
 8008ebc:	683a      	ldr	r2, [r7, #0]
 8008ebe:	6013      	str	r3, [r2, #0]
	return res;
 8008ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3710      	adds	r7, #16
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}
	...

08008ecc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b088      	sub	sp, #32
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	60f8      	str	r0, [r7, #12]
 8008ed4:	60b9      	str	r1, [r7, #8]
 8008ed6:	4613      	mov	r3, r2
 8008ed8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008ede:	f107 0310 	add.w	r3, r7, #16
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f7ff fc9e 	bl	8008824 <get_ldnumber>
 8008ee8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008eea:	69fb      	ldr	r3, [r7, #28]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	da01      	bge.n	8008ef4 <f_mount+0x28>
 8008ef0:	230b      	movs	r3, #11
 8008ef2:	e02b      	b.n	8008f4c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008ef4:	4a17      	ldr	r2, [pc, #92]	; (8008f54 <f_mount+0x88>)
 8008ef6:	69fb      	ldr	r3, [r7, #28]
 8008ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008efc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008efe:	69bb      	ldr	r3, [r7, #24]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d005      	beq.n	8008f10 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008f04:	69b8      	ldr	r0, [r7, #24]
 8008f06:	f7fe fd05 	bl	8007914 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008f0a:	69bb      	ldr	r3, [r7, #24]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d002      	beq.n	8008f1c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008f1c:	68fa      	ldr	r2, [r7, #12]
 8008f1e:	490d      	ldr	r1, [pc, #52]	; (8008f54 <f_mount+0x88>)
 8008f20:	69fb      	ldr	r3, [r7, #28]
 8008f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d002      	beq.n	8008f32 <f_mount+0x66>
 8008f2c:	79fb      	ldrb	r3, [r7, #7]
 8008f2e:	2b01      	cmp	r3, #1
 8008f30:	d001      	beq.n	8008f36 <f_mount+0x6a>
 8008f32:	2300      	movs	r3, #0
 8008f34:	e00a      	b.n	8008f4c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008f36:	f107 010c 	add.w	r1, r7, #12
 8008f3a:	f107 0308 	add.w	r3, r7, #8
 8008f3e:	2200      	movs	r2, #0
 8008f40:	4618      	mov	r0, r3
 8008f42:	f7ff fd09 	bl	8008958 <find_volume>
 8008f46:	4603      	mov	r3, r0
 8008f48:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008f4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3720      	adds	r7, #32
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}
 8008f54:	200000b0 	.word	0x200000b0

08008f58 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b098      	sub	sp, #96	; 0x60
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	60f8      	str	r0, [r7, #12]
 8008f60:	60b9      	str	r1, [r7, #8]
 8008f62:	4613      	mov	r3, r2
 8008f64:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d101      	bne.n	8008f70 <f_open+0x18>
 8008f6c:	2309      	movs	r3, #9
 8008f6e:	e1bb      	b.n	80092e8 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008f70:	79fb      	ldrb	r3, [r7, #7]
 8008f72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f76:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008f78:	79fa      	ldrb	r2, [r7, #7]
 8008f7a:	f107 0110 	add.w	r1, r7, #16
 8008f7e:	f107 0308 	add.w	r3, r7, #8
 8008f82:	4618      	mov	r0, r3
 8008f84:	f7ff fce8 	bl	8008958 <find_volume>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8008f8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	f040 819f 	bne.w	80092d6 <f_open+0x37e>
		dj.obj.fs = fs;
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008f9c:	68ba      	ldr	r2, [r7, #8]
 8008f9e:	f107 0314 	add.w	r3, r7, #20
 8008fa2:	4611      	mov	r1, r2
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f7ff fbc7 	bl	8008738 <follow_path>
 8008faa:	4603      	mov	r3, r0
 8008fac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008fb0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d11a      	bne.n	8008fee <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008fb8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008fbc:	b25b      	sxtb	r3, r3
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	da03      	bge.n	8008fca <f_open+0x72>
				res = FR_INVALID_NAME;
 8008fc2:	2306      	movs	r3, #6
 8008fc4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008fc8:	e011      	b.n	8008fee <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008fca:	79fb      	ldrb	r3, [r7, #7]
 8008fcc:	f023 0301 	bic.w	r3, r3, #1
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	bf14      	ite	ne
 8008fd4:	2301      	movne	r3, #1
 8008fd6:	2300      	moveq	r3, #0
 8008fd8:	b2db      	uxtb	r3, r3
 8008fda:	461a      	mov	r2, r3
 8008fdc:	f107 0314 	add.w	r3, r7, #20
 8008fe0:	4611      	mov	r1, r2
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f7fe fb4e 	bl	8007684 <chk_lock>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008fee:	79fb      	ldrb	r3, [r7, #7]
 8008ff0:	f003 031c 	and.w	r3, r3, #28
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d07f      	beq.n	80090f8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8008ff8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d017      	beq.n	8009030 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009000:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009004:	2b04      	cmp	r3, #4
 8009006:	d10e      	bne.n	8009026 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009008:	f7fe fb98 	bl	800773c <enq_lock>
 800900c:	4603      	mov	r3, r0
 800900e:	2b00      	cmp	r3, #0
 8009010:	d006      	beq.n	8009020 <f_open+0xc8>
 8009012:	f107 0314 	add.w	r3, r7, #20
 8009016:	4618      	mov	r0, r3
 8009018:	f7ff fac8 	bl	80085ac <dir_register>
 800901c:	4603      	mov	r3, r0
 800901e:	e000      	b.n	8009022 <f_open+0xca>
 8009020:	2312      	movs	r3, #18
 8009022:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009026:	79fb      	ldrb	r3, [r7, #7]
 8009028:	f043 0308 	orr.w	r3, r3, #8
 800902c:	71fb      	strb	r3, [r7, #7]
 800902e:	e010      	b.n	8009052 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009030:	7ebb      	ldrb	r3, [r7, #26]
 8009032:	f003 0311 	and.w	r3, r3, #17
 8009036:	2b00      	cmp	r3, #0
 8009038:	d003      	beq.n	8009042 <f_open+0xea>
					res = FR_DENIED;
 800903a:	2307      	movs	r3, #7
 800903c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009040:	e007      	b.n	8009052 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009042:	79fb      	ldrb	r3, [r7, #7]
 8009044:	f003 0304 	and.w	r3, r3, #4
 8009048:	2b00      	cmp	r3, #0
 800904a:	d002      	beq.n	8009052 <f_open+0xfa>
 800904c:	2308      	movs	r3, #8
 800904e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009052:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009056:	2b00      	cmp	r3, #0
 8009058:	d168      	bne.n	800912c <f_open+0x1d4>
 800905a:	79fb      	ldrb	r3, [r7, #7]
 800905c:	f003 0308 	and.w	r3, r3, #8
 8009060:	2b00      	cmp	r3, #0
 8009062:	d063      	beq.n	800912c <f_open+0x1d4>
				dw = GET_FATTIME();
 8009064:	f7fb f974 	bl	8004350 <get_fattime>
 8009068:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800906a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800906c:	330e      	adds	r3, #14
 800906e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009070:	4618      	mov	r0, r3
 8009072:	f7fe fa5d 	bl	8007530 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009078:	3316      	adds	r3, #22
 800907a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800907c:	4618      	mov	r0, r3
 800907e:	f7fe fa57 	bl	8007530 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009084:	330b      	adds	r3, #11
 8009086:	2220      	movs	r2, #32
 8009088:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800908a:	693b      	ldr	r3, [r7, #16]
 800908c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800908e:	4611      	mov	r1, r2
 8009090:	4618      	mov	r0, r3
 8009092:	f7ff f9f7 	bl	8008484 <ld_clust>
 8009096:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800909c:	2200      	movs	r2, #0
 800909e:	4618      	mov	r0, r3
 80090a0:	f7ff fa0f 	bl	80084c2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80090a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090a6:	331c      	adds	r3, #28
 80090a8:	2100      	movs	r1, #0
 80090aa:	4618      	mov	r0, r3
 80090ac:	f7fe fa40 	bl	8007530 <st_dword>
					fs->wflag = 1;
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	2201      	movs	r2, #1
 80090b4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80090b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d037      	beq.n	800912c <f_open+0x1d4>
						dw = fs->winsect;
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090c0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80090c2:	f107 0314 	add.w	r3, r7, #20
 80090c6:	2200      	movs	r2, #0
 80090c8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80090ca:	4618      	mov	r0, r3
 80090cc:	f7fe ff37 	bl	8007f3e <remove_chain>
 80090d0:	4603      	mov	r3, r0
 80090d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80090d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d126      	bne.n	800912c <f_open+0x1d4>
							res = move_window(fs, dw);
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80090e2:	4618      	mov	r0, r3
 80090e4:	f7fe fc7e 	bl	80079e4 <move_window>
 80090e8:	4603      	mov	r3, r0
 80090ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80090ee:	693b      	ldr	r3, [r7, #16]
 80090f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80090f2:	3a01      	subs	r2, #1
 80090f4:	611a      	str	r2, [r3, #16]
 80090f6:	e019      	b.n	800912c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80090f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d115      	bne.n	800912c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009100:	7ebb      	ldrb	r3, [r7, #26]
 8009102:	f003 0310 	and.w	r3, r3, #16
 8009106:	2b00      	cmp	r3, #0
 8009108:	d003      	beq.n	8009112 <f_open+0x1ba>
					res = FR_NO_FILE;
 800910a:	2304      	movs	r3, #4
 800910c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009110:	e00c      	b.n	800912c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009112:	79fb      	ldrb	r3, [r7, #7]
 8009114:	f003 0302 	and.w	r3, r3, #2
 8009118:	2b00      	cmp	r3, #0
 800911a:	d007      	beq.n	800912c <f_open+0x1d4>
 800911c:	7ebb      	ldrb	r3, [r7, #26]
 800911e:	f003 0301 	and.w	r3, r3, #1
 8009122:	2b00      	cmp	r3, #0
 8009124:	d002      	beq.n	800912c <f_open+0x1d4>
						res = FR_DENIED;
 8009126:	2307      	movs	r3, #7
 8009128:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800912c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009130:	2b00      	cmp	r3, #0
 8009132:	d128      	bne.n	8009186 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009134:	79fb      	ldrb	r3, [r7, #7]
 8009136:	f003 0308 	and.w	r3, r3, #8
 800913a:	2b00      	cmp	r3, #0
 800913c:	d003      	beq.n	8009146 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800913e:	79fb      	ldrb	r3, [r7, #7]
 8009140:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009144:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800914e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009154:	79fb      	ldrb	r3, [r7, #7]
 8009156:	f023 0301 	bic.w	r3, r3, #1
 800915a:	2b00      	cmp	r3, #0
 800915c:	bf14      	ite	ne
 800915e:	2301      	movne	r3, #1
 8009160:	2300      	moveq	r3, #0
 8009162:	b2db      	uxtb	r3, r3
 8009164:	461a      	mov	r2, r3
 8009166:	f107 0314 	add.w	r3, r7, #20
 800916a:	4611      	mov	r1, r2
 800916c:	4618      	mov	r0, r3
 800916e:	f7fe fb07 	bl	8007780 <inc_lock>
 8009172:	4602      	mov	r2, r0
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	691b      	ldr	r3, [r3, #16]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d102      	bne.n	8009186 <f_open+0x22e>
 8009180:	2302      	movs	r3, #2
 8009182:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009186:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800918a:	2b00      	cmp	r3, #0
 800918c:	f040 80a3 	bne.w	80092d6 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009194:	4611      	mov	r1, r2
 8009196:	4618      	mov	r0, r3
 8009198:	f7ff f974 	bl	8008484 <ld_clust>
 800919c:	4602      	mov	r2, r0
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80091a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091a4:	331c      	adds	r3, #28
 80091a6:	4618      	mov	r0, r3
 80091a8:	f7fe f984 	bl	80074b4 <ld_dword>
 80091ac:	4602      	mov	r2, r0
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	2200      	movs	r2, #0
 80091b6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80091b8:	693a      	ldr	r2, [r7, #16]
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	88da      	ldrh	r2, [r3, #6]
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	79fa      	ldrb	r2, [r7, #7]
 80091ca:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	2200      	movs	r2, #0
 80091d0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	2200      	movs	r2, #0
 80091d6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	2200      	movs	r2, #0
 80091dc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	3330      	adds	r3, #48	; 0x30
 80091e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80091e6:	2100      	movs	r1, #0
 80091e8:	4618      	mov	r0, r3
 80091ea:	f7fe f9ee 	bl	80075ca <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80091ee:	79fb      	ldrb	r3, [r7, #7]
 80091f0:	f003 0320 	and.w	r3, r3, #32
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d06e      	beq.n	80092d6 <f_open+0x37e>
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	68db      	ldr	r3, [r3, #12]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d06a      	beq.n	80092d6 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	68da      	ldr	r2, [r3, #12]
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	895b      	ldrh	r3, [r3, #10]
 800920c:	461a      	mov	r2, r3
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	899b      	ldrh	r3, [r3, #12]
 8009212:	fb03 f302 	mul.w	r3, r3, r2
 8009216:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	689b      	ldr	r3, [r3, #8]
 800921c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	68db      	ldr	r3, [r3, #12]
 8009222:	657b      	str	r3, [r7, #84]	; 0x54
 8009224:	e016      	b.n	8009254 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800922a:	4618      	mov	r0, r3
 800922c:	f7fe fc97 	bl	8007b5e <get_fat>
 8009230:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009232:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009234:	2b01      	cmp	r3, #1
 8009236:	d802      	bhi.n	800923e <f_open+0x2e6>
 8009238:	2302      	movs	r3, #2
 800923a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800923e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009244:	d102      	bne.n	800924c <f_open+0x2f4>
 8009246:	2301      	movs	r3, #1
 8009248:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800924c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800924e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009250:	1ad3      	subs	r3, r2, r3
 8009252:	657b      	str	r3, [r7, #84]	; 0x54
 8009254:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009258:	2b00      	cmp	r3, #0
 800925a:	d103      	bne.n	8009264 <f_open+0x30c>
 800925c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800925e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009260:	429a      	cmp	r2, r3
 8009262:	d8e0      	bhi.n	8009226 <f_open+0x2ce>
				}
				fp->clust = clst;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009268:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800926a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800926e:	2b00      	cmp	r3, #0
 8009270:	d131      	bne.n	80092d6 <f_open+0x37e>
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	899b      	ldrh	r3, [r3, #12]
 8009276:	461a      	mov	r2, r3
 8009278:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800927a:	fbb3 f1f2 	udiv	r1, r3, r2
 800927e:	fb02 f201 	mul.w	r2, r2, r1
 8009282:	1a9b      	subs	r3, r3, r2
 8009284:	2b00      	cmp	r3, #0
 8009286:	d026      	beq.n	80092d6 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800928c:	4618      	mov	r0, r3
 800928e:	f7fe fc47 	bl	8007b20 <clust2sect>
 8009292:	6478      	str	r0, [r7, #68]	; 0x44
 8009294:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009296:	2b00      	cmp	r3, #0
 8009298:	d103      	bne.n	80092a2 <f_open+0x34a>
						res = FR_INT_ERR;
 800929a:	2302      	movs	r3, #2
 800929c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80092a0:	e019      	b.n	80092d6 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	899b      	ldrh	r3, [r3, #12]
 80092a6:	461a      	mov	r2, r3
 80092a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092aa:	fbb3 f2f2 	udiv	r2, r3, r2
 80092ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092b0:	441a      	add	r2, r3
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	7858      	ldrb	r0, [r3, #1]
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	6a1a      	ldr	r2, [r3, #32]
 80092c4:	2301      	movs	r3, #1
 80092c6:	f7fe f87f 	bl	80073c8 <disk_read>
 80092ca:	4603      	mov	r3, r0
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d002      	beq.n	80092d6 <f_open+0x37e>
 80092d0:	2301      	movs	r3, #1
 80092d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80092d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d002      	beq.n	80092e4 <f_open+0x38c>
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	2200      	movs	r2, #0
 80092e2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80092e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3760      	adds	r7, #96	; 0x60
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}

080092f0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b086      	sub	sp, #24
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f107 0208 	add.w	r2, r7, #8
 80092fe:	4611      	mov	r1, r2
 8009300:	4618      	mov	r0, r3
 8009302:	f7ff fdad 	bl	8008e60 <validate>
 8009306:	4603      	mov	r3, r0
 8009308:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800930a:	7dfb      	ldrb	r3, [r7, #23]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d168      	bne.n	80093e2 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	7d1b      	ldrb	r3, [r3, #20]
 8009314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009318:	2b00      	cmp	r3, #0
 800931a:	d062      	beq.n	80093e2 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	7d1b      	ldrb	r3, [r3, #20]
 8009320:	b25b      	sxtb	r3, r3
 8009322:	2b00      	cmp	r3, #0
 8009324:	da15      	bge.n	8009352 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	7858      	ldrb	r0, [r3, #1]
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6a1a      	ldr	r2, [r3, #32]
 8009334:	2301      	movs	r3, #1
 8009336:	f7fe f867 	bl	8007408 <disk_write>
 800933a:	4603      	mov	r3, r0
 800933c:	2b00      	cmp	r3, #0
 800933e:	d001      	beq.n	8009344 <f_sync+0x54>
 8009340:	2301      	movs	r3, #1
 8009342:	e04f      	b.n	80093e4 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	7d1b      	ldrb	r3, [r3, #20]
 8009348:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800934c:	b2da      	uxtb	r2, r3
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009352:	f7fa fffd 	bl	8004350 <get_fattime>
 8009356:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009358:	68ba      	ldr	r2, [r7, #8]
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800935e:	4619      	mov	r1, r3
 8009360:	4610      	mov	r0, r2
 8009362:	f7fe fb3f 	bl	80079e4 <move_window>
 8009366:	4603      	mov	r3, r0
 8009368:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800936a:	7dfb      	ldrb	r3, [r7, #23]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d138      	bne.n	80093e2 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009374:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	330b      	adds	r3, #11
 800937a:	781a      	ldrb	r2, [r3, #0]
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	330b      	adds	r3, #11
 8009380:	f042 0220 	orr.w	r2, r2, #32
 8009384:	b2d2      	uxtb	r2, r2
 8009386:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6818      	ldr	r0, [r3, #0]
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	689b      	ldr	r3, [r3, #8]
 8009390:	461a      	mov	r2, r3
 8009392:	68f9      	ldr	r1, [r7, #12]
 8009394:	f7ff f895 	bl	80084c2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f103 021c 	add.w	r2, r3, #28
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	68db      	ldr	r3, [r3, #12]
 80093a2:	4619      	mov	r1, r3
 80093a4:	4610      	mov	r0, r2
 80093a6:	f7fe f8c3 	bl	8007530 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	3316      	adds	r3, #22
 80093ae:	6939      	ldr	r1, [r7, #16]
 80093b0:	4618      	mov	r0, r3
 80093b2:	f7fe f8bd 	bl	8007530 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	3312      	adds	r3, #18
 80093ba:	2100      	movs	r1, #0
 80093bc:	4618      	mov	r0, r3
 80093be:	f7fe f89c 	bl	80074fa <st_word>
					fs->wflag = 1;
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	2201      	movs	r2, #1
 80093c6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	4618      	mov	r0, r3
 80093cc:	f7fe fb38 	bl	8007a40 <sync_fs>
 80093d0:	4603      	mov	r3, r0
 80093d2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	7d1b      	ldrb	r3, [r3, #20]
 80093d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093dc:	b2da      	uxtb	r2, r3
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80093e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	3718      	adds	r7, #24
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}

080093ec <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b084      	sub	sp, #16
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f7ff ff7b 	bl	80092f0 <f_sync>
 80093fa:	4603      	mov	r3, r0
 80093fc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80093fe:	7bfb      	ldrb	r3, [r7, #15]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d118      	bne.n	8009436 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f107 0208 	add.w	r2, r7, #8
 800940a:	4611      	mov	r1, r2
 800940c:	4618      	mov	r0, r3
 800940e:	f7ff fd27 	bl	8008e60 <validate>
 8009412:	4603      	mov	r3, r0
 8009414:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009416:	7bfb      	ldrb	r3, [r7, #15]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d10c      	bne.n	8009436 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	691b      	ldr	r3, [r3, #16]
 8009420:	4618      	mov	r0, r3
 8009422:	f7fe fa3b 	bl	800789c <dec_lock>
 8009426:	4603      	mov	r3, r0
 8009428:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800942a:	7bfb      	ldrb	r3, [r7, #15]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d102      	bne.n	8009436 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2200      	movs	r2, #0
 8009434:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009436:	7bfb      	ldrb	r3, [r7, #15]
}
 8009438:	4618      	mov	r0, r3
 800943a:	3710      	adds	r7, #16
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}

08009440 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009440:	b480      	push	{r7}
 8009442:	b087      	sub	sp, #28
 8009444:	af00      	add	r7, sp, #0
 8009446:	60f8      	str	r0, [r7, #12]
 8009448:	60b9      	str	r1, [r7, #8]
 800944a:	4613      	mov	r3, r2
 800944c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800944e:	2301      	movs	r3, #1
 8009450:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009452:	2300      	movs	r3, #0
 8009454:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009456:	4b1f      	ldr	r3, [pc, #124]	; (80094d4 <FATFS_LinkDriverEx+0x94>)
 8009458:	7a5b      	ldrb	r3, [r3, #9]
 800945a:	b2db      	uxtb	r3, r3
 800945c:	2b00      	cmp	r3, #0
 800945e:	d131      	bne.n	80094c4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009460:	4b1c      	ldr	r3, [pc, #112]	; (80094d4 <FATFS_LinkDriverEx+0x94>)
 8009462:	7a5b      	ldrb	r3, [r3, #9]
 8009464:	b2db      	uxtb	r3, r3
 8009466:	461a      	mov	r2, r3
 8009468:	4b1a      	ldr	r3, [pc, #104]	; (80094d4 <FATFS_LinkDriverEx+0x94>)
 800946a:	2100      	movs	r1, #0
 800946c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800946e:	4b19      	ldr	r3, [pc, #100]	; (80094d4 <FATFS_LinkDriverEx+0x94>)
 8009470:	7a5b      	ldrb	r3, [r3, #9]
 8009472:	b2db      	uxtb	r3, r3
 8009474:	4a17      	ldr	r2, [pc, #92]	; (80094d4 <FATFS_LinkDriverEx+0x94>)
 8009476:	009b      	lsls	r3, r3, #2
 8009478:	4413      	add	r3, r2
 800947a:	68fa      	ldr	r2, [r7, #12]
 800947c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800947e:	4b15      	ldr	r3, [pc, #84]	; (80094d4 <FATFS_LinkDriverEx+0x94>)
 8009480:	7a5b      	ldrb	r3, [r3, #9]
 8009482:	b2db      	uxtb	r3, r3
 8009484:	461a      	mov	r2, r3
 8009486:	4b13      	ldr	r3, [pc, #76]	; (80094d4 <FATFS_LinkDriverEx+0x94>)
 8009488:	4413      	add	r3, r2
 800948a:	79fa      	ldrb	r2, [r7, #7]
 800948c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800948e:	4b11      	ldr	r3, [pc, #68]	; (80094d4 <FATFS_LinkDriverEx+0x94>)
 8009490:	7a5b      	ldrb	r3, [r3, #9]
 8009492:	b2db      	uxtb	r3, r3
 8009494:	1c5a      	adds	r2, r3, #1
 8009496:	b2d1      	uxtb	r1, r2
 8009498:	4a0e      	ldr	r2, [pc, #56]	; (80094d4 <FATFS_LinkDriverEx+0x94>)
 800949a:	7251      	strb	r1, [r2, #9]
 800949c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800949e:	7dbb      	ldrb	r3, [r7, #22]
 80094a0:	3330      	adds	r3, #48	; 0x30
 80094a2:	b2da      	uxtb	r2, r3
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	3301      	adds	r3, #1
 80094ac:	223a      	movs	r2, #58	; 0x3a
 80094ae:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	3302      	adds	r3, #2
 80094b4:	222f      	movs	r2, #47	; 0x2f
 80094b6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	3303      	adds	r3, #3
 80094bc:	2200      	movs	r2, #0
 80094be:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80094c0:	2300      	movs	r3, #0
 80094c2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80094c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	371c      	adds	r7, #28
 80094ca:	46bd      	mov	sp, r7
 80094cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d0:	4770      	bx	lr
 80094d2:	bf00      	nop
 80094d4:	200000d8 	.word	0x200000d8

080094d8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b082      	sub	sp, #8
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
 80094e0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80094e2:	2200      	movs	r2, #0
 80094e4:	6839      	ldr	r1, [r7, #0]
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f7ff ffaa 	bl	8009440 <FATFS_LinkDriverEx>
 80094ec:	4603      	mov	r3, r0
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3708      	adds	r7, #8
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}
	...

080094f8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80094fc:	2201      	movs	r2, #1
 80094fe:	490e      	ldr	r1, [pc, #56]	; (8009538 <MX_USB_HOST_Init+0x40>)
 8009500:	480e      	ldr	r0, [pc, #56]	; (800953c <MX_USB_HOST_Init+0x44>)
 8009502:	f7fc fbc9 	bl	8005c98 <USBH_Init>
 8009506:	4603      	mov	r3, r0
 8009508:	2b00      	cmp	r3, #0
 800950a:	d001      	beq.n	8009510 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800950c:	f7f7 f95c 	bl	80007c8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 8009510:	490b      	ldr	r1, [pc, #44]	; (8009540 <MX_USB_HOST_Init+0x48>)
 8009512:	480a      	ldr	r0, [pc, #40]	; (800953c <MX_USB_HOST_Init+0x44>)
 8009514:	f7fc fc4e 	bl	8005db4 <USBH_RegisterClass>
 8009518:	4603      	mov	r3, r0
 800951a:	2b00      	cmp	r3, #0
 800951c:	d001      	beq.n	8009522 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800951e:	f7f7 f953 	bl	80007c8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009522:	4806      	ldr	r0, [pc, #24]	; (800953c <MX_USB_HOST_Init+0x44>)
 8009524:	f7fc fcd2 	bl	8005ecc <USBH_Start>
 8009528:	4603      	mov	r3, r0
 800952a:	2b00      	cmp	r3, #0
 800952c:	d001      	beq.n	8009532 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800952e:	f7f7 f94b 	bl	80007c8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009532:	bf00      	nop
 8009534:	bd80      	pop	{r7, pc}
 8009536:	bf00      	nop
 8009538:	08009559 	.word	0x08009559
 800953c:	20004234 	.word	0x20004234
 8009540:	2000000c 	.word	0x2000000c

08009544 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009548:	4802      	ldr	r0, [pc, #8]	; (8009554 <MX_USB_HOST_Process+0x10>)
 800954a:	f7fc fccf 	bl	8005eec <USBH_Process>
}
 800954e:	bf00      	nop
 8009550:	bd80      	pop	{r7, pc}
 8009552:	bf00      	nop
 8009554:	20004234 	.word	0x20004234

08009558 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009558:	b480      	push	{r7}
 800955a:	b083      	sub	sp, #12
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	460b      	mov	r3, r1
 8009562:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009564:	78fb      	ldrb	r3, [r7, #3]
 8009566:	3b01      	subs	r3, #1
 8009568:	2b04      	cmp	r3, #4
 800956a:	d819      	bhi.n	80095a0 <USBH_UserProcess+0x48>
 800956c:	a201      	add	r2, pc, #4	; (adr r2, 8009574 <USBH_UserProcess+0x1c>)
 800956e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009572:	bf00      	nop
 8009574:	080095a1 	.word	0x080095a1
 8009578:	08009591 	.word	0x08009591
 800957c:	080095a1 	.word	0x080095a1
 8009580:	08009599 	.word	0x08009599
 8009584:	08009589 	.word	0x08009589
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009588:	4b09      	ldr	r3, [pc, #36]	; (80095b0 <USBH_UserProcess+0x58>)
 800958a:	2203      	movs	r2, #3
 800958c:	701a      	strb	r2, [r3, #0]
  break;
 800958e:	e008      	b.n	80095a2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009590:	4b07      	ldr	r3, [pc, #28]	; (80095b0 <USBH_UserProcess+0x58>)
 8009592:	2202      	movs	r2, #2
 8009594:	701a      	strb	r2, [r3, #0]
  break;
 8009596:	e004      	b.n	80095a2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009598:	4b05      	ldr	r3, [pc, #20]	; (80095b0 <USBH_UserProcess+0x58>)
 800959a:	2201      	movs	r2, #1
 800959c:	701a      	strb	r2, [r3, #0]
  break;
 800959e:	e000      	b.n	80095a2 <USBH_UserProcess+0x4a>

  default:
  break;
 80095a0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80095a2:	bf00      	nop
 80095a4:	370c      	adds	r7, #12
 80095a6:	46bd      	mov	sp, r7
 80095a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ac:	4770      	bx	lr
 80095ae:	bf00      	nop
 80095b0:	200000e4 	.word	0x200000e4

080095b4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b08a      	sub	sp, #40	; 0x28
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80095bc:	f107 0314 	add.w	r3, r7, #20
 80095c0:	2200      	movs	r2, #0
 80095c2:	601a      	str	r2, [r3, #0]
 80095c4:	605a      	str	r2, [r3, #4]
 80095c6:	609a      	str	r2, [r3, #8]
 80095c8:	60da      	str	r2, [r3, #12]
 80095ca:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80095d4:	d147      	bne.n	8009666 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80095d6:	2300      	movs	r3, #0
 80095d8:	613b      	str	r3, [r7, #16]
 80095da:	4b25      	ldr	r3, [pc, #148]	; (8009670 <HAL_HCD_MspInit+0xbc>)
 80095dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095de:	4a24      	ldr	r2, [pc, #144]	; (8009670 <HAL_HCD_MspInit+0xbc>)
 80095e0:	f043 0301 	orr.w	r3, r3, #1
 80095e4:	6313      	str	r3, [r2, #48]	; 0x30
 80095e6:	4b22      	ldr	r3, [pc, #136]	; (8009670 <HAL_HCD_MspInit+0xbc>)
 80095e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095ea:	f003 0301 	and.w	r3, r3, #1
 80095ee:	613b      	str	r3, [r7, #16]
 80095f0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80095f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80095f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80095f8:	2300      	movs	r3, #0
 80095fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095fc:	2300      	movs	r3, #0
 80095fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009600:	f107 0314 	add.w	r3, r7, #20
 8009604:	4619      	mov	r1, r3
 8009606:	481b      	ldr	r0, [pc, #108]	; (8009674 <HAL_HCD_MspInit+0xc0>)
 8009608:	f7f7 fb5a 	bl	8000cc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800960c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009610:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009612:	2302      	movs	r3, #2
 8009614:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009616:	2300      	movs	r3, #0
 8009618:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800961a:	2300      	movs	r3, #0
 800961c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800961e:	230a      	movs	r3, #10
 8009620:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009622:	f107 0314 	add.w	r3, r7, #20
 8009626:	4619      	mov	r1, r3
 8009628:	4812      	ldr	r0, [pc, #72]	; (8009674 <HAL_HCD_MspInit+0xc0>)
 800962a:	f7f7 fb49 	bl	8000cc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800962e:	4b10      	ldr	r3, [pc, #64]	; (8009670 <HAL_HCD_MspInit+0xbc>)
 8009630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009632:	4a0f      	ldr	r2, [pc, #60]	; (8009670 <HAL_HCD_MspInit+0xbc>)
 8009634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009638:	6353      	str	r3, [r2, #52]	; 0x34
 800963a:	2300      	movs	r3, #0
 800963c:	60fb      	str	r3, [r7, #12]
 800963e:	4b0c      	ldr	r3, [pc, #48]	; (8009670 <HAL_HCD_MspInit+0xbc>)
 8009640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009642:	4a0b      	ldr	r2, [pc, #44]	; (8009670 <HAL_HCD_MspInit+0xbc>)
 8009644:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009648:	6453      	str	r3, [r2, #68]	; 0x44
 800964a:	4b09      	ldr	r3, [pc, #36]	; (8009670 <HAL_HCD_MspInit+0xbc>)
 800964c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800964e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009652:	60fb      	str	r3, [r7, #12]
 8009654:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009656:	2200      	movs	r2, #0
 8009658:	2100      	movs	r1, #0
 800965a:	2043      	movs	r0, #67	; 0x43
 800965c:	f7f7 faf9 	bl	8000c52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009660:	2043      	movs	r0, #67	; 0x43
 8009662:	f7f7 fb12 	bl	8000c8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009666:	bf00      	nop
 8009668:	3728      	adds	r7, #40	; 0x28
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}
 800966e:	bf00      	nop
 8009670:	40023800 	.word	0x40023800
 8009674:	40020000 	.word	0x40020000

08009678 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b082      	sub	sp, #8
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009686:	4618      	mov	r0, r3
 8009688:	f7fd f803 	bl	8006692 <USBH_LL_IncTimer>
}
 800968c:	bf00      	nop
 800968e:	3708      	adds	r7, #8
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}

08009694 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b082      	sub	sp, #8
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80096a2:	4618      	mov	r0, r3
 80096a4:	f7fd f83b 	bl	800671e <USBH_LL_Connect>
}
 80096a8:	bf00      	nop
 80096aa:	3708      	adds	r7, #8
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}

080096b0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b082      	sub	sp, #8
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80096be:	4618      	mov	r0, r3
 80096c0:	f7fd f844 	bl	800674c <USBH_LL_Disconnect>
}
 80096c4:	bf00      	nop
 80096c6:	3708      	adds	r7, #8
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}

080096cc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b083      	sub	sp, #12
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	460b      	mov	r3, r1
 80096d6:	70fb      	strb	r3, [r7, #3]
 80096d8:	4613      	mov	r3, r2
 80096da:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80096dc:	bf00      	nop
 80096de:	370c      	adds	r7, #12
 80096e0:	46bd      	mov	sp, r7
 80096e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e6:	4770      	bx	lr

080096e8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b082      	sub	sp, #8
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80096f6:	4618      	mov	r0, r3
 80096f8:	f7fc fff5 	bl	80066e6 <USBH_LL_PortEnabled>
}
 80096fc:	bf00      	nop
 80096fe:	3708      	adds	r7, #8
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}

08009704 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b082      	sub	sp, #8
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009712:	4618      	mov	r0, r3
 8009714:	f7fc fff5 	bl	8006702 <USBH_LL_PortDisabled>
}
 8009718:	bf00      	nop
 800971a:	3708      	adds	r7, #8
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}

08009720 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b082      	sub	sp, #8
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800972e:	2b01      	cmp	r3, #1
 8009730:	d12a      	bne.n	8009788 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009732:	4a18      	ldr	r2, [pc, #96]	; (8009794 <USBH_LL_Init+0x74>)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	4a15      	ldr	r2, [pc, #84]	; (8009794 <USBH_LL_Init+0x74>)
 800973e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009742:	4b14      	ldr	r3, [pc, #80]	; (8009794 <USBH_LL_Init+0x74>)
 8009744:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009748:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800974a:	4b12      	ldr	r3, [pc, #72]	; (8009794 <USBH_LL_Init+0x74>)
 800974c:	2208      	movs	r2, #8
 800974e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009750:	4b10      	ldr	r3, [pc, #64]	; (8009794 <USBH_LL_Init+0x74>)
 8009752:	2201      	movs	r2, #1
 8009754:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009756:	4b0f      	ldr	r3, [pc, #60]	; (8009794 <USBH_LL_Init+0x74>)
 8009758:	2200      	movs	r2, #0
 800975a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800975c:	4b0d      	ldr	r3, [pc, #52]	; (8009794 <USBH_LL_Init+0x74>)
 800975e:	2202      	movs	r2, #2
 8009760:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009762:	4b0c      	ldr	r3, [pc, #48]	; (8009794 <USBH_LL_Init+0x74>)
 8009764:	2200      	movs	r2, #0
 8009766:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009768:	480a      	ldr	r0, [pc, #40]	; (8009794 <USBH_LL_Init+0x74>)
 800976a:	f7f7 fc76 	bl	800105a <HAL_HCD_Init>
 800976e:	4603      	mov	r3, r0
 8009770:	2b00      	cmp	r3, #0
 8009772:	d001      	beq.n	8009778 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009774:	f7f7 f828 	bl	80007c8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009778:	4806      	ldr	r0, [pc, #24]	; (8009794 <USBH_LL_Init+0x74>)
 800977a:	f7f8 f85a 	bl	8001832 <HAL_HCD_GetCurrentFrame>
 800977e:	4603      	mov	r3, r0
 8009780:	4619      	mov	r1, r3
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f7fc ff76 	bl	8006674 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009788:	2300      	movs	r3, #0
}
 800978a:	4618      	mov	r0, r3
 800978c:	3708      	adds	r7, #8
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}
 8009792:	bf00      	nop
 8009794:	2000460c 	.word	0x2000460c

08009798 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b084      	sub	sp, #16
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097a0:	2300      	movs	r3, #0
 80097a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80097a4:	2300      	movs	r3, #0
 80097a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80097ae:	4618      	mov	r0, r3
 80097b0:	f7f7 ffc9 	bl	8001746 <HAL_HCD_Start>
 80097b4:	4603      	mov	r3, r0
 80097b6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80097b8:	7bfb      	ldrb	r3, [r7, #15]
 80097ba:	4618      	mov	r0, r3
 80097bc:	f000 f98c 	bl	8009ad8 <USBH_Get_USB_Status>
 80097c0:	4603      	mov	r3, r0
 80097c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	3710      	adds	r7, #16
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}

080097ce <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80097ce:	b580      	push	{r7, lr}
 80097d0:	b084      	sub	sp, #16
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097d6:	2300      	movs	r3, #0
 80097d8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80097da:	2300      	movs	r3, #0
 80097dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80097e4:	4618      	mov	r0, r3
 80097e6:	f7f7 ffd1 	bl	800178c <HAL_HCD_Stop>
 80097ea:	4603      	mov	r3, r0
 80097ec:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80097ee:	7bfb      	ldrb	r3, [r7, #15]
 80097f0:	4618      	mov	r0, r3
 80097f2:	f000 f971 	bl	8009ad8 <USBH_Get_USB_Status>
 80097f6:	4603      	mov	r3, r0
 80097f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3710      	adds	r7, #16
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}

08009804 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b084      	sub	sp, #16
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800980c:	2301      	movs	r3, #1
 800980e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009816:	4618      	mov	r0, r3
 8009818:	f7f8 f819 	bl	800184e <HAL_HCD_GetCurrentSpeed>
 800981c:	4603      	mov	r3, r0
 800981e:	2b02      	cmp	r3, #2
 8009820:	d00c      	beq.n	800983c <USBH_LL_GetSpeed+0x38>
 8009822:	2b02      	cmp	r3, #2
 8009824:	d80d      	bhi.n	8009842 <USBH_LL_GetSpeed+0x3e>
 8009826:	2b00      	cmp	r3, #0
 8009828:	d002      	beq.n	8009830 <USBH_LL_GetSpeed+0x2c>
 800982a:	2b01      	cmp	r3, #1
 800982c:	d003      	beq.n	8009836 <USBH_LL_GetSpeed+0x32>
 800982e:	e008      	b.n	8009842 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009830:	2300      	movs	r3, #0
 8009832:	73fb      	strb	r3, [r7, #15]
    break;
 8009834:	e008      	b.n	8009848 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009836:	2301      	movs	r3, #1
 8009838:	73fb      	strb	r3, [r7, #15]
    break;
 800983a:	e005      	b.n	8009848 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800983c:	2302      	movs	r3, #2
 800983e:	73fb      	strb	r3, [r7, #15]
    break;
 8009840:	e002      	b.n	8009848 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8009842:	2301      	movs	r3, #1
 8009844:	73fb      	strb	r3, [r7, #15]
    break;
 8009846:	bf00      	nop
  }
  return  speed;
 8009848:	7bfb      	ldrb	r3, [r7, #15]
}
 800984a:	4618      	mov	r0, r3
 800984c:	3710      	adds	r7, #16
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}

08009852 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009852:	b580      	push	{r7, lr}
 8009854:	b084      	sub	sp, #16
 8009856:	af00      	add	r7, sp, #0
 8009858:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800985a:	2300      	movs	r3, #0
 800985c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800985e:	2300      	movs	r3, #0
 8009860:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009868:	4618      	mov	r0, r3
 800986a:	f7f7 ffac 	bl	80017c6 <HAL_HCD_ResetPort>
 800986e:	4603      	mov	r3, r0
 8009870:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009872:	7bfb      	ldrb	r3, [r7, #15]
 8009874:	4618      	mov	r0, r3
 8009876:	f000 f92f 	bl	8009ad8 <USBH_Get_USB_Status>
 800987a:	4603      	mov	r3, r0
 800987c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800987e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009880:	4618      	mov	r0, r3
 8009882:	3710      	adds	r7, #16
 8009884:	46bd      	mov	sp, r7
 8009886:	bd80      	pop	{r7, pc}

08009888 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b082      	sub	sp, #8
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
 8009890:	460b      	mov	r3, r1
 8009892:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800989a:	78fa      	ldrb	r2, [r7, #3]
 800989c:	4611      	mov	r1, r2
 800989e:	4618      	mov	r0, r3
 80098a0:	f7f7 ffb3 	bl	800180a <HAL_HCD_HC_GetXferCount>
 80098a4:	4603      	mov	r3, r0
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	3708      	adds	r7, #8
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}

080098ae <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80098ae:	b590      	push	{r4, r7, lr}
 80098b0:	b089      	sub	sp, #36	; 0x24
 80098b2:	af04      	add	r7, sp, #16
 80098b4:	6078      	str	r0, [r7, #4]
 80098b6:	4608      	mov	r0, r1
 80098b8:	4611      	mov	r1, r2
 80098ba:	461a      	mov	r2, r3
 80098bc:	4603      	mov	r3, r0
 80098be:	70fb      	strb	r3, [r7, #3]
 80098c0:	460b      	mov	r3, r1
 80098c2:	70bb      	strb	r3, [r7, #2]
 80098c4:	4613      	mov	r3, r2
 80098c6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098c8:	2300      	movs	r3, #0
 80098ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80098cc:	2300      	movs	r3, #0
 80098ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80098d6:	787c      	ldrb	r4, [r7, #1]
 80098d8:	78ba      	ldrb	r2, [r7, #2]
 80098da:	78f9      	ldrb	r1, [r7, #3]
 80098dc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80098de:	9302      	str	r3, [sp, #8]
 80098e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80098e4:	9301      	str	r3, [sp, #4]
 80098e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80098ea:	9300      	str	r3, [sp, #0]
 80098ec:	4623      	mov	r3, r4
 80098ee:	f7f7 fc16 	bl	800111e <HAL_HCD_HC_Init>
 80098f2:	4603      	mov	r3, r0
 80098f4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80098f6:	7bfb      	ldrb	r3, [r7, #15]
 80098f8:	4618      	mov	r0, r3
 80098fa:	f000 f8ed 	bl	8009ad8 <USBH_Get_USB_Status>
 80098fe:	4603      	mov	r3, r0
 8009900:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009902:	7bbb      	ldrb	r3, [r7, #14]
}
 8009904:	4618      	mov	r0, r3
 8009906:	3714      	adds	r7, #20
 8009908:	46bd      	mov	sp, r7
 800990a:	bd90      	pop	{r4, r7, pc}

0800990c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b084      	sub	sp, #16
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
 8009914:	460b      	mov	r3, r1
 8009916:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009918:	2300      	movs	r3, #0
 800991a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800991c:	2300      	movs	r3, #0
 800991e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009926:	78fa      	ldrb	r2, [r7, #3]
 8009928:	4611      	mov	r1, r2
 800992a:	4618      	mov	r0, r3
 800992c:	f7f7 fc86 	bl	800123c <HAL_HCD_HC_Halt>
 8009930:	4603      	mov	r3, r0
 8009932:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009934:	7bfb      	ldrb	r3, [r7, #15]
 8009936:	4618      	mov	r0, r3
 8009938:	f000 f8ce 	bl	8009ad8 <USBH_Get_USB_Status>
 800993c:	4603      	mov	r3, r0
 800993e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009940:	7bbb      	ldrb	r3, [r7, #14]
}
 8009942:	4618      	mov	r0, r3
 8009944:	3710      	adds	r7, #16
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}

0800994a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800994a:	b590      	push	{r4, r7, lr}
 800994c:	b089      	sub	sp, #36	; 0x24
 800994e:	af04      	add	r7, sp, #16
 8009950:	6078      	str	r0, [r7, #4]
 8009952:	4608      	mov	r0, r1
 8009954:	4611      	mov	r1, r2
 8009956:	461a      	mov	r2, r3
 8009958:	4603      	mov	r3, r0
 800995a:	70fb      	strb	r3, [r7, #3]
 800995c:	460b      	mov	r3, r1
 800995e:	70bb      	strb	r3, [r7, #2]
 8009960:	4613      	mov	r3, r2
 8009962:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009964:	2300      	movs	r3, #0
 8009966:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009968:	2300      	movs	r3, #0
 800996a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009972:	787c      	ldrb	r4, [r7, #1]
 8009974:	78ba      	ldrb	r2, [r7, #2]
 8009976:	78f9      	ldrb	r1, [r7, #3]
 8009978:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800997c:	9303      	str	r3, [sp, #12]
 800997e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009980:	9302      	str	r3, [sp, #8]
 8009982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009984:	9301      	str	r3, [sp, #4]
 8009986:	f897 3020 	ldrb.w	r3, [r7, #32]
 800998a:	9300      	str	r3, [sp, #0]
 800998c:	4623      	mov	r3, r4
 800998e:	f7f7 fc79 	bl	8001284 <HAL_HCD_HC_SubmitRequest>
 8009992:	4603      	mov	r3, r0
 8009994:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009996:	7bfb      	ldrb	r3, [r7, #15]
 8009998:	4618      	mov	r0, r3
 800999a:	f000 f89d 	bl	8009ad8 <USBH_Get_USB_Status>
 800999e:	4603      	mov	r3, r0
 80099a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	3714      	adds	r7, #20
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd90      	pop	{r4, r7, pc}

080099ac <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b082      	sub	sp, #8
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
 80099b4:	460b      	mov	r3, r1
 80099b6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80099be:	78fa      	ldrb	r2, [r7, #3]
 80099c0:	4611      	mov	r1, r2
 80099c2:	4618      	mov	r0, r3
 80099c4:	f7f7 ff0d 	bl	80017e2 <HAL_HCD_HC_GetURBState>
 80099c8:	4603      	mov	r3, r0
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3708      	adds	r7, #8
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}

080099d2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80099d2:	b580      	push	{r7, lr}
 80099d4:	b082      	sub	sp, #8
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	6078      	str	r0, [r7, #4]
 80099da:	460b      	mov	r3, r1
 80099dc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	d103      	bne.n	80099f0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80099e8:	78fb      	ldrb	r3, [r7, #3]
 80099ea:	4618      	mov	r0, r3
 80099ec:	f000 f8a0 	bl	8009b30 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80099f0:	20c8      	movs	r0, #200	; 0xc8
 80099f2:	f7f7 f82f 	bl	8000a54 <HAL_Delay>
  return USBH_OK;
 80099f6:	2300      	movs	r3, #0
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3708      	adds	r7, #8
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}

08009a00 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b085      	sub	sp, #20
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
 8009a08:	460b      	mov	r3, r1
 8009a0a:	70fb      	strb	r3, [r7, #3]
 8009a0c:	4613      	mov	r3, r2
 8009a0e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009a16:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009a18:	78fb      	ldrb	r3, [r7, #3]
 8009a1a:	68fa      	ldr	r2, [r7, #12]
 8009a1c:	212c      	movs	r1, #44	; 0x2c
 8009a1e:	fb01 f303 	mul.w	r3, r1, r3
 8009a22:	4413      	add	r3, r2
 8009a24:	333b      	adds	r3, #59	; 0x3b
 8009a26:	781b      	ldrb	r3, [r3, #0]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d009      	beq.n	8009a40 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009a2c:	78fb      	ldrb	r3, [r7, #3]
 8009a2e:	68fa      	ldr	r2, [r7, #12]
 8009a30:	212c      	movs	r1, #44	; 0x2c
 8009a32:	fb01 f303 	mul.w	r3, r1, r3
 8009a36:	4413      	add	r3, r2
 8009a38:	3354      	adds	r3, #84	; 0x54
 8009a3a:	78ba      	ldrb	r2, [r7, #2]
 8009a3c:	701a      	strb	r2, [r3, #0]
 8009a3e:	e008      	b.n	8009a52 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009a40:	78fb      	ldrb	r3, [r7, #3]
 8009a42:	68fa      	ldr	r2, [r7, #12]
 8009a44:	212c      	movs	r1, #44	; 0x2c
 8009a46:	fb01 f303 	mul.w	r3, r1, r3
 8009a4a:	4413      	add	r3, r2
 8009a4c:	3355      	adds	r3, #85	; 0x55
 8009a4e:	78ba      	ldrb	r2, [r7, #2]
 8009a50:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009a52:	2300      	movs	r3, #0
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3714      	adds	r7, #20
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5e:	4770      	bx	lr

08009a60 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009a60:	b480      	push	{r7}
 8009a62:	b085      	sub	sp, #20
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
 8009a68:	460b      	mov	r3, r1
 8009a6a:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009a76:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 8009a78:	78fb      	ldrb	r3, [r7, #3]
 8009a7a:	68ba      	ldr	r2, [r7, #8]
 8009a7c:	212c      	movs	r1, #44	; 0x2c
 8009a7e:	fb01 f303 	mul.w	r3, r1, r3
 8009a82:	4413      	add	r3, r2
 8009a84:	333b      	adds	r3, #59	; 0x3b
 8009a86:	781b      	ldrb	r3, [r3, #0]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d009      	beq.n	8009aa0 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 8009a8c:	78fb      	ldrb	r3, [r7, #3]
 8009a8e:	68ba      	ldr	r2, [r7, #8]
 8009a90:	212c      	movs	r1, #44	; 0x2c
 8009a92:	fb01 f303 	mul.w	r3, r1, r3
 8009a96:	4413      	add	r3, r2
 8009a98:	3354      	adds	r3, #84	; 0x54
 8009a9a:	781b      	ldrb	r3, [r3, #0]
 8009a9c:	73fb      	strb	r3, [r7, #15]
 8009a9e:	e008      	b.n	8009ab2 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8009aa0:	78fb      	ldrb	r3, [r7, #3]
 8009aa2:	68ba      	ldr	r2, [r7, #8]
 8009aa4:	212c      	movs	r1, #44	; 0x2c
 8009aa6:	fb01 f303 	mul.w	r3, r1, r3
 8009aaa:	4413      	add	r3, r2
 8009aac:	3355      	adds	r3, #85	; 0x55
 8009aae:	781b      	ldrb	r3, [r3, #0]
 8009ab0:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 8009ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3714      	adds	r7, #20
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abe:	4770      	bx	lr

08009ac0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b082      	sub	sp, #8
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f7f6 ffc3 	bl	8000a54 <HAL_Delay>
}
 8009ace:	bf00      	nop
 8009ad0:	3708      	adds	r7, #8
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}
	...

08009ad8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b085      	sub	sp, #20
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	4603      	mov	r3, r0
 8009ae0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009ae6:	79fb      	ldrb	r3, [r7, #7]
 8009ae8:	2b03      	cmp	r3, #3
 8009aea:	d817      	bhi.n	8009b1c <USBH_Get_USB_Status+0x44>
 8009aec:	a201      	add	r2, pc, #4	; (adr r2, 8009af4 <USBH_Get_USB_Status+0x1c>)
 8009aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009af2:	bf00      	nop
 8009af4:	08009b05 	.word	0x08009b05
 8009af8:	08009b0b 	.word	0x08009b0b
 8009afc:	08009b11 	.word	0x08009b11
 8009b00:	08009b17 	.word	0x08009b17
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009b04:	2300      	movs	r3, #0
 8009b06:	73fb      	strb	r3, [r7, #15]
    break;
 8009b08:	e00b      	b.n	8009b22 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009b0a:	2302      	movs	r3, #2
 8009b0c:	73fb      	strb	r3, [r7, #15]
    break;
 8009b0e:	e008      	b.n	8009b22 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009b10:	2301      	movs	r3, #1
 8009b12:	73fb      	strb	r3, [r7, #15]
    break;
 8009b14:	e005      	b.n	8009b22 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009b16:	2302      	movs	r3, #2
 8009b18:	73fb      	strb	r3, [r7, #15]
    break;
 8009b1a:	e002      	b.n	8009b22 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009b1c:	2302      	movs	r3, #2
 8009b1e:	73fb      	strb	r3, [r7, #15]
    break;
 8009b20:	bf00      	nop
  }
  return usb_status;
 8009b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3714      	adds	r7, #20
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr

08009b30 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b084      	sub	sp, #16
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	4603      	mov	r3, r0
 8009b38:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009b3a:	79fb      	ldrb	r3, [r7, #7]
 8009b3c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009b3e:	79fb      	ldrb	r3, [r7, #7]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d102      	bne.n	8009b4a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009b44:	2300      	movs	r3, #0
 8009b46:	73fb      	strb	r3, [r7, #15]
 8009b48:	e001      	b.n	8009b4e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009b4e:	7bfb      	ldrb	r3, [r7, #15]
 8009b50:	461a      	mov	r2, r3
 8009b52:	2101      	movs	r1, #1
 8009b54:	4803      	ldr	r0, [pc, #12]	; (8009b64 <MX_DriverVbusFS+0x34>)
 8009b56:	f7f7 fa67 	bl	8001028 <HAL_GPIO_WritePin>
}
 8009b5a:	bf00      	nop
 8009b5c:	3710      	adds	r7, #16
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}
 8009b62:	bf00      	nop
 8009b64:	40020800 	.word	0x40020800

08009b68 <__errno>:
 8009b68:	4b01      	ldr	r3, [pc, #4]	; (8009b70 <__errno+0x8>)
 8009b6a:	6818      	ldr	r0, [r3, #0]
 8009b6c:	4770      	bx	lr
 8009b6e:	bf00      	nop
 8009b70:	2000002c 	.word	0x2000002c

08009b74 <__libc_init_array>:
 8009b74:	b570      	push	{r4, r5, r6, lr}
 8009b76:	4d0d      	ldr	r5, [pc, #52]	; (8009bac <__libc_init_array+0x38>)
 8009b78:	4c0d      	ldr	r4, [pc, #52]	; (8009bb0 <__libc_init_array+0x3c>)
 8009b7a:	1b64      	subs	r4, r4, r5
 8009b7c:	10a4      	asrs	r4, r4, #2
 8009b7e:	2600      	movs	r6, #0
 8009b80:	42a6      	cmp	r6, r4
 8009b82:	d109      	bne.n	8009b98 <__libc_init_array+0x24>
 8009b84:	4d0b      	ldr	r5, [pc, #44]	; (8009bb4 <__libc_init_array+0x40>)
 8009b86:	4c0c      	ldr	r4, [pc, #48]	; (8009bb8 <__libc_init_array+0x44>)
 8009b88:	f000 f906 	bl	8009d98 <_init>
 8009b8c:	1b64      	subs	r4, r4, r5
 8009b8e:	10a4      	asrs	r4, r4, #2
 8009b90:	2600      	movs	r6, #0
 8009b92:	42a6      	cmp	r6, r4
 8009b94:	d105      	bne.n	8009ba2 <__libc_init_array+0x2e>
 8009b96:	bd70      	pop	{r4, r5, r6, pc}
 8009b98:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b9c:	4798      	blx	r3
 8009b9e:	3601      	adds	r6, #1
 8009ba0:	e7ee      	b.n	8009b80 <__libc_init_array+0xc>
 8009ba2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ba6:	4798      	blx	r3
 8009ba8:	3601      	adds	r6, #1
 8009baa:	e7f2      	b.n	8009b92 <__libc_init_array+0x1e>
 8009bac:	08009eac 	.word	0x08009eac
 8009bb0:	08009eac 	.word	0x08009eac
 8009bb4:	08009eac 	.word	0x08009eac
 8009bb8:	08009eb0 	.word	0x08009eb0

08009bbc <malloc>:
 8009bbc:	4b02      	ldr	r3, [pc, #8]	; (8009bc8 <malloc+0xc>)
 8009bbe:	4601      	mov	r1, r0
 8009bc0:	6818      	ldr	r0, [r3, #0]
 8009bc2:	f000 b871 	b.w	8009ca8 <_malloc_r>
 8009bc6:	bf00      	nop
 8009bc8:	2000002c 	.word	0x2000002c

08009bcc <free>:
 8009bcc:	4b02      	ldr	r3, [pc, #8]	; (8009bd8 <free+0xc>)
 8009bce:	4601      	mov	r1, r0
 8009bd0:	6818      	ldr	r0, [r3, #0]
 8009bd2:	f000 b819 	b.w	8009c08 <_free_r>
 8009bd6:	bf00      	nop
 8009bd8:	2000002c 	.word	0x2000002c

08009bdc <memcpy>:
 8009bdc:	440a      	add	r2, r1
 8009bde:	4291      	cmp	r1, r2
 8009be0:	f100 33ff 	add.w	r3, r0, #4294967295
 8009be4:	d100      	bne.n	8009be8 <memcpy+0xc>
 8009be6:	4770      	bx	lr
 8009be8:	b510      	push	{r4, lr}
 8009bea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009bee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009bf2:	4291      	cmp	r1, r2
 8009bf4:	d1f9      	bne.n	8009bea <memcpy+0xe>
 8009bf6:	bd10      	pop	{r4, pc}

08009bf8 <memset>:
 8009bf8:	4402      	add	r2, r0
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d100      	bne.n	8009c02 <memset+0xa>
 8009c00:	4770      	bx	lr
 8009c02:	f803 1b01 	strb.w	r1, [r3], #1
 8009c06:	e7f9      	b.n	8009bfc <memset+0x4>

08009c08 <_free_r>:
 8009c08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c0a:	2900      	cmp	r1, #0
 8009c0c:	d048      	beq.n	8009ca0 <_free_r+0x98>
 8009c0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c12:	9001      	str	r0, [sp, #4]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	f1a1 0404 	sub.w	r4, r1, #4
 8009c1a:	bfb8      	it	lt
 8009c1c:	18e4      	addlt	r4, r4, r3
 8009c1e:	f000 f8ad 	bl	8009d7c <__malloc_lock>
 8009c22:	4a20      	ldr	r2, [pc, #128]	; (8009ca4 <_free_r+0x9c>)
 8009c24:	9801      	ldr	r0, [sp, #4]
 8009c26:	6813      	ldr	r3, [r2, #0]
 8009c28:	4615      	mov	r5, r2
 8009c2a:	b933      	cbnz	r3, 8009c3a <_free_r+0x32>
 8009c2c:	6063      	str	r3, [r4, #4]
 8009c2e:	6014      	str	r4, [r2, #0]
 8009c30:	b003      	add	sp, #12
 8009c32:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c36:	f000 b8a7 	b.w	8009d88 <__malloc_unlock>
 8009c3a:	42a3      	cmp	r3, r4
 8009c3c:	d90b      	bls.n	8009c56 <_free_r+0x4e>
 8009c3e:	6821      	ldr	r1, [r4, #0]
 8009c40:	1862      	adds	r2, r4, r1
 8009c42:	4293      	cmp	r3, r2
 8009c44:	bf04      	itt	eq
 8009c46:	681a      	ldreq	r2, [r3, #0]
 8009c48:	685b      	ldreq	r3, [r3, #4]
 8009c4a:	6063      	str	r3, [r4, #4]
 8009c4c:	bf04      	itt	eq
 8009c4e:	1852      	addeq	r2, r2, r1
 8009c50:	6022      	streq	r2, [r4, #0]
 8009c52:	602c      	str	r4, [r5, #0]
 8009c54:	e7ec      	b.n	8009c30 <_free_r+0x28>
 8009c56:	461a      	mov	r2, r3
 8009c58:	685b      	ldr	r3, [r3, #4]
 8009c5a:	b10b      	cbz	r3, 8009c60 <_free_r+0x58>
 8009c5c:	42a3      	cmp	r3, r4
 8009c5e:	d9fa      	bls.n	8009c56 <_free_r+0x4e>
 8009c60:	6811      	ldr	r1, [r2, #0]
 8009c62:	1855      	adds	r5, r2, r1
 8009c64:	42a5      	cmp	r5, r4
 8009c66:	d10b      	bne.n	8009c80 <_free_r+0x78>
 8009c68:	6824      	ldr	r4, [r4, #0]
 8009c6a:	4421      	add	r1, r4
 8009c6c:	1854      	adds	r4, r2, r1
 8009c6e:	42a3      	cmp	r3, r4
 8009c70:	6011      	str	r1, [r2, #0]
 8009c72:	d1dd      	bne.n	8009c30 <_free_r+0x28>
 8009c74:	681c      	ldr	r4, [r3, #0]
 8009c76:	685b      	ldr	r3, [r3, #4]
 8009c78:	6053      	str	r3, [r2, #4]
 8009c7a:	4421      	add	r1, r4
 8009c7c:	6011      	str	r1, [r2, #0]
 8009c7e:	e7d7      	b.n	8009c30 <_free_r+0x28>
 8009c80:	d902      	bls.n	8009c88 <_free_r+0x80>
 8009c82:	230c      	movs	r3, #12
 8009c84:	6003      	str	r3, [r0, #0]
 8009c86:	e7d3      	b.n	8009c30 <_free_r+0x28>
 8009c88:	6825      	ldr	r5, [r4, #0]
 8009c8a:	1961      	adds	r1, r4, r5
 8009c8c:	428b      	cmp	r3, r1
 8009c8e:	bf04      	itt	eq
 8009c90:	6819      	ldreq	r1, [r3, #0]
 8009c92:	685b      	ldreq	r3, [r3, #4]
 8009c94:	6063      	str	r3, [r4, #4]
 8009c96:	bf04      	itt	eq
 8009c98:	1949      	addeq	r1, r1, r5
 8009c9a:	6021      	streq	r1, [r4, #0]
 8009c9c:	6054      	str	r4, [r2, #4]
 8009c9e:	e7c7      	b.n	8009c30 <_free_r+0x28>
 8009ca0:	b003      	add	sp, #12
 8009ca2:	bd30      	pop	{r4, r5, pc}
 8009ca4:	200000e8 	.word	0x200000e8

08009ca8 <_malloc_r>:
 8009ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009caa:	1ccd      	adds	r5, r1, #3
 8009cac:	f025 0503 	bic.w	r5, r5, #3
 8009cb0:	3508      	adds	r5, #8
 8009cb2:	2d0c      	cmp	r5, #12
 8009cb4:	bf38      	it	cc
 8009cb6:	250c      	movcc	r5, #12
 8009cb8:	2d00      	cmp	r5, #0
 8009cba:	4606      	mov	r6, r0
 8009cbc:	db01      	blt.n	8009cc2 <_malloc_r+0x1a>
 8009cbe:	42a9      	cmp	r1, r5
 8009cc0:	d903      	bls.n	8009cca <_malloc_r+0x22>
 8009cc2:	230c      	movs	r3, #12
 8009cc4:	6033      	str	r3, [r6, #0]
 8009cc6:	2000      	movs	r0, #0
 8009cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cca:	f000 f857 	bl	8009d7c <__malloc_lock>
 8009cce:	4921      	ldr	r1, [pc, #132]	; (8009d54 <_malloc_r+0xac>)
 8009cd0:	680a      	ldr	r2, [r1, #0]
 8009cd2:	4614      	mov	r4, r2
 8009cd4:	b99c      	cbnz	r4, 8009cfe <_malloc_r+0x56>
 8009cd6:	4f20      	ldr	r7, [pc, #128]	; (8009d58 <_malloc_r+0xb0>)
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	b923      	cbnz	r3, 8009ce6 <_malloc_r+0x3e>
 8009cdc:	4621      	mov	r1, r4
 8009cde:	4630      	mov	r0, r6
 8009ce0:	f000 f83c 	bl	8009d5c <_sbrk_r>
 8009ce4:	6038      	str	r0, [r7, #0]
 8009ce6:	4629      	mov	r1, r5
 8009ce8:	4630      	mov	r0, r6
 8009cea:	f000 f837 	bl	8009d5c <_sbrk_r>
 8009cee:	1c43      	adds	r3, r0, #1
 8009cf0:	d123      	bne.n	8009d3a <_malloc_r+0x92>
 8009cf2:	230c      	movs	r3, #12
 8009cf4:	6033      	str	r3, [r6, #0]
 8009cf6:	4630      	mov	r0, r6
 8009cf8:	f000 f846 	bl	8009d88 <__malloc_unlock>
 8009cfc:	e7e3      	b.n	8009cc6 <_malloc_r+0x1e>
 8009cfe:	6823      	ldr	r3, [r4, #0]
 8009d00:	1b5b      	subs	r3, r3, r5
 8009d02:	d417      	bmi.n	8009d34 <_malloc_r+0x8c>
 8009d04:	2b0b      	cmp	r3, #11
 8009d06:	d903      	bls.n	8009d10 <_malloc_r+0x68>
 8009d08:	6023      	str	r3, [r4, #0]
 8009d0a:	441c      	add	r4, r3
 8009d0c:	6025      	str	r5, [r4, #0]
 8009d0e:	e004      	b.n	8009d1a <_malloc_r+0x72>
 8009d10:	6863      	ldr	r3, [r4, #4]
 8009d12:	42a2      	cmp	r2, r4
 8009d14:	bf0c      	ite	eq
 8009d16:	600b      	streq	r3, [r1, #0]
 8009d18:	6053      	strne	r3, [r2, #4]
 8009d1a:	4630      	mov	r0, r6
 8009d1c:	f000 f834 	bl	8009d88 <__malloc_unlock>
 8009d20:	f104 000b 	add.w	r0, r4, #11
 8009d24:	1d23      	adds	r3, r4, #4
 8009d26:	f020 0007 	bic.w	r0, r0, #7
 8009d2a:	1ac2      	subs	r2, r0, r3
 8009d2c:	d0cc      	beq.n	8009cc8 <_malloc_r+0x20>
 8009d2e:	1a1b      	subs	r3, r3, r0
 8009d30:	50a3      	str	r3, [r4, r2]
 8009d32:	e7c9      	b.n	8009cc8 <_malloc_r+0x20>
 8009d34:	4622      	mov	r2, r4
 8009d36:	6864      	ldr	r4, [r4, #4]
 8009d38:	e7cc      	b.n	8009cd4 <_malloc_r+0x2c>
 8009d3a:	1cc4      	adds	r4, r0, #3
 8009d3c:	f024 0403 	bic.w	r4, r4, #3
 8009d40:	42a0      	cmp	r0, r4
 8009d42:	d0e3      	beq.n	8009d0c <_malloc_r+0x64>
 8009d44:	1a21      	subs	r1, r4, r0
 8009d46:	4630      	mov	r0, r6
 8009d48:	f000 f808 	bl	8009d5c <_sbrk_r>
 8009d4c:	3001      	adds	r0, #1
 8009d4e:	d1dd      	bne.n	8009d0c <_malloc_r+0x64>
 8009d50:	e7cf      	b.n	8009cf2 <_malloc_r+0x4a>
 8009d52:	bf00      	nop
 8009d54:	200000e8 	.word	0x200000e8
 8009d58:	200000ec 	.word	0x200000ec

08009d5c <_sbrk_r>:
 8009d5c:	b538      	push	{r3, r4, r5, lr}
 8009d5e:	4d06      	ldr	r5, [pc, #24]	; (8009d78 <_sbrk_r+0x1c>)
 8009d60:	2300      	movs	r3, #0
 8009d62:	4604      	mov	r4, r0
 8009d64:	4608      	mov	r0, r1
 8009d66:	602b      	str	r3, [r5, #0]
 8009d68:	f7f6 fd90 	bl	800088c <_sbrk>
 8009d6c:	1c43      	adds	r3, r0, #1
 8009d6e:	d102      	bne.n	8009d76 <_sbrk_r+0x1a>
 8009d70:	682b      	ldr	r3, [r5, #0]
 8009d72:	b103      	cbz	r3, 8009d76 <_sbrk_r+0x1a>
 8009d74:	6023      	str	r3, [r4, #0]
 8009d76:	bd38      	pop	{r3, r4, r5, pc}
 8009d78:	20004910 	.word	0x20004910

08009d7c <__malloc_lock>:
 8009d7c:	4801      	ldr	r0, [pc, #4]	; (8009d84 <__malloc_lock+0x8>)
 8009d7e:	f000 b809 	b.w	8009d94 <__retarget_lock_acquire_recursive>
 8009d82:	bf00      	nop
 8009d84:	20004918 	.word	0x20004918

08009d88 <__malloc_unlock>:
 8009d88:	4801      	ldr	r0, [pc, #4]	; (8009d90 <__malloc_unlock+0x8>)
 8009d8a:	f000 b804 	b.w	8009d96 <__retarget_lock_release_recursive>
 8009d8e:	bf00      	nop
 8009d90:	20004918 	.word	0x20004918

08009d94 <__retarget_lock_acquire_recursive>:
 8009d94:	4770      	bx	lr

08009d96 <__retarget_lock_release_recursive>:
 8009d96:	4770      	bx	lr

08009d98 <_init>:
 8009d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d9a:	bf00      	nop
 8009d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d9e:	bc08      	pop	{r3}
 8009da0:	469e      	mov	lr, r3
 8009da2:	4770      	bx	lr

08009da4 <_fini>:
 8009da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009da6:	bf00      	nop
 8009da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009daa:	bc08      	pop	{r3}
 8009dac:	469e      	mov	lr, r3
 8009dae:	4770      	bx	lr
