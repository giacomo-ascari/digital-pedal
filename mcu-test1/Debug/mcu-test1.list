
mcu-test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cef4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d0  0800d084  0800d084  0001d084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d454  0800d454  00020334  2**0
                  CONTENTS
  4 .ARM          00000008  0800d454  0800d454  0001d454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d45c  0800d45c  00020334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d45c  0800d45c  0001d45c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d460  0800d460  0001d460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000334  20000000  0800d464  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020334  2**0
                  CONTENTS
 10 .bss          00002760  20000334  20000334  00020334  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002a94  20002a94  00020334  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020334  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001dd42  00000000  00000000  00020364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004e34  00000000  00000000  0003e0a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014e8  00000000  00000000  00042ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001490  00000000  00000000  000443c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002734c  00000000  00000000  00045858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001eccd  00000000  00000000  0006cba4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd12f  00000000  00000000  0008b871  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001589a0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000588c  00000000  00000000  001589f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000001e5  00000000  00000000  0015e27c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000334 	.word	0x20000334
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d06c 	.word	0x0800d06c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000338 	.word	0x20000338
 80001cc:	0800d06c 	.word	0x0800d06c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <write_register>:

//(1): Functions definitions
//-------------- Static Functions ---------------//
// Function(1): Write to register
static void write_register(uint8_t reg, uint8_t *data)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af02      	add	r7, sp, #8
 800057a:	4603      	mov	r3, r0
 800057c:	6039      	str	r1, [r7, #0]
 800057e:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 8000580:	4a09      	ldr	r2, [pc, #36]	; (80005a8 <write_register+0x34>)
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	7013      	strb	r3, [r2, #0]
	iData[1] = data[0];
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	781a      	ldrb	r2, [r3, #0]
 800058a:	4b07      	ldr	r3, [pc, #28]	; (80005a8 <write_register+0x34>)
 800058c:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100);
 800058e:	2364      	movs	r3, #100	; 0x64
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	2302      	movs	r3, #2
 8000594:	4a04      	ldr	r2, [pc, #16]	; (80005a8 <write_register+0x34>)
 8000596:	2194      	movs	r1, #148	; 0x94
 8000598:	4804      	ldr	r0, [pc, #16]	; (80005ac <write_register+0x38>)
 800059a:	f005 f83f 	bl	800561c <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, data, size, 100);
}
 800059e:	bf00      	nop
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20000350 	.word	0x20000350
 80005ac:	20000354 	.word	0x20000354

080005b0 <read_register>:
// Function(2): Read from register
static void read_register(uint8_t reg, uint8_t *data)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af02      	add	r7, sp, #8
 80005b6:	4603      	mov	r3, r0
 80005b8:	6039      	str	r1, [r7, #0]
 80005ba:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 80005bc:	4a0b      	ldr	r2, [pc, #44]	; (80005ec <read_register+0x3c>)
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100);
 80005c2:	2364      	movs	r3, #100	; 0x64
 80005c4:	9300      	str	r3, [sp, #0]
 80005c6:	2301      	movs	r3, #1
 80005c8:	4a08      	ldr	r2, [pc, #32]	; (80005ec <read_register+0x3c>)
 80005ca:	2194      	movs	r1, #148	; 0x94
 80005cc:	4808      	ldr	r0, [pc, #32]	; (80005f0 <read_register+0x40>)
 80005ce:	f005 f825 	bl	800561c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100);
 80005d2:	2364      	movs	r3, #100	; 0x64
 80005d4:	9300      	str	r3, [sp, #0]
 80005d6:	2301      	movs	r3, #1
 80005d8:	683a      	ldr	r2, [r7, #0]
 80005da:	2194      	movs	r1, #148	; 0x94
 80005dc:	4804      	ldr	r0, [pc, #16]	; (80005f0 <read_register+0x40>)
 80005de:	f005 f91b 	bl	8005818 <HAL_I2C_Master_Receive>
}
 80005e2:	bf00      	nop
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	20000350 	.word	0x20000350
 80005f0:	20000354 	.word	0x20000354

080005f4 <CS43_Init>:

//-------------- Public Functions ----------------//
// Function(1): Initialisation
void CS43_Init(I2C_HandleTypeDef i2c_handle, CS43_MODE outputMode)
{
 80005f4:	b084      	sub	sp, #16
 80005f6:	b580      	push	{r7, lr}
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	f107 0c08 	add.w	ip, r7, #8
 80005fe:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000602:	4b81      	ldr	r3, [pc, #516]	; (8000808 <CS43_Init+0x214>)
 8000604:	2200      	movs	r2, #0
 8000606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 800060a:	4b7f      	ldr	r3, [pc, #508]	; (8000808 <CS43_Init+0x214>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	69da      	ldr	r2, [r3, #28]
 8000610:	4b7d      	ldr	r3, [pc, #500]	; (8000808 <CS43_Init+0x214>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000618:	61da      	str	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 800061a:	2201      	movs	r2, #1
 800061c:	2110      	movs	r1, #16
 800061e:	487b      	ldr	r0, [pc, #492]	; (800080c <CS43_Init+0x218>)
 8000620:	f003 f92e 	bl	8003880 <HAL_GPIO_WritePin>
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 8000624:	4b7a      	ldr	r3, [pc, #488]	; (8000810 <CS43_Init+0x21c>)
 8000626:	4618      	mov	r0, r3
 8000628:	f107 0308 	add.w	r3, r7, #8
 800062c:	2254      	movs	r2, #84	; 0x54
 800062e:	4619      	mov	r1, r3
 8000630:	f00c f8a6 	bl	800c780 <memcpy>
	//(2): Power down
	iData[1] = 0x01;
 8000634:	4b77      	ldr	r3, [pc, #476]	; (8000814 <CS43_Init+0x220>)
 8000636:	2201      	movs	r2, #1
 8000638:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,iData);
 800063a:	4976      	ldr	r1, [pc, #472]	; (8000814 <CS43_Init+0x220>)
 800063c:	2002      	movs	r0, #2
 800063e:	f7ff ff99 	bl	8000574 <write_register>
	//(3): Enable Right and Left headphones
	iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000642:	4b74      	ldr	r3, [pc, #464]	; (8000814 <CS43_Init+0x220>)
 8000644:	2280      	movs	r2, #128	; 0x80
 8000646:	705a      	strb	r2, [r3, #1]
	iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000648:	4b72      	ldr	r3, [pc, #456]	; (8000814 <CS43_Init+0x220>)
 800064a:	785b      	ldrb	r3, [r3, #1]
 800064c:	f043 0320 	orr.w	r3, r3, #32
 8000650:	b2da      	uxtb	r2, r3
 8000652:	4b70      	ldr	r3, [pc, #448]	; (8000814 <CS43_Init+0x220>)
 8000654:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 8000656:	4b6f      	ldr	r3, [pc, #444]	; (8000814 <CS43_Init+0x220>)
 8000658:	785b      	ldrb	r3, [r3, #1]
 800065a:	f043 030c 	orr.w	r3, r3, #12
 800065e:	b2da      	uxtb	r2, r3
 8000660:	4b6c      	ldr	r3, [pc, #432]	; (8000814 <CS43_Init+0x220>)
 8000662:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 8000664:	4b6b      	ldr	r3, [pc, #428]	; (8000814 <CS43_Init+0x220>)
 8000666:	785b      	ldrb	r3, [r3, #1]
 8000668:	f043 0303 	orr.w	r3, r3, #3
 800066c:	b2da      	uxtb	r2, r3
 800066e:	4b69      	ldr	r3, [pc, #420]	; (8000814 <CS43_Init+0x220>)
 8000670:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 8000672:	4969      	ldr	r1, [pc, #420]	; (8000818 <CS43_Init+0x224>)
 8000674:	2004      	movs	r0, #4
 8000676:	f7ff ff7d 	bl	8000574 <write_register>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
 800067a:	4b66      	ldr	r3, [pc, #408]	; (8000814 <CS43_Init+0x220>)
 800067c:	2280      	movs	r2, #128	; 0x80
 800067e:	705a      	strb	r2, [r3, #1]
	write_register(CLOCKING_CONTROL,&iData[1]);
 8000680:	4965      	ldr	r1, [pc, #404]	; (8000818 <CS43_Init+0x224>)
 8000682:	2005      	movs	r0, #5
 8000684:	f7ff ff76 	bl	8000574 <write_register>
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
 8000688:	4962      	ldr	r1, [pc, #392]	; (8000814 <CS43_Init+0x220>)
 800068a:	2006      	movs	r0, #6
 800068c:	f7ff ff90 	bl	80005b0 <read_register>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 8000690:	4b60      	ldr	r3, [pc, #384]	; (8000814 <CS43_Init+0x220>)
 8000692:	785b      	ldrb	r3, [r3, #1]
 8000694:	f003 0320 	and.w	r3, r3, #32
 8000698:	b2da      	uxtb	r2, r3
 800069a:	4b5e      	ldr	r3, [pc, #376]	; (8000814 <CS43_Init+0x220>)
 800069c:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 7);  // Slave
 800069e:	4b5d      	ldr	r3, [pc, #372]	; (8000814 <CS43_Init+0x220>)
 80006a0:	785b      	ldrb	r3, [r3, #1]
 80006a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	4b5a      	ldr	r3, [pc, #360]	; (8000814 <CS43_Init+0x220>)
 80006aa:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
 80006ac:	4b59      	ldr	r3, [pc, #356]	; (8000814 <CS43_Init+0x220>)
 80006ae:	785b      	ldrb	r3, [r3, #1]
 80006b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80006b4:	b2da      	uxtb	r2, r3
 80006b6:	4b57      	ldr	r3, [pc, #348]	; (8000814 <CS43_Init+0x220>)
 80006b8:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 4);  // No DSP mode
 80006ba:	4b56      	ldr	r3, [pc, #344]	; (8000814 <CS43_Init+0x220>)
 80006bc:	785b      	ldrb	r3, [r3, #1]
 80006be:	f023 0310 	bic.w	r3, r3, #16
 80006c2:	b2da      	uxtb	r2, r3
 80006c4:	4b53      	ldr	r3, [pc, #332]	; (8000814 <CS43_Init+0x220>)
 80006c6:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
 80006c8:	4b52      	ldr	r3, [pc, #328]	; (8000814 <CS43_Init+0x220>)
 80006ca:	785b      	ldrb	r3, [r3, #1]
 80006cc:	f023 0304 	bic.w	r3, r3, #4
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	4b50      	ldr	r3, [pc, #320]	; (8000814 <CS43_Init+0x220>)
 80006d4:	705a      	strb	r2, [r3, #1]
	iData[1] |= (1 << 2);
 80006d6:	4b4f      	ldr	r3, [pc, #316]	; (8000814 <CS43_Init+0x220>)
 80006d8:	785b      	ldrb	r3, [r3, #1]
 80006da:	f043 0304 	orr.w	r3, r3, #4
 80006de:	b2da      	uxtb	r2, r3
 80006e0:	4b4c      	ldr	r3, [pc, #304]	; (8000814 <CS43_Init+0x220>)
 80006e2:	705a      	strb	r2, [r3, #1]

	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 80006e4:	4b4b      	ldr	r3, [pc, #300]	; (8000814 <CS43_Init+0x220>)
 80006e6:	785b      	ldrb	r3, [r3, #1]
 80006e8:	f043 0303 	orr.w	r3, r3, #3
 80006ec:	b2da      	uxtb	r2, r3
 80006ee:	4b49      	ldr	r3, [pc, #292]	; (8000814 <CS43_Init+0x220>)
 80006f0:	705a      	strb	r2, [r3, #1]
	write_register(INTERFACE_CONTROL1,&iData[1]);
 80006f2:	4949      	ldr	r1, [pc, #292]	; (8000818 <CS43_Init+0x224>)
 80006f4:	2006      	movs	r0, #6
 80006f6:	f7ff ff3d 	bl	8000574 <write_register>
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
 80006fa:	4947      	ldr	r1, [pc, #284]	; (8000818 <CS43_Init+0x224>)
 80006fc:	2008      	movs	r0, #8
 80006fe:	f7ff ff57 	bl	80005b0 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8000702:	4b44      	ldr	r3, [pc, #272]	; (8000814 <CS43_Init+0x220>)
 8000704:	785b      	ldrb	r3, [r3, #1]
 8000706:	f023 030f 	bic.w	r3, r3, #15
 800070a:	b2da      	uxtb	r2, r3
 800070c:	4b41      	ldr	r3, [pc, #260]	; (8000814 <CS43_Init+0x220>)
 800070e:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 8000710:	4b40      	ldr	r3, [pc, #256]	; (8000814 <CS43_Init+0x220>)
 8000712:	785b      	ldrb	r3, [r3, #1]
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	b2da      	uxtb	r2, r3
 800071a:	4b3e      	ldr	r3, [pc, #248]	; (8000814 <CS43_Init+0x220>)
 800071c:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_A,&iData[1]);
 800071e:	493e      	ldr	r1, [pc, #248]	; (8000818 <CS43_Init+0x224>)
 8000720:	2008      	movs	r0, #8
 8000722:	f7ff ff27 	bl	8000574 <write_register>
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
 8000726:	493c      	ldr	r1, [pc, #240]	; (8000818 <CS43_Init+0x224>)
 8000728:	2009      	movs	r0, #9
 800072a:	f7ff ff41 	bl	80005b0 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 800072e:	4b39      	ldr	r3, [pc, #228]	; (8000814 <CS43_Init+0x220>)
 8000730:	785b      	ldrb	r3, [r3, #1]
 8000732:	f023 030f 	bic.w	r3, r3, #15
 8000736:	b2da      	uxtb	r2, r3
 8000738:	4b36      	ldr	r3, [pc, #216]	; (8000814 <CS43_Init+0x220>)
 800073a:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 800073c:	4b35      	ldr	r3, [pc, #212]	; (8000814 <CS43_Init+0x220>)
 800073e:	785b      	ldrb	r3, [r3, #1]
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	b2da      	uxtb	r2, r3
 8000746:	4b33      	ldr	r3, [pc, #204]	; (8000814 <CS43_Init+0x220>)
 8000748:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_B,&iData[1]);
 800074a:	4933      	ldr	r1, [pc, #204]	; (8000818 <CS43_Init+0x224>)
 800074c:	2009      	movs	r0, #9
 800074e:	f7ff ff11 	bl	8000574 <write_register>
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
 8000752:	4931      	ldr	r1, [pc, #196]	; (8000818 <CS43_Init+0x224>)
 8000754:	200e      	movs	r0, #14
 8000756:	f7ff ff2b 	bl	80005b0 <read_register>
	if(outputMode == MODE_ANAL)
 800075a:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800075e:	2b01      	cmp	r3, #1
 8000760:	d123      	bne.n	80007aa <CS43_Init+0x1b6>
	{
		iData[1] |=  (1 << 7);   // Enable passthrough for AIN-A
 8000762:	4b2c      	ldr	r3, [pc, #176]	; (8000814 <CS43_Init+0x220>)
 8000764:	785b      	ldrb	r3, [r3, #1]
 8000766:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800076a:	b2da      	uxtb	r2, r3
 800076c:	4b29      	ldr	r3, [pc, #164]	; (8000814 <CS43_Init+0x220>)
 800076e:	705a      	strb	r2, [r3, #1]
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
 8000770:	4b28      	ldr	r3, [pc, #160]	; (8000814 <CS43_Init+0x220>)
 8000772:	785b      	ldrb	r3, [r3, #1]
 8000774:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000778:	b2da      	uxtb	r2, r3
 800077a:	4b26      	ldr	r3, [pc, #152]	; (8000814 <CS43_Init+0x220>)
 800077c:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
 800077e:	4b25      	ldr	r3, [pc, #148]	; (8000814 <CS43_Init+0x220>)
 8000780:	785b      	ldrb	r3, [r3, #1]
 8000782:	f023 0320 	bic.w	r3, r3, #32
 8000786:	b2da      	uxtb	r2, r3
 8000788:	4b22      	ldr	r3, [pc, #136]	; (8000814 <CS43_Init+0x220>)
 800078a:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
 800078c:	4b21      	ldr	r3, [pc, #132]	; (8000814 <CS43_Init+0x220>)
 800078e:	785b      	ldrb	r3, [r3, #1]
 8000790:	f023 0310 	bic.w	r3, r3, #16
 8000794:	b2da      	uxtb	r2, r3
 8000796:	4b1f      	ldr	r3, [pc, #124]	; (8000814 <CS43_Init+0x220>)
 8000798:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 800079a:	4b1e      	ldr	r3, [pc, #120]	; (8000814 <CS43_Init+0x220>)
 800079c:	785b      	ldrb	r3, [r3, #1]
 800079e:	f023 0308 	bic.w	r3, r3, #8
 80007a2:	b2da      	uxtb	r2, r3
 80007a4:	4b1b      	ldr	r3, [pc, #108]	; (8000814 <CS43_Init+0x220>)
 80007a6:	705a      	strb	r2, [r3, #1]
 80007a8:	e006      	b.n	80007b8 <CS43_Init+0x1c4>
	}
	else if(outputMode == MODE_I2S)
 80007aa:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d102      	bne.n	80007b8 <CS43_Init+0x1c4>
	{
		iData[1] = 0x02;
 80007b2:	4b18      	ldr	r3, [pc, #96]	; (8000814 <CS43_Init+0x220>)
 80007b4:	2202      	movs	r2, #2
 80007b6:	705a      	strb	r2, [r3, #1]
	}
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 80007b8:	4917      	ldr	r1, [pc, #92]	; (8000818 <CS43_Init+0x224>)
 80007ba:	200e      	movs	r0, #14
 80007bc:	f7ff feda 	bl	8000574 <write_register>
	//(9): Unmute headphone and speaker
	read_register(PLAYBACK_CONTROL, &iData[1]);
 80007c0:	4915      	ldr	r1, [pc, #84]	; (8000818 <CS43_Init+0x224>)
 80007c2:	200f      	movs	r0, #15
 80007c4:	f7ff fef4 	bl	80005b0 <read_register>
	iData[1] = 0x00;
 80007c8:	4b12      	ldr	r3, [pc, #72]	; (8000814 <CS43_Init+0x220>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	705a      	strb	r2, [r3, #1]
	write_register(PLAYBACK_CONTROL,&iData[1]);
 80007ce:	4912      	ldr	r1, [pc, #72]	; (8000818 <CS43_Init+0x224>)
 80007d0:	200f      	movs	r0, #15
 80007d2:	f7ff fecf 	bl	8000574 <write_register>
	//(10): Set volume to default (0dB)
	iData[1] = 0x00;
 80007d6:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <CS43_Init+0x220>)
 80007d8:	2200      	movs	r2, #0
 80007da:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 80007dc:	490e      	ldr	r1, [pc, #56]	; (8000818 <CS43_Init+0x224>)
 80007de:	2014      	movs	r0, #20
 80007e0:	f7ff fec8 	bl	8000574 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 80007e4:	490c      	ldr	r1, [pc, #48]	; (8000818 <CS43_Init+0x224>)
 80007e6:	2015      	movs	r0, #21
 80007e8:	f7ff fec4 	bl	8000574 <write_register>
	write_register(PCM_VOLUME_A,&iData[1]);
 80007ec:	490a      	ldr	r1, [pc, #40]	; (8000818 <CS43_Init+0x224>)
 80007ee:	201a      	movs	r0, #26
 80007f0:	f7ff fec0 	bl	8000574 <write_register>
	write_register(PCM_VOLUME_B,&iData[1]);
 80007f4:	4908      	ldr	r1, [pc, #32]	; (8000818 <CS43_Init+0x224>)
 80007f6:	201b      	movs	r0, #27
 80007f8:	f7ff febc 	bl	8000574 <write_register>
}
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000804:	b004      	add	sp, #16
 8000806:	4770      	bx	lr
 8000808:	20000a14 	.word	0x20000a14
 800080c:	40020c00 	.word	0x40020c00
 8000810:	20000354 	.word	0x20000354
 8000814:	20000350 	.word	0x20000350
 8000818:	20000351 	.word	0x20000351

0800081c <CS43_Enable_RightLeft>:

// Function(2): Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	71fb      	strb	r3, [r7, #7]
	switch (side)
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	2b03      	cmp	r3, #3
 800082a:	d837      	bhi.n	800089c <CS43_Enable_RightLeft+0x80>
 800082c:	a201      	add	r2, pc, #4	; (adr r2, 8000834 <CS43_Enable_RightLeft+0x18>)
 800082e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000832:	bf00      	nop
 8000834:	08000845 	.word	0x08000845
 8000838:	0800085b 	.word	0x0800085b
 800083c:	08000871 	.word	0x08000871
 8000840:	08000887 	.word	0x08000887
	{
		case 0:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000844:	4b21      	ldr	r3, [pc, #132]	; (80008cc <CS43_Enable_RightLeft+0xb0>)
 8000846:	22c0      	movs	r2, #192	; 0xc0
 8000848:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 800084a:	4b20      	ldr	r3, [pc, #128]	; (80008cc <CS43_Enable_RightLeft+0xb0>)
 800084c:	785b      	ldrb	r3, [r3, #1]
 800084e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000852:	b2da      	uxtb	r2, r3
 8000854:	4b1d      	ldr	r3, [pc, #116]	; (80008cc <CS43_Enable_RightLeft+0xb0>)
 8000856:	705a      	strb	r2, [r3, #1]
			break;
 8000858:	e021      	b.n	800089e <CS43_Enable_RightLeft+0x82>
		case 1:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 800085a:	4b1c      	ldr	r3, [pc, #112]	; (80008cc <CS43_Enable_RightLeft+0xb0>)
 800085c:	2280      	movs	r2, #128	; 0x80
 800085e:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000860:	4b1a      	ldr	r3, [pc, #104]	; (80008cc <CS43_Enable_RightLeft+0xb0>)
 8000862:	785b      	ldrb	r3, [r3, #1]
 8000864:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000868:	b2da      	uxtb	r2, r3
 800086a:	4b18      	ldr	r3, [pc, #96]	; (80008cc <CS43_Enable_RightLeft+0xb0>)
 800086c:	705a      	strb	r2, [r3, #1]
			break;
 800086e:	e016      	b.n	800089e <CS43_Enable_RightLeft+0x82>
		case 2:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000870:	4b16      	ldr	r3, [pc, #88]	; (80008cc <CS43_Enable_RightLeft+0xb0>)
 8000872:	22c0      	movs	r2, #192	; 0xc0
 8000874:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000876:	4b15      	ldr	r3, [pc, #84]	; (80008cc <CS43_Enable_RightLeft+0xb0>)
 8000878:	785b      	ldrb	r3, [r3, #1]
 800087a:	f043 0320 	orr.w	r3, r3, #32
 800087e:	b2da      	uxtb	r2, r3
 8000880:	4b12      	ldr	r3, [pc, #72]	; (80008cc <CS43_Enable_RightLeft+0xb0>)
 8000882:	705a      	strb	r2, [r3, #1]
			break;
 8000884:	e00b      	b.n	800089e <CS43_Enable_RightLeft+0x82>
		case 3:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000886:	4b11      	ldr	r3, [pc, #68]	; (80008cc <CS43_Enable_RightLeft+0xb0>)
 8000888:	2280      	movs	r2, #128	; 0x80
 800088a:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 800088c:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <CS43_Enable_RightLeft+0xb0>)
 800088e:	785b      	ldrb	r3, [r3, #1]
 8000890:	f043 0320 	orr.w	r3, r3, #32
 8000894:	b2da      	uxtb	r2, r3
 8000896:	4b0d      	ldr	r3, [pc, #52]	; (80008cc <CS43_Enable_RightLeft+0xb0>)
 8000898:	705a      	strb	r2, [r3, #1]
			break;
 800089a:	e000      	b.n	800089e <CS43_Enable_RightLeft+0x82>
		default:
			break;
 800089c:	bf00      	nop
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 800089e:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <CS43_Enable_RightLeft+0xb0>)
 80008a0:	785b      	ldrb	r3, [r3, #1]
 80008a2:	f043 030c 	orr.w	r3, r3, #12
 80008a6:	b2da      	uxtb	r2, r3
 80008a8:	4b08      	ldr	r3, [pc, #32]	; (80008cc <CS43_Enable_RightLeft+0xb0>)
 80008aa:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80008ac:	4b07      	ldr	r3, [pc, #28]	; (80008cc <CS43_Enable_RightLeft+0xb0>)
 80008ae:	785b      	ldrb	r3, [r3, #1]
 80008b0:	f043 0303 	orr.w	r3, r3, #3
 80008b4:	b2da      	uxtb	r2, r3
 80008b6:	4b05      	ldr	r3, [pc, #20]	; (80008cc <CS43_Enable_RightLeft+0xb0>)
 80008b8:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 80008ba:	4905      	ldr	r1, [pc, #20]	; (80008d0 <CS43_Enable_RightLeft+0xb4>)
 80008bc:	2004      	movs	r0, #4
 80008be:	f7ff fe59 	bl	8000574 <write_register>
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	20000350 	.word	0x20000350
 80008d0:	20000351 	.word	0x20000351

080008d4 <CS43_SetVolume>:

// Function(3): Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	71fb      	strb	r3, [r7, #7]
	iData[1] = VOLUME_CONVERT_D(volume);*/

	/* Set the Master volume */
	/*write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
	write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);*/
	iData[1] = (uint8_t )volume;
 80008de:	4a07      	ldr	r2, [pc, #28]	; (80008fc <CS43_SetVolume+0x28>)
 80008e0:	79fb      	ldrb	r3, [r7, #7]
 80008e2:	7053      	strb	r3, [r2, #1]
	write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
 80008e4:	4906      	ldr	r1, [pc, #24]	; (8000900 <CS43_SetVolume+0x2c>)
 80008e6:	2020      	movs	r0, #32
 80008e8:	f7ff fe44 	bl	8000574 <write_register>
	write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
 80008ec:	4904      	ldr	r1, [pc, #16]	; (8000900 <CS43_SetVolume+0x2c>)
 80008ee:	2021      	movs	r0, #33	; 0x21
 80008f0:	f7ff fe40 	bl	8000574 <write_register>
}
 80008f4:	bf00      	nop
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	20000350 	.word	0x20000350
 8000900:	20000351 	.word	0x20000351

08000904 <CS43_Start>:

// Function(4): Start the Audio DAC
void CS43_Start(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
	// Write 0x99 to register 0x00.
	iData[1] = 0x99;
 8000908:	4b1d      	ldr	r3, [pc, #116]	; (8000980 <CS43_Start+0x7c>)
 800090a:	2299      	movs	r2, #153	; 0x99
 800090c:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 800090e:	491d      	ldr	r1, [pc, #116]	; (8000984 <CS43_Start+0x80>)
 8000910:	2000      	movs	r0, #0
 8000912:	f7ff fe2f 	bl	8000574 <write_register>
	// Write 0x80 to register 0x47.
	iData[1] = 0x80;
 8000916:	4b1a      	ldr	r3, [pc, #104]	; (8000980 <CS43_Start+0x7c>)
 8000918:	2280      	movs	r2, #128	; 0x80
 800091a:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_47,&iData[1]);
 800091c:	4919      	ldr	r1, [pc, #100]	; (8000984 <CS43_Start+0x80>)
 800091e:	2047      	movs	r0, #71	; 0x47
 8000920:	f7ff fe28 	bl	8000574 <write_register>
	// Write '1'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 8000924:	4917      	ldr	r1, [pc, #92]	; (8000984 <CS43_Start+0x80>)
 8000926:	2032      	movs	r0, #50	; 0x32
 8000928:	f7ff fe42 	bl	80005b0 <read_register>
	iData[1] |= 0x80;
 800092c:	4b14      	ldr	r3, [pc, #80]	; (8000980 <CS43_Start+0x7c>)
 800092e:	785b      	ldrb	r3, [r3, #1]
 8000930:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000934:	b2da      	uxtb	r2, r3
 8000936:	4b12      	ldr	r3, [pc, #72]	; (8000980 <CS43_Start+0x7c>)
 8000938:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 800093a:	4912      	ldr	r1, [pc, #72]	; (8000984 <CS43_Start+0x80>)
 800093c:	2032      	movs	r0, #50	; 0x32
 800093e:	f7ff fe19 	bl	8000574 <write_register>
	// Write '0'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 8000942:	4910      	ldr	r1, [pc, #64]	; (8000984 <CS43_Start+0x80>)
 8000944:	2032      	movs	r0, #50	; 0x32
 8000946:	f7ff fe33 	bl	80005b0 <read_register>
	iData[1] &= ~(0x80);
 800094a:	4b0d      	ldr	r3, [pc, #52]	; (8000980 <CS43_Start+0x7c>)
 800094c:	785b      	ldrb	r3, [r3, #1]
 800094e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000952:	b2da      	uxtb	r2, r3
 8000954:	4b0a      	ldr	r3, [pc, #40]	; (8000980 <CS43_Start+0x7c>)
 8000956:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 8000958:	490a      	ldr	r1, [pc, #40]	; (8000984 <CS43_Start+0x80>)
 800095a:	2032      	movs	r0, #50	; 0x32
 800095c:	f7ff fe0a 	bl	8000574 <write_register>
	// Write 0x00 to register 0x00.
	iData[1] = 0x00;
 8000960:	4b07      	ldr	r3, [pc, #28]	; (8000980 <CS43_Start+0x7c>)
 8000962:	2200      	movs	r2, #0
 8000964:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 8000966:	4907      	ldr	r1, [pc, #28]	; (8000984 <CS43_Start+0x80>)
 8000968:	2000      	movs	r0, #0
 800096a:	f7ff fe03 	bl	8000574 <write_register>
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	iData[1] = 0x9E;
 800096e:	4b04      	ldr	r3, [pc, #16]	; (8000980 <CS43_Start+0x7c>)
 8000970:	229e      	movs	r2, #158	; 0x9e
 8000972:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,&iData[1]);
 8000974:	4903      	ldr	r1, [pc, #12]	; (8000984 <CS43_Start+0x80>)
 8000976:	2002      	movs	r0, #2
 8000978:	f7ff fdfc 	bl	8000574 <write_register>
}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20000350 	.word	0x20000350
 8000984:	20000351 	.word	0x20000351

08000988 <_EPD_Reset>:

uint8_t WS_20_30[159] = { 0x80,0x66,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x10,0x66,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x0,0x80,0x66,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x10,0x66,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x14,0x8,0x0,0x0,0x0,0x0,0x1,0xA,0xA,0x0,0xA,0xA,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x14,0x8,0x0,0x1,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x44,0x44,0x44,0x44,0x44,0x44,0x0,0x0,0x0,0x22,0x17,0x41,0x0,0x32,0x36 };

extern SPI_HandleTypeDef hspi1;

static void _EPD_Reset(void) {
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, GPIO_PIN_SET);
 800098c:	2201      	movs	r2, #1
 800098e:	2102      	movs	r1, #2
 8000990:	480b      	ldr	r0, [pc, #44]	; (80009c0 <_EPD_Reset+0x38>)
 8000992:	f002 ff75 	bl	8003880 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000996:	2064      	movs	r0, #100	; 0x64
 8000998:	f002 f918 	bl	8002bcc <HAL_Delay>
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, GPIO_PIN_RESET);
 800099c:	2200      	movs	r2, #0
 800099e:	2102      	movs	r1, #2
 80009a0:	4807      	ldr	r0, [pc, #28]	; (80009c0 <_EPD_Reset+0x38>)
 80009a2:	f002 ff6d 	bl	8003880 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 80009a6:	2002      	movs	r0, #2
 80009a8:	f002 f910 	bl	8002bcc <HAL_Delay>
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, GPIO_PIN_SET);
 80009ac:	2201      	movs	r2, #1
 80009ae:	2102      	movs	r1, #2
 80009b0:	4803      	ldr	r0, [pc, #12]	; (80009c0 <_EPD_Reset+0x38>)
 80009b2:	f002 ff65 	bl	8003880 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80009b6:	2064      	movs	r0, #100	; 0x64
 80009b8:	f002 f908 	bl	8002bcc <HAL_Delay>
}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40020000 	.word	0x40020000

080009c4 <_EPD_SendCommand>:

static void _EPD_SendCommand(uint8_t reg) {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(EPD_DC_GPIO_Port, EPD_DC_Pin, GPIO_PIN_RESET);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2104      	movs	r1, #4
 80009d2:	480c      	ldr	r0, [pc, #48]	; (8000a04 <_EPD_SendCommand+0x40>)
 80009d4:	f002 ff54 	bl	8003880 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, GPIO_PIN_RESET);
 80009d8:	2200      	movs	r2, #0
 80009da:	2140      	movs	r1, #64	; 0x40
 80009dc:	4809      	ldr	r0, [pc, #36]	; (8000a04 <_EPD_SendCommand+0x40>)
 80009de:	f002 ff4f 	bl	8003880 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg, 1, 1000);
 80009e2:	1df9      	adds	r1, r7, #7
 80009e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009e8:	2201      	movs	r2, #1
 80009ea:	4807      	ldr	r0, [pc, #28]	; (8000a08 <_EPD_SendCommand+0x44>)
 80009ec:	f007 f935 	bl	8007c5a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, GPIO_PIN_SET);
 80009f0:	2201      	movs	r2, #1
 80009f2:	2140      	movs	r1, #64	; 0x40
 80009f4:	4803      	ldr	r0, [pc, #12]	; (8000a04 <_EPD_SendCommand+0x40>)
 80009f6:	f002 ff43 	bl	8003880 <HAL_GPIO_WritePin>
}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40020000 	.word	0x40020000
 8000a08:	20000a5c 	.word	0x20000a5c

08000a0c <_EPD_SendData>:

static void _EPD_SendData(uint8_t data) {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(EPD_DC_GPIO_Port, EPD_DC_Pin, GPIO_PIN_SET);
 8000a16:	2201      	movs	r2, #1
 8000a18:	2104      	movs	r1, #4
 8000a1a:	480c      	ldr	r0, [pc, #48]	; (8000a4c <_EPD_SendData+0x40>)
 8000a1c:	f002 ff30 	bl	8003880 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, GPIO_PIN_RESET);
 8000a20:	2200      	movs	r2, #0
 8000a22:	2140      	movs	r1, #64	; 0x40
 8000a24:	4809      	ldr	r0, [pc, #36]	; (8000a4c <_EPD_SendData+0x40>)
 8000a26:	f002 ff2b 	bl	8003880 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8000a2a:	1df9      	adds	r1, r7, #7
 8000a2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a30:	2201      	movs	r2, #1
 8000a32:	4807      	ldr	r0, [pc, #28]	; (8000a50 <_EPD_SendData+0x44>)
 8000a34:	f007 f911 	bl	8007c5a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, GPIO_PIN_SET);
 8000a38:	2201      	movs	r2, #1
 8000a3a:	2140      	movs	r1, #64	; 0x40
 8000a3c:	4803      	ldr	r0, [pc, #12]	; (8000a4c <_EPD_SendData+0x40>)
 8000a3e:	f002 ff1f 	bl	8003880 <HAL_GPIO_WritePin>
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40020000 	.word	0x40020000
 8000a50:	20000a5c 	.word	0x20000a5c

08000a54 <_EPD_ReadBusy>:

void _EPD_ReadBusy(void) {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
	while(1) {
		if(HAL_GPIO_ReadPin(EPD_BUSY_GPIO_Port, EPD_BUSY_Pin) == GPIO_PIN_RESET)
 8000a58:	2108      	movs	r1, #8
 8000a5a:	4806      	ldr	r0, [pc, #24]	; (8000a74 <_EPD_ReadBusy+0x20>)
 8000a5c:	f002 fef8 	bl	8003850 <HAL_GPIO_ReadPin>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d003      	beq.n	8000a6e <_EPD_ReadBusy+0x1a>
			break;
		HAL_Delay(5);
 8000a66:	2005      	movs	r0, #5
 8000a68:	f002 f8b0 	bl	8002bcc <HAL_Delay>
		if(HAL_GPIO_ReadPin(EPD_BUSY_GPIO_Port, EPD_BUSY_Pin) == GPIO_PIN_RESET)
 8000a6c:	e7f4      	b.n	8000a58 <_EPD_ReadBusy+0x4>
			break;
 8000a6e:	bf00      	nop
	}
}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40020000 	.word	0x40020000

08000a78 <_EPD_LUT>:

static void _EPD_LUT(uint8_t *lut) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
	uint8_t count;
	_EPD_SendCommand(0x32);
 8000a80:	2032      	movs	r0, #50	; 0x32
 8000a82:	f7ff ff9f 	bl	80009c4 <_EPD_SendCommand>
	for(count=0; count<153; count++)
 8000a86:	2300      	movs	r3, #0
 8000a88:	73fb      	strb	r3, [r7, #15]
 8000a8a:	e009      	b.n	8000aa0 <_EPD_LUT+0x28>
		_EPD_SendData(lut[count]);
 8000a8c:	7bfb      	ldrb	r3, [r7, #15]
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	4413      	add	r3, r2
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff ffb9 	bl	8000a0c <_EPD_SendData>
	for(count=0; count<153; count++)
 8000a9a:	7bfb      	ldrb	r3, [r7, #15]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	73fb      	strb	r3, [r7, #15]
 8000aa0:	7bfb      	ldrb	r3, [r7, #15]
 8000aa2:	2b98      	cmp	r3, #152	; 0x98
 8000aa4:	d9f2      	bls.n	8000a8c <_EPD_LUT+0x14>
	_EPD_ReadBusy();
 8000aa6:	f7ff ffd5 	bl	8000a54 <_EPD_ReadBusy>
}
 8000aaa:	bf00      	nop
 8000aac:	3710      	adds	r7, #16
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <_EPD_LUT_by_host>:

static void _EPD_LUT_by_host(uint8_t *lut) {
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b082      	sub	sp, #8
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	6078      	str	r0, [r7, #4]
	_EPD_LUT((uint8_t *)lut);			//lut
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f7ff ffdc 	bl	8000a78 <_EPD_LUT>
	_EPD_SendCommand(0x3f);
 8000ac0:	203f      	movs	r0, #63	; 0x3f
 8000ac2:	f7ff ff7f 	bl	80009c4 <_EPD_SendCommand>
	_EPD_SendData(*(lut+153));
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	3399      	adds	r3, #153	; 0x99
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff ff9d 	bl	8000a0c <_EPD_SendData>
	_EPD_SendCommand(0x03);	// gate voltage
 8000ad2:	2003      	movs	r0, #3
 8000ad4:	f7ff ff76 	bl	80009c4 <_EPD_SendCommand>
	_EPD_SendData(*(lut+154));
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	339a      	adds	r3, #154	; 0x9a
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f7ff ff94 	bl	8000a0c <_EPD_SendData>
	_EPD_SendCommand(0x04);	// source voltage
 8000ae4:	2004      	movs	r0, #4
 8000ae6:	f7ff ff6d 	bl	80009c4 <_EPD_SendCommand>
	_EPD_SendData(*(lut+155));	// VSH
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	339b      	adds	r3, #155	; 0x9b
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff ff8b 	bl	8000a0c <_EPD_SendData>
	_EPD_SendData(*(lut+156));	// VSH2
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	339c      	adds	r3, #156	; 0x9c
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff ff85 	bl	8000a0c <_EPD_SendData>
	_EPD_SendData(*(lut+157));	// VSL
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	339d      	adds	r3, #157	; 0x9d
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff ff7f 	bl	8000a0c <_EPD_SendData>
	_EPD_SendCommand(0x2c);		// VCOM
 8000b0e:	202c      	movs	r0, #44	; 0x2c
 8000b10:	f7ff ff58 	bl	80009c4 <_EPD_SendCommand>
	_EPD_SendData(*(lut+158));
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	339e      	adds	r3, #158	; 0x9e
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f7ff ff76 	bl	8000a0c <_EPD_SendData>
}
 8000b20:	bf00      	nop
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <_EPD_TurnOnDisplay>:

static void _EPD_TurnOnDisplay(void) {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
	_EPD_SendCommand(0x22); //Display Update Control
 8000b2c:	2022      	movs	r0, #34	; 0x22
 8000b2e:	f7ff ff49 	bl	80009c4 <_EPD_SendCommand>
	_EPD_SendData(0xc7);
 8000b32:	20c7      	movs	r0, #199	; 0xc7
 8000b34:	f7ff ff6a 	bl	8000a0c <_EPD_SendData>
	_EPD_SendCommand(0x20); //Activate Display Update Sequence
 8000b38:	2020      	movs	r0, #32
 8000b3a:	f7ff ff43 	bl	80009c4 <_EPD_SendCommand>
	_EPD_ReadBusy();
 8000b3e:	f7ff ff89 	bl	8000a54 <_EPD_ReadBusy>
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <_EPD_SetWindows>:
	_EPD_SendData(0x0F);
	_EPD_SendCommand(0x20); //Activate Display Update Sequence
	_EPD_ReadBusy();
}

static void _EPD_SetWindows(uint16_t Xstart, uint16_t Ystart, uint16_t Xend, uint16_t Yend) {
 8000b46:	b590      	push	{r4, r7, lr}
 8000b48:	b083      	sub	sp, #12
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	4604      	mov	r4, r0
 8000b4e:	4608      	mov	r0, r1
 8000b50:	4611      	mov	r1, r2
 8000b52:	461a      	mov	r2, r3
 8000b54:	4623      	mov	r3, r4
 8000b56:	80fb      	strh	r3, [r7, #6]
 8000b58:	4603      	mov	r3, r0
 8000b5a:	80bb      	strh	r3, [r7, #4]
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	807b      	strh	r3, [r7, #2]
 8000b60:	4613      	mov	r3, r2
 8000b62:	803b      	strh	r3, [r7, #0]
	_EPD_SendCommand(0x44); // SET_RAM_X_ADDRESS_START_END_POSITION
 8000b64:	2044      	movs	r0, #68	; 0x44
 8000b66:	f7ff ff2d 	bl	80009c4 <_EPD_SendCommand>
	_EPD_SendData((Xstart>>3) & 0xFF);
 8000b6a:	88fb      	ldrh	r3, [r7, #6]
 8000b6c:	08db      	lsrs	r3, r3, #3
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	4618      	mov	r0, r3
 8000b74:	f7ff ff4a 	bl	8000a0c <_EPD_SendData>
	_EPD_SendData((Xend>>3) & 0xFF);
 8000b78:	887b      	ldrh	r3, [r7, #2]
 8000b7a:	08db      	lsrs	r3, r3, #3
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff ff43 	bl	8000a0c <_EPD_SendData>

	_EPD_SendCommand(0x45); // SET_RAM_Y_ADDRESS_START_END_POSITION
 8000b86:	2045      	movs	r0, #69	; 0x45
 8000b88:	f7ff ff1c 	bl	80009c4 <_EPD_SendCommand>
	_EPD_SendData(Ystart & 0xFF);
 8000b8c:	88bb      	ldrh	r3, [r7, #4]
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff ff3b 	bl	8000a0c <_EPD_SendData>
	_EPD_SendData((Ystart >> 8) & 0xFF);
 8000b96:	88bb      	ldrh	r3, [r7, #4]
 8000b98:	0a1b      	lsrs	r3, r3, #8
 8000b9a:	b29b      	uxth	r3, r3
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff ff34 	bl	8000a0c <_EPD_SendData>
	_EPD_SendData(Yend & 0xFF);
 8000ba4:	883b      	ldrh	r3, [r7, #0]
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff ff2f 	bl	8000a0c <_EPD_SendData>
	_EPD_SendData((Yend >> 8) & 0xFF);
 8000bae:	883b      	ldrh	r3, [r7, #0]
 8000bb0:	0a1b      	lsrs	r3, r3, #8
 8000bb2:	b29b      	uxth	r3, r3
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff ff28 	bl	8000a0c <_EPD_SendData>
}
 8000bbc:	bf00      	nop
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd90      	pop	{r4, r7, pc}

08000bc4 <_EPD_SetCursor>:

static void _EPD_SetCursor(uint16_t Xstart, uint16_t Ystart) {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	460a      	mov	r2, r1
 8000bce:	80fb      	strh	r3, [r7, #6]
 8000bd0:	4613      	mov	r3, r2
 8000bd2:	80bb      	strh	r3, [r7, #4]
	_EPD_SendCommand(0x4E); // SET_RAM_X_ADDRESS_COUNTER
 8000bd4:	204e      	movs	r0, #78	; 0x4e
 8000bd6:	f7ff fef5 	bl	80009c4 <_EPD_SendCommand>
	_EPD_SendData(Xstart & 0xFF);
 8000bda:	88fb      	ldrh	r3, [r7, #6]
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff ff14 	bl	8000a0c <_EPD_SendData>

	_EPD_SendCommand(0x4F); // SET_RAM_Y_ADDRESS_COUNTER
 8000be4:	204f      	movs	r0, #79	; 0x4f
 8000be6:	f7ff feed 	bl	80009c4 <_EPD_SendCommand>
	_EPD_SendData(Ystart & 0xFF);
 8000bea:	88bb      	ldrh	r3, [r7, #4]
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff ff0c 	bl	8000a0c <_EPD_SendData>
	_EPD_SendData((Ystart >> 8) & 0xFF);
 8000bf4:	88bb      	ldrh	r3, [r7, #4]
 8000bf6:	0a1b      	lsrs	r3, r3, #8
 8000bf8:	b29b      	uxth	r3, r3
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff ff05 	bl	8000a0c <_EPD_SendData>
}
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
	...

08000c0c <EPD_Init>:



void EPD_Init(void) {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EPD_DC_GPIO_Port, EPD_DC_Pin, GPIO_PIN_RESET);
 8000c10:	2200      	movs	r2, #0
 8000c12:	2104      	movs	r1, #4
 8000c14:	4822      	ldr	r0, [pc, #136]	; (8000ca0 <EPD_Init+0x94>)
 8000c16:	f002 fe33 	bl	8003880 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, GPIO_PIN_RESET);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2140      	movs	r1, #64	; 0x40
 8000c1e:	4820      	ldr	r0, [pc, #128]	; (8000ca0 <EPD_Init+0x94>)
 8000c20:	f002 fe2e 	bl	8003880 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, GPIO_PIN_SET);
 8000c24:	2201      	movs	r2, #1
 8000c26:	2102      	movs	r1, #2
 8000c28:	481d      	ldr	r0, [pc, #116]	; (8000ca0 <EPD_Init+0x94>)
 8000c2a:	f002 fe29 	bl	8003880 <HAL_GPIO_WritePin>

	_EPD_Reset();
 8000c2e:	f7ff feab 	bl	8000988 <_EPD_Reset>
	HAL_Delay(100);
 8000c32:	2064      	movs	r0, #100	; 0x64
 8000c34:	f001 ffca 	bl	8002bcc <HAL_Delay>

	_EPD_ReadBusy();
 8000c38:	f7ff ff0c 	bl	8000a54 <_EPD_ReadBusy>
	_EPD_SendCommand(0x12);  //SWRESET
 8000c3c:	2012      	movs	r0, #18
 8000c3e:	f7ff fec1 	bl	80009c4 <_EPD_SendCommand>
	_EPD_ReadBusy();
 8000c42:	f7ff ff07 	bl	8000a54 <_EPD_ReadBusy>

	_EPD_SendCommand(0x01); //Driver output control
 8000c46:	2001      	movs	r0, #1
 8000c48:	f7ff febc 	bl	80009c4 <_EPD_SendCommand>
	_EPD_SendData(0x27);
 8000c4c:	2027      	movs	r0, #39	; 0x27
 8000c4e:	f7ff fedd 	bl	8000a0c <_EPD_SendData>
	_EPD_SendData(0x01);
 8000c52:	2001      	movs	r0, #1
 8000c54:	f7ff feda 	bl	8000a0c <_EPD_SendData>
	_EPD_SendData(0x00);
 8000c58:	2000      	movs	r0, #0
 8000c5a:	f7ff fed7 	bl	8000a0c <_EPD_SendData>

	_EPD_SendCommand(0x11); //data entry mode
 8000c5e:	2011      	movs	r0, #17
 8000c60:	f7ff feb0 	bl	80009c4 <_EPD_SendCommand>
	_EPD_SendData(0x03);
 8000c64:	2003      	movs	r0, #3
 8000c66:	f7ff fed1 	bl	8000a0c <_EPD_SendData>

	_EPD_SetWindows(0, 0, EPD_WIDTH-1, EPD_HEIGHT-1);
 8000c6a:	f240 1327 	movw	r3, #295	; 0x127
 8000c6e:	227f      	movs	r2, #127	; 0x7f
 8000c70:	2100      	movs	r1, #0
 8000c72:	2000      	movs	r0, #0
 8000c74:	f7ff ff67 	bl	8000b46 <_EPD_SetWindows>

	_EPD_SendCommand(0x21); //  Display update control
 8000c78:	2021      	movs	r0, #33	; 0x21
 8000c7a:	f7ff fea3 	bl	80009c4 <_EPD_SendCommand>
	_EPD_SendData(0x00);
 8000c7e:	2000      	movs	r0, #0
 8000c80:	f7ff fec4 	bl	8000a0c <_EPD_SendData>
	_EPD_SendData(0x80);
 8000c84:	2080      	movs	r0, #128	; 0x80
 8000c86:	f7ff fec1 	bl	8000a0c <_EPD_SendData>

	_EPD_SetCursor(0, 0);
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	2000      	movs	r0, #0
 8000c8e:	f7ff ff99 	bl	8000bc4 <_EPD_SetCursor>
	_EPD_ReadBusy();
 8000c92:	f7ff fedf 	bl	8000a54 <_EPD_ReadBusy>

	_EPD_LUT_by_host(WS_20_30);
 8000c96:	4803      	ldr	r0, [pc, #12]	; (8000ca4 <EPD_Init+0x98>)
 8000c98:	f7ff ff0b 	bl	8000ab2 <_EPD_LUT_by_host>
}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40020000 	.word	0x40020000
 8000ca4:	20000000 	.word	0x20000000

08000ca8 <EPD_Clear>:

void EPD_Clear(void) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
	uint16_t i;
	_EPD_SendCommand(0x24);   //write RAM for black(0)/white (1)
 8000cae:	2024      	movs	r0, #36	; 0x24
 8000cb0:	f7ff fe88 	bl	80009c4 <_EPD_SendCommand>
	for(i = 0; i < EPD_BYTES; i++) {
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	80fb      	strh	r3, [r7, #6]
 8000cb8:	e005      	b.n	8000cc6 <EPD_Clear+0x1e>
		_EPD_SendData(0xff);
 8000cba:	20ff      	movs	r0, #255	; 0xff
 8000cbc:	f7ff fea6 	bl	8000a0c <_EPD_SendData>
	for(i = 0; i < EPD_BYTES; i++) {
 8000cc0:	88fb      	ldrh	r3, [r7, #6]
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	80fb      	strh	r3, [r7, #6]
 8000cc6:	88fb      	ldrh	r3, [r7, #6]
 8000cc8:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 8000ccc:	d3f5      	bcc.n	8000cba <EPD_Clear+0x12>
	}
	_EPD_TurnOnDisplay();
 8000cce:	f7ff ff2b 	bl	8000b28 <_EPD_TurnOnDisplay>
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <EPD_Display>:

void EPD_Display(uint8_t *image) {
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b084      	sub	sp, #16
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
	uint16_t i;
	_EPD_SendCommand(0x24);   //write RAM for black(0)/white (1)
 8000ce2:	2024      	movs	r0, #36	; 0x24
 8000ce4:	f7ff fe6e 	bl	80009c4 <_EPD_SendCommand>
	for(i=0; i<EPD_BYTES; i++) {
 8000ce8:	2300      	movs	r3, #0
 8000cea:	81fb      	strh	r3, [r7, #14]
 8000cec:	e009      	b.n	8000d02 <EPD_Display+0x28>
		_EPD_SendData(image[i]);
 8000cee:	89fb      	ldrh	r3, [r7, #14]
 8000cf0:	687a      	ldr	r2, [r7, #4]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff fe88 	bl	8000a0c <_EPD_SendData>
	for(i=0; i<EPD_BYTES; i++) {
 8000cfc:	89fb      	ldrh	r3, [r7, #14]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	81fb      	strh	r3, [r7, #14]
 8000d02:	89fb      	ldrh	r3, [r7, #14]
 8000d04:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 8000d08:	d3f1      	bcc.n	8000cee <EPD_Display+0x14>
	}
	_EPD_TurnOnDisplay();
 8000d0a:	f7ff ff0d 	bl	8000b28 <_EPD_TurnOnDisplay>
}
 8000d0e:	bf00      	nop
 8000d10:	3710      	adds	r7, #16
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <EPD_Sleep>:
		_EPD_SendData(image[i]);
	}
	_EPD_TurnOnDisplay_Partial();
}

void EPD_Sleep(void) {
 8000d16:	b580      	push	{r7, lr}
 8000d18:	af00      	add	r7, sp, #0
	_EPD_SendCommand(0x10); //enter deep sleep
 8000d1a:	2010      	movs	r0, #16
 8000d1c:	f7ff fe52 	bl	80009c4 <_EPD_SendCommand>
	_EPD_SendData(0x01);
 8000d20:	2001      	movs	r0, #1
 8000d22:	f7ff fe73 	bl	8000a0c <_EPD_SendData>
	HAL_Delay(100);
 8000d26:	2064      	movs	r0, #100	; 0x64
 8000d28:	f001 ff50 	bl	8002bcc <HAL_Delay>
}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <Conv_ADC>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Conv_ADC(uint8_t *buf, int32_t *result) {
	*result = 0xFF000000 * ((buf[1] >> 7) & 1) + (buf[1] << 16) + (buf[0] << 8) + buf[3];
 8000d30:	7843      	ldrb	r3, [r0, #1]
 8000d32:	09da      	lsrs	r2, r3, #7
 8000d34:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 8000d38:	041b      	lsls	r3, r3, #16
 8000d3a:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 8000d3e:	78c2      	ldrb	r2, [r0, #3]
 8000d40:	4413      	add	r3, r2
 8000d42:	7802      	ldrb	r2, [r0, #0]
 8000d44:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8000d48:	600b      	str	r3, [r1, #0]
}
 8000d4a:	4770      	bx	lr

08000d4c <HAL_I2S_RxHalfCpltCallback>:

uint32_t rxHalfCpltCounter = 0;
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000d4c:	b538      	push	{r3, r4, r5, lr}
	if (hi2s->Instance == SPI2)
 8000d4e:	6802      	ldr	r2, [r0, #0]
 8000d50:	4b16      	ldr	r3, [pc, #88]	; (8000dac <HAL_I2S_RxHalfCpltCallback+0x60>)
 8000d52:	429a      	cmp	r2, r3
 8000d54:	d000      	beq.n	8000d58 <HAL_I2S_RxHalfCpltCallback+0xc>
		if (display_counter < 296) {
			display_array[display_counter] = BUFF_CONV[0];
			display_counter++;
		}
	}
}
 8000d56:	bd38      	pop	{r3, r4, r5, pc}
		Conv_ADC(&ADC_BUFF.ADC8[0], &BUFF_CONV[0]); // LEFT
 8000d58:	4c15      	ldr	r4, [pc, #84]	; (8000db0 <HAL_I2S_RxHalfCpltCallback+0x64>)
 8000d5a:	4d16      	ldr	r5, [pc, #88]	; (8000db4 <HAL_I2S_RxHalfCpltCallback+0x68>)
 8000d5c:	4621      	mov	r1, r4
 8000d5e:	4628      	mov	r0, r5
 8000d60:	f7ff ffe6 	bl	8000d30 <Conv_ADC>
		Conv_ADC(&ADC_BUFF.ADC8[4], &BUFF_CONV[1]); // RIGHT
 8000d64:	1d21      	adds	r1, r4, #4
 8000d66:	1d28      	adds	r0, r5, #4
 8000d68:	f7ff ffe2 	bl	8000d30 <Conv_ADC>
		RAW_SAMPLES[0] = (float)BUFF_CONV[0];
 8000d6c:	edd4 7a00 	vldr	s15, [r4]
 8000d70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d74:	4b10      	ldr	r3, [pc, #64]	; (8000db8 <HAL_I2S_RxHalfCpltCallback+0x6c>)
 8000d76:	edc3 7a00 	vstr	s15, [r3]
		RAW_SAMPLES[1] = (float)BUFF_CONV[1];
 8000d7a:	ed94 7a01 	vldr	s14, [r4, #4]
 8000d7e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000d82:	ed83 7a01 	vstr	s14, [r3, #4]
		rxHalfCpltCounter++;
 8000d86:	4a0d      	ldr	r2, [pc, #52]	; (8000dbc <HAL_I2S_RxHalfCpltCallback+0x70>)
 8000d88:	6813      	ldr	r3, [r2, #0]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	6013      	str	r3, [r2, #0]
		if (display_counter < 296) {
 8000d8e:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <HAL_I2S_RxHalfCpltCallback+0x74>)
 8000d90:	881b      	ldrh	r3, [r3, #0]
 8000d92:	f5b3 7f94 	cmp.w	r3, #296	; 0x128
 8000d96:	d2de      	bcs.n	8000d56 <HAL_I2S_RxHalfCpltCallback+0xa>
			display_array[display_counter] = BUFF_CONV[0];
 8000d98:	4a0a      	ldr	r2, [pc, #40]	; (8000dc4 <HAL_I2S_RxHalfCpltCallback+0x78>)
 8000d9a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8000d9e:	edc2 7a00 	vstr	s15, [r2]
			display_counter++;
 8000da2:	3301      	adds	r3, #1
 8000da4:	4a06      	ldr	r2, [pc, #24]	; (8000dc0 <HAL_I2S_RxHalfCpltCallback+0x74>)
 8000da6:	8013      	strh	r3, [r2, #0]
}
 8000da8:	e7d5      	b.n	8000d56 <HAL_I2S_RxHalfCpltCallback+0xa>
 8000daa:	bf00      	nop
 8000dac:	40003800 	.word	0x40003800
 8000db0:	200003c8 	.word	0x200003c8
 8000db4:	200003a8 	.word	0x200003a8
 8000db8:	20000400 	.word	0x20000400
 8000dbc:	2000237c 	.word	0x2000237c
 8000dc0:	200008a8 	.word	0x200008a8
 8000dc4:	20000408 	.word	0x20000408

08000dc8 <HAL_I2S_RxCpltCallback>:

uint32_t rxCpltCounter = 0;
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000dc8:	b538      	push	{r3, r4, r5, lr}
	if (hi2s->Instance == SPI2)
 8000dca:	6802      	ldr	r2, [r0, #0]
 8000dcc:	4b18      	ldr	r3, [pc, #96]	; (8000e30 <HAL_I2S_RxCpltCallback+0x68>)
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d000      	beq.n	8000dd4 <HAL_I2S_RxCpltCallback+0xc>
		if (display_counter < 296) {
			display_array[display_counter] = BUFF_CONV[2];
			display_counter++;
		}
	}
}
 8000dd2:	bd38      	pop	{r3, r4, r5, pc}
		Conv_ADC(&ADC_BUFF.ADC8[8], &BUFF_CONV[2]); // LEFT
 8000dd4:	4c17      	ldr	r4, [pc, #92]	; (8000e34 <HAL_I2S_RxCpltCallback+0x6c>)
 8000dd6:	4d18      	ldr	r5, [pc, #96]	; (8000e38 <HAL_I2S_RxCpltCallback+0x70>)
 8000dd8:	f104 0108 	add.w	r1, r4, #8
 8000ddc:	f105 0008 	add.w	r0, r5, #8
 8000de0:	f7ff ffa6 	bl	8000d30 <Conv_ADC>
		Conv_ADC(&ADC_BUFF.ADC8[12], &BUFF_CONV[3]); // RIGHT
 8000de4:	f104 010c 	add.w	r1, r4, #12
 8000de8:	f105 000c 	add.w	r0, r5, #12
 8000dec:	f7ff ffa0 	bl	8000d30 <Conv_ADC>
		RAW_SAMPLES[0] = (float)BUFF_CONV[2];
 8000df0:	edd4 7a02 	vldr	s15, [r4, #8]
 8000df4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000df8:	4b10      	ldr	r3, [pc, #64]	; (8000e3c <HAL_I2S_RxCpltCallback+0x74>)
 8000dfa:	edc3 7a00 	vstr	s15, [r3]
		RAW_SAMPLES[1] = (float)BUFF_CONV[3];
 8000dfe:	ed94 7a03 	vldr	s14, [r4, #12]
 8000e02:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000e06:	ed83 7a01 	vstr	s14, [r3, #4]
		rxCpltCounter++;
 8000e0a:	4a0d      	ldr	r2, [pc, #52]	; (8000e40 <HAL_I2S_RxCpltCallback+0x78>)
 8000e0c:	6813      	ldr	r3, [r2, #0]
 8000e0e:	3301      	adds	r3, #1
 8000e10:	6013      	str	r3, [r2, #0]
		if (display_counter < 296) {
 8000e12:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <HAL_I2S_RxCpltCallback+0x7c>)
 8000e14:	881b      	ldrh	r3, [r3, #0]
 8000e16:	f5b3 7f94 	cmp.w	r3, #296	; 0x128
 8000e1a:	d2da      	bcs.n	8000dd2 <HAL_I2S_RxCpltCallback+0xa>
			display_array[display_counter] = BUFF_CONV[2];
 8000e1c:	4a0a      	ldr	r2, [pc, #40]	; (8000e48 <HAL_I2S_RxCpltCallback+0x80>)
 8000e1e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8000e22:	edc2 7a00 	vstr	s15, [r2]
			display_counter++;
 8000e26:	3301      	adds	r3, #1
 8000e28:	4a06      	ldr	r2, [pc, #24]	; (8000e44 <HAL_I2S_RxCpltCallback+0x7c>)
 8000e2a:	8013      	strh	r3, [r2, #0]
}
 8000e2c:	e7d1      	b.n	8000dd2 <HAL_I2S_RxCpltCallback+0xa>
 8000e2e:	bf00      	nop
 8000e30:	40003800 	.word	0x40003800
 8000e34:	200003c8 	.word	0x200003c8
 8000e38:	200003a8 	.word	0x200003a8
 8000e3c:	20000400 	.word	0x20000400
 8000e40:	20002378 	.word	0x20002378
 8000e44:	200008a8 	.word	0x200008a8
 8000e48:	20000408 	.word	0x20000408

08000e4c <HAL_I2S_TxHalfCpltCallback>:

uint32_t txHalfCpltCounter = 0;
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
	if (hi2s->Instance == SPI3)
 8000e4c:	6802      	ldr	r2, [r0, #0]
 8000e4e:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <HAL_I2S_TxHalfCpltCallback+0x4c>)
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d000      	beq.n	8000e56 <HAL_I2S_TxHalfCpltCallback+0xa>
 8000e54:	4770      	bx	lr
{
 8000e56:	b510      	push	{r4, lr}
 8000e58:	4604      	mov	r4, r0
	{
		PROC_SAMPLES[0] = pedalboard_process(&pedalboard, (float)RAW_SAMPLES[0]);
 8000e5a:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <HAL_I2S_TxHalfCpltCallback+0x50>)
 8000e5c:	edd3 7a00 	vldr	s15, [r3]
 8000e60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e64:	ee17 3a90 	vmov	r3, s15
 8000e68:	b219      	sxth	r1, r3
 8000e6a:	480d      	ldr	r0, [pc, #52]	; (8000ea0 <HAL_I2S_TxHalfCpltCallback+0x54>)
 8000e6c:	f001 fb32 	bl	80024d4 <pedalboard_process>
 8000e70:	ee07 0a90 	vmov	s15, r0
 8000e74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e78:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <HAL_I2S_TxHalfCpltCallback+0x58>)
 8000e7a:	edc3 7a00 	vstr	s15, [r3]
		PROC_SAMPLES[0] /= 1.0F;
		PROC_SAMPLES[1] = PROC_SAMPLES[0];
 8000e7e:	edc3 7a01 	vstr	s15, [r3, #4]
		//PROC_SAMPLES[0] = RAW_SAMPLES[0] * 1;
		//PROC_SAMPLES[0] = wave_gen('s', txHalfCpltCounter, 440.0F) * 10000;
		DAC_BUFF.DAC16[__HAL_DMA_GET_COUNTER(hi2s->hdmatx)] = (int16_t)PROC_SAMPLES[0];
 8000e82:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	685a      	ldr	r2, [r3, #4]
 8000e88:	4b07      	ldr	r3, [pc, #28]	; (8000ea8 <HAL_I2S_TxHalfCpltCallback+0x5c>)
 8000e8a:	f823 0012 	strh.w	r0, [r3, r2, lsl #1]
		txHalfCpltCounter++;
 8000e8e:	4a07      	ldr	r2, [pc, #28]	; (8000eac <HAL_I2S_TxHalfCpltCallback+0x60>)
 8000e90:	6813      	ldr	r3, [r2, #0]
 8000e92:	3301      	adds	r3, #1
 8000e94:	6013      	str	r3, [r2, #0]
	}
}
 8000e96:	bd10      	pop	{r4, pc}
 8000e98:	40003c00 	.word	0x40003c00
 8000e9c:	20000400 	.word	0x20000400
 8000ea0:	20001d34 	.word	0x20001d34
 8000ea4:	200003f8 	.word	0x200003f8
 8000ea8:	200003d8 	.word	0x200003d8
 8000eac:	20002384 	.word	0x20002384

08000eb0 <HAL_I2S_TxCpltCallback>:

uint32_t txCpltCounter = 0;
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
	if (hi2s->Instance == SPI3)
 8000eb0:	6802      	ldr	r2, [r0, #0]
 8000eb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <HAL_I2S_TxCpltCallback+0x30>)
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d000      	beq.n	8000eba <HAL_I2S_TxCpltCallback+0xa>
	{
		//PROC_SAMPLES[1] = wave_gen('s', txCpltCounter, 440.0F) * 10000;
		DAC_BUFF.DAC16[__HAL_DMA_GET_COUNTER(hi2s->hdmatx)] = (int16_t)PROC_SAMPLES[1];
		txCpltCounter++;
	}
}
 8000eb8:	4770      	bx	lr
		DAC_BUFF.DAC16[__HAL_DMA_GET_COUNTER(hi2s->hdmatx)] = (int16_t)PROC_SAMPLES[1];
 8000eba:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	685a      	ldr	r2, [r3, #4]
 8000ec0:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <HAL_I2S_TxCpltCallback+0x34>)
 8000ec2:	edd3 7a01 	vldr	s15, [r3, #4]
 8000ec6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000eca:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <HAL_I2S_TxCpltCallback+0x38>)
 8000ecc:	ee17 1a90 	vmov	r1, s15
 8000ed0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		txCpltCounter++;
 8000ed4:	4a05      	ldr	r2, [pc, #20]	; (8000eec <HAL_I2S_TxCpltCallback+0x3c>)
 8000ed6:	6813      	ldr	r3, [r2, #0]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	6013      	str	r3, [r2, #0]
}
 8000edc:	e7ec      	b.n	8000eb8 <HAL_I2S_TxCpltCallback+0x8>
 8000ede:	bf00      	nop
 8000ee0:	40003c00 	.word	0x40003c00
 8000ee4:	200003f8 	.word	0x200003f8
 8000ee8:	200003d8 	.word	0x200003d8
 8000eec:	20002380 	.word	0x20002380

08000ef0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ef0:	b500      	push	{lr}
 8000ef2:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ef4:	2230      	movs	r2, #48	; 0x30
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	a808      	add	r0, sp, #32
 8000efa:	f00b fc4f 	bl	800c79c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000efe:	2300      	movs	r3, #0
 8000f00:	9303      	str	r3, [sp, #12]
 8000f02:	9304      	str	r3, [sp, #16]
 8000f04:	9305      	str	r3, [sp, #20]
 8000f06:	9306      	str	r3, [sp, #24]
 8000f08:	9307      	str	r3, [sp, #28]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f0a:	9301      	str	r3, [sp, #4]
 8000f0c:	4a21      	ldr	r2, [pc, #132]	; (8000f94 <SystemClock_Config+0xa4>)
 8000f0e:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000f10:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000f14:	6411      	str	r1, [r2, #64]	; 0x40
 8000f16:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000f18:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000f1c:	9201      	str	r2, [sp, #4]
 8000f1e:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f20:	9302      	str	r3, [sp, #8]
 8000f22:	4b1d      	ldr	r3, [pc, #116]	; (8000f98 <SystemClock_Config+0xa8>)
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f32:	9302      	str	r3, [sp, #8]
 8000f34:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f36:	2301      	movs	r3, #1
 8000f38:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f3e:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f40:	2302      	movs	r3, #2
 8000f42:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f44:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000f48:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f4a:	2208      	movs	r2, #8
 8000f4c:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f4e:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8000f52:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f54:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f56:	2307      	movs	r3, #7
 8000f58:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f5a:	a808      	add	r0, sp, #32
 8000f5c:	f006 f830 	bl	8006fc0 <HAL_RCC_OscConfig>
 8000f60:	b998      	cbnz	r0, 8000f8a <SystemClock_Config+0x9a>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f62:	230f      	movs	r3, #15
 8000f64:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f66:	2302      	movs	r3, #2
 8000f68:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000f6e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f72:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f78:	9307      	str	r3, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f7a:	2105      	movs	r1, #5
 8000f7c:	a803      	add	r0, sp, #12
 8000f7e:	f006 fa97 	bl	80074b0 <HAL_RCC_ClockConfig>
 8000f82:	b920      	cbnz	r0, 8000f8e <SystemClock_Config+0x9e>
  {
    Error_Handler();
  }
}
 8000f84:	b015      	add	sp, #84	; 0x54
 8000f86:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f8a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000f8c:	e7fe      	b.n	8000f8c <SystemClock_Config+0x9c>
 8000f8e:	b672      	cpsid	i
 8000f90:	e7fe      	b.n	8000f90 <SystemClock_Config+0xa0>
 8000f92:	bf00      	nop
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40007000 	.word	0x40007000

08000f9c <PeriphCommonClock_Config>:
{
 8000f9c:	b500      	push	{lr}
 8000f9e:	b085      	sub	sp, #20
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	9303      	str	r3, [sp, #12]
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	9300      	str	r3, [sp, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 181;
 8000fa8:	23b5      	movs	r3, #181	; 0xb5
 8000faa:	9301      	str	r3, [sp, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000fac:	2302      	movs	r3, #2
 8000fae:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fb0:	4668      	mov	r0, sp
 8000fb2:	f006 fc89 	bl	80078c8 <HAL_RCCEx_PeriphCLKConfig>
 8000fb6:	b910      	cbnz	r0, 8000fbe <PeriphCommonClock_Config+0x22>
}
 8000fb8:	b005      	add	sp, #20
 8000fba:	f85d fb04 	ldr.w	pc, [sp], #4
 8000fbe:	b672      	cpsid	i
	while (1)
 8000fc0:	e7fe      	b.n	8000fc0 <PeriphCommonClock_Config+0x24>
	...

08000fc4 <main>:
{
 8000fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fc8:	ed2d 8b04 	vpush	{d8-d9}
 8000fcc:	b0a5      	sub	sp, #148	; 0x94
  HAL_Init();
 8000fce:	f001 fd8b 	bl	8002ae8 <HAL_Init>
  SystemClock_Config();
 8000fd2:	f7ff ff8d 	bl	8000ef0 <SystemClock_Config>
  PeriphCommonClock_Config();
 8000fd6:	f7ff ffe1 	bl	8000f9c <PeriphCommonClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fda:	2400      	movs	r4, #0
 8000fdc:	941a      	str	r4, [sp, #104]	; 0x68
 8000fde:	941b      	str	r4, [sp, #108]	; 0x6c
 8000fe0:	941c      	str	r4, [sp, #112]	; 0x70
 8000fe2:	941d      	str	r4, [sp, #116]	; 0x74
 8000fe4:	941e      	str	r4, [sp, #120]	; 0x78
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fe6:	9415      	str	r4, [sp, #84]	; 0x54
 8000fe8:	4db5      	ldr	r5, [pc, #724]	; (80012c0 <main+0x2fc>)
 8000fea:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000fec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ff0:	632b      	str	r3, [r5, #48]	; 0x30
 8000ff2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000ff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ff8:	9315      	str	r3, [sp, #84]	; 0x54
 8000ffa:	9b15      	ldr	r3, [sp, #84]	; 0x54
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ffc:	9416      	str	r4, [sp, #88]	; 0x58
 8000ffe:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001000:	f043 0304 	orr.w	r3, r3, #4
 8001004:	632b      	str	r3, [r5, #48]	; 0x30
 8001006:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001008:	f003 0304 	and.w	r3, r3, #4
 800100c:	9316      	str	r3, [sp, #88]	; 0x58
 800100e:	9b16      	ldr	r3, [sp, #88]	; 0x58
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001010:	9417      	str	r4, [sp, #92]	; 0x5c
 8001012:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	632b      	str	r3, [r5, #48]	; 0x30
 800101a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800101c:	f003 0301 	and.w	r3, r3, #1
 8001020:	9317      	str	r3, [sp, #92]	; 0x5c
 8001022:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001024:	9418      	str	r4, [sp, #96]	; 0x60
 8001026:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001028:	f043 0302 	orr.w	r3, r3, #2
 800102c:	632b      	str	r3, [r5, #48]	; 0x30
 800102e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001030:	f003 0302 	and.w	r3, r3, #2
 8001034:	9318      	str	r3, [sp, #96]	; 0x60
 8001036:	9b18      	ldr	r3, [sp, #96]	; 0x60
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001038:	9419      	str	r4, [sp, #100]	; 0x64
 800103a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800103c:	f043 0308 	orr.w	r3, r3, #8
 8001040:	632b      	str	r3, [r5, #48]	; 0x30
 8001042:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001044:	f003 0308 	and.w	r3, r3, #8
 8001048:	9319      	str	r3, [sp, #100]	; 0x64
 800104a:	9b19      	ldr	r3, [sp, #100]	; 0x64
  HAL_GPIO_WritePin(OtgPower_GPIO_Port, OtgPower_Pin, GPIO_PIN_RESET);
 800104c:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 8001310 <main+0x34c>
 8001050:	4622      	mov	r2, r4
 8001052:	2101      	movs	r1, #1
 8001054:	4648      	mov	r0, r9
 8001056:	f002 fc13 	bl	8003880 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, EPD_RST_Pin|EPD_DC_Pin|EPD_CS_Pin, GPIO_PIN_RESET);
 800105a:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 8001314 <main+0x350>
 800105e:	4622      	mov	r2, r4
 8001060:	2146      	movs	r1, #70	; 0x46
 8001062:	4640      	mov	r0, r8
 8001064:	f002 fc0c 	bl	8003880 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, Led1_Pin|Led2_Pin|Led3_Pin|Led4_Pin, GPIO_PIN_RESET);
 8001068:	4f96      	ldr	r7, [pc, #600]	; (80012c4 <main+0x300>)
 800106a:	4622      	mov	r2, r4
 800106c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001070:	4638      	mov	r0, r7
 8001072:	f002 fc05 	bl	8003880 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(AudioPower_GPIO_Port, AudioPower_Pin, GPIO_PIN_SET);
 8001076:	2201      	movs	r2, #1
 8001078:	2110      	movs	r1, #16
 800107a:	4638      	mov	r0, r7
 800107c:	f002 fc00 	bl	8003880 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = OtgPower_Pin;
 8001080:	2601      	movs	r6, #1
 8001082:	961a      	str	r6, [sp, #104]	; 0x68
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001084:	961b      	str	r6, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001088:	941d      	str	r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(OtgPower_GPIO_Port, &GPIO_InitStruct);
 800108a:	a91a      	add	r1, sp, #104	; 0x68
 800108c:	4648      	mov	r0, r9
 800108e:	f002 fa43 	bl	8003518 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = EncB_Pin|EncA_Pin;
 8001092:	230c      	movs	r3, #12
 8001094:	931a      	str	r3, [sp, #104]	; 0x68
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001096:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	941c      	str	r4, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800109a:	a91a      	add	r1, sp, #104	; 0x68
 800109c:	4648      	mov	r0, r9
 800109e:	f002 fa3b 	bl	8003518 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Btn0_Pin|EPD_BUSY_Pin;
 80010a2:	2309      	movs	r3, #9
 80010a4:	931a      	str	r3, [sp, #104]	; 0x68
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010a6:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	941c      	str	r4, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010aa:	a91a      	add	r1, sp, #104	; 0x68
 80010ac:	4640      	mov	r0, r8
 80010ae:	f002 fa33 	bl	8003518 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = EPD_RST_Pin|EPD_DC_Pin|EPD_CS_Pin;
 80010b2:	2346      	movs	r3, #70	; 0x46
 80010b4:	931a      	str	r3, [sp, #104]	; 0x68
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b6:	961b      	str	r6, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ba:	941d      	str	r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010bc:	a91a      	add	r1, sp, #104	; 0x68
 80010be:	4640      	mov	r0, r8
 80010c0:	f002 fa2a 	bl	8003518 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Btn3_Pin|Btn2_Pin;
 80010c4:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 80010c8:	931a      	str	r3, [sp, #104]	; 0x68
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ca:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010cc:	961c      	str	r6, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ce:	a91a      	add	r1, sp, #104	; 0x68
 80010d0:	487d      	ldr	r0, [pc, #500]	; (80012c8 <main+0x304>)
 80010d2:	f002 fa21 	bl	8003518 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Btn1_Pin;
 80010d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010da:	931a      	str	r3, [sp, #104]	; 0x68
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010dc:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010de:	961c      	str	r6, [sp, #112]	; 0x70
  HAL_GPIO_Init(Btn1_GPIO_Port, &GPIO_InitStruct);
 80010e0:	a91a      	add	r1, sp, #104	; 0x68
 80010e2:	4638      	mov	r0, r7
 80010e4:	f002 fa18 	bl	8003518 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Led1_Pin|Led2_Pin|Led3_Pin|Led4_Pin
 80010e8:	f24f 0310 	movw	r3, #61456	; 0xf010
 80010ec:	931a      	str	r3, [sp, #104]	; 0x68
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ee:	961b      	str	r6, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f2:	941d      	str	r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010f4:	a91a      	add	r1, sp, #104	; 0x68
 80010f6:	4638      	mov	r0, r7
 80010f8:	f002 fa0e 	bl	8003518 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010fc:	941a      	str	r4, [sp, #104]	; 0x68
 80010fe:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001100:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001104:	632b      	str	r3, [r5, #48]	; 0x30
 8001106:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001108:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800110c:	931a      	str	r3, [sp, #104]	; 0x68
 800110e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001110:	4622      	mov	r2, r4
 8001112:	4621      	mov	r1, r4
 8001114:	200e      	movs	r0, #14
 8001116:	f001 fe58 	bl	8002dca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800111a:	200e      	movs	r0, #14
 800111c:	f001 fe71 	bl	8002e02 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001120:	4622      	mov	r2, r4
 8001122:	4621      	mov	r1, r4
 8001124:	2010      	movs	r0, #16
 8001126:	f001 fe50 	bl	8002dca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800112a:	2010      	movs	r0, #16
 800112c:	f001 fe69 	bl	8002e02 <HAL_NVIC_EnableIRQ>
  hi2c1.Instance = I2C1;
 8001130:	4866      	ldr	r0, [pc, #408]	; (80012cc <main+0x308>)
 8001132:	4b67      	ldr	r3, [pc, #412]	; (80012d0 <main+0x30c>)
 8001134:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001136:	4b67      	ldr	r3, [pc, #412]	; (80012d4 <main+0x310>)
 8001138:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800113a:	6084      	str	r4, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800113c:	60c4      	str	r4, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800113e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001142:	6103      	str	r3, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001144:	6144      	str	r4, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001146:	6184      	str	r4, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001148:	61c4      	str	r4, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800114a:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800114c:	f004 f922 	bl	8005394 <HAL_I2C_Init>
 8001150:	2800      	cmp	r0, #0
 8001152:	f040 80e8 	bne.w	8001326 <main+0x362>
  hi2s2.Instance = SPI2;
 8001156:	4860      	ldr	r0, [pc, #384]	; (80012d8 <main+0x314>)
 8001158:	4b60      	ldr	r3, [pc, #384]	; (80012dc <main+0x318>)
 800115a:	6003      	str	r3, [r0, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 800115c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001160:	6043      	str	r3, [r0, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001162:	2300      	movs	r3, #0
 8001164:	6083      	str	r3, [r0, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8001166:	2203      	movs	r2, #3
 8001168:	60c2      	str	r2, [r0, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800116a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800116e:	6102      	str	r2, [r0, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8001170:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001174:	6142      	str	r2, [r0, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001176:	6183      	str	r3, [r0, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001178:	61c3      	str	r3, [r0, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800117a:	6203      	str	r3, [r0, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800117c:	f005 f8a0 	bl	80062c0 <HAL_I2S_Init>
 8001180:	2800      	cmp	r0, #0
 8001182:	f040 80d2 	bne.w	800132a <main+0x366>
  hi2s3.Instance = SPI3;
 8001186:	4856      	ldr	r0, [pc, #344]	; (80012e0 <main+0x31c>)
 8001188:	4b56      	ldr	r3, [pc, #344]	; (80012e4 <main+0x320>)
 800118a:	6003      	str	r3, [r0, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800118c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001190:	6042      	str	r2, [r0, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001192:	2300      	movs	r3, #0
 8001194:	6083      	str	r3, [r0, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001196:	60c3      	str	r3, [r0, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001198:	6102      	str	r2, [r0, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 800119a:	f64a 4244 	movw	r2, #44100	; 0xac44
 800119e:	6142      	str	r2, [r0, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80011a0:	6183      	str	r3, [r0, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80011a2:	61c3      	str	r3, [r0, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80011a4:	6203      	str	r3, [r0, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80011a6:	f005 f88b 	bl	80062c0 <HAL_I2S_Init>
 80011aa:	2800      	cmp	r0, #0
 80011ac:	f040 80bf 	bne.w	800132e <main+0x36a>
  MX_USB_HOST_Init();
 80011b0:	f00a ff74 	bl	800c09c <MX_USB_HOST_Init>
  MX_FATFS_Init();
 80011b4:	f007 ff10 	bl	8008fd8 <MX_FATFS_Init>
  hspi1.Instance = SPI1;
 80011b8:	484b      	ldr	r0, [pc, #300]	; (80012e8 <main+0x324>)
 80011ba:	4b4c      	ldr	r3, [pc, #304]	; (80012ec <main+0x328>)
 80011bc:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011be:	f44f 7382 	mov.w	r3, #260	; 0x104
 80011c2:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80011c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011c8:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011ca:	2300      	movs	r3, #0
 80011cc:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011ce:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011d0:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011d6:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80011d8:	2228      	movs	r2, #40	; 0x28
 80011da:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011dc:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011de:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011e0:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011e2:	230a      	movs	r3, #10
 80011e4:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011e6:	f006 fcaf 	bl	8007b48 <HAL_SPI_Init>
 80011ea:	2800      	cmp	r0, #0
 80011ec:	f040 80a1 	bne.w	8001332 <main+0x36e>
	HAL_GPIO_WritePin(Led2_GPIO_Port, Led2_Pin, GPIO_PIN_SET);
 80011f0:	4f34      	ldr	r7, [pc, #208]	; (80012c4 <main+0x300>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011f8:	4638      	mov	r0, r7
 80011fa:	f002 fb41 	bl	8003880 <HAL_GPIO_WritePin>
	pedalboard.active_pedals = 0;
 80011fe:	483c      	ldr	r0, [pc, #240]	; (80012f0 <main+0x32c>)
 8001200:	2400      	movs	r4, #0
 8001202:	7004      	strb	r4, [r0, #0]
	pedalboard_append(&pedalboard, LPF);
 8001204:	2105      	movs	r1, #5
 8001206:	f001 f863 	bl	80022d0 <pedalboard_append>
	CS43_Init(hi2c1, MODE_I2S);
 800120a:	4d30      	ldr	r5, [pc, #192]	; (80012cc <main+0x308>)
 800120c:	9411      	str	r4, [sp, #68]	; 0x44
 800120e:	2244      	movs	r2, #68	; 0x44
 8001210:	f105 0110 	add.w	r1, r5, #16
 8001214:	4668      	mov	r0, sp
 8001216:	f00b fab3 	bl	800c780 <memcpy>
 800121a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800121e:	f7ff f9e9 	bl	80005f4 <CS43_Init>
	CS43_SetVolume(255);
 8001222:	20ff      	movs	r0, #255	; 0xff
 8001224:	f7ff fb56 	bl	80008d4 <CS43_SetVolume>
	CS43_Enable_RightLeft(CS43_RIGHT_LEFT);
 8001228:	2003      	movs	r0, #3
 800122a:	f7ff faf7 	bl	800081c <CS43_Enable_RightLeft>
	CS43_Start();
 800122e:	f7ff fb69 	bl	8000904 <CS43_Start>
	HAL_I2S_Receive_DMA(&hi2s2, &ADC_BUFF.ADC16[0], 4);
 8001232:	2204      	movs	r2, #4
 8001234:	492f      	ldr	r1, [pc, #188]	; (80012f4 <main+0x330>)
 8001236:	4828      	ldr	r0, [pc, #160]	; (80012d8 <main+0x314>)
 8001238:	f005 fa2a 	bl	8006690 <HAL_I2S_Receive_DMA>
	HAL_I2S_Transmit_DMA(&hi2s3, &DAC_BUFF.DAC16[0], 8);
 800123c:	2208      	movs	r2, #8
 800123e:	492e      	ldr	r1, [pc, #184]	; (80012f8 <main+0x334>)
 8001240:	4827      	ldr	r0, [pc, #156]	; (80012e0 <main+0x31c>)
 8001242:	f005 f97d 	bl	8006540 <HAL_I2S_Transmit_DMA>
	EPD_Init();
 8001246:	f7ff fce1 	bl	8000c0c <EPD_Init>
	EPD_Clear();
 800124a:	f7ff fd2d 	bl	8000ca8 <EPD_Clear>
	draw_clean(image);
 800124e:	4e2b      	ldr	r6, [pc, #172]	; (80012fc <main+0x338>)
 8001250:	4630      	mov	r0, r6
 8001252:	f000 fb11 	bl	8001878 <draw_clean>
	draw_rectangle(image, 36, 56, 88, 20);
 8001256:	f04f 0814 	mov.w	r8, #20
 800125a:	f8cd 8000 	str.w	r8, [sp]
 800125e:	2358      	movs	r3, #88	; 0x58
 8001260:	2238      	movs	r2, #56	; 0x38
 8001262:	2124      	movs	r1, #36	; 0x24
 8001264:	4630      	mov	r0, r6
 8001266:	f000 fa16 	bl	8001696 <draw_rectangle>
	sprintf(row, "g33ky toad");
 800126a:	4a25      	ldr	r2, [pc, #148]	; (8001300 <main+0x33c>)
 800126c:	ab1f      	add	r3, sp, #124	; 0x7c
 800126e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001270:	c303      	stmia	r3!, {r0, r1}
 8001272:	f823 2b02 	strh.w	r2, [r3], #2
 8001276:	0c12      	lsrs	r2, r2, #16
 8001278:	701a      	strb	r2, [r3, #0]
	draw_text(image, row, 40, 60);
 800127a:	233c      	movs	r3, #60	; 0x3c
 800127c:	2228      	movs	r2, #40	; 0x28
 800127e:	a91f      	add	r1, sp, #124	; 0x7c
 8001280:	4630      	mov	r0, r6
 8001282:	f000 faca 	bl	800181a <draw_text>
	sprintf(row, "digital pedal");
 8001286:	4b1f      	ldr	r3, [pc, #124]	; (8001304 <main+0x340>)
 8001288:	ad1f      	add	r5, sp, #124	; 0x7c
 800128a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800128c:	c507      	stmia	r5!, {r0, r1, r2}
 800128e:	802b      	strh	r3, [r5, #0]
	draw_text(image, row, 20, 90);
 8001290:	235a      	movs	r3, #90	; 0x5a
 8001292:	4642      	mov	r2, r8
 8001294:	a91f      	add	r1, sp, #124	; 0x7c
 8001296:	4630      	mov	r0, r6
 8001298:	f000 fabf 	bl	800181a <draw_text>
	EPD_Display(image);
 800129c:	4630      	mov	r0, r6
 800129e:	f7ff fd1c 	bl	8000cda <EPD_Display>
	EPD_Sleep();
 80012a2:	f7ff fd38 	bl	8000d16 <EPD_Sleep>
	encoderA.current = 0;
 80012a6:	4b18      	ldr	r3, [pc, #96]	; (8001308 <main+0x344>)
 80012a8:	805c      	strh	r4, [r3, #2]
	encoderB.current = 0;
 80012aa:	4b18      	ldr	r3, [pc, #96]	; (800130c <main+0x348>)
 80012ac:	805c      	strh	r4, [r3, #2]
	HAL_GPIO_WritePin(Led2_GPIO_Port, Led2_Pin, GPIO_PIN_RESET);
 80012ae:	4622      	mov	r2, r4
 80012b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012b4:	4638      	mov	r0, r7
 80012b6:	f002 fae3 	bl	8003880 <HAL_GPIO_WritePin>
	uint32_t lasttick = 0;
 80012ba:	9413      	str	r4, [sp, #76]	; 0x4c
 80012bc:	e02c      	b.n	8001318 <main+0x354>
 80012be:	bf00      	nop
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40020c00 	.word	0x40020c00
 80012c8:	40020400 	.word	0x40020400
 80012cc:	20000978 	.word	0x20000978
 80012d0:	40005400 	.word	0x40005400
 80012d4:	000186a0 	.word	0x000186a0
 80012d8:	200009cc 	.word	0x200009cc
 80012dc:	40003800 	.word	0x40003800
 80012e0:	20000a14 	.word	0x20000a14
 80012e4:	40003c00 	.word	0x40003c00
 80012e8:	20000a5c 	.word	0x20000a5c
 80012ec:	40013000 	.word	0x40013000
 80012f0:	20001d34 	.word	0x20001d34
 80012f4:	200003a8 	.word	0x200003a8
 80012f8:	200003d8 	.word	0x200003d8
 80012fc:	20000ab4 	.word	0x20000ab4
 8001300:	0800d398 	.word	0x0800d398
 8001304:	0800d3a4 	.word	0x0800d3a4
 8001308:	200008ac 	.word	0x200008ac
 800130c:	200008b0 	.word	0x200008b0
 8001310:	40020800 	.word	0x40020800
 8001314:	40020000 	.word	0x40020000
		HAL_GPIO_WritePin(OtgPower_GPIO_Port, OtgPower_Pin, GPIO_PIN_RESET);
 8001318:	4e9a      	ldr	r6, [pc, #616]	; (8001584 <main+0x5c0>)
			encoderA.current = (encoderA.last * alpha / 100) + (temp * (100 - alpha) / 100);
 800131a:	4f9b      	ldr	r7, [pc, #620]	; (8001588 <main+0x5c4>)
				float val = (float)display_array[i] / 32768.0F * 10.0F;
 800131c:	ed9f 9a9b 	vldr	s18, [pc, #620]	; 800158c <main+0x5c8>
				if (val < -64) val = -64;
 8001320:	eddf 8a9b 	vldr	s17, [pc, #620]	; 8001590 <main+0x5cc>
 8001324:	e0ac      	b.n	8001480 <main+0x4bc>
 8001326:	b672      	cpsid	i
	while (1)
 8001328:	e7fe      	b.n	8001328 <main+0x364>
 800132a:	b672      	cpsid	i
 800132c:	e7fe      	b.n	800132c <main+0x368>
 800132e:	b672      	cpsid	i
 8001330:	e7fe      	b.n	8001330 <main+0x36c>
 8001332:	b672      	cpsid	i
 8001334:	e7fe      	b.n	8001334 <main+0x370>
			lasttick = HAL_GetTick();
 8001336:	f001 fc3d 	bl	8002bb4 <HAL_GetTick>
 800133a:	9013      	str	r0, [sp, #76]	; 0x4c
			encoderA.last = encoderA.current;
 800133c:	4b95      	ldr	r3, [pc, #596]	; (8001594 <main+0x5d0>)
 800133e:	885a      	ldrh	r2, [r3, #2]
 8001340:	801a      	strh	r2, [r3, #0]
			encoderB.last = encoderB.current;
 8001342:	4b95      	ldr	r3, [pc, #596]	; (8001598 <main+0x5d4>)
 8001344:	885a      	ldrh	r2, [r3, #2]
 8001346:	801a      	strh	r2, [r3, #0]
			temp = HAL_GPIO_ReadPin(EncA_GPIO_Port, EncA_Pin) == GPIO_PIN_SET ? ceil : 0;
 8001348:	2108      	movs	r1, #8
 800134a:	4630      	mov	r0, r6
 800134c:	f002 fa80 	bl	8003850 <HAL_GPIO_ReadPin>
 8001350:	2801      	cmp	r0, #1
 8001352:	f242 7210 	movw	r2, #10000	; 0x2710
 8001356:	bf18      	it	ne
 8001358:	2200      	movne	r2, #0
			encoderA.current = (encoderA.last * alpha / 100) + (temp * (100 - alpha) / 100);
 800135a:	498e      	ldr	r1, [pc, #568]	; (8001594 <main+0x5d0>)
 800135c:	880b      	ldrh	r3, [r1, #0]
 800135e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001362:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8001366:	fb87 4003 	smull	r4, r0, r7, r3
 800136a:	17db      	asrs	r3, r3, #31
 800136c:	ebc3 1360 	rsb	r3, r3, r0, asr #5
 8001370:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001374:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001378:	fb87 0202 	smull	r0, r2, r7, r2
 800137c:	eb03 1362 	add.w	r3, r3, r2, asr #5
 8001380:	804b      	strh	r3, [r1, #2]
			temp = HAL_GPIO_ReadPin(EncB_GPIO_Port, EncB_Pin) == GPIO_PIN_SET ? ceil : 0;
 8001382:	2104      	movs	r1, #4
 8001384:	4630      	mov	r0, r6
 8001386:	f002 fa63 	bl	8003850 <HAL_GPIO_ReadPin>
 800138a:	2801      	cmp	r0, #1
 800138c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001390:	bf18      	it	ne
 8001392:	2200      	movne	r2, #0
			encoderB.current = (encoderB.last * alpha / 100) + (temp * (100 - alpha) / 100);
 8001394:	4980      	ldr	r1, [pc, #512]	; (8001598 <main+0x5d4>)
 8001396:	880b      	ldrh	r3, [r1, #0]
 8001398:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800139c:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 80013a0:	fb87 4003 	smull	r4, r0, r7, r3
 80013a4:	17db      	asrs	r3, r3, #31
 80013a6:	ebc3 1360 	rsb	r3, r3, r0, asr #5
 80013aa:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80013ae:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80013b2:	fb87 0202 	smull	r0, r2, r7, r2
 80013b6:	eb03 1362 	add.w	r3, r3, r2, asr #5
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	804b      	strh	r3, [r1, #2]
			if (encoderA.last < thr && encoderA.current >= thr) {
 80013be:	4a75      	ldr	r2, [pc, #468]	; (8001594 <main+0x5d0>)
 80013c0:	8812      	ldrh	r2, [r2, #0]
 80013c2:	f241 3187 	movw	r1, #4999	; 0x1387
 80013c6:	428a      	cmp	r2, r1
 80013c8:	d814      	bhi.n	80013f4 <main+0x430>
 80013ca:	4a72      	ldr	r2, [pc, #456]	; (8001594 <main+0x5d0>)
 80013cc:	8851      	ldrh	r1, [r2, #2]
 80013ce:	f241 3287 	movw	r2, #4999	; 0x1387
 80013d2:	4291      	cmp	r1, r2
 80013d4:	d909      	bls.n	80013ea <main+0x426>
				if (encoderB.current > thr) {
 80013d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80013da:	4293      	cmp	r3, r2
					encoderCounter--;
 80013dc:	4a6f      	ldr	r2, [pc, #444]	; (800159c <main+0x5d8>)
 80013de:	8813      	ldrh	r3, [r2, #0]
 80013e0:	bf8c      	ite	hi
 80013e2:	f103 33ff 	addhi.w	r3, r3, #4294967295
					encoderCounter++;
 80013e6:	3301      	addls	r3, #1
 80013e8:	8013      	strh	r3, [r2, #0]
			CS43_SetVolume(encoderCounter);
 80013ea:	4b6c      	ldr	r3, [pc, #432]	; (800159c <main+0x5d8>)
 80013ec:	7818      	ldrb	r0, [r3, #0]
 80013ee:	f7ff fa71 	bl	80008d4 <CS43_SetVolume>
 80013f2:	e052      	b.n	800149a <main+0x4d6>
			} else if (encoderA.last > thr && encoderA.current <= thr) {
 80013f4:	f241 3188 	movw	r1, #5000	; 0x1388
 80013f8:	428a      	cmp	r2, r1
 80013fa:	d9f6      	bls.n	80013ea <main+0x426>
 80013fc:	4a65      	ldr	r2, [pc, #404]	; (8001594 <main+0x5d0>)
 80013fe:	8851      	ldrh	r1, [r2, #2]
 8001400:	f241 3288 	movw	r2, #5000	; 0x1388
 8001404:	4291      	cmp	r1, r2
 8001406:	d8f0      	bhi.n	80013ea <main+0x426>
				if (encoderB.current > thr) {
 8001408:	4293      	cmp	r3, r2
					encoderCounter++;
 800140a:	4a64      	ldr	r2, [pc, #400]	; (800159c <main+0x5d8>)
 800140c:	8813      	ldrh	r3, [r2, #0]
 800140e:	bf8c      	ite	hi
 8001410:	3301      	addhi	r3, #1
					encoderCounter--;
 8001412:	f103 33ff 	addls.w	r3, r3, #4294967295
 8001416:	8013      	strh	r3, [r2, #0]
 8001418:	e7e7      	b.n	80013ea <main+0x426>
				if (val > 63) val = 63;
 800141a:	eddf 7a61 	vldr	s15, [pc, #388]	; 80015a0 <main+0x5dc>
				toggle_single_pixel(image, 64 + (int)val, i);
 800141e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001422:	ee17 1a90 	vmov	r1, s15
 8001426:	3140      	adds	r1, #64	; 0x40
 8001428:	b2a2      	uxth	r2, r4
 800142a:	b289      	uxth	r1, r1
 800142c:	485d      	ldr	r0, [pc, #372]	; (80015a4 <main+0x5e0>)
 800142e:	f000 f900 	bl	8001632 <toggle_single_pixel>
			for (int i = 0; i < 296; i++) {
 8001432:	3401      	adds	r4, #1
 8001434:	f5b4 7f94 	cmp.w	r4, #296	; 0x128
 8001438:	d014      	beq.n	8001464 <main+0x4a0>
				float val = (float)display_array[i] / 32768.0F * 10.0F;
 800143a:	ecf5 7a01 	vldmia	r5!, {s15}
 800143e:	ee67 7a89 	vmul.f32	s15, s15, s18
 8001442:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001446:	ee67 7a87 	vmul.f32	s15, s15, s14
				if (val > 63) val = 63;
 800144a:	eef4 7ac8 	vcmpe.f32	s15, s16
 800144e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001452:	dce2      	bgt.n	800141a <main+0x456>
				if (val < -64) val = -64;
 8001454:	eef4 7a68 	vcmp.f32	s15, s17
 8001458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800145c:	bf48      	it	mi
 800145e:	eef0 7a68 	vmovmi.f32	s15, s17
 8001462:	e7dc      	b.n	800141e <main+0x45a>
			display_counter = 0;
 8001464:	2400      	movs	r4, #0
 8001466:	4b50      	ldr	r3, [pc, #320]	; (80015a8 <main+0x5e4>)
 8001468:	801c      	strh	r4, [r3, #0]
			EPD_Display(image);
 800146a:	484e      	ldr	r0, [pc, #312]	; (80015a4 <main+0x5e0>)
 800146c:	f7ff fc35 	bl	8000cda <EPD_Display>
			EPD_Sleep();
 8001470:	f7ff fc51 	bl	8000d16 <EPD_Sleep>
			HAL_GPIO_WritePin(Led3_GPIO_Port, Led3_Pin, GPIO_PIN_RESET);
 8001474:	4622      	mov	r2, r4
 8001476:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800147a:	484c      	ldr	r0, [pc, #304]	; (80015ac <main+0x5e8>)
 800147c:	f002 fa00 	bl	8003880 <HAL_GPIO_WritePin>
    MX_USB_HOST_Process();
 8001480:	f00a fe32 	bl	800c0e8 <MX_USB_HOST_Process>
		HAL_GPIO_WritePin(OtgPower_GPIO_Port, OtgPower_Pin, GPIO_PIN_RESET);
 8001484:	2200      	movs	r2, #0
 8001486:	2101      	movs	r1, #1
 8001488:	4630      	mov	r0, r6
 800148a:	f002 f9f9 	bl	8003880 <HAL_GPIO_WritePin>
		if (HAL_GetTick() != lasttick) {
 800148e:	f001 fb91 	bl	8002bb4 <HAL_GetTick>
 8001492:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8001494:	4298      	cmp	r0, r3
 8001496:	f47f af4e 	bne.w	8001336 <main+0x372>
		if (HAL_GetTick() % (interval * 1000) == 0) {
 800149a:	f001 fb8b 	bl	8002bb4 <HAL_GetTick>
 800149e:	4b44      	ldr	r3, [pc, #272]	; (80015b0 <main+0x5ec>)
 80014a0:	fba3 2300 	umull	r2, r3, r3, r0
 80014a4:	0b1b      	lsrs	r3, r3, #12
 80014a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80014aa:	fb02 0013 	mls	r0, r2, r3, r0
 80014ae:	2800      	cmp	r0, #0
 80014b0:	d1e6      	bne.n	8001480 <main+0x4bc>
			HAL_GPIO_WritePin(Led3_GPIO_Port, Led3_Pin, GPIO_PIN_SET);
 80014b2:	2201      	movs	r2, #1
 80014b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014b8:	483c      	ldr	r0, [pc, #240]	; (80015ac <main+0x5e8>)
 80014ba:	f002 f9e1 	bl	8003880 <HAL_GPIO_WritePin>
			EPD_Init();
 80014be:	f7ff fba5 	bl	8000c0c <EPD_Init>
			draw_clean(image);
 80014c2:	4c38      	ldr	r4, [pc, #224]	; (80015a4 <main+0x5e0>)
 80014c4:	4620      	mov	r0, r4
 80014c6:	f000 f9d7 	bl	8001878 <draw_clean>
			sprintf(row, "RxH %d LR", rxHalfCpltCounter / interval);
 80014ca:	f8df a104 	ldr.w	sl, [pc, #260]	; 80015d0 <main+0x60c>
 80014ce:	f8da 3000 	ldr.w	r3, [sl]
 80014d2:	f8df b100 	ldr.w	fp, [pc, #256]	; 80015d4 <main+0x610>
 80014d6:	fbab 2303 	umull	r2, r3, fp, r3
 80014da:	089a      	lsrs	r2, r3, #2
 80014dc:	4935      	ldr	r1, [pc, #212]	; (80015b4 <main+0x5f0>)
 80014de:	a81f      	add	r0, sp, #124	; 0x7c
 80014e0:	f00b fa54 	bl	800c98c <siprintf>
			draw_text(image, row, 0, 0);
 80014e4:	2300      	movs	r3, #0
 80014e6:	461a      	mov	r2, r3
 80014e8:	a91f      	add	r1, sp, #124	; 0x7c
 80014ea:	4620      	mov	r0, r4
 80014ec:	f000 f995 	bl	800181a <draw_text>
			sprintf(row, "RxC %d LR", rxCpltCounter / interval);
 80014f0:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 80015d8 <main+0x614>
 80014f4:	f8d9 3000 	ldr.w	r3, [r9]
 80014f8:	fbab 2303 	umull	r2, r3, fp, r3
 80014fc:	089a      	lsrs	r2, r3, #2
 80014fe:	492e      	ldr	r1, [pc, #184]	; (80015b8 <main+0x5f4>)
 8001500:	a81f      	add	r0, sp, #124	; 0x7c
 8001502:	f00b fa43 	bl	800c98c <siprintf>
			draw_text(image, row, 0, 20);
 8001506:	2314      	movs	r3, #20
 8001508:	2200      	movs	r2, #0
 800150a:	a91f      	add	r1, sp, #124	; 0x7c
 800150c:	4620      	mov	r0, r4
 800150e:	f000 f984 	bl	800181a <draw_text>
			sprintf(row, "TxH %d L", txHalfCpltCounter / interval);
 8001512:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 80015dc <main+0x618>
 8001516:	f8d8 3000 	ldr.w	r3, [r8]
 800151a:	fbab 2303 	umull	r2, r3, fp, r3
 800151e:	089a      	lsrs	r2, r3, #2
 8001520:	4926      	ldr	r1, [pc, #152]	; (80015bc <main+0x5f8>)
 8001522:	a81f      	add	r0, sp, #124	; 0x7c
 8001524:	f00b fa32 	bl	800c98c <siprintf>
			draw_text(image, row, 0, 40);
 8001528:	2328      	movs	r3, #40	; 0x28
 800152a:	2200      	movs	r2, #0
 800152c:	a91f      	add	r1, sp, #124	; 0x7c
 800152e:	4620      	mov	r0, r4
 8001530:	f000 f973 	bl	800181a <draw_text>
			sprintf(row, "TxC %d R", txCpltCounter / interval);
 8001534:	4d22      	ldr	r5, [pc, #136]	; (80015c0 <main+0x5fc>)
 8001536:	682b      	ldr	r3, [r5, #0]
 8001538:	fbab 2303 	umull	r2, r3, fp, r3
 800153c:	089a      	lsrs	r2, r3, #2
 800153e:	4921      	ldr	r1, [pc, #132]	; (80015c4 <main+0x600>)
 8001540:	a81f      	add	r0, sp, #124	; 0x7c
 8001542:	f00b fa23 	bl	800c98c <siprintf>
			draw_text(image, row, 0, 60);
 8001546:	233c      	movs	r3, #60	; 0x3c
 8001548:	2200      	movs	r2, #0
 800154a:	a91f      	add	r1, sp, #124	; 0x7c
 800154c:	4620      	mov	r0, r4
 800154e:	f000 f964 	bl	800181a <draw_text>
			sprintf(row, "Enc %d", encoderCounter);
 8001552:	4b12      	ldr	r3, [pc, #72]	; (800159c <main+0x5d8>)
 8001554:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001558:	491b      	ldr	r1, [pc, #108]	; (80015c8 <main+0x604>)
 800155a:	a81f      	add	r0, sp, #124	; 0x7c
 800155c:	f00b fa16 	bl	800c98c <siprintf>
			draw_text(image, row, 0, 80);
 8001560:	2350      	movs	r3, #80	; 0x50
 8001562:	2200      	movs	r2, #0
 8001564:	a91f      	add	r1, sp, #124	; 0x7c
 8001566:	4620      	mov	r0, r4
 8001568:	f000 f957 	bl	800181a <draw_text>
			rxHalfCpltCounter = 0;
 800156c:	2400      	movs	r4, #0
 800156e:	f8ca 4000 	str.w	r4, [sl]
			rxCpltCounter = 0;
 8001572:	f8c9 4000 	str.w	r4, [r9]
			txHalfCpltCounter = 0;
 8001576:	f8c8 4000 	str.w	r4, [r8]
			txCpltCounter = 0;
 800157a:	602c      	str	r4, [r5, #0]
			for (int i = 0; i < 296; i++) {
 800157c:	4d13      	ldr	r5, [pc, #76]	; (80015cc <main+0x608>)
				if (val > 63) val = 63;
 800157e:	ed9f 8a08 	vldr	s16, [pc, #32]	; 80015a0 <main+0x5dc>
 8001582:	e75a      	b.n	800143a <main+0x476>
 8001584:	40020800 	.word	0x40020800
 8001588:	51eb851f 	.word	0x51eb851f
 800158c:	38000000 	.word	0x38000000
 8001590:	c2800000 	.word	0xc2800000
 8001594:	200008ac 	.word	0x200008ac
 8001598:	200008b0 	.word	0x200008b0
 800159c:	200008b4 	.word	0x200008b4
 80015a0:	427c0000 	.word	0x427c0000
 80015a4:	20000ab4 	.word	0x20000ab4
 80015a8:	200008a8 	.word	0x200008a8
 80015ac:	40020c00 	.word	0x40020c00
 80015b0:	d1b71759 	.word	0xd1b71759
 80015b4:	0800d3b4 	.word	0x0800d3b4
 80015b8:	0800d3c0 	.word	0x0800d3c0
 80015bc:	0800d3cc 	.word	0x0800d3cc
 80015c0:	20002380 	.word	0x20002380
 80015c4:	0800d3d8 	.word	0x0800d3d8
 80015c8:	0800d3e4 	.word	0x0800d3e4
 80015cc:	20000408 	.word	0x20000408
 80015d0:	2000237c 	.word	0x2000237c
 80015d4:	cccccccd 	.word	0xcccccccd
 80015d8:	20002378 	.word	0x20002378
 80015dc:	20002384 	.word	0x20002384

080015e0 <Error_Handler>:
 80015e0:	b672      	cpsid	i
	while (1)
 80015e2:	e7fe      	b.n	80015e2 <Error_Handler+0x2>

080015e4 <read_font_pixel>:
#define CANVAS_WIDTH 128
#define CANVAS_HEIGHT 296

uint8_t font[516] = { 0x0, 0x18, 0x3C, 0x66, 0x66, 0x66, 0x7E, 0x66, 0x66, 0x66, 0x0, 0x0, 0x0, 0x7C, 0x66, 0x66, 0x66, 0x7C, 0x66, 0x66, 0x66, 0x7C, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x60, 0x60, 0x60, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x78, 0x6C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6C, 0x78, 0x0, 0x0, 0x0, 0x7E, 0x60, 0x60, 0x60, 0x78, 0x60, 0x60, 0x60, 0x7E, 0x0, 0x0, 0x0, 0x7E, 0x60, 0x60, 0x60, 0x78, 0x60, 0x60, 0x60, 0x60, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x60, 0x60, 0x6E, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x66, 0x66, 0x66, 0x66, 0x7E, 0x66, 0x66, 0x66, 0x66, 0x0, 0x0, 0x0, 0x3C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x0, 0x0, 0x0, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x66, 0x66, 0x6C, 0x6C, 0x78, 0x6C, 0x6C, 0x66, 0x66, 0x0, 0x0, 0x0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x7E, 0x0, 0x0, 0x0, 0x63, 0x63, 0x77, 0x7F, 0x6B, 0x6B, 0x63, 0x63, 0x63, 0x0, 0x0, 0x0, 0x63, 0x63, 0x73, 0x7B, 0x6F, 0x67, 0x63, 0x63, 0x63, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x7C, 0x66, 0x66, 0x66, 0x7C, 0x60, 0x60, 0x60, 0x60, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0xC, 0x6, 0x0, 0x7C, 0x66, 0x66, 0x66, 0x7C, 0x6C, 0x66, 0x66, 0x64, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x60, 0x30, 0x18, 0xC, 0x6, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x7E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x0, 0x0, 0x0, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x0, 0x0, 0x0, 0x63, 0x63, 0x63, 0x63, 0x6B, 0x6B, 0x36, 0x36, 0x36, 0x0, 0x0, 0x0, 0x66, 0x66, 0x34, 0x18, 0x18, 0x2C, 0x66, 0x66, 0x66, 0x0, 0x0, 0x0, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x18, 0x18, 0x18, 0x0, 0x0, 0x0, 0x7E, 0x6, 0x6, 0xC, 0x18, 0x30, 0x60, 0x60, 0x7E, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x6E, 0x6E, 0x66, 0x76, 0x76, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x6, 0xE, 0x3E, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x6, 0xC, 0x18, 0x30, 0x60, 0x7E, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x6, 0x1C, 0x6, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x30, 0x30, 0x36, 0x36, 0x36, 0x66, 0x7F, 0x6, 0x6, 0x0, 0x0, 0x0, 0x7E, 0x60, 0x60, 0x60, 0x7C, 0x6, 0x6, 0xC, 0x78, 0x0, 0x0, 0x0, 0x1C, 0x38, 0x30, 0x7C, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x7E, 0x6, 0xC, 0xC, 0x18, 0x18, 0x30, 0x30, 0x30, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x76, 0x3C, 0x6E, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x66, 0x66, 0x3E, 0xC, 0x1C, 0x38, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0x38, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0x38, 0x18, 0x30, 0x0, 0x0, 0x0, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7E, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0xC, 0x18, 0x30, 0x60, 0x30, 0x18, 0xC, 0x6, 0x0, 0x0, 0x0, 0x60, 0x30, 0x18, 0xC, 0x6, 0xC, 0x18, 0x30, 0x60, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};

uint8_t read_font_pixel(uint8_t *image, uint16_t x, uint16_t y) {
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	460b      	mov	r3, r1
 80015ee:	807b      	strh	r3, [r7, #2]
 80015f0:	4613      	mov	r3, r2
 80015f2:	803b      	strh	r3, [r7, #0]
	uint16_t i = (x +  y * FONT_WIDTH) / 8;
 80015f4:	887a      	ldrh	r2, [r7, #2]
 80015f6:	883b      	ldrh	r3, [r7, #0]
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	4413      	add	r3, r2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	da00      	bge.n	8001602 <read_font_pixel+0x1e>
 8001600:	3307      	adds	r3, #7
 8001602:	10db      	asrs	r3, r3, #3
 8001604:	81fb      	strh	r3, [r7, #14]
	uint8_t pixel_group = image[i];
 8001606:	89fb      	ldrh	r3, [r7, #14]
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	4413      	add	r3, r2
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	737b      	strb	r3, [r7, #13]
	return ((pixel_group >> (7 - x % 8)) & 0x01);
 8001610:	7b7a      	ldrb	r2, [r7, #13]
 8001612:	887b      	ldrh	r3, [r7, #2]
 8001614:	43db      	mvns	r3, r3
 8001616:	f003 0307 	and.w	r3, r3, #7
 800161a:	fa42 f303 	asr.w	r3, r2, r3
 800161e:	b2db      	uxtb	r3, r3
 8001620:	f003 0301 	and.w	r3, r3, #1
 8001624:	b2db      	uxtb	r3, r3
}
 8001626:	4618      	mov	r0, r3
 8001628:	3714      	adds	r7, #20
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <toggle_single_pixel>:

void toggle_single_pixel(uint8_t *image, uint16_t x, uint16_t y) {
 8001632:	b480      	push	{r7}
 8001634:	b085      	sub	sp, #20
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
 800163a:	460b      	mov	r3, r1
 800163c:	807b      	strh	r3, [r7, #2]
 800163e:	4613      	mov	r3, r2
 8001640:	803b      	strh	r3, [r7, #0]
	uint16_t i = (x +  y * CANVAS_WIDTH) / 8;
 8001642:	887a      	ldrh	r2, [r7, #2]
 8001644:	883b      	ldrh	r3, [r7, #0]
 8001646:	01db      	lsls	r3, r3, #7
 8001648:	4413      	add	r3, r2
 800164a:	2b00      	cmp	r3, #0
 800164c:	da00      	bge.n	8001650 <toggle_single_pixel+0x1e>
 800164e:	3307      	adds	r3, #7
 8001650:	10db      	asrs	r3, r3, #3
 8001652:	81fb      	strh	r3, [r7, #14]
	if (x < CANVAS_WIDTH && y < CANVAS_HEIGHT) image[i] ^= (0x01 << (7 - x % 8));
 8001654:	887b      	ldrh	r3, [r7, #2]
 8001656:	2b7f      	cmp	r3, #127	; 0x7f
 8001658:	d817      	bhi.n	800168a <toggle_single_pixel+0x58>
 800165a:	883b      	ldrh	r3, [r7, #0]
 800165c:	f5b3 7f94 	cmp.w	r3, #296	; 0x128
 8001660:	d213      	bcs.n	800168a <toggle_single_pixel+0x58>
 8001662:	89fb      	ldrh	r3, [r7, #14]
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	4413      	add	r3, r2
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	b25a      	sxtb	r2, r3
 800166c:	887b      	ldrh	r3, [r7, #2]
 800166e:	43db      	mvns	r3, r3
 8001670:	f003 0307 	and.w	r3, r3, #7
 8001674:	2101      	movs	r1, #1
 8001676:	fa01 f303 	lsl.w	r3, r1, r3
 800167a:	b25b      	sxtb	r3, r3
 800167c:	4053      	eors	r3, r2
 800167e:	b259      	sxtb	r1, r3
 8001680:	89fb      	ldrh	r3, [r7, #14]
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	4413      	add	r3, r2
 8001686:	b2ca      	uxtb	r2, r1
 8001688:	701a      	strb	r2, [r3, #0]
}
 800168a:	bf00      	nop
 800168c:	3714      	adds	r7, #20
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <draw_rectangle>:
	for (uint16_t i = 0; i < CANVAS_WIDTH * CANVAS_HEIGHT / 8; i++) {
		image[i] = ~image[i];
	}
}

void draw_rectangle(uint8_t *image, uint16_t x, uint16_t y, uint16_t w, uint16_t h) {
 8001696:	b580      	push	{r7, lr}
 8001698:	b086      	sub	sp, #24
 800169a:	af00      	add	r7, sp, #0
 800169c:	60f8      	str	r0, [r7, #12]
 800169e:	4608      	mov	r0, r1
 80016a0:	4611      	mov	r1, r2
 80016a2:	461a      	mov	r2, r3
 80016a4:	4603      	mov	r3, r0
 80016a6:	817b      	strh	r3, [r7, #10]
 80016a8:	460b      	mov	r3, r1
 80016aa:	813b      	strh	r3, [r7, #8]
 80016ac:	4613      	mov	r3, r2
 80016ae:	80fb      	strh	r3, [r7, #6]
	for (uint16_t i = 0; i < h; i++) {
 80016b0:	2300      	movs	r3, #0
 80016b2:	82fb      	strh	r3, [r7, #22]
 80016b4:	e018      	b.n	80016e8 <draw_rectangle+0x52>
		for (uint16_t j = 0; j < w; j++) {
 80016b6:	2300      	movs	r3, #0
 80016b8:	82bb      	strh	r3, [r7, #20]
 80016ba:	e00e      	b.n	80016da <draw_rectangle+0x44>
			toggle_single_pixel(image, x + j, y + i);
 80016bc:	897a      	ldrh	r2, [r7, #10]
 80016be:	8abb      	ldrh	r3, [r7, #20]
 80016c0:	4413      	add	r3, r2
 80016c2:	b299      	uxth	r1, r3
 80016c4:	893a      	ldrh	r2, [r7, #8]
 80016c6:	8afb      	ldrh	r3, [r7, #22]
 80016c8:	4413      	add	r3, r2
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	461a      	mov	r2, r3
 80016ce:	68f8      	ldr	r0, [r7, #12]
 80016d0:	f7ff ffaf 	bl	8001632 <toggle_single_pixel>
		for (uint16_t j = 0; j < w; j++) {
 80016d4:	8abb      	ldrh	r3, [r7, #20]
 80016d6:	3301      	adds	r3, #1
 80016d8:	82bb      	strh	r3, [r7, #20]
 80016da:	8aba      	ldrh	r2, [r7, #20]
 80016dc:	88fb      	ldrh	r3, [r7, #6]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d3ec      	bcc.n	80016bc <draw_rectangle+0x26>
	for (uint16_t i = 0; i < h; i++) {
 80016e2:	8afb      	ldrh	r3, [r7, #22]
 80016e4:	3301      	adds	r3, #1
 80016e6:	82fb      	strh	r3, [r7, #22]
 80016e8:	8afa      	ldrh	r2, [r7, #22]
 80016ea:	8c3b      	ldrh	r3, [r7, #32]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d3e2      	bcc.n	80016b6 <draw_rectangle+0x20>
		}
	}
}
 80016f0:	bf00      	nop
 80016f2:	bf00      	nop
 80016f4:	3718      	adds	r7, #24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
	...

080016fc <draw_char>:

void draw_char(uint8_t *image, uint16_t x, uint16_t y, uint16_t c) {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	4608      	mov	r0, r1
 8001706:	4611      	mov	r1, r2
 8001708:	461a      	mov	r2, r3
 800170a:	4603      	mov	r3, r0
 800170c:	817b      	strh	r3, [r7, #10]
 800170e:	460b      	mov	r3, r1
 8001710:	813b      	strh	r3, [r7, #8]
 8001712:	4613      	mov	r3, r2
 8001714:	80fb      	strh	r3, [r7, #6]
	uint16_t font_offset = c * FONT_HEIGHT;
 8001716:	88fb      	ldrh	r3, [r7, #6]
 8001718:	461a      	mov	r2, r3
 800171a:	0052      	lsls	r2, r2, #1
 800171c:	4413      	add	r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	827b      	strh	r3, [r7, #18]
	for (uint16_t i = 0; i < FONT_HEIGHT; i++) {
 8001722:	2300      	movs	r3, #0
 8001724:	82fb      	strh	r3, [r7, #22]
 8001726:	e023      	b.n	8001770 <draw_char+0x74>
		for (uint16_t j = 0; j < FONT_WIDTH; j++) {
 8001728:	2300      	movs	r3, #0
 800172a:	82bb      	strh	r3, [r7, #20]
 800172c:	e01a      	b.n	8001764 <draw_char+0x68>
			if (read_font_pixel(font, j, i + font_offset)) {
 800172e:	8afa      	ldrh	r2, [r7, #22]
 8001730:	8a7b      	ldrh	r3, [r7, #18]
 8001732:	4413      	add	r3, r2
 8001734:	b29a      	uxth	r2, r3
 8001736:	8abb      	ldrh	r3, [r7, #20]
 8001738:	4619      	mov	r1, r3
 800173a:	4811      	ldr	r0, [pc, #68]	; (8001780 <draw_char+0x84>)
 800173c:	f7ff ff52 	bl	80015e4 <read_font_pixel>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d00b      	beq.n	800175e <draw_char+0x62>
				toggle_single_pixel(image, x + j, y + i);
 8001746:	897a      	ldrh	r2, [r7, #10]
 8001748:	8abb      	ldrh	r3, [r7, #20]
 800174a:	4413      	add	r3, r2
 800174c:	b299      	uxth	r1, r3
 800174e:	893a      	ldrh	r2, [r7, #8]
 8001750:	8afb      	ldrh	r3, [r7, #22]
 8001752:	4413      	add	r3, r2
 8001754:	b29b      	uxth	r3, r3
 8001756:	461a      	mov	r2, r3
 8001758:	68f8      	ldr	r0, [r7, #12]
 800175a:	f7ff ff6a 	bl	8001632 <toggle_single_pixel>
		for (uint16_t j = 0; j < FONT_WIDTH; j++) {
 800175e:	8abb      	ldrh	r3, [r7, #20]
 8001760:	3301      	adds	r3, #1
 8001762:	82bb      	strh	r3, [r7, #20]
 8001764:	8abb      	ldrh	r3, [r7, #20]
 8001766:	2b07      	cmp	r3, #7
 8001768:	d9e1      	bls.n	800172e <draw_char+0x32>
	for (uint16_t i = 0; i < FONT_HEIGHT; i++) {
 800176a:	8afb      	ldrh	r3, [r7, #22]
 800176c:	3301      	adds	r3, #1
 800176e:	82fb      	strh	r3, [r7, #22]
 8001770:	8afb      	ldrh	r3, [r7, #22]
 8001772:	2b0b      	cmp	r3, #11
 8001774:	d9d8      	bls.n	8001728 <draw_char+0x2c>
			}
		}
	}
}
 8001776:	bf00      	nop
 8001778:	bf00      	nop
 800177a:	3718      	adds	r7, #24
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	200000a0 	.word	0x200000a0

08001784 <translate>:

uint16_t translate(char c) {
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	71fb      	strb	r3, [r7, #7]
	if (c >= 'A' && c <= 'Z') {
 800178e:	79fb      	ldrb	r3, [r7, #7]
 8001790:	2b40      	cmp	r3, #64	; 0x40
 8001792:	d907      	bls.n	80017a4 <translate+0x20>
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	2b5a      	cmp	r3, #90	; 0x5a
 8001798:	d804      	bhi.n	80017a4 <translate+0x20>
		return c - 'A';
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	b29b      	uxth	r3, r3
 800179e:	3b41      	subs	r3, #65	; 0x41
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	e034      	b.n	800180e <translate+0x8a>
	} else if (c >= 'a' && c <= 'z') {
 80017a4:	79fb      	ldrb	r3, [r7, #7]
 80017a6:	2b60      	cmp	r3, #96	; 0x60
 80017a8:	d907      	bls.n	80017ba <translate+0x36>
 80017aa:	79fb      	ldrb	r3, [r7, #7]
 80017ac:	2b7a      	cmp	r3, #122	; 0x7a
 80017ae:	d804      	bhi.n	80017ba <translate+0x36>
		return c - 'a';
 80017b0:	79fb      	ldrb	r3, [r7, #7]
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	3b61      	subs	r3, #97	; 0x61
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	e029      	b.n	800180e <translate+0x8a>
	} else if (c >= '0' && c <= '9') {
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	2b2f      	cmp	r3, #47	; 0x2f
 80017be:	d907      	bls.n	80017d0 <translate+0x4c>
 80017c0:	79fb      	ldrb	r3, [r7, #7]
 80017c2:	2b39      	cmp	r3, #57	; 0x39
 80017c4:	d804      	bhi.n	80017d0 <translate+0x4c>
		return c - '0' + 26;
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	3b16      	subs	r3, #22
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	e01e      	b.n	800180e <translate+0x8a>
	} else if (c == '.') {
 80017d0:	79fb      	ldrb	r3, [r7, #7]
 80017d2:	2b2e      	cmp	r3, #46	; 0x2e
 80017d4:	d101      	bne.n	80017da <translate+0x56>
		return 36;
 80017d6:	2324      	movs	r3, #36	; 0x24
 80017d8:	e019      	b.n	800180e <translate+0x8a>
	} else if (c == ',') {
 80017da:	79fb      	ldrb	r3, [r7, #7]
 80017dc:	2b2c      	cmp	r3, #44	; 0x2c
 80017de:	d101      	bne.n	80017e4 <translate+0x60>
		return 37;
 80017e0:	2325      	movs	r3, #37	; 0x25
 80017e2:	e014      	b.n	800180e <translate+0x8a>
	} else if (c == '+') {
 80017e4:	79fb      	ldrb	r3, [r7, #7]
 80017e6:	2b2b      	cmp	r3, #43	; 0x2b
 80017e8:	d101      	bne.n	80017ee <translate+0x6a>
		return 38;
 80017ea:	2326      	movs	r3, #38	; 0x26
 80017ec:	e00f      	b.n	800180e <translate+0x8a>
	} else if (c == '-') {
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	2b2d      	cmp	r3, #45	; 0x2d
 80017f2:	d101      	bne.n	80017f8 <translate+0x74>
		return 39;
 80017f4:	2327      	movs	r3, #39	; 0x27
 80017f6:	e00a      	b.n	800180e <translate+0x8a>
	} else if (c == '<') {
 80017f8:	79fb      	ldrb	r3, [r7, #7]
 80017fa:	2b3c      	cmp	r3, #60	; 0x3c
 80017fc:	d101      	bne.n	8001802 <translate+0x7e>
		return 40;
 80017fe:	2328      	movs	r3, #40	; 0x28
 8001800:	e005      	b.n	800180e <translate+0x8a>
	} else if (c == '>') {
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	2b3e      	cmp	r3, #62	; 0x3e
 8001806:	d101      	bne.n	800180c <translate+0x88>
		return 41;
 8001808:	2329      	movs	r3, #41	; 0x29
 800180a:	e000      	b.n	800180e <translate+0x8a>
	} else {
		return 42; // ' '
 800180c:	232a      	movs	r3, #42	; 0x2a
	}
}
 800180e:	4618      	mov	r0, r3
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <draw_text>:

void draw_text(uint8_t *image, char *text, uint16_t x, uint16_t y) {
 800181a:	b590      	push	{r4, r7, lr}
 800181c:	b087      	sub	sp, #28
 800181e:	af00      	add	r7, sp, #0
 8001820:	60f8      	str	r0, [r7, #12]
 8001822:	60b9      	str	r1, [r7, #8]
 8001824:	4611      	mov	r1, r2
 8001826:	461a      	mov	r2, r3
 8001828:	460b      	mov	r3, r1
 800182a:	80fb      	strh	r3, [r7, #6]
 800182c:	4613      	mov	r3, r2
 800182e:	80bb      	strh	r3, [r7, #4]
	uint16_t i = 0;
 8001830:	2300      	movs	r3, #0
 8001832:	82fb      	strh	r3, [r7, #22]
	while(text[i] > 0) {
 8001834:	e015      	b.n	8001862 <draw_text+0x48>
		draw_char(image, x + FONT_WIDTH * i, y, translate(text[i]));
 8001836:	8afb      	ldrh	r3, [r7, #22]
 8001838:	00db      	lsls	r3, r3, #3
 800183a:	b29a      	uxth	r2, r3
 800183c:	88fb      	ldrh	r3, [r7, #6]
 800183e:	4413      	add	r3, r2
 8001840:	b29c      	uxth	r4, r3
 8001842:	8afb      	ldrh	r3, [r7, #22]
 8001844:	68ba      	ldr	r2, [r7, #8]
 8001846:	4413      	add	r3, r2
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff ff9a 	bl	8001784 <translate>
 8001850:	4603      	mov	r3, r0
 8001852:	88ba      	ldrh	r2, [r7, #4]
 8001854:	4621      	mov	r1, r4
 8001856:	68f8      	ldr	r0, [r7, #12]
 8001858:	f7ff ff50 	bl	80016fc <draw_char>
		i++;
 800185c:	8afb      	ldrh	r3, [r7, #22]
 800185e:	3301      	adds	r3, #1
 8001860:	82fb      	strh	r3, [r7, #22]
	while(text[i] > 0) {
 8001862:	8afb      	ldrh	r3, [r7, #22]
 8001864:	68ba      	ldr	r2, [r7, #8]
 8001866:	4413      	add	r3, r2
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1e3      	bne.n	8001836 <draw_text+0x1c>
	}
}
 800186e:	bf00      	nop
 8001870:	bf00      	nop
 8001872:	371c      	adds	r7, #28
 8001874:	46bd      	mov	sp, r7
 8001876:	bd90      	pop	{r4, r7, pc}

08001878 <draw_clean>:

void draw_clean(uint8_t *image) {
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
	uint16_t bytes = CANVAS_WIDTH * CANVAS_HEIGHT / 8;
 8001880:	f44f 5394 	mov.w	r3, #4736	; 0x1280
 8001884:	81bb      	strh	r3, [r7, #12]
	for (uint16_t i = 0; i < bytes; i++) image[i] = 0xFF;
 8001886:	2300      	movs	r3, #0
 8001888:	81fb      	strh	r3, [r7, #14]
 800188a:	e007      	b.n	800189c <draw_clean+0x24>
 800188c:	89fb      	ldrh	r3, [r7, #14]
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	4413      	add	r3, r2
 8001892:	22ff      	movs	r2, #255	; 0xff
 8001894:	701a      	strb	r2, [r3, #0]
 8001896:	89fb      	ldrh	r3, [r7, #14]
 8001898:	3301      	adds	r3, #1
 800189a:	81fb      	strh	r3, [r7, #14]
 800189c:	89fa      	ldrh	r2, [r7, #14]
 800189e:	89bb      	ldrh	r3, [r7, #12]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d3f3      	bcc.n	800188c <draw_clean+0x14>
}
 80018a4:	bf00      	nop
 80018a6:	bf00      	nop
 80018a8:	3714      	adds	r7, #20
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
	...

080018b4 <overdrive_pedal_init>:
#include "pedalboard_min.h"

// OVERDRIVE

void overdrive_pedal_init(pedal_config_t *conf) {
 80018b4:	b490      	push	{r4, r7}
 80018b6:	b09a      	sub	sp, #104	; 0x68
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
    conf->float_params[INTENSITY] = (float_parameter_t){4.F, 1.F, 10.F, 0.5F};
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4a1a      	ldr	r2, [pc, #104]	; (8001928 <overdrive_pedal_init+0x74>)
 80018c0:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80018c4:	4613      	mov	r3, r2
 80018c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[THRESHOLD_HIGH] = (float_parameter_t){32767.F, 0.F, 32767.F, 1.F};
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4a17      	ldr	r2, [pc, #92]	; (800192c <overdrive_pedal_init+0x78>)
 80018d0:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80018d4:	4613      	mov	r3, r2
 80018d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[THRESHOLD_LOW] = (float_parameter_t){28000.F, 0.F, 32767.F, 1.F};
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4a14      	ldr	r2, [pc, #80]	; (8001930 <overdrive_pedal_init+0x7c>)
 80018e0:	f103 0450 	add.w	r4, r3, #80	; 0x50
 80018e4:	4613      	mov	r3, r2
 80018e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[SOFTENER] = (float_parameter_t){4.F, 1.F, 10.F, 0.5F};
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4a0e      	ldr	r2, [pc, #56]	; (8001928 <overdrive_pedal_init+0x74>)
 80018f0:	f103 0460 	add.w	r4, r3, #96	; 0x60
 80018f4:	4613      	mov	r3, r2
 80018f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_1] = (float_parameter_t){1.F, 0.F, 1.F, 0.1F};
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4a0d      	ldr	r2, [pc, #52]	; (8001934 <overdrive_pedal_init+0x80>)
 8001900:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8001904:	4613      	mov	r3, r2
 8001906:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001908:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_2] = (float_parameter_t){0.F, 0.F, 1.F, 0.1F};
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4a0a      	ldr	r2, [pc, #40]	; (8001938 <overdrive_pedal_init+0x84>)
 8001910:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8001914:	4613      	mov	r3, r2
 8001916:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001918:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800191c:	bf00      	nop
 800191e:	3768      	adds	r7, #104	; 0x68
 8001920:	46bd      	mov	sp, r7
 8001922:	bc90      	pop	{r4, r7}
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	0800d084 	.word	0x0800d084
 800192c:	0800d094 	.word	0x0800d094
 8001930:	0800d0a4 	.word	0x0800d0a4
 8001934:	0800d0b4 	.word	0x0800d0b4
 8001938:	0800d0c4 	.word	0x0800d0c4

0800193c <overdrive_process>:

float overdrive_process(float in, pedal_config_t *conf) {
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	ed87 0a01 	vstr	s0, [r7, #4]
 8001946:	6038      	str	r0, [r7, #0]
    float out = in *  conf->float_params[INTENSITY].value;
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800194e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001956:	edc7 7a03 	vstr	s15, [r7, #12]
    out = soft_clip(out, conf->float_params[THRESHOLD_LOW].value, conf->float_params[SOFTENER].value);
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8001966:	eeb0 1a47 	vmov.f32	s2, s14
 800196a:	eef0 0a67 	vmov.f32	s1, s15
 800196e:	ed97 0a03 	vldr	s0, [r7, #12]
 8001972:	f000 fbab 	bl	80020cc <soft_clip>
 8001976:	ed87 0a03 	vstr	s0, [r7, #12]
    out = hard_clip(out, conf->float_params[THRESHOLD_HIGH].value);
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001980:	eef0 0a67 	vmov.f32	s1, s15
 8001984:	ed97 0a03 	vldr	s0, [r7, #12]
 8001988:	f000 fb70 	bl	800206c <hard_clip>
 800198c:	ed87 0a03 	vstr	s0, [r7, #12]
    out = mix(out, in, conf->float_params[BALANCE_1].value, conf->float_params[BALANCE_2].value);
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 800199c:	eef0 1a47 	vmov.f32	s3, s14
 80019a0:	eeb0 1a67 	vmov.f32	s2, s15
 80019a4:	edd7 0a01 	vldr	s1, [r7, #4]
 80019a8:	ed97 0a03 	vldr	s0, [r7, #12]
 80019ac:	f000 fb3e 	bl	800202c <mix>
 80019b0:	ed87 0a03 	vstr	s0, [r7, #12]
    return out;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	ee07 3a90 	vmov	s15, r3
}
 80019ba:	eeb0 0a67 	vmov.f32	s0, s15
 80019be:	3710      	adds	r7, #16
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <bitcrusher_rs_pedal_init>:

// BITCRUSHER resolution

void bitcrusher_rs_pedal_init(pedal_config_t *conf) {
 80019c4:	b490      	push	{r4, r7}
 80019c6:	b08e      	sub	sp, #56	; 0x38
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
    conf->int_params[REDUCT_INTENSITY] = (int_parameter_t){12, 1, 16, 1};
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4a0e      	ldr	r2, [pc, #56]	; (8001a08 <bitcrusher_rs_pedal_init+0x44>)
 80019d0:	f103 0420 	add.w	r4, r3, #32
 80019d4:	4613      	mov	r3, r2
 80019d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_1] = (float_parameter_t){0.5F, 0.F, 1.F, 0.1F};
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4a0b      	ldr	r2, [pc, #44]	; (8001a0c <bitcrusher_rs_pedal_init+0x48>)
 80019e0:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80019e4:	4613      	mov	r3, r2
 80019e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_2] = (float_parameter_t){0.5F, 0.F, 1.F, 0.1F};
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4a07      	ldr	r2, [pc, #28]	; (8001a0c <bitcrusher_rs_pedal_init+0x48>)
 80019f0:	f103 0480 	add.w	r4, r3, #128	; 0x80
 80019f4:	4613      	mov	r3, r2
 80019f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80019fc:	bf00      	nop
 80019fe:	3738      	adds	r7, #56	; 0x38
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bc90      	pop	{r4, r7}
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	0800d0d4 	.word	0x0800d0d4
 8001a0c:	0800d0e4 	.word	0x0800d0e4

08001a10 <bitcrusher_rs_process>:

float bitcrusher_rs_process(float in, pedal_config_t *conf) {
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	ed87 0a01 	vstr	s0, [r7, #4]
 8001a1a:	6038      	str	r0, [r7, #0]
    int16_t shift = conf->int_params[REDUCT_INTENSITY].value;
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	6a1b      	ldr	r3, [r3, #32]
 8001a20:	81fb      	strh	r3, [r7, #14]
    int16_t _out = (int16_t)in;
 8001a22:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a2a:	ee17 3a90 	vmov	r3, s15
 8001a2e:	81bb      	strh	r3, [r7, #12]
    _out = _out >> shift;
 8001a30:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001a34:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a38:	fa42 f303 	asr.w	r3, r2, r3
 8001a3c:	81bb      	strh	r3, [r7, #12]
    _out = _out << shift;
 8001a3e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001a42:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	81bb      	strh	r3, [r7, #12]
    _out += (2 << shift -2);
 8001a4c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a50:	3b02      	subs	r3, #2
 8001a52:	2202      	movs	r2, #2
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	b29a      	uxth	r2, r3
 8001a5a:	89bb      	ldrh	r3, [r7, #12]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	81bb      	strh	r3, [r7, #12]
    float out = (float)_out;
 8001a62:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001a66:	ee07 3a90 	vmov	s15, r3
 8001a6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a6e:	edc7 7a02 	vstr	s15, [r7, #8]
    out = mix(out, in, conf->float_params[BALANCE_1].value, conf->float_params[BALANCE_2].value);
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8001a7e:	eef0 1a47 	vmov.f32	s3, s14
 8001a82:	eeb0 1a67 	vmov.f32	s2, s15
 8001a86:	edd7 0a01 	vldr	s1, [r7, #4]
 8001a8a:	ed97 0a02 	vldr	s0, [r7, #8]
 8001a8e:	f000 facd 	bl	800202c <mix>
 8001a92:	ed87 0a02 	vstr	s0, [r7, #8]
    return out;
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	ee07 3a90 	vmov	s15, r3
}
 8001a9c:	eeb0 0a67 	vmov.f32	s0, s15
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
	...

08001aa8 <tremolo_pedal_init>:

// TREMOLO

void tremolo_pedal_init(pedal_config_t *conf) {
 8001aa8:	b490      	push	{r4, r7}
 8001aaa:	b092      	sub	sp, #72	; 0x48
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
    conf->int_params[COUNTER] = (int_parameter_t){0, 1, 0, 0};
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	611a      	str	r2, [r3, #16]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2201      	movs	r2, #1
 8001aba:	615a      	str	r2, [r3, #20]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	619a      	str	r2, [r3, #24]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	61da      	str	r2, [r3, #28]
    conf->float_params[SPEED] = (float_parameter_t){2.F, 0.1F, 10.F, 0.1F};
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4a0e      	ldr	r2, [pc, #56]	; (8001b04 <tremolo_pedal_init+0x5c>)
 8001acc:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ad4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_1] = (float_parameter_t){0.2F, 0.F, 1.F, 0.1F};
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4a0b      	ldr	r2, [pc, #44]	; (8001b08 <tremolo_pedal_init+0x60>)
 8001adc:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ae4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_2] = (float_parameter_t){0.8F, 0.F, 1.F, 0.1F};
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	4a08      	ldr	r2, [pc, #32]	; (8001b0c <tremolo_pedal_init+0x64>)
 8001aec:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8001af0:	4613      	mov	r3, r2
 8001af2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001af4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001af8:	bf00      	nop
 8001afa:	3748      	adds	r7, #72	; 0x48
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bc90      	pop	{r4, r7}
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	0800d0f4 	.word	0x0800d0f4
 8001b08:	0800d104 	.word	0x0800d104
 8001b0c:	0800d114 	.word	0x0800d114

08001b10 <tremolo_process>:

float tremolo_process(float in, pedal_config_t *conf) {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b1a:	6038      	str	r0, [r7, #0]
    float tone = 440.0F;
 8001b1c:	4b1c      	ldr	r3, [pc, #112]	; (8001b90 <tremolo_process+0x80>)
 8001b1e:	60fb      	str	r3, [r7, #12]
    float out = in * wave_gen('s', conf->int_params[COUNTER].value, tone * conf->float_params[SPEED].value);
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	691b      	ldr	r3, [r3, #16]
 8001b24:	461a      	mov	r2, r3
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8001b2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b34:	eeb0 0a67 	vmov.f32	s0, s15
 8001b38:	4611      	mov	r1, r2
 8001b3a:	2073      	movs	r0, #115	; 0x73
 8001b3c:	f000 fb42 	bl	80021c4 <wave_gen>
 8001b40:	eeb0 7a40 	vmov.f32	s14, s0
 8001b44:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b4c:	edc7 7a02 	vstr	s15, [r7, #8]
    conf->int_params[COUNTER].value++;
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	691b      	ldr	r3, [r3, #16]
 8001b54:	1c5a      	adds	r2, r3, #1
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	611a      	str	r2, [r3, #16]
    out = mix(out, in, conf->float_params[BALANCE_1].value, conf->float_params[BALANCE_2].value);
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8001b66:	eef0 1a47 	vmov.f32	s3, s14
 8001b6a:	eeb0 1a67 	vmov.f32	s2, s15
 8001b6e:	edd7 0a01 	vldr	s1, [r7, #4]
 8001b72:	ed97 0a02 	vldr	s0, [r7, #8]
 8001b76:	f000 fa59 	bl	800202c <mix>
 8001b7a:	ed87 0a02 	vstr	s0, [r7, #8]
    return out;
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	ee07 3a90 	vmov	s15, r3
}
 8001b84:	eeb0 0a67 	vmov.f32	s0, s15
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	43dc0000 	.word	0x43dc0000

08001b94 <overdrive_sqrt_pedal_init>:

// OVERDRIVE_SQRT

void overdrive_sqrt_pedal_init(pedal_config_t *conf) {
 8001b94:	b490      	push	{r4, r7}
 8001b96:	b092      	sub	sp, #72	; 0x48
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
    conf->float_params[INTENSITY] = (float_parameter_t){500.F, 0.F, 2000.F, 100.F};
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	4a12      	ldr	r2, [pc, #72]	; (8001be8 <overdrive_sqrt_pedal_init+0x54>)
 8001ba0:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ba8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[THRESHOLD_HIGH] = (float_parameter_t){32767.F, 0.F, 32767.F, 1.F};
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4a0f      	ldr	r2, [pc, #60]	; (8001bec <overdrive_sqrt_pedal_init+0x58>)
 8001bb0:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bb8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_1] = (float_parameter_t){0.25F, 0.F, 1.F, 0.1F};
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4a0c      	ldr	r2, [pc, #48]	; (8001bf0 <overdrive_sqrt_pedal_init+0x5c>)
 8001bc0:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bc8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_2] = (float_parameter_t){0.75F, 0.F, 1.F, 0.1F};
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a09      	ldr	r2, [pc, #36]	; (8001bf4 <overdrive_sqrt_pedal_init+0x60>)
 8001bd0:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bd8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001bdc:	bf00      	nop
 8001bde:	3748      	adds	r7, #72	; 0x48
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bc90      	pop	{r4, r7}
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	0800d124 	.word	0x0800d124
 8001bec:	0800d094 	.word	0x0800d094
 8001bf0:	0800d134 	.word	0x0800d134
 8001bf4:	0800d144 	.word	0x0800d144

08001bf8 <overdrive_sqrt_process>:

float overdrive_sqrt_process(float in, pedal_config_t *conf) {
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	ed87 0a01 	vstr	s0, [r7, #4]
 8001c02:	6038      	str	r0, [r7, #0]
    float out;
    if (in > 0.0F) {
 8001c04:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c08:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c10:	dd06      	ble.n	8001c20 <overdrive_sqrt_process+0x28>
        out = square_root(in);
 8001c12:	ed97 0a01 	vldr	s0, [r7, #4]
 8001c16:	f000 faa4 	bl	8002162 <square_root>
 8001c1a:	ed87 0a03 	vstr	s0, [r7, #12]
 8001c1e:	e00d      	b.n	8001c3c <overdrive_sqrt_process+0x44>
    } else {
        out = -square_root(-in);
 8001c20:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c24:	eef1 7a67 	vneg.f32	s15, s15
 8001c28:	eeb0 0a67 	vmov.f32	s0, s15
 8001c2c:	f000 fa99 	bl	8002162 <square_root>
 8001c30:	eef0 7a40 	vmov.f32	s15, s0
 8001c34:	eef1 7a67 	vneg.f32	s15, s15
 8001c38:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    out = out * conf->float_params[INTENSITY].value;
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001c42:	ed97 7a03 	vldr	s14, [r7, #12]
 8001c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c4a:	edc7 7a03 	vstr	s15, [r7, #12]
    out = hard_clip(out, conf->float_params[THRESHOLD_HIGH].value);
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001c54:	eef0 0a67 	vmov.f32	s1, s15
 8001c58:	ed97 0a03 	vldr	s0, [r7, #12]
 8001c5c:	f000 fa06 	bl	800206c <hard_clip>
 8001c60:	ed87 0a03 	vstr	s0, [r7, #12]
    out = mix(out, in, conf->float_params[BALANCE_1].value, conf->float_params[BALANCE_2].value);
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8001c70:	eef0 1a47 	vmov.f32	s3, s14
 8001c74:	eeb0 1a67 	vmov.f32	s2, s15
 8001c78:	edd7 0a01 	vldr	s1, [r7, #4]
 8001c7c:	ed97 0a03 	vldr	s0, [r7, #12]
 8001c80:	f000 f9d4 	bl	800202c <mix>
 8001c84:	ed87 0a03 	vstr	s0, [r7, #12]
    return out;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	ee07 3a90 	vmov	s15, r3
}
 8001c8e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c92:	3710      	adds	r7, #16
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <amplifier_pedal_init>:

// AMPLIFIER

void amplifier_pedal_init(pedal_config_t *conf) {
 8001c98:	b490      	push	{r4, r7}
 8001c9a:	b08a      	sub	sp, #40	; 0x28
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
    conf->float_params[INTENSITY] = (float_parameter_t){0.5F, 0.1F, 10.F, 0.1F};
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a0a      	ldr	r2, [pc, #40]	; (8001ccc <amplifier_pedal_init+0x34>)
 8001ca4:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8001ca8:	4613      	mov	r3, r2
 8001caa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[THRESHOLD_HIGH] = (float_parameter_t){32767.F, 0.F, 32767.F, 1.F};
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4a07      	ldr	r2, [pc, #28]	; (8001cd0 <amplifier_pedal_init+0x38>)
 8001cb4:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8001cb8:	4613      	mov	r3, r2
 8001cba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cbc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001cc0:	bf00      	nop
 8001cc2:	3728      	adds	r7, #40	; 0x28
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bc90      	pop	{r4, r7}
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	0800d154 	.word	0x0800d154
 8001cd0:	0800d094 	.word	0x0800d094

08001cd4 <amplifier_process>:

float amplifier_process(float in, pedal_config_t *conf) {
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	ed87 0a01 	vstr	s0, [r7, #4]
 8001cde:	6038      	str	r0, [r7, #0]
    float out = in * conf->float_params[INTENSITY].value;
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001ce6:	ed97 7a01 	vldr	s14, [r7, #4]
 8001cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cee:	edc7 7a03 	vstr	s15, [r7, #12]
    out = hard_clip(out, conf->float_params[THRESHOLD_HIGH].value);
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001cf8:	eef0 0a67 	vmov.f32	s1, s15
 8001cfc:	ed97 0a03 	vldr	s0, [r7, #12]
 8001d00:	f000 f9b4 	bl	800206c <hard_clip>
 8001d04:	ed87 0a03 	vstr	s0, [r7, #12]
    return out;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	ee07 3a90 	vmov	s15, r3
}
 8001d0e:	eeb0 0a67 	vmov.f32	s0, s15
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <dyn_amplifier_pedal_init>:

// DYN_AMPLIFIER

void dyn_amplifier_pedal_init(pedal_config_t *conf) {
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
    //conf->float_params[GAIN_INTENSITY] = (float_parameter_t){1000, 0.1, 10, 0.1};
    //conf->float_params[CLIP_THRESHOLD] = (float_parameter_t){32767, 0, 32767, 1};
    //conf->float_params[SOFT_THRESHOLD] = (float_parameter_t){28000, 0, 32767, 1};
    //conf->float_params[BALANCE] = (float_parameter_t){0.5, 0, 1, 0.1};
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <dyn_amplifier_process>:

float dyn_amplifier_process(float in, pedal_config_t *conf) {
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	ed87 0a01 	vstr	s0, [r7, #4]
 8001d36:	6038      	str	r0, [r7, #0]
    //    else if (max < conf->float_params[SOFT_THRESHOLD].value) dyn += 0.01;
    //    max = 0;
    //}
    //out = hard_clip(out, conf->float_params[CLIP_THRESHOLD].value);
    //return out;
    return in;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	ee07 3a90 	vmov	s15, r3
}
 8001d3e:	eeb0 0a67 	vmov.f32	s0, s15
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <low_pass_filter_pedal_init>:

// LPF

void low_pass_filter_pedal_init(pedal_config_t *conf) {
 8001d4c:	b490      	push	{r4, r7}
 8001d4e:	b092      	sub	sp, #72	; 0x48
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
    conf->float_params[INTENSITY] = (float_parameter_t){0.9F, 0.0F, 1.0F, 0.01F};
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4a11      	ldr	r2, [pc, #68]	; (8001d9c <low_pass_filter_pedal_init+0x50>)
 8001d58:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_1] = (float_parameter_t){1.F, 0.F, 1.F, 0.1F};
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a0e      	ldr	r2, [pc, #56]	; (8001da0 <low_pass_filter_pedal_init+0x54>)
 8001d68:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_2] = (float_parameter_t){0.F, 0.F, 1.F, 0.1F};
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a0b      	ldr	r2, [pc, #44]	; (8001da4 <low_pass_filter_pedal_init+0x58>)
 8001d78:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[PAST] = (float_parameter_t){0.F, 0.F, 0.F, 0.F};
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	33b0      	adds	r3, #176	; 0xb0
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	60da      	str	r2, [r3, #12]
}
 8001d92:	bf00      	nop
 8001d94:	3748      	adds	r7, #72	; 0x48
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bc90      	pop	{r4, r7}
 8001d9a:	4770      	bx	lr
 8001d9c:	0800d164 	.word	0x0800d164
 8001da0:	0800d0b4 	.word	0x0800d0b4
 8001da4:	0800d0c4 	.word	0x0800d0c4

08001da8 <low_pass_filter_process>:

float low_pass_filter_process(float in, pedal_config_t *conf) {
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	ed87 0a01 	vstr	s0, [r7, #4]
 8001db2:	6038      	str	r0, [r7, #0]
    float alpha = conf->float_params[INTENSITY].value;
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db8:	60fb      	str	r3, [r7, #12]
    float out = conf->float_params[PAST].value * alpha + (1.F - alpha) * in;
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 8001dc0:	edd7 7a03 	vldr	s15, [r7, #12]
 8001dc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001dcc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001dd0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001dd4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ddc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001de0:	edc7 7a02 	vstr	s15, [r7, #8]
    conf->float_params[PAST].value = out;
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	68ba      	ldr	r2, [r7, #8]
 8001de8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    out = mix(out, in, conf->float_params[BALANCE_1].value, conf->float_params[BALANCE_2].value);
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8001df8:	eef0 1a47 	vmov.f32	s3, s14
 8001dfc:	eeb0 1a67 	vmov.f32	s2, s15
 8001e00:	edd7 0a01 	vldr	s1, [r7, #4]
 8001e04:	ed97 0a02 	vldr	s0, [r7, #8]
 8001e08:	f000 f910 	bl	800202c <mix>
 8001e0c:	ed87 0a02 	vstr	s0, [r7, #8]
    return out;
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	ee07 3a90 	vmov	s15, r3
}
 8001e16:	eeb0 0a67 	vmov.f32	s0, s15
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <fuzz_pedal_init>:

// FUZZ

void fuzz_pedal_init(pedal_config_t *conf) {
 8001e20:	b490      	push	{r4, r7}
 8001e22:	b09e      	sub	sp, #120	; 0x78
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
    conf->int_params[COUNTER] = (int_parameter_t){0, 1, 0, 0};
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	611a      	str	r2, [r3, #16]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2201      	movs	r2, #1
 8001e32:	615a      	str	r2, [r3, #20]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	619a      	str	r2, [r3, #24]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	61da      	str	r2, [r3, #28]
    conf->float_params[INTENSITY] = (float_parameter_t){4.F, 1.F, 10.F, 0.5F};
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4a1a      	ldr	r2, [pc, #104]	; (8001eac <fuzz_pedal_init+0x8c>)
 8001e44:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8001e48:	4613      	mov	r3, r2
 8001e4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[THRESHOLD_HIGH] = (float_parameter_t){32767.F, 0.F, 32767.F, 1.F};
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a17      	ldr	r2, [pc, #92]	; (8001eb0 <fuzz_pedal_init+0x90>)
 8001e54:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8001e58:	4613      	mov	r3, r2
 8001e5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[HEIGHT] = (float_parameter_t){2048.F, 0.F, 8192.F, 32.F};
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4a14      	ldr	r2, [pc, #80]	; (8001eb4 <fuzz_pedal_init+0x94>)
 8001e64:	f103 0490 	add.w	r4, r3, #144	; 0x90
 8001e68:	4613      	mov	r3, r2
 8001e6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[SPEED] = (float_parameter_t){1.F, 0.1F, 10.F, 0.1F};
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4a11      	ldr	r2, [pc, #68]	; (8001eb8 <fuzz_pedal_init+0x98>)
 8001e74:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8001e78:	4613      	mov	r3, r2
 8001e7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_1] = (float_parameter_t){1.F, 0.F, 1.F, 0.1F};
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4a0e      	ldr	r2, [pc, #56]	; (8001ebc <fuzz_pedal_init+0x9c>)
 8001e84:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8001e88:	4613      	mov	r3, r2
 8001e8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_2] = (float_parameter_t){0.F, 0.F, 1.F, 0.1F};
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4a0b      	ldr	r2, [pc, #44]	; (8001ec0 <fuzz_pedal_init+0xa0>)
 8001e94:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8001e98:	4613      	mov	r3, r2
 8001e9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001ea0:	bf00      	nop
 8001ea2:	3778      	adds	r7, #120	; 0x78
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bc90      	pop	{r4, r7}
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	0800d084 	.word	0x0800d084
 8001eb0:	0800d094 	.word	0x0800d094
 8001eb4:	0800d174 	.word	0x0800d174
 8001eb8:	0800d184 	.word	0x0800d184
 8001ebc:	0800d0b4 	.word	0x0800d0b4
 8001ec0:	0800d0c4 	.word	0x0800d0c4

08001ec4 <fuzz_process>:

float fuzz_process(float in, pedal_config_t *conf) {
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b088      	sub	sp, #32
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	ed87 0a01 	vstr	s0, [r7, #4]
 8001ece:	6038      	str	r0, [r7, #0]
    float out = in * conf->float_params[INTENSITY].value;
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001ed6:	ed97 7a01 	vldr	s14, [r7, #4]
 8001eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ede:	edc7 7a07 	vstr	s15, [r7, #28]
    float threshold_high = conf->float_params[THRESHOLD_HIGH].value;
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee6:	61bb      	str	r3, [r7, #24]
    float height = conf->float_params[HEIGHT].value;
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eee:	617b      	str	r3, [r7, #20]
    float speed = conf->float_params[SPEED].value;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001ef6:	613b      	str	r3, [r7, #16]
    float tone = 440.0F;
 8001ef8:	4b3e      	ldr	r3, [pc, #248]	; (8001ff4 <fuzz_process+0x130>)
 8001efa:	60fb      	str	r3, [r7, #12]

    out = hard_clip(out, threshold_high);
 8001efc:	edd7 0a06 	vldr	s1, [r7, #24]
 8001f00:	ed97 0a07 	vldr	s0, [r7, #28]
 8001f04:	f000 f8b2 	bl	800206c <hard_clip>
 8001f08:	ed87 0a07 	vstr	s0, [r7, #28]
    if (out == threshold_high) {
 8001f0c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001f10:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f14:	eeb4 7a67 	vcmp.f32	s14, s15
 8001f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f1c:	d11e      	bne.n	8001f5c <fuzz_process+0x98>
        out += (wave_gen('s', conf->int_params[COUNTER].value, tone * speed) - 1) * height;
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	ed97 7a03 	vldr	s14, [r7, #12]
 8001f26:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f2e:	eeb0 0a67 	vmov.f32	s0, s15
 8001f32:	4619      	mov	r1, r3
 8001f34:	2073      	movs	r0, #115	; 0x73
 8001f36:	f000 f945 	bl	80021c4 <wave_gen>
 8001f3a:	eef0 7a40 	vmov.f32	s15, s0
 8001f3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001f42:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001f46:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f4e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001f52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f56:	edc7 7a07 	vstr	s15, [r7, #28]
 8001f5a:	e02c      	b.n	8001fb6 <fuzz_process+0xf2>
    } else if (out == - threshold_high - 1.F) {
 8001f5c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f60:	eef1 7a67 	vneg.f32	s15, s15
 8001f64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001f68:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001f6c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001f70:	eeb4 7a67 	vcmp.f32	s14, s15
 8001f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f78:	d11d      	bne.n	8001fb6 <fuzz_process+0xf2>
        out += (wave_gen('s', conf->int_params[COUNTER].value, tone * speed) + 1) * height;
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001f82:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f8a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f8e:	4619      	mov	r1, r3
 8001f90:	2073      	movs	r0, #115	; 0x73
 8001f92:	f000 f917 	bl	80021c4 <wave_gen>
 8001f96:	eef0 7a40 	vmov.f32	s15, s0
 8001f9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001f9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001fa2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001fa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001faa:	ed97 7a07 	vldr	s14, [r7, #28]
 8001fae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fb2:	edc7 7a07 	vstr	s15, [r7, #28]
    }
    conf->int_params[COUNTER].value++;
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	1c5a      	adds	r2, r3, #1
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	611a      	str	r2, [r3, #16]
    out = mix(out, in, conf->float_params[BALANCE_1].value, conf->float_params[BALANCE_2].value);
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8001fcc:	eef0 1a47 	vmov.f32	s3, s14
 8001fd0:	eeb0 1a67 	vmov.f32	s2, s15
 8001fd4:	edd7 0a01 	vldr	s1, [r7, #4]
 8001fd8:	ed97 0a07 	vldr	s0, [r7, #28]
 8001fdc:	f000 f826 	bl	800202c <mix>
 8001fe0:	ed87 0a07 	vstr	s0, [r7, #28]
    return out;
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	ee07 3a90 	vmov	s15, r3
}
 8001fea:	eeb0 0a67 	vmov.f32	s0, s15
 8001fee:	3720      	adds	r7, #32
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	43dc0000 	.word	0x43dc0000

08001ff8 <bypass_pedal_init>:

// BYPASS

void bypass_pedal_init(pedal_config_t *conf) {
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
    return;
 8002000:	bf00      	nop
}
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <bypass_process>:

float bypass_process(float in, pedal_config_t *conf) {
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	ed87 0a01 	vstr	s0, [r7, #4]
 8002016:	6038      	str	r0, [r7, #0]
    return in;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	ee07 3a90 	vmov	s15, r3
}
 800201e:	eeb0 0a67 	vmov.f32	s0, s15
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <mix>:


float mix(float in_1, float in_2, float balance_1, float balance_2) {
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	ed87 0a03 	vstr	s0, [r7, #12]
 8002036:	edc7 0a02 	vstr	s1, [r7, #8]
 800203a:	ed87 1a01 	vstr	s2, [r7, #4]
 800203e:	edc7 1a00 	vstr	s3, [r7]
    return in_1 * balance_1 + in_2 * balance_2;
 8002042:	ed97 7a03 	vldr	s14, [r7, #12]
 8002046:	edd7 7a01 	vldr	s15, [r7, #4]
 800204a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800204e:	edd7 6a02 	vldr	s13, [r7, #8]
 8002052:	edd7 7a00 	vldr	s15, [r7]
 8002056:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800205a:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800205e:	eeb0 0a67 	vmov.f32	s0, s15
 8002062:	3714      	adds	r7, #20
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <hard_clip>:

float hard_clip(float in, float clip_threshold) {
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	ed87 0a01 	vstr	s0, [r7, #4]
 8002076:	edc7 0a00 	vstr	s1, [r7]
    if (in > clip_threshold) {
 800207a:	ed97 7a01 	vldr	s14, [r7, #4]
 800207e:	edd7 7a00 	vldr	s15, [r7]
 8002082:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800208a:	dd02      	ble.n	8002092 <hard_clip+0x26>
        return clip_threshold;
 800208c:	edd7 7a00 	vldr	s15, [r7]
 8002090:	e015      	b.n	80020be <hard_clip+0x52>
    } else if (in < -clip_threshold) {
 8002092:	edd7 7a00 	vldr	s15, [r7]
 8002096:	eef1 7a67 	vneg.f32	s15, s15
 800209a:	ed97 7a01 	vldr	s14, [r7, #4]
 800209e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020a6:	d508      	bpl.n	80020ba <hard_clip+0x4e>
        return -clip_threshold - 1;
 80020a8:	edd7 7a00 	vldr	s15, [r7]
 80020ac:	eef1 7a67 	vneg.f32	s15, s15
 80020b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80020b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80020b8:	e001      	b.n	80020be <hard_clip+0x52>
    }
    return in;
 80020ba:	edd7 7a01 	vldr	s15, [r7, #4]
}
 80020be:	eeb0 0a67 	vmov.f32	s0, s15
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <soft_clip>:

float soft_clip(float in, float soft_threshold, float softener) {
 80020cc:	b480      	push	{r7}
 80020ce:	b087      	sub	sp, #28
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	ed87 0a03 	vstr	s0, [r7, #12]
 80020d6:	edc7 0a02 	vstr	s1, [r7, #8]
 80020da:	ed87 1a01 	vstr	s2, [r7, #4]
    float out;
    if (in > soft_threshold) {
 80020de:	ed97 7a03 	vldr	s14, [r7, #12]
 80020e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80020e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020ee:	dd10      	ble.n	8002112 <soft_clip+0x46>
        out = soft_threshold + (in - soft_threshold) / softener;
 80020f0:	ed97 7a03 	vldr	s14, [r7, #12]
 80020f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80020f8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80020fc:	ed97 7a01 	vldr	s14, [r7, #4]
 8002100:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002104:	ed97 7a02 	vldr	s14, [r7, #8]
 8002108:	ee77 7a27 	vadd.f32	s15, s14, s15
 800210c:	edc7 7a05 	vstr	s15, [r7, #20]
 8002110:	e01d      	b.n	800214e <soft_clip+0x82>
    } else if (in < -soft_threshold) {
 8002112:	edd7 7a02 	vldr	s15, [r7, #8]
 8002116:	eef1 7a67 	vneg.f32	s15, s15
 800211a:	ed97 7a03 	vldr	s14, [r7, #12]
 800211e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002126:	d510      	bpl.n	800214a <soft_clip+0x7e>
        out = -soft_threshold + (in + soft_threshold) / softener;
 8002128:	ed97 7a03 	vldr	s14, [r7, #12]
 800212c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002130:	ee77 6a27 	vadd.f32	s13, s14, s15
 8002134:	edd7 7a01 	vldr	s15, [r7, #4]
 8002138:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800213c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002140:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002144:	edc7 7a05 	vstr	s15, [r7, #20]
 8002148:	e001      	b.n	800214e <soft_clip+0x82>
    } else {
        out = in;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	617b      	str	r3, [r7, #20]
    }
    return out;
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	ee07 3a90 	vmov	s15, r3
}
 8002154:	eeb0 0a67 	vmov.f32	s0, s15
 8002158:	371c      	adds	r7, #28
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <square_root>:

float square_root(float in) {
 8002162:	b480      	push	{r7}
 8002164:	b085      	sub	sp, #20
 8002166:	af00      	add	r7, sp, #0
 8002168:	ed87 0a01 	vstr	s0, [r7, #4]
    float out;
    out = in * 0.5F;
 800216c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002170:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002174:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002178:	edc7 7a03 	vstr	s15, [r7, #12]
    for (u_int8_t i = 0; i < 8; i++) {
 800217c:	2300      	movs	r3, #0
 800217e:	72fb      	strb	r3, [r7, #11]
 8002180:	e012      	b.n	80021a8 <square_root+0x46>
        out = 0.5F * (out + (in / out));
 8002182:	edd7 6a01 	vldr	s13, [r7, #4]
 8002186:	edd7 7a03 	vldr	s15, [r7, #12]
 800218a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800218e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002192:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002196:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800219a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800219e:	edc7 7a03 	vstr	s15, [r7, #12]
    for (u_int8_t i = 0; i < 8; i++) {
 80021a2:	7afb      	ldrb	r3, [r7, #11]
 80021a4:	3301      	adds	r3, #1
 80021a6:	72fb      	strb	r3, [r7, #11]
 80021a8:	7afb      	ldrb	r3, [r7, #11]
 80021aa:	2b07      	cmp	r3, #7
 80021ac:	d9e9      	bls.n	8002182 <square_root+0x20>
    }
    return out;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	ee07 3a90 	vmov	s15, r3
}
 80021b4:	eeb0 0a67 	vmov.f32	s0, s15
 80021b8:	3714      	adds	r7, #20
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
	...

080021c4 <wave_gen>:

float wave_gen(char t, u_int32_t i, float tone) {
 80021c4:	b580      	push	{r7, lr}
 80021c6:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	4602      	mov	r2, r0
 80021ce:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80021d2:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80021d6:	6019      	str	r1, [r3, #0]
 80021d8:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80021dc:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80021e0:	ed83 0a00 	vstr	s0, [r3]
 80021e4:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80021e8:	f2a3 2311 	subw	r3, r3, #529	; 0x211
 80021ec:	701a      	strb	r2, [r3, #0]

    float sin_table[128] = { 0.000000F, 0.024541F, 0.049068F, 0.073565F, 0.098017F, 0.122411F, 0.146730F, 0.170962F, 0.195090F, 0.219101F, 0.242980F, 0.266713F, 0.290284F, 0.313681F, 0.336890F, 0.359895F, 0.382683F, 0.405241F, 0.427555F, 0.449611F, 0.471396F, 0.492898F, 0.514102F, 0.534997F, 0.555570F, 0.575808F, 0.595699F, 0.615231F, 0.634393F, 0.653172F, 0.671559F, 0.689540F, 0.707106F, 0.724247F, 0.740951F, 0.757208F, 0.773010F, 0.788346F, 0.803207F, 0.817584F, 0.831469F, 0.844853F, 0.857728F, 0.870087F, 0.881921F, 0.893224F, 0.903989F, 0.914209F, 0.923879F, 0.932992F, 0.941544F, 0.949528F, 0.956940F, 0.963776F, 0.970031F, 0.975702F, 0.980785F, 0.985277F, 0.989176F, 0.992479F, 0.995185F, 0.997290F, 0.998795F, 0.999699F, 1.000000F, 0.999699F, 0.998796F, 0.997291F, 0.995185F, 0.992480F, 0.989177F, 0.985278F, 0.980786F, 0.975702F, 0.970032F, 0.963776F, 0.956941F, 0.949529F, 0.941545F, 0.932993F, 0.923880F, 0.914210F, 0.903990F, 0.893225F, 0.881922F, 0.870088F, 0.857729F, 0.844855F, 0.831471F, 0.817586F, 0.803209F, 0.788348F, 0.773012F, 0.757210F, 0.740952F, 0.724248F, 0.707108F, 0.689542F, 0.671560F, 0.653174F, 0.634395F, 0.615233F, 0.595701F, 0.575810F, 0.555572F, 0.534999F, 0.514105F, 0.492900F, 0.471399F, 0.449613F, 0.427557F, 0.405243F, 0.382685F, 0.359897F, 0.336892F, 0.313684F, 0.290287F, 0.266715F, 0.242982F, 0.219104F, 0.195093F, 0.170964F, 0.146733F, 0.122413F, 0.098019F, 0.073567F, 0.049070F, 0.024544F };
 80021ee:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80021f2:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80021f6:	4a33      	ldr	r2, [pc, #204]	; (80022c4 <wave_gen+0x100>)
 80021f8:	4618      	mov	r0, r3
 80021fa:	4611      	mov	r1, r2
 80021fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002200:	461a      	mov	r2, r3
 8002202:	f00a fabd 	bl	800c780 <memcpy>
    float period_f = 44180.F / tone;
 8002206:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800220a:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800220e:	eddf 6a2e 	vldr	s13, [pc, #184]	; 80022c8 <wave_gen+0x104>
 8002212:	ed93 7a00 	vldr	s14, [r3]
 8002216:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800221a:	edc7 7a87 	vstr	s15, [r7, #540]	; 0x21c
    u_int32_t period_i = period_f;
 800221e:	edd7 7a87 	vldr	s15, [r7, #540]	; 0x21c
 8002222:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002226:	ee17 3a90 	vmov	r3, s15
 800222a:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
    u_int32_t table_index = (i * 256 / period_i) % 256;
 800222e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8002232:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	021a      	lsls	r2, r3, #8
 800223a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800223e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002242:	b2db      	uxtb	r3, r3
 8002244:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214

    if (t == 's') {
 8002248:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800224c:	f2a3 2311 	subw	r3, r3, #529	; 0x211
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	2b73      	cmp	r3, #115	; 0x73
 8002254:	d11c      	bne.n	8002290 <wave_gen+0xcc>
        if (table_index <= 127) {
 8002256:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800225a:	2b7f      	cmp	r3, #127	; 0x7f
 800225c:	d80a      	bhi.n	8002274 <wave_gen+0xb0>
            return sin_table[table_index];
 800225e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8002262:	f5a3 7203 	sub.w	r2, r3, #524	; 0x20c
 8002266:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	4413      	add	r3, r2
 800226e:	edd3 7a00 	vldr	s15, [r3]
 8002272:	e020      	b.n	80022b6 <wave_gen+0xf2>
        } else {
            return -sin_table[table_index - 128];
 8002274:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8002278:	3b80      	subs	r3, #128	; 0x80
 800227a:	f507 7208 	add.w	r2, r7, #544	; 0x220
 800227e:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	4413      	add	r3, r2
 8002286:	edd3 7a00 	vldr	s15, [r3]
 800228a:	eef1 7a67 	vneg.f32	s15, s15
 800228e:	e012      	b.n	80022b6 <wave_gen+0xf2>
        }
    } else if (t == 'q') {
 8002290:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8002294:	f2a3 2311 	subw	r3, r3, #529	; 0x211
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	2b71      	cmp	r3, #113	; 0x71
 800229c:	d109      	bne.n	80022b2 <wave_gen+0xee>
        if (table_index <= 127) {
 800229e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80022a2:	2b7f      	cmp	r3, #127	; 0x7f
 80022a4:	d802      	bhi.n	80022ac <wave_gen+0xe8>
            return -1.F;
 80022a6:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80022aa:	e004      	b.n	80022b6 <wave_gen+0xf2>
        } else {
            return 1.F;
 80022ac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80022b0:	e001      	b.n	80022b6 <wave_gen+0xf2>
        }
    } else {
        return 0;
 80022b2:	eddf 7a06 	vldr	s15, [pc, #24]	; 80022cc <wave_gen+0x108>
    }
}
 80022b6:	eeb0 0a67 	vmov.f32	s0, s15
 80022ba:	f507 7708 	add.w	r7, r7, #544	; 0x220
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	0800d194 	.word	0x0800d194
 80022c8:	472c9400 	.word	0x472c9400
 80022cc:	00000000 	.word	0x00000000

080022d0 <pedalboard_append>:



// PEDALBOARD

void pedalboard_append(pedalboard_t *p_pb, enum pedal_types type) {
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	460b      	mov	r3, r1
 80022da:	70fb      	strb	r3, [r7, #3]
    u_int8_t i = p_pb->active_pedals;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	73fb      	strb	r3, [r7, #15]

    if (p_pb->active_pedals < MAX_PEDALS_COUNT) {
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	2b07      	cmp	r3, #7
 80022e8:	f200 80dd 	bhi.w	80024a6 <pedalboard_append+0x1d6>
        u_int8_t i = p_pb->active_pedals;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	73bb      	strb	r3, [r7, #14]
        p_pb->pedals[i].type = type;
 80022f2:	7bbb      	ldrb	r3, [r7, #14]
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	21c8      	movs	r1, #200	; 0xc8
 80022f8:	fb01 f303 	mul.w	r3, r1, r3
 80022fc:	4413      	add	r3, r2
 80022fe:	33c4      	adds	r3, #196	; 0xc4
 8002300:	78fa      	ldrb	r2, [r7, #3]
 8002302:	701a      	strb	r2, [r3, #0]

        if (type == AMPLIFIER)
 8002304:	78fb      	ldrb	r3, [r7, #3]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d113      	bne.n	8002332 <pedalboard_append+0x62>
        {
            amplifier_pedal_init(&(p_pb->pedals[i].config));
 800230a:	7bbb      	ldrb	r3, [r7, #14]
 800230c:	22c8      	movs	r2, #200	; 0xc8
 800230e:	fb02 f303 	mul.w	r3, r2, r3
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	4413      	add	r3, r2
 8002316:	3304      	adds	r3, #4
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff fcbd 	bl	8001c98 <amplifier_pedal_init>
            p_pb->pedals[i].pedal_process = amplifier_process;
 800231e:	7bbb      	ldrb	r3, [r7, #14]
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	21c8      	movs	r1, #200	; 0xc8
 8002324:	fb01 f303 	mul.w	r3, r1, r3
 8002328:	4413      	add	r3, r2
 800232a:	33c8      	adds	r3, #200	; 0xc8
 800232c:	4a60      	ldr	r2, [pc, #384]	; (80024b0 <pedalboard_append+0x1e0>)
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	e0b3      	b.n	800249a <pedalboard_append+0x1ca>
        }
        else if (type == BITCRUSHER_RS)
 8002332:	78fb      	ldrb	r3, [r7, #3]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d113      	bne.n	8002360 <pedalboard_append+0x90>
        {
            bitcrusher_rs_pedal_init(&(p_pb->pedals[i].config));
 8002338:	7bbb      	ldrb	r3, [r7, #14]
 800233a:	22c8      	movs	r2, #200	; 0xc8
 800233c:	fb02 f303 	mul.w	r3, r2, r3
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	4413      	add	r3, r2
 8002344:	3304      	adds	r3, #4
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff fb3c 	bl	80019c4 <bitcrusher_rs_pedal_init>
            p_pb->pedals[i].pedal_process = bitcrusher_rs_process;
 800234c:	7bbb      	ldrb	r3, [r7, #14]
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	21c8      	movs	r1, #200	; 0xc8
 8002352:	fb01 f303 	mul.w	r3, r1, r3
 8002356:	4413      	add	r3, r2
 8002358:	33c8      	adds	r3, #200	; 0xc8
 800235a:	4a56      	ldr	r2, [pc, #344]	; (80024b4 <pedalboard_append+0x1e4>)
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	e09c      	b.n	800249a <pedalboard_append+0x1ca>
        }
        else if (type == DYN_AMPLIFIER)
 8002360:	78fb      	ldrb	r3, [r7, #3]
 8002362:	2b03      	cmp	r3, #3
 8002364:	d113      	bne.n	800238e <pedalboard_append+0xbe>
        {
            dyn_amplifier_pedal_init(&(p_pb->pedals[i].config));
 8002366:	7bbb      	ldrb	r3, [r7, #14]
 8002368:	22c8      	movs	r2, #200	; 0xc8
 800236a:	fb02 f303 	mul.w	r3, r2, r3
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	4413      	add	r3, r2
 8002372:	3304      	adds	r3, #4
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff fccf 	bl	8001d18 <dyn_amplifier_pedal_init>
            p_pb->pedals[i].pedal_process = dyn_amplifier_process;
 800237a:	7bbb      	ldrb	r3, [r7, #14]
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	21c8      	movs	r1, #200	; 0xc8
 8002380:	fb01 f303 	mul.w	r3, r1, r3
 8002384:	4413      	add	r3, r2
 8002386:	33c8      	adds	r3, #200	; 0xc8
 8002388:	4a4b      	ldr	r2, [pc, #300]	; (80024b8 <pedalboard_append+0x1e8>)
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	e085      	b.n	800249a <pedalboard_append+0x1ca>
        }
        else if (type == FUZZ)
 800238e:	78fb      	ldrb	r3, [r7, #3]
 8002390:	2b04      	cmp	r3, #4
 8002392:	d113      	bne.n	80023bc <pedalboard_append+0xec>
        {
            fuzz_pedal_init(&(p_pb->pedals[i].config));
 8002394:	7bbb      	ldrb	r3, [r7, #14]
 8002396:	22c8      	movs	r2, #200	; 0xc8
 8002398:	fb02 f303 	mul.w	r3, r2, r3
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	4413      	add	r3, r2
 80023a0:	3304      	adds	r3, #4
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff fd3c 	bl	8001e20 <fuzz_pedal_init>
            p_pb->pedals[i].pedal_process = fuzz_process;
 80023a8:	7bbb      	ldrb	r3, [r7, #14]
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	21c8      	movs	r1, #200	; 0xc8
 80023ae:	fb01 f303 	mul.w	r3, r1, r3
 80023b2:	4413      	add	r3, r2
 80023b4:	33c8      	adds	r3, #200	; 0xc8
 80023b6:	4a41      	ldr	r2, [pc, #260]	; (80024bc <pedalboard_append+0x1ec>)
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	e06e      	b.n	800249a <pedalboard_append+0x1ca>
        }
        else if (type == LPF)
 80023bc:	78fb      	ldrb	r3, [r7, #3]
 80023be:	2b05      	cmp	r3, #5
 80023c0:	d113      	bne.n	80023ea <pedalboard_append+0x11a>
        {
            low_pass_filter_pedal_init(&(p_pb->pedals[i].config));
 80023c2:	7bbb      	ldrb	r3, [r7, #14]
 80023c4:	22c8      	movs	r2, #200	; 0xc8
 80023c6:	fb02 f303 	mul.w	r3, r2, r3
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	4413      	add	r3, r2
 80023ce:	3304      	adds	r3, #4
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff fcbb 	bl	8001d4c <low_pass_filter_pedal_init>
            p_pb->pedals[i].pedal_process = low_pass_filter_process;
 80023d6:	7bbb      	ldrb	r3, [r7, #14]
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	21c8      	movs	r1, #200	; 0xc8
 80023dc:	fb01 f303 	mul.w	r3, r1, r3
 80023e0:	4413      	add	r3, r2
 80023e2:	33c8      	adds	r3, #200	; 0xc8
 80023e4:	4a36      	ldr	r2, [pc, #216]	; (80024c0 <pedalboard_append+0x1f0>)
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	e057      	b.n	800249a <pedalboard_append+0x1ca>
        }
        else if (type == OVERDRIVE)
 80023ea:	78fb      	ldrb	r3, [r7, #3]
 80023ec:	2b06      	cmp	r3, #6
 80023ee:	d113      	bne.n	8002418 <pedalboard_append+0x148>
        {
            overdrive_pedal_init(&(p_pb->pedals[i].config));
 80023f0:	7bbb      	ldrb	r3, [r7, #14]
 80023f2:	22c8      	movs	r2, #200	; 0xc8
 80023f4:	fb02 f303 	mul.w	r3, r2, r3
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	4413      	add	r3, r2
 80023fc:	3304      	adds	r3, #4
 80023fe:	4618      	mov	r0, r3
 8002400:	f7ff fa58 	bl	80018b4 <overdrive_pedal_init>
            p_pb->pedals[i].pedal_process = overdrive_process;
 8002404:	7bbb      	ldrb	r3, [r7, #14]
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	21c8      	movs	r1, #200	; 0xc8
 800240a:	fb01 f303 	mul.w	r3, r1, r3
 800240e:	4413      	add	r3, r2
 8002410:	33c8      	adds	r3, #200	; 0xc8
 8002412:	4a2c      	ldr	r2, [pc, #176]	; (80024c4 <pedalboard_append+0x1f4>)
 8002414:	601a      	str	r2, [r3, #0]
 8002416:	e040      	b.n	800249a <pedalboard_append+0x1ca>
        }
        else if (type == OVERDRIVE_SQRT)
 8002418:	78fb      	ldrb	r3, [r7, #3]
 800241a:	2b07      	cmp	r3, #7
 800241c:	d113      	bne.n	8002446 <pedalboard_append+0x176>
        {
            overdrive_sqrt_pedal_init(&(p_pb->pedals[i].config));
 800241e:	7bbb      	ldrb	r3, [r7, #14]
 8002420:	22c8      	movs	r2, #200	; 0xc8
 8002422:	fb02 f303 	mul.w	r3, r2, r3
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	4413      	add	r3, r2
 800242a:	3304      	adds	r3, #4
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff fbb1 	bl	8001b94 <overdrive_sqrt_pedal_init>
            p_pb->pedals[i].pedal_process = overdrive_sqrt_process;
 8002432:	7bbb      	ldrb	r3, [r7, #14]
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	21c8      	movs	r1, #200	; 0xc8
 8002438:	fb01 f303 	mul.w	r3, r1, r3
 800243c:	4413      	add	r3, r2
 800243e:	33c8      	adds	r3, #200	; 0xc8
 8002440:	4a21      	ldr	r2, [pc, #132]	; (80024c8 <pedalboard_append+0x1f8>)
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	e029      	b.n	800249a <pedalboard_append+0x1ca>
        }
        else if (type == TREMOLO)
 8002446:	78fb      	ldrb	r3, [r7, #3]
 8002448:	2b08      	cmp	r3, #8
 800244a:	d113      	bne.n	8002474 <pedalboard_append+0x1a4>
        {
            tremolo_pedal_init(&(p_pb->pedals[i].config));
 800244c:	7bbb      	ldrb	r3, [r7, #14]
 800244e:	22c8      	movs	r2, #200	; 0xc8
 8002450:	fb02 f303 	mul.w	r3, r2, r3
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	4413      	add	r3, r2
 8002458:	3304      	adds	r3, #4
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff fb24 	bl	8001aa8 <tremolo_pedal_init>
            p_pb->pedals[i].pedal_process = tremolo_process;
 8002460:	7bbb      	ldrb	r3, [r7, #14]
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	21c8      	movs	r1, #200	; 0xc8
 8002466:	fb01 f303 	mul.w	r3, r1, r3
 800246a:	4413      	add	r3, r2
 800246c:	33c8      	adds	r3, #200	; 0xc8
 800246e:	4a17      	ldr	r2, [pc, #92]	; (80024cc <pedalboard_append+0x1fc>)
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	e012      	b.n	800249a <pedalboard_append+0x1ca>
        }
        else
        {
            // BYPASS AS DEFAULT
            bypass_pedal_init(&(p_pb->pedals[i].config));
 8002474:	7bbb      	ldrb	r3, [r7, #14]
 8002476:	22c8      	movs	r2, #200	; 0xc8
 8002478:	fb02 f303 	mul.w	r3, r2, r3
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	4413      	add	r3, r2
 8002480:	3304      	adds	r3, #4
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff fdb8 	bl	8001ff8 <bypass_pedal_init>
            p_pb->pedals[i].pedal_process = bypass_process;
 8002488:	7bbb      	ldrb	r3, [r7, #14]
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	21c8      	movs	r1, #200	; 0xc8
 800248e:	fb01 f303 	mul.w	r3, r1, r3
 8002492:	4413      	add	r3, r2
 8002494:	33c8      	adds	r3, #200	; 0xc8
 8002496:	4a0e      	ldr	r2, [pc, #56]	; (80024d0 <pedalboard_append+0x200>)
 8002498:	601a      	str	r2, [r3, #0]
        }
        p_pb->active_pedals++;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	3301      	adds	r3, #1
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	701a      	strb	r2, [r3, #0]
    }
}
 80024a6:	bf00      	nop
 80024a8:	3710      	adds	r7, #16
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	08001cd5 	.word	0x08001cd5
 80024b4:	08001a11 	.word	0x08001a11
 80024b8:	08001d2d 	.word	0x08001d2d
 80024bc:	08001ec5 	.word	0x08001ec5
 80024c0:	08001da9 	.word	0x08001da9
 80024c4:	0800193d 	.word	0x0800193d
 80024c8:	08001bf9 	.word	0x08001bf9
 80024cc:	08001b11 	.word	0x08001b11
 80024d0:	0800200d 	.word	0x0800200d

080024d4 <pedalboard_process>:

int16_t pedalboard_process(pedalboard_t *p_pb, int16_t in) {
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	460b      	mov	r3, r1
 80024de:	807b      	strh	r3, [r7, #2]
    float out = (float)in;
 80024e0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80024e4:	ee07 3a90 	vmov	s15, r3
 80024e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024ec:	edc7 7a03 	vstr	s15, [r7, #12]
    for (u_int8_t i = 0; i < p_pb->active_pedals; i++) {
 80024f0:	2300      	movs	r3, #0
 80024f2:	72fb      	strb	r3, [r7, #11]
 80024f4:	e017      	b.n	8002526 <pedalboard_process+0x52>
        out = p_pb->pedals[i].pedal_process(out, &(p_pb->pedals[i].config));
 80024f6:	7afb      	ldrb	r3, [r7, #11]
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	21c8      	movs	r1, #200	; 0xc8
 80024fc:	fb01 f303 	mul.w	r3, r1, r3
 8002500:	4413      	add	r3, r2
 8002502:	33c8      	adds	r3, #200	; 0xc8
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	7afa      	ldrb	r2, [r7, #11]
 8002508:	21c8      	movs	r1, #200	; 0xc8
 800250a:	fb01 f202 	mul.w	r2, r1, r2
 800250e:	6879      	ldr	r1, [r7, #4]
 8002510:	440a      	add	r2, r1
 8002512:	3204      	adds	r2, #4
 8002514:	4610      	mov	r0, r2
 8002516:	ed97 0a03 	vldr	s0, [r7, #12]
 800251a:	4798      	blx	r3
 800251c:	ed87 0a03 	vstr	s0, [r7, #12]
    for (u_int8_t i = 0; i < p_pb->active_pedals; i++) {
 8002520:	7afb      	ldrb	r3, [r7, #11]
 8002522:	3301      	adds	r3, #1
 8002524:	72fb      	strb	r3, [r7, #11]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	7afa      	ldrb	r2, [r7, #11]
 800252c:	429a      	cmp	r2, r3
 800252e:	d3e2      	bcc.n	80024f6 <pedalboard_process+0x22>
    }
    return (int16_t)out;
 8002530:	edd7 7a03 	vldr	s15, [r7, #12]
 8002534:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002538:	ee17 3a90 	vmov	r3, s15
 800253c:	b21b      	sxth	r3, r3
}
 800253e:	4618      	mov	r0, r3
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
	...

08002548 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800254e:	2300      	movs	r3, #0
 8002550:	607b      	str	r3, [r7, #4]
 8002552:	4b10      	ldr	r3, [pc, #64]	; (8002594 <HAL_MspInit+0x4c>)
 8002554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002556:	4a0f      	ldr	r2, [pc, #60]	; (8002594 <HAL_MspInit+0x4c>)
 8002558:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800255c:	6453      	str	r3, [r2, #68]	; 0x44
 800255e:	4b0d      	ldr	r3, [pc, #52]	; (8002594 <HAL_MspInit+0x4c>)
 8002560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002562:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002566:	607b      	str	r3, [r7, #4]
 8002568:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800256a:	2300      	movs	r3, #0
 800256c:	603b      	str	r3, [r7, #0]
 800256e:	4b09      	ldr	r3, [pc, #36]	; (8002594 <HAL_MspInit+0x4c>)
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	4a08      	ldr	r2, [pc, #32]	; (8002594 <HAL_MspInit+0x4c>)
 8002574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002578:	6413      	str	r3, [r2, #64]	; 0x40
 800257a:	4b06      	ldr	r3, [pc, #24]	; (8002594 <HAL_MspInit+0x4c>)
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002582:	603b      	str	r3, [r7, #0]
 8002584:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002586:	bf00      	nop
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	40023800 	.word	0x40023800

08002598 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b08a      	sub	sp, #40	; 0x28
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a0:	f107 0314 	add.w	r3, r7, #20
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	605a      	str	r2, [r3, #4]
 80025aa:	609a      	str	r2, [r3, #8]
 80025ac:	60da      	str	r2, [r3, #12]
 80025ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a19      	ldr	r2, [pc, #100]	; (800261c <HAL_I2C_MspInit+0x84>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d12c      	bne.n	8002614 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ba:	2300      	movs	r3, #0
 80025bc:	613b      	str	r3, [r7, #16]
 80025be:	4b18      	ldr	r3, [pc, #96]	; (8002620 <HAL_I2C_MspInit+0x88>)
 80025c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c2:	4a17      	ldr	r2, [pc, #92]	; (8002620 <HAL_I2C_MspInit+0x88>)
 80025c4:	f043 0302 	orr.w	r3, r3, #2
 80025c8:	6313      	str	r3, [r2, #48]	; 0x30
 80025ca:	4b15      	ldr	r3, [pc, #84]	; (8002620 <HAL_I2C_MspInit+0x88>)
 80025cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	613b      	str	r3, [r7, #16]
 80025d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80025d6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80025da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025dc:	2312      	movs	r3, #18
 80025de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e0:	2300      	movs	r3, #0
 80025e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025e4:	2303      	movs	r3, #3
 80025e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80025e8:	2304      	movs	r3, #4
 80025ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ec:	f107 0314 	add.w	r3, r7, #20
 80025f0:	4619      	mov	r1, r3
 80025f2:	480c      	ldr	r0, [pc, #48]	; (8002624 <HAL_I2C_MspInit+0x8c>)
 80025f4:	f000 ff90 	bl	8003518 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025f8:	2300      	movs	r3, #0
 80025fa:	60fb      	str	r3, [r7, #12]
 80025fc:	4b08      	ldr	r3, [pc, #32]	; (8002620 <HAL_I2C_MspInit+0x88>)
 80025fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002600:	4a07      	ldr	r2, [pc, #28]	; (8002620 <HAL_I2C_MspInit+0x88>)
 8002602:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002606:	6413      	str	r3, [r2, #64]	; 0x40
 8002608:	4b05      	ldr	r3, [pc, #20]	; (8002620 <HAL_I2C_MspInit+0x88>)
 800260a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002610:	60fb      	str	r3, [r7, #12]
 8002612:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002614:	bf00      	nop
 8002616:	3728      	adds	r7, #40	; 0x28
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40005400 	.word	0x40005400
 8002620:	40023800 	.word	0x40023800
 8002624:	40020400 	.word	0x40020400

08002628 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b08e      	sub	sp, #56	; 0x38
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002630:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	605a      	str	r2, [r3, #4]
 800263a:	609a      	str	r2, [r3, #8]
 800263c:	60da      	str	r2, [r3, #12]
 800263e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a93      	ldr	r2, [pc, #588]	; (8002894 <HAL_I2S_MspInit+0x26c>)
 8002646:	4293      	cmp	r3, r2
 8002648:	f040 808d 	bne.w	8002766 <HAL_I2S_MspInit+0x13e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800264c:	2300      	movs	r3, #0
 800264e:	623b      	str	r3, [r7, #32]
 8002650:	4b91      	ldr	r3, [pc, #580]	; (8002898 <HAL_I2S_MspInit+0x270>)
 8002652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002654:	4a90      	ldr	r2, [pc, #576]	; (8002898 <HAL_I2S_MspInit+0x270>)
 8002656:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800265a:	6413      	str	r3, [r2, #64]	; 0x40
 800265c:	4b8e      	ldr	r3, [pc, #568]	; (8002898 <HAL_I2S_MspInit+0x270>)
 800265e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002660:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002664:	623b      	str	r3, [r7, #32]
 8002666:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002668:	2300      	movs	r3, #0
 800266a:	61fb      	str	r3, [r7, #28]
 800266c:	4b8a      	ldr	r3, [pc, #552]	; (8002898 <HAL_I2S_MspInit+0x270>)
 800266e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002670:	4a89      	ldr	r2, [pc, #548]	; (8002898 <HAL_I2S_MspInit+0x270>)
 8002672:	f043 0302 	orr.w	r3, r3, #2
 8002676:	6313      	str	r3, [r2, #48]	; 0x30
 8002678:	4b87      	ldr	r3, [pc, #540]	; (8002898 <HAL_I2S_MspInit+0x270>)
 800267a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	61fb      	str	r3, [r7, #28]
 8002682:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002684:	2300      	movs	r3, #0
 8002686:	61bb      	str	r3, [r7, #24]
 8002688:	4b83      	ldr	r3, [pc, #524]	; (8002898 <HAL_I2S_MspInit+0x270>)
 800268a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268c:	4a82      	ldr	r2, [pc, #520]	; (8002898 <HAL_I2S_MspInit+0x270>)
 800268e:	f043 0304 	orr.w	r3, r3, #4
 8002692:	6313      	str	r3, [r2, #48]	; 0x30
 8002694:	4b80      	ldr	r3, [pc, #512]	; (8002898 <HAL_I2S_MspInit+0x270>)
 8002696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	61bb      	str	r3, [r7, #24]
 800269e:	69bb      	ldr	r3, [r7, #24]
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80026a0:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80026a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a6:	2302      	movs	r3, #2
 80026a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026aa:	2300      	movs	r3, #0
 80026ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80026ae:	2301      	movs	r3, #1
 80026b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80026b2:	2305      	movs	r3, #5
 80026b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026ba:	4619      	mov	r1, r3
 80026bc:	4877      	ldr	r0, [pc, #476]	; (800289c <HAL_I2S_MspInit+0x274>)
 80026be:	f000 ff2b 	bl	8003518 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80026c2:	2340      	movs	r3, #64	; 0x40
 80026c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c6:	2302      	movs	r3, #2
 80026c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ca:	2300      	movs	r3, #0
 80026cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80026ce:	2301      	movs	r3, #1
 80026d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80026d2:	2305      	movs	r3, #5
 80026d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026da:	4619      	mov	r1, r3
 80026dc:	4870      	ldr	r0, [pc, #448]	; (80028a0 <HAL_I2S_MspInit+0x278>)
 80026de:	f000 ff1b 	bl	8003518 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 80026e2:	4b70      	ldr	r3, [pc, #448]	; (80028a4 <HAL_I2S_MspInit+0x27c>)
 80026e4:	4a70      	ldr	r2, [pc, #448]	; (80028a8 <HAL_I2S_MspInit+0x280>)
 80026e6:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 80026e8:	4b6e      	ldr	r3, [pc, #440]	; (80028a4 <HAL_I2S_MspInit+0x27c>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026ee:	4b6d      	ldr	r3, [pc, #436]	; (80028a4 <HAL_I2S_MspInit+0x27c>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026f4:	4b6b      	ldr	r3, [pc, #428]	; (80028a4 <HAL_I2S_MspInit+0x27c>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026fa:	4b6a      	ldr	r3, [pc, #424]	; (80028a4 <HAL_I2S_MspInit+0x27c>)
 80026fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002700:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002702:	4b68      	ldr	r3, [pc, #416]	; (80028a4 <HAL_I2S_MspInit+0x27c>)
 8002704:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002708:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800270a:	4b66      	ldr	r3, [pc, #408]	; (80028a4 <HAL_I2S_MspInit+0x27c>)
 800270c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002710:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8002712:	4b64      	ldr	r3, [pc, #400]	; (80028a4 <HAL_I2S_MspInit+0x27c>)
 8002714:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002718:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800271a:	4b62      	ldr	r3, [pc, #392]	; (80028a4 <HAL_I2S_MspInit+0x27c>)
 800271c:	2200      	movs	r2, #0
 800271e:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002720:	4b60      	ldr	r3, [pc, #384]	; (80028a4 <HAL_I2S_MspInit+0x27c>)
 8002722:	2204      	movs	r2, #4
 8002724:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8002726:	4b5f      	ldr	r3, [pc, #380]	; (80028a4 <HAL_I2S_MspInit+0x27c>)
 8002728:	2200      	movs	r2, #0
 800272a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 800272c:	4b5d      	ldr	r3, [pc, #372]	; (80028a4 <HAL_I2S_MspInit+0x27c>)
 800272e:	2200      	movs	r2, #0
 8002730:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002732:	4b5c      	ldr	r3, [pc, #368]	; (80028a4 <HAL_I2S_MspInit+0x27c>)
 8002734:	2200      	movs	r2, #0
 8002736:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002738:	485a      	ldr	r0, [pc, #360]	; (80028a4 <HAL_I2S_MspInit+0x27c>)
 800273a:	f000 fb7d 	bl	8002e38 <HAL_DMA_Init>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d001      	beq.n	8002748 <HAL_I2S_MspInit+0x120>
    {
      Error_Handler();
 8002744:	f7fe ff4c 	bl	80015e0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4a56      	ldr	r2, [pc, #344]	; (80028a4 <HAL_I2S_MspInit+0x27c>)
 800274c:	63da      	str	r2, [r3, #60]	; 0x3c
 800274e:	4a55      	ldr	r2, [pc, #340]	; (80028a4 <HAL_I2S_MspInit+0x27c>)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2S2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002754:	2200      	movs	r2, #0
 8002756:	2100      	movs	r1, #0
 8002758:	2024      	movs	r0, #36	; 0x24
 800275a:	f000 fb36 	bl	8002dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800275e:	2024      	movs	r0, #36	; 0x24
 8002760:	f000 fb4f 	bl	8002e02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002764:	e091      	b.n	800288a <HAL_I2S_MspInit+0x262>
  else if(hi2s->Instance==SPI3)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a50      	ldr	r2, [pc, #320]	; (80028ac <HAL_I2S_MspInit+0x284>)
 800276c:	4293      	cmp	r3, r2
 800276e:	f040 808c 	bne.w	800288a <HAL_I2S_MspInit+0x262>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002772:	2300      	movs	r3, #0
 8002774:	617b      	str	r3, [r7, #20]
 8002776:	4b48      	ldr	r3, [pc, #288]	; (8002898 <HAL_I2S_MspInit+0x270>)
 8002778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277a:	4a47      	ldr	r2, [pc, #284]	; (8002898 <HAL_I2S_MspInit+0x270>)
 800277c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002780:	6413      	str	r3, [r2, #64]	; 0x40
 8002782:	4b45      	ldr	r3, [pc, #276]	; (8002898 <HAL_I2S_MspInit+0x270>)
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800278a:	617b      	str	r3, [r7, #20]
 800278c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800278e:	2300      	movs	r3, #0
 8002790:	613b      	str	r3, [r7, #16]
 8002792:	4b41      	ldr	r3, [pc, #260]	; (8002898 <HAL_I2S_MspInit+0x270>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	4a40      	ldr	r2, [pc, #256]	; (8002898 <HAL_I2S_MspInit+0x270>)
 8002798:	f043 0301 	orr.w	r3, r3, #1
 800279c:	6313      	str	r3, [r2, #48]	; 0x30
 800279e:	4b3e      	ldr	r3, [pc, #248]	; (8002898 <HAL_I2S_MspInit+0x270>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	613b      	str	r3, [r7, #16]
 80027a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027aa:	2300      	movs	r3, #0
 80027ac:	60fb      	str	r3, [r7, #12]
 80027ae:	4b3a      	ldr	r3, [pc, #232]	; (8002898 <HAL_I2S_MspInit+0x270>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	4a39      	ldr	r2, [pc, #228]	; (8002898 <HAL_I2S_MspInit+0x270>)
 80027b4:	f043 0304 	orr.w	r3, r3, #4
 80027b8:	6313      	str	r3, [r2, #48]	; 0x30
 80027ba:	4b37      	ldr	r3, [pc, #220]	; (8002898 <HAL_I2S_MspInit+0x270>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027be:	f003 0304 	and.w	r3, r3, #4
 80027c2:	60fb      	str	r3, [r7, #12]
 80027c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80027c6:	2310      	movs	r3, #16
 80027c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ca:	2302      	movs	r3, #2
 80027cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ce:	2300      	movs	r3, #0
 80027d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80027d2:	2301      	movs	r3, #1
 80027d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80027d6:	2306      	movs	r3, #6
 80027d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027de:	4619      	mov	r1, r3
 80027e0:	4833      	ldr	r0, [pc, #204]	; (80028b0 <HAL_I2S_MspInit+0x288>)
 80027e2:	f000 fe99 	bl	8003518 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 80027e6:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80027ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ec:	2302      	movs	r3, #2
 80027ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f0:	2300      	movs	r3, #0
 80027f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80027f4:	2301      	movs	r3, #1
 80027f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80027f8:	2306      	movs	r3, #6
 80027fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002800:	4619      	mov	r1, r3
 8002802:	4827      	ldr	r0, [pc, #156]	; (80028a0 <HAL_I2S_MspInit+0x278>)
 8002804:	f000 fe88 	bl	8003518 <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8002808:	4b2a      	ldr	r3, [pc, #168]	; (80028b4 <HAL_I2S_MspInit+0x28c>)
 800280a:	4a2b      	ldr	r2, [pc, #172]	; (80028b8 <HAL_I2S_MspInit+0x290>)
 800280c:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 800280e:	4b29      	ldr	r3, [pc, #164]	; (80028b4 <HAL_I2S_MspInit+0x28c>)
 8002810:	2200      	movs	r2, #0
 8002812:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002814:	4b27      	ldr	r3, [pc, #156]	; (80028b4 <HAL_I2S_MspInit+0x28c>)
 8002816:	2240      	movs	r2, #64	; 0x40
 8002818:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800281a:	4b26      	ldr	r3, [pc, #152]	; (80028b4 <HAL_I2S_MspInit+0x28c>)
 800281c:	2200      	movs	r2, #0
 800281e:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002820:	4b24      	ldr	r3, [pc, #144]	; (80028b4 <HAL_I2S_MspInit+0x28c>)
 8002822:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002826:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002828:	4b22      	ldr	r3, [pc, #136]	; (80028b4 <HAL_I2S_MspInit+0x28c>)
 800282a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800282e:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002830:	4b20      	ldr	r3, [pc, #128]	; (80028b4 <HAL_I2S_MspInit+0x28c>)
 8002832:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002836:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8002838:	4b1e      	ldr	r3, [pc, #120]	; (80028b4 <HAL_I2S_MspInit+0x28c>)
 800283a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800283e:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002840:	4b1c      	ldr	r3, [pc, #112]	; (80028b4 <HAL_I2S_MspInit+0x28c>)
 8002842:	2200      	movs	r2, #0
 8002844:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002846:	4b1b      	ldr	r3, [pc, #108]	; (80028b4 <HAL_I2S_MspInit+0x28c>)
 8002848:	2204      	movs	r2, #4
 800284a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800284c:	4b19      	ldr	r3, [pc, #100]	; (80028b4 <HAL_I2S_MspInit+0x28c>)
 800284e:	2200      	movs	r2, #0
 8002850:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002852:	4b18      	ldr	r3, [pc, #96]	; (80028b4 <HAL_I2S_MspInit+0x28c>)
 8002854:	2200      	movs	r2, #0
 8002856:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002858:	4b16      	ldr	r3, [pc, #88]	; (80028b4 <HAL_I2S_MspInit+0x28c>)
 800285a:	2200      	movs	r2, #0
 800285c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800285e:	4815      	ldr	r0, [pc, #84]	; (80028b4 <HAL_I2S_MspInit+0x28c>)
 8002860:	f000 faea 	bl	8002e38 <HAL_DMA_Init>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <HAL_I2S_MspInit+0x246>
      Error_Handler();
 800286a:	f7fe feb9 	bl	80015e0 <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a10      	ldr	r2, [pc, #64]	; (80028b4 <HAL_I2S_MspInit+0x28c>)
 8002872:	639a      	str	r2, [r3, #56]	; 0x38
 8002874:	4a0f      	ldr	r2, [pc, #60]	; (80028b4 <HAL_I2S_MspInit+0x28c>)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 800287a:	2200      	movs	r2, #0
 800287c:	2100      	movs	r1, #0
 800287e:	2033      	movs	r0, #51	; 0x33
 8002880:	f000 faa3 	bl	8002dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8002884:	2033      	movs	r0, #51	; 0x33
 8002886:	f000 fabc 	bl	8002e02 <HAL_NVIC_EnableIRQ>
}
 800288a:	bf00      	nop
 800288c:	3738      	adds	r7, #56	; 0x38
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	40003800 	.word	0x40003800
 8002898:	40023800 	.word	0x40023800
 800289c:	40020400 	.word	0x40020400
 80028a0:	40020800 	.word	0x40020800
 80028a4:	200008b8 	.word	0x200008b8
 80028a8:	40026058 	.word	0x40026058
 80028ac:	40003c00 	.word	0x40003c00
 80028b0:	40020000 	.word	0x40020000
 80028b4:	20000918 	.word	0x20000918
 80028b8:	40026088 	.word	0x40026088

080028bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b08a      	sub	sp, #40	; 0x28
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c4:	f107 0314 	add.w	r3, r7, #20
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	605a      	str	r2, [r3, #4]
 80028ce:	609a      	str	r2, [r3, #8]
 80028d0:	60da      	str	r2, [r3, #12]
 80028d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a19      	ldr	r2, [pc, #100]	; (8002940 <HAL_SPI_MspInit+0x84>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d12b      	bne.n	8002936 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80028de:	2300      	movs	r3, #0
 80028e0:	613b      	str	r3, [r7, #16]
 80028e2:	4b18      	ldr	r3, [pc, #96]	; (8002944 <HAL_SPI_MspInit+0x88>)
 80028e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e6:	4a17      	ldr	r2, [pc, #92]	; (8002944 <HAL_SPI_MspInit+0x88>)
 80028e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028ec:	6453      	str	r3, [r2, #68]	; 0x44
 80028ee:	4b15      	ldr	r3, [pc, #84]	; (8002944 <HAL_SPI_MspInit+0x88>)
 80028f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028f6:	613b      	str	r3, [r7, #16]
 80028f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028fa:	2300      	movs	r3, #0
 80028fc:	60fb      	str	r3, [r7, #12]
 80028fe:	4b11      	ldr	r3, [pc, #68]	; (8002944 <HAL_SPI_MspInit+0x88>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002902:	4a10      	ldr	r2, [pc, #64]	; (8002944 <HAL_SPI_MspInit+0x88>)
 8002904:	f043 0301 	orr.w	r3, r3, #1
 8002908:	6313      	str	r3, [r2, #48]	; 0x30
 800290a:	4b0e      	ldr	r3, [pc, #56]	; (8002944 <HAL_SPI_MspInit+0x88>)
 800290c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	60fb      	str	r3, [r7, #12]
 8002914:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002916:	23a0      	movs	r3, #160	; 0xa0
 8002918:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800291a:	2302      	movs	r3, #2
 800291c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291e:	2300      	movs	r3, #0
 8002920:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002922:	2303      	movs	r3, #3
 8002924:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002926:	2305      	movs	r3, #5
 8002928:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800292a:	f107 0314 	add.w	r3, r7, #20
 800292e:	4619      	mov	r1, r3
 8002930:	4805      	ldr	r0, [pc, #20]	; (8002948 <HAL_SPI_MspInit+0x8c>)
 8002932:	f000 fdf1 	bl	8003518 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002936:	bf00      	nop
 8002938:	3728      	adds	r7, #40	; 0x28
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	40013000 	.word	0x40013000
 8002944:	40023800 	.word	0x40023800
 8002948:	40020000 	.word	0x40020000

0800294c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002950:	e7fe      	b.n	8002950 <NMI_Handler+0x4>

08002952 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002952:	b480      	push	{r7}
 8002954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002956:	e7fe      	b.n	8002956 <HardFault_Handler+0x4>

08002958 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800295c:	e7fe      	b.n	800295c <MemManage_Handler+0x4>

0800295e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800295e:	b480      	push	{r7}
 8002960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002962:	e7fe      	b.n	8002962 <BusFault_Handler+0x4>

08002964 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002968:	e7fe      	b.n	8002968 <UsageFault_Handler+0x4>

0800296a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800296a:	b480      	push	{r7}
 800296c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800296e:	bf00      	nop
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800297c:	bf00      	nop
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr

08002986 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002986:	b480      	push	{r7}
 8002988:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800298a:	bf00      	nop
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002998:	f000 f8f8 	bl	8002b8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800299c:	bf00      	nop
 800299e:	bd80      	pop	{r7, pc}

080029a0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80029a4:	4802      	ldr	r0, [pc, #8]	; (80029b0 <DMA1_Stream3_IRQHandler+0x10>)
 80029a6:	f000 fb4d 	bl	8003044 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80029aa:	bf00      	nop
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	200008b8 	.word	0x200008b8

080029b4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80029b8:	4802      	ldr	r0, [pc, #8]	; (80029c4 <DMA1_Stream5_IRQHandler+0x10>)
 80029ba:	f000 fb43 	bl	8003044 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80029be:	bf00      	nop
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	20000918 	.word	0x20000918

080029c8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 80029cc:	4802      	ldr	r0, [pc, #8]	; (80029d8 <SPI2_IRQHandler+0x10>)
 80029ce:	f003 ff1b 	bl	8006808 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80029d2:	bf00      	nop
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	200009cc 	.word	0x200009cc

080029dc <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s3);
 80029e0:	4802      	ldr	r0, [pc, #8]	; (80029ec <SPI3_IRQHandler+0x10>)
 80029e2:	f003 ff11 	bl	8006808 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80029e6:	bf00      	nop
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	20000a14 	.word	0x20000a14

080029f0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80029f4:	4802      	ldr	r0, [pc, #8]	; (8002a00 <OTG_FS_IRQHandler+0x10>)
 80029f6:	f001 f9c7 	bl	8003d88 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80029fa:	bf00      	nop
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	20002780 	.word	0x20002780

08002a04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a0c:	4a14      	ldr	r2, [pc, #80]	; (8002a60 <_sbrk+0x5c>)
 8002a0e:	4b15      	ldr	r3, [pc, #84]	; (8002a64 <_sbrk+0x60>)
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a18:	4b13      	ldr	r3, [pc, #76]	; (8002a68 <_sbrk+0x64>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d102      	bne.n	8002a26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a20:	4b11      	ldr	r3, [pc, #68]	; (8002a68 <_sbrk+0x64>)
 8002a22:	4a12      	ldr	r2, [pc, #72]	; (8002a6c <_sbrk+0x68>)
 8002a24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a26:	4b10      	ldr	r3, [pc, #64]	; (8002a68 <_sbrk+0x64>)
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d207      	bcs.n	8002a44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a34:	f009 fe6a 	bl	800c70c <__errno>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	220c      	movs	r2, #12
 8002a3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a42:	e009      	b.n	8002a58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a44:	4b08      	ldr	r3, [pc, #32]	; (8002a68 <_sbrk+0x64>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a4a:	4b07      	ldr	r3, [pc, #28]	; (8002a68 <_sbrk+0x64>)
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4413      	add	r3, r2
 8002a52:	4a05      	ldr	r2, [pc, #20]	; (8002a68 <_sbrk+0x64>)
 8002a54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a56:	68fb      	ldr	r3, [r7, #12]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3718      	adds	r7, #24
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	20020000 	.word	0x20020000
 8002a64:	00000400 	.word	0x00000400
 8002a68:	20002388 	.word	0x20002388
 8002a6c:	20002a98 	.word	0x20002a98

08002a70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a74:	4b06      	ldr	r3, [pc, #24]	; (8002a90 <SystemInit+0x20>)
 8002a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7a:	4a05      	ldr	r2, [pc, #20]	; (8002a90 <SystemInit+0x20>)
 8002a7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a84:	bf00      	nop
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	e000ed00 	.word	0xe000ed00

08002a94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002a94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002acc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a98:	480d      	ldr	r0, [pc, #52]	; (8002ad0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a9a:	490e      	ldr	r1, [pc, #56]	; (8002ad4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a9c:	4a0e      	ldr	r2, [pc, #56]	; (8002ad8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002aa0:	e002      	b.n	8002aa8 <LoopCopyDataInit>

08002aa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002aa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002aa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002aa6:	3304      	adds	r3, #4

08002aa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002aa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002aaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002aac:	d3f9      	bcc.n	8002aa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002aae:	4a0b      	ldr	r2, [pc, #44]	; (8002adc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ab0:	4c0b      	ldr	r4, [pc, #44]	; (8002ae0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002ab2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ab4:	e001      	b.n	8002aba <LoopFillZerobss>

08002ab6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ab6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ab8:	3204      	adds	r2, #4

08002aba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002aba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002abc:	d3fb      	bcc.n	8002ab6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002abe:	f7ff ffd7 	bl	8002a70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ac2:	f009 fe29 	bl	800c718 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ac6:	f7fe fa7d 	bl	8000fc4 <main>
  bx  lr    
 8002aca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002acc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ad0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ad4:	20000334 	.word	0x20000334
  ldr r2, =_sidata
 8002ad8:	0800d464 	.word	0x0800d464
  ldr r2, =_sbss
 8002adc:	20000334 	.word	0x20000334
  ldr r4, =_ebss
 8002ae0:	20002a94 	.word	0x20002a94

08002ae4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ae4:	e7fe      	b.n	8002ae4 <ADC_IRQHandler>
	...

08002ae8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002aec:	4b0e      	ldr	r3, [pc, #56]	; (8002b28 <HAL_Init+0x40>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a0d      	ldr	r2, [pc, #52]	; (8002b28 <HAL_Init+0x40>)
 8002af2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002af6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002af8:	4b0b      	ldr	r3, [pc, #44]	; (8002b28 <HAL_Init+0x40>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a0a      	ldr	r2, [pc, #40]	; (8002b28 <HAL_Init+0x40>)
 8002afe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b04:	4b08      	ldr	r3, [pc, #32]	; (8002b28 <HAL_Init+0x40>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a07      	ldr	r2, [pc, #28]	; (8002b28 <HAL_Init+0x40>)
 8002b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b10:	2003      	movs	r0, #3
 8002b12:	f000 f94f 	bl	8002db4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b16:	200f      	movs	r0, #15
 8002b18:	f000 f808 	bl	8002b2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b1c:	f7ff fd14 	bl	8002548 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	40023c00 	.word	0x40023c00

08002b2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b34:	4b12      	ldr	r3, [pc, #72]	; (8002b80 <HAL_InitTick+0x54>)
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	4b12      	ldr	r3, [pc, #72]	; (8002b84 <HAL_InitTick+0x58>)
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b42:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f000 f967 	bl	8002e1e <HAL_SYSTICK_Config>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e00e      	b.n	8002b78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2b0f      	cmp	r3, #15
 8002b5e:	d80a      	bhi.n	8002b76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b60:	2200      	movs	r2, #0
 8002b62:	6879      	ldr	r1, [r7, #4]
 8002b64:	f04f 30ff 	mov.w	r0, #4294967295
 8002b68:	f000 f92f 	bl	8002dca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b6c:	4a06      	ldr	r2, [pc, #24]	; (8002b88 <HAL_InitTick+0x5c>)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
 8002b74:	e000      	b.n	8002b78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3708      	adds	r7, #8
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	200002a4 	.word	0x200002a4
 8002b84:	200002ac 	.word	0x200002ac
 8002b88:	200002a8 	.word	0x200002a8

08002b8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b90:	4b06      	ldr	r3, [pc, #24]	; (8002bac <HAL_IncTick+0x20>)
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	461a      	mov	r2, r3
 8002b96:	4b06      	ldr	r3, [pc, #24]	; (8002bb0 <HAL_IncTick+0x24>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	4a04      	ldr	r2, [pc, #16]	; (8002bb0 <HAL_IncTick+0x24>)
 8002b9e:	6013      	str	r3, [r2, #0]
}
 8002ba0:	bf00      	nop
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	200002ac 	.word	0x200002ac
 8002bb0:	2000238c 	.word	0x2000238c

08002bb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  return uwTick;
 8002bb8:	4b03      	ldr	r3, [pc, #12]	; (8002bc8 <HAL_GetTick+0x14>)
 8002bba:	681b      	ldr	r3, [r3, #0]
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	2000238c 	.word	0x2000238c

08002bcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bd4:	f7ff ffee 	bl	8002bb4 <HAL_GetTick>
 8002bd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be4:	d005      	beq.n	8002bf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002be6:	4b0a      	ldr	r3, [pc, #40]	; (8002c10 <HAL_Delay+0x44>)
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	461a      	mov	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	4413      	add	r3, r2
 8002bf0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002bf2:	bf00      	nop
 8002bf4:	f7ff ffde 	bl	8002bb4 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d8f7      	bhi.n	8002bf4 <HAL_Delay+0x28>
  {
  }
}
 8002c04:	bf00      	nop
 8002c06:	bf00      	nop
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	200002ac 	.word	0x200002ac

08002c14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f003 0307 	and.w	r3, r3, #7
 8002c22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c24:	4b0c      	ldr	r3, [pc, #48]	; (8002c58 <__NVIC_SetPriorityGrouping+0x44>)
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c2a:	68ba      	ldr	r2, [r7, #8]
 8002c2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c30:	4013      	ands	r3, r2
 8002c32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c46:	4a04      	ldr	r2, [pc, #16]	; (8002c58 <__NVIC_SetPriorityGrouping+0x44>)
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	60d3      	str	r3, [r2, #12]
}
 8002c4c:	bf00      	nop
 8002c4e:	3714      	adds	r7, #20
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr
 8002c58:	e000ed00 	.word	0xe000ed00

08002c5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c60:	4b04      	ldr	r3, [pc, #16]	; (8002c74 <__NVIC_GetPriorityGrouping+0x18>)
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	0a1b      	lsrs	r3, r3, #8
 8002c66:	f003 0307 	and.w	r3, r3, #7
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr
 8002c74:	e000ed00 	.word	0xe000ed00

08002c78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	4603      	mov	r3, r0
 8002c80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	db0b      	blt.n	8002ca2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c8a:	79fb      	ldrb	r3, [r7, #7]
 8002c8c:	f003 021f 	and.w	r2, r3, #31
 8002c90:	4907      	ldr	r1, [pc, #28]	; (8002cb0 <__NVIC_EnableIRQ+0x38>)
 8002c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c96:	095b      	lsrs	r3, r3, #5
 8002c98:	2001      	movs	r0, #1
 8002c9a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ca2:	bf00      	nop
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	e000e100 	.word	0xe000e100

08002cb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	4603      	mov	r3, r0
 8002cbc:	6039      	str	r1, [r7, #0]
 8002cbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	db0a      	blt.n	8002cde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	b2da      	uxtb	r2, r3
 8002ccc:	490c      	ldr	r1, [pc, #48]	; (8002d00 <__NVIC_SetPriority+0x4c>)
 8002cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd2:	0112      	lsls	r2, r2, #4
 8002cd4:	b2d2      	uxtb	r2, r2
 8002cd6:	440b      	add	r3, r1
 8002cd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cdc:	e00a      	b.n	8002cf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	b2da      	uxtb	r2, r3
 8002ce2:	4908      	ldr	r1, [pc, #32]	; (8002d04 <__NVIC_SetPriority+0x50>)
 8002ce4:	79fb      	ldrb	r3, [r7, #7]
 8002ce6:	f003 030f 	and.w	r3, r3, #15
 8002cea:	3b04      	subs	r3, #4
 8002cec:	0112      	lsls	r2, r2, #4
 8002cee:	b2d2      	uxtb	r2, r2
 8002cf0:	440b      	add	r3, r1
 8002cf2:	761a      	strb	r2, [r3, #24]
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	e000e100 	.word	0xe000e100
 8002d04:	e000ed00 	.word	0xe000ed00

08002d08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b089      	sub	sp, #36	; 0x24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f003 0307 	and.w	r3, r3, #7
 8002d1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	f1c3 0307 	rsb	r3, r3, #7
 8002d22:	2b04      	cmp	r3, #4
 8002d24:	bf28      	it	cs
 8002d26:	2304      	movcs	r3, #4
 8002d28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	3304      	adds	r3, #4
 8002d2e:	2b06      	cmp	r3, #6
 8002d30:	d902      	bls.n	8002d38 <NVIC_EncodePriority+0x30>
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	3b03      	subs	r3, #3
 8002d36:	e000      	b.n	8002d3a <NVIC_EncodePriority+0x32>
 8002d38:	2300      	movs	r3, #0
 8002d3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	fa02 f303 	lsl.w	r3, r2, r3
 8002d46:	43da      	mvns	r2, r3
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	401a      	ands	r2, r3
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d50:	f04f 31ff 	mov.w	r1, #4294967295
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	fa01 f303 	lsl.w	r3, r1, r3
 8002d5a:	43d9      	mvns	r1, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d60:	4313      	orrs	r3, r2
         );
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3724      	adds	r7, #36	; 0x24
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
	...

08002d70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d80:	d301      	bcc.n	8002d86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d82:	2301      	movs	r3, #1
 8002d84:	e00f      	b.n	8002da6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d86:	4a0a      	ldr	r2, [pc, #40]	; (8002db0 <SysTick_Config+0x40>)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d8e:	210f      	movs	r1, #15
 8002d90:	f04f 30ff 	mov.w	r0, #4294967295
 8002d94:	f7ff ff8e 	bl	8002cb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d98:	4b05      	ldr	r3, [pc, #20]	; (8002db0 <SysTick_Config+0x40>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d9e:	4b04      	ldr	r3, [pc, #16]	; (8002db0 <SysTick_Config+0x40>)
 8002da0:	2207      	movs	r2, #7
 8002da2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	e000e010 	.word	0xe000e010

08002db4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f7ff ff29 	bl	8002c14 <__NVIC_SetPriorityGrouping>
}
 8002dc2:	bf00      	nop
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b086      	sub	sp, #24
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	60b9      	str	r1, [r7, #8]
 8002dd4:	607a      	str	r2, [r7, #4]
 8002dd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ddc:	f7ff ff3e 	bl	8002c5c <__NVIC_GetPriorityGrouping>
 8002de0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	68b9      	ldr	r1, [r7, #8]
 8002de6:	6978      	ldr	r0, [r7, #20]
 8002de8:	f7ff ff8e 	bl	8002d08 <NVIC_EncodePriority>
 8002dec:	4602      	mov	r2, r0
 8002dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002df2:	4611      	mov	r1, r2
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7ff ff5d 	bl	8002cb4 <__NVIC_SetPriority>
}
 8002dfa:	bf00      	nop
 8002dfc:	3718      	adds	r7, #24
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b082      	sub	sp, #8
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	4603      	mov	r3, r0
 8002e0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7ff ff31 	bl	8002c78 <__NVIC_EnableIRQ>
}
 8002e16:	bf00      	nop
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b082      	sub	sp, #8
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f7ff ffa2 	bl	8002d70 <SysTick_Config>
 8002e2c:	4603      	mov	r3, r0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
	...

08002e38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e40:	2300      	movs	r3, #0
 8002e42:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e44:	f7ff feb6 	bl	8002bb4 <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d101      	bne.n	8002e54 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e099      	b.n	8002f88 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2202      	movs	r2, #2
 8002e58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f022 0201 	bic.w	r2, r2, #1
 8002e72:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e74:	e00f      	b.n	8002e96 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e76:	f7ff fe9d 	bl	8002bb4 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b05      	cmp	r3, #5
 8002e82:	d908      	bls.n	8002e96 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2220      	movs	r2, #32
 8002e88:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2203      	movs	r2, #3
 8002e8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e078      	b.n	8002f88 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0301 	and.w	r3, r3, #1
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1e8      	bne.n	8002e76 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002eac:	697a      	ldr	r2, [r7, #20]
 8002eae:	4b38      	ldr	r3, [pc, #224]	; (8002f90 <HAL_DMA_Init+0x158>)
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685a      	ldr	r2, [r3, #4]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ec2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ece:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a1b      	ldr	r3, [r3, #32]
 8002ee0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eec:	2b04      	cmp	r3, #4
 8002eee:	d107      	bne.n	8002f00 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	697a      	ldr	r2, [r7, #20]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	697a      	ldr	r2, [r7, #20]
 8002f06:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	f023 0307 	bic.w	r3, r3, #7
 8002f16:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1c:	697a      	ldr	r2, [r7, #20]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f26:	2b04      	cmp	r3, #4
 8002f28:	d117      	bne.n	8002f5a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f2e:	697a      	ldr	r2, [r7, #20]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d00e      	beq.n	8002f5a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f000 fa6f 	bl	8003420 <DMA_CheckFifoParam>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d008      	beq.n	8002f5a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2240      	movs	r2, #64	; 0x40
 8002f4c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002f56:	2301      	movs	r3, #1
 8002f58:	e016      	b.n	8002f88 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 fa26 	bl	80033b4 <DMA_CalcBaseAndBitshift>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f70:	223f      	movs	r2, #63	; 0x3f
 8002f72:	409a      	lsls	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2201      	movs	r2, #1
 8002f82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3718      	adds	r7, #24
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	f010803f 	.word	0xf010803f

08002f94 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b086      	sub	sp, #24
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
 8002fa0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002faa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d101      	bne.n	8002fba <HAL_DMA_Start_IT+0x26>
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	e040      	b.n	800303c <HAL_DMA_Start_IT+0xa8>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d12f      	bne.n	800302e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2202      	movs	r2, #2
 8002fd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	68b9      	ldr	r1, [r7, #8]
 8002fe2:	68f8      	ldr	r0, [r7, #12]
 8002fe4:	f000 f9b8 	bl	8003358 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fec:	223f      	movs	r2, #63	; 0x3f
 8002fee:	409a      	lsls	r2, r3
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f042 0216 	orr.w	r2, r2, #22
 8003002:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003008:	2b00      	cmp	r3, #0
 800300a:	d007      	beq.n	800301c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f042 0208 	orr.w	r2, r2, #8
 800301a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f042 0201 	orr.w	r2, r2, #1
 800302a:	601a      	str	r2, [r3, #0]
 800302c:	e005      	b.n	800303a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003036:	2302      	movs	r3, #2
 8003038:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800303a:	7dfb      	ldrb	r3, [r7, #23]
}
 800303c:	4618      	mov	r0, r3
 800303e:	3718      	adds	r7, #24
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800304c:	2300      	movs	r3, #0
 800304e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003050:	4b8e      	ldr	r3, [pc, #568]	; (800328c <HAL_DMA_IRQHandler+0x248>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a8e      	ldr	r2, [pc, #568]	; (8003290 <HAL_DMA_IRQHandler+0x24c>)
 8003056:	fba2 2303 	umull	r2, r3, r2, r3
 800305a:	0a9b      	lsrs	r3, r3, #10
 800305c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003062:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800306e:	2208      	movs	r2, #8
 8003070:	409a      	lsls	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	4013      	ands	r3, r2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d01a      	beq.n	80030b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0304 	and.w	r3, r3, #4
 8003084:	2b00      	cmp	r3, #0
 8003086:	d013      	beq.n	80030b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f022 0204 	bic.w	r2, r2, #4
 8003096:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800309c:	2208      	movs	r2, #8
 800309e:	409a      	lsls	r2, r3
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a8:	f043 0201 	orr.w	r2, r3, #1
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b4:	2201      	movs	r2, #1
 80030b6:	409a      	lsls	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	4013      	ands	r3, r2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d012      	beq.n	80030e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d00b      	beq.n	80030e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d2:	2201      	movs	r2, #1
 80030d4:	409a      	lsls	r2, r3
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030de:	f043 0202 	orr.w	r2, r3, #2
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ea:	2204      	movs	r2, #4
 80030ec:	409a      	lsls	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	4013      	ands	r3, r2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d012      	beq.n	800311c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0302 	and.w	r3, r3, #2
 8003100:	2b00      	cmp	r3, #0
 8003102:	d00b      	beq.n	800311c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003108:	2204      	movs	r2, #4
 800310a:	409a      	lsls	r2, r3
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003114:	f043 0204 	orr.w	r2, r3, #4
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003120:	2210      	movs	r2, #16
 8003122:	409a      	lsls	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	4013      	ands	r3, r2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d043      	beq.n	80031b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0308 	and.w	r3, r3, #8
 8003136:	2b00      	cmp	r3, #0
 8003138:	d03c      	beq.n	80031b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800313e:	2210      	movs	r2, #16
 8003140:	409a      	lsls	r2, r3
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d018      	beq.n	8003186 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d108      	bne.n	8003174 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003166:	2b00      	cmp	r3, #0
 8003168:	d024      	beq.n	80031b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	4798      	blx	r3
 8003172:	e01f      	b.n	80031b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003178:	2b00      	cmp	r3, #0
 800317a:	d01b      	beq.n	80031b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	4798      	blx	r3
 8003184:	e016      	b.n	80031b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003190:	2b00      	cmp	r3, #0
 8003192:	d107      	bne.n	80031a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f022 0208 	bic.w	r2, r2, #8
 80031a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d003      	beq.n	80031b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b8:	2220      	movs	r2, #32
 80031ba:	409a      	lsls	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	4013      	ands	r3, r2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f000 808f 	beq.w	80032e4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0310 	and.w	r3, r3, #16
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f000 8087 	beq.w	80032e4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031da:	2220      	movs	r2, #32
 80031dc:	409a      	lsls	r2, r3
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b05      	cmp	r3, #5
 80031ec:	d136      	bne.n	800325c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f022 0216 	bic.w	r2, r2, #22
 80031fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	695a      	ldr	r2, [r3, #20]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800320c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003212:	2b00      	cmp	r3, #0
 8003214:	d103      	bne.n	800321e <HAL_DMA_IRQHandler+0x1da>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800321a:	2b00      	cmp	r3, #0
 800321c:	d007      	beq.n	800322e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f022 0208 	bic.w	r2, r2, #8
 800322c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003232:	223f      	movs	r2, #63	; 0x3f
 8003234:	409a      	lsls	r2, r3
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2201      	movs	r2, #1
 800323e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800324e:	2b00      	cmp	r3, #0
 8003250:	d07e      	beq.n	8003350 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	4798      	blx	r3
        }
        return;
 800325a:	e079      	b.n	8003350 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d01d      	beq.n	80032a6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d10d      	bne.n	8003294 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327c:	2b00      	cmp	r3, #0
 800327e:	d031      	beq.n	80032e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	4798      	blx	r3
 8003288:	e02c      	b.n	80032e4 <HAL_DMA_IRQHandler+0x2a0>
 800328a:	bf00      	nop
 800328c:	200002a4 	.word	0x200002a4
 8003290:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003298:	2b00      	cmp	r3, #0
 800329a:	d023      	beq.n	80032e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	4798      	blx	r3
 80032a4:	e01e      	b.n	80032e4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d10f      	bne.n	80032d4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f022 0210 	bic.w	r2, r2, #16
 80032c2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d003      	beq.n	80032e4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d032      	beq.n	8003352 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f0:	f003 0301 	and.w	r3, r3, #1
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d022      	beq.n	800333e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2205      	movs	r2, #5
 80032fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f022 0201 	bic.w	r2, r2, #1
 800330e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	3301      	adds	r3, #1
 8003314:	60bb      	str	r3, [r7, #8]
 8003316:	697a      	ldr	r2, [r7, #20]
 8003318:	429a      	cmp	r2, r3
 800331a:	d307      	bcc.n	800332c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1f2      	bne.n	8003310 <HAL_DMA_IRQHandler+0x2cc>
 800332a:	e000      	b.n	800332e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800332c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2201      	movs	r2, #1
 8003332:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003342:	2b00      	cmp	r3, #0
 8003344:	d005      	beq.n	8003352 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	4798      	blx	r3
 800334e:	e000      	b.n	8003352 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003350:	bf00      	nop
    }
  }
}
 8003352:	3718      	adds	r7, #24
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
 8003364:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003374:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	683a      	ldr	r2, [r7, #0]
 800337c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	2b40      	cmp	r3, #64	; 0x40
 8003384:	d108      	bne.n	8003398 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68ba      	ldr	r2, [r7, #8]
 8003394:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003396:	e007      	b.n	80033a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68ba      	ldr	r2, [r7, #8]
 800339e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	60da      	str	r2, [r3, #12]
}
 80033a8:	bf00      	nop
 80033aa:	3714      	adds	r7, #20
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	3b10      	subs	r3, #16
 80033c4:	4a14      	ldr	r2, [pc, #80]	; (8003418 <DMA_CalcBaseAndBitshift+0x64>)
 80033c6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ca:	091b      	lsrs	r3, r3, #4
 80033cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80033ce:	4a13      	ldr	r2, [pc, #76]	; (800341c <DMA_CalcBaseAndBitshift+0x68>)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	4413      	add	r3, r2
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	461a      	mov	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2b03      	cmp	r3, #3
 80033e0:	d909      	bls.n	80033f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80033ea:	f023 0303 	bic.w	r3, r3, #3
 80033ee:	1d1a      	adds	r2, r3, #4
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	659a      	str	r2, [r3, #88]	; 0x58
 80033f4:	e007      	b.n	8003406 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80033fe:	f023 0303 	bic.w	r3, r3, #3
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800340a:	4618      	mov	r0, r3
 800340c:	3714      	adds	r7, #20
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	aaaaaaab 	.word	0xaaaaaaab
 800341c:	0800d404 	.word	0x0800d404

08003420 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003420:	b480      	push	{r7}
 8003422:	b085      	sub	sp, #20
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003428:	2300      	movs	r3, #0
 800342a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003430:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d11f      	bne.n	800347a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	2b03      	cmp	r3, #3
 800343e:	d856      	bhi.n	80034ee <DMA_CheckFifoParam+0xce>
 8003440:	a201      	add	r2, pc, #4	; (adr r2, 8003448 <DMA_CheckFifoParam+0x28>)
 8003442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003446:	bf00      	nop
 8003448:	08003459 	.word	0x08003459
 800344c:	0800346b 	.word	0x0800346b
 8003450:	08003459 	.word	0x08003459
 8003454:	080034ef 	.word	0x080034ef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d046      	beq.n	80034f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003468:	e043      	b.n	80034f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003472:	d140      	bne.n	80034f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003478:	e03d      	b.n	80034f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003482:	d121      	bne.n	80034c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	2b03      	cmp	r3, #3
 8003488:	d837      	bhi.n	80034fa <DMA_CheckFifoParam+0xda>
 800348a:	a201      	add	r2, pc, #4	; (adr r2, 8003490 <DMA_CheckFifoParam+0x70>)
 800348c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003490:	080034a1 	.word	0x080034a1
 8003494:	080034a7 	.word	0x080034a7
 8003498:	080034a1 	.word	0x080034a1
 800349c:	080034b9 	.word	0x080034b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	73fb      	strb	r3, [r7, #15]
      break;
 80034a4:	e030      	b.n	8003508 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d025      	beq.n	80034fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034b6:	e022      	b.n	80034fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80034c0:	d11f      	bne.n	8003502 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80034c6:	e01c      	b.n	8003502 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d903      	bls.n	80034d6 <DMA_CheckFifoParam+0xb6>
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	2b03      	cmp	r3, #3
 80034d2:	d003      	beq.n	80034dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80034d4:	e018      	b.n	8003508 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	73fb      	strb	r3, [r7, #15]
      break;
 80034da:	e015      	b.n	8003508 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d00e      	beq.n	8003506 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	73fb      	strb	r3, [r7, #15]
      break;
 80034ec:	e00b      	b.n	8003506 <DMA_CheckFifoParam+0xe6>
      break;
 80034ee:	bf00      	nop
 80034f0:	e00a      	b.n	8003508 <DMA_CheckFifoParam+0xe8>
      break;
 80034f2:	bf00      	nop
 80034f4:	e008      	b.n	8003508 <DMA_CheckFifoParam+0xe8>
      break;
 80034f6:	bf00      	nop
 80034f8:	e006      	b.n	8003508 <DMA_CheckFifoParam+0xe8>
      break;
 80034fa:	bf00      	nop
 80034fc:	e004      	b.n	8003508 <DMA_CheckFifoParam+0xe8>
      break;
 80034fe:	bf00      	nop
 8003500:	e002      	b.n	8003508 <DMA_CheckFifoParam+0xe8>
      break;   
 8003502:	bf00      	nop
 8003504:	e000      	b.n	8003508 <DMA_CheckFifoParam+0xe8>
      break;
 8003506:	bf00      	nop
    }
  } 
  
  return status; 
 8003508:	7bfb      	ldrb	r3, [r7, #15]
}
 800350a:	4618      	mov	r0, r3
 800350c:	3714      	adds	r7, #20
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop

08003518 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003518:	b480      	push	{r7}
 800351a:	b089      	sub	sp, #36	; 0x24
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003522:	2300      	movs	r3, #0
 8003524:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003526:	2300      	movs	r3, #0
 8003528:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800352a:	2300      	movs	r3, #0
 800352c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800352e:	2300      	movs	r3, #0
 8003530:	61fb      	str	r3, [r7, #28]
 8003532:	e16b      	b.n	800380c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003534:	2201      	movs	r2, #1
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	fa02 f303 	lsl.w	r3, r2, r3
 800353c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	4013      	ands	r3, r2
 8003546:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	429a      	cmp	r2, r3
 800354e:	f040 815a 	bne.w	8003806 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f003 0303 	and.w	r3, r3, #3
 800355a:	2b01      	cmp	r3, #1
 800355c:	d005      	beq.n	800356a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003566:	2b02      	cmp	r3, #2
 8003568:	d130      	bne.n	80035cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	005b      	lsls	r3, r3, #1
 8003574:	2203      	movs	r2, #3
 8003576:	fa02 f303 	lsl.w	r3, r2, r3
 800357a:	43db      	mvns	r3, r3
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	4013      	ands	r3, r2
 8003580:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	68da      	ldr	r2, [r3, #12]
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	fa02 f303 	lsl.w	r3, r2, r3
 800358e:	69ba      	ldr	r2, [r7, #24]
 8003590:	4313      	orrs	r3, r2
 8003592:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	69ba      	ldr	r2, [r7, #24]
 8003598:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035a0:	2201      	movs	r2, #1
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	fa02 f303 	lsl.w	r3, r2, r3
 80035a8:	43db      	mvns	r3, r3
 80035aa:	69ba      	ldr	r2, [r7, #24]
 80035ac:	4013      	ands	r3, r2
 80035ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	091b      	lsrs	r3, r3, #4
 80035b6:	f003 0201 	and.w	r2, r3, #1
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	fa02 f303 	lsl.w	r3, r2, r3
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f003 0303 	and.w	r3, r3, #3
 80035d4:	2b03      	cmp	r3, #3
 80035d6:	d017      	beq.n	8003608 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	005b      	lsls	r3, r3, #1
 80035e2:	2203      	movs	r2, #3
 80035e4:	fa02 f303 	lsl.w	r3, r2, r3
 80035e8:	43db      	mvns	r3, r3
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	4013      	ands	r3, r2
 80035ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	fa02 f303 	lsl.w	r3, r2, r3
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	4313      	orrs	r3, r2
 8003600:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f003 0303 	and.w	r3, r3, #3
 8003610:	2b02      	cmp	r3, #2
 8003612:	d123      	bne.n	800365c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	08da      	lsrs	r2, r3, #3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	3208      	adds	r2, #8
 800361c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003620:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	f003 0307 	and.w	r3, r3, #7
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	220f      	movs	r2, #15
 800362c:	fa02 f303 	lsl.w	r3, r2, r3
 8003630:	43db      	mvns	r3, r3
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	4013      	ands	r3, r2
 8003636:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	691a      	ldr	r2, [r3, #16]
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	f003 0307 	and.w	r3, r3, #7
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	fa02 f303 	lsl.w	r3, r2, r3
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	4313      	orrs	r3, r2
 800364c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	08da      	lsrs	r2, r3, #3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	3208      	adds	r2, #8
 8003656:	69b9      	ldr	r1, [r7, #24]
 8003658:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	2203      	movs	r2, #3
 8003668:	fa02 f303 	lsl.w	r3, r2, r3
 800366c:	43db      	mvns	r3, r3
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	4013      	ands	r3, r2
 8003672:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f003 0203 	and.w	r2, r3, #3
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	005b      	lsls	r3, r3, #1
 8003680:	fa02 f303 	lsl.w	r3, r2, r3
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	4313      	orrs	r3, r2
 8003688:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003698:	2b00      	cmp	r3, #0
 800369a:	f000 80b4 	beq.w	8003806 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800369e:	2300      	movs	r3, #0
 80036a0:	60fb      	str	r3, [r7, #12]
 80036a2:	4b60      	ldr	r3, [pc, #384]	; (8003824 <HAL_GPIO_Init+0x30c>)
 80036a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a6:	4a5f      	ldr	r2, [pc, #380]	; (8003824 <HAL_GPIO_Init+0x30c>)
 80036a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036ac:	6453      	str	r3, [r2, #68]	; 0x44
 80036ae:	4b5d      	ldr	r3, [pc, #372]	; (8003824 <HAL_GPIO_Init+0x30c>)
 80036b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036b6:	60fb      	str	r3, [r7, #12]
 80036b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036ba:	4a5b      	ldr	r2, [pc, #364]	; (8003828 <HAL_GPIO_Init+0x310>)
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	089b      	lsrs	r3, r3, #2
 80036c0:	3302      	adds	r3, #2
 80036c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	f003 0303 	and.w	r3, r3, #3
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	220f      	movs	r2, #15
 80036d2:	fa02 f303 	lsl.w	r3, r2, r3
 80036d6:	43db      	mvns	r3, r3
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	4013      	ands	r3, r2
 80036dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a52      	ldr	r2, [pc, #328]	; (800382c <HAL_GPIO_Init+0x314>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d02b      	beq.n	800373e <HAL_GPIO_Init+0x226>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a51      	ldr	r2, [pc, #324]	; (8003830 <HAL_GPIO_Init+0x318>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d025      	beq.n	800373a <HAL_GPIO_Init+0x222>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a50      	ldr	r2, [pc, #320]	; (8003834 <HAL_GPIO_Init+0x31c>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d01f      	beq.n	8003736 <HAL_GPIO_Init+0x21e>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a4f      	ldr	r2, [pc, #316]	; (8003838 <HAL_GPIO_Init+0x320>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d019      	beq.n	8003732 <HAL_GPIO_Init+0x21a>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a4e      	ldr	r2, [pc, #312]	; (800383c <HAL_GPIO_Init+0x324>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d013      	beq.n	800372e <HAL_GPIO_Init+0x216>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a4d      	ldr	r2, [pc, #308]	; (8003840 <HAL_GPIO_Init+0x328>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d00d      	beq.n	800372a <HAL_GPIO_Init+0x212>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a4c      	ldr	r2, [pc, #304]	; (8003844 <HAL_GPIO_Init+0x32c>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d007      	beq.n	8003726 <HAL_GPIO_Init+0x20e>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a4b      	ldr	r2, [pc, #300]	; (8003848 <HAL_GPIO_Init+0x330>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d101      	bne.n	8003722 <HAL_GPIO_Init+0x20a>
 800371e:	2307      	movs	r3, #7
 8003720:	e00e      	b.n	8003740 <HAL_GPIO_Init+0x228>
 8003722:	2308      	movs	r3, #8
 8003724:	e00c      	b.n	8003740 <HAL_GPIO_Init+0x228>
 8003726:	2306      	movs	r3, #6
 8003728:	e00a      	b.n	8003740 <HAL_GPIO_Init+0x228>
 800372a:	2305      	movs	r3, #5
 800372c:	e008      	b.n	8003740 <HAL_GPIO_Init+0x228>
 800372e:	2304      	movs	r3, #4
 8003730:	e006      	b.n	8003740 <HAL_GPIO_Init+0x228>
 8003732:	2303      	movs	r3, #3
 8003734:	e004      	b.n	8003740 <HAL_GPIO_Init+0x228>
 8003736:	2302      	movs	r3, #2
 8003738:	e002      	b.n	8003740 <HAL_GPIO_Init+0x228>
 800373a:	2301      	movs	r3, #1
 800373c:	e000      	b.n	8003740 <HAL_GPIO_Init+0x228>
 800373e:	2300      	movs	r3, #0
 8003740:	69fa      	ldr	r2, [r7, #28]
 8003742:	f002 0203 	and.w	r2, r2, #3
 8003746:	0092      	lsls	r2, r2, #2
 8003748:	4093      	lsls	r3, r2
 800374a:	69ba      	ldr	r2, [r7, #24]
 800374c:	4313      	orrs	r3, r2
 800374e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003750:	4935      	ldr	r1, [pc, #212]	; (8003828 <HAL_GPIO_Init+0x310>)
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	089b      	lsrs	r3, r3, #2
 8003756:	3302      	adds	r3, #2
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800375e:	4b3b      	ldr	r3, [pc, #236]	; (800384c <HAL_GPIO_Init+0x334>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	43db      	mvns	r3, r3
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	4013      	ands	r3, r2
 800376c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d003      	beq.n	8003782 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	4313      	orrs	r3, r2
 8003780:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003782:	4a32      	ldr	r2, [pc, #200]	; (800384c <HAL_GPIO_Init+0x334>)
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003788:	4b30      	ldr	r3, [pc, #192]	; (800384c <HAL_GPIO_Init+0x334>)
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	43db      	mvns	r3, r3
 8003792:	69ba      	ldr	r2, [r7, #24]
 8003794:	4013      	ands	r3, r2
 8003796:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d003      	beq.n	80037ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037ac:	4a27      	ldr	r2, [pc, #156]	; (800384c <HAL_GPIO_Init+0x334>)
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037b2:	4b26      	ldr	r3, [pc, #152]	; (800384c <HAL_GPIO_Init+0x334>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	43db      	mvns	r3, r3
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	4013      	ands	r3, r2
 80037c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d003      	beq.n	80037d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80037ce:	69ba      	ldr	r2, [r7, #24]
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037d6:	4a1d      	ldr	r2, [pc, #116]	; (800384c <HAL_GPIO_Init+0x334>)
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037dc:	4b1b      	ldr	r3, [pc, #108]	; (800384c <HAL_GPIO_Init+0x334>)
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	43db      	mvns	r3, r3
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	4013      	ands	r3, r2
 80037ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d003      	beq.n	8003800 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80037f8:	69ba      	ldr	r2, [r7, #24]
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003800:	4a12      	ldr	r2, [pc, #72]	; (800384c <HAL_GPIO_Init+0x334>)
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	3301      	adds	r3, #1
 800380a:	61fb      	str	r3, [r7, #28]
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	2b0f      	cmp	r3, #15
 8003810:	f67f ae90 	bls.w	8003534 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003814:	bf00      	nop
 8003816:	bf00      	nop
 8003818:	3724      	adds	r7, #36	; 0x24
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	40023800 	.word	0x40023800
 8003828:	40013800 	.word	0x40013800
 800382c:	40020000 	.word	0x40020000
 8003830:	40020400 	.word	0x40020400
 8003834:	40020800 	.word	0x40020800
 8003838:	40020c00 	.word	0x40020c00
 800383c:	40021000 	.word	0x40021000
 8003840:	40021400 	.word	0x40021400
 8003844:	40021800 	.word	0x40021800
 8003848:	40021c00 	.word	0x40021c00
 800384c:	40013c00 	.word	0x40013c00

08003850 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	460b      	mov	r3, r1
 800385a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	691a      	ldr	r2, [r3, #16]
 8003860:	887b      	ldrh	r3, [r7, #2]
 8003862:	4013      	ands	r3, r2
 8003864:	2b00      	cmp	r3, #0
 8003866:	d002      	beq.n	800386e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003868:	2301      	movs	r3, #1
 800386a:	73fb      	strb	r3, [r7, #15]
 800386c:	e001      	b.n	8003872 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800386e:	2300      	movs	r3, #0
 8003870:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003872:	7bfb      	ldrb	r3, [r7, #15]
}
 8003874:	4618      	mov	r0, r3
 8003876:	3714      	adds	r7, #20
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	460b      	mov	r3, r1
 800388a:	807b      	strh	r3, [r7, #2]
 800388c:	4613      	mov	r3, r2
 800388e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003890:	787b      	ldrb	r3, [r7, #1]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003896:	887a      	ldrh	r2, [r7, #2]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800389c:	e003      	b.n	80038a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800389e:	887b      	ldrh	r3, [r7, #2]
 80038a0:	041a      	lsls	r2, r3, #16
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	619a      	str	r2, [r3, #24]
}
 80038a6:	bf00      	nop
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr

080038b2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80038b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038b4:	b08f      	sub	sp, #60	; 0x3c
 80038b6:	af0a      	add	r7, sp, #40	; 0x28
 80038b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d101      	bne.n	80038c4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e054      	b.n	800396e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d106      	bne.n	80038e4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f008 fc3a 	bl	800c158 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2203      	movs	r2, #3
 80038e8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d102      	bne.n	80038fe <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4618      	mov	r0, r3
 8003904:	f004 fc22 	bl	800814c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	603b      	str	r3, [r7, #0]
 800390e:	687e      	ldr	r6, [r7, #4]
 8003910:	466d      	mov	r5, sp
 8003912:	f106 0410 	add.w	r4, r6, #16
 8003916:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003918:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800391a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800391c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800391e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003922:	e885 0003 	stmia.w	r5, {r0, r1}
 8003926:	1d33      	adds	r3, r6, #4
 8003928:	cb0e      	ldmia	r3, {r1, r2, r3}
 800392a:	6838      	ldr	r0, [r7, #0]
 800392c:	f004 fb9c 	bl	8008068 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2101      	movs	r1, #1
 8003936:	4618      	mov	r0, r3
 8003938:	f004 fc19 	bl	800816e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	603b      	str	r3, [r7, #0]
 8003942:	687e      	ldr	r6, [r7, #4]
 8003944:	466d      	mov	r5, sp
 8003946:	f106 0410 	add.w	r4, r6, #16
 800394a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800394c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800394e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003950:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003952:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003956:	e885 0003 	stmia.w	r5, {r0, r1}
 800395a:	1d33      	adds	r3, r6, #4
 800395c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800395e:	6838      	ldr	r0, [r7, #0]
 8003960:	f004 fd80 	bl	8008464 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3714      	adds	r7, #20
 8003972:	46bd      	mov	sp, r7
 8003974:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003976 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003976:	b590      	push	{r4, r7, lr}
 8003978:	b089      	sub	sp, #36	; 0x24
 800397a:	af04      	add	r7, sp, #16
 800397c:	6078      	str	r0, [r7, #4]
 800397e:	4608      	mov	r0, r1
 8003980:	4611      	mov	r1, r2
 8003982:	461a      	mov	r2, r3
 8003984:	4603      	mov	r3, r0
 8003986:	70fb      	strb	r3, [r7, #3]
 8003988:	460b      	mov	r3, r1
 800398a:	70bb      	strb	r3, [r7, #2]
 800398c:	4613      	mov	r3, r2
 800398e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003996:	2b01      	cmp	r3, #1
 8003998:	d101      	bne.n	800399e <HAL_HCD_HC_Init+0x28>
 800399a:	2302      	movs	r3, #2
 800399c:	e076      	b.n	8003a8c <HAL_HCD_HC_Init+0x116>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2201      	movs	r2, #1
 80039a2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80039a6:	78fb      	ldrb	r3, [r7, #3]
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	212c      	movs	r1, #44	; 0x2c
 80039ac:	fb01 f303 	mul.w	r3, r1, r3
 80039b0:	4413      	add	r3, r2
 80039b2:	333d      	adds	r3, #61	; 0x3d
 80039b4:	2200      	movs	r2, #0
 80039b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80039b8:	78fb      	ldrb	r3, [r7, #3]
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	212c      	movs	r1, #44	; 0x2c
 80039be:	fb01 f303 	mul.w	r3, r1, r3
 80039c2:	4413      	add	r3, r2
 80039c4:	3338      	adds	r3, #56	; 0x38
 80039c6:	787a      	ldrb	r2, [r7, #1]
 80039c8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80039ca:	78fb      	ldrb	r3, [r7, #3]
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	212c      	movs	r1, #44	; 0x2c
 80039d0:	fb01 f303 	mul.w	r3, r1, r3
 80039d4:	4413      	add	r3, r2
 80039d6:	3340      	adds	r3, #64	; 0x40
 80039d8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80039da:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80039dc:	78fb      	ldrb	r3, [r7, #3]
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	212c      	movs	r1, #44	; 0x2c
 80039e2:	fb01 f303 	mul.w	r3, r1, r3
 80039e6:	4413      	add	r3, r2
 80039e8:	3339      	adds	r3, #57	; 0x39
 80039ea:	78fa      	ldrb	r2, [r7, #3]
 80039ec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80039ee:	78fb      	ldrb	r3, [r7, #3]
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	212c      	movs	r1, #44	; 0x2c
 80039f4:	fb01 f303 	mul.w	r3, r1, r3
 80039f8:	4413      	add	r3, r2
 80039fa:	333f      	adds	r3, #63	; 0x3f
 80039fc:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003a00:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003a02:	78fb      	ldrb	r3, [r7, #3]
 8003a04:	78ba      	ldrb	r2, [r7, #2]
 8003a06:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a0a:	b2d0      	uxtb	r0, r2
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	212c      	movs	r1, #44	; 0x2c
 8003a10:	fb01 f303 	mul.w	r3, r1, r3
 8003a14:	4413      	add	r3, r2
 8003a16:	333a      	adds	r3, #58	; 0x3a
 8003a18:	4602      	mov	r2, r0
 8003a1a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003a1c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	da09      	bge.n	8003a38 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003a24:	78fb      	ldrb	r3, [r7, #3]
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	212c      	movs	r1, #44	; 0x2c
 8003a2a:	fb01 f303 	mul.w	r3, r1, r3
 8003a2e:	4413      	add	r3, r2
 8003a30:	333b      	adds	r3, #59	; 0x3b
 8003a32:	2201      	movs	r2, #1
 8003a34:	701a      	strb	r2, [r3, #0]
 8003a36:	e008      	b.n	8003a4a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003a38:	78fb      	ldrb	r3, [r7, #3]
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	212c      	movs	r1, #44	; 0x2c
 8003a3e:	fb01 f303 	mul.w	r3, r1, r3
 8003a42:	4413      	add	r3, r2
 8003a44:	333b      	adds	r3, #59	; 0x3b
 8003a46:	2200      	movs	r2, #0
 8003a48:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003a4a:	78fb      	ldrb	r3, [r7, #3]
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	212c      	movs	r1, #44	; 0x2c
 8003a50:	fb01 f303 	mul.w	r3, r1, r3
 8003a54:	4413      	add	r3, r2
 8003a56:	333c      	adds	r3, #60	; 0x3c
 8003a58:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003a5c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6818      	ldr	r0, [r3, #0]
 8003a62:	787c      	ldrb	r4, [r7, #1]
 8003a64:	78ba      	ldrb	r2, [r7, #2]
 8003a66:	78f9      	ldrb	r1, [r7, #3]
 8003a68:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003a6a:	9302      	str	r3, [sp, #8]
 8003a6c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003a70:	9301      	str	r3, [sp, #4]
 8003a72:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003a76:	9300      	str	r3, [sp, #0]
 8003a78:	4623      	mov	r3, r4
 8003a7a:	f004 fe6d 	bl	8008758 <USB_HC_Init>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3714      	adds	r7, #20
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd90      	pop	{r4, r7, pc}

08003a94 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d101      	bne.n	8003ab2 <HAL_HCD_HC_Halt+0x1e>
 8003aae:	2302      	movs	r3, #2
 8003ab0:	e00f      	b.n	8003ad2 <HAL_HCD_HC_Halt+0x3e>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	78fa      	ldrb	r2, [r7, #3]
 8003ac0:	4611      	mov	r1, r2
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f005 f8a9 	bl	8008c1a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3710      	adds	r7, #16
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
	...

08003adc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	4608      	mov	r0, r1
 8003ae6:	4611      	mov	r1, r2
 8003ae8:	461a      	mov	r2, r3
 8003aea:	4603      	mov	r3, r0
 8003aec:	70fb      	strb	r3, [r7, #3]
 8003aee:	460b      	mov	r3, r1
 8003af0:	70bb      	strb	r3, [r7, #2]
 8003af2:	4613      	mov	r3, r2
 8003af4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003af6:	78fb      	ldrb	r3, [r7, #3]
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	212c      	movs	r1, #44	; 0x2c
 8003afc:	fb01 f303 	mul.w	r3, r1, r3
 8003b00:	4413      	add	r3, r2
 8003b02:	333b      	adds	r3, #59	; 0x3b
 8003b04:	78ba      	ldrb	r2, [r7, #2]
 8003b06:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003b08:	78fb      	ldrb	r3, [r7, #3]
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	212c      	movs	r1, #44	; 0x2c
 8003b0e:	fb01 f303 	mul.w	r3, r1, r3
 8003b12:	4413      	add	r3, r2
 8003b14:	333f      	adds	r3, #63	; 0x3f
 8003b16:	787a      	ldrb	r2, [r7, #1]
 8003b18:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003b1a:	7c3b      	ldrb	r3, [r7, #16]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d112      	bne.n	8003b46 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003b20:	78fb      	ldrb	r3, [r7, #3]
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	212c      	movs	r1, #44	; 0x2c
 8003b26:	fb01 f303 	mul.w	r3, r1, r3
 8003b2a:	4413      	add	r3, r2
 8003b2c:	3342      	adds	r3, #66	; 0x42
 8003b2e:	2203      	movs	r2, #3
 8003b30:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003b32:	78fb      	ldrb	r3, [r7, #3]
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	212c      	movs	r1, #44	; 0x2c
 8003b38:	fb01 f303 	mul.w	r3, r1, r3
 8003b3c:	4413      	add	r3, r2
 8003b3e:	333d      	adds	r3, #61	; 0x3d
 8003b40:	7f3a      	ldrb	r2, [r7, #28]
 8003b42:	701a      	strb	r2, [r3, #0]
 8003b44:	e008      	b.n	8003b58 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003b46:	78fb      	ldrb	r3, [r7, #3]
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	212c      	movs	r1, #44	; 0x2c
 8003b4c:	fb01 f303 	mul.w	r3, r1, r3
 8003b50:	4413      	add	r3, r2
 8003b52:	3342      	adds	r3, #66	; 0x42
 8003b54:	2202      	movs	r2, #2
 8003b56:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003b58:	787b      	ldrb	r3, [r7, #1]
 8003b5a:	2b03      	cmp	r3, #3
 8003b5c:	f200 80c6 	bhi.w	8003cec <HAL_HCD_HC_SubmitRequest+0x210>
 8003b60:	a201      	add	r2, pc, #4	; (adr r2, 8003b68 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b66:	bf00      	nop
 8003b68:	08003b79 	.word	0x08003b79
 8003b6c:	08003cd9 	.word	0x08003cd9
 8003b70:	08003bdd 	.word	0x08003bdd
 8003b74:	08003c5b 	.word	0x08003c5b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003b78:	7c3b      	ldrb	r3, [r7, #16]
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	f040 80b8 	bne.w	8003cf0 <HAL_HCD_HC_SubmitRequest+0x214>
 8003b80:	78bb      	ldrb	r3, [r7, #2]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	f040 80b4 	bne.w	8003cf0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003b88:	8b3b      	ldrh	r3, [r7, #24]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d108      	bne.n	8003ba0 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003b8e:	78fb      	ldrb	r3, [r7, #3]
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	212c      	movs	r1, #44	; 0x2c
 8003b94:	fb01 f303 	mul.w	r3, r1, r3
 8003b98:	4413      	add	r3, r2
 8003b9a:	3355      	adds	r3, #85	; 0x55
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003ba0:	78fb      	ldrb	r3, [r7, #3]
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	212c      	movs	r1, #44	; 0x2c
 8003ba6:	fb01 f303 	mul.w	r3, r1, r3
 8003baa:	4413      	add	r3, r2
 8003bac:	3355      	adds	r3, #85	; 0x55
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d109      	bne.n	8003bc8 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003bb4:	78fb      	ldrb	r3, [r7, #3]
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	212c      	movs	r1, #44	; 0x2c
 8003bba:	fb01 f303 	mul.w	r3, r1, r3
 8003bbe:	4413      	add	r3, r2
 8003bc0:	3342      	adds	r3, #66	; 0x42
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003bc6:	e093      	b.n	8003cf0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003bc8:	78fb      	ldrb	r3, [r7, #3]
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	212c      	movs	r1, #44	; 0x2c
 8003bce:	fb01 f303 	mul.w	r3, r1, r3
 8003bd2:	4413      	add	r3, r2
 8003bd4:	3342      	adds	r3, #66	; 0x42
 8003bd6:	2202      	movs	r2, #2
 8003bd8:	701a      	strb	r2, [r3, #0]
      break;
 8003bda:	e089      	b.n	8003cf0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003bdc:	78bb      	ldrb	r3, [r7, #2]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d11d      	bne.n	8003c1e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003be2:	78fb      	ldrb	r3, [r7, #3]
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	212c      	movs	r1, #44	; 0x2c
 8003be8:	fb01 f303 	mul.w	r3, r1, r3
 8003bec:	4413      	add	r3, r2
 8003bee:	3355      	adds	r3, #85	; 0x55
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d109      	bne.n	8003c0a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003bf6:	78fb      	ldrb	r3, [r7, #3]
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	212c      	movs	r1, #44	; 0x2c
 8003bfc:	fb01 f303 	mul.w	r3, r1, r3
 8003c00:	4413      	add	r3, r2
 8003c02:	3342      	adds	r3, #66	; 0x42
 8003c04:	2200      	movs	r2, #0
 8003c06:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003c08:	e073      	b.n	8003cf2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003c0a:	78fb      	ldrb	r3, [r7, #3]
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	212c      	movs	r1, #44	; 0x2c
 8003c10:	fb01 f303 	mul.w	r3, r1, r3
 8003c14:	4413      	add	r3, r2
 8003c16:	3342      	adds	r3, #66	; 0x42
 8003c18:	2202      	movs	r2, #2
 8003c1a:	701a      	strb	r2, [r3, #0]
      break;
 8003c1c:	e069      	b.n	8003cf2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003c1e:	78fb      	ldrb	r3, [r7, #3]
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	212c      	movs	r1, #44	; 0x2c
 8003c24:	fb01 f303 	mul.w	r3, r1, r3
 8003c28:	4413      	add	r3, r2
 8003c2a:	3354      	adds	r3, #84	; 0x54
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d109      	bne.n	8003c46 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003c32:	78fb      	ldrb	r3, [r7, #3]
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	212c      	movs	r1, #44	; 0x2c
 8003c38:	fb01 f303 	mul.w	r3, r1, r3
 8003c3c:	4413      	add	r3, r2
 8003c3e:	3342      	adds	r3, #66	; 0x42
 8003c40:	2200      	movs	r2, #0
 8003c42:	701a      	strb	r2, [r3, #0]
      break;
 8003c44:	e055      	b.n	8003cf2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003c46:	78fb      	ldrb	r3, [r7, #3]
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	212c      	movs	r1, #44	; 0x2c
 8003c4c:	fb01 f303 	mul.w	r3, r1, r3
 8003c50:	4413      	add	r3, r2
 8003c52:	3342      	adds	r3, #66	; 0x42
 8003c54:	2202      	movs	r2, #2
 8003c56:	701a      	strb	r2, [r3, #0]
      break;
 8003c58:	e04b      	b.n	8003cf2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003c5a:	78bb      	ldrb	r3, [r7, #2]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d11d      	bne.n	8003c9c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003c60:	78fb      	ldrb	r3, [r7, #3]
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	212c      	movs	r1, #44	; 0x2c
 8003c66:	fb01 f303 	mul.w	r3, r1, r3
 8003c6a:	4413      	add	r3, r2
 8003c6c:	3355      	adds	r3, #85	; 0x55
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d109      	bne.n	8003c88 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003c74:	78fb      	ldrb	r3, [r7, #3]
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	212c      	movs	r1, #44	; 0x2c
 8003c7a:	fb01 f303 	mul.w	r3, r1, r3
 8003c7e:	4413      	add	r3, r2
 8003c80:	3342      	adds	r3, #66	; 0x42
 8003c82:	2200      	movs	r2, #0
 8003c84:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003c86:	e034      	b.n	8003cf2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003c88:	78fb      	ldrb	r3, [r7, #3]
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	212c      	movs	r1, #44	; 0x2c
 8003c8e:	fb01 f303 	mul.w	r3, r1, r3
 8003c92:	4413      	add	r3, r2
 8003c94:	3342      	adds	r3, #66	; 0x42
 8003c96:	2202      	movs	r2, #2
 8003c98:	701a      	strb	r2, [r3, #0]
      break;
 8003c9a:	e02a      	b.n	8003cf2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003c9c:	78fb      	ldrb	r3, [r7, #3]
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	212c      	movs	r1, #44	; 0x2c
 8003ca2:	fb01 f303 	mul.w	r3, r1, r3
 8003ca6:	4413      	add	r3, r2
 8003ca8:	3354      	adds	r3, #84	; 0x54
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d109      	bne.n	8003cc4 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003cb0:	78fb      	ldrb	r3, [r7, #3]
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	212c      	movs	r1, #44	; 0x2c
 8003cb6:	fb01 f303 	mul.w	r3, r1, r3
 8003cba:	4413      	add	r3, r2
 8003cbc:	3342      	adds	r3, #66	; 0x42
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	701a      	strb	r2, [r3, #0]
      break;
 8003cc2:	e016      	b.n	8003cf2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003cc4:	78fb      	ldrb	r3, [r7, #3]
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	212c      	movs	r1, #44	; 0x2c
 8003cca:	fb01 f303 	mul.w	r3, r1, r3
 8003cce:	4413      	add	r3, r2
 8003cd0:	3342      	adds	r3, #66	; 0x42
 8003cd2:	2202      	movs	r2, #2
 8003cd4:	701a      	strb	r2, [r3, #0]
      break;
 8003cd6:	e00c      	b.n	8003cf2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003cd8:	78fb      	ldrb	r3, [r7, #3]
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	212c      	movs	r1, #44	; 0x2c
 8003cde:	fb01 f303 	mul.w	r3, r1, r3
 8003ce2:	4413      	add	r3, r2
 8003ce4:	3342      	adds	r3, #66	; 0x42
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	701a      	strb	r2, [r3, #0]
      break;
 8003cea:	e002      	b.n	8003cf2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003cec:	bf00      	nop
 8003cee:	e000      	b.n	8003cf2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003cf0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003cf2:	78fb      	ldrb	r3, [r7, #3]
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	212c      	movs	r1, #44	; 0x2c
 8003cf8:	fb01 f303 	mul.w	r3, r1, r3
 8003cfc:	4413      	add	r3, r2
 8003cfe:	3344      	adds	r3, #68	; 0x44
 8003d00:	697a      	ldr	r2, [r7, #20]
 8003d02:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003d04:	78fb      	ldrb	r3, [r7, #3]
 8003d06:	8b3a      	ldrh	r2, [r7, #24]
 8003d08:	6879      	ldr	r1, [r7, #4]
 8003d0a:	202c      	movs	r0, #44	; 0x2c
 8003d0c:	fb00 f303 	mul.w	r3, r0, r3
 8003d10:	440b      	add	r3, r1
 8003d12:	334c      	adds	r3, #76	; 0x4c
 8003d14:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003d16:	78fb      	ldrb	r3, [r7, #3]
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	212c      	movs	r1, #44	; 0x2c
 8003d1c:	fb01 f303 	mul.w	r3, r1, r3
 8003d20:	4413      	add	r3, r2
 8003d22:	3360      	adds	r3, #96	; 0x60
 8003d24:	2200      	movs	r2, #0
 8003d26:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003d28:	78fb      	ldrb	r3, [r7, #3]
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	212c      	movs	r1, #44	; 0x2c
 8003d2e:	fb01 f303 	mul.w	r3, r1, r3
 8003d32:	4413      	add	r3, r2
 8003d34:	3350      	adds	r3, #80	; 0x50
 8003d36:	2200      	movs	r2, #0
 8003d38:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003d3a:	78fb      	ldrb	r3, [r7, #3]
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	212c      	movs	r1, #44	; 0x2c
 8003d40:	fb01 f303 	mul.w	r3, r1, r3
 8003d44:	4413      	add	r3, r2
 8003d46:	3339      	adds	r3, #57	; 0x39
 8003d48:	78fa      	ldrb	r2, [r7, #3]
 8003d4a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003d4c:	78fb      	ldrb	r3, [r7, #3]
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	212c      	movs	r1, #44	; 0x2c
 8003d52:	fb01 f303 	mul.w	r3, r1, r3
 8003d56:	4413      	add	r3, r2
 8003d58:	3361      	adds	r3, #97	; 0x61
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6818      	ldr	r0, [r3, #0]
 8003d62:	78fb      	ldrb	r3, [r7, #3]
 8003d64:	222c      	movs	r2, #44	; 0x2c
 8003d66:	fb02 f303 	mul.w	r3, r2, r3
 8003d6a:	3338      	adds	r3, #56	; 0x38
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	18d1      	adds	r1, r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	461a      	mov	r2, r3
 8003d78:	f004 fdfc 	bl	8008974 <USB_HC_StartXfer>
 8003d7c:	4603      	mov	r3, r0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3708      	adds	r7, #8
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop

08003d88 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b086      	sub	sp, #24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f004 fb1f 	bl	80083e2 <USB_GetMode>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	f040 80f6 	bne.w	8003f98 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4618      	mov	r0, r3
 8003db2:	f004 fb03 	bl	80083bc <USB_ReadInterrupts>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	f000 80ec 	beq.w	8003f96 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f004 fafa 	bl	80083bc <USB_ReadInterrupts>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003dd2:	d104      	bne.n	8003dde <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003ddc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f004 faea 	bl	80083bc <USB_ReadInterrupts>
 8003de8:	4603      	mov	r3, r0
 8003dea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003df2:	d104      	bne.n	8003dfe <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003dfc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4618      	mov	r0, r3
 8003e04:	f004 fada 	bl	80083bc <USB_ReadInterrupts>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e0e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e12:	d104      	bne.n	8003e1e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003e1c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f004 faca 	bl	80083bc <USB_ReadInterrupts>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d103      	bne.n	8003e3a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2202      	movs	r2, #2
 8003e38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f004 fabc 	bl	80083bc <USB_ReadInterrupts>
 8003e44:	4603      	mov	r3, r0
 8003e46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e4e:	d11c      	bne.n	8003e8a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003e58:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0301 	and.w	r3, r3, #1
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d10f      	bne.n	8003e8a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003e6a:	2110      	movs	r1, #16
 8003e6c:	6938      	ldr	r0, [r7, #16]
 8003e6e:	f004 f9cb 	bl	8008208 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003e72:	6938      	ldr	r0, [r7, #16]
 8003e74:	f004 f9ec 	bl	8008250 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2101      	movs	r1, #1
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f004 fba4 	bl	80085cc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f008 f9e5 	bl	800c254 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f004 fa94 	bl	80083bc <USB_ReadInterrupts>
 8003e94:	4603      	mov	r3, r0
 8003e96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e9a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e9e:	d102      	bne.n	8003ea6 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f001 fa03 	bl	80052ac <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f004 fa86 	bl	80083bc <USB_ReadInterrupts>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	f003 0308 	and.w	r3, r3, #8
 8003eb6:	2b08      	cmp	r3, #8
 8003eb8:	d106      	bne.n	8003ec8 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f008 f9ae 	bl	800c21c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2208      	movs	r2, #8
 8003ec6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f004 fa75 	bl	80083bc <USB_ReadInterrupts>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	f003 0310 	and.w	r3, r3, #16
 8003ed8:	2b10      	cmp	r3, #16
 8003eda:	d101      	bne.n	8003ee0 <HAL_HCD_IRQHandler+0x158>
 8003edc:	2301      	movs	r3, #1
 8003ede:	e000      	b.n	8003ee2 <HAL_HCD_IRQHandler+0x15a>
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d012      	beq.n	8003f0c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	699a      	ldr	r2, [r3, #24]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f022 0210 	bic.w	r2, r2, #16
 8003ef4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f001 f906 	bl	8005108 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	699a      	ldr	r2, [r3, #24]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f042 0210 	orr.w	r2, r2, #16
 8003f0a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4618      	mov	r0, r3
 8003f12:	f004 fa53 	bl	80083bc <USB_ReadInterrupts>
 8003f16:	4603      	mov	r3, r0
 8003f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f20:	d13a      	bne.n	8003f98 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f004 fe66 	bl	8008bf8 <USB_HC_ReadInterrupt>
 8003f2c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003f2e:	2300      	movs	r3, #0
 8003f30:	617b      	str	r3, [r7, #20]
 8003f32:	e025      	b.n	8003f80 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	f003 030f 	and.w	r3, r3, #15
 8003f3a:	68ba      	ldr	r2, [r7, #8]
 8003f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f40:	f003 0301 	and.w	r3, r3, #1
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d018      	beq.n	8003f7a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	015a      	lsls	r2, r3, #5
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	4413      	add	r3, r2
 8003f50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f5e:	d106      	bne.n	8003f6e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	4619      	mov	r1, r3
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f8ab 	bl	80040c2 <HCD_HC_IN_IRQHandler>
 8003f6c:	e005      	b.n	8003f7a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	4619      	mov	r1, r3
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 fcc6 	bl	8004906 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	617b      	str	r3, [r7, #20]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	697a      	ldr	r2, [r7, #20]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d3d4      	bcc.n	8003f34 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f92:	615a      	str	r2, [r3, #20]
 8003f94:	e000      	b.n	8003f98 <HAL_HCD_IRQHandler+0x210>
      return;
 8003f96:	bf00      	nop
    }
  }
}
 8003f98:	3718      	adds	r7, #24
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	b082      	sub	sp, #8
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d101      	bne.n	8003fb4 <HAL_HCD_Start+0x16>
 8003fb0:	2302      	movs	r3, #2
 8003fb2:	e013      	b.n	8003fdc <HAL_HCD_Start+0x3e>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2101      	movs	r1, #1
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f004 fb66 	bl	8008694 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f004 f8ac 	bl	800812a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3708      	adds	r7, #8
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d101      	bne.n	8003ffa <HAL_HCD_Stop+0x16>
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	e00d      	b.n	8004016 <HAL_HCD_Stop+0x32>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4618      	mov	r0, r3
 8004008:	f004 ff60 	bl	8008ecc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3708      	adds	r7, #8
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}

0800401e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800401e:	b580      	push	{r7, lr}
 8004020:	b082      	sub	sp, #8
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4618      	mov	r0, r3
 800402c:	f004 fb08 	bl	8008640 <USB_ResetPort>
 8004030:	4603      	mov	r3, r0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3708      	adds	r7, #8
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}

0800403a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800403a:	b480      	push	{r7}
 800403c:	b083      	sub	sp, #12
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
 8004042:	460b      	mov	r3, r1
 8004044:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004046:	78fb      	ldrb	r3, [r7, #3]
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	212c      	movs	r1, #44	; 0x2c
 800404c:	fb01 f303 	mul.w	r3, r1, r3
 8004050:	4413      	add	r3, r2
 8004052:	3360      	adds	r3, #96	; 0x60
 8004054:	781b      	ldrb	r3, [r3, #0]
}
 8004056:	4618      	mov	r0, r3
 8004058:	370c      	adds	r7, #12
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr

08004062 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004062:	b480      	push	{r7}
 8004064:	b083      	sub	sp, #12
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
 800406a:	460b      	mov	r3, r1
 800406c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800406e:	78fb      	ldrb	r3, [r7, #3]
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	212c      	movs	r1, #44	; 0x2c
 8004074:	fb01 f303 	mul.w	r3, r1, r3
 8004078:	4413      	add	r3, r2
 800407a:	3350      	adds	r3, #80	; 0x50
 800407c:	681b      	ldr	r3, [r3, #0]
}
 800407e:	4618      	mov	r0, r3
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr

0800408a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b082      	sub	sp, #8
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4618      	mov	r0, r3
 8004098:	f004 fb4c 	bl	8008734 <USB_GetCurrentFrame>
 800409c:	4603      	mov	r3, r0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3708      	adds	r7, #8
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80040a6:	b580      	push	{r7, lr}
 80040a8:	b082      	sub	sp, #8
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4618      	mov	r0, r3
 80040b4:	f004 fb27 	bl	8008706 <USB_GetHostSpeed>
 80040b8:	4603      	mov	r3, r0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3708      	adds	r7, #8
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}

080040c2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80040c2:	b580      	push	{r7, lr}
 80040c4:	b086      	sub	sp, #24
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
 80040ca:	460b      	mov	r3, r1
 80040cc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80040d8:	78fb      	ldrb	r3, [r7, #3]
 80040da:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	015a      	lsls	r2, r3, #5
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	4413      	add	r3, r2
 80040e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f003 0304 	and.w	r3, r3, #4
 80040ee:	2b04      	cmp	r3, #4
 80040f0:	d119      	bne.n	8004126 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	015a      	lsls	r2, r3, #5
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	4413      	add	r3, r2
 80040fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040fe:	461a      	mov	r2, r3
 8004100:	2304      	movs	r3, #4
 8004102:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	015a      	lsls	r2, r3, #5
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	4413      	add	r3, r2
 800410c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	0151      	lsls	r1, r2, #5
 8004116:	693a      	ldr	r2, [r7, #16]
 8004118:	440a      	add	r2, r1
 800411a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800411e:	f043 0302 	orr.w	r3, r3, #2
 8004122:	60d3      	str	r3, [r2, #12]
 8004124:	e101      	b.n	800432a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	015a      	lsls	r2, r3, #5
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	4413      	add	r3, r2
 800412e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004138:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800413c:	d12b      	bne.n	8004196 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	015a      	lsls	r2, r3, #5
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	4413      	add	r3, r2
 8004146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800414a:	461a      	mov	r2, r3
 800414c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004150:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	212c      	movs	r1, #44	; 0x2c
 8004158:	fb01 f303 	mul.w	r3, r1, r3
 800415c:	4413      	add	r3, r2
 800415e:	3361      	adds	r3, #97	; 0x61
 8004160:	2207      	movs	r2, #7
 8004162:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	015a      	lsls	r2, r3, #5
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	4413      	add	r3, r2
 800416c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	0151      	lsls	r1, r2, #5
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	440a      	add	r2, r1
 800417a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800417e:	f043 0302 	orr.w	r3, r3, #2
 8004182:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	b2d2      	uxtb	r2, r2
 800418c:	4611      	mov	r1, r2
 800418e:	4618      	mov	r0, r3
 8004190:	f004 fd43 	bl	8008c1a <USB_HC_Halt>
 8004194:	e0c9      	b.n	800432a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	015a      	lsls	r2, r3, #5
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	4413      	add	r3, r2
 800419e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f003 0320 	and.w	r3, r3, #32
 80041a8:	2b20      	cmp	r3, #32
 80041aa:	d109      	bne.n	80041c0 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	015a      	lsls	r2, r3, #5
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	4413      	add	r3, r2
 80041b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041b8:	461a      	mov	r2, r3
 80041ba:	2320      	movs	r3, #32
 80041bc:	6093      	str	r3, [r2, #8]
 80041be:	e0b4      	b.n	800432a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	015a      	lsls	r2, r3, #5
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	4413      	add	r3, r2
 80041c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f003 0308 	and.w	r3, r3, #8
 80041d2:	2b08      	cmp	r3, #8
 80041d4:	d133      	bne.n	800423e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	015a      	lsls	r2, r3, #5
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	4413      	add	r3, r2
 80041de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	0151      	lsls	r1, r2, #5
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	440a      	add	r2, r1
 80041ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041f0:	f043 0302 	orr.w	r3, r3, #2
 80041f4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	212c      	movs	r1, #44	; 0x2c
 80041fc:	fb01 f303 	mul.w	r3, r1, r3
 8004200:	4413      	add	r3, r2
 8004202:	3361      	adds	r3, #97	; 0x61
 8004204:	2205      	movs	r2, #5
 8004206:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	015a      	lsls	r2, r3, #5
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	4413      	add	r3, r2
 8004210:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004214:	461a      	mov	r2, r3
 8004216:	2310      	movs	r3, #16
 8004218:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	015a      	lsls	r2, r3, #5
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	4413      	add	r3, r2
 8004222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004226:	461a      	mov	r2, r3
 8004228:	2308      	movs	r3, #8
 800422a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	b2d2      	uxtb	r2, r2
 8004234:	4611      	mov	r1, r2
 8004236:	4618      	mov	r0, r3
 8004238:	f004 fcef 	bl	8008c1a <USB_HC_Halt>
 800423c:	e075      	b.n	800432a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	015a      	lsls	r2, r3, #5
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	4413      	add	r3, r2
 8004246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004250:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004254:	d134      	bne.n	80042c0 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	015a      	lsls	r2, r3, #5
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	4413      	add	r3, r2
 800425e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	0151      	lsls	r1, r2, #5
 8004268:	693a      	ldr	r2, [r7, #16]
 800426a:	440a      	add	r2, r1
 800426c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004270:	f043 0302 	orr.w	r3, r3, #2
 8004274:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	212c      	movs	r1, #44	; 0x2c
 800427c:	fb01 f303 	mul.w	r3, r1, r3
 8004280:	4413      	add	r3, r2
 8004282:	3361      	adds	r3, #97	; 0x61
 8004284:	2208      	movs	r2, #8
 8004286:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	015a      	lsls	r2, r3, #5
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	4413      	add	r3, r2
 8004290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004294:	461a      	mov	r2, r3
 8004296:	2310      	movs	r3, #16
 8004298:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	015a      	lsls	r2, r3, #5
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	4413      	add	r3, r2
 80042a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042a6:	461a      	mov	r2, r3
 80042a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042ac:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	b2d2      	uxtb	r2, r2
 80042b6:	4611      	mov	r1, r2
 80042b8:	4618      	mov	r0, r3
 80042ba:	f004 fcae 	bl	8008c1a <USB_HC_Halt>
 80042be:	e034      	b.n	800432a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	015a      	lsls	r2, r3, #5
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	4413      	add	r3, r2
 80042c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042d2:	2b80      	cmp	r3, #128	; 0x80
 80042d4:	d129      	bne.n	800432a <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	015a      	lsls	r2, r3, #5
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	4413      	add	r3, r2
 80042de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	0151      	lsls	r1, r2, #5
 80042e8:	693a      	ldr	r2, [r7, #16]
 80042ea:	440a      	add	r2, r1
 80042ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042f0:	f043 0302 	orr.w	r3, r3, #2
 80042f4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	212c      	movs	r1, #44	; 0x2c
 80042fc:	fb01 f303 	mul.w	r3, r1, r3
 8004300:	4413      	add	r3, r2
 8004302:	3361      	adds	r3, #97	; 0x61
 8004304:	2206      	movs	r2, #6
 8004306:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	b2d2      	uxtb	r2, r2
 8004310:	4611      	mov	r1, r2
 8004312:	4618      	mov	r0, r3
 8004314:	f004 fc81 	bl	8008c1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	015a      	lsls	r2, r3, #5
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	4413      	add	r3, r2
 8004320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004324:	461a      	mov	r2, r3
 8004326:	2380      	movs	r3, #128	; 0x80
 8004328:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	015a      	lsls	r2, r3, #5
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	4413      	add	r3, r2
 8004332:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800433c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004340:	d122      	bne.n	8004388 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	015a      	lsls	r2, r3, #5
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	4413      	add	r3, r2
 800434a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	0151      	lsls	r1, r2, #5
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	440a      	add	r2, r1
 8004358:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800435c:	f043 0302 	orr.w	r3, r3, #2
 8004360:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	b2d2      	uxtb	r2, r2
 800436a:	4611      	mov	r1, r2
 800436c:	4618      	mov	r0, r3
 800436e:	f004 fc54 	bl	8008c1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	015a      	lsls	r2, r3, #5
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	4413      	add	r3, r2
 800437a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800437e:	461a      	mov	r2, r3
 8004380:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004384:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004386:	e2ba      	b.n	80048fe <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	015a      	lsls	r2, r3, #5
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	4413      	add	r3, r2
 8004390:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f003 0301 	and.w	r3, r3, #1
 800439a:	2b01      	cmp	r3, #1
 800439c:	f040 811b 	bne.w	80045d6 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d019      	beq.n	80043dc <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	212c      	movs	r1, #44	; 0x2c
 80043ae:	fb01 f303 	mul.w	r3, r1, r3
 80043b2:	4413      	add	r3, r2
 80043b4:	3348      	adds	r3, #72	; 0x48
 80043b6:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	0159      	lsls	r1, r3, #5
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	440b      	add	r3, r1
 80043c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80043ca:	1ad2      	subs	r2, r2, r3
 80043cc:	6879      	ldr	r1, [r7, #4]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	202c      	movs	r0, #44	; 0x2c
 80043d2:	fb00 f303 	mul.w	r3, r0, r3
 80043d6:	440b      	add	r3, r1
 80043d8:	3350      	adds	r3, #80	; 0x50
 80043da:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	212c      	movs	r1, #44	; 0x2c
 80043e2:	fb01 f303 	mul.w	r3, r1, r3
 80043e6:	4413      	add	r3, r2
 80043e8:	3361      	adds	r3, #97	; 0x61
 80043ea:	2201      	movs	r2, #1
 80043ec:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	212c      	movs	r1, #44	; 0x2c
 80043f4:	fb01 f303 	mul.w	r3, r1, r3
 80043f8:	4413      	add	r3, r2
 80043fa:	335c      	adds	r3, #92	; 0x5c
 80043fc:	2200      	movs	r2, #0
 80043fe:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	015a      	lsls	r2, r3, #5
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	4413      	add	r3, r2
 8004408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800440c:	461a      	mov	r2, r3
 800440e:	2301      	movs	r3, #1
 8004410:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	212c      	movs	r1, #44	; 0x2c
 8004418:	fb01 f303 	mul.w	r3, r1, r3
 800441c:	4413      	add	r3, r2
 800441e:	333f      	adds	r3, #63	; 0x3f
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d009      	beq.n	800443a <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	212c      	movs	r1, #44	; 0x2c
 800442c:	fb01 f303 	mul.w	r3, r1, r3
 8004430:	4413      	add	r3, r2
 8004432:	333f      	adds	r3, #63	; 0x3f
 8004434:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004436:	2b02      	cmp	r3, #2
 8004438:	d121      	bne.n	800447e <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	015a      	lsls	r2, r3, #5
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	4413      	add	r3, r2
 8004442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	0151      	lsls	r1, r2, #5
 800444c:	693a      	ldr	r2, [r7, #16]
 800444e:	440a      	add	r2, r1
 8004450:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004454:	f043 0302 	orr.w	r3, r3, #2
 8004458:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	b2d2      	uxtb	r2, r2
 8004462:	4611      	mov	r1, r2
 8004464:	4618      	mov	r0, r3
 8004466:	f004 fbd8 	bl	8008c1a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	015a      	lsls	r2, r3, #5
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	4413      	add	r3, r2
 8004472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004476:	461a      	mov	r2, r3
 8004478:	2310      	movs	r3, #16
 800447a:	6093      	str	r3, [r2, #8]
 800447c:	e066      	b.n	800454c <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	212c      	movs	r1, #44	; 0x2c
 8004484:	fb01 f303 	mul.w	r3, r1, r3
 8004488:	4413      	add	r3, r2
 800448a:	333f      	adds	r3, #63	; 0x3f
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	2b03      	cmp	r3, #3
 8004490:	d127      	bne.n	80044e2 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	015a      	lsls	r2, r3, #5
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	4413      	add	r3, r2
 800449a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	0151      	lsls	r1, r2, #5
 80044a4:	693a      	ldr	r2, [r7, #16]
 80044a6:	440a      	add	r2, r1
 80044a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80044ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80044b0:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	212c      	movs	r1, #44	; 0x2c
 80044b8:	fb01 f303 	mul.w	r3, r1, r3
 80044bc:	4413      	add	r3, r2
 80044be:	3360      	adds	r3, #96	; 0x60
 80044c0:	2201      	movs	r2, #1
 80044c2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	b2d9      	uxtb	r1, r3
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	202c      	movs	r0, #44	; 0x2c
 80044ce:	fb00 f303 	mul.w	r3, r0, r3
 80044d2:	4413      	add	r3, r2
 80044d4:	3360      	adds	r3, #96	; 0x60
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	461a      	mov	r2, r3
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f007 fec8 	bl	800c270 <HAL_HCD_HC_NotifyURBChange_Callback>
 80044e0:	e034      	b.n	800454c <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	212c      	movs	r1, #44	; 0x2c
 80044e8:	fb01 f303 	mul.w	r3, r1, r3
 80044ec:	4413      	add	r3, r2
 80044ee:	333f      	adds	r3, #63	; 0x3f
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d12a      	bne.n	800454c <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	212c      	movs	r1, #44	; 0x2c
 80044fc:	fb01 f303 	mul.w	r3, r1, r3
 8004500:	4413      	add	r3, r2
 8004502:	3360      	adds	r3, #96	; 0x60
 8004504:	2201      	movs	r2, #1
 8004506:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	212c      	movs	r1, #44	; 0x2c
 800450e:	fb01 f303 	mul.w	r3, r1, r3
 8004512:	4413      	add	r3, r2
 8004514:	3354      	adds	r3, #84	; 0x54
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	f083 0301 	eor.w	r3, r3, #1
 800451c:	b2d8      	uxtb	r0, r3
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	212c      	movs	r1, #44	; 0x2c
 8004524:	fb01 f303 	mul.w	r3, r1, r3
 8004528:	4413      	add	r3, r2
 800452a:	3354      	adds	r3, #84	; 0x54
 800452c:	4602      	mov	r2, r0
 800452e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	b2d9      	uxtb	r1, r3
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	202c      	movs	r0, #44	; 0x2c
 800453a:	fb00 f303 	mul.w	r3, r0, r3
 800453e:	4413      	add	r3, r2
 8004540:	3360      	adds	r3, #96	; 0x60
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	461a      	mov	r2, r3
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f007 fe92 	bl	800c270 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d12b      	bne.n	80045ac <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	212c      	movs	r1, #44	; 0x2c
 800455a:	fb01 f303 	mul.w	r3, r1, r3
 800455e:	4413      	add	r3, r2
 8004560:	3348      	adds	r3, #72	; 0x48
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	6879      	ldr	r1, [r7, #4]
 8004566:	68fa      	ldr	r2, [r7, #12]
 8004568:	202c      	movs	r0, #44	; 0x2c
 800456a:	fb00 f202 	mul.w	r2, r0, r2
 800456e:	440a      	add	r2, r1
 8004570:	3240      	adds	r2, #64	; 0x40
 8004572:	8812      	ldrh	r2, [r2, #0]
 8004574:	fbb3 f3f2 	udiv	r3, r3, r2
 8004578:	f003 0301 	and.w	r3, r3, #1
 800457c:	2b00      	cmp	r3, #0
 800457e:	f000 81be 	beq.w	80048fe <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	212c      	movs	r1, #44	; 0x2c
 8004588:	fb01 f303 	mul.w	r3, r1, r3
 800458c:	4413      	add	r3, r2
 800458e:	3354      	adds	r3, #84	; 0x54
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	f083 0301 	eor.w	r3, r3, #1
 8004596:	b2d8      	uxtb	r0, r3
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	212c      	movs	r1, #44	; 0x2c
 800459e:	fb01 f303 	mul.w	r3, r1, r3
 80045a2:	4413      	add	r3, r2
 80045a4:	3354      	adds	r3, #84	; 0x54
 80045a6:	4602      	mov	r2, r0
 80045a8:	701a      	strb	r2, [r3, #0]
}
 80045aa:	e1a8      	b.n	80048fe <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	212c      	movs	r1, #44	; 0x2c
 80045b2:	fb01 f303 	mul.w	r3, r1, r3
 80045b6:	4413      	add	r3, r2
 80045b8:	3354      	adds	r3, #84	; 0x54
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	f083 0301 	eor.w	r3, r3, #1
 80045c0:	b2d8      	uxtb	r0, r3
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	212c      	movs	r1, #44	; 0x2c
 80045c8:	fb01 f303 	mul.w	r3, r1, r3
 80045cc:	4413      	add	r3, r2
 80045ce:	3354      	adds	r3, #84	; 0x54
 80045d0:	4602      	mov	r2, r0
 80045d2:	701a      	strb	r2, [r3, #0]
}
 80045d4:	e193      	b.n	80048fe <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	015a      	lsls	r2, r3, #5
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	4413      	add	r3, r2
 80045de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f003 0302 	and.w	r3, r3, #2
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	f040 8106 	bne.w	80047fa <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	015a      	lsls	r2, r3, #5
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	4413      	add	r3, r2
 80045f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	0151      	lsls	r1, r2, #5
 8004600:	693a      	ldr	r2, [r7, #16]
 8004602:	440a      	add	r2, r1
 8004604:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004608:	f023 0302 	bic.w	r3, r3, #2
 800460c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	212c      	movs	r1, #44	; 0x2c
 8004614:	fb01 f303 	mul.w	r3, r1, r3
 8004618:	4413      	add	r3, r2
 800461a:	3361      	adds	r3, #97	; 0x61
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d109      	bne.n	8004636 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	212c      	movs	r1, #44	; 0x2c
 8004628:	fb01 f303 	mul.w	r3, r1, r3
 800462c:	4413      	add	r3, r2
 800462e:	3360      	adds	r3, #96	; 0x60
 8004630:	2201      	movs	r2, #1
 8004632:	701a      	strb	r2, [r3, #0]
 8004634:	e0c9      	b.n	80047ca <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	212c      	movs	r1, #44	; 0x2c
 800463c:	fb01 f303 	mul.w	r3, r1, r3
 8004640:	4413      	add	r3, r2
 8004642:	3361      	adds	r3, #97	; 0x61
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	2b05      	cmp	r3, #5
 8004648:	d109      	bne.n	800465e <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	212c      	movs	r1, #44	; 0x2c
 8004650:	fb01 f303 	mul.w	r3, r1, r3
 8004654:	4413      	add	r3, r2
 8004656:	3360      	adds	r3, #96	; 0x60
 8004658:	2205      	movs	r2, #5
 800465a:	701a      	strb	r2, [r3, #0]
 800465c:	e0b5      	b.n	80047ca <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	212c      	movs	r1, #44	; 0x2c
 8004664:	fb01 f303 	mul.w	r3, r1, r3
 8004668:	4413      	add	r3, r2
 800466a:	3361      	adds	r3, #97	; 0x61
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	2b06      	cmp	r3, #6
 8004670:	d009      	beq.n	8004686 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	212c      	movs	r1, #44	; 0x2c
 8004678:	fb01 f303 	mul.w	r3, r1, r3
 800467c:	4413      	add	r3, r2
 800467e:	3361      	adds	r3, #97	; 0x61
 8004680:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004682:	2b08      	cmp	r3, #8
 8004684:	d150      	bne.n	8004728 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	212c      	movs	r1, #44	; 0x2c
 800468c:	fb01 f303 	mul.w	r3, r1, r3
 8004690:	4413      	add	r3, r2
 8004692:	335c      	adds	r3, #92	; 0x5c
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	1c5a      	adds	r2, r3, #1
 8004698:	6879      	ldr	r1, [r7, #4]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	202c      	movs	r0, #44	; 0x2c
 800469e:	fb00 f303 	mul.w	r3, r0, r3
 80046a2:	440b      	add	r3, r1
 80046a4:	335c      	adds	r3, #92	; 0x5c
 80046a6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	212c      	movs	r1, #44	; 0x2c
 80046ae:	fb01 f303 	mul.w	r3, r1, r3
 80046b2:	4413      	add	r3, r2
 80046b4:	335c      	adds	r3, #92	; 0x5c
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d912      	bls.n	80046e2 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	212c      	movs	r1, #44	; 0x2c
 80046c2:	fb01 f303 	mul.w	r3, r1, r3
 80046c6:	4413      	add	r3, r2
 80046c8:	335c      	adds	r3, #92	; 0x5c
 80046ca:	2200      	movs	r2, #0
 80046cc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	212c      	movs	r1, #44	; 0x2c
 80046d4:	fb01 f303 	mul.w	r3, r1, r3
 80046d8:	4413      	add	r3, r2
 80046da:	3360      	adds	r3, #96	; 0x60
 80046dc:	2204      	movs	r2, #4
 80046de:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80046e0:	e073      	b.n	80047ca <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	212c      	movs	r1, #44	; 0x2c
 80046e8:	fb01 f303 	mul.w	r3, r1, r3
 80046ec:	4413      	add	r3, r2
 80046ee:	3360      	adds	r3, #96	; 0x60
 80046f0:	2202      	movs	r2, #2
 80046f2:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	015a      	lsls	r2, r3, #5
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	4413      	add	r3, r2
 80046fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800470a:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004712:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	015a      	lsls	r2, r3, #5
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	4413      	add	r3, r2
 800471c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004720:	461a      	mov	r2, r3
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004726:	e050      	b.n	80047ca <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	212c      	movs	r1, #44	; 0x2c
 800472e:	fb01 f303 	mul.w	r3, r1, r3
 8004732:	4413      	add	r3, r2
 8004734:	3361      	adds	r3, #97	; 0x61
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	2b03      	cmp	r3, #3
 800473a:	d122      	bne.n	8004782 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	212c      	movs	r1, #44	; 0x2c
 8004742:	fb01 f303 	mul.w	r3, r1, r3
 8004746:	4413      	add	r3, r2
 8004748:	3360      	adds	r3, #96	; 0x60
 800474a:	2202      	movs	r2, #2
 800474c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	015a      	lsls	r2, r3, #5
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	4413      	add	r3, r2
 8004756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004764:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800476c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	015a      	lsls	r2, r3, #5
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	4413      	add	r3, r2
 8004776:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800477a:	461a      	mov	r2, r3
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	6013      	str	r3, [r2, #0]
 8004780:	e023      	b.n	80047ca <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	212c      	movs	r1, #44	; 0x2c
 8004788:	fb01 f303 	mul.w	r3, r1, r3
 800478c:	4413      	add	r3, r2
 800478e:	3361      	adds	r3, #97	; 0x61
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	2b07      	cmp	r3, #7
 8004794:	d119      	bne.n	80047ca <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	212c      	movs	r1, #44	; 0x2c
 800479c:	fb01 f303 	mul.w	r3, r1, r3
 80047a0:	4413      	add	r3, r2
 80047a2:	335c      	adds	r3, #92	; 0x5c
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	1c5a      	adds	r2, r3, #1
 80047a8:	6879      	ldr	r1, [r7, #4]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	202c      	movs	r0, #44	; 0x2c
 80047ae:	fb00 f303 	mul.w	r3, r0, r3
 80047b2:	440b      	add	r3, r1
 80047b4:	335c      	adds	r3, #92	; 0x5c
 80047b6:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	212c      	movs	r1, #44	; 0x2c
 80047be:	fb01 f303 	mul.w	r3, r1, r3
 80047c2:	4413      	add	r3, r2
 80047c4:	3360      	adds	r3, #96	; 0x60
 80047c6:	2204      	movs	r2, #4
 80047c8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	015a      	lsls	r2, r3, #5
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	4413      	add	r3, r2
 80047d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047d6:	461a      	mov	r2, r3
 80047d8:	2302      	movs	r3, #2
 80047da:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	b2d9      	uxtb	r1, r3
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	202c      	movs	r0, #44	; 0x2c
 80047e6:	fb00 f303 	mul.w	r3, r0, r3
 80047ea:	4413      	add	r3, r2
 80047ec:	3360      	adds	r3, #96	; 0x60
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	461a      	mov	r2, r3
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f007 fd3c 	bl	800c270 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80047f8:	e081      	b.n	80048fe <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	015a      	lsls	r2, r3, #5
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	4413      	add	r3, r2
 8004802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f003 0310 	and.w	r3, r3, #16
 800480c:	2b10      	cmp	r3, #16
 800480e:	d176      	bne.n	80048fe <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	212c      	movs	r1, #44	; 0x2c
 8004816:	fb01 f303 	mul.w	r3, r1, r3
 800481a:	4413      	add	r3, r2
 800481c:	333f      	adds	r3, #63	; 0x3f
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	2b03      	cmp	r3, #3
 8004822:	d121      	bne.n	8004868 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	212c      	movs	r1, #44	; 0x2c
 800482a:	fb01 f303 	mul.w	r3, r1, r3
 800482e:	4413      	add	r3, r2
 8004830:	335c      	adds	r3, #92	; 0x5c
 8004832:	2200      	movs	r2, #0
 8004834:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	015a      	lsls	r2, r3, #5
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	4413      	add	r3, r2
 800483e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	0151      	lsls	r1, r2, #5
 8004848:	693a      	ldr	r2, [r7, #16]
 800484a:	440a      	add	r2, r1
 800484c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004850:	f043 0302 	orr.w	r3, r3, #2
 8004854:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68fa      	ldr	r2, [r7, #12]
 800485c:	b2d2      	uxtb	r2, r2
 800485e:	4611      	mov	r1, r2
 8004860:	4618      	mov	r0, r3
 8004862:	f004 f9da 	bl	8008c1a <USB_HC_Halt>
 8004866:	e041      	b.n	80048ec <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	212c      	movs	r1, #44	; 0x2c
 800486e:	fb01 f303 	mul.w	r3, r1, r3
 8004872:	4413      	add	r3, r2
 8004874:	333f      	adds	r3, #63	; 0x3f
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d009      	beq.n	8004890 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	212c      	movs	r1, #44	; 0x2c
 8004882:	fb01 f303 	mul.w	r3, r1, r3
 8004886:	4413      	add	r3, r2
 8004888:	333f      	adds	r3, #63	; 0x3f
 800488a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800488c:	2b02      	cmp	r3, #2
 800488e:	d12d      	bne.n	80048ec <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	212c      	movs	r1, #44	; 0x2c
 8004896:	fb01 f303 	mul.w	r3, r1, r3
 800489a:	4413      	add	r3, r2
 800489c:	335c      	adds	r3, #92	; 0x5c
 800489e:	2200      	movs	r2, #0
 80048a0:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d120      	bne.n	80048ec <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	212c      	movs	r1, #44	; 0x2c
 80048b0:	fb01 f303 	mul.w	r3, r1, r3
 80048b4:	4413      	add	r3, r2
 80048b6:	3361      	adds	r3, #97	; 0x61
 80048b8:	2203      	movs	r2, #3
 80048ba:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	015a      	lsls	r2, r3, #5
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	4413      	add	r3, r2
 80048c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	0151      	lsls	r1, r2, #5
 80048ce:	693a      	ldr	r2, [r7, #16]
 80048d0:	440a      	add	r2, r1
 80048d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048d6:	f043 0302 	orr.w	r3, r3, #2
 80048da:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	b2d2      	uxtb	r2, r2
 80048e4:	4611      	mov	r1, r2
 80048e6:	4618      	mov	r0, r3
 80048e8:	f004 f997 	bl	8008c1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	015a      	lsls	r2, r3, #5
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	4413      	add	r3, r2
 80048f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048f8:	461a      	mov	r2, r3
 80048fa:	2310      	movs	r3, #16
 80048fc:	6093      	str	r3, [r2, #8]
}
 80048fe:	bf00      	nop
 8004900:	3718      	adds	r7, #24
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}

08004906 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004906:	b580      	push	{r7, lr}
 8004908:	b088      	sub	sp, #32
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
 800490e:	460b      	mov	r3, r1
 8004910:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800491c:	78fb      	ldrb	r3, [r7, #3]
 800491e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	015a      	lsls	r2, r3, #5
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	4413      	add	r3, r2
 8004928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	f003 0304 	and.w	r3, r3, #4
 8004932:	2b04      	cmp	r3, #4
 8004934:	d119      	bne.n	800496a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	015a      	lsls	r2, r3, #5
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	4413      	add	r3, r2
 800493e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004942:	461a      	mov	r2, r3
 8004944:	2304      	movs	r3, #4
 8004946:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	015a      	lsls	r2, r3, #5
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	4413      	add	r3, r2
 8004950:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	0151      	lsls	r1, r2, #5
 800495a:	69ba      	ldr	r2, [r7, #24]
 800495c:	440a      	add	r2, r1
 800495e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004962:	f043 0302 	orr.w	r3, r3, #2
 8004966:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8004968:	e3ca      	b.n	8005100 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	015a      	lsls	r2, r3, #5
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	4413      	add	r3, r2
 8004972:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f003 0320 	and.w	r3, r3, #32
 800497c:	2b20      	cmp	r3, #32
 800497e:	d13e      	bne.n	80049fe <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	015a      	lsls	r2, r3, #5
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	4413      	add	r3, r2
 8004988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800498c:	461a      	mov	r2, r3
 800498e:	2320      	movs	r3, #32
 8004990:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	212c      	movs	r1, #44	; 0x2c
 8004998:	fb01 f303 	mul.w	r3, r1, r3
 800499c:	4413      	add	r3, r2
 800499e:	333d      	adds	r3, #61	; 0x3d
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	f040 83ac 	bne.w	8005100 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	212c      	movs	r1, #44	; 0x2c
 80049ae:	fb01 f303 	mul.w	r3, r1, r3
 80049b2:	4413      	add	r3, r2
 80049b4:	333d      	adds	r3, #61	; 0x3d
 80049b6:	2200      	movs	r2, #0
 80049b8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	212c      	movs	r1, #44	; 0x2c
 80049c0:	fb01 f303 	mul.w	r3, r1, r3
 80049c4:	4413      	add	r3, r2
 80049c6:	3360      	adds	r3, #96	; 0x60
 80049c8:	2202      	movs	r2, #2
 80049ca:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	015a      	lsls	r2, r3, #5
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	4413      	add	r3, r2
 80049d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	697a      	ldr	r2, [r7, #20]
 80049dc:	0151      	lsls	r1, r2, #5
 80049de:	69ba      	ldr	r2, [r7, #24]
 80049e0:	440a      	add	r2, r1
 80049e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049e6:	f043 0302 	orr.w	r3, r3, #2
 80049ea:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	b2d2      	uxtb	r2, r2
 80049f4:	4611      	mov	r1, r2
 80049f6:	4618      	mov	r0, r3
 80049f8:	f004 f90f 	bl	8008c1a <USB_HC_Halt>
}
 80049fc:	e380      	b.n	8005100 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	015a      	lsls	r2, r3, #5
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	4413      	add	r3, r2
 8004a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a14:	d122      	bne.n	8004a5c <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	015a      	lsls	r2, r3, #5
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	697a      	ldr	r2, [r7, #20]
 8004a26:	0151      	lsls	r1, r2, #5
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	440a      	add	r2, r1
 8004a2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a30:	f043 0302 	orr.w	r3, r3, #2
 8004a34:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	b2d2      	uxtb	r2, r2
 8004a3e:	4611      	mov	r1, r2
 8004a40:	4618      	mov	r0, r3
 8004a42:	f004 f8ea 	bl	8008c1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	015a      	lsls	r2, r3, #5
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a52:	461a      	mov	r2, r3
 8004a54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a58:	6093      	str	r3, [r2, #8]
}
 8004a5a:	e351      	b.n	8005100 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	015a      	lsls	r2, r3, #5
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	4413      	add	r3, r2
 8004a64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f003 0301 	and.w	r3, r3, #1
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d150      	bne.n	8004b14 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	212c      	movs	r1, #44	; 0x2c
 8004a78:	fb01 f303 	mul.w	r3, r1, r3
 8004a7c:	4413      	add	r3, r2
 8004a7e:	335c      	adds	r3, #92	; 0x5c
 8004a80:	2200      	movs	r2, #0
 8004a82:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	015a      	lsls	r2, r3, #5
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a96:	2b40      	cmp	r3, #64	; 0x40
 8004a98:	d111      	bne.n	8004abe <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	212c      	movs	r1, #44	; 0x2c
 8004aa0:	fb01 f303 	mul.w	r3, r1, r3
 8004aa4:	4413      	add	r3, r2
 8004aa6:	333d      	adds	r3, #61	; 0x3d
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	015a      	lsls	r2, r3, #5
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	4413      	add	r3, r2
 8004ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ab8:	461a      	mov	r2, r3
 8004aba:	2340      	movs	r3, #64	; 0x40
 8004abc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	015a      	lsls	r2, r3, #5
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	697a      	ldr	r2, [r7, #20]
 8004ace:	0151      	lsls	r1, r2, #5
 8004ad0:	69ba      	ldr	r2, [r7, #24]
 8004ad2:	440a      	add	r2, r1
 8004ad4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ad8:	f043 0302 	orr.w	r3, r3, #2
 8004adc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	b2d2      	uxtb	r2, r2
 8004ae6:	4611      	mov	r1, r2
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f004 f896 	bl	8008c1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	015a      	lsls	r2, r3, #5
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	4413      	add	r3, r2
 8004af6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004afa:	461a      	mov	r2, r3
 8004afc:	2301      	movs	r3, #1
 8004afe:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	212c      	movs	r1, #44	; 0x2c
 8004b06:	fb01 f303 	mul.w	r3, r1, r3
 8004b0a:	4413      	add	r3, r2
 8004b0c:	3361      	adds	r3, #97	; 0x61
 8004b0e:	2201      	movs	r2, #1
 8004b10:	701a      	strb	r2, [r3, #0]
}
 8004b12:	e2f5      	b.n	8005100 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	015a      	lsls	r2, r3, #5
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b26:	2b40      	cmp	r3, #64	; 0x40
 8004b28:	d13c      	bne.n	8004ba4 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	212c      	movs	r1, #44	; 0x2c
 8004b30:	fb01 f303 	mul.w	r3, r1, r3
 8004b34:	4413      	add	r3, r2
 8004b36:	3361      	adds	r3, #97	; 0x61
 8004b38:	2204      	movs	r2, #4
 8004b3a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	212c      	movs	r1, #44	; 0x2c
 8004b42:	fb01 f303 	mul.w	r3, r1, r3
 8004b46:	4413      	add	r3, r2
 8004b48:	333d      	adds	r3, #61	; 0x3d
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	212c      	movs	r1, #44	; 0x2c
 8004b54:	fb01 f303 	mul.w	r3, r1, r3
 8004b58:	4413      	add	r3, r2
 8004b5a:	335c      	adds	r3, #92	; 0x5c
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	015a      	lsls	r2, r3, #5
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	4413      	add	r3, r2
 8004b68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	697a      	ldr	r2, [r7, #20]
 8004b70:	0151      	lsls	r1, r2, #5
 8004b72:	69ba      	ldr	r2, [r7, #24]
 8004b74:	440a      	add	r2, r1
 8004b76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b7a:	f043 0302 	orr.w	r3, r3, #2
 8004b7e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	697a      	ldr	r2, [r7, #20]
 8004b86:	b2d2      	uxtb	r2, r2
 8004b88:	4611      	mov	r1, r2
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f004 f845 	bl	8008c1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	015a      	lsls	r2, r3, #5
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	4413      	add	r3, r2
 8004b98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	2340      	movs	r3, #64	; 0x40
 8004ba0:	6093      	str	r3, [r2, #8]
}
 8004ba2:	e2ad      	b.n	8005100 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	015a      	lsls	r2, r3, #5
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	4413      	add	r3, r2
 8004bac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f003 0308 	and.w	r3, r3, #8
 8004bb6:	2b08      	cmp	r3, #8
 8004bb8:	d12a      	bne.n	8004c10 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	015a      	lsls	r2, r3, #5
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	2308      	movs	r3, #8
 8004bca:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	015a      	lsls	r2, r3, #5
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	4413      	add	r3, r2
 8004bd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	697a      	ldr	r2, [r7, #20]
 8004bdc:	0151      	lsls	r1, r2, #5
 8004bde:	69ba      	ldr	r2, [r7, #24]
 8004be0:	440a      	add	r2, r1
 8004be2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004be6:	f043 0302 	orr.w	r3, r3, #2
 8004bea:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	697a      	ldr	r2, [r7, #20]
 8004bf2:	b2d2      	uxtb	r2, r2
 8004bf4:	4611      	mov	r1, r2
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f004 f80f 	bl	8008c1a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	212c      	movs	r1, #44	; 0x2c
 8004c02:	fb01 f303 	mul.w	r3, r1, r3
 8004c06:	4413      	add	r3, r2
 8004c08:	3361      	adds	r3, #97	; 0x61
 8004c0a:	2205      	movs	r2, #5
 8004c0c:	701a      	strb	r2, [r3, #0]
}
 8004c0e:	e277      	b.n	8005100 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	015a      	lsls	r2, r3, #5
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	4413      	add	r3, r2
 8004c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f003 0310 	and.w	r3, r3, #16
 8004c22:	2b10      	cmp	r3, #16
 8004c24:	d150      	bne.n	8004cc8 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	212c      	movs	r1, #44	; 0x2c
 8004c2c:	fb01 f303 	mul.w	r3, r1, r3
 8004c30:	4413      	add	r3, r2
 8004c32:	335c      	adds	r3, #92	; 0x5c
 8004c34:	2200      	movs	r2, #0
 8004c36:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	212c      	movs	r1, #44	; 0x2c
 8004c3e:	fb01 f303 	mul.w	r3, r1, r3
 8004c42:	4413      	add	r3, r2
 8004c44:	3361      	adds	r3, #97	; 0x61
 8004c46:	2203      	movs	r2, #3
 8004c48:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	212c      	movs	r1, #44	; 0x2c
 8004c50:	fb01 f303 	mul.w	r3, r1, r3
 8004c54:	4413      	add	r3, r2
 8004c56:	333d      	adds	r3, #61	; 0x3d
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d112      	bne.n	8004c84 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	212c      	movs	r1, #44	; 0x2c
 8004c64:	fb01 f303 	mul.w	r3, r1, r3
 8004c68:	4413      	add	r3, r2
 8004c6a:	333c      	adds	r3, #60	; 0x3c
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d108      	bne.n	8004c84 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	212c      	movs	r1, #44	; 0x2c
 8004c78:	fb01 f303 	mul.w	r3, r1, r3
 8004c7c:	4413      	add	r3, r2
 8004c7e:	333d      	adds	r3, #61	; 0x3d
 8004c80:	2201      	movs	r2, #1
 8004c82:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	015a      	lsls	r2, r3, #5
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	697a      	ldr	r2, [r7, #20]
 8004c94:	0151      	lsls	r1, r2, #5
 8004c96:	69ba      	ldr	r2, [r7, #24]
 8004c98:	440a      	add	r2, r1
 8004c9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c9e:	f043 0302 	orr.w	r3, r3, #2
 8004ca2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	697a      	ldr	r2, [r7, #20]
 8004caa:	b2d2      	uxtb	r2, r2
 8004cac:	4611      	mov	r1, r2
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f003 ffb3 	bl	8008c1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	015a      	lsls	r2, r3, #5
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	4413      	add	r3, r2
 8004cbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	2310      	movs	r3, #16
 8004cc4:	6093      	str	r3, [r2, #8]
}
 8004cc6:	e21b      	b.n	8005100 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	015a      	lsls	r2, r3, #5
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	4413      	add	r3, r2
 8004cd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cda:	2b80      	cmp	r3, #128	; 0x80
 8004cdc:	d174      	bne.n	8004dc8 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d121      	bne.n	8004d2a <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	212c      	movs	r1, #44	; 0x2c
 8004cec:	fb01 f303 	mul.w	r3, r1, r3
 8004cf0:	4413      	add	r3, r2
 8004cf2:	3361      	adds	r3, #97	; 0x61
 8004cf4:	2206      	movs	r2, #6
 8004cf6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	015a      	lsls	r2, r3, #5
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	4413      	add	r3, r2
 8004d00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	697a      	ldr	r2, [r7, #20]
 8004d08:	0151      	lsls	r1, r2, #5
 8004d0a:	69ba      	ldr	r2, [r7, #24]
 8004d0c:	440a      	add	r2, r1
 8004d0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d12:	f043 0302 	orr.w	r3, r3, #2
 8004d16:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	697a      	ldr	r2, [r7, #20]
 8004d1e:	b2d2      	uxtb	r2, r2
 8004d20:	4611      	mov	r1, r2
 8004d22:	4618      	mov	r0, r3
 8004d24:	f003 ff79 	bl	8008c1a <USB_HC_Halt>
 8004d28:	e044      	b.n	8004db4 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	212c      	movs	r1, #44	; 0x2c
 8004d30:	fb01 f303 	mul.w	r3, r1, r3
 8004d34:	4413      	add	r3, r2
 8004d36:	335c      	adds	r3, #92	; 0x5c
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	1c5a      	adds	r2, r3, #1
 8004d3c:	6879      	ldr	r1, [r7, #4]
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	202c      	movs	r0, #44	; 0x2c
 8004d42:	fb00 f303 	mul.w	r3, r0, r3
 8004d46:	440b      	add	r3, r1
 8004d48:	335c      	adds	r3, #92	; 0x5c
 8004d4a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	212c      	movs	r1, #44	; 0x2c
 8004d52:	fb01 f303 	mul.w	r3, r1, r3
 8004d56:	4413      	add	r3, r2
 8004d58:	335c      	adds	r3, #92	; 0x5c
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d920      	bls.n	8004da2 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	212c      	movs	r1, #44	; 0x2c
 8004d66:	fb01 f303 	mul.w	r3, r1, r3
 8004d6a:	4413      	add	r3, r2
 8004d6c:	335c      	adds	r3, #92	; 0x5c
 8004d6e:	2200      	movs	r2, #0
 8004d70:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	212c      	movs	r1, #44	; 0x2c
 8004d78:	fb01 f303 	mul.w	r3, r1, r3
 8004d7c:	4413      	add	r3, r2
 8004d7e:	3360      	adds	r3, #96	; 0x60
 8004d80:	2204      	movs	r2, #4
 8004d82:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	b2d9      	uxtb	r1, r3
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	202c      	movs	r0, #44	; 0x2c
 8004d8e:	fb00 f303 	mul.w	r3, r0, r3
 8004d92:	4413      	add	r3, r2
 8004d94:	3360      	adds	r3, #96	; 0x60
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	461a      	mov	r2, r3
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f007 fa68 	bl	800c270 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004da0:	e008      	b.n	8004db4 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	212c      	movs	r1, #44	; 0x2c
 8004da8:	fb01 f303 	mul.w	r3, r1, r3
 8004dac:	4413      	add	r3, r2
 8004dae:	3360      	adds	r3, #96	; 0x60
 8004db0:	2202      	movs	r2, #2
 8004db2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	015a      	lsls	r2, r3, #5
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	4413      	add	r3, r2
 8004dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	2380      	movs	r3, #128	; 0x80
 8004dc4:	6093      	str	r3, [r2, #8]
}
 8004dc6:	e19b      	b.n	8005100 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	015a      	lsls	r2, r3, #5
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	4413      	add	r3, r2
 8004dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dde:	d134      	bne.n	8004e4a <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	015a      	lsls	r2, r3, #5
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	4413      	add	r3, r2
 8004de8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	697a      	ldr	r2, [r7, #20]
 8004df0:	0151      	lsls	r1, r2, #5
 8004df2:	69ba      	ldr	r2, [r7, #24]
 8004df4:	440a      	add	r2, r1
 8004df6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dfa:	f043 0302 	orr.w	r3, r3, #2
 8004dfe:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	697a      	ldr	r2, [r7, #20]
 8004e06:	b2d2      	uxtb	r2, r2
 8004e08:	4611      	mov	r1, r2
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f003 ff05 	bl	8008c1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	015a      	lsls	r2, r3, #5
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	4413      	add	r3, r2
 8004e18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	2310      	movs	r3, #16
 8004e20:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	015a      	lsls	r2, r3, #5
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	4413      	add	r3, r2
 8004e2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e2e:	461a      	mov	r2, r3
 8004e30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e34:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	212c      	movs	r1, #44	; 0x2c
 8004e3c:	fb01 f303 	mul.w	r3, r1, r3
 8004e40:	4413      	add	r3, r2
 8004e42:	3361      	adds	r3, #97	; 0x61
 8004e44:	2208      	movs	r2, #8
 8004e46:	701a      	strb	r2, [r3, #0]
}
 8004e48:	e15a      	b.n	8005100 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	015a      	lsls	r2, r3, #5
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	4413      	add	r3, r2
 8004e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f003 0302 	and.w	r3, r3, #2
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	f040 814f 	bne.w	8005100 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	015a      	lsls	r2, r3, #5
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	4413      	add	r3, r2
 8004e6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	697a      	ldr	r2, [r7, #20]
 8004e72:	0151      	lsls	r1, r2, #5
 8004e74:	69ba      	ldr	r2, [r7, #24]
 8004e76:	440a      	add	r2, r1
 8004e78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e7c:	f023 0302 	bic.w	r3, r3, #2
 8004e80:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	212c      	movs	r1, #44	; 0x2c
 8004e88:	fb01 f303 	mul.w	r3, r1, r3
 8004e8c:	4413      	add	r3, r2
 8004e8e:	3361      	adds	r3, #97	; 0x61
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d17d      	bne.n	8004f92 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	212c      	movs	r1, #44	; 0x2c
 8004e9c:	fb01 f303 	mul.w	r3, r1, r3
 8004ea0:	4413      	add	r3, r2
 8004ea2:	3360      	adds	r3, #96	; 0x60
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	212c      	movs	r1, #44	; 0x2c
 8004eae:	fb01 f303 	mul.w	r3, r1, r3
 8004eb2:	4413      	add	r3, r2
 8004eb4:	333f      	adds	r3, #63	; 0x3f
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d00a      	beq.n	8004ed2 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	212c      	movs	r1, #44	; 0x2c
 8004ec2:	fb01 f303 	mul.w	r3, r1, r3
 8004ec6:	4413      	add	r3, r2
 8004ec8:	333f      	adds	r3, #63	; 0x3f
 8004eca:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004ecc:	2b03      	cmp	r3, #3
 8004ece:	f040 8100 	bne.w	80050d2 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d113      	bne.n	8004f02 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	212c      	movs	r1, #44	; 0x2c
 8004ee0:	fb01 f303 	mul.w	r3, r1, r3
 8004ee4:	4413      	add	r3, r2
 8004ee6:	3355      	adds	r3, #85	; 0x55
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	f083 0301 	eor.w	r3, r3, #1
 8004eee:	b2d8      	uxtb	r0, r3
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	212c      	movs	r1, #44	; 0x2c
 8004ef6:	fb01 f303 	mul.w	r3, r1, r3
 8004efa:	4413      	add	r3, r2
 8004efc:	3355      	adds	r3, #85	; 0x55
 8004efe:	4602      	mov	r2, r0
 8004f00:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	f040 80e3 	bne.w	80050d2 <HCD_HC_OUT_IRQHandler+0x7cc>
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	212c      	movs	r1, #44	; 0x2c
 8004f12:	fb01 f303 	mul.w	r3, r1, r3
 8004f16:	4413      	add	r3, r2
 8004f18:	334c      	adds	r3, #76	; 0x4c
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	f000 80d8 	beq.w	80050d2 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	212c      	movs	r1, #44	; 0x2c
 8004f28:	fb01 f303 	mul.w	r3, r1, r3
 8004f2c:	4413      	add	r3, r2
 8004f2e:	334c      	adds	r3, #76	; 0x4c
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	6879      	ldr	r1, [r7, #4]
 8004f34:	697a      	ldr	r2, [r7, #20]
 8004f36:	202c      	movs	r0, #44	; 0x2c
 8004f38:	fb00 f202 	mul.w	r2, r0, r2
 8004f3c:	440a      	add	r2, r1
 8004f3e:	3240      	adds	r2, #64	; 0x40
 8004f40:	8812      	ldrh	r2, [r2, #0]
 8004f42:	4413      	add	r3, r2
 8004f44:	3b01      	subs	r3, #1
 8004f46:	6879      	ldr	r1, [r7, #4]
 8004f48:	697a      	ldr	r2, [r7, #20]
 8004f4a:	202c      	movs	r0, #44	; 0x2c
 8004f4c:	fb00 f202 	mul.w	r2, r0, r2
 8004f50:	440a      	add	r2, r1
 8004f52:	3240      	adds	r2, #64	; 0x40
 8004f54:	8812      	ldrh	r2, [r2, #0]
 8004f56:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f5a:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f003 0301 	and.w	r3, r3, #1
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	f000 80b5 	beq.w	80050d2 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	212c      	movs	r1, #44	; 0x2c
 8004f6e:	fb01 f303 	mul.w	r3, r1, r3
 8004f72:	4413      	add	r3, r2
 8004f74:	3355      	adds	r3, #85	; 0x55
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	f083 0301 	eor.w	r3, r3, #1
 8004f7c:	b2d8      	uxtb	r0, r3
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	212c      	movs	r1, #44	; 0x2c
 8004f84:	fb01 f303 	mul.w	r3, r1, r3
 8004f88:	4413      	add	r3, r2
 8004f8a:	3355      	adds	r3, #85	; 0x55
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	701a      	strb	r2, [r3, #0]
 8004f90:	e09f      	b.n	80050d2 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	212c      	movs	r1, #44	; 0x2c
 8004f98:	fb01 f303 	mul.w	r3, r1, r3
 8004f9c:	4413      	add	r3, r2
 8004f9e:	3361      	adds	r3, #97	; 0x61
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	2b03      	cmp	r3, #3
 8004fa4:	d109      	bne.n	8004fba <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	212c      	movs	r1, #44	; 0x2c
 8004fac:	fb01 f303 	mul.w	r3, r1, r3
 8004fb0:	4413      	add	r3, r2
 8004fb2:	3360      	adds	r3, #96	; 0x60
 8004fb4:	2202      	movs	r2, #2
 8004fb6:	701a      	strb	r2, [r3, #0]
 8004fb8:	e08b      	b.n	80050d2 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	212c      	movs	r1, #44	; 0x2c
 8004fc0:	fb01 f303 	mul.w	r3, r1, r3
 8004fc4:	4413      	add	r3, r2
 8004fc6:	3361      	adds	r3, #97	; 0x61
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	2b04      	cmp	r3, #4
 8004fcc:	d109      	bne.n	8004fe2 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	212c      	movs	r1, #44	; 0x2c
 8004fd4:	fb01 f303 	mul.w	r3, r1, r3
 8004fd8:	4413      	add	r3, r2
 8004fda:	3360      	adds	r3, #96	; 0x60
 8004fdc:	2202      	movs	r2, #2
 8004fde:	701a      	strb	r2, [r3, #0]
 8004fe0:	e077      	b.n	80050d2 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	212c      	movs	r1, #44	; 0x2c
 8004fe8:	fb01 f303 	mul.w	r3, r1, r3
 8004fec:	4413      	add	r3, r2
 8004fee:	3361      	adds	r3, #97	; 0x61
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	2b05      	cmp	r3, #5
 8004ff4:	d109      	bne.n	800500a <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	212c      	movs	r1, #44	; 0x2c
 8004ffc:	fb01 f303 	mul.w	r3, r1, r3
 8005000:	4413      	add	r3, r2
 8005002:	3360      	adds	r3, #96	; 0x60
 8005004:	2205      	movs	r2, #5
 8005006:	701a      	strb	r2, [r3, #0]
 8005008:	e063      	b.n	80050d2 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	212c      	movs	r1, #44	; 0x2c
 8005010:	fb01 f303 	mul.w	r3, r1, r3
 8005014:	4413      	add	r3, r2
 8005016:	3361      	adds	r3, #97	; 0x61
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	2b06      	cmp	r3, #6
 800501c:	d009      	beq.n	8005032 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	212c      	movs	r1, #44	; 0x2c
 8005024:	fb01 f303 	mul.w	r3, r1, r3
 8005028:	4413      	add	r3, r2
 800502a:	3361      	adds	r3, #97	; 0x61
 800502c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800502e:	2b08      	cmp	r3, #8
 8005030:	d14f      	bne.n	80050d2 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	212c      	movs	r1, #44	; 0x2c
 8005038:	fb01 f303 	mul.w	r3, r1, r3
 800503c:	4413      	add	r3, r2
 800503e:	335c      	adds	r3, #92	; 0x5c
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	1c5a      	adds	r2, r3, #1
 8005044:	6879      	ldr	r1, [r7, #4]
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	202c      	movs	r0, #44	; 0x2c
 800504a:	fb00 f303 	mul.w	r3, r0, r3
 800504e:	440b      	add	r3, r1
 8005050:	335c      	adds	r3, #92	; 0x5c
 8005052:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	212c      	movs	r1, #44	; 0x2c
 800505a:	fb01 f303 	mul.w	r3, r1, r3
 800505e:	4413      	add	r3, r2
 8005060:	335c      	adds	r3, #92	; 0x5c
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2b02      	cmp	r3, #2
 8005066:	d912      	bls.n	800508e <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	212c      	movs	r1, #44	; 0x2c
 800506e:	fb01 f303 	mul.w	r3, r1, r3
 8005072:	4413      	add	r3, r2
 8005074:	335c      	adds	r3, #92	; 0x5c
 8005076:	2200      	movs	r2, #0
 8005078:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	212c      	movs	r1, #44	; 0x2c
 8005080:	fb01 f303 	mul.w	r3, r1, r3
 8005084:	4413      	add	r3, r2
 8005086:	3360      	adds	r3, #96	; 0x60
 8005088:	2204      	movs	r2, #4
 800508a:	701a      	strb	r2, [r3, #0]
 800508c:	e021      	b.n	80050d2 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	212c      	movs	r1, #44	; 0x2c
 8005094:	fb01 f303 	mul.w	r3, r1, r3
 8005098:	4413      	add	r3, r2
 800509a:	3360      	adds	r3, #96	; 0x60
 800509c:	2202      	movs	r2, #2
 800509e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	015a      	lsls	r2, r3, #5
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	4413      	add	r3, r2
 80050a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80050b6:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80050be:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	015a      	lsls	r2, r3, #5
 80050c4:	69bb      	ldr	r3, [r7, #24]
 80050c6:	4413      	add	r3, r2
 80050c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050cc:	461a      	mov	r2, r3
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	015a      	lsls	r2, r3, #5
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	4413      	add	r3, r2
 80050da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050de:	461a      	mov	r2, r3
 80050e0:	2302      	movs	r3, #2
 80050e2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	b2d9      	uxtb	r1, r3
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	202c      	movs	r0, #44	; 0x2c
 80050ee:	fb00 f303 	mul.w	r3, r0, r3
 80050f2:	4413      	add	r3, r2
 80050f4:	3360      	adds	r3, #96	; 0x60
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	461a      	mov	r2, r3
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f007 f8b8 	bl	800c270 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005100:	bf00      	nop
 8005102:	3720      	adds	r7, #32
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b08a      	sub	sp, #40	; 0x28
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005118:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	6a1b      	ldr	r3, [r3, #32]
 8005120:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	f003 030f 	and.w	r3, r3, #15
 8005128:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	0c5b      	lsrs	r3, r3, #17
 800512e:	f003 030f 	and.w	r3, r3, #15
 8005132:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	091b      	lsrs	r3, r3, #4
 8005138:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800513c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	2b02      	cmp	r3, #2
 8005142:	d004      	beq.n	800514e <HCD_RXQLVL_IRQHandler+0x46>
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	2b05      	cmp	r3, #5
 8005148:	f000 80a9 	beq.w	800529e <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800514c:	e0aa      	b.n	80052a4 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	2b00      	cmp	r3, #0
 8005152:	f000 80a6 	beq.w	80052a2 <HCD_RXQLVL_IRQHandler+0x19a>
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	212c      	movs	r1, #44	; 0x2c
 800515c:	fb01 f303 	mul.w	r3, r1, r3
 8005160:	4413      	add	r3, r2
 8005162:	3344      	adds	r3, #68	; 0x44
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	2b00      	cmp	r3, #0
 8005168:	f000 809b 	beq.w	80052a2 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	212c      	movs	r1, #44	; 0x2c
 8005172:	fb01 f303 	mul.w	r3, r1, r3
 8005176:	4413      	add	r3, r2
 8005178:	3350      	adds	r3, #80	; 0x50
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	441a      	add	r2, r3
 8005180:	6879      	ldr	r1, [r7, #4]
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	202c      	movs	r0, #44	; 0x2c
 8005186:	fb00 f303 	mul.w	r3, r0, r3
 800518a:	440b      	add	r3, r1
 800518c:	334c      	adds	r3, #76	; 0x4c
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	429a      	cmp	r2, r3
 8005192:	d87a      	bhi.n	800528a <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6818      	ldr	r0, [r3, #0]
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	212c      	movs	r1, #44	; 0x2c
 800519e:	fb01 f303 	mul.w	r3, r1, r3
 80051a2:	4413      	add	r3, r2
 80051a4:	3344      	adds	r3, #68	; 0x44
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	693a      	ldr	r2, [r7, #16]
 80051aa:	b292      	uxth	r2, r2
 80051ac:	4619      	mov	r1, r3
 80051ae:	f003 f8ad 	bl	800830c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	69bb      	ldr	r3, [r7, #24]
 80051b6:	212c      	movs	r1, #44	; 0x2c
 80051b8:	fb01 f303 	mul.w	r3, r1, r3
 80051bc:	4413      	add	r3, r2
 80051be:	3344      	adds	r3, #68	; 0x44
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	441a      	add	r2, r3
 80051c6:	6879      	ldr	r1, [r7, #4]
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	202c      	movs	r0, #44	; 0x2c
 80051cc:	fb00 f303 	mul.w	r3, r0, r3
 80051d0:	440b      	add	r3, r1
 80051d2:	3344      	adds	r3, #68	; 0x44
 80051d4:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	212c      	movs	r1, #44	; 0x2c
 80051dc:	fb01 f303 	mul.w	r3, r1, r3
 80051e0:	4413      	add	r3, r2
 80051e2:	3350      	adds	r3, #80	; 0x50
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	441a      	add	r2, r3
 80051ea:	6879      	ldr	r1, [r7, #4]
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	202c      	movs	r0, #44	; 0x2c
 80051f0:	fb00 f303 	mul.w	r3, r0, r3
 80051f4:	440b      	add	r3, r1
 80051f6:	3350      	adds	r3, #80	; 0x50
 80051f8:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	015a      	lsls	r2, r3, #5
 80051fe:	6a3b      	ldr	r3, [r7, #32]
 8005200:	4413      	add	r3, r2
 8005202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	0cdb      	lsrs	r3, r3, #19
 800520a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800520e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	212c      	movs	r1, #44	; 0x2c
 8005216:	fb01 f303 	mul.w	r3, r1, r3
 800521a:	4413      	add	r3, r2
 800521c:	3340      	adds	r3, #64	; 0x40
 800521e:	881b      	ldrh	r3, [r3, #0]
 8005220:	461a      	mov	r2, r3
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	4293      	cmp	r3, r2
 8005226:	d13c      	bne.n	80052a2 <HCD_RXQLVL_IRQHandler+0x19a>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d039      	beq.n	80052a2 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	015a      	lsls	r2, r3, #5
 8005232:	6a3b      	ldr	r3, [r7, #32]
 8005234:	4413      	add	r3, r2
 8005236:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005244:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800524c:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	015a      	lsls	r2, r3, #5
 8005252:	6a3b      	ldr	r3, [r7, #32]
 8005254:	4413      	add	r3, r2
 8005256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800525a:	461a      	mov	r2, r3
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	212c      	movs	r1, #44	; 0x2c
 8005266:	fb01 f303 	mul.w	r3, r1, r3
 800526a:	4413      	add	r3, r2
 800526c:	3354      	adds	r3, #84	; 0x54
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	f083 0301 	eor.w	r3, r3, #1
 8005274:	b2d8      	uxtb	r0, r3
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	212c      	movs	r1, #44	; 0x2c
 800527c:	fb01 f303 	mul.w	r3, r1, r3
 8005280:	4413      	add	r3, r2
 8005282:	3354      	adds	r3, #84	; 0x54
 8005284:	4602      	mov	r2, r0
 8005286:	701a      	strb	r2, [r3, #0]
      break;
 8005288:	e00b      	b.n	80052a2 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	69bb      	ldr	r3, [r7, #24]
 800528e:	212c      	movs	r1, #44	; 0x2c
 8005290:	fb01 f303 	mul.w	r3, r1, r3
 8005294:	4413      	add	r3, r2
 8005296:	3360      	adds	r3, #96	; 0x60
 8005298:	2204      	movs	r2, #4
 800529a:	701a      	strb	r2, [r3, #0]
      break;
 800529c:	e001      	b.n	80052a2 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800529e:	bf00      	nop
 80052a0:	e000      	b.n	80052a4 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80052a2:	bf00      	nop
  }
}
 80052a4:	bf00      	nop
 80052a6:	3728      	adds	r7, #40	; 0x28
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b086      	sub	sp, #24
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80052d8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f003 0302 	and.w	r3, r3, #2
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	d10b      	bne.n	80052fc <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f003 0301 	and.w	r3, r3, #1
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d102      	bne.n	80052f4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f006 ffa2 	bl	800c238 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	f043 0302 	orr.w	r3, r3, #2
 80052fa:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f003 0308 	and.w	r3, r3, #8
 8005302:	2b08      	cmp	r3, #8
 8005304:	d132      	bne.n	800536c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	f043 0308 	orr.w	r3, r3, #8
 800530c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f003 0304 	and.w	r3, r3, #4
 8005314:	2b04      	cmp	r3, #4
 8005316:	d126      	bne.n	8005366 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	699b      	ldr	r3, [r3, #24]
 800531c:	2b02      	cmp	r3, #2
 800531e:	d113      	bne.n	8005348 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005326:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800532a:	d106      	bne.n	800533a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2102      	movs	r1, #2
 8005332:	4618      	mov	r0, r3
 8005334:	f003 f94a 	bl	80085cc <USB_InitFSLSPClkSel>
 8005338:	e011      	b.n	800535e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2101      	movs	r1, #1
 8005340:	4618      	mov	r0, r3
 8005342:	f003 f943 	bl	80085cc <USB_InitFSLSPClkSel>
 8005346:	e00a      	b.n	800535e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	2b01      	cmp	r3, #1
 800534e:	d106      	bne.n	800535e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005356:	461a      	mov	r2, r3
 8005358:	f64e 2360 	movw	r3, #60000	; 0xea60
 800535c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f006 ff94 	bl	800c28c <HAL_HCD_PortEnabled_Callback>
 8005364:	e002      	b.n	800536c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f006 ff9e 	bl	800c2a8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f003 0320 	and.w	r3, r3, #32
 8005372:	2b20      	cmp	r3, #32
 8005374:	d103      	bne.n	800537e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	f043 0320 	orr.w	r3, r3, #32
 800537c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005384:	461a      	mov	r2, r3
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	6013      	str	r3, [r2, #0]
}
 800538a:	bf00      	nop
 800538c:	3718      	adds	r7, #24
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
	...

08005394 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d101      	bne.n	80053a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e12b      	b.n	80055fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d106      	bne.n	80053c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f7fd f8ec 	bl	8002598 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2224      	movs	r2, #36	; 0x24
 80053c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f022 0201 	bic.w	r2, r2, #1
 80053d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80053f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80053f8:	f002 fa52 	bl	80078a0 <HAL_RCC_GetPCLK1Freq>
 80053fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	4a81      	ldr	r2, [pc, #516]	; (8005608 <HAL_I2C_Init+0x274>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d807      	bhi.n	8005418 <HAL_I2C_Init+0x84>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	4a80      	ldr	r2, [pc, #512]	; (800560c <HAL_I2C_Init+0x278>)
 800540c:	4293      	cmp	r3, r2
 800540e:	bf94      	ite	ls
 8005410:	2301      	movls	r3, #1
 8005412:	2300      	movhi	r3, #0
 8005414:	b2db      	uxtb	r3, r3
 8005416:	e006      	b.n	8005426 <HAL_I2C_Init+0x92>
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	4a7d      	ldr	r2, [pc, #500]	; (8005610 <HAL_I2C_Init+0x27c>)
 800541c:	4293      	cmp	r3, r2
 800541e:	bf94      	ite	ls
 8005420:	2301      	movls	r3, #1
 8005422:	2300      	movhi	r3, #0
 8005424:	b2db      	uxtb	r3, r3
 8005426:	2b00      	cmp	r3, #0
 8005428:	d001      	beq.n	800542e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e0e7      	b.n	80055fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	4a78      	ldr	r2, [pc, #480]	; (8005614 <HAL_I2C_Init+0x280>)
 8005432:	fba2 2303 	umull	r2, r3, r2, r3
 8005436:	0c9b      	lsrs	r3, r3, #18
 8005438:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68ba      	ldr	r2, [r7, #8]
 800544a:	430a      	orrs	r2, r1
 800544c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	6a1b      	ldr	r3, [r3, #32]
 8005454:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	4a6a      	ldr	r2, [pc, #424]	; (8005608 <HAL_I2C_Init+0x274>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d802      	bhi.n	8005468 <HAL_I2C_Init+0xd4>
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	3301      	adds	r3, #1
 8005466:	e009      	b.n	800547c <HAL_I2C_Init+0xe8>
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800546e:	fb02 f303 	mul.w	r3, r2, r3
 8005472:	4a69      	ldr	r2, [pc, #420]	; (8005618 <HAL_I2C_Init+0x284>)
 8005474:	fba2 2303 	umull	r2, r3, r2, r3
 8005478:	099b      	lsrs	r3, r3, #6
 800547a:	3301      	adds	r3, #1
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	6812      	ldr	r2, [r2, #0]
 8005480:	430b      	orrs	r3, r1
 8005482:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	69db      	ldr	r3, [r3, #28]
 800548a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800548e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	495c      	ldr	r1, [pc, #368]	; (8005608 <HAL_I2C_Init+0x274>)
 8005498:	428b      	cmp	r3, r1
 800549a:	d819      	bhi.n	80054d0 <HAL_I2C_Init+0x13c>
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	1e59      	subs	r1, r3, #1
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	005b      	lsls	r3, r3, #1
 80054a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80054aa:	1c59      	adds	r1, r3, #1
 80054ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80054b0:	400b      	ands	r3, r1
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d00a      	beq.n	80054cc <HAL_I2C_Init+0x138>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	1e59      	subs	r1, r3, #1
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	005b      	lsls	r3, r3, #1
 80054c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80054c4:	3301      	adds	r3, #1
 80054c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054ca:	e051      	b.n	8005570 <HAL_I2C_Init+0x1dc>
 80054cc:	2304      	movs	r3, #4
 80054ce:	e04f      	b.n	8005570 <HAL_I2C_Init+0x1dc>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d111      	bne.n	80054fc <HAL_I2C_Init+0x168>
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	1e58      	subs	r0, r3, #1
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6859      	ldr	r1, [r3, #4]
 80054e0:	460b      	mov	r3, r1
 80054e2:	005b      	lsls	r3, r3, #1
 80054e4:	440b      	add	r3, r1
 80054e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80054ea:	3301      	adds	r3, #1
 80054ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	bf0c      	ite	eq
 80054f4:	2301      	moveq	r3, #1
 80054f6:	2300      	movne	r3, #0
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	e012      	b.n	8005522 <HAL_I2C_Init+0x18e>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	1e58      	subs	r0, r3, #1
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6859      	ldr	r1, [r3, #4]
 8005504:	460b      	mov	r3, r1
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	440b      	add	r3, r1
 800550a:	0099      	lsls	r1, r3, #2
 800550c:	440b      	add	r3, r1
 800550e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005512:	3301      	adds	r3, #1
 8005514:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005518:	2b00      	cmp	r3, #0
 800551a:	bf0c      	ite	eq
 800551c:	2301      	moveq	r3, #1
 800551e:	2300      	movne	r3, #0
 8005520:	b2db      	uxtb	r3, r3
 8005522:	2b00      	cmp	r3, #0
 8005524:	d001      	beq.n	800552a <HAL_I2C_Init+0x196>
 8005526:	2301      	movs	r3, #1
 8005528:	e022      	b.n	8005570 <HAL_I2C_Init+0x1dc>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d10e      	bne.n	8005550 <HAL_I2C_Init+0x1bc>
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	1e58      	subs	r0, r3, #1
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6859      	ldr	r1, [r3, #4]
 800553a:	460b      	mov	r3, r1
 800553c:	005b      	lsls	r3, r3, #1
 800553e:	440b      	add	r3, r1
 8005540:	fbb0 f3f3 	udiv	r3, r0, r3
 8005544:	3301      	adds	r3, #1
 8005546:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800554a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800554e:	e00f      	b.n	8005570 <HAL_I2C_Init+0x1dc>
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	1e58      	subs	r0, r3, #1
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6859      	ldr	r1, [r3, #4]
 8005558:	460b      	mov	r3, r1
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	440b      	add	r3, r1
 800555e:	0099      	lsls	r1, r3, #2
 8005560:	440b      	add	r3, r1
 8005562:	fbb0 f3f3 	udiv	r3, r0, r3
 8005566:	3301      	adds	r3, #1
 8005568:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800556c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005570:	6879      	ldr	r1, [r7, #4]
 8005572:	6809      	ldr	r1, [r1, #0]
 8005574:	4313      	orrs	r3, r2
 8005576:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	69da      	ldr	r2, [r3, #28]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a1b      	ldr	r3, [r3, #32]
 800558a:	431a      	orrs	r2, r3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	430a      	orrs	r2, r1
 8005592:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800559e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	6911      	ldr	r1, [r2, #16]
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	68d2      	ldr	r2, [r2, #12]
 80055aa:	4311      	orrs	r1, r2
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	6812      	ldr	r2, [r2, #0]
 80055b0:	430b      	orrs	r3, r1
 80055b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	695a      	ldr	r2, [r3, #20]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	431a      	orrs	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	430a      	orrs	r2, r1
 80055ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f042 0201 	orr.w	r2, r2, #1
 80055de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2220      	movs	r2, #32
 80055ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3710      	adds	r7, #16
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	000186a0 	.word	0x000186a0
 800560c:	001e847f 	.word	0x001e847f
 8005610:	003d08ff 	.word	0x003d08ff
 8005614:	431bde83 	.word	0x431bde83
 8005618:	10624dd3 	.word	0x10624dd3

0800561c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b088      	sub	sp, #32
 8005620:	af02      	add	r7, sp, #8
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	607a      	str	r2, [r7, #4]
 8005626:	461a      	mov	r2, r3
 8005628:	460b      	mov	r3, r1
 800562a:	817b      	strh	r3, [r7, #10]
 800562c:	4613      	mov	r3, r2
 800562e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005630:	f7fd fac0 	bl	8002bb4 <HAL_GetTick>
 8005634:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800563c:	b2db      	uxtb	r3, r3
 800563e:	2b20      	cmp	r3, #32
 8005640:	f040 80e0 	bne.w	8005804 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	9300      	str	r3, [sp, #0]
 8005648:	2319      	movs	r3, #25
 800564a:	2201      	movs	r2, #1
 800564c:	4970      	ldr	r1, [pc, #448]	; (8005810 <HAL_I2C_Master_Transmit+0x1f4>)
 800564e:	68f8      	ldr	r0, [r7, #12]
 8005650:	f000 fc58 	bl	8005f04 <I2C_WaitOnFlagUntilTimeout>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d001      	beq.n	800565e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800565a:	2302      	movs	r3, #2
 800565c:	e0d3      	b.n	8005806 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005664:	2b01      	cmp	r3, #1
 8005666:	d101      	bne.n	800566c <HAL_I2C_Master_Transmit+0x50>
 8005668:	2302      	movs	r3, #2
 800566a:	e0cc      	b.n	8005806 <HAL_I2C_Master_Transmit+0x1ea>
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 0301 	and.w	r3, r3, #1
 800567e:	2b01      	cmp	r3, #1
 8005680:	d007      	beq.n	8005692 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f042 0201 	orr.w	r2, r2, #1
 8005690:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2221      	movs	r2, #33	; 0x21
 80056a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2210      	movs	r2, #16
 80056ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2200      	movs	r2, #0
 80056b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	893a      	ldrh	r2, [r7, #8]
 80056c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	4a50      	ldr	r2, [pc, #320]	; (8005814 <HAL_I2C_Master_Transmit+0x1f8>)
 80056d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80056d4:	8979      	ldrh	r1, [r7, #10]
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	6a3a      	ldr	r2, [r7, #32]
 80056da:	68f8      	ldr	r0, [r7, #12]
 80056dc:	f000 fac2 	bl	8005c64 <I2C_MasterRequestWrite>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d001      	beq.n	80056ea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e08d      	b.n	8005806 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056ea:	2300      	movs	r3, #0
 80056ec:	613b      	str	r3, [r7, #16]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	695b      	ldr	r3, [r3, #20]
 80056f4:	613b      	str	r3, [r7, #16]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	699b      	ldr	r3, [r3, #24]
 80056fc:	613b      	str	r3, [r7, #16]
 80056fe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005700:	e066      	b.n	80057d0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005702:	697a      	ldr	r2, [r7, #20]
 8005704:	6a39      	ldr	r1, [r7, #32]
 8005706:	68f8      	ldr	r0, [r7, #12]
 8005708:	f000 fcd2 	bl	80060b0 <I2C_WaitOnTXEFlagUntilTimeout>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00d      	beq.n	800572e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005716:	2b04      	cmp	r3, #4
 8005718:	d107      	bne.n	800572a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005728:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e06b      	b.n	8005806 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005732:	781a      	ldrb	r2, [r3, #0]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573e:	1c5a      	adds	r2, r3, #1
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005748:	b29b      	uxth	r3, r3
 800574a:	3b01      	subs	r3, #1
 800574c:	b29a      	uxth	r2, r3
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005756:	3b01      	subs	r3, #1
 8005758:	b29a      	uxth	r2, r3
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	695b      	ldr	r3, [r3, #20]
 8005764:	f003 0304 	and.w	r3, r3, #4
 8005768:	2b04      	cmp	r3, #4
 800576a:	d11b      	bne.n	80057a4 <HAL_I2C_Master_Transmit+0x188>
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005770:	2b00      	cmp	r3, #0
 8005772:	d017      	beq.n	80057a4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005778:	781a      	ldrb	r2, [r3, #0]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005784:	1c5a      	adds	r2, r3, #1
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800578e:	b29b      	uxth	r3, r3
 8005790:	3b01      	subs	r3, #1
 8005792:	b29a      	uxth	r2, r3
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800579c:	3b01      	subs	r3, #1
 800579e:	b29a      	uxth	r2, r3
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057a4:	697a      	ldr	r2, [r7, #20]
 80057a6:	6a39      	ldr	r1, [r7, #32]
 80057a8:	68f8      	ldr	r0, [r7, #12]
 80057aa:	f000 fcc2 	bl	8006132 <I2C_WaitOnBTFFlagUntilTimeout>
 80057ae:	4603      	mov	r3, r0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d00d      	beq.n	80057d0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b8:	2b04      	cmp	r3, #4
 80057ba:	d107      	bne.n	80057cc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057ca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e01a      	b.n	8005806 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d194      	bne.n	8005702 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2220      	movs	r2, #32
 80057ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005800:	2300      	movs	r3, #0
 8005802:	e000      	b.n	8005806 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005804:	2302      	movs	r3, #2
  }
}
 8005806:	4618      	mov	r0, r3
 8005808:	3718      	adds	r7, #24
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
 800580e:	bf00      	nop
 8005810:	00100002 	.word	0x00100002
 8005814:	ffff0000 	.word	0xffff0000

08005818 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b08c      	sub	sp, #48	; 0x30
 800581c:	af02      	add	r7, sp, #8
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	607a      	str	r2, [r7, #4]
 8005822:	461a      	mov	r2, r3
 8005824:	460b      	mov	r3, r1
 8005826:	817b      	strh	r3, [r7, #10]
 8005828:	4613      	mov	r3, r2
 800582a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800582c:	f7fd f9c2 	bl	8002bb4 <HAL_GetTick>
 8005830:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005838:	b2db      	uxtb	r3, r3
 800583a:	2b20      	cmp	r3, #32
 800583c:	f040 820b 	bne.w	8005c56 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005842:	9300      	str	r3, [sp, #0]
 8005844:	2319      	movs	r3, #25
 8005846:	2201      	movs	r2, #1
 8005848:	497c      	ldr	r1, [pc, #496]	; (8005a3c <HAL_I2C_Master_Receive+0x224>)
 800584a:	68f8      	ldr	r0, [r7, #12]
 800584c:	f000 fb5a 	bl	8005f04 <I2C_WaitOnFlagUntilTimeout>
 8005850:	4603      	mov	r3, r0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d001      	beq.n	800585a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005856:	2302      	movs	r3, #2
 8005858:	e1fe      	b.n	8005c58 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005860:	2b01      	cmp	r3, #1
 8005862:	d101      	bne.n	8005868 <HAL_I2C_Master_Receive+0x50>
 8005864:	2302      	movs	r3, #2
 8005866:	e1f7      	b.n	8005c58 <HAL_I2C_Master_Receive+0x440>
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 0301 	and.w	r3, r3, #1
 800587a:	2b01      	cmp	r3, #1
 800587c:	d007      	beq.n	800588e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f042 0201 	orr.w	r2, r2, #1
 800588c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800589c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2222      	movs	r2, #34	; 0x22
 80058a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2210      	movs	r2, #16
 80058aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2200      	movs	r2, #0
 80058b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	893a      	ldrh	r2, [r7, #8]
 80058be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058c4:	b29a      	uxth	r2, r3
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	4a5c      	ldr	r2, [pc, #368]	; (8005a40 <HAL_I2C_Master_Receive+0x228>)
 80058ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80058d0:	8979      	ldrh	r1, [r7, #10]
 80058d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058d6:	68f8      	ldr	r0, [r7, #12]
 80058d8:	f000 fa46 	bl	8005d68 <I2C_MasterRequestRead>
 80058dc:	4603      	mov	r3, r0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d001      	beq.n	80058e6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e1b8      	b.n	8005c58 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d113      	bne.n	8005916 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058ee:	2300      	movs	r3, #0
 80058f0:	623b      	str	r3, [r7, #32]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	695b      	ldr	r3, [r3, #20]
 80058f8:	623b      	str	r3, [r7, #32]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	699b      	ldr	r3, [r3, #24]
 8005900:	623b      	str	r3, [r7, #32]
 8005902:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005912:	601a      	str	r2, [r3, #0]
 8005914:	e18c      	b.n	8005c30 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800591a:	2b01      	cmp	r3, #1
 800591c:	d11b      	bne.n	8005956 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800592c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800592e:	2300      	movs	r3, #0
 8005930:	61fb      	str	r3, [r7, #28]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	695b      	ldr	r3, [r3, #20]
 8005938:	61fb      	str	r3, [r7, #28]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	699b      	ldr	r3, [r3, #24]
 8005940:	61fb      	str	r3, [r7, #28]
 8005942:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005952:	601a      	str	r2, [r3, #0]
 8005954:	e16c      	b.n	8005c30 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800595a:	2b02      	cmp	r3, #2
 800595c:	d11b      	bne.n	8005996 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800596c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800597c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800597e:	2300      	movs	r3, #0
 8005980:	61bb      	str	r3, [r7, #24]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	695b      	ldr	r3, [r3, #20]
 8005988:	61bb      	str	r3, [r7, #24]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	699b      	ldr	r3, [r3, #24]
 8005990:	61bb      	str	r3, [r7, #24]
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	e14c      	b.n	8005c30 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80059a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059a6:	2300      	movs	r3, #0
 80059a8:	617b      	str	r3, [r7, #20]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	695b      	ldr	r3, [r3, #20]
 80059b0:	617b      	str	r3, [r7, #20]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	699b      	ldr	r3, [r3, #24]
 80059b8:	617b      	str	r3, [r7, #20]
 80059ba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80059bc:	e138      	b.n	8005c30 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059c2:	2b03      	cmp	r3, #3
 80059c4:	f200 80f1 	bhi.w	8005baa <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d123      	bne.n	8005a18 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80059d4:	68f8      	ldr	r0, [r7, #12]
 80059d6:	f000 fbed 	bl	80061b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d001      	beq.n	80059e4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	e139      	b.n	8005c58 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	691a      	ldr	r2, [r3, #16]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ee:	b2d2      	uxtb	r2, r2
 80059f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f6:	1c5a      	adds	r2, r3, #1
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a00:	3b01      	subs	r3, #1
 8005a02:	b29a      	uxth	r2, r3
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	3b01      	subs	r3, #1
 8005a10:	b29a      	uxth	r2, r3
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005a16:	e10b      	b.n	8005c30 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a1c:	2b02      	cmp	r3, #2
 8005a1e:	d14e      	bne.n	8005abe <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a22:	9300      	str	r3, [sp, #0]
 8005a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a26:	2200      	movs	r2, #0
 8005a28:	4906      	ldr	r1, [pc, #24]	; (8005a44 <HAL_I2C_Master_Receive+0x22c>)
 8005a2a:	68f8      	ldr	r0, [r7, #12]
 8005a2c:	f000 fa6a 	bl	8005f04 <I2C_WaitOnFlagUntilTimeout>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d008      	beq.n	8005a48 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e10e      	b.n	8005c58 <HAL_I2C_Master_Receive+0x440>
 8005a3a:	bf00      	nop
 8005a3c:	00100002 	.word	0x00100002
 8005a40:	ffff0000 	.word	0xffff0000
 8005a44:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	691a      	ldr	r2, [r3, #16]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a62:	b2d2      	uxtb	r2, r2
 8005a64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6a:	1c5a      	adds	r2, r3, #1
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a74:	3b01      	subs	r3, #1
 8005a76:	b29a      	uxth	r2, r3
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	3b01      	subs	r3, #1
 8005a84:	b29a      	uxth	r2, r3
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	691a      	ldr	r2, [r3, #16]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a94:	b2d2      	uxtb	r2, r2
 8005a96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9c:	1c5a      	adds	r2, r3, #1
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aa6:	3b01      	subs	r3, #1
 8005aa8:	b29a      	uxth	r2, r3
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	b29a      	uxth	r2, r3
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005abc:	e0b8      	b.n	8005c30 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac0:	9300      	str	r3, [sp, #0]
 8005ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	4966      	ldr	r1, [pc, #408]	; (8005c60 <HAL_I2C_Master_Receive+0x448>)
 8005ac8:	68f8      	ldr	r0, [r7, #12]
 8005aca:	f000 fa1b 	bl	8005f04 <I2C_WaitOnFlagUntilTimeout>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d001      	beq.n	8005ad8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e0bf      	b.n	8005c58 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ae6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	691a      	ldr	r2, [r3, #16]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af2:	b2d2      	uxtb	r2, r2
 8005af4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afa:	1c5a      	adds	r2, r3, #1
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b04:	3b01      	subs	r3, #1
 8005b06:	b29a      	uxth	r2, r3
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	3b01      	subs	r3, #1
 8005b14:	b29a      	uxth	r2, r3
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1c:	9300      	str	r3, [sp, #0]
 8005b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b20:	2200      	movs	r2, #0
 8005b22:	494f      	ldr	r1, [pc, #316]	; (8005c60 <HAL_I2C_Master_Receive+0x448>)
 8005b24:	68f8      	ldr	r0, [r7, #12]
 8005b26:	f000 f9ed 	bl	8005f04 <I2C_WaitOnFlagUntilTimeout>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d001      	beq.n	8005b34 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e091      	b.n	8005c58 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	691a      	ldr	r2, [r3, #16]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4e:	b2d2      	uxtb	r2, r2
 8005b50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b56:	1c5a      	adds	r2, r3, #1
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b60:	3b01      	subs	r3, #1
 8005b62:	b29a      	uxth	r2, r3
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	b29a      	uxth	r2, r3
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	691a      	ldr	r2, [r3, #16]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b80:	b2d2      	uxtb	r2, r2
 8005b82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b88:	1c5a      	adds	r2, r3, #1
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b92:	3b01      	subs	r3, #1
 8005b94:	b29a      	uxth	r2, r3
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	3b01      	subs	r3, #1
 8005ba2:	b29a      	uxth	r2, r3
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005ba8:	e042      	b.n	8005c30 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005bae:	68f8      	ldr	r0, [r7, #12]
 8005bb0:	f000 fb00 	bl	80061b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d001      	beq.n	8005bbe <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e04c      	b.n	8005c58 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	691a      	ldr	r2, [r3, #16]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc8:	b2d2      	uxtb	r2, r2
 8005bca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd0:	1c5a      	adds	r2, r3, #1
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bda:	3b01      	subs	r3, #1
 8005bdc:	b29a      	uxth	r2, r3
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	3b01      	subs	r3, #1
 8005bea:	b29a      	uxth	r2, r3
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	695b      	ldr	r3, [r3, #20]
 8005bf6:	f003 0304 	and.w	r3, r3, #4
 8005bfa:	2b04      	cmp	r3, #4
 8005bfc:	d118      	bne.n	8005c30 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	691a      	ldr	r2, [r3, #16]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c08:	b2d2      	uxtb	r2, r2
 8005c0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c10:	1c5a      	adds	r2, r3, #1
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c1a:	3b01      	subs	r3, #1
 8005c1c:	b29a      	uxth	r2, r3
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	3b01      	subs	r3, #1
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	f47f aec2 	bne.w	80059be <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2220      	movs	r2, #32
 8005c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005c52:	2300      	movs	r3, #0
 8005c54:	e000      	b.n	8005c58 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005c56:	2302      	movs	r3, #2
  }
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3728      	adds	r7, #40	; 0x28
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	00010004 	.word	0x00010004

08005c64 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b088      	sub	sp, #32
 8005c68:	af02      	add	r7, sp, #8
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	607a      	str	r2, [r7, #4]
 8005c6e:	603b      	str	r3, [r7, #0]
 8005c70:	460b      	mov	r3, r1
 8005c72:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c78:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	2b08      	cmp	r3, #8
 8005c7e:	d006      	beq.n	8005c8e <I2C_MasterRequestWrite+0x2a>
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d003      	beq.n	8005c8e <I2C_MasterRequestWrite+0x2a>
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005c8c:	d108      	bne.n	8005ca0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c9c:	601a      	str	r2, [r3, #0]
 8005c9e:	e00b      	b.n	8005cb8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ca4:	2b12      	cmp	r3, #18
 8005ca6:	d107      	bne.n	8005cb8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cb6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	9300      	str	r3, [sp, #0]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005cc4:	68f8      	ldr	r0, [r7, #12]
 8005cc6:	f000 f91d 	bl	8005f04 <I2C_WaitOnFlagUntilTimeout>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d00d      	beq.n	8005cec <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cde:	d103      	bne.n	8005ce8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ce6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	e035      	b.n	8005d58 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	691b      	ldr	r3, [r3, #16]
 8005cf0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cf4:	d108      	bne.n	8005d08 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005cf6:	897b      	ldrh	r3, [r7, #10]
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005d04:	611a      	str	r2, [r3, #16]
 8005d06:	e01b      	b.n	8005d40 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005d08:	897b      	ldrh	r3, [r7, #10]
 8005d0a:	11db      	asrs	r3, r3, #7
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	f003 0306 	and.w	r3, r3, #6
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	f063 030f 	orn	r3, r3, #15
 8005d18:	b2da      	uxtb	r2, r3
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	490e      	ldr	r1, [pc, #56]	; (8005d60 <I2C_MasterRequestWrite+0xfc>)
 8005d26:	68f8      	ldr	r0, [r7, #12]
 8005d28:	f000 f943 	bl	8005fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d001      	beq.n	8005d36 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e010      	b.n	8005d58 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005d36:	897b      	ldrh	r3, [r7, #10]
 8005d38:	b2da      	uxtb	r2, r3
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	4907      	ldr	r1, [pc, #28]	; (8005d64 <I2C_MasterRequestWrite+0x100>)
 8005d46:	68f8      	ldr	r0, [r7, #12]
 8005d48:	f000 f933 	bl	8005fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d001      	beq.n	8005d56 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e000      	b.n	8005d58 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3718      	adds	r7, #24
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}
 8005d60:	00010008 	.word	0x00010008
 8005d64:	00010002 	.word	0x00010002

08005d68 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b088      	sub	sp, #32
 8005d6c:	af02      	add	r7, sp, #8
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	607a      	str	r2, [r7, #4]
 8005d72:	603b      	str	r3, [r7, #0]
 8005d74:	460b      	mov	r3, r1
 8005d76:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d7c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d8c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	2b08      	cmp	r3, #8
 8005d92:	d006      	beq.n	8005da2 <I2C_MasterRequestRead+0x3a>
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d003      	beq.n	8005da2 <I2C_MasterRequestRead+0x3a>
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005da0:	d108      	bne.n	8005db4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005db0:	601a      	str	r2, [r3, #0]
 8005db2:	e00b      	b.n	8005dcc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db8:	2b11      	cmp	r3, #17
 8005dba:	d107      	bne.n	8005dcc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005dca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	9300      	str	r3, [sp, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005dd8:	68f8      	ldr	r0, [r7, #12]
 8005dda:	f000 f893 	bl	8005f04 <I2C_WaitOnFlagUntilTimeout>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d00d      	beq.n	8005e00 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005df2:	d103      	bne.n	8005dfc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dfa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	e079      	b.n	8005ef4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	691b      	ldr	r3, [r3, #16]
 8005e04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e08:	d108      	bne.n	8005e1c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005e0a:	897b      	ldrh	r3, [r7, #10]
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	f043 0301 	orr.w	r3, r3, #1
 8005e12:	b2da      	uxtb	r2, r3
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	611a      	str	r2, [r3, #16]
 8005e1a:	e05f      	b.n	8005edc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005e1c:	897b      	ldrh	r3, [r7, #10]
 8005e1e:	11db      	asrs	r3, r3, #7
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	f003 0306 	and.w	r3, r3, #6
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	f063 030f 	orn	r3, r3, #15
 8005e2c:	b2da      	uxtb	r2, r3
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	4930      	ldr	r1, [pc, #192]	; (8005efc <I2C_MasterRequestRead+0x194>)
 8005e3a:	68f8      	ldr	r0, [r7, #12]
 8005e3c:	f000 f8b9 	bl	8005fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e40:	4603      	mov	r3, r0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d001      	beq.n	8005e4a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e054      	b.n	8005ef4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005e4a:	897b      	ldrh	r3, [r7, #10]
 8005e4c:	b2da      	uxtb	r2, r3
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	4929      	ldr	r1, [pc, #164]	; (8005f00 <I2C_MasterRequestRead+0x198>)
 8005e5a:	68f8      	ldr	r0, [r7, #12]
 8005e5c:	f000 f8a9 	bl	8005fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d001      	beq.n	8005e6a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	e044      	b.n	8005ef4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	613b      	str	r3, [r7, #16]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	695b      	ldr	r3, [r3, #20]
 8005e74:	613b      	str	r3, [r7, #16]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	699b      	ldr	r3, [r3, #24]
 8005e7c:	613b      	str	r3, [r7, #16]
 8005e7e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e8e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	9300      	str	r3, [sp, #0]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e9c:	68f8      	ldr	r0, [r7, #12]
 8005e9e:	f000 f831 	bl	8005f04 <I2C_WaitOnFlagUntilTimeout>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d00d      	beq.n	8005ec4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005eb6:	d103      	bne.n	8005ec0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ebe:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	e017      	b.n	8005ef4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005ec4:	897b      	ldrh	r3, [r7, #10]
 8005ec6:	11db      	asrs	r3, r3, #7
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	f003 0306 	and.w	r3, r3, #6
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	f063 030e 	orn	r3, r3, #14
 8005ed4:	b2da      	uxtb	r2, r3
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	4907      	ldr	r1, [pc, #28]	; (8005f00 <I2C_MasterRequestRead+0x198>)
 8005ee2:	68f8      	ldr	r0, [r7, #12]
 8005ee4:	f000 f865 	bl	8005fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d001      	beq.n	8005ef2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e000      	b.n	8005ef4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005ef2:	2300      	movs	r3, #0
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3718      	adds	r7, #24
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}
 8005efc:	00010008 	.word	0x00010008
 8005f00:	00010002 	.word	0x00010002

08005f04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	603b      	str	r3, [r7, #0]
 8005f10:	4613      	mov	r3, r2
 8005f12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f14:	e025      	b.n	8005f62 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f1c:	d021      	beq.n	8005f62 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f1e:	f7fc fe49 	bl	8002bb4 <HAL_GetTick>
 8005f22:	4602      	mov	r2, r0
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	1ad3      	subs	r3, r2, r3
 8005f28:	683a      	ldr	r2, [r7, #0]
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d302      	bcc.n	8005f34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d116      	bne.n	8005f62 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2200      	movs	r2, #0
 8005f38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2220      	movs	r2, #32
 8005f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4e:	f043 0220 	orr.w	r2, r3, #32
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e023      	b.n	8005faa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	0c1b      	lsrs	r3, r3, #16
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d10d      	bne.n	8005f88 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	695b      	ldr	r3, [r3, #20]
 8005f72:	43da      	mvns	r2, r3
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	4013      	ands	r3, r2
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	bf0c      	ite	eq
 8005f7e:	2301      	moveq	r3, #1
 8005f80:	2300      	movne	r3, #0
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	461a      	mov	r2, r3
 8005f86:	e00c      	b.n	8005fa2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	699b      	ldr	r3, [r3, #24]
 8005f8e:	43da      	mvns	r2, r3
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	4013      	ands	r3, r2
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	bf0c      	ite	eq
 8005f9a:	2301      	moveq	r3, #1
 8005f9c:	2300      	movne	r3, #0
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	79fb      	ldrb	r3, [r7, #7]
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d0b6      	beq.n	8005f16 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005fa8:	2300      	movs	r3, #0
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3710      	adds	r7, #16
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}

08005fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005fb2:	b580      	push	{r7, lr}
 8005fb4:	b084      	sub	sp, #16
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	60f8      	str	r0, [r7, #12]
 8005fba:	60b9      	str	r1, [r7, #8]
 8005fbc:	607a      	str	r2, [r7, #4]
 8005fbe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005fc0:	e051      	b.n	8006066 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	695b      	ldr	r3, [r3, #20]
 8005fc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fd0:	d123      	bne.n	800601a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fe0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005fea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2220      	movs	r2, #32
 8005ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006006:	f043 0204 	orr.w	r2, r3, #4
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2200      	movs	r2, #0
 8006012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e046      	b.n	80060a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006020:	d021      	beq.n	8006066 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006022:	f7fc fdc7 	bl	8002bb4 <HAL_GetTick>
 8006026:	4602      	mov	r2, r0
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	1ad3      	subs	r3, r2, r3
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	429a      	cmp	r2, r3
 8006030:	d302      	bcc.n	8006038 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d116      	bne.n	8006066 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2200      	movs	r2, #0
 800603c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2220      	movs	r2, #32
 8006042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2200      	movs	r2, #0
 800604a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006052:	f043 0220 	orr.w	r2, r3, #32
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e020      	b.n	80060a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	0c1b      	lsrs	r3, r3, #16
 800606a:	b2db      	uxtb	r3, r3
 800606c:	2b01      	cmp	r3, #1
 800606e:	d10c      	bne.n	800608a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	695b      	ldr	r3, [r3, #20]
 8006076:	43da      	mvns	r2, r3
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	4013      	ands	r3, r2
 800607c:	b29b      	uxth	r3, r3
 800607e:	2b00      	cmp	r3, #0
 8006080:	bf14      	ite	ne
 8006082:	2301      	movne	r3, #1
 8006084:	2300      	moveq	r3, #0
 8006086:	b2db      	uxtb	r3, r3
 8006088:	e00b      	b.n	80060a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	699b      	ldr	r3, [r3, #24]
 8006090:	43da      	mvns	r2, r3
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	4013      	ands	r3, r2
 8006096:	b29b      	uxth	r3, r3
 8006098:	2b00      	cmp	r3, #0
 800609a:	bf14      	ite	ne
 800609c:	2301      	movne	r3, #1
 800609e:	2300      	moveq	r3, #0
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d18d      	bne.n	8005fc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80060a6:	2300      	movs	r3, #0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3710      	adds	r7, #16
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b084      	sub	sp, #16
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80060bc:	e02d      	b.n	800611a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80060be:	68f8      	ldr	r0, [r7, #12]
 80060c0:	f000 f8ce 	bl	8006260 <I2C_IsAcknowledgeFailed>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d001      	beq.n	80060ce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e02d      	b.n	800612a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060d4:	d021      	beq.n	800611a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060d6:	f7fc fd6d 	bl	8002bb4 <HAL_GetTick>
 80060da:	4602      	mov	r2, r0
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	1ad3      	subs	r3, r2, r3
 80060e0:	68ba      	ldr	r2, [r7, #8]
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d302      	bcc.n	80060ec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d116      	bne.n	800611a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2200      	movs	r2, #0
 80060f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2220      	movs	r2, #32
 80060f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2200      	movs	r2, #0
 80060fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006106:	f043 0220 	orr.w	r2, r3, #32
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	e007      	b.n	800612a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	695b      	ldr	r3, [r3, #20]
 8006120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006124:	2b80      	cmp	r3, #128	; 0x80
 8006126:	d1ca      	bne.n	80060be <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	3710      	adds	r7, #16
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}

08006132 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006132:	b580      	push	{r7, lr}
 8006134:	b084      	sub	sp, #16
 8006136:	af00      	add	r7, sp, #0
 8006138:	60f8      	str	r0, [r7, #12]
 800613a:	60b9      	str	r1, [r7, #8]
 800613c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800613e:	e02d      	b.n	800619c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f000 f88d 	bl	8006260 <I2C_IsAcknowledgeFailed>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d001      	beq.n	8006150 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	e02d      	b.n	80061ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006156:	d021      	beq.n	800619c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006158:	f7fc fd2c 	bl	8002bb4 <HAL_GetTick>
 800615c:	4602      	mov	r2, r0
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	68ba      	ldr	r2, [r7, #8]
 8006164:	429a      	cmp	r2, r3
 8006166:	d302      	bcc.n	800616e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d116      	bne.n	800619c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2200      	movs	r2, #0
 8006172:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2220      	movs	r2, #32
 8006178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2200      	movs	r2, #0
 8006180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006188:	f043 0220 	orr.w	r2, r3, #32
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2200      	movs	r2, #0
 8006194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	e007      	b.n	80061ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	695b      	ldr	r3, [r3, #20]
 80061a2:	f003 0304 	and.w	r3, r3, #4
 80061a6:	2b04      	cmp	r3, #4
 80061a8:	d1ca      	bne.n	8006140 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3710      	adds	r7, #16
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80061c0:	e042      	b.n	8006248 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	695b      	ldr	r3, [r3, #20]
 80061c8:	f003 0310 	and.w	r3, r3, #16
 80061cc:	2b10      	cmp	r3, #16
 80061ce:	d119      	bne.n	8006204 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f06f 0210 	mvn.w	r2, #16
 80061d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2200      	movs	r2, #0
 80061de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2220      	movs	r2, #32
 80061e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2200      	movs	r2, #0
 80061ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	e029      	b.n	8006258 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006204:	f7fc fcd6 	bl	8002bb4 <HAL_GetTick>
 8006208:	4602      	mov	r2, r0
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	1ad3      	subs	r3, r2, r3
 800620e:	68ba      	ldr	r2, [r7, #8]
 8006210:	429a      	cmp	r2, r3
 8006212:	d302      	bcc.n	800621a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d116      	bne.n	8006248 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2200      	movs	r2, #0
 800621e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2220      	movs	r2, #32
 8006224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2200      	movs	r2, #0
 800622c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006234:	f043 0220 	orr.w	r2, r3, #32
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2200      	movs	r2, #0
 8006240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	e007      	b.n	8006258 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	695b      	ldr	r3, [r3, #20]
 800624e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006252:	2b40      	cmp	r3, #64	; 0x40
 8006254:	d1b5      	bne.n	80061c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006256:	2300      	movs	r3, #0
}
 8006258:	4618      	mov	r0, r3
 800625a:	3710      	adds	r7, #16
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}

08006260 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	695b      	ldr	r3, [r3, #20]
 800626e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006272:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006276:	d11b      	bne.n	80062b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006280:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2220      	movs	r2, #32
 800628c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800629c:	f043 0204 	orr.w	r2, r3, #4
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	e000      	b.n	80062b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80062b0:	2300      	movs	r3, #0
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	370c      	adds	r7, #12
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr
	...

080062c0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b088      	sub	sp, #32
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d101      	bne.n	80062d2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e128      	b.n	8006524 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d109      	bne.n	80062f2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a90      	ldr	r2, [pc, #576]	; (800652c <HAL_I2S_Init+0x26c>)
 80062ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f7fc f99b 	bl	8002628 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2202      	movs	r2, #2
 80062f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	69db      	ldr	r3, [r3, #28]
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	6812      	ldr	r2, [r2, #0]
 8006304:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006308:	f023 030f 	bic.w	r3, r3, #15
 800630c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2202      	movs	r2, #2
 8006314:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	695b      	ldr	r3, [r3, #20]
 800631a:	2b02      	cmp	r3, #2
 800631c:	d060      	beq.n	80063e0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d102      	bne.n	800632c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8006326:	2310      	movs	r3, #16
 8006328:	617b      	str	r3, [r7, #20]
 800632a:	e001      	b.n	8006330 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800632c:	2320      	movs	r3, #32
 800632e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	2b20      	cmp	r3, #32
 8006336:	d802      	bhi.n	800633e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	005b      	lsls	r3, r3, #1
 800633c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800633e:	2001      	movs	r0, #1
 8006340:	f001 fba4 	bl	8007a8c <HAL_RCCEx_GetPeriphCLKFreq>
 8006344:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800634e:	d125      	bne.n	800639c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d010      	beq.n	800637a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006362:	4613      	mov	r3, r2
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	4413      	add	r3, r2
 8006368:	005b      	lsls	r3, r3, #1
 800636a:	461a      	mov	r2, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	695b      	ldr	r3, [r3, #20]
 8006370:	fbb2 f3f3 	udiv	r3, r2, r3
 8006374:	3305      	adds	r3, #5
 8006376:	613b      	str	r3, [r7, #16]
 8006378:	e01f      	b.n	80063ba <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	00db      	lsls	r3, r3, #3
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	fbb2 f2f3 	udiv	r2, r2, r3
 8006384:	4613      	mov	r3, r2
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	4413      	add	r3, r2
 800638a:	005b      	lsls	r3, r3, #1
 800638c:	461a      	mov	r2, r3
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	695b      	ldr	r3, [r3, #20]
 8006392:	fbb2 f3f3 	udiv	r3, r2, r3
 8006396:	3305      	adds	r3, #5
 8006398:	613b      	str	r3, [r7, #16]
 800639a:	e00e      	b.n	80063ba <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80063a4:	4613      	mov	r3, r2
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	4413      	add	r3, r2
 80063aa:	005b      	lsls	r3, r3, #1
 80063ac:	461a      	mov	r2, r3
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	695b      	ldr	r3, [r3, #20]
 80063b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80063b6:	3305      	adds	r3, #5
 80063b8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	4a5c      	ldr	r2, [pc, #368]	; (8006530 <HAL_I2S_Init+0x270>)
 80063be:	fba2 2303 	umull	r2, r3, r2, r3
 80063c2:	08db      	lsrs	r3, r3, #3
 80063c4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	f003 0301 	and.w	r3, r3, #1
 80063cc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80063ce:	693a      	ldr	r2, [r7, #16]
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	1ad3      	subs	r3, r2, r3
 80063d4:	085b      	lsrs	r3, r3, #1
 80063d6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	021b      	lsls	r3, r3, #8
 80063dc:	61bb      	str	r3, [r7, #24]
 80063de:	e003      	b.n	80063e8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80063e0:	2302      	movs	r3, #2
 80063e2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80063e4:	2300      	movs	r3, #0
 80063e6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d902      	bls.n	80063f4 <HAL_I2S_Init+0x134>
 80063ee:	69fb      	ldr	r3, [r7, #28]
 80063f0:	2bff      	cmp	r3, #255	; 0xff
 80063f2:	d907      	bls.n	8006404 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063f8:	f043 0210 	orr.w	r2, r3, #16
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	e08f      	b.n	8006524 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	691a      	ldr	r2, [r3, #16]
 8006408:	69bb      	ldr	r3, [r7, #24]
 800640a:	ea42 0103 	orr.w	r1, r2, r3
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	69fa      	ldr	r2, [r7, #28]
 8006414:	430a      	orrs	r2, r1
 8006416:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	69db      	ldr	r3, [r3, #28]
 800641e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006422:	f023 030f 	bic.w	r3, r3, #15
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	6851      	ldr	r1, [r2, #4]
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	6892      	ldr	r2, [r2, #8]
 800642e:	4311      	orrs	r1, r2
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	68d2      	ldr	r2, [r2, #12]
 8006434:	4311      	orrs	r1, r2
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	6992      	ldr	r2, [r2, #24]
 800643a:	430a      	orrs	r2, r1
 800643c:	431a      	orrs	r2, r3
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006446:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6a1b      	ldr	r3, [r3, #32]
 800644c:	2b01      	cmp	r3, #1
 800644e:	d161      	bne.n	8006514 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	4a38      	ldr	r2, [pc, #224]	; (8006534 <HAL_I2S_Init+0x274>)
 8006454:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a37      	ldr	r2, [pc, #220]	; (8006538 <HAL_I2S_Init+0x278>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d101      	bne.n	8006464 <HAL_I2S_Init+0x1a4>
 8006460:	4b36      	ldr	r3, [pc, #216]	; (800653c <HAL_I2S_Init+0x27c>)
 8006462:	e001      	b.n	8006468 <HAL_I2S_Init+0x1a8>
 8006464:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006468:	69db      	ldr	r3, [r3, #28]
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	6812      	ldr	r2, [r2, #0]
 800646e:	4932      	ldr	r1, [pc, #200]	; (8006538 <HAL_I2S_Init+0x278>)
 8006470:	428a      	cmp	r2, r1
 8006472:	d101      	bne.n	8006478 <HAL_I2S_Init+0x1b8>
 8006474:	4a31      	ldr	r2, [pc, #196]	; (800653c <HAL_I2S_Init+0x27c>)
 8006476:	e001      	b.n	800647c <HAL_I2S_Init+0x1bc>
 8006478:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800647c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006480:	f023 030f 	bic.w	r3, r3, #15
 8006484:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a2b      	ldr	r2, [pc, #172]	; (8006538 <HAL_I2S_Init+0x278>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d101      	bne.n	8006494 <HAL_I2S_Init+0x1d4>
 8006490:	4b2a      	ldr	r3, [pc, #168]	; (800653c <HAL_I2S_Init+0x27c>)
 8006492:	e001      	b.n	8006498 <HAL_I2S_Init+0x1d8>
 8006494:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006498:	2202      	movs	r2, #2
 800649a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a25      	ldr	r2, [pc, #148]	; (8006538 <HAL_I2S_Init+0x278>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d101      	bne.n	80064aa <HAL_I2S_Init+0x1ea>
 80064a6:	4b25      	ldr	r3, [pc, #148]	; (800653c <HAL_I2S_Init+0x27c>)
 80064a8:	e001      	b.n	80064ae <HAL_I2S_Init+0x1ee>
 80064aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80064ae:	69db      	ldr	r3, [r3, #28]
 80064b0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064ba:	d003      	beq.n	80064c4 <HAL_I2S_Init+0x204>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d103      	bne.n	80064cc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80064c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80064c8:	613b      	str	r3, [r7, #16]
 80064ca:	e001      	b.n	80064d0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80064cc:	2300      	movs	r3, #0
 80064ce:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80064da:	4313      	orrs	r3, r2
 80064dc:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	68db      	ldr	r3, [r3, #12]
 80064e2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80064e4:	4313      	orrs	r3, r2
 80064e6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	699b      	ldr	r3, [r3, #24]
 80064ec:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80064ee:	4313      	orrs	r3, r2
 80064f0:	b29a      	uxth	r2, r3
 80064f2:	897b      	ldrh	r3, [r7, #10]
 80064f4:	4313      	orrs	r3, r2
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80064fc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a0d      	ldr	r2, [pc, #52]	; (8006538 <HAL_I2S_Init+0x278>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d101      	bne.n	800650c <HAL_I2S_Init+0x24c>
 8006508:	4b0c      	ldr	r3, [pc, #48]	; (800653c <HAL_I2S_Init+0x27c>)
 800650a:	e001      	b.n	8006510 <HAL_I2S_Init+0x250>
 800650c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006510:	897a      	ldrh	r2, [r7, #10]
 8006512:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2201      	movs	r2, #1
 800651e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8006522:	2300      	movs	r3, #0
}
 8006524:	4618      	mov	r0, r3
 8006526:	3720      	adds	r7, #32
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}
 800652c:	080069f7 	.word	0x080069f7
 8006530:	cccccccd 	.word	0xcccccccd
 8006534:	08006b0d 	.word	0x08006b0d
 8006538:	40003800 	.word	0x40003800
 800653c:	40003400 	.word	0x40003400

08006540 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b086      	sub	sp, #24
 8006544:	af00      	add	r7, sp, #0
 8006546:	60f8      	str	r0, [r7, #12]
 8006548:	60b9      	str	r1, [r7, #8]
 800654a:	4613      	mov	r3, r2
 800654c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d002      	beq.n	800655a <HAL_I2S_Transmit_DMA+0x1a>
 8006554:	88fb      	ldrh	r3, [r7, #6]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d101      	bne.n	800655e <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	e08e      	b.n	800667c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006564:	b2db      	uxtb	r3, r3
 8006566:	2b01      	cmp	r3, #1
 8006568:	d101      	bne.n	800656e <HAL_I2S_Transmit_DMA+0x2e>
 800656a:	2302      	movs	r3, #2
 800656c:	e086      	b.n	800667c <HAL_I2S_Transmit_DMA+0x13c>
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2201      	movs	r2, #1
 8006572:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800657c:	b2db      	uxtb	r3, r3
 800657e:	2b01      	cmp	r3, #1
 8006580:	d005      	beq.n	800658e <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 800658a:	2302      	movs	r3, #2
 800658c:	e076      	b.n	800667c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2203      	movs	r2, #3
 8006592:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2200      	movs	r2, #0
 800659a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	68ba      	ldr	r2, [r7, #8]
 80065a0:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	69db      	ldr	r3, [r3, #28]
 80065a8:	f003 0307 	and.w	r3, r3, #7
 80065ac:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	2b03      	cmp	r3, #3
 80065b2:	d002      	beq.n	80065ba <HAL_I2S_Transmit_DMA+0x7a>
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	2b05      	cmp	r3, #5
 80065b8:	d10a      	bne.n	80065d0 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 80065ba:	88fb      	ldrh	r3, [r7, #6]
 80065bc:	005b      	lsls	r3, r3, #1
 80065be:	b29a      	uxth	r2, r3
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 80065c4:	88fb      	ldrh	r3, [r7, #6]
 80065c6:	005b      	lsls	r3, r3, #1
 80065c8:	b29a      	uxth	r2, r3
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80065ce:	e005      	b.n	80065dc <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	88fa      	ldrh	r2, [r7, #6]
 80065d4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	88fa      	ldrh	r2, [r7, #6]
 80065da:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e0:	4a28      	ldr	r2, [pc, #160]	; (8006684 <HAL_I2S_Transmit_DMA+0x144>)
 80065e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e8:	4a27      	ldr	r2, [pc, #156]	; (8006688 <HAL_I2S_Transmit_DMA+0x148>)
 80065ea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f0:	4a26      	ldr	r2, [pc, #152]	; (800668c <HAL_I2S_Transmit_DMA+0x14c>)
 80065f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80065fc:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8006604:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800660a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800660c:	f7fc fcc2 	bl	8002f94 <HAL_DMA_Start_IT>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d00f      	beq.n	8006636 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800661a:	f043 0208 	orr.w	r2, r3, #8
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2201      	movs	r2, #1
 8006626:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2200      	movs	r2, #0
 800662e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	e022      	b.n	800667c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	69db      	ldr	r3, [r3, #28]
 800663c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006640:	2b00      	cmp	r3, #0
 8006642:	d107      	bne.n	8006654 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	69da      	ldr	r2, [r3, #28]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006652:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	f003 0302 	and.w	r3, r3, #2
 800665e:	2b00      	cmp	r3, #0
 8006660:	d107      	bne.n	8006672 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	685a      	ldr	r2, [r3, #4]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f042 0202 	orr.w	r2, r2, #2
 8006670:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2200      	movs	r2, #0
 8006676:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 800667a:	2300      	movs	r3, #0
}
 800667c:	4618      	mov	r0, r3
 800667e:	3718      	adds	r7, #24
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}
 8006684:	08006877 	.word	0x08006877
 8006688:	08006835 	.word	0x08006835
 800668c:	080068f1 	.word	0x080068f1

08006690 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b086      	sub	sp, #24
 8006694:	af00      	add	r7, sp, #0
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	60b9      	str	r1, [r7, #8]
 800669a:	4613      	mov	r3, r2
 800669c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d002      	beq.n	80066aa <HAL_I2S_Receive_DMA+0x1a>
 80066a4:	88fb      	ldrh	r3, [r7, #6]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d101      	bne.n	80066ae <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	e0a1      	b.n	80067f2 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d101      	bne.n	80066be <HAL_I2S_Receive_DMA+0x2e>
 80066ba:	2302      	movs	r3, #2
 80066bc:	e099      	b.n	80067f2 <HAL_I2S_Receive_DMA+0x162>
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2201      	movs	r2, #1
 80066c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d005      	beq.n	80066de <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2200      	movs	r2, #0
 80066d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 80066da:	2302      	movs	r3, #2
 80066dc:	e089      	b.n	80067f2 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2204      	movs	r2, #4
 80066e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2200      	movs	r2, #0
 80066ea:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	68ba      	ldr	r2, [r7, #8]
 80066f0:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	69db      	ldr	r3, [r3, #28]
 80066f8:	f003 0307 	and.w	r3, r3, #7
 80066fc:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	2b03      	cmp	r3, #3
 8006702:	d002      	beq.n	800670a <HAL_I2S_Receive_DMA+0x7a>
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	2b05      	cmp	r3, #5
 8006708:	d10a      	bne.n	8006720 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 800670a:	88fb      	ldrh	r3, [r7, #6]
 800670c:	005b      	lsls	r3, r3, #1
 800670e:	b29a      	uxth	r2, r3
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8006714:	88fb      	ldrh	r3, [r7, #6]
 8006716:	005b      	lsls	r3, r3, #1
 8006718:	b29a      	uxth	r2, r3
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	865a      	strh	r2, [r3, #50]	; 0x32
 800671e:	e005      	b.n	800672c <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	88fa      	ldrh	r2, [r7, #6]
 8006724:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	88fa      	ldrh	r2, [r7, #6]
 800672a:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006730:	4a32      	ldr	r2, [pc, #200]	; (80067fc <HAL_I2S_Receive_DMA+0x16c>)
 8006732:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006738:	4a31      	ldr	r2, [pc, #196]	; (8006800 <HAL_I2S_Receive_DMA+0x170>)
 800673a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006740:	4a30      	ldr	r2, [pc, #192]	; (8006804 <HAL_I2S_Receive_DMA+0x174>)
 8006742:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	69db      	ldr	r3, [r3, #28]
 800674a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800674e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006752:	d10a      	bne.n	800676a <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006754:	2300      	movs	r3, #0
 8006756:	613b      	str	r3, [r7, #16]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	613b      	str	r3, [r7, #16]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	613b      	str	r3, [r7, #16]
 8006768:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	330c      	adds	r3, #12
 8006774:	4619      	mov	r1, r3
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800677a:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8006780:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8006782:	f7fc fc07 	bl	8002f94 <HAL_DMA_Start_IT>
 8006786:	4603      	mov	r3, r0
 8006788:	2b00      	cmp	r3, #0
 800678a:	d00f      	beq.n	80067ac <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006790:	f043 0208 	orr.w	r2, r3, #8
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	e022      	b.n	80067f2 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	69db      	ldr	r3, [r3, #28]
 80067b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d107      	bne.n	80067ca <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	69da      	ldr	r2, [r3, #28]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80067c8:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	f003 0301 	and.w	r3, r3, #1
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d107      	bne.n	80067e8 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	685a      	ldr	r2, [r3, #4]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f042 0201 	orr.w	r2, r2, #1
 80067e6:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 80067f0:	2300      	movs	r3, #0
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3718      	adds	r7, #24
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	080068d5 	.word	0x080068d5
 8006800:	08006893 	.word	0x08006893
 8006804:	080068f1 	.word	0x080068f1

08006808 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b082      	sub	sp, #8
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	4798      	blx	r3
}
 8006818:	bf00      	nop
 800681a:	3708      	adds	r7, #8
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8006828:	bf00      	nop
 800682a:	370c      	adds	r7, #12
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006840:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	69db      	ldr	r3, [r3, #28]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d10e      	bne.n	8006868 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	685a      	ldr	r2, [r3, #4]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f022 0202 	bic.w	r2, r2, #2
 8006858:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2200      	movs	r2, #0
 800685e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2201      	movs	r2, #1
 8006864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8006868:	68f8      	ldr	r0, [r7, #12]
 800686a:	f7fa fb21 	bl	8000eb0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800686e:	bf00      	nop
 8006870:	3710      	adds	r7, #16
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}

08006876 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006876:	b580      	push	{r7, lr}
 8006878:	b084      	sub	sp, #16
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006882:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8006884:	68f8      	ldr	r0, [r7, #12]
 8006886:	f7fa fae1 	bl	8000e4c <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800688a:	bf00      	nop
 800688c:	3710      	adds	r7, #16
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}

08006892 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8006892:	b580      	push	{r7, lr}
 8006894:	b084      	sub	sp, #16
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800689e:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	69db      	ldr	r3, [r3, #28]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d10e      	bne.n	80068c6 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	685a      	ldr	r2, [r3, #4]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f022 0201 	bic.w	r2, r2, #1
 80068b6:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2200      	movs	r2, #0
 80068bc:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2201      	movs	r2, #1
 80068c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 80068c6:	68f8      	ldr	r0, [r7, #12]
 80068c8:	f7fa fa7e 	bl	8000dc8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80068cc:	bf00      	nop
 80068ce:	3710      	adds	r7, #16
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e0:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 80068e2:	68f8      	ldr	r0, [r7, #12]
 80068e4:	f7fa fa32 	bl	8000d4c <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80068e8:	bf00      	nop
 80068ea:	3710      	adds	r7, #16
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068fc:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	685a      	ldr	r2, [r3, #4]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f022 0203 	bic.w	r2, r2, #3
 800690c:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2200      	movs	r2, #0
 8006912:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2200      	movs	r2, #0
 8006918:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2201      	movs	r2, #1
 800691e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006926:	f043 0208 	orr.w	r2, r3, #8
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800692e:	68f8      	ldr	r0, [r7, #12]
 8006930:	f7ff ff76 	bl	8006820 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006934:	bf00      	nop
 8006936:	3710      	adds	r7, #16
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b082      	sub	sp, #8
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006948:	881a      	ldrh	r2, [r3, #0]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006954:	1c9a      	adds	r2, r3, #2
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800695e:	b29b      	uxth	r3, r3
 8006960:	3b01      	subs	r3, #1
 8006962:	b29a      	uxth	r2, r3
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800696c:	b29b      	uxth	r3, r3
 800696e:	2b00      	cmp	r3, #0
 8006970:	d10e      	bne.n	8006990 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	685a      	ldr	r2, [r3, #4]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006980:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2201      	movs	r2, #1
 8006986:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f7fa fa90 	bl	8000eb0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006990:	bf00      	nop
 8006992:	3708      	adds	r7, #8
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	68da      	ldr	r2, [r3, #12]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069aa:	b292      	uxth	r2, r2
 80069ac:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b2:	1c9a      	adds	r2, r3, #2
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80069bc:	b29b      	uxth	r3, r3
 80069be:	3b01      	subs	r3, #1
 80069c0:	b29a      	uxth	r2, r3
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d10e      	bne.n	80069ee <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	685a      	ldr	r2, [r3, #4]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80069de:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f7fa f9ed 	bl	8000dc8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80069ee:	bf00      	nop
 80069f0:	3708      	adds	r7, #8
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}

080069f6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80069f6:	b580      	push	{r7, lr}
 80069f8:	b086      	sub	sp, #24
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	2b04      	cmp	r3, #4
 8006a10:	d13a      	bne.n	8006a88 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	f003 0301 	and.w	r3, r3, #1
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d109      	bne.n	8006a30 <I2S_IRQHandler+0x3a>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a26:	2b40      	cmp	r3, #64	; 0x40
 8006a28:	d102      	bne.n	8006a30 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f7ff ffb4 	bl	8006998 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a36:	2b40      	cmp	r3, #64	; 0x40
 8006a38:	d126      	bne.n	8006a88 <I2S_IRQHandler+0x92>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	f003 0320 	and.w	r3, r3, #32
 8006a44:	2b20      	cmp	r3, #32
 8006a46:	d11f      	bne.n	8006a88 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	685a      	ldr	r2, [r3, #4]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006a56:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006a58:	2300      	movs	r3, #0
 8006a5a:	613b      	str	r3, [r7, #16]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	68db      	ldr	r3, [r3, #12]
 8006a62:	613b      	str	r3, [r7, #16]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	613b      	str	r3, [r7, #16]
 8006a6c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2201      	movs	r2, #1
 8006a72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a7a:	f043 0202 	orr.w	r2, r3, #2
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f7ff fecc 	bl	8006820 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	2b03      	cmp	r3, #3
 8006a92:	d136      	bne.n	8006b02 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	f003 0302 	and.w	r3, r3, #2
 8006a9a:	2b02      	cmp	r3, #2
 8006a9c:	d109      	bne.n	8006ab2 <I2S_IRQHandler+0xbc>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aa8:	2b80      	cmp	r3, #128	; 0x80
 8006aaa:	d102      	bne.n	8006ab2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f7ff ff45 	bl	800693c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	f003 0308 	and.w	r3, r3, #8
 8006ab8:	2b08      	cmp	r3, #8
 8006aba:	d122      	bne.n	8006b02 <I2S_IRQHandler+0x10c>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	f003 0320 	and.w	r3, r3, #32
 8006ac6:	2b20      	cmp	r3, #32
 8006ac8:	d11b      	bne.n	8006b02 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	685a      	ldr	r2, [r3, #4]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006ad8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006ada:	2300      	movs	r3, #0
 8006adc:	60fb      	str	r3, [r7, #12]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	60fb      	str	r3, [r7, #12]
 8006ae6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006af4:	f043 0204 	orr.w	r2, r3, #4
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f7ff fe8f 	bl	8006820 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006b02:	bf00      	nop
 8006b04:	3718      	adds	r7, #24
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
	...

08006b0c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b088      	sub	sp, #32
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a92      	ldr	r2, [pc, #584]	; (8006d6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d101      	bne.n	8006b2a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8006b26:	4b92      	ldr	r3, [pc, #584]	; (8006d70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006b28:	e001      	b.n	8006b2e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8006b2a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a8b      	ldr	r2, [pc, #556]	; (8006d6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d101      	bne.n	8006b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006b44:	4b8a      	ldr	r3, [pc, #552]	; (8006d70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006b46:	e001      	b.n	8006b4c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006b48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b58:	d004      	beq.n	8006b64 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	f040 8099 	bne.w	8006c96 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006b64:	69fb      	ldr	r3, [r7, #28]
 8006b66:	f003 0302 	and.w	r3, r3, #2
 8006b6a:	2b02      	cmp	r3, #2
 8006b6c:	d107      	bne.n	8006b7e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d002      	beq.n	8006b7e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 f925 	bl	8006dc8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	f003 0301 	and.w	r3, r3, #1
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d107      	bne.n	8006b98 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d002      	beq.n	8006b98 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 f9c8 	bl	8006f28 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b9e:	2b40      	cmp	r3, #64	; 0x40
 8006ba0:	d13a      	bne.n	8006c18 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	f003 0320 	and.w	r3, r3, #32
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d035      	beq.n	8006c18 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a6e      	ldr	r2, [pc, #440]	; (8006d6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d101      	bne.n	8006bba <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8006bb6:	4b6e      	ldr	r3, [pc, #440]	; (8006d70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006bb8:	e001      	b.n	8006bbe <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8006bba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006bbe:	685a      	ldr	r2, [r3, #4]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4969      	ldr	r1, [pc, #420]	; (8006d6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006bc6:	428b      	cmp	r3, r1
 8006bc8:	d101      	bne.n	8006bce <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8006bca:	4b69      	ldr	r3, [pc, #420]	; (8006d70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006bcc:	e001      	b.n	8006bd2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8006bce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006bd2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006bd6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	685a      	ldr	r2, [r3, #4]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006be6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006be8:	2300      	movs	r3, #0
 8006bea:	60fb      	str	r3, [r7, #12]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	60fb      	str	r3, [r7, #12]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	60fb      	str	r3, [r7, #12]
 8006bfc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2201      	movs	r2, #1
 8006c02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c0a:	f043 0202 	orr.w	r2, r3, #2
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f7ff fe04 	bl	8006820 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006c18:	69fb      	ldr	r3, [r7, #28]
 8006c1a:	f003 0308 	and.w	r3, r3, #8
 8006c1e:	2b08      	cmp	r3, #8
 8006c20:	f040 80c3 	bne.w	8006daa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	f003 0320 	and.w	r3, r3, #32
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	f000 80bd 	beq.w	8006daa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	685a      	ldr	r2, [r3, #4]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006c3e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a49      	ldr	r2, [pc, #292]	; (8006d6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d101      	bne.n	8006c4e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8006c4a:	4b49      	ldr	r3, [pc, #292]	; (8006d70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006c4c:	e001      	b.n	8006c52 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8006c4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006c52:	685a      	ldr	r2, [r3, #4]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4944      	ldr	r1, [pc, #272]	; (8006d6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006c5a:	428b      	cmp	r3, r1
 8006c5c:	d101      	bne.n	8006c62 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8006c5e:	4b44      	ldr	r3, [pc, #272]	; (8006d70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006c60:	e001      	b.n	8006c66 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8006c62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006c66:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006c6a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	60bb      	str	r3, [r7, #8]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	60bb      	str	r3, [r7, #8]
 8006c78:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c86:	f043 0204 	orr.w	r2, r3, #4
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f7ff fdc6 	bl	8006820 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006c94:	e089      	b.n	8006daa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8006c96:	69bb      	ldr	r3, [r7, #24]
 8006c98:	f003 0302 	and.w	r3, r3, #2
 8006c9c:	2b02      	cmp	r3, #2
 8006c9e:	d107      	bne.n	8006cb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d002      	beq.n	8006cb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 f8be 	bl	8006e2c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006cb0:	69fb      	ldr	r3, [r7, #28]
 8006cb2:	f003 0301 	and.w	r3, r3, #1
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d107      	bne.n	8006cca <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d002      	beq.n	8006cca <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f000 f8fd 	bl	8006ec4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006cca:	69fb      	ldr	r3, [r7, #28]
 8006ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cd0:	2b40      	cmp	r3, #64	; 0x40
 8006cd2:	d12f      	bne.n	8006d34 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	f003 0320 	and.w	r3, r3, #32
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d02a      	beq.n	8006d34 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	685a      	ldr	r2, [r3, #4]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006cec:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a1e      	ldr	r2, [pc, #120]	; (8006d6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d101      	bne.n	8006cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006cf8:	4b1d      	ldr	r3, [pc, #116]	; (8006d70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006cfa:	e001      	b.n	8006d00 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006cfc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006d00:	685a      	ldr	r2, [r3, #4]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4919      	ldr	r1, [pc, #100]	; (8006d6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006d08:	428b      	cmp	r3, r1
 8006d0a:	d101      	bne.n	8006d10 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006d0c:	4b18      	ldr	r3, [pc, #96]	; (8006d70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006d0e:	e001      	b.n	8006d14 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006d10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006d14:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006d18:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d26:	f043 0202 	orr.w	r2, r3, #2
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f7ff fd76 	bl	8006820 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	f003 0308 	and.w	r3, r3, #8
 8006d3a:	2b08      	cmp	r3, #8
 8006d3c:	d136      	bne.n	8006dac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	f003 0320 	and.w	r3, r3, #32
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d031      	beq.n	8006dac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a07      	ldr	r2, [pc, #28]	; (8006d6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d101      	bne.n	8006d56 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006d52:	4b07      	ldr	r3, [pc, #28]	; (8006d70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006d54:	e001      	b.n	8006d5a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006d56:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006d5a:	685a      	ldr	r2, [r3, #4]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4902      	ldr	r1, [pc, #8]	; (8006d6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006d62:	428b      	cmp	r3, r1
 8006d64:	d106      	bne.n	8006d74 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8006d66:	4b02      	ldr	r3, [pc, #8]	; (8006d70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006d68:	e006      	b.n	8006d78 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8006d6a:	bf00      	nop
 8006d6c:	40003800 	.word	0x40003800
 8006d70:	40003400 	.word	0x40003400
 8006d74:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006d78:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006d7c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	685a      	ldr	r2, [r3, #4]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006d8c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2201      	movs	r2, #1
 8006d92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d9a:	f043 0204 	orr.w	r2, r3, #4
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f7ff fd3c 	bl	8006820 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006da8:	e000      	b.n	8006dac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006daa:	bf00      	nop
}
 8006dac:	bf00      	nop
 8006dae:	3720      	adds	r7, #32
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006dbc:	bf00      	nop
 8006dbe:	370c      	adds	r7, #12
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b082      	sub	sp, #8
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd4:	1c99      	adds	r1, r3, #2
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	6251      	str	r1, [r2, #36]	; 0x24
 8006dda:	881a      	ldrh	r2, [r3, #0]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	3b01      	subs	r3, #1
 8006dea:	b29a      	uxth	r2, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d113      	bne.n	8006e22 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	685a      	ldr	r2, [r3, #4]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006e08:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d106      	bne.n	8006e22 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2201      	movs	r2, #1
 8006e18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f7ff ffc9 	bl	8006db4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006e22:	bf00      	nop
 8006e24:	3708      	adds	r7, #8
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
	...

08006e2c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b082      	sub	sp, #8
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e38:	1c99      	adds	r1, r3, #2
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	6251      	str	r1, [r2, #36]	; 0x24
 8006e3e:	8819      	ldrh	r1, [r3, #0]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a1d      	ldr	r2, [pc, #116]	; (8006ebc <I2SEx_TxISR_I2SExt+0x90>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d101      	bne.n	8006e4e <I2SEx_TxISR_I2SExt+0x22>
 8006e4a:	4b1d      	ldr	r3, [pc, #116]	; (8006ec0 <I2SEx_TxISR_I2SExt+0x94>)
 8006e4c:	e001      	b.n	8006e52 <I2SEx_TxISR_I2SExt+0x26>
 8006e4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006e52:	460a      	mov	r2, r1
 8006e54:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	3b01      	subs	r3, #1
 8006e5e:	b29a      	uxth	r2, r3
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d121      	bne.n	8006eb2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a12      	ldr	r2, [pc, #72]	; (8006ebc <I2SEx_TxISR_I2SExt+0x90>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d101      	bne.n	8006e7c <I2SEx_TxISR_I2SExt+0x50>
 8006e78:	4b11      	ldr	r3, [pc, #68]	; (8006ec0 <I2SEx_TxISR_I2SExt+0x94>)
 8006e7a:	e001      	b.n	8006e80 <I2SEx_TxISR_I2SExt+0x54>
 8006e7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006e80:	685a      	ldr	r2, [r3, #4]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	490d      	ldr	r1, [pc, #52]	; (8006ebc <I2SEx_TxISR_I2SExt+0x90>)
 8006e88:	428b      	cmp	r3, r1
 8006e8a:	d101      	bne.n	8006e90 <I2SEx_TxISR_I2SExt+0x64>
 8006e8c:	4b0c      	ldr	r3, [pc, #48]	; (8006ec0 <I2SEx_TxISR_I2SExt+0x94>)
 8006e8e:	e001      	b.n	8006e94 <I2SEx_TxISR_I2SExt+0x68>
 8006e90:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006e94:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006e98:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d106      	bne.n	8006eb2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f7ff ff81 	bl	8006db4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006eb2:	bf00      	nop
 8006eb4:	3708      	adds	r7, #8
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	40003800 	.word	0x40003800
 8006ec0:	40003400 	.word	0x40003400

08006ec4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	68d8      	ldr	r0, [r3, #12]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed6:	1c99      	adds	r1, r3, #2
 8006ed8:	687a      	ldr	r2, [r7, #4]
 8006eda:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006edc:	b282      	uxth	r2, r0
 8006ede:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	3b01      	subs	r3, #1
 8006ee8:	b29a      	uxth	r2, r3
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d113      	bne.n	8006f20 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	685a      	ldr	r2, [r3, #4]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006f06:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d106      	bne.n	8006f20 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2201      	movs	r2, #1
 8006f16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f7ff ff4a 	bl	8006db4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006f20:	bf00      	nop
 8006f22:	3708      	adds	r7, #8
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a20      	ldr	r2, [pc, #128]	; (8006fb8 <I2SEx_RxISR_I2SExt+0x90>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d101      	bne.n	8006f3e <I2SEx_RxISR_I2SExt+0x16>
 8006f3a:	4b20      	ldr	r3, [pc, #128]	; (8006fbc <I2SEx_RxISR_I2SExt+0x94>)
 8006f3c:	e001      	b.n	8006f42 <I2SEx_RxISR_I2SExt+0x1a>
 8006f3e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006f42:	68d8      	ldr	r0, [r3, #12]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f48:	1c99      	adds	r1, r3, #2
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006f4e:	b282      	uxth	r2, r0
 8006f50:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	3b01      	subs	r3, #1
 8006f5a:	b29a      	uxth	r2, r3
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d121      	bne.n	8006fae <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a12      	ldr	r2, [pc, #72]	; (8006fb8 <I2SEx_RxISR_I2SExt+0x90>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d101      	bne.n	8006f78 <I2SEx_RxISR_I2SExt+0x50>
 8006f74:	4b11      	ldr	r3, [pc, #68]	; (8006fbc <I2SEx_RxISR_I2SExt+0x94>)
 8006f76:	e001      	b.n	8006f7c <I2SEx_RxISR_I2SExt+0x54>
 8006f78:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006f7c:	685a      	ldr	r2, [r3, #4]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	490d      	ldr	r1, [pc, #52]	; (8006fb8 <I2SEx_RxISR_I2SExt+0x90>)
 8006f84:	428b      	cmp	r3, r1
 8006f86:	d101      	bne.n	8006f8c <I2SEx_RxISR_I2SExt+0x64>
 8006f88:	4b0c      	ldr	r3, [pc, #48]	; (8006fbc <I2SEx_RxISR_I2SExt+0x94>)
 8006f8a:	e001      	b.n	8006f90 <I2SEx_RxISR_I2SExt+0x68>
 8006f8c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006f90:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006f94:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d106      	bne.n	8006fae <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f7ff ff03 	bl	8006db4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006fae:	bf00      	nop
 8006fb0:	3708      	adds	r7, #8
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	40003800 	.word	0x40003800
 8006fbc:	40003400 	.word	0x40003400

08006fc0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b086      	sub	sp, #24
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d101      	bne.n	8006fd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	e267      	b.n	80074a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f003 0301 	and.w	r3, r3, #1
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d075      	beq.n	80070ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006fde:	4b88      	ldr	r3, [pc, #544]	; (8007200 <HAL_RCC_OscConfig+0x240>)
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	f003 030c 	and.w	r3, r3, #12
 8006fe6:	2b04      	cmp	r3, #4
 8006fe8:	d00c      	beq.n	8007004 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006fea:	4b85      	ldr	r3, [pc, #532]	; (8007200 <HAL_RCC_OscConfig+0x240>)
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006ff2:	2b08      	cmp	r3, #8
 8006ff4:	d112      	bne.n	800701c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ff6:	4b82      	ldr	r3, [pc, #520]	; (8007200 <HAL_RCC_OscConfig+0x240>)
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ffe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007002:	d10b      	bne.n	800701c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007004:	4b7e      	ldr	r3, [pc, #504]	; (8007200 <HAL_RCC_OscConfig+0x240>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800700c:	2b00      	cmp	r3, #0
 800700e:	d05b      	beq.n	80070c8 <HAL_RCC_OscConfig+0x108>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d157      	bne.n	80070c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	e242      	b.n	80074a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007024:	d106      	bne.n	8007034 <HAL_RCC_OscConfig+0x74>
 8007026:	4b76      	ldr	r3, [pc, #472]	; (8007200 <HAL_RCC_OscConfig+0x240>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a75      	ldr	r2, [pc, #468]	; (8007200 <HAL_RCC_OscConfig+0x240>)
 800702c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007030:	6013      	str	r3, [r2, #0]
 8007032:	e01d      	b.n	8007070 <HAL_RCC_OscConfig+0xb0>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800703c:	d10c      	bne.n	8007058 <HAL_RCC_OscConfig+0x98>
 800703e:	4b70      	ldr	r3, [pc, #448]	; (8007200 <HAL_RCC_OscConfig+0x240>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a6f      	ldr	r2, [pc, #444]	; (8007200 <HAL_RCC_OscConfig+0x240>)
 8007044:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007048:	6013      	str	r3, [r2, #0]
 800704a:	4b6d      	ldr	r3, [pc, #436]	; (8007200 <HAL_RCC_OscConfig+0x240>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a6c      	ldr	r2, [pc, #432]	; (8007200 <HAL_RCC_OscConfig+0x240>)
 8007050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007054:	6013      	str	r3, [r2, #0]
 8007056:	e00b      	b.n	8007070 <HAL_RCC_OscConfig+0xb0>
 8007058:	4b69      	ldr	r3, [pc, #420]	; (8007200 <HAL_RCC_OscConfig+0x240>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a68      	ldr	r2, [pc, #416]	; (8007200 <HAL_RCC_OscConfig+0x240>)
 800705e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007062:	6013      	str	r3, [r2, #0]
 8007064:	4b66      	ldr	r3, [pc, #408]	; (8007200 <HAL_RCC_OscConfig+0x240>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a65      	ldr	r2, [pc, #404]	; (8007200 <HAL_RCC_OscConfig+0x240>)
 800706a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800706e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d013      	beq.n	80070a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007078:	f7fb fd9c 	bl	8002bb4 <HAL_GetTick>
 800707c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800707e:	e008      	b.n	8007092 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007080:	f7fb fd98 	bl	8002bb4 <HAL_GetTick>
 8007084:	4602      	mov	r2, r0
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	1ad3      	subs	r3, r2, r3
 800708a:	2b64      	cmp	r3, #100	; 0x64
 800708c:	d901      	bls.n	8007092 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800708e:	2303      	movs	r3, #3
 8007090:	e207      	b.n	80074a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007092:	4b5b      	ldr	r3, [pc, #364]	; (8007200 <HAL_RCC_OscConfig+0x240>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800709a:	2b00      	cmp	r3, #0
 800709c:	d0f0      	beq.n	8007080 <HAL_RCC_OscConfig+0xc0>
 800709e:	e014      	b.n	80070ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070a0:	f7fb fd88 	bl	8002bb4 <HAL_GetTick>
 80070a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070a6:	e008      	b.n	80070ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80070a8:	f7fb fd84 	bl	8002bb4 <HAL_GetTick>
 80070ac:	4602      	mov	r2, r0
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	1ad3      	subs	r3, r2, r3
 80070b2:	2b64      	cmp	r3, #100	; 0x64
 80070b4:	d901      	bls.n	80070ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80070b6:	2303      	movs	r3, #3
 80070b8:	e1f3      	b.n	80074a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070ba:	4b51      	ldr	r3, [pc, #324]	; (8007200 <HAL_RCC_OscConfig+0x240>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d1f0      	bne.n	80070a8 <HAL_RCC_OscConfig+0xe8>
 80070c6:	e000      	b.n	80070ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f003 0302 	and.w	r3, r3, #2
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d063      	beq.n	800719e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80070d6:	4b4a      	ldr	r3, [pc, #296]	; (8007200 <HAL_RCC_OscConfig+0x240>)
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	f003 030c 	and.w	r3, r3, #12
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d00b      	beq.n	80070fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80070e2:	4b47      	ldr	r3, [pc, #284]	; (8007200 <HAL_RCC_OscConfig+0x240>)
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80070ea:	2b08      	cmp	r3, #8
 80070ec:	d11c      	bne.n	8007128 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80070ee:	4b44      	ldr	r3, [pc, #272]	; (8007200 <HAL_RCC_OscConfig+0x240>)
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d116      	bne.n	8007128 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80070fa:	4b41      	ldr	r3, [pc, #260]	; (8007200 <HAL_RCC_OscConfig+0x240>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f003 0302 	and.w	r3, r3, #2
 8007102:	2b00      	cmp	r3, #0
 8007104:	d005      	beq.n	8007112 <HAL_RCC_OscConfig+0x152>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	2b01      	cmp	r3, #1
 800710c:	d001      	beq.n	8007112 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	e1c7      	b.n	80074a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007112:	4b3b      	ldr	r3, [pc, #236]	; (8007200 <HAL_RCC_OscConfig+0x240>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	00db      	lsls	r3, r3, #3
 8007120:	4937      	ldr	r1, [pc, #220]	; (8007200 <HAL_RCC_OscConfig+0x240>)
 8007122:	4313      	orrs	r3, r2
 8007124:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007126:	e03a      	b.n	800719e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d020      	beq.n	8007172 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007130:	4b34      	ldr	r3, [pc, #208]	; (8007204 <HAL_RCC_OscConfig+0x244>)
 8007132:	2201      	movs	r2, #1
 8007134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007136:	f7fb fd3d 	bl	8002bb4 <HAL_GetTick>
 800713a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800713c:	e008      	b.n	8007150 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800713e:	f7fb fd39 	bl	8002bb4 <HAL_GetTick>
 8007142:	4602      	mov	r2, r0
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	1ad3      	subs	r3, r2, r3
 8007148:	2b02      	cmp	r3, #2
 800714a:	d901      	bls.n	8007150 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800714c:	2303      	movs	r3, #3
 800714e:	e1a8      	b.n	80074a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007150:	4b2b      	ldr	r3, [pc, #172]	; (8007200 <HAL_RCC_OscConfig+0x240>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f003 0302 	and.w	r3, r3, #2
 8007158:	2b00      	cmp	r3, #0
 800715a:	d0f0      	beq.n	800713e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800715c:	4b28      	ldr	r3, [pc, #160]	; (8007200 <HAL_RCC_OscConfig+0x240>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	691b      	ldr	r3, [r3, #16]
 8007168:	00db      	lsls	r3, r3, #3
 800716a:	4925      	ldr	r1, [pc, #148]	; (8007200 <HAL_RCC_OscConfig+0x240>)
 800716c:	4313      	orrs	r3, r2
 800716e:	600b      	str	r3, [r1, #0]
 8007170:	e015      	b.n	800719e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007172:	4b24      	ldr	r3, [pc, #144]	; (8007204 <HAL_RCC_OscConfig+0x244>)
 8007174:	2200      	movs	r2, #0
 8007176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007178:	f7fb fd1c 	bl	8002bb4 <HAL_GetTick>
 800717c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800717e:	e008      	b.n	8007192 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007180:	f7fb fd18 	bl	8002bb4 <HAL_GetTick>
 8007184:	4602      	mov	r2, r0
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	1ad3      	subs	r3, r2, r3
 800718a:	2b02      	cmp	r3, #2
 800718c:	d901      	bls.n	8007192 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800718e:	2303      	movs	r3, #3
 8007190:	e187      	b.n	80074a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007192:	4b1b      	ldr	r3, [pc, #108]	; (8007200 <HAL_RCC_OscConfig+0x240>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f003 0302 	and.w	r3, r3, #2
 800719a:	2b00      	cmp	r3, #0
 800719c:	d1f0      	bne.n	8007180 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f003 0308 	and.w	r3, r3, #8
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d036      	beq.n	8007218 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	695b      	ldr	r3, [r3, #20]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d016      	beq.n	80071e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80071b2:	4b15      	ldr	r3, [pc, #84]	; (8007208 <HAL_RCC_OscConfig+0x248>)
 80071b4:	2201      	movs	r2, #1
 80071b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071b8:	f7fb fcfc 	bl	8002bb4 <HAL_GetTick>
 80071bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071be:	e008      	b.n	80071d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80071c0:	f7fb fcf8 	bl	8002bb4 <HAL_GetTick>
 80071c4:	4602      	mov	r2, r0
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	1ad3      	subs	r3, r2, r3
 80071ca:	2b02      	cmp	r3, #2
 80071cc:	d901      	bls.n	80071d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80071ce:	2303      	movs	r3, #3
 80071d0:	e167      	b.n	80074a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071d2:	4b0b      	ldr	r3, [pc, #44]	; (8007200 <HAL_RCC_OscConfig+0x240>)
 80071d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071d6:	f003 0302 	and.w	r3, r3, #2
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d0f0      	beq.n	80071c0 <HAL_RCC_OscConfig+0x200>
 80071de:	e01b      	b.n	8007218 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80071e0:	4b09      	ldr	r3, [pc, #36]	; (8007208 <HAL_RCC_OscConfig+0x248>)
 80071e2:	2200      	movs	r2, #0
 80071e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071e6:	f7fb fce5 	bl	8002bb4 <HAL_GetTick>
 80071ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80071ec:	e00e      	b.n	800720c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80071ee:	f7fb fce1 	bl	8002bb4 <HAL_GetTick>
 80071f2:	4602      	mov	r2, r0
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	1ad3      	subs	r3, r2, r3
 80071f8:	2b02      	cmp	r3, #2
 80071fa:	d907      	bls.n	800720c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80071fc:	2303      	movs	r3, #3
 80071fe:	e150      	b.n	80074a2 <HAL_RCC_OscConfig+0x4e2>
 8007200:	40023800 	.word	0x40023800
 8007204:	42470000 	.word	0x42470000
 8007208:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800720c:	4b88      	ldr	r3, [pc, #544]	; (8007430 <HAL_RCC_OscConfig+0x470>)
 800720e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007210:	f003 0302 	and.w	r3, r3, #2
 8007214:	2b00      	cmp	r3, #0
 8007216:	d1ea      	bne.n	80071ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f003 0304 	and.w	r3, r3, #4
 8007220:	2b00      	cmp	r3, #0
 8007222:	f000 8097 	beq.w	8007354 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007226:	2300      	movs	r3, #0
 8007228:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800722a:	4b81      	ldr	r3, [pc, #516]	; (8007430 <HAL_RCC_OscConfig+0x470>)
 800722c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800722e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007232:	2b00      	cmp	r3, #0
 8007234:	d10f      	bne.n	8007256 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007236:	2300      	movs	r3, #0
 8007238:	60bb      	str	r3, [r7, #8]
 800723a:	4b7d      	ldr	r3, [pc, #500]	; (8007430 <HAL_RCC_OscConfig+0x470>)
 800723c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723e:	4a7c      	ldr	r2, [pc, #496]	; (8007430 <HAL_RCC_OscConfig+0x470>)
 8007240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007244:	6413      	str	r3, [r2, #64]	; 0x40
 8007246:	4b7a      	ldr	r3, [pc, #488]	; (8007430 <HAL_RCC_OscConfig+0x470>)
 8007248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800724a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800724e:	60bb      	str	r3, [r7, #8]
 8007250:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007252:	2301      	movs	r3, #1
 8007254:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007256:	4b77      	ldr	r3, [pc, #476]	; (8007434 <HAL_RCC_OscConfig+0x474>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800725e:	2b00      	cmp	r3, #0
 8007260:	d118      	bne.n	8007294 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007262:	4b74      	ldr	r3, [pc, #464]	; (8007434 <HAL_RCC_OscConfig+0x474>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a73      	ldr	r2, [pc, #460]	; (8007434 <HAL_RCC_OscConfig+0x474>)
 8007268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800726c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800726e:	f7fb fca1 	bl	8002bb4 <HAL_GetTick>
 8007272:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007274:	e008      	b.n	8007288 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007276:	f7fb fc9d 	bl	8002bb4 <HAL_GetTick>
 800727a:	4602      	mov	r2, r0
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	1ad3      	subs	r3, r2, r3
 8007280:	2b02      	cmp	r3, #2
 8007282:	d901      	bls.n	8007288 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007284:	2303      	movs	r3, #3
 8007286:	e10c      	b.n	80074a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007288:	4b6a      	ldr	r3, [pc, #424]	; (8007434 <HAL_RCC_OscConfig+0x474>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007290:	2b00      	cmp	r3, #0
 8007292:	d0f0      	beq.n	8007276 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	2b01      	cmp	r3, #1
 800729a:	d106      	bne.n	80072aa <HAL_RCC_OscConfig+0x2ea>
 800729c:	4b64      	ldr	r3, [pc, #400]	; (8007430 <HAL_RCC_OscConfig+0x470>)
 800729e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072a0:	4a63      	ldr	r2, [pc, #396]	; (8007430 <HAL_RCC_OscConfig+0x470>)
 80072a2:	f043 0301 	orr.w	r3, r3, #1
 80072a6:	6713      	str	r3, [r2, #112]	; 0x70
 80072a8:	e01c      	b.n	80072e4 <HAL_RCC_OscConfig+0x324>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	2b05      	cmp	r3, #5
 80072b0:	d10c      	bne.n	80072cc <HAL_RCC_OscConfig+0x30c>
 80072b2:	4b5f      	ldr	r3, [pc, #380]	; (8007430 <HAL_RCC_OscConfig+0x470>)
 80072b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072b6:	4a5e      	ldr	r2, [pc, #376]	; (8007430 <HAL_RCC_OscConfig+0x470>)
 80072b8:	f043 0304 	orr.w	r3, r3, #4
 80072bc:	6713      	str	r3, [r2, #112]	; 0x70
 80072be:	4b5c      	ldr	r3, [pc, #368]	; (8007430 <HAL_RCC_OscConfig+0x470>)
 80072c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072c2:	4a5b      	ldr	r2, [pc, #364]	; (8007430 <HAL_RCC_OscConfig+0x470>)
 80072c4:	f043 0301 	orr.w	r3, r3, #1
 80072c8:	6713      	str	r3, [r2, #112]	; 0x70
 80072ca:	e00b      	b.n	80072e4 <HAL_RCC_OscConfig+0x324>
 80072cc:	4b58      	ldr	r3, [pc, #352]	; (8007430 <HAL_RCC_OscConfig+0x470>)
 80072ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072d0:	4a57      	ldr	r2, [pc, #348]	; (8007430 <HAL_RCC_OscConfig+0x470>)
 80072d2:	f023 0301 	bic.w	r3, r3, #1
 80072d6:	6713      	str	r3, [r2, #112]	; 0x70
 80072d8:	4b55      	ldr	r3, [pc, #340]	; (8007430 <HAL_RCC_OscConfig+0x470>)
 80072da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072dc:	4a54      	ldr	r2, [pc, #336]	; (8007430 <HAL_RCC_OscConfig+0x470>)
 80072de:	f023 0304 	bic.w	r3, r3, #4
 80072e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d015      	beq.n	8007318 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072ec:	f7fb fc62 	bl	8002bb4 <HAL_GetTick>
 80072f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072f2:	e00a      	b.n	800730a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80072f4:	f7fb fc5e 	bl	8002bb4 <HAL_GetTick>
 80072f8:	4602      	mov	r2, r0
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	1ad3      	subs	r3, r2, r3
 80072fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007302:	4293      	cmp	r3, r2
 8007304:	d901      	bls.n	800730a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007306:	2303      	movs	r3, #3
 8007308:	e0cb      	b.n	80074a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800730a:	4b49      	ldr	r3, [pc, #292]	; (8007430 <HAL_RCC_OscConfig+0x470>)
 800730c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800730e:	f003 0302 	and.w	r3, r3, #2
 8007312:	2b00      	cmp	r3, #0
 8007314:	d0ee      	beq.n	80072f4 <HAL_RCC_OscConfig+0x334>
 8007316:	e014      	b.n	8007342 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007318:	f7fb fc4c 	bl	8002bb4 <HAL_GetTick>
 800731c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800731e:	e00a      	b.n	8007336 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007320:	f7fb fc48 	bl	8002bb4 <HAL_GetTick>
 8007324:	4602      	mov	r2, r0
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	1ad3      	subs	r3, r2, r3
 800732a:	f241 3288 	movw	r2, #5000	; 0x1388
 800732e:	4293      	cmp	r3, r2
 8007330:	d901      	bls.n	8007336 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007332:	2303      	movs	r3, #3
 8007334:	e0b5      	b.n	80074a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007336:	4b3e      	ldr	r3, [pc, #248]	; (8007430 <HAL_RCC_OscConfig+0x470>)
 8007338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800733a:	f003 0302 	and.w	r3, r3, #2
 800733e:	2b00      	cmp	r3, #0
 8007340:	d1ee      	bne.n	8007320 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007342:	7dfb      	ldrb	r3, [r7, #23]
 8007344:	2b01      	cmp	r3, #1
 8007346:	d105      	bne.n	8007354 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007348:	4b39      	ldr	r3, [pc, #228]	; (8007430 <HAL_RCC_OscConfig+0x470>)
 800734a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800734c:	4a38      	ldr	r2, [pc, #224]	; (8007430 <HAL_RCC_OscConfig+0x470>)
 800734e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007352:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	699b      	ldr	r3, [r3, #24]
 8007358:	2b00      	cmp	r3, #0
 800735a:	f000 80a1 	beq.w	80074a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800735e:	4b34      	ldr	r3, [pc, #208]	; (8007430 <HAL_RCC_OscConfig+0x470>)
 8007360:	689b      	ldr	r3, [r3, #8]
 8007362:	f003 030c 	and.w	r3, r3, #12
 8007366:	2b08      	cmp	r3, #8
 8007368:	d05c      	beq.n	8007424 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	699b      	ldr	r3, [r3, #24]
 800736e:	2b02      	cmp	r3, #2
 8007370:	d141      	bne.n	80073f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007372:	4b31      	ldr	r3, [pc, #196]	; (8007438 <HAL_RCC_OscConfig+0x478>)
 8007374:	2200      	movs	r2, #0
 8007376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007378:	f7fb fc1c 	bl	8002bb4 <HAL_GetTick>
 800737c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800737e:	e008      	b.n	8007392 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007380:	f7fb fc18 	bl	8002bb4 <HAL_GetTick>
 8007384:	4602      	mov	r2, r0
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	1ad3      	subs	r3, r2, r3
 800738a:	2b02      	cmp	r3, #2
 800738c:	d901      	bls.n	8007392 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800738e:	2303      	movs	r3, #3
 8007390:	e087      	b.n	80074a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007392:	4b27      	ldr	r3, [pc, #156]	; (8007430 <HAL_RCC_OscConfig+0x470>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800739a:	2b00      	cmp	r3, #0
 800739c:	d1f0      	bne.n	8007380 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	69da      	ldr	r2, [r3, #28]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6a1b      	ldr	r3, [r3, #32]
 80073a6:	431a      	orrs	r2, r3
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ac:	019b      	lsls	r3, r3, #6
 80073ae:	431a      	orrs	r2, r3
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b4:	085b      	lsrs	r3, r3, #1
 80073b6:	3b01      	subs	r3, #1
 80073b8:	041b      	lsls	r3, r3, #16
 80073ba:	431a      	orrs	r2, r3
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c0:	061b      	lsls	r3, r3, #24
 80073c2:	491b      	ldr	r1, [pc, #108]	; (8007430 <HAL_RCC_OscConfig+0x470>)
 80073c4:	4313      	orrs	r3, r2
 80073c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80073c8:	4b1b      	ldr	r3, [pc, #108]	; (8007438 <HAL_RCC_OscConfig+0x478>)
 80073ca:	2201      	movs	r2, #1
 80073cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073ce:	f7fb fbf1 	bl	8002bb4 <HAL_GetTick>
 80073d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073d4:	e008      	b.n	80073e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80073d6:	f7fb fbed 	bl	8002bb4 <HAL_GetTick>
 80073da:	4602      	mov	r2, r0
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	1ad3      	subs	r3, r2, r3
 80073e0:	2b02      	cmp	r3, #2
 80073e2:	d901      	bls.n	80073e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80073e4:	2303      	movs	r3, #3
 80073e6:	e05c      	b.n	80074a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073e8:	4b11      	ldr	r3, [pc, #68]	; (8007430 <HAL_RCC_OscConfig+0x470>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d0f0      	beq.n	80073d6 <HAL_RCC_OscConfig+0x416>
 80073f4:	e054      	b.n	80074a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073f6:	4b10      	ldr	r3, [pc, #64]	; (8007438 <HAL_RCC_OscConfig+0x478>)
 80073f8:	2200      	movs	r2, #0
 80073fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073fc:	f7fb fbda 	bl	8002bb4 <HAL_GetTick>
 8007400:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007402:	e008      	b.n	8007416 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007404:	f7fb fbd6 	bl	8002bb4 <HAL_GetTick>
 8007408:	4602      	mov	r2, r0
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	1ad3      	subs	r3, r2, r3
 800740e:	2b02      	cmp	r3, #2
 8007410:	d901      	bls.n	8007416 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007412:	2303      	movs	r3, #3
 8007414:	e045      	b.n	80074a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007416:	4b06      	ldr	r3, [pc, #24]	; (8007430 <HAL_RCC_OscConfig+0x470>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800741e:	2b00      	cmp	r3, #0
 8007420:	d1f0      	bne.n	8007404 <HAL_RCC_OscConfig+0x444>
 8007422:	e03d      	b.n	80074a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	699b      	ldr	r3, [r3, #24]
 8007428:	2b01      	cmp	r3, #1
 800742a:	d107      	bne.n	800743c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800742c:	2301      	movs	r3, #1
 800742e:	e038      	b.n	80074a2 <HAL_RCC_OscConfig+0x4e2>
 8007430:	40023800 	.word	0x40023800
 8007434:	40007000 	.word	0x40007000
 8007438:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800743c:	4b1b      	ldr	r3, [pc, #108]	; (80074ac <HAL_RCC_OscConfig+0x4ec>)
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	699b      	ldr	r3, [r3, #24]
 8007446:	2b01      	cmp	r3, #1
 8007448:	d028      	beq.n	800749c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007454:	429a      	cmp	r2, r3
 8007456:	d121      	bne.n	800749c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007462:	429a      	cmp	r2, r3
 8007464:	d11a      	bne.n	800749c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007466:	68fa      	ldr	r2, [r7, #12]
 8007468:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800746c:	4013      	ands	r3, r2
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007472:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007474:	4293      	cmp	r3, r2
 8007476:	d111      	bne.n	800749c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007482:	085b      	lsrs	r3, r3, #1
 8007484:	3b01      	subs	r3, #1
 8007486:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007488:	429a      	cmp	r2, r3
 800748a:	d107      	bne.n	800749c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007496:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007498:	429a      	cmp	r2, r3
 800749a:	d001      	beq.n	80074a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800749c:	2301      	movs	r3, #1
 800749e:	e000      	b.n	80074a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80074a0:	2300      	movs	r3, #0
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3718      	adds	r7, #24
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}
 80074aa:	bf00      	nop
 80074ac:	40023800 	.word	0x40023800

080074b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b084      	sub	sp, #16
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d101      	bne.n	80074c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	e0cc      	b.n	800765e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80074c4:	4b68      	ldr	r3, [pc, #416]	; (8007668 <HAL_RCC_ClockConfig+0x1b8>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f003 0307 	and.w	r3, r3, #7
 80074cc:	683a      	ldr	r2, [r7, #0]
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d90c      	bls.n	80074ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074d2:	4b65      	ldr	r3, [pc, #404]	; (8007668 <HAL_RCC_ClockConfig+0x1b8>)
 80074d4:	683a      	ldr	r2, [r7, #0]
 80074d6:	b2d2      	uxtb	r2, r2
 80074d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80074da:	4b63      	ldr	r3, [pc, #396]	; (8007668 <HAL_RCC_ClockConfig+0x1b8>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f003 0307 	and.w	r3, r3, #7
 80074e2:	683a      	ldr	r2, [r7, #0]
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d001      	beq.n	80074ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	e0b8      	b.n	800765e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f003 0302 	and.w	r3, r3, #2
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d020      	beq.n	800753a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f003 0304 	and.w	r3, r3, #4
 8007500:	2b00      	cmp	r3, #0
 8007502:	d005      	beq.n	8007510 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007504:	4b59      	ldr	r3, [pc, #356]	; (800766c <HAL_RCC_ClockConfig+0x1bc>)
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	4a58      	ldr	r2, [pc, #352]	; (800766c <HAL_RCC_ClockConfig+0x1bc>)
 800750a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800750e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f003 0308 	and.w	r3, r3, #8
 8007518:	2b00      	cmp	r3, #0
 800751a:	d005      	beq.n	8007528 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800751c:	4b53      	ldr	r3, [pc, #332]	; (800766c <HAL_RCC_ClockConfig+0x1bc>)
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	4a52      	ldr	r2, [pc, #328]	; (800766c <HAL_RCC_ClockConfig+0x1bc>)
 8007522:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007526:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007528:	4b50      	ldr	r3, [pc, #320]	; (800766c <HAL_RCC_ClockConfig+0x1bc>)
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	494d      	ldr	r1, [pc, #308]	; (800766c <HAL_RCC_ClockConfig+0x1bc>)
 8007536:	4313      	orrs	r3, r2
 8007538:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f003 0301 	and.w	r3, r3, #1
 8007542:	2b00      	cmp	r3, #0
 8007544:	d044      	beq.n	80075d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	2b01      	cmp	r3, #1
 800754c:	d107      	bne.n	800755e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800754e:	4b47      	ldr	r3, [pc, #284]	; (800766c <HAL_RCC_ClockConfig+0x1bc>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007556:	2b00      	cmp	r3, #0
 8007558:	d119      	bne.n	800758e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800755a:	2301      	movs	r3, #1
 800755c:	e07f      	b.n	800765e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	2b02      	cmp	r3, #2
 8007564:	d003      	beq.n	800756e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800756a:	2b03      	cmp	r3, #3
 800756c:	d107      	bne.n	800757e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800756e:	4b3f      	ldr	r3, [pc, #252]	; (800766c <HAL_RCC_ClockConfig+0x1bc>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007576:	2b00      	cmp	r3, #0
 8007578:	d109      	bne.n	800758e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	e06f      	b.n	800765e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800757e:	4b3b      	ldr	r3, [pc, #236]	; (800766c <HAL_RCC_ClockConfig+0x1bc>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f003 0302 	and.w	r3, r3, #2
 8007586:	2b00      	cmp	r3, #0
 8007588:	d101      	bne.n	800758e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800758a:	2301      	movs	r3, #1
 800758c:	e067      	b.n	800765e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800758e:	4b37      	ldr	r3, [pc, #220]	; (800766c <HAL_RCC_ClockConfig+0x1bc>)
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	f023 0203 	bic.w	r2, r3, #3
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	4934      	ldr	r1, [pc, #208]	; (800766c <HAL_RCC_ClockConfig+0x1bc>)
 800759c:	4313      	orrs	r3, r2
 800759e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80075a0:	f7fb fb08 	bl	8002bb4 <HAL_GetTick>
 80075a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075a6:	e00a      	b.n	80075be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075a8:	f7fb fb04 	bl	8002bb4 <HAL_GetTick>
 80075ac:	4602      	mov	r2, r0
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	1ad3      	subs	r3, r2, r3
 80075b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d901      	bls.n	80075be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80075ba:	2303      	movs	r3, #3
 80075bc:	e04f      	b.n	800765e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075be:	4b2b      	ldr	r3, [pc, #172]	; (800766c <HAL_RCC_ClockConfig+0x1bc>)
 80075c0:	689b      	ldr	r3, [r3, #8]
 80075c2:	f003 020c 	and.w	r2, r3, #12
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d1eb      	bne.n	80075a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80075d0:	4b25      	ldr	r3, [pc, #148]	; (8007668 <HAL_RCC_ClockConfig+0x1b8>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f003 0307 	and.w	r3, r3, #7
 80075d8:	683a      	ldr	r2, [r7, #0]
 80075da:	429a      	cmp	r2, r3
 80075dc:	d20c      	bcs.n	80075f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075de:	4b22      	ldr	r3, [pc, #136]	; (8007668 <HAL_RCC_ClockConfig+0x1b8>)
 80075e0:	683a      	ldr	r2, [r7, #0]
 80075e2:	b2d2      	uxtb	r2, r2
 80075e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80075e6:	4b20      	ldr	r3, [pc, #128]	; (8007668 <HAL_RCC_ClockConfig+0x1b8>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f003 0307 	and.w	r3, r3, #7
 80075ee:	683a      	ldr	r2, [r7, #0]
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d001      	beq.n	80075f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80075f4:	2301      	movs	r3, #1
 80075f6:	e032      	b.n	800765e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f003 0304 	and.w	r3, r3, #4
 8007600:	2b00      	cmp	r3, #0
 8007602:	d008      	beq.n	8007616 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007604:	4b19      	ldr	r3, [pc, #100]	; (800766c <HAL_RCC_ClockConfig+0x1bc>)
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	4916      	ldr	r1, [pc, #88]	; (800766c <HAL_RCC_ClockConfig+0x1bc>)
 8007612:	4313      	orrs	r3, r2
 8007614:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f003 0308 	and.w	r3, r3, #8
 800761e:	2b00      	cmp	r3, #0
 8007620:	d009      	beq.n	8007636 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007622:	4b12      	ldr	r3, [pc, #72]	; (800766c <HAL_RCC_ClockConfig+0x1bc>)
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	691b      	ldr	r3, [r3, #16]
 800762e:	00db      	lsls	r3, r3, #3
 8007630:	490e      	ldr	r1, [pc, #56]	; (800766c <HAL_RCC_ClockConfig+0x1bc>)
 8007632:	4313      	orrs	r3, r2
 8007634:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007636:	f000 f821 	bl	800767c <HAL_RCC_GetSysClockFreq>
 800763a:	4602      	mov	r2, r0
 800763c:	4b0b      	ldr	r3, [pc, #44]	; (800766c <HAL_RCC_ClockConfig+0x1bc>)
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	091b      	lsrs	r3, r3, #4
 8007642:	f003 030f 	and.w	r3, r3, #15
 8007646:	490a      	ldr	r1, [pc, #40]	; (8007670 <HAL_RCC_ClockConfig+0x1c0>)
 8007648:	5ccb      	ldrb	r3, [r1, r3]
 800764a:	fa22 f303 	lsr.w	r3, r2, r3
 800764e:	4a09      	ldr	r2, [pc, #36]	; (8007674 <HAL_RCC_ClockConfig+0x1c4>)
 8007650:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007652:	4b09      	ldr	r3, [pc, #36]	; (8007678 <HAL_RCC_ClockConfig+0x1c8>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4618      	mov	r0, r3
 8007658:	f7fb fa68 	bl	8002b2c <HAL_InitTick>

  return HAL_OK;
 800765c:	2300      	movs	r3, #0
}
 800765e:	4618      	mov	r0, r3
 8007660:	3710      	adds	r7, #16
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
 8007666:	bf00      	nop
 8007668:	40023c00 	.word	0x40023c00
 800766c:	40023800 	.word	0x40023800
 8007670:	0800d3ec 	.word	0x0800d3ec
 8007674:	200002a4 	.word	0x200002a4
 8007678:	200002a8 	.word	0x200002a8

0800767c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800767c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007680:	b094      	sub	sp, #80	; 0x50
 8007682:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007684:	2300      	movs	r3, #0
 8007686:	647b      	str	r3, [r7, #68]	; 0x44
 8007688:	2300      	movs	r3, #0
 800768a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800768c:	2300      	movs	r3, #0
 800768e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007690:	2300      	movs	r3, #0
 8007692:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007694:	4b79      	ldr	r3, [pc, #484]	; (800787c <HAL_RCC_GetSysClockFreq+0x200>)
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	f003 030c 	and.w	r3, r3, #12
 800769c:	2b08      	cmp	r3, #8
 800769e:	d00d      	beq.n	80076bc <HAL_RCC_GetSysClockFreq+0x40>
 80076a0:	2b08      	cmp	r3, #8
 80076a2:	f200 80e1 	bhi.w	8007868 <HAL_RCC_GetSysClockFreq+0x1ec>
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d002      	beq.n	80076b0 <HAL_RCC_GetSysClockFreq+0x34>
 80076aa:	2b04      	cmp	r3, #4
 80076ac:	d003      	beq.n	80076b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80076ae:	e0db      	b.n	8007868 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80076b0:	4b73      	ldr	r3, [pc, #460]	; (8007880 <HAL_RCC_GetSysClockFreq+0x204>)
 80076b2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80076b4:	e0db      	b.n	800786e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80076b6:	4b73      	ldr	r3, [pc, #460]	; (8007884 <HAL_RCC_GetSysClockFreq+0x208>)
 80076b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80076ba:	e0d8      	b.n	800786e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80076bc:	4b6f      	ldr	r3, [pc, #444]	; (800787c <HAL_RCC_GetSysClockFreq+0x200>)
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076c4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80076c6:	4b6d      	ldr	r3, [pc, #436]	; (800787c <HAL_RCC_GetSysClockFreq+0x200>)
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d063      	beq.n	800779a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80076d2:	4b6a      	ldr	r3, [pc, #424]	; (800787c <HAL_RCC_GetSysClockFreq+0x200>)
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	099b      	lsrs	r3, r3, #6
 80076d8:	2200      	movs	r2, #0
 80076da:	63bb      	str	r3, [r7, #56]	; 0x38
 80076dc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80076de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076e4:	633b      	str	r3, [r7, #48]	; 0x30
 80076e6:	2300      	movs	r3, #0
 80076e8:	637b      	str	r3, [r7, #52]	; 0x34
 80076ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80076ee:	4622      	mov	r2, r4
 80076f0:	462b      	mov	r3, r5
 80076f2:	f04f 0000 	mov.w	r0, #0
 80076f6:	f04f 0100 	mov.w	r1, #0
 80076fa:	0159      	lsls	r1, r3, #5
 80076fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007700:	0150      	lsls	r0, r2, #5
 8007702:	4602      	mov	r2, r0
 8007704:	460b      	mov	r3, r1
 8007706:	4621      	mov	r1, r4
 8007708:	1a51      	subs	r1, r2, r1
 800770a:	6139      	str	r1, [r7, #16]
 800770c:	4629      	mov	r1, r5
 800770e:	eb63 0301 	sbc.w	r3, r3, r1
 8007712:	617b      	str	r3, [r7, #20]
 8007714:	f04f 0200 	mov.w	r2, #0
 8007718:	f04f 0300 	mov.w	r3, #0
 800771c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007720:	4659      	mov	r1, fp
 8007722:	018b      	lsls	r3, r1, #6
 8007724:	4651      	mov	r1, sl
 8007726:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800772a:	4651      	mov	r1, sl
 800772c:	018a      	lsls	r2, r1, #6
 800772e:	4651      	mov	r1, sl
 8007730:	ebb2 0801 	subs.w	r8, r2, r1
 8007734:	4659      	mov	r1, fp
 8007736:	eb63 0901 	sbc.w	r9, r3, r1
 800773a:	f04f 0200 	mov.w	r2, #0
 800773e:	f04f 0300 	mov.w	r3, #0
 8007742:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007746:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800774a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800774e:	4690      	mov	r8, r2
 8007750:	4699      	mov	r9, r3
 8007752:	4623      	mov	r3, r4
 8007754:	eb18 0303 	adds.w	r3, r8, r3
 8007758:	60bb      	str	r3, [r7, #8]
 800775a:	462b      	mov	r3, r5
 800775c:	eb49 0303 	adc.w	r3, r9, r3
 8007760:	60fb      	str	r3, [r7, #12]
 8007762:	f04f 0200 	mov.w	r2, #0
 8007766:	f04f 0300 	mov.w	r3, #0
 800776a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800776e:	4629      	mov	r1, r5
 8007770:	024b      	lsls	r3, r1, #9
 8007772:	4621      	mov	r1, r4
 8007774:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007778:	4621      	mov	r1, r4
 800777a:	024a      	lsls	r2, r1, #9
 800777c:	4610      	mov	r0, r2
 800777e:	4619      	mov	r1, r3
 8007780:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007782:	2200      	movs	r2, #0
 8007784:	62bb      	str	r3, [r7, #40]	; 0x28
 8007786:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007788:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800778c:	f7f8 fd70 	bl	8000270 <__aeabi_uldivmod>
 8007790:	4602      	mov	r2, r0
 8007792:	460b      	mov	r3, r1
 8007794:	4613      	mov	r3, r2
 8007796:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007798:	e058      	b.n	800784c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800779a:	4b38      	ldr	r3, [pc, #224]	; (800787c <HAL_RCC_GetSysClockFreq+0x200>)
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	099b      	lsrs	r3, r3, #6
 80077a0:	2200      	movs	r2, #0
 80077a2:	4618      	mov	r0, r3
 80077a4:	4611      	mov	r1, r2
 80077a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80077aa:	623b      	str	r3, [r7, #32]
 80077ac:	2300      	movs	r3, #0
 80077ae:	627b      	str	r3, [r7, #36]	; 0x24
 80077b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80077b4:	4642      	mov	r2, r8
 80077b6:	464b      	mov	r3, r9
 80077b8:	f04f 0000 	mov.w	r0, #0
 80077bc:	f04f 0100 	mov.w	r1, #0
 80077c0:	0159      	lsls	r1, r3, #5
 80077c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80077c6:	0150      	lsls	r0, r2, #5
 80077c8:	4602      	mov	r2, r0
 80077ca:	460b      	mov	r3, r1
 80077cc:	4641      	mov	r1, r8
 80077ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80077d2:	4649      	mov	r1, r9
 80077d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80077d8:	f04f 0200 	mov.w	r2, #0
 80077dc:	f04f 0300 	mov.w	r3, #0
 80077e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80077e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80077e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80077ec:	ebb2 040a 	subs.w	r4, r2, sl
 80077f0:	eb63 050b 	sbc.w	r5, r3, fp
 80077f4:	f04f 0200 	mov.w	r2, #0
 80077f8:	f04f 0300 	mov.w	r3, #0
 80077fc:	00eb      	lsls	r3, r5, #3
 80077fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007802:	00e2      	lsls	r2, r4, #3
 8007804:	4614      	mov	r4, r2
 8007806:	461d      	mov	r5, r3
 8007808:	4643      	mov	r3, r8
 800780a:	18e3      	adds	r3, r4, r3
 800780c:	603b      	str	r3, [r7, #0]
 800780e:	464b      	mov	r3, r9
 8007810:	eb45 0303 	adc.w	r3, r5, r3
 8007814:	607b      	str	r3, [r7, #4]
 8007816:	f04f 0200 	mov.w	r2, #0
 800781a:	f04f 0300 	mov.w	r3, #0
 800781e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007822:	4629      	mov	r1, r5
 8007824:	028b      	lsls	r3, r1, #10
 8007826:	4621      	mov	r1, r4
 8007828:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800782c:	4621      	mov	r1, r4
 800782e:	028a      	lsls	r2, r1, #10
 8007830:	4610      	mov	r0, r2
 8007832:	4619      	mov	r1, r3
 8007834:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007836:	2200      	movs	r2, #0
 8007838:	61bb      	str	r3, [r7, #24]
 800783a:	61fa      	str	r2, [r7, #28]
 800783c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007840:	f7f8 fd16 	bl	8000270 <__aeabi_uldivmod>
 8007844:	4602      	mov	r2, r0
 8007846:	460b      	mov	r3, r1
 8007848:	4613      	mov	r3, r2
 800784a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800784c:	4b0b      	ldr	r3, [pc, #44]	; (800787c <HAL_RCC_GetSysClockFreq+0x200>)
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	0c1b      	lsrs	r3, r3, #16
 8007852:	f003 0303 	and.w	r3, r3, #3
 8007856:	3301      	adds	r3, #1
 8007858:	005b      	lsls	r3, r3, #1
 800785a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800785c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800785e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007860:	fbb2 f3f3 	udiv	r3, r2, r3
 8007864:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007866:	e002      	b.n	800786e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007868:	4b05      	ldr	r3, [pc, #20]	; (8007880 <HAL_RCC_GetSysClockFreq+0x204>)
 800786a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800786c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800786e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007870:	4618      	mov	r0, r3
 8007872:	3750      	adds	r7, #80	; 0x50
 8007874:	46bd      	mov	sp, r7
 8007876:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800787a:	bf00      	nop
 800787c:	40023800 	.word	0x40023800
 8007880:	00f42400 	.word	0x00f42400
 8007884:	007a1200 	.word	0x007a1200

08007888 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007888:	b480      	push	{r7}
 800788a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800788c:	4b03      	ldr	r3, [pc, #12]	; (800789c <HAL_RCC_GetHCLKFreq+0x14>)
 800788e:	681b      	ldr	r3, [r3, #0]
}
 8007890:	4618      	mov	r0, r3
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr
 800789a:	bf00      	nop
 800789c:	200002a4 	.word	0x200002a4

080078a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80078a4:	f7ff fff0 	bl	8007888 <HAL_RCC_GetHCLKFreq>
 80078a8:	4602      	mov	r2, r0
 80078aa:	4b05      	ldr	r3, [pc, #20]	; (80078c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	0a9b      	lsrs	r3, r3, #10
 80078b0:	f003 0307 	and.w	r3, r3, #7
 80078b4:	4903      	ldr	r1, [pc, #12]	; (80078c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80078b6:	5ccb      	ldrb	r3, [r1, r3]
 80078b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80078bc:	4618      	mov	r0, r3
 80078be:	bd80      	pop	{r7, pc}
 80078c0:	40023800 	.word	0x40023800
 80078c4:	0800d3fc 	.word	0x0800d3fc

080078c8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b086      	sub	sp, #24
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80078d0:	2300      	movs	r3, #0
 80078d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80078d4:	2300      	movs	r3, #0
 80078d6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f003 0301 	and.w	r3, r3, #1
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d105      	bne.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d035      	beq.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80078f0:	4b62      	ldr	r3, [pc, #392]	; (8007a7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80078f2:	2200      	movs	r2, #0
 80078f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80078f6:	f7fb f95d 	bl	8002bb4 <HAL_GetTick>
 80078fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80078fc:	e008      	b.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80078fe:	f7fb f959 	bl	8002bb4 <HAL_GetTick>
 8007902:	4602      	mov	r2, r0
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	1ad3      	subs	r3, r2, r3
 8007908:	2b02      	cmp	r3, #2
 800790a:	d901      	bls.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800790c:	2303      	movs	r3, #3
 800790e:	e0b0      	b.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007910:	4b5b      	ldr	r3, [pc, #364]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007918:	2b00      	cmp	r3, #0
 800791a:	d1f0      	bne.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	019a      	lsls	r2, r3, #6
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	689b      	ldr	r3, [r3, #8]
 8007926:	071b      	lsls	r3, r3, #28
 8007928:	4955      	ldr	r1, [pc, #340]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800792a:	4313      	orrs	r3, r2
 800792c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007930:	4b52      	ldr	r3, [pc, #328]	; (8007a7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007932:	2201      	movs	r2, #1
 8007934:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007936:	f7fb f93d 	bl	8002bb4 <HAL_GetTick>
 800793a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800793c:	e008      	b.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800793e:	f7fb f939 	bl	8002bb4 <HAL_GetTick>
 8007942:	4602      	mov	r2, r0
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	1ad3      	subs	r3, r2, r3
 8007948:	2b02      	cmp	r3, #2
 800794a:	d901      	bls.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800794c:	2303      	movs	r3, #3
 800794e:	e090      	b.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007950:	4b4b      	ldr	r3, [pc, #300]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007958:	2b00      	cmp	r3, #0
 800795a:	d0f0      	beq.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f003 0302 	and.w	r3, r3, #2
 8007964:	2b00      	cmp	r3, #0
 8007966:	f000 8083 	beq.w	8007a70 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800796a:	2300      	movs	r3, #0
 800796c:	60fb      	str	r3, [r7, #12]
 800796e:	4b44      	ldr	r3, [pc, #272]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007972:	4a43      	ldr	r2, [pc, #268]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007978:	6413      	str	r3, [r2, #64]	; 0x40
 800797a:	4b41      	ldr	r3, [pc, #260]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800797c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800797e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007982:	60fb      	str	r3, [r7, #12]
 8007984:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007986:	4b3f      	ldr	r3, [pc, #252]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a3e      	ldr	r2, [pc, #248]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800798c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007990:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007992:	f7fb f90f 	bl	8002bb4 <HAL_GetTick>
 8007996:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007998:	e008      	b.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800799a:	f7fb f90b 	bl	8002bb4 <HAL_GetTick>
 800799e:	4602      	mov	r2, r0
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	1ad3      	subs	r3, r2, r3
 80079a4:	2b02      	cmp	r3, #2
 80079a6:	d901      	bls.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80079a8:	2303      	movs	r3, #3
 80079aa:	e062      	b.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80079ac:	4b35      	ldr	r3, [pc, #212]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d0f0      	beq.n	800799a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80079b8:	4b31      	ldr	r3, [pc, #196]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80079ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079c0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d02f      	beq.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	68db      	ldr	r3, [r3, #12]
 80079cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079d0:	693a      	ldr	r2, [r7, #16]
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d028      	beq.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80079d6:	4b2a      	ldr	r3, [pc, #168]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80079d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079de:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80079e0:	4b29      	ldr	r3, [pc, #164]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80079e2:	2201      	movs	r2, #1
 80079e4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80079e6:	4b28      	ldr	r3, [pc, #160]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80079e8:	2200      	movs	r2, #0
 80079ea:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80079ec:	4a24      	ldr	r2, [pc, #144]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80079f2:	4b23      	ldr	r3, [pc, #140]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80079f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079f6:	f003 0301 	and.w	r3, r3, #1
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d114      	bne.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80079fe:	f7fb f8d9 	bl	8002bb4 <HAL_GetTick>
 8007a02:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a04:	e00a      	b.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a06:	f7fb f8d5 	bl	8002bb4 <HAL_GetTick>
 8007a0a:	4602      	mov	r2, r0
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	1ad3      	subs	r3, r2, r3
 8007a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d901      	bls.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007a18:	2303      	movs	r3, #3
 8007a1a:	e02a      	b.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a1c:	4b18      	ldr	r3, [pc, #96]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a20:	f003 0302 	and.w	r3, r3, #2
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d0ee      	beq.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	68db      	ldr	r3, [r3, #12]
 8007a2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a34:	d10d      	bne.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007a36:	4b12      	ldr	r3, [pc, #72]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	68db      	ldr	r3, [r3, #12]
 8007a42:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007a46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a4a:	490d      	ldr	r1, [pc, #52]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	608b      	str	r3, [r1, #8]
 8007a50:	e005      	b.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007a52:	4b0b      	ldr	r3, [pc, #44]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007a54:	689b      	ldr	r3, [r3, #8]
 8007a56:	4a0a      	ldr	r2, [pc, #40]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007a58:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007a5c:	6093      	str	r3, [r2, #8]
 8007a5e:	4b08      	ldr	r3, [pc, #32]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007a60:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	68db      	ldr	r3, [r3, #12]
 8007a66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a6a:	4905      	ldr	r1, [pc, #20]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007a70:	2300      	movs	r3, #0
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3718      	adds	r7, #24
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
 8007a7a:	bf00      	nop
 8007a7c:	42470068 	.word	0x42470068
 8007a80:	40023800 	.word	0x40023800
 8007a84:	40007000 	.word	0x40007000
 8007a88:	42470e40 	.word	0x42470e40

08007a8c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b087      	sub	sp, #28
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007a94:	2300      	movs	r3, #0
 8007a96:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d13e      	bne.n	8007b28 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8007aaa:	4b23      	ldr	r3, [pc, #140]	; (8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007aac:	689b      	ldr	r3, [r3, #8]
 8007aae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ab2:	60fb      	str	r3, [r7, #12]
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d005      	beq.n	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d12f      	bne.n	8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007ac0:	4b1e      	ldr	r3, [pc, #120]	; (8007b3c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007ac2:	617b      	str	r3, [r7, #20]
          break;
 8007ac4:	e02f      	b.n	8007b26 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007ac6:	4b1c      	ldr	r3, [pc, #112]	; (8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ace:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ad2:	d108      	bne.n	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007ad4:	4b18      	ldr	r3, [pc, #96]	; (8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007adc:	4a18      	ldr	r2, [pc, #96]	; (8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ae2:	613b      	str	r3, [r7, #16]
 8007ae4:	e007      	b.n	8007af6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007ae6:	4b14      	ldr	r3, [pc, #80]	; (8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007aee:	4a15      	ldr	r2, [pc, #84]	; (8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007af4:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007af6:	4b10      	ldr	r3, [pc, #64]	; (8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007af8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007afc:	099b      	lsrs	r3, r3, #6
 8007afe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	fb02 f303 	mul.w	r3, r2, r3
 8007b08:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007b0a:	4b0b      	ldr	r3, [pc, #44]	; (8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007b0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b10:	0f1b      	lsrs	r3, r3, #28
 8007b12:	f003 0307 	and.w	r3, r3, #7
 8007b16:	68ba      	ldr	r2, [r7, #8]
 8007b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b1c:	617b      	str	r3, [r7, #20]
          break;
 8007b1e:	e002      	b.n	8007b26 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007b20:	2300      	movs	r3, #0
 8007b22:	617b      	str	r3, [r7, #20]
          break;
 8007b24:	bf00      	nop
        }
      }
      break;
 8007b26:	bf00      	nop
    }
  }
  return frequency;
 8007b28:	697b      	ldr	r3, [r7, #20]
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	371c      	adds	r7, #28
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b34:	4770      	bx	lr
 8007b36:	bf00      	nop
 8007b38:	40023800 	.word	0x40023800
 8007b3c:	00bb8000 	.word	0x00bb8000
 8007b40:	007a1200 	.word	0x007a1200
 8007b44:	00f42400 	.word	0x00f42400

08007b48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b082      	sub	sp, #8
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d101      	bne.n	8007b5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007b56:	2301      	movs	r3, #1
 8007b58:	e07b      	b.n	8007c52 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d108      	bne.n	8007b74 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b6a:	d009      	beq.n	8007b80 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	61da      	str	r2, [r3, #28]
 8007b72:	e005      	b.n	8007b80 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2200      	movs	r2, #0
 8007b78:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2200      	movs	r2, #0
 8007b84:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d106      	bne.n	8007ba0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2200      	movs	r2, #0
 8007b96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f7fa fe8e 	bl	80028bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2202      	movs	r2, #2
 8007ba4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bb6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007bc8:	431a      	orrs	r2, r3
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	68db      	ldr	r3, [r3, #12]
 8007bce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007bd2:	431a      	orrs	r2, r3
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	691b      	ldr	r3, [r3, #16]
 8007bd8:	f003 0302 	and.w	r3, r3, #2
 8007bdc:	431a      	orrs	r2, r3
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	695b      	ldr	r3, [r3, #20]
 8007be2:	f003 0301 	and.w	r3, r3, #1
 8007be6:	431a      	orrs	r2, r3
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	699b      	ldr	r3, [r3, #24]
 8007bec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007bf0:	431a      	orrs	r2, r3
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	69db      	ldr	r3, [r3, #28]
 8007bf6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007bfa:	431a      	orrs	r2, r3
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6a1b      	ldr	r3, [r3, #32]
 8007c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c04:	ea42 0103 	orr.w	r1, r2, r3
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c0c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	430a      	orrs	r2, r1
 8007c16:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	699b      	ldr	r3, [r3, #24]
 8007c1c:	0c1b      	lsrs	r3, r3, #16
 8007c1e:	f003 0104 	and.w	r1, r3, #4
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c26:	f003 0210 	and.w	r2, r3, #16
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	430a      	orrs	r2, r1
 8007c30:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	69da      	ldr	r2, [r3, #28]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c40:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2200      	movs	r2, #0
 8007c46:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007c50:	2300      	movs	r3, #0
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3708      	adds	r7, #8
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}

08007c5a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c5a:	b580      	push	{r7, lr}
 8007c5c:	b088      	sub	sp, #32
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	60f8      	str	r0, [r7, #12]
 8007c62:	60b9      	str	r1, [r7, #8]
 8007c64:	603b      	str	r3, [r7, #0]
 8007c66:	4613      	mov	r3, r2
 8007c68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d101      	bne.n	8007c7c <HAL_SPI_Transmit+0x22>
 8007c78:	2302      	movs	r3, #2
 8007c7a:	e126      	b.n	8007eca <HAL_SPI_Transmit+0x270>
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c84:	f7fa ff96 	bl	8002bb4 <HAL_GetTick>
 8007c88:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007c8a:	88fb      	ldrh	r3, [r7, #6]
 8007c8c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c94:	b2db      	uxtb	r3, r3
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d002      	beq.n	8007ca0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007c9a:	2302      	movs	r3, #2
 8007c9c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007c9e:	e10b      	b.n	8007eb8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d002      	beq.n	8007cac <HAL_SPI_Transmit+0x52>
 8007ca6:	88fb      	ldrh	r3, [r7, #6]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d102      	bne.n	8007cb2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007cac:	2301      	movs	r3, #1
 8007cae:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007cb0:	e102      	b.n	8007eb8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2203      	movs	r2, #3
 8007cb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	68ba      	ldr	r2, [r7, #8]
 8007cc4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	88fa      	ldrh	r2, [r7, #6]
 8007cca:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	88fa      	ldrh	r2, [r7, #6]
 8007cd0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2200      	movs	r2, #0
 8007cee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	689b      	ldr	r3, [r3, #8]
 8007cf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cf8:	d10f      	bne.n	8007d1a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d08:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	681a      	ldr	r2, [r3, #0]
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007d18:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d24:	2b40      	cmp	r3, #64	; 0x40
 8007d26:	d007      	beq.n	8007d38 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d36:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d40:	d14b      	bne.n	8007dda <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d002      	beq.n	8007d50 <HAL_SPI_Transmit+0xf6>
 8007d4a:	8afb      	ldrh	r3, [r7, #22]
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d13e      	bne.n	8007dce <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d54:	881a      	ldrh	r2, [r3, #0]
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d60:	1c9a      	adds	r2, r3, #2
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	3b01      	subs	r3, #1
 8007d6e:	b29a      	uxth	r2, r3
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007d74:	e02b      	b.n	8007dce <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	689b      	ldr	r3, [r3, #8]
 8007d7c:	f003 0302 	and.w	r3, r3, #2
 8007d80:	2b02      	cmp	r3, #2
 8007d82:	d112      	bne.n	8007daa <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d88:	881a      	ldrh	r2, [r3, #0]
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d94:	1c9a      	adds	r2, r3, #2
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	3b01      	subs	r3, #1
 8007da2:	b29a      	uxth	r2, r3
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	86da      	strh	r2, [r3, #54]	; 0x36
 8007da8:	e011      	b.n	8007dce <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007daa:	f7fa ff03 	bl	8002bb4 <HAL_GetTick>
 8007dae:	4602      	mov	r2, r0
 8007db0:	69bb      	ldr	r3, [r7, #24]
 8007db2:	1ad3      	subs	r3, r2, r3
 8007db4:	683a      	ldr	r2, [r7, #0]
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d803      	bhi.n	8007dc2 <HAL_SPI_Transmit+0x168>
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dc0:	d102      	bne.n	8007dc8 <HAL_SPI_Transmit+0x16e>
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d102      	bne.n	8007dce <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007dc8:	2303      	movs	r3, #3
 8007dca:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007dcc:	e074      	b.n	8007eb8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d1ce      	bne.n	8007d76 <HAL_SPI_Transmit+0x11c>
 8007dd8:	e04c      	b.n	8007e74 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d002      	beq.n	8007de8 <HAL_SPI_Transmit+0x18e>
 8007de2:	8afb      	ldrh	r3, [r7, #22]
 8007de4:	2b01      	cmp	r3, #1
 8007de6:	d140      	bne.n	8007e6a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	330c      	adds	r3, #12
 8007df2:	7812      	ldrb	r2, [r2, #0]
 8007df4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dfa:	1c5a      	adds	r2, r3, #1
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	3b01      	subs	r3, #1
 8007e08:	b29a      	uxth	r2, r3
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007e0e:	e02c      	b.n	8007e6a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	f003 0302 	and.w	r3, r3, #2
 8007e1a:	2b02      	cmp	r3, #2
 8007e1c:	d113      	bne.n	8007e46 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	330c      	adds	r3, #12
 8007e28:	7812      	ldrb	r2, [r2, #0]
 8007e2a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e30:	1c5a      	adds	r2, r3, #1
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	3b01      	subs	r3, #1
 8007e3e:	b29a      	uxth	r2, r3
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	86da      	strh	r2, [r3, #54]	; 0x36
 8007e44:	e011      	b.n	8007e6a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e46:	f7fa feb5 	bl	8002bb4 <HAL_GetTick>
 8007e4a:	4602      	mov	r2, r0
 8007e4c:	69bb      	ldr	r3, [r7, #24]
 8007e4e:	1ad3      	subs	r3, r2, r3
 8007e50:	683a      	ldr	r2, [r7, #0]
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d803      	bhi.n	8007e5e <HAL_SPI_Transmit+0x204>
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e5c:	d102      	bne.n	8007e64 <HAL_SPI_Transmit+0x20a>
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d102      	bne.n	8007e6a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007e64:	2303      	movs	r3, #3
 8007e66:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007e68:	e026      	b.n	8007eb8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d1cd      	bne.n	8007e10 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007e74:	69ba      	ldr	r2, [r7, #24]
 8007e76:	6839      	ldr	r1, [r7, #0]
 8007e78:	68f8      	ldr	r0, [r7, #12]
 8007e7a:	f000 f8b3 	bl	8007fe4 <SPI_EndRxTxTransaction>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d002      	beq.n	8007e8a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2220      	movs	r2, #32
 8007e88:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	689b      	ldr	r3, [r3, #8]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d10a      	bne.n	8007ea8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e92:	2300      	movs	r3, #0
 8007e94:	613b      	str	r3, [r7, #16]
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	68db      	ldr	r3, [r3, #12]
 8007e9c:	613b      	str	r3, [r7, #16]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	613b      	str	r3, [r7, #16]
 8007ea6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d002      	beq.n	8007eb6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	77fb      	strb	r3, [r7, #31]
 8007eb4:	e000      	b.n	8007eb8 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007eb6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2201      	movs	r2, #1
 8007ebc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007ec8:	7ffb      	ldrb	r3, [r7, #31]
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3720      	adds	r7, #32
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
	...

08007ed4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b088      	sub	sp, #32
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	60f8      	str	r0, [r7, #12]
 8007edc:	60b9      	str	r1, [r7, #8]
 8007ede:	603b      	str	r3, [r7, #0]
 8007ee0:	4613      	mov	r3, r2
 8007ee2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007ee4:	f7fa fe66 	bl	8002bb4 <HAL_GetTick>
 8007ee8:	4602      	mov	r2, r0
 8007eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eec:	1a9b      	subs	r3, r3, r2
 8007eee:	683a      	ldr	r2, [r7, #0]
 8007ef0:	4413      	add	r3, r2
 8007ef2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007ef4:	f7fa fe5e 	bl	8002bb4 <HAL_GetTick>
 8007ef8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007efa:	4b39      	ldr	r3, [pc, #228]	; (8007fe0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	015b      	lsls	r3, r3, #5
 8007f00:	0d1b      	lsrs	r3, r3, #20
 8007f02:	69fa      	ldr	r2, [r7, #28]
 8007f04:	fb02 f303 	mul.w	r3, r2, r3
 8007f08:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f0a:	e054      	b.n	8007fb6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f12:	d050      	beq.n	8007fb6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007f14:	f7fa fe4e 	bl	8002bb4 <HAL_GetTick>
 8007f18:	4602      	mov	r2, r0
 8007f1a:	69bb      	ldr	r3, [r7, #24]
 8007f1c:	1ad3      	subs	r3, r2, r3
 8007f1e:	69fa      	ldr	r2, [r7, #28]
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d902      	bls.n	8007f2a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007f24:	69fb      	ldr	r3, [r7, #28]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d13d      	bne.n	8007fa6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	685a      	ldr	r2, [r3, #4]
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007f38:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f42:	d111      	bne.n	8007f68 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	689b      	ldr	r3, [r3, #8]
 8007f48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f4c:	d004      	beq.n	8007f58 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	689b      	ldr	r3, [r3, #8]
 8007f52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f56:	d107      	bne.n	8007f68 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	681a      	ldr	r2, [r3, #0]
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f66:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f70:	d10f      	bne.n	8007f92 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	681a      	ldr	r2, [r3, #0]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f80:	601a      	str	r2, [r3, #0]
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	681a      	ldr	r2, [r3, #0]
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f90:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2201      	movs	r2, #1
 8007f96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007fa2:	2303      	movs	r3, #3
 8007fa4:	e017      	b.n	8007fd6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d101      	bne.n	8007fb0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007fac:	2300      	movs	r3, #0
 8007fae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	3b01      	subs	r3, #1
 8007fb4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	689a      	ldr	r2, [r3, #8]
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	4013      	ands	r3, r2
 8007fc0:	68ba      	ldr	r2, [r7, #8]
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	bf0c      	ite	eq
 8007fc6:	2301      	moveq	r3, #1
 8007fc8:	2300      	movne	r3, #0
 8007fca:	b2db      	uxtb	r3, r3
 8007fcc:	461a      	mov	r2, r3
 8007fce:	79fb      	ldrb	r3, [r7, #7]
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d19b      	bne.n	8007f0c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007fd4:	2300      	movs	r3, #0
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3720      	adds	r7, #32
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
 8007fde:	bf00      	nop
 8007fe0:	200002a4 	.word	0x200002a4

08007fe4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b088      	sub	sp, #32
 8007fe8:	af02      	add	r7, sp, #8
 8007fea:	60f8      	str	r0, [r7, #12]
 8007fec:	60b9      	str	r1, [r7, #8]
 8007fee:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007ff0:	4b1b      	ldr	r3, [pc, #108]	; (8008060 <SPI_EndRxTxTransaction+0x7c>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a1b      	ldr	r2, [pc, #108]	; (8008064 <SPI_EndRxTxTransaction+0x80>)
 8007ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8007ffa:	0d5b      	lsrs	r3, r3, #21
 8007ffc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008000:	fb02 f303 	mul.w	r3, r2, r3
 8008004:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800800e:	d112      	bne.n	8008036 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	9300      	str	r3, [sp, #0]
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	2200      	movs	r2, #0
 8008018:	2180      	movs	r1, #128	; 0x80
 800801a:	68f8      	ldr	r0, [r7, #12]
 800801c:	f7ff ff5a 	bl	8007ed4 <SPI_WaitFlagStateUntilTimeout>
 8008020:	4603      	mov	r3, r0
 8008022:	2b00      	cmp	r3, #0
 8008024:	d016      	beq.n	8008054 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800802a:	f043 0220 	orr.w	r2, r3, #32
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008032:	2303      	movs	r3, #3
 8008034:	e00f      	b.n	8008056 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d00a      	beq.n	8008052 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	3b01      	subs	r3, #1
 8008040:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	689b      	ldr	r3, [r3, #8]
 8008048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800804c:	2b80      	cmp	r3, #128	; 0x80
 800804e:	d0f2      	beq.n	8008036 <SPI_EndRxTxTransaction+0x52>
 8008050:	e000      	b.n	8008054 <SPI_EndRxTxTransaction+0x70>
        break;
 8008052:	bf00      	nop
  }

  return HAL_OK;
 8008054:	2300      	movs	r3, #0
}
 8008056:	4618      	mov	r0, r3
 8008058:	3718      	adds	r7, #24
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
 800805e:	bf00      	nop
 8008060:	200002a4 	.word	0x200002a4
 8008064:	165e9f81 	.word	0x165e9f81

08008068 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008068:	b084      	sub	sp, #16
 800806a:	b580      	push	{r7, lr}
 800806c:	b084      	sub	sp, #16
 800806e:	af00      	add	r7, sp, #0
 8008070:	6078      	str	r0, [r7, #4]
 8008072:	f107 001c 	add.w	r0, r7, #28
 8008076:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800807a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800807c:	2b01      	cmp	r3, #1
 800807e:	d122      	bne.n	80080c6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008084:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	68db      	ldr	r3, [r3, #12]
 8008090:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008094:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008098:	687a      	ldr	r2, [r7, #4]
 800809a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	68db      	ldr	r3, [r3, #12]
 80080a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80080a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080aa:	2b01      	cmp	r3, #1
 80080ac:	d105      	bne.n	80080ba <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	68db      	ldr	r3, [r3, #12]
 80080b2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 f9a0 	bl	8008400 <USB_CoreReset>
 80080c0:	4603      	mov	r3, r0
 80080c2:	73fb      	strb	r3, [r7, #15]
 80080c4:	e01a      	b.n	80080fc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	68db      	ldr	r3, [r3, #12]
 80080ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 f994 	bl	8008400 <USB_CoreReset>
 80080d8:	4603      	mov	r3, r0
 80080da:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80080dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d106      	bne.n	80080f0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	639a      	str	r2, [r3, #56]	; 0x38
 80080ee:	e005      	b.n	80080fc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80080fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080fe:	2b01      	cmp	r3, #1
 8008100:	d10b      	bne.n	800811a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	689b      	ldr	r3, [r3, #8]
 8008106:	f043 0206 	orr.w	r2, r3, #6
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	689b      	ldr	r3, [r3, #8]
 8008112:	f043 0220 	orr.w	r2, r3, #32
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800811a:	7bfb      	ldrb	r3, [r7, #15]
}
 800811c:	4618      	mov	r0, r3
 800811e:	3710      	adds	r7, #16
 8008120:	46bd      	mov	sp, r7
 8008122:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008126:	b004      	add	sp, #16
 8008128:	4770      	bx	lr

0800812a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800812a:	b480      	push	{r7}
 800812c:	b083      	sub	sp, #12
 800812e:	af00      	add	r7, sp, #0
 8008130:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	689b      	ldr	r3, [r3, #8]
 8008136:	f043 0201 	orr.w	r2, r3, #1
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800813e:	2300      	movs	r3, #0
}
 8008140:	4618      	mov	r0, r3
 8008142:	370c      	adds	r7, #12
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr

0800814c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800814c:	b480      	push	{r7}
 800814e:	b083      	sub	sp, #12
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	689b      	ldr	r3, [r3, #8]
 8008158:	f023 0201 	bic.w	r2, r3, #1
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008160:	2300      	movs	r3, #0
}
 8008162:	4618      	mov	r0, r3
 8008164:	370c      	adds	r7, #12
 8008166:	46bd      	mov	sp, r7
 8008168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816c:	4770      	bx	lr

0800816e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800816e:	b580      	push	{r7, lr}
 8008170:	b084      	sub	sp, #16
 8008172:	af00      	add	r7, sp, #0
 8008174:	6078      	str	r0, [r7, #4]
 8008176:	460b      	mov	r3, r1
 8008178:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800817a:	2300      	movs	r3, #0
 800817c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	68db      	ldr	r3, [r3, #12]
 8008182:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800818a:	78fb      	ldrb	r3, [r7, #3]
 800818c:	2b01      	cmp	r3, #1
 800818e:	d115      	bne.n	80081bc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	68db      	ldr	r3, [r3, #12]
 8008194:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800819c:	2001      	movs	r0, #1
 800819e:	f7fa fd15 	bl	8002bcc <HAL_Delay>
      ms++;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	3301      	adds	r3, #1
 80081a6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f000 f91a 	bl	80083e2 <USB_GetMode>
 80081ae:	4603      	mov	r3, r0
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d01e      	beq.n	80081f2 <USB_SetCurrentMode+0x84>
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2b31      	cmp	r3, #49	; 0x31
 80081b8:	d9f0      	bls.n	800819c <USB_SetCurrentMode+0x2e>
 80081ba:	e01a      	b.n	80081f2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80081bc:	78fb      	ldrb	r3, [r7, #3]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d115      	bne.n	80081ee <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	68db      	ldr	r3, [r3, #12]
 80081c6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80081ce:	2001      	movs	r0, #1
 80081d0:	f7fa fcfc 	bl	8002bcc <HAL_Delay>
      ms++;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	3301      	adds	r3, #1
 80081d8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 f901 	bl	80083e2 <USB_GetMode>
 80081e0:	4603      	mov	r3, r0
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d005      	beq.n	80081f2 <USB_SetCurrentMode+0x84>
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2b31      	cmp	r3, #49	; 0x31
 80081ea:	d9f0      	bls.n	80081ce <USB_SetCurrentMode+0x60>
 80081ec:	e001      	b.n	80081f2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80081ee:	2301      	movs	r3, #1
 80081f0:	e005      	b.n	80081fe <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2b32      	cmp	r3, #50	; 0x32
 80081f6:	d101      	bne.n	80081fc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80081f8:	2301      	movs	r3, #1
 80081fa:	e000      	b.n	80081fe <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80081fc:	2300      	movs	r3, #0
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3710      	adds	r7, #16
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
	...

08008208 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008208:	b480      	push	{r7}
 800820a:	b085      	sub	sp, #20
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008212:	2300      	movs	r3, #0
 8008214:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	019b      	lsls	r3, r3, #6
 800821a:	f043 0220 	orr.w	r2, r3, #32
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	3301      	adds	r3, #1
 8008226:	60fb      	str	r3, [r7, #12]
 8008228:	4a08      	ldr	r2, [pc, #32]	; (800824c <USB_FlushTxFifo+0x44>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d901      	bls.n	8008232 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800822e:	2303      	movs	r3, #3
 8008230:	e006      	b.n	8008240 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	691b      	ldr	r3, [r3, #16]
 8008236:	f003 0320 	and.w	r3, r3, #32
 800823a:	2b20      	cmp	r3, #32
 800823c:	d0f1      	beq.n	8008222 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800823e:	2300      	movs	r3, #0
}
 8008240:	4618      	mov	r0, r3
 8008242:	3714      	adds	r7, #20
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr
 800824c:	00030d40 	.word	0x00030d40

08008250 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008250:	b480      	push	{r7}
 8008252:	b085      	sub	sp, #20
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008258:	2300      	movs	r3, #0
 800825a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2210      	movs	r2, #16
 8008260:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	3301      	adds	r3, #1
 8008266:	60fb      	str	r3, [r7, #12]
 8008268:	4a08      	ldr	r2, [pc, #32]	; (800828c <USB_FlushRxFifo+0x3c>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d901      	bls.n	8008272 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800826e:	2303      	movs	r3, #3
 8008270:	e006      	b.n	8008280 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	691b      	ldr	r3, [r3, #16]
 8008276:	f003 0310 	and.w	r3, r3, #16
 800827a:	2b10      	cmp	r3, #16
 800827c:	d0f1      	beq.n	8008262 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800827e:	2300      	movs	r3, #0
}
 8008280:	4618      	mov	r0, r3
 8008282:	3714      	adds	r7, #20
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr
 800828c:	00030d40 	.word	0x00030d40

08008290 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008290:	b480      	push	{r7}
 8008292:	b089      	sub	sp, #36	; 0x24
 8008294:	af00      	add	r7, sp, #0
 8008296:	60f8      	str	r0, [r7, #12]
 8008298:	60b9      	str	r1, [r7, #8]
 800829a:	4611      	mov	r1, r2
 800829c:	461a      	mov	r2, r3
 800829e:	460b      	mov	r3, r1
 80082a0:	71fb      	strb	r3, [r7, #7]
 80082a2:	4613      	mov	r3, r2
 80082a4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80082ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d123      	bne.n	80082fe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80082b6:	88bb      	ldrh	r3, [r7, #4]
 80082b8:	3303      	adds	r3, #3
 80082ba:	089b      	lsrs	r3, r3, #2
 80082bc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80082be:	2300      	movs	r3, #0
 80082c0:	61bb      	str	r3, [r7, #24]
 80082c2:	e018      	b.n	80082f6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80082c4:	79fb      	ldrb	r3, [r7, #7]
 80082c6:	031a      	lsls	r2, r3, #12
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	4413      	add	r3, r2
 80082cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082d0:	461a      	mov	r2, r3
 80082d2:	69fb      	ldr	r3, [r7, #28]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80082d8:	69fb      	ldr	r3, [r7, #28]
 80082da:	3301      	adds	r3, #1
 80082dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80082de:	69fb      	ldr	r3, [r7, #28]
 80082e0:	3301      	adds	r3, #1
 80082e2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80082e4:	69fb      	ldr	r3, [r7, #28]
 80082e6:	3301      	adds	r3, #1
 80082e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80082ea:	69fb      	ldr	r3, [r7, #28]
 80082ec:	3301      	adds	r3, #1
 80082ee:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80082f0:	69bb      	ldr	r3, [r7, #24]
 80082f2:	3301      	adds	r3, #1
 80082f4:	61bb      	str	r3, [r7, #24]
 80082f6:	69ba      	ldr	r2, [r7, #24]
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d3e2      	bcc.n	80082c4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80082fe:	2300      	movs	r3, #0
}
 8008300:	4618      	mov	r0, r3
 8008302:	3724      	adds	r7, #36	; 0x24
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr

0800830c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800830c:	b480      	push	{r7}
 800830e:	b08b      	sub	sp, #44	; 0x2c
 8008310:	af00      	add	r7, sp, #0
 8008312:	60f8      	str	r0, [r7, #12]
 8008314:	60b9      	str	r1, [r7, #8]
 8008316:	4613      	mov	r3, r2
 8008318:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008322:	88fb      	ldrh	r3, [r7, #6]
 8008324:	089b      	lsrs	r3, r3, #2
 8008326:	b29b      	uxth	r3, r3
 8008328:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800832a:	88fb      	ldrh	r3, [r7, #6]
 800832c:	f003 0303 	and.w	r3, r3, #3
 8008330:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008332:	2300      	movs	r3, #0
 8008334:	623b      	str	r3, [r7, #32]
 8008336:	e014      	b.n	8008362 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008338:	69bb      	ldr	r3, [r7, #24]
 800833a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800833e:	681a      	ldr	r2, [r3, #0]
 8008340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008342:	601a      	str	r2, [r3, #0]
    pDest++;
 8008344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008346:	3301      	adds	r3, #1
 8008348:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800834a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800834c:	3301      	adds	r3, #1
 800834e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008352:	3301      	adds	r3, #1
 8008354:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008358:	3301      	adds	r3, #1
 800835a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800835c:	6a3b      	ldr	r3, [r7, #32]
 800835e:	3301      	adds	r3, #1
 8008360:	623b      	str	r3, [r7, #32]
 8008362:	6a3a      	ldr	r2, [r7, #32]
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	429a      	cmp	r2, r3
 8008368:	d3e6      	bcc.n	8008338 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800836a:	8bfb      	ldrh	r3, [r7, #30]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d01e      	beq.n	80083ae <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008370:	2300      	movs	r3, #0
 8008372:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008374:	69bb      	ldr	r3, [r7, #24]
 8008376:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800837a:	461a      	mov	r2, r3
 800837c:	f107 0310 	add.w	r3, r7, #16
 8008380:	6812      	ldr	r2, [r2, #0]
 8008382:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008384:	693a      	ldr	r2, [r7, #16]
 8008386:	6a3b      	ldr	r3, [r7, #32]
 8008388:	b2db      	uxtb	r3, r3
 800838a:	00db      	lsls	r3, r3, #3
 800838c:	fa22 f303 	lsr.w	r3, r2, r3
 8008390:	b2da      	uxtb	r2, r3
 8008392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008394:	701a      	strb	r2, [r3, #0]
      i++;
 8008396:	6a3b      	ldr	r3, [r7, #32]
 8008398:	3301      	adds	r3, #1
 800839a:	623b      	str	r3, [r7, #32]
      pDest++;
 800839c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800839e:	3301      	adds	r3, #1
 80083a0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80083a2:	8bfb      	ldrh	r3, [r7, #30]
 80083a4:	3b01      	subs	r3, #1
 80083a6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80083a8:	8bfb      	ldrh	r3, [r7, #30]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d1ea      	bne.n	8008384 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80083ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	372c      	adds	r7, #44	; 0x2c
 80083b4:	46bd      	mov	sp, r7
 80083b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ba:	4770      	bx	lr

080083bc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80083bc:	b480      	push	{r7}
 80083be:	b085      	sub	sp, #20
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	695b      	ldr	r3, [r3, #20]
 80083c8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	699b      	ldr	r3, [r3, #24]
 80083ce:	68fa      	ldr	r2, [r7, #12]
 80083d0:	4013      	ands	r3, r2
 80083d2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80083d4:	68fb      	ldr	r3, [r7, #12]
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	3714      	adds	r7, #20
 80083da:	46bd      	mov	sp, r7
 80083dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e0:	4770      	bx	lr

080083e2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80083e2:	b480      	push	{r7}
 80083e4:	b083      	sub	sp, #12
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	695b      	ldr	r3, [r3, #20]
 80083ee:	f003 0301 	and.w	r3, r3, #1
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	370c      	adds	r7, #12
 80083f6:	46bd      	mov	sp, r7
 80083f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fc:	4770      	bx	lr
	...

08008400 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008400:	b480      	push	{r7}
 8008402:	b085      	sub	sp, #20
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008408:	2300      	movs	r3, #0
 800840a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	3301      	adds	r3, #1
 8008410:	60fb      	str	r3, [r7, #12]
 8008412:	4a13      	ldr	r2, [pc, #76]	; (8008460 <USB_CoreReset+0x60>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d901      	bls.n	800841c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8008418:	2303      	movs	r3, #3
 800841a:	e01a      	b.n	8008452 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	691b      	ldr	r3, [r3, #16]
 8008420:	2b00      	cmp	r3, #0
 8008422:	daf3      	bge.n	800840c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008424:	2300      	movs	r3, #0
 8008426:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	691b      	ldr	r3, [r3, #16]
 800842c:	f043 0201 	orr.w	r2, r3, #1
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	3301      	adds	r3, #1
 8008438:	60fb      	str	r3, [r7, #12]
 800843a:	4a09      	ldr	r2, [pc, #36]	; (8008460 <USB_CoreReset+0x60>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d901      	bls.n	8008444 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8008440:	2303      	movs	r3, #3
 8008442:	e006      	b.n	8008452 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	691b      	ldr	r3, [r3, #16]
 8008448:	f003 0301 	and.w	r3, r3, #1
 800844c:	2b01      	cmp	r3, #1
 800844e:	d0f1      	beq.n	8008434 <USB_CoreReset+0x34>

  return HAL_OK;
 8008450:	2300      	movs	r3, #0
}
 8008452:	4618      	mov	r0, r3
 8008454:	3714      	adds	r7, #20
 8008456:	46bd      	mov	sp, r7
 8008458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845c:	4770      	bx	lr
 800845e:	bf00      	nop
 8008460:	00030d40 	.word	0x00030d40

08008464 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008464:	b084      	sub	sp, #16
 8008466:	b580      	push	{r7, lr}
 8008468:	b084      	sub	sp, #16
 800846a:	af00      	add	r7, sp, #0
 800846c:	6078      	str	r0, [r7, #4]
 800846e:	f107 001c 	add.w	r0, r7, #28
 8008472:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008480:	461a      	mov	r2, r3
 8008482:	2300      	movs	r3, #0
 8008484:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800848a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008496:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084a2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d018      	beq.n	80084e8 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80084b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b8:	2b01      	cmp	r3, #1
 80084ba:	d10a      	bne.n	80084d2 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	68ba      	ldr	r2, [r7, #8]
 80084c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80084ca:	f043 0304 	orr.w	r3, r3, #4
 80084ce:	6013      	str	r3, [r2, #0]
 80084d0:	e014      	b.n	80084fc <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	68ba      	ldr	r2, [r7, #8]
 80084dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80084e0:	f023 0304 	bic.w	r3, r3, #4
 80084e4:	6013      	str	r3, [r2, #0]
 80084e6:	e009      	b.n	80084fc <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	68ba      	ldr	r2, [r7, #8]
 80084f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80084f6:	f023 0304 	bic.w	r3, r3, #4
 80084fa:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80084fc:	2110      	movs	r1, #16
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f7ff fe82 	bl	8008208 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f7ff fea3 	bl	8008250 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800850a:	2300      	movs	r3, #0
 800850c:	60fb      	str	r3, [r7, #12]
 800850e:	e015      	b.n	800853c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	015a      	lsls	r2, r3, #5
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	4413      	add	r3, r2
 8008518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800851c:	461a      	mov	r2, r3
 800851e:	f04f 33ff 	mov.w	r3, #4294967295
 8008522:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	015a      	lsls	r2, r3, #5
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	4413      	add	r3, r2
 800852c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008530:	461a      	mov	r2, r3
 8008532:	2300      	movs	r3, #0
 8008534:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	3301      	adds	r3, #1
 800853a:	60fb      	str	r3, [r7, #12]
 800853c:	6a3b      	ldr	r3, [r7, #32]
 800853e:	68fa      	ldr	r2, [r7, #12]
 8008540:	429a      	cmp	r2, r3
 8008542:	d3e5      	bcc.n	8008510 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2200      	movs	r2, #0
 8008548:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f04f 32ff 	mov.w	r2, #4294967295
 8008550:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800855a:	2b00      	cmp	r3, #0
 800855c:	d00b      	beq.n	8008576 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008564:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	4a13      	ldr	r2, [pc, #76]	; (80085b8 <USB_HostInit+0x154>)
 800856a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	4a13      	ldr	r2, [pc, #76]	; (80085bc <USB_HostInit+0x158>)
 8008570:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8008574:	e009      	b.n	800858a <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2280      	movs	r2, #128	; 0x80
 800857a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	4a10      	ldr	r2, [pc, #64]	; (80085c0 <USB_HostInit+0x15c>)
 8008580:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	4a0f      	ldr	r2, [pc, #60]	; (80085c4 <USB_HostInit+0x160>)
 8008586:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800858a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800858c:	2b00      	cmp	r3, #0
 800858e:	d105      	bne.n	800859c <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	699b      	ldr	r3, [r3, #24]
 8008594:	f043 0210 	orr.w	r2, r3, #16
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	699a      	ldr	r2, [r3, #24]
 80085a0:	4b09      	ldr	r3, [pc, #36]	; (80085c8 <USB_HostInit+0x164>)
 80085a2:	4313      	orrs	r3, r2
 80085a4:	687a      	ldr	r2, [r7, #4]
 80085a6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80085a8:	2300      	movs	r3, #0
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3710      	adds	r7, #16
 80085ae:	46bd      	mov	sp, r7
 80085b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80085b4:	b004      	add	sp, #16
 80085b6:	4770      	bx	lr
 80085b8:	01000200 	.word	0x01000200
 80085bc:	00e00300 	.word	0x00e00300
 80085c0:	00600080 	.word	0x00600080
 80085c4:	004000e0 	.word	0x004000e0
 80085c8:	a3200008 	.word	0xa3200008

080085cc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b085      	sub	sp, #20
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	460b      	mov	r3, r1
 80085d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	68fa      	ldr	r2, [r7, #12]
 80085e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80085ea:	f023 0303 	bic.w	r3, r3, #3
 80085ee:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80085f6:	681a      	ldr	r2, [r3, #0]
 80085f8:	78fb      	ldrb	r3, [r7, #3]
 80085fa:	f003 0303 	and.w	r3, r3, #3
 80085fe:	68f9      	ldr	r1, [r7, #12]
 8008600:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008604:	4313      	orrs	r3, r2
 8008606:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008608:	78fb      	ldrb	r3, [r7, #3]
 800860a:	2b01      	cmp	r3, #1
 800860c:	d107      	bne.n	800861e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008614:	461a      	mov	r2, r3
 8008616:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800861a:	6053      	str	r3, [r2, #4]
 800861c:	e009      	b.n	8008632 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800861e:	78fb      	ldrb	r3, [r7, #3]
 8008620:	2b02      	cmp	r3, #2
 8008622:	d106      	bne.n	8008632 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800862a:	461a      	mov	r2, r3
 800862c:	f241 7370 	movw	r3, #6000	; 0x1770
 8008630:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008632:	2300      	movs	r3, #0
}
 8008634:	4618      	mov	r0, r3
 8008636:	3714      	adds	r7, #20
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr

08008640 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b084      	sub	sp, #16
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800864c:	2300      	movs	r3, #0
 800864e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008660:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	68fa      	ldr	r2, [r7, #12]
 8008666:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800866a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800866e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008670:	2064      	movs	r0, #100	; 0x64
 8008672:	f7fa faab 	bl	8002bcc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	68fa      	ldr	r2, [r7, #12]
 800867a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800867e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008682:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008684:	200a      	movs	r0, #10
 8008686:	f7fa faa1 	bl	8002bcc <HAL_Delay>

  return HAL_OK;
 800868a:	2300      	movs	r3, #0
}
 800868c:	4618      	mov	r0, r3
 800868e:	3710      	adds	r7, #16
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}

08008694 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008694:	b480      	push	{r7}
 8008696:	b085      	sub	sp, #20
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
 800869c:	460b      	mov	r3, r1
 800869e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80086a4:	2300      	movs	r3, #0
 80086a6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80086b8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d109      	bne.n	80086d8 <USB_DriveVbus+0x44>
 80086c4:	78fb      	ldrb	r3, [r7, #3]
 80086c6:	2b01      	cmp	r3, #1
 80086c8:	d106      	bne.n	80086d8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	68fa      	ldr	r2, [r7, #12]
 80086ce:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80086d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80086d6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80086de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086e2:	d109      	bne.n	80086f8 <USB_DriveVbus+0x64>
 80086e4:	78fb      	ldrb	r3, [r7, #3]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d106      	bne.n	80086f8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	68fa      	ldr	r2, [r7, #12]
 80086ee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80086f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80086f6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80086f8:	2300      	movs	r3, #0
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3714      	adds	r7, #20
 80086fe:	46bd      	mov	sp, r7
 8008700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008704:	4770      	bx	lr

08008706 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008706:	b480      	push	{r7}
 8008708:	b085      	sub	sp, #20
 800870a:	af00      	add	r7, sp, #0
 800870c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008712:	2300      	movs	r3, #0
 8008714:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	0c5b      	lsrs	r3, r3, #17
 8008724:	f003 0303 	and.w	r3, r3, #3
}
 8008728:	4618      	mov	r0, r3
 800872a:	3714      	adds	r7, #20
 800872c:	46bd      	mov	sp, r7
 800872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008732:	4770      	bx	lr

08008734 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8008734:	b480      	push	{r7}
 8008736:	b085      	sub	sp, #20
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008746:	689b      	ldr	r3, [r3, #8]
 8008748:	b29b      	uxth	r3, r3
}
 800874a:	4618      	mov	r0, r3
 800874c:	3714      	adds	r7, #20
 800874e:	46bd      	mov	sp, r7
 8008750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008754:	4770      	bx	lr
	...

08008758 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b088      	sub	sp, #32
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	4608      	mov	r0, r1
 8008762:	4611      	mov	r1, r2
 8008764:	461a      	mov	r2, r3
 8008766:	4603      	mov	r3, r0
 8008768:	70fb      	strb	r3, [r7, #3]
 800876a:	460b      	mov	r3, r1
 800876c:	70bb      	strb	r3, [r7, #2]
 800876e:	4613      	mov	r3, r2
 8008770:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008772:	2300      	movs	r3, #0
 8008774:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800877a:	78fb      	ldrb	r3, [r7, #3]
 800877c:	015a      	lsls	r2, r3, #5
 800877e:	693b      	ldr	r3, [r7, #16]
 8008780:	4413      	add	r3, r2
 8008782:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008786:	461a      	mov	r2, r3
 8008788:	f04f 33ff 	mov.w	r3, #4294967295
 800878c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800878e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008792:	2b03      	cmp	r3, #3
 8008794:	d87e      	bhi.n	8008894 <USB_HC_Init+0x13c>
 8008796:	a201      	add	r2, pc, #4	; (adr r2, 800879c <USB_HC_Init+0x44>)
 8008798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800879c:	080087ad 	.word	0x080087ad
 80087a0:	08008857 	.word	0x08008857
 80087a4:	080087ad 	.word	0x080087ad
 80087a8:	08008819 	.word	0x08008819
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80087ac:	78fb      	ldrb	r3, [r7, #3]
 80087ae:	015a      	lsls	r2, r3, #5
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	4413      	add	r3, r2
 80087b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087b8:	461a      	mov	r2, r3
 80087ba:	f240 439d 	movw	r3, #1181	; 0x49d
 80087be:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80087c0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	da10      	bge.n	80087ea <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80087c8:	78fb      	ldrb	r3, [r7, #3]
 80087ca:	015a      	lsls	r2, r3, #5
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	4413      	add	r3, r2
 80087d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087d4:	68db      	ldr	r3, [r3, #12]
 80087d6:	78fa      	ldrb	r2, [r7, #3]
 80087d8:	0151      	lsls	r1, r2, #5
 80087da:	693a      	ldr	r2, [r7, #16]
 80087dc:	440a      	add	r2, r1
 80087de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087e6:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80087e8:	e057      	b.n	800889a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d051      	beq.n	800889a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80087f6:	78fb      	ldrb	r3, [r7, #3]
 80087f8:	015a      	lsls	r2, r3, #5
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	4413      	add	r3, r2
 80087fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008802:	68db      	ldr	r3, [r3, #12]
 8008804:	78fa      	ldrb	r2, [r7, #3]
 8008806:	0151      	lsls	r1, r2, #5
 8008808:	693a      	ldr	r2, [r7, #16]
 800880a:	440a      	add	r2, r1
 800880c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008810:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008814:	60d3      	str	r3, [r2, #12]
      break;
 8008816:	e040      	b.n	800889a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008818:	78fb      	ldrb	r3, [r7, #3]
 800881a:	015a      	lsls	r2, r3, #5
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	4413      	add	r3, r2
 8008820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008824:	461a      	mov	r2, r3
 8008826:	f240 639d 	movw	r3, #1693	; 0x69d
 800882a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800882c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008830:	2b00      	cmp	r3, #0
 8008832:	da34      	bge.n	800889e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008834:	78fb      	ldrb	r3, [r7, #3]
 8008836:	015a      	lsls	r2, r3, #5
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	4413      	add	r3, r2
 800883c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008840:	68db      	ldr	r3, [r3, #12]
 8008842:	78fa      	ldrb	r2, [r7, #3]
 8008844:	0151      	lsls	r1, r2, #5
 8008846:	693a      	ldr	r2, [r7, #16]
 8008848:	440a      	add	r2, r1
 800884a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800884e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008852:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008854:	e023      	b.n	800889e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008856:	78fb      	ldrb	r3, [r7, #3]
 8008858:	015a      	lsls	r2, r3, #5
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	4413      	add	r3, r2
 800885e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008862:	461a      	mov	r2, r3
 8008864:	f240 2325 	movw	r3, #549	; 0x225
 8008868:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800886a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800886e:	2b00      	cmp	r3, #0
 8008870:	da17      	bge.n	80088a2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008872:	78fb      	ldrb	r3, [r7, #3]
 8008874:	015a      	lsls	r2, r3, #5
 8008876:	693b      	ldr	r3, [r7, #16]
 8008878:	4413      	add	r3, r2
 800887a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800887e:	68db      	ldr	r3, [r3, #12]
 8008880:	78fa      	ldrb	r2, [r7, #3]
 8008882:	0151      	lsls	r1, r2, #5
 8008884:	693a      	ldr	r2, [r7, #16]
 8008886:	440a      	add	r2, r1
 8008888:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800888c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008890:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008892:	e006      	b.n	80088a2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8008894:	2301      	movs	r3, #1
 8008896:	77fb      	strb	r3, [r7, #31]
      break;
 8008898:	e004      	b.n	80088a4 <USB_HC_Init+0x14c>
      break;
 800889a:	bf00      	nop
 800889c:	e002      	b.n	80088a4 <USB_HC_Init+0x14c>
      break;
 800889e:	bf00      	nop
 80088a0:	e000      	b.n	80088a4 <USB_HC_Init+0x14c>
      break;
 80088a2:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80088aa:	699a      	ldr	r2, [r3, #24]
 80088ac:	78fb      	ldrb	r3, [r7, #3]
 80088ae:	f003 030f 	and.w	r3, r3, #15
 80088b2:	2101      	movs	r1, #1
 80088b4:	fa01 f303 	lsl.w	r3, r1, r3
 80088b8:	6939      	ldr	r1, [r7, #16]
 80088ba:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80088be:	4313      	orrs	r3, r2
 80088c0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	699b      	ldr	r3, [r3, #24]
 80088c6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80088ce:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	da03      	bge.n	80088de <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80088d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088da:	61bb      	str	r3, [r7, #24]
 80088dc:	e001      	b.n	80088e2 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80088de:	2300      	movs	r3, #0
 80088e0:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f7ff ff0f 	bl	8008706 <USB_GetHostSpeed>
 80088e8:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80088ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80088ee:	2b02      	cmp	r3, #2
 80088f0:	d106      	bne.n	8008900 <USB_HC_Init+0x1a8>
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2b02      	cmp	r3, #2
 80088f6:	d003      	beq.n	8008900 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80088f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80088fc:	617b      	str	r3, [r7, #20]
 80088fe:	e001      	b.n	8008904 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008900:	2300      	movs	r3, #0
 8008902:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008904:	787b      	ldrb	r3, [r7, #1]
 8008906:	059b      	lsls	r3, r3, #22
 8008908:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800890c:	78bb      	ldrb	r3, [r7, #2]
 800890e:	02db      	lsls	r3, r3, #11
 8008910:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008914:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008916:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800891a:	049b      	lsls	r3, r3, #18
 800891c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008920:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008922:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008924:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008928:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800892a:	69bb      	ldr	r3, [r7, #24]
 800892c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800892e:	78fb      	ldrb	r3, [r7, #3]
 8008930:	0159      	lsls	r1, r3, #5
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	440b      	add	r3, r1
 8008936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800893a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008940:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8008942:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008946:	2b03      	cmp	r3, #3
 8008948:	d10f      	bne.n	800896a <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800894a:	78fb      	ldrb	r3, [r7, #3]
 800894c:	015a      	lsls	r2, r3, #5
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	4413      	add	r3, r2
 8008952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	78fa      	ldrb	r2, [r7, #3]
 800895a:	0151      	lsls	r1, r2, #5
 800895c:	693a      	ldr	r2, [r7, #16]
 800895e:	440a      	add	r2, r1
 8008960:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008964:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008968:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800896a:	7ffb      	ldrb	r3, [r7, #31]
}
 800896c:	4618      	mov	r0, r3
 800896e:	3720      	adds	r7, #32
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}

08008974 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b08c      	sub	sp, #48	; 0x30
 8008978:	af02      	add	r7, sp, #8
 800897a:	60f8      	str	r0, [r7, #12]
 800897c:	60b9      	str	r1, [r7, #8]
 800897e:	4613      	mov	r3, r2
 8008980:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	785b      	ldrb	r3, [r3, #1]
 800898a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800898c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008990:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800899a:	2b00      	cmp	r3, #0
 800899c:	d02d      	beq.n	80089fa <USB_HC_StartXfer+0x86>
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	791b      	ldrb	r3, [r3, #4]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d129      	bne.n	80089fa <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80089a6:	79fb      	ldrb	r3, [r7, #7]
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	d117      	bne.n	80089dc <USB_HC_StartXfer+0x68>
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	79db      	ldrb	r3, [r3, #7]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d003      	beq.n	80089bc <USB_HC_StartXfer+0x48>
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	79db      	ldrb	r3, [r3, #7]
 80089b8:	2b02      	cmp	r3, #2
 80089ba:	d10f      	bne.n	80089dc <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80089bc:	69fb      	ldr	r3, [r7, #28]
 80089be:	015a      	lsls	r2, r3, #5
 80089c0:	6a3b      	ldr	r3, [r7, #32]
 80089c2:	4413      	add	r3, r2
 80089c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089c8:	68db      	ldr	r3, [r3, #12]
 80089ca:	69fa      	ldr	r2, [r7, #28]
 80089cc:	0151      	lsls	r1, r2, #5
 80089ce:	6a3a      	ldr	r2, [r7, #32]
 80089d0:	440a      	add	r2, r1
 80089d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80089d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089da:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80089dc:	79fb      	ldrb	r3, [r7, #7]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d10b      	bne.n	80089fa <USB_HC_StartXfer+0x86>
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	795b      	ldrb	r3, [r3, #5]
 80089e6:	2b01      	cmp	r3, #1
 80089e8:	d107      	bne.n	80089fa <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	785b      	ldrb	r3, [r3, #1]
 80089ee:	4619      	mov	r1, r3
 80089f0:	68f8      	ldr	r0, [r7, #12]
 80089f2:	f000 fa2f 	bl	8008e54 <USB_DoPing>
      return HAL_OK;
 80089f6:	2300      	movs	r3, #0
 80089f8:	e0f8      	b.n	8008bec <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	695b      	ldr	r3, [r3, #20]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d018      	beq.n	8008a34 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	695b      	ldr	r3, [r3, #20]
 8008a06:	68ba      	ldr	r2, [r7, #8]
 8008a08:	8912      	ldrh	r2, [r2, #8]
 8008a0a:	4413      	add	r3, r2
 8008a0c:	3b01      	subs	r3, #1
 8008a0e:	68ba      	ldr	r2, [r7, #8]
 8008a10:	8912      	ldrh	r2, [r2, #8]
 8008a12:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a16:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8008a18:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008a1a:	8b7b      	ldrh	r3, [r7, #26]
 8008a1c:	429a      	cmp	r2, r3
 8008a1e:	d90b      	bls.n	8008a38 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8008a20:	8b7b      	ldrh	r3, [r7, #26]
 8008a22:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008a24:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008a26:	68ba      	ldr	r2, [r7, #8]
 8008a28:	8912      	ldrh	r2, [r2, #8]
 8008a2a:	fb03 f202 	mul.w	r2, r3, r2
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	611a      	str	r2, [r3, #16]
 8008a32:	e001      	b.n	8008a38 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8008a34:	2301      	movs	r3, #1
 8008a36:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	78db      	ldrb	r3, [r3, #3]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d007      	beq.n	8008a50 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008a40:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008a42:	68ba      	ldr	r2, [r7, #8]
 8008a44:	8912      	ldrh	r2, [r2, #8]
 8008a46:	fb03 f202 	mul.w	r2, r3, r2
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	611a      	str	r2, [r3, #16]
 8008a4e:	e003      	b.n	8008a58 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	695a      	ldr	r2, [r3, #20]
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	691b      	ldr	r3, [r3, #16]
 8008a5c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008a60:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008a62:	04d9      	lsls	r1, r3, #19
 8008a64:	4b63      	ldr	r3, [pc, #396]	; (8008bf4 <USB_HC_StartXfer+0x280>)
 8008a66:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008a68:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	7a9b      	ldrb	r3, [r3, #10]
 8008a6e:	075b      	lsls	r3, r3, #29
 8008a70:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008a74:	69f9      	ldr	r1, [r7, #28]
 8008a76:	0148      	lsls	r0, r1, #5
 8008a78:	6a39      	ldr	r1, [r7, #32]
 8008a7a:	4401      	add	r1, r0
 8008a7c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008a80:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008a82:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008a84:	79fb      	ldrb	r3, [r7, #7]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d009      	beq.n	8008a9e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	68d9      	ldr	r1, [r3, #12]
 8008a8e:	69fb      	ldr	r3, [r7, #28]
 8008a90:	015a      	lsls	r2, r3, #5
 8008a92:	6a3b      	ldr	r3, [r7, #32]
 8008a94:	4413      	add	r3, r2
 8008a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a9a:	460a      	mov	r2, r1
 8008a9c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008a9e:	6a3b      	ldr	r3, [r7, #32]
 8008aa0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008aa4:	689b      	ldr	r3, [r3, #8]
 8008aa6:	f003 0301 	and.w	r3, r3, #1
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	bf0c      	ite	eq
 8008aae:	2301      	moveq	r3, #1
 8008ab0:	2300      	movne	r3, #0
 8008ab2:	b2db      	uxtb	r3, r3
 8008ab4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008ab6:	69fb      	ldr	r3, [r7, #28]
 8008ab8:	015a      	lsls	r2, r3, #5
 8008aba:	6a3b      	ldr	r3, [r7, #32]
 8008abc:	4413      	add	r3, r2
 8008abe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	69fa      	ldr	r2, [r7, #28]
 8008ac6:	0151      	lsls	r1, r2, #5
 8008ac8:	6a3a      	ldr	r2, [r7, #32]
 8008aca:	440a      	add	r2, r1
 8008acc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ad0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008ad4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008ad6:	69fb      	ldr	r3, [r7, #28]
 8008ad8:	015a      	lsls	r2, r3, #5
 8008ada:	6a3b      	ldr	r3, [r7, #32]
 8008adc:	4413      	add	r3, r2
 8008ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ae2:	681a      	ldr	r2, [r3, #0]
 8008ae4:	7e7b      	ldrb	r3, [r7, #25]
 8008ae6:	075b      	lsls	r3, r3, #29
 8008ae8:	69f9      	ldr	r1, [r7, #28]
 8008aea:	0148      	lsls	r0, r1, #5
 8008aec:	6a39      	ldr	r1, [r7, #32]
 8008aee:	4401      	add	r1, r0
 8008af0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8008af4:	4313      	orrs	r3, r2
 8008af6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008af8:	69fb      	ldr	r3, [r7, #28]
 8008afa:	015a      	lsls	r2, r3, #5
 8008afc:	6a3b      	ldr	r3, [r7, #32]
 8008afe:	4413      	add	r3, r2
 8008b00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008b0e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	78db      	ldrb	r3, [r3, #3]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d004      	beq.n	8008b22 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b1e:	613b      	str	r3, [r7, #16]
 8008b20:	e003      	b.n	8008b2a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008b28:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008b30:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008b32:	69fb      	ldr	r3, [r7, #28]
 8008b34:	015a      	lsls	r2, r3, #5
 8008b36:	6a3b      	ldr	r3, [r7, #32]
 8008b38:	4413      	add	r3, r2
 8008b3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b3e:	461a      	mov	r2, r3
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008b44:	79fb      	ldrb	r3, [r7, #7]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d001      	beq.n	8008b4e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	e04e      	b.n	8008bec <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	78db      	ldrb	r3, [r3, #3]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d149      	bne.n	8008bea <USB_HC_StartXfer+0x276>
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	695b      	ldr	r3, [r3, #20]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d045      	beq.n	8008bea <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	79db      	ldrb	r3, [r3, #7]
 8008b62:	2b03      	cmp	r3, #3
 8008b64:	d830      	bhi.n	8008bc8 <USB_HC_StartXfer+0x254>
 8008b66:	a201      	add	r2, pc, #4	; (adr r2, 8008b6c <USB_HC_StartXfer+0x1f8>)
 8008b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b6c:	08008b7d 	.word	0x08008b7d
 8008b70:	08008ba1 	.word	0x08008ba1
 8008b74:	08008b7d 	.word	0x08008b7d
 8008b78:	08008ba1 	.word	0x08008ba1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	695b      	ldr	r3, [r3, #20]
 8008b80:	3303      	adds	r3, #3
 8008b82:	089b      	lsrs	r3, r3, #2
 8008b84:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008b86:	8afa      	ldrh	r2, [r7, #22]
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b8c:	b29b      	uxth	r3, r3
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	d91c      	bls.n	8008bcc <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	699b      	ldr	r3, [r3, #24]
 8008b96:	f043 0220 	orr.w	r2, r3, #32
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	619a      	str	r2, [r3, #24]
        }
        break;
 8008b9e:	e015      	b.n	8008bcc <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	695b      	ldr	r3, [r3, #20]
 8008ba4:	3303      	adds	r3, #3
 8008ba6:	089b      	lsrs	r3, r3, #2
 8008ba8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008baa:	8afa      	ldrh	r2, [r7, #22]
 8008bac:	6a3b      	ldr	r3, [r7, #32]
 8008bae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008bb2:	691b      	ldr	r3, [r3, #16]
 8008bb4:	b29b      	uxth	r3, r3
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d90a      	bls.n	8008bd0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	699b      	ldr	r3, [r3, #24]
 8008bbe:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	619a      	str	r2, [r3, #24]
        }
        break;
 8008bc6:	e003      	b.n	8008bd0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8008bc8:	bf00      	nop
 8008bca:	e002      	b.n	8008bd2 <USB_HC_StartXfer+0x25e>
        break;
 8008bcc:	bf00      	nop
 8008bce:	e000      	b.n	8008bd2 <USB_HC_StartXfer+0x25e>
        break;
 8008bd0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	68d9      	ldr	r1, [r3, #12]
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	785a      	ldrb	r2, [r3, #1]
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	695b      	ldr	r3, [r3, #20]
 8008bde:	b29b      	uxth	r3, r3
 8008be0:	2000      	movs	r0, #0
 8008be2:	9000      	str	r0, [sp, #0]
 8008be4:	68f8      	ldr	r0, [r7, #12]
 8008be6:	f7ff fb53 	bl	8008290 <USB_WritePacket>
  }

  return HAL_OK;
 8008bea:	2300      	movs	r3, #0
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	3728      	adds	r7, #40	; 0x28
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}
 8008bf4:	1ff80000 	.word	0x1ff80000

08008bf8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b085      	sub	sp, #20
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c0a:	695b      	ldr	r3, [r3, #20]
 8008c0c:	b29b      	uxth	r3, r3
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3714      	adds	r7, #20
 8008c12:	46bd      	mov	sp, r7
 8008c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c18:	4770      	bx	lr

08008c1a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008c1a:	b480      	push	{r7}
 8008c1c:	b089      	sub	sp, #36	; 0x24
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	6078      	str	r0, [r7, #4]
 8008c22:	460b      	mov	r3, r1
 8008c24:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8008c2a:	78fb      	ldrb	r3, [r7, #3]
 8008c2c:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	015a      	lsls	r2, r3, #5
 8008c36:	69bb      	ldr	r3, [r7, #24]
 8008c38:	4413      	add	r3, r2
 8008c3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	0c9b      	lsrs	r3, r3, #18
 8008c42:	f003 0303 	and.w	r3, r3, #3
 8008c46:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	015a      	lsls	r2, r3, #5
 8008c4c:	69bb      	ldr	r3, [r7, #24]
 8008c4e:	4413      	add	r3, r2
 8008c50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	0fdb      	lsrs	r3, r3, #31
 8008c58:	f003 0301 	and.w	r3, r3, #1
 8008c5c:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	689b      	ldr	r3, [r3, #8]
 8008c62:	f003 0320 	and.w	r3, r3, #32
 8008c66:	2b20      	cmp	r3, #32
 8008c68:	d104      	bne.n	8008c74 <USB_HC_Halt+0x5a>
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d101      	bne.n	8008c74 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8008c70:	2300      	movs	r3, #0
 8008c72:	e0e8      	b.n	8008e46 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d002      	beq.n	8008c80 <USB_HC_Halt+0x66>
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	2b02      	cmp	r3, #2
 8008c7e:	d173      	bne.n	8008d68 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	015a      	lsls	r2, r3, #5
 8008c84:	69bb      	ldr	r3, [r7, #24]
 8008c86:	4413      	add	r3, r2
 8008c88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	697a      	ldr	r2, [r7, #20]
 8008c90:	0151      	lsls	r1, r2, #5
 8008c92:	69ba      	ldr	r2, [r7, #24]
 8008c94:	440a      	add	r2, r1
 8008c96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c9a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c9e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	689b      	ldr	r3, [r3, #8]
 8008ca4:	f003 0320 	and.w	r3, r3, #32
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	f040 80cb 	bne.w	8008e44 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d143      	bne.n	8008d42 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	015a      	lsls	r2, r3, #5
 8008cbe:	69bb      	ldr	r3, [r7, #24]
 8008cc0:	4413      	add	r3, r2
 8008cc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	697a      	ldr	r2, [r7, #20]
 8008cca:	0151      	lsls	r1, r2, #5
 8008ccc:	69ba      	ldr	r2, [r7, #24]
 8008cce:	440a      	add	r2, r1
 8008cd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008cd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008cd8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	015a      	lsls	r2, r3, #5
 8008cde:	69bb      	ldr	r3, [r7, #24]
 8008ce0:	4413      	add	r3, r2
 8008ce2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	697a      	ldr	r2, [r7, #20]
 8008cea:	0151      	lsls	r1, r2, #5
 8008cec:	69ba      	ldr	r2, [r7, #24]
 8008cee:	440a      	add	r2, r1
 8008cf0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008cf4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008cf8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	015a      	lsls	r2, r3, #5
 8008cfe:	69bb      	ldr	r3, [r7, #24]
 8008d00:	4413      	add	r3, r2
 8008d02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	697a      	ldr	r2, [r7, #20]
 8008d0a:	0151      	lsls	r1, r2, #5
 8008d0c:	69ba      	ldr	r2, [r7, #24]
 8008d0e:	440a      	add	r2, r1
 8008d10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d14:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008d18:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8008d1a:	69fb      	ldr	r3, [r7, #28]
 8008d1c:	3301      	adds	r3, #1
 8008d1e:	61fb      	str	r3, [r7, #28]
 8008d20:	69fb      	ldr	r3, [r7, #28]
 8008d22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d26:	d81d      	bhi.n	8008d64 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	015a      	lsls	r2, r3, #5
 8008d2c:	69bb      	ldr	r3, [r7, #24]
 8008d2e:	4413      	add	r3, r2
 8008d30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d3e:	d0ec      	beq.n	8008d1a <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008d40:	e080      	b.n	8008e44 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	015a      	lsls	r2, r3, #5
 8008d46:	69bb      	ldr	r3, [r7, #24]
 8008d48:	4413      	add	r3, r2
 8008d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	697a      	ldr	r2, [r7, #20]
 8008d52:	0151      	lsls	r1, r2, #5
 8008d54:	69ba      	ldr	r2, [r7, #24]
 8008d56:	440a      	add	r2, r1
 8008d58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008d60:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008d62:	e06f      	b.n	8008e44 <USB_HC_Halt+0x22a>
            break;
 8008d64:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008d66:	e06d      	b.n	8008e44 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	015a      	lsls	r2, r3, #5
 8008d6c:	69bb      	ldr	r3, [r7, #24]
 8008d6e:	4413      	add	r3, r2
 8008d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	697a      	ldr	r2, [r7, #20]
 8008d78:	0151      	lsls	r1, r2, #5
 8008d7a:	69ba      	ldr	r2, [r7, #24]
 8008d7c:	440a      	add	r2, r1
 8008d7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d82:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d86:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008d88:	69bb      	ldr	r3, [r7, #24]
 8008d8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d8e:	691b      	ldr	r3, [r3, #16]
 8008d90:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d143      	bne.n	8008e20 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	015a      	lsls	r2, r3, #5
 8008d9c:	69bb      	ldr	r3, [r7, #24]
 8008d9e:	4413      	add	r3, r2
 8008da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	697a      	ldr	r2, [r7, #20]
 8008da8:	0151      	lsls	r1, r2, #5
 8008daa:	69ba      	ldr	r2, [r7, #24]
 8008dac:	440a      	add	r2, r1
 8008dae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008db2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008db6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	015a      	lsls	r2, r3, #5
 8008dbc:	69bb      	ldr	r3, [r7, #24]
 8008dbe:	4413      	add	r3, r2
 8008dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	697a      	ldr	r2, [r7, #20]
 8008dc8:	0151      	lsls	r1, r2, #5
 8008dca:	69ba      	ldr	r2, [r7, #24]
 8008dcc:	440a      	add	r2, r1
 8008dce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008dd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008dd6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	015a      	lsls	r2, r3, #5
 8008ddc:	69bb      	ldr	r3, [r7, #24]
 8008dde:	4413      	add	r3, r2
 8008de0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	697a      	ldr	r2, [r7, #20]
 8008de8:	0151      	lsls	r1, r2, #5
 8008dea:	69ba      	ldr	r2, [r7, #24]
 8008dec:	440a      	add	r2, r1
 8008dee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008df2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008df6:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008df8:	69fb      	ldr	r3, [r7, #28]
 8008dfa:	3301      	adds	r3, #1
 8008dfc:	61fb      	str	r3, [r7, #28]
 8008dfe:	69fb      	ldr	r3, [r7, #28]
 8008e00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e04:	d81d      	bhi.n	8008e42 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	015a      	lsls	r2, r3, #5
 8008e0a:	69bb      	ldr	r3, [r7, #24]
 8008e0c:	4413      	add	r3, r2
 8008e0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e1c:	d0ec      	beq.n	8008df8 <USB_HC_Halt+0x1de>
 8008e1e:	e011      	b.n	8008e44 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	015a      	lsls	r2, r3, #5
 8008e24:	69bb      	ldr	r3, [r7, #24]
 8008e26:	4413      	add	r3, r2
 8008e28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	697a      	ldr	r2, [r7, #20]
 8008e30:	0151      	lsls	r1, r2, #5
 8008e32:	69ba      	ldr	r2, [r7, #24]
 8008e34:	440a      	add	r2, r1
 8008e36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008e3e:	6013      	str	r3, [r2, #0]
 8008e40:	e000      	b.n	8008e44 <USB_HC_Halt+0x22a>
          break;
 8008e42:	bf00      	nop
    }
  }

  return HAL_OK;
 8008e44:	2300      	movs	r3, #0
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3724      	adds	r7, #36	; 0x24
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e50:	4770      	bx	lr
	...

08008e54 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b087      	sub	sp, #28
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	460b      	mov	r3, r1
 8008e5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008e64:	78fb      	ldrb	r3, [r7, #3]
 8008e66:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	04da      	lsls	r2, r3, #19
 8008e70:	4b15      	ldr	r3, [pc, #84]	; (8008ec8 <USB_DoPing+0x74>)
 8008e72:	4013      	ands	r3, r2
 8008e74:	693a      	ldr	r2, [r7, #16]
 8008e76:	0151      	lsls	r1, r2, #5
 8008e78:	697a      	ldr	r2, [r7, #20]
 8008e7a:	440a      	add	r2, r1
 8008e7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008e84:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008e86:	693b      	ldr	r3, [r7, #16]
 8008e88:	015a      	lsls	r2, r3, #5
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	4413      	add	r3, r2
 8008e8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008e9c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008ea4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	015a      	lsls	r2, r3, #5
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	4413      	add	r3, r2
 8008eae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008eb2:	461a      	mov	r2, r3
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008eb8:	2300      	movs	r3, #0
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	371c      	adds	r7, #28
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec4:	4770      	bx	lr
 8008ec6:	bf00      	nop
 8008ec8:	1ff80000 	.word	0x1ff80000

08008ecc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b086      	sub	sp, #24
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f7ff f935 	bl	800814c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8008ee2:	2110      	movs	r1, #16
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f7ff f98f 	bl	8008208 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f7ff f9b0 	bl	8008250 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	613b      	str	r3, [r7, #16]
 8008ef4:	e01f      	b.n	8008f36 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	015a      	lsls	r2, r3, #5
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	4413      	add	r3, r2
 8008efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f0c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008f14:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008f1c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	015a      	lsls	r2, r3, #5
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	4413      	add	r3, r2
 8008f26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f2a:	461a      	mov	r2, r3
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	3301      	adds	r3, #1
 8008f34:	613b      	str	r3, [r7, #16]
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	2b0f      	cmp	r3, #15
 8008f3a:	d9dc      	bls.n	8008ef6 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	613b      	str	r3, [r7, #16]
 8008f40:	e034      	b.n	8008fac <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	015a      	lsls	r2, r3, #5
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	4413      	add	r3, r2
 8008f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f58:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008f60:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008f68:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	015a      	lsls	r2, r3, #5
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	4413      	add	r3, r2
 8008f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f76:	461a      	mov	r2, r3
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	3301      	adds	r3, #1
 8008f80:	617b      	str	r3, [r7, #20]
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008f88:	d80c      	bhi.n	8008fa4 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	015a      	lsls	r2, r3, #5
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	4413      	add	r3, r2
 8008f92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008fa0:	d0ec      	beq.n	8008f7c <USB_StopHost+0xb0>
 8008fa2:	e000      	b.n	8008fa6 <USB_StopHost+0xda>
        break;
 8008fa4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	3301      	adds	r3, #1
 8008faa:	613b      	str	r3, [r7, #16]
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	2b0f      	cmp	r3, #15
 8008fb0:	d9c7      	bls.n	8008f42 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008fb8:	461a      	mov	r2, r3
 8008fba:	f04f 33ff 	mov.w	r3, #4294967295
 8008fbe:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f04f 32ff 	mov.w	r2, #4294967295
 8008fc6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f7ff f8ae 	bl	800812a <USB_EnableGlobalInt>

  return HAL_OK;
 8008fce:	2300      	movs	r3, #0
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3718      	adds	r7, #24
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8008fdc:	4904      	ldr	r1, [pc, #16]	; (8008ff0 <MX_FATFS_Init+0x18>)
 8008fde:	4805      	ldr	r0, [pc, #20]	; (8008ff4 <MX_FATFS_Init+0x1c>)
 8008fe0:	f003 f84c 	bl	800c07c <FATFS_LinkDriver>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	461a      	mov	r2, r3
 8008fe8:	4b03      	ldr	r3, [pc, #12]	; (8008ff8 <MX_FATFS_Init+0x20>)
 8008fea:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008fec:	bf00      	nop
 8008fee:	bd80      	pop	{r7, pc}
 8008ff0:	20002394 	.word	0x20002394
 8008ff4:	0800d40c 	.word	0x0800d40c
 8008ff8:	20002390 	.word	0x20002390

08008ffc <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b083      	sub	sp, #12
 8009000:	af00      	add	r7, sp, #0
 8009002:	4603      	mov	r3, r0
 8009004:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8009006:	2300      	movs	r3, #0
}
 8009008:	4618      	mov	r0, r3
 800900a:	370c      	adds	r7, #12
 800900c:	46bd      	mov	sp, r7
 800900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009012:	4770      	bx	lr

08009014 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b084      	sub	sp, #16
 8009018:	af00      	add	r7, sp, #0
 800901a:	4603      	mov	r3, r0
 800901c:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800901e:	2301      	movs	r3, #1
 8009020:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8009022:	79fb      	ldrb	r3, [r7, #7]
 8009024:	4619      	mov	r1, r3
 8009026:	4808      	ldr	r0, [pc, #32]	; (8009048 <USBH_status+0x34>)
 8009028:	f000 fe1a 	bl	8009c60 <USBH_MSC_UnitIsReady>
 800902c:	4603      	mov	r3, r0
 800902e:	2b00      	cmp	r3, #0
 8009030:	d002      	beq.n	8009038 <USBH_status+0x24>
  {
    res = RES_OK;
 8009032:	2300      	movs	r3, #0
 8009034:	73fb      	strb	r3, [r7, #15]
 8009036:	e001      	b.n	800903c <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8009038:	2301      	movs	r3, #1
 800903a:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800903c:	7bfb      	ldrb	r3, [r7, #15]
}
 800903e:	4618      	mov	r0, r3
 8009040:	3710      	adds	r7, #16
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}
 8009046:	bf00      	nop
 8009048:	200023a4 	.word	0x200023a4

0800904c <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b094      	sub	sp, #80	; 0x50
 8009050:	af02      	add	r7, sp, #8
 8009052:	60b9      	str	r1, [r7, #8]
 8009054:	607a      	str	r2, [r7, #4]
 8009056:	603b      	str	r3, [r7, #0]
 8009058:	4603      	mov	r3, r0
 800905a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800905c:	2301      	movs	r3, #1
 800905e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8009062:	7bf9      	ldrb	r1, [r7, #15]
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	9300      	str	r3, [sp, #0]
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	687a      	ldr	r2, [r7, #4]
 800906c:	4813      	ldr	r0, [pc, #76]	; (80090bc <USBH_read+0x70>)
 800906e:	f000 fe41 	bl	8009cf4 <USBH_MSC_Read>
 8009072:	4603      	mov	r3, r0
 8009074:	2b00      	cmp	r3, #0
 8009076:	d103      	bne.n	8009080 <USBH_read+0x34>
  {
    res = RES_OK;
 8009078:	2300      	movs	r3, #0
 800907a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800907e:	e017      	b.n	80090b0 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8009080:	f107 0210 	add.w	r2, r7, #16
 8009084:	7bfb      	ldrb	r3, [r7, #15]
 8009086:	4619      	mov	r1, r3
 8009088:	480c      	ldr	r0, [pc, #48]	; (80090bc <USBH_read+0x70>)
 800908a:	f000 fe0f 	bl	8009cac <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800908e:	7f7b      	ldrb	r3, [r7, #29]
 8009090:	2b3a      	cmp	r3, #58	; 0x3a
 8009092:	d005      	beq.n	80090a0 <USBH_read+0x54>
 8009094:	2b3a      	cmp	r3, #58	; 0x3a
 8009096:	dc07      	bgt.n	80090a8 <USBH_read+0x5c>
 8009098:	2b04      	cmp	r3, #4
 800909a:	d001      	beq.n	80090a0 <USBH_read+0x54>
 800909c:	2b28      	cmp	r3, #40	; 0x28
 800909e:	d103      	bne.n	80090a8 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 80090a0:	2303      	movs	r3, #3
 80090a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80090a6:	e003      	b.n	80090b0 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 80090a8:	2301      	movs	r3, #1
 80090aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80090ae:	bf00      	nop
    }
  }

  return res;
 80090b0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3748      	adds	r7, #72	; 0x48
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}
 80090bc:	200023a4 	.word	0x200023a4

080090c0 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b094      	sub	sp, #80	; 0x50
 80090c4:	af02      	add	r7, sp, #8
 80090c6:	60b9      	str	r1, [r7, #8]
 80090c8:	607a      	str	r2, [r7, #4]
 80090ca:	603b      	str	r3, [r7, #0]
 80090cc:	4603      	mov	r3, r0
 80090ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80090d0:	2301      	movs	r3, #1
 80090d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 80090d6:	7bf9      	ldrb	r1, [r7, #15]
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	9300      	str	r3, [sp, #0]
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	687a      	ldr	r2, [r7, #4]
 80090e0:	4817      	ldr	r0, [pc, #92]	; (8009140 <USBH_write+0x80>)
 80090e2:	f000 fe70 	bl	8009dc6 <USBH_MSC_Write>
 80090e6:	4603      	mov	r3, r0
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d103      	bne.n	80090f4 <USBH_write+0x34>
  {
    res = RES_OK;
 80090ec:	2300      	movs	r3, #0
 80090ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80090f2:	e01f      	b.n	8009134 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80090f4:	f107 0210 	add.w	r2, r7, #16
 80090f8:	7bfb      	ldrb	r3, [r7, #15]
 80090fa:	4619      	mov	r1, r3
 80090fc:	4810      	ldr	r0, [pc, #64]	; (8009140 <USBH_write+0x80>)
 80090fe:	f000 fdd5 	bl	8009cac <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8009102:	7f7b      	ldrb	r3, [r7, #29]
 8009104:	2b3a      	cmp	r3, #58	; 0x3a
 8009106:	d00d      	beq.n	8009124 <USBH_write+0x64>
 8009108:	2b3a      	cmp	r3, #58	; 0x3a
 800910a:	dc0f      	bgt.n	800912c <USBH_write+0x6c>
 800910c:	2b28      	cmp	r3, #40	; 0x28
 800910e:	d009      	beq.n	8009124 <USBH_write+0x64>
 8009110:	2b28      	cmp	r3, #40	; 0x28
 8009112:	dc0b      	bgt.n	800912c <USBH_write+0x6c>
 8009114:	2b04      	cmp	r3, #4
 8009116:	d005      	beq.n	8009124 <USBH_write+0x64>
 8009118:	2b27      	cmp	r3, #39	; 0x27
 800911a:	d107      	bne.n	800912c <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 800911c:	2302      	movs	r3, #2
 800911e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009122:	e007      	b.n	8009134 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8009124:	2303      	movs	r3, #3
 8009126:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800912a:	e003      	b.n	8009134 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 800912c:	2301      	movs	r3, #1
 800912e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009132:	bf00      	nop
    }
  }

  return res;
 8009134:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009138:	4618      	mov	r0, r3
 800913a:	3748      	adds	r7, #72	; 0x48
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}
 8009140:	200023a4 	.word	0x200023a4

08009144 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b090      	sub	sp, #64	; 0x40
 8009148:	af00      	add	r7, sp, #0
 800914a:	4603      	mov	r3, r0
 800914c:	603a      	str	r2, [r7, #0]
 800914e:	71fb      	strb	r3, [r7, #7]
 8009150:	460b      	mov	r3, r1
 8009152:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009154:	2301      	movs	r3, #1
 8009156:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 800915a:	79bb      	ldrb	r3, [r7, #6]
 800915c:	2b03      	cmp	r3, #3
 800915e:	d852      	bhi.n	8009206 <USBH_ioctl+0xc2>
 8009160:	a201      	add	r2, pc, #4	; (adr r2, 8009168 <USBH_ioctl+0x24>)
 8009162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009166:	bf00      	nop
 8009168:	08009179 	.word	0x08009179
 800916c:	08009181 	.word	0x08009181
 8009170:	080091ab 	.word	0x080091ab
 8009174:	080091d7 	.word	0x080091d7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8009178:	2300      	movs	r3, #0
 800917a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800917e:	e045      	b.n	800920c <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8009180:	f107 0208 	add.w	r2, r7, #8
 8009184:	79fb      	ldrb	r3, [r7, #7]
 8009186:	4619      	mov	r1, r3
 8009188:	4823      	ldr	r0, [pc, #140]	; (8009218 <USBH_ioctl+0xd4>)
 800918a:	f000 fd8f 	bl	8009cac <USBH_MSC_GetLUNInfo>
 800918e:	4603      	mov	r3, r0
 8009190:	2b00      	cmp	r3, #0
 8009192:	d106      	bne.n	80091a2 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8009194:	68fa      	ldr	r2, [r7, #12]
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800919a:	2300      	movs	r3, #0
 800919c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80091a0:	e034      	b.n	800920c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80091a2:	2301      	movs	r3, #1
 80091a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80091a8:	e030      	b.n	800920c <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80091aa:	f107 0208 	add.w	r2, r7, #8
 80091ae:	79fb      	ldrb	r3, [r7, #7]
 80091b0:	4619      	mov	r1, r3
 80091b2:	4819      	ldr	r0, [pc, #100]	; (8009218 <USBH_ioctl+0xd4>)
 80091b4:	f000 fd7a 	bl	8009cac <USBH_MSC_GetLUNInfo>
 80091b8:	4603      	mov	r3, r0
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d107      	bne.n	80091ce <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 80091be:	8a3b      	ldrh	r3, [r7, #16]
 80091c0:	461a      	mov	r2, r3
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80091c6:	2300      	movs	r3, #0
 80091c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80091cc:	e01e      	b.n	800920c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80091ce:	2301      	movs	r3, #1
 80091d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80091d4:	e01a      	b.n	800920c <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80091d6:	f107 0208 	add.w	r2, r7, #8
 80091da:	79fb      	ldrb	r3, [r7, #7]
 80091dc:	4619      	mov	r1, r3
 80091de:	480e      	ldr	r0, [pc, #56]	; (8009218 <USBH_ioctl+0xd4>)
 80091e0:	f000 fd64 	bl	8009cac <USBH_MSC_GetLUNInfo>
 80091e4:	4603      	mov	r3, r0
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d109      	bne.n	80091fe <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 80091ea:	8a3b      	ldrh	r3, [r7, #16]
 80091ec:	0a5b      	lsrs	r3, r3, #9
 80091ee:	b29b      	uxth	r3, r3
 80091f0:	461a      	mov	r2, r3
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80091f6:	2300      	movs	r3, #0
 80091f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80091fc:	e006      	b.n	800920c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80091fe:	2301      	movs	r3, #1
 8009200:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009204:	e002      	b.n	800920c <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8009206:	2304      	movs	r3, #4
 8009208:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 800920c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8009210:	4618      	mov	r0, r3
 8009212:	3740      	adds	r7, #64	; 0x40
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}
 8009218:	200023a4 	.word	0x200023a4

0800921c <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800921c:	b590      	push	{r4, r7, lr}
 800921e:	b089      	sub	sp, #36	; 0x24
 8009220:	af04      	add	r7, sp, #16
 8009222:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800922a:	7919      	ldrb	r1, [r3, #4]
 800922c:	2350      	movs	r3, #80	; 0x50
 800922e:	2206      	movs	r2, #6
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f001 fc53 	bl	800aadc <USBH_FindInterface>
 8009236:	4603      	mov	r3, r0
 8009238:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800923a:	7bfb      	ldrb	r3, [r7, #15]
 800923c:	2bff      	cmp	r3, #255	; 0xff
 800923e:	d002      	beq.n	8009246 <USBH_MSC_InterfaceInit+0x2a>
 8009240:	7bfb      	ldrb	r3, [r7, #15]
 8009242:	2b01      	cmp	r3, #1
 8009244:	d901      	bls.n	800924a <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009246:	2302      	movs	r3, #2
 8009248:	e0ef      	b.n	800942a <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 800924a:	7bfb      	ldrb	r3, [r7, #15]
 800924c:	4619      	mov	r1, r3
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f001 fc28 	bl	800aaa4 <USBH_SelectInterface>
 8009254:	4603      	mov	r3, r0
 8009256:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009258:	7bbb      	ldrb	r3, [r7, #14]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d001      	beq.n	8009262 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800925e:	2302      	movs	r3, #2
 8009260:	e0e3      	b.n	800942a <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8009268:	f44f 7080 	mov.w	r0, #256	; 0x100
 800926c:	f003 fa78 	bl	800c760 <malloc>
 8009270:	4603      	mov	r3, r0
 8009272:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800927a:	69db      	ldr	r3, [r3, #28]
 800927c:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d101      	bne.n	8009288 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8009284:	2302      	movs	r3, #2
 8009286:	e0d0      	b.n	800942a <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8009288:	f44f 7280 	mov.w	r2, #256	; 0x100
 800928c:	2100      	movs	r1, #0
 800928e:	68b8      	ldr	r0, [r7, #8]
 8009290:	f003 fa84 	bl	800c79c <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8009294:	7bfb      	ldrb	r3, [r7, #15]
 8009296:	687a      	ldr	r2, [r7, #4]
 8009298:	211a      	movs	r1, #26
 800929a:	fb01 f303 	mul.w	r3, r1, r3
 800929e:	4413      	add	r3, r2
 80092a0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80092a4:	781b      	ldrb	r3, [r3, #0]
 80092a6:	b25b      	sxtb	r3, r3
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	da16      	bge.n	80092da <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80092ac:	7bfb      	ldrb	r3, [r7, #15]
 80092ae:	687a      	ldr	r2, [r7, #4]
 80092b0:	211a      	movs	r1, #26
 80092b2:	fb01 f303 	mul.w	r3, r1, r3
 80092b6:	4413      	add	r3, r2
 80092b8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80092bc:	781a      	ldrb	r2, [r3, #0]
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80092c2:	7bfb      	ldrb	r3, [r7, #15]
 80092c4:	687a      	ldr	r2, [r7, #4]
 80092c6:	211a      	movs	r1, #26
 80092c8:	fb01 f303 	mul.w	r3, r1, r3
 80092cc:	4413      	add	r3, r2
 80092ce:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80092d2:	881a      	ldrh	r2, [r3, #0]
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	815a      	strh	r2, [r3, #10]
 80092d8:	e015      	b.n	8009306 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80092da:	7bfb      	ldrb	r3, [r7, #15]
 80092dc:	687a      	ldr	r2, [r7, #4]
 80092de:	211a      	movs	r1, #26
 80092e0:	fb01 f303 	mul.w	r3, r1, r3
 80092e4:	4413      	add	r3, r2
 80092e6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80092ea:	781a      	ldrb	r2, [r3, #0]
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80092f0:	7bfb      	ldrb	r3, [r7, #15]
 80092f2:	687a      	ldr	r2, [r7, #4]
 80092f4:	211a      	movs	r1, #26
 80092f6:	fb01 f303 	mul.w	r3, r1, r3
 80092fa:	4413      	add	r3, r2
 80092fc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009300:	881a      	ldrh	r2, [r3, #0]
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8009306:	7bfb      	ldrb	r3, [r7, #15]
 8009308:	687a      	ldr	r2, [r7, #4]
 800930a:	211a      	movs	r1, #26
 800930c:	fb01 f303 	mul.w	r3, r1, r3
 8009310:	4413      	add	r3, r2
 8009312:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009316:	781b      	ldrb	r3, [r3, #0]
 8009318:	b25b      	sxtb	r3, r3
 800931a:	2b00      	cmp	r3, #0
 800931c:	da16      	bge.n	800934c <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800931e:	7bfb      	ldrb	r3, [r7, #15]
 8009320:	687a      	ldr	r2, [r7, #4]
 8009322:	211a      	movs	r1, #26
 8009324:	fb01 f303 	mul.w	r3, r1, r3
 8009328:	4413      	add	r3, r2
 800932a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800932e:	781a      	ldrb	r2, [r3, #0]
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009334:	7bfb      	ldrb	r3, [r7, #15]
 8009336:	687a      	ldr	r2, [r7, #4]
 8009338:	211a      	movs	r1, #26
 800933a:	fb01 f303 	mul.w	r3, r1, r3
 800933e:	4413      	add	r3, r2
 8009340:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009344:	881a      	ldrh	r2, [r3, #0]
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	815a      	strh	r2, [r3, #10]
 800934a:	e015      	b.n	8009378 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800934c:	7bfb      	ldrb	r3, [r7, #15]
 800934e:	687a      	ldr	r2, [r7, #4]
 8009350:	211a      	movs	r1, #26
 8009352:	fb01 f303 	mul.w	r3, r1, r3
 8009356:	4413      	add	r3, r2
 8009358:	f203 3356 	addw	r3, r3, #854	; 0x356
 800935c:	781a      	ldrb	r2, [r3, #0]
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009362:	7bfb      	ldrb	r3, [r7, #15]
 8009364:	687a      	ldr	r2, [r7, #4]
 8009366:	211a      	movs	r1, #26
 8009368:	fb01 f303 	mul.w	r3, r1, r3
 800936c:	4413      	add	r3, r2
 800936e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009372:	881a      	ldrh	r2, [r3, #0]
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	2200      	movs	r2, #0
 800937c:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	2200      	movs	r2, #0
 8009382:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	2200      	movs	r2, #0
 8009388:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	799b      	ldrb	r3, [r3, #6]
 800938e:	4619      	mov	r1, r3
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f002 fdc4 	bl	800bf1e <USBH_AllocPipe>
 8009396:	4603      	mov	r3, r0
 8009398:	461a      	mov	r2, r3
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	79db      	ldrb	r3, [r3, #7]
 80093a2:	4619      	mov	r1, r3
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f002 fdba 	bl	800bf1e <USBH_AllocPipe>
 80093aa:	4603      	mov	r3, r0
 80093ac:	461a      	mov	r2, r3
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f000 fdac 	bl	8009f10 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	7959      	ldrb	r1, [r3, #5]
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	7998      	ldrb	r0, [r3, #6]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80093cc:	68ba      	ldr	r2, [r7, #8]
 80093ce:	8912      	ldrh	r2, [r2, #8]
 80093d0:	9202      	str	r2, [sp, #8]
 80093d2:	2202      	movs	r2, #2
 80093d4:	9201      	str	r2, [sp, #4]
 80093d6:	9300      	str	r3, [sp, #0]
 80093d8:	4623      	mov	r3, r4
 80093da:	4602      	mov	r2, r0
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f002 fd6f 	bl	800bec0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	7919      	ldrb	r1, [r3, #4]
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	79d8      	ldrb	r0, [r3, #7]
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80093f6:	68ba      	ldr	r2, [r7, #8]
 80093f8:	8952      	ldrh	r2, [r2, #10]
 80093fa:	9202      	str	r2, [sp, #8]
 80093fc:	2202      	movs	r2, #2
 80093fe:	9201      	str	r2, [sp, #4]
 8009400:	9300      	str	r3, [sp, #0]
 8009402:	4623      	mov	r3, r4
 8009404:	4602      	mov	r2, r0
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f002 fd5a 	bl	800bec0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	791b      	ldrb	r3, [r3, #4]
 8009410:	2200      	movs	r2, #0
 8009412:	4619      	mov	r1, r3
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f003 f8c5 	bl	800c5a4 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	795b      	ldrb	r3, [r3, #5]
 800941e:	2200      	movs	r2, #0
 8009420:	4619      	mov	r1, r3
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f003 f8be 	bl	800c5a4 <USBH_LL_SetToggle>

  return USBH_OK;
 8009428:	2300      	movs	r3, #0
}
 800942a:	4618      	mov	r0, r3
 800942c:	3714      	adds	r7, #20
 800942e:	46bd      	mov	sp, r7
 8009430:	bd90      	pop	{r4, r7, pc}

08009432 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009432:	b580      	push	{r7, lr}
 8009434:	b084      	sub	sp, #16
 8009436:	af00      	add	r7, sp, #0
 8009438:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009440:	69db      	ldr	r3, [r3, #28]
 8009442:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	795b      	ldrb	r3, [r3, #5]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d00e      	beq.n	800946a <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	795b      	ldrb	r3, [r3, #5]
 8009450:	4619      	mov	r1, r3
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f002 fd53 	bl	800befe <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	795b      	ldrb	r3, [r3, #5]
 800945c:	4619      	mov	r1, r3
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f002 fd7e 	bl	800bf60 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	2200      	movs	r2, #0
 8009468:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	791b      	ldrb	r3, [r3, #4]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d00e      	beq.n	8009490 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	791b      	ldrb	r3, [r3, #4]
 8009476:	4619      	mov	r1, r3
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f002 fd40 	bl	800befe <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	791b      	ldrb	r3, [r3, #4]
 8009482:	4619      	mov	r1, r3
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f002 fd6b 	bl	800bf60 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2200      	movs	r2, #0
 800948e:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009496:	69db      	ldr	r3, [r3, #28]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d00b      	beq.n	80094b4 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80094a2:	69db      	ldr	r3, [r3, #28]
 80094a4:	4618      	mov	r0, r3
 80094a6:	f003 f963 	bl	800c770 <free>
    phost->pActiveClass->pData = 0U;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80094b0:	2200      	movs	r2, #0
 80094b2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80094b4:	2300      	movs	r3, #0
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3710      	adds	r7, #16
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}

080094be <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80094be:	b580      	push	{r7, lr}
 80094c0:	b084      	sub	sp, #16
 80094c2:	af00      	add	r7, sp, #0
 80094c4:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80094cc:	69db      	ldr	r3, [r3, #28]
 80094ce:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 80094d0:	2301      	movs	r3, #1
 80094d2:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	7b9b      	ldrb	r3, [r3, #14]
 80094d8:	2b03      	cmp	r3, #3
 80094da:	d041      	beq.n	8009560 <USBH_MSC_ClassRequest+0xa2>
 80094dc:	2b03      	cmp	r3, #3
 80094de:	dc4b      	bgt.n	8009578 <USBH_MSC_ClassRequest+0xba>
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d001      	beq.n	80094e8 <USBH_MSC_ClassRequest+0x2a>
 80094e4:	2b02      	cmp	r3, #2
 80094e6:	d147      	bne.n	8009578 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	4619      	mov	r1, r3
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f000 fcf0 	bl	8009ed2 <USBH_MSC_BOT_REQ_GetMaxLUN>
 80094f2:	4603      	mov	r3, r0
 80094f4:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 80094f6:	7bfb      	ldrb	r3, [r7, #15]
 80094f8:	2b03      	cmp	r3, #3
 80094fa:	d104      	bne.n	8009506 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	2200      	movs	r2, #0
 8009500:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8009502:	2300      	movs	r3, #0
 8009504:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8009506:	7bfb      	ldrb	r3, [r7, #15]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d137      	bne.n	800957c <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	781b      	ldrb	r3, [r3, #0]
 8009510:	2b02      	cmp	r3, #2
 8009512:	d804      	bhi.n	800951e <USBH_MSC_ClassRequest+0x60>
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	781b      	ldrb	r3, [r3, #0]
 8009518:	3301      	adds	r3, #1
 800951a:	b2da      	uxtb	r2, r3
 800951c:	e000      	b.n	8009520 <USBH_MSC_ClassRequest+0x62>
 800951e:	2202      	movs	r2, #2
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8009524:	2300      	movs	r3, #0
 8009526:	73bb      	strb	r3, [r7, #14]
 8009528:	e014      	b.n	8009554 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800952a:	7bbb      	ldrb	r3, [r7, #14]
 800952c:	68ba      	ldr	r2, [r7, #8]
 800952e:	2134      	movs	r1, #52	; 0x34
 8009530:	fb01 f303 	mul.w	r3, r1, r3
 8009534:	4413      	add	r3, r2
 8009536:	3392      	adds	r3, #146	; 0x92
 8009538:	2202      	movs	r2, #2
 800953a:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800953c:	7bbb      	ldrb	r3, [r7, #14]
 800953e:	68ba      	ldr	r2, [r7, #8]
 8009540:	2134      	movs	r1, #52	; 0x34
 8009542:	fb01 f303 	mul.w	r3, r1, r3
 8009546:	4413      	add	r3, r2
 8009548:	33c1      	adds	r3, #193	; 0xc1
 800954a:	2200      	movs	r2, #0
 800954c:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800954e:	7bbb      	ldrb	r3, [r7, #14]
 8009550:	3301      	adds	r3, #1
 8009552:	73bb      	strb	r3, [r7, #14]
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	781b      	ldrb	r3, [r3, #0]
 8009558:	7bba      	ldrb	r2, [r7, #14]
 800955a:	429a      	cmp	r2, r3
 800955c:	d3e5      	bcc.n	800952a <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 800955e:	e00d      	b.n	800957c <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8009560:	2100      	movs	r1, #0
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f002 f87b 	bl	800b65e <USBH_ClrFeature>
 8009568:	4603      	mov	r3, r0
 800956a:	2b00      	cmp	r3, #0
 800956c:	d108      	bne.n	8009580 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	7bda      	ldrb	r2, [r3, #15]
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	739a      	strb	r2, [r3, #14]
      }
      break;
 8009576:	e003      	b.n	8009580 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 8009578:	bf00      	nop
 800957a:	e002      	b.n	8009582 <USBH_MSC_ClassRequest+0xc4>
      break;
 800957c:	bf00      	nop
 800957e:	e000      	b.n	8009582 <USBH_MSC_ClassRequest+0xc4>
      break;
 8009580:	bf00      	nop
  }

  return status;
 8009582:	7bfb      	ldrb	r3, [r7, #15]
}
 8009584:	4618      	mov	r0, r3
 8009586:	3710      	adds	r7, #16
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}

0800958c <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b086      	sub	sp, #24
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800959a:	69db      	ldr	r3, [r3, #28]
 800959c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800959e:	2301      	movs	r3, #1
 80095a0:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 80095a2:	2301      	movs	r3, #1
 80095a4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 80095a6:	2301      	movs	r3, #1
 80095a8:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	7b1b      	ldrb	r3, [r3, #12]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d003      	beq.n	80095ba <USBH_MSC_Process+0x2e>
 80095b2:	2b01      	cmp	r3, #1
 80095b4:	f000 8271 	beq.w	8009a9a <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 80095b8:	e272      	b.n	8009aa0 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 80095ba:	693b      	ldr	r3, [r7, #16]
 80095bc:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	781b      	ldrb	r3, [r3, #0]
 80095c4:	b29b      	uxth	r3, r3
 80095c6:	429a      	cmp	r2, r3
 80095c8:	f080 824f 	bcs.w	8009a6a <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80095d2:	4619      	mov	r1, r3
 80095d4:	693a      	ldr	r2, [r7, #16]
 80095d6:	2334      	movs	r3, #52	; 0x34
 80095d8:	fb01 f303 	mul.w	r3, r1, r3
 80095dc:	4413      	add	r3, r2
 80095de:	3391      	adds	r3, #145	; 0x91
 80095e0:	2201      	movs	r2, #1
 80095e2:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 80095e4:	693b      	ldr	r3, [r7, #16]
 80095e6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80095ea:	4619      	mov	r1, r3
 80095ec:	693a      	ldr	r2, [r7, #16]
 80095ee:	2334      	movs	r3, #52	; 0x34
 80095f0:	fb01 f303 	mul.w	r3, r1, r3
 80095f4:	4413      	add	r3, r2
 80095f6:	3390      	adds	r3, #144	; 0x90
 80095f8:	781b      	ldrb	r3, [r3, #0]
 80095fa:	2b08      	cmp	r3, #8
 80095fc:	f200 8243 	bhi.w	8009a86 <USBH_MSC_Process+0x4fa>
 8009600:	a201      	add	r2, pc, #4	; (adr r2, 8009608 <USBH_MSC_Process+0x7c>)
 8009602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009606:	bf00      	nop
 8009608:	0800962d 	.word	0x0800962d
 800960c:	08009a87 	.word	0x08009a87
 8009610:	080096f5 	.word	0x080096f5
 8009614:	08009879 	.word	0x08009879
 8009618:	08009653 	.word	0x08009653
 800961c:	08009945 	.word	0x08009945
 8009620:	08009a87 	.word	0x08009a87
 8009624:	08009a87 	.word	0x08009a87
 8009628:	08009a59 	.word	0x08009a59
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800962c:	693b      	ldr	r3, [r7, #16]
 800962e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009632:	4619      	mov	r1, r3
 8009634:	693a      	ldr	r2, [r7, #16]
 8009636:	2334      	movs	r3, #52	; 0x34
 8009638:	fb01 f303 	mul.w	r3, r1, r3
 800963c:	4413      	add	r3, r2
 800963e:	3390      	adds	r3, #144	; 0x90
 8009640:	2204      	movs	r2, #4
 8009642:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8009650:	e222      	b.n	8009a98 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009658:	b2d9      	uxtb	r1, r3
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009660:	461a      	mov	r2, r3
 8009662:	2334      	movs	r3, #52	; 0x34
 8009664:	fb02 f303 	mul.w	r3, r2, r3
 8009668:	3398      	adds	r3, #152	; 0x98
 800966a:	693a      	ldr	r2, [r7, #16]
 800966c:	4413      	add	r3, r2
 800966e:	3307      	adds	r3, #7
 8009670:	461a      	mov	r2, r3
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f000 ff6a 	bl	800a54c <USBH_MSC_SCSI_Inquiry>
 8009678:	4603      	mov	r3, r0
 800967a:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800967c:	7bfb      	ldrb	r3, [r7, #15]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d10b      	bne.n	800969a <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8009682:	693b      	ldr	r3, [r7, #16]
 8009684:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009688:	4619      	mov	r1, r3
 800968a:	693a      	ldr	r2, [r7, #16]
 800968c:	2334      	movs	r3, #52	; 0x34
 800968e:	fb01 f303 	mul.w	r3, r1, r3
 8009692:	4413      	add	r3, r2
 8009694:	3390      	adds	r3, #144	; 0x90
 8009696:	2202      	movs	r2, #2
 8009698:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800969a:	7bfb      	ldrb	r3, [r7, #15]
 800969c:	2b02      	cmp	r3, #2
 800969e:	d10c      	bne.n	80096ba <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80096a0:	693b      	ldr	r3, [r7, #16]
 80096a2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80096a6:	4619      	mov	r1, r3
 80096a8:	693a      	ldr	r2, [r7, #16]
 80096aa:	2334      	movs	r3, #52	; 0x34
 80096ac:	fb01 f303 	mul.w	r3, r1, r3
 80096b0:	4413      	add	r3, r2
 80096b2:	3390      	adds	r3, #144	; 0x90
 80096b4:	2205      	movs	r2, #5
 80096b6:	701a      	strb	r2, [r3, #0]
            break;
 80096b8:	e1e7      	b.n	8009a8a <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80096ba:	7bfb      	ldrb	r3, [r7, #15]
 80096bc:	2b04      	cmp	r3, #4
 80096be:	f040 81e4 	bne.w	8009a8a <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80096c8:	4619      	mov	r1, r3
 80096ca:	693a      	ldr	r2, [r7, #16]
 80096cc:	2334      	movs	r3, #52	; 0x34
 80096ce:	fb01 f303 	mul.w	r3, r1, r3
 80096d2:	4413      	add	r3, r2
 80096d4:	3390      	adds	r3, #144	; 0x90
 80096d6:	2201      	movs	r2, #1
 80096d8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80096da:	693b      	ldr	r3, [r7, #16]
 80096dc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80096e0:	4619      	mov	r1, r3
 80096e2:	693a      	ldr	r2, [r7, #16]
 80096e4:	2334      	movs	r3, #52	; 0x34
 80096e6:	fb01 f303 	mul.w	r3, r1, r3
 80096ea:	4413      	add	r3, r2
 80096ec:	3391      	adds	r3, #145	; 0x91
 80096ee:	2202      	movs	r2, #2
 80096f0:	701a      	strb	r2, [r3, #0]
            break;
 80096f2:	e1ca      	b.n	8009a8a <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80096fa:	b2db      	uxtb	r3, r3
 80096fc:	4619      	mov	r1, r3
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f000 fe66 	bl	800a3d0 <USBH_MSC_SCSI_TestUnitReady>
 8009704:	4603      	mov	r3, r0
 8009706:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8009708:	7bbb      	ldrb	r3, [r7, #14]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d149      	bne.n	80097a2 <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009714:	4619      	mov	r1, r3
 8009716:	693a      	ldr	r2, [r7, #16]
 8009718:	2334      	movs	r3, #52	; 0x34
 800971a:	fb01 f303 	mul.w	r3, r1, r3
 800971e:	4413      	add	r3, r2
 8009720:	3392      	adds	r3, #146	; 0x92
 8009722:	781b      	ldrb	r3, [r3, #0]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d00c      	beq.n	8009742 <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800972e:	4619      	mov	r1, r3
 8009730:	693a      	ldr	r2, [r7, #16]
 8009732:	2334      	movs	r3, #52	; 0x34
 8009734:	fb01 f303 	mul.w	r3, r1, r3
 8009738:	4413      	add	r3, r2
 800973a:	33c1      	adds	r3, #193	; 0xc1
 800973c:	2201      	movs	r2, #1
 800973e:	701a      	strb	r2, [r3, #0]
 8009740:	e00b      	b.n	800975a <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8009742:	693b      	ldr	r3, [r7, #16]
 8009744:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009748:	4619      	mov	r1, r3
 800974a:	693a      	ldr	r2, [r7, #16]
 800974c:	2334      	movs	r3, #52	; 0x34
 800974e:	fb01 f303 	mul.w	r3, r1, r3
 8009752:	4413      	add	r3, r2
 8009754:	33c1      	adds	r3, #193	; 0xc1
 8009756:	2200      	movs	r2, #0
 8009758:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009760:	4619      	mov	r1, r3
 8009762:	693a      	ldr	r2, [r7, #16]
 8009764:	2334      	movs	r3, #52	; 0x34
 8009766:	fb01 f303 	mul.w	r3, r1, r3
 800976a:	4413      	add	r3, r2
 800976c:	3390      	adds	r3, #144	; 0x90
 800976e:	2203      	movs	r2, #3
 8009770:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009778:	4619      	mov	r1, r3
 800977a:	693a      	ldr	r2, [r7, #16]
 800977c:	2334      	movs	r3, #52	; 0x34
 800977e:	fb01 f303 	mul.w	r3, r1, r3
 8009782:	4413      	add	r3, r2
 8009784:	3391      	adds	r3, #145	; 0x91
 8009786:	2200      	movs	r2, #0
 8009788:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800978a:	693b      	ldr	r3, [r7, #16]
 800978c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009790:	4619      	mov	r1, r3
 8009792:	693a      	ldr	r2, [r7, #16]
 8009794:	2334      	movs	r3, #52	; 0x34
 8009796:	fb01 f303 	mul.w	r3, r1, r3
 800979a:	4413      	add	r3, r2
 800979c:	3392      	adds	r3, #146	; 0x92
 800979e:	2200      	movs	r2, #0
 80097a0:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 80097a2:	7bbb      	ldrb	r3, [r7, #14]
 80097a4:	2b02      	cmp	r3, #2
 80097a6:	d14a      	bne.n	800983e <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80097ae:	4619      	mov	r1, r3
 80097b0:	693a      	ldr	r2, [r7, #16]
 80097b2:	2334      	movs	r3, #52	; 0x34
 80097b4:	fb01 f303 	mul.w	r3, r1, r3
 80097b8:	4413      	add	r3, r2
 80097ba:	3392      	adds	r3, #146	; 0x92
 80097bc:	781b      	ldrb	r3, [r3, #0]
 80097be:	2b02      	cmp	r3, #2
 80097c0:	d00c      	beq.n	80097dc <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80097c8:	4619      	mov	r1, r3
 80097ca:	693a      	ldr	r2, [r7, #16]
 80097cc:	2334      	movs	r3, #52	; 0x34
 80097ce:	fb01 f303 	mul.w	r3, r1, r3
 80097d2:	4413      	add	r3, r2
 80097d4:	33c1      	adds	r3, #193	; 0xc1
 80097d6:	2201      	movs	r2, #1
 80097d8:	701a      	strb	r2, [r3, #0]
 80097da:	e00b      	b.n	80097f4 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80097dc:	693b      	ldr	r3, [r7, #16]
 80097de:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80097e2:	4619      	mov	r1, r3
 80097e4:	693a      	ldr	r2, [r7, #16]
 80097e6:	2334      	movs	r3, #52	; 0x34
 80097e8:	fb01 f303 	mul.w	r3, r1, r3
 80097ec:	4413      	add	r3, r2
 80097ee:	33c1      	adds	r3, #193	; 0xc1
 80097f0:	2200      	movs	r2, #0
 80097f2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80097f4:	693b      	ldr	r3, [r7, #16]
 80097f6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80097fa:	4619      	mov	r1, r3
 80097fc:	693a      	ldr	r2, [r7, #16]
 80097fe:	2334      	movs	r3, #52	; 0x34
 8009800:	fb01 f303 	mul.w	r3, r1, r3
 8009804:	4413      	add	r3, r2
 8009806:	3390      	adds	r3, #144	; 0x90
 8009808:	2205      	movs	r2, #5
 800980a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800980c:	693b      	ldr	r3, [r7, #16]
 800980e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009812:	4619      	mov	r1, r3
 8009814:	693a      	ldr	r2, [r7, #16]
 8009816:	2334      	movs	r3, #52	; 0x34
 8009818:	fb01 f303 	mul.w	r3, r1, r3
 800981c:	4413      	add	r3, r2
 800981e:	3391      	adds	r3, #145	; 0x91
 8009820:	2201      	movs	r2, #1
 8009822:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8009824:	693b      	ldr	r3, [r7, #16]
 8009826:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800982a:	4619      	mov	r1, r3
 800982c:	693a      	ldr	r2, [r7, #16]
 800982e:	2334      	movs	r3, #52	; 0x34
 8009830:	fb01 f303 	mul.w	r3, r1, r3
 8009834:	4413      	add	r3, r2
 8009836:	3392      	adds	r3, #146	; 0x92
 8009838:	2202      	movs	r2, #2
 800983a:	701a      	strb	r2, [r3, #0]
            break;
 800983c:	e127      	b.n	8009a8e <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800983e:	7bbb      	ldrb	r3, [r7, #14]
 8009840:	2b04      	cmp	r3, #4
 8009842:	f040 8124 	bne.w	8009a8e <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800984c:	4619      	mov	r1, r3
 800984e:	693a      	ldr	r2, [r7, #16]
 8009850:	2334      	movs	r3, #52	; 0x34
 8009852:	fb01 f303 	mul.w	r3, r1, r3
 8009856:	4413      	add	r3, r2
 8009858:	3390      	adds	r3, #144	; 0x90
 800985a:	2201      	movs	r2, #1
 800985c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009864:	4619      	mov	r1, r3
 8009866:	693a      	ldr	r2, [r7, #16]
 8009868:	2334      	movs	r3, #52	; 0x34
 800986a:	fb01 f303 	mul.w	r3, r1, r3
 800986e:	4413      	add	r3, r2
 8009870:	3391      	adds	r3, #145	; 0x91
 8009872:	2202      	movs	r2, #2
 8009874:	701a      	strb	r2, [r3, #0]
            break;
 8009876:	e10a      	b.n	8009a8e <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800987e:	b2d9      	uxtb	r1, r3
 8009880:	693b      	ldr	r3, [r7, #16]
 8009882:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009886:	461a      	mov	r2, r3
 8009888:	2334      	movs	r3, #52	; 0x34
 800988a:	fb02 f303 	mul.w	r3, r2, r3
 800988e:	3390      	adds	r3, #144	; 0x90
 8009890:	693a      	ldr	r2, [r7, #16]
 8009892:	4413      	add	r3, r2
 8009894:	3304      	adds	r3, #4
 8009896:	461a      	mov	r2, r3
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f000 fddc 	bl	800a456 <USBH_MSC_SCSI_ReadCapacity>
 800989e:	4603      	mov	r3, r0
 80098a0:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80098a2:	7bfb      	ldrb	r3, [r7, #15]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d120      	bne.n	80098ea <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80098ae:	4619      	mov	r1, r3
 80098b0:	693a      	ldr	r2, [r7, #16]
 80098b2:	2334      	movs	r3, #52	; 0x34
 80098b4:	fb01 f303 	mul.w	r3, r1, r3
 80098b8:	4413      	add	r3, r2
 80098ba:	3390      	adds	r3, #144	; 0x90
 80098bc:	2201      	movs	r2, #1
 80098be:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80098c6:	4619      	mov	r1, r3
 80098c8:	693a      	ldr	r2, [r7, #16]
 80098ca:	2334      	movs	r3, #52	; 0x34
 80098cc:	fb01 f303 	mul.w	r3, r1, r3
 80098d0:	4413      	add	r3, r2
 80098d2:	3391      	adds	r3, #145	; 0x91
 80098d4:	2200      	movs	r2, #0
 80098d6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80098d8:	693b      	ldr	r3, [r7, #16]
 80098da:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80098de:	3301      	adds	r3, #1
 80098e0:	b29a      	uxth	r2, r3
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 80098e8:	e0d3      	b.n	8009a92 <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 80098ea:	7bfb      	ldrb	r3, [r7, #15]
 80098ec:	2b02      	cmp	r3, #2
 80098ee:	d10c      	bne.n	800990a <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80098f6:	4619      	mov	r1, r3
 80098f8:	693a      	ldr	r2, [r7, #16]
 80098fa:	2334      	movs	r3, #52	; 0x34
 80098fc:	fb01 f303 	mul.w	r3, r1, r3
 8009900:	4413      	add	r3, r2
 8009902:	3390      	adds	r3, #144	; 0x90
 8009904:	2205      	movs	r2, #5
 8009906:	701a      	strb	r2, [r3, #0]
            break;
 8009908:	e0c3      	b.n	8009a92 <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800990a:	7bfb      	ldrb	r3, [r7, #15]
 800990c:	2b04      	cmp	r3, #4
 800990e:	f040 80c0 	bne.w	8009a92 <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009918:	4619      	mov	r1, r3
 800991a:	693a      	ldr	r2, [r7, #16]
 800991c:	2334      	movs	r3, #52	; 0x34
 800991e:	fb01 f303 	mul.w	r3, r1, r3
 8009922:	4413      	add	r3, r2
 8009924:	3390      	adds	r3, #144	; 0x90
 8009926:	2201      	movs	r2, #1
 8009928:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009930:	4619      	mov	r1, r3
 8009932:	693a      	ldr	r2, [r7, #16]
 8009934:	2334      	movs	r3, #52	; 0x34
 8009936:	fb01 f303 	mul.w	r3, r1, r3
 800993a:	4413      	add	r3, r2
 800993c:	3391      	adds	r3, #145	; 0x91
 800993e:	2202      	movs	r2, #2
 8009940:	701a      	strb	r2, [r3, #0]
            break;
 8009942:	e0a6      	b.n	8009a92 <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800994a:	b2d9      	uxtb	r1, r3
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009952:	461a      	mov	r2, r3
 8009954:	2334      	movs	r3, #52	; 0x34
 8009956:	fb02 f303 	mul.w	r3, r2, r3
 800995a:	3398      	adds	r3, #152	; 0x98
 800995c:	693a      	ldr	r2, [r7, #16]
 800995e:	4413      	add	r3, r2
 8009960:	3304      	adds	r3, #4
 8009962:	461a      	mov	r2, r3
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f000 fe96 	bl	800a696 <USBH_MSC_SCSI_RequestSense>
 800996a:	4603      	mov	r3, r0
 800996c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800996e:	7bfb      	ldrb	r3, [r7, #15]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d145      	bne.n	8009a00 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8009974:	693b      	ldr	r3, [r7, #16]
 8009976:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800997a:	4619      	mov	r1, r3
 800997c:	693a      	ldr	r2, [r7, #16]
 800997e:	2334      	movs	r3, #52	; 0x34
 8009980:	fb01 f303 	mul.w	r3, r1, r3
 8009984:	4413      	add	r3, r2
 8009986:	339c      	adds	r3, #156	; 0x9c
 8009988:	781b      	ldrb	r3, [r3, #0]
 800998a:	2b06      	cmp	r3, #6
 800998c:	d00c      	beq.n	80099a8 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800998e:	693b      	ldr	r3, [r7, #16]
 8009990:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009994:	4619      	mov	r1, r3
 8009996:	693a      	ldr	r2, [r7, #16]
 8009998:	2334      	movs	r3, #52	; 0x34
 800999a:	fb01 f303 	mul.w	r3, r1, r3
 800999e:	4413      	add	r3, r2
 80099a0:	339c      	adds	r3, #156	; 0x9c
 80099a2:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80099a4:	2b02      	cmp	r3, #2
 80099a6:	d117      	bne.n	80099d8 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80099ae:	693b      	ldr	r3, [r7, #16]
 80099b0:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80099b4:	1ad3      	subs	r3, r2, r3
 80099b6:	f242 720f 	movw	r2, #9999	; 0x270f
 80099ba:	4293      	cmp	r3, r2
 80099bc:	d80c      	bhi.n	80099d8 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80099be:	693b      	ldr	r3, [r7, #16]
 80099c0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80099c4:	4619      	mov	r1, r3
 80099c6:	693a      	ldr	r2, [r7, #16]
 80099c8:	2334      	movs	r3, #52	; 0x34
 80099ca:	fb01 f303 	mul.w	r3, r1, r3
 80099ce:	4413      	add	r3, r2
 80099d0:	3390      	adds	r3, #144	; 0x90
 80099d2:	2202      	movs	r2, #2
 80099d4:	701a      	strb	r2, [r3, #0]
                  break;
 80099d6:	e05f      	b.n	8009a98 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80099de:	4619      	mov	r1, r3
 80099e0:	693a      	ldr	r2, [r7, #16]
 80099e2:	2334      	movs	r3, #52	; 0x34
 80099e4:	fb01 f303 	mul.w	r3, r1, r3
 80099e8:	4413      	add	r3, r2
 80099ea:	3390      	adds	r3, #144	; 0x90
 80099ec:	2201      	movs	r2, #1
 80099ee:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80099f6:	3301      	adds	r3, #1
 80099f8:	b29a      	uxth	r2, r3
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8009a00:	7bfb      	ldrb	r3, [r7, #15]
 8009a02:	2b02      	cmp	r3, #2
 8009a04:	d10c      	bne.n	8009a20 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8009a06:	693b      	ldr	r3, [r7, #16]
 8009a08:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009a0c:	4619      	mov	r1, r3
 8009a0e:	693a      	ldr	r2, [r7, #16]
 8009a10:	2334      	movs	r3, #52	; 0x34
 8009a12:	fb01 f303 	mul.w	r3, r1, r3
 8009a16:	4413      	add	r3, r2
 8009a18:	3390      	adds	r3, #144	; 0x90
 8009a1a:	2208      	movs	r2, #8
 8009a1c:	701a      	strb	r2, [r3, #0]
            break;
 8009a1e:	e03a      	b.n	8009a96 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009a20:	7bfb      	ldrb	r3, [r7, #15]
 8009a22:	2b04      	cmp	r3, #4
 8009a24:	d137      	bne.n	8009a96 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009a2c:	4619      	mov	r1, r3
 8009a2e:	693a      	ldr	r2, [r7, #16]
 8009a30:	2334      	movs	r3, #52	; 0x34
 8009a32:	fb01 f303 	mul.w	r3, r1, r3
 8009a36:	4413      	add	r3, r2
 8009a38:	3390      	adds	r3, #144	; 0x90
 8009a3a:	2201      	movs	r2, #1
 8009a3c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009a44:	4619      	mov	r1, r3
 8009a46:	693a      	ldr	r2, [r7, #16]
 8009a48:	2334      	movs	r3, #52	; 0x34
 8009a4a:	fb01 f303 	mul.w	r3, r1, r3
 8009a4e:	4413      	add	r3, r2
 8009a50:	3391      	adds	r3, #145	; 0x91
 8009a52:	2202      	movs	r2, #2
 8009a54:	701a      	strb	r2, [r3, #0]
            break;
 8009a56:	e01e      	b.n	8009a96 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009a5e:	3301      	adds	r3, #1
 8009a60:	b29a      	uxth	r2, r3
 8009a62:	693b      	ldr	r3, [r7, #16]
 8009a64:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8009a68:	e016      	b.n	8009a98 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	2201      	movs	r2, #1
 8009a76:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009a7e:	2102      	movs	r1, #2
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	4798      	blx	r3
      break;
 8009a84:	e00c      	b.n	8009aa0 <USBH_MSC_Process+0x514>
            break;
 8009a86:	bf00      	nop
 8009a88:	e00a      	b.n	8009aa0 <USBH_MSC_Process+0x514>
            break;
 8009a8a:	bf00      	nop
 8009a8c:	e008      	b.n	8009aa0 <USBH_MSC_Process+0x514>
            break;
 8009a8e:	bf00      	nop
 8009a90:	e006      	b.n	8009aa0 <USBH_MSC_Process+0x514>
            break;
 8009a92:	bf00      	nop
 8009a94:	e004      	b.n	8009aa0 <USBH_MSC_Process+0x514>
            break;
 8009a96:	bf00      	nop
      break;
 8009a98:	e002      	b.n	8009aa0 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	75fb      	strb	r3, [r7, #23]
      break;
 8009a9e:	bf00      	nop
  }
  return error;
 8009aa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3718      	adds	r7, #24
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}
 8009aaa:	bf00      	nop

08009aac <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009aac:	b480      	push	{r7}
 8009aae:	b083      	sub	sp, #12
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009ab4:	2300      	movs	r3, #0
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	370c      	adds	r7, #12
 8009aba:	46bd      	mov	sp, r7
 8009abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac0:	4770      	bx	lr

08009ac2 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009ac2:	b580      	push	{r7, lr}
 8009ac4:	b088      	sub	sp, #32
 8009ac6:	af02      	add	r7, sp, #8
 8009ac8:	6078      	str	r0, [r7, #4]
 8009aca:	460b      	mov	r3, r1
 8009acc:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ad4:	69db      	ldr	r3, [r3, #28]
 8009ad6:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8009ad8:	2301      	movs	r3, #1
 8009ada:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8009adc:	2301      	movs	r3, #1
 8009ade:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8009ae0:	78fb      	ldrb	r3, [r7, #3]
 8009ae2:	693a      	ldr	r2, [r7, #16]
 8009ae4:	2134      	movs	r1, #52	; 0x34
 8009ae6:	fb01 f303 	mul.w	r3, r1, r3
 8009aea:	4413      	add	r3, r2
 8009aec:	3390      	adds	r3, #144	; 0x90
 8009aee:	781b      	ldrb	r3, [r3, #0]
 8009af0:	2b07      	cmp	r3, #7
 8009af2:	d03c      	beq.n	8009b6e <USBH_MSC_RdWrProcess+0xac>
 8009af4:	2b07      	cmp	r3, #7
 8009af6:	f300 80a7 	bgt.w	8009c48 <USBH_MSC_RdWrProcess+0x186>
 8009afa:	2b05      	cmp	r3, #5
 8009afc:	d06c      	beq.n	8009bd8 <USBH_MSC_RdWrProcess+0x116>
 8009afe:	2b06      	cmp	r3, #6
 8009b00:	f040 80a2 	bne.w	8009c48 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8009b04:	78f9      	ldrb	r1, [r7, #3]
 8009b06:	2300      	movs	r3, #0
 8009b08:	9300      	str	r3, [sp, #0]
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f000 fea5 	bl	800a85e <USBH_MSC_SCSI_Read>
 8009b14:	4603      	mov	r3, r0
 8009b16:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8009b18:	7bfb      	ldrb	r3, [r7, #15]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d10b      	bne.n	8009b36 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009b1e:	78fb      	ldrb	r3, [r7, #3]
 8009b20:	693a      	ldr	r2, [r7, #16]
 8009b22:	2134      	movs	r1, #52	; 0x34
 8009b24:	fb01 f303 	mul.w	r3, r1, r3
 8009b28:	4413      	add	r3, r2
 8009b2a:	3390      	adds	r3, #144	; 0x90
 8009b2c:	2201      	movs	r2, #1
 8009b2e:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8009b30:	2300      	movs	r3, #0
 8009b32:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009b34:	e08a      	b.n	8009c4c <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 8009b36:	7bfb      	ldrb	r3, [r7, #15]
 8009b38:	2b02      	cmp	r3, #2
 8009b3a:	d109      	bne.n	8009b50 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8009b3c:	78fb      	ldrb	r3, [r7, #3]
 8009b3e:	693a      	ldr	r2, [r7, #16]
 8009b40:	2134      	movs	r1, #52	; 0x34
 8009b42:	fb01 f303 	mul.w	r3, r1, r3
 8009b46:	4413      	add	r3, r2
 8009b48:	3390      	adds	r3, #144	; 0x90
 8009b4a:	2205      	movs	r2, #5
 8009b4c:	701a      	strb	r2, [r3, #0]
      break;
 8009b4e:	e07d      	b.n	8009c4c <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009b50:	7bfb      	ldrb	r3, [r7, #15]
 8009b52:	2b04      	cmp	r3, #4
 8009b54:	d17a      	bne.n	8009c4c <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009b56:	78fb      	ldrb	r3, [r7, #3]
 8009b58:	693a      	ldr	r2, [r7, #16]
 8009b5a:	2134      	movs	r1, #52	; 0x34
 8009b5c:	fb01 f303 	mul.w	r3, r1, r3
 8009b60:	4413      	add	r3, r2
 8009b62:	3390      	adds	r3, #144	; 0x90
 8009b64:	2208      	movs	r2, #8
 8009b66:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8009b68:	2302      	movs	r3, #2
 8009b6a:	75fb      	strb	r3, [r7, #23]
      break;
 8009b6c:	e06e      	b.n	8009c4c <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8009b6e:	78f9      	ldrb	r1, [r7, #3]
 8009b70:	2300      	movs	r3, #0
 8009b72:	9300      	str	r3, [sp, #0]
 8009b74:	2300      	movs	r3, #0
 8009b76:	2200      	movs	r2, #0
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f000 fe05 	bl	800a788 <USBH_MSC_SCSI_Write>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8009b82:	7bfb      	ldrb	r3, [r7, #15]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d10b      	bne.n	8009ba0 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009b88:	78fb      	ldrb	r3, [r7, #3]
 8009b8a:	693a      	ldr	r2, [r7, #16]
 8009b8c:	2134      	movs	r1, #52	; 0x34
 8009b8e:	fb01 f303 	mul.w	r3, r1, r3
 8009b92:	4413      	add	r3, r2
 8009b94:	3390      	adds	r3, #144	; 0x90
 8009b96:	2201      	movs	r2, #1
 8009b98:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009b9e:	e057      	b.n	8009c50 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 8009ba0:	7bfb      	ldrb	r3, [r7, #15]
 8009ba2:	2b02      	cmp	r3, #2
 8009ba4:	d109      	bne.n	8009bba <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8009ba6:	78fb      	ldrb	r3, [r7, #3]
 8009ba8:	693a      	ldr	r2, [r7, #16]
 8009baa:	2134      	movs	r1, #52	; 0x34
 8009bac:	fb01 f303 	mul.w	r3, r1, r3
 8009bb0:	4413      	add	r3, r2
 8009bb2:	3390      	adds	r3, #144	; 0x90
 8009bb4:	2205      	movs	r2, #5
 8009bb6:	701a      	strb	r2, [r3, #0]
      break;
 8009bb8:	e04a      	b.n	8009c50 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009bba:	7bfb      	ldrb	r3, [r7, #15]
 8009bbc:	2b04      	cmp	r3, #4
 8009bbe:	d147      	bne.n	8009c50 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009bc0:	78fb      	ldrb	r3, [r7, #3]
 8009bc2:	693a      	ldr	r2, [r7, #16]
 8009bc4:	2134      	movs	r1, #52	; 0x34
 8009bc6:	fb01 f303 	mul.w	r3, r1, r3
 8009bca:	4413      	add	r3, r2
 8009bcc:	3390      	adds	r3, #144	; 0x90
 8009bce:	2208      	movs	r2, #8
 8009bd0:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8009bd2:	2302      	movs	r3, #2
 8009bd4:	75fb      	strb	r3, [r7, #23]
      break;
 8009bd6:	e03b      	b.n	8009c50 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8009bd8:	78fb      	ldrb	r3, [r7, #3]
 8009bda:	2234      	movs	r2, #52	; 0x34
 8009bdc:	fb02 f303 	mul.w	r3, r2, r3
 8009be0:	3398      	adds	r3, #152	; 0x98
 8009be2:	693a      	ldr	r2, [r7, #16]
 8009be4:	4413      	add	r3, r2
 8009be6:	1d1a      	adds	r2, r3, #4
 8009be8:	78fb      	ldrb	r3, [r7, #3]
 8009bea:	4619      	mov	r1, r3
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f000 fd52 	bl	800a696 <USBH_MSC_SCSI_RequestSense>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8009bf6:	7bfb      	ldrb	r3, [r7, #15]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d113      	bne.n	8009c24 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009bfc:	78fb      	ldrb	r3, [r7, #3]
 8009bfe:	693a      	ldr	r2, [r7, #16]
 8009c00:	2134      	movs	r1, #52	; 0x34
 8009c02:	fb01 f303 	mul.w	r3, r1, r3
 8009c06:	4413      	add	r3, r2
 8009c08:	3390      	adds	r3, #144	; 0x90
 8009c0a:	2201      	movs	r2, #1
 8009c0c:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8009c0e:	78fb      	ldrb	r3, [r7, #3]
 8009c10:	693a      	ldr	r2, [r7, #16]
 8009c12:	2134      	movs	r1, #52	; 0x34
 8009c14:	fb01 f303 	mul.w	r3, r1, r3
 8009c18:	4413      	add	r3, r2
 8009c1a:	3391      	adds	r3, #145	; 0x91
 8009c1c:	2202      	movs	r2, #2
 8009c1e:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 8009c20:	2302      	movs	r3, #2
 8009c22:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 8009c24:	7bfb      	ldrb	r3, [r7, #15]
 8009c26:	2b02      	cmp	r3, #2
 8009c28:	d014      	beq.n	8009c54 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009c2a:	7bfb      	ldrb	r3, [r7, #15]
 8009c2c:	2b04      	cmp	r3, #4
 8009c2e:	d111      	bne.n	8009c54 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009c30:	78fb      	ldrb	r3, [r7, #3]
 8009c32:	693a      	ldr	r2, [r7, #16]
 8009c34:	2134      	movs	r1, #52	; 0x34
 8009c36:	fb01 f303 	mul.w	r3, r1, r3
 8009c3a:	4413      	add	r3, r2
 8009c3c:	3390      	adds	r3, #144	; 0x90
 8009c3e:	2208      	movs	r2, #8
 8009c40:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8009c42:	2302      	movs	r3, #2
 8009c44:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009c46:	e005      	b.n	8009c54 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 8009c48:	bf00      	nop
 8009c4a:	e004      	b.n	8009c56 <USBH_MSC_RdWrProcess+0x194>
      break;
 8009c4c:	bf00      	nop
 8009c4e:	e002      	b.n	8009c56 <USBH_MSC_RdWrProcess+0x194>
      break;
 8009c50:	bf00      	nop
 8009c52:	e000      	b.n	8009c56 <USBH_MSC_RdWrProcess+0x194>
      break;
 8009c54:	bf00      	nop

  }
  return error;
 8009c56:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	3718      	adds	r7, #24
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}

08009c60 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009c60:	b480      	push	{r7}
 8009c62:	b085      	sub	sp, #20
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
 8009c68:	460b      	mov	r3, r1
 8009c6a:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c72:	69db      	ldr	r3, [r3, #28]
 8009c74:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	781b      	ldrb	r3, [r3, #0]
 8009c7a:	b2db      	uxtb	r3, r3
 8009c7c:	2b0b      	cmp	r3, #11
 8009c7e:	d10c      	bne.n	8009c9a <USBH_MSC_UnitIsReady+0x3a>
 8009c80:	78fb      	ldrb	r3, [r7, #3]
 8009c82:	68ba      	ldr	r2, [r7, #8]
 8009c84:	2134      	movs	r1, #52	; 0x34
 8009c86:	fb01 f303 	mul.w	r3, r1, r3
 8009c8a:	4413      	add	r3, r2
 8009c8c:	3391      	adds	r3, #145	; 0x91
 8009c8e:	781b      	ldrb	r3, [r3, #0]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d102      	bne.n	8009c9a <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8009c94:	2301      	movs	r3, #1
 8009c96:	73fb      	strb	r3, [r7, #15]
 8009c98:	e001      	b.n	8009c9e <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8009c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3714      	adds	r7, #20
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009caa:	4770      	bx	lr

08009cac <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b086      	sub	sp, #24
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	60f8      	str	r0, [r7, #12]
 8009cb4:	460b      	mov	r3, r1
 8009cb6:	607a      	str	r2, [r7, #4]
 8009cb8:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009cc0:	69db      	ldr	r3, [r3, #28]
 8009cc2:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	781b      	ldrb	r3, [r3, #0]
 8009cc8:	b2db      	uxtb	r3, r3
 8009cca:	2b0b      	cmp	r3, #11
 8009ccc:	d10d      	bne.n	8009cea <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8009cce:	7afb      	ldrb	r3, [r7, #11]
 8009cd0:	2234      	movs	r2, #52	; 0x34
 8009cd2:	fb02 f303 	mul.w	r3, r2, r3
 8009cd6:	3390      	adds	r3, #144	; 0x90
 8009cd8:	697a      	ldr	r2, [r7, #20]
 8009cda:	4413      	add	r3, r2
 8009cdc:	2234      	movs	r2, #52	; 0x34
 8009cde:	4619      	mov	r1, r3
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f002 fd4d 	bl	800c780 <memcpy>
    return USBH_OK;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	e000      	b.n	8009cec <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8009cea:	2302      	movs	r3, #2
  }
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	3718      	adds	r7, #24
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bd80      	pop	{r7, pc}

08009cf4 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b088      	sub	sp, #32
 8009cf8:	af02      	add	r7, sp, #8
 8009cfa:	60f8      	str	r0, [r7, #12]
 8009cfc:	607a      	str	r2, [r7, #4]
 8009cfe:	603b      	str	r3, [r7, #0]
 8009d00:	460b      	mov	r3, r1
 8009d02:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d0a:	69db      	ldr	r3, [r3, #28]
 8009d0c:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009d14:	b2db      	uxtb	r3, r3
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d00e      	beq.n	8009d38 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	781b      	ldrb	r3, [r3, #0]
 8009d1e:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8009d20:	2b0b      	cmp	r3, #11
 8009d22:	d109      	bne.n	8009d38 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8009d24:	7afb      	ldrb	r3, [r7, #11]
 8009d26:	697a      	ldr	r2, [r7, #20]
 8009d28:	2134      	movs	r1, #52	; 0x34
 8009d2a:	fb01 f303 	mul.w	r3, r1, r3
 8009d2e:	4413      	add	r3, r2
 8009d30:	3390      	adds	r3, #144	; 0x90
 8009d32:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8009d34:	2b01      	cmp	r3, #1
 8009d36:	d001      	beq.n	8009d3c <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8009d38:	2302      	movs	r3, #2
 8009d3a:	e040      	b.n	8009dbe <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	2206      	movs	r2, #6
 8009d40:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8009d42:	7afb      	ldrb	r3, [r7, #11]
 8009d44:	697a      	ldr	r2, [r7, #20]
 8009d46:	2134      	movs	r1, #52	; 0x34
 8009d48:	fb01 f303 	mul.w	r3, r1, r3
 8009d4c:	4413      	add	r3, r2
 8009d4e:	3390      	adds	r3, #144	; 0x90
 8009d50:	2206      	movs	r2, #6
 8009d52:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8009d54:	7afb      	ldrb	r3, [r7, #11]
 8009d56:	b29a      	uxth	r2, r3
 8009d58:	697b      	ldr	r3, [r7, #20]
 8009d5a:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8009d5e:	7af9      	ldrb	r1, [r7, #11]
 8009d60:	6a3b      	ldr	r3, [r7, #32]
 8009d62:	9300      	str	r3, [sp, #0]
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	687a      	ldr	r2, [r7, #4]
 8009d68:	68f8      	ldr	r0, [r7, #12]
 8009d6a:	f000 fd78 	bl	800a85e <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009d74:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009d76:	e016      	b.n	8009da6 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009d7e:	693b      	ldr	r3, [r7, #16]
 8009d80:	1ad2      	subs	r2, r2, r3
 8009d82:	6a3b      	ldr	r3, [r7, #32]
 8009d84:	f242 7110 	movw	r1, #10000	; 0x2710
 8009d88:	fb01 f303 	mul.w	r3, r1, r3
 8009d8c:	429a      	cmp	r2, r3
 8009d8e:	d805      	bhi.n	8009d9c <USBH_MSC_Read+0xa8>
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009d96:	b2db      	uxtb	r3, r3
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d104      	bne.n	8009da6 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8009d9c:	697b      	ldr	r3, [r7, #20]
 8009d9e:	2201      	movs	r2, #1
 8009da0:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8009da2:	2302      	movs	r3, #2
 8009da4:	e00b      	b.n	8009dbe <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009da6:	7afb      	ldrb	r3, [r7, #11]
 8009da8:	4619      	mov	r1, r3
 8009daa:	68f8      	ldr	r0, [r7, #12]
 8009dac:	f7ff fe89 	bl	8009ac2 <USBH_MSC_RdWrProcess>
 8009db0:	4603      	mov	r3, r0
 8009db2:	2b01      	cmp	r3, #1
 8009db4:	d0e0      	beq.n	8009d78 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8009db6:	697b      	ldr	r3, [r7, #20]
 8009db8:	2201      	movs	r2, #1
 8009dba:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8009dbc:	2300      	movs	r3, #0
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3718      	adds	r7, #24
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}

08009dc6 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8009dc6:	b580      	push	{r7, lr}
 8009dc8:	b088      	sub	sp, #32
 8009dca:	af02      	add	r7, sp, #8
 8009dcc:	60f8      	str	r0, [r7, #12]
 8009dce:	607a      	str	r2, [r7, #4]
 8009dd0:	603b      	str	r3, [r7, #0]
 8009dd2:	460b      	mov	r3, r1
 8009dd4:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ddc:	69db      	ldr	r3, [r3, #28]
 8009dde:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009de6:	b2db      	uxtb	r3, r3
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d00e      	beq.n	8009e0a <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	781b      	ldrb	r3, [r3, #0]
 8009df0:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8009df2:	2b0b      	cmp	r3, #11
 8009df4:	d109      	bne.n	8009e0a <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8009df6:	7afb      	ldrb	r3, [r7, #11]
 8009df8:	697a      	ldr	r2, [r7, #20]
 8009dfa:	2134      	movs	r1, #52	; 0x34
 8009dfc:	fb01 f303 	mul.w	r3, r1, r3
 8009e00:	4413      	add	r3, r2
 8009e02:	3390      	adds	r3, #144	; 0x90
 8009e04:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8009e06:	2b01      	cmp	r3, #1
 8009e08:	d001      	beq.n	8009e0e <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8009e0a:	2302      	movs	r3, #2
 8009e0c:	e040      	b.n	8009e90 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	2207      	movs	r2, #7
 8009e12:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8009e14:	7afb      	ldrb	r3, [r7, #11]
 8009e16:	697a      	ldr	r2, [r7, #20]
 8009e18:	2134      	movs	r1, #52	; 0x34
 8009e1a:	fb01 f303 	mul.w	r3, r1, r3
 8009e1e:	4413      	add	r3, r2
 8009e20:	3390      	adds	r3, #144	; 0x90
 8009e22:	2207      	movs	r2, #7
 8009e24:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8009e26:	7afb      	ldrb	r3, [r7, #11]
 8009e28:	b29a      	uxth	r2, r3
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8009e30:	7af9      	ldrb	r1, [r7, #11]
 8009e32:	6a3b      	ldr	r3, [r7, #32]
 8009e34:	9300      	str	r3, [sp, #0]
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	687a      	ldr	r2, [r7, #4]
 8009e3a:	68f8      	ldr	r0, [r7, #12]
 8009e3c:	f000 fca4 	bl	800a788 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009e46:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009e48:	e016      	b.n	8009e78 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	1ad2      	subs	r2, r2, r3
 8009e54:	6a3b      	ldr	r3, [r7, #32]
 8009e56:	f242 7110 	movw	r1, #10000	; 0x2710
 8009e5a:	fb01 f303 	mul.w	r3, r1, r3
 8009e5e:	429a      	cmp	r2, r3
 8009e60:	d805      	bhi.n	8009e6e <USBH_MSC_Write+0xa8>
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009e68:	b2db      	uxtb	r3, r3
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d104      	bne.n	8009e78 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8009e6e:	697b      	ldr	r3, [r7, #20]
 8009e70:	2201      	movs	r2, #1
 8009e72:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8009e74:	2302      	movs	r3, #2
 8009e76:	e00b      	b.n	8009e90 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009e78:	7afb      	ldrb	r3, [r7, #11]
 8009e7a:	4619      	mov	r1, r3
 8009e7c:	68f8      	ldr	r0, [r7, #12]
 8009e7e:	f7ff fe20 	bl	8009ac2 <USBH_MSC_RdWrProcess>
 8009e82:	4603      	mov	r3, r0
 8009e84:	2b01      	cmp	r3, #1
 8009e86:	d0e0      	beq.n	8009e4a <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8009e88:	697b      	ldr	r3, [r7, #20]
 8009e8a:	2201      	movs	r2, #1
 8009e8c:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8009e8e:	2300      	movs	r3, #0
}
 8009e90:	4618      	mov	r0, r3
 8009e92:	3718      	adds	r7, #24
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bd80      	pop	{r7, pc}

08009e98 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b082      	sub	sp, #8
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2221      	movs	r2, #33	; 0x21
 8009ea4:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	22ff      	movs	r2, #255	; 0xff
 8009eaa:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	2100      	movs	r1, #0
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f001 fdab 	bl	800ba1e <USBH_CtlReq>
 8009ec8:	4603      	mov	r3, r0
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3708      	adds	r7, #8
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}

08009ed2 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8009ed2:	b580      	push	{r7, lr}
 8009ed4:	b082      	sub	sp, #8
 8009ed6:	af00      	add	r7, sp, #0
 8009ed8:	6078      	str	r0, [r7, #4]
 8009eda:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	22a1      	movs	r2, #161	; 0xa1
 8009ee0:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	22fe      	movs	r2, #254	; 0xfe
 8009ee6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2200      	movs	r2, #0
 8009eec:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2201      	movs	r2, #1
 8009ef8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8009efa:	2201      	movs	r2, #1
 8009efc:	6839      	ldr	r1, [r7, #0]
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f001 fd8d 	bl	800ba1e <USBH_CtlReq>
 8009f04:	4603      	mov	r3, r0
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	3708      	adds	r7, #8
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}
	...

08009f10 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8009f10:	b480      	push	{r7}
 8009f12:	b085      	sub	sp, #20
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009f1e:	69db      	ldr	r3, [r3, #28]
 8009f20:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	4a09      	ldr	r2, [pc, #36]	; (8009f4c <USBH_MSC_BOT_Init+0x3c>)
 8009f26:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	4a09      	ldr	r2, [pc, #36]	; (8009f50 <USBH_MSC_BOT_Init+0x40>)
 8009f2c:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	2201      	movs	r2, #1
 8009f32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	2201      	movs	r2, #1
 8009f3a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8009f3e:	2300      	movs	r3, #0
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	3714      	adds	r7, #20
 8009f44:	46bd      	mov	sp, r7
 8009f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4a:	4770      	bx	lr
 8009f4c:	43425355 	.word	0x43425355
 8009f50:	20304050 	.word	0x20304050

08009f54 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b088      	sub	sp, #32
 8009f58:	af02      	add	r7, sp, #8
 8009f5a:	6078      	str	r0, [r7, #4]
 8009f5c:	460b      	mov	r3, r1
 8009f5e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8009f60:	2301      	movs	r3, #1
 8009f62:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8009f64:	2301      	movs	r3, #1
 8009f66:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8009f68:	2301      	movs	r3, #1
 8009f6a:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009f76:	69db      	ldr	r3, [r3, #28]
 8009f78:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8009f7e:	693b      	ldr	r3, [r7, #16]
 8009f80:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009f84:	3b01      	subs	r3, #1
 8009f86:	2b0a      	cmp	r3, #10
 8009f88:	f200 819e 	bhi.w	800a2c8 <USBH_MSC_BOT_Process+0x374>
 8009f8c:	a201      	add	r2, pc, #4	; (adr r2, 8009f94 <USBH_MSC_BOT_Process+0x40>)
 8009f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f92:	bf00      	nop
 8009f94:	08009fc1 	.word	0x08009fc1
 8009f98:	08009fe9 	.word	0x08009fe9
 8009f9c:	0800a053 	.word	0x0800a053
 8009fa0:	0800a071 	.word	0x0800a071
 8009fa4:	0800a0f5 	.word	0x0800a0f5
 8009fa8:	0800a117 	.word	0x0800a117
 8009fac:	0800a1af 	.word	0x0800a1af
 8009fb0:	0800a1cb 	.word	0x0800a1cb
 8009fb4:	0800a21d 	.word	0x0800a21d
 8009fb8:	0800a24d 	.word	0x0800a24d
 8009fbc:	0800a2af 	.word	0x0800a2af
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8009fc0:	693b      	ldr	r3, [r7, #16]
 8009fc2:	78fa      	ldrb	r2, [r7, #3]
 8009fc4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	2202      	movs	r2, #2
 8009fcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8009fd0:	693b      	ldr	r3, [r7, #16]
 8009fd2:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8009fd6:	693b      	ldr	r3, [r7, #16]
 8009fd8:	795b      	ldrb	r3, [r3, #5]
 8009fda:	2201      	movs	r2, #1
 8009fdc:	9200      	str	r2, [sp, #0]
 8009fde:	221f      	movs	r2, #31
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	f001 ff2a 	bl	800be3a <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8009fe6:	e17e      	b.n	800a2e6 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8009fe8:	693b      	ldr	r3, [r7, #16]
 8009fea:	795b      	ldrb	r3, [r3, #5]
 8009fec:	4619      	mov	r1, r3
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	f002 faae 	bl	800c550 <USBH_LL_GetURBState>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009ff8:	7d3b      	ldrb	r3, [r7, #20]
 8009ffa:	2b01      	cmp	r3, #1
 8009ffc:	d118      	bne.n	800a030 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8009ffe:	693b      	ldr	r3, [r7, #16]
 800a000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a002:	2b00      	cmp	r3, #0
 800a004:	d00f      	beq.n	800a026 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a00c:	b25b      	sxtb	r3, r3
 800a00e:	2b00      	cmp	r3, #0
 800a010:	da04      	bge.n	800a01c <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800a012:	693b      	ldr	r3, [r7, #16]
 800a014:	2203      	movs	r2, #3
 800a016:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a01a:	e157      	b.n	800a2cc <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800a01c:	693b      	ldr	r3, [r7, #16]
 800a01e:	2205      	movs	r2, #5
 800a020:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a024:	e152      	b.n	800a2cc <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800a026:	693b      	ldr	r3, [r7, #16]
 800a028:	2207      	movs	r2, #7
 800a02a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a02e:	e14d      	b.n	800a2cc <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a030:	7d3b      	ldrb	r3, [r7, #20]
 800a032:	2b02      	cmp	r3, #2
 800a034:	d104      	bne.n	800a040 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a036:	693b      	ldr	r3, [r7, #16]
 800a038:	2201      	movs	r2, #1
 800a03a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a03e:	e145      	b.n	800a2cc <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800a040:	7d3b      	ldrb	r3, [r7, #20]
 800a042:	2b05      	cmp	r3, #5
 800a044:	f040 8142 	bne.w	800a2cc <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800a048:	693b      	ldr	r3, [r7, #16]
 800a04a:	220a      	movs	r2, #10
 800a04c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a050:	e13c      	b.n	800a2cc <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	895a      	ldrh	r2, [r3, #10]
 800a05c:	693b      	ldr	r3, [r7, #16]
 800a05e:	791b      	ldrb	r3, [r3, #4]
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f001 ff0f 	bl	800be84 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800a066:	693b      	ldr	r3, [r7, #16]
 800a068:	2204      	movs	r2, #4
 800a06a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800a06e:	e13a      	b.n	800a2e6 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800a070:	693b      	ldr	r3, [r7, #16]
 800a072:	791b      	ldrb	r3, [r3, #4]
 800a074:	4619      	mov	r1, r3
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f002 fa6a 	bl	800c550 <USBH_LL_GetURBState>
 800a07c:	4603      	mov	r3, r0
 800a07e:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a080:	7d3b      	ldrb	r3, [r7, #20]
 800a082:	2b01      	cmp	r3, #1
 800a084:	d12d      	bne.n	800a0e2 <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800a086:	693b      	ldr	r3, [r7, #16]
 800a088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a08a:	693a      	ldr	r2, [r7, #16]
 800a08c:	8952      	ldrh	r2, [r2, #10]
 800a08e:	4293      	cmp	r3, r2
 800a090:	d910      	bls.n	800a0b4 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800a092:	693b      	ldr	r3, [r7, #16]
 800a094:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a098:	693a      	ldr	r2, [r7, #16]
 800a09a:	8952      	ldrh	r2, [r2, #10]
 800a09c:	441a      	add	r2, r3
 800a09e:	693b      	ldr	r3, [r7, #16]
 800a0a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800a0a4:	693b      	ldr	r3, [r7, #16]
 800a0a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0a8:	693a      	ldr	r2, [r7, #16]
 800a0aa:	8952      	ldrh	r2, [r2, #10]
 800a0ac:	1a9a      	subs	r2, r3, r2
 800a0ae:	693b      	ldr	r3, [r7, #16]
 800a0b0:	65da      	str	r2, [r3, #92]	; 0x5c
 800a0b2:	e002      	b.n	800a0ba <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800a0b4:	693b      	ldr	r3, [r7, #16]
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d00a      	beq.n	800a0d8 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800a0c2:	693b      	ldr	r3, [r7, #16]
 800a0c4:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a0c8:	693b      	ldr	r3, [r7, #16]
 800a0ca:	895a      	ldrh	r2, [r3, #10]
 800a0cc:	693b      	ldr	r3, [r7, #16]
 800a0ce:	791b      	ldrb	r3, [r3, #4]
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	f001 fed7 	bl	800be84 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800a0d6:	e0fb      	b.n	800a2d0 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	2207      	movs	r2, #7
 800a0dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a0e0:	e0f6      	b.n	800a2d0 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800a0e2:	7d3b      	ldrb	r3, [r7, #20]
 800a0e4:	2b05      	cmp	r3, #5
 800a0e6:	f040 80f3 	bne.w	800a2d0 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800a0ea:	693b      	ldr	r3, [r7, #16]
 800a0ec:	2209      	movs	r2, #9
 800a0ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a0f2:	e0ed      	b.n	800a2d0 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800a0f4:	693b      	ldr	r3, [r7, #16]
 800a0f6:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a0fa:	693b      	ldr	r3, [r7, #16]
 800a0fc:	891a      	ldrh	r2, [r3, #8]
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	795b      	ldrb	r3, [r3, #5]
 800a102:	2001      	movs	r0, #1
 800a104:	9000      	str	r0, [sp, #0]
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f001 fe97 	bl	800be3a <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800a10c:	693b      	ldr	r3, [r7, #16]
 800a10e:	2206      	movs	r2, #6
 800a110:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a114:	e0e7      	b.n	800a2e6 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800a116:	693b      	ldr	r3, [r7, #16]
 800a118:	795b      	ldrb	r3, [r3, #5]
 800a11a:	4619      	mov	r1, r3
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f002 fa17 	bl	800c550 <USBH_LL_GetURBState>
 800a122:	4603      	mov	r3, r0
 800a124:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a126:	7d3b      	ldrb	r3, [r7, #20]
 800a128:	2b01      	cmp	r3, #1
 800a12a:	d12f      	bne.n	800a18c <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800a12c:	693b      	ldr	r3, [r7, #16]
 800a12e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a130:	693a      	ldr	r2, [r7, #16]
 800a132:	8912      	ldrh	r2, [r2, #8]
 800a134:	4293      	cmp	r3, r2
 800a136:	d910      	bls.n	800a15a <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800a138:	693b      	ldr	r3, [r7, #16]
 800a13a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a13e:	693a      	ldr	r2, [r7, #16]
 800a140:	8912      	ldrh	r2, [r2, #8]
 800a142:	441a      	add	r2, r3
 800a144:	693b      	ldr	r3, [r7, #16]
 800a146:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a14e:	693a      	ldr	r2, [r7, #16]
 800a150:	8912      	ldrh	r2, [r2, #8]
 800a152:	1a9a      	subs	r2, r3, r2
 800a154:	693b      	ldr	r3, [r7, #16]
 800a156:	65da      	str	r2, [r3, #92]	; 0x5c
 800a158:	e002      	b.n	800a160 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800a15a:	693b      	ldr	r3, [r7, #16]
 800a15c:	2200      	movs	r2, #0
 800a15e:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800a160:	693b      	ldr	r3, [r7, #16]
 800a162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a164:	2b00      	cmp	r3, #0
 800a166:	d00c      	beq.n	800a182 <USBH_MSC_BOT_Process+0x22e>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800a168:	693b      	ldr	r3, [r7, #16]
 800a16a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	891a      	ldrh	r2, [r3, #8]
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	795b      	ldrb	r3, [r3, #5]
 800a176:	2001      	movs	r0, #1
 800a178:	9000      	str	r0, [sp, #0]
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f001 fe5d 	bl	800be3a <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800a180:	e0a8      	b.n	800a2d4 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800a182:	693b      	ldr	r3, [r7, #16]
 800a184:	2207      	movs	r2, #7
 800a186:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a18a:	e0a3      	b.n	800a2d4 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a18c:	7d3b      	ldrb	r3, [r7, #20]
 800a18e:	2b02      	cmp	r3, #2
 800a190:	d104      	bne.n	800a19c <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800a192:	693b      	ldr	r3, [r7, #16]
 800a194:	2205      	movs	r2, #5
 800a196:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a19a:	e09b      	b.n	800a2d4 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 800a19c:	7d3b      	ldrb	r3, [r7, #20]
 800a19e:	2b05      	cmp	r3, #5
 800a1a0:	f040 8098 	bne.w	800a2d4 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	220a      	movs	r2, #10
 800a1a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a1ac:	e092      	b.n	800a2d4 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800a1b4:	693b      	ldr	r3, [r7, #16]
 800a1b6:	791b      	ldrb	r3, [r3, #4]
 800a1b8:	220d      	movs	r2, #13
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f001 fe62 	bl	800be84 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800a1c0:	693b      	ldr	r3, [r7, #16]
 800a1c2:	2208      	movs	r2, #8
 800a1c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a1c8:	e08d      	b.n	800a2e6 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800a1ca:	693b      	ldr	r3, [r7, #16]
 800a1cc:	791b      	ldrb	r3, [r3, #4]
 800a1ce:	4619      	mov	r1, r3
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f002 f9bd 	bl	800c550 <USBH_LL_GetURBState>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800a1da:	7d3b      	ldrb	r3, [r7, #20]
 800a1dc:	2b01      	cmp	r3, #1
 800a1de:	d115      	bne.n	800a20c <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a1e0:	693b      	ldr	r3, [r7, #16]
 800a1e2:	2201      	movs	r2, #1
 800a1e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800a1e8:	693b      	ldr	r3, [r7, #16]
 800a1ea:	2201      	movs	r2, #1
 800a1ec:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f000 f8a9 	bl	800a348 <USBH_MSC_DecodeCSW>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800a1fa:	7d7b      	ldrb	r3, [r7, #21]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d102      	bne.n	800a206 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800a200:	2300      	movs	r3, #0
 800a202:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800a204:	e068      	b.n	800a2d8 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800a206:	2302      	movs	r3, #2
 800a208:	75fb      	strb	r3, [r7, #23]
      break;
 800a20a:	e065      	b.n	800a2d8 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 800a20c:	7d3b      	ldrb	r3, [r7, #20]
 800a20e:	2b05      	cmp	r3, #5
 800a210:	d162      	bne.n	800a2d8 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800a212:	693b      	ldr	r3, [r7, #16]
 800a214:	2209      	movs	r2, #9
 800a216:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a21a:	e05d      	b.n	800a2d8 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800a21c:	78fb      	ldrb	r3, [r7, #3]
 800a21e:	2200      	movs	r2, #0
 800a220:	4619      	mov	r1, r3
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f000 f864 	bl	800a2f0 <USBH_MSC_BOT_Abort>
 800a228:	4603      	mov	r3, r0
 800a22a:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800a22c:	7dbb      	ldrb	r3, [r7, #22]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d104      	bne.n	800a23c <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800a232:	693b      	ldr	r3, [r7, #16]
 800a234:	2207      	movs	r2, #7
 800a236:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800a23a:	e04f      	b.n	800a2dc <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 800a23c:	7dbb      	ldrb	r3, [r7, #22]
 800a23e:	2b04      	cmp	r3, #4
 800a240:	d14c      	bne.n	800a2dc <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	220b      	movs	r2, #11
 800a246:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a24a:	e047      	b.n	800a2dc <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800a24c:	78fb      	ldrb	r3, [r7, #3]
 800a24e:	2201      	movs	r2, #1
 800a250:	4619      	mov	r1, r3
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f000 f84c 	bl	800a2f0 <USBH_MSC_BOT_Abort>
 800a258:	4603      	mov	r3, r0
 800a25a:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800a25c:	7dbb      	ldrb	r3, [r7, #22]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d11d      	bne.n	800a29e <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800a262:	693b      	ldr	r3, [r7, #16]
 800a264:	795b      	ldrb	r3, [r3, #5]
 800a266:	4619      	mov	r1, r3
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	f002 f9cb 	bl	800c604 <USBH_LL_GetToggle>
 800a26e:	4603      	mov	r3, r0
 800a270:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800a272:	693b      	ldr	r3, [r7, #16]
 800a274:	7959      	ldrb	r1, [r3, #5]
 800a276:	7bfb      	ldrb	r3, [r7, #15]
 800a278:	f1c3 0301 	rsb	r3, r3, #1
 800a27c:	b2db      	uxtb	r3, r3
 800a27e:	461a      	mov	r2, r3
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f002 f98f 	bl	800c5a4 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800a286:	693b      	ldr	r3, [r7, #16]
 800a288:	791b      	ldrb	r3, [r3, #4]
 800a28a:	2200      	movs	r2, #0
 800a28c:	4619      	mov	r1, r3
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	f002 f988 	bl	800c5a4 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800a294:	693b      	ldr	r3, [r7, #16]
 800a296:	2209      	movs	r2, #9
 800a298:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800a29c:	e020      	b.n	800a2e0 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800a29e:	7dbb      	ldrb	r3, [r7, #22]
 800a2a0:	2b04      	cmp	r3, #4
 800a2a2:	d11d      	bne.n	800a2e0 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800a2a4:	693b      	ldr	r3, [r7, #16]
 800a2a6:	220b      	movs	r2, #11
 800a2a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a2ac:	e018      	b.n	800a2e0 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f7ff fdf2 	bl	8009e98 <USBH_MSC_BOT_REQ_Reset>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800a2b8:	7dfb      	ldrb	r3, [r7, #23]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d112      	bne.n	800a2e4 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a2be:	693b      	ldr	r3, [r7, #16]
 800a2c0:	2201      	movs	r2, #1
 800a2c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800a2c6:	e00d      	b.n	800a2e4 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800a2c8:	bf00      	nop
 800a2ca:	e00c      	b.n	800a2e6 <USBH_MSC_BOT_Process+0x392>
      break;
 800a2cc:	bf00      	nop
 800a2ce:	e00a      	b.n	800a2e6 <USBH_MSC_BOT_Process+0x392>
      break;
 800a2d0:	bf00      	nop
 800a2d2:	e008      	b.n	800a2e6 <USBH_MSC_BOT_Process+0x392>
      break;
 800a2d4:	bf00      	nop
 800a2d6:	e006      	b.n	800a2e6 <USBH_MSC_BOT_Process+0x392>
      break;
 800a2d8:	bf00      	nop
 800a2da:	e004      	b.n	800a2e6 <USBH_MSC_BOT_Process+0x392>
      break;
 800a2dc:	bf00      	nop
 800a2de:	e002      	b.n	800a2e6 <USBH_MSC_BOT_Process+0x392>
      break;
 800a2e0:	bf00      	nop
 800a2e2:	e000      	b.n	800a2e6 <USBH_MSC_BOT_Process+0x392>
      break;
 800a2e4:	bf00      	nop
  }
  return status;
 800a2e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	3718      	adds	r7, #24
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}

0800a2f0 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b084      	sub	sp, #16
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
 800a2f8:	460b      	mov	r3, r1
 800a2fa:	70fb      	strb	r3, [r7, #3]
 800a2fc:	4613      	mov	r3, r2
 800a2fe:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800a300:	2302      	movs	r3, #2
 800a302:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a30a:	69db      	ldr	r3, [r3, #28]
 800a30c:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800a30e:	78bb      	ldrb	r3, [r7, #2]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d002      	beq.n	800a31a <USBH_MSC_BOT_Abort+0x2a>
 800a314:	2b01      	cmp	r3, #1
 800a316:	d009      	beq.n	800a32c <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800a318:	e011      	b.n	800a33e <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	79db      	ldrb	r3, [r3, #7]
 800a31e:	4619      	mov	r1, r3
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f001 f99c 	bl	800b65e <USBH_ClrFeature>
 800a326:	4603      	mov	r3, r0
 800a328:	73fb      	strb	r3, [r7, #15]
      break;
 800a32a:	e008      	b.n	800a33e <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	799b      	ldrb	r3, [r3, #6]
 800a330:	4619      	mov	r1, r3
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f001 f993 	bl	800b65e <USBH_ClrFeature>
 800a338:	4603      	mov	r3, r0
 800a33a:	73fb      	strb	r3, [r7, #15]
      break;
 800a33c:	bf00      	nop
  }
  return status;
 800a33e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a340:	4618      	mov	r0, r3
 800a342:	3710      	adds	r7, #16
 800a344:	46bd      	mov	sp, r7
 800a346:	bd80      	pop	{r7, pc}

0800a348 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b084      	sub	sp, #16
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a356:	69db      	ldr	r3, [r3, #28]
 800a358:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800a35a:	2301      	movs	r3, #1
 800a35c:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800a35e:	68bb      	ldr	r3, [r7, #8]
 800a360:	791b      	ldrb	r3, [r3, #4]
 800a362:	4619      	mov	r1, r3
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f002 f861 	bl	800c42c <USBH_LL_GetLastXferSize>
 800a36a:	4603      	mov	r3, r0
 800a36c:	2b0d      	cmp	r3, #13
 800a36e:	d002      	beq.n	800a376 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800a370:	2302      	movs	r3, #2
 800a372:	73fb      	strb	r3, [r7, #15]
 800a374:	e024      	b.n	800a3c0 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a37a:	4a14      	ldr	r2, [pc, #80]	; (800a3cc <USBH_MSC_DecodeCSW+0x84>)
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d11d      	bne.n	800a3bc <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a388:	429a      	cmp	r2, r3
 800a38a:	d119      	bne.n	800a3c0 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a392:	2b00      	cmp	r3, #0
 800a394:	d102      	bne.n	800a39c <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800a396:	2300      	movs	r3, #0
 800a398:	73fb      	strb	r3, [r7, #15]
 800a39a:	e011      	b.n	800a3c0 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a3a2:	2b01      	cmp	r3, #1
 800a3a4:	d102      	bne.n	800a3ac <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	73fb      	strb	r3, [r7, #15]
 800a3aa:	e009      	b.n	800a3c0 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a3b2:	2b02      	cmp	r3, #2
 800a3b4:	d104      	bne.n	800a3c0 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800a3b6:	2302      	movs	r3, #2
 800a3b8:	73fb      	strb	r3, [r7, #15]
 800a3ba:	e001      	b.n	800a3c0 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800a3bc:	2302      	movs	r3, #2
 800a3be:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800a3c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3710      	adds	r7, #16
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}
 800a3ca:	bf00      	nop
 800a3cc:	53425355 	.word	0x53425355

0800a3d0 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b084      	sub	sp, #16
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
 800a3d8:	460b      	mov	r3, r1
 800a3da:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a3dc:	2302      	movs	r3, #2
 800a3de:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a3e6:	69db      	ldr	r3, [r3, #28]
 800a3e8:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a3f0:	2b01      	cmp	r3, #1
 800a3f2:	d002      	beq.n	800a3fa <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800a3f4:	2b02      	cmp	r3, #2
 800a3f6:	d021      	beq.n	800a43c <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a3f8:	e028      	b.n	800a44c <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	2200      	movs	r2, #0
 800a404:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	220a      	movs	r2, #10
 800a40c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a410:	68bb      	ldr	r3, [r7, #8]
 800a412:	3363      	adds	r3, #99	; 0x63
 800a414:	2210      	movs	r2, #16
 800a416:	2100      	movs	r1, #0
 800a418:	4618      	mov	r0, r3
 800a41a:	f002 f9bf 	bl	800c79c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	2200      	movs	r2, #0
 800a422:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	2201      	movs	r2, #1
 800a42a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	2202      	movs	r2, #2
 800a432:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800a436:	2301      	movs	r3, #1
 800a438:	73fb      	strb	r3, [r7, #15]
      break;
 800a43a:	e007      	b.n	800a44c <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a43c:	78fb      	ldrb	r3, [r7, #3]
 800a43e:	4619      	mov	r1, r3
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f7ff fd87 	bl	8009f54 <USBH_MSC_BOT_Process>
 800a446:	4603      	mov	r3, r0
 800a448:	73fb      	strb	r3, [r7, #15]
      break;
 800a44a:	bf00      	nop
  }

  return error;
 800a44c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a44e:	4618      	mov	r0, r3
 800a450:	3710      	adds	r7, #16
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}

0800a456 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800a456:	b580      	push	{r7, lr}
 800a458:	b086      	sub	sp, #24
 800a45a:	af00      	add	r7, sp, #0
 800a45c:	60f8      	str	r0, [r7, #12]
 800a45e:	460b      	mov	r3, r1
 800a460:	607a      	str	r2, [r7, #4]
 800a462:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800a464:	2301      	movs	r3, #1
 800a466:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a46e:	69db      	ldr	r3, [r3, #28]
 800a470:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a472:	693b      	ldr	r3, [r7, #16]
 800a474:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a478:	2b01      	cmp	r3, #1
 800a47a:	d002      	beq.n	800a482 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800a47c:	2b02      	cmp	r3, #2
 800a47e:	d027      	beq.n	800a4d0 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800a480:	e05f      	b.n	800a542 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800a482:	693b      	ldr	r3, [r7, #16]
 800a484:	2208      	movs	r2, #8
 800a486:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a488:	693b      	ldr	r3, [r7, #16]
 800a48a:	2280      	movs	r2, #128	; 0x80
 800a48c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a490:	693b      	ldr	r3, [r7, #16]
 800a492:	220a      	movs	r2, #10
 800a494:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	3363      	adds	r3, #99	; 0x63
 800a49c:	2210      	movs	r2, #16
 800a49e:	2100      	movs	r1, #0
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f002 f97b 	bl	800c79c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800a4a6:	693b      	ldr	r3, [r7, #16]
 800a4a8:	2225      	movs	r2, #37	; 0x25
 800a4aa:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a4ae:	693b      	ldr	r3, [r7, #16]
 800a4b0:	2201      	movs	r2, #1
 800a4b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a4b6:	693b      	ldr	r3, [r7, #16]
 800a4b8:	2202      	movs	r2, #2
 800a4ba:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a4be:	693b      	ldr	r3, [r7, #16]
 800a4c0:	f103 0210 	add.w	r2, r3, #16
 800a4c4:	693b      	ldr	r3, [r7, #16]
 800a4c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	75fb      	strb	r3, [r7, #23]
      break;
 800a4ce:	e038      	b.n	800a542 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a4d0:	7afb      	ldrb	r3, [r7, #11]
 800a4d2:	4619      	mov	r1, r3
 800a4d4:	68f8      	ldr	r0, [r7, #12]
 800a4d6:	f7ff fd3d 	bl	8009f54 <USBH_MSC_BOT_Process>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a4de:	7dfb      	ldrb	r3, [r7, #23]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d12d      	bne.n	800a540 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a4ea:	3303      	adds	r3, #3
 800a4ec:	781b      	ldrb	r3, [r3, #0]
 800a4ee:	461a      	mov	r2, r3
 800a4f0:	693b      	ldr	r3, [r7, #16]
 800a4f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a4f6:	3302      	adds	r3, #2
 800a4f8:	781b      	ldrb	r3, [r3, #0]
 800a4fa:	021b      	lsls	r3, r3, #8
 800a4fc:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800a4fe:	693b      	ldr	r3, [r7, #16]
 800a500:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a504:	3301      	adds	r3, #1
 800a506:	781b      	ldrb	r3, [r3, #0]
 800a508:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a50a:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800a50c:	693b      	ldr	r3, [r7, #16]
 800a50e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a512:	781b      	ldrb	r3, [r3, #0]
 800a514:	061b      	lsls	r3, r3, #24
 800a516:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800a51c:	693b      	ldr	r3, [r7, #16]
 800a51e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a522:	3307      	adds	r3, #7
 800a524:	781b      	ldrb	r3, [r3, #0]
 800a526:	b29a      	uxth	r2, r3
 800a528:	693b      	ldr	r3, [r7, #16]
 800a52a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a52e:	3306      	adds	r3, #6
 800a530:	781b      	ldrb	r3, [r3, #0]
 800a532:	b29b      	uxth	r3, r3
 800a534:	021b      	lsls	r3, r3, #8
 800a536:	b29b      	uxth	r3, r3
 800a538:	4313      	orrs	r3, r2
 800a53a:	b29a      	uxth	r2, r3
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	809a      	strh	r2, [r3, #4]
      break;
 800a540:	bf00      	nop
  }

  return error;
 800a542:	7dfb      	ldrb	r3, [r7, #23]
}
 800a544:	4618      	mov	r0, r3
 800a546:	3718      	adds	r7, #24
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}

0800a54c <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b086      	sub	sp, #24
 800a550:	af00      	add	r7, sp, #0
 800a552:	60f8      	str	r0, [r7, #12]
 800a554:	460b      	mov	r3, r1
 800a556:	607a      	str	r2, [r7, #4]
 800a558:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800a55a:	2302      	movs	r3, #2
 800a55c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a564:	69db      	ldr	r3, [r3, #28]
 800a566:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a56e:	2b01      	cmp	r3, #1
 800a570:	d002      	beq.n	800a578 <USBH_MSC_SCSI_Inquiry+0x2c>
 800a572:	2b02      	cmp	r3, #2
 800a574:	d03d      	beq.n	800a5f2 <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800a576:	e089      	b.n	800a68c <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800a578:	693b      	ldr	r3, [r7, #16]
 800a57a:	2224      	movs	r2, #36	; 0x24
 800a57c:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a57e:	693b      	ldr	r3, [r7, #16]
 800a580:	2280      	movs	r2, #128	; 0x80
 800a582:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a586:	693b      	ldr	r3, [r7, #16]
 800a588:	220a      	movs	r2, #10
 800a58a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800a58e:	693b      	ldr	r3, [r7, #16]
 800a590:	3363      	adds	r3, #99	; 0x63
 800a592:	220a      	movs	r2, #10
 800a594:	2100      	movs	r1, #0
 800a596:	4618      	mov	r0, r3
 800a598:	f002 f900 	bl	800c79c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800a59c:	693b      	ldr	r3, [r7, #16]
 800a59e:	2212      	movs	r2, #18
 800a5a0:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800a5a4:	7afb      	ldrb	r3, [r7, #11]
 800a5a6:	015b      	lsls	r3, r3, #5
 800a5a8:	b2da      	uxtb	r2, r3
 800a5aa:	693b      	ldr	r3, [r7, #16]
 800a5ac:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800a5b0:	693b      	ldr	r3, [r7, #16]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800a5c0:	693b      	ldr	r3, [r7, #16]
 800a5c2:	2224      	movs	r2, #36	; 0x24
 800a5c4:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800a5c8:	693b      	ldr	r3, [r7, #16]
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a5d0:	693b      	ldr	r3, [r7, #16]
 800a5d2:	2201      	movs	r2, #1
 800a5d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a5d8:	693b      	ldr	r3, [r7, #16]
 800a5da:	2202      	movs	r2, #2
 800a5dc:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	f103 0210 	add.w	r2, r3, #16
 800a5e6:	693b      	ldr	r3, [r7, #16]
 800a5e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	75fb      	strb	r3, [r7, #23]
      break;
 800a5f0:	e04c      	b.n	800a68c <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a5f2:	7afb      	ldrb	r3, [r7, #11]
 800a5f4:	4619      	mov	r1, r3
 800a5f6:	68f8      	ldr	r0, [r7, #12]
 800a5f8:	f7ff fcac 	bl	8009f54 <USBH_MSC_BOT_Process>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a600:	7dfb      	ldrb	r3, [r7, #23]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d141      	bne.n	800a68a <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800a606:	2222      	movs	r2, #34	; 0x22
 800a608:	2100      	movs	r1, #0
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f002 f8c6 	bl	800c79c <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800a610:	693b      	ldr	r3, [r7, #16]
 800a612:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a616:	781b      	ldrb	r3, [r3, #0]
 800a618:	f003 031f 	and.w	r3, r3, #31
 800a61c:	b2da      	uxtb	r2, r3
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800a622:	693b      	ldr	r3, [r7, #16]
 800a624:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a628:	781b      	ldrb	r3, [r3, #0]
 800a62a:	095b      	lsrs	r3, r3, #5
 800a62c:	b2da      	uxtb	r2, r3
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800a632:	693b      	ldr	r3, [r7, #16]
 800a634:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a638:	3301      	adds	r3, #1
 800a63a:	781b      	ldrb	r3, [r3, #0]
 800a63c:	b25b      	sxtb	r3, r3
 800a63e:	2b00      	cmp	r3, #0
 800a640:	da03      	bge.n	800a64a <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2201      	movs	r2, #1
 800a646:	709a      	strb	r2, [r3, #2]
 800a648:	e002      	b.n	800a650 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2200      	movs	r2, #0
 800a64e:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	1cd8      	adds	r0, r3, #3
 800a654:	693b      	ldr	r3, [r7, #16]
 800a656:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a65a:	3308      	adds	r3, #8
 800a65c:	2208      	movs	r2, #8
 800a65e:	4619      	mov	r1, r3
 800a660:	f002 f88e 	bl	800c780 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f103 000c 	add.w	r0, r3, #12
 800a66a:	693b      	ldr	r3, [r7, #16]
 800a66c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a670:	3310      	adds	r3, #16
 800a672:	2210      	movs	r2, #16
 800a674:	4619      	mov	r1, r3
 800a676:	f002 f883 	bl	800c780 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	331d      	adds	r3, #29
 800a67e:	693a      	ldr	r2, [r7, #16]
 800a680:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800a684:	3220      	adds	r2, #32
 800a686:	6812      	ldr	r2, [r2, #0]
 800a688:	601a      	str	r2, [r3, #0]
      break;
 800a68a:	bf00      	nop
  }

  return error;
 800a68c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a68e:	4618      	mov	r0, r3
 800a690:	3718      	adds	r7, #24
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}

0800a696 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800a696:	b580      	push	{r7, lr}
 800a698:	b086      	sub	sp, #24
 800a69a:	af00      	add	r7, sp, #0
 800a69c:	60f8      	str	r0, [r7, #12]
 800a69e:	460b      	mov	r3, r1
 800a6a0:	607a      	str	r2, [r7, #4]
 800a6a2:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a6a4:	2302      	movs	r3, #2
 800a6a6:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a6ae:	69db      	ldr	r3, [r3, #28]
 800a6b0:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a6b8:	2b01      	cmp	r3, #1
 800a6ba:	d002      	beq.n	800a6c2 <USBH_MSC_SCSI_RequestSense+0x2c>
 800a6bc:	2b02      	cmp	r3, #2
 800a6be:	d03d      	beq.n	800a73c <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800a6c0:	e05d      	b.n	800a77e <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800a6c2:	693b      	ldr	r3, [r7, #16]
 800a6c4:	220e      	movs	r2, #14
 800a6c6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	2280      	movs	r2, #128	; 0x80
 800a6cc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a6d0:	693b      	ldr	r3, [r7, #16]
 800a6d2:	220a      	movs	r2, #10
 800a6d4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a6d8:	693b      	ldr	r3, [r7, #16]
 800a6da:	3363      	adds	r3, #99	; 0x63
 800a6dc:	2210      	movs	r2, #16
 800a6de:	2100      	movs	r1, #0
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f002 f85b 	bl	800c79c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800a6e6:	693b      	ldr	r3, [r7, #16]
 800a6e8:	2203      	movs	r2, #3
 800a6ea:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800a6ee:	7afb      	ldrb	r3, [r7, #11]
 800a6f0:	015b      	lsls	r3, r3, #5
 800a6f2:	b2da      	uxtb	r2, r3
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800a702:	693b      	ldr	r3, [r7, #16]
 800a704:	2200      	movs	r2, #0
 800a706:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800a70a:	693b      	ldr	r3, [r7, #16]
 800a70c:	220e      	movs	r2, #14
 800a70e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800a712:	693b      	ldr	r3, [r7, #16]
 800a714:	2200      	movs	r2, #0
 800a716:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	2201      	movs	r2, #1
 800a71e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	2202      	movs	r2, #2
 800a726:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a72a:	693b      	ldr	r3, [r7, #16]
 800a72c:	f103 0210 	add.w	r2, r3, #16
 800a730:	693b      	ldr	r3, [r7, #16]
 800a732:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a736:	2301      	movs	r3, #1
 800a738:	75fb      	strb	r3, [r7, #23]
      break;
 800a73a:	e020      	b.n	800a77e <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a73c:	7afb      	ldrb	r3, [r7, #11]
 800a73e:	4619      	mov	r1, r3
 800a740:	68f8      	ldr	r0, [r7, #12]
 800a742:	f7ff fc07 	bl	8009f54 <USBH_MSC_BOT_Process>
 800a746:	4603      	mov	r3, r0
 800a748:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a74a:	7dfb      	ldrb	r3, [r7, #23]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d115      	bne.n	800a77c <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a756:	3302      	adds	r3, #2
 800a758:	781b      	ldrb	r3, [r3, #0]
 800a75a:	f003 030f 	and.w	r3, r3, #15
 800a75e:	b2da      	uxtb	r2, r3
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800a764:	693b      	ldr	r3, [r7, #16]
 800a766:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a76a:	7b1a      	ldrb	r2, [r3, #12]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a776:	7b5a      	ldrb	r2, [r3, #13]
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	709a      	strb	r2, [r3, #2]
      break;
 800a77c:	bf00      	nop
  }

  return error;
 800a77e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a780:	4618      	mov	r0, r3
 800a782:	3718      	adds	r7, #24
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}

0800a788 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b086      	sub	sp, #24
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	60f8      	str	r0, [r7, #12]
 800a790:	607a      	str	r2, [r7, #4]
 800a792:	603b      	str	r3, [r7, #0]
 800a794:	460b      	mov	r3, r1
 800a796:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a798:	2302      	movs	r3, #2
 800a79a:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a7a2:	69db      	ldr	r3, [r3, #28]
 800a7a4:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a7a6:	693b      	ldr	r3, [r7, #16]
 800a7a8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a7ac:	2b01      	cmp	r3, #1
 800a7ae:	d002      	beq.n	800a7b6 <USBH_MSC_SCSI_Write+0x2e>
 800a7b0:	2b02      	cmp	r3, #2
 800a7b2:	d047      	beq.n	800a844 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a7b4:	e04e      	b.n	800a854 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800a7bc:	461a      	mov	r2, r3
 800a7be:	6a3b      	ldr	r3, [r7, #32]
 800a7c0:	fb03 f202 	mul.w	r2, r3, r2
 800a7c4:	693b      	ldr	r3, [r7, #16]
 800a7c6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800a7c8:	693b      	ldr	r3, [r7, #16]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a7d0:	693b      	ldr	r3, [r7, #16]
 800a7d2:	220a      	movs	r2, #10
 800a7d4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a7d8:	693b      	ldr	r3, [r7, #16]
 800a7da:	3363      	adds	r3, #99	; 0x63
 800a7dc:	2210      	movs	r2, #16
 800a7de:	2100      	movs	r1, #0
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f001 ffdb 	bl	800c79c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	222a      	movs	r2, #42	; 0x2a
 800a7ea:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800a7ee:	79fa      	ldrb	r2, [r7, #7]
 800a7f0:	693b      	ldr	r3, [r7, #16]
 800a7f2:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800a7f6:	79ba      	ldrb	r2, [r7, #6]
 800a7f8:	693b      	ldr	r3, [r7, #16]
 800a7fa:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800a7fe:	797a      	ldrb	r2, [r7, #5]
 800a800:	693b      	ldr	r3, [r7, #16]
 800a802:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800a806:	1d3b      	adds	r3, r7, #4
 800a808:	781a      	ldrb	r2, [r3, #0]
 800a80a:	693b      	ldr	r3, [r7, #16]
 800a80c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800a810:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800a81a:	f107 0320 	add.w	r3, r7, #32
 800a81e:	781a      	ldrb	r2, [r3, #0]
 800a820:	693b      	ldr	r3, [r7, #16]
 800a822:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a826:	693b      	ldr	r3, [r7, #16]
 800a828:	2201      	movs	r2, #1
 800a82a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a82e:	693b      	ldr	r3, [r7, #16]
 800a830:	2202      	movs	r2, #2
 800a832:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800a836:	693b      	ldr	r3, [r7, #16]
 800a838:	683a      	ldr	r2, [r7, #0]
 800a83a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a83e:	2301      	movs	r3, #1
 800a840:	75fb      	strb	r3, [r7, #23]
      break;
 800a842:	e007      	b.n	800a854 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a844:	7afb      	ldrb	r3, [r7, #11]
 800a846:	4619      	mov	r1, r3
 800a848:	68f8      	ldr	r0, [r7, #12]
 800a84a:	f7ff fb83 	bl	8009f54 <USBH_MSC_BOT_Process>
 800a84e:	4603      	mov	r3, r0
 800a850:	75fb      	strb	r3, [r7, #23]
      break;
 800a852:	bf00      	nop
  }

  return error;
 800a854:	7dfb      	ldrb	r3, [r7, #23]
}
 800a856:	4618      	mov	r0, r3
 800a858:	3718      	adds	r7, #24
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bd80      	pop	{r7, pc}

0800a85e <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800a85e:	b580      	push	{r7, lr}
 800a860:	b086      	sub	sp, #24
 800a862:	af00      	add	r7, sp, #0
 800a864:	60f8      	str	r0, [r7, #12]
 800a866:	607a      	str	r2, [r7, #4]
 800a868:	603b      	str	r3, [r7, #0]
 800a86a:	460b      	mov	r3, r1
 800a86c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a86e:	2302      	movs	r3, #2
 800a870:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a878:	69db      	ldr	r3, [r3, #28]
 800a87a:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a87c:	693b      	ldr	r3, [r7, #16]
 800a87e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a882:	2b01      	cmp	r3, #1
 800a884:	d002      	beq.n	800a88c <USBH_MSC_SCSI_Read+0x2e>
 800a886:	2b02      	cmp	r3, #2
 800a888:	d047      	beq.n	800a91a <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a88a:	e04e      	b.n	800a92a <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800a88c:	693b      	ldr	r3, [r7, #16]
 800a88e:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800a892:	461a      	mov	r2, r3
 800a894:	6a3b      	ldr	r3, [r7, #32]
 800a896:	fb03 f202 	mul.w	r2, r3, r2
 800a89a:	693b      	ldr	r3, [r7, #16]
 800a89c:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a89e:	693b      	ldr	r3, [r7, #16]
 800a8a0:	2280      	movs	r2, #128	; 0x80
 800a8a2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a8a6:	693b      	ldr	r3, [r7, #16]
 800a8a8:	220a      	movs	r2, #10
 800a8aa:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a8ae:	693b      	ldr	r3, [r7, #16]
 800a8b0:	3363      	adds	r3, #99	; 0x63
 800a8b2:	2210      	movs	r2, #16
 800a8b4:	2100      	movs	r1, #0
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f001 ff70 	bl	800c79c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800a8bc:	693b      	ldr	r3, [r7, #16]
 800a8be:	2228      	movs	r2, #40	; 0x28
 800a8c0:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800a8c4:	79fa      	ldrb	r2, [r7, #7]
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800a8cc:	79ba      	ldrb	r2, [r7, #6]
 800a8ce:	693b      	ldr	r3, [r7, #16]
 800a8d0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800a8d4:	797a      	ldrb	r2, [r7, #5]
 800a8d6:	693b      	ldr	r3, [r7, #16]
 800a8d8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800a8dc:	1d3b      	adds	r3, r7, #4
 800a8de:	781a      	ldrb	r2, [r3, #0]
 800a8e0:	693b      	ldr	r3, [r7, #16]
 800a8e2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800a8e6:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800a8f0:	f107 0320 	add.w	r3, r7, #32
 800a8f4:	781a      	ldrb	r2, [r3, #0]
 800a8f6:	693b      	ldr	r3, [r7, #16]
 800a8f8:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a8fc:	693b      	ldr	r3, [r7, #16]
 800a8fe:	2201      	movs	r2, #1
 800a900:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a904:	693b      	ldr	r3, [r7, #16]
 800a906:	2202      	movs	r2, #2
 800a908:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800a90c:	693b      	ldr	r3, [r7, #16]
 800a90e:	683a      	ldr	r2, [r7, #0]
 800a910:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a914:	2301      	movs	r3, #1
 800a916:	75fb      	strb	r3, [r7, #23]
      break;
 800a918:	e007      	b.n	800a92a <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a91a:	7afb      	ldrb	r3, [r7, #11]
 800a91c:	4619      	mov	r1, r3
 800a91e:	68f8      	ldr	r0, [r7, #12]
 800a920:	f7ff fb18 	bl	8009f54 <USBH_MSC_BOT_Process>
 800a924:	4603      	mov	r3, r0
 800a926:	75fb      	strb	r3, [r7, #23]
      break;
 800a928:	bf00      	nop
  }

  return error;
 800a92a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	3718      	adds	r7, #24
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}

0800a934 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b084      	sub	sp, #16
 800a938:	af00      	add	r7, sp, #0
 800a93a:	60f8      	str	r0, [r7, #12]
 800a93c:	60b9      	str	r1, [r7, #8]
 800a93e:	4613      	mov	r3, r2
 800a940:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d101      	bne.n	800a94c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a948:	2302      	movs	r3, #2
 800a94a:	e029      	b.n	800a9a0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	79fa      	ldrb	r2, [r7, #7]
 800a950:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	2200      	movs	r2, #0
 800a958:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	2200      	movs	r2, #0
 800a960:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800a964:	68f8      	ldr	r0, [r7, #12]
 800a966:	f000 f81f 	bl	800a9a8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	2200      	movs	r2, #0
 800a96e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	2200      	movs	r2, #0
 800a976:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	2200      	movs	r2, #0
 800a97e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	2200      	movs	r2, #0
 800a986:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d003      	beq.n	800a998 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	68ba      	ldr	r2, [r7, #8]
 800a994:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800a998:	68f8      	ldr	r0, [r7, #12]
 800a99a:	f001 fc93 	bl	800c2c4 <USBH_LL_Init>

  return USBH_OK;
 800a99e:	2300      	movs	r3, #0
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	3710      	adds	r7, #16
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	bd80      	pop	{r7, pc}

0800a9a8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a9a8:	b480      	push	{r7}
 800a9aa:	b085      	sub	sp, #20
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	60fb      	str	r3, [r7, #12]
 800a9b8:	e009      	b.n	800a9ce <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a9ba:	687a      	ldr	r2, [r7, #4]
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	33e0      	adds	r3, #224	; 0xe0
 800a9c0:	009b      	lsls	r3, r3, #2
 800a9c2:	4413      	add	r3, r2
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	3301      	adds	r3, #1
 800a9cc:	60fb      	str	r3, [r7, #12]
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	2b0e      	cmp	r3, #14
 800a9d2:	d9f2      	bls.n	800a9ba <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	60fb      	str	r3, [r7, #12]
 800a9d8:	e009      	b.n	800a9ee <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a9da:	687a      	ldr	r2, [r7, #4]
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	4413      	add	r3, r2
 800a9e0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	3301      	adds	r3, #1
 800a9ec:	60fb      	str	r3, [r7, #12]
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a9f4:	d3f1      	bcc.n	800a9da <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2200      	movs	r2, #0
 800aa00:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	2201      	movs	r2, #1
 800aa06:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2201      	movs	r2, #1
 800aa14:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2240      	movs	r2, #64	; 0x40
 800aa1a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2200      	movs	r2, #0
 800aa26:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	2201      	movs	r2, #1
 800aa2e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2200      	movs	r2, #0
 800aa36:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800aa42:	2300      	movs	r3, #0
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	3714      	adds	r7, #20
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4e:	4770      	bx	lr

0800aa50 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800aa50:	b480      	push	{r7}
 800aa52:	b085      	sub	sp, #20
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
 800aa58:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d016      	beq.n	800aa92 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d10e      	bne.n	800aa8c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800aa74:	1c59      	adds	r1, r3, #1
 800aa76:	687a      	ldr	r2, [r7, #4]
 800aa78:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800aa7c:	687a      	ldr	r2, [r7, #4]
 800aa7e:	33de      	adds	r3, #222	; 0xde
 800aa80:	6839      	ldr	r1, [r7, #0]
 800aa82:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800aa86:	2300      	movs	r3, #0
 800aa88:	73fb      	strb	r3, [r7, #15]
 800aa8a:	e004      	b.n	800aa96 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800aa8c:	2302      	movs	r3, #2
 800aa8e:	73fb      	strb	r3, [r7, #15]
 800aa90:	e001      	b.n	800aa96 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800aa92:	2302      	movs	r3, #2
 800aa94:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800aa96:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	3714      	adds	r7, #20
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa2:	4770      	bx	lr

0800aaa4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	b085      	sub	sp, #20
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
 800aaac:	460b      	mov	r3, r1
 800aaae:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800aab0:	2300      	movs	r3, #0
 800aab2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800aaba:	78fa      	ldrb	r2, [r7, #3]
 800aabc:	429a      	cmp	r2, r3
 800aabe:	d204      	bcs.n	800aaca <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	78fa      	ldrb	r2, [r7, #3]
 800aac4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800aac8:	e001      	b.n	800aace <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800aaca:	2302      	movs	r3, #2
 800aacc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800aace:	7bfb      	ldrb	r3, [r7, #15]
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	3714      	adds	r7, #20
 800aad4:	46bd      	mov	sp, r7
 800aad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aada:	4770      	bx	lr

0800aadc <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800aadc:	b480      	push	{r7}
 800aade:	b087      	sub	sp, #28
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
 800aae4:	4608      	mov	r0, r1
 800aae6:	4611      	mov	r1, r2
 800aae8:	461a      	mov	r2, r3
 800aaea:	4603      	mov	r3, r0
 800aaec:	70fb      	strb	r3, [r7, #3]
 800aaee:	460b      	mov	r3, r1
 800aaf0:	70bb      	strb	r3, [r7, #2]
 800aaf2:	4613      	mov	r3, r2
 800aaf4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800aafa:	2300      	movs	r3, #0
 800aafc:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800ab04:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ab06:	e025      	b.n	800ab54 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800ab08:	7dfb      	ldrb	r3, [r7, #23]
 800ab0a:	221a      	movs	r2, #26
 800ab0c:	fb02 f303 	mul.w	r3, r2, r3
 800ab10:	3308      	adds	r3, #8
 800ab12:	68fa      	ldr	r2, [r7, #12]
 800ab14:	4413      	add	r3, r2
 800ab16:	3302      	adds	r3, #2
 800ab18:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	795b      	ldrb	r3, [r3, #5]
 800ab1e:	78fa      	ldrb	r2, [r7, #3]
 800ab20:	429a      	cmp	r2, r3
 800ab22:	d002      	beq.n	800ab2a <USBH_FindInterface+0x4e>
 800ab24:	78fb      	ldrb	r3, [r7, #3]
 800ab26:	2bff      	cmp	r3, #255	; 0xff
 800ab28:	d111      	bne.n	800ab4e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ab2a:	693b      	ldr	r3, [r7, #16]
 800ab2c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ab2e:	78ba      	ldrb	r2, [r7, #2]
 800ab30:	429a      	cmp	r2, r3
 800ab32:	d002      	beq.n	800ab3a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ab34:	78bb      	ldrb	r3, [r7, #2]
 800ab36:	2bff      	cmp	r3, #255	; 0xff
 800ab38:	d109      	bne.n	800ab4e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ab3a:	693b      	ldr	r3, [r7, #16]
 800ab3c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ab3e:	787a      	ldrb	r2, [r7, #1]
 800ab40:	429a      	cmp	r2, r3
 800ab42:	d002      	beq.n	800ab4a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ab44:	787b      	ldrb	r3, [r7, #1]
 800ab46:	2bff      	cmp	r3, #255	; 0xff
 800ab48:	d101      	bne.n	800ab4e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800ab4a:	7dfb      	ldrb	r3, [r7, #23]
 800ab4c:	e006      	b.n	800ab5c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800ab4e:	7dfb      	ldrb	r3, [r7, #23]
 800ab50:	3301      	adds	r3, #1
 800ab52:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ab54:	7dfb      	ldrb	r3, [r7, #23]
 800ab56:	2b01      	cmp	r3, #1
 800ab58:	d9d6      	bls.n	800ab08 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800ab5a:	23ff      	movs	r3, #255	; 0xff
}
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	371c      	adds	r7, #28
 800ab60:	46bd      	mov	sp, r7
 800ab62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab66:	4770      	bx	lr

0800ab68 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b082      	sub	sp, #8
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	f001 fbe3 	bl	800c33c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800ab76:	2101      	movs	r1, #1
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f001 fcfc 	bl	800c576 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800ab7e:	2300      	movs	r3, #0
}
 800ab80:	4618      	mov	r0, r3
 800ab82:	3708      	adds	r7, #8
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}

0800ab88 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b088      	sub	sp, #32
 800ab8c:	af04      	add	r7, sp, #16
 800ab8e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800ab90:	2302      	movs	r3, #2
 800ab92:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800ab94:	2300      	movs	r3, #0
 800ab96:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800ab9e:	b2db      	uxtb	r3, r3
 800aba0:	2b01      	cmp	r3, #1
 800aba2:	d102      	bne.n	800abaa <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2203      	movs	r2, #3
 800aba8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	781b      	ldrb	r3, [r3, #0]
 800abae:	b2db      	uxtb	r3, r3
 800abb0:	2b0b      	cmp	r3, #11
 800abb2:	f200 81b3 	bhi.w	800af1c <USBH_Process+0x394>
 800abb6:	a201      	add	r2, pc, #4	; (adr r2, 800abbc <USBH_Process+0x34>)
 800abb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abbc:	0800abed 	.word	0x0800abed
 800abc0:	0800ac1f 	.word	0x0800ac1f
 800abc4:	0800ac87 	.word	0x0800ac87
 800abc8:	0800aeb7 	.word	0x0800aeb7
 800abcc:	0800af1d 	.word	0x0800af1d
 800abd0:	0800ad2b 	.word	0x0800ad2b
 800abd4:	0800ae5d 	.word	0x0800ae5d
 800abd8:	0800ad61 	.word	0x0800ad61
 800abdc:	0800ad81 	.word	0x0800ad81
 800abe0:	0800ada1 	.word	0x0800ada1
 800abe4:	0800adcf 	.word	0x0800adcf
 800abe8:	0800ae9f 	.word	0x0800ae9f
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800abf2:	b2db      	uxtb	r3, r3
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	f000 8193 	beq.w	800af20 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2201      	movs	r2, #1
 800abfe:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800ac00:	20c8      	movs	r0, #200	; 0xc8
 800ac02:	f001 fd2f 	bl	800c664 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f001 fbf5 	bl	800c3f6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2200      	movs	r2, #0
 800ac10:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2200      	movs	r2, #0
 800ac18:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ac1c:	e180      	b.n	800af20 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800ac24:	2b01      	cmp	r3, #1
 800ac26:	d107      	bne.n	800ac38 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2202      	movs	r2, #2
 800ac34:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ac36:	e182      	b.n	800af3e <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ac3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ac42:	d914      	bls.n	800ac6e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ac4a:	3301      	adds	r3, #1
 800ac4c:	b2da      	uxtb	r2, r3
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ac5a:	2b03      	cmp	r3, #3
 800ac5c:	d903      	bls.n	800ac66 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	220d      	movs	r2, #13
 800ac62:	701a      	strb	r2, [r3, #0]
      break;
 800ac64:	e16b      	b.n	800af3e <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2200      	movs	r2, #0
 800ac6a:	701a      	strb	r2, [r3, #0]
      break;
 800ac6c:	e167      	b.n	800af3e <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ac74:	f103 020a 	add.w	r2, r3, #10
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800ac7e:	200a      	movs	r0, #10
 800ac80:	f001 fcf0 	bl	800c664 <USBH_Delay>
      break;
 800ac84:	e15b      	b.n	800af3e <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d005      	beq.n	800ac9c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ac96:	2104      	movs	r1, #4
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800ac9c:	2064      	movs	r0, #100	; 0x64
 800ac9e:	f001 fce1 	bl	800c664 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800aca2:	6878      	ldr	r0, [r7, #4]
 800aca4:	f001 fb80 	bl	800c3a8 <USBH_LL_GetSpeed>
 800aca8:	4603      	mov	r3, r0
 800acaa:	461a      	mov	r2, r3
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2205      	movs	r2, #5
 800acb6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800acb8:	2100      	movs	r1, #0
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	f001 f92f 	bl	800bf1e <USBH_AllocPipe>
 800acc0:	4603      	mov	r3, r0
 800acc2:	461a      	mov	r2, r3
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800acc8:	2180      	movs	r1, #128	; 0x80
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f001 f927 	bl	800bf1e <USBH_AllocPipe>
 800acd0:	4603      	mov	r3, r0
 800acd2:	461a      	mov	r2, r3
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	7919      	ldrb	r1, [r3, #4]
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ace8:	687a      	ldr	r2, [r7, #4]
 800acea:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800acec:	b292      	uxth	r2, r2
 800acee:	9202      	str	r2, [sp, #8]
 800acf0:	2200      	movs	r2, #0
 800acf2:	9201      	str	r2, [sp, #4]
 800acf4:	9300      	str	r3, [sp, #0]
 800acf6:	4603      	mov	r3, r0
 800acf8:	2280      	movs	r2, #128	; 0x80
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f001 f8e0 	bl	800bec0 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	7959      	ldrb	r1, [r3, #5]
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ad10:	687a      	ldr	r2, [r7, #4]
 800ad12:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ad14:	b292      	uxth	r2, r2
 800ad16:	9202      	str	r2, [sp, #8]
 800ad18:	2200      	movs	r2, #0
 800ad1a:	9201      	str	r2, [sp, #4]
 800ad1c:	9300      	str	r3, [sp, #0]
 800ad1e:	4603      	mov	r3, r0
 800ad20:	2200      	movs	r2, #0
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	f001 f8cc 	bl	800bec0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ad28:	e109      	b.n	800af3e <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f000 f90c 	bl	800af48 <USBH_HandleEnum>
 800ad30:	4603      	mov	r3, r0
 800ad32:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800ad34:	7bbb      	ldrb	r3, [r7, #14]
 800ad36:	b2db      	uxtb	r3, r3
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	f040 80f3 	bne.w	800af24 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2200      	movs	r2, #0
 800ad42:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800ad4c:	2b01      	cmp	r3, #1
 800ad4e:	d103      	bne.n	800ad58 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2208      	movs	r2, #8
 800ad54:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ad56:	e0e5      	b.n	800af24 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2207      	movs	r2, #7
 800ad5c:	701a      	strb	r2, [r3, #0]
      break;
 800ad5e:	e0e1      	b.n	800af24 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	f000 80de 	beq.w	800af28 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ad72:	2101      	movs	r1, #1
 800ad74:	6878      	ldr	r0, [r7, #4]
 800ad76:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2208      	movs	r2, #8
 800ad7c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800ad7e:	e0d3      	b.n	800af28 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800ad86:	b29b      	uxth	r3, r3
 800ad88:	4619      	mov	r1, r3
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f000 fc20 	bl	800b5d0 <USBH_SetCfg>
 800ad90:	4603      	mov	r3, r0
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	f040 80ca 	bne.w	800af2c <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2209      	movs	r2, #9
 800ad9c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ad9e:	e0c5      	b.n	800af2c <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800ada6:	f003 0320 	and.w	r3, r3, #32
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d00b      	beq.n	800adc6 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800adae:	2101      	movs	r1, #1
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	f000 fc30 	bl	800b616 <USBH_SetFeature>
 800adb6:	4603      	mov	r3, r0
 800adb8:	2b00      	cmp	r3, #0
 800adba:	f040 80b9 	bne.w	800af30 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	220a      	movs	r2, #10
 800adc2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800adc4:	e0b4      	b.n	800af30 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	220a      	movs	r2, #10
 800adca:	701a      	strb	r2, [r3, #0]
      break;
 800adcc:	e0b0      	b.n	800af30 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800add4:	2b00      	cmp	r3, #0
 800add6:	f000 80ad 	beq.w	800af34 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2200      	movs	r2, #0
 800adde:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800ade2:	2300      	movs	r3, #0
 800ade4:	73fb      	strb	r3, [r7, #15]
 800ade6:	e016      	b.n	800ae16 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800ade8:	7bfa      	ldrb	r2, [r7, #15]
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	32de      	adds	r2, #222	; 0xde
 800adee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adf2:	791a      	ldrb	r2, [r3, #4]
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800adfa:	429a      	cmp	r2, r3
 800adfc:	d108      	bne.n	800ae10 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800adfe:	7bfa      	ldrb	r2, [r7, #15]
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	32de      	adds	r2, #222	; 0xde
 800ae04:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800ae0e:	e005      	b.n	800ae1c <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800ae10:	7bfb      	ldrb	r3, [r7, #15]
 800ae12:	3301      	adds	r3, #1
 800ae14:	73fb      	strb	r3, [r7, #15]
 800ae16:	7bfb      	ldrb	r3, [r7, #15]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d0e5      	beq.n	800ade8 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d016      	beq.n	800ae54 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae2c:	689b      	ldr	r3, [r3, #8]
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	4798      	blx	r3
 800ae32:	4603      	mov	r3, r0
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d109      	bne.n	800ae4c <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2206      	movs	r2, #6
 800ae3c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ae44:	2103      	movs	r1, #3
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ae4a:	e073      	b.n	800af34 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	220d      	movs	r2, #13
 800ae50:	701a      	strb	r2, [r3, #0]
      break;
 800ae52:	e06f      	b.n	800af34 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	220d      	movs	r2, #13
 800ae58:	701a      	strb	r2, [r3, #0]
      break;
 800ae5a:	e06b      	b.n	800af34 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d017      	beq.n	800ae96 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae6c:	691b      	ldr	r3, [r3, #16]
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	4798      	blx	r3
 800ae72:	4603      	mov	r3, r0
 800ae74:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ae76:	7bbb      	ldrb	r3, [r7, #14]
 800ae78:	b2db      	uxtb	r3, r3
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d103      	bne.n	800ae86 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	220b      	movs	r2, #11
 800ae82:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ae84:	e058      	b.n	800af38 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800ae86:	7bbb      	ldrb	r3, [r7, #14]
 800ae88:	b2db      	uxtb	r3, r3
 800ae8a:	2b02      	cmp	r3, #2
 800ae8c:	d154      	bne.n	800af38 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	220d      	movs	r2, #13
 800ae92:	701a      	strb	r2, [r3, #0]
      break;
 800ae94:	e050      	b.n	800af38 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	220d      	movs	r2, #13
 800ae9a:	701a      	strb	r2, [r3, #0]
      break;
 800ae9c:	e04c      	b.n	800af38 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d049      	beq.n	800af3c <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aeae:	695b      	ldr	r3, [r3, #20]
 800aeb0:	6878      	ldr	r0, [r7, #4]
 800aeb2:	4798      	blx	r3
      }
      break;
 800aeb4:	e042      	b.n	800af3c <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2200      	movs	r2, #0
 800aeba:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800aebe:	6878      	ldr	r0, [r7, #4]
 800aec0:	f7ff fd72 	bl	800a9a8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d009      	beq.n	800aee2 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aed4:	68db      	ldr	r3, [r3, #12]
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2200      	movs	r2, #0
 800aede:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d005      	beq.n	800aef8 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800aef2:	2105      	movs	r1, #5
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800aefe:	b2db      	uxtb	r3, r3
 800af00:	2b01      	cmp	r3, #1
 800af02:	d107      	bne.n	800af14 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2200      	movs	r2, #0
 800af08:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f7ff fe2b 	bl	800ab68 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800af12:	e014      	b.n	800af3e <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	f001 fa11 	bl	800c33c <USBH_LL_Start>
      break;
 800af1a:	e010      	b.n	800af3e <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800af1c:	bf00      	nop
 800af1e:	e00e      	b.n	800af3e <USBH_Process+0x3b6>
      break;
 800af20:	bf00      	nop
 800af22:	e00c      	b.n	800af3e <USBH_Process+0x3b6>
      break;
 800af24:	bf00      	nop
 800af26:	e00a      	b.n	800af3e <USBH_Process+0x3b6>
    break;
 800af28:	bf00      	nop
 800af2a:	e008      	b.n	800af3e <USBH_Process+0x3b6>
      break;
 800af2c:	bf00      	nop
 800af2e:	e006      	b.n	800af3e <USBH_Process+0x3b6>
      break;
 800af30:	bf00      	nop
 800af32:	e004      	b.n	800af3e <USBH_Process+0x3b6>
      break;
 800af34:	bf00      	nop
 800af36:	e002      	b.n	800af3e <USBH_Process+0x3b6>
      break;
 800af38:	bf00      	nop
 800af3a:	e000      	b.n	800af3e <USBH_Process+0x3b6>
      break;
 800af3c:	bf00      	nop
  }
  return USBH_OK;
 800af3e:	2300      	movs	r3, #0
}
 800af40:	4618      	mov	r0, r3
 800af42:	3710      	adds	r7, #16
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}

0800af48 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b088      	sub	sp, #32
 800af4c:	af04      	add	r7, sp, #16
 800af4e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800af50:	2301      	movs	r3, #1
 800af52:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800af54:	2301      	movs	r3, #1
 800af56:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	785b      	ldrb	r3, [r3, #1]
 800af5c:	2b07      	cmp	r3, #7
 800af5e:	f200 81c1 	bhi.w	800b2e4 <USBH_HandleEnum+0x39c>
 800af62:	a201      	add	r2, pc, #4	; (adr r2, 800af68 <USBH_HandleEnum+0x20>)
 800af64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af68:	0800af89 	.word	0x0800af89
 800af6c:	0800b047 	.word	0x0800b047
 800af70:	0800b0b1 	.word	0x0800b0b1
 800af74:	0800b13f 	.word	0x0800b13f
 800af78:	0800b1a9 	.word	0x0800b1a9
 800af7c:	0800b219 	.word	0x0800b219
 800af80:	0800b25f 	.word	0x0800b25f
 800af84:	0800b2a5 	.word	0x0800b2a5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800af88:	2108      	movs	r1, #8
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f000 fa50 	bl	800b430 <USBH_Get_DevDesc>
 800af90:	4603      	mov	r3, r0
 800af92:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800af94:	7bbb      	ldrb	r3, [r7, #14]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d130      	bne.n	800affc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2201      	movs	r2, #1
 800afa8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	7919      	ldrb	r1, [r3, #4]
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800afba:	687a      	ldr	r2, [r7, #4]
 800afbc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800afbe:	b292      	uxth	r2, r2
 800afc0:	9202      	str	r2, [sp, #8]
 800afc2:	2200      	movs	r2, #0
 800afc4:	9201      	str	r2, [sp, #4]
 800afc6:	9300      	str	r3, [sp, #0]
 800afc8:	4603      	mov	r3, r0
 800afca:	2280      	movs	r2, #128	; 0x80
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	f000 ff77 	bl	800bec0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	7959      	ldrb	r1, [r3, #5]
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800afe2:	687a      	ldr	r2, [r7, #4]
 800afe4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800afe6:	b292      	uxth	r2, r2
 800afe8:	9202      	str	r2, [sp, #8]
 800afea:	2200      	movs	r2, #0
 800afec:	9201      	str	r2, [sp, #4]
 800afee:	9300      	str	r3, [sp, #0]
 800aff0:	4603      	mov	r3, r0
 800aff2:	2200      	movs	r2, #0
 800aff4:	6878      	ldr	r0, [r7, #4]
 800aff6:	f000 ff63 	bl	800bec0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800affa:	e175      	b.n	800b2e8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800affc:	7bbb      	ldrb	r3, [r7, #14]
 800affe:	2b03      	cmp	r3, #3
 800b000:	f040 8172 	bne.w	800b2e8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b00a:	3301      	adds	r3, #1
 800b00c:	b2da      	uxtb	r2, r3
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b01a:	2b03      	cmp	r3, #3
 800b01c:	d903      	bls.n	800b026 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	220d      	movs	r2, #13
 800b022:	701a      	strb	r2, [r3, #0]
      break;
 800b024:	e160      	b.n	800b2e8 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	795b      	ldrb	r3, [r3, #5]
 800b02a:	4619      	mov	r1, r3
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f000 ff97 	bl	800bf60 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	791b      	ldrb	r3, [r3, #4]
 800b036:	4619      	mov	r1, r3
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f000 ff91 	bl	800bf60 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2200      	movs	r2, #0
 800b042:	701a      	strb	r2, [r3, #0]
      break;
 800b044:	e150      	b.n	800b2e8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800b046:	2112      	movs	r1, #18
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f000 f9f1 	bl	800b430 <USBH_Get_DevDesc>
 800b04e:	4603      	mov	r3, r0
 800b050:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b052:	7bbb      	ldrb	r3, [r7, #14]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d103      	bne.n	800b060 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2202      	movs	r2, #2
 800b05c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b05e:	e145      	b.n	800b2ec <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b060:	7bbb      	ldrb	r3, [r7, #14]
 800b062:	2b03      	cmp	r3, #3
 800b064:	f040 8142 	bne.w	800b2ec <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b06e:	3301      	adds	r3, #1
 800b070:	b2da      	uxtb	r2, r3
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b07e:	2b03      	cmp	r3, #3
 800b080:	d903      	bls.n	800b08a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	220d      	movs	r2, #13
 800b086:	701a      	strb	r2, [r3, #0]
      break;
 800b088:	e130      	b.n	800b2ec <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	795b      	ldrb	r3, [r3, #5]
 800b08e:	4619      	mov	r1, r3
 800b090:	6878      	ldr	r0, [r7, #4]
 800b092:	f000 ff65 	bl	800bf60 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	791b      	ldrb	r3, [r3, #4]
 800b09a:	4619      	mov	r1, r3
 800b09c:	6878      	ldr	r0, [r7, #4]
 800b09e:	f000 ff5f 	bl	800bf60 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	701a      	strb	r2, [r3, #0]
      break;
 800b0ae:	e11d      	b.n	800b2ec <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800b0b0:	2101      	movs	r1, #1
 800b0b2:	6878      	ldr	r0, [r7, #4]
 800b0b4:	f000 fa68 	bl	800b588 <USBH_SetAddress>
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b0bc:	7bbb      	ldrb	r3, [r7, #14]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d132      	bne.n	800b128 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800b0c2:	2002      	movs	r0, #2
 800b0c4:	f001 face 	bl	800c664 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2201      	movs	r2, #1
 800b0cc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2203      	movs	r2, #3
 800b0d4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	7919      	ldrb	r1, [r3, #4]
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b0e6:	687a      	ldr	r2, [r7, #4]
 800b0e8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b0ea:	b292      	uxth	r2, r2
 800b0ec:	9202      	str	r2, [sp, #8]
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	9201      	str	r2, [sp, #4]
 800b0f2:	9300      	str	r3, [sp, #0]
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	2280      	movs	r2, #128	; 0x80
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f000 fee1 	bl	800bec0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	7959      	ldrb	r1, [r3, #5]
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b10e:	687a      	ldr	r2, [r7, #4]
 800b110:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b112:	b292      	uxth	r2, r2
 800b114:	9202      	str	r2, [sp, #8]
 800b116:	2200      	movs	r2, #0
 800b118:	9201      	str	r2, [sp, #4]
 800b11a:	9300      	str	r3, [sp, #0]
 800b11c:	4603      	mov	r3, r0
 800b11e:	2200      	movs	r2, #0
 800b120:	6878      	ldr	r0, [r7, #4]
 800b122:	f000 fecd 	bl	800bec0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b126:	e0e3      	b.n	800b2f0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b128:	7bbb      	ldrb	r3, [r7, #14]
 800b12a:	2b03      	cmp	r3, #3
 800b12c:	f040 80e0 	bne.w	800b2f0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	220d      	movs	r2, #13
 800b134:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	2200      	movs	r2, #0
 800b13a:	705a      	strb	r2, [r3, #1]
      break;
 800b13c:	e0d8      	b.n	800b2f0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800b13e:	2109      	movs	r1, #9
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f000 f99d 	bl	800b480 <USBH_Get_CfgDesc>
 800b146:	4603      	mov	r3, r0
 800b148:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b14a:	7bbb      	ldrb	r3, [r7, #14]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d103      	bne.n	800b158 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2204      	movs	r2, #4
 800b154:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b156:	e0cd      	b.n	800b2f4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b158:	7bbb      	ldrb	r3, [r7, #14]
 800b15a:	2b03      	cmp	r3, #3
 800b15c:	f040 80ca 	bne.w	800b2f4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b166:	3301      	adds	r3, #1
 800b168:	b2da      	uxtb	r2, r3
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b176:	2b03      	cmp	r3, #3
 800b178:	d903      	bls.n	800b182 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	220d      	movs	r2, #13
 800b17e:	701a      	strb	r2, [r3, #0]
      break;
 800b180:	e0b8      	b.n	800b2f4 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	795b      	ldrb	r3, [r3, #5]
 800b186:	4619      	mov	r1, r3
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f000 fee9 	bl	800bf60 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	791b      	ldrb	r3, [r3, #4]
 800b192:	4619      	mov	r1, r3
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f000 fee3 	bl	800bf60 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2200      	movs	r2, #0
 800b19e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	701a      	strb	r2, [r3, #0]
      break;
 800b1a6:	e0a5      	b.n	800b2f4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800b1ae:	4619      	mov	r1, r3
 800b1b0:	6878      	ldr	r0, [r7, #4]
 800b1b2:	f000 f965 	bl	800b480 <USBH_Get_CfgDesc>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b1ba:	7bbb      	ldrb	r3, [r7, #14]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d103      	bne.n	800b1c8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2205      	movs	r2, #5
 800b1c4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b1c6:	e097      	b.n	800b2f8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b1c8:	7bbb      	ldrb	r3, [r7, #14]
 800b1ca:	2b03      	cmp	r3, #3
 800b1cc:	f040 8094 	bne.w	800b2f8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b1d6:	3301      	adds	r3, #1
 800b1d8:	b2da      	uxtb	r2, r3
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b1e6:	2b03      	cmp	r3, #3
 800b1e8:	d903      	bls.n	800b1f2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	220d      	movs	r2, #13
 800b1ee:	701a      	strb	r2, [r3, #0]
      break;
 800b1f0:	e082      	b.n	800b2f8 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	795b      	ldrb	r3, [r3, #5]
 800b1f6:	4619      	mov	r1, r3
 800b1f8:	6878      	ldr	r0, [r7, #4]
 800b1fa:	f000 feb1 	bl	800bf60 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	791b      	ldrb	r3, [r3, #4]
 800b202:	4619      	mov	r1, r3
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	f000 feab 	bl	800bf60 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2200      	movs	r2, #0
 800b20e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2200      	movs	r2, #0
 800b214:	701a      	strb	r2, [r3, #0]
      break;
 800b216:	e06f      	b.n	800b2f8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d019      	beq.n	800b256 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b22e:	23ff      	movs	r3, #255	; 0xff
 800b230:	6878      	ldr	r0, [r7, #4]
 800b232:	f000 f949 	bl	800b4c8 <USBH_Get_StringDesc>
 800b236:	4603      	mov	r3, r0
 800b238:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b23a:	7bbb      	ldrb	r3, [r7, #14]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d103      	bne.n	800b248 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2206      	movs	r2, #6
 800b244:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b246:	e059      	b.n	800b2fc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b248:	7bbb      	ldrb	r3, [r7, #14]
 800b24a:	2b03      	cmp	r3, #3
 800b24c:	d156      	bne.n	800b2fc <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2206      	movs	r2, #6
 800b252:	705a      	strb	r2, [r3, #1]
      break;
 800b254:	e052      	b.n	800b2fc <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	2206      	movs	r2, #6
 800b25a:	705a      	strb	r2, [r3, #1]
      break;
 800b25c:	e04e      	b.n	800b2fc <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800b264:	2b00      	cmp	r3, #0
 800b266:	d019      	beq.n	800b29c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b274:	23ff      	movs	r3, #255	; 0xff
 800b276:	6878      	ldr	r0, [r7, #4]
 800b278:	f000 f926 	bl	800b4c8 <USBH_Get_StringDesc>
 800b27c:	4603      	mov	r3, r0
 800b27e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b280:	7bbb      	ldrb	r3, [r7, #14]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d103      	bne.n	800b28e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2207      	movs	r2, #7
 800b28a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b28c:	e038      	b.n	800b300 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b28e:	7bbb      	ldrb	r3, [r7, #14]
 800b290:	2b03      	cmp	r3, #3
 800b292:	d135      	bne.n	800b300 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2207      	movs	r2, #7
 800b298:	705a      	strb	r2, [r3, #1]
      break;
 800b29a:	e031      	b.n	800b300 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2207      	movs	r2, #7
 800b2a0:	705a      	strb	r2, [r3, #1]
      break;
 800b2a2:	e02d      	b.n	800b300 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d017      	beq.n	800b2de <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b2ba:	23ff      	movs	r3, #255	; 0xff
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	f000 f903 	bl	800b4c8 <USBH_Get_StringDesc>
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b2c6:	7bbb      	ldrb	r3, [r7, #14]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d102      	bne.n	800b2d2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800b2d0:	e018      	b.n	800b304 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b2d2:	7bbb      	ldrb	r3, [r7, #14]
 800b2d4:	2b03      	cmp	r3, #3
 800b2d6:	d115      	bne.n	800b304 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800b2d8:	2300      	movs	r3, #0
 800b2da:	73fb      	strb	r3, [r7, #15]
      break;
 800b2dc:	e012      	b.n	800b304 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800b2de:	2300      	movs	r3, #0
 800b2e0:	73fb      	strb	r3, [r7, #15]
      break;
 800b2e2:	e00f      	b.n	800b304 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800b2e4:	bf00      	nop
 800b2e6:	e00e      	b.n	800b306 <USBH_HandleEnum+0x3be>
      break;
 800b2e8:	bf00      	nop
 800b2ea:	e00c      	b.n	800b306 <USBH_HandleEnum+0x3be>
      break;
 800b2ec:	bf00      	nop
 800b2ee:	e00a      	b.n	800b306 <USBH_HandleEnum+0x3be>
      break;
 800b2f0:	bf00      	nop
 800b2f2:	e008      	b.n	800b306 <USBH_HandleEnum+0x3be>
      break;
 800b2f4:	bf00      	nop
 800b2f6:	e006      	b.n	800b306 <USBH_HandleEnum+0x3be>
      break;
 800b2f8:	bf00      	nop
 800b2fa:	e004      	b.n	800b306 <USBH_HandleEnum+0x3be>
      break;
 800b2fc:	bf00      	nop
 800b2fe:	e002      	b.n	800b306 <USBH_HandleEnum+0x3be>
      break;
 800b300:	bf00      	nop
 800b302:	e000      	b.n	800b306 <USBH_HandleEnum+0x3be>
      break;
 800b304:	bf00      	nop
  }
  return Status;
 800b306:	7bfb      	ldrb	r3, [r7, #15]
}
 800b308:	4618      	mov	r0, r3
 800b30a:	3710      	adds	r7, #16
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}

0800b310 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800b310:	b480      	push	{r7}
 800b312:	b083      	sub	sp, #12
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
 800b318:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	683a      	ldr	r2, [r7, #0]
 800b31e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800b322:	bf00      	nop
 800b324:	370c      	adds	r7, #12
 800b326:	46bd      	mov	sp, r7
 800b328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32c:	4770      	bx	lr

0800b32e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b32e:	b580      	push	{r7, lr}
 800b330:	b082      	sub	sp, #8
 800b332:	af00      	add	r7, sp, #0
 800b334:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b33c:	1c5a      	adds	r2, r3, #1
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800b344:	6878      	ldr	r0, [r7, #4]
 800b346:	f000 f804 	bl	800b352 <USBH_HandleSof>
}
 800b34a:	bf00      	nop
 800b34c:	3708      	adds	r7, #8
 800b34e:	46bd      	mov	sp, r7
 800b350:	bd80      	pop	{r7, pc}

0800b352 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b352:	b580      	push	{r7, lr}
 800b354:	b082      	sub	sp, #8
 800b356:	af00      	add	r7, sp, #0
 800b358:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	781b      	ldrb	r3, [r3, #0]
 800b35e:	b2db      	uxtb	r3, r3
 800b360:	2b0b      	cmp	r3, #11
 800b362:	d10a      	bne.n	800b37a <USBH_HandleSof+0x28>
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d005      	beq.n	800b37a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b374:	699b      	ldr	r3, [r3, #24]
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	4798      	blx	r3
  }
}
 800b37a:	bf00      	nop
 800b37c:	3708      	adds	r7, #8
 800b37e:	46bd      	mov	sp, r7
 800b380:	bd80      	pop	{r7, pc}

0800b382 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b382:	b480      	push	{r7}
 800b384:	b083      	sub	sp, #12
 800b386:	af00      	add	r7, sp, #0
 800b388:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2201      	movs	r2, #1
 800b38e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800b392:	bf00      	nop
}
 800b394:	370c      	adds	r7, #12
 800b396:	46bd      	mov	sp, r7
 800b398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39c:	4770      	bx	lr

0800b39e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b39e:	b480      	push	{r7}
 800b3a0:	b083      	sub	sp, #12
 800b3a2:	af00      	add	r7, sp, #0
 800b3a4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800b3ae:	bf00      	nop
}
 800b3b0:	370c      	adds	r7, #12
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b8:	4770      	bx	lr

0800b3ba <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b3ba:	b480      	push	{r7}
 800b3bc:	b083      	sub	sp, #12
 800b3be:	af00      	add	r7, sp, #0
 800b3c0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2201      	movs	r2, #1
 800b3c6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b3da:	2300      	movs	r3, #0
}
 800b3dc:	4618      	mov	r0, r3
 800b3de:	370c      	adds	r7, #12
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e6:	4770      	bx	lr

0800b3e8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b082      	sub	sp, #8
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2201      	movs	r2, #1
 800b3f4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2200      	movs	r2, #0
 800b404:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800b408:	6878      	ldr	r0, [r7, #4]
 800b40a:	f000 ffb2 	bl	800c372 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	791b      	ldrb	r3, [r3, #4]
 800b412:	4619      	mov	r1, r3
 800b414:	6878      	ldr	r0, [r7, #4]
 800b416:	f000 fda3 	bl	800bf60 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	795b      	ldrb	r3, [r3, #5]
 800b41e:	4619      	mov	r1, r3
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f000 fd9d 	bl	800bf60 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b426:	2300      	movs	r3, #0
}
 800b428:	4618      	mov	r0, r3
 800b42a:	3708      	adds	r7, #8
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}

0800b430 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b086      	sub	sp, #24
 800b434:	af02      	add	r7, sp, #8
 800b436:	6078      	str	r0, [r7, #4]
 800b438:	460b      	mov	r3, r1
 800b43a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b442:	78fb      	ldrb	r3, [r7, #3]
 800b444:	b29b      	uxth	r3, r3
 800b446:	9300      	str	r3, [sp, #0]
 800b448:	4613      	mov	r3, r2
 800b44a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b44e:	2100      	movs	r1, #0
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	f000 f864 	bl	800b51e <USBH_GetDescriptor>
 800b456:	4603      	mov	r3, r0
 800b458:	73fb      	strb	r3, [r7, #15]
 800b45a:	7bfb      	ldrb	r3, [r7, #15]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d10a      	bne.n	800b476 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f203 3026 	addw	r0, r3, #806	; 0x326
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b46c:	78fa      	ldrb	r2, [r7, #3]
 800b46e:	b292      	uxth	r2, r2
 800b470:	4619      	mov	r1, r3
 800b472:	f000 f918 	bl	800b6a6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800b476:	7bfb      	ldrb	r3, [r7, #15]
}
 800b478:	4618      	mov	r0, r3
 800b47a:	3710      	adds	r7, #16
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bd80      	pop	{r7, pc}

0800b480 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800b480:	b580      	push	{r7, lr}
 800b482:	b086      	sub	sp, #24
 800b484:	af02      	add	r7, sp, #8
 800b486:	6078      	str	r0, [r7, #4]
 800b488:	460b      	mov	r3, r1
 800b48a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	331c      	adds	r3, #28
 800b490:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b492:	887b      	ldrh	r3, [r7, #2]
 800b494:	9300      	str	r3, [sp, #0]
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b49c:	2100      	movs	r1, #0
 800b49e:	6878      	ldr	r0, [r7, #4]
 800b4a0:	f000 f83d 	bl	800b51e <USBH_GetDescriptor>
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	72fb      	strb	r3, [r7, #11]
 800b4a8:	7afb      	ldrb	r3, [r7, #11]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d107      	bne.n	800b4be <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b4b4:	887a      	ldrh	r2, [r7, #2]
 800b4b6:	68f9      	ldr	r1, [r7, #12]
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f000 f964 	bl	800b786 <USBH_ParseCfgDesc>
  }

  return status;
 800b4be:	7afb      	ldrb	r3, [r7, #11]
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	3710      	adds	r7, #16
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bd80      	pop	{r7, pc}

0800b4c8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b088      	sub	sp, #32
 800b4cc:	af02      	add	r7, sp, #8
 800b4ce:	60f8      	str	r0, [r7, #12]
 800b4d0:	607a      	str	r2, [r7, #4]
 800b4d2:	461a      	mov	r2, r3
 800b4d4:	460b      	mov	r3, r1
 800b4d6:	72fb      	strb	r3, [r7, #11]
 800b4d8:	4613      	mov	r3, r2
 800b4da:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800b4dc:	7afb      	ldrb	r3, [r7, #11]
 800b4de:	b29b      	uxth	r3, r3
 800b4e0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800b4e4:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b4ec:	893b      	ldrh	r3, [r7, #8]
 800b4ee:	9300      	str	r3, [sp, #0]
 800b4f0:	460b      	mov	r3, r1
 800b4f2:	2100      	movs	r1, #0
 800b4f4:	68f8      	ldr	r0, [r7, #12]
 800b4f6:	f000 f812 	bl	800b51e <USBH_GetDescriptor>
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	75fb      	strb	r3, [r7, #23]
 800b4fe:	7dfb      	ldrb	r3, [r7, #23]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d107      	bne.n	800b514 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b50a:	893a      	ldrh	r2, [r7, #8]
 800b50c:	6879      	ldr	r1, [r7, #4]
 800b50e:	4618      	mov	r0, r3
 800b510:	f000 fa37 	bl	800b982 <USBH_ParseStringDesc>
  }

  return status;
 800b514:	7dfb      	ldrb	r3, [r7, #23]
}
 800b516:	4618      	mov	r0, r3
 800b518:	3718      	adds	r7, #24
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd80      	pop	{r7, pc}

0800b51e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800b51e:	b580      	push	{r7, lr}
 800b520:	b084      	sub	sp, #16
 800b522:	af00      	add	r7, sp, #0
 800b524:	60f8      	str	r0, [r7, #12]
 800b526:	607b      	str	r3, [r7, #4]
 800b528:	460b      	mov	r3, r1
 800b52a:	72fb      	strb	r3, [r7, #11]
 800b52c:	4613      	mov	r3, r2
 800b52e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	789b      	ldrb	r3, [r3, #2]
 800b534:	2b01      	cmp	r3, #1
 800b536:	d11c      	bne.n	800b572 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b538:	7afb      	ldrb	r3, [r7, #11]
 800b53a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b53e:	b2da      	uxtb	r2, r3
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	2206      	movs	r2, #6
 800b548:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	893a      	ldrh	r2, [r7, #8]
 800b54e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b550:	893b      	ldrh	r3, [r7, #8]
 800b552:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b556:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b55a:	d104      	bne.n	800b566 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	f240 4209 	movw	r2, #1033	; 0x409
 800b562:	829a      	strh	r2, [r3, #20]
 800b564:	e002      	b.n	800b56c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	2200      	movs	r2, #0
 800b56a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	8b3a      	ldrh	r2, [r7, #24]
 800b570:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b572:	8b3b      	ldrh	r3, [r7, #24]
 800b574:	461a      	mov	r2, r3
 800b576:	6879      	ldr	r1, [r7, #4]
 800b578:	68f8      	ldr	r0, [r7, #12]
 800b57a:	f000 fa50 	bl	800ba1e <USBH_CtlReq>
 800b57e:	4603      	mov	r3, r0
}
 800b580:	4618      	mov	r0, r3
 800b582:	3710      	adds	r7, #16
 800b584:	46bd      	mov	sp, r7
 800b586:	bd80      	pop	{r7, pc}

0800b588 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b082      	sub	sp, #8
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
 800b590:	460b      	mov	r3, r1
 800b592:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	789b      	ldrb	r3, [r3, #2]
 800b598:	2b01      	cmp	r3, #1
 800b59a:	d10f      	bne.n	800b5bc <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2200      	movs	r2, #0
 800b5a0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	2205      	movs	r2, #5
 800b5a6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b5a8:	78fb      	ldrb	r3, [r7, #3]
 800b5aa:	b29a      	uxth	r2, r3
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b5bc:	2200      	movs	r2, #0
 800b5be:	2100      	movs	r1, #0
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	f000 fa2c 	bl	800ba1e <USBH_CtlReq>
 800b5c6:	4603      	mov	r3, r0
}
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	3708      	adds	r7, #8
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bd80      	pop	{r7, pc}

0800b5d0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b082      	sub	sp, #8
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
 800b5d8:	460b      	mov	r3, r1
 800b5da:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	789b      	ldrb	r3, [r3, #2]
 800b5e0:	2b01      	cmp	r3, #1
 800b5e2:	d10e      	bne.n	800b602 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2209      	movs	r2, #9
 800b5ee:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	887a      	ldrh	r2, [r7, #2]
 800b5f4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2200      	movs	r2, #0
 800b600:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b602:	2200      	movs	r2, #0
 800b604:	2100      	movs	r1, #0
 800b606:	6878      	ldr	r0, [r7, #4]
 800b608:	f000 fa09 	bl	800ba1e <USBH_CtlReq>
 800b60c:	4603      	mov	r3, r0
}
 800b60e:	4618      	mov	r0, r3
 800b610:	3708      	adds	r7, #8
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}

0800b616 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b616:	b580      	push	{r7, lr}
 800b618:	b082      	sub	sp, #8
 800b61a:	af00      	add	r7, sp, #0
 800b61c:	6078      	str	r0, [r7, #4]
 800b61e:	460b      	mov	r3, r1
 800b620:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	789b      	ldrb	r3, [r3, #2]
 800b626:	2b01      	cmp	r3, #1
 800b628:	d10f      	bne.n	800b64a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2200      	movs	r2, #0
 800b62e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2203      	movs	r2, #3
 800b634:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b636:	78fb      	ldrb	r3, [r7, #3]
 800b638:	b29a      	uxth	r2, r3
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2200      	movs	r2, #0
 800b642:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2200      	movs	r2, #0
 800b648:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b64a:	2200      	movs	r2, #0
 800b64c:	2100      	movs	r1, #0
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f000 f9e5 	bl	800ba1e <USBH_CtlReq>
 800b654:	4603      	mov	r3, r0
}
 800b656:	4618      	mov	r0, r3
 800b658:	3708      	adds	r7, #8
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bd80      	pop	{r7, pc}

0800b65e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b65e:	b580      	push	{r7, lr}
 800b660:	b082      	sub	sp, #8
 800b662:	af00      	add	r7, sp, #0
 800b664:	6078      	str	r0, [r7, #4]
 800b666:	460b      	mov	r3, r1
 800b668:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	789b      	ldrb	r3, [r3, #2]
 800b66e:	2b01      	cmp	r3, #1
 800b670:	d10f      	bne.n	800b692 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	2202      	movs	r2, #2
 800b676:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2201      	movs	r2, #1
 800b67c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2200      	movs	r2, #0
 800b682:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b684:	78fb      	ldrb	r3, [r7, #3]
 800b686:	b29a      	uxth	r2, r3
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2200      	movs	r2, #0
 800b690:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800b692:	2200      	movs	r2, #0
 800b694:	2100      	movs	r1, #0
 800b696:	6878      	ldr	r0, [r7, #4]
 800b698:	f000 f9c1 	bl	800ba1e <USBH_CtlReq>
 800b69c:	4603      	mov	r3, r0
}
 800b69e:	4618      	mov	r0, r3
 800b6a0:	3708      	adds	r7, #8
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}

0800b6a6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800b6a6:	b480      	push	{r7}
 800b6a8:	b085      	sub	sp, #20
 800b6aa:	af00      	add	r7, sp, #0
 800b6ac:	60f8      	str	r0, [r7, #12]
 800b6ae:	60b9      	str	r1, [r7, #8]
 800b6b0:	4613      	mov	r3, r2
 800b6b2:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800b6b4:	68bb      	ldr	r3, [r7, #8]
 800b6b6:	781a      	ldrb	r2, [r3, #0]
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800b6bc:	68bb      	ldr	r3, [r7, #8]
 800b6be:	785a      	ldrb	r2, [r3, #1]
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800b6c4:	68bb      	ldr	r3, [r7, #8]
 800b6c6:	3302      	adds	r3, #2
 800b6c8:	781b      	ldrb	r3, [r3, #0]
 800b6ca:	b29a      	uxth	r2, r3
 800b6cc:	68bb      	ldr	r3, [r7, #8]
 800b6ce:	3303      	adds	r3, #3
 800b6d0:	781b      	ldrb	r3, [r3, #0]
 800b6d2:	b29b      	uxth	r3, r3
 800b6d4:	021b      	lsls	r3, r3, #8
 800b6d6:	b29b      	uxth	r3, r3
 800b6d8:	4313      	orrs	r3, r2
 800b6da:	b29a      	uxth	r2, r3
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	791a      	ldrb	r2, [r3, #4]
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800b6e8:	68bb      	ldr	r3, [r7, #8]
 800b6ea:	795a      	ldrb	r2, [r3, #5]
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800b6f0:	68bb      	ldr	r3, [r7, #8]
 800b6f2:	799a      	ldrb	r2, [r3, #6]
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	79da      	ldrb	r2, [r3, #7]
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800b700:	88fb      	ldrh	r3, [r7, #6]
 800b702:	2b08      	cmp	r3, #8
 800b704:	d939      	bls.n	800b77a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	3308      	adds	r3, #8
 800b70a:	781b      	ldrb	r3, [r3, #0]
 800b70c:	b29a      	uxth	r2, r3
 800b70e:	68bb      	ldr	r3, [r7, #8]
 800b710:	3309      	adds	r3, #9
 800b712:	781b      	ldrb	r3, [r3, #0]
 800b714:	b29b      	uxth	r3, r3
 800b716:	021b      	lsls	r3, r3, #8
 800b718:	b29b      	uxth	r3, r3
 800b71a:	4313      	orrs	r3, r2
 800b71c:	b29a      	uxth	r2, r3
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800b722:	68bb      	ldr	r3, [r7, #8]
 800b724:	330a      	adds	r3, #10
 800b726:	781b      	ldrb	r3, [r3, #0]
 800b728:	b29a      	uxth	r2, r3
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	330b      	adds	r3, #11
 800b72e:	781b      	ldrb	r3, [r3, #0]
 800b730:	b29b      	uxth	r3, r3
 800b732:	021b      	lsls	r3, r3, #8
 800b734:	b29b      	uxth	r3, r3
 800b736:	4313      	orrs	r3, r2
 800b738:	b29a      	uxth	r2, r3
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	330c      	adds	r3, #12
 800b742:	781b      	ldrb	r3, [r3, #0]
 800b744:	b29a      	uxth	r2, r3
 800b746:	68bb      	ldr	r3, [r7, #8]
 800b748:	330d      	adds	r3, #13
 800b74a:	781b      	ldrb	r3, [r3, #0]
 800b74c:	b29b      	uxth	r3, r3
 800b74e:	021b      	lsls	r3, r3, #8
 800b750:	b29b      	uxth	r3, r3
 800b752:	4313      	orrs	r3, r2
 800b754:	b29a      	uxth	r2, r3
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800b75a:	68bb      	ldr	r3, [r7, #8]
 800b75c:	7b9a      	ldrb	r2, [r3, #14]
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800b762:	68bb      	ldr	r3, [r7, #8]
 800b764:	7bda      	ldrb	r2, [r3, #15]
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800b76a:	68bb      	ldr	r3, [r7, #8]
 800b76c:	7c1a      	ldrb	r2, [r3, #16]
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	7c5a      	ldrb	r2, [r3, #17]
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	745a      	strb	r2, [r3, #17]
  }
}
 800b77a:	bf00      	nop
 800b77c:	3714      	adds	r7, #20
 800b77e:	46bd      	mov	sp, r7
 800b780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b784:	4770      	bx	lr

0800b786 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800b786:	b580      	push	{r7, lr}
 800b788:	b08a      	sub	sp, #40	; 0x28
 800b78a:	af00      	add	r7, sp, #0
 800b78c:	60f8      	str	r0, [r7, #12]
 800b78e:	60b9      	str	r1, [r7, #8]
 800b790:	4613      	mov	r3, r2
 800b792:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b798:	2300      	movs	r3, #0
 800b79a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800b79e:	2300      	movs	r3, #0
 800b7a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800b7a4:	68bb      	ldr	r3, [r7, #8]
 800b7a6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800b7a8:	68bb      	ldr	r3, [r7, #8]
 800b7aa:	781a      	ldrb	r2, [r3, #0]
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b7b0:	68bb      	ldr	r3, [r7, #8]
 800b7b2:	785a      	ldrb	r2, [r3, #1]
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	3302      	adds	r3, #2
 800b7bc:	781b      	ldrb	r3, [r3, #0]
 800b7be:	b29a      	uxth	r2, r3
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	3303      	adds	r3, #3
 800b7c4:	781b      	ldrb	r3, [r3, #0]
 800b7c6:	b29b      	uxth	r3, r3
 800b7c8:	021b      	lsls	r3, r3, #8
 800b7ca:	b29b      	uxth	r3, r3
 800b7cc:	4313      	orrs	r3, r2
 800b7ce:	b29a      	uxth	r2, r3
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	791a      	ldrb	r2, [r3, #4]
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	795a      	ldrb	r2, [r3, #5]
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	799a      	ldrb	r2, [r3, #6]
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	79da      	ldrb	r2, [r3, #7]
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	7a1a      	ldrb	r2, [r3, #8]
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b7fc:	88fb      	ldrh	r3, [r7, #6]
 800b7fe:	2b09      	cmp	r3, #9
 800b800:	d95f      	bls.n	800b8c2 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800b802:	2309      	movs	r3, #9
 800b804:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800b806:	2300      	movs	r3, #0
 800b808:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b80a:	e051      	b.n	800b8b0 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b80c:	f107 0316 	add.w	r3, r7, #22
 800b810:	4619      	mov	r1, r3
 800b812:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b814:	f000 f8e8 	bl	800b9e8 <USBH_GetNextDesc>
 800b818:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800b81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b81c:	785b      	ldrb	r3, [r3, #1]
 800b81e:	2b04      	cmp	r3, #4
 800b820:	d146      	bne.n	800b8b0 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800b822:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b826:	221a      	movs	r2, #26
 800b828:	fb02 f303 	mul.w	r3, r2, r3
 800b82c:	3308      	adds	r3, #8
 800b82e:	68fa      	ldr	r2, [r7, #12]
 800b830:	4413      	add	r3, r2
 800b832:	3302      	adds	r3, #2
 800b834:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b836:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b838:	69f8      	ldr	r0, [r7, #28]
 800b83a:	f000 f846 	bl	800b8ca <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b83e:	2300      	movs	r3, #0
 800b840:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800b844:	2300      	movs	r3, #0
 800b846:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b848:	e022      	b.n	800b890 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b84a:	f107 0316 	add.w	r3, r7, #22
 800b84e:	4619      	mov	r1, r3
 800b850:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b852:	f000 f8c9 	bl	800b9e8 <USBH_GetNextDesc>
 800b856:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800b858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b85a:	785b      	ldrb	r3, [r3, #1]
 800b85c:	2b05      	cmp	r3, #5
 800b85e:	d117      	bne.n	800b890 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b860:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b864:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b868:	3201      	adds	r2, #1
 800b86a:	00d2      	lsls	r2, r2, #3
 800b86c:	211a      	movs	r1, #26
 800b86e:	fb01 f303 	mul.w	r3, r1, r3
 800b872:	4413      	add	r3, r2
 800b874:	3308      	adds	r3, #8
 800b876:	68fa      	ldr	r2, [r7, #12]
 800b878:	4413      	add	r3, r2
 800b87a:	3304      	adds	r3, #4
 800b87c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800b87e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b880:	69b8      	ldr	r0, [r7, #24]
 800b882:	f000 f851 	bl	800b928 <USBH_ParseEPDesc>
            ep_ix++;
 800b886:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b88a:	3301      	adds	r3, #1
 800b88c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b890:	69fb      	ldr	r3, [r7, #28]
 800b892:	791b      	ldrb	r3, [r3, #4]
 800b894:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b898:	429a      	cmp	r2, r3
 800b89a:	d204      	bcs.n	800b8a6 <USBH_ParseCfgDesc+0x120>
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	885a      	ldrh	r2, [r3, #2]
 800b8a0:	8afb      	ldrh	r3, [r7, #22]
 800b8a2:	429a      	cmp	r2, r3
 800b8a4:	d8d1      	bhi.n	800b84a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800b8a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b8aa:	3301      	adds	r3, #1
 800b8ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b8b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b8b4:	2b01      	cmp	r3, #1
 800b8b6:	d804      	bhi.n	800b8c2 <USBH_ParseCfgDesc+0x13c>
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	885a      	ldrh	r2, [r3, #2]
 800b8bc:	8afb      	ldrh	r3, [r7, #22]
 800b8be:	429a      	cmp	r2, r3
 800b8c0:	d8a4      	bhi.n	800b80c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800b8c2:	bf00      	nop
 800b8c4:	3728      	adds	r7, #40	; 0x28
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bd80      	pop	{r7, pc}

0800b8ca <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800b8ca:	b480      	push	{r7}
 800b8cc:	b083      	sub	sp, #12
 800b8ce:	af00      	add	r7, sp, #0
 800b8d0:	6078      	str	r0, [r7, #4]
 800b8d2:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	781a      	ldrb	r2, [r3, #0]
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	785a      	ldrb	r2, [r3, #1]
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	789a      	ldrb	r2, [r3, #2]
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	78da      	ldrb	r2, [r3, #3]
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	791a      	ldrb	r2, [r3, #4]
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	795a      	ldrb	r2, [r3, #5]
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	799a      	ldrb	r2, [r3, #6]
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	79da      	ldrb	r2, [r3, #7]
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	7a1a      	ldrb	r2, [r3, #8]
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	721a      	strb	r2, [r3, #8]
}
 800b91c:	bf00      	nop
 800b91e:	370c      	adds	r7, #12
 800b920:	46bd      	mov	sp, r7
 800b922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b926:	4770      	bx	lr

0800b928 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800b928:	b480      	push	{r7}
 800b92a:	b083      	sub	sp, #12
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
 800b930:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	781a      	ldrb	r2, [r3, #0]
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	785a      	ldrb	r2, [r3, #1]
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	789a      	ldrb	r2, [r3, #2]
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	78da      	ldrb	r2, [r3, #3]
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	3304      	adds	r3, #4
 800b956:	781b      	ldrb	r3, [r3, #0]
 800b958:	b29a      	uxth	r2, r3
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	3305      	adds	r3, #5
 800b95e:	781b      	ldrb	r3, [r3, #0]
 800b960:	b29b      	uxth	r3, r3
 800b962:	021b      	lsls	r3, r3, #8
 800b964:	b29b      	uxth	r3, r3
 800b966:	4313      	orrs	r3, r2
 800b968:	b29a      	uxth	r2, r3
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	799a      	ldrb	r2, [r3, #6]
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	719a      	strb	r2, [r3, #6]
}
 800b976:	bf00      	nop
 800b978:	370c      	adds	r7, #12
 800b97a:	46bd      	mov	sp, r7
 800b97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b980:	4770      	bx	lr

0800b982 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b982:	b480      	push	{r7}
 800b984:	b087      	sub	sp, #28
 800b986:	af00      	add	r7, sp, #0
 800b988:	60f8      	str	r0, [r7, #12]
 800b98a:	60b9      	str	r1, [r7, #8]
 800b98c:	4613      	mov	r3, r2
 800b98e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	3301      	adds	r3, #1
 800b994:	781b      	ldrb	r3, [r3, #0]
 800b996:	2b03      	cmp	r3, #3
 800b998:	d120      	bne.n	800b9dc <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	781b      	ldrb	r3, [r3, #0]
 800b99e:	1e9a      	subs	r2, r3, #2
 800b9a0:	88fb      	ldrh	r3, [r7, #6]
 800b9a2:	4293      	cmp	r3, r2
 800b9a4:	bf28      	it	cs
 800b9a6:	4613      	movcs	r3, r2
 800b9a8:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	3302      	adds	r3, #2
 800b9ae:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	82fb      	strh	r3, [r7, #22]
 800b9b4:	e00b      	b.n	800b9ce <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b9b6:	8afb      	ldrh	r3, [r7, #22]
 800b9b8:	68fa      	ldr	r2, [r7, #12]
 800b9ba:	4413      	add	r3, r2
 800b9bc:	781a      	ldrb	r2, [r3, #0]
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b9c2:	68bb      	ldr	r3, [r7, #8]
 800b9c4:	3301      	adds	r3, #1
 800b9c6:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b9c8:	8afb      	ldrh	r3, [r7, #22]
 800b9ca:	3302      	adds	r3, #2
 800b9cc:	82fb      	strh	r3, [r7, #22]
 800b9ce:	8afa      	ldrh	r2, [r7, #22]
 800b9d0:	8abb      	ldrh	r3, [r7, #20]
 800b9d2:	429a      	cmp	r2, r3
 800b9d4:	d3ef      	bcc.n	800b9b6 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b9d6:	68bb      	ldr	r3, [r7, #8]
 800b9d8:	2200      	movs	r2, #0
 800b9da:	701a      	strb	r2, [r3, #0]
  }
}
 800b9dc:	bf00      	nop
 800b9de:	371c      	adds	r7, #28
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e6:	4770      	bx	lr

0800b9e8 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b9e8:	b480      	push	{r7}
 800b9ea:	b085      	sub	sp, #20
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
 800b9f0:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	881a      	ldrh	r2, [r3, #0]
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	781b      	ldrb	r3, [r3, #0]
 800b9fa:	b29b      	uxth	r3, r3
 800b9fc:	4413      	add	r3, r2
 800b9fe:	b29a      	uxth	r2, r3
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	781b      	ldrb	r3, [r3, #0]
 800ba08:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	4413      	add	r3, r2
 800ba0e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ba10:	68fb      	ldr	r3, [r7, #12]
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	3714      	adds	r7, #20
 800ba16:	46bd      	mov	sp, r7
 800ba18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1c:	4770      	bx	lr

0800ba1e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800ba1e:	b580      	push	{r7, lr}
 800ba20:	b086      	sub	sp, #24
 800ba22:	af00      	add	r7, sp, #0
 800ba24:	60f8      	str	r0, [r7, #12]
 800ba26:	60b9      	str	r1, [r7, #8]
 800ba28:	4613      	mov	r3, r2
 800ba2a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800ba2c:	2301      	movs	r3, #1
 800ba2e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	789b      	ldrb	r3, [r3, #2]
 800ba34:	2b01      	cmp	r3, #1
 800ba36:	d002      	beq.n	800ba3e <USBH_CtlReq+0x20>
 800ba38:	2b02      	cmp	r3, #2
 800ba3a:	d00f      	beq.n	800ba5c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800ba3c:	e027      	b.n	800ba8e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	68ba      	ldr	r2, [r7, #8]
 800ba42:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	88fa      	ldrh	r2, [r7, #6]
 800ba48:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	2201      	movs	r2, #1
 800ba4e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	2202      	movs	r2, #2
 800ba54:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800ba56:	2301      	movs	r3, #1
 800ba58:	75fb      	strb	r3, [r7, #23]
      break;
 800ba5a:	e018      	b.n	800ba8e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800ba5c:	68f8      	ldr	r0, [r7, #12]
 800ba5e:	f000 f81b 	bl	800ba98 <USBH_HandleControl>
 800ba62:	4603      	mov	r3, r0
 800ba64:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800ba66:	7dfb      	ldrb	r3, [r7, #23]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d002      	beq.n	800ba72 <USBH_CtlReq+0x54>
 800ba6c:	7dfb      	ldrb	r3, [r7, #23]
 800ba6e:	2b03      	cmp	r3, #3
 800ba70:	d106      	bne.n	800ba80 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	2201      	movs	r2, #1
 800ba76:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	761a      	strb	r2, [r3, #24]
      break;
 800ba7e:	e005      	b.n	800ba8c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800ba80:	7dfb      	ldrb	r3, [r7, #23]
 800ba82:	2b02      	cmp	r3, #2
 800ba84:	d102      	bne.n	800ba8c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	2201      	movs	r2, #1
 800ba8a:	709a      	strb	r2, [r3, #2]
      break;
 800ba8c:	bf00      	nop
  }
  return status;
 800ba8e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba90:	4618      	mov	r0, r3
 800ba92:	3718      	adds	r7, #24
 800ba94:	46bd      	mov	sp, r7
 800ba96:	bd80      	pop	{r7, pc}

0800ba98 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b086      	sub	sp, #24
 800ba9c:	af02      	add	r7, sp, #8
 800ba9e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800baa0:	2301      	movs	r3, #1
 800baa2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800baa4:	2300      	movs	r3, #0
 800baa6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	7e1b      	ldrb	r3, [r3, #24]
 800baac:	3b01      	subs	r3, #1
 800baae:	2b0a      	cmp	r3, #10
 800bab0:	f200 8156 	bhi.w	800bd60 <USBH_HandleControl+0x2c8>
 800bab4:	a201      	add	r2, pc, #4	; (adr r2, 800babc <USBH_HandleControl+0x24>)
 800bab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baba:	bf00      	nop
 800babc:	0800bae9 	.word	0x0800bae9
 800bac0:	0800bb03 	.word	0x0800bb03
 800bac4:	0800bb6d 	.word	0x0800bb6d
 800bac8:	0800bb93 	.word	0x0800bb93
 800bacc:	0800bbcb 	.word	0x0800bbcb
 800bad0:	0800bbf5 	.word	0x0800bbf5
 800bad4:	0800bc47 	.word	0x0800bc47
 800bad8:	0800bc69 	.word	0x0800bc69
 800badc:	0800bca5 	.word	0x0800bca5
 800bae0:	0800bccb 	.word	0x0800bccb
 800bae4:	0800bd09 	.word	0x0800bd09
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f103 0110 	add.w	r1, r3, #16
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	795b      	ldrb	r3, [r3, #5]
 800baf2:	461a      	mov	r2, r3
 800baf4:	6878      	ldr	r0, [r7, #4]
 800baf6:	f000 f943 	bl	800bd80 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2202      	movs	r2, #2
 800bafe:	761a      	strb	r2, [r3, #24]
      break;
 800bb00:	e139      	b.n	800bd76 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	795b      	ldrb	r3, [r3, #5]
 800bb06:	4619      	mov	r1, r3
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	f000 fd21 	bl	800c550 <USBH_LL_GetURBState>
 800bb0e:	4603      	mov	r3, r0
 800bb10:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800bb12:	7bbb      	ldrb	r3, [r7, #14]
 800bb14:	2b01      	cmp	r3, #1
 800bb16:	d11e      	bne.n	800bb56 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	7c1b      	ldrb	r3, [r3, #16]
 800bb1c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bb20:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	8adb      	ldrh	r3, [r3, #22]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d00a      	beq.n	800bb40 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800bb2a:	7b7b      	ldrb	r3, [r7, #13]
 800bb2c:	2b80      	cmp	r3, #128	; 0x80
 800bb2e:	d103      	bne.n	800bb38 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2203      	movs	r2, #3
 800bb34:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bb36:	e115      	b.n	800bd64 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2205      	movs	r2, #5
 800bb3c:	761a      	strb	r2, [r3, #24]
      break;
 800bb3e:	e111      	b.n	800bd64 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800bb40:	7b7b      	ldrb	r3, [r7, #13]
 800bb42:	2b80      	cmp	r3, #128	; 0x80
 800bb44:	d103      	bne.n	800bb4e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2209      	movs	r2, #9
 800bb4a:	761a      	strb	r2, [r3, #24]
      break;
 800bb4c:	e10a      	b.n	800bd64 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2207      	movs	r2, #7
 800bb52:	761a      	strb	r2, [r3, #24]
      break;
 800bb54:	e106      	b.n	800bd64 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800bb56:	7bbb      	ldrb	r3, [r7, #14]
 800bb58:	2b04      	cmp	r3, #4
 800bb5a:	d003      	beq.n	800bb64 <USBH_HandleControl+0xcc>
 800bb5c:	7bbb      	ldrb	r3, [r7, #14]
 800bb5e:	2b02      	cmp	r3, #2
 800bb60:	f040 8100 	bne.w	800bd64 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	220b      	movs	r2, #11
 800bb68:	761a      	strb	r2, [r3, #24]
      break;
 800bb6a:	e0fb      	b.n	800bd64 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bb72:	b29a      	uxth	r2, r3
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	6899      	ldr	r1, [r3, #8]
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	899a      	ldrh	r2, [r3, #12]
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	791b      	ldrb	r3, [r3, #4]
 800bb84:	6878      	ldr	r0, [r7, #4]
 800bb86:	f000 f93a 	bl	800bdfe <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	2204      	movs	r2, #4
 800bb8e:	761a      	strb	r2, [r3, #24]
      break;
 800bb90:	e0f1      	b.n	800bd76 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	791b      	ldrb	r3, [r3, #4]
 800bb96:	4619      	mov	r1, r3
 800bb98:	6878      	ldr	r0, [r7, #4]
 800bb9a:	f000 fcd9 	bl	800c550 <USBH_LL_GetURBState>
 800bb9e:	4603      	mov	r3, r0
 800bba0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800bba2:	7bbb      	ldrb	r3, [r7, #14]
 800bba4:	2b01      	cmp	r3, #1
 800bba6:	d102      	bne.n	800bbae <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2209      	movs	r2, #9
 800bbac:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800bbae:	7bbb      	ldrb	r3, [r7, #14]
 800bbb0:	2b05      	cmp	r3, #5
 800bbb2:	d102      	bne.n	800bbba <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800bbb4:	2303      	movs	r3, #3
 800bbb6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bbb8:	e0d6      	b.n	800bd68 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800bbba:	7bbb      	ldrb	r3, [r7, #14]
 800bbbc:	2b04      	cmp	r3, #4
 800bbbe:	f040 80d3 	bne.w	800bd68 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	220b      	movs	r2, #11
 800bbc6:	761a      	strb	r2, [r3, #24]
      break;
 800bbc8:	e0ce      	b.n	800bd68 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	6899      	ldr	r1, [r3, #8]
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	899a      	ldrh	r2, [r3, #12]
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	795b      	ldrb	r3, [r3, #5]
 800bbd6:	2001      	movs	r0, #1
 800bbd8:	9000      	str	r0, [sp, #0]
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	f000 f8ea 	bl	800bdb4 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bbe6:	b29a      	uxth	r2, r3
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2206      	movs	r2, #6
 800bbf0:	761a      	strb	r2, [r3, #24]
      break;
 800bbf2:	e0c0      	b.n	800bd76 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	795b      	ldrb	r3, [r3, #5]
 800bbf8:	4619      	mov	r1, r3
 800bbfa:	6878      	ldr	r0, [r7, #4]
 800bbfc:	f000 fca8 	bl	800c550 <USBH_LL_GetURBState>
 800bc00:	4603      	mov	r3, r0
 800bc02:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800bc04:	7bbb      	ldrb	r3, [r7, #14]
 800bc06:	2b01      	cmp	r3, #1
 800bc08:	d103      	bne.n	800bc12 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2207      	movs	r2, #7
 800bc0e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bc10:	e0ac      	b.n	800bd6c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800bc12:	7bbb      	ldrb	r3, [r7, #14]
 800bc14:	2b05      	cmp	r3, #5
 800bc16:	d105      	bne.n	800bc24 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	220c      	movs	r2, #12
 800bc1c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800bc1e:	2303      	movs	r3, #3
 800bc20:	73fb      	strb	r3, [r7, #15]
      break;
 800bc22:	e0a3      	b.n	800bd6c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bc24:	7bbb      	ldrb	r3, [r7, #14]
 800bc26:	2b02      	cmp	r3, #2
 800bc28:	d103      	bne.n	800bc32 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	2205      	movs	r2, #5
 800bc2e:	761a      	strb	r2, [r3, #24]
      break;
 800bc30:	e09c      	b.n	800bd6c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800bc32:	7bbb      	ldrb	r3, [r7, #14]
 800bc34:	2b04      	cmp	r3, #4
 800bc36:	f040 8099 	bne.w	800bd6c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	220b      	movs	r2, #11
 800bc3e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800bc40:	2302      	movs	r3, #2
 800bc42:	73fb      	strb	r3, [r7, #15]
      break;
 800bc44:	e092      	b.n	800bd6c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	791b      	ldrb	r3, [r3, #4]
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	2100      	movs	r1, #0
 800bc4e:	6878      	ldr	r0, [r7, #4]
 800bc50:	f000 f8d5 	bl	800bdfe <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bc5a:	b29a      	uxth	r2, r3
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	2208      	movs	r2, #8
 800bc64:	761a      	strb	r2, [r3, #24]

      break;
 800bc66:	e086      	b.n	800bd76 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	791b      	ldrb	r3, [r3, #4]
 800bc6c:	4619      	mov	r1, r3
 800bc6e:	6878      	ldr	r0, [r7, #4]
 800bc70:	f000 fc6e 	bl	800c550 <USBH_LL_GetURBState>
 800bc74:	4603      	mov	r3, r0
 800bc76:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800bc78:	7bbb      	ldrb	r3, [r7, #14]
 800bc7a:	2b01      	cmp	r3, #1
 800bc7c:	d105      	bne.n	800bc8a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	220d      	movs	r2, #13
 800bc82:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800bc84:	2300      	movs	r3, #0
 800bc86:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bc88:	e072      	b.n	800bd70 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800bc8a:	7bbb      	ldrb	r3, [r7, #14]
 800bc8c:	2b04      	cmp	r3, #4
 800bc8e:	d103      	bne.n	800bc98 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	220b      	movs	r2, #11
 800bc94:	761a      	strb	r2, [r3, #24]
      break;
 800bc96:	e06b      	b.n	800bd70 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800bc98:	7bbb      	ldrb	r3, [r7, #14]
 800bc9a:	2b05      	cmp	r3, #5
 800bc9c:	d168      	bne.n	800bd70 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800bc9e:	2303      	movs	r3, #3
 800bca0:	73fb      	strb	r3, [r7, #15]
      break;
 800bca2:	e065      	b.n	800bd70 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	795b      	ldrb	r3, [r3, #5]
 800bca8:	2201      	movs	r2, #1
 800bcaa:	9200      	str	r2, [sp, #0]
 800bcac:	2200      	movs	r2, #0
 800bcae:	2100      	movs	r1, #0
 800bcb0:	6878      	ldr	r0, [r7, #4]
 800bcb2:	f000 f87f 	bl	800bdb4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bcbc:	b29a      	uxth	r2, r3
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	220a      	movs	r2, #10
 800bcc6:	761a      	strb	r2, [r3, #24]
      break;
 800bcc8:	e055      	b.n	800bd76 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	795b      	ldrb	r3, [r3, #5]
 800bcce:	4619      	mov	r1, r3
 800bcd0:	6878      	ldr	r0, [r7, #4]
 800bcd2:	f000 fc3d 	bl	800c550 <USBH_LL_GetURBState>
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800bcda:	7bbb      	ldrb	r3, [r7, #14]
 800bcdc:	2b01      	cmp	r3, #1
 800bcde:	d105      	bne.n	800bcec <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800bce0:	2300      	movs	r3, #0
 800bce2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	220d      	movs	r2, #13
 800bce8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bcea:	e043      	b.n	800bd74 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bcec:	7bbb      	ldrb	r3, [r7, #14]
 800bcee:	2b02      	cmp	r3, #2
 800bcf0:	d103      	bne.n	800bcfa <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	2209      	movs	r2, #9
 800bcf6:	761a      	strb	r2, [r3, #24]
      break;
 800bcf8:	e03c      	b.n	800bd74 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800bcfa:	7bbb      	ldrb	r3, [r7, #14]
 800bcfc:	2b04      	cmp	r3, #4
 800bcfe:	d139      	bne.n	800bd74 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	220b      	movs	r2, #11
 800bd04:	761a      	strb	r2, [r3, #24]
      break;
 800bd06:	e035      	b.n	800bd74 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	7e5b      	ldrb	r3, [r3, #25]
 800bd0c:	3301      	adds	r3, #1
 800bd0e:	b2da      	uxtb	r2, r3
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	765a      	strb	r2, [r3, #25]
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	7e5b      	ldrb	r3, [r3, #25]
 800bd18:	2b02      	cmp	r3, #2
 800bd1a:	d806      	bhi.n	800bd2a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2201      	movs	r2, #1
 800bd20:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2201      	movs	r2, #1
 800bd26:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800bd28:	e025      	b.n	800bd76 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bd30:	2106      	movs	r1, #6
 800bd32:	6878      	ldr	r0, [r7, #4]
 800bd34:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	2200      	movs	r2, #0
 800bd3a:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	795b      	ldrb	r3, [r3, #5]
 800bd40:	4619      	mov	r1, r3
 800bd42:	6878      	ldr	r0, [r7, #4]
 800bd44:	f000 f90c 	bl	800bf60 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	791b      	ldrb	r3, [r3, #4]
 800bd4c:	4619      	mov	r1, r3
 800bd4e:	6878      	ldr	r0, [r7, #4]
 800bd50:	f000 f906 	bl	800bf60 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2200      	movs	r2, #0
 800bd58:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800bd5a:	2302      	movs	r3, #2
 800bd5c:	73fb      	strb	r3, [r7, #15]
      break;
 800bd5e:	e00a      	b.n	800bd76 <USBH_HandleControl+0x2de>

    default:
      break;
 800bd60:	bf00      	nop
 800bd62:	e008      	b.n	800bd76 <USBH_HandleControl+0x2de>
      break;
 800bd64:	bf00      	nop
 800bd66:	e006      	b.n	800bd76 <USBH_HandleControl+0x2de>
      break;
 800bd68:	bf00      	nop
 800bd6a:	e004      	b.n	800bd76 <USBH_HandleControl+0x2de>
      break;
 800bd6c:	bf00      	nop
 800bd6e:	e002      	b.n	800bd76 <USBH_HandleControl+0x2de>
      break;
 800bd70:	bf00      	nop
 800bd72:	e000      	b.n	800bd76 <USBH_HandleControl+0x2de>
      break;
 800bd74:	bf00      	nop
  }

  return status;
 800bd76:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd78:	4618      	mov	r0, r3
 800bd7a:	3710      	adds	r7, #16
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bd80      	pop	{r7, pc}

0800bd80 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b088      	sub	sp, #32
 800bd84:	af04      	add	r7, sp, #16
 800bd86:	60f8      	str	r0, [r7, #12]
 800bd88:	60b9      	str	r1, [r7, #8]
 800bd8a:	4613      	mov	r3, r2
 800bd8c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bd8e:	79f9      	ldrb	r1, [r7, #7]
 800bd90:	2300      	movs	r3, #0
 800bd92:	9303      	str	r3, [sp, #12]
 800bd94:	2308      	movs	r3, #8
 800bd96:	9302      	str	r3, [sp, #8]
 800bd98:	68bb      	ldr	r3, [r7, #8]
 800bd9a:	9301      	str	r3, [sp, #4]
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	9300      	str	r3, [sp, #0]
 800bda0:	2300      	movs	r3, #0
 800bda2:	2200      	movs	r2, #0
 800bda4:	68f8      	ldr	r0, [r7, #12]
 800bda6:	f000 fba2 	bl	800c4ee <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800bdaa:	2300      	movs	r3, #0
}
 800bdac:	4618      	mov	r0, r3
 800bdae:	3710      	adds	r7, #16
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	bd80      	pop	{r7, pc}

0800bdb4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b088      	sub	sp, #32
 800bdb8:	af04      	add	r7, sp, #16
 800bdba:	60f8      	str	r0, [r7, #12]
 800bdbc:	60b9      	str	r1, [r7, #8]
 800bdbe:	4611      	mov	r1, r2
 800bdc0:	461a      	mov	r2, r3
 800bdc2:	460b      	mov	r3, r1
 800bdc4:	80fb      	strh	r3, [r7, #6]
 800bdc6:	4613      	mov	r3, r2
 800bdc8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d001      	beq.n	800bdd8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bdd8:	7979      	ldrb	r1, [r7, #5]
 800bdda:	7e3b      	ldrb	r3, [r7, #24]
 800bddc:	9303      	str	r3, [sp, #12]
 800bdde:	88fb      	ldrh	r3, [r7, #6]
 800bde0:	9302      	str	r3, [sp, #8]
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	9301      	str	r3, [sp, #4]
 800bde6:	2301      	movs	r3, #1
 800bde8:	9300      	str	r3, [sp, #0]
 800bdea:	2300      	movs	r3, #0
 800bdec:	2200      	movs	r2, #0
 800bdee:	68f8      	ldr	r0, [r7, #12]
 800bdf0:	f000 fb7d 	bl	800c4ee <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800bdf4:	2300      	movs	r3, #0
}
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	3710      	adds	r7, #16
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bd80      	pop	{r7, pc}

0800bdfe <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800bdfe:	b580      	push	{r7, lr}
 800be00:	b088      	sub	sp, #32
 800be02:	af04      	add	r7, sp, #16
 800be04:	60f8      	str	r0, [r7, #12]
 800be06:	60b9      	str	r1, [r7, #8]
 800be08:	4611      	mov	r1, r2
 800be0a:	461a      	mov	r2, r3
 800be0c:	460b      	mov	r3, r1
 800be0e:	80fb      	strh	r3, [r7, #6]
 800be10:	4613      	mov	r3, r2
 800be12:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800be14:	7979      	ldrb	r1, [r7, #5]
 800be16:	2300      	movs	r3, #0
 800be18:	9303      	str	r3, [sp, #12]
 800be1a:	88fb      	ldrh	r3, [r7, #6]
 800be1c:	9302      	str	r3, [sp, #8]
 800be1e:	68bb      	ldr	r3, [r7, #8]
 800be20:	9301      	str	r3, [sp, #4]
 800be22:	2301      	movs	r3, #1
 800be24:	9300      	str	r3, [sp, #0]
 800be26:	2300      	movs	r3, #0
 800be28:	2201      	movs	r2, #1
 800be2a:	68f8      	ldr	r0, [r7, #12]
 800be2c:	f000 fb5f 	bl	800c4ee <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800be30:	2300      	movs	r3, #0

}
 800be32:	4618      	mov	r0, r3
 800be34:	3710      	adds	r7, #16
 800be36:	46bd      	mov	sp, r7
 800be38:	bd80      	pop	{r7, pc}

0800be3a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800be3a:	b580      	push	{r7, lr}
 800be3c:	b088      	sub	sp, #32
 800be3e:	af04      	add	r7, sp, #16
 800be40:	60f8      	str	r0, [r7, #12]
 800be42:	60b9      	str	r1, [r7, #8]
 800be44:	4611      	mov	r1, r2
 800be46:	461a      	mov	r2, r3
 800be48:	460b      	mov	r3, r1
 800be4a:	80fb      	strh	r3, [r7, #6]
 800be4c:	4613      	mov	r3, r2
 800be4e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800be56:	2b00      	cmp	r3, #0
 800be58:	d001      	beq.n	800be5e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800be5a:	2300      	movs	r3, #0
 800be5c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800be5e:	7979      	ldrb	r1, [r7, #5]
 800be60:	7e3b      	ldrb	r3, [r7, #24]
 800be62:	9303      	str	r3, [sp, #12]
 800be64:	88fb      	ldrh	r3, [r7, #6]
 800be66:	9302      	str	r3, [sp, #8]
 800be68:	68bb      	ldr	r3, [r7, #8]
 800be6a:	9301      	str	r3, [sp, #4]
 800be6c:	2301      	movs	r3, #1
 800be6e:	9300      	str	r3, [sp, #0]
 800be70:	2302      	movs	r3, #2
 800be72:	2200      	movs	r2, #0
 800be74:	68f8      	ldr	r0, [r7, #12]
 800be76:	f000 fb3a 	bl	800c4ee <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800be7a:	2300      	movs	r3, #0
}
 800be7c:	4618      	mov	r0, r3
 800be7e:	3710      	adds	r7, #16
 800be80:	46bd      	mov	sp, r7
 800be82:	bd80      	pop	{r7, pc}

0800be84 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b088      	sub	sp, #32
 800be88:	af04      	add	r7, sp, #16
 800be8a:	60f8      	str	r0, [r7, #12]
 800be8c:	60b9      	str	r1, [r7, #8]
 800be8e:	4611      	mov	r1, r2
 800be90:	461a      	mov	r2, r3
 800be92:	460b      	mov	r3, r1
 800be94:	80fb      	strh	r3, [r7, #6]
 800be96:	4613      	mov	r3, r2
 800be98:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800be9a:	7979      	ldrb	r1, [r7, #5]
 800be9c:	2300      	movs	r3, #0
 800be9e:	9303      	str	r3, [sp, #12]
 800bea0:	88fb      	ldrh	r3, [r7, #6]
 800bea2:	9302      	str	r3, [sp, #8]
 800bea4:	68bb      	ldr	r3, [r7, #8]
 800bea6:	9301      	str	r3, [sp, #4]
 800bea8:	2301      	movs	r3, #1
 800beaa:	9300      	str	r3, [sp, #0]
 800beac:	2302      	movs	r3, #2
 800beae:	2201      	movs	r2, #1
 800beb0:	68f8      	ldr	r0, [r7, #12]
 800beb2:	f000 fb1c 	bl	800c4ee <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800beb6:	2300      	movs	r3, #0
}
 800beb8:	4618      	mov	r0, r3
 800beba:	3710      	adds	r7, #16
 800bebc:	46bd      	mov	sp, r7
 800bebe:	bd80      	pop	{r7, pc}

0800bec0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b086      	sub	sp, #24
 800bec4:	af04      	add	r7, sp, #16
 800bec6:	6078      	str	r0, [r7, #4]
 800bec8:	4608      	mov	r0, r1
 800beca:	4611      	mov	r1, r2
 800becc:	461a      	mov	r2, r3
 800bece:	4603      	mov	r3, r0
 800bed0:	70fb      	strb	r3, [r7, #3]
 800bed2:	460b      	mov	r3, r1
 800bed4:	70bb      	strb	r3, [r7, #2]
 800bed6:	4613      	mov	r3, r2
 800bed8:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800beda:	7878      	ldrb	r0, [r7, #1]
 800bedc:	78ba      	ldrb	r2, [r7, #2]
 800bede:	78f9      	ldrb	r1, [r7, #3]
 800bee0:	8b3b      	ldrh	r3, [r7, #24]
 800bee2:	9302      	str	r3, [sp, #8]
 800bee4:	7d3b      	ldrb	r3, [r7, #20]
 800bee6:	9301      	str	r3, [sp, #4]
 800bee8:	7c3b      	ldrb	r3, [r7, #16]
 800beea:	9300      	str	r3, [sp, #0]
 800beec:	4603      	mov	r3, r0
 800beee:	6878      	ldr	r0, [r7, #4]
 800bef0:	f000 faaf 	bl	800c452 <USBH_LL_OpenPipe>

  return USBH_OK;
 800bef4:	2300      	movs	r3, #0
}
 800bef6:	4618      	mov	r0, r3
 800bef8:	3708      	adds	r7, #8
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}

0800befe <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800befe:	b580      	push	{r7, lr}
 800bf00:	b082      	sub	sp, #8
 800bf02:	af00      	add	r7, sp, #0
 800bf04:	6078      	str	r0, [r7, #4]
 800bf06:	460b      	mov	r3, r1
 800bf08:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800bf0a:	78fb      	ldrb	r3, [r7, #3]
 800bf0c:	4619      	mov	r1, r3
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f000 face 	bl	800c4b0 <USBH_LL_ClosePipe>

  return USBH_OK;
 800bf14:	2300      	movs	r3, #0
}
 800bf16:	4618      	mov	r0, r3
 800bf18:	3708      	adds	r7, #8
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}

0800bf1e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800bf1e:	b580      	push	{r7, lr}
 800bf20:	b084      	sub	sp, #16
 800bf22:	af00      	add	r7, sp, #0
 800bf24:	6078      	str	r0, [r7, #4]
 800bf26:	460b      	mov	r3, r1
 800bf28:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800bf2a:	6878      	ldr	r0, [r7, #4]
 800bf2c:	f000 f836 	bl	800bf9c <USBH_GetFreePipe>
 800bf30:	4603      	mov	r3, r0
 800bf32:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800bf34:	89fb      	ldrh	r3, [r7, #14]
 800bf36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bf3a:	4293      	cmp	r3, r2
 800bf3c:	d00a      	beq.n	800bf54 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800bf3e:	78fa      	ldrb	r2, [r7, #3]
 800bf40:	89fb      	ldrh	r3, [r7, #14]
 800bf42:	f003 030f 	and.w	r3, r3, #15
 800bf46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bf4a:	6879      	ldr	r1, [r7, #4]
 800bf4c:	33e0      	adds	r3, #224	; 0xe0
 800bf4e:	009b      	lsls	r3, r3, #2
 800bf50:	440b      	add	r3, r1
 800bf52:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800bf54:	89fb      	ldrh	r3, [r7, #14]
 800bf56:	b2db      	uxtb	r3, r3
}
 800bf58:	4618      	mov	r0, r3
 800bf5a:	3710      	adds	r7, #16
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	bd80      	pop	{r7, pc}

0800bf60 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800bf60:	b480      	push	{r7}
 800bf62:	b083      	sub	sp, #12
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
 800bf68:	460b      	mov	r3, r1
 800bf6a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800bf6c:	78fb      	ldrb	r3, [r7, #3]
 800bf6e:	2b0a      	cmp	r3, #10
 800bf70:	d80d      	bhi.n	800bf8e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800bf72:	78fb      	ldrb	r3, [r7, #3]
 800bf74:	687a      	ldr	r2, [r7, #4]
 800bf76:	33e0      	adds	r3, #224	; 0xe0
 800bf78:	009b      	lsls	r3, r3, #2
 800bf7a:	4413      	add	r3, r2
 800bf7c:	685a      	ldr	r2, [r3, #4]
 800bf7e:	78fb      	ldrb	r3, [r7, #3]
 800bf80:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800bf84:	6879      	ldr	r1, [r7, #4]
 800bf86:	33e0      	adds	r3, #224	; 0xe0
 800bf88:	009b      	lsls	r3, r3, #2
 800bf8a:	440b      	add	r3, r1
 800bf8c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800bf8e:	2300      	movs	r3, #0
}
 800bf90:	4618      	mov	r0, r3
 800bf92:	370c      	adds	r7, #12
 800bf94:	46bd      	mov	sp, r7
 800bf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9a:	4770      	bx	lr

0800bf9c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800bf9c:	b480      	push	{r7}
 800bf9e:	b085      	sub	sp, #20
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	73fb      	strb	r3, [r7, #15]
 800bfac:	e00f      	b.n	800bfce <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800bfae:	7bfb      	ldrb	r3, [r7, #15]
 800bfb0:	687a      	ldr	r2, [r7, #4]
 800bfb2:	33e0      	adds	r3, #224	; 0xe0
 800bfb4:	009b      	lsls	r3, r3, #2
 800bfb6:	4413      	add	r3, r2
 800bfb8:	685b      	ldr	r3, [r3, #4]
 800bfba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d102      	bne.n	800bfc8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800bfc2:	7bfb      	ldrb	r3, [r7, #15]
 800bfc4:	b29b      	uxth	r3, r3
 800bfc6:	e007      	b.n	800bfd8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800bfc8:	7bfb      	ldrb	r3, [r7, #15]
 800bfca:	3301      	adds	r3, #1
 800bfcc:	73fb      	strb	r3, [r7, #15]
 800bfce:	7bfb      	ldrb	r3, [r7, #15]
 800bfd0:	2b0a      	cmp	r3, #10
 800bfd2:	d9ec      	bls.n	800bfae <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800bfd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800bfd8:	4618      	mov	r0, r3
 800bfda:	3714      	adds	r7, #20
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe2:	4770      	bx	lr

0800bfe4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800bfe4:	b480      	push	{r7}
 800bfe6:	b087      	sub	sp, #28
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	60f8      	str	r0, [r7, #12]
 800bfec:	60b9      	str	r1, [r7, #8]
 800bfee:	4613      	mov	r3, r2
 800bff0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800bff2:	2301      	movs	r3, #1
 800bff4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800bff6:	2300      	movs	r3, #0
 800bff8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800bffa:	4b1f      	ldr	r3, [pc, #124]	; (800c078 <FATFS_LinkDriverEx+0x94>)
 800bffc:	7a5b      	ldrb	r3, [r3, #9]
 800bffe:	b2db      	uxtb	r3, r3
 800c000:	2b00      	cmp	r3, #0
 800c002:	d131      	bne.n	800c068 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c004:	4b1c      	ldr	r3, [pc, #112]	; (800c078 <FATFS_LinkDriverEx+0x94>)
 800c006:	7a5b      	ldrb	r3, [r3, #9]
 800c008:	b2db      	uxtb	r3, r3
 800c00a:	461a      	mov	r2, r3
 800c00c:	4b1a      	ldr	r3, [pc, #104]	; (800c078 <FATFS_LinkDriverEx+0x94>)
 800c00e:	2100      	movs	r1, #0
 800c010:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c012:	4b19      	ldr	r3, [pc, #100]	; (800c078 <FATFS_LinkDriverEx+0x94>)
 800c014:	7a5b      	ldrb	r3, [r3, #9]
 800c016:	b2db      	uxtb	r3, r3
 800c018:	4a17      	ldr	r2, [pc, #92]	; (800c078 <FATFS_LinkDriverEx+0x94>)
 800c01a:	009b      	lsls	r3, r3, #2
 800c01c:	4413      	add	r3, r2
 800c01e:	68fa      	ldr	r2, [r7, #12]
 800c020:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c022:	4b15      	ldr	r3, [pc, #84]	; (800c078 <FATFS_LinkDriverEx+0x94>)
 800c024:	7a5b      	ldrb	r3, [r3, #9]
 800c026:	b2db      	uxtb	r3, r3
 800c028:	461a      	mov	r2, r3
 800c02a:	4b13      	ldr	r3, [pc, #76]	; (800c078 <FATFS_LinkDriverEx+0x94>)
 800c02c:	4413      	add	r3, r2
 800c02e:	79fa      	ldrb	r2, [r7, #7]
 800c030:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c032:	4b11      	ldr	r3, [pc, #68]	; (800c078 <FATFS_LinkDriverEx+0x94>)
 800c034:	7a5b      	ldrb	r3, [r3, #9]
 800c036:	b2db      	uxtb	r3, r3
 800c038:	1c5a      	adds	r2, r3, #1
 800c03a:	b2d1      	uxtb	r1, r2
 800c03c:	4a0e      	ldr	r2, [pc, #56]	; (800c078 <FATFS_LinkDriverEx+0x94>)
 800c03e:	7251      	strb	r1, [r2, #9]
 800c040:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c042:	7dbb      	ldrb	r3, [r7, #22]
 800c044:	3330      	adds	r3, #48	; 0x30
 800c046:	b2da      	uxtb	r2, r3
 800c048:	68bb      	ldr	r3, [r7, #8]
 800c04a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c04c:	68bb      	ldr	r3, [r7, #8]
 800c04e:	3301      	adds	r3, #1
 800c050:	223a      	movs	r2, #58	; 0x3a
 800c052:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c054:	68bb      	ldr	r3, [r7, #8]
 800c056:	3302      	adds	r3, #2
 800c058:	222f      	movs	r2, #47	; 0x2f
 800c05a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c05c:	68bb      	ldr	r3, [r7, #8]
 800c05e:	3303      	adds	r3, #3
 800c060:	2200      	movs	r2, #0
 800c062:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c064:	2300      	movs	r3, #0
 800c066:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c068:	7dfb      	ldrb	r3, [r7, #23]
}
 800c06a:	4618      	mov	r0, r3
 800c06c:	371c      	adds	r7, #28
 800c06e:	46bd      	mov	sp, r7
 800c070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c074:	4770      	bx	lr
 800c076:	bf00      	nop
 800c078:	20002398 	.word	0x20002398

0800c07c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b082      	sub	sp, #8
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
 800c084:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c086:	2200      	movs	r2, #0
 800c088:	6839      	ldr	r1, [r7, #0]
 800c08a:	6878      	ldr	r0, [r7, #4]
 800c08c:	f7ff ffaa 	bl	800bfe4 <FATFS_LinkDriverEx>
 800c090:	4603      	mov	r3, r0
}
 800c092:	4618      	mov	r0, r3
 800c094:	3708      	adds	r7, #8
 800c096:	46bd      	mov	sp, r7
 800c098:	bd80      	pop	{r7, pc}
	...

0800c09c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800c0a0:	2201      	movs	r2, #1
 800c0a2:	490e      	ldr	r1, [pc, #56]	; (800c0dc <MX_USB_HOST_Init+0x40>)
 800c0a4:	480e      	ldr	r0, [pc, #56]	; (800c0e0 <MX_USB_HOST_Init+0x44>)
 800c0a6:	f7fe fc45 	bl	800a934 <USBH_Init>
 800c0aa:	4603      	mov	r3, r0
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d001      	beq.n	800c0b4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800c0b0:	f7f5 fa96 	bl	80015e0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800c0b4:	490b      	ldr	r1, [pc, #44]	; (800c0e4 <MX_USB_HOST_Init+0x48>)
 800c0b6:	480a      	ldr	r0, [pc, #40]	; (800c0e0 <MX_USB_HOST_Init+0x44>)
 800c0b8:	f7fe fcca 	bl	800aa50 <USBH_RegisterClass>
 800c0bc:	4603      	mov	r3, r0
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d001      	beq.n	800c0c6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800c0c2:	f7f5 fa8d 	bl	80015e0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800c0c6:	4806      	ldr	r0, [pc, #24]	; (800c0e0 <MX_USB_HOST_Init+0x44>)
 800c0c8:	f7fe fd4e 	bl	800ab68 <USBH_Start>
 800c0cc:	4603      	mov	r3, r0
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d001      	beq.n	800c0d6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800c0d2:	f7f5 fa85 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800c0d6:	bf00      	nop
 800c0d8:	bd80      	pop	{r7, pc}
 800c0da:	bf00      	nop
 800c0dc:	0800c0fd 	.word	0x0800c0fd
 800c0e0:	200023a4 	.word	0x200023a4
 800c0e4:	200002b0 	.word	0x200002b0

0800c0e8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800c0ec:	4802      	ldr	r0, [pc, #8]	; (800c0f8 <MX_USB_HOST_Process+0x10>)
 800c0ee:	f7fe fd4b 	bl	800ab88 <USBH_Process>
}
 800c0f2:	bf00      	nop
 800c0f4:	bd80      	pop	{r7, pc}
 800c0f6:	bf00      	nop
 800c0f8:	200023a4 	.word	0x200023a4

0800c0fc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800c0fc:	b480      	push	{r7}
 800c0fe:	b083      	sub	sp, #12
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
 800c104:	460b      	mov	r3, r1
 800c106:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800c108:	78fb      	ldrb	r3, [r7, #3]
 800c10a:	3b01      	subs	r3, #1
 800c10c:	2b04      	cmp	r3, #4
 800c10e:	d819      	bhi.n	800c144 <USBH_UserProcess+0x48>
 800c110:	a201      	add	r2, pc, #4	; (adr r2, 800c118 <USBH_UserProcess+0x1c>)
 800c112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c116:	bf00      	nop
 800c118:	0800c145 	.word	0x0800c145
 800c11c:	0800c135 	.word	0x0800c135
 800c120:	0800c145 	.word	0x0800c145
 800c124:	0800c13d 	.word	0x0800c13d
 800c128:	0800c12d 	.word	0x0800c12d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800c12c:	4b09      	ldr	r3, [pc, #36]	; (800c154 <USBH_UserProcess+0x58>)
 800c12e:	2203      	movs	r2, #3
 800c130:	701a      	strb	r2, [r3, #0]
  break;
 800c132:	e008      	b.n	800c146 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800c134:	4b07      	ldr	r3, [pc, #28]	; (800c154 <USBH_UserProcess+0x58>)
 800c136:	2202      	movs	r2, #2
 800c138:	701a      	strb	r2, [r3, #0]
  break;
 800c13a:	e004      	b.n	800c146 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800c13c:	4b05      	ldr	r3, [pc, #20]	; (800c154 <USBH_UserProcess+0x58>)
 800c13e:	2201      	movs	r2, #1
 800c140:	701a      	strb	r2, [r3, #0]
  break;
 800c142:	e000      	b.n	800c146 <USBH_UserProcess+0x4a>

  default:
  break;
 800c144:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800c146:	bf00      	nop
 800c148:	370c      	adds	r7, #12
 800c14a:	46bd      	mov	sp, r7
 800c14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c150:	4770      	bx	lr
 800c152:	bf00      	nop
 800c154:	2000277c 	.word	0x2000277c

0800c158 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b08a      	sub	sp, #40	; 0x28
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c160:	f107 0314 	add.w	r3, r7, #20
 800c164:	2200      	movs	r2, #0
 800c166:	601a      	str	r2, [r3, #0]
 800c168:	605a      	str	r2, [r3, #4]
 800c16a:	609a      	str	r2, [r3, #8]
 800c16c:	60da      	str	r2, [r3, #12]
 800c16e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c178:	d147      	bne.n	800c20a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c17a:	2300      	movs	r3, #0
 800c17c:	613b      	str	r3, [r7, #16]
 800c17e:	4b25      	ldr	r3, [pc, #148]	; (800c214 <HAL_HCD_MspInit+0xbc>)
 800c180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c182:	4a24      	ldr	r2, [pc, #144]	; (800c214 <HAL_HCD_MspInit+0xbc>)
 800c184:	f043 0301 	orr.w	r3, r3, #1
 800c188:	6313      	str	r3, [r2, #48]	; 0x30
 800c18a:	4b22      	ldr	r3, [pc, #136]	; (800c214 <HAL_HCD_MspInit+0xbc>)
 800c18c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c18e:	f003 0301 	and.w	r3, r3, #1
 800c192:	613b      	str	r3, [r7, #16]
 800c194:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800c196:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c19a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c19c:	2300      	movs	r3, #0
 800c19e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c1a4:	f107 0314 	add.w	r3, r7, #20
 800c1a8:	4619      	mov	r1, r3
 800c1aa:	481b      	ldr	r0, [pc, #108]	; (800c218 <HAL_HCD_MspInit+0xc0>)
 800c1ac:	f7f7 f9b4 	bl	8003518 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c1b0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c1b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c1b6:	2302      	movs	r3, #2
 800c1b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c1be:	2300      	movs	r3, #0
 800c1c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c1c2:	230a      	movs	r3, #10
 800c1c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c1c6:	f107 0314 	add.w	r3, r7, #20
 800c1ca:	4619      	mov	r1, r3
 800c1cc:	4812      	ldr	r0, [pc, #72]	; (800c218 <HAL_HCD_MspInit+0xc0>)
 800c1ce:	f7f7 f9a3 	bl	8003518 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c1d2:	4b10      	ldr	r3, [pc, #64]	; (800c214 <HAL_HCD_MspInit+0xbc>)
 800c1d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1d6:	4a0f      	ldr	r2, [pc, #60]	; (800c214 <HAL_HCD_MspInit+0xbc>)
 800c1d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1dc:	6353      	str	r3, [r2, #52]	; 0x34
 800c1de:	2300      	movs	r3, #0
 800c1e0:	60fb      	str	r3, [r7, #12]
 800c1e2:	4b0c      	ldr	r3, [pc, #48]	; (800c214 <HAL_HCD_MspInit+0xbc>)
 800c1e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1e6:	4a0b      	ldr	r2, [pc, #44]	; (800c214 <HAL_HCD_MspInit+0xbc>)
 800c1e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c1ec:	6453      	str	r3, [r2, #68]	; 0x44
 800c1ee:	4b09      	ldr	r3, [pc, #36]	; (800c214 <HAL_HCD_MspInit+0xbc>)
 800c1f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c1f6:	60fb      	str	r3, [r7, #12]
 800c1f8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	2100      	movs	r1, #0
 800c1fe:	2043      	movs	r0, #67	; 0x43
 800c200:	f7f6 fde3 	bl	8002dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c204:	2043      	movs	r0, #67	; 0x43
 800c206:	f7f6 fdfc 	bl	8002e02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c20a:	bf00      	nop
 800c20c:	3728      	adds	r7, #40	; 0x28
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd80      	pop	{r7, pc}
 800c212:	bf00      	nop
 800c214:	40023800 	.word	0x40023800
 800c218:	40020000 	.word	0x40020000

0800c21c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b082      	sub	sp, #8
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c22a:	4618      	mov	r0, r3
 800c22c:	f7ff f87f 	bl	800b32e <USBH_LL_IncTimer>
}
 800c230:	bf00      	nop
 800c232:	3708      	adds	r7, #8
 800c234:	46bd      	mov	sp, r7
 800c236:	bd80      	pop	{r7, pc}

0800c238 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b082      	sub	sp, #8
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c246:	4618      	mov	r0, r3
 800c248:	f7ff f8b7 	bl	800b3ba <USBH_LL_Connect>
}
 800c24c:	bf00      	nop
 800c24e:	3708      	adds	r7, #8
 800c250:	46bd      	mov	sp, r7
 800c252:	bd80      	pop	{r7, pc}

0800c254 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b082      	sub	sp, #8
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c262:	4618      	mov	r0, r3
 800c264:	f7ff f8c0 	bl	800b3e8 <USBH_LL_Disconnect>
}
 800c268:	bf00      	nop
 800c26a:	3708      	adds	r7, #8
 800c26c:	46bd      	mov	sp, r7
 800c26e:	bd80      	pop	{r7, pc}

0800c270 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c270:	b480      	push	{r7}
 800c272:	b083      	sub	sp, #12
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
 800c278:	460b      	mov	r3, r1
 800c27a:	70fb      	strb	r3, [r7, #3]
 800c27c:	4613      	mov	r3, r2
 800c27e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800c280:	bf00      	nop
 800c282:	370c      	adds	r7, #12
 800c284:	46bd      	mov	sp, r7
 800c286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28a:	4770      	bx	lr

0800c28c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b082      	sub	sp, #8
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c29a:	4618      	mov	r0, r3
 800c29c:	f7ff f871 	bl	800b382 <USBH_LL_PortEnabled>
}
 800c2a0:	bf00      	nop
 800c2a2:	3708      	adds	r7, #8
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bd80      	pop	{r7, pc}

0800c2a8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b082      	sub	sp, #8
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	f7ff f871 	bl	800b39e <USBH_LL_PortDisabled>
}
 800c2bc:	bf00      	nop
 800c2be:	3708      	adds	r7, #8
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	bd80      	pop	{r7, pc}

0800c2c4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b082      	sub	sp, #8
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c2d2:	2b01      	cmp	r3, #1
 800c2d4:	d12a      	bne.n	800c32c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800c2d6:	4a18      	ldr	r2, [pc, #96]	; (800c338 <USBH_LL_Init+0x74>)
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	4a15      	ldr	r2, [pc, #84]	; (800c338 <USBH_LL_Init+0x74>)
 800c2e2:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c2e6:	4b14      	ldr	r3, [pc, #80]	; (800c338 <USBH_LL_Init+0x74>)
 800c2e8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c2ec:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800c2ee:	4b12      	ldr	r3, [pc, #72]	; (800c338 <USBH_LL_Init+0x74>)
 800c2f0:	2208      	movs	r2, #8
 800c2f2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800c2f4:	4b10      	ldr	r3, [pc, #64]	; (800c338 <USBH_LL_Init+0x74>)
 800c2f6:	2201      	movs	r2, #1
 800c2f8:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c2fa:	4b0f      	ldr	r3, [pc, #60]	; (800c338 <USBH_LL_Init+0x74>)
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800c300:	4b0d      	ldr	r3, [pc, #52]	; (800c338 <USBH_LL_Init+0x74>)
 800c302:	2202      	movs	r2, #2
 800c304:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c306:	4b0c      	ldr	r3, [pc, #48]	; (800c338 <USBH_LL_Init+0x74>)
 800c308:	2200      	movs	r2, #0
 800c30a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800c30c:	480a      	ldr	r0, [pc, #40]	; (800c338 <USBH_LL_Init+0x74>)
 800c30e:	f7f7 fad0 	bl	80038b2 <HAL_HCD_Init>
 800c312:	4603      	mov	r3, r0
 800c314:	2b00      	cmp	r3, #0
 800c316:	d001      	beq.n	800c31c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800c318:	f7f5 f962 	bl	80015e0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800c31c:	4806      	ldr	r0, [pc, #24]	; (800c338 <USBH_LL_Init+0x74>)
 800c31e:	f7f7 feb4 	bl	800408a <HAL_HCD_GetCurrentFrame>
 800c322:	4603      	mov	r3, r0
 800c324:	4619      	mov	r1, r3
 800c326:	6878      	ldr	r0, [r7, #4]
 800c328:	f7fe fff2 	bl	800b310 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800c32c:	2300      	movs	r3, #0
}
 800c32e:	4618      	mov	r0, r3
 800c330:	3708      	adds	r7, #8
 800c332:	46bd      	mov	sp, r7
 800c334:	bd80      	pop	{r7, pc}
 800c336:	bf00      	nop
 800c338:	20002780 	.word	0x20002780

0800c33c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b084      	sub	sp, #16
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c344:	2300      	movs	r3, #0
 800c346:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c348:	2300      	movs	r3, #0
 800c34a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c352:	4618      	mov	r0, r3
 800c354:	f7f7 fe23 	bl	8003f9e <HAL_HCD_Start>
 800c358:	4603      	mov	r3, r0
 800c35a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c35c:	7bfb      	ldrb	r3, [r7, #15]
 800c35e:	4618      	mov	r0, r3
 800c360:	f000 f98c 	bl	800c67c <USBH_Get_USB_Status>
 800c364:	4603      	mov	r3, r0
 800c366:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c368:	7bbb      	ldrb	r3, [r7, #14]
}
 800c36a:	4618      	mov	r0, r3
 800c36c:	3710      	adds	r7, #16
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd80      	pop	{r7, pc}

0800c372 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c372:	b580      	push	{r7, lr}
 800c374:	b084      	sub	sp, #16
 800c376:	af00      	add	r7, sp, #0
 800c378:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c37a:	2300      	movs	r3, #0
 800c37c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c37e:	2300      	movs	r3, #0
 800c380:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c388:	4618      	mov	r0, r3
 800c38a:	f7f7 fe2b 	bl	8003fe4 <HAL_HCD_Stop>
 800c38e:	4603      	mov	r3, r0
 800c390:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c392:	7bfb      	ldrb	r3, [r7, #15]
 800c394:	4618      	mov	r0, r3
 800c396:	f000 f971 	bl	800c67c <USBH_Get_USB_Status>
 800c39a:	4603      	mov	r3, r0
 800c39c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c39e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	3710      	adds	r7, #16
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	bd80      	pop	{r7, pc}

0800c3a8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b084      	sub	sp, #16
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800c3b0:	2301      	movs	r3, #1
 800c3b2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f7f7 fe73 	bl	80040a6 <HAL_HCD_GetCurrentSpeed>
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	2b02      	cmp	r3, #2
 800c3c4:	d00c      	beq.n	800c3e0 <USBH_LL_GetSpeed+0x38>
 800c3c6:	2b02      	cmp	r3, #2
 800c3c8:	d80d      	bhi.n	800c3e6 <USBH_LL_GetSpeed+0x3e>
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d002      	beq.n	800c3d4 <USBH_LL_GetSpeed+0x2c>
 800c3ce:	2b01      	cmp	r3, #1
 800c3d0:	d003      	beq.n	800c3da <USBH_LL_GetSpeed+0x32>
 800c3d2:	e008      	b.n	800c3e6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	73fb      	strb	r3, [r7, #15]
    break;
 800c3d8:	e008      	b.n	800c3ec <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800c3da:	2301      	movs	r3, #1
 800c3dc:	73fb      	strb	r3, [r7, #15]
    break;
 800c3de:	e005      	b.n	800c3ec <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800c3e0:	2302      	movs	r3, #2
 800c3e2:	73fb      	strb	r3, [r7, #15]
    break;
 800c3e4:	e002      	b.n	800c3ec <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800c3e6:	2301      	movs	r3, #1
 800c3e8:	73fb      	strb	r3, [r7, #15]
    break;
 800c3ea:	bf00      	nop
  }
  return  speed;
 800c3ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	3710      	adds	r7, #16
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	bd80      	pop	{r7, pc}

0800c3f6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800c3f6:	b580      	push	{r7, lr}
 800c3f8:	b084      	sub	sp, #16
 800c3fa:	af00      	add	r7, sp, #0
 800c3fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3fe:	2300      	movs	r3, #0
 800c400:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c402:	2300      	movs	r3, #0
 800c404:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c40c:	4618      	mov	r0, r3
 800c40e:	f7f7 fe06 	bl	800401e <HAL_HCD_ResetPort>
 800c412:	4603      	mov	r3, r0
 800c414:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c416:	7bfb      	ldrb	r3, [r7, #15]
 800c418:	4618      	mov	r0, r3
 800c41a:	f000 f92f 	bl	800c67c <USBH_Get_USB_Status>
 800c41e:	4603      	mov	r3, r0
 800c420:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c422:	7bbb      	ldrb	r3, [r7, #14]
}
 800c424:	4618      	mov	r0, r3
 800c426:	3710      	adds	r7, #16
 800c428:	46bd      	mov	sp, r7
 800c42a:	bd80      	pop	{r7, pc}

0800c42c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b082      	sub	sp, #8
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
 800c434:	460b      	mov	r3, r1
 800c436:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c43e:	78fa      	ldrb	r2, [r7, #3]
 800c440:	4611      	mov	r1, r2
 800c442:	4618      	mov	r0, r3
 800c444:	f7f7 fe0d 	bl	8004062 <HAL_HCD_HC_GetXferCount>
 800c448:	4603      	mov	r3, r0
}
 800c44a:	4618      	mov	r0, r3
 800c44c:	3708      	adds	r7, #8
 800c44e:	46bd      	mov	sp, r7
 800c450:	bd80      	pop	{r7, pc}

0800c452 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c452:	b590      	push	{r4, r7, lr}
 800c454:	b089      	sub	sp, #36	; 0x24
 800c456:	af04      	add	r7, sp, #16
 800c458:	6078      	str	r0, [r7, #4]
 800c45a:	4608      	mov	r0, r1
 800c45c:	4611      	mov	r1, r2
 800c45e:	461a      	mov	r2, r3
 800c460:	4603      	mov	r3, r0
 800c462:	70fb      	strb	r3, [r7, #3]
 800c464:	460b      	mov	r3, r1
 800c466:	70bb      	strb	r3, [r7, #2]
 800c468:	4613      	mov	r3, r2
 800c46a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c46c:	2300      	movs	r3, #0
 800c46e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c470:	2300      	movs	r3, #0
 800c472:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c47a:	787c      	ldrb	r4, [r7, #1]
 800c47c:	78ba      	ldrb	r2, [r7, #2]
 800c47e:	78f9      	ldrb	r1, [r7, #3]
 800c480:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c482:	9302      	str	r3, [sp, #8]
 800c484:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c488:	9301      	str	r3, [sp, #4]
 800c48a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c48e:	9300      	str	r3, [sp, #0]
 800c490:	4623      	mov	r3, r4
 800c492:	f7f7 fa70 	bl	8003976 <HAL_HCD_HC_Init>
 800c496:	4603      	mov	r3, r0
 800c498:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c49a:	7bfb      	ldrb	r3, [r7, #15]
 800c49c:	4618      	mov	r0, r3
 800c49e:	f000 f8ed 	bl	800c67c <USBH_Get_USB_Status>
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c4a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	3714      	adds	r7, #20
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	bd90      	pop	{r4, r7, pc}

0800c4b0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b084      	sub	sp, #16
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
 800c4b8:	460b      	mov	r3, r1
 800c4ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4bc:	2300      	movs	r3, #0
 800c4be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c4ca:	78fa      	ldrb	r2, [r7, #3]
 800c4cc:	4611      	mov	r1, r2
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	f7f7 fae0 	bl	8003a94 <HAL_HCD_HC_Halt>
 800c4d4:	4603      	mov	r3, r0
 800c4d6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c4d8:	7bfb      	ldrb	r3, [r7, #15]
 800c4da:	4618      	mov	r0, r3
 800c4dc:	f000 f8ce 	bl	800c67c <USBH_Get_USB_Status>
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c4e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	3710      	adds	r7, #16
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd80      	pop	{r7, pc}

0800c4ee <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800c4ee:	b590      	push	{r4, r7, lr}
 800c4f0:	b089      	sub	sp, #36	; 0x24
 800c4f2:	af04      	add	r7, sp, #16
 800c4f4:	6078      	str	r0, [r7, #4]
 800c4f6:	4608      	mov	r0, r1
 800c4f8:	4611      	mov	r1, r2
 800c4fa:	461a      	mov	r2, r3
 800c4fc:	4603      	mov	r3, r0
 800c4fe:	70fb      	strb	r3, [r7, #3]
 800c500:	460b      	mov	r3, r1
 800c502:	70bb      	strb	r3, [r7, #2]
 800c504:	4613      	mov	r3, r2
 800c506:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c508:	2300      	movs	r3, #0
 800c50a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c50c:	2300      	movs	r3, #0
 800c50e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c516:	787c      	ldrb	r4, [r7, #1]
 800c518:	78ba      	ldrb	r2, [r7, #2]
 800c51a:	78f9      	ldrb	r1, [r7, #3]
 800c51c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c520:	9303      	str	r3, [sp, #12]
 800c522:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c524:	9302      	str	r3, [sp, #8]
 800c526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c528:	9301      	str	r3, [sp, #4]
 800c52a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c52e:	9300      	str	r3, [sp, #0]
 800c530:	4623      	mov	r3, r4
 800c532:	f7f7 fad3 	bl	8003adc <HAL_HCD_HC_SubmitRequest>
 800c536:	4603      	mov	r3, r0
 800c538:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800c53a:	7bfb      	ldrb	r3, [r7, #15]
 800c53c:	4618      	mov	r0, r3
 800c53e:	f000 f89d 	bl	800c67c <USBH_Get_USB_Status>
 800c542:	4603      	mov	r3, r0
 800c544:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c546:	7bbb      	ldrb	r3, [r7, #14]
}
 800c548:	4618      	mov	r0, r3
 800c54a:	3714      	adds	r7, #20
 800c54c:	46bd      	mov	sp, r7
 800c54e:	bd90      	pop	{r4, r7, pc}

0800c550 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b082      	sub	sp, #8
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
 800c558:	460b      	mov	r3, r1
 800c55a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c562:	78fa      	ldrb	r2, [r7, #3]
 800c564:	4611      	mov	r1, r2
 800c566:	4618      	mov	r0, r3
 800c568:	f7f7 fd67 	bl	800403a <HAL_HCD_HC_GetURBState>
 800c56c:	4603      	mov	r3, r0
}
 800c56e:	4618      	mov	r0, r3
 800c570:	3708      	adds	r7, #8
 800c572:	46bd      	mov	sp, r7
 800c574:	bd80      	pop	{r7, pc}

0800c576 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800c576:	b580      	push	{r7, lr}
 800c578:	b082      	sub	sp, #8
 800c57a:	af00      	add	r7, sp, #0
 800c57c:	6078      	str	r0, [r7, #4]
 800c57e:	460b      	mov	r3, r1
 800c580:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c588:	2b01      	cmp	r3, #1
 800c58a:	d103      	bne.n	800c594 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800c58c:	78fb      	ldrb	r3, [r7, #3]
 800c58e:	4618      	mov	r0, r3
 800c590:	f000 f8a0 	bl	800c6d4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800c594:	20c8      	movs	r0, #200	; 0xc8
 800c596:	f7f6 fb19 	bl	8002bcc <HAL_Delay>
  return USBH_OK;
 800c59a:	2300      	movs	r3, #0
}
 800c59c:	4618      	mov	r0, r3
 800c59e:	3708      	adds	r7, #8
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bd80      	pop	{r7, pc}

0800c5a4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800c5a4:	b480      	push	{r7}
 800c5a6:	b085      	sub	sp, #20
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
 800c5ac:	460b      	mov	r3, r1
 800c5ae:	70fb      	strb	r3, [r7, #3]
 800c5b0:	4613      	mov	r3, r2
 800c5b2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c5ba:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800c5bc:	78fb      	ldrb	r3, [r7, #3]
 800c5be:	68fa      	ldr	r2, [r7, #12]
 800c5c0:	212c      	movs	r1, #44	; 0x2c
 800c5c2:	fb01 f303 	mul.w	r3, r1, r3
 800c5c6:	4413      	add	r3, r2
 800c5c8:	333b      	adds	r3, #59	; 0x3b
 800c5ca:	781b      	ldrb	r3, [r3, #0]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d009      	beq.n	800c5e4 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800c5d0:	78fb      	ldrb	r3, [r7, #3]
 800c5d2:	68fa      	ldr	r2, [r7, #12]
 800c5d4:	212c      	movs	r1, #44	; 0x2c
 800c5d6:	fb01 f303 	mul.w	r3, r1, r3
 800c5da:	4413      	add	r3, r2
 800c5dc:	3354      	adds	r3, #84	; 0x54
 800c5de:	78ba      	ldrb	r2, [r7, #2]
 800c5e0:	701a      	strb	r2, [r3, #0]
 800c5e2:	e008      	b.n	800c5f6 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800c5e4:	78fb      	ldrb	r3, [r7, #3]
 800c5e6:	68fa      	ldr	r2, [r7, #12]
 800c5e8:	212c      	movs	r1, #44	; 0x2c
 800c5ea:	fb01 f303 	mul.w	r3, r1, r3
 800c5ee:	4413      	add	r3, r2
 800c5f0:	3355      	adds	r3, #85	; 0x55
 800c5f2:	78ba      	ldrb	r2, [r7, #2]
 800c5f4:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800c5f6:	2300      	movs	r3, #0
}
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	3714      	adds	r7, #20
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c602:	4770      	bx	lr

0800c604 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c604:	b480      	push	{r7}
 800c606:	b085      	sub	sp, #20
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
 800c60c:	460b      	mov	r3, r1
 800c60e:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800c610:	2300      	movs	r3, #0
 800c612:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c61a:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800c61c:	78fb      	ldrb	r3, [r7, #3]
 800c61e:	68ba      	ldr	r2, [r7, #8]
 800c620:	212c      	movs	r1, #44	; 0x2c
 800c622:	fb01 f303 	mul.w	r3, r1, r3
 800c626:	4413      	add	r3, r2
 800c628:	333b      	adds	r3, #59	; 0x3b
 800c62a:	781b      	ldrb	r3, [r3, #0]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d009      	beq.n	800c644 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800c630:	78fb      	ldrb	r3, [r7, #3]
 800c632:	68ba      	ldr	r2, [r7, #8]
 800c634:	212c      	movs	r1, #44	; 0x2c
 800c636:	fb01 f303 	mul.w	r3, r1, r3
 800c63a:	4413      	add	r3, r2
 800c63c:	3354      	adds	r3, #84	; 0x54
 800c63e:	781b      	ldrb	r3, [r3, #0]
 800c640:	73fb      	strb	r3, [r7, #15]
 800c642:	e008      	b.n	800c656 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800c644:	78fb      	ldrb	r3, [r7, #3]
 800c646:	68ba      	ldr	r2, [r7, #8]
 800c648:	212c      	movs	r1, #44	; 0x2c
 800c64a:	fb01 f303 	mul.w	r3, r1, r3
 800c64e:	4413      	add	r3, r2
 800c650:	3355      	adds	r3, #85	; 0x55
 800c652:	781b      	ldrb	r3, [r3, #0]
 800c654:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800c656:	7bfb      	ldrb	r3, [r7, #15]
}
 800c658:	4618      	mov	r0, r3
 800c65a:	3714      	adds	r7, #20
 800c65c:	46bd      	mov	sp, r7
 800c65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c662:	4770      	bx	lr

0800c664 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b082      	sub	sp, #8
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c66c:	6878      	ldr	r0, [r7, #4]
 800c66e:	f7f6 faad 	bl	8002bcc <HAL_Delay>
}
 800c672:	bf00      	nop
 800c674:	3708      	adds	r7, #8
 800c676:	46bd      	mov	sp, r7
 800c678:	bd80      	pop	{r7, pc}
	...

0800c67c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c67c:	b480      	push	{r7}
 800c67e:	b085      	sub	sp, #20
 800c680:	af00      	add	r7, sp, #0
 800c682:	4603      	mov	r3, r0
 800c684:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c686:	2300      	movs	r3, #0
 800c688:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c68a:	79fb      	ldrb	r3, [r7, #7]
 800c68c:	2b03      	cmp	r3, #3
 800c68e:	d817      	bhi.n	800c6c0 <USBH_Get_USB_Status+0x44>
 800c690:	a201      	add	r2, pc, #4	; (adr r2, 800c698 <USBH_Get_USB_Status+0x1c>)
 800c692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c696:	bf00      	nop
 800c698:	0800c6a9 	.word	0x0800c6a9
 800c69c:	0800c6af 	.word	0x0800c6af
 800c6a0:	0800c6b5 	.word	0x0800c6b5
 800c6a4:	0800c6bb 	.word	0x0800c6bb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	73fb      	strb	r3, [r7, #15]
    break;
 800c6ac:	e00b      	b.n	800c6c6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c6ae:	2302      	movs	r3, #2
 800c6b0:	73fb      	strb	r3, [r7, #15]
    break;
 800c6b2:	e008      	b.n	800c6c6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c6b4:	2301      	movs	r3, #1
 800c6b6:	73fb      	strb	r3, [r7, #15]
    break;
 800c6b8:	e005      	b.n	800c6c6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c6ba:	2302      	movs	r3, #2
 800c6bc:	73fb      	strb	r3, [r7, #15]
    break;
 800c6be:	e002      	b.n	800c6c6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c6c0:	2302      	movs	r3, #2
 800c6c2:	73fb      	strb	r3, [r7, #15]
    break;
 800c6c4:	bf00      	nop
  }
  return usb_status;
 800c6c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	3714      	adds	r7, #20
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d2:	4770      	bx	lr

0800c6d4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b084      	sub	sp, #16
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	4603      	mov	r3, r0
 800c6dc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800c6de:	79fb      	ldrb	r3, [r7, #7]
 800c6e0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800c6e2:	79fb      	ldrb	r3, [r7, #7]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d102      	bne.n	800c6ee <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	73fb      	strb	r3, [r7, #15]
 800c6ec:	e001      	b.n	800c6f2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800c6ee:	2301      	movs	r3, #1
 800c6f0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800c6f2:	7bfb      	ldrb	r3, [r7, #15]
 800c6f4:	461a      	mov	r2, r3
 800c6f6:	2101      	movs	r1, #1
 800c6f8:	4803      	ldr	r0, [pc, #12]	; (800c708 <MX_DriverVbusFS+0x34>)
 800c6fa:	f7f7 f8c1 	bl	8003880 <HAL_GPIO_WritePin>
}
 800c6fe:	bf00      	nop
 800c700:	3710      	adds	r7, #16
 800c702:	46bd      	mov	sp, r7
 800c704:	bd80      	pop	{r7, pc}
 800c706:	bf00      	nop
 800c708:	40020800 	.word	0x40020800

0800c70c <__errno>:
 800c70c:	4b01      	ldr	r3, [pc, #4]	; (800c714 <__errno+0x8>)
 800c70e:	6818      	ldr	r0, [r3, #0]
 800c710:	4770      	bx	lr
 800c712:	bf00      	nop
 800c714:	200002d0 	.word	0x200002d0

0800c718 <__libc_init_array>:
 800c718:	b570      	push	{r4, r5, r6, lr}
 800c71a:	4d0d      	ldr	r5, [pc, #52]	; (800c750 <__libc_init_array+0x38>)
 800c71c:	4c0d      	ldr	r4, [pc, #52]	; (800c754 <__libc_init_array+0x3c>)
 800c71e:	1b64      	subs	r4, r4, r5
 800c720:	10a4      	asrs	r4, r4, #2
 800c722:	2600      	movs	r6, #0
 800c724:	42a6      	cmp	r6, r4
 800c726:	d109      	bne.n	800c73c <__libc_init_array+0x24>
 800c728:	4d0b      	ldr	r5, [pc, #44]	; (800c758 <__libc_init_array+0x40>)
 800c72a:	4c0c      	ldr	r4, [pc, #48]	; (800c75c <__libc_init_array+0x44>)
 800c72c:	f000 fc9e 	bl	800d06c <_init>
 800c730:	1b64      	subs	r4, r4, r5
 800c732:	10a4      	asrs	r4, r4, #2
 800c734:	2600      	movs	r6, #0
 800c736:	42a6      	cmp	r6, r4
 800c738:	d105      	bne.n	800c746 <__libc_init_array+0x2e>
 800c73a:	bd70      	pop	{r4, r5, r6, pc}
 800c73c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c740:	4798      	blx	r3
 800c742:	3601      	adds	r6, #1
 800c744:	e7ee      	b.n	800c724 <__libc_init_array+0xc>
 800c746:	f855 3b04 	ldr.w	r3, [r5], #4
 800c74a:	4798      	blx	r3
 800c74c:	3601      	adds	r6, #1
 800c74e:	e7f2      	b.n	800c736 <__libc_init_array+0x1e>
 800c750:	0800d45c 	.word	0x0800d45c
 800c754:	0800d45c 	.word	0x0800d45c
 800c758:	0800d45c 	.word	0x0800d45c
 800c75c:	0800d460 	.word	0x0800d460

0800c760 <malloc>:
 800c760:	4b02      	ldr	r3, [pc, #8]	; (800c76c <malloc+0xc>)
 800c762:	4601      	mov	r1, r0
 800c764:	6818      	ldr	r0, [r3, #0]
 800c766:	f000 b88d 	b.w	800c884 <_malloc_r>
 800c76a:	bf00      	nop
 800c76c:	200002d0 	.word	0x200002d0

0800c770 <free>:
 800c770:	4b02      	ldr	r3, [pc, #8]	; (800c77c <free+0xc>)
 800c772:	4601      	mov	r1, r0
 800c774:	6818      	ldr	r0, [r3, #0]
 800c776:	f000 b819 	b.w	800c7ac <_free_r>
 800c77a:	bf00      	nop
 800c77c:	200002d0 	.word	0x200002d0

0800c780 <memcpy>:
 800c780:	440a      	add	r2, r1
 800c782:	4291      	cmp	r1, r2
 800c784:	f100 33ff 	add.w	r3, r0, #4294967295
 800c788:	d100      	bne.n	800c78c <memcpy+0xc>
 800c78a:	4770      	bx	lr
 800c78c:	b510      	push	{r4, lr}
 800c78e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c792:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c796:	4291      	cmp	r1, r2
 800c798:	d1f9      	bne.n	800c78e <memcpy+0xe>
 800c79a:	bd10      	pop	{r4, pc}

0800c79c <memset>:
 800c79c:	4402      	add	r2, r0
 800c79e:	4603      	mov	r3, r0
 800c7a0:	4293      	cmp	r3, r2
 800c7a2:	d100      	bne.n	800c7a6 <memset+0xa>
 800c7a4:	4770      	bx	lr
 800c7a6:	f803 1b01 	strb.w	r1, [r3], #1
 800c7aa:	e7f9      	b.n	800c7a0 <memset+0x4>

0800c7ac <_free_r>:
 800c7ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c7ae:	2900      	cmp	r1, #0
 800c7b0:	d044      	beq.n	800c83c <_free_r+0x90>
 800c7b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c7b6:	9001      	str	r0, [sp, #4]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	f1a1 0404 	sub.w	r4, r1, #4
 800c7be:	bfb8      	it	lt
 800c7c0:	18e4      	addlt	r4, r4, r3
 800c7c2:	f000 f903 	bl	800c9cc <__malloc_lock>
 800c7c6:	4a1e      	ldr	r2, [pc, #120]	; (800c840 <_free_r+0x94>)
 800c7c8:	9801      	ldr	r0, [sp, #4]
 800c7ca:	6813      	ldr	r3, [r2, #0]
 800c7cc:	b933      	cbnz	r3, 800c7dc <_free_r+0x30>
 800c7ce:	6063      	str	r3, [r4, #4]
 800c7d0:	6014      	str	r4, [r2, #0]
 800c7d2:	b003      	add	sp, #12
 800c7d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c7d8:	f000 b8fe 	b.w	800c9d8 <__malloc_unlock>
 800c7dc:	42a3      	cmp	r3, r4
 800c7de:	d908      	bls.n	800c7f2 <_free_r+0x46>
 800c7e0:	6825      	ldr	r5, [r4, #0]
 800c7e2:	1961      	adds	r1, r4, r5
 800c7e4:	428b      	cmp	r3, r1
 800c7e6:	bf01      	itttt	eq
 800c7e8:	6819      	ldreq	r1, [r3, #0]
 800c7ea:	685b      	ldreq	r3, [r3, #4]
 800c7ec:	1949      	addeq	r1, r1, r5
 800c7ee:	6021      	streq	r1, [r4, #0]
 800c7f0:	e7ed      	b.n	800c7ce <_free_r+0x22>
 800c7f2:	461a      	mov	r2, r3
 800c7f4:	685b      	ldr	r3, [r3, #4]
 800c7f6:	b10b      	cbz	r3, 800c7fc <_free_r+0x50>
 800c7f8:	42a3      	cmp	r3, r4
 800c7fa:	d9fa      	bls.n	800c7f2 <_free_r+0x46>
 800c7fc:	6811      	ldr	r1, [r2, #0]
 800c7fe:	1855      	adds	r5, r2, r1
 800c800:	42a5      	cmp	r5, r4
 800c802:	d10b      	bne.n	800c81c <_free_r+0x70>
 800c804:	6824      	ldr	r4, [r4, #0]
 800c806:	4421      	add	r1, r4
 800c808:	1854      	adds	r4, r2, r1
 800c80a:	42a3      	cmp	r3, r4
 800c80c:	6011      	str	r1, [r2, #0]
 800c80e:	d1e0      	bne.n	800c7d2 <_free_r+0x26>
 800c810:	681c      	ldr	r4, [r3, #0]
 800c812:	685b      	ldr	r3, [r3, #4]
 800c814:	6053      	str	r3, [r2, #4]
 800c816:	4421      	add	r1, r4
 800c818:	6011      	str	r1, [r2, #0]
 800c81a:	e7da      	b.n	800c7d2 <_free_r+0x26>
 800c81c:	d902      	bls.n	800c824 <_free_r+0x78>
 800c81e:	230c      	movs	r3, #12
 800c820:	6003      	str	r3, [r0, #0]
 800c822:	e7d6      	b.n	800c7d2 <_free_r+0x26>
 800c824:	6825      	ldr	r5, [r4, #0]
 800c826:	1961      	adds	r1, r4, r5
 800c828:	428b      	cmp	r3, r1
 800c82a:	bf04      	itt	eq
 800c82c:	6819      	ldreq	r1, [r3, #0]
 800c82e:	685b      	ldreq	r3, [r3, #4]
 800c830:	6063      	str	r3, [r4, #4]
 800c832:	bf04      	itt	eq
 800c834:	1949      	addeq	r1, r1, r5
 800c836:	6021      	streq	r1, [r4, #0]
 800c838:	6054      	str	r4, [r2, #4]
 800c83a:	e7ca      	b.n	800c7d2 <_free_r+0x26>
 800c83c:	b003      	add	sp, #12
 800c83e:	bd30      	pop	{r4, r5, pc}
 800c840:	20002a84 	.word	0x20002a84

0800c844 <sbrk_aligned>:
 800c844:	b570      	push	{r4, r5, r6, lr}
 800c846:	4e0e      	ldr	r6, [pc, #56]	; (800c880 <sbrk_aligned+0x3c>)
 800c848:	460c      	mov	r4, r1
 800c84a:	6831      	ldr	r1, [r6, #0]
 800c84c:	4605      	mov	r5, r0
 800c84e:	b911      	cbnz	r1, 800c856 <sbrk_aligned+0x12>
 800c850:	f000 f88c 	bl	800c96c <_sbrk_r>
 800c854:	6030      	str	r0, [r6, #0]
 800c856:	4621      	mov	r1, r4
 800c858:	4628      	mov	r0, r5
 800c85a:	f000 f887 	bl	800c96c <_sbrk_r>
 800c85e:	1c43      	adds	r3, r0, #1
 800c860:	d00a      	beq.n	800c878 <sbrk_aligned+0x34>
 800c862:	1cc4      	adds	r4, r0, #3
 800c864:	f024 0403 	bic.w	r4, r4, #3
 800c868:	42a0      	cmp	r0, r4
 800c86a:	d007      	beq.n	800c87c <sbrk_aligned+0x38>
 800c86c:	1a21      	subs	r1, r4, r0
 800c86e:	4628      	mov	r0, r5
 800c870:	f000 f87c 	bl	800c96c <_sbrk_r>
 800c874:	3001      	adds	r0, #1
 800c876:	d101      	bne.n	800c87c <sbrk_aligned+0x38>
 800c878:	f04f 34ff 	mov.w	r4, #4294967295
 800c87c:	4620      	mov	r0, r4
 800c87e:	bd70      	pop	{r4, r5, r6, pc}
 800c880:	20002a88 	.word	0x20002a88

0800c884 <_malloc_r>:
 800c884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c888:	1ccd      	adds	r5, r1, #3
 800c88a:	f025 0503 	bic.w	r5, r5, #3
 800c88e:	3508      	adds	r5, #8
 800c890:	2d0c      	cmp	r5, #12
 800c892:	bf38      	it	cc
 800c894:	250c      	movcc	r5, #12
 800c896:	2d00      	cmp	r5, #0
 800c898:	4607      	mov	r7, r0
 800c89a:	db01      	blt.n	800c8a0 <_malloc_r+0x1c>
 800c89c:	42a9      	cmp	r1, r5
 800c89e:	d905      	bls.n	800c8ac <_malloc_r+0x28>
 800c8a0:	230c      	movs	r3, #12
 800c8a2:	603b      	str	r3, [r7, #0]
 800c8a4:	2600      	movs	r6, #0
 800c8a6:	4630      	mov	r0, r6
 800c8a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8ac:	4e2e      	ldr	r6, [pc, #184]	; (800c968 <_malloc_r+0xe4>)
 800c8ae:	f000 f88d 	bl	800c9cc <__malloc_lock>
 800c8b2:	6833      	ldr	r3, [r6, #0]
 800c8b4:	461c      	mov	r4, r3
 800c8b6:	bb34      	cbnz	r4, 800c906 <_malloc_r+0x82>
 800c8b8:	4629      	mov	r1, r5
 800c8ba:	4638      	mov	r0, r7
 800c8bc:	f7ff ffc2 	bl	800c844 <sbrk_aligned>
 800c8c0:	1c43      	adds	r3, r0, #1
 800c8c2:	4604      	mov	r4, r0
 800c8c4:	d14d      	bne.n	800c962 <_malloc_r+0xde>
 800c8c6:	6834      	ldr	r4, [r6, #0]
 800c8c8:	4626      	mov	r6, r4
 800c8ca:	2e00      	cmp	r6, #0
 800c8cc:	d140      	bne.n	800c950 <_malloc_r+0xcc>
 800c8ce:	6823      	ldr	r3, [r4, #0]
 800c8d0:	4631      	mov	r1, r6
 800c8d2:	4638      	mov	r0, r7
 800c8d4:	eb04 0803 	add.w	r8, r4, r3
 800c8d8:	f000 f848 	bl	800c96c <_sbrk_r>
 800c8dc:	4580      	cmp	r8, r0
 800c8de:	d13a      	bne.n	800c956 <_malloc_r+0xd2>
 800c8e0:	6821      	ldr	r1, [r4, #0]
 800c8e2:	3503      	adds	r5, #3
 800c8e4:	1a6d      	subs	r5, r5, r1
 800c8e6:	f025 0503 	bic.w	r5, r5, #3
 800c8ea:	3508      	adds	r5, #8
 800c8ec:	2d0c      	cmp	r5, #12
 800c8ee:	bf38      	it	cc
 800c8f0:	250c      	movcc	r5, #12
 800c8f2:	4629      	mov	r1, r5
 800c8f4:	4638      	mov	r0, r7
 800c8f6:	f7ff ffa5 	bl	800c844 <sbrk_aligned>
 800c8fa:	3001      	adds	r0, #1
 800c8fc:	d02b      	beq.n	800c956 <_malloc_r+0xd2>
 800c8fe:	6823      	ldr	r3, [r4, #0]
 800c900:	442b      	add	r3, r5
 800c902:	6023      	str	r3, [r4, #0]
 800c904:	e00e      	b.n	800c924 <_malloc_r+0xa0>
 800c906:	6822      	ldr	r2, [r4, #0]
 800c908:	1b52      	subs	r2, r2, r5
 800c90a:	d41e      	bmi.n	800c94a <_malloc_r+0xc6>
 800c90c:	2a0b      	cmp	r2, #11
 800c90e:	d916      	bls.n	800c93e <_malloc_r+0xba>
 800c910:	1961      	adds	r1, r4, r5
 800c912:	42a3      	cmp	r3, r4
 800c914:	6025      	str	r5, [r4, #0]
 800c916:	bf18      	it	ne
 800c918:	6059      	strne	r1, [r3, #4]
 800c91a:	6863      	ldr	r3, [r4, #4]
 800c91c:	bf08      	it	eq
 800c91e:	6031      	streq	r1, [r6, #0]
 800c920:	5162      	str	r2, [r4, r5]
 800c922:	604b      	str	r3, [r1, #4]
 800c924:	4638      	mov	r0, r7
 800c926:	f104 060b 	add.w	r6, r4, #11
 800c92a:	f000 f855 	bl	800c9d8 <__malloc_unlock>
 800c92e:	f026 0607 	bic.w	r6, r6, #7
 800c932:	1d23      	adds	r3, r4, #4
 800c934:	1af2      	subs	r2, r6, r3
 800c936:	d0b6      	beq.n	800c8a6 <_malloc_r+0x22>
 800c938:	1b9b      	subs	r3, r3, r6
 800c93a:	50a3      	str	r3, [r4, r2]
 800c93c:	e7b3      	b.n	800c8a6 <_malloc_r+0x22>
 800c93e:	6862      	ldr	r2, [r4, #4]
 800c940:	42a3      	cmp	r3, r4
 800c942:	bf0c      	ite	eq
 800c944:	6032      	streq	r2, [r6, #0]
 800c946:	605a      	strne	r2, [r3, #4]
 800c948:	e7ec      	b.n	800c924 <_malloc_r+0xa0>
 800c94a:	4623      	mov	r3, r4
 800c94c:	6864      	ldr	r4, [r4, #4]
 800c94e:	e7b2      	b.n	800c8b6 <_malloc_r+0x32>
 800c950:	4634      	mov	r4, r6
 800c952:	6876      	ldr	r6, [r6, #4]
 800c954:	e7b9      	b.n	800c8ca <_malloc_r+0x46>
 800c956:	230c      	movs	r3, #12
 800c958:	603b      	str	r3, [r7, #0]
 800c95a:	4638      	mov	r0, r7
 800c95c:	f000 f83c 	bl	800c9d8 <__malloc_unlock>
 800c960:	e7a1      	b.n	800c8a6 <_malloc_r+0x22>
 800c962:	6025      	str	r5, [r4, #0]
 800c964:	e7de      	b.n	800c924 <_malloc_r+0xa0>
 800c966:	bf00      	nop
 800c968:	20002a84 	.word	0x20002a84

0800c96c <_sbrk_r>:
 800c96c:	b538      	push	{r3, r4, r5, lr}
 800c96e:	4d06      	ldr	r5, [pc, #24]	; (800c988 <_sbrk_r+0x1c>)
 800c970:	2300      	movs	r3, #0
 800c972:	4604      	mov	r4, r0
 800c974:	4608      	mov	r0, r1
 800c976:	602b      	str	r3, [r5, #0]
 800c978:	f7f6 f844 	bl	8002a04 <_sbrk>
 800c97c:	1c43      	adds	r3, r0, #1
 800c97e:	d102      	bne.n	800c986 <_sbrk_r+0x1a>
 800c980:	682b      	ldr	r3, [r5, #0]
 800c982:	b103      	cbz	r3, 800c986 <_sbrk_r+0x1a>
 800c984:	6023      	str	r3, [r4, #0]
 800c986:	bd38      	pop	{r3, r4, r5, pc}
 800c988:	20002a8c 	.word	0x20002a8c

0800c98c <siprintf>:
 800c98c:	b40e      	push	{r1, r2, r3}
 800c98e:	b500      	push	{lr}
 800c990:	b09c      	sub	sp, #112	; 0x70
 800c992:	ab1d      	add	r3, sp, #116	; 0x74
 800c994:	9002      	str	r0, [sp, #8]
 800c996:	9006      	str	r0, [sp, #24]
 800c998:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c99c:	4809      	ldr	r0, [pc, #36]	; (800c9c4 <siprintf+0x38>)
 800c99e:	9107      	str	r1, [sp, #28]
 800c9a0:	9104      	str	r1, [sp, #16]
 800c9a2:	4909      	ldr	r1, [pc, #36]	; (800c9c8 <siprintf+0x3c>)
 800c9a4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9a8:	9105      	str	r1, [sp, #20]
 800c9aa:	6800      	ldr	r0, [r0, #0]
 800c9ac:	9301      	str	r3, [sp, #4]
 800c9ae:	a902      	add	r1, sp, #8
 800c9b0:	f000 f874 	bl	800ca9c <_svfiprintf_r>
 800c9b4:	9b02      	ldr	r3, [sp, #8]
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	701a      	strb	r2, [r3, #0]
 800c9ba:	b01c      	add	sp, #112	; 0x70
 800c9bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800c9c0:	b003      	add	sp, #12
 800c9c2:	4770      	bx	lr
 800c9c4:	200002d0 	.word	0x200002d0
 800c9c8:	ffff0208 	.word	0xffff0208

0800c9cc <__malloc_lock>:
 800c9cc:	4801      	ldr	r0, [pc, #4]	; (800c9d4 <__malloc_lock+0x8>)
 800c9ce:	f000 baf9 	b.w	800cfc4 <__retarget_lock_acquire_recursive>
 800c9d2:	bf00      	nop
 800c9d4:	20002a90 	.word	0x20002a90

0800c9d8 <__malloc_unlock>:
 800c9d8:	4801      	ldr	r0, [pc, #4]	; (800c9e0 <__malloc_unlock+0x8>)
 800c9da:	f000 baf4 	b.w	800cfc6 <__retarget_lock_release_recursive>
 800c9de:	bf00      	nop
 800c9e0:	20002a90 	.word	0x20002a90

0800c9e4 <__ssputs_r>:
 800c9e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9e8:	688e      	ldr	r6, [r1, #8]
 800c9ea:	429e      	cmp	r6, r3
 800c9ec:	4682      	mov	sl, r0
 800c9ee:	460c      	mov	r4, r1
 800c9f0:	4690      	mov	r8, r2
 800c9f2:	461f      	mov	r7, r3
 800c9f4:	d838      	bhi.n	800ca68 <__ssputs_r+0x84>
 800c9f6:	898a      	ldrh	r2, [r1, #12]
 800c9f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c9fc:	d032      	beq.n	800ca64 <__ssputs_r+0x80>
 800c9fe:	6825      	ldr	r5, [r4, #0]
 800ca00:	6909      	ldr	r1, [r1, #16]
 800ca02:	eba5 0901 	sub.w	r9, r5, r1
 800ca06:	6965      	ldr	r5, [r4, #20]
 800ca08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ca0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ca10:	3301      	adds	r3, #1
 800ca12:	444b      	add	r3, r9
 800ca14:	106d      	asrs	r5, r5, #1
 800ca16:	429d      	cmp	r5, r3
 800ca18:	bf38      	it	cc
 800ca1a:	461d      	movcc	r5, r3
 800ca1c:	0553      	lsls	r3, r2, #21
 800ca1e:	d531      	bpl.n	800ca84 <__ssputs_r+0xa0>
 800ca20:	4629      	mov	r1, r5
 800ca22:	f7ff ff2f 	bl	800c884 <_malloc_r>
 800ca26:	4606      	mov	r6, r0
 800ca28:	b950      	cbnz	r0, 800ca40 <__ssputs_r+0x5c>
 800ca2a:	230c      	movs	r3, #12
 800ca2c:	f8ca 3000 	str.w	r3, [sl]
 800ca30:	89a3      	ldrh	r3, [r4, #12]
 800ca32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca36:	81a3      	strh	r3, [r4, #12]
 800ca38:	f04f 30ff 	mov.w	r0, #4294967295
 800ca3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca40:	6921      	ldr	r1, [r4, #16]
 800ca42:	464a      	mov	r2, r9
 800ca44:	f7ff fe9c 	bl	800c780 <memcpy>
 800ca48:	89a3      	ldrh	r3, [r4, #12]
 800ca4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ca4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca52:	81a3      	strh	r3, [r4, #12]
 800ca54:	6126      	str	r6, [r4, #16]
 800ca56:	6165      	str	r5, [r4, #20]
 800ca58:	444e      	add	r6, r9
 800ca5a:	eba5 0509 	sub.w	r5, r5, r9
 800ca5e:	6026      	str	r6, [r4, #0]
 800ca60:	60a5      	str	r5, [r4, #8]
 800ca62:	463e      	mov	r6, r7
 800ca64:	42be      	cmp	r6, r7
 800ca66:	d900      	bls.n	800ca6a <__ssputs_r+0x86>
 800ca68:	463e      	mov	r6, r7
 800ca6a:	6820      	ldr	r0, [r4, #0]
 800ca6c:	4632      	mov	r2, r6
 800ca6e:	4641      	mov	r1, r8
 800ca70:	f000 faaa 	bl	800cfc8 <memmove>
 800ca74:	68a3      	ldr	r3, [r4, #8]
 800ca76:	1b9b      	subs	r3, r3, r6
 800ca78:	60a3      	str	r3, [r4, #8]
 800ca7a:	6823      	ldr	r3, [r4, #0]
 800ca7c:	4433      	add	r3, r6
 800ca7e:	6023      	str	r3, [r4, #0]
 800ca80:	2000      	movs	r0, #0
 800ca82:	e7db      	b.n	800ca3c <__ssputs_r+0x58>
 800ca84:	462a      	mov	r2, r5
 800ca86:	f000 fab9 	bl	800cffc <_realloc_r>
 800ca8a:	4606      	mov	r6, r0
 800ca8c:	2800      	cmp	r0, #0
 800ca8e:	d1e1      	bne.n	800ca54 <__ssputs_r+0x70>
 800ca90:	6921      	ldr	r1, [r4, #16]
 800ca92:	4650      	mov	r0, sl
 800ca94:	f7ff fe8a 	bl	800c7ac <_free_r>
 800ca98:	e7c7      	b.n	800ca2a <__ssputs_r+0x46>
	...

0800ca9c <_svfiprintf_r>:
 800ca9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caa0:	4698      	mov	r8, r3
 800caa2:	898b      	ldrh	r3, [r1, #12]
 800caa4:	061b      	lsls	r3, r3, #24
 800caa6:	b09d      	sub	sp, #116	; 0x74
 800caa8:	4607      	mov	r7, r0
 800caaa:	460d      	mov	r5, r1
 800caac:	4614      	mov	r4, r2
 800caae:	d50e      	bpl.n	800cace <_svfiprintf_r+0x32>
 800cab0:	690b      	ldr	r3, [r1, #16]
 800cab2:	b963      	cbnz	r3, 800cace <_svfiprintf_r+0x32>
 800cab4:	2140      	movs	r1, #64	; 0x40
 800cab6:	f7ff fee5 	bl	800c884 <_malloc_r>
 800caba:	6028      	str	r0, [r5, #0]
 800cabc:	6128      	str	r0, [r5, #16]
 800cabe:	b920      	cbnz	r0, 800caca <_svfiprintf_r+0x2e>
 800cac0:	230c      	movs	r3, #12
 800cac2:	603b      	str	r3, [r7, #0]
 800cac4:	f04f 30ff 	mov.w	r0, #4294967295
 800cac8:	e0d1      	b.n	800cc6e <_svfiprintf_r+0x1d2>
 800caca:	2340      	movs	r3, #64	; 0x40
 800cacc:	616b      	str	r3, [r5, #20]
 800cace:	2300      	movs	r3, #0
 800cad0:	9309      	str	r3, [sp, #36]	; 0x24
 800cad2:	2320      	movs	r3, #32
 800cad4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cad8:	f8cd 800c 	str.w	r8, [sp, #12]
 800cadc:	2330      	movs	r3, #48	; 0x30
 800cade:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cc88 <_svfiprintf_r+0x1ec>
 800cae2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cae6:	f04f 0901 	mov.w	r9, #1
 800caea:	4623      	mov	r3, r4
 800caec:	469a      	mov	sl, r3
 800caee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800caf2:	b10a      	cbz	r2, 800caf8 <_svfiprintf_r+0x5c>
 800caf4:	2a25      	cmp	r2, #37	; 0x25
 800caf6:	d1f9      	bne.n	800caec <_svfiprintf_r+0x50>
 800caf8:	ebba 0b04 	subs.w	fp, sl, r4
 800cafc:	d00b      	beq.n	800cb16 <_svfiprintf_r+0x7a>
 800cafe:	465b      	mov	r3, fp
 800cb00:	4622      	mov	r2, r4
 800cb02:	4629      	mov	r1, r5
 800cb04:	4638      	mov	r0, r7
 800cb06:	f7ff ff6d 	bl	800c9e4 <__ssputs_r>
 800cb0a:	3001      	adds	r0, #1
 800cb0c:	f000 80aa 	beq.w	800cc64 <_svfiprintf_r+0x1c8>
 800cb10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb12:	445a      	add	r2, fp
 800cb14:	9209      	str	r2, [sp, #36]	; 0x24
 800cb16:	f89a 3000 	ldrb.w	r3, [sl]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	f000 80a2 	beq.w	800cc64 <_svfiprintf_r+0x1c8>
 800cb20:	2300      	movs	r3, #0
 800cb22:	f04f 32ff 	mov.w	r2, #4294967295
 800cb26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb2a:	f10a 0a01 	add.w	sl, sl, #1
 800cb2e:	9304      	str	r3, [sp, #16]
 800cb30:	9307      	str	r3, [sp, #28]
 800cb32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cb36:	931a      	str	r3, [sp, #104]	; 0x68
 800cb38:	4654      	mov	r4, sl
 800cb3a:	2205      	movs	r2, #5
 800cb3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb40:	4851      	ldr	r0, [pc, #324]	; (800cc88 <_svfiprintf_r+0x1ec>)
 800cb42:	f7f3 fb45 	bl	80001d0 <memchr>
 800cb46:	9a04      	ldr	r2, [sp, #16]
 800cb48:	b9d8      	cbnz	r0, 800cb82 <_svfiprintf_r+0xe6>
 800cb4a:	06d0      	lsls	r0, r2, #27
 800cb4c:	bf44      	itt	mi
 800cb4e:	2320      	movmi	r3, #32
 800cb50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb54:	0711      	lsls	r1, r2, #28
 800cb56:	bf44      	itt	mi
 800cb58:	232b      	movmi	r3, #43	; 0x2b
 800cb5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb5e:	f89a 3000 	ldrb.w	r3, [sl]
 800cb62:	2b2a      	cmp	r3, #42	; 0x2a
 800cb64:	d015      	beq.n	800cb92 <_svfiprintf_r+0xf6>
 800cb66:	9a07      	ldr	r2, [sp, #28]
 800cb68:	4654      	mov	r4, sl
 800cb6a:	2000      	movs	r0, #0
 800cb6c:	f04f 0c0a 	mov.w	ip, #10
 800cb70:	4621      	mov	r1, r4
 800cb72:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb76:	3b30      	subs	r3, #48	; 0x30
 800cb78:	2b09      	cmp	r3, #9
 800cb7a:	d94e      	bls.n	800cc1a <_svfiprintf_r+0x17e>
 800cb7c:	b1b0      	cbz	r0, 800cbac <_svfiprintf_r+0x110>
 800cb7e:	9207      	str	r2, [sp, #28]
 800cb80:	e014      	b.n	800cbac <_svfiprintf_r+0x110>
 800cb82:	eba0 0308 	sub.w	r3, r0, r8
 800cb86:	fa09 f303 	lsl.w	r3, r9, r3
 800cb8a:	4313      	orrs	r3, r2
 800cb8c:	9304      	str	r3, [sp, #16]
 800cb8e:	46a2      	mov	sl, r4
 800cb90:	e7d2      	b.n	800cb38 <_svfiprintf_r+0x9c>
 800cb92:	9b03      	ldr	r3, [sp, #12]
 800cb94:	1d19      	adds	r1, r3, #4
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	9103      	str	r1, [sp, #12]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	bfbb      	ittet	lt
 800cb9e:	425b      	neglt	r3, r3
 800cba0:	f042 0202 	orrlt.w	r2, r2, #2
 800cba4:	9307      	strge	r3, [sp, #28]
 800cba6:	9307      	strlt	r3, [sp, #28]
 800cba8:	bfb8      	it	lt
 800cbaa:	9204      	strlt	r2, [sp, #16]
 800cbac:	7823      	ldrb	r3, [r4, #0]
 800cbae:	2b2e      	cmp	r3, #46	; 0x2e
 800cbb0:	d10c      	bne.n	800cbcc <_svfiprintf_r+0x130>
 800cbb2:	7863      	ldrb	r3, [r4, #1]
 800cbb4:	2b2a      	cmp	r3, #42	; 0x2a
 800cbb6:	d135      	bne.n	800cc24 <_svfiprintf_r+0x188>
 800cbb8:	9b03      	ldr	r3, [sp, #12]
 800cbba:	1d1a      	adds	r2, r3, #4
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	9203      	str	r2, [sp, #12]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	bfb8      	it	lt
 800cbc4:	f04f 33ff 	movlt.w	r3, #4294967295
 800cbc8:	3402      	adds	r4, #2
 800cbca:	9305      	str	r3, [sp, #20]
 800cbcc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cc98 <_svfiprintf_r+0x1fc>
 800cbd0:	7821      	ldrb	r1, [r4, #0]
 800cbd2:	2203      	movs	r2, #3
 800cbd4:	4650      	mov	r0, sl
 800cbd6:	f7f3 fafb 	bl	80001d0 <memchr>
 800cbda:	b140      	cbz	r0, 800cbee <_svfiprintf_r+0x152>
 800cbdc:	2340      	movs	r3, #64	; 0x40
 800cbde:	eba0 000a 	sub.w	r0, r0, sl
 800cbe2:	fa03 f000 	lsl.w	r0, r3, r0
 800cbe6:	9b04      	ldr	r3, [sp, #16]
 800cbe8:	4303      	orrs	r3, r0
 800cbea:	3401      	adds	r4, #1
 800cbec:	9304      	str	r3, [sp, #16]
 800cbee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbf2:	4826      	ldr	r0, [pc, #152]	; (800cc8c <_svfiprintf_r+0x1f0>)
 800cbf4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cbf8:	2206      	movs	r2, #6
 800cbfa:	f7f3 fae9 	bl	80001d0 <memchr>
 800cbfe:	2800      	cmp	r0, #0
 800cc00:	d038      	beq.n	800cc74 <_svfiprintf_r+0x1d8>
 800cc02:	4b23      	ldr	r3, [pc, #140]	; (800cc90 <_svfiprintf_r+0x1f4>)
 800cc04:	bb1b      	cbnz	r3, 800cc4e <_svfiprintf_r+0x1b2>
 800cc06:	9b03      	ldr	r3, [sp, #12]
 800cc08:	3307      	adds	r3, #7
 800cc0a:	f023 0307 	bic.w	r3, r3, #7
 800cc0e:	3308      	adds	r3, #8
 800cc10:	9303      	str	r3, [sp, #12]
 800cc12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc14:	4433      	add	r3, r6
 800cc16:	9309      	str	r3, [sp, #36]	; 0x24
 800cc18:	e767      	b.n	800caea <_svfiprintf_r+0x4e>
 800cc1a:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc1e:	460c      	mov	r4, r1
 800cc20:	2001      	movs	r0, #1
 800cc22:	e7a5      	b.n	800cb70 <_svfiprintf_r+0xd4>
 800cc24:	2300      	movs	r3, #0
 800cc26:	3401      	adds	r4, #1
 800cc28:	9305      	str	r3, [sp, #20]
 800cc2a:	4619      	mov	r1, r3
 800cc2c:	f04f 0c0a 	mov.w	ip, #10
 800cc30:	4620      	mov	r0, r4
 800cc32:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc36:	3a30      	subs	r2, #48	; 0x30
 800cc38:	2a09      	cmp	r2, #9
 800cc3a:	d903      	bls.n	800cc44 <_svfiprintf_r+0x1a8>
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d0c5      	beq.n	800cbcc <_svfiprintf_r+0x130>
 800cc40:	9105      	str	r1, [sp, #20]
 800cc42:	e7c3      	b.n	800cbcc <_svfiprintf_r+0x130>
 800cc44:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc48:	4604      	mov	r4, r0
 800cc4a:	2301      	movs	r3, #1
 800cc4c:	e7f0      	b.n	800cc30 <_svfiprintf_r+0x194>
 800cc4e:	ab03      	add	r3, sp, #12
 800cc50:	9300      	str	r3, [sp, #0]
 800cc52:	462a      	mov	r2, r5
 800cc54:	4b0f      	ldr	r3, [pc, #60]	; (800cc94 <_svfiprintf_r+0x1f8>)
 800cc56:	a904      	add	r1, sp, #16
 800cc58:	4638      	mov	r0, r7
 800cc5a:	f3af 8000 	nop.w
 800cc5e:	1c42      	adds	r2, r0, #1
 800cc60:	4606      	mov	r6, r0
 800cc62:	d1d6      	bne.n	800cc12 <_svfiprintf_r+0x176>
 800cc64:	89ab      	ldrh	r3, [r5, #12]
 800cc66:	065b      	lsls	r3, r3, #25
 800cc68:	f53f af2c 	bmi.w	800cac4 <_svfiprintf_r+0x28>
 800cc6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc6e:	b01d      	add	sp, #116	; 0x74
 800cc70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc74:	ab03      	add	r3, sp, #12
 800cc76:	9300      	str	r3, [sp, #0]
 800cc78:	462a      	mov	r2, r5
 800cc7a:	4b06      	ldr	r3, [pc, #24]	; (800cc94 <_svfiprintf_r+0x1f8>)
 800cc7c:	a904      	add	r1, sp, #16
 800cc7e:	4638      	mov	r0, r7
 800cc80:	f000 f87a 	bl	800cd78 <_printf_i>
 800cc84:	e7eb      	b.n	800cc5e <_svfiprintf_r+0x1c2>
 800cc86:	bf00      	nop
 800cc88:	0800d420 	.word	0x0800d420
 800cc8c:	0800d42a 	.word	0x0800d42a
 800cc90:	00000000 	.word	0x00000000
 800cc94:	0800c9e5 	.word	0x0800c9e5
 800cc98:	0800d426 	.word	0x0800d426

0800cc9c <_printf_common>:
 800cc9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cca0:	4616      	mov	r6, r2
 800cca2:	4699      	mov	r9, r3
 800cca4:	688a      	ldr	r2, [r1, #8]
 800cca6:	690b      	ldr	r3, [r1, #16]
 800cca8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ccac:	4293      	cmp	r3, r2
 800ccae:	bfb8      	it	lt
 800ccb0:	4613      	movlt	r3, r2
 800ccb2:	6033      	str	r3, [r6, #0]
 800ccb4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ccb8:	4607      	mov	r7, r0
 800ccba:	460c      	mov	r4, r1
 800ccbc:	b10a      	cbz	r2, 800ccc2 <_printf_common+0x26>
 800ccbe:	3301      	adds	r3, #1
 800ccc0:	6033      	str	r3, [r6, #0]
 800ccc2:	6823      	ldr	r3, [r4, #0]
 800ccc4:	0699      	lsls	r1, r3, #26
 800ccc6:	bf42      	ittt	mi
 800ccc8:	6833      	ldrmi	r3, [r6, #0]
 800ccca:	3302      	addmi	r3, #2
 800cccc:	6033      	strmi	r3, [r6, #0]
 800ccce:	6825      	ldr	r5, [r4, #0]
 800ccd0:	f015 0506 	ands.w	r5, r5, #6
 800ccd4:	d106      	bne.n	800cce4 <_printf_common+0x48>
 800ccd6:	f104 0a19 	add.w	sl, r4, #25
 800ccda:	68e3      	ldr	r3, [r4, #12]
 800ccdc:	6832      	ldr	r2, [r6, #0]
 800ccde:	1a9b      	subs	r3, r3, r2
 800cce0:	42ab      	cmp	r3, r5
 800cce2:	dc26      	bgt.n	800cd32 <_printf_common+0x96>
 800cce4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cce8:	1e13      	subs	r3, r2, #0
 800ccea:	6822      	ldr	r2, [r4, #0]
 800ccec:	bf18      	it	ne
 800ccee:	2301      	movne	r3, #1
 800ccf0:	0692      	lsls	r2, r2, #26
 800ccf2:	d42b      	bmi.n	800cd4c <_printf_common+0xb0>
 800ccf4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ccf8:	4649      	mov	r1, r9
 800ccfa:	4638      	mov	r0, r7
 800ccfc:	47c0      	blx	r8
 800ccfe:	3001      	adds	r0, #1
 800cd00:	d01e      	beq.n	800cd40 <_printf_common+0xa4>
 800cd02:	6823      	ldr	r3, [r4, #0]
 800cd04:	68e5      	ldr	r5, [r4, #12]
 800cd06:	6832      	ldr	r2, [r6, #0]
 800cd08:	f003 0306 	and.w	r3, r3, #6
 800cd0c:	2b04      	cmp	r3, #4
 800cd0e:	bf08      	it	eq
 800cd10:	1aad      	subeq	r5, r5, r2
 800cd12:	68a3      	ldr	r3, [r4, #8]
 800cd14:	6922      	ldr	r2, [r4, #16]
 800cd16:	bf0c      	ite	eq
 800cd18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cd1c:	2500      	movne	r5, #0
 800cd1e:	4293      	cmp	r3, r2
 800cd20:	bfc4      	itt	gt
 800cd22:	1a9b      	subgt	r3, r3, r2
 800cd24:	18ed      	addgt	r5, r5, r3
 800cd26:	2600      	movs	r6, #0
 800cd28:	341a      	adds	r4, #26
 800cd2a:	42b5      	cmp	r5, r6
 800cd2c:	d11a      	bne.n	800cd64 <_printf_common+0xc8>
 800cd2e:	2000      	movs	r0, #0
 800cd30:	e008      	b.n	800cd44 <_printf_common+0xa8>
 800cd32:	2301      	movs	r3, #1
 800cd34:	4652      	mov	r2, sl
 800cd36:	4649      	mov	r1, r9
 800cd38:	4638      	mov	r0, r7
 800cd3a:	47c0      	blx	r8
 800cd3c:	3001      	adds	r0, #1
 800cd3e:	d103      	bne.n	800cd48 <_printf_common+0xac>
 800cd40:	f04f 30ff 	mov.w	r0, #4294967295
 800cd44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd48:	3501      	adds	r5, #1
 800cd4a:	e7c6      	b.n	800ccda <_printf_common+0x3e>
 800cd4c:	18e1      	adds	r1, r4, r3
 800cd4e:	1c5a      	adds	r2, r3, #1
 800cd50:	2030      	movs	r0, #48	; 0x30
 800cd52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cd56:	4422      	add	r2, r4
 800cd58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cd5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cd60:	3302      	adds	r3, #2
 800cd62:	e7c7      	b.n	800ccf4 <_printf_common+0x58>
 800cd64:	2301      	movs	r3, #1
 800cd66:	4622      	mov	r2, r4
 800cd68:	4649      	mov	r1, r9
 800cd6a:	4638      	mov	r0, r7
 800cd6c:	47c0      	blx	r8
 800cd6e:	3001      	adds	r0, #1
 800cd70:	d0e6      	beq.n	800cd40 <_printf_common+0xa4>
 800cd72:	3601      	adds	r6, #1
 800cd74:	e7d9      	b.n	800cd2a <_printf_common+0x8e>
	...

0800cd78 <_printf_i>:
 800cd78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cd7c:	7e0f      	ldrb	r7, [r1, #24]
 800cd7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cd80:	2f78      	cmp	r7, #120	; 0x78
 800cd82:	4691      	mov	r9, r2
 800cd84:	4680      	mov	r8, r0
 800cd86:	460c      	mov	r4, r1
 800cd88:	469a      	mov	sl, r3
 800cd8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cd8e:	d807      	bhi.n	800cda0 <_printf_i+0x28>
 800cd90:	2f62      	cmp	r7, #98	; 0x62
 800cd92:	d80a      	bhi.n	800cdaa <_printf_i+0x32>
 800cd94:	2f00      	cmp	r7, #0
 800cd96:	f000 80d8 	beq.w	800cf4a <_printf_i+0x1d2>
 800cd9a:	2f58      	cmp	r7, #88	; 0x58
 800cd9c:	f000 80a3 	beq.w	800cee6 <_printf_i+0x16e>
 800cda0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cda4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cda8:	e03a      	b.n	800ce20 <_printf_i+0xa8>
 800cdaa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cdae:	2b15      	cmp	r3, #21
 800cdb0:	d8f6      	bhi.n	800cda0 <_printf_i+0x28>
 800cdb2:	a101      	add	r1, pc, #4	; (adr r1, 800cdb8 <_printf_i+0x40>)
 800cdb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cdb8:	0800ce11 	.word	0x0800ce11
 800cdbc:	0800ce25 	.word	0x0800ce25
 800cdc0:	0800cda1 	.word	0x0800cda1
 800cdc4:	0800cda1 	.word	0x0800cda1
 800cdc8:	0800cda1 	.word	0x0800cda1
 800cdcc:	0800cda1 	.word	0x0800cda1
 800cdd0:	0800ce25 	.word	0x0800ce25
 800cdd4:	0800cda1 	.word	0x0800cda1
 800cdd8:	0800cda1 	.word	0x0800cda1
 800cddc:	0800cda1 	.word	0x0800cda1
 800cde0:	0800cda1 	.word	0x0800cda1
 800cde4:	0800cf31 	.word	0x0800cf31
 800cde8:	0800ce55 	.word	0x0800ce55
 800cdec:	0800cf13 	.word	0x0800cf13
 800cdf0:	0800cda1 	.word	0x0800cda1
 800cdf4:	0800cda1 	.word	0x0800cda1
 800cdf8:	0800cf53 	.word	0x0800cf53
 800cdfc:	0800cda1 	.word	0x0800cda1
 800ce00:	0800ce55 	.word	0x0800ce55
 800ce04:	0800cda1 	.word	0x0800cda1
 800ce08:	0800cda1 	.word	0x0800cda1
 800ce0c:	0800cf1b 	.word	0x0800cf1b
 800ce10:	682b      	ldr	r3, [r5, #0]
 800ce12:	1d1a      	adds	r2, r3, #4
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	602a      	str	r2, [r5, #0]
 800ce18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ce1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ce20:	2301      	movs	r3, #1
 800ce22:	e0a3      	b.n	800cf6c <_printf_i+0x1f4>
 800ce24:	6820      	ldr	r0, [r4, #0]
 800ce26:	6829      	ldr	r1, [r5, #0]
 800ce28:	0606      	lsls	r6, r0, #24
 800ce2a:	f101 0304 	add.w	r3, r1, #4
 800ce2e:	d50a      	bpl.n	800ce46 <_printf_i+0xce>
 800ce30:	680e      	ldr	r6, [r1, #0]
 800ce32:	602b      	str	r3, [r5, #0]
 800ce34:	2e00      	cmp	r6, #0
 800ce36:	da03      	bge.n	800ce40 <_printf_i+0xc8>
 800ce38:	232d      	movs	r3, #45	; 0x2d
 800ce3a:	4276      	negs	r6, r6
 800ce3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce40:	485e      	ldr	r0, [pc, #376]	; (800cfbc <_printf_i+0x244>)
 800ce42:	230a      	movs	r3, #10
 800ce44:	e019      	b.n	800ce7a <_printf_i+0x102>
 800ce46:	680e      	ldr	r6, [r1, #0]
 800ce48:	602b      	str	r3, [r5, #0]
 800ce4a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ce4e:	bf18      	it	ne
 800ce50:	b236      	sxthne	r6, r6
 800ce52:	e7ef      	b.n	800ce34 <_printf_i+0xbc>
 800ce54:	682b      	ldr	r3, [r5, #0]
 800ce56:	6820      	ldr	r0, [r4, #0]
 800ce58:	1d19      	adds	r1, r3, #4
 800ce5a:	6029      	str	r1, [r5, #0]
 800ce5c:	0601      	lsls	r1, r0, #24
 800ce5e:	d501      	bpl.n	800ce64 <_printf_i+0xec>
 800ce60:	681e      	ldr	r6, [r3, #0]
 800ce62:	e002      	b.n	800ce6a <_printf_i+0xf2>
 800ce64:	0646      	lsls	r6, r0, #25
 800ce66:	d5fb      	bpl.n	800ce60 <_printf_i+0xe8>
 800ce68:	881e      	ldrh	r6, [r3, #0]
 800ce6a:	4854      	ldr	r0, [pc, #336]	; (800cfbc <_printf_i+0x244>)
 800ce6c:	2f6f      	cmp	r7, #111	; 0x6f
 800ce6e:	bf0c      	ite	eq
 800ce70:	2308      	moveq	r3, #8
 800ce72:	230a      	movne	r3, #10
 800ce74:	2100      	movs	r1, #0
 800ce76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ce7a:	6865      	ldr	r5, [r4, #4]
 800ce7c:	60a5      	str	r5, [r4, #8]
 800ce7e:	2d00      	cmp	r5, #0
 800ce80:	bfa2      	ittt	ge
 800ce82:	6821      	ldrge	r1, [r4, #0]
 800ce84:	f021 0104 	bicge.w	r1, r1, #4
 800ce88:	6021      	strge	r1, [r4, #0]
 800ce8a:	b90e      	cbnz	r6, 800ce90 <_printf_i+0x118>
 800ce8c:	2d00      	cmp	r5, #0
 800ce8e:	d04d      	beq.n	800cf2c <_printf_i+0x1b4>
 800ce90:	4615      	mov	r5, r2
 800ce92:	fbb6 f1f3 	udiv	r1, r6, r3
 800ce96:	fb03 6711 	mls	r7, r3, r1, r6
 800ce9a:	5dc7      	ldrb	r7, [r0, r7]
 800ce9c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cea0:	4637      	mov	r7, r6
 800cea2:	42bb      	cmp	r3, r7
 800cea4:	460e      	mov	r6, r1
 800cea6:	d9f4      	bls.n	800ce92 <_printf_i+0x11a>
 800cea8:	2b08      	cmp	r3, #8
 800ceaa:	d10b      	bne.n	800cec4 <_printf_i+0x14c>
 800ceac:	6823      	ldr	r3, [r4, #0]
 800ceae:	07de      	lsls	r6, r3, #31
 800ceb0:	d508      	bpl.n	800cec4 <_printf_i+0x14c>
 800ceb2:	6923      	ldr	r3, [r4, #16]
 800ceb4:	6861      	ldr	r1, [r4, #4]
 800ceb6:	4299      	cmp	r1, r3
 800ceb8:	bfde      	ittt	le
 800ceba:	2330      	movle	r3, #48	; 0x30
 800cebc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cec0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cec4:	1b52      	subs	r2, r2, r5
 800cec6:	6122      	str	r2, [r4, #16]
 800cec8:	f8cd a000 	str.w	sl, [sp]
 800cecc:	464b      	mov	r3, r9
 800cece:	aa03      	add	r2, sp, #12
 800ced0:	4621      	mov	r1, r4
 800ced2:	4640      	mov	r0, r8
 800ced4:	f7ff fee2 	bl	800cc9c <_printf_common>
 800ced8:	3001      	adds	r0, #1
 800ceda:	d14c      	bne.n	800cf76 <_printf_i+0x1fe>
 800cedc:	f04f 30ff 	mov.w	r0, #4294967295
 800cee0:	b004      	add	sp, #16
 800cee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cee6:	4835      	ldr	r0, [pc, #212]	; (800cfbc <_printf_i+0x244>)
 800cee8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ceec:	6829      	ldr	r1, [r5, #0]
 800ceee:	6823      	ldr	r3, [r4, #0]
 800cef0:	f851 6b04 	ldr.w	r6, [r1], #4
 800cef4:	6029      	str	r1, [r5, #0]
 800cef6:	061d      	lsls	r5, r3, #24
 800cef8:	d514      	bpl.n	800cf24 <_printf_i+0x1ac>
 800cefa:	07df      	lsls	r7, r3, #31
 800cefc:	bf44      	itt	mi
 800cefe:	f043 0320 	orrmi.w	r3, r3, #32
 800cf02:	6023      	strmi	r3, [r4, #0]
 800cf04:	b91e      	cbnz	r6, 800cf0e <_printf_i+0x196>
 800cf06:	6823      	ldr	r3, [r4, #0]
 800cf08:	f023 0320 	bic.w	r3, r3, #32
 800cf0c:	6023      	str	r3, [r4, #0]
 800cf0e:	2310      	movs	r3, #16
 800cf10:	e7b0      	b.n	800ce74 <_printf_i+0xfc>
 800cf12:	6823      	ldr	r3, [r4, #0]
 800cf14:	f043 0320 	orr.w	r3, r3, #32
 800cf18:	6023      	str	r3, [r4, #0]
 800cf1a:	2378      	movs	r3, #120	; 0x78
 800cf1c:	4828      	ldr	r0, [pc, #160]	; (800cfc0 <_printf_i+0x248>)
 800cf1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cf22:	e7e3      	b.n	800ceec <_printf_i+0x174>
 800cf24:	0659      	lsls	r1, r3, #25
 800cf26:	bf48      	it	mi
 800cf28:	b2b6      	uxthmi	r6, r6
 800cf2a:	e7e6      	b.n	800cefa <_printf_i+0x182>
 800cf2c:	4615      	mov	r5, r2
 800cf2e:	e7bb      	b.n	800cea8 <_printf_i+0x130>
 800cf30:	682b      	ldr	r3, [r5, #0]
 800cf32:	6826      	ldr	r6, [r4, #0]
 800cf34:	6961      	ldr	r1, [r4, #20]
 800cf36:	1d18      	adds	r0, r3, #4
 800cf38:	6028      	str	r0, [r5, #0]
 800cf3a:	0635      	lsls	r5, r6, #24
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	d501      	bpl.n	800cf44 <_printf_i+0x1cc>
 800cf40:	6019      	str	r1, [r3, #0]
 800cf42:	e002      	b.n	800cf4a <_printf_i+0x1d2>
 800cf44:	0670      	lsls	r0, r6, #25
 800cf46:	d5fb      	bpl.n	800cf40 <_printf_i+0x1c8>
 800cf48:	8019      	strh	r1, [r3, #0]
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	6123      	str	r3, [r4, #16]
 800cf4e:	4615      	mov	r5, r2
 800cf50:	e7ba      	b.n	800cec8 <_printf_i+0x150>
 800cf52:	682b      	ldr	r3, [r5, #0]
 800cf54:	1d1a      	adds	r2, r3, #4
 800cf56:	602a      	str	r2, [r5, #0]
 800cf58:	681d      	ldr	r5, [r3, #0]
 800cf5a:	6862      	ldr	r2, [r4, #4]
 800cf5c:	2100      	movs	r1, #0
 800cf5e:	4628      	mov	r0, r5
 800cf60:	f7f3 f936 	bl	80001d0 <memchr>
 800cf64:	b108      	cbz	r0, 800cf6a <_printf_i+0x1f2>
 800cf66:	1b40      	subs	r0, r0, r5
 800cf68:	6060      	str	r0, [r4, #4]
 800cf6a:	6863      	ldr	r3, [r4, #4]
 800cf6c:	6123      	str	r3, [r4, #16]
 800cf6e:	2300      	movs	r3, #0
 800cf70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf74:	e7a8      	b.n	800cec8 <_printf_i+0x150>
 800cf76:	6923      	ldr	r3, [r4, #16]
 800cf78:	462a      	mov	r2, r5
 800cf7a:	4649      	mov	r1, r9
 800cf7c:	4640      	mov	r0, r8
 800cf7e:	47d0      	blx	sl
 800cf80:	3001      	adds	r0, #1
 800cf82:	d0ab      	beq.n	800cedc <_printf_i+0x164>
 800cf84:	6823      	ldr	r3, [r4, #0]
 800cf86:	079b      	lsls	r3, r3, #30
 800cf88:	d413      	bmi.n	800cfb2 <_printf_i+0x23a>
 800cf8a:	68e0      	ldr	r0, [r4, #12]
 800cf8c:	9b03      	ldr	r3, [sp, #12]
 800cf8e:	4298      	cmp	r0, r3
 800cf90:	bfb8      	it	lt
 800cf92:	4618      	movlt	r0, r3
 800cf94:	e7a4      	b.n	800cee0 <_printf_i+0x168>
 800cf96:	2301      	movs	r3, #1
 800cf98:	4632      	mov	r2, r6
 800cf9a:	4649      	mov	r1, r9
 800cf9c:	4640      	mov	r0, r8
 800cf9e:	47d0      	blx	sl
 800cfa0:	3001      	adds	r0, #1
 800cfa2:	d09b      	beq.n	800cedc <_printf_i+0x164>
 800cfa4:	3501      	adds	r5, #1
 800cfa6:	68e3      	ldr	r3, [r4, #12]
 800cfa8:	9903      	ldr	r1, [sp, #12]
 800cfaa:	1a5b      	subs	r3, r3, r1
 800cfac:	42ab      	cmp	r3, r5
 800cfae:	dcf2      	bgt.n	800cf96 <_printf_i+0x21e>
 800cfb0:	e7eb      	b.n	800cf8a <_printf_i+0x212>
 800cfb2:	2500      	movs	r5, #0
 800cfb4:	f104 0619 	add.w	r6, r4, #25
 800cfb8:	e7f5      	b.n	800cfa6 <_printf_i+0x22e>
 800cfba:	bf00      	nop
 800cfbc:	0800d431 	.word	0x0800d431
 800cfc0:	0800d442 	.word	0x0800d442

0800cfc4 <__retarget_lock_acquire_recursive>:
 800cfc4:	4770      	bx	lr

0800cfc6 <__retarget_lock_release_recursive>:
 800cfc6:	4770      	bx	lr

0800cfc8 <memmove>:
 800cfc8:	4288      	cmp	r0, r1
 800cfca:	b510      	push	{r4, lr}
 800cfcc:	eb01 0402 	add.w	r4, r1, r2
 800cfd0:	d902      	bls.n	800cfd8 <memmove+0x10>
 800cfd2:	4284      	cmp	r4, r0
 800cfd4:	4623      	mov	r3, r4
 800cfd6:	d807      	bhi.n	800cfe8 <memmove+0x20>
 800cfd8:	1e43      	subs	r3, r0, #1
 800cfda:	42a1      	cmp	r1, r4
 800cfdc:	d008      	beq.n	800cff0 <memmove+0x28>
 800cfde:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cfe2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cfe6:	e7f8      	b.n	800cfda <memmove+0x12>
 800cfe8:	4402      	add	r2, r0
 800cfea:	4601      	mov	r1, r0
 800cfec:	428a      	cmp	r2, r1
 800cfee:	d100      	bne.n	800cff2 <memmove+0x2a>
 800cff0:	bd10      	pop	{r4, pc}
 800cff2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cff6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cffa:	e7f7      	b.n	800cfec <memmove+0x24>

0800cffc <_realloc_r>:
 800cffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d000:	4680      	mov	r8, r0
 800d002:	4614      	mov	r4, r2
 800d004:	460e      	mov	r6, r1
 800d006:	b921      	cbnz	r1, 800d012 <_realloc_r+0x16>
 800d008:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d00c:	4611      	mov	r1, r2
 800d00e:	f7ff bc39 	b.w	800c884 <_malloc_r>
 800d012:	b92a      	cbnz	r2, 800d020 <_realloc_r+0x24>
 800d014:	f7ff fbca 	bl	800c7ac <_free_r>
 800d018:	4625      	mov	r5, r4
 800d01a:	4628      	mov	r0, r5
 800d01c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d020:	f000 f81b 	bl	800d05a <_malloc_usable_size_r>
 800d024:	4284      	cmp	r4, r0
 800d026:	4607      	mov	r7, r0
 800d028:	d802      	bhi.n	800d030 <_realloc_r+0x34>
 800d02a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d02e:	d812      	bhi.n	800d056 <_realloc_r+0x5a>
 800d030:	4621      	mov	r1, r4
 800d032:	4640      	mov	r0, r8
 800d034:	f7ff fc26 	bl	800c884 <_malloc_r>
 800d038:	4605      	mov	r5, r0
 800d03a:	2800      	cmp	r0, #0
 800d03c:	d0ed      	beq.n	800d01a <_realloc_r+0x1e>
 800d03e:	42bc      	cmp	r4, r7
 800d040:	4622      	mov	r2, r4
 800d042:	4631      	mov	r1, r6
 800d044:	bf28      	it	cs
 800d046:	463a      	movcs	r2, r7
 800d048:	f7ff fb9a 	bl	800c780 <memcpy>
 800d04c:	4631      	mov	r1, r6
 800d04e:	4640      	mov	r0, r8
 800d050:	f7ff fbac 	bl	800c7ac <_free_r>
 800d054:	e7e1      	b.n	800d01a <_realloc_r+0x1e>
 800d056:	4635      	mov	r5, r6
 800d058:	e7df      	b.n	800d01a <_realloc_r+0x1e>

0800d05a <_malloc_usable_size_r>:
 800d05a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d05e:	1f18      	subs	r0, r3, #4
 800d060:	2b00      	cmp	r3, #0
 800d062:	bfbc      	itt	lt
 800d064:	580b      	ldrlt	r3, [r1, r0]
 800d066:	18c0      	addlt	r0, r0, r3
 800d068:	4770      	bx	lr
	...

0800d06c <_init>:
 800d06c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d06e:	bf00      	nop
 800d070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d072:	bc08      	pop	{r3}
 800d074:	469e      	mov	lr, r3
 800d076:	4770      	bx	lr

0800d078 <_fini>:
 800d078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d07a:	bf00      	nop
 800d07c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d07e:	bc08      	pop	{r3}
 800d080:	469e      	mov	lr, r3
 800d082:	4770      	bx	lr
