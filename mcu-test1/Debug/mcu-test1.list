
mcu-test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc5c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000364  0800bde4  0800bde4  0001bde4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c148  0800c148  00020294  2**0
                  CONTENTS
  4 .ARM          00000008  0800c148  0800c148  0001c148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c150  0800c150  00020294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c150  0800c150  0001c150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c154  0800c154  0001c154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000294  20000000  0800c158  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020294  2**0
                  CONTENTS
 10 .bss          000022b0  20000294  20000294  00020294  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002544  20002544  00020294  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020294  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d053  00000000  00000000  000202c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004bd4  00000000  00000000  0003d317  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001460  00000000  00000000  00041ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001398  00000000  00000000  00043350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027024  00000000  00000000  000446e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e258  00000000  00000000  0006b70c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ccf8c  00000000  00000000  00089964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001568f0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000054c8  00000000  00000000  00156940  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00000102  00000000  00000000  0015be08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000294 	.word	0x20000294
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800bdcc 	.word	0x0800bdcc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000298 	.word	0x20000298
 80001c4:	0800bdcc 	.word	0x0800bdcc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <write_register>:

//(1): Functions definitions
//-------------- Static Functions ---------------//
// Function(1): Write to register
static void write_register(uint8_t reg, uint8_t *data)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af02      	add	r7, sp, #8
 80004d2:	4603      	mov	r3, r0
 80004d4:	6039      	str	r1, [r7, #0]
 80004d6:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 80004d8:	4a09      	ldr	r2, [pc, #36]	; (8000500 <write_register+0x34>)
 80004da:	79fb      	ldrb	r3, [r7, #7]
 80004dc:	7013      	strb	r3, [r2, #0]
	iData[1] = data[0];
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	781a      	ldrb	r2, [r3, #0]
 80004e2:	4b07      	ldr	r3, [pc, #28]	; (8000500 <write_register+0x34>)
 80004e4:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100);
 80004e6:	2364      	movs	r3, #100	; 0x64
 80004e8:	9300      	str	r3, [sp, #0]
 80004ea:	2302      	movs	r3, #2
 80004ec:	4a04      	ldr	r2, [pc, #16]	; (8000500 <write_register+0x34>)
 80004ee:	2194      	movs	r1, #148	; 0x94
 80004f0:	4804      	ldr	r0, [pc, #16]	; (8000504 <write_register+0x38>)
 80004f2:	f004 fcad 	bl	8004e50 <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, data, size, 100);
}
 80004f6:	bf00      	nop
 80004f8:	3708      	adds	r7, #8
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	200002b0 	.word	0x200002b0
 8000504:	200002b4 	.word	0x200002b4

08000508 <read_register>:
// Function(2): Read from register
static void read_register(uint8_t reg, uint8_t *data)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af02      	add	r7, sp, #8
 800050e:	4603      	mov	r3, r0
 8000510:	6039      	str	r1, [r7, #0]
 8000512:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 8000514:	4a0b      	ldr	r2, [pc, #44]	; (8000544 <read_register+0x3c>)
 8000516:	79fb      	ldrb	r3, [r7, #7]
 8000518:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100);
 800051a:	2364      	movs	r3, #100	; 0x64
 800051c:	9300      	str	r3, [sp, #0]
 800051e:	2301      	movs	r3, #1
 8000520:	4a08      	ldr	r2, [pc, #32]	; (8000544 <read_register+0x3c>)
 8000522:	2194      	movs	r1, #148	; 0x94
 8000524:	4808      	ldr	r0, [pc, #32]	; (8000548 <read_register+0x40>)
 8000526:	f004 fc93 	bl	8004e50 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100);
 800052a:	2364      	movs	r3, #100	; 0x64
 800052c:	9300      	str	r3, [sp, #0]
 800052e:	2301      	movs	r3, #1
 8000530:	683a      	ldr	r2, [r7, #0]
 8000532:	2194      	movs	r1, #148	; 0x94
 8000534:	4804      	ldr	r0, [pc, #16]	; (8000548 <read_register+0x40>)
 8000536:	f004 fd89 	bl	800504c <HAL_I2C_Master_Receive>
}
 800053a:	bf00      	nop
 800053c:	3708      	adds	r7, #8
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	200002b0 	.word	0x200002b0
 8000548:	200002b4 	.word	0x200002b4

0800054c <CS43_Init>:

//-------------- Public Functions ----------------//
// Function(1): Initialisation
void CS43_Init(I2C_HandleTypeDef i2c_handle, CS43_MODE outputMode)
{
 800054c:	b084      	sub	sp, #16
 800054e:	b580      	push	{r7, lr}
 8000550:	af00      	add	r7, sp, #0
 8000552:	f107 0c08 	add.w	ip, r7, #8
 8000556:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 800055a:	4b81      	ldr	r3, [pc, #516]	; (8000760 <CS43_Init+0x214>)
 800055c:	2200      	movs	r2, #0
 800055e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000562:	4b7f      	ldr	r3, [pc, #508]	; (8000760 <CS43_Init+0x214>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	69da      	ldr	r2, [r3, #28]
 8000568:	4b7d      	ldr	r3, [pc, #500]	; (8000760 <CS43_Init+0x214>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000570:	61da      	str	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8000572:	2201      	movs	r2, #1
 8000574:	2110      	movs	r1, #16
 8000576:	487b      	ldr	r0, [pc, #492]	; (8000764 <CS43_Init+0x218>)
 8000578:	f002 fd9c 	bl	80030b4 <HAL_GPIO_WritePin>
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 800057c:	4b7a      	ldr	r3, [pc, #488]	; (8000768 <CS43_Init+0x21c>)
 800057e:	4618      	mov	r0, r3
 8000580:	f107 0308 	add.w	r3, r7, #8
 8000584:	2254      	movs	r2, #84	; 0x54
 8000586:	4619      	mov	r1, r3
 8000588:	f00b fb0c 	bl	800bba4 <memcpy>
	//(2): Power down
	iData[1] = 0x01;
 800058c:	4b77      	ldr	r3, [pc, #476]	; (800076c <CS43_Init+0x220>)
 800058e:	2201      	movs	r2, #1
 8000590:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,iData);
 8000592:	4976      	ldr	r1, [pc, #472]	; (800076c <CS43_Init+0x220>)
 8000594:	2002      	movs	r0, #2
 8000596:	f7ff ff99 	bl	80004cc <write_register>
	//(3): Enable Right and Left headphones
	iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 800059a:	4b74      	ldr	r3, [pc, #464]	; (800076c <CS43_Init+0x220>)
 800059c:	2280      	movs	r2, #128	; 0x80
 800059e:	705a      	strb	r2, [r3, #1]
	iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80005a0:	4b72      	ldr	r3, [pc, #456]	; (800076c <CS43_Init+0x220>)
 80005a2:	785b      	ldrb	r3, [r3, #1]
 80005a4:	f043 0320 	orr.w	r3, r3, #32
 80005a8:	b2da      	uxtb	r2, r3
 80005aa:	4b70      	ldr	r3, [pc, #448]	; (800076c <CS43_Init+0x220>)
 80005ac:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 80005ae:	4b6f      	ldr	r3, [pc, #444]	; (800076c <CS43_Init+0x220>)
 80005b0:	785b      	ldrb	r3, [r3, #1]
 80005b2:	f043 030c 	orr.w	r3, r3, #12
 80005b6:	b2da      	uxtb	r2, r3
 80005b8:	4b6c      	ldr	r3, [pc, #432]	; (800076c <CS43_Init+0x220>)
 80005ba:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80005bc:	4b6b      	ldr	r3, [pc, #428]	; (800076c <CS43_Init+0x220>)
 80005be:	785b      	ldrb	r3, [r3, #1]
 80005c0:	f043 0303 	orr.w	r3, r3, #3
 80005c4:	b2da      	uxtb	r2, r3
 80005c6:	4b69      	ldr	r3, [pc, #420]	; (800076c <CS43_Init+0x220>)
 80005c8:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 80005ca:	4969      	ldr	r1, [pc, #420]	; (8000770 <CS43_Init+0x224>)
 80005cc:	2004      	movs	r0, #4
 80005ce:	f7ff ff7d 	bl	80004cc <write_register>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
 80005d2:	4b66      	ldr	r3, [pc, #408]	; (800076c <CS43_Init+0x220>)
 80005d4:	2280      	movs	r2, #128	; 0x80
 80005d6:	705a      	strb	r2, [r3, #1]
	write_register(CLOCKING_CONTROL,&iData[1]);
 80005d8:	4965      	ldr	r1, [pc, #404]	; (8000770 <CS43_Init+0x224>)
 80005da:	2005      	movs	r0, #5
 80005dc:	f7ff ff76 	bl	80004cc <write_register>
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
 80005e0:	4962      	ldr	r1, [pc, #392]	; (800076c <CS43_Init+0x220>)
 80005e2:	2006      	movs	r0, #6
 80005e4:	f7ff ff90 	bl	8000508 <read_register>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 80005e8:	4b60      	ldr	r3, [pc, #384]	; (800076c <CS43_Init+0x220>)
 80005ea:	785b      	ldrb	r3, [r3, #1]
 80005ec:	f003 0320 	and.w	r3, r3, #32
 80005f0:	b2da      	uxtb	r2, r3
 80005f2:	4b5e      	ldr	r3, [pc, #376]	; (800076c <CS43_Init+0x220>)
 80005f4:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 7);  // Slave
 80005f6:	4b5d      	ldr	r3, [pc, #372]	; (800076c <CS43_Init+0x220>)
 80005f8:	785b      	ldrb	r3, [r3, #1]
 80005fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80005fe:	b2da      	uxtb	r2, r3
 8000600:	4b5a      	ldr	r3, [pc, #360]	; (800076c <CS43_Init+0x220>)
 8000602:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
 8000604:	4b59      	ldr	r3, [pc, #356]	; (800076c <CS43_Init+0x220>)
 8000606:	785b      	ldrb	r3, [r3, #1]
 8000608:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800060c:	b2da      	uxtb	r2, r3
 800060e:	4b57      	ldr	r3, [pc, #348]	; (800076c <CS43_Init+0x220>)
 8000610:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 4);  // No DSP mode
 8000612:	4b56      	ldr	r3, [pc, #344]	; (800076c <CS43_Init+0x220>)
 8000614:	785b      	ldrb	r3, [r3, #1]
 8000616:	f023 0310 	bic.w	r3, r3, #16
 800061a:	b2da      	uxtb	r2, r3
 800061c:	4b53      	ldr	r3, [pc, #332]	; (800076c <CS43_Init+0x220>)
 800061e:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
 8000620:	4b52      	ldr	r3, [pc, #328]	; (800076c <CS43_Init+0x220>)
 8000622:	785b      	ldrb	r3, [r3, #1]
 8000624:	f023 0304 	bic.w	r3, r3, #4
 8000628:	b2da      	uxtb	r2, r3
 800062a:	4b50      	ldr	r3, [pc, #320]	; (800076c <CS43_Init+0x220>)
 800062c:	705a      	strb	r2, [r3, #1]
	iData[1] |= (1 << 2);
 800062e:	4b4f      	ldr	r3, [pc, #316]	; (800076c <CS43_Init+0x220>)
 8000630:	785b      	ldrb	r3, [r3, #1]
 8000632:	f043 0304 	orr.w	r3, r3, #4
 8000636:	b2da      	uxtb	r2, r3
 8000638:	4b4c      	ldr	r3, [pc, #304]	; (800076c <CS43_Init+0x220>)
 800063a:	705a      	strb	r2, [r3, #1]

	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 800063c:	4b4b      	ldr	r3, [pc, #300]	; (800076c <CS43_Init+0x220>)
 800063e:	785b      	ldrb	r3, [r3, #1]
 8000640:	f043 0303 	orr.w	r3, r3, #3
 8000644:	b2da      	uxtb	r2, r3
 8000646:	4b49      	ldr	r3, [pc, #292]	; (800076c <CS43_Init+0x220>)
 8000648:	705a      	strb	r2, [r3, #1]
	write_register(INTERFACE_CONTROL1,&iData[1]);
 800064a:	4949      	ldr	r1, [pc, #292]	; (8000770 <CS43_Init+0x224>)
 800064c:	2006      	movs	r0, #6
 800064e:	f7ff ff3d 	bl	80004cc <write_register>
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
 8000652:	4947      	ldr	r1, [pc, #284]	; (8000770 <CS43_Init+0x224>)
 8000654:	2008      	movs	r0, #8
 8000656:	f7ff ff57 	bl	8000508 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 800065a:	4b44      	ldr	r3, [pc, #272]	; (800076c <CS43_Init+0x220>)
 800065c:	785b      	ldrb	r3, [r3, #1]
 800065e:	f023 030f 	bic.w	r3, r3, #15
 8000662:	b2da      	uxtb	r2, r3
 8000664:	4b41      	ldr	r3, [pc, #260]	; (800076c <CS43_Init+0x220>)
 8000666:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 8000668:	4b40      	ldr	r3, [pc, #256]	; (800076c <CS43_Init+0x220>)
 800066a:	785b      	ldrb	r3, [r3, #1]
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	b2da      	uxtb	r2, r3
 8000672:	4b3e      	ldr	r3, [pc, #248]	; (800076c <CS43_Init+0x220>)
 8000674:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_A,&iData[1]);
 8000676:	493e      	ldr	r1, [pc, #248]	; (8000770 <CS43_Init+0x224>)
 8000678:	2008      	movs	r0, #8
 800067a:	f7ff ff27 	bl	80004cc <write_register>
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
 800067e:	493c      	ldr	r1, [pc, #240]	; (8000770 <CS43_Init+0x224>)
 8000680:	2009      	movs	r0, #9
 8000682:	f7ff ff41 	bl	8000508 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8000686:	4b39      	ldr	r3, [pc, #228]	; (800076c <CS43_Init+0x220>)
 8000688:	785b      	ldrb	r3, [r3, #1]
 800068a:	f023 030f 	bic.w	r3, r3, #15
 800068e:	b2da      	uxtb	r2, r3
 8000690:	4b36      	ldr	r3, [pc, #216]	; (800076c <CS43_Init+0x220>)
 8000692:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 8000694:	4b35      	ldr	r3, [pc, #212]	; (800076c <CS43_Init+0x220>)
 8000696:	785b      	ldrb	r3, [r3, #1]
 8000698:	f043 0301 	orr.w	r3, r3, #1
 800069c:	b2da      	uxtb	r2, r3
 800069e:	4b33      	ldr	r3, [pc, #204]	; (800076c <CS43_Init+0x220>)
 80006a0:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_B,&iData[1]);
 80006a2:	4933      	ldr	r1, [pc, #204]	; (8000770 <CS43_Init+0x224>)
 80006a4:	2009      	movs	r0, #9
 80006a6:	f7ff ff11 	bl	80004cc <write_register>
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
 80006aa:	4931      	ldr	r1, [pc, #196]	; (8000770 <CS43_Init+0x224>)
 80006ac:	200e      	movs	r0, #14
 80006ae:	f7ff ff2b 	bl	8000508 <read_register>
	if(outputMode == MODE_ANAL)
 80006b2:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80006b6:	2b01      	cmp	r3, #1
 80006b8:	d123      	bne.n	8000702 <CS43_Init+0x1b6>
	{
		iData[1] |=  (1 << 7);   // Enable passthrough for AIN-A
 80006ba:	4b2c      	ldr	r3, [pc, #176]	; (800076c <CS43_Init+0x220>)
 80006bc:	785b      	ldrb	r3, [r3, #1]
 80006be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006c2:	b2da      	uxtb	r2, r3
 80006c4:	4b29      	ldr	r3, [pc, #164]	; (800076c <CS43_Init+0x220>)
 80006c6:	705a      	strb	r2, [r3, #1]
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
 80006c8:	4b28      	ldr	r3, [pc, #160]	; (800076c <CS43_Init+0x220>)
 80006ca:	785b      	ldrb	r3, [r3, #1]
 80006cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	4b26      	ldr	r3, [pc, #152]	; (800076c <CS43_Init+0x220>)
 80006d4:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
 80006d6:	4b25      	ldr	r3, [pc, #148]	; (800076c <CS43_Init+0x220>)
 80006d8:	785b      	ldrb	r3, [r3, #1]
 80006da:	f023 0320 	bic.w	r3, r3, #32
 80006de:	b2da      	uxtb	r2, r3
 80006e0:	4b22      	ldr	r3, [pc, #136]	; (800076c <CS43_Init+0x220>)
 80006e2:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
 80006e4:	4b21      	ldr	r3, [pc, #132]	; (800076c <CS43_Init+0x220>)
 80006e6:	785b      	ldrb	r3, [r3, #1]
 80006e8:	f023 0310 	bic.w	r3, r3, #16
 80006ec:	b2da      	uxtb	r2, r3
 80006ee:	4b1f      	ldr	r3, [pc, #124]	; (800076c <CS43_Init+0x220>)
 80006f0:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 80006f2:	4b1e      	ldr	r3, [pc, #120]	; (800076c <CS43_Init+0x220>)
 80006f4:	785b      	ldrb	r3, [r3, #1]
 80006f6:	f023 0308 	bic.w	r3, r3, #8
 80006fa:	b2da      	uxtb	r2, r3
 80006fc:	4b1b      	ldr	r3, [pc, #108]	; (800076c <CS43_Init+0x220>)
 80006fe:	705a      	strb	r2, [r3, #1]
 8000700:	e006      	b.n	8000710 <CS43_Init+0x1c4>
	}
	else if(outputMode == MODE_I2S)
 8000702:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8000706:	2b00      	cmp	r3, #0
 8000708:	d102      	bne.n	8000710 <CS43_Init+0x1c4>
	{
		iData[1] = 0x02;
 800070a:	4b18      	ldr	r3, [pc, #96]	; (800076c <CS43_Init+0x220>)
 800070c:	2202      	movs	r2, #2
 800070e:	705a      	strb	r2, [r3, #1]
	}
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 8000710:	4917      	ldr	r1, [pc, #92]	; (8000770 <CS43_Init+0x224>)
 8000712:	200e      	movs	r0, #14
 8000714:	f7ff feda 	bl	80004cc <write_register>
	//(9): Unmute headphone and speaker
	read_register(PLAYBACK_CONTROL, &iData[1]);
 8000718:	4915      	ldr	r1, [pc, #84]	; (8000770 <CS43_Init+0x224>)
 800071a:	200f      	movs	r0, #15
 800071c:	f7ff fef4 	bl	8000508 <read_register>
	iData[1] = 0x00;
 8000720:	4b12      	ldr	r3, [pc, #72]	; (800076c <CS43_Init+0x220>)
 8000722:	2200      	movs	r2, #0
 8000724:	705a      	strb	r2, [r3, #1]
	write_register(PLAYBACK_CONTROL,&iData[1]);
 8000726:	4912      	ldr	r1, [pc, #72]	; (8000770 <CS43_Init+0x224>)
 8000728:	200f      	movs	r0, #15
 800072a:	f7ff fecf 	bl	80004cc <write_register>
	//(10): Set volume to default (0dB)
	iData[1] = 0x00;
 800072e:	4b0f      	ldr	r3, [pc, #60]	; (800076c <CS43_Init+0x220>)
 8000730:	2200      	movs	r2, #0
 8000732:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 8000734:	490e      	ldr	r1, [pc, #56]	; (8000770 <CS43_Init+0x224>)
 8000736:	2014      	movs	r0, #20
 8000738:	f7ff fec8 	bl	80004cc <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 800073c:	490c      	ldr	r1, [pc, #48]	; (8000770 <CS43_Init+0x224>)
 800073e:	2015      	movs	r0, #21
 8000740:	f7ff fec4 	bl	80004cc <write_register>
	write_register(PCM_VOLUME_A,&iData[1]);
 8000744:	490a      	ldr	r1, [pc, #40]	; (8000770 <CS43_Init+0x224>)
 8000746:	201a      	movs	r0, #26
 8000748:	f7ff fec0 	bl	80004cc <write_register>
	write_register(PCM_VOLUME_B,&iData[1]);
 800074c:	4908      	ldr	r1, [pc, #32]	; (8000770 <CS43_Init+0x224>)
 800074e:	201b      	movs	r0, #27
 8000750:	f7ff febc 	bl	80004cc <write_register>
}
 8000754:	bf00      	nop
 8000756:	46bd      	mov	sp, r7
 8000758:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800075c:	b004      	add	sp, #16
 800075e:	4770      	bx	lr
 8000760:	200004c4 	.word	0x200004c4
 8000764:	40020c00 	.word	0x40020c00
 8000768:	200002b4 	.word	0x200002b4
 800076c:	200002b0 	.word	0x200002b0
 8000770:	200002b1 	.word	0x200002b1

08000774 <CS43_Enable_RightLeft>:

// Function(2): Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	71fb      	strb	r3, [r7, #7]
	switch (side)
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	2b03      	cmp	r3, #3
 8000782:	d837      	bhi.n	80007f4 <CS43_Enable_RightLeft+0x80>
 8000784:	a201      	add	r2, pc, #4	; (adr r2, 800078c <CS43_Enable_RightLeft+0x18>)
 8000786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800078a:	bf00      	nop
 800078c:	0800079d 	.word	0x0800079d
 8000790:	080007b3 	.word	0x080007b3
 8000794:	080007c9 	.word	0x080007c9
 8000798:	080007df 	.word	0x080007df
	{
		case 0:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 800079c:	4b21      	ldr	r3, [pc, #132]	; (8000824 <CS43_Enable_RightLeft+0xb0>)
 800079e:	22c0      	movs	r2, #192	; 0xc0
 80007a0:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007a2:	4b20      	ldr	r3, [pc, #128]	; (8000824 <CS43_Enable_RightLeft+0xb0>)
 80007a4:	785b      	ldrb	r3, [r3, #1]
 80007a6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80007aa:	b2da      	uxtb	r2, r3
 80007ac:	4b1d      	ldr	r3, [pc, #116]	; (8000824 <CS43_Enable_RightLeft+0xb0>)
 80007ae:	705a      	strb	r2, [r3, #1]
			break;
 80007b0:	e021      	b.n	80007f6 <CS43_Enable_RightLeft+0x82>
		case 1:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007b2:	4b1c      	ldr	r3, [pc, #112]	; (8000824 <CS43_Enable_RightLeft+0xb0>)
 80007b4:	2280      	movs	r2, #128	; 0x80
 80007b6:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007b8:	4b1a      	ldr	r3, [pc, #104]	; (8000824 <CS43_Enable_RightLeft+0xb0>)
 80007ba:	785b      	ldrb	r3, [r3, #1]
 80007bc:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80007c0:	b2da      	uxtb	r2, r3
 80007c2:	4b18      	ldr	r3, [pc, #96]	; (8000824 <CS43_Enable_RightLeft+0xb0>)
 80007c4:	705a      	strb	r2, [r3, #1]
			break;
 80007c6:	e016      	b.n	80007f6 <CS43_Enable_RightLeft+0x82>
		case 2:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007c8:	4b16      	ldr	r3, [pc, #88]	; (8000824 <CS43_Enable_RightLeft+0xb0>)
 80007ca:	22c0      	movs	r2, #192	; 0xc0
 80007cc:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007ce:	4b15      	ldr	r3, [pc, #84]	; (8000824 <CS43_Enable_RightLeft+0xb0>)
 80007d0:	785b      	ldrb	r3, [r3, #1]
 80007d2:	f043 0320 	orr.w	r3, r3, #32
 80007d6:	b2da      	uxtb	r2, r3
 80007d8:	4b12      	ldr	r3, [pc, #72]	; (8000824 <CS43_Enable_RightLeft+0xb0>)
 80007da:	705a      	strb	r2, [r3, #1]
			break;
 80007dc:	e00b      	b.n	80007f6 <CS43_Enable_RightLeft+0x82>
		case 3:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007de:	4b11      	ldr	r3, [pc, #68]	; (8000824 <CS43_Enable_RightLeft+0xb0>)
 80007e0:	2280      	movs	r2, #128	; 0x80
 80007e2:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007e4:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <CS43_Enable_RightLeft+0xb0>)
 80007e6:	785b      	ldrb	r3, [r3, #1]
 80007e8:	f043 0320 	orr.w	r3, r3, #32
 80007ec:	b2da      	uxtb	r2, r3
 80007ee:	4b0d      	ldr	r3, [pc, #52]	; (8000824 <CS43_Enable_RightLeft+0xb0>)
 80007f0:	705a      	strb	r2, [r3, #1]
			break;
 80007f2:	e000      	b.n	80007f6 <CS43_Enable_RightLeft+0x82>
		default:
			break;
 80007f4:	bf00      	nop
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 80007f6:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <CS43_Enable_RightLeft+0xb0>)
 80007f8:	785b      	ldrb	r3, [r3, #1]
 80007fa:	f043 030c 	orr.w	r3, r3, #12
 80007fe:	b2da      	uxtb	r2, r3
 8000800:	4b08      	ldr	r3, [pc, #32]	; (8000824 <CS43_Enable_RightLeft+0xb0>)
 8000802:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 8000804:	4b07      	ldr	r3, [pc, #28]	; (8000824 <CS43_Enable_RightLeft+0xb0>)
 8000806:	785b      	ldrb	r3, [r3, #1]
 8000808:	f043 0303 	orr.w	r3, r3, #3
 800080c:	b2da      	uxtb	r2, r3
 800080e:	4b05      	ldr	r3, [pc, #20]	; (8000824 <CS43_Enable_RightLeft+0xb0>)
 8000810:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 8000812:	4905      	ldr	r1, [pc, #20]	; (8000828 <CS43_Enable_RightLeft+0xb4>)
 8000814:	2004      	movs	r0, #4
 8000816:	f7ff fe59 	bl	80004cc <write_register>
}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	200002b0 	.word	0x200002b0
 8000828:	200002b1 	.word	0x200002b1

0800082c <CS43_SetVolume>:

// Function(3): Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	71fb      	strb	r3, [r7, #7]
	int8_t tempVol = volume - 50;
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	3b32      	subs	r3, #50	; 0x32
 800083a:	b2db      	uxtb	r3, r3
 800083c:	73fb      	strb	r3, [r7, #15]
	tempVol = tempVol*(127/50);
 800083e:	7bfb      	ldrb	r3, [r7, #15]
 8000840:	005b      	lsls	r3, r3, #1
 8000842:	b2db      	uxtb	r3, r3
 8000844:	73fb      	strb	r3, [r7, #15]
	uint8_t myVolume =  (uint8_t )tempVol;
 8000846:	7bfb      	ldrb	r3, [r7, #15]
 8000848:	73bb      	strb	r3, [r7, #14]
	iData[1] = myVolume;
 800084a:	4a16      	ldr	r2, [pc, #88]	; (80008a4 <CS43_SetVolume+0x78>)
 800084c:	7bbb      	ldrb	r3, [r7, #14]
 800084e:	7053      	strb	r3, [r2, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 8000850:	4915      	ldr	r1, [pc, #84]	; (80008a8 <CS43_SetVolume+0x7c>)
 8000852:	2014      	movs	r0, #20
 8000854:	f7ff fe3a 	bl	80004cc <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 8000858:	4913      	ldr	r1, [pc, #76]	; (80008a8 <CS43_SetVolume+0x7c>)
 800085a:	2015      	movs	r0, #21
 800085c:	f7ff fe36 	bl	80004cc <write_register>

	iData[1] = VOLUME_CONVERT_D(volume);
 8000860:	79fb      	ldrb	r3, [r7, #7]
 8000862:	2b64      	cmp	r3, #100	; 0x64
 8000864:	d80e      	bhi.n	8000884 <CS43_SetVolume+0x58>
 8000866:	79fa      	ldrb	r2, [r7, #7]
 8000868:	4613      	mov	r3, r2
 800086a:	005b      	lsls	r3, r3, #1
 800086c:	4413      	add	r3, r2
 800086e:	011b      	lsls	r3, r3, #4
 8000870:	4a0e      	ldr	r2, [pc, #56]	; (80008ac <CS43_SetVolume+0x80>)
 8000872:	fb82 1203 	smull	r1, r2, r2, r3
 8000876:	1152      	asrs	r2, r2, #5
 8000878:	17db      	asrs	r3, r3, #31
 800087a:	1ad3      	subs	r3, r2, r3
 800087c:	b2db      	uxtb	r3, r3
 800087e:	3b18      	subs	r3, #24
 8000880:	b2db      	uxtb	r3, r3
 8000882:	e000      	b.n	8000886 <CS43_SetVolume+0x5a>
 8000884:	2318      	movs	r3, #24
 8000886:	4a07      	ldr	r2, [pc, #28]	; (80008a4 <CS43_SetVolume+0x78>)
 8000888:	7053      	strb	r3, [r2, #1]

	/* Set the Master volume */
	write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
 800088a:	4907      	ldr	r1, [pc, #28]	; (80008a8 <CS43_SetVolume+0x7c>)
 800088c:	2020      	movs	r0, #32
 800088e:	f7ff fe1d 	bl	80004cc <write_register>
	write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
 8000892:	4905      	ldr	r1, [pc, #20]	; (80008a8 <CS43_SetVolume+0x7c>)
 8000894:	2021      	movs	r0, #33	; 0x21
 8000896:	f7ff fe19 	bl	80004cc <write_register>
}
 800089a:	bf00      	nop
 800089c:	3710      	adds	r7, #16
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	200002b0 	.word	0x200002b0
 80008a8:	200002b1 	.word	0x200002b1
 80008ac:	51eb851f 	.word	0x51eb851f

080008b0 <CS43_Start>:

// Function(4): Start the Audio DAC
void CS43_Start(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
	// Write 0x99 to register 0x00.
	iData[1] = 0x99;
 80008b4:	4b1d      	ldr	r3, [pc, #116]	; (800092c <CS43_Start+0x7c>)
 80008b6:	2299      	movs	r2, #153	; 0x99
 80008b8:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 80008ba:	491d      	ldr	r1, [pc, #116]	; (8000930 <CS43_Start+0x80>)
 80008bc:	2000      	movs	r0, #0
 80008be:	f7ff fe05 	bl	80004cc <write_register>
	// Write 0x80 to register 0x47.
	iData[1] = 0x80;
 80008c2:	4b1a      	ldr	r3, [pc, #104]	; (800092c <CS43_Start+0x7c>)
 80008c4:	2280      	movs	r2, #128	; 0x80
 80008c6:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_47,&iData[1]);
 80008c8:	4919      	ldr	r1, [pc, #100]	; (8000930 <CS43_Start+0x80>)
 80008ca:	2047      	movs	r0, #71	; 0x47
 80008cc:	f7ff fdfe 	bl	80004cc <write_register>
	// Write '1'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80008d0:	4917      	ldr	r1, [pc, #92]	; (8000930 <CS43_Start+0x80>)
 80008d2:	2032      	movs	r0, #50	; 0x32
 80008d4:	f7ff fe18 	bl	8000508 <read_register>
	iData[1] |= 0x80;
 80008d8:	4b14      	ldr	r3, [pc, #80]	; (800092c <CS43_Start+0x7c>)
 80008da:	785b      	ldrb	r3, [r3, #1]
 80008dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008e0:	b2da      	uxtb	r2, r3
 80008e2:	4b12      	ldr	r3, [pc, #72]	; (800092c <CS43_Start+0x7c>)
 80008e4:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 80008e6:	4912      	ldr	r1, [pc, #72]	; (8000930 <CS43_Start+0x80>)
 80008e8:	2032      	movs	r0, #50	; 0x32
 80008ea:	f7ff fdef 	bl	80004cc <write_register>
	// Write '0'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80008ee:	4910      	ldr	r1, [pc, #64]	; (8000930 <CS43_Start+0x80>)
 80008f0:	2032      	movs	r0, #50	; 0x32
 80008f2:	f7ff fe09 	bl	8000508 <read_register>
	iData[1] &= ~(0x80);
 80008f6:	4b0d      	ldr	r3, [pc, #52]	; (800092c <CS43_Start+0x7c>)
 80008f8:	785b      	ldrb	r3, [r3, #1]
 80008fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008fe:	b2da      	uxtb	r2, r3
 8000900:	4b0a      	ldr	r3, [pc, #40]	; (800092c <CS43_Start+0x7c>)
 8000902:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 8000904:	490a      	ldr	r1, [pc, #40]	; (8000930 <CS43_Start+0x80>)
 8000906:	2032      	movs	r0, #50	; 0x32
 8000908:	f7ff fde0 	bl	80004cc <write_register>
	// Write 0x00 to register 0x00.
	iData[1] = 0x00;
 800090c:	4b07      	ldr	r3, [pc, #28]	; (800092c <CS43_Start+0x7c>)
 800090e:	2200      	movs	r2, #0
 8000910:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 8000912:	4907      	ldr	r1, [pc, #28]	; (8000930 <CS43_Start+0x80>)
 8000914:	2000      	movs	r0, #0
 8000916:	f7ff fdd9 	bl	80004cc <write_register>
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	iData[1] = 0x9E;
 800091a:	4b04      	ldr	r3, [pc, #16]	; (800092c <CS43_Start+0x7c>)
 800091c:	229e      	movs	r2, #158	; 0x9e
 800091e:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,&iData[1]);
 8000920:	4903      	ldr	r1, [pc, #12]	; (8000930 <CS43_Start+0x80>)
 8000922:	2002      	movs	r0, #2
 8000924:	f7ff fdd2 	bl	80004cc <write_register>
}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}
 800092c:	200002b0 	.word	0x200002b0
 8000930:	200002b1 	.word	0x200002b1

08000934 <Conv_ADC>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Conv_ADC(uint8_t *buf, int32_t *result) {
	*result = 0xFF000000 * ((buf[1] >> 7) & 1) + (buf[1] << 16) + (buf[0] << 8) + buf[3];
 8000934:	7843      	ldrb	r3, [r0, #1]
 8000936:	09da      	lsrs	r2, r3, #7
 8000938:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 800093c:	041b      	lsls	r3, r3, #16
 800093e:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 8000942:	78c2      	ldrb	r2, [r0, #3]
 8000944:	4413      	add	r3, r2
 8000946:	7802      	ldrb	r2, [r0, #0]
 8000948:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800094c:	600b      	str	r3, [r1, #0]
}
 800094e:	4770      	bx	lr

08000950 <HAL_I2S_RxHalfCpltCallback>:

uint32_t rxHalfCpltCounter = 0;
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000950:	b538      	push	{r3, r4, r5, lr}
	if (hi2s->Instance == SPI2)
 8000952:	6802      	ldr	r2, [r0, #0]
 8000954:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <HAL_I2S_RxHalfCpltCallback+0x44>)
 8000956:	429a      	cmp	r2, r3
 8000958:	d000      	beq.n	800095c <HAL_I2S_RxHalfCpltCallback+0xc>
		Conv_ADC(&ADC_BUFF.ADC8[4], &BUFF_CONV[1]); // RIGHT
		RAW_SAMPLES[0] = (float)BUFF_CONV[0];
		RAW_SAMPLES[1] = (float)BUFF_CONV[1];
		rxHalfCpltCounter++;
	}
}
 800095a:	bd38      	pop	{r3, r4, r5, pc}
		Conv_ADC(&ADC_BUFF.ADC8[0], &BUFF_CONV[0]); // LEFT
 800095c:	4c0e      	ldr	r4, [pc, #56]	; (8000998 <HAL_I2S_RxHalfCpltCallback+0x48>)
 800095e:	4d0f      	ldr	r5, [pc, #60]	; (800099c <HAL_I2S_RxHalfCpltCallback+0x4c>)
 8000960:	4621      	mov	r1, r4
 8000962:	4628      	mov	r0, r5
 8000964:	f7ff ffe6 	bl	8000934 <Conv_ADC>
		Conv_ADC(&ADC_BUFF.ADC8[4], &BUFF_CONV[1]); // RIGHT
 8000968:	1d21      	adds	r1, r4, #4
 800096a:	1d28      	adds	r0, r5, #4
 800096c:	f7ff ffe2 	bl	8000934 <Conv_ADC>
		RAW_SAMPLES[0] = (float)BUFF_CONV[0];
 8000970:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <HAL_I2S_RxHalfCpltCallback+0x50>)
 8000972:	edd4 7a00 	vldr	s15, [r4]
 8000976:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800097a:	edc3 7a00 	vstr	s15, [r3]
		RAW_SAMPLES[1] = (float)BUFF_CONV[1];
 800097e:	edd4 7a01 	vldr	s15, [r4, #4]
 8000982:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000986:	edc3 7a01 	vstr	s15, [r3, #4]
		rxHalfCpltCounter++;
 800098a:	4a06      	ldr	r2, [pc, #24]	; (80009a4 <HAL_I2S_RxHalfCpltCallback+0x54>)
 800098c:	6813      	ldr	r3, [r2, #0]
 800098e:	3301      	adds	r3, #1
 8000990:	6013      	str	r3, [r2, #0]
}
 8000992:	e7e2      	b.n	800095a <HAL_I2S_RxHalfCpltCallback+0xa>
 8000994:	40003800 	.word	0x40003800
 8000998:	20000328 	.word	0x20000328
 800099c:	20000308 	.word	0x20000308
 80009a0:	20000360 	.word	0x20000360
 80009a4:	20001e2c 	.word	0x20001e2c

080009a8 <HAL_I2S_RxCpltCallback>:

uint32_t rxCpltCounter = 0;
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80009a8:	b538      	push	{r3, r4, r5, lr}
	if (hi2s->Instance == SPI2)
 80009aa:	6802      	ldr	r2, [r0, #0]
 80009ac:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <HAL_I2S_RxCpltCallback+0x4c>)
 80009ae:	429a      	cmp	r2, r3
 80009b0:	d000      	beq.n	80009b4 <HAL_I2S_RxCpltCallback+0xc>
		Conv_ADC(&ADC_BUFF.ADC8[12], &BUFF_CONV[3]); // RIGHT
		RAW_SAMPLES[0] = (float)BUFF_CONV[2];
		RAW_SAMPLES[1] = (float)BUFF_CONV[3];
		rxCpltCounter++;
	}
}
 80009b2:	bd38      	pop	{r3, r4, r5, pc}
		Conv_ADC(&ADC_BUFF.ADC8[8], &BUFF_CONV[2]); // LEFT
 80009b4:	4c10      	ldr	r4, [pc, #64]	; (80009f8 <HAL_I2S_RxCpltCallback+0x50>)
 80009b6:	4d11      	ldr	r5, [pc, #68]	; (80009fc <HAL_I2S_RxCpltCallback+0x54>)
 80009b8:	f104 0108 	add.w	r1, r4, #8
 80009bc:	f105 0008 	add.w	r0, r5, #8
 80009c0:	f7ff ffb8 	bl	8000934 <Conv_ADC>
		Conv_ADC(&ADC_BUFF.ADC8[12], &BUFF_CONV[3]); // RIGHT
 80009c4:	f104 010c 	add.w	r1, r4, #12
 80009c8:	f105 000c 	add.w	r0, r5, #12
 80009cc:	f7ff ffb2 	bl	8000934 <Conv_ADC>
		RAW_SAMPLES[0] = (float)BUFF_CONV[2];
 80009d0:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <HAL_I2S_RxCpltCallback+0x58>)
 80009d2:	edd4 7a02 	vldr	s15, [r4, #8]
 80009d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009da:	edc3 7a00 	vstr	s15, [r3]
		RAW_SAMPLES[1] = (float)BUFF_CONV[3];
 80009de:	edd4 7a03 	vldr	s15, [r4, #12]
 80009e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009e6:	edc3 7a01 	vstr	s15, [r3, #4]
		rxCpltCounter++;
 80009ea:	4a06      	ldr	r2, [pc, #24]	; (8000a04 <HAL_I2S_RxCpltCallback+0x5c>)
 80009ec:	6813      	ldr	r3, [r2, #0]
 80009ee:	3301      	adds	r3, #1
 80009f0:	6013      	str	r3, [r2, #0]
}
 80009f2:	e7de      	b.n	80009b2 <HAL_I2S_RxCpltCallback+0xa>
 80009f4:	40003800 	.word	0x40003800
 80009f8:	20000328 	.word	0x20000328
 80009fc:	20000308 	.word	0x20000308
 8000a00:	20000360 	.word	0x20000360
 8000a04:	20001e28 	.word	0x20001e28

08000a08 <HAL_I2S_TxHalfCpltCallback>:

uint32_t txHalfCpltCounter = 0;
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000a08:	b538      	push	{r3, r4, r5, lr}
	if (hi2s->Instance == SPI3)
 8000a0a:	6802      	ldr	r2, [r0, #0]
 8000a0c:	4b10      	ldr	r3, [pc, #64]	; (8000a50 <HAL_I2S_TxHalfCpltCallback+0x48>)
 8000a0e:	429a      	cmp	r2, r3
 8000a10:	d000      	beq.n	8000a14 <HAL_I2S_TxHalfCpltCallback+0xc>
		//PROC_SAMPLES[0] = RAW_SAMPLES[0] * 10;
		PROC_SAMPLES[0] = wave_gen('s', txHalfCpltCounter, 440.0F) * 10000;
		DAC_BUFF.DAC16[__HAL_DMA_GET_COUNTER(hi2s->hdmatx)] = (int16_t)PROC_SAMPLES[0];
		txHalfCpltCounter++;
	}
}
 8000a12:	bd38      	pop	{r3, r4, r5, pc}
 8000a14:	4604      	mov	r4, r0
		PROC_SAMPLES[0] = wave_gen('s', txHalfCpltCounter, 440.0F) * 10000;
 8000a16:	4d0f      	ldr	r5, [pc, #60]	; (8000a54 <HAL_I2S_TxHalfCpltCallback+0x4c>)
 8000a18:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8000a58 <HAL_I2S_TxHalfCpltCallback+0x50>
 8000a1c:	6829      	ldr	r1, [r5, #0]
 8000a1e:	2073      	movs	r0, #115	; 0x73
 8000a20:	f001 f83c 	bl	8001a9c <wave_gen>
 8000a24:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8000a5c <HAL_I2S_TxHalfCpltCallback+0x54>
 8000a28:	ee20 0a27 	vmul.f32	s0, s0, s15
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <HAL_I2S_TxHalfCpltCallback+0x58>)
 8000a2e:	ed83 0a00 	vstr	s0, [r3]
		DAC_BUFF.DAC16[__HAL_DMA_GET_COUNTER(hi2s->hdmatx)] = (int16_t)PROC_SAMPLES[0];
 8000a32:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	685a      	ldr	r2, [r3, #4]
 8000a38:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8000a3c:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <HAL_I2S_TxHalfCpltCallback+0x5c>)
 8000a3e:	ee10 1a10 	vmov	r1, s0
 8000a42:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		txHalfCpltCounter++;
 8000a46:	682b      	ldr	r3, [r5, #0]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	602b      	str	r3, [r5, #0]
}
 8000a4c:	e7e1      	b.n	8000a12 <HAL_I2S_TxHalfCpltCallback+0xa>
 8000a4e:	bf00      	nop
 8000a50:	40003c00 	.word	0x40003c00
 8000a54:	20001e34 	.word	0x20001e34
 8000a58:	43dc0000 	.word	0x43dc0000
 8000a5c:	461c4000 	.word	0x461c4000
 8000a60:	20000358 	.word	0x20000358
 8000a64:	20000338 	.word	0x20000338

08000a68 <HAL_I2S_TxCpltCallback>:

uint32_t txCpltCounter = 0;
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000a68:	b538      	push	{r3, r4, r5, lr}
	if (hi2s->Instance == SPI3)
 8000a6a:	6802      	ldr	r2, [r0, #0]
 8000a6c:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <HAL_I2S_TxCpltCallback+0x48>)
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	d000      	beq.n	8000a74 <HAL_I2S_TxCpltCallback+0xc>
	{
		PROC_SAMPLES[1] = wave_gen('s', txCpltCounter, 440.0F) * 10000;
		DAC_BUFF.DAC16[__HAL_DMA_GET_COUNTER(hi2s->hdmatx)] = (int16_t)PROC_SAMPLES[1];
		txCpltCounter++;
	}
}
 8000a72:	bd38      	pop	{r3, r4, r5, pc}
 8000a74:	4604      	mov	r4, r0
		PROC_SAMPLES[1] = wave_gen('s', txCpltCounter, 440.0F) * 10000;
 8000a76:	4d0f      	ldr	r5, [pc, #60]	; (8000ab4 <HAL_I2S_TxCpltCallback+0x4c>)
 8000a78:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8000ab8 <HAL_I2S_TxCpltCallback+0x50>
 8000a7c:	6829      	ldr	r1, [r5, #0]
 8000a7e:	2073      	movs	r0, #115	; 0x73
 8000a80:	f001 f80c 	bl	8001a9c <wave_gen>
 8000a84:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8000abc <HAL_I2S_TxCpltCallback+0x54>
 8000a88:	ee20 0a27 	vmul.f32	s0, s0, s15
 8000a8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <HAL_I2S_TxCpltCallback+0x58>)
 8000a8e:	ed83 0a01 	vstr	s0, [r3, #4]
		DAC_BUFF.DAC16[__HAL_DMA_GET_COUNTER(hi2s->hdmatx)] = (int16_t)PROC_SAMPLES[1];
 8000a92:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	685a      	ldr	r2, [r3, #4]
 8000a98:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8000a9c:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <HAL_I2S_TxCpltCallback+0x5c>)
 8000a9e:	ee10 1a10 	vmov	r1, s0
 8000aa2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		txCpltCounter++;
 8000aa6:	682b      	ldr	r3, [r5, #0]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	602b      	str	r3, [r5, #0]
}
 8000aac:	e7e1      	b.n	8000a72 <HAL_I2S_TxCpltCallback+0xa>
 8000aae:	bf00      	nop
 8000ab0:	40003c00 	.word	0x40003c00
 8000ab4:	20001e30 	.word	0x20001e30
 8000ab8:	43dc0000 	.word	0x43dc0000
 8000abc:	461c4000 	.word	0x461c4000
 8000ac0:	20000358 	.word	0x20000358
 8000ac4:	20000338 	.word	0x20000338

08000ac8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac8:	b500      	push	{lr}
 8000aca:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000acc:	2230      	movs	r2, #48	; 0x30
 8000ace:	2100      	movs	r1, #0
 8000ad0:	a808      	add	r0, sp, #32
 8000ad2:	f00b f875 	bl	800bbc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	9303      	str	r3, [sp, #12]
 8000ada:	9304      	str	r3, [sp, #16]
 8000adc:	9305      	str	r3, [sp, #20]
 8000ade:	9306      	str	r3, [sp, #24]
 8000ae0:	9307      	str	r3, [sp, #28]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae2:	9301      	str	r3, [sp, #4]
 8000ae4:	4a21      	ldr	r2, [pc, #132]	; (8000b6c <SystemClock_Config+0xa4>)
 8000ae6:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000ae8:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000aec:	6411      	str	r1, [r2, #64]	; 0x40
 8000aee:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000af0:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000af4:	9201      	str	r2, [sp, #4]
 8000af6:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000af8:	9302      	str	r3, [sp, #8]
 8000afa:	4b1d      	ldr	r3, [pc, #116]	; (8000b70 <SystemClock_Config+0xa8>)
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b0a:	9302      	str	r3, [sp, #8]
 8000b0c:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b16:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b1c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000b20:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b22:	2208      	movs	r2, #8
 8000b24:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b26:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8000b2a:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b2c:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b2e:	2307      	movs	r3, #7
 8000b30:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b32:	a808      	add	r0, sp, #32
 8000b34:	f005 fe5e 	bl	80067f4 <HAL_RCC_OscConfig>
 8000b38:	b998      	cbnz	r0, 8000b62 <SystemClock_Config+0x9a>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b3a:	230f      	movs	r3, #15
 8000b3c:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b42:	2300      	movs	r3, #0
 8000b44:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000b46:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000b4a:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b50:	9307      	str	r3, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b52:	2105      	movs	r1, #5
 8000b54:	a803      	add	r0, sp, #12
 8000b56:	f006 f8c5 	bl	8006ce4 <HAL_RCC_ClockConfig>
 8000b5a:	b920      	cbnz	r0, 8000b66 <SystemClock_Config+0x9e>
  {
    Error_Handler();
  }
}
 8000b5c:	b015      	add	sp, #84	; 0x54
 8000b5e:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b62:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000b64:	e7fe      	b.n	8000b64 <SystemClock_Config+0x9c>
 8000b66:	b672      	cpsid	i
 8000b68:	e7fe      	b.n	8000b68 <SystemClock_Config+0xa0>
 8000b6a:	bf00      	nop
 8000b6c:	40023800 	.word	0x40023800
 8000b70:	40007000 	.word	0x40007000

08000b74 <PeriphCommonClock_Config>:
{
 8000b74:	b500      	push	{lr}
 8000b76:	b085      	sub	sp, #20
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b78:	2300      	movs	r3, #0
 8000b7a:	9303      	str	r3, [sp, #12]
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	9300      	str	r3, [sp, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 181;
 8000b80:	23b5      	movs	r3, #181	; 0xb5
 8000b82:	9301      	str	r3, [sp, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b84:	2302      	movs	r3, #2
 8000b86:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b88:	4668      	mov	r0, sp
 8000b8a:	f006 fab7 	bl	80070fc <HAL_RCCEx_PeriphCLKConfig>
 8000b8e:	b910      	cbnz	r0, 8000b96 <PeriphCommonClock_Config+0x22>
}
 8000b90:	b005      	add	sp, #20
 8000b92:	f85d fb04 	ldr.w	pc, [sp], #4
 8000b96:	b672      	cpsid	i
	while (1)
 8000b98:	e7fe      	b.n	8000b98 <PeriphCommonClock_Config+0x24>
	...

08000b9c <main>:
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b0a2      	sub	sp, #136	; 0x88
  HAL_Init();
 8000ba0:	f001 fbd4 	bl	800234c <HAL_Init>
  SystemClock_Config();
 8000ba4:	f7ff ff90 	bl	8000ac8 <SystemClock_Config>
  PeriphCommonClock_Config();
 8000ba8:	f7ff ffe4 	bl	8000b74 <PeriphCommonClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bac:	2400      	movs	r4, #0
 8000bae:	9418      	str	r4, [sp, #96]	; 0x60
 8000bb0:	9419      	str	r4, [sp, #100]	; 0x64
 8000bb2:	941a      	str	r4, [sp, #104]	; 0x68
 8000bb4:	941b      	str	r4, [sp, #108]	; 0x6c
 8000bb6:	941c      	str	r4, [sp, #112]	; 0x70
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bb8:	9413      	str	r4, [sp, #76]	; 0x4c
 8000bba:	4dab      	ldr	r5, [pc, #684]	; (8000e68 <main+0x2cc>)
 8000bbc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000bbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bc2:	632b      	str	r3, [r5, #48]	; 0x30
 8000bc4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bca:	9313      	str	r3, [sp, #76]	; 0x4c
 8000bcc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bce:	9414      	str	r4, [sp, #80]	; 0x50
 8000bd0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000bd2:	f043 0304 	orr.w	r3, r3, #4
 8000bd6:	632b      	str	r3, [r5, #48]	; 0x30
 8000bd8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000bda:	f003 0304 	and.w	r3, r3, #4
 8000bde:	9314      	str	r3, [sp, #80]	; 0x50
 8000be0:	9b14      	ldr	r3, [sp, #80]	; 0x50
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be2:	9415      	str	r4, [sp, #84]	; 0x54
 8000be4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000be6:	f043 0301 	orr.w	r3, r3, #1
 8000bea:	632b      	str	r3, [r5, #48]	; 0x30
 8000bec:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	9315      	str	r3, [sp, #84]	; 0x54
 8000bf4:	9b15      	ldr	r3, [sp, #84]	; 0x54
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf6:	9416      	str	r4, [sp, #88]	; 0x58
 8000bf8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000bfa:	f043 0302 	orr.w	r3, r3, #2
 8000bfe:	632b      	str	r3, [r5, #48]	; 0x30
 8000c00:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000c02:	f003 0302 	and.w	r3, r3, #2
 8000c06:	9316      	str	r3, [sp, #88]	; 0x58
 8000c08:	9b16      	ldr	r3, [sp, #88]	; 0x58
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c0a:	9417      	str	r4, [sp, #92]	; 0x5c
 8000c0c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000c0e:	f043 0308 	orr.w	r3, r3, #8
 8000c12:	632b      	str	r3, [r5, #48]	; 0x30
 8000c14:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000c16:	f003 0308 	and.w	r3, r3, #8
 8000c1a:	9317      	str	r3, [sp, #92]	; 0x5c
 8000c1c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  HAL_GPIO_WritePin(OtgPower_GPIO_Port, OtgPower_Pin, GPIO_PIN_RESET);
 8000c1e:	f8df 9290 	ldr.w	r9, [pc, #656]	; 8000eb0 <main+0x314>
 8000c22:	4622      	mov	r2, r4
 8000c24:	2101      	movs	r1, #1
 8000c26:	4648      	mov	r0, r9
 8000c28:	f002 fa44 	bl	80030b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, EPD_RST_Pin|EPD_DC_Pin|EPD_CS_Pin, GPIO_PIN_RESET);
 8000c2c:	f8df 8284 	ldr.w	r8, [pc, #644]	; 8000eb4 <main+0x318>
 8000c30:	4622      	mov	r2, r4
 8000c32:	2146      	movs	r1, #70	; 0x46
 8000c34:	4640      	mov	r0, r8
 8000c36:	f002 fa3d 	bl	80030b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, Led1_Pin|Led2_Pin|Led3_Pin|Led4_Pin, GPIO_PIN_RESET);
 8000c3a:	4f8c      	ldr	r7, [pc, #560]	; (8000e6c <main+0x2d0>)
 8000c3c:	4622      	mov	r2, r4
 8000c3e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000c42:	4638      	mov	r0, r7
 8000c44:	f002 fa36 	bl	80030b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(AudioPower_GPIO_Port, AudioPower_Pin, GPIO_PIN_SET);
 8000c48:	2201      	movs	r2, #1
 8000c4a:	2110      	movs	r1, #16
 8000c4c:	4638      	mov	r0, r7
 8000c4e:	f002 fa31 	bl	80030b4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = OtgPower_Pin;
 8000c52:	2601      	movs	r6, #1
 8000c54:	9618      	str	r6, [sp, #96]	; 0x60
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c56:	9619      	str	r6, [sp, #100]	; 0x64
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	941a      	str	r4, [sp, #104]	; 0x68
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	941b      	str	r4, [sp, #108]	; 0x6c
  HAL_GPIO_Init(OtgPower_GPIO_Port, &GPIO_InitStruct);
 8000c5c:	a918      	add	r1, sp, #96	; 0x60
 8000c5e:	4648      	mov	r0, r9
 8000c60:	f002 f88c 	bl	8002d7c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Btn0_Pin|EPD_BUSY_Pin;
 8000c64:	2309      	movs	r3, #9
 8000c66:	9318      	str	r3, [sp, #96]	; 0x60
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c68:	9419      	str	r4, [sp, #100]	; 0x64
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	941a      	str	r4, [sp, #104]	; 0x68
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6c:	a918      	add	r1, sp, #96	; 0x60
 8000c6e:	4640      	mov	r0, r8
 8000c70:	f002 f884 	bl	8002d7c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = EPD_RST_Pin|EPD_DC_Pin|EPD_CS_Pin;
 8000c74:	2346      	movs	r3, #70	; 0x46
 8000c76:	9318      	str	r3, [sp, #96]	; 0x60
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c78:	9619      	str	r6, [sp, #100]	; 0x64
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	941a      	str	r4, [sp, #104]	; 0x68
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7c:	941b      	str	r4, [sp, #108]	; 0x6c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7e:	a918      	add	r1, sp, #96	; 0x60
 8000c80:	4640      	mov	r0, r8
 8000c82:	f002 f87b 	bl	8002d7c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Btn3_Pin|Btn2_Pin;
 8000c86:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8000c8a:	9318      	str	r3, [sp, #96]	; 0x60
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c8c:	9419      	str	r4, [sp, #100]	; 0x64
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c8e:	961a      	str	r6, [sp, #104]	; 0x68
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c90:	a918      	add	r1, sp, #96	; 0x60
 8000c92:	4877      	ldr	r0, [pc, #476]	; (8000e70 <main+0x2d4>)
 8000c94:	f002 f872 	bl	8002d7c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Btn1_Pin;
 8000c98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c9c:	9318      	str	r3, [sp, #96]	; 0x60
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c9e:	9419      	str	r4, [sp, #100]	; 0x64
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ca0:	961a      	str	r6, [sp, #104]	; 0x68
  HAL_GPIO_Init(Btn1_GPIO_Port, &GPIO_InitStruct);
 8000ca2:	a918      	add	r1, sp, #96	; 0x60
 8000ca4:	4638      	mov	r0, r7
 8000ca6:	f002 f869 	bl	8002d7c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Led1_Pin|Led2_Pin|Led3_Pin|Led4_Pin
 8000caa:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000cae:	9318      	str	r3, [sp, #96]	; 0x60
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb0:	9619      	str	r6, [sp, #100]	; 0x64
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	941a      	str	r4, [sp, #104]	; 0x68
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb4:	941b      	str	r4, [sp, #108]	; 0x6c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cb6:	a918      	add	r1, sp, #96	; 0x60
 8000cb8:	4638      	mov	r0, r7
 8000cba:	f002 f85f 	bl	8002d7c <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cbe:	9418      	str	r4, [sp, #96]	; 0x60
 8000cc0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000cc2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cc6:	632b      	str	r3, [r5, #48]	; 0x30
 8000cc8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000cca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cce:	9318      	str	r3, [sp, #96]	; 0x60
 8000cd0:	9b18      	ldr	r3, [sp, #96]	; 0x60
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000cd2:	4622      	mov	r2, r4
 8000cd4:	4621      	mov	r1, r4
 8000cd6:	200e      	movs	r0, #14
 8000cd8:	f001 fca9 	bl	800262e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000cdc:	200e      	movs	r0, #14
 8000cde:	f001 fcc2 	bl	8002666 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000ce2:	4622      	mov	r2, r4
 8000ce4:	4621      	mov	r1, r4
 8000ce6:	2010      	movs	r0, #16
 8000ce8:	f001 fca1 	bl	800262e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000cec:	2010      	movs	r0, #16
 8000cee:	f001 fcba 	bl	8002666 <HAL_NVIC_EnableIRQ>
  hi2c1.Instance = I2C1;
 8000cf2:	4860      	ldr	r0, [pc, #384]	; (8000e74 <main+0x2d8>)
 8000cf4:	4b60      	ldr	r3, [pc, #384]	; (8000e78 <main+0x2dc>)
 8000cf6:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000cf8:	4b60      	ldr	r3, [pc, #384]	; (8000e7c <main+0x2e0>)
 8000cfa:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cfc:	6084      	str	r4, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000cfe:	60c4      	str	r4, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d00:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d04:	6103      	str	r3, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d06:	6144      	str	r4, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d08:	6184      	str	r4, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d0a:	61c4      	str	r4, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d0c:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d0e:	f003 ff5b 	bl	8004bc8 <HAL_I2C_Init>
 8000d12:	2800      	cmp	r0, #0
 8000d14:	f040 809f 	bne.w	8000e56 <main+0x2ba>
  hi2s2.Instance = SPI2;
 8000d18:	4859      	ldr	r0, [pc, #356]	; (8000e80 <main+0x2e4>)
 8000d1a:	4b5a      	ldr	r3, [pc, #360]	; (8000e84 <main+0x2e8>)
 8000d1c:	6003      	str	r3, [r0, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8000d1e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d22:	6043      	str	r3, [r0, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000d24:	2300      	movs	r3, #0
 8000d26:	6083      	str	r3, [r0, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000d28:	2203      	movs	r2, #3
 8000d2a:	60c2      	str	r2, [r0, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000d2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d30:	6102      	str	r2, [r0, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8000d32:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000d36:	6142      	str	r2, [r0, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000d38:	6183      	str	r3, [r0, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000d3a:	61c3      	str	r3, [r0, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000d3c:	6203      	str	r3, [r0, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000d3e:	f004 fed9 	bl	8005af4 <HAL_I2S_Init>
 8000d42:	2800      	cmp	r0, #0
 8000d44:	f040 8089 	bne.w	8000e5a <main+0x2be>
  hi2s3.Instance = SPI3;
 8000d48:	484f      	ldr	r0, [pc, #316]	; (8000e88 <main+0x2ec>)
 8000d4a:	4b50      	ldr	r3, [pc, #320]	; (8000e8c <main+0x2f0>)
 8000d4c:	6003      	str	r3, [r0, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000d4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d52:	6042      	str	r2, [r0, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000d54:	2300      	movs	r3, #0
 8000d56:	6083      	str	r3, [r0, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000d58:	60c3      	str	r3, [r0, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000d5a:	6102      	str	r2, [r0, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8000d5c:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000d60:	6142      	str	r2, [r0, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000d62:	6183      	str	r3, [r0, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000d64:	61c3      	str	r3, [r0, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000d66:	6203      	str	r3, [r0, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000d68:	f004 fec4 	bl	8005af4 <HAL_I2S_Init>
 8000d6c:	2800      	cmp	r0, #0
 8000d6e:	d176      	bne.n	8000e5e <main+0x2c2>
  MX_USB_HOST_Init();
 8000d70:	f00a fba6 	bl	800b4c0 <MX_USB_HOST_Init>
  MX_FATFS_Init();
 8000d74:	f007 fb42 	bl	80083fc <MX_FATFS_Init>
  hspi1.Instance = SPI1;
 8000d78:	4845      	ldr	r0, [pc, #276]	; (8000e90 <main+0x2f4>)
 8000d7a:	4b46      	ldr	r3, [pc, #280]	; (8000e94 <main+0x2f8>)
 8000d7c:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d7e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000d82:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000d84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d88:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d8e:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d90:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d96:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000d98:	2228      	movs	r2, #40	; 0x28
 8000d9a:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d9c:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d9e:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000da0:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000da2:	230a      	movs	r3, #10
 8000da4:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000da6:	f006 fae9 	bl	800737c <HAL_SPI_Init>
 8000daa:	2800      	cmp	r0, #0
 8000dac:	d159      	bne.n	8000e62 <main+0x2c6>
	pedalboard.active_pedals = 0;
 8000dae:	483a      	ldr	r0, [pc, #232]	; (8000e98 <main+0x2fc>)
 8000db0:	2500      	movs	r5, #0
 8000db2:	7005      	strb	r5, [r0, #0]
	pedalboard_append(&pedalboard, LPF);
 8000db4:	2105      	movs	r1, #5
 8000db6:	f000 fef7 	bl	8001ba8 <pedalboard_append>
	CS43_Init(hi2c1, MODE_I2S);
 8000dba:	4c2e      	ldr	r4, [pc, #184]	; (8000e74 <main+0x2d8>)
 8000dbc:	9511      	str	r5, [sp, #68]	; 0x44
 8000dbe:	2244      	movs	r2, #68	; 0x44
 8000dc0:	f104 0110 	add.w	r1, r4, #16
 8000dc4:	4668      	mov	r0, sp
 8000dc6:	f00a feed 	bl	800bba4 <memcpy>
 8000dca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000dce:	f7ff fbbd 	bl	800054c <CS43_Init>
	CS43_SetVolume(0);
 8000dd2:	4628      	mov	r0, r5
 8000dd4:	f7ff fd2a 	bl	800082c <CS43_SetVolume>
	CS43_Enable_RightLeft(CS43_RIGHT_LEFT);
 8000dd8:	2003      	movs	r0, #3
 8000dda:	f7ff fccb 	bl	8000774 <CS43_Enable_RightLeft>
	CS43_Start();
 8000dde:	f7ff fd67 	bl	80008b0 <CS43_Start>
	HAL_I2S_Receive_DMA(&hi2s2, &ADC_BUFF.ADC16[0], 4);
 8000de2:	2204      	movs	r2, #4
 8000de4:	492d      	ldr	r1, [pc, #180]	; (8000e9c <main+0x300>)
 8000de6:	4826      	ldr	r0, [pc, #152]	; (8000e80 <main+0x2e4>)
 8000de8:	f005 f86c 	bl	8005ec4 <HAL_I2S_Receive_DMA>
	HAL_I2S_Transmit_DMA(&hi2s3, &DAC_BUFF.DAC16[0], 2);
 8000dec:	2202      	movs	r2, #2
 8000dee:	492c      	ldr	r1, [pc, #176]	; (8000ea0 <main+0x304>)
 8000df0:	4825      	ldr	r0, [pc, #148]	; (8000e88 <main+0x2ec>)
 8000df2:	f004 ffbf 	bl	8005d74 <HAL_I2S_Transmit_DMA>
	draw_clean(image);
 8000df6:	4d2b      	ldr	r5, [pc, #172]	; (8000ea4 <main+0x308>)
 8000df8:	4628      	mov	r0, r5
 8000dfa:	f000 f9a9 	bl	8001150 <draw_clean>
	draw_rectangle(image, 36, 56, 88, 20);
 8000dfe:	2614      	movs	r6, #20
 8000e00:	9600      	str	r6, [sp, #0]
 8000e02:	2358      	movs	r3, #88	; 0x58
 8000e04:	2238      	movs	r2, #56	; 0x38
 8000e06:	2124      	movs	r1, #36	; 0x24
 8000e08:	4628      	mov	r0, r5
 8000e0a:	f000 f8b0 	bl	8000f6e <draw_rectangle>
	sprintf(row, "g33ky toad");
 8000e0e:	4a26      	ldr	r2, [pc, #152]	; (8000ea8 <main+0x30c>)
 8000e10:	ab1d      	add	r3, sp, #116	; 0x74
 8000e12:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e14:	c303      	stmia	r3!, {r0, r1}
 8000e16:	f823 2b02 	strh.w	r2, [r3], #2
 8000e1a:	0c12      	lsrs	r2, r2, #16
 8000e1c:	701a      	strb	r2, [r3, #0]
	draw_text(image, row, 40, 60);
 8000e1e:	233c      	movs	r3, #60	; 0x3c
 8000e20:	2228      	movs	r2, #40	; 0x28
 8000e22:	a91d      	add	r1, sp, #116	; 0x74
 8000e24:	4628      	mov	r0, r5
 8000e26:	f000 f964 	bl	80010f2 <draw_text>
	sprintf(row, "digital pedal");
 8000e2a:	4b20      	ldr	r3, [pc, #128]	; (8000eac <main+0x310>)
 8000e2c:	ac1d      	add	r4, sp, #116	; 0x74
 8000e2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e30:	c407      	stmia	r4!, {r0, r1, r2}
 8000e32:	8023      	strh	r3, [r4, #0]
	draw_text(image, row, 20, 90);
 8000e34:	235a      	movs	r3, #90	; 0x5a
 8000e36:	4632      	mov	r2, r6
 8000e38:	a91d      	add	r1, sp, #116	; 0x74
 8000e3a:	4628      	mov	r0, r5
 8000e3c:	f000 f959 	bl	80010f2 <draw_text>
		HAL_GPIO_WritePin(OtgPower_GPIO_Port, OtgPower_Pin, GPIO_PIN_RESET);
 8000e40:	4e1b      	ldr	r6, [pc, #108]	; (8000eb0 <main+0x314>)
 8000e42:	2500      	movs	r5, #0
 8000e44:	2401      	movs	r4, #1
    MX_USB_HOST_Process();
 8000e46:	f00a fb61 	bl	800b50c <MX_USB_HOST_Process>
		HAL_GPIO_WritePin(OtgPower_GPIO_Port, OtgPower_Pin, GPIO_PIN_RESET);
 8000e4a:	462a      	mov	r2, r5
 8000e4c:	4621      	mov	r1, r4
 8000e4e:	4630      	mov	r0, r6
 8000e50:	f002 f930 	bl	80030b4 <HAL_GPIO_WritePin>
	while (1)
 8000e54:	e7f7      	b.n	8000e46 <main+0x2aa>
 8000e56:	b672      	cpsid	i
	while (1)
 8000e58:	e7fe      	b.n	8000e58 <main+0x2bc>
 8000e5a:	b672      	cpsid	i
 8000e5c:	e7fe      	b.n	8000e5c <main+0x2c0>
 8000e5e:	b672      	cpsid	i
 8000e60:	e7fe      	b.n	8000e60 <main+0x2c4>
 8000e62:	b672      	cpsid	i
 8000e64:	e7fe      	b.n	8000e64 <main+0x2c8>
 8000e66:	bf00      	nop
 8000e68:	40023800 	.word	0x40023800
 8000e6c:	40020c00 	.word	0x40020c00
 8000e70:	40020400 	.word	0x40020400
 8000e74:	20000428 	.word	0x20000428
 8000e78:	40005400 	.word	0x40005400
 8000e7c:	000186a0 	.word	0x000186a0
 8000e80:	2000047c 	.word	0x2000047c
 8000e84:	40003800 	.word	0x40003800
 8000e88:	200004c4 	.word	0x200004c4
 8000e8c:	40003c00 	.word	0x40003c00
 8000e90:	2000050c 	.word	0x2000050c
 8000e94:	40013000 	.word	0x40013000
 8000e98:	200017e4 	.word	0x200017e4
 8000e9c:	20000308 	.word	0x20000308
 8000ea0:	20000338 	.word	0x20000338
 8000ea4:	20000564 	.word	0x20000564
 8000ea8:	0800c0f8 	.word	0x0800c0f8
 8000eac:	0800c104 	.word	0x0800c104
 8000eb0:	40020800 	.word	0x40020800
 8000eb4:	40020000 	.word	0x40020000

08000eb8 <Error_Handler>:
 8000eb8:	b672      	cpsid	i
 8000eba:	e7fe      	b.n	8000eba <Error_Handler+0x2>

08000ebc <read_font_pixel>:
#define CANVAS_WIDTH 128
#define CANVAS_HEIGHT 296

uint8_t font[516] = { 0x0, 0x18, 0x3C, 0x66, 0x66, 0x66, 0x7E, 0x66, 0x66, 0x66, 0x0, 0x0, 0x0, 0x7C, 0x66, 0x66, 0x66, 0x7C, 0x66, 0x66, 0x66, 0x7C, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x60, 0x60, 0x60, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x78, 0x6C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6C, 0x78, 0x0, 0x0, 0x0, 0x7E, 0x60, 0x60, 0x60, 0x78, 0x60, 0x60, 0x60, 0x7E, 0x0, 0x0, 0x0, 0x7E, 0x60, 0x60, 0x60, 0x78, 0x60, 0x60, 0x60, 0x60, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x60, 0x60, 0x6E, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x66, 0x66, 0x66, 0x66, 0x7E, 0x66, 0x66, 0x66, 0x66, 0x0, 0x0, 0x0, 0x3C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x0, 0x0, 0x0, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x66, 0x66, 0x6C, 0x6C, 0x78, 0x6C, 0x6C, 0x66, 0x66, 0x0, 0x0, 0x0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x7E, 0x0, 0x0, 0x0, 0x63, 0x63, 0x77, 0x7F, 0x6B, 0x6B, 0x63, 0x63, 0x63, 0x0, 0x0, 0x0, 0x63, 0x63, 0x73, 0x7B, 0x6F, 0x67, 0x63, 0x63, 0x63, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x7C, 0x66, 0x66, 0x66, 0x7C, 0x60, 0x60, 0x60, 0x60, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0xC, 0x6, 0x0, 0x7C, 0x66, 0x66, 0x66, 0x7C, 0x6C, 0x66, 0x66, 0x64, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x60, 0x30, 0x18, 0xC, 0x6, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x7E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x0, 0x0, 0x0, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x0, 0x0, 0x0, 0x63, 0x63, 0x63, 0x63, 0x6B, 0x6B, 0x36, 0x36, 0x36, 0x0, 0x0, 0x0, 0x66, 0x66, 0x34, 0x18, 0x18, 0x2C, 0x66, 0x66, 0x66, 0x0, 0x0, 0x0, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x18, 0x18, 0x18, 0x0, 0x0, 0x0, 0x7E, 0x6, 0x6, 0xC, 0x18, 0x30, 0x60, 0x60, 0x7E, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x6E, 0x6E, 0x66, 0x76, 0x76, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x6, 0xE, 0x3E, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x6, 0xC, 0x18, 0x30, 0x60, 0x7E, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x6, 0x1C, 0x6, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x30, 0x30, 0x36, 0x36, 0x36, 0x66, 0x7F, 0x6, 0x6, 0x0, 0x0, 0x0, 0x7E, 0x60, 0x60, 0x60, 0x7C, 0x6, 0x6, 0xC, 0x78, 0x0, 0x0, 0x0, 0x1C, 0x38, 0x30, 0x7C, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x7E, 0x6, 0xC, 0xC, 0x18, 0x18, 0x30, 0x30, 0x30, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x76, 0x3C, 0x6E, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x66, 0x66, 0x3E, 0xC, 0x1C, 0x38, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0x38, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0x38, 0x18, 0x30, 0x0, 0x0, 0x0, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7E, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0xC, 0x18, 0x30, 0x60, 0x30, 0x18, 0xC, 0x6, 0x0, 0x0, 0x0, 0x60, 0x30, 0x18, 0xC, 0x6, 0xC, 0x18, 0x30, 0x60, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};

uint8_t read_font_pixel(uint8_t *image, uint16_t x, uint16_t y) {
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	807b      	strh	r3, [r7, #2]
 8000ec8:	4613      	mov	r3, r2
 8000eca:	803b      	strh	r3, [r7, #0]
	uint16_t i = (x +  y * FONT_WIDTH) / 8;
 8000ecc:	887a      	ldrh	r2, [r7, #2]
 8000ece:	883b      	ldrh	r3, [r7, #0]
 8000ed0:	00db      	lsls	r3, r3, #3
 8000ed2:	4413      	add	r3, r2
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	da00      	bge.n	8000eda <read_font_pixel+0x1e>
 8000ed8:	3307      	adds	r3, #7
 8000eda:	10db      	asrs	r3, r3, #3
 8000edc:	81fb      	strh	r3, [r7, #14]
	uint8_t pixel_group = image[i];
 8000ede:	89fb      	ldrh	r3, [r7, #14]
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	737b      	strb	r3, [r7, #13]
	return ((pixel_group >> (7 - x % 8)) & 0x01);
 8000ee8:	7b7a      	ldrb	r2, [r7, #13]
 8000eea:	887b      	ldrh	r3, [r7, #2]
 8000eec:	43db      	mvns	r3, r3
 8000eee:	f003 0307 	and.w	r3, r3, #7
 8000ef2:	fa42 f303 	asr.w	r3, r2, r3
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	f003 0301 	and.w	r3, r3, #1
 8000efc:	b2db      	uxtb	r3, r3
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3714      	adds	r7, #20
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr

08000f0a <toggle_single_pixel>:

void toggle_single_pixel(uint8_t *image, uint16_t x, uint16_t y) {
 8000f0a:	b480      	push	{r7}
 8000f0c:	b085      	sub	sp, #20
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
 8000f12:	460b      	mov	r3, r1
 8000f14:	807b      	strh	r3, [r7, #2]
 8000f16:	4613      	mov	r3, r2
 8000f18:	803b      	strh	r3, [r7, #0]
	uint16_t i = (x +  y * CANVAS_WIDTH) / 8;
 8000f1a:	887a      	ldrh	r2, [r7, #2]
 8000f1c:	883b      	ldrh	r3, [r7, #0]
 8000f1e:	01db      	lsls	r3, r3, #7
 8000f20:	4413      	add	r3, r2
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	da00      	bge.n	8000f28 <toggle_single_pixel+0x1e>
 8000f26:	3307      	adds	r3, #7
 8000f28:	10db      	asrs	r3, r3, #3
 8000f2a:	81fb      	strh	r3, [r7, #14]
	if (x < CANVAS_WIDTH && y < CANVAS_HEIGHT) image[i] ^= (0x01 << (7 - x % 8));
 8000f2c:	887b      	ldrh	r3, [r7, #2]
 8000f2e:	2b7f      	cmp	r3, #127	; 0x7f
 8000f30:	d817      	bhi.n	8000f62 <toggle_single_pixel+0x58>
 8000f32:	883b      	ldrh	r3, [r7, #0]
 8000f34:	f5b3 7f94 	cmp.w	r3, #296	; 0x128
 8000f38:	d213      	bcs.n	8000f62 <toggle_single_pixel+0x58>
 8000f3a:	89fb      	ldrh	r3, [r7, #14]
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	4413      	add	r3, r2
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	b25a      	sxtb	r2, r3
 8000f44:	887b      	ldrh	r3, [r7, #2]
 8000f46:	43db      	mvns	r3, r3
 8000f48:	f003 0307 	and.w	r3, r3, #7
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f52:	b25b      	sxtb	r3, r3
 8000f54:	4053      	eors	r3, r2
 8000f56:	b259      	sxtb	r1, r3
 8000f58:	89fb      	ldrh	r3, [r7, #14]
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	b2ca      	uxtb	r2, r1
 8000f60:	701a      	strb	r2, [r3, #0]
}
 8000f62:	bf00      	nop
 8000f64:	3714      	adds	r7, #20
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr

08000f6e <draw_rectangle>:

void draw_rectangle(uint8_t *image, uint16_t x, uint16_t y, uint16_t w, uint16_t h) {
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b086      	sub	sp, #24
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	60f8      	str	r0, [r7, #12]
 8000f76:	4608      	mov	r0, r1
 8000f78:	4611      	mov	r1, r2
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	817b      	strh	r3, [r7, #10]
 8000f80:	460b      	mov	r3, r1
 8000f82:	813b      	strh	r3, [r7, #8]
 8000f84:	4613      	mov	r3, r2
 8000f86:	80fb      	strh	r3, [r7, #6]
	for (uint16_t i = 0; i < h; i++) {
 8000f88:	2300      	movs	r3, #0
 8000f8a:	82fb      	strh	r3, [r7, #22]
 8000f8c:	e018      	b.n	8000fc0 <draw_rectangle+0x52>
		for (uint16_t j = 0; j < w; j++) {
 8000f8e:	2300      	movs	r3, #0
 8000f90:	82bb      	strh	r3, [r7, #20]
 8000f92:	e00e      	b.n	8000fb2 <draw_rectangle+0x44>
			toggle_single_pixel(image, x + j, y + i);
 8000f94:	897a      	ldrh	r2, [r7, #10]
 8000f96:	8abb      	ldrh	r3, [r7, #20]
 8000f98:	4413      	add	r3, r2
 8000f9a:	b299      	uxth	r1, r3
 8000f9c:	893a      	ldrh	r2, [r7, #8]
 8000f9e:	8afb      	ldrh	r3, [r7, #22]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	68f8      	ldr	r0, [r7, #12]
 8000fa8:	f7ff ffaf 	bl	8000f0a <toggle_single_pixel>
		for (uint16_t j = 0; j < w; j++) {
 8000fac:	8abb      	ldrh	r3, [r7, #20]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	82bb      	strh	r3, [r7, #20]
 8000fb2:	8aba      	ldrh	r2, [r7, #20]
 8000fb4:	88fb      	ldrh	r3, [r7, #6]
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	d3ec      	bcc.n	8000f94 <draw_rectangle+0x26>
	for (uint16_t i = 0; i < h; i++) {
 8000fba:	8afb      	ldrh	r3, [r7, #22]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	82fb      	strh	r3, [r7, #22]
 8000fc0:	8afa      	ldrh	r2, [r7, #22]
 8000fc2:	8c3b      	ldrh	r3, [r7, #32]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d3e2      	bcc.n	8000f8e <draw_rectangle+0x20>
		}
	}
}
 8000fc8:	bf00      	nop
 8000fca:	bf00      	nop
 8000fcc:	3718      	adds	r7, #24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
	...

08000fd4 <draw_char>:

void draw_char(uint8_t *image, uint16_t x, uint16_t y, uint16_t c) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	4608      	mov	r0, r1
 8000fde:	4611      	mov	r1, r2
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	817b      	strh	r3, [r7, #10]
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	813b      	strh	r3, [r7, #8]
 8000fea:	4613      	mov	r3, r2
 8000fec:	80fb      	strh	r3, [r7, #6]
	uint16_t font_offset = c * FONT_HEIGHT;
 8000fee:	88fb      	ldrh	r3, [r7, #6]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	0052      	lsls	r2, r2, #1
 8000ff4:	4413      	add	r3, r2
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	827b      	strh	r3, [r7, #18]
	for (uint16_t i = 0; i < FONT_HEIGHT; i++) {
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	82fb      	strh	r3, [r7, #22]
 8000ffe:	e023      	b.n	8001048 <draw_char+0x74>
		for (uint16_t j = 0; j < FONT_WIDTH; j++) {
 8001000:	2300      	movs	r3, #0
 8001002:	82bb      	strh	r3, [r7, #20]
 8001004:	e01a      	b.n	800103c <draw_char+0x68>
			if (read_font_pixel(font, j, i + font_offset)) {
 8001006:	8afa      	ldrh	r2, [r7, #22]
 8001008:	8a7b      	ldrh	r3, [r7, #18]
 800100a:	4413      	add	r3, r2
 800100c:	b29a      	uxth	r2, r3
 800100e:	8abb      	ldrh	r3, [r7, #20]
 8001010:	4619      	mov	r1, r3
 8001012:	4811      	ldr	r0, [pc, #68]	; (8001058 <draw_char+0x84>)
 8001014:	f7ff ff52 	bl	8000ebc <read_font_pixel>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d00b      	beq.n	8001036 <draw_char+0x62>
				toggle_single_pixel(image, x + j, y + i);
 800101e:	897a      	ldrh	r2, [r7, #10]
 8001020:	8abb      	ldrh	r3, [r7, #20]
 8001022:	4413      	add	r3, r2
 8001024:	b299      	uxth	r1, r3
 8001026:	893a      	ldrh	r2, [r7, #8]
 8001028:	8afb      	ldrh	r3, [r7, #22]
 800102a:	4413      	add	r3, r2
 800102c:	b29b      	uxth	r3, r3
 800102e:	461a      	mov	r2, r3
 8001030:	68f8      	ldr	r0, [r7, #12]
 8001032:	f7ff ff6a 	bl	8000f0a <toggle_single_pixel>
		for (uint16_t j = 0; j < FONT_WIDTH; j++) {
 8001036:	8abb      	ldrh	r3, [r7, #20]
 8001038:	3301      	adds	r3, #1
 800103a:	82bb      	strh	r3, [r7, #20]
 800103c:	8abb      	ldrh	r3, [r7, #20]
 800103e:	2b07      	cmp	r3, #7
 8001040:	d9e1      	bls.n	8001006 <draw_char+0x32>
	for (uint16_t i = 0; i < FONT_HEIGHT; i++) {
 8001042:	8afb      	ldrh	r3, [r7, #22]
 8001044:	3301      	adds	r3, #1
 8001046:	82fb      	strh	r3, [r7, #22]
 8001048:	8afb      	ldrh	r3, [r7, #22]
 800104a:	2b0b      	cmp	r3, #11
 800104c:	d9d8      	bls.n	8001000 <draw_char+0x2c>
			}
		}
	}
}
 800104e:	bf00      	nop
 8001050:	bf00      	nop
 8001052:	3718      	adds	r7, #24
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000000 	.word	0x20000000

0800105c <translate>:

uint16_t translate(char c) {
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
	if (c >= 'A' && c <= 'Z') {
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	2b40      	cmp	r3, #64	; 0x40
 800106a:	d907      	bls.n	800107c <translate+0x20>
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	2b5a      	cmp	r3, #90	; 0x5a
 8001070:	d804      	bhi.n	800107c <translate+0x20>
		return c - 'A';
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	b29b      	uxth	r3, r3
 8001076:	3b41      	subs	r3, #65	; 0x41
 8001078:	b29b      	uxth	r3, r3
 800107a:	e034      	b.n	80010e6 <translate+0x8a>
	} else if (c >= 'a' && c <= 'z') {
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	2b60      	cmp	r3, #96	; 0x60
 8001080:	d907      	bls.n	8001092 <translate+0x36>
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	2b7a      	cmp	r3, #122	; 0x7a
 8001086:	d804      	bhi.n	8001092 <translate+0x36>
		return c - 'a';
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	b29b      	uxth	r3, r3
 800108c:	3b61      	subs	r3, #97	; 0x61
 800108e:	b29b      	uxth	r3, r3
 8001090:	e029      	b.n	80010e6 <translate+0x8a>
	} else if (c >= '0' && c <= '9') {
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	2b2f      	cmp	r3, #47	; 0x2f
 8001096:	d907      	bls.n	80010a8 <translate+0x4c>
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	2b39      	cmp	r3, #57	; 0x39
 800109c:	d804      	bhi.n	80010a8 <translate+0x4c>
		return c - '0' + 26;
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	b29b      	uxth	r3, r3
 80010a2:	3b16      	subs	r3, #22
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	e01e      	b.n	80010e6 <translate+0x8a>
	} else if (c == '.') {
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	2b2e      	cmp	r3, #46	; 0x2e
 80010ac:	d101      	bne.n	80010b2 <translate+0x56>
		return 36;
 80010ae:	2324      	movs	r3, #36	; 0x24
 80010b0:	e019      	b.n	80010e6 <translate+0x8a>
	} else if (c == ',') {
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	2b2c      	cmp	r3, #44	; 0x2c
 80010b6:	d101      	bne.n	80010bc <translate+0x60>
		return 37;
 80010b8:	2325      	movs	r3, #37	; 0x25
 80010ba:	e014      	b.n	80010e6 <translate+0x8a>
	} else if (c == '+') {
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	2b2b      	cmp	r3, #43	; 0x2b
 80010c0:	d101      	bne.n	80010c6 <translate+0x6a>
		return 38;
 80010c2:	2326      	movs	r3, #38	; 0x26
 80010c4:	e00f      	b.n	80010e6 <translate+0x8a>
	} else if (c == '-') {
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	2b2d      	cmp	r3, #45	; 0x2d
 80010ca:	d101      	bne.n	80010d0 <translate+0x74>
		return 39;
 80010cc:	2327      	movs	r3, #39	; 0x27
 80010ce:	e00a      	b.n	80010e6 <translate+0x8a>
	} else if (c == '<') {
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	2b3c      	cmp	r3, #60	; 0x3c
 80010d4:	d101      	bne.n	80010da <translate+0x7e>
		return 40;
 80010d6:	2328      	movs	r3, #40	; 0x28
 80010d8:	e005      	b.n	80010e6 <translate+0x8a>
	} else if (c == '>') {
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	2b3e      	cmp	r3, #62	; 0x3e
 80010de:	d101      	bne.n	80010e4 <translate+0x88>
		return 41;
 80010e0:	2329      	movs	r3, #41	; 0x29
 80010e2:	e000      	b.n	80010e6 <translate+0x8a>
	} else {
		return 42; // ' '
 80010e4:	232a      	movs	r3, #42	; 0x2a
	}
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr

080010f2 <draw_text>:

void draw_text(uint8_t *image, char *text, uint16_t x, uint16_t y) {
 80010f2:	b590      	push	{r4, r7, lr}
 80010f4:	b087      	sub	sp, #28
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	60f8      	str	r0, [r7, #12]
 80010fa:	60b9      	str	r1, [r7, #8]
 80010fc:	4611      	mov	r1, r2
 80010fe:	461a      	mov	r2, r3
 8001100:	460b      	mov	r3, r1
 8001102:	80fb      	strh	r3, [r7, #6]
 8001104:	4613      	mov	r3, r2
 8001106:	80bb      	strh	r3, [r7, #4]
	uint16_t i = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	82fb      	strh	r3, [r7, #22]
	while(text[i] > 0) {
 800110c:	e015      	b.n	800113a <draw_text+0x48>
		draw_char(image, x + FONT_WIDTH * i, y, translate(text[i]));
 800110e:	8afb      	ldrh	r3, [r7, #22]
 8001110:	00db      	lsls	r3, r3, #3
 8001112:	b29a      	uxth	r2, r3
 8001114:	88fb      	ldrh	r3, [r7, #6]
 8001116:	4413      	add	r3, r2
 8001118:	b29c      	uxth	r4, r3
 800111a:	8afb      	ldrh	r3, [r7, #22]
 800111c:	68ba      	ldr	r2, [r7, #8]
 800111e:	4413      	add	r3, r2
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff ff9a 	bl	800105c <translate>
 8001128:	4603      	mov	r3, r0
 800112a:	88ba      	ldrh	r2, [r7, #4]
 800112c:	4621      	mov	r1, r4
 800112e:	68f8      	ldr	r0, [r7, #12]
 8001130:	f7ff ff50 	bl	8000fd4 <draw_char>
		i++;
 8001134:	8afb      	ldrh	r3, [r7, #22]
 8001136:	3301      	adds	r3, #1
 8001138:	82fb      	strh	r3, [r7, #22]
	while(text[i] > 0) {
 800113a:	8afb      	ldrh	r3, [r7, #22]
 800113c:	68ba      	ldr	r2, [r7, #8]
 800113e:	4413      	add	r3, r2
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d1e3      	bne.n	800110e <draw_text+0x1c>
	}
}
 8001146:	bf00      	nop
 8001148:	bf00      	nop
 800114a:	371c      	adds	r7, #28
 800114c:	46bd      	mov	sp, r7
 800114e:	bd90      	pop	{r4, r7, pc}

08001150 <draw_clean>:
	}
	draw_text(image, row + offset, x, y);

}

void draw_clean(uint8_t *image) {
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
	uint16_t bytes = CANVAS_WIDTH * CANVAS_HEIGHT / 8;
 8001158:	f44f 5394 	mov.w	r3, #4736	; 0x1280
 800115c:	81bb      	strh	r3, [r7, #12]
	for (uint16_t i = 0; i < bytes; i++) image[i] = 0xFF;
 800115e:	2300      	movs	r3, #0
 8001160:	81fb      	strh	r3, [r7, #14]
 8001162:	e007      	b.n	8001174 <draw_clean+0x24>
 8001164:	89fb      	ldrh	r3, [r7, #14]
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	4413      	add	r3, r2
 800116a:	22ff      	movs	r2, #255	; 0xff
 800116c:	701a      	strb	r2, [r3, #0]
 800116e:	89fb      	ldrh	r3, [r7, #14]
 8001170:	3301      	adds	r3, #1
 8001172:	81fb      	strh	r3, [r7, #14]
 8001174:	89fa      	ldrh	r2, [r7, #14]
 8001176:	89bb      	ldrh	r3, [r7, #12]
 8001178:	429a      	cmp	r2, r3
 800117a:	d3f3      	bcc.n	8001164 <draw_clean+0x14>
}
 800117c:	bf00      	nop
 800117e:	bf00      	nop
 8001180:	3714      	adds	r7, #20
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
	...

0800118c <overdrive_pedal_init>:
#include "pedalboard_min.h"

// OVERDRIVE

void overdrive_pedal_init(pedal_config_t *conf) {
 800118c:	b490      	push	{r4, r7}
 800118e:	b09a      	sub	sp, #104	; 0x68
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
    conf->float_params[INTENSITY] = (float_parameter_t){4.F, 1.F, 10.F, 0.5F};
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4a1a      	ldr	r2, [pc, #104]	; (8001200 <overdrive_pedal_init+0x74>)
 8001198:	f103 0430 	add.w	r4, r3, #48	; 0x30
 800119c:	4613      	mov	r3, r2
 800119e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[THRESHOLD_HIGH] = (float_parameter_t){32767.F, 0.F, 32767.F, 1.F};
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4a17      	ldr	r2, [pc, #92]	; (8001204 <overdrive_pedal_init+0x78>)
 80011a8:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80011ac:	4613      	mov	r3, r2
 80011ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[THRESHOLD_LOW] = (float_parameter_t){28000.F, 0.F, 32767.F, 1.F};
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4a14      	ldr	r2, [pc, #80]	; (8001208 <overdrive_pedal_init+0x7c>)
 80011b8:	f103 0450 	add.w	r4, r3, #80	; 0x50
 80011bc:	4613      	mov	r3, r2
 80011be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[SOFTENER] = (float_parameter_t){4.F, 1.F, 10.F, 0.5F};
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4a0e      	ldr	r2, [pc, #56]	; (8001200 <overdrive_pedal_init+0x74>)
 80011c8:	f103 0460 	add.w	r4, r3, #96	; 0x60
 80011cc:	4613      	mov	r3, r2
 80011ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_1] = (float_parameter_t){1.F, 0.F, 1.F, 0.1F};
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4a0d      	ldr	r2, [pc, #52]	; (800120c <overdrive_pedal_init+0x80>)
 80011d8:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80011dc:	4613      	mov	r3, r2
 80011de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_2] = (float_parameter_t){0.F, 0.F, 1.F, 0.1F};
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4a0a      	ldr	r2, [pc, #40]	; (8001210 <overdrive_pedal_init+0x84>)
 80011e8:	f103 0480 	add.w	r4, r3, #128	; 0x80
 80011ec:	4613      	mov	r3, r2
 80011ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80011f4:	bf00      	nop
 80011f6:	3768      	adds	r7, #104	; 0x68
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bc90      	pop	{r4, r7}
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	0800bde4 	.word	0x0800bde4
 8001204:	0800bdf4 	.word	0x0800bdf4
 8001208:	0800be04 	.word	0x0800be04
 800120c:	0800be14 	.word	0x0800be14
 8001210:	0800be24 	.word	0x0800be24

08001214 <overdrive_process>:

float overdrive_process(float in, pedal_config_t *conf) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	ed87 0a01 	vstr	s0, [r7, #4]
 800121e:	6038      	str	r0, [r7, #0]
    float out = in *  conf->float_params[INTENSITY].value;
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001226:	ed97 7a01 	vldr	s14, [r7, #4]
 800122a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800122e:	edc7 7a03 	vstr	s15, [r7, #12]
    out = soft_clip(out, conf->float_params[THRESHOLD_LOW].value, conf->float_params[SOFTENER].value);
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 800123e:	eeb0 1a47 	vmov.f32	s2, s14
 8001242:	eef0 0a67 	vmov.f32	s1, s15
 8001246:	ed97 0a03 	vldr	s0, [r7, #12]
 800124a:	f000 fbab 	bl	80019a4 <soft_clip>
 800124e:	ed87 0a03 	vstr	s0, [r7, #12]
    out = hard_clip(out, conf->float_params[THRESHOLD_HIGH].value);
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001258:	eef0 0a67 	vmov.f32	s1, s15
 800125c:	ed97 0a03 	vldr	s0, [r7, #12]
 8001260:	f000 fb70 	bl	8001944 <hard_clip>
 8001264:	ed87 0a03 	vstr	s0, [r7, #12]
    out = mix(out, in, conf->float_params[BALANCE_1].value, conf->float_params[BALANCE_2].value);
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8001274:	eef0 1a47 	vmov.f32	s3, s14
 8001278:	eeb0 1a67 	vmov.f32	s2, s15
 800127c:	edd7 0a01 	vldr	s1, [r7, #4]
 8001280:	ed97 0a03 	vldr	s0, [r7, #12]
 8001284:	f000 fb3e 	bl	8001904 <mix>
 8001288:	ed87 0a03 	vstr	s0, [r7, #12]
    return out;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	ee07 3a90 	vmov	s15, r3
}
 8001292:	eeb0 0a67 	vmov.f32	s0, s15
 8001296:	3710      	adds	r7, #16
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <bitcrusher_rs_pedal_init>:

// BITCRUSHER resolution

void bitcrusher_rs_pedal_init(pedal_config_t *conf) {
 800129c:	b490      	push	{r4, r7}
 800129e:	b08e      	sub	sp, #56	; 0x38
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
    conf->int_params[REDUCT_INTENSITY] = (int_parameter_t){12, 1, 16, 1};
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4a0e      	ldr	r2, [pc, #56]	; (80012e0 <bitcrusher_rs_pedal_init+0x44>)
 80012a8:	f103 0420 	add.w	r4, r3, #32
 80012ac:	4613      	mov	r3, r2
 80012ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_1] = (float_parameter_t){0.5F, 0.F, 1.F, 0.1F};
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	4a0b      	ldr	r2, [pc, #44]	; (80012e4 <bitcrusher_rs_pedal_init+0x48>)
 80012b8:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80012bc:	4613      	mov	r3, r2
 80012be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_2] = (float_parameter_t){0.5F, 0.F, 1.F, 0.1F};
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4a07      	ldr	r2, [pc, #28]	; (80012e4 <bitcrusher_rs_pedal_init+0x48>)
 80012c8:	f103 0480 	add.w	r4, r3, #128	; 0x80
 80012cc:	4613      	mov	r3, r2
 80012ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80012d4:	bf00      	nop
 80012d6:	3738      	adds	r7, #56	; 0x38
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc90      	pop	{r4, r7}
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	0800be34 	.word	0x0800be34
 80012e4:	0800be44 	.word	0x0800be44

080012e8 <bitcrusher_rs_process>:

float bitcrusher_rs_process(float in, pedal_config_t *conf) {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	ed87 0a01 	vstr	s0, [r7, #4]
 80012f2:	6038      	str	r0, [r7, #0]
    int16_t shift = conf->int_params[REDUCT_INTENSITY].value;
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	6a1b      	ldr	r3, [r3, #32]
 80012f8:	81fb      	strh	r3, [r7, #14]
    int16_t _out = (int16_t)in;
 80012fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80012fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001302:	ee17 3a90 	vmov	r3, s15
 8001306:	81bb      	strh	r3, [r7, #12]
    _out = _out >> shift;
 8001308:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800130c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001310:	fa42 f303 	asr.w	r3, r2, r3
 8001314:	81bb      	strh	r3, [r7, #12]
    _out = _out << shift;
 8001316:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800131a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	81bb      	strh	r3, [r7, #12]
    _out += (2 << shift -2);
 8001324:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001328:	3b02      	subs	r3, #2
 800132a:	2202      	movs	r2, #2
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	b29a      	uxth	r2, r3
 8001332:	89bb      	ldrh	r3, [r7, #12]
 8001334:	4413      	add	r3, r2
 8001336:	b29b      	uxth	r3, r3
 8001338:	81bb      	strh	r3, [r7, #12]
    float out = (float)_out;
 800133a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800133e:	ee07 3a90 	vmov	s15, r3
 8001342:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001346:	edc7 7a02 	vstr	s15, [r7, #8]
    out = mix(out, in, conf->float_params[BALANCE_1].value, conf->float_params[BALANCE_2].value);
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8001356:	eef0 1a47 	vmov.f32	s3, s14
 800135a:	eeb0 1a67 	vmov.f32	s2, s15
 800135e:	edd7 0a01 	vldr	s1, [r7, #4]
 8001362:	ed97 0a02 	vldr	s0, [r7, #8]
 8001366:	f000 facd 	bl	8001904 <mix>
 800136a:	ed87 0a02 	vstr	s0, [r7, #8]
    return out;
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	ee07 3a90 	vmov	s15, r3
}
 8001374:	eeb0 0a67 	vmov.f32	s0, s15
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
	...

08001380 <tremolo_pedal_init>:

// TREMOLO

void tremolo_pedal_init(pedal_config_t *conf) {
 8001380:	b490      	push	{r4, r7}
 8001382:	b092      	sub	sp, #72	; 0x48
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
    conf->int_params[COUNTER] = (int_parameter_t){0, 1, 0, 0};
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2200      	movs	r2, #0
 800138c:	611a      	str	r2, [r3, #16]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2201      	movs	r2, #1
 8001392:	615a      	str	r2, [r3, #20]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	619a      	str	r2, [r3, #24]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2200      	movs	r2, #0
 800139e:	61da      	str	r2, [r3, #28]
    conf->float_params[SPEED] = (float_parameter_t){2.F, 0.1F, 10.F, 0.1F};
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4a0e      	ldr	r2, [pc, #56]	; (80013dc <tremolo_pedal_init+0x5c>)
 80013a4:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 80013a8:	4613      	mov	r3, r2
 80013aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_1] = (float_parameter_t){0.2F, 0.F, 1.F, 0.1F};
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4a0b      	ldr	r2, [pc, #44]	; (80013e0 <tremolo_pedal_init+0x60>)
 80013b4:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80013b8:	4613      	mov	r3, r2
 80013ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_2] = (float_parameter_t){0.8F, 0.F, 1.F, 0.1F};
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	4a08      	ldr	r2, [pc, #32]	; (80013e4 <tremolo_pedal_init+0x64>)
 80013c4:	f103 0480 	add.w	r4, r3, #128	; 0x80
 80013c8:	4613      	mov	r3, r2
 80013ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80013d0:	bf00      	nop
 80013d2:	3748      	adds	r7, #72	; 0x48
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bc90      	pop	{r4, r7}
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	0800be54 	.word	0x0800be54
 80013e0:	0800be64 	.word	0x0800be64
 80013e4:	0800be74 	.word	0x0800be74

080013e8 <tremolo_process>:

float tremolo_process(float in, pedal_config_t *conf) {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	ed87 0a01 	vstr	s0, [r7, #4]
 80013f2:	6038      	str	r0, [r7, #0]
    float tone = 440.0F;
 80013f4:	4b1c      	ldr	r3, [pc, #112]	; (8001468 <tremolo_process+0x80>)
 80013f6:	60fb      	str	r3, [r7, #12]
    float out = in * wave_gen('s', conf->int_params[COUNTER].value, tone * conf->float_params[SPEED].value);
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	691b      	ldr	r3, [r3, #16]
 80013fc:	461a      	mov	r2, r3
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8001404:	edd7 7a03 	vldr	s15, [r7, #12]
 8001408:	ee67 7a27 	vmul.f32	s15, s14, s15
 800140c:	eeb0 0a67 	vmov.f32	s0, s15
 8001410:	4611      	mov	r1, r2
 8001412:	2073      	movs	r0, #115	; 0x73
 8001414:	f000 fb42 	bl	8001a9c <wave_gen>
 8001418:	eeb0 7a40 	vmov.f32	s14, s0
 800141c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001420:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001424:	edc7 7a02 	vstr	s15, [r7, #8]
    conf->int_params[COUNTER].value++;
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	691b      	ldr	r3, [r3, #16]
 800142c:	1c5a      	adds	r2, r3, #1
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	611a      	str	r2, [r3, #16]
    out = mix(out, in, conf->float_params[BALANCE_1].value, conf->float_params[BALANCE_2].value);
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 800143e:	eef0 1a47 	vmov.f32	s3, s14
 8001442:	eeb0 1a67 	vmov.f32	s2, s15
 8001446:	edd7 0a01 	vldr	s1, [r7, #4]
 800144a:	ed97 0a02 	vldr	s0, [r7, #8]
 800144e:	f000 fa59 	bl	8001904 <mix>
 8001452:	ed87 0a02 	vstr	s0, [r7, #8]
    return out;
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	ee07 3a90 	vmov	s15, r3
}
 800145c:	eeb0 0a67 	vmov.f32	s0, s15
 8001460:	3710      	adds	r7, #16
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	43dc0000 	.word	0x43dc0000

0800146c <overdrive_sqrt_pedal_init>:

// OVERDRIVE_SQRT

void overdrive_sqrt_pedal_init(pedal_config_t *conf) {
 800146c:	b490      	push	{r4, r7}
 800146e:	b092      	sub	sp, #72	; 0x48
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
    conf->float_params[INTENSITY] = (float_parameter_t){500.F, 0.F, 2000.F, 100.F};
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	4a12      	ldr	r2, [pc, #72]	; (80014c0 <overdrive_sqrt_pedal_init+0x54>)
 8001478:	f103 0430 	add.w	r4, r3, #48	; 0x30
 800147c:	4613      	mov	r3, r2
 800147e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001480:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[THRESHOLD_HIGH] = (float_parameter_t){32767.F, 0.F, 32767.F, 1.F};
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	4a0f      	ldr	r2, [pc, #60]	; (80014c4 <overdrive_sqrt_pedal_init+0x58>)
 8001488:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800148c:	4613      	mov	r3, r2
 800148e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001490:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_1] = (float_parameter_t){0.25F, 0.F, 1.F, 0.1F};
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4a0c      	ldr	r2, [pc, #48]	; (80014c8 <overdrive_sqrt_pedal_init+0x5c>)
 8001498:	f103 0470 	add.w	r4, r3, #112	; 0x70
 800149c:	4613      	mov	r3, r2
 800149e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_2] = (float_parameter_t){0.75F, 0.F, 1.F, 0.1F};
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4a09      	ldr	r2, [pc, #36]	; (80014cc <overdrive_sqrt_pedal_init+0x60>)
 80014a8:	f103 0480 	add.w	r4, r3, #128	; 0x80
 80014ac:	4613      	mov	r3, r2
 80014ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80014b4:	bf00      	nop
 80014b6:	3748      	adds	r7, #72	; 0x48
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bc90      	pop	{r4, r7}
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	0800be84 	.word	0x0800be84
 80014c4:	0800bdf4 	.word	0x0800bdf4
 80014c8:	0800be94 	.word	0x0800be94
 80014cc:	0800bea4 	.word	0x0800bea4

080014d0 <overdrive_sqrt_process>:

float overdrive_sqrt_process(float in, pedal_config_t *conf) {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	ed87 0a01 	vstr	s0, [r7, #4]
 80014da:	6038      	str	r0, [r7, #0]
    float out;
    if (in > 0.0F) {
 80014dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80014e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e8:	dd06      	ble.n	80014f8 <overdrive_sqrt_process+0x28>
        out = square_root(in);
 80014ea:	ed97 0a01 	vldr	s0, [r7, #4]
 80014ee:	f000 faa4 	bl	8001a3a <square_root>
 80014f2:	ed87 0a03 	vstr	s0, [r7, #12]
 80014f6:	e00d      	b.n	8001514 <overdrive_sqrt_process+0x44>
    } else {
        out = -square_root(-in);
 80014f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80014fc:	eef1 7a67 	vneg.f32	s15, s15
 8001500:	eeb0 0a67 	vmov.f32	s0, s15
 8001504:	f000 fa99 	bl	8001a3a <square_root>
 8001508:	eef0 7a40 	vmov.f32	s15, s0
 800150c:	eef1 7a67 	vneg.f32	s15, s15
 8001510:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    out = out * conf->float_params[INTENSITY].value;
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800151a:	ed97 7a03 	vldr	s14, [r7, #12]
 800151e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001522:	edc7 7a03 	vstr	s15, [r7, #12]
    out = hard_clip(out, conf->float_params[THRESHOLD_HIGH].value);
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800152c:	eef0 0a67 	vmov.f32	s1, s15
 8001530:	ed97 0a03 	vldr	s0, [r7, #12]
 8001534:	f000 fa06 	bl	8001944 <hard_clip>
 8001538:	ed87 0a03 	vstr	s0, [r7, #12]
    out = mix(out, in, conf->float_params[BALANCE_1].value, conf->float_params[BALANCE_2].value);
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8001548:	eef0 1a47 	vmov.f32	s3, s14
 800154c:	eeb0 1a67 	vmov.f32	s2, s15
 8001550:	edd7 0a01 	vldr	s1, [r7, #4]
 8001554:	ed97 0a03 	vldr	s0, [r7, #12]
 8001558:	f000 f9d4 	bl	8001904 <mix>
 800155c:	ed87 0a03 	vstr	s0, [r7, #12]
    return out;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	ee07 3a90 	vmov	s15, r3
}
 8001566:	eeb0 0a67 	vmov.f32	s0, s15
 800156a:	3710      	adds	r7, #16
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <amplifier_pedal_init>:

// AMPLIFIER

void amplifier_pedal_init(pedal_config_t *conf) {
 8001570:	b490      	push	{r4, r7}
 8001572:	b08a      	sub	sp, #40	; 0x28
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
    conf->float_params[INTENSITY] = (float_parameter_t){0.5F, 0.1F, 10.F, 0.1F};
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4a0a      	ldr	r2, [pc, #40]	; (80015a4 <amplifier_pedal_init+0x34>)
 800157c:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8001580:	4613      	mov	r3, r2
 8001582:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001584:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[THRESHOLD_HIGH] = (float_parameter_t){32767.F, 0.F, 32767.F, 1.F};
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4a07      	ldr	r2, [pc, #28]	; (80015a8 <amplifier_pedal_init+0x38>)
 800158c:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8001590:	4613      	mov	r3, r2
 8001592:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001594:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001598:	bf00      	nop
 800159a:	3728      	adds	r7, #40	; 0x28
 800159c:	46bd      	mov	sp, r7
 800159e:	bc90      	pop	{r4, r7}
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	0800beb4 	.word	0x0800beb4
 80015a8:	0800bdf4 	.word	0x0800bdf4

080015ac <amplifier_process>:

float amplifier_process(float in, pedal_config_t *conf) {
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	ed87 0a01 	vstr	s0, [r7, #4]
 80015b6:	6038      	str	r0, [r7, #0]
    float out = in * conf->float_params[INTENSITY].value;
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80015be:	ed97 7a01 	vldr	s14, [r7, #4]
 80015c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015c6:	edc7 7a03 	vstr	s15, [r7, #12]
    out = hard_clip(out, conf->float_params[THRESHOLD_HIGH].value);
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80015d0:	eef0 0a67 	vmov.f32	s1, s15
 80015d4:	ed97 0a03 	vldr	s0, [r7, #12]
 80015d8:	f000 f9b4 	bl	8001944 <hard_clip>
 80015dc:	ed87 0a03 	vstr	s0, [r7, #12]
    return out;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	ee07 3a90 	vmov	s15, r3
}
 80015e6:	eeb0 0a67 	vmov.f32	s0, s15
 80015ea:	3710      	adds	r7, #16
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <dyn_amplifier_pedal_init>:

// DYN_AMPLIFIER

void dyn_amplifier_pedal_init(pedal_config_t *conf) {
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
    //conf->float_params[GAIN_INTENSITY] = (float_parameter_t){1000, 0.1, 10, 0.1};
    //conf->float_params[CLIP_THRESHOLD] = (float_parameter_t){32767, 0, 32767, 1};
    //conf->float_params[SOFT_THRESHOLD] = (float_parameter_t){28000, 0, 32767, 1};
    //conf->float_params[BALANCE] = (float_parameter_t){0.5, 0, 1, 0.1};
}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <dyn_amplifier_process>:

float dyn_amplifier_process(float in, pedal_config_t *conf) {
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	ed87 0a01 	vstr	s0, [r7, #4]
 800160e:	6038      	str	r0, [r7, #0]
    //    else if (max < conf->float_params[SOFT_THRESHOLD].value) dyn += 0.01;
    //    max = 0;
    //}
    //out = hard_clip(out, conf->float_params[CLIP_THRESHOLD].value);
    //return out;
    return in;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	ee07 3a90 	vmov	s15, r3
}
 8001616:	eeb0 0a67 	vmov.f32	s0, s15
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <low_pass_filter_pedal_init>:

// LPF

void low_pass_filter_pedal_init(pedal_config_t *conf) {
 8001624:	b490      	push	{r4, r7}
 8001626:	b092      	sub	sp, #72	; 0x48
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
    conf->float_params[INTENSITY] = (float_parameter_t){0.9F, 0.0F, 1.0F, 0.01F};
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4a11      	ldr	r2, [pc, #68]	; (8001674 <low_pass_filter_pedal_init+0x50>)
 8001630:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8001634:	4613      	mov	r3, r2
 8001636:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001638:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_1] = (float_parameter_t){1.F, 0.F, 1.F, 0.1F};
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4a0e      	ldr	r2, [pc, #56]	; (8001678 <low_pass_filter_pedal_init+0x54>)
 8001640:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8001644:	4613      	mov	r3, r2
 8001646:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001648:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_2] = (float_parameter_t){0.F, 0.F, 1.F, 0.1F};
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	4a0b      	ldr	r2, [pc, #44]	; (800167c <low_pass_filter_pedal_init+0x58>)
 8001650:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8001654:	4613      	mov	r3, r2
 8001656:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001658:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[PAST] = (float_parameter_t){0.F, 0.F, 0.F, 0.F};
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	33b0      	adds	r3, #176	; 0xb0
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
}
 800166a:	bf00      	nop
 800166c:	3748      	adds	r7, #72	; 0x48
 800166e:	46bd      	mov	sp, r7
 8001670:	bc90      	pop	{r4, r7}
 8001672:	4770      	bx	lr
 8001674:	0800bec4 	.word	0x0800bec4
 8001678:	0800be14 	.word	0x0800be14
 800167c:	0800be24 	.word	0x0800be24

08001680 <low_pass_filter_process>:

float low_pass_filter_process(float in, pedal_config_t *conf) {
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	ed87 0a01 	vstr	s0, [r7, #4]
 800168a:	6038      	str	r0, [r7, #0]
    float alpha = conf->float_params[INTENSITY].value;
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001690:	60fb      	str	r3, [r7, #12]
    float out = conf->float_params[PAST].value * alpha + (1.F - alpha) * in;
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 8001698:	edd7 7a03 	vldr	s15, [r7, #12]
 800169c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80016a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80016a8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80016ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80016b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016b8:	edc7 7a02 	vstr	s15, [r7, #8]
    conf->float_params[PAST].value = out;
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	68ba      	ldr	r2, [r7, #8]
 80016c0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    out = mix(out, in, conf->float_params[BALANCE_1].value, conf->float_params[BALANCE_2].value);
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 80016d0:	eef0 1a47 	vmov.f32	s3, s14
 80016d4:	eeb0 1a67 	vmov.f32	s2, s15
 80016d8:	edd7 0a01 	vldr	s1, [r7, #4]
 80016dc:	ed97 0a02 	vldr	s0, [r7, #8]
 80016e0:	f000 f910 	bl	8001904 <mix>
 80016e4:	ed87 0a02 	vstr	s0, [r7, #8]
    return out;
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	ee07 3a90 	vmov	s15, r3
}
 80016ee:	eeb0 0a67 	vmov.f32	s0, s15
 80016f2:	3710      	adds	r7, #16
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <fuzz_pedal_init>:

// FUZZ

void fuzz_pedal_init(pedal_config_t *conf) {
 80016f8:	b490      	push	{r4, r7}
 80016fa:	b09e      	sub	sp, #120	; 0x78
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
    conf->int_params[COUNTER] = (int_parameter_t){0, 1, 0, 0};
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2200      	movs	r2, #0
 8001704:	611a      	str	r2, [r3, #16]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2201      	movs	r2, #1
 800170a:	615a      	str	r2, [r3, #20]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	619a      	str	r2, [r3, #24]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2200      	movs	r2, #0
 8001716:	61da      	str	r2, [r3, #28]
    conf->float_params[INTENSITY] = (float_parameter_t){4.F, 1.F, 10.F, 0.5F};
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4a1a      	ldr	r2, [pc, #104]	; (8001784 <fuzz_pedal_init+0x8c>)
 800171c:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8001720:	4613      	mov	r3, r2
 8001722:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001724:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[THRESHOLD_HIGH] = (float_parameter_t){32767.F, 0.F, 32767.F, 1.F};
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4a17      	ldr	r2, [pc, #92]	; (8001788 <fuzz_pedal_init+0x90>)
 800172c:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8001730:	4613      	mov	r3, r2
 8001732:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001734:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[HEIGHT] = (float_parameter_t){2048.F, 0.F, 8192.F, 32.F};
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	4a14      	ldr	r2, [pc, #80]	; (800178c <fuzz_pedal_init+0x94>)
 800173c:	f103 0490 	add.w	r4, r3, #144	; 0x90
 8001740:	4613      	mov	r3, r2
 8001742:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001744:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[SPEED] = (float_parameter_t){1.F, 0.1F, 10.F, 0.1F};
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	4a11      	ldr	r2, [pc, #68]	; (8001790 <fuzz_pedal_init+0x98>)
 800174c:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8001750:	4613      	mov	r3, r2
 8001752:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001754:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_1] = (float_parameter_t){1.F, 0.F, 1.F, 0.1F};
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4a0e      	ldr	r2, [pc, #56]	; (8001794 <fuzz_pedal_init+0x9c>)
 800175c:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8001760:	4613      	mov	r3, r2
 8001762:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001764:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_2] = (float_parameter_t){0.F, 0.F, 1.F, 0.1F};
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	4a0b      	ldr	r2, [pc, #44]	; (8001798 <fuzz_pedal_init+0xa0>)
 800176c:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8001770:	4613      	mov	r3, r2
 8001772:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001774:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001778:	bf00      	nop
 800177a:	3778      	adds	r7, #120	; 0x78
 800177c:	46bd      	mov	sp, r7
 800177e:	bc90      	pop	{r4, r7}
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	0800bde4 	.word	0x0800bde4
 8001788:	0800bdf4 	.word	0x0800bdf4
 800178c:	0800bed4 	.word	0x0800bed4
 8001790:	0800bee4 	.word	0x0800bee4
 8001794:	0800be14 	.word	0x0800be14
 8001798:	0800be24 	.word	0x0800be24

0800179c <fuzz_process>:

float fuzz_process(float in, pedal_config_t *conf) {
 800179c:	b580      	push	{r7, lr}
 800179e:	b088      	sub	sp, #32
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	ed87 0a01 	vstr	s0, [r7, #4]
 80017a6:	6038      	str	r0, [r7, #0]
    float out = in * conf->float_params[INTENSITY].value;
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80017ae:	ed97 7a01 	vldr	s14, [r7, #4]
 80017b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017b6:	edc7 7a07 	vstr	s15, [r7, #28]
    float threshold_high = conf->float_params[THRESHOLD_HIGH].value;
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	61bb      	str	r3, [r7, #24]
    float height = conf->float_params[HEIGHT].value;
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017c6:	617b      	str	r3, [r7, #20]
    float speed = conf->float_params[SPEED].value;
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80017ce:	613b      	str	r3, [r7, #16]
    float tone = 440.0F;
 80017d0:	4b3e      	ldr	r3, [pc, #248]	; (80018cc <fuzz_process+0x130>)
 80017d2:	60fb      	str	r3, [r7, #12]

    out = hard_clip(out, threshold_high);
 80017d4:	edd7 0a06 	vldr	s1, [r7, #24]
 80017d8:	ed97 0a07 	vldr	s0, [r7, #28]
 80017dc:	f000 f8b2 	bl	8001944 <hard_clip>
 80017e0:	ed87 0a07 	vstr	s0, [r7, #28]
    if (out == threshold_high) {
 80017e4:	ed97 7a07 	vldr	s14, [r7, #28]
 80017e8:	edd7 7a06 	vldr	s15, [r7, #24]
 80017ec:	eeb4 7a67 	vcmp.f32	s14, s15
 80017f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f4:	d11e      	bne.n	8001834 <fuzz_process+0x98>
        out += (wave_gen('s', conf->int_params[COUNTER].value, tone * speed) - 1) * height;
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	691b      	ldr	r3, [r3, #16]
 80017fa:	ed97 7a03 	vldr	s14, [r7, #12]
 80017fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8001802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001806:	eeb0 0a67 	vmov.f32	s0, s15
 800180a:	4619      	mov	r1, r3
 800180c:	2073      	movs	r0, #115	; 0x73
 800180e:	f000 f945 	bl	8001a9c <wave_gen>
 8001812:	eef0 7a40 	vmov.f32	s15, s0
 8001816:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800181a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800181e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001822:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001826:	ed97 7a07 	vldr	s14, [r7, #28]
 800182a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800182e:	edc7 7a07 	vstr	s15, [r7, #28]
 8001832:	e02c      	b.n	800188e <fuzz_process+0xf2>
    } else if (out == - threshold_high - 1.F) {
 8001834:	edd7 7a06 	vldr	s15, [r7, #24]
 8001838:	eef1 7a67 	vneg.f32	s15, s15
 800183c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001840:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001844:	ed97 7a07 	vldr	s14, [r7, #28]
 8001848:	eeb4 7a67 	vcmp.f32	s14, s15
 800184c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001850:	d11d      	bne.n	800188e <fuzz_process+0xf2>
        out += (wave_gen('s', conf->int_params[COUNTER].value, tone * speed) + 1) * height;
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	691b      	ldr	r3, [r3, #16]
 8001856:	ed97 7a03 	vldr	s14, [r7, #12]
 800185a:	edd7 7a04 	vldr	s15, [r7, #16]
 800185e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001862:	eeb0 0a67 	vmov.f32	s0, s15
 8001866:	4619      	mov	r1, r3
 8001868:	2073      	movs	r0, #115	; 0x73
 800186a:	f000 f917 	bl	8001a9c <wave_gen>
 800186e:	eef0 7a40 	vmov.f32	s15, s0
 8001872:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001876:	ee37 7a87 	vadd.f32	s14, s15, s14
 800187a:	edd7 7a05 	vldr	s15, [r7, #20]
 800187e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001882:	ed97 7a07 	vldr	s14, [r7, #28]
 8001886:	ee77 7a27 	vadd.f32	s15, s14, s15
 800188a:	edc7 7a07 	vstr	s15, [r7, #28]
    }
    conf->int_params[COUNTER].value++;
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	1c5a      	adds	r2, r3, #1
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	611a      	str	r2, [r3, #16]
    out = mix(out, in, conf->float_params[BALANCE_1].value, conf->float_params[BALANCE_2].value);
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 80018a4:	eef0 1a47 	vmov.f32	s3, s14
 80018a8:	eeb0 1a67 	vmov.f32	s2, s15
 80018ac:	edd7 0a01 	vldr	s1, [r7, #4]
 80018b0:	ed97 0a07 	vldr	s0, [r7, #28]
 80018b4:	f000 f826 	bl	8001904 <mix>
 80018b8:	ed87 0a07 	vstr	s0, [r7, #28]
    return out;
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	ee07 3a90 	vmov	s15, r3
}
 80018c2:	eeb0 0a67 	vmov.f32	s0, s15
 80018c6:	3720      	adds	r7, #32
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	43dc0000 	.word	0x43dc0000

080018d0 <bypass_pedal_init>:

// BYPASS

void bypass_pedal_init(pedal_config_t *conf) {
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
    return;
 80018d8:	bf00      	nop
}
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <bypass_process>:

float bypass_process(float in, pedal_config_t *conf) {
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	ed87 0a01 	vstr	s0, [r7, #4]
 80018ee:	6038      	str	r0, [r7, #0]
    return in;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	ee07 3a90 	vmov	s15, r3
}
 80018f6:	eeb0 0a67 	vmov.f32	s0, s15
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <mix>:


float mix(float in_1, float in_2, float balance_1, float balance_2) {
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	ed87 0a03 	vstr	s0, [r7, #12]
 800190e:	edc7 0a02 	vstr	s1, [r7, #8]
 8001912:	ed87 1a01 	vstr	s2, [r7, #4]
 8001916:	edc7 1a00 	vstr	s3, [r7]
    return in_1 * balance_1 + in_2 * balance_2;
 800191a:	ed97 7a03 	vldr	s14, [r7, #12]
 800191e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001922:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001926:	edd7 6a02 	vldr	s13, [r7, #8]
 800192a:	edd7 7a00 	vldr	s15, [r7]
 800192e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001932:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001936:	eeb0 0a67 	vmov.f32	s0, s15
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <hard_clip>:

float hard_clip(float in, float clip_threshold) {
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	ed87 0a01 	vstr	s0, [r7, #4]
 800194e:	edc7 0a00 	vstr	s1, [r7]
    if (in > clip_threshold) {
 8001952:	ed97 7a01 	vldr	s14, [r7, #4]
 8001956:	edd7 7a00 	vldr	s15, [r7]
 800195a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800195e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001962:	dd02      	ble.n	800196a <hard_clip+0x26>
        return clip_threshold;
 8001964:	edd7 7a00 	vldr	s15, [r7]
 8001968:	e015      	b.n	8001996 <hard_clip+0x52>
    } else if (in < -clip_threshold) {
 800196a:	edd7 7a00 	vldr	s15, [r7]
 800196e:	eef1 7a67 	vneg.f32	s15, s15
 8001972:	ed97 7a01 	vldr	s14, [r7, #4]
 8001976:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800197a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800197e:	d508      	bpl.n	8001992 <hard_clip+0x4e>
        return -clip_threshold - 1;
 8001980:	edd7 7a00 	vldr	s15, [r7]
 8001984:	eef1 7a67 	vneg.f32	s15, s15
 8001988:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800198c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001990:	e001      	b.n	8001996 <hard_clip+0x52>
    }
    return in;
 8001992:	edd7 7a01 	vldr	s15, [r7, #4]
}
 8001996:	eeb0 0a67 	vmov.f32	s0, s15
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <soft_clip>:

float soft_clip(float in, float soft_threshold, float softener) {
 80019a4:	b480      	push	{r7}
 80019a6:	b087      	sub	sp, #28
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	ed87 0a03 	vstr	s0, [r7, #12]
 80019ae:	edc7 0a02 	vstr	s1, [r7, #8]
 80019b2:	ed87 1a01 	vstr	s2, [r7, #4]
    float out;
    if (in > soft_threshold) {
 80019b6:	ed97 7a03 	vldr	s14, [r7, #12]
 80019ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80019be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c6:	dd10      	ble.n	80019ea <soft_clip+0x46>
        out = soft_threshold + (in - soft_threshold) / softener;
 80019c8:	ed97 7a03 	vldr	s14, [r7, #12]
 80019cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80019d0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80019d4:	ed97 7a01 	vldr	s14, [r7, #4]
 80019d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019dc:	ed97 7a02 	vldr	s14, [r7, #8]
 80019e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019e4:	edc7 7a05 	vstr	s15, [r7, #20]
 80019e8:	e01d      	b.n	8001a26 <soft_clip+0x82>
    } else if (in < -soft_threshold) {
 80019ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80019ee:	eef1 7a67 	vneg.f32	s15, s15
 80019f2:	ed97 7a03 	vldr	s14, [r7, #12]
 80019f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019fe:	d510      	bpl.n	8001a22 <soft_clip+0x7e>
        out = -soft_threshold + (in + soft_threshold) / softener;
 8001a00:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a04:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a08:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001a0c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a14:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a1c:	edc7 7a05 	vstr	s15, [r7, #20]
 8001a20:	e001      	b.n	8001a26 <soft_clip+0x82>
    } else {
        out = in;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	617b      	str	r3, [r7, #20]
    }
    return out;
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	ee07 3a90 	vmov	s15, r3
}
 8001a2c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a30:	371c      	adds	r7, #28
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <square_root>:

float square_root(float in) {
 8001a3a:	b480      	push	{r7}
 8001a3c:	b085      	sub	sp, #20
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	ed87 0a01 	vstr	s0, [r7, #4]
    float out;
    out = in * 0.5F;
 8001a44:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a48:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001a4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a50:	edc7 7a03 	vstr	s15, [r7, #12]
    for (u_int8_t i = 0; i < 8; i++) {
 8001a54:	2300      	movs	r3, #0
 8001a56:	72fb      	strb	r3, [r7, #11]
 8001a58:	e012      	b.n	8001a80 <square_root+0x46>
        out = 0.5F * (out + (in / out));
 8001a5a:	edd7 6a01 	vldr	s13, [r7, #4]
 8001a5e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a66:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a6e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001a72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a76:	edc7 7a03 	vstr	s15, [r7, #12]
    for (u_int8_t i = 0; i < 8; i++) {
 8001a7a:	7afb      	ldrb	r3, [r7, #11]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	72fb      	strb	r3, [r7, #11]
 8001a80:	7afb      	ldrb	r3, [r7, #11]
 8001a82:	2b07      	cmp	r3, #7
 8001a84:	d9e9      	bls.n	8001a5a <square_root+0x20>
    }
    return out;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	ee07 3a90 	vmov	s15, r3
}
 8001a8c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a90:	3714      	adds	r7, #20
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
	...

08001a9c <wave_gen>:

float wave_gen(char t, u_int32_t i, float tone) {
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001aaa:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8001aae:	6019      	str	r1, [r3, #0]
 8001ab0:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001ab4:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001ab8:	ed83 0a00 	vstr	s0, [r3]
 8001abc:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001ac0:	f2a3 2311 	subw	r3, r3, #529	; 0x211
 8001ac4:	701a      	strb	r2, [r3, #0]

    float sin_table[128] = { 0.000000F, 0.024541F, 0.049068F, 0.073565F, 0.098017F, 0.122411F, 0.146730F, 0.170962F, 0.195090F, 0.219101F, 0.242980F, 0.266713F, 0.290284F, 0.313681F, 0.336890F, 0.359895F, 0.382683F, 0.405241F, 0.427555F, 0.449611F, 0.471396F, 0.492898F, 0.514102F, 0.534997F, 0.555570F, 0.575808F, 0.595699F, 0.615231F, 0.634393F, 0.653172F, 0.671559F, 0.689540F, 0.707106F, 0.724247F, 0.740951F, 0.757208F, 0.773010F, 0.788346F, 0.803207F, 0.817584F, 0.831469F, 0.844853F, 0.857728F, 0.870087F, 0.881921F, 0.893224F, 0.903989F, 0.914209F, 0.923879F, 0.932992F, 0.941544F, 0.949528F, 0.956940F, 0.963776F, 0.970031F, 0.975702F, 0.980785F, 0.985277F, 0.989176F, 0.992479F, 0.995185F, 0.997290F, 0.998795F, 0.999699F, 1.000000F, 0.999699F, 0.998796F, 0.997291F, 0.995185F, 0.992480F, 0.989177F, 0.985278F, 0.980786F, 0.975702F, 0.970032F, 0.963776F, 0.956941F, 0.949529F, 0.941545F, 0.932993F, 0.923880F, 0.914210F, 0.903990F, 0.893225F, 0.881922F, 0.870088F, 0.857729F, 0.844855F, 0.831471F, 0.817586F, 0.803209F, 0.788348F, 0.773012F, 0.757210F, 0.740952F, 0.724248F, 0.707108F, 0.689542F, 0.671560F, 0.653174F, 0.634395F, 0.615233F, 0.595701F, 0.575810F, 0.555572F, 0.534999F, 0.514105F, 0.492900F, 0.471399F, 0.449613F, 0.427557F, 0.405243F, 0.382685F, 0.359897F, 0.336892F, 0.313684F, 0.290287F, 0.266715F, 0.242982F, 0.219104F, 0.195093F, 0.170964F, 0.146733F, 0.122413F, 0.098019F, 0.073567F, 0.049070F, 0.024544F };
 8001ac6:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001aca:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001ace:	4a33      	ldr	r2, [pc, #204]	; (8001b9c <wave_gen+0x100>)
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	4611      	mov	r1, r2
 8001ad4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ad8:	461a      	mov	r2, r3
 8001ada:	f00a f863 	bl	800bba4 <memcpy>
    float period_f = 44180.F / tone;
 8001ade:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001ae2:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001ae6:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8001ba0 <wave_gen+0x104>
 8001aea:	ed93 7a00 	vldr	s14, [r3]
 8001aee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001af2:	edc7 7a87 	vstr	s15, [r7, #540]	; 0x21c
    u_int32_t period_i = period_f;
 8001af6:	edd7 7a87 	vldr	s15, [r7, #540]	; 0x21c
 8001afa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001afe:	ee17 3a90 	vmov	r3, s15
 8001b02:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
    u_int32_t table_index = (i * 256 / period_i) % 256;
 8001b06:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001b0a:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	021a      	lsls	r2, r3, #8
 8001b12:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214

    if (t == 's') {
 8001b20:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001b24:	f2a3 2311 	subw	r3, r3, #529	; 0x211
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	2b73      	cmp	r3, #115	; 0x73
 8001b2c:	d11c      	bne.n	8001b68 <wave_gen+0xcc>
        if (table_index <= 127) {
 8001b2e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001b32:	2b7f      	cmp	r3, #127	; 0x7f
 8001b34:	d80a      	bhi.n	8001b4c <wave_gen+0xb0>
            return sin_table[table_index];
 8001b36:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001b3a:	f5a3 7203 	sub.w	r2, r3, #524	; 0x20c
 8001b3e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	4413      	add	r3, r2
 8001b46:	edd3 7a00 	vldr	s15, [r3]
 8001b4a:	e020      	b.n	8001b8e <wave_gen+0xf2>
        } else {
            return -sin_table[table_index - 128];
 8001b4c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001b50:	3b80      	subs	r3, #128	; 0x80
 8001b52:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8001b56:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	4413      	add	r3, r2
 8001b5e:	edd3 7a00 	vldr	s15, [r3]
 8001b62:	eef1 7a67 	vneg.f32	s15, s15
 8001b66:	e012      	b.n	8001b8e <wave_gen+0xf2>
        }
    } else if (t == 'q') {
 8001b68:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001b6c:	f2a3 2311 	subw	r3, r3, #529	; 0x211
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	2b71      	cmp	r3, #113	; 0x71
 8001b74:	d109      	bne.n	8001b8a <wave_gen+0xee>
        if (table_index <= 127) {
 8001b76:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001b7a:	2b7f      	cmp	r3, #127	; 0x7f
 8001b7c:	d802      	bhi.n	8001b84 <wave_gen+0xe8>
            return -1.F;
 8001b7e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8001b82:	e004      	b.n	8001b8e <wave_gen+0xf2>
        } else {
            return 1.F;
 8001b84:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001b88:	e001      	b.n	8001b8e <wave_gen+0xf2>
        }
    } else {
        return 0;
 8001b8a:	eddf 7a06 	vldr	s15, [pc, #24]	; 8001ba4 <wave_gen+0x108>
    }
}
 8001b8e:	eeb0 0a67 	vmov.f32	s0, s15
 8001b92:	f507 7708 	add.w	r7, r7, #544	; 0x220
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	0800bef4 	.word	0x0800bef4
 8001ba0:	472c9400 	.word	0x472c9400
 8001ba4:	00000000 	.word	0x00000000

08001ba8 <pedalboard_append>:



// PEDALBOARD

void pedalboard_append(pedalboard_t *p_pb, enum pedal_types type) {
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	70fb      	strb	r3, [r7, #3]
    u_int8_t i = p_pb->active_pedals;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	73fb      	strb	r3, [r7, #15]

    if (p_pb->active_pedals < MAX_PEDALS_COUNT) {
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	2b07      	cmp	r3, #7
 8001bc0:	f200 80dd 	bhi.w	8001d7e <pedalboard_append+0x1d6>
        u_int8_t i = p_pb->active_pedals;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	73bb      	strb	r3, [r7, #14]
        p_pb->pedals[i].type = type;
 8001bca:	7bbb      	ldrb	r3, [r7, #14]
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	21c8      	movs	r1, #200	; 0xc8
 8001bd0:	fb01 f303 	mul.w	r3, r1, r3
 8001bd4:	4413      	add	r3, r2
 8001bd6:	33c4      	adds	r3, #196	; 0xc4
 8001bd8:	78fa      	ldrb	r2, [r7, #3]
 8001bda:	701a      	strb	r2, [r3, #0]

        if (type == AMPLIFIER)
 8001bdc:	78fb      	ldrb	r3, [r7, #3]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d113      	bne.n	8001c0a <pedalboard_append+0x62>
        {
            amplifier_pedal_init(&(p_pb->pedals[i].config));
 8001be2:	7bbb      	ldrb	r3, [r7, #14]
 8001be4:	22c8      	movs	r2, #200	; 0xc8
 8001be6:	fb02 f303 	mul.w	r3, r2, r3
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	4413      	add	r3, r2
 8001bee:	3304      	adds	r3, #4
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff fcbd 	bl	8001570 <amplifier_pedal_init>
            p_pb->pedals[i].pedal_process = amplifier_process;
 8001bf6:	7bbb      	ldrb	r3, [r7, #14]
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	21c8      	movs	r1, #200	; 0xc8
 8001bfc:	fb01 f303 	mul.w	r3, r1, r3
 8001c00:	4413      	add	r3, r2
 8001c02:	33c8      	adds	r3, #200	; 0xc8
 8001c04:	4a60      	ldr	r2, [pc, #384]	; (8001d88 <pedalboard_append+0x1e0>)
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	e0b3      	b.n	8001d72 <pedalboard_append+0x1ca>
        }
        else if (type == BITCRUSHER_RS)
 8001c0a:	78fb      	ldrb	r3, [r7, #3]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d113      	bne.n	8001c38 <pedalboard_append+0x90>
        {
            bitcrusher_rs_pedal_init(&(p_pb->pedals[i].config));
 8001c10:	7bbb      	ldrb	r3, [r7, #14]
 8001c12:	22c8      	movs	r2, #200	; 0xc8
 8001c14:	fb02 f303 	mul.w	r3, r2, r3
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	3304      	adds	r3, #4
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff fb3c 	bl	800129c <bitcrusher_rs_pedal_init>
            p_pb->pedals[i].pedal_process = bitcrusher_rs_process;
 8001c24:	7bbb      	ldrb	r3, [r7, #14]
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	21c8      	movs	r1, #200	; 0xc8
 8001c2a:	fb01 f303 	mul.w	r3, r1, r3
 8001c2e:	4413      	add	r3, r2
 8001c30:	33c8      	adds	r3, #200	; 0xc8
 8001c32:	4a56      	ldr	r2, [pc, #344]	; (8001d8c <pedalboard_append+0x1e4>)
 8001c34:	601a      	str	r2, [r3, #0]
 8001c36:	e09c      	b.n	8001d72 <pedalboard_append+0x1ca>
        }
        else if (type == DYN_AMPLIFIER)
 8001c38:	78fb      	ldrb	r3, [r7, #3]
 8001c3a:	2b03      	cmp	r3, #3
 8001c3c:	d113      	bne.n	8001c66 <pedalboard_append+0xbe>
        {
            dyn_amplifier_pedal_init(&(p_pb->pedals[i].config));
 8001c3e:	7bbb      	ldrb	r3, [r7, #14]
 8001c40:	22c8      	movs	r2, #200	; 0xc8
 8001c42:	fb02 f303 	mul.w	r3, r2, r3
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	4413      	add	r3, r2
 8001c4a:	3304      	adds	r3, #4
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff fccf 	bl	80015f0 <dyn_amplifier_pedal_init>
            p_pb->pedals[i].pedal_process = dyn_amplifier_process;
 8001c52:	7bbb      	ldrb	r3, [r7, #14]
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	21c8      	movs	r1, #200	; 0xc8
 8001c58:	fb01 f303 	mul.w	r3, r1, r3
 8001c5c:	4413      	add	r3, r2
 8001c5e:	33c8      	adds	r3, #200	; 0xc8
 8001c60:	4a4b      	ldr	r2, [pc, #300]	; (8001d90 <pedalboard_append+0x1e8>)
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	e085      	b.n	8001d72 <pedalboard_append+0x1ca>
        }
        else if (type == FUZZ)
 8001c66:	78fb      	ldrb	r3, [r7, #3]
 8001c68:	2b04      	cmp	r3, #4
 8001c6a:	d113      	bne.n	8001c94 <pedalboard_append+0xec>
        {
            fuzz_pedal_init(&(p_pb->pedals[i].config));
 8001c6c:	7bbb      	ldrb	r3, [r7, #14]
 8001c6e:	22c8      	movs	r2, #200	; 0xc8
 8001c70:	fb02 f303 	mul.w	r3, r2, r3
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	4413      	add	r3, r2
 8001c78:	3304      	adds	r3, #4
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff fd3c 	bl	80016f8 <fuzz_pedal_init>
            p_pb->pedals[i].pedal_process = fuzz_process;
 8001c80:	7bbb      	ldrb	r3, [r7, #14]
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	21c8      	movs	r1, #200	; 0xc8
 8001c86:	fb01 f303 	mul.w	r3, r1, r3
 8001c8a:	4413      	add	r3, r2
 8001c8c:	33c8      	adds	r3, #200	; 0xc8
 8001c8e:	4a41      	ldr	r2, [pc, #260]	; (8001d94 <pedalboard_append+0x1ec>)
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	e06e      	b.n	8001d72 <pedalboard_append+0x1ca>
        }
        else if (type == LPF)
 8001c94:	78fb      	ldrb	r3, [r7, #3]
 8001c96:	2b05      	cmp	r3, #5
 8001c98:	d113      	bne.n	8001cc2 <pedalboard_append+0x11a>
        {
            low_pass_filter_pedal_init(&(p_pb->pedals[i].config));
 8001c9a:	7bbb      	ldrb	r3, [r7, #14]
 8001c9c:	22c8      	movs	r2, #200	; 0xc8
 8001c9e:	fb02 f303 	mul.w	r3, r2, r3
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	3304      	adds	r3, #4
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff fcbb 	bl	8001624 <low_pass_filter_pedal_init>
            p_pb->pedals[i].pedal_process = low_pass_filter_process;
 8001cae:	7bbb      	ldrb	r3, [r7, #14]
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	21c8      	movs	r1, #200	; 0xc8
 8001cb4:	fb01 f303 	mul.w	r3, r1, r3
 8001cb8:	4413      	add	r3, r2
 8001cba:	33c8      	adds	r3, #200	; 0xc8
 8001cbc:	4a36      	ldr	r2, [pc, #216]	; (8001d98 <pedalboard_append+0x1f0>)
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	e057      	b.n	8001d72 <pedalboard_append+0x1ca>
        }
        else if (type == OVERDRIVE)
 8001cc2:	78fb      	ldrb	r3, [r7, #3]
 8001cc4:	2b06      	cmp	r3, #6
 8001cc6:	d113      	bne.n	8001cf0 <pedalboard_append+0x148>
        {
            overdrive_pedal_init(&(p_pb->pedals[i].config));
 8001cc8:	7bbb      	ldrb	r3, [r7, #14]
 8001cca:	22c8      	movs	r2, #200	; 0xc8
 8001ccc:	fb02 f303 	mul.w	r3, r2, r3
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	3304      	adds	r3, #4
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff fa58 	bl	800118c <overdrive_pedal_init>
            p_pb->pedals[i].pedal_process = overdrive_process;
 8001cdc:	7bbb      	ldrb	r3, [r7, #14]
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	21c8      	movs	r1, #200	; 0xc8
 8001ce2:	fb01 f303 	mul.w	r3, r1, r3
 8001ce6:	4413      	add	r3, r2
 8001ce8:	33c8      	adds	r3, #200	; 0xc8
 8001cea:	4a2c      	ldr	r2, [pc, #176]	; (8001d9c <pedalboard_append+0x1f4>)
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	e040      	b.n	8001d72 <pedalboard_append+0x1ca>
        }
        else if (type == OVERDRIVE_SQRT)
 8001cf0:	78fb      	ldrb	r3, [r7, #3]
 8001cf2:	2b07      	cmp	r3, #7
 8001cf4:	d113      	bne.n	8001d1e <pedalboard_append+0x176>
        {
            overdrive_sqrt_pedal_init(&(p_pb->pedals[i].config));
 8001cf6:	7bbb      	ldrb	r3, [r7, #14]
 8001cf8:	22c8      	movs	r2, #200	; 0xc8
 8001cfa:	fb02 f303 	mul.w	r3, r2, r3
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	4413      	add	r3, r2
 8001d02:	3304      	adds	r3, #4
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff fbb1 	bl	800146c <overdrive_sqrt_pedal_init>
            p_pb->pedals[i].pedal_process = overdrive_sqrt_process;
 8001d0a:	7bbb      	ldrb	r3, [r7, #14]
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	21c8      	movs	r1, #200	; 0xc8
 8001d10:	fb01 f303 	mul.w	r3, r1, r3
 8001d14:	4413      	add	r3, r2
 8001d16:	33c8      	adds	r3, #200	; 0xc8
 8001d18:	4a21      	ldr	r2, [pc, #132]	; (8001da0 <pedalboard_append+0x1f8>)
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	e029      	b.n	8001d72 <pedalboard_append+0x1ca>
        }
        else if (type == TREMOLO)
 8001d1e:	78fb      	ldrb	r3, [r7, #3]
 8001d20:	2b08      	cmp	r3, #8
 8001d22:	d113      	bne.n	8001d4c <pedalboard_append+0x1a4>
        {
            tremolo_pedal_init(&(p_pb->pedals[i].config));
 8001d24:	7bbb      	ldrb	r3, [r7, #14]
 8001d26:	22c8      	movs	r2, #200	; 0xc8
 8001d28:	fb02 f303 	mul.w	r3, r2, r3
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	4413      	add	r3, r2
 8001d30:	3304      	adds	r3, #4
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff fb24 	bl	8001380 <tremolo_pedal_init>
            p_pb->pedals[i].pedal_process = tremolo_process;
 8001d38:	7bbb      	ldrb	r3, [r7, #14]
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	21c8      	movs	r1, #200	; 0xc8
 8001d3e:	fb01 f303 	mul.w	r3, r1, r3
 8001d42:	4413      	add	r3, r2
 8001d44:	33c8      	adds	r3, #200	; 0xc8
 8001d46:	4a17      	ldr	r2, [pc, #92]	; (8001da4 <pedalboard_append+0x1fc>)
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	e012      	b.n	8001d72 <pedalboard_append+0x1ca>
        }
        else
        {
            // BYPASS AS DEFAULT
            bypass_pedal_init(&(p_pb->pedals[i].config));
 8001d4c:	7bbb      	ldrb	r3, [r7, #14]
 8001d4e:	22c8      	movs	r2, #200	; 0xc8
 8001d50:	fb02 f303 	mul.w	r3, r2, r3
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	4413      	add	r3, r2
 8001d58:	3304      	adds	r3, #4
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff fdb8 	bl	80018d0 <bypass_pedal_init>
            p_pb->pedals[i].pedal_process = bypass_process;
 8001d60:	7bbb      	ldrb	r3, [r7, #14]
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	21c8      	movs	r1, #200	; 0xc8
 8001d66:	fb01 f303 	mul.w	r3, r1, r3
 8001d6a:	4413      	add	r3, r2
 8001d6c:	33c8      	adds	r3, #200	; 0xc8
 8001d6e:	4a0e      	ldr	r2, [pc, #56]	; (8001da8 <pedalboard_append+0x200>)
 8001d70:	601a      	str	r2, [r3, #0]
        }
        p_pb->active_pedals++;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	3301      	adds	r3, #1
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	701a      	strb	r2, [r3, #0]
    }
}
 8001d7e:	bf00      	nop
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	080015ad 	.word	0x080015ad
 8001d8c:	080012e9 	.word	0x080012e9
 8001d90:	08001605 	.word	0x08001605
 8001d94:	0800179d 	.word	0x0800179d
 8001d98:	08001681 	.word	0x08001681
 8001d9c:	08001215 	.word	0x08001215
 8001da0:	080014d1 	.word	0x080014d1
 8001da4:	080013e9 	.word	0x080013e9
 8001da8:	080018e5 	.word	0x080018e5

08001dac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	607b      	str	r3, [r7, #4]
 8001db6:	4b10      	ldr	r3, [pc, #64]	; (8001df8 <HAL_MspInit+0x4c>)
 8001db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dba:	4a0f      	ldr	r2, [pc, #60]	; (8001df8 <HAL_MspInit+0x4c>)
 8001dbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dc0:	6453      	str	r3, [r2, #68]	; 0x44
 8001dc2:	4b0d      	ldr	r3, [pc, #52]	; (8001df8 <HAL_MspInit+0x4c>)
 8001dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dca:	607b      	str	r3, [r7, #4]
 8001dcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	603b      	str	r3, [r7, #0]
 8001dd2:	4b09      	ldr	r3, [pc, #36]	; (8001df8 <HAL_MspInit+0x4c>)
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	4a08      	ldr	r2, [pc, #32]	; (8001df8 <HAL_MspInit+0x4c>)
 8001dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dde:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <HAL_MspInit+0x4c>)
 8001de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de6:	603b      	str	r3, [r7, #0]
 8001de8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dea:	bf00      	nop
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	40023800 	.word	0x40023800

08001dfc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b08a      	sub	sp, #40	; 0x28
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e04:	f107 0314 	add.w	r3, r7, #20
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	605a      	str	r2, [r3, #4]
 8001e0e:	609a      	str	r2, [r3, #8]
 8001e10:	60da      	str	r2, [r3, #12]
 8001e12:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a19      	ldr	r2, [pc, #100]	; (8001e80 <HAL_I2C_MspInit+0x84>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d12c      	bne.n	8001e78 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	613b      	str	r3, [r7, #16]
 8001e22:	4b18      	ldr	r3, [pc, #96]	; (8001e84 <HAL_I2C_MspInit+0x88>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	4a17      	ldr	r2, [pc, #92]	; (8001e84 <HAL_I2C_MspInit+0x88>)
 8001e28:	f043 0302 	orr.w	r3, r3, #2
 8001e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2e:	4b15      	ldr	r3, [pc, #84]	; (8001e84 <HAL_I2C_MspInit+0x88>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	613b      	str	r3, [r7, #16]
 8001e38:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001e3a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001e3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e40:	2312      	movs	r3, #18
 8001e42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e44:	2300      	movs	r3, #0
 8001e46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e4c:	2304      	movs	r3, #4
 8001e4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e50:	f107 0314 	add.w	r3, r7, #20
 8001e54:	4619      	mov	r1, r3
 8001e56:	480c      	ldr	r0, [pc, #48]	; (8001e88 <HAL_I2C_MspInit+0x8c>)
 8001e58:	f000 ff90 	bl	8002d7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	4b08      	ldr	r3, [pc, #32]	; (8001e84 <HAL_I2C_MspInit+0x88>)
 8001e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e64:	4a07      	ldr	r2, [pc, #28]	; (8001e84 <HAL_I2C_MspInit+0x88>)
 8001e66:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e6a:	6413      	str	r3, [r2, #64]	; 0x40
 8001e6c:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <HAL_I2C_MspInit+0x88>)
 8001e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e74:	60fb      	str	r3, [r7, #12]
 8001e76:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e78:	bf00      	nop
 8001e7a:	3728      	adds	r7, #40	; 0x28
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40005400 	.word	0x40005400
 8001e84:	40023800 	.word	0x40023800
 8001e88:	40020400 	.word	0x40020400

08001e8c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b08e      	sub	sp, #56	; 0x38
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	605a      	str	r2, [r3, #4]
 8001e9e:	609a      	str	r2, [r3, #8]
 8001ea0:	60da      	str	r2, [r3, #12]
 8001ea2:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a93      	ldr	r2, [pc, #588]	; (80020f8 <HAL_I2S_MspInit+0x26c>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	f040 808d 	bne.w	8001fca <HAL_I2S_MspInit+0x13e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	623b      	str	r3, [r7, #32]
 8001eb4:	4b91      	ldr	r3, [pc, #580]	; (80020fc <HAL_I2S_MspInit+0x270>)
 8001eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb8:	4a90      	ldr	r2, [pc, #576]	; (80020fc <HAL_I2S_MspInit+0x270>)
 8001eba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ebe:	6413      	str	r3, [r2, #64]	; 0x40
 8001ec0:	4b8e      	ldr	r3, [pc, #568]	; (80020fc <HAL_I2S_MspInit+0x270>)
 8001ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ec8:	623b      	str	r3, [r7, #32]
 8001eca:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ecc:	2300      	movs	r3, #0
 8001ece:	61fb      	str	r3, [r7, #28]
 8001ed0:	4b8a      	ldr	r3, [pc, #552]	; (80020fc <HAL_I2S_MspInit+0x270>)
 8001ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed4:	4a89      	ldr	r2, [pc, #548]	; (80020fc <HAL_I2S_MspInit+0x270>)
 8001ed6:	f043 0302 	orr.w	r3, r3, #2
 8001eda:	6313      	str	r3, [r2, #48]	; 0x30
 8001edc:	4b87      	ldr	r3, [pc, #540]	; (80020fc <HAL_I2S_MspInit+0x270>)
 8001ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	61fb      	str	r3, [r7, #28]
 8001ee6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ee8:	2300      	movs	r3, #0
 8001eea:	61bb      	str	r3, [r7, #24]
 8001eec:	4b83      	ldr	r3, [pc, #524]	; (80020fc <HAL_I2S_MspInit+0x270>)
 8001eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef0:	4a82      	ldr	r2, [pc, #520]	; (80020fc <HAL_I2S_MspInit+0x270>)
 8001ef2:	f043 0304 	orr.w	r3, r3, #4
 8001ef6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef8:	4b80      	ldr	r3, [pc, #512]	; (80020fc <HAL_I2S_MspInit+0x270>)
 8001efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efc:	f003 0304 	and.w	r3, r3, #4
 8001f00:	61bb      	str	r3, [r7, #24]
 8001f02:	69bb      	ldr	r3, [r7, #24]
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001f04:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8001f08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001f12:	2301      	movs	r3, #1
 8001f14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f16:	2305      	movs	r3, #5
 8001f18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4877      	ldr	r0, [pc, #476]	; (8002100 <HAL_I2S_MspInit+0x274>)
 8001f22:	f000 ff2b 	bl	8002d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f26:	2340      	movs	r3, #64	; 0x40
 8001f28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001f32:	2301      	movs	r3, #1
 8001f34:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f36:	2305      	movs	r3, #5
 8001f38:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4870      	ldr	r0, [pc, #448]	; (8002104 <HAL_I2S_MspInit+0x278>)
 8001f42:	f000 ff1b 	bl	8002d7c <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8001f46:	4b70      	ldr	r3, [pc, #448]	; (8002108 <HAL_I2S_MspInit+0x27c>)
 8001f48:	4a70      	ldr	r2, [pc, #448]	; (800210c <HAL_I2S_MspInit+0x280>)
 8001f4a:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8001f4c:	4b6e      	ldr	r3, [pc, #440]	; (8002108 <HAL_I2S_MspInit+0x27c>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f52:	4b6d      	ldr	r3, [pc, #436]	; (8002108 <HAL_I2S_MspInit+0x27c>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f58:	4b6b      	ldr	r3, [pc, #428]	; (8002108 <HAL_I2S_MspInit+0x27c>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f5e:	4b6a      	ldr	r3, [pc, #424]	; (8002108 <HAL_I2S_MspInit+0x27c>)
 8001f60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f64:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f66:	4b68      	ldr	r3, [pc, #416]	; (8002108 <HAL_I2S_MspInit+0x27c>)
 8001f68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f6c:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f6e:	4b66      	ldr	r3, [pc, #408]	; (8002108 <HAL_I2S_MspInit+0x27c>)
 8001f70:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f74:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8001f76:	4b64      	ldr	r3, [pc, #400]	; (8002108 <HAL_I2S_MspInit+0x27c>)
 8001f78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f7c:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f7e:	4b62      	ldr	r3, [pc, #392]	; (8002108 <HAL_I2S_MspInit+0x27c>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001f84:	4b60      	ldr	r3, [pc, #384]	; (8002108 <HAL_I2S_MspInit+0x27c>)
 8001f86:	2204      	movs	r2, #4
 8001f88:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8001f8a:	4b5f      	ldr	r3, [pc, #380]	; (8002108 <HAL_I2S_MspInit+0x27c>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001f90:	4b5d      	ldr	r3, [pc, #372]	; (8002108 <HAL_I2S_MspInit+0x27c>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001f96:	4b5c      	ldr	r3, [pc, #368]	; (8002108 <HAL_I2S_MspInit+0x27c>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001f9c:	485a      	ldr	r0, [pc, #360]	; (8002108 <HAL_I2S_MspInit+0x27c>)
 8001f9e:	f000 fb7d 	bl	800269c <HAL_DMA_Init>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <HAL_I2S_MspInit+0x120>
    {
      Error_Handler();
 8001fa8:	f7fe ff86 	bl	8000eb8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a56      	ldr	r2, [pc, #344]	; (8002108 <HAL_I2S_MspInit+0x27c>)
 8001fb0:	63da      	str	r2, [r3, #60]	; 0x3c
 8001fb2:	4a55      	ldr	r2, [pc, #340]	; (8002108 <HAL_I2S_MspInit+0x27c>)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2S2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001fb8:	2200      	movs	r2, #0
 8001fba:	2100      	movs	r1, #0
 8001fbc:	2024      	movs	r0, #36	; 0x24
 8001fbe:	f000 fb36 	bl	800262e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001fc2:	2024      	movs	r0, #36	; 0x24
 8001fc4:	f000 fb4f 	bl	8002666 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001fc8:	e091      	b.n	80020ee <HAL_I2S_MspInit+0x262>
  else if(hi2s->Instance==SPI3)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a50      	ldr	r2, [pc, #320]	; (8002110 <HAL_I2S_MspInit+0x284>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	f040 808c 	bne.w	80020ee <HAL_I2S_MspInit+0x262>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	617b      	str	r3, [r7, #20]
 8001fda:	4b48      	ldr	r3, [pc, #288]	; (80020fc <HAL_I2S_MspInit+0x270>)
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	4a47      	ldr	r2, [pc, #284]	; (80020fc <HAL_I2S_MspInit+0x270>)
 8001fe0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fe4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fe6:	4b45      	ldr	r3, [pc, #276]	; (80020fc <HAL_I2S_MspInit+0x270>)
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fee:	617b      	str	r3, [r7, #20]
 8001ff0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	613b      	str	r3, [r7, #16]
 8001ff6:	4b41      	ldr	r3, [pc, #260]	; (80020fc <HAL_I2S_MspInit+0x270>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	4a40      	ldr	r2, [pc, #256]	; (80020fc <HAL_I2S_MspInit+0x270>)
 8001ffc:	f043 0301 	orr.w	r3, r3, #1
 8002000:	6313      	str	r3, [r2, #48]	; 0x30
 8002002:	4b3e      	ldr	r3, [pc, #248]	; (80020fc <HAL_I2S_MspInit+0x270>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	613b      	str	r3, [r7, #16]
 800200c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	60fb      	str	r3, [r7, #12]
 8002012:	4b3a      	ldr	r3, [pc, #232]	; (80020fc <HAL_I2S_MspInit+0x270>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	4a39      	ldr	r2, [pc, #228]	; (80020fc <HAL_I2S_MspInit+0x270>)
 8002018:	f043 0304 	orr.w	r3, r3, #4
 800201c:	6313      	str	r3, [r2, #48]	; 0x30
 800201e:	4b37      	ldr	r3, [pc, #220]	; (80020fc <HAL_I2S_MspInit+0x270>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	f003 0304 	and.w	r3, r3, #4
 8002026:	60fb      	str	r3, [r7, #12]
 8002028:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800202a:	2310      	movs	r3, #16
 800202c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202e:	2302      	movs	r3, #2
 8002030:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002032:	2300      	movs	r3, #0
 8002034:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002036:	2301      	movs	r3, #1
 8002038:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800203a:	2306      	movs	r3, #6
 800203c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800203e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002042:	4619      	mov	r1, r3
 8002044:	4833      	ldr	r0, [pc, #204]	; (8002114 <HAL_I2S_MspInit+0x288>)
 8002046:	f000 fe99 	bl	8002d7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 800204a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800204e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002050:	2302      	movs	r3, #2
 8002052:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002054:	2300      	movs	r3, #0
 8002056:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002058:	2301      	movs	r3, #1
 800205a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800205c:	2306      	movs	r3, #6
 800205e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002060:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002064:	4619      	mov	r1, r3
 8002066:	4827      	ldr	r0, [pc, #156]	; (8002104 <HAL_I2S_MspInit+0x278>)
 8002068:	f000 fe88 	bl	8002d7c <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream5;
 800206c:	4b2a      	ldr	r3, [pc, #168]	; (8002118 <HAL_I2S_MspInit+0x28c>)
 800206e:	4a2b      	ldr	r2, [pc, #172]	; (800211c <HAL_I2S_MspInit+0x290>)
 8002070:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8002072:	4b29      	ldr	r3, [pc, #164]	; (8002118 <HAL_I2S_MspInit+0x28c>)
 8002074:	2200      	movs	r2, #0
 8002076:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002078:	4b27      	ldr	r3, [pc, #156]	; (8002118 <HAL_I2S_MspInit+0x28c>)
 800207a:	2240      	movs	r2, #64	; 0x40
 800207c:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800207e:	4b26      	ldr	r3, [pc, #152]	; (8002118 <HAL_I2S_MspInit+0x28c>)
 8002080:	2200      	movs	r2, #0
 8002082:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002084:	4b24      	ldr	r3, [pc, #144]	; (8002118 <HAL_I2S_MspInit+0x28c>)
 8002086:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800208a:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800208c:	4b22      	ldr	r3, [pc, #136]	; (8002118 <HAL_I2S_MspInit+0x28c>)
 800208e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002092:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002094:	4b20      	ldr	r3, [pc, #128]	; (8002118 <HAL_I2S_MspInit+0x28c>)
 8002096:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800209a:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 800209c:	4b1e      	ldr	r3, [pc, #120]	; (8002118 <HAL_I2S_MspInit+0x28c>)
 800209e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020a2:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80020a4:	4b1c      	ldr	r3, [pc, #112]	; (8002118 <HAL_I2S_MspInit+0x28c>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80020aa:	4b1b      	ldr	r3, [pc, #108]	; (8002118 <HAL_I2S_MspInit+0x28c>)
 80020ac:	2204      	movs	r2, #4
 80020ae:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80020b0:	4b19      	ldr	r3, [pc, #100]	; (8002118 <HAL_I2S_MspInit+0x28c>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80020b6:	4b18      	ldr	r3, [pc, #96]	; (8002118 <HAL_I2S_MspInit+0x28c>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80020bc:	4b16      	ldr	r3, [pc, #88]	; (8002118 <HAL_I2S_MspInit+0x28c>)
 80020be:	2200      	movs	r2, #0
 80020c0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80020c2:	4815      	ldr	r0, [pc, #84]	; (8002118 <HAL_I2S_MspInit+0x28c>)
 80020c4:	f000 faea 	bl	800269c <HAL_DMA_Init>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <HAL_I2S_MspInit+0x246>
      Error_Handler();
 80020ce:	f7fe fef3 	bl	8000eb8 <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a10      	ldr	r2, [pc, #64]	; (8002118 <HAL_I2S_MspInit+0x28c>)
 80020d6:	639a      	str	r2, [r3, #56]	; 0x38
 80020d8:	4a0f      	ldr	r2, [pc, #60]	; (8002118 <HAL_I2S_MspInit+0x28c>)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80020de:	2200      	movs	r2, #0
 80020e0:	2100      	movs	r1, #0
 80020e2:	2033      	movs	r0, #51	; 0x33
 80020e4:	f000 faa3 	bl	800262e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80020e8:	2033      	movs	r0, #51	; 0x33
 80020ea:	f000 fabc 	bl	8002666 <HAL_NVIC_EnableIRQ>
}
 80020ee:	bf00      	nop
 80020f0:	3738      	adds	r7, #56	; 0x38
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	40003800 	.word	0x40003800
 80020fc:	40023800 	.word	0x40023800
 8002100:	40020400 	.word	0x40020400
 8002104:	40020800 	.word	0x40020800
 8002108:	20000368 	.word	0x20000368
 800210c:	40026058 	.word	0x40026058
 8002110:	40003c00 	.word	0x40003c00
 8002114:	40020000 	.word	0x40020000
 8002118:	200003c8 	.word	0x200003c8
 800211c:	40026088 	.word	0x40026088

08002120 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b08a      	sub	sp, #40	; 0x28
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002128:	f107 0314 	add.w	r3, r7, #20
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	605a      	str	r2, [r3, #4]
 8002132:	609a      	str	r2, [r3, #8]
 8002134:	60da      	str	r2, [r3, #12]
 8002136:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a19      	ldr	r2, [pc, #100]	; (80021a4 <HAL_SPI_MspInit+0x84>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d12b      	bne.n	800219a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002142:	2300      	movs	r3, #0
 8002144:	613b      	str	r3, [r7, #16]
 8002146:	4b18      	ldr	r3, [pc, #96]	; (80021a8 <HAL_SPI_MspInit+0x88>)
 8002148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214a:	4a17      	ldr	r2, [pc, #92]	; (80021a8 <HAL_SPI_MspInit+0x88>)
 800214c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002150:	6453      	str	r3, [r2, #68]	; 0x44
 8002152:	4b15      	ldr	r3, [pc, #84]	; (80021a8 <HAL_SPI_MspInit+0x88>)
 8002154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002156:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800215a:	613b      	str	r3, [r7, #16]
 800215c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800215e:	2300      	movs	r3, #0
 8002160:	60fb      	str	r3, [r7, #12]
 8002162:	4b11      	ldr	r3, [pc, #68]	; (80021a8 <HAL_SPI_MspInit+0x88>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	4a10      	ldr	r2, [pc, #64]	; (80021a8 <HAL_SPI_MspInit+0x88>)
 8002168:	f043 0301 	orr.w	r3, r3, #1
 800216c:	6313      	str	r3, [r2, #48]	; 0x30
 800216e:	4b0e      	ldr	r3, [pc, #56]	; (80021a8 <HAL_SPI_MspInit+0x88>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	60fb      	str	r3, [r7, #12]
 8002178:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800217a:	23a0      	movs	r3, #160	; 0xa0
 800217c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217e:	2302      	movs	r3, #2
 8002180:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002182:	2300      	movs	r3, #0
 8002184:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002186:	2303      	movs	r3, #3
 8002188:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800218a:	2305      	movs	r3, #5
 800218c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800218e:	f107 0314 	add.w	r3, r7, #20
 8002192:	4619      	mov	r1, r3
 8002194:	4805      	ldr	r0, [pc, #20]	; (80021ac <HAL_SPI_MspInit+0x8c>)
 8002196:	f000 fdf1 	bl	8002d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800219a:	bf00      	nop
 800219c:	3728      	adds	r7, #40	; 0x28
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40013000 	.word	0x40013000
 80021a8:	40023800 	.word	0x40023800
 80021ac:	40020000 	.word	0x40020000

080021b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021b4:	e7fe      	b.n	80021b4 <NMI_Handler+0x4>

080021b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021b6:	b480      	push	{r7}
 80021b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021ba:	e7fe      	b.n	80021ba <HardFault_Handler+0x4>

080021bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021c0:	e7fe      	b.n	80021c0 <MemManage_Handler+0x4>

080021c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021c2:	b480      	push	{r7}
 80021c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021c6:	e7fe      	b.n	80021c6 <BusFault_Handler+0x4>

080021c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021cc:	e7fe      	b.n	80021cc <UsageFault_Handler+0x4>

080021ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021ce:	b480      	push	{r7}
 80021d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021d2:	bf00      	nop
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021e0:	bf00      	nop
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021ea:	b480      	push	{r7}
 80021ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021ee:	bf00      	nop
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021fc:	f000 f8f8 	bl	80023f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002200:	bf00      	nop
 8002202:	bd80      	pop	{r7, pc}

08002204 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8002208:	4802      	ldr	r0, [pc, #8]	; (8002214 <DMA1_Stream3_IRQHandler+0x10>)
 800220a:	f000 fb4d 	bl	80028a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800220e:	bf00      	nop
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	20000368 	.word	0x20000368

08002218 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 800221c:	4802      	ldr	r0, [pc, #8]	; (8002228 <DMA1_Stream5_IRQHandler+0x10>)
 800221e:	f000 fb43 	bl	80028a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002222:	bf00      	nop
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	200003c8 	.word	0x200003c8

0800222c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 8002230:	4802      	ldr	r0, [pc, #8]	; (800223c <SPI2_IRQHandler+0x10>)
 8002232:	f003 ff03 	bl	800603c <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002236:	bf00      	nop
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	2000047c 	.word	0x2000047c

08002240 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s3);
 8002244:	4802      	ldr	r0, [pc, #8]	; (8002250 <SPI3_IRQHandler+0x10>)
 8002246:	f003 fef9 	bl	800603c <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800224a:	bf00      	nop
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	200004c4 	.word	0x200004c4

08002254 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002258:	4802      	ldr	r0, [pc, #8]	; (8002264 <OTG_FS_IRQHandler+0x10>)
 800225a:	f001 f9af 	bl	80035bc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	20002230 	.word	0x20002230

08002268 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002270:	4a14      	ldr	r2, [pc, #80]	; (80022c4 <_sbrk+0x5c>)
 8002272:	4b15      	ldr	r3, [pc, #84]	; (80022c8 <_sbrk+0x60>)
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800227c:	4b13      	ldr	r3, [pc, #76]	; (80022cc <_sbrk+0x64>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d102      	bne.n	800228a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002284:	4b11      	ldr	r3, [pc, #68]	; (80022cc <_sbrk+0x64>)
 8002286:	4a12      	ldr	r2, [pc, #72]	; (80022d0 <_sbrk+0x68>)
 8002288:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800228a:	4b10      	ldr	r3, [pc, #64]	; (80022cc <_sbrk+0x64>)
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4413      	add	r3, r2
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	429a      	cmp	r2, r3
 8002296:	d207      	bcs.n	80022a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002298:	f009 fc4a 	bl	800bb30 <__errno>
 800229c:	4603      	mov	r3, r0
 800229e:	220c      	movs	r2, #12
 80022a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022a2:	f04f 33ff 	mov.w	r3, #4294967295
 80022a6:	e009      	b.n	80022bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022a8:	4b08      	ldr	r3, [pc, #32]	; (80022cc <_sbrk+0x64>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022ae:	4b07      	ldr	r3, [pc, #28]	; (80022cc <_sbrk+0x64>)
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4413      	add	r3, r2
 80022b6:	4a05      	ldr	r2, [pc, #20]	; (80022cc <_sbrk+0x64>)
 80022b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022ba:	68fb      	ldr	r3, [r7, #12]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3718      	adds	r7, #24
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	20020000 	.word	0x20020000
 80022c8:	00000400 	.word	0x00000400
 80022cc:	20001e38 	.word	0x20001e38
 80022d0:	20002548 	.word	0x20002548

080022d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022d8:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <SystemInit+0x20>)
 80022da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022de:	4a05      	ldr	r2, [pc, #20]	; (80022f4 <SystemInit+0x20>)
 80022e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022e8:	bf00      	nop
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	e000ed00 	.word	0xe000ed00

080022f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80022f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002330 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022fc:	480d      	ldr	r0, [pc, #52]	; (8002334 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80022fe:	490e      	ldr	r1, [pc, #56]	; (8002338 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002300:	4a0e      	ldr	r2, [pc, #56]	; (800233c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002302:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002304:	e002      	b.n	800230c <LoopCopyDataInit>

08002306 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002306:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002308:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800230a:	3304      	adds	r3, #4

0800230c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800230c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800230e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002310:	d3f9      	bcc.n	8002306 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002312:	4a0b      	ldr	r2, [pc, #44]	; (8002340 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002314:	4c0b      	ldr	r4, [pc, #44]	; (8002344 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002316:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002318:	e001      	b.n	800231e <LoopFillZerobss>

0800231a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800231a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800231c:	3204      	adds	r2, #4

0800231e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800231e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002320:	d3fb      	bcc.n	800231a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002322:	f7ff ffd7 	bl	80022d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002326:	f009 fc09 	bl	800bb3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800232a:	f7fe fc37 	bl	8000b9c <main>
  bx  lr    
 800232e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002330:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002334:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002338:	20000294 	.word	0x20000294
  ldr r2, =_sidata
 800233c:	0800c158 	.word	0x0800c158
  ldr r2, =_sbss
 8002340:	20000294 	.word	0x20000294
  ldr r4, =_ebss
 8002344:	20002544 	.word	0x20002544

08002348 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002348:	e7fe      	b.n	8002348 <ADC_IRQHandler>
	...

0800234c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002350:	4b0e      	ldr	r3, [pc, #56]	; (800238c <HAL_Init+0x40>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a0d      	ldr	r2, [pc, #52]	; (800238c <HAL_Init+0x40>)
 8002356:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800235a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800235c:	4b0b      	ldr	r3, [pc, #44]	; (800238c <HAL_Init+0x40>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a0a      	ldr	r2, [pc, #40]	; (800238c <HAL_Init+0x40>)
 8002362:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002366:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002368:	4b08      	ldr	r3, [pc, #32]	; (800238c <HAL_Init+0x40>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a07      	ldr	r2, [pc, #28]	; (800238c <HAL_Init+0x40>)
 800236e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002372:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002374:	2003      	movs	r0, #3
 8002376:	f000 f94f 	bl	8002618 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800237a:	200f      	movs	r0, #15
 800237c:	f000 f808 	bl	8002390 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002380:	f7ff fd14 	bl	8001dac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	40023c00 	.word	0x40023c00

08002390 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002398:	4b12      	ldr	r3, [pc, #72]	; (80023e4 <HAL_InitTick+0x54>)
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	4b12      	ldr	r3, [pc, #72]	; (80023e8 <HAL_InitTick+0x58>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	4619      	mov	r1, r3
 80023a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80023aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ae:	4618      	mov	r0, r3
 80023b0:	f000 f967 	bl	8002682 <HAL_SYSTICK_Config>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e00e      	b.n	80023dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2b0f      	cmp	r3, #15
 80023c2:	d80a      	bhi.n	80023da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023c4:	2200      	movs	r2, #0
 80023c6:	6879      	ldr	r1, [r7, #4]
 80023c8:	f04f 30ff 	mov.w	r0, #4294967295
 80023cc:	f000 f92f 	bl	800262e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023d0:	4a06      	ldr	r2, [pc, #24]	; (80023ec <HAL_InitTick+0x5c>)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023d6:	2300      	movs	r3, #0
 80023d8:	e000      	b.n	80023dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3708      	adds	r7, #8
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	20000204 	.word	0x20000204
 80023e8:	2000020c 	.word	0x2000020c
 80023ec:	20000208 	.word	0x20000208

080023f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023f4:	4b06      	ldr	r3, [pc, #24]	; (8002410 <HAL_IncTick+0x20>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	461a      	mov	r2, r3
 80023fa:	4b06      	ldr	r3, [pc, #24]	; (8002414 <HAL_IncTick+0x24>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4413      	add	r3, r2
 8002400:	4a04      	ldr	r2, [pc, #16]	; (8002414 <HAL_IncTick+0x24>)
 8002402:	6013      	str	r3, [r2, #0]
}
 8002404:	bf00      	nop
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	2000020c 	.word	0x2000020c
 8002414:	20001e3c 	.word	0x20001e3c

08002418 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  return uwTick;
 800241c:	4b03      	ldr	r3, [pc, #12]	; (800242c <HAL_GetTick+0x14>)
 800241e:	681b      	ldr	r3, [r3, #0]
}
 8002420:	4618      	mov	r0, r3
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	20001e3c 	.word	0x20001e3c

08002430 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002438:	f7ff ffee 	bl	8002418 <HAL_GetTick>
 800243c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002448:	d005      	beq.n	8002456 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800244a:	4b0a      	ldr	r3, [pc, #40]	; (8002474 <HAL_Delay+0x44>)
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	461a      	mov	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	4413      	add	r3, r2
 8002454:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002456:	bf00      	nop
 8002458:	f7ff ffde 	bl	8002418 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	429a      	cmp	r2, r3
 8002466:	d8f7      	bhi.n	8002458 <HAL_Delay+0x28>
  {
  }
}
 8002468:	bf00      	nop
 800246a:	bf00      	nop
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	2000020c 	.word	0x2000020c

08002478 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002488:	4b0c      	ldr	r3, [pc, #48]	; (80024bc <__NVIC_SetPriorityGrouping+0x44>)
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800248e:	68ba      	ldr	r2, [r7, #8]
 8002490:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002494:	4013      	ands	r3, r2
 8002496:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024aa:	4a04      	ldr	r2, [pc, #16]	; (80024bc <__NVIC_SetPriorityGrouping+0x44>)
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	60d3      	str	r3, [r2, #12]
}
 80024b0:	bf00      	nop
 80024b2:	3714      	adds	r7, #20
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr
 80024bc:	e000ed00 	.word	0xe000ed00

080024c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024c4:	4b04      	ldr	r3, [pc, #16]	; (80024d8 <__NVIC_GetPriorityGrouping+0x18>)
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	0a1b      	lsrs	r3, r3, #8
 80024ca:	f003 0307 	and.w	r3, r3, #7
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr
 80024d8:	e000ed00 	.word	0xe000ed00

080024dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	4603      	mov	r3, r0
 80024e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	db0b      	blt.n	8002506 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024ee:	79fb      	ldrb	r3, [r7, #7]
 80024f0:	f003 021f 	and.w	r2, r3, #31
 80024f4:	4907      	ldr	r1, [pc, #28]	; (8002514 <__NVIC_EnableIRQ+0x38>)
 80024f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fa:	095b      	lsrs	r3, r3, #5
 80024fc:	2001      	movs	r0, #1
 80024fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002506:	bf00      	nop
 8002508:	370c      	adds	r7, #12
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	e000e100 	.word	0xe000e100

08002518 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	4603      	mov	r3, r0
 8002520:	6039      	str	r1, [r7, #0]
 8002522:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002528:	2b00      	cmp	r3, #0
 800252a:	db0a      	blt.n	8002542 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	b2da      	uxtb	r2, r3
 8002530:	490c      	ldr	r1, [pc, #48]	; (8002564 <__NVIC_SetPriority+0x4c>)
 8002532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002536:	0112      	lsls	r2, r2, #4
 8002538:	b2d2      	uxtb	r2, r2
 800253a:	440b      	add	r3, r1
 800253c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002540:	e00a      	b.n	8002558 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	b2da      	uxtb	r2, r3
 8002546:	4908      	ldr	r1, [pc, #32]	; (8002568 <__NVIC_SetPriority+0x50>)
 8002548:	79fb      	ldrb	r3, [r7, #7]
 800254a:	f003 030f 	and.w	r3, r3, #15
 800254e:	3b04      	subs	r3, #4
 8002550:	0112      	lsls	r2, r2, #4
 8002552:	b2d2      	uxtb	r2, r2
 8002554:	440b      	add	r3, r1
 8002556:	761a      	strb	r2, [r3, #24]
}
 8002558:	bf00      	nop
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr
 8002564:	e000e100 	.word	0xe000e100
 8002568:	e000ed00 	.word	0xe000ed00

0800256c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800256c:	b480      	push	{r7}
 800256e:	b089      	sub	sp, #36	; 0x24
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f003 0307 	and.w	r3, r3, #7
 800257e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	f1c3 0307 	rsb	r3, r3, #7
 8002586:	2b04      	cmp	r3, #4
 8002588:	bf28      	it	cs
 800258a:	2304      	movcs	r3, #4
 800258c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	3304      	adds	r3, #4
 8002592:	2b06      	cmp	r3, #6
 8002594:	d902      	bls.n	800259c <NVIC_EncodePriority+0x30>
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	3b03      	subs	r3, #3
 800259a:	e000      	b.n	800259e <NVIC_EncodePriority+0x32>
 800259c:	2300      	movs	r3, #0
 800259e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a0:	f04f 32ff 	mov.w	r2, #4294967295
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	43da      	mvns	r2, r3
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	401a      	ands	r2, r3
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025b4:	f04f 31ff 	mov.w	r1, #4294967295
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	fa01 f303 	lsl.w	r3, r1, r3
 80025be:	43d9      	mvns	r1, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025c4:	4313      	orrs	r3, r2
         );
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3724      	adds	r7, #36	; 0x24
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
	...

080025d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3b01      	subs	r3, #1
 80025e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025e4:	d301      	bcc.n	80025ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025e6:	2301      	movs	r3, #1
 80025e8:	e00f      	b.n	800260a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025ea:	4a0a      	ldr	r2, [pc, #40]	; (8002614 <SysTick_Config+0x40>)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	3b01      	subs	r3, #1
 80025f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025f2:	210f      	movs	r1, #15
 80025f4:	f04f 30ff 	mov.w	r0, #4294967295
 80025f8:	f7ff ff8e 	bl	8002518 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025fc:	4b05      	ldr	r3, [pc, #20]	; (8002614 <SysTick_Config+0x40>)
 80025fe:	2200      	movs	r2, #0
 8002600:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002602:	4b04      	ldr	r3, [pc, #16]	; (8002614 <SysTick_Config+0x40>)
 8002604:	2207      	movs	r2, #7
 8002606:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	e000e010 	.word	0xe000e010

08002618 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f7ff ff29 	bl	8002478 <__NVIC_SetPriorityGrouping>
}
 8002626:	bf00      	nop
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800262e:	b580      	push	{r7, lr}
 8002630:	b086      	sub	sp, #24
 8002632:	af00      	add	r7, sp, #0
 8002634:	4603      	mov	r3, r0
 8002636:	60b9      	str	r1, [r7, #8]
 8002638:	607a      	str	r2, [r7, #4]
 800263a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800263c:	2300      	movs	r3, #0
 800263e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002640:	f7ff ff3e 	bl	80024c0 <__NVIC_GetPriorityGrouping>
 8002644:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	68b9      	ldr	r1, [r7, #8]
 800264a:	6978      	ldr	r0, [r7, #20]
 800264c:	f7ff ff8e 	bl	800256c <NVIC_EncodePriority>
 8002650:	4602      	mov	r2, r0
 8002652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002656:	4611      	mov	r1, r2
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff ff5d 	bl	8002518 <__NVIC_SetPriority>
}
 800265e:	bf00      	nop
 8002660:	3718      	adds	r7, #24
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002666:	b580      	push	{r7, lr}
 8002668:	b082      	sub	sp, #8
 800266a:	af00      	add	r7, sp, #0
 800266c:	4603      	mov	r3, r0
 800266e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff ff31 	bl	80024dc <__NVIC_EnableIRQ>
}
 800267a:	bf00      	nop
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b082      	sub	sp, #8
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7ff ffa2 	bl	80025d4 <SysTick_Config>
 8002690:	4603      	mov	r3, r0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
	...

0800269c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026a4:	2300      	movs	r3, #0
 80026a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80026a8:	f7ff feb6 	bl	8002418 <HAL_GetTick>
 80026ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d101      	bne.n	80026b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e099      	b.n	80027ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2202      	movs	r2, #2
 80026bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f022 0201 	bic.w	r2, r2, #1
 80026d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026d8:	e00f      	b.n	80026fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026da:	f7ff fe9d 	bl	8002418 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b05      	cmp	r3, #5
 80026e6:	d908      	bls.n	80026fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2220      	movs	r2, #32
 80026ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2203      	movs	r2, #3
 80026f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e078      	b.n	80027ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	2b00      	cmp	r3, #0
 8002706:	d1e8      	bne.n	80026da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002710:	697a      	ldr	r2, [r7, #20]
 8002712:	4b38      	ldr	r3, [pc, #224]	; (80027f4 <HAL_DMA_Init+0x158>)
 8002714:	4013      	ands	r3, r2
 8002716:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685a      	ldr	r2, [r3, #4]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002726:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002732:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800273e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a1b      	ldr	r3, [r3, #32]
 8002744:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002746:	697a      	ldr	r2, [r7, #20]
 8002748:	4313      	orrs	r3, r2
 800274a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002750:	2b04      	cmp	r3, #4
 8002752:	d107      	bne.n	8002764 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275c:	4313      	orrs	r3, r2
 800275e:	697a      	ldr	r2, [r7, #20]
 8002760:	4313      	orrs	r3, r2
 8002762:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	697a      	ldr	r2, [r7, #20]
 800276a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	f023 0307 	bic.w	r3, r3, #7
 800277a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002780:	697a      	ldr	r2, [r7, #20]
 8002782:	4313      	orrs	r3, r2
 8002784:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278a:	2b04      	cmp	r3, #4
 800278c:	d117      	bne.n	80027be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002792:	697a      	ldr	r2, [r7, #20]
 8002794:	4313      	orrs	r3, r2
 8002796:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279c:	2b00      	cmp	r3, #0
 800279e:	d00e      	beq.n	80027be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f000 fa6f 	bl	8002c84 <DMA_CheckFifoParam>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d008      	beq.n	80027be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2240      	movs	r2, #64	; 0x40
 80027b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2201      	movs	r2, #1
 80027b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80027ba:	2301      	movs	r3, #1
 80027bc:	e016      	b.n	80027ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 fa26 	bl	8002c18 <DMA_CalcBaseAndBitshift>
 80027cc:	4603      	mov	r3, r0
 80027ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d4:	223f      	movs	r2, #63	; 0x3f
 80027d6:	409a      	lsls	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2201      	movs	r2, #1
 80027e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3718      	adds	r7, #24
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	f010803f 	.word	0xf010803f

080027f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
 8002804:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002806:	2300      	movs	r3, #0
 8002808:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800280e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002816:	2b01      	cmp	r3, #1
 8002818:	d101      	bne.n	800281e <HAL_DMA_Start_IT+0x26>
 800281a:	2302      	movs	r3, #2
 800281c:	e040      	b.n	80028a0 <HAL_DMA_Start_IT+0xa8>
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2201      	movs	r2, #1
 8002822:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b01      	cmp	r3, #1
 8002830:	d12f      	bne.n	8002892 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2202      	movs	r2, #2
 8002836:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	68b9      	ldr	r1, [r7, #8]
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f000 f9b8 	bl	8002bbc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002850:	223f      	movs	r2, #63	; 0x3f
 8002852:	409a      	lsls	r2, r3
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f042 0216 	orr.w	r2, r2, #22
 8002866:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286c:	2b00      	cmp	r3, #0
 800286e:	d007      	beq.n	8002880 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f042 0208 	orr.w	r2, r2, #8
 800287e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f042 0201 	orr.w	r2, r2, #1
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	e005      	b.n	800289e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800289a:	2302      	movs	r3, #2
 800289c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800289e:	7dfb      	ldrb	r3, [r7, #23]
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3718      	adds	r7, #24
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80028b0:	2300      	movs	r3, #0
 80028b2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80028b4:	4b8e      	ldr	r3, [pc, #568]	; (8002af0 <HAL_DMA_IRQHandler+0x248>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a8e      	ldr	r2, [pc, #568]	; (8002af4 <HAL_DMA_IRQHandler+0x24c>)
 80028ba:	fba2 2303 	umull	r2, r3, r2, r3
 80028be:	0a9b      	lsrs	r3, r3, #10
 80028c0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d2:	2208      	movs	r2, #8
 80028d4:	409a      	lsls	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	4013      	ands	r3, r2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d01a      	beq.n	8002914 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0304 	and.w	r3, r3, #4
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d013      	beq.n	8002914 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f022 0204 	bic.w	r2, r2, #4
 80028fa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002900:	2208      	movs	r2, #8
 8002902:	409a      	lsls	r2, r3
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800290c:	f043 0201 	orr.w	r2, r3, #1
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002918:	2201      	movs	r2, #1
 800291a:	409a      	lsls	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	4013      	ands	r3, r2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d012      	beq.n	800294a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00b      	beq.n	800294a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002936:	2201      	movs	r2, #1
 8002938:	409a      	lsls	r2, r3
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002942:	f043 0202 	orr.w	r2, r3, #2
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800294e:	2204      	movs	r2, #4
 8002950:	409a      	lsls	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	4013      	ands	r3, r2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d012      	beq.n	8002980 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0302 	and.w	r3, r3, #2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00b      	beq.n	8002980 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800296c:	2204      	movs	r2, #4
 800296e:	409a      	lsls	r2, r3
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002978:	f043 0204 	orr.w	r2, r3, #4
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002984:	2210      	movs	r2, #16
 8002986:	409a      	lsls	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	4013      	ands	r3, r2
 800298c:	2b00      	cmp	r3, #0
 800298e:	d043      	beq.n	8002a18 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0308 	and.w	r3, r3, #8
 800299a:	2b00      	cmp	r3, #0
 800299c:	d03c      	beq.n	8002a18 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a2:	2210      	movs	r2, #16
 80029a4:	409a      	lsls	r2, r3
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d018      	beq.n	80029ea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d108      	bne.n	80029d8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d024      	beq.n	8002a18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	4798      	blx	r3
 80029d6:	e01f      	b.n	8002a18 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d01b      	beq.n	8002a18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	4798      	blx	r3
 80029e8:	e016      	b.n	8002a18 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d107      	bne.n	8002a08 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f022 0208 	bic.w	r2, r2, #8
 8002a06:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d003      	beq.n	8002a18 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a1c:	2220      	movs	r2, #32
 8002a1e:	409a      	lsls	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	4013      	ands	r3, r2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f000 808f 	beq.w	8002b48 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0310 	and.w	r3, r3, #16
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f000 8087 	beq.w	8002b48 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a3e:	2220      	movs	r2, #32
 8002a40:	409a      	lsls	r2, r3
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b05      	cmp	r3, #5
 8002a50:	d136      	bne.n	8002ac0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f022 0216 	bic.w	r2, r2, #22
 8002a60:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	695a      	ldr	r2, [r3, #20]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a70:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d103      	bne.n	8002a82 <HAL_DMA_IRQHandler+0x1da>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d007      	beq.n	8002a92 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f022 0208 	bic.w	r2, r2, #8
 8002a90:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a96:	223f      	movs	r2, #63	; 0x3f
 8002a98:	409a      	lsls	r2, r3
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d07e      	beq.n	8002bb4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	4798      	blx	r3
        }
        return;
 8002abe:	e079      	b.n	8002bb4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d01d      	beq.n	8002b0a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d10d      	bne.n	8002af8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d031      	beq.n	8002b48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	4798      	blx	r3
 8002aec:	e02c      	b.n	8002b48 <HAL_DMA_IRQHandler+0x2a0>
 8002aee:	bf00      	nop
 8002af0:	20000204 	.word	0x20000204
 8002af4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d023      	beq.n	8002b48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	4798      	blx	r3
 8002b08:	e01e      	b.n	8002b48 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d10f      	bne.n	8002b38 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f022 0210 	bic.w	r2, r2, #16
 8002b26:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d003      	beq.n	8002b48 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d032      	beq.n	8002bb6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b54:	f003 0301 	and.w	r3, r3, #1
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d022      	beq.n	8002ba2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2205      	movs	r2, #5
 8002b60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f022 0201 	bic.w	r2, r2, #1
 8002b72:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	3301      	adds	r3, #1
 8002b78:	60bb      	str	r3, [r7, #8]
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d307      	bcc.n	8002b90 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d1f2      	bne.n	8002b74 <HAL_DMA_IRQHandler+0x2cc>
 8002b8e:	e000      	b.n	8002b92 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002b90:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2201      	movs	r2, #1
 8002b96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d005      	beq.n	8002bb6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	4798      	blx	r3
 8002bb2:	e000      	b.n	8002bb6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002bb4:	bf00      	nop
    }
  }
}
 8002bb6:	3718      	adds	r7, #24
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
 8002bc8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002bd8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	683a      	ldr	r2, [r7, #0]
 8002be0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	2b40      	cmp	r3, #64	; 0x40
 8002be8:	d108      	bne.n	8002bfc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68ba      	ldr	r2, [r7, #8]
 8002bf8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002bfa:	e007      	b.n	8002c0c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68ba      	ldr	r2, [r7, #8]
 8002c02:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	60da      	str	r2, [r3, #12]
}
 8002c0c:	bf00      	nop
 8002c0e:	3714      	adds	r7, #20
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	3b10      	subs	r3, #16
 8002c28:	4a14      	ldr	r2, [pc, #80]	; (8002c7c <DMA_CalcBaseAndBitshift+0x64>)
 8002c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2e:	091b      	lsrs	r3, r3, #4
 8002c30:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c32:	4a13      	ldr	r2, [pc, #76]	; (8002c80 <DMA_CalcBaseAndBitshift+0x68>)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	4413      	add	r3, r2
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2b03      	cmp	r3, #3
 8002c44:	d909      	bls.n	8002c5a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c4e:	f023 0303 	bic.w	r3, r3, #3
 8002c52:	1d1a      	adds	r2, r3, #4
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	659a      	str	r2, [r3, #88]	; 0x58
 8002c58:	e007      	b.n	8002c6a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c62:	f023 0303 	bic.w	r3, r3, #3
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3714      	adds	r7, #20
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	aaaaaaab 	.word	0xaaaaaaab
 8002c80:	0800c12c 	.word	0x0800c12c

08002c84 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c94:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d11f      	bne.n	8002cde <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	2b03      	cmp	r3, #3
 8002ca2:	d856      	bhi.n	8002d52 <DMA_CheckFifoParam+0xce>
 8002ca4:	a201      	add	r2, pc, #4	; (adr r2, 8002cac <DMA_CheckFifoParam+0x28>)
 8002ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002caa:	bf00      	nop
 8002cac:	08002cbd 	.word	0x08002cbd
 8002cb0:	08002ccf 	.word	0x08002ccf
 8002cb4:	08002cbd 	.word	0x08002cbd
 8002cb8:	08002d53 	.word	0x08002d53
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d046      	beq.n	8002d56 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ccc:	e043      	b.n	8002d56 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002cd6:	d140      	bne.n	8002d5a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cdc:	e03d      	b.n	8002d5a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ce6:	d121      	bne.n	8002d2c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	2b03      	cmp	r3, #3
 8002cec:	d837      	bhi.n	8002d5e <DMA_CheckFifoParam+0xda>
 8002cee:	a201      	add	r2, pc, #4	; (adr r2, 8002cf4 <DMA_CheckFifoParam+0x70>)
 8002cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cf4:	08002d05 	.word	0x08002d05
 8002cf8:	08002d0b 	.word	0x08002d0b
 8002cfc:	08002d05 	.word	0x08002d05
 8002d00:	08002d1d 	.word	0x08002d1d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	73fb      	strb	r3, [r7, #15]
      break;
 8002d08:	e030      	b.n	8002d6c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d025      	beq.n	8002d62 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d1a:	e022      	b.n	8002d62 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d20:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d24:	d11f      	bne.n	8002d66 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d2a:	e01c      	b.n	8002d66 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d903      	bls.n	8002d3a <DMA_CheckFifoParam+0xb6>
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	2b03      	cmp	r3, #3
 8002d36:	d003      	beq.n	8002d40 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d38:	e018      	b.n	8002d6c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	73fb      	strb	r3, [r7, #15]
      break;
 8002d3e:	e015      	b.n	8002d6c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00e      	beq.n	8002d6a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d50:	e00b      	b.n	8002d6a <DMA_CheckFifoParam+0xe6>
      break;
 8002d52:	bf00      	nop
 8002d54:	e00a      	b.n	8002d6c <DMA_CheckFifoParam+0xe8>
      break;
 8002d56:	bf00      	nop
 8002d58:	e008      	b.n	8002d6c <DMA_CheckFifoParam+0xe8>
      break;
 8002d5a:	bf00      	nop
 8002d5c:	e006      	b.n	8002d6c <DMA_CheckFifoParam+0xe8>
      break;
 8002d5e:	bf00      	nop
 8002d60:	e004      	b.n	8002d6c <DMA_CheckFifoParam+0xe8>
      break;
 8002d62:	bf00      	nop
 8002d64:	e002      	b.n	8002d6c <DMA_CheckFifoParam+0xe8>
      break;   
 8002d66:	bf00      	nop
 8002d68:	e000      	b.n	8002d6c <DMA_CheckFifoParam+0xe8>
      break;
 8002d6a:	bf00      	nop
    }
  } 
  
  return status; 
 8002d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3714      	adds	r7, #20
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop

08002d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b089      	sub	sp, #36	; 0x24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d86:	2300      	movs	r3, #0
 8002d88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d92:	2300      	movs	r3, #0
 8002d94:	61fb      	str	r3, [r7, #28]
 8002d96:	e16b      	b.n	8003070 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d98:	2201      	movs	r2, #1
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	4013      	ands	r3, r2
 8002daa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002dac:	693a      	ldr	r2, [r7, #16]
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	f040 815a 	bne.w	800306a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f003 0303 	and.w	r3, r3, #3
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d005      	beq.n	8002dce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d130      	bne.n	8002e30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	2203      	movs	r2, #3
 8002dda:	fa02 f303 	lsl.w	r3, r2, r3
 8002dde:	43db      	mvns	r3, r3
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	4013      	ands	r3, r2
 8002de4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	68da      	ldr	r2, [r3, #12]
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	fa02 f303 	lsl.w	r3, r2, r3
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e04:	2201      	movs	r2, #1
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	4013      	ands	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	091b      	lsrs	r3, r3, #4
 8002e1a:	f003 0201 	and.w	r2, r3, #1
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f003 0303 	and.w	r3, r3, #3
 8002e38:	2b03      	cmp	r3, #3
 8002e3a:	d017      	beq.n	8002e6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	2203      	movs	r2, #3
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	43db      	mvns	r3, r3
 8002e4e:	69ba      	ldr	r2, [r7, #24]
 8002e50:	4013      	ands	r3, r2
 8002e52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f003 0303 	and.w	r3, r3, #3
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d123      	bne.n	8002ec0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	08da      	lsrs	r2, r3, #3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	3208      	adds	r2, #8
 8002e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	f003 0307 	and.w	r3, r3, #7
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	220f      	movs	r2, #15
 8002e90:	fa02 f303 	lsl.w	r3, r2, r3
 8002e94:	43db      	mvns	r3, r3
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	4013      	ands	r3, r2
 8002e9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	691a      	ldr	r2, [r3, #16]
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	f003 0307 	and.w	r3, r3, #7
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	08da      	lsrs	r2, r3, #3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	3208      	adds	r2, #8
 8002eba:	69b9      	ldr	r1, [r7, #24]
 8002ebc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	2203      	movs	r2, #3
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f003 0203 	and.w	r2, r3, #3
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f000 80b4 	beq.w	800306a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f02:	2300      	movs	r3, #0
 8002f04:	60fb      	str	r3, [r7, #12]
 8002f06:	4b60      	ldr	r3, [pc, #384]	; (8003088 <HAL_GPIO_Init+0x30c>)
 8002f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0a:	4a5f      	ldr	r2, [pc, #380]	; (8003088 <HAL_GPIO_Init+0x30c>)
 8002f0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f10:	6453      	str	r3, [r2, #68]	; 0x44
 8002f12:	4b5d      	ldr	r3, [pc, #372]	; (8003088 <HAL_GPIO_Init+0x30c>)
 8002f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f1a:	60fb      	str	r3, [r7, #12]
 8002f1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f1e:	4a5b      	ldr	r2, [pc, #364]	; (800308c <HAL_GPIO_Init+0x310>)
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	089b      	lsrs	r3, r3, #2
 8002f24:	3302      	adds	r3, #2
 8002f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	f003 0303 	and.w	r3, r3, #3
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	220f      	movs	r2, #15
 8002f36:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3a:	43db      	mvns	r3, r3
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a52      	ldr	r2, [pc, #328]	; (8003090 <HAL_GPIO_Init+0x314>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d02b      	beq.n	8002fa2 <HAL_GPIO_Init+0x226>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a51      	ldr	r2, [pc, #324]	; (8003094 <HAL_GPIO_Init+0x318>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d025      	beq.n	8002f9e <HAL_GPIO_Init+0x222>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a50      	ldr	r2, [pc, #320]	; (8003098 <HAL_GPIO_Init+0x31c>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d01f      	beq.n	8002f9a <HAL_GPIO_Init+0x21e>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a4f      	ldr	r2, [pc, #316]	; (800309c <HAL_GPIO_Init+0x320>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d019      	beq.n	8002f96 <HAL_GPIO_Init+0x21a>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a4e      	ldr	r2, [pc, #312]	; (80030a0 <HAL_GPIO_Init+0x324>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d013      	beq.n	8002f92 <HAL_GPIO_Init+0x216>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a4d      	ldr	r2, [pc, #308]	; (80030a4 <HAL_GPIO_Init+0x328>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d00d      	beq.n	8002f8e <HAL_GPIO_Init+0x212>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a4c      	ldr	r2, [pc, #304]	; (80030a8 <HAL_GPIO_Init+0x32c>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d007      	beq.n	8002f8a <HAL_GPIO_Init+0x20e>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a4b      	ldr	r2, [pc, #300]	; (80030ac <HAL_GPIO_Init+0x330>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d101      	bne.n	8002f86 <HAL_GPIO_Init+0x20a>
 8002f82:	2307      	movs	r3, #7
 8002f84:	e00e      	b.n	8002fa4 <HAL_GPIO_Init+0x228>
 8002f86:	2308      	movs	r3, #8
 8002f88:	e00c      	b.n	8002fa4 <HAL_GPIO_Init+0x228>
 8002f8a:	2306      	movs	r3, #6
 8002f8c:	e00a      	b.n	8002fa4 <HAL_GPIO_Init+0x228>
 8002f8e:	2305      	movs	r3, #5
 8002f90:	e008      	b.n	8002fa4 <HAL_GPIO_Init+0x228>
 8002f92:	2304      	movs	r3, #4
 8002f94:	e006      	b.n	8002fa4 <HAL_GPIO_Init+0x228>
 8002f96:	2303      	movs	r3, #3
 8002f98:	e004      	b.n	8002fa4 <HAL_GPIO_Init+0x228>
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	e002      	b.n	8002fa4 <HAL_GPIO_Init+0x228>
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e000      	b.n	8002fa4 <HAL_GPIO_Init+0x228>
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	69fa      	ldr	r2, [r7, #28]
 8002fa6:	f002 0203 	and.w	r2, r2, #3
 8002faa:	0092      	lsls	r2, r2, #2
 8002fac:	4093      	lsls	r3, r2
 8002fae:	69ba      	ldr	r2, [r7, #24]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fb4:	4935      	ldr	r1, [pc, #212]	; (800308c <HAL_GPIO_Init+0x310>)
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	089b      	lsrs	r3, r3, #2
 8002fba:	3302      	adds	r3, #2
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fc2:	4b3b      	ldr	r3, [pc, #236]	; (80030b0 <HAL_GPIO_Init+0x334>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	43db      	mvns	r3, r3
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fe6:	4a32      	ldr	r2, [pc, #200]	; (80030b0 <HAL_GPIO_Init+0x334>)
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002fec:	4b30      	ldr	r3, [pc, #192]	; (80030b0 <HAL_GPIO_Init+0x334>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d003      	beq.n	8003010 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	4313      	orrs	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003010:	4a27      	ldr	r2, [pc, #156]	; (80030b0 <HAL_GPIO_Init+0x334>)
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003016:	4b26      	ldr	r3, [pc, #152]	; (80030b0 <HAL_GPIO_Init+0x334>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	43db      	mvns	r3, r3
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	4013      	ands	r3, r2
 8003024:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d003      	beq.n	800303a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003032:	69ba      	ldr	r2, [r7, #24]
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	4313      	orrs	r3, r2
 8003038:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800303a:	4a1d      	ldr	r2, [pc, #116]	; (80030b0 <HAL_GPIO_Init+0x334>)
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003040:	4b1b      	ldr	r3, [pc, #108]	; (80030b0 <HAL_GPIO_Init+0x334>)
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	43db      	mvns	r3, r3
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	4013      	ands	r3, r2
 800304e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d003      	beq.n	8003064 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	4313      	orrs	r3, r2
 8003062:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003064:	4a12      	ldr	r2, [pc, #72]	; (80030b0 <HAL_GPIO_Init+0x334>)
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	3301      	adds	r3, #1
 800306e:	61fb      	str	r3, [r7, #28]
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	2b0f      	cmp	r3, #15
 8003074:	f67f ae90 	bls.w	8002d98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003078:	bf00      	nop
 800307a:	bf00      	nop
 800307c:	3724      	adds	r7, #36	; 0x24
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	40023800 	.word	0x40023800
 800308c:	40013800 	.word	0x40013800
 8003090:	40020000 	.word	0x40020000
 8003094:	40020400 	.word	0x40020400
 8003098:	40020800 	.word	0x40020800
 800309c:	40020c00 	.word	0x40020c00
 80030a0:	40021000 	.word	0x40021000
 80030a4:	40021400 	.word	0x40021400
 80030a8:	40021800 	.word	0x40021800
 80030ac:	40021c00 	.word	0x40021c00
 80030b0:	40013c00 	.word	0x40013c00

080030b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	460b      	mov	r3, r1
 80030be:	807b      	strh	r3, [r7, #2]
 80030c0:	4613      	mov	r3, r2
 80030c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030c4:	787b      	ldrb	r3, [r7, #1]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d003      	beq.n	80030d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030ca:	887a      	ldrh	r2, [r7, #2]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030d0:	e003      	b.n	80030da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030d2:	887b      	ldrh	r3, [r7, #2]
 80030d4:	041a      	lsls	r2, r3, #16
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	619a      	str	r2, [r3, #24]
}
 80030da:	bf00      	nop
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr

080030e6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80030e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030e8:	b08f      	sub	sp, #60	; 0x3c
 80030ea:	af0a      	add	r7, sp, #40	; 0x28
 80030ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d101      	bne.n	80030f8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e054      	b.n	80031a2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d106      	bne.n	8003118 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f008 fa32 	bl	800b57c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2203      	movs	r2, #3
 800311c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003128:	2b00      	cmp	r3, #0
 800312a:	d102      	bne.n	8003132 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4618      	mov	r0, r3
 8003138:	f004 fa1b 	bl	8007572 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	603b      	str	r3, [r7, #0]
 8003142:	687e      	ldr	r6, [r7, #4]
 8003144:	466d      	mov	r5, sp
 8003146:	f106 0410 	add.w	r4, r6, #16
 800314a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800314c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800314e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003150:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003152:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003156:	e885 0003 	stmia.w	r5, {r0, r1}
 800315a:	1d33      	adds	r3, r6, #4
 800315c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800315e:	6838      	ldr	r0, [r7, #0]
 8003160:	f004 f995 	bl	800748e <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2101      	movs	r1, #1
 800316a:	4618      	mov	r0, r3
 800316c:	f004 fa12 	bl	8007594 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	603b      	str	r3, [r7, #0]
 8003176:	687e      	ldr	r6, [r7, #4]
 8003178:	466d      	mov	r5, sp
 800317a:	f106 0410 	add.w	r4, r6, #16
 800317e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003180:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003182:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003184:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003186:	e894 0003 	ldmia.w	r4, {r0, r1}
 800318a:	e885 0003 	stmia.w	r5, {r0, r1}
 800318e:	1d33      	adds	r3, r6, #4
 8003190:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003192:	6838      	ldr	r0, [r7, #0]
 8003194:	f004 fb78 	bl	8007888 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3714      	adds	r7, #20
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080031aa <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80031aa:	b590      	push	{r4, r7, lr}
 80031ac:	b089      	sub	sp, #36	; 0x24
 80031ae:	af04      	add	r7, sp, #16
 80031b0:	6078      	str	r0, [r7, #4]
 80031b2:	4608      	mov	r0, r1
 80031b4:	4611      	mov	r1, r2
 80031b6:	461a      	mov	r2, r3
 80031b8:	4603      	mov	r3, r0
 80031ba:	70fb      	strb	r3, [r7, #3]
 80031bc:	460b      	mov	r3, r1
 80031be:	70bb      	strb	r3, [r7, #2]
 80031c0:	4613      	mov	r3, r2
 80031c2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d101      	bne.n	80031d2 <HAL_HCD_HC_Init+0x28>
 80031ce:	2302      	movs	r3, #2
 80031d0:	e076      	b.n	80032c0 <HAL_HCD_HC_Init+0x116>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2201      	movs	r2, #1
 80031d6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80031da:	78fb      	ldrb	r3, [r7, #3]
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	212c      	movs	r1, #44	; 0x2c
 80031e0:	fb01 f303 	mul.w	r3, r1, r3
 80031e4:	4413      	add	r3, r2
 80031e6:	333d      	adds	r3, #61	; 0x3d
 80031e8:	2200      	movs	r2, #0
 80031ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80031ec:	78fb      	ldrb	r3, [r7, #3]
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	212c      	movs	r1, #44	; 0x2c
 80031f2:	fb01 f303 	mul.w	r3, r1, r3
 80031f6:	4413      	add	r3, r2
 80031f8:	3338      	adds	r3, #56	; 0x38
 80031fa:	787a      	ldrb	r2, [r7, #1]
 80031fc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80031fe:	78fb      	ldrb	r3, [r7, #3]
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	212c      	movs	r1, #44	; 0x2c
 8003204:	fb01 f303 	mul.w	r3, r1, r3
 8003208:	4413      	add	r3, r2
 800320a:	3340      	adds	r3, #64	; 0x40
 800320c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800320e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003210:	78fb      	ldrb	r3, [r7, #3]
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	212c      	movs	r1, #44	; 0x2c
 8003216:	fb01 f303 	mul.w	r3, r1, r3
 800321a:	4413      	add	r3, r2
 800321c:	3339      	adds	r3, #57	; 0x39
 800321e:	78fa      	ldrb	r2, [r7, #3]
 8003220:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003222:	78fb      	ldrb	r3, [r7, #3]
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	212c      	movs	r1, #44	; 0x2c
 8003228:	fb01 f303 	mul.w	r3, r1, r3
 800322c:	4413      	add	r3, r2
 800322e:	333f      	adds	r3, #63	; 0x3f
 8003230:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003234:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003236:	78fb      	ldrb	r3, [r7, #3]
 8003238:	78ba      	ldrb	r2, [r7, #2]
 800323a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800323e:	b2d0      	uxtb	r0, r2
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	212c      	movs	r1, #44	; 0x2c
 8003244:	fb01 f303 	mul.w	r3, r1, r3
 8003248:	4413      	add	r3, r2
 800324a:	333a      	adds	r3, #58	; 0x3a
 800324c:	4602      	mov	r2, r0
 800324e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003250:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003254:	2b00      	cmp	r3, #0
 8003256:	da09      	bge.n	800326c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003258:	78fb      	ldrb	r3, [r7, #3]
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	212c      	movs	r1, #44	; 0x2c
 800325e:	fb01 f303 	mul.w	r3, r1, r3
 8003262:	4413      	add	r3, r2
 8003264:	333b      	adds	r3, #59	; 0x3b
 8003266:	2201      	movs	r2, #1
 8003268:	701a      	strb	r2, [r3, #0]
 800326a:	e008      	b.n	800327e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800326c:	78fb      	ldrb	r3, [r7, #3]
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	212c      	movs	r1, #44	; 0x2c
 8003272:	fb01 f303 	mul.w	r3, r1, r3
 8003276:	4413      	add	r3, r2
 8003278:	333b      	adds	r3, #59	; 0x3b
 800327a:	2200      	movs	r2, #0
 800327c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800327e:	78fb      	ldrb	r3, [r7, #3]
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	212c      	movs	r1, #44	; 0x2c
 8003284:	fb01 f303 	mul.w	r3, r1, r3
 8003288:	4413      	add	r3, r2
 800328a:	333c      	adds	r3, #60	; 0x3c
 800328c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003290:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6818      	ldr	r0, [r3, #0]
 8003296:	787c      	ldrb	r4, [r7, #1]
 8003298:	78ba      	ldrb	r2, [r7, #2]
 800329a:	78f9      	ldrb	r1, [r7, #3]
 800329c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800329e:	9302      	str	r3, [sp, #8]
 80032a0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80032a4:	9301      	str	r3, [sp, #4]
 80032a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80032aa:	9300      	str	r3, [sp, #0]
 80032ac:	4623      	mov	r3, r4
 80032ae:	f004 fc65 	bl	8007b7c <USB_HC_Init>
 80032b2:	4603      	mov	r3, r0
 80032b4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80032be:	7bfb      	ldrb	r3, [r7, #15]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3714      	adds	r7, #20
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd90      	pop	{r4, r7, pc}

080032c8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	460b      	mov	r3, r1
 80032d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80032d4:	2300      	movs	r3, #0
 80032d6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d101      	bne.n	80032e6 <HAL_HCD_HC_Halt+0x1e>
 80032e2:	2302      	movs	r3, #2
 80032e4:	e00f      	b.n	8003306 <HAL_HCD_HC_Halt+0x3e>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2201      	movs	r2, #1
 80032ea:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	78fa      	ldrb	r2, [r7, #3]
 80032f4:	4611      	mov	r1, r2
 80032f6:	4618      	mov	r0, r3
 80032f8:	f004 fea1 	bl	800803e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003304:	7bfb      	ldrb	r3, [r7, #15]
}
 8003306:	4618      	mov	r0, r3
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
	...

08003310 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	4608      	mov	r0, r1
 800331a:	4611      	mov	r1, r2
 800331c:	461a      	mov	r2, r3
 800331e:	4603      	mov	r3, r0
 8003320:	70fb      	strb	r3, [r7, #3]
 8003322:	460b      	mov	r3, r1
 8003324:	70bb      	strb	r3, [r7, #2]
 8003326:	4613      	mov	r3, r2
 8003328:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800332a:	78fb      	ldrb	r3, [r7, #3]
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	212c      	movs	r1, #44	; 0x2c
 8003330:	fb01 f303 	mul.w	r3, r1, r3
 8003334:	4413      	add	r3, r2
 8003336:	333b      	adds	r3, #59	; 0x3b
 8003338:	78ba      	ldrb	r2, [r7, #2]
 800333a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800333c:	78fb      	ldrb	r3, [r7, #3]
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	212c      	movs	r1, #44	; 0x2c
 8003342:	fb01 f303 	mul.w	r3, r1, r3
 8003346:	4413      	add	r3, r2
 8003348:	333f      	adds	r3, #63	; 0x3f
 800334a:	787a      	ldrb	r2, [r7, #1]
 800334c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800334e:	7c3b      	ldrb	r3, [r7, #16]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d112      	bne.n	800337a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003354:	78fb      	ldrb	r3, [r7, #3]
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	212c      	movs	r1, #44	; 0x2c
 800335a:	fb01 f303 	mul.w	r3, r1, r3
 800335e:	4413      	add	r3, r2
 8003360:	3342      	adds	r3, #66	; 0x42
 8003362:	2203      	movs	r2, #3
 8003364:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003366:	78fb      	ldrb	r3, [r7, #3]
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	212c      	movs	r1, #44	; 0x2c
 800336c:	fb01 f303 	mul.w	r3, r1, r3
 8003370:	4413      	add	r3, r2
 8003372:	333d      	adds	r3, #61	; 0x3d
 8003374:	7f3a      	ldrb	r2, [r7, #28]
 8003376:	701a      	strb	r2, [r3, #0]
 8003378:	e008      	b.n	800338c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800337a:	78fb      	ldrb	r3, [r7, #3]
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	212c      	movs	r1, #44	; 0x2c
 8003380:	fb01 f303 	mul.w	r3, r1, r3
 8003384:	4413      	add	r3, r2
 8003386:	3342      	adds	r3, #66	; 0x42
 8003388:	2202      	movs	r2, #2
 800338a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800338c:	787b      	ldrb	r3, [r7, #1]
 800338e:	2b03      	cmp	r3, #3
 8003390:	f200 80c6 	bhi.w	8003520 <HAL_HCD_HC_SubmitRequest+0x210>
 8003394:	a201      	add	r2, pc, #4	; (adr r2, 800339c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800339a:	bf00      	nop
 800339c:	080033ad 	.word	0x080033ad
 80033a0:	0800350d 	.word	0x0800350d
 80033a4:	08003411 	.word	0x08003411
 80033a8:	0800348f 	.word	0x0800348f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80033ac:	7c3b      	ldrb	r3, [r7, #16]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	f040 80b8 	bne.w	8003524 <HAL_HCD_HC_SubmitRequest+0x214>
 80033b4:	78bb      	ldrb	r3, [r7, #2]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f040 80b4 	bne.w	8003524 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80033bc:	8b3b      	ldrh	r3, [r7, #24]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d108      	bne.n	80033d4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80033c2:	78fb      	ldrb	r3, [r7, #3]
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	212c      	movs	r1, #44	; 0x2c
 80033c8:	fb01 f303 	mul.w	r3, r1, r3
 80033cc:	4413      	add	r3, r2
 80033ce:	3355      	adds	r3, #85	; 0x55
 80033d0:	2201      	movs	r2, #1
 80033d2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80033d4:	78fb      	ldrb	r3, [r7, #3]
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	212c      	movs	r1, #44	; 0x2c
 80033da:	fb01 f303 	mul.w	r3, r1, r3
 80033de:	4413      	add	r3, r2
 80033e0:	3355      	adds	r3, #85	; 0x55
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d109      	bne.n	80033fc <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80033e8:	78fb      	ldrb	r3, [r7, #3]
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	212c      	movs	r1, #44	; 0x2c
 80033ee:	fb01 f303 	mul.w	r3, r1, r3
 80033f2:	4413      	add	r3, r2
 80033f4:	3342      	adds	r3, #66	; 0x42
 80033f6:	2200      	movs	r2, #0
 80033f8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80033fa:	e093      	b.n	8003524 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80033fc:	78fb      	ldrb	r3, [r7, #3]
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	212c      	movs	r1, #44	; 0x2c
 8003402:	fb01 f303 	mul.w	r3, r1, r3
 8003406:	4413      	add	r3, r2
 8003408:	3342      	adds	r3, #66	; 0x42
 800340a:	2202      	movs	r2, #2
 800340c:	701a      	strb	r2, [r3, #0]
      break;
 800340e:	e089      	b.n	8003524 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003410:	78bb      	ldrb	r3, [r7, #2]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d11d      	bne.n	8003452 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003416:	78fb      	ldrb	r3, [r7, #3]
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	212c      	movs	r1, #44	; 0x2c
 800341c:	fb01 f303 	mul.w	r3, r1, r3
 8003420:	4413      	add	r3, r2
 8003422:	3355      	adds	r3, #85	; 0x55
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d109      	bne.n	800343e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800342a:	78fb      	ldrb	r3, [r7, #3]
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	212c      	movs	r1, #44	; 0x2c
 8003430:	fb01 f303 	mul.w	r3, r1, r3
 8003434:	4413      	add	r3, r2
 8003436:	3342      	adds	r3, #66	; 0x42
 8003438:	2200      	movs	r2, #0
 800343a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800343c:	e073      	b.n	8003526 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800343e:	78fb      	ldrb	r3, [r7, #3]
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	212c      	movs	r1, #44	; 0x2c
 8003444:	fb01 f303 	mul.w	r3, r1, r3
 8003448:	4413      	add	r3, r2
 800344a:	3342      	adds	r3, #66	; 0x42
 800344c:	2202      	movs	r2, #2
 800344e:	701a      	strb	r2, [r3, #0]
      break;
 8003450:	e069      	b.n	8003526 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003452:	78fb      	ldrb	r3, [r7, #3]
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	212c      	movs	r1, #44	; 0x2c
 8003458:	fb01 f303 	mul.w	r3, r1, r3
 800345c:	4413      	add	r3, r2
 800345e:	3354      	adds	r3, #84	; 0x54
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d109      	bne.n	800347a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003466:	78fb      	ldrb	r3, [r7, #3]
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	212c      	movs	r1, #44	; 0x2c
 800346c:	fb01 f303 	mul.w	r3, r1, r3
 8003470:	4413      	add	r3, r2
 8003472:	3342      	adds	r3, #66	; 0x42
 8003474:	2200      	movs	r2, #0
 8003476:	701a      	strb	r2, [r3, #0]
      break;
 8003478:	e055      	b.n	8003526 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800347a:	78fb      	ldrb	r3, [r7, #3]
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	212c      	movs	r1, #44	; 0x2c
 8003480:	fb01 f303 	mul.w	r3, r1, r3
 8003484:	4413      	add	r3, r2
 8003486:	3342      	adds	r3, #66	; 0x42
 8003488:	2202      	movs	r2, #2
 800348a:	701a      	strb	r2, [r3, #0]
      break;
 800348c:	e04b      	b.n	8003526 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800348e:	78bb      	ldrb	r3, [r7, #2]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d11d      	bne.n	80034d0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003494:	78fb      	ldrb	r3, [r7, #3]
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	212c      	movs	r1, #44	; 0x2c
 800349a:	fb01 f303 	mul.w	r3, r1, r3
 800349e:	4413      	add	r3, r2
 80034a0:	3355      	adds	r3, #85	; 0x55
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d109      	bne.n	80034bc <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80034a8:	78fb      	ldrb	r3, [r7, #3]
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	212c      	movs	r1, #44	; 0x2c
 80034ae:	fb01 f303 	mul.w	r3, r1, r3
 80034b2:	4413      	add	r3, r2
 80034b4:	3342      	adds	r3, #66	; 0x42
 80034b6:	2200      	movs	r2, #0
 80034b8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80034ba:	e034      	b.n	8003526 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80034bc:	78fb      	ldrb	r3, [r7, #3]
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	212c      	movs	r1, #44	; 0x2c
 80034c2:	fb01 f303 	mul.w	r3, r1, r3
 80034c6:	4413      	add	r3, r2
 80034c8:	3342      	adds	r3, #66	; 0x42
 80034ca:	2202      	movs	r2, #2
 80034cc:	701a      	strb	r2, [r3, #0]
      break;
 80034ce:	e02a      	b.n	8003526 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80034d0:	78fb      	ldrb	r3, [r7, #3]
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	212c      	movs	r1, #44	; 0x2c
 80034d6:	fb01 f303 	mul.w	r3, r1, r3
 80034da:	4413      	add	r3, r2
 80034dc:	3354      	adds	r3, #84	; 0x54
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d109      	bne.n	80034f8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80034e4:	78fb      	ldrb	r3, [r7, #3]
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	212c      	movs	r1, #44	; 0x2c
 80034ea:	fb01 f303 	mul.w	r3, r1, r3
 80034ee:	4413      	add	r3, r2
 80034f0:	3342      	adds	r3, #66	; 0x42
 80034f2:	2200      	movs	r2, #0
 80034f4:	701a      	strb	r2, [r3, #0]
      break;
 80034f6:	e016      	b.n	8003526 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80034f8:	78fb      	ldrb	r3, [r7, #3]
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	212c      	movs	r1, #44	; 0x2c
 80034fe:	fb01 f303 	mul.w	r3, r1, r3
 8003502:	4413      	add	r3, r2
 8003504:	3342      	adds	r3, #66	; 0x42
 8003506:	2202      	movs	r2, #2
 8003508:	701a      	strb	r2, [r3, #0]
      break;
 800350a:	e00c      	b.n	8003526 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800350c:	78fb      	ldrb	r3, [r7, #3]
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	212c      	movs	r1, #44	; 0x2c
 8003512:	fb01 f303 	mul.w	r3, r1, r3
 8003516:	4413      	add	r3, r2
 8003518:	3342      	adds	r3, #66	; 0x42
 800351a:	2200      	movs	r2, #0
 800351c:	701a      	strb	r2, [r3, #0]
      break;
 800351e:	e002      	b.n	8003526 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003520:	bf00      	nop
 8003522:	e000      	b.n	8003526 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003524:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003526:	78fb      	ldrb	r3, [r7, #3]
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	212c      	movs	r1, #44	; 0x2c
 800352c:	fb01 f303 	mul.w	r3, r1, r3
 8003530:	4413      	add	r3, r2
 8003532:	3344      	adds	r3, #68	; 0x44
 8003534:	697a      	ldr	r2, [r7, #20]
 8003536:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003538:	78fb      	ldrb	r3, [r7, #3]
 800353a:	8b3a      	ldrh	r2, [r7, #24]
 800353c:	6879      	ldr	r1, [r7, #4]
 800353e:	202c      	movs	r0, #44	; 0x2c
 8003540:	fb00 f303 	mul.w	r3, r0, r3
 8003544:	440b      	add	r3, r1
 8003546:	334c      	adds	r3, #76	; 0x4c
 8003548:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800354a:	78fb      	ldrb	r3, [r7, #3]
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	212c      	movs	r1, #44	; 0x2c
 8003550:	fb01 f303 	mul.w	r3, r1, r3
 8003554:	4413      	add	r3, r2
 8003556:	3360      	adds	r3, #96	; 0x60
 8003558:	2200      	movs	r2, #0
 800355a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800355c:	78fb      	ldrb	r3, [r7, #3]
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	212c      	movs	r1, #44	; 0x2c
 8003562:	fb01 f303 	mul.w	r3, r1, r3
 8003566:	4413      	add	r3, r2
 8003568:	3350      	adds	r3, #80	; 0x50
 800356a:	2200      	movs	r2, #0
 800356c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800356e:	78fb      	ldrb	r3, [r7, #3]
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	212c      	movs	r1, #44	; 0x2c
 8003574:	fb01 f303 	mul.w	r3, r1, r3
 8003578:	4413      	add	r3, r2
 800357a:	3339      	adds	r3, #57	; 0x39
 800357c:	78fa      	ldrb	r2, [r7, #3]
 800357e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003580:	78fb      	ldrb	r3, [r7, #3]
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	212c      	movs	r1, #44	; 0x2c
 8003586:	fb01 f303 	mul.w	r3, r1, r3
 800358a:	4413      	add	r3, r2
 800358c:	3361      	adds	r3, #97	; 0x61
 800358e:	2200      	movs	r2, #0
 8003590:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6818      	ldr	r0, [r3, #0]
 8003596:	78fb      	ldrb	r3, [r7, #3]
 8003598:	222c      	movs	r2, #44	; 0x2c
 800359a:	fb02 f303 	mul.w	r3, r2, r3
 800359e:	3338      	adds	r3, #56	; 0x38
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	18d1      	adds	r1, r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	461a      	mov	r2, r3
 80035ac:	f004 fbf4 	bl	8007d98 <USB_HC_StartXfer>
 80035b0:	4603      	mov	r3, r0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop

080035bc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f004 f917 	bl	8007806 <USB_GetMode>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b01      	cmp	r3, #1
 80035dc:	f040 80f6 	bne.w	80037cc <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f004 f8fb 	bl	80077e0 <USB_ReadInterrupts>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	f000 80ec 	beq.w	80037ca <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f004 f8f2 	bl	80077e0 <USB_ReadInterrupts>
 80035fc:	4603      	mov	r3, r0
 80035fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003602:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003606:	d104      	bne.n	8003612 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003610:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4618      	mov	r0, r3
 8003618:	f004 f8e2 	bl	80077e0 <USB_ReadInterrupts>
 800361c:	4603      	mov	r3, r0
 800361e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003622:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003626:	d104      	bne.n	8003632 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003630:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4618      	mov	r0, r3
 8003638:	f004 f8d2 	bl	80077e0 <USB_ReadInterrupts>
 800363c:	4603      	mov	r3, r0
 800363e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003642:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003646:	d104      	bne.n	8003652 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003650:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4618      	mov	r0, r3
 8003658:	f004 f8c2 	bl	80077e0 <USB_ReadInterrupts>
 800365c:	4603      	mov	r3, r0
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b02      	cmp	r3, #2
 8003664:	d103      	bne.n	800366e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2202      	movs	r2, #2
 800366c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4618      	mov	r0, r3
 8003674:	f004 f8b4 	bl	80077e0 <USB_ReadInterrupts>
 8003678:	4603      	mov	r3, r0
 800367a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800367e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003682:	d11c      	bne.n	80036be <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800368c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b00      	cmp	r3, #0
 800369c:	d10f      	bne.n	80036be <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800369e:	2110      	movs	r1, #16
 80036a0:	6938      	ldr	r0, [r7, #16]
 80036a2:	f003 ffc3 	bl	800762c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80036a6:	6938      	ldr	r0, [r7, #16]
 80036a8:	f003 ffe4 	bl	8007674 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2101      	movs	r1, #1
 80036b2:	4618      	mov	r0, r3
 80036b4:	f004 f99c 	bl	80079f0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f007 ffdd 	bl	800b678 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f004 f88c 	bl	80077e0 <USB_ReadInterrupts>
 80036c8:	4603      	mov	r3, r0
 80036ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036d2:	d102      	bne.n	80036da <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f001 fa03 	bl	8004ae0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4618      	mov	r0, r3
 80036e0:	f004 f87e 	bl	80077e0 <USB_ReadInterrupts>
 80036e4:	4603      	mov	r3, r0
 80036e6:	f003 0308 	and.w	r3, r3, #8
 80036ea:	2b08      	cmp	r3, #8
 80036ec:	d106      	bne.n	80036fc <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f007 ffa6 	bl	800b640 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2208      	movs	r2, #8
 80036fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4618      	mov	r0, r3
 8003702:	f004 f86d 	bl	80077e0 <USB_ReadInterrupts>
 8003706:	4603      	mov	r3, r0
 8003708:	f003 0310 	and.w	r3, r3, #16
 800370c:	2b10      	cmp	r3, #16
 800370e:	d101      	bne.n	8003714 <HAL_HCD_IRQHandler+0x158>
 8003710:	2301      	movs	r3, #1
 8003712:	e000      	b.n	8003716 <HAL_HCD_IRQHandler+0x15a>
 8003714:	2300      	movs	r3, #0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d012      	beq.n	8003740 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	699a      	ldr	r2, [r3, #24]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f022 0210 	bic.w	r2, r2, #16
 8003728:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f001 f906 	bl	800493c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	699a      	ldr	r2, [r3, #24]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f042 0210 	orr.w	r2, r2, #16
 800373e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4618      	mov	r0, r3
 8003746:	f004 f84b 	bl	80077e0 <USB_ReadInterrupts>
 800374a:	4603      	mov	r3, r0
 800374c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003750:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003754:	d13a      	bne.n	80037cc <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4618      	mov	r0, r3
 800375c:	f004 fc5e 	bl	800801c <USB_HC_ReadInterrupt>
 8003760:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003762:	2300      	movs	r3, #0
 8003764:	617b      	str	r3, [r7, #20]
 8003766:	e025      	b.n	80037b4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	f003 030f 	and.w	r3, r3, #15
 800376e:	68ba      	ldr	r2, [r7, #8]
 8003770:	fa22 f303 	lsr.w	r3, r2, r3
 8003774:	f003 0301 	and.w	r3, r3, #1
 8003778:	2b00      	cmp	r3, #0
 800377a:	d018      	beq.n	80037ae <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	015a      	lsls	r2, r3, #5
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	4413      	add	r3, r2
 8003784:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800378e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003792:	d106      	bne.n	80037a2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	b2db      	uxtb	r3, r3
 8003798:	4619      	mov	r1, r3
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f8ab 	bl	80038f6 <HCD_HC_IN_IRQHandler>
 80037a0:	e005      	b.n	80037ae <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	4619      	mov	r1, r3
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 fcc6 	bl	800413a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	3301      	adds	r3, #1
 80037b2:	617b      	str	r3, [r7, #20]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	697a      	ldr	r2, [r7, #20]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d3d4      	bcc.n	8003768 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037c6:	615a      	str	r2, [r3, #20]
 80037c8:	e000      	b.n	80037cc <HAL_HCD_IRQHandler+0x210>
      return;
 80037ca:	bf00      	nop
    }
  }
}
 80037cc:	3718      	adds	r7, #24
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}

080037d2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80037d2:	b580      	push	{r7, lr}
 80037d4:	b082      	sub	sp, #8
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d101      	bne.n	80037e8 <HAL_HCD_Start+0x16>
 80037e4:	2302      	movs	r3, #2
 80037e6:	e013      	b.n	8003810 <HAL_HCD_Start+0x3e>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2101      	movs	r1, #1
 80037f6:	4618      	mov	r0, r3
 80037f8:	f004 f95e 	bl	8007ab8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4618      	mov	r0, r3
 8003802:	f003 fea5 	bl	8007550 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	3708      	adds	r7, #8
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003826:	2b01      	cmp	r3, #1
 8003828:	d101      	bne.n	800382e <HAL_HCD_Stop+0x16>
 800382a:	2302      	movs	r3, #2
 800382c:	e00d      	b.n	800384a <HAL_HCD_Stop+0x32>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2201      	movs	r2, #1
 8003832:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4618      	mov	r0, r3
 800383c:	f004 fd58 	bl	80082f0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3708      	adds	r7, #8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b082      	sub	sp, #8
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4618      	mov	r0, r3
 8003860:	f004 f900 	bl	8007a64 <USB_ResetPort>
 8003864:	4603      	mov	r3, r0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3708      	adds	r7, #8
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800386e:	b480      	push	{r7}
 8003870:	b083      	sub	sp, #12
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
 8003876:	460b      	mov	r3, r1
 8003878:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800387a:	78fb      	ldrb	r3, [r7, #3]
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	212c      	movs	r1, #44	; 0x2c
 8003880:	fb01 f303 	mul.w	r3, r1, r3
 8003884:	4413      	add	r3, r2
 8003886:	3360      	adds	r3, #96	; 0x60
 8003888:	781b      	ldrb	r3, [r3, #0]
}
 800388a:	4618      	mov	r0, r3
 800388c:	370c      	adds	r7, #12
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr

08003896 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003896:	b480      	push	{r7}
 8003898:	b083      	sub	sp, #12
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
 800389e:	460b      	mov	r3, r1
 80038a0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80038a2:	78fb      	ldrb	r3, [r7, #3]
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	212c      	movs	r1, #44	; 0x2c
 80038a8:	fb01 f303 	mul.w	r3, r1, r3
 80038ac:	4413      	add	r3, r2
 80038ae:	3350      	adds	r3, #80	; 0x50
 80038b0:	681b      	ldr	r3, [r3, #0]
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr

080038be <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80038be:	b580      	push	{r7, lr}
 80038c0:	b082      	sub	sp, #8
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f004 f944 	bl	8007b58 <USB_GetCurrentFrame>
 80038d0:	4603      	mov	r3, r0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3708      	adds	r7, #8
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}

080038da <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b082      	sub	sp, #8
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f004 f91f 	bl	8007b2a <USB_GetHostSpeed>
 80038ec:	4603      	mov	r3, r0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3708      	adds	r7, #8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b086      	sub	sp, #24
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
 80038fe:	460b      	mov	r3, r1
 8003900:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800390c:	78fb      	ldrb	r3, [r7, #3]
 800390e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	015a      	lsls	r2, r3, #5
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	4413      	add	r3, r2
 8003918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f003 0304 	and.w	r3, r3, #4
 8003922:	2b04      	cmp	r3, #4
 8003924:	d119      	bne.n	800395a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	015a      	lsls	r2, r3, #5
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	4413      	add	r3, r2
 800392e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003932:	461a      	mov	r2, r3
 8003934:	2304      	movs	r3, #4
 8003936:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	015a      	lsls	r2, r3, #5
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	4413      	add	r3, r2
 8003940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	0151      	lsls	r1, r2, #5
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	440a      	add	r2, r1
 800394e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003952:	f043 0302 	orr.w	r3, r3, #2
 8003956:	60d3      	str	r3, [r2, #12]
 8003958:	e101      	b.n	8003b5e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	015a      	lsls	r2, r3, #5
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	4413      	add	r3, r2
 8003962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800396c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003970:	d12b      	bne.n	80039ca <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	015a      	lsls	r2, r3, #5
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	4413      	add	r3, r2
 800397a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800397e:	461a      	mov	r2, r3
 8003980:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003984:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	212c      	movs	r1, #44	; 0x2c
 800398c:	fb01 f303 	mul.w	r3, r1, r3
 8003990:	4413      	add	r3, r2
 8003992:	3361      	adds	r3, #97	; 0x61
 8003994:	2207      	movs	r2, #7
 8003996:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	015a      	lsls	r2, r3, #5
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	4413      	add	r3, r2
 80039a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	0151      	lsls	r1, r2, #5
 80039aa:	693a      	ldr	r2, [r7, #16]
 80039ac:	440a      	add	r2, r1
 80039ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039b2:	f043 0302 	orr.w	r3, r3, #2
 80039b6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	b2d2      	uxtb	r2, r2
 80039c0:	4611      	mov	r1, r2
 80039c2:	4618      	mov	r0, r3
 80039c4:	f004 fb3b 	bl	800803e <USB_HC_Halt>
 80039c8:	e0c9      	b.n	8003b5e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	015a      	lsls	r2, r3, #5
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	4413      	add	r3, r2
 80039d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f003 0320 	and.w	r3, r3, #32
 80039dc:	2b20      	cmp	r3, #32
 80039de:	d109      	bne.n	80039f4 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	015a      	lsls	r2, r3, #5
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	4413      	add	r3, r2
 80039e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ec:	461a      	mov	r2, r3
 80039ee:	2320      	movs	r3, #32
 80039f0:	6093      	str	r3, [r2, #8]
 80039f2:	e0b4      	b.n	8003b5e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	015a      	lsls	r2, r3, #5
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	4413      	add	r3, r2
 80039fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f003 0308 	and.w	r3, r3, #8
 8003a06:	2b08      	cmp	r3, #8
 8003a08:	d133      	bne.n	8003a72 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	015a      	lsls	r2, r3, #5
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	4413      	add	r3, r2
 8003a12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	0151      	lsls	r1, r2, #5
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	440a      	add	r2, r1
 8003a20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a24:	f043 0302 	orr.w	r3, r3, #2
 8003a28:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	212c      	movs	r1, #44	; 0x2c
 8003a30:	fb01 f303 	mul.w	r3, r1, r3
 8003a34:	4413      	add	r3, r2
 8003a36:	3361      	adds	r3, #97	; 0x61
 8003a38:	2205      	movs	r2, #5
 8003a3a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	015a      	lsls	r2, r3, #5
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	4413      	add	r3, r2
 8003a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a48:	461a      	mov	r2, r3
 8003a4a:	2310      	movs	r3, #16
 8003a4c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	015a      	lsls	r2, r3, #5
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	4413      	add	r3, r2
 8003a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	2308      	movs	r3, #8
 8003a5e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	b2d2      	uxtb	r2, r2
 8003a68:	4611      	mov	r1, r2
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f004 fae7 	bl	800803e <USB_HC_Halt>
 8003a70:	e075      	b.n	8003b5e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	015a      	lsls	r2, r3, #5
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	4413      	add	r3, r2
 8003a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a88:	d134      	bne.n	8003af4 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	015a      	lsls	r2, r3, #5
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	4413      	add	r3, r2
 8003a92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	0151      	lsls	r1, r2, #5
 8003a9c:	693a      	ldr	r2, [r7, #16]
 8003a9e:	440a      	add	r2, r1
 8003aa0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003aa4:	f043 0302 	orr.w	r3, r3, #2
 8003aa8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	212c      	movs	r1, #44	; 0x2c
 8003ab0:	fb01 f303 	mul.w	r3, r1, r3
 8003ab4:	4413      	add	r3, r2
 8003ab6:	3361      	adds	r3, #97	; 0x61
 8003ab8:	2208      	movs	r2, #8
 8003aba:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	015a      	lsls	r2, r3, #5
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ac8:	461a      	mov	r2, r3
 8003aca:	2310      	movs	r3, #16
 8003acc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	015a      	lsls	r2, r3, #5
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ada:	461a      	mov	r2, r3
 8003adc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ae0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	b2d2      	uxtb	r2, r2
 8003aea:	4611      	mov	r1, r2
 8003aec:	4618      	mov	r0, r3
 8003aee:	f004 faa6 	bl	800803e <USB_HC_Halt>
 8003af2:	e034      	b.n	8003b5e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	015a      	lsls	r2, r3, #5
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	4413      	add	r3, r2
 8003afc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b06:	2b80      	cmp	r3, #128	; 0x80
 8003b08:	d129      	bne.n	8003b5e <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	015a      	lsls	r2, r3, #5
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	4413      	add	r3, r2
 8003b12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	0151      	lsls	r1, r2, #5
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	440a      	add	r2, r1
 8003b20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b24:	f043 0302 	orr.w	r3, r3, #2
 8003b28:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	212c      	movs	r1, #44	; 0x2c
 8003b30:	fb01 f303 	mul.w	r3, r1, r3
 8003b34:	4413      	add	r3, r2
 8003b36:	3361      	adds	r3, #97	; 0x61
 8003b38:	2206      	movs	r2, #6
 8003b3a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	b2d2      	uxtb	r2, r2
 8003b44:	4611      	mov	r1, r2
 8003b46:	4618      	mov	r0, r3
 8003b48:	f004 fa79 	bl	800803e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	015a      	lsls	r2, r3, #5
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	4413      	add	r3, r2
 8003b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b58:	461a      	mov	r2, r3
 8003b5a:	2380      	movs	r3, #128	; 0x80
 8003b5c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	015a      	lsls	r2, r3, #5
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	4413      	add	r3, r2
 8003b66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b74:	d122      	bne.n	8003bbc <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	015a      	lsls	r2, r3, #5
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	4413      	add	r3, r2
 8003b7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	0151      	lsls	r1, r2, #5
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	440a      	add	r2, r1
 8003b8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b90:	f043 0302 	orr.w	r3, r3, #2
 8003b94:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	b2d2      	uxtb	r2, r2
 8003b9e:	4611      	mov	r1, r2
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f004 fa4c 	bl	800803e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	015a      	lsls	r2, r3, #5
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	4413      	add	r3, r2
 8003bae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003bb8:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003bba:	e2ba      	b.n	8004132 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	015a      	lsls	r2, r3, #5
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	f040 811b 	bne.w	8003e0a <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	691b      	ldr	r3, [r3, #16]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d019      	beq.n	8003c10 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	212c      	movs	r1, #44	; 0x2c
 8003be2:	fb01 f303 	mul.w	r3, r1, r3
 8003be6:	4413      	add	r3, r2
 8003be8:	3348      	adds	r3, #72	; 0x48
 8003bea:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	0159      	lsls	r1, r3, #5
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	440b      	add	r3, r1
 8003bf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003bfe:	1ad2      	subs	r2, r2, r3
 8003c00:	6879      	ldr	r1, [r7, #4]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	202c      	movs	r0, #44	; 0x2c
 8003c06:	fb00 f303 	mul.w	r3, r0, r3
 8003c0a:	440b      	add	r3, r1
 8003c0c:	3350      	adds	r3, #80	; 0x50
 8003c0e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	212c      	movs	r1, #44	; 0x2c
 8003c16:	fb01 f303 	mul.w	r3, r1, r3
 8003c1a:	4413      	add	r3, r2
 8003c1c:	3361      	adds	r3, #97	; 0x61
 8003c1e:	2201      	movs	r2, #1
 8003c20:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	212c      	movs	r1, #44	; 0x2c
 8003c28:	fb01 f303 	mul.w	r3, r1, r3
 8003c2c:	4413      	add	r3, r2
 8003c2e:	335c      	adds	r3, #92	; 0x5c
 8003c30:	2200      	movs	r2, #0
 8003c32:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	015a      	lsls	r2, r3, #5
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c40:	461a      	mov	r2, r3
 8003c42:	2301      	movs	r3, #1
 8003c44:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	212c      	movs	r1, #44	; 0x2c
 8003c4c:	fb01 f303 	mul.w	r3, r1, r3
 8003c50:	4413      	add	r3, r2
 8003c52:	333f      	adds	r3, #63	; 0x3f
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d009      	beq.n	8003c6e <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	212c      	movs	r1, #44	; 0x2c
 8003c60:	fb01 f303 	mul.w	r3, r1, r3
 8003c64:	4413      	add	r3, r2
 8003c66:	333f      	adds	r3, #63	; 0x3f
 8003c68:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d121      	bne.n	8003cb2 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	015a      	lsls	r2, r3, #5
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	4413      	add	r3, r2
 8003c76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	0151      	lsls	r1, r2, #5
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	440a      	add	r2, r1
 8003c84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c88:	f043 0302 	orr.w	r3, r3, #2
 8003c8c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	b2d2      	uxtb	r2, r2
 8003c96:	4611      	mov	r1, r2
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f004 f9d0 	bl	800803e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	015a      	lsls	r2, r3, #5
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003caa:	461a      	mov	r2, r3
 8003cac:	2310      	movs	r3, #16
 8003cae:	6093      	str	r3, [r2, #8]
 8003cb0:	e066      	b.n	8003d80 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	212c      	movs	r1, #44	; 0x2c
 8003cb8:	fb01 f303 	mul.w	r3, r1, r3
 8003cbc:	4413      	add	r3, r2
 8003cbe:	333f      	adds	r3, #63	; 0x3f
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	2b03      	cmp	r3, #3
 8003cc4:	d127      	bne.n	8003d16 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	015a      	lsls	r2, r3, #5
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	4413      	add	r3, r2
 8003cce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	0151      	lsls	r1, r2, #5
 8003cd8:	693a      	ldr	r2, [r7, #16]
 8003cda:	440a      	add	r2, r1
 8003cdc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ce0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ce4:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	212c      	movs	r1, #44	; 0x2c
 8003cec:	fb01 f303 	mul.w	r3, r1, r3
 8003cf0:	4413      	add	r3, r2
 8003cf2:	3360      	adds	r3, #96	; 0x60
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	b2d9      	uxtb	r1, r3
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	202c      	movs	r0, #44	; 0x2c
 8003d02:	fb00 f303 	mul.w	r3, r0, r3
 8003d06:	4413      	add	r3, r2
 8003d08:	3360      	adds	r3, #96	; 0x60
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f007 fcc0 	bl	800b694 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003d14:	e034      	b.n	8003d80 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	212c      	movs	r1, #44	; 0x2c
 8003d1c:	fb01 f303 	mul.w	r3, r1, r3
 8003d20:	4413      	add	r3, r2
 8003d22:	333f      	adds	r3, #63	; 0x3f
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d12a      	bne.n	8003d80 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	212c      	movs	r1, #44	; 0x2c
 8003d30:	fb01 f303 	mul.w	r3, r1, r3
 8003d34:	4413      	add	r3, r2
 8003d36:	3360      	adds	r3, #96	; 0x60
 8003d38:	2201      	movs	r2, #1
 8003d3a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	212c      	movs	r1, #44	; 0x2c
 8003d42:	fb01 f303 	mul.w	r3, r1, r3
 8003d46:	4413      	add	r3, r2
 8003d48:	3354      	adds	r3, #84	; 0x54
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	f083 0301 	eor.w	r3, r3, #1
 8003d50:	b2d8      	uxtb	r0, r3
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	212c      	movs	r1, #44	; 0x2c
 8003d58:	fb01 f303 	mul.w	r3, r1, r3
 8003d5c:	4413      	add	r3, r2
 8003d5e:	3354      	adds	r3, #84	; 0x54
 8003d60:	4602      	mov	r2, r0
 8003d62:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	b2d9      	uxtb	r1, r3
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	202c      	movs	r0, #44	; 0x2c
 8003d6e:	fb00 f303 	mul.w	r3, r0, r3
 8003d72:	4413      	add	r3, r2
 8003d74:	3360      	adds	r3, #96	; 0x60
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	461a      	mov	r2, r3
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f007 fc8a 	bl	800b694 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d12b      	bne.n	8003de0 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	212c      	movs	r1, #44	; 0x2c
 8003d8e:	fb01 f303 	mul.w	r3, r1, r3
 8003d92:	4413      	add	r3, r2
 8003d94:	3348      	adds	r3, #72	; 0x48
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	6879      	ldr	r1, [r7, #4]
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	202c      	movs	r0, #44	; 0x2c
 8003d9e:	fb00 f202 	mul.w	r2, r0, r2
 8003da2:	440a      	add	r2, r1
 8003da4:	3240      	adds	r2, #64	; 0x40
 8003da6:	8812      	ldrh	r2, [r2, #0]
 8003da8:	fbb3 f3f2 	udiv	r3, r3, r2
 8003dac:	f003 0301 	and.w	r3, r3, #1
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f000 81be 	beq.w	8004132 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	212c      	movs	r1, #44	; 0x2c
 8003dbc:	fb01 f303 	mul.w	r3, r1, r3
 8003dc0:	4413      	add	r3, r2
 8003dc2:	3354      	adds	r3, #84	; 0x54
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	f083 0301 	eor.w	r3, r3, #1
 8003dca:	b2d8      	uxtb	r0, r3
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	212c      	movs	r1, #44	; 0x2c
 8003dd2:	fb01 f303 	mul.w	r3, r1, r3
 8003dd6:	4413      	add	r3, r2
 8003dd8:	3354      	adds	r3, #84	; 0x54
 8003dda:	4602      	mov	r2, r0
 8003ddc:	701a      	strb	r2, [r3, #0]
}
 8003dde:	e1a8      	b.n	8004132 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	212c      	movs	r1, #44	; 0x2c
 8003de6:	fb01 f303 	mul.w	r3, r1, r3
 8003dea:	4413      	add	r3, r2
 8003dec:	3354      	adds	r3, #84	; 0x54
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	f083 0301 	eor.w	r3, r3, #1
 8003df4:	b2d8      	uxtb	r0, r3
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	212c      	movs	r1, #44	; 0x2c
 8003dfc:	fb01 f303 	mul.w	r3, r1, r3
 8003e00:	4413      	add	r3, r2
 8003e02:	3354      	adds	r3, #84	; 0x54
 8003e04:	4602      	mov	r2, r0
 8003e06:	701a      	strb	r2, [r3, #0]
}
 8003e08:	e193      	b.n	8004132 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	015a      	lsls	r2, r3, #5
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	4413      	add	r3, r2
 8003e12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	f040 8106 	bne.w	800402e <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	015a      	lsls	r2, r3, #5
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	4413      	add	r3, r2
 8003e2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	0151      	lsls	r1, r2, #5
 8003e34:	693a      	ldr	r2, [r7, #16]
 8003e36:	440a      	add	r2, r1
 8003e38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e3c:	f023 0302 	bic.w	r3, r3, #2
 8003e40:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	212c      	movs	r1, #44	; 0x2c
 8003e48:	fb01 f303 	mul.w	r3, r1, r3
 8003e4c:	4413      	add	r3, r2
 8003e4e:	3361      	adds	r3, #97	; 0x61
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d109      	bne.n	8003e6a <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	212c      	movs	r1, #44	; 0x2c
 8003e5c:	fb01 f303 	mul.w	r3, r1, r3
 8003e60:	4413      	add	r3, r2
 8003e62:	3360      	adds	r3, #96	; 0x60
 8003e64:	2201      	movs	r2, #1
 8003e66:	701a      	strb	r2, [r3, #0]
 8003e68:	e0c9      	b.n	8003ffe <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	212c      	movs	r1, #44	; 0x2c
 8003e70:	fb01 f303 	mul.w	r3, r1, r3
 8003e74:	4413      	add	r3, r2
 8003e76:	3361      	adds	r3, #97	; 0x61
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	2b05      	cmp	r3, #5
 8003e7c:	d109      	bne.n	8003e92 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	212c      	movs	r1, #44	; 0x2c
 8003e84:	fb01 f303 	mul.w	r3, r1, r3
 8003e88:	4413      	add	r3, r2
 8003e8a:	3360      	adds	r3, #96	; 0x60
 8003e8c:	2205      	movs	r2, #5
 8003e8e:	701a      	strb	r2, [r3, #0]
 8003e90:	e0b5      	b.n	8003ffe <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	212c      	movs	r1, #44	; 0x2c
 8003e98:	fb01 f303 	mul.w	r3, r1, r3
 8003e9c:	4413      	add	r3, r2
 8003e9e:	3361      	adds	r3, #97	; 0x61
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	2b06      	cmp	r3, #6
 8003ea4:	d009      	beq.n	8003eba <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	212c      	movs	r1, #44	; 0x2c
 8003eac:	fb01 f303 	mul.w	r3, r1, r3
 8003eb0:	4413      	add	r3, r2
 8003eb2:	3361      	adds	r3, #97	; 0x61
 8003eb4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003eb6:	2b08      	cmp	r3, #8
 8003eb8:	d150      	bne.n	8003f5c <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	212c      	movs	r1, #44	; 0x2c
 8003ec0:	fb01 f303 	mul.w	r3, r1, r3
 8003ec4:	4413      	add	r3, r2
 8003ec6:	335c      	adds	r3, #92	; 0x5c
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	1c5a      	adds	r2, r3, #1
 8003ecc:	6879      	ldr	r1, [r7, #4]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	202c      	movs	r0, #44	; 0x2c
 8003ed2:	fb00 f303 	mul.w	r3, r0, r3
 8003ed6:	440b      	add	r3, r1
 8003ed8:	335c      	adds	r3, #92	; 0x5c
 8003eda:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	212c      	movs	r1, #44	; 0x2c
 8003ee2:	fb01 f303 	mul.w	r3, r1, r3
 8003ee6:	4413      	add	r3, r2
 8003ee8:	335c      	adds	r3, #92	; 0x5c
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d912      	bls.n	8003f16 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	212c      	movs	r1, #44	; 0x2c
 8003ef6:	fb01 f303 	mul.w	r3, r1, r3
 8003efa:	4413      	add	r3, r2
 8003efc:	335c      	adds	r3, #92	; 0x5c
 8003efe:	2200      	movs	r2, #0
 8003f00:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	212c      	movs	r1, #44	; 0x2c
 8003f08:	fb01 f303 	mul.w	r3, r1, r3
 8003f0c:	4413      	add	r3, r2
 8003f0e:	3360      	adds	r3, #96	; 0x60
 8003f10:	2204      	movs	r2, #4
 8003f12:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003f14:	e073      	b.n	8003ffe <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	212c      	movs	r1, #44	; 0x2c
 8003f1c:	fb01 f303 	mul.w	r3, r1, r3
 8003f20:	4413      	add	r3, r2
 8003f22:	3360      	adds	r3, #96	; 0x60
 8003f24:	2202      	movs	r2, #2
 8003f26:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	015a      	lsls	r2, r3, #5
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	4413      	add	r3, r2
 8003f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f3e:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f46:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	015a      	lsls	r2, r3, #5
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	4413      	add	r3, r2
 8003f50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f54:	461a      	mov	r2, r3
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003f5a:	e050      	b.n	8003ffe <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	212c      	movs	r1, #44	; 0x2c
 8003f62:	fb01 f303 	mul.w	r3, r1, r3
 8003f66:	4413      	add	r3, r2
 8003f68:	3361      	adds	r3, #97	; 0x61
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	2b03      	cmp	r3, #3
 8003f6e:	d122      	bne.n	8003fb6 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	212c      	movs	r1, #44	; 0x2c
 8003f76:	fb01 f303 	mul.w	r3, r1, r3
 8003f7a:	4413      	add	r3, r2
 8003f7c:	3360      	adds	r3, #96	; 0x60
 8003f7e:	2202      	movs	r2, #2
 8003f80:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	015a      	lsls	r2, r3, #5
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	4413      	add	r3, r2
 8003f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f98:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003fa0:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	015a      	lsls	r2, r3, #5
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	4413      	add	r3, r2
 8003faa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fae:	461a      	mov	r2, r3
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	6013      	str	r3, [r2, #0]
 8003fb4:	e023      	b.n	8003ffe <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	212c      	movs	r1, #44	; 0x2c
 8003fbc:	fb01 f303 	mul.w	r3, r1, r3
 8003fc0:	4413      	add	r3, r2
 8003fc2:	3361      	adds	r3, #97	; 0x61
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	2b07      	cmp	r3, #7
 8003fc8:	d119      	bne.n	8003ffe <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	212c      	movs	r1, #44	; 0x2c
 8003fd0:	fb01 f303 	mul.w	r3, r1, r3
 8003fd4:	4413      	add	r3, r2
 8003fd6:	335c      	adds	r3, #92	; 0x5c
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	1c5a      	adds	r2, r3, #1
 8003fdc:	6879      	ldr	r1, [r7, #4]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	202c      	movs	r0, #44	; 0x2c
 8003fe2:	fb00 f303 	mul.w	r3, r0, r3
 8003fe6:	440b      	add	r3, r1
 8003fe8:	335c      	adds	r3, #92	; 0x5c
 8003fea:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	212c      	movs	r1, #44	; 0x2c
 8003ff2:	fb01 f303 	mul.w	r3, r1, r3
 8003ff6:	4413      	add	r3, r2
 8003ff8:	3360      	adds	r3, #96	; 0x60
 8003ffa:	2204      	movs	r2, #4
 8003ffc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	015a      	lsls	r2, r3, #5
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	4413      	add	r3, r2
 8004006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800400a:	461a      	mov	r2, r3
 800400c:	2302      	movs	r3, #2
 800400e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	b2d9      	uxtb	r1, r3
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	202c      	movs	r0, #44	; 0x2c
 800401a:	fb00 f303 	mul.w	r3, r0, r3
 800401e:	4413      	add	r3, r2
 8004020:	3360      	adds	r3, #96	; 0x60
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	461a      	mov	r2, r3
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f007 fb34 	bl	800b694 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800402c:	e081      	b.n	8004132 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	015a      	lsls	r2, r3, #5
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	4413      	add	r3, r2
 8004036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f003 0310 	and.w	r3, r3, #16
 8004040:	2b10      	cmp	r3, #16
 8004042:	d176      	bne.n	8004132 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	212c      	movs	r1, #44	; 0x2c
 800404a:	fb01 f303 	mul.w	r3, r1, r3
 800404e:	4413      	add	r3, r2
 8004050:	333f      	adds	r3, #63	; 0x3f
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	2b03      	cmp	r3, #3
 8004056:	d121      	bne.n	800409c <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	212c      	movs	r1, #44	; 0x2c
 800405e:	fb01 f303 	mul.w	r3, r1, r3
 8004062:	4413      	add	r3, r2
 8004064:	335c      	adds	r3, #92	; 0x5c
 8004066:	2200      	movs	r2, #0
 8004068:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	015a      	lsls	r2, r3, #5
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	4413      	add	r3, r2
 8004072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	68fa      	ldr	r2, [r7, #12]
 800407a:	0151      	lsls	r1, r2, #5
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	440a      	add	r2, r1
 8004080:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004084:	f043 0302 	orr.w	r3, r3, #2
 8004088:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	b2d2      	uxtb	r2, r2
 8004092:	4611      	mov	r1, r2
 8004094:	4618      	mov	r0, r3
 8004096:	f003 ffd2 	bl	800803e <USB_HC_Halt>
 800409a:	e041      	b.n	8004120 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	212c      	movs	r1, #44	; 0x2c
 80040a2:	fb01 f303 	mul.w	r3, r1, r3
 80040a6:	4413      	add	r3, r2
 80040a8:	333f      	adds	r3, #63	; 0x3f
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d009      	beq.n	80040c4 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	212c      	movs	r1, #44	; 0x2c
 80040b6:	fb01 f303 	mul.w	r3, r1, r3
 80040ba:	4413      	add	r3, r2
 80040bc:	333f      	adds	r3, #63	; 0x3f
 80040be:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d12d      	bne.n	8004120 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	212c      	movs	r1, #44	; 0x2c
 80040ca:	fb01 f303 	mul.w	r3, r1, r3
 80040ce:	4413      	add	r3, r2
 80040d0:	335c      	adds	r3, #92	; 0x5c
 80040d2:	2200      	movs	r2, #0
 80040d4:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d120      	bne.n	8004120 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	212c      	movs	r1, #44	; 0x2c
 80040e4:	fb01 f303 	mul.w	r3, r1, r3
 80040e8:	4413      	add	r3, r2
 80040ea:	3361      	adds	r3, #97	; 0x61
 80040ec:	2203      	movs	r2, #3
 80040ee:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	015a      	lsls	r2, r3, #5
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	4413      	add	r3, r2
 80040f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	0151      	lsls	r1, r2, #5
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	440a      	add	r2, r1
 8004106:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800410a:	f043 0302 	orr.w	r3, r3, #2
 800410e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	b2d2      	uxtb	r2, r2
 8004118:	4611      	mov	r1, r2
 800411a:	4618      	mov	r0, r3
 800411c:	f003 ff8f 	bl	800803e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	015a      	lsls	r2, r3, #5
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	4413      	add	r3, r2
 8004128:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800412c:	461a      	mov	r2, r3
 800412e:	2310      	movs	r3, #16
 8004130:	6093      	str	r3, [r2, #8]
}
 8004132:	bf00      	nop
 8004134:	3718      	adds	r7, #24
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}

0800413a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800413a:	b580      	push	{r7, lr}
 800413c:	b088      	sub	sp, #32
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
 8004142:	460b      	mov	r3, r1
 8004144:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004150:	78fb      	ldrb	r3, [r7, #3]
 8004152:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	015a      	lsls	r2, r3, #5
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	4413      	add	r3, r2
 800415c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f003 0304 	and.w	r3, r3, #4
 8004166:	2b04      	cmp	r3, #4
 8004168:	d119      	bne.n	800419e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	015a      	lsls	r2, r3, #5
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	4413      	add	r3, r2
 8004172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004176:	461a      	mov	r2, r3
 8004178:	2304      	movs	r3, #4
 800417a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	015a      	lsls	r2, r3, #5
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	4413      	add	r3, r2
 8004184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	0151      	lsls	r1, r2, #5
 800418e:	69ba      	ldr	r2, [r7, #24]
 8004190:	440a      	add	r2, r1
 8004192:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004196:	f043 0302 	orr.w	r3, r3, #2
 800419a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800419c:	e3ca      	b.n	8004934 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	015a      	lsls	r2, r3, #5
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	4413      	add	r3, r2
 80041a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f003 0320 	and.w	r3, r3, #32
 80041b0:	2b20      	cmp	r3, #32
 80041b2:	d13e      	bne.n	8004232 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	015a      	lsls	r2, r3, #5
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	4413      	add	r3, r2
 80041bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041c0:	461a      	mov	r2, r3
 80041c2:	2320      	movs	r3, #32
 80041c4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	212c      	movs	r1, #44	; 0x2c
 80041cc:	fb01 f303 	mul.w	r3, r1, r3
 80041d0:	4413      	add	r3, r2
 80041d2:	333d      	adds	r3, #61	; 0x3d
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	f040 83ac 	bne.w	8004934 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	212c      	movs	r1, #44	; 0x2c
 80041e2:	fb01 f303 	mul.w	r3, r1, r3
 80041e6:	4413      	add	r3, r2
 80041e8:	333d      	adds	r3, #61	; 0x3d
 80041ea:	2200      	movs	r2, #0
 80041ec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	212c      	movs	r1, #44	; 0x2c
 80041f4:	fb01 f303 	mul.w	r3, r1, r3
 80041f8:	4413      	add	r3, r2
 80041fa:	3360      	adds	r3, #96	; 0x60
 80041fc:	2202      	movs	r2, #2
 80041fe:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	015a      	lsls	r2, r3, #5
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	4413      	add	r3, r2
 8004208:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	0151      	lsls	r1, r2, #5
 8004212:	69ba      	ldr	r2, [r7, #24]
 8004214:	440a      	add	r2, r1
 8004216:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800421a:	f043 0302 	orr.w	r3, r3, #2
 800421e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	b2d2      	uxtb	r2, r2
 8004228:	4611      	mov	r1, r2
 800422a:	4618      	mov	r0, r3
 800422c:	f003 ff07 	bl	800803e <USB_HC_Halt>
}
 8004230:	e380      	b.n	8004934 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	015a      	lsls	r2, r3, #5
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	4413      	add	r3, r2
 800423a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004244:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004248:	d122      	bne.n	8004290 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	015a      	lsls	r2, r3, #5
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	4413      	add	r3, r2
 8004252:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	0151      	lsls	r1, r2, #5
 800425c:	69ba      	ldr	r2, [r7, #24]
 800425e:	440a      	add	r2, r1
 8004260:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004264:	f043 0302 	orr.w	r3, r3, #2
 8004268:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	697a      	ldr	r2, [r7, #20]
 8004270:	b2d2      	uxtb	r2, r2
 8004272:	4611      	mov	r1, r2
 8004274:	4618      	mov	r0, r3
 8004276:	f003 fee2 	bl	800803e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	015a      	lsls	r2, r3, #5
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	4413      	add	r3, r2
 8004282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004286:	461a      	mov	r2, r3
 8004288:	f44f 7300 	mov.w	r3, #512	; 0x200
 800428c:	6093      	str	r3, [r2, #8]
}
 800428e:	e351      	b.n	8004934 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	015a      	lsls	r2, r3, #5
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	4413      	add	r3, r2
 8004298:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d150      	bne.n	8004348 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	212c      	movs	r1, #44	; 0x2c
 80042ac:	fb01 f303 	mul.w	r3, r1, r3
 80042b0:	4413      	add	r3, r2
 80042b2:	335c      	adds	r3, #92	; 0x5c
 80042b4:	2200      	movs	r2, #0
 80042b6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	015a      	lsls	r2, r3, #5
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	4413      	add	r3, r2
 80042c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ca:	2b40      	cmp	r3, #64	; 0x40
 80042cc:	d111      	bne.n	80042f2 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	212c      	movs	r1, #44	; 0x2c
 80042d4:	fb01 f303 	mul.w	r3, r1, r3
 80042d8:	4413      	add	r3, r2
 80042da:	333d      	adds	r3, #61	; 0x3d
 80042dc:	2201      	movs	r2, #1
 80042de:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	015a      	lsls	r2, r3, #5
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	4413      	add	r3, r2
 80042e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ec:	461a      	mov	r2, r3
 80042ee:	2340      	movs	r3, #64	; 0x40
 80042f0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	015a      	lsls	r2, r3, #5
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	4413      	add	r3, r2
 80042fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	697a      	ldr	r2, [r7, #20]
 8004302:	0151      	lsls	r1, r2, #5
 8004304:	69ba      	ldr	r2, [r7, #24]
 8004306:	440a      	add	r2, r1
 8004308:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800430c:	f043 0302 	orr.w	r3, r3, #2
 8004310:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	697a      	ldr	r2, [r7, #20]
 8004318:	b2d2      	uxtb	r2, r2
 800431a:	4611      	mov	r1, r2
 800431c:	4618      	mov	r0, r3
 800431e:	f003 fe8e 	bl	800803e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	015a      	lsls	r2, r3, #5
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	4413      	add	r3, r2
 800432a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800432e:	461a      	mov	r2, r3
 8004330:	2301      	movs	r3, #1
 8004332:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	212c      	movs	r1, #44	; 0x2c
 800433a:	fb01 f303 	mul.w	r3, r1, r3
 800433e:	4413      	add	r3, r2
 8004340:	3361      	adds	r3, #97	; 0x61
 8004342:	2201      	movs	r2, #1
 8004344:	701a      	strb	r2, [r3, #0]
}
 8004346:	e2f5      	b.n	8004934 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	015a      	lsls	r2, r3, #5
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	4413      	add	r3, r2
 8004350:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800435a:	2b40      	cmp	r3, #64	; 0x40
 800435c:	d13c      	bne.n	80043d8 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	212c      	movs	r1, #44	; 0x2c
 8004364:	fb01 f303 	mul.w	r3, r1, r3
 8004368:	4413      	add	r3, r2
 800436a:	3361      	adds	r3, #97	; 0x61
 800436c:	2204      	movs	r2, #4
 800436e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	212c      	movs	r1, #44	; 0x2c
 8004376:	fb01 f303 	mul.w	r3, r1, r3
 800437a:	4413      	add	r3, r2
 800437c:	333d      	adds	r3, #61	; 0x3d
 800437e:	2201      	movs	r2, #1
 8004380:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	212c      	movs	r1, #44	; 0x2c
 8004388:	fb01 f303 	mul.w	r3, r1, r3
 800438c:	4413      	add	r3, r2
 800438e:	335c      	adds	r3, #92	; 0x5c
 8004390:	2200      	movs	r2, #0
 8004392:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	015a      	lsls	r2, r3, #5
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	4413      	add	r3, r2
 800439c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	697a      	ldr	r2, [r7, #20]
 80043a4:	0151      	lsls	r1, r2, #5
 80043a6:	69ba      	ldr	r2, [r7, #24]
 80043a8:	440a      	add	r2, r1
 80043aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043ae:	f043 0302 	orr.w	r3, r3, #2
 80043b2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	697a      	ldr	r2, [r7, #20]
 80043ba:	b2d2      	uxtb	r2, r2
 80043bc:	4611      	mov	r1, r2
 80043be:	4618      	mov	r0, r3
 80043c0:	f003 fe3d 	bl	800803e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	015a      	lsls	r2, r3, #5
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	4413      	add	r3, r2
 80043cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043d0:	461a      	mov	r2, r3
 80043d2:	2340      	movs	r3, #64	; 0x40
 80043d4:	6093      	str	r3, [r2, #8]
}
 80043d6:	e2ad      	b.n	8004934 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	015a      	lsls	r2, r3, #5
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	4413      	add	r3, r2
 80043e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f003 0308 	and.w	r3, r3, #8
 80043ea:	2b08      	cmp	r3, #8
 80043ec:	d12a      	bne.n	8004444 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	015a      	lsls	r2, r3, #5
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	4413      	add	r3, r2
 80043f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043fa:	461a      	mov	r2, r3
 80043fc:	2308      	movs	r3, #8
 80043fe:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	015a      	lsls	r2, r3, #5
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	4413      	add	r3, r2
 8004408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	0151      	lsls	r1, r2, #5
 8004412:	69ba      	ldr	r2, [r7, #24]
 8004414:	440a      	add	r2, r1
 8004416:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800441a:	f043 0302 	orr.w	r3, r3, #2
 800441e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	697a      	ldr	r2, [r7, #20]
 8004426:	b2d2      	uxtb	r2, r2
 8004428:	4611      	mov	r1, r2
 800442a:	4618      	mov	r0, r3
 800442c:	f003 fe07 	bl	800803e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	212c      	movs	r1, #44	; 0x2c
 8004436:	fb01 f303 	mul.w	r3, r1, r3
 800443a:	4413      	add	r3, r2
 800443c:	3361      	adds	r3, #97	; 0x61
 800443e:	2205      	movs	r2, #5
 8004440:	701a      	strb	r2, [r3, #0]
}
 8004442:	e277      	b.n	8004934 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	015a      	lsls	r2, r3, #5
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	4413      	add	r3, r2
 800444c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f003 0310 	and.w	r3, r3, #16
 8004456:	2b10      	cmp	r3, #16
 8004458:	d150      	bne.n	80044fc <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	212c      	movs	r1, #44	; 0x2c
 8004460:	fb01 f303 	mul.w	r3, r1, r3
 8004464:	4413      	add	r3, r2
 8004466:	335c      	adds	r3, #92	; 0x5c
 8004468:	2200      	movs	r2, #0
 800446a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	212c      	movs	r1, #44	; 0x2c
 8004472:	fb01 f303 	mul.w	r3, r1, r3
 8004476:	4413      	add	r3, r2
 8004478:	3361      	adds	r3, #97	; 0x61
 800447a:	2203      	movs	r2, #3
 800447c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	212c      	movs	r1, #44	; 0x2c
 8004484:	fb01 f303 	mul.w	r3, r1, r3
 8004488:	4413      	add	r3, r2
 800448a:	333d      	adds	r3, #61	; 0x3d
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d112      	bne.n	80044b8 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	212c      	movs	r1, #44	; 0x2c
 8004498:	fb01 f303 	mul.w	r3, r1, r3
 800449c:	4413      	add	r3, r2
 800449e:	333c      	adds	r3, #60	; 0x3c
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d108      	bne.n	80044b8 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	212c      	movs	r1, #44	; 0x2c
 80044ac:	fb01 f303 	mul.w	r3, r1, r3
 80044b0:	4413      	add	r3, r2
 80044b2:	333d      	adds	r3, #61	; 0x3d
 80044b4:	2201      	movs	r2, #1
 80044b6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	015a      	lsls	r2, r3, #5
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	4413      	add	r3, r2
 80044c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	0151      	lsls	r1, r2, #5
 80044ca:	69ba      	ldr	r2, [r7, #24]
 80044cc:	440a      	add	r2, r1
 80044ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80044d2:	f043 0302 	orr.w	r3, r3, #2
 80044d6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	b2d2      	uxtb	r2, r2
 80044e0:	4611      	mov	r1, r2
 80044e2:	4618      	mov	r0, r3
 80044e4:	f003 fdab 	bl	800803e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	015a      	lsls	r2, r3, #5
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	4413      	add	r3, r2
 80044f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044f4:	461a      	mov	r2, r3
 80044f6:	2310      	movs	r3, #16
 80044f8:	6093      	str	r3, [r2, #8]
}
 80044fa:	e21b      	b.n	8004934 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	015a      	lsls	r2, r3, #5
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	4413      	add	r3, r2
 8004504:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800450e:	2b80      	cmp	r3, #128	; 0x80
 8004510:	d174      	bne.n	80045fc <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d121      	bne.n	800455e <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	212c      	movs	r1, #44	; 0x2c
 8004520:	fb01 f303 	mul.w	r3, r1, r3
 8004524:	4413      	add	r3, r2
 8004526:	3361      	adds	r3, #97	; 0x61
 8004528:	2206      	movs	r2, #6
 800452a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	015a      	lsls	r2, r3, #5
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	4413      	add	r3, r2
 8004534:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	697a      	ldr	r2, [r7, #20]
 800453c:	0151      	lsls	r1, r2, #5
 800453e:	69ba      	ldr	r2, [r7, #24]
 8004540:	440a      	add	r2, r1
 8004542:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004546:	f043 0302 	orr.w	r3, r3, #2
 800454a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	697a      	ldr	r2, [r7, #20]
 8004552:	b2d2      	uxtb	r2, r2
 8004554:	4611      	mov	r1, r2
 8004556:	4618      	mov	r0, r3
 8004558:	f003 fd71 	bl	800803e <USB_HC_Halt>
 800455c:	e044      	b.n	80045e8 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	212c      	movs	r1, #44	; 0x2c
 8004564:	fb01 f303 	mul.w	r3, r1, r3
 8004568:	4413      	add	r3, r2
 800456a:	335c      	adds	r3, #92	; 0x5c
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	1c5a      	adds	r2, r3, #1
 8004570:	6879      	ldr	r1, [r7, #4]
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	202c      	movs	r0, #44	; 0x2c
 8004576:	fb00 f303 	mul.w	r3, r0, r3
 800457a:	440b      	add	r3, r1
 800457c:	335c      	adds	r3, #92	; 0x5c
 800457e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	212c      	movs	r1, #44	; 0x2c
 8004586:	fb01 f303 	mul.w	r3, r1, r3
 800458a:	4413      	add	r3, r2
 800458c:	335c      	adds	r3, #92	; 0x5c
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2b02      	cmp	r3, #2
 8004592:	d920      	bls.n	80045d6 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	212c      	movs	r1, #44	; 0x2c
 800459a:	fb01 f303 	mul.w	r3, r1, r3
 800459e:	4413      	add	r3, r2
 80045a0:	335c      	adds	r3, #92	; 0x5c
 80045a2:	2200      	movs	r2, #0
 80045a4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	212c      	movs	r1, #44	; 0x2c
 80045ac:	fb01 f303 	mul.w	r3, r1, r3
 80045b0:	4413      	add	r3, r2
 80045b2:	3360      	adds	r3, #96	; 0x60
 80045b4:	2204      	movs	r2, #4
 80045b6:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	b2d9      	uxtb	r1, r3
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	202c      	movs	r0, #44	; 0x2c
 80045c2:	fb00 f303 	mul.w	r3, r0, r3
 80045c6:	4413      	add	r3, r2
 80045c8:	3360      	adds	r3, #96	; 0x60
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	461a      	mov	r2, r3
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f007 f860 	bl	800b694 <HAL_HCD_HC_NotifyURBChange_Callback>
 80045d4:	e008      	b.n	80045e8 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	212c      	movs	r1, #44	; 0x2c
 80045dc:	fb01 f303 	mul.w	r3, r1, r3
 80045e0:	4413      	add	r3, r2
 80045e2:	3360      	adds	r3, #96	; 0x60
 80045e4:	2202      	movs	r2, #2
 80045e6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	015a      	lsls	r2, r3, #5
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	4413      	add	r3, r2
 80045f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045f4:	461a      	mov	r2, r3
 80045f6:	2380      	movs	r3, #128	; 0x80
 80045f8:	6093      	str	r3, [r2, #8]
}
 80045fa:	e19b      	b.n	8004934 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	015a      	lsls	r2, r3, #5
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	4413      	add	r3, r2
 8004604:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800460e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004612:	d134      	bne.n	800467e <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	015a      	lsls	r2, r3, #5
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	4413      	add	r3, r2
 800461c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	697a      	ldr	r2, [r7, #20]
 8004624:	0151      	lsls	r1, r2, #5
 8004626:	69ba      	ldr	r2, [r7, #24]
 8004628:	440a      	add	r2, r1
 800462a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800462e:	f043 0302 	orr.w	r3, r3, #2
 8004632:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	697a      	ldr	r2, [r7, #20]
 800463a:	b2d2      	uxtb	r2, r2
 800463c:	4611      	mov	r1, r2
 800463e:	4618      	mov	r0, r3
 8004640:	f003 fcfd 	bl	800803e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	015a      	lsls	r2, r3, #5
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	4413      	add	r3, r2
 800464c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004650:	461a      	mov	r2, r3
 8004652:	2310      	movs	r3, #16
 8004654:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	015a      	lsls	r2, r3, #5
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	4413      	add	r3, r2
 800465e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004662:	461a      	mov	r2, r3
 8004664:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004668:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	212c      	movs	r1, #44	; 0x2c
 8004670:	fb01 f303 	mul.w	r3, r1, r3
 8004674:	4413      	add	r3, r2
 8004676:	3361      	adds	r3, #97	; 0x61
 8004678:	2208      	movs	r2, #8
 800467a:	701a      	strb	r2, [r3, #0]
}
 800467c:	e15a      	b.n	8004934 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	015a      	lsls	r2, r3, #5
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	4413      	add	r3, r2
 8004686:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f003 0302 	and.w	r3, r3, #2
 8004690:	2b02      	cmp	r3, #2
 8004692:	f040 814f 	bne.w	8004934 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	015a      	lsls	r2, r3, #5
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	4413      	add	r3, r2
 800469e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	697a      	ldr	r2, [r7, #20]
 80046a6:	0151      	lsls	r1, r2, #5
 80046a8:	69ba      	ldr	r2, [r7, #24]
 80046aa:	440a      	add	r2, r1
 80046ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046b0:	f023 0302 	bic.w	r3, r3, #2
 80046b4:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	212c      	movs	r1, #44	; 0x2c
 80046bc:	fb01 f303 	mul.w	r3, r1, r3
 80046c0:	4413      	add	r3, r2
 80046c2:	3361      	adds	r3, #97	; 0x61
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d17d      	bne.n	80047c6 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	212c      	movs	r1, #44	; 0x2c
 80046d0:	fb01 f303 	mul.w	r3, r1, r3
 80046d4:	4413      	add	r3, r2
 80046d6:	3360      	adds	r3, #96	; 0x60
 80046d8:	2201      	movs	r2, #1
 80046da:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	212c      	movs	r1, #44	; 0x2c
 80046e2:	fb01 f303 	mul.w	r3, r1, r3
 80046e6:	4413      	add	r3, r2
 80046e8:	333f      	adds	r3, #63	; 0x3f
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d00a      	beq.n	8004706 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	212c      	movs	r1, #44	; 0x2c
 80046f6:	fb01 f303 	mul.w	r3, r1, r3
 80046fa:	4413      	add	r3, r2
 80046fc:	333f      	adds	r3, #63	; 0x3f
 80046fe:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004700:	2b03      	cmp	r3, #3
 8004702:	f040 8100 	bne.w	8004906 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d113      	bne.n	8004736 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	212c      	movs	r1, #44	; 0x2c
 8004714:	fb01 f303 	mul.w	r3, r1, r3
 8004718:	4413      	add	r3, r2
 800471a:	3355      	adds	r3, #85	; 0x55
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	f083 0301 	eor.w	r3, r3, #1
 8004722:	b2d8      	uxtb	r0, r3
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	212c      	movs	r1, #44	; 0x2c
 800472a:	fb01 f303 	mul.w	r3, r1, r3
 800472e:	4413      	add	r3, r2
 8004730:	3355      	adds	r3, #85	; 0x55
 8004732:	4602      	mov	r2, r0
 8004734:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	2b01      	cmp	r3, #1
 800473c:	f040 80e3 	bne.w	8004906 <HCD_HC_OUT_IRQHandler+0x7cc>
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	212c      	movs	r1, #44	; 0x2c
 8004746:	fb01 f303 	mul.w	r3, r1, r3
 800474a:	4413      	add	r3, r2
 800474c:	334c      	adds	r3, #76	; 0x4c
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2b00      	cmp	r3, #0
 8004752:	f000 80d8 	beq.w	8004906 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	212c      	movs	r1, #44	; 0x2c
 800475c:	fb01 f303 	mul.w	r3, r1, r3
 8004760:	4413      	add	r3, r2
 8004762:	334c      	adds	r3, #76	; 0x4c
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	6879      	ldr	r1, [r7, #4]
 8004768:	697a      	ldr	r2, [r7, #20]
 800476a:	202c      	movs	r0, #44	; 0x2c
 800476c:	fb00 f202 	mul.w	r2, r0, r2
 8004770:	440a      	add	r2, r1
 8004772:	3240      	adds	r2, #64	; 0x40
 8004774:	8812      	ldrh	r2, [r2, #0]
 8004776:	4413      	add	r3, r2
 8004778:	3b01      	subs	r3, #1
 800477a:	6879      	ldr	r1, [r7, #4]
 800477c:	697a      	ldr	r2, [r7, #20]
 800477e:	202c      	movs	r0, #44	; 0x2c
 8004780:	fb00 f202 	mul.w	r2, r0, r2
 8004784:	440a      	add	r2, r1
 8004786:	3240      	adds	r2, #64	; 0x40
 8004788:	8812      	ldrh	r2, [r2, #0]
 800478a:	fbb3 f3f2 	udiv	r3, r3, r2
 800478e:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	2b00      	cmp	r3, #0
 8004798:	f000 80b5 	beq.w	8004906 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	212c      	movs	r1, #44	; 0x2c
 80047a2:	fb01 f303 	mul.w	r3, r1, r3
 80047a6:	4413      	add	r3, r2
 80047a8:	3355      	adds	r3, #85	; 0x55
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	f083 0301 	eor.w	r3, r3, #1
 80047b0:	b2d8      	uxtb	r0, r3
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	212c      	movs	r1, #44	; 0x2c
 80047b8:	fb01 f303 	mul.w	r3, r1, r3
 80047bc:	4413      	add	r3, r2
 80047be:	3355      	adds	r3, #85	; 0x55
 80047c0:	4602      	mov	r2, r0
 80047c2:	701a      	strb	r2, [r3, #0]
 80047c4:	e09f      	b.n	8004906 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	212c      	movs	r1, #44	; 0x2c
 80047cc:	fb01 f303 	mul.w	r3, r1, r3
 80047d0:	4413      	add	r3, r2
 80047d2:	3361      	adds	r3, #97	; 0x61
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	2b03      	cmp	r3, #3
 80047d8:	d109      	bne.n	80047ee <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	212c      	movs	r1, #44	; 0x2c
 80047e0:	fb01 f303 	mul.w	r3, r1, r3
 80047e4:	4413      	add	r3, r2
 80047e6:	3360      	adds	r3, #96	; 0x60
 80047e8:	2202      	movs	r2, #2
 80047ea:	701a      	strb	r2, [r3, #0]
 80047ec:	e08b      	b.n	8004906 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	212c      	movs	r1, #44	; 0x2c
 80047f4:	fb01 f303 	mul.w	r3, r1, r3
 80047f8:	4413      	add	r3, r2
 80047fa:	3361      	adds	r3, #97	; 0x61
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	2b04      	cmp	r3, #4
 8004800:	d109      	bne.n	8004816 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	212c      	movs	r1, #44	; 0x2c
 8004808:	fb01 f303 	mul.w	r3, r1, r3
 800480c:	4413      	add	r3, r2
 800480e:	3360      	adds	r3, #96	; 0x60
 8004810:	2202      	movs	r2, #2
 8004812:	701a      	strb	r2, [r3, #0]
 8004814:	e077      	b.n	8004906 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	212c      	movs	r1, #44	; 0x2c
 800481c:	fb01 f303 	mul.w	r3, r1, r3
 8004820:	4413      	add	r3, r2
 8004822:	3361      	adds	r3, #97	; 0x61
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	2b05      	cmp	r3, #5
 8004828:	d109      	bne.n	800483e <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	212c      	movs	r1, #44	; 0x2c
 8004830:	fb01 f303 	mul.w	r3, r1, r3
 8004834:	4413      	add	r3, r2
 8004836:	3360      	adds	r3, #96	; 0x60
 8004838:	2205      	movs	r2, #5
 800483a:	701a      	strb	r2, [r3, #0]
 800483c:	e063      	b.n	8004906 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	212c      	movs	r1, #44	; 0x2c
 8004844:	fb01 f303 	mul.w	r3, r1, r3
 8004848:	4413      	add	r3, r2
 800484a:	3361      	adds	r3, #97	; 0x61
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	2b06      	cmp	r3, #6
 8004850:	d009      	beq.n	8004866 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	212c      	movs	r1, #44	; 0x2c
 8004858:	fb01 f303 	mul.w	r3, r1, r3
 800485c:	4413      	add	r3, r2
 800485e:	3361      	adds	r3, #97	; 0x61
 8004860:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004862:	2b08      	cmp	r3, #8
 8004864:	d14f      	bne.n	8004906 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	212c      	movs	r1, #44	; 0x2c
 800486c:	fb01 f303 	mul.w	r3, r1, r3
 8004870:	4413      	add	r3, r2
 8004872:	335c      	adds	r3, #92	; 0x5c
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	1c5a      	adds	r2, r3, #1
 8004878:	6879      	ldr	r1, [r7, #4]
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	202c      	movs	r0, #44	; 0x2c
 800487e:	fb00 f303 	mul.w	r3, r0, r3
 8004882:	440b      	add	r3, r1
 8004884:	335c      	adds	r3, #92	; 0x5c
 8004886:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	212c      	movs	r1, #44	; 0x2c
 800488e:	fb01 f303 	mul.w	r3, r1, r3
 8004892:	4413      	add	r3, r2
 8004894:	335c      	adds	r3, #92	; 0x5c
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2b02      	cmp	r3, #2
 800489a:	d912      	bls.n	80048c2 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	212c      	movs	r1, #44	; 0x2c
 80048a2:	fb01 f303 	mul.w	r3, r1, r3
 80048a6:	4413      	add	r3, r2
 80048a8:	335c      	adds	r3, #92	; 0x5c
 80048aa:	2200      	movs	r2, #0
 80048ac:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	212c      	movs	r1, #44	; 0x2c
 80048b4:	fb01 f303 	mul.w	r3, r1, r3
 80048b8:	4413      	add	r3, r2
 80048ba:	3360      	adds	r3, #96	; 0x60
 80048bc:	2204      	movs	r2, #4
 80048be:	701a      	strb	r2, [r3, #0]
 80048c0:	e021      	b.n	8004906 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	212c      	movs	r1, #44	; 0x2c
 80048c8:	fb01 f303 	mul.w	r3, r1, r3
 80048cc:	4413      	add	r3, r2
 80048ce:	3360      	adds	r3, #96	; 0x60
 80048d0:	2202      	movs	r2, #2
 80048d2:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	015a      	lsls	r2, r3, #5
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	4413      	add	r3, r2
 80048dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80048ea:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80048f2:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	015a      	lsls	r2, r3, #5
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	4413      	add	r3, r2
 80048fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004900:	461a      	mov	r2, r3
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	015a      	lsls	r2, r3, #5
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	4413      	add	r3, r2
 800490e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004912:	461a      	mov	r2, r3
 8004914:	2302      	movs	r3, #2
 8004916:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	b2d9      	uxtb	r1, r3
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	202c      	movs	r0, #44	; 0x2c
 8004922:	fb00 f303 	mul.w	r3, r0, r3
 8004926:	4413      	add	r3, r2
 8004928:	3360      	adds	r3, #96	; 0x60
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	461a      	mov	r2, r3
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f006 feb0 	bl	800b694 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004934:	bf00      	nop
 8004936:	3720      	adds	r7, #32
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b08a      	sub	sp, #40	; 0x28
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800494a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494c:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	6a1b      	ldr	r3, [r3, #32]
 8004954:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	f003 030f 	and.w	r3, r3, #15
 800495c:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	0c5b      	lsrs	r3, r3, #17
 8004962:	f003 030f 	and.w	r3, r3, #15
 8004966:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	091b      	lsrs	r3, r3, #4
 800496c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004970:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	2b02      	cmp	r3, #2
 8004976:	d004      	beq.n	8004982 <HCD_RXQLVL_IRQHandler+0x46>
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	2b05      	cmp	r3, #5
 800497c:	f000 80a9 	beq.w	8004ad2 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004980:	e0aa      	b.n	8004ad8 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	2b00      	cmp	r3, #0
 8004986:	f000 80a6 	beq.w	8004ad6 <HCD_RXQLVL_IRQHandler+0x19a>
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	212c      	movs	r1, #44	; 0x2c
 8004990:	fb01 f303 	mul.w	r3, r1, r3
 8004994:	4413      	add	r3, r2
 8004996:	3344      	adds	r3, #68	; 0x44
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2b00      	cmp	r3, #0
 800499c:	f000 809b 	beq.w	8004ad6 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	212c      	movs	r1, #44	; 0x2c
 80049a6:	fb01 f303 	mul.w	r3, r1, r3
 80049aa:	4413      	add	r3, r2
 80049ac:	3350      	adds	r3, #80	; 0x50
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	441a      	add	r2, r3
 80049b4:	6879      	ldr	r1, [r7, #4]
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	202c      	movs	r0, #44	; 0x2c
 80049ba:	fb00 f303 	mul.w	r3, r0, r3
 80049be:	440b      	add	r3, r1
 80049c0:	334c      	adds	r3, #76	; 0x4c
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d87a      	bhi.n	8004abe <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6818      	ldr	r0, [r3, #0]
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	212c      	movs	r1, #44	; 0x2c
 80049d2:	fb01 f303 	mul.w	r3, r1, r3
 80049d6:	4413      	add	r3, r2
 80049d8:	3344      	adds	r3, #68	; 0x44
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	693a      	ldr	r2, [r7, #16]
 80049de:	b292      	uxth	r2, r2
 80049e0:	4619      	mov	r1, r3
 80049e2:	f002 fea5 	bl	8007730 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	212c      	movs	r1, #44	; 0x2c
 80049ec:	fb01 f303 	mul.w	r3, r1, r3
 80049f0:	4413      	add	r3, r2
 80049f2:	3344      	adds	r3, #68	; 0x44
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	441a      	add	r2, r3
 80049fa:	6879      	ldr	r1, [r7, #4]
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	202c      	movs	r0, #44	; 0x2c
 8004a00:	fb00 f303 	mul.w	r3, r0, r3
 8004a04:	440b      	add	r3, r1
 8004a06:	3344      	adds	r3, #68	; 0x44
 8004a08:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	212c      	movs	r1, #44	; 0x2c
 8004a10:	fb01 f303 	mul.w	r3, r1, r3
 8004a14:	4413      	add	r3, r2
 8004a16:	3350      	adds	r3, #80	; 0x50
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	441a      	add	r2, r3
 8004a1e:	6879      	ldr	r1, [r7, #4]
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	202c      	movs	r0, #44	; 0x2c
 8004a24:	fb00 f303 	mul.w	r3, r0, r3
 8004a28:	440b      	add	r3, r1
 8004a2a:	3350      	adds	r3, #80	; 0x50
 8004a2c:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	015a      	lsls	r2, r3, #5
 8004a32:	6a3b      	ldr	r3, [r7, #32]
 8004a34:	4413      	add	r3, r2
 8004a36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	0cdb      	lsrs	r3, r3, #19
 8004a3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a42:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	212c      	movs	r1, #44	; 0x2c
 8004a4a:	fb01 f303 	mul.w	r3, r1, r3
 8004a4e:	4413      	add	r3, r2
 8004a50:	3340      	adds	r3, #64	; 0x40
 8004a52:	881b      	ldrh	r3, [r3, #0]
 8004a54:	461a      	mov	r2, r3
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d13c      	bne.n	8004ad6 <HCD_RXQLVL_IRQHandler+0x19a>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d039      	beq.n	8004ad6 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	015a      	lsls	r2, r3, #5
 8004a66:	6a3b      	ldr	r3, [r7, #32]
 8004a68:	4413      	add	r3, r2
 8004a6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a78:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a80:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	015a      	lsls	r2, r3, #5
 8004a86:	6a3b      	ldr	r3, [r7, #32]
 8004a88:	4413      	add	r3, r2
 8004a8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a8e:	461a      	mov	r2, r3
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	212c      	movs	r1, #44	; 0x2c
 8004a9a:	fb01 f303 	mul.w	r3, r1, r3
 8004a9e:	4413      	add	r3, r2
 8004aa0:	3354      	adds	r3, #84	; 0x54
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	f083 0301 	eor.w	r3, r3, #1
 8004aa8:	b2d8      	uxtb	r0, r3
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	212c      	movs	r1, #44	; 0x2c
 8004ab0:	fb01 f303 	mul.w	r3, r1, r3
 8004ab4:	4413      	add	r3, r2
 8004ab6:	3354      	adds	r3, #84	; 0x54
 8004ab8:	4602      	mov	r2, r0
 8004aba:	701a      	strb	r2, [r3, #0]
      break;
 8004abc:	e00b      	b.n	8004ad6 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	212c      	movs	r1, #44	; 0x2c
 8004ac4:	fb01 f303 	mul.w	r3, r1, r3
 8004ac8:	4413      	add	r3, r2
 8004aca:	3360      	adds	r3, #96	; 0x60
 8004acc:	2204      	movs	r2, #4
 8004ace:	701a      	strb	r2, [r3, #0]
      break;
 8004ad0:	e001      	b.n	8004ad6 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004ad2:	bf00      	nop
 8004ad4:	e000      	b.n	8004ad8 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004ad6:	bf00      	nop
  }
}
 8004ad8:	bf00      	nop
 8004ada:	3728      	adds	r7, #40	; 0x28
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b086      	sub	sp, #24
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004b0c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f003 0302 	and.w	r3, r3, #2
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d10b      	bne.n	8004b30 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d102      	bne.n	8004b28 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f006 fd9a 	bl	800b65c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	f043 0302 	orr.w	r3, r3, #2
 8004b2e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f003 0308 	and.w	r3, r3, #8
 8004b36:	2b08      	cmp	r3, #8
 8004b38:	d132      	bne.n	8004ba0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	f043 0308 	orr.w	r3, r3, #8
 8004b40:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f003 0304 	and.w	r3, r3, #4
 8004b48:	2b04      	cmp	r3, #4
 8004b4a:	d126      	bne.n	8004b9a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d113      	bne.n	8004b7c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004b5a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b5e:	d106      	bne.n	8004b6e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2102      	movs	r1, #2
 8004b66:	4618      	mov	r0, r3
 8004b68:	f002 ff42 	bl	80079f0 <USB_InitFSLSPClkSel>
 8004b6c:	e011      	b.n	8004b92 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2101      	movs	r1, #1
 8004b74:	4618      	mov	r0, r3
 8004b76:	f002 ff3b 	bl	80079f0 <USB_InitFSLSPClkSel>
 8004b7a:	e00a      	b.n	8004b92 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d106      	bne.n	8004b92 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004b90:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f006 fd8c 	bl	800b6b0 <HAL_HCD_PortEnabled_Callback>
 8004b98:	e002      	b.n	8004ba0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f006 fd96 	bl	800b6cc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f003 0320 	and.w	r3, r3, #32
 8004ba6:	2b20      	cmp	r3, #32
 8004ba8:	d103      	bne.n	8004bb2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	f043 0320 	orr.w	r3, r3, #32
 8004bb0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004bb8:	461a      	mov	r2, r3
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	6013      	str	r3, [r2, #0]
}
 8004bbe:	bf00      	nop
 8004bc0:	3718      	adds	r7, #24
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
	...

08004bc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d101      	bne.n	8004bda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e12b      	b.n	8004e32 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d106      	bne.n	8004bf4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f7fd f904 	bl	8001dfc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2224      	movs	r2, #36	; 0x24
 8004bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f022 0201 	bic.w	r2, r2, #1
 8004c0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004c2c:	f002 fa52 	bl	80070d4 <HAL_RCC_GetPCLK1Freq>
 8004c30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	4a81      	ldr	r2, [pc, #516]	; (8004e3c <HAL_I2C_Init+0x274>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d807      	bhi.n	8004c4c <HAL_I2C_Init+0x84>
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	4a80      	ldr	r2, [pc, #512]	; (8004e40 <HAL_I2C_Init+0x278>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	bf94      	ite	ls
 8004c44:	2301      	movls	r3, #1
 8004c46:	2300      	movhi	r3, #0
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	e006      	b.n	8004c5a <HAL_I2C_Init+0x92>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	4a7d      	ldr	r2, [pc, #500]	; (8004e44 <HAL_I2C_Init+0x27c>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	bf94      	ite	ls
 8004c54:	2301      	movls	r3, #1
 8004c56:	2300      	movhi	r3, #0
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d001      	beq.n	8004c62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e0e7      	b.n	8004e32 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	4a78      	ldr	r2, [pc, #480]	; (8004e48 <HAL_I2C_Init+0x280>)
 8004c66:	fba2 2303 	umull	r2, r3, r2, r3
 8004c6a:	0c9b      	lsrs	r3, r3, #18
 8004c6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68ba      	ldr	r2, [r7, #8]
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	6a1b      	ldr	r3, [r3, #32]
 8004c88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	4a6a      	ldr	r2, [pc, #424]	; (8004e3c <HAL_I2C_Init+0x274>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d802      	bhi.n	8004c9c <HAL_I2C_Init+0xd4>
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	3301      	adds	r3, #1
 8004c9a:	e009      	b.n	8004cb0 <HAL_I2C_Init+0xe8>
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004ca2:	fb02 f303 	mul.w	r3, r2, r3
 8004ca6:	4a69      	ldr	r2, [pc, #420]	; (8004e4c <HAL_I2C_Init+0x284>)
 8004ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8004cac:	099b      	lsrs	r3, r3, #6
 8004cae:	3301      	adds	r3, #1
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	6812      	ldr	r2, [r2, #0]
 8004cb4:	430b      	orrs	r3, r1
 8004cb6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	69db      	ldr	r3, [r3, #28]
 8004cbe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004cc2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	495c      	ldr	r1, [pc, #368]	; (8004e3c <HAL_I2C_Init+0x274>)
 8004ccc:	428b      	cmp	r3, r1
 8004cce:	d819      	bhi.n	8004d04 <HAL_I2C_Init+0x13c>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	1e59      	subs	r1, r3, #1
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	005b      	lsls	r3, r3, #1
 8004cda:	fbb1 f3f3 	udiv	r3, r1, r3
 8004cde:	1c59      	adds	r1, r3, #1
 8004ce0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004ce4:	400b      	ands	r3, r1
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00a      	beq.n	8004d00 <HAL_I2C_Init+0x138>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	1e59      	subs	r1, r3, #1
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	005b      	lsls	r3, r3, #1
 8004cf4:	fbb1 f3f3 	udiv	r3, r1, r3
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cfe:	e051      	b.n	8004da4 <HAL_I2C_Init+0x1dc>
 8004d00:	2304      	movs	r3, #4
 8004d02:	e04f      	b.n	8004da4 <HAL_I2C_Init+0x1dc>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d111      	bne.n	8004d30 <HAL_I2C_Init+0x168>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	1e58      	subs	r0, r3, #1
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6859      	ldr	r1, [r3, #4]
 8004d14:	460b      	mov	r3, r1
 8004d16:	005b      	lsls	r3, r3, #1
 8004d18:	440b      	add	r3, r1
 8004d1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d1e:	3301      	adds	r3, #1
 8004d20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	bf0c      	ite	eq
 8004d28:	2301      	moveq	r3, #1
 8004d2a:	2300      	movne	r3, #0
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	e012      	b.n	8004d56 <HAL_I2C_Init+0x18e>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	1e58      	subs	r0, r3, #1
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6859      	ldr	r1, [r3, #4]
 8004d38:	460b      	mov	r3, r1
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	440b      	add	r3, r1
 8004d3e:	0099      	lsls	r1, r3, #2
 8004d40:	440b      	add	r3, r1
 8004d42:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d46:	3301      	adds	r3, #1
 8004d48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	bf0c      	ite	eq
 8004d50:	2301      	moveq	r3, #1
 8004d52:	2300      	movne	r3, #0
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d001      	beq.n	8004d5e <HAL_I2C_Init+0x196>
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e022      	b.n	8004da4 <HAL_I2C_Init+0x1dc>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d10e      	bne.n	8004d84 <HAL_I2C_Init+0x1bc>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	1e58      	subs	r0, r3, #1
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6859      	ldr	r1, [r3, #4]
 8004d6e:	460b      	mov	r3, r1
 8004d70:	005b      	lsls	r3, r3, #1
 8004d72:	440b      	add	r3, r1
 8004d74:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d78:	3301      	adds	r3, #1
 8004d7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d82:	e00f      	b.n	8004da4 <HAL_I2C_Init+0x1dc>
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	1e58      	subs	r0, r3, #1
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6859      	ldr	r1, [r3, #4]
 8004d8c:	460b      	mov	r3, r1
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	440b      	add	r3, r1
 8004d92:	0099      	lsls	r1, r3, #2
 8004d94:	440b      	add	r3, r1
 8004d96:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004da0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004da4:	6879      	ldr	r1, [r7, #4]
 8004da6:	6809      	ldr	r1, [r1, #0]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	69da      	ldr	r2, [r3, #28]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a1b      	ldr	r3, [r3, #32]
 8004dbe:	431a      	orrs	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004dd2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	6911      	ldr	r1, [r2, #16]
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	68d2      	ldr	r2, [r2, #12]
 8004dde:	4311      	orrs	r1, r2
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	6812      	ldr	r2, [r2, #0]
 8004de4:	430b      	orrs	r3, r1
 8004de6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	695a      	ldr	r2, [r3, #20]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	430a      	orrs	r2, r1
 8004e02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f042 0201 	orr.w	r2, r2, #1
 8004e12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2220      	movs	r2, #32
 8004e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3710      	adds	r7, #16
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	000186a0 	.word	0x000186a0
 8004e40:	001e847f 	.word	0x001e847f
 8004e44:	003d08ff 	.word	0x003d08ff
 8004e48:	431bde83 	.word	0x431bde83
 8004e4c:	10624dd3 	.word	0x10624dd3

08004e50 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b088      	sub	sp, #32
 8004e54:	af02      	add	r7, sp, #8
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	607a      	str	r2, [r7, #4]
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	817b      	strh	r3, [r7, #10]
 8004e60:	4613      	mov	r3, r2
 8004e62:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e64:	f7fd fad8 	bl	8002418 <HAL_GetTick>
 8004e68:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	2b20      	cmp	r3, #32
 8004e74:	f040 80e0 	bne.w	8005038 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	9300      	str	r3, [sp, #0]
 8004e7c:	2319      	movs	r3, #25
 8004e7e:	2201      	movs	r2, #1
 8004e80:	4970      	ldr	r1, [pc, #448]	; (8005044 <HAL_I2C_Master_Transmit+0x1f4>)
 8004e82:	68f8      	ldr	r0, [r7, #12]
 8004e84:	f000 fc58 	bl	8005738 <I2C_WaitOnFlagUntilTimeout>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d001      	beq.n	8004e92 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004e8e:	2302      	movs	r3, #2
 8004e90:	e0d3      	b.n	800503a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d101      	bne.n	8004ea0 <HAL_I2C_Master_Transmit+0x50>
 8004e9c:	2302      	movs	r3, #2
 8004e9e:	e0cc      	b.n	800503a <HAL_I2C_Master_Transmit+0x1ea>
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0301 	and.w	r3, r3, #1
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d007      	beq.n	8004ec6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f042 0201 	orr.w	r2, r2, #1
 8004ec4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ed4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2221      	movs	r2, #33	; 0x21
 8004eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2210      	movs	r2, #16
 8004ee2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	893a      	ldrh	r2, [r7, #8]
 8004ef6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004efc:	b29a      	uxth	r2, r3
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	4a50      	ldr	r2, [pc, #320]	; (8005048 <HAL_I2C_Master_Transmit+0x1f8>)
 8004f06:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004f08:	8979      	ldrh	r1, [r7, #10]
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	6a3a      	ldr	r2, [r7, #32]
 8004f0e:	68f8      	ldr	r0, [r7, #12]
 8004f10:	f000 fac2 	bl	8005498 <I2C_MasterRequestWrite>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d001      	beq.n	8004f1e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e08d      	b.n	800503a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f1e:	2300      	movs	r3, #0
 8004f20:	613b      	str	r3, [r7, #16]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	695b      	ldr	r3, [r3, #20]
 8004f28:	613b      	str	r3, [r7, #16]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	699b      	ldr	r3, [r3, #24]
 8004f30:	613b      	str	r3, [r7, #16]
 8004f32:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004f34:	e066      	b.n	8005004 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	6a39      	ldr	r1, [r7, #32]
 8004f3a:	68f8      	ldr	r0, [r7, #12]
 8004f3c:	f000 fcd2 	bl	80058e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f40:	4603      	mov	r3, r0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00d      	beq.n	8004f62 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4a:	2b04      	cmp	r3, #4
 8004f4c:	d107      	bne.n	8004f5e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f5c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e06b      	b.n	800503a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f66:	781a      	ldrb	r2, [r3, #0]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f72:	1c5a      	adds	r2, r3, #1
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	b29a      	uxth	r2, r3
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	b29a      	uxth	r2, r3
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	695b      	ldr	r3, [r3, #20]
 8004f98:	f003 0304 	and.w	r3, r3, #4
 8004f9c:	2b04      	cmp	r3, #4
 8004f9e:	d11b      	bne.n	8004fd8 <HAL_I2C_Master_Transmit+0x188>
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d017      	beq.n	8004fd8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fac:	781a      	ldrb	r2, [r3, #0]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb8:	1c5a      	adds	r2, r3, #1
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	b29a      	uxth	r2, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	b29a      	uxth	r2, r3
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	6a39      	ldr	r1, [r7, #32]
 8004fdc:	68f8      	ldr	r0, [r7, #12]
 8004fde:	f000 fcc2 	bl	8005966 <I2C_WaitOnBTFFlagUntilTimeout>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d00d      	beq.n	8005004 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fec:	2b04      	cmp	r3, #4
 8004fee:	d107      	bne.n	8005000 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ffe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e01a      	b.n	800503a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005008:	2b00      	cmp	r3, #0
 800500a:	d194      	bne.n	8004f36 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800501a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2220      	movs	r2, #32
 8005020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005034:	2300      	movs	r3, #0
 8005036:	e000      	b.n	800503a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005038:	2302      	movs	r3, #2
  }
}
 800503a:	4618      	mov	r0, r3
 800503c:	3718      	adds	r7, #24
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	00100002 	.word	0x00100002
 8005048:	ffff0000 	.word	0xffff0000

0800504c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b08c      	sub	sp, #48	; 0x30
 8005050:	af02      	add	r7, sp, #8
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	607a      	str	r2, [r7, #4]
 8005056:	461a      	mov	r2, r3
 8005058:	460b      	mov	r3, r1
 800505a:	817b      	strh	r3, [r7, #10]
 800505c:	4613      	mov	r3, r2
 800505e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005060:	f7fd f9da 	bl	8002418 <HAL_GetTick>
 8005064:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800506c:	b2db      	uxtb	r3, r3
 800506e:	2b20      	cmp	r3, #32
 8005070:	f040 820b 	bne.w	800548a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005076:	9300      	str	r3, [sp, #0]
 8005078:	2319      	movs	r3, #25
 800507a:	2201      	movs	r2, #1
 800507c:	497c      	ldr	r1, [pc, #496]	; (8005270 <HAL_I2C_Master_Receive+0x224>)
 800507e:	68f8      	ldr	r0, [r7, #12]
 8005080:	f000 fb5a 	bl	8005738 <I2C_WaitOnFlagUntilTimeout>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d001      	beq.n	800508e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800508a:	2302      	movs	r3, #2
 800508c:	e1fe      	b.n	800548c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005094:	2b01      	cmp	r3, #1
 8005096:	d101      	bne.n	800509c <HAL_I2C_Master_Receive+0x50>
 8005098:	2302      	movs	r3, #2
 800509a:	e1f7      	b.n	800548c <HAL_I2C_Master_Receive+0x440>
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0301 	and.w	r3, r3, #1
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d007      	beq.n	80050c2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f042 0201 	orr.w	r2, r2, #1
 80050c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2222      	movs	r2, #34	; 0x22
 80050d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2210      	movs	r2, #16
 80050de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2200      	movs	r2, #0
 80050e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	893a      	ldrh	r2, [r7, #8]
 80050f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050f8:	b29a      	uxth	r2, r3
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	4a5c      	ldr	r2, [pc, #368]	; (8005274 <HAL_I2C_Master_Receive+0x228>)
 8005102:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005104:	8979      	ldrh	r1, [r7, #10]
 8005106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005108:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800510a:	68f8      	ldr	r0, [r7, #12]
 800510c:	f000 fa46 	bl	800559c <I2C_MasterRequestRead>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d001      	beq.n	800511a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e1b8      	b.n	800548c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800511e:	2b00      	cmp	r3, #0
 8005120:	d113      	bne.n	800514a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005122:	2300      	movs	r3, #0
 8005124:	623b      	str	r3, [r7, #32]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	695b      	ldr	r3, [r3, #20]
 800512c:	623b      	str	r3, [r7, #32]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	699b      	ldr	r3, [r3, #24]
 8005134:	623b      	str	r3, [r7, #32]
 8005136:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005146:	601a      	str	r2, [r3, #0]
 8005148:	e18c      	b.n	8005464 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800514e:	2b01      	cmp	r3, #1
 8005150:	d11b      	bne.n	800518a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005160:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005162:	2300      	movs	r3, #0
 8005164:	61fb      	str	r3, [r7, #28]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	695b      	ldr	r3, [r3, #20]
 800516c:	61fb      	str	r3, [r7, #28]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	699b      	ldr	r3, [r3, #24]
 8005174:	61fb      	str	r3, [r7, #28]
 8005176:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005186:	601a      	str	r2, [r3, #0]
 8005188:	e16c      	b.n	8005464 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800518e:	2b02      	cmp	r3, #2
 8005190:	d11b      	bne.n	80051ca <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051a0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051b2:	2300      	movs	r3, #0
 80051b4:	61bb      	str	r3, [r7, #24]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	695b      	ldr	r3, [r3, #20]
 80051bc:	61bb      	str	r3, [r7, #24]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	61bb      	str	r3, [r7, #24]
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	e14c      	b.n	8005464 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051da:	2300      	movs	r3, #0
 80051dc:	617b      	str	r3, [r7, #20]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	695b      	ldr	r3, [r3, #20]
 80051e4:	617b      	str	r3, [r7, #20]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	699b      	ldr	r3, [r3, #24]
 80051ec:	617b      	str	r3, [r7, #20]
 80051ee:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80051f0:	e138      	b.n	8005464 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051f6:	2b03      	cmp	r3, #3
 80051f8:	f200 80f1 	bhi.w	80053de <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005200:	2b01      	cmp	r3, #1
 8005202:	d123      	bne.n	800524c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005206:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005208:	68f8      	ldr	r0, [r7, #12]
 800520a:	f000 fbed 	bl	80059e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800520e:	4603      	mov	r3, r0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d001      	beq.n	8005218 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	e139      	b.n	800548c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	691a      	ldr	r2, [r3, #16]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005222:	b2d2      	uxtb	r2, r2
 8005224:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522a:	1c5a      	adds	r2, r3, #1
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005234:	3b01      	subs	r3, #1
 8005236:	b29a      	uxth	r2, r3
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005240:	b29b      	uxth	r3, r3
 8005242:	3b01      	subs	r3, #1
 8005244:	b29a      	uxth	r2, r3
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	855a      	strh	r2, [r3, #42]	; 0x2a
 800524a:	e10b      	b.n	8005464 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005250:	2b02      	cmp	r3, #2
 8005252:	d14e      	bne.n	80052f2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005256:	9300      	str	r3, [sp, #0]
 8005258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800525a:	2200      	movs	r2, #0
 800525c:	4906      	ldr	r1, [pc, #24]	; (8005278 <HAL_I2C_Master_Receive+0x22c>)
 800525e:	68f8      	ldr	r0, [r7, #12]
 8005260:	f000 fa6a 	bl	8005738 <I2C_WaitOnFlagUntilTimeout>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d008      	beq.n	800527c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e10e      	b.n	800548c <HAL_I2C_Master_Receive+0x440>
 800526e:	bf00      	nop
 8005270:	00100002 	.word	0x00100002
 8005274:	ffff0000 	.word	0xffff0000
 8005278:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800528a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	691a      	ldr	r2, [r3, #16]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005296:	b2d2      	uxtb	r2, r2
 8005298:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529e:	1c5a      	adds	r2, r3, #1
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052a8:	3b01      	subs	r3, #1
 80052aa:	b29a      	uxth	r2, r3
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	3b01      	subs	r3, #1
 80052b8:	b29a      	uxth	r2, r3
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	691a      	ldr	r2, [r3, #16]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c8:	b2d2      	uxtb	r2, r2
 80052ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d0:	1c5a      	adds	r2, r3, #1
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052da:	3b01      	subs	r3, #1
 80052dc:	b29a      	uxth	r2, r3
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	3b01      	subs	r3, #1
 80052ea:	b29a      	uxth	r2, r3
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80052f0:	e0b8      	b.n	8005464 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f4:	9300      	str	r3, [sp, #0]
 80052f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f8:	2200      	movs	r2, #0
 80052fa:	4966      	ldr	r1, [pc, #408]	; (8005494 <HAL_I2C_Master_Receive+0x448>)
 80052fc:	68f8      	ldr	r0, [r7, #12]
 80052fe:	f000 fa1b 	bl	8005738 <I2C_WaitOnFlagUntilTimeout>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d001      	beq.n	800530c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e0bf      	b.n	800548c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800531a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	691a      	ldr	r2, [r3, #16]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005326:	b2d2      	uxtb	r2, r2
 8005328:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532e:	1c5a      	adds	r2, r3, #1
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005338:	3b01      	subs	r3, #1
 800533a:	b29a      	uxth	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005344:	b29b      	uxth	r3, r3
 8005346:	3b01      	subs	r3, #1
 8005348:	b29a      	uxth	r2, r3
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800534e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005350:	9300      	str	r3, [sp, #0]
 8005352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005354:	2200      	movs	r2, #0
 8005356:	494f      	ldr	r1, [pc, #316]	; (8005494 <HAL_I2C_Master_Receive+0x448>)
 8005358:	68f8      	ldr	r0, [r7, #12]
 800535a:	f000 f9ed 	bl	8005738 <I2C_WaitOnFlagUntilTimeout>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d001      	beq.n	8005368 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e091      	b.n	800548c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005376:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	691a      	ldr	r2, [r3, #16]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005382:	b2d2      	uxtb	r2, r2
 8005384:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538a:	1c5a      	adds	r2, r3, #1
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005394:	3b01      	subs	r3, #1
 8005396:	b29a      	uxth	r2, r3
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	3b01      	subs	r3, #1
 80053a4:	b29a      	uxth	r2, r3
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	691a      	ldr	r2, [r3, #16]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b4:	b2d2      	uxtb	r2, r2
 80053b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053bc:	1c5a      	adds	r2, r3, #1
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053c6:	3b01      	subs	r3, #1
 80053c8:	b29a      	uxth	r2, r3
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	3b01      	subs	r3, #1
 80053d6:	b29a      	uxth	r2, r3
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80053dc:	e042      	b.n	8005464 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80053e2:	68f8      	ldr	r0, [r7, #12]
 80053e4:	f000 fb00 	bl	80059e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d001      	beq.n	80053f2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e04c      	b.n	800548c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	691a      	ldr	r2, [r3, #16]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fc:	b2d2      	uxtb	r2, r2
 80053fe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005404:	1c5a      	adds	r2, r3, #1
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800540e:	3b01      	subs	r3, #1
 8005410:	b29a      	uxth	r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800541a:	b29b      	uxth	r3, r3
 800541c:	3b01      	subs	r3, #1
 800541e:	b29a      	uxth	r2, r3
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	695b      	ldr	r3, [r3, #20]
 800542a:	f003 0304 	and.w	r3, r3, #4
 800542e:	2b04      	cmp	r3, #4
 8005430:	d118      	bne.n	8005464 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	691a      	ldr	r2, [r3, #16]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543c:	b2d2      	uxtb	r2, r2
 800543e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005444:	1c5a      	adds	r2, r3, #1
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800544e:	3b01      	subs	r3, #1
 8005450:	b29a      	uxth	r2, r3
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800545a:	b29b      	uxth	r3, r3
 800545c:	3b01      	subs	r3, #1
 800545e:	b29a      	uxth	r2, r3
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005468:	2b00      	cmp	r3, #0
 800546a:	f47f aec2 	bne.w	80051f2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2220      	movs	r2, #32
 8005472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2200      	movs	r2, #0
 8005482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005486:	2300      	movs	r3, #0
 8005488:	e000      	b.n	800548c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800548a:	2302      	movs	r3, #2
  }
}
 800548c:	4618      	mov	r0, r3
 800548e:	3728      	adds	r7, #40	; 0x28
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}
 8005494:	00010004 	.word	0x00010004

08005498 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b088      	sub	sp, #32
 800549c:	af02      	add	r7, sp, #8
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	607a      	str	r2, [r7, #4]
 80054a2:	603b      	str	r3, [r7, #0]
 80054a4:	460b      	mov	r3, r1
 80054a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ac:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	2b08      	cmp	r3, #8
 80054b2:	d006      	beq.n	80054c2 <I2C_MasterRequestWrite+0x2a>
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d003      	beq.n	80054c2 <I2C_MasterRequestWrite+0x2a>
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80054c0:	d108      	bne.n	80054d4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054d0:	601a      	str	r2, [r3, #0]
 80054d2:	e00b      	b.n	80054ec <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d8:	2b12      	cmp	r3, #18
 80054da:	d107      	bne.n	80054ec <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054ea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	9300      	str	r3, [sp, #0]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80054f8:	68f8      	ldr	r0, [r7, #12]
 80054fa:	f000 f91d 	bl	8005738 <I2C_WaitOnFlagUntilTimeout>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d00d      	beq.n	8005520 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800550e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005512:	d103      	bne.n	800551c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f44f 7200 	mov.w	r2, #512	; 0x200
 800551a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800551c:	2303      	movs	r3, #3
 800551e:	e035      	b.n	800558c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005528:	d108      	bne.n	800553c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800552a:	897b      	ldrh	r3, [r7, #10]
 800552c:	b2db      	uxtb	r3, r3
 800552e:	461a      	mov	r2, r3
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005538:	611a      	str	r2, [r3, #16]
 800553a:	e01b      	b.n	8005574 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800553c:	897b      	ldrh	r3, [r7, #10]
 800553e:	11db      	asrs	r3, r3, #7
 8005540:	b2db      	uxtb	r3, r3
 8005542:	f003 0306 	and.w	r3, r3, #6
 8005546:	b2db      	uxtb	r3, r3
 8005548:	f063 030f 	orn	r3, r3, #15
 800554c:	b2da      	uxtb	r2, r3
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	490e      	ldr	r1, [pc, #56]	; (8005594 <I2C_MasterRequestWrite+0xfc>)
 800555a:	68f8      	ldr	r0, [r7, #12]
 800555c:	f000 f943 	bl	80057e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d001      	beq.n	800556a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e010      	b.n	800558c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800556a:	897b      	ldrh	r3, [r7, #10]
 800556c:	b2da      	uxtb	r2, r3
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	4907      	ldr	r1, [pc, #28]	; (8005598 <I2C_MasterRequestWrite+0x100>)
 800557a:	68f8      	ldr	r0, [r7, #12]
 800557c:	f000 f933 	bl	80057e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d001      	beq.n	800558a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e000      	b.n	800558c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800558a:	2300      	movs	r3, #0
}
 800558c:	4618      	mov	r0, r3
 800558e:	3718      	adds	r7, #24
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}
 8005594:	00010008 	.word	0x00010008
 8005598:	00010002 	.word	0x00010002

0800559c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b088      	sub	sp, #32
 80055a0:	af02      	add	r7, sp, #8
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	607a      	str	r2, [r7, #4]
 80055a6:	603b      	str	r3, [r7, #0]
 80055a8:	460b      	mov	r3, r1
 80055aa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80055c0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	2b08      	cmp	r3, #8
 80055c6:	d006      	beq.n	80055d6 <I2C_MasterRequestRead+0x3a>
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d003      	beq.n	80055d6 <I2C_MasterRequestRead+0x3a>
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80055d4:	d108      	bne.n	80055e8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055e4:	601a      	str	r2, [r3, #0]
 80055e6:	e00b      	b.n	8005600 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ec:	2b11      	cmp	r3, #17
 80055ee:	d107      	bne.n	8005600 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055fe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	9300      	str	r3, [sp, #0]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800560c:	68f8      	ldr	r0, [r7, #12]
 800560e:	f000 f893 	bl	8005738 <I2C_WaitOnFlagUntilTimeout>
 8005612:	4603      	mov	r3, r0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d00d      	beq.n	8005634 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005622:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005626:	d103      	bne.n	8005630 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800562e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	e079      	b.n	8005728 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800563c:	d108      	bne.n	8005650 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800563e:	897b      	ldrh	r3, [r7, #10]
 8005640:	b2db      	uxtb	r3, r3
 8005642:	f043 0301 	orr.w	r3, r3, #1
 8005646:	b2da      	uxtb	r2, r3
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	611a      	str	r2, [r3, #16]
 800564e:	e05f      	b.n	8005710 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005650:	897b      	ldrh	r3, [r7, #10]
 8005652:	11db      	asrs	r3, r3, #7
 8005654:	b2db      	uxtb	r3, r3
 8005656:	f003 0306 	and.w	r3, r3, #6
 800565a:	b2db      	uxtb	r3, r3
 800565c:	f063 030f 	orn	r3, r3, #15
 8005660:	b2da      	uxtb	r2, r3
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	4930      	ldr	r1, [pc, #192]	; (8005730 <I2C_MasterRequestRead+0x194>)
 800566e:	68f8      	ldr	r0, [r7, #12]
 8005670:	f000 f8b9 	bl	80057e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d001      	beq.n	800567e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e054      	b.n	8005728 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800567e:	897b      	ldrh	r3, [r7, #10]
 8005680:	b2da      	uxtb	r2, r3
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	4929      	ldr	r1, [pc, #164]	; (8005734 <I2C_MasterRequestRead+0x198>)
 800568e:	68f8      	ldr	r0, [r7, #12]
 8005690:	f000 f8a9 	bl	80057e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d001      	beq.n	800569e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e044      	b.n	8005728 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800569e:	2300      	movs	r3, #0
 80056a0:	613b      	str	r3, [r7, #16]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	695b      	ldr	r3, [r3, #20]
 80056a8:	613b      	str	r3, [r7, #16]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	613b      	str	r3, [r7, #16]
 80056b2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056c2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	9300      	str	r3, [sp, #0]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80056d0:	68f8      	ldr	r0, [r7, #12]
 80056d2:	f000 f831 	bl	8005738 <I2C_WaitOnFlagUntilTimeout>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d00d      	beq.n	80056f8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056ea:	d103      	bne.n	80056f4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056f2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80056f4:	2303      	movs	r3, #3
 80056f6:	e017      	b.n	8005728 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80056f8:	897b      	ldrh	r3, [r7, #10]
 80056fa:	11db      	asrs	r3, r3, #7
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	f003 0306 	and.w	r3, r3, #6
 8005702:	b2db      	uxtb	r3, r3
 8005704:	f063 030e 	orn	r3, r3, #14
 8005708:	b2da      	uxtb	r2, r3
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	4907      	ldr	r1, [pc, #28]	; (8005734 <I2C_MasterRequestRead+0x198>)
 8005716:	68f8      	ldr	r0, [r7, #12]
 8005718:	f000 f865 	bl	80057e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d001      	beq.n	8005726 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e000      	b.n	8005728 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005726:	2300      	movs	r3, #0
}
 8005728:	4618      	mov	r0, r3
 800572a:	3718      	adds	r7, #24
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}
 8005730:	00010008 	.word	0x00010008
 8005734:	00010002 	.word	0x00010002

08005738 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	603b      	str	r3, [r7, #0]
 8005744:	4613      	mov	r3, r2
 8005746:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005748:	e025      	b.n	8005796 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005750:	d021      	beq.n	8005796 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005752:	f7fc fe61 	bl	8002418 <HAL_GetTick>
 8005756:	4602      	mov	r2, r0
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	683a      	ldr	r2, [r7, #0]
 800575e:	429a      	cmp	r2, r3
 8005760:	d302      	bcc.n	8005768 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d116      	bne.n	8005796 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2200      	movs	r2, #0
 800576c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2220      	movs	r2, #32
 8005772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2200      	movs	r2, #0
 800577a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005782:	f043 0220 	orr.w	r2, r3, #32
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e023      	b.n	80057de <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	0c1b      	lsrs	r3, r3, #16
 800579a:	b2db      	uxtb	r3, r3
 800579c:	2b01      	cmp	r3, #1
 800579e:	d10d      	bne.n	80057bc <I2C_WaitOnFlagUntilTimeout+0x84>
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	695b      	ldr	r3, [r3, #20]
 80057a6:	43da      	mvns	r2, r3
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	4013      	ands	r3, r2
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	bf0c      	ite	eq
 80057b2:	2301      	moveq	r3, #1
 80057b4:	2300      	movne	r3, #0
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	461a      	mov	r2, r3
 80057ba:	e00c      	b.n	80057d6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	699b      	ldr	r3, [r3, #24]
 80057c2:	43da      	mvns	r2, r3
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	4013      	ands	r3, r2
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	bf0c      	ite	eq
 80057ce:	2301      	moveq	r3, #1
 80057d0:	2300      	movne	r3, #0
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	461a      	mov	r2, r3
 80057d6:	79fb      	ldrb	r3, [r7, #7]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d0b6      	beq.n	800574a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3710      	adds	r7, #16
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}

080057e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80057e6:	b580      	push	{r7, lr}
 80057e8:	b084      	sub	sp, #16
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	60f8      	str	r0, [r7, #12]
 80057ee:	60b9      	str	r1, [r7, #8]
 80057f0:	607a      	str	r2, [r7, #4]
 80057f2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80057f4:	e051      	b.n	800589a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	695b      	ldr	r3, [r3, #20]
 80057fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005800:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005804:	d123      	bne.n	800584e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005814:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800581e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2200      	movs	r2, #0
 8005824:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2220      	movs	r2, #32
 800582a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583a:	f043 0204 	orr.w	r2, r3, #4
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e046      	b.n	80058dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005854:	d021      	beq.n	800589a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005856:	f7fc fddf 	bl	8002418 <HAL_GetTick>
 800585a:	4602      	mov	r2, r0
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	1ad3      	subs	r3, r2, r3
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	429a      	cmp	r2, r3
 8005864:	d302      	bcc.n	800586c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d116      	bne.n	800589a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2200      	movs	r2, #0
 8005870:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2220      	movs	r2, #32
 8005876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2200      	movs	r2, #0
 800587e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005886:	f043 0220 	orr.w	r2, r3, #32
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e020      	b.n	80058dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	0c1b      	lsrs	r3, r3, #16
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d10c      	bne.n	80058be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	695b      	ldr	r3, [r3, #20]
 80058aa:	43da      	mvns	r2, r3
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	4013      	ands	r3, r2
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	bf14      	ite	ne
 80058b6:	2301      	movne	r3, #1
 80058b8:	2300      	moveq	r3, #0
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	e00b      	b.n	80058d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	699b      	ldr	r3, [r3, #24]
 80058c4:	43da      	mvns	r2, r3
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	4013      	ands	r3, r2
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	bf14      	ite	ne
 80058d0:	2301      	movne	r3, #1
 80058d2:	2300      	moveq	r3, #0
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d18d      	bne.n	80057f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3710      	adds	r7, #16
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b084      	sub	sp, #16
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058f0:	e02d      	b.n	800594e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80058f2:	68f8      	ldr	r0, [r7, #12]
 80058f4:	f000 f8ce 	bl	8005a94 <I2C_IsAcknowledgeFailed>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d001      	beq.n	8005902 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e02d      	b.n	800595e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005908:	d021      	beq.n	800594e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800590a:	f7fc fd85 	bl	8002418 <HAL_GetTick>
 800590e:	4602      	mov	r2, r0
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	68ba      	ldr	r2, [r7, #8]
 8005916:	429a      	cmp	r2, r3
 8005918:	d302      	bcc.n	8005920 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d116      	bne.n	800594e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2200      	movs	r2, #0
 8005924:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2220      	movs	r2, #32
 800592a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2200      	movs	r2, #0
 8005932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593a:	f043 0220 	orr.w	r2, r3, #32
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e007      	b.n	800595e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	695b      	ldr	r3, [r3, #20]
 8005954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005958:	2b80      	cmp	r3, #128	; 0x80
 800595a:	d1ca      	bne.n	80058f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	3710      	adds	r7, #16
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}

08005966 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005966:	b580      	push	{r7, lr}
 8005968:	b084      	sub	sp, #16
 800596a:	af00      	add	r7, sp, #0
 800596c:	60f8      	str	r0, [r7, #12]
 800596e:	60b9      	str	r1, [r7, #8]
 8005970:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005972:	e02d      	b.n	80059d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005974:	68f8      	ldr	r0, [r7, #12]
 8005976:	f000 f88d 	bl	8005a94 <I2C_IsAcknowledgeFailed>
 800597a:	4603      	mov	r3, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d001      	beq.n	8005984 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e02d      	b.n	80059e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800598a:	d021      	beq.n	80059d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800598c:	f7fc fd44 	bl	8002418 <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	68ba      	ldr	r2, [r7, #8]
 8005998:	429a      	cmp	r2, r3
 800599a:	d302      	bcc.n	80059a2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d116      	bne.n	80059d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2200      	movs	r2, #0
 80059a6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2220      	movs	r2, #32
 80059ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059bc:	f043 0220 	orr.w	r2, r3, #32
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	e007      	b.n	80059e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	695b      	ldr	r3, [r3, #20]
 80059d6:	f003 0304 	and.w	r3, r3, #4
 80059da:	2b04      	cmp	r3, #4
 80059dc:	d1ca      	bne.n	8005974 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80059de:	2300      	movs	r3, #0
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3710      	adds	r7, #16
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80059f4:	e042      	b.n	8005a7c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	695b      	ldr	r3, [r3, #20]
 80059fc:	f003 0310 	and.w	r3, r3, #16
 8005a00:	2b10      	cmp	r3, #16
 8005a02:	d119      	bne.n	8005a38 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f06f 0210 	mvn.w	r2, #16
 8005a0c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2200      	movs	r2, #0
 8005a12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2220      	movs	r2, #32
 8005a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e029      	b.n	8005a8c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a38:	f7fc fcee 	bl	8002418 <HAL_GetTick>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	68ba      	ldr	r2, [r7, #8]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d302      	bcc.n	8005a4e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d116      	bne.n	8005a7c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2200      	movs	r2, #0
 8005a52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2220      	movs	r2, #32
 8005a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a68:	f043 0220 	orr.w	r2, r3, #32
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e007      	b.n	8005a8c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	695b      	ldr	r3, [r3, #20]
 8005a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a86:	2b40      	cmp	r3, #64	; 0x40
 8005a88:	d1b5      	bne.n	80059f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3710      	adds	r7, #16
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	695b      	ldr	r3, [r3, #20]
 8005aa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005aaa:	d11b      	bne.n	8005ae4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ab4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2220      	movs	r2, #32
 8005ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad0:	f043 0204 	orr.w	r2, r3, #4
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e000      	b.n	8005ae6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005ae4:	2300      	movs	r3, #0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	370c      	adds	r7, #12
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
	...

08005af4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b088      	sub	sp, #32
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d101      	bne.n	8005b06 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e128      	b.n	8005d58 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d109      	bne.n	8005b26 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a90      	ldr	r2, [pc, #576]	; (8005d60 <HAL_I2S_Init+0x26c>)
 8005b1e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f7fc f9b3 	bl	8001e8c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2202      	movs	r2, #2
 8005b2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	69db      	ldr	r3, [r3, #28]
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	6812      	ldr	r2, [r2, #0]
 8005b38:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005b3c:	f023 030f 	bic.w	r3, r3, #15
 8005b40:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2202      	movs	r2, #2
 8005b48:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	695b      	ldr	r3, [r3, #20]
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	d060      	beq.n	8005c14 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d102      	bne.n	8005b60 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005b5a:	2310      	movs	r3, #16
 8005b5c:	617b      	str	r3, [r7, #20]
 8005b5e:	e001      	b.n	8005b64 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005b60:	2320      	movs	r3, #32
 8005b62:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	2b20      	cmp	r3, #32
 8005b6a:	d802      	bhi.n	8005b72 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	005b      	lsls	r3, r3, #1
 8005b70:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005b72:	2001      	movs	r0, #1
 8005b74:	f001 fba4 	bl	80072c0 <HAL_RCCEx_GetPeriphCLKFreq>
 8005b78:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	691b      	ldr	r3, [r3, #16]
 8005b7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b82:	d125      	bne.n	8005bd0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d010      	beq.n	8005bae <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	68fa      	ldr	r2, [r7, #12]
 8005b92:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b96:	4613      	mov	r3, r2
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	4413      	add	r3, r2
 8005b9c:	005b      	lsls	r3, r3, #1
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	695b      	ldr	r3, [r3, #20]
 8005ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ba8:	3305      	adds	r3, #5
 8005baa:	613b      	str	r3, [r7, #16]
 8005bac:	e01f      	b.n	8005bee <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	00db      	lsls	r3, r3, #3
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005bb8:	4613      	mov	r3, r2
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	4413      	add	r3, r2
 8005bbe:	005b      	lsls	r3, r3, #1
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	695b      	ldr	r3, [r3, #20]
 8005bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bca:	3305      	adds	r3, #5
 8005bcc:	613b      	str	r3, [r7, #16]
 8005bce:	e00e      	b.n	8005bee <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005bd8:	4613      	mov	r3, r2
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	4413      	add	r3, r2
 8005bde:	005b      	lsls	r3, r3, #1
 8005be0:	461a      	mov	r2, r3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	695b      	ldr	r3, [r3, #20]
 8005be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bea:	3305      	adds	r3, #5
 8005bec:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	4a5c      	ldr	r2, [pc, #368]	; (8005d64 <HAL_I2S_Init+0x270>)
 8005bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf6:	08db      	lsrs	r3, r3, #3
 8005bf8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	f003 0301 	and.w	r3, r3, #1
 8005c00:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005c02:	693a      	ldr	r2, [r7, #16]
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	1ad3      	subs	r3, r2, r3
 8005c08:	085b      	lsrs	r3, r3, #1
 8005c0a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	021b      	lsls	r3, r3, #8
 8005c10:	61bb      	str	r3, [r7, #24]
 8005c12:	e003      	b.n	8005c1c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005c14:	2302      	movs	r3, #2
 8005c16:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d902      	bls.n	8005c28 <HAL_I2S_Init+0x134>
 8005c22:	69fb      	ldr	r3, [r7, #28]
 8005c24:	2bff      	cmp	r3, #255	; 0xff
 8005c26:	d907      	bls.n	8005c38 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c2c:	f043 0210 	orr.w	r2, r3, #16
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e08f      	b.n	8005d58 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	691a      	ldr	r2, [r3, #16]
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	ea42 0103 	orr.w	r1, r2, r3
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	69fa      	ldr	r2, [r7, #28]
 8005c48:	430a      	orrs	r2, r1
 8005c4a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	69db      	ldr	r3, [r3, #28]
 8005c52:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005c56:	f023 030f 	bic.w	r3, r3, #15
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	6851      	ldr	r1, [r2, #4]
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	6892      	ldr	r2, [r2, #8]
 8005c62:	4311      	orrs	r1, r2
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	68d2      	ldr	r2, [r2, #12]
 8005c68:	4311      	orrs	r1, r2
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	6992      	ldr	r2, [r2, #24]
 8005c6e:	430a      	orrs	r2, r1
 8005c70:	431a      	orrs	r2, r3
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c7a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6a1b      	ldr	r3, [r3, #32]
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d161      	bne.n	8005d48 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a38      	ldr	r2, [pc, #224]	; (8005d68 <HAL_I2S_Init+0x274>)
 8005c88:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a37      	ldr	r2, [pc, #220]	; (8005d6c <HAL_I2S_Init+0x278>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d101      	bne.n	8005c98 <HAL_I2S_Init+0x1a4>
 8005c94:	4b36      	ldr	r3, [pc, #216]	; (8005d70 <HAL_I2S_Init+0x27c>)
 8005c96:	e001      	b.n	8005c9c <HAL_I2S_Init+0x1a8>
 8005c98:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c9c:	69db      	ldr	r3, [r3, #28]
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	6812      	ldr	r2, [r2, #0]
 8005ca2:	4932      	ldr	r1, [pc, #200]	; (8005d6c <HAL_I2S_Init+0x278>)
 8005ca4:	428a      	cmp	r2, r1
 8005ca6:	d101      	bne.n	8005cac <HAL_I2S_Init+0x1b8>
 8005ca8:	4a31      	ldr	r2, [pc, #196]	; (8005d70 <HAL_I2S_Init+0x27c>)
 8005caa:	e001      	b.n	8005cb0 <HAL_I2S_Init+0x1bc>
 8005cac:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005cb0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005cb4:	f023 030f 	bic.w	r3, r3, #15
 8005cb8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a2b      	ldr	r2, [pc, #172]	; (8005d6c <HAL_I2S_Init+0x278>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d101      	bne.n	8005cc8 <HAL_I2S_Init+0x1d4>
 8005cc4:	4b2a      	ldr	r3, [pc, #168]	; (8005d70 <HAL_I2S_Init+0x27c>)
 8005cc6:	e001      	b.n	8005ccc <HAL_I2S_Init+0x1d8>
 8005cc8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ccc:	2202      	movs	r2, #2
 8005cce:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a25      	ldr	r2, [pc, #148]	; (8005d6c <HAL_I2S_Init+0x278>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d101      	bne.n	8005cde <HAL_I2S_Init+0x1ea>
 8005cda:	4b25      	ldr	r3, [pc, #148]	; (8005d70 <HAL_I2S_Init+0x27c>)
 8005cdc:	e001      	b.n	8005ce2 <HAL_I2S_Init+0x1ee>
 8005cde:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ce2:	69db      	ldr	r3, [r3, #28]
 8005ce4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cee:	d003      	beq.n	8005cf8 <HAL_I2S_Init+0x204>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d103      	bne.n	8005d00 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005cf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005cfc:	613b      	str	r3, [r7, #16]
 8005cfe:	e001      	b.n	8005d04 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005d00:	2300      	movs	r3, #0
 8005d02:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	699b      	ldr	r3, [r3, #24]
 8005d20:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005d22:	4313      	orrs	r3, r2
 8005d24:	b29a      	uxth	r2, r3
 8005d26:	897b      	ldrh	r3, [r7, #10]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005d30:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a0d      	ldr	r2, [pc, #52]	; (8005d6c <HAL_I2S_Init+0x278>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d101      	bne.n	8005d40 <HAL_I2S_Init+0x24c>
 8005d3c:	4b0c      	ldr	r3, [pc, #48]	; (8005d70 <HAL_I2S_Init+0x27c>)
 8005d3e:	e001      	b.n	8005d44 <HAL_I2S_Init+0x250>
 8005d40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d44:	897a      	ldrh	r2, [r7, #10]
 8005d46:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2201      	movs	r2, #1
 8005d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3720      	adds	r7, #32
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}
 8005d60:	0800622b 	.word	0x0800622b
 8005d64:	cccccccd 	.word	0xcccccccd
 8005d68:	08006341 	.word	0x08006341
 8005d6c:	40003800 	.word	0x40003800
 8005d70:	40003400 	.word	0x40003400

08005d74 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b086      	sub	sp, #24
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	4613      	mov	r3, r2
 8005d80:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d002      	beq.n	8005d8e <HAL_I2S_Transmit_DMA+0x1a>
 8005d88:	88fb      	ldrh	r3, [r7, #6]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d101      	bne.n	8005d92 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e08e      	b.n	8005eb0 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d101      	bne.n	8005da2 <HAL_I2S_Transmit_DMA+0x2e>
 8005d9e:	2302      	movs	r3, #2
 8005da0:	e086      	b.n	8005eb0 <HAL_I2S_Transmit_DMA+0x13c>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2201      	movs	r2, #1
 8005da6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d005      	beq.n	8005dc2 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2200      	movs	r2, #0
 8005dba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8005dbe:	2302      	movs	r3, #2
 8005dc0:	e076      	b.n	8005eb0 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2203      	movs	r2, #3
 8005dc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	68ba      	ldr	r2, [r7, #8]
 8005dd4:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	69db      	ldr	r3, [r3, #28]
 8005ddc:	f003 0307 	and.w	r3, r3, #7
 8005de0:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	2b03      	cmp	r3, #3
 8005de6:	d002      	beq.n	8005dee <HAL_I2S_Transmit_DMA+0x7a>
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	2b05      	cmp	r3, #5
 8005dec:	d10a      	bne.n	8005e04 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8005dee:	88fb      	ldrh	r3, [r7, #6]
 8005df0:	005b      	lsls	r3, r3, #1
 8005df2:	b29a      	uxth	r2, r3
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8005df8:	88fb      	ldrh	r3, [r7, #6]
 8005dfa:	005b      	lsls	r3, r3, #1
 8005dfc:	b29a      	uxth	r2, r3
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005e02:	e005      	b.n	8005e10 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	88fa      	ldrh	r2, [r7, #6]
 8005e08:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	88fa      	ldrh	r2, [r7, #6]
 8005e0e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e14:	4a28      	ldr	r2, [pc, #160]	; (8005eb8 <HAL_I2S_Transmit_DMA+0x144>)
 8005e16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e1c:	4a27      	ldr	r2, [pc, #156]	; (8005ebc <HAL_I2S_Transmit_DMA+0x148>)
 8005e1e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e24:	4a26      	ldr	r2, [pc, #152]	; (8005ec0 <HAL_I2S_Transmit_DMA+0x14c>)
 8005e26:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005e30:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005e38:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e3e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005e40:	f7fc fcda 	bl	80027f8 <HAL_DMA_Start_IT>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d00f      	beq.n	8005e6a <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e4e:	f043 0208 	orr.w	r2, r3, #8
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	e022      	b.n	8005eb0 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	69db      	ldr	r3, [r3, #28]
 8005e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d107      	bne.n	8005e88 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	69da      	ldr	r2, [r3, #28]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e86:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	f003 0302 	and.w	r3, r3, #2
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d107      	bne.n	8005ea6 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	685a      	ldr	r2, [r3, #4]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f042 0202 	orr.w	r2, r2, #2
 8005ea4:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8005eae:	2300      	movs	r3, #0
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3718      	adds	r7, #24
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	080060ab 	.word	0x080060ab
 8005ebc:	08006069 	.word	0x08006069
 8005ec0:	08006125 	.word	0x08006125

08005ec4 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b086      	sub	sp, #24
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	4613      	mov	r3, r2
 8005ed0:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d002      	beq.n	8005ede <HAL_I2S_Receive_DMA+0x1a>
 8005ed8:	88fb      	ldrh	r3, [r7, #6]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d101      	bne.n	8005ee2 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e0a1      	b.n	8006026 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d101      	bne.n	8005ef2 <HAL_I2S_Receive_DMA+0x2e>
 8005eee:	2302      	movs	r3, #2
 8005ef0:	e099      	b.n	8006026 <HAL_I2S_Receive_DMA+0x162>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d005      	beq.n	8005f12 <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8005f0e:	2302      	movs	r3, #2
 8005f10:	e089      	b.n	8006026 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2204      	movs	r2, #4
 8005f16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	68ba      	ldr	r2, [r7, #8]
 8005f24:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	69db      	ldr	r3, [r3, #28]
 8005f2c:	f003 0307 	and.w	r3, r3, #7
 8005f30:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	2b03      	cmp	r3, #3
 8005f36:	d002      	beq.n	8005f3e <HAL_I2S_Receive_DMA+0x7a>
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	2b05      	cmp	r3, #5
 8005f3c:	d10a      	bne.n	8005f54 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 8005f3e:	88fb      	ldrh	r3, [r7, #6]
 8005f40:	005b      	lsls	r3, r3, #1
 8005f42:	b29a      	uxth	r2, r3
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8005f48:	88fb      	ldrh	r3, [r7, #6]
 8005f4a:	005b      	lsls	r3, r3, #1
 8005f4c:	b29a      	uxth	r2, r3
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	865a      	strh	r2, [r3, #50]	; 0x32
 8005f52:	e005      	b.n	8005f60 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	88fa      	ldrh	r2, [r7, #6]
 8005f58:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	88fa      	ldrh	r2, [r7, #6]
 8005f5e:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f64:	4a32      	ldr	r2, [pc, #200]	; (8006030 <HAL_I2S_Receive_DMA+0x16c>)
 8005f66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f6c:	4a31      	ldr	r2, [pc, #196]	; (8006034 <HAL_I2S_Receive_DMA+0x170>)
 8005f6e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f74:	4a30      	ldr	r2, [pc, #192]	; (8006038 <HAL_I2S_Receive_DMA+0x174>)
 8005f76:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	69db      	ldr	r3, [r3, #28]
 8005f7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f86:	d10a      	bne.n	8005f9e <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005f88:	2300      	movs	r3, #0
 8005f8a:	613b      	str	r3, [r7, #16]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	613b      	str	r3, [r7, #16]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	613b      	str	r3, [r7, #16]
 8005f9c:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	330c      	adds	r3, #12
 8005fa8:	4619      	mov	r1, r3
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fae:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8005fb4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8005fb6:	f7fc fc1f 	bl	80027f8 <HAL_DMA_Start_IT>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d00f      	beq.n	8005fe0 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fc4:	f043 0208 	orr.w	r2, r3, #8
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e022      	b.n	8006026 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	69db      	ldr	r3, [r3, #28]
 8005fe6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d107      	bne.n	8005ffe <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	69da      	ldr	r2, [r3, #28]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ffc:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	f003 0301 	and.w	r3, r3, #1
 8006008:	2b00      	cmp	r3, #0
 800600a:	d107      	bne.n	800601c <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	685a      	ldr	r2, [r3, #4]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f042 0201 	orr.w	r2, r2, #1
 800601a:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2200      	movs	r2, #0
 8006020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8006024:	2300      	movs	r3, #0
}
 8006026:	4618      	mov	r0, r3
 8006028:	3718      	adds	r7, #24
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
 800602e:	bf00      	nop
 8006030:	08006109 	.word	0x08006109
 8006034:	080060c7 	.word	0x080060c7
 8006038:	08006125 	.word	0x08006125

0800603c <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b082      	sub	sp, #8
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	4798      	blx	r3
}
 800604c:	bf00      	nop
 800604e:	3708      	adds	r7, #8
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8006054:	b480      	push	{r7}
 8006056:	b083      	sub	sp, #12
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800605c:	bf00      	nop
 800605e:	370c      	adds	r7, #12
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006074:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	69db      	ldr	r3, [r3, #28]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d10e      	bne.n	800609c <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	685a      	ldr	r2, [r3, #4]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f022 0202 	bic.w	r2, r2, #2
 800608c:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2200      	movs	r2, #0
 8006092:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 800609c:	68f8      	ldr	r0, [r7, #12]
 800609e:	f7fa fce3 	bl	8000a68 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80060a2:	bf00      	nop
 80060a4:	3710      	adds	r7, #16
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}

080060aa <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80060aa:	b580      	push	{r7, lr}
 80060ac:	b084      	sub	sp, #16
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b6:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 80060b8:	68f8      	ldr	r0, [r7, #12]
 80060ba:	f7fa fca5 	bl	8000a08 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80060be:	bf00      	nop
 80060c0:	3710      	adds	r7, #16
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}

080060c6 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80060c6:	b580      	push	{r7, lr}
 80060c8:	b084      	sub	sp, #16
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d2:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	69db      	ldr	r3, [r3, #28]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d10e      	bne.n	80060fa <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	685a      	ldr	r2, [r3, #4]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f022 0201 	bic.w	r2, r2, #1
 80060ea:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2200      	movs	r2, #0
 80060f0:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2201      	movs	r2, #1
 80060f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 80060fa:	68f8      	ldr	r0, [r7, #12]
 80060fc:	f7fa fc54 	bl	80009a8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006100:	bf00      	nop
 8006102:	3710      	adds	r7, #16
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006114:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8006116:	68f8      	ldr	r0, [r7, #12]
 8006118:	f7fa fc1a 	bl	8000950 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800611c:	bf00      	nop
 800611e:	3710      	adds	r7, #16
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b084      	sub	sp, #16
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006130:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	685a      	ldr	r2, [r3, #4]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f022 0203 	bic.w	r2, r2, #3
 8006140:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2200      	movs	r2, #0
 8006146:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2200      	movs	r2, #0
 800614c:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2201      	movs	r2, #1
 8006152:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800615a:	f043 0208 	orr.w	r2, r3, #8
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	f7ff ff76 	bl	8006054 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006168:	bf00      	nop
 800616a:	3710      	adds	r7, #16
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b082      	sub	sp, #8
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617c:	881a      	ldrh	r2, [r3, #0]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006188:	1c9a      	adds	r2, r3, #2
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006192:	b29b      	uxth	r3, r3
 8006194:	3b01      	subs	r3, #1
 8006196:	b29a      	uxth	r2, r3
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d10e      	bne.n	80061c4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	685a      	ldr	r2, [r3, #4]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80061b4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2201      	movs	r2, #1
 80061ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f7fa fc52 	bl	8000a68 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80061c4:	bf00      	nop
 80061c6:	3708      	adds	r7, #8
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}

080061cc <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b082      	sub	sp, #8
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68da      	ldr	r2, [r3, #12]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061de:	b292      	uxth	r2, r2
 80061e0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e6:	1c9a      	adds	r2, r3, #2
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	3b01      	subs	r3, #1
 80061f4:	b29a      	uxth	r2, r3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80061fe:	b29b      	uxth	r3, r3
 8006200:	2b00      	cmp	r3, #0
 8006202:	d10e      	bne.n	8006222 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	685a      	ldr	r2, [r3, #4]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006212:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f7fa fbc3 	bl	80009a8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006222:	bf00      	nop
 8006224:	3708      	adds	r7, #8
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}

0800622a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800622a:	b580      	push	{r7, lr}
 800622c:	b086      	sub	sp, #24
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006240:	b2db      	uxtb	r3, r3
 8006242:	2b04      	cmp	r3, #4
 8006244:	d13a      	bne.n	80062bc <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	f003 0301 	and.w	r3, r3, #1
 800624c:	2b01      	cmp	r3, #1
 800624e:	d109      	bne.n	8006264 <I2S_IRQHandler+0x3a>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800625a:	2b40      	cmp	r3, #64	; 0x40
 800625c:	d102      	bne.n	8006264 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f7ff ffb4 	bl	80061cc <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800626a:	2b40      	cmp	r3, #64	; 0x40
 800626c:	d126      	bne.n	80062bc <I2S_IRQHandler+0x92>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	f003 0320 	and.w	r3, r3, #32
 8006278:	2b20      	cmp	r3, #32
 800627a:	d11f      	bne.n	80062bc <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	685a      	ldr	r2, [r3, #4]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800628a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800628c:	2300      	movs	r3, #0
 800628e:	613b      	str	r3, [r7, #16]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	613b      	str	r3, [r7, #16]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	613b      	str	r3, [r7, #16]
 80062a0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2201      	movs	r2, #1
 80062a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ae:	f043 0202 	orr.w	r2, r3, #2
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f7ff fecc 	bl	8006054 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	2b03      	cmp	r3, #3
 80062c6:	d136      	bne.n	8006336 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	f003 0302 	and.w	r3, r3, #2
 80062ce:	2b02      	cmp	r3, #2
 80062d0:	d109      	bne.n	80062e6 <I2S_IRQHandler+0xbc>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062dc:	2b80      	cmp	r3, #128	; 0x80
 80062de:	d102      	bne.n	80062e6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f7ff ff45 	bl	8006170 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	f003 0308 	and.w	r3, r3, #8
 80062ec:	2b08      	cmp	r3, #8
 80062ee:	d122      	bne.n	8006336 <I2S_IRQHandler+0x10c>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	f003 0320 	and.w	r3, r3, #32
 80062fa:	2b20      	cmp	r3, #32
 80062fc:	d11b      	bne.n	8006336 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	685a      	ldr	r2, [r3, #4]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800630c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800630e:	2300      	movs	r3, #0
 8006310:	60fb      	str	r3, [r7, #12]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	60fb      	str	r3, [r7, #12]
 800631a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006328:	f043 0204 	orr.w	r2, r3, #4
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f7ff fe8f 	bl	8006054 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006336:	bf00      	nop
 8006338:	3718      	adds	r7, #24
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
	...

08006340 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b088      	sub	sp, #32
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a92      	ldr	r2, [pc, #584]	; (80065a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d101      	bne.n	800635e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800635a:	4b92      	ldr	r3, [pc, #584]	; (80065a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800635c:	e001      	b.n	8006362 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800635e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a8b      	ldr	r2, [pc, #556]	; (80065a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d101      	bne.n	800637c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006378:	4b8a      	ldr	r3, [pc, #552]	; (80065a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800637a:	e001      	b.n	8006380 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800637c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800638c:	d004      	beq.n	8006398 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	2b00      	cmp	r3, #0
 8006394:	f040 8099 	bne.w	80064ca <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	f003 0302 	and.w	r3, r3, #2
 800639e:	2b02      	cmp	r3, #2
 80063a0:	d107      	bne.n	80063b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d002      	beq.n	80063b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f000 f925 	bl	80065fc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	f003 0301 	and.w	r3, r3, #1
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d107      	bne.n	80063cc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d002      	beq.n	80063cc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 f9c8 	bl	800675c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80063cc:	69bb      	ldr	r3, [r7, #24]
 80063ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063d2:	2b40      	cmp	r3, #64	; 0x40
 80063d4:	d13a      	bne.n	800644c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	f003 0320 	and.w	r3, r3, #32
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d035      	beq.n	800644c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a6e      	ldr	r2, [pc, #440]	; (80065a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d101      	bne.n	80063ee <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80063ea:	4b6e      	ldr	r3, [pc, #440]	; (80065a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80063ec:	e001      	b.n	80063f2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80063ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80063f2:	685a      	ldr	r2, [r3, #4]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4969      	ldr	r1, [pc, #420]	; (80065a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80063fa:	428b      	cmp	r3, r1
 80063fc:	d101      	bne.n	8006402 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80063fe:	4b69      	ldr	r3, [pc, #420]	; (80065a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006400:	e001      	b.n	8006406 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8006402:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006406:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800640a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	685a      	ldr	r2, [r3, #4]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800641a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800641c:	2300      	movs	r3, #0
 800641e:	60fb      	str	r3, [r7, #12]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	60fb      	str	r3, [r7, #12]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	60fb      	str	r3, [r7, #12]
 8006430:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2201      	movs	r2, #1
 8006436:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800643e:	f043 0202 	orr.w	r2, r3, #2
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f7ff fe04 	bl	8006054 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	f003 0308 	and.w	r3, r3, #8
 8006452:	2b08      	cmp	r3, #8
 8006454:	f040 80c3 	bne.w	80065de <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	f003 0320 	and.w	r3, r3, #32
 800645e:	2b00      	cmp	r3, #0
 8006460:	f000 80bd 	beq.w	80065de <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	685a      	ldr	r2, [r3, #4]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006472:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a49      	ldr	r2, [pc, #292]	; (80065a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d101      	bne.n	8006482 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800647e:	4b49      	ldr	r3, [pc, #292]	; (80065a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006480:	e001      	b.n	8006486 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8006482:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006486:	685a      	ldr	r2, [r3, #4]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4944      	ldr	r1, [pc, #272]	; (80065a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800648e:	428b      	cmp	r3, r1
 8006490:	d101      	bne.n	8006496 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8006492:	4b44      	ldr	r3, [pc, #272]	; (80065a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006494:	e001      	b.n	800649a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8006496:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800649a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800649e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80064a0:	2300      	movs	r3, #0
 80064a2:	60bb      	str	r3, [r7, #8]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	60bb      	str	r3, [r7, #8]
 80064ac:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2201      	movs	r2, #1
 80064b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ba:	f043 0204 	orr.w	r2, r3, #4
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f7ff fdc6 	bl	8006054 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80064c8:	e089      	b.n	80065de <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80064ca:	69bb      	ldr	r3, [r7, #24]
 80064cc:	f003 0302 	and.w	r3, r3, #2
 80064d0:	2b02      	cmp	r3, #2
 80064d2:	d107      	bne.n	80064e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d002      	beq.n	80064e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 f8be 	bl	8006660 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	f003 0301 	and.w	r3, r3, #1
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d107      	bne.n	80064fe <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d002      	beq.n	80064fe <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f000 f8fd 	bl	80066f8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80064fe:	69fb      	ldr	r3, [r7, #28]
 8006500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006504:	2b40      	cmp	r3, #64	; 0x40
 8006506:	d12f      	bne.n	8006568 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	f003 0320 	and.w	r3, r3, #32
 800650e:	2b00      	cmp	r3, #0
 8006510:	d02a      	beq.n	8006568 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	685a      	ldr	r2, [r3, #4]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006520:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a1e      	ldr	r2, [pc, #120]	; (80065a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d101      	bne.n	8006530 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800652c:	4b1d      	ldr	r3, [pc, #116]	; (80065a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800652e:	e001      	b.n	8006534 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006530:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006534:	685a      	ldr	r2, [r3, #4]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4919      	ldr	r1, [pc, #100]	; (80065a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800653c:	428b      	cmp	r3, r1
 800653e:	d101      	bne.n	8006544 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006540:	4b18      	ldr	r3, [pc, #96]	; (80065a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006542:	e001      	b.n	8006548 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006544:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006548:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800654c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2201      	movs	r2, #1
 8006552:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800655a:	f043 0202 	orr.w	r2, r3, #2
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f7ff fd76 	bl	8006054 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	f003 0308 	and.w	r3, r3, #8
 800656e:	2b08      	cmp	r3, #8
 8006570:	d136      	bne.n	80065e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	f003 0320 	and.w	r3, r3, #32
 8006578:	2b00      	cmp	r3, #0
 800657a:	d031      	beq.n	80065e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a07      	ldr	r2, [pc, #28]	; (80065a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d101      	bne.n	800658a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006586:	4b07      	ldr	r3, [pc, #28]	; (80065a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006588:	e001      	b.n	800658e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800658a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800658e:	685a      	ldr	r2, [r3, #4]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4902      	ldr	r1, [pc, #8]	; (80065a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006596:	428b      	cmp	r3, r1
 8006598:	d106      	bne.n	80065a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800659a:	4b02      	ldr	r3, [pc, #8]	; (80065a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800659c:	e006      	b.n	80065ac <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800659e:	bf00      	nop
 80065a0:	40003800 	.word	0x40003800
 80065a4:	40003400 	.word	0x40003400
 80065a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80065b0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	685a      	ldr	r2, [r3, #4]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80065c0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2201      	movs	r2, #1
 80065c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ce:	f043 0204 	orr.w	r2, r3, #4
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f7ff fd3c 	bl	8006054 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80065dc:	e000      	b.n	80065e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80065de:	bf00      	nop
}
 80065e0:	bf00      	nop
 80065e2:	3720      	adds	r7, #32
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b083      	sub	sp, #12
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80065f0:	bf00      	nop
 80065f2:	370c      	adds	r7, #12
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006608:	1c99      	adds	r1, r3, #2
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	6251      	str	r1, [r2, #36]	; 0x24
 800660e:	881a      	ldrh	r2, [r3, #0]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800661a:	b29b      	uxth	r3, r3
 800661c:	3b01      	subs	r3, #1
 800661e:	b29a      	uxth	r2, r3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006628:	b29b      	uxth	r3, r3
 800662a:	2b00      	cmp	r3, #0
 800662c:	d113      	bne.n	8006656 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	685a      	ldr	r2, [r3, #4]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800663c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006642:	b29b      	uxth	r3, r3
 8006644:	2b00      	cmp	r3, #0
 8006646:	d106      	bne.n	8006656 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2201      	movs	r2, #1
 800664c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f7ff ffc9 	bl	80065e8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006656:	bf00      	nop
 8006658:	3708      	adds	r7, #8
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
	...

08006660 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b082      	sub	sp, #8
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666c:	1c99      	adds	r1, r3, #2
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	6251      	str	r1, [r2, #36]	; 0x24
 8006672:	8819      	ldrh	r1, [r3, #0]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a1d      	ldr	r2, [pc, #116]	; (80066f0 <I2SEx_TxISR_I2SExt+0x90>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d101      	bne.n	8006682 <I2SEx_TxISR_I2SExt+0x22>
 800667e:	4b1d      	ldr	r3, [pc, #116]	; (80066f4 <I2SEx_TxISR_I2SExt+0x94>)
 8006680:	e001      	b.n	8006686 <I2SEx_TxISR_I2SExt+0x26>
 8006682:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006686:	460a      	mov	r2, r1
 8006688:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800668e:	b29b      	uxth	r3, r3
 8006690:	3b01      	subs	r3, #1
 8006692:	b29a      	uxth	r2, r3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800669c:	b29b      	uxth	r3, r3
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d121      	bne.n	80066e6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a12      	ldr	r2, [pc, #72]	; (80066f0 <I2SEx_TxISR_I2SExt+0x90>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d101      	bne.n	80066b0 <I2SEx_TxISR_I2SExt+0x50>
 80066ac:	4b11      	ldr	r3, [pc, #68]	; (80066f4 <I2SEx_TxISR_I2SExt+0x94>)
 80066ae:	e001      	b.n	80066b4 <I2SEx_TxISR_I2SExt+0x54>
 80066b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80066b4:	685a      	ldr	r2, [r3, #4]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	490d      	ldr	r1, [pc, #52]	; (80066f0 <I2SEx_TxISR_I2SExt+0x90>)
 80066bc:	428b      	cmp	r3, r1
 80066be:	d101      	bne.n	80066c4 <I2SEx_TxISR_I2SExt+0x64>
 80066c0:	4b0c      	ldr	r3, [pc, #48]	; (80066f4 <I2SEx_TxISR_I2SExt+0x94>)
 80066c2:	e001      	b.n	80066c8 <I2SEx_TxISR_I2SExt+0x68>
 80066c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80066c8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80066cc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d106      	bne.n	80066e6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2201      	movs	r2, #1
 80066dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f7ff ff81 	bl	80065e8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80066e6:	bf00      	nop
 80066e8:	3708      	adds	r7, #8
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	bf00      	nop
 80066f0:	40003800 	.word	0x40003800
 80066f4:	40003400 	.word	0x40003400

080066f8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b082      	sub	sp, #8
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	68d8      	ldr	r0, [r3, #12]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800670a:	1c99      	adds	r1, r3, #2
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006710:	b282      	uxth	r2, r0
 8006712:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006718:	b29b      	uxth	r3, r3
 800671a:	3b01      	subs	r3, #1
 800671c:	b29a      	uxth	r2, r3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006726:	b29b      	uxth	r3, r3
 8006728:	2b00      	cmp	r3, #0
 800672a:	d113      	bne.n	8006754 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	685a      	ldr	r2, [r3, #4]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800673a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006740:	b29b      	uxth	r3, r3
 8006742:	2b00      	cmp	r3, #0
 8006744:	d106      	bne.n	8006754 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2201      	movs	r2, #1
 800674a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f7ff ff4a 	bl	80065e8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006754:	bf00      	nop
 8006756:	3708      	adds	r7, #8
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b082      	sub	sp, #8
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a20      	ldr	r2, [pc, #128]	; (80067ec <I2SEx_RxISR_I2SExt+0x90>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d101      	bne.n	8006772 <I2SEx_RxISR_I2SExt+0x16>
 800676e:	4b20      	ldr	r3, [pc, #128]	; (80067f0 <I2SEx_RxISR_I2SExt+0x94>)
 8006770:	e001      	b.n	8006776 <I2SEx_RxISR_I2SExt+0x1a>
 8006772:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006776:	68d8      	ldr	r0, [r3, #12]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800677c:	1c99      	adds	r1, r3, #2
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006782:	b282      	uxth	r2, r0
 8006784:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800678a:	b29b      	uxth	r3, r3
 800678c:	3b01      	subs	r3, #1
 800678e:	b29a      	uxth	r2, r3
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006798:	b29b      	uxth	r3, r3
 800679a:	2b00      	cmp	r3, #0
 800679c:	d121      	bne.n	80067e2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a12      	ldr	r2, [pc, #72]	; (80067ec <I2SEx_RxISR_I2SExt+0x90>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d101      	bne.n	80067ac <I2SEx_RxISR_I2SExt+0x50>
 80067a8:	4b11      	ldr	r3, [pc, #68]	; (80067f0 <I2SEx_RxISR_I2SExt+0x94>)
 80067aa:	e001      	b.n	80067b0 <I2SEx_RxISR_I2SExt+0x54>
 80067ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80067b0:	685a      	ldr	r2, [r3, #4]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	490d      	ldr	r1, [pc, #52]	; (80067ec <I2SEx_RxISR_I2SExt+0x90>)
 80067b8:	428b      	cmp	r3, r1
 80067ba:	d101      	bne.n	80067c0 <I2SEx_RxISR_I2SExt+0x64>
 80067bc:	4b0c      	ldr	r3, [pc, #48]	; (80067f0 <I2SEx_RxISR_I2SExt+0x94>)
 80067be:	e001      	b.n	80067c4 <I2SEx_RxISR_I2SExt+0x68>
 80067c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80067c4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80067c8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d106      	bne.n	80067e2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f7ff ff03 	bl	80065e8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80067e2:	bf00      	nop
 80067e4:	3708      	adds	r7, #8
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop
 80067ec:	40003800 	.word	0x40003800
 80067f0:	40003400 	.word	0x40003400

080067f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b086      	sub	sp, #24
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d101      	bne.n	8006806 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e267      	b.n	8006cd6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 0301 	and.w	r3, r3, #1
 800680e:	2b00      	cmp	r3, #0
 8006810:	d075      	beq.n	80068fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006812:	4b88      	ldr	r3, [pc, #544]	; (8006a34 <HAL_RCC_OscConfig+0x240>)
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	f003 030c 	and.w	r3, r3, #12
 800681a:	2b04      	cmp	r3, #4
 800681c:	d00c      	beq.n	8006838 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800681e:	4b85      	ldr	r3, [pc, #532]	; (8006a34 <HAL_RCC_OscConfig+0x240>)
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006826:	2b08      	cmp	r3, #8
 8006828:	d112      	bne.n	8006850 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800682a:	4b82      	ldr	r3, [pc, #520]	; (8006a34 <HAL_RCC_OscConfig+0x240>)
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006832:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006836:	d10b      	bne.n	8006850 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006838:	4b7e      	ldr	r3, [pc, #504]	; (8006a34 <HAL_RCC_OscConfig+0x240>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006840:	2b00      	cmp	r3, #0
 8006842:	d05b      	beq.n	80068fc <HAL_RCC_OscConfig+0x108>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d157      	bne.n	80068fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	e242      	b.n	8006cd6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006858:	d106      	bne.n	8006868 <HAL_RCC_OscConfig+0x74>
 800685a:	4b76      	ldr	r3, [pc, #472]	; (8006a34 <HAL_RCC_OscConfig+0x240>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a75      	ldr	r2, [pc, #468]	; (8006a34 <HAL_RCC_OscConfig+0x240>)
 8006860:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006864:	6013      	str	r3, [r2, #0]
 8006866:	e01d      	b.n	80068a4 <HAL_RCC_OscConfig+0xb0>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006870:	d10c      	bne.n	800688c <HAL_RCC_OscConfig+0x98>
 8006872:	4b70      	ldr	r3, [pc, #448]	; (8006a34 <HAL_RCC_OscConfig+0x240>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a6f      	ldr	r2, [pc, #444]	; (8006a34 <HAL_RCC_OscConfig+0x240>)
 8006878:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800687c:	6013      	str	r3, [r2, #0]
 800687e:	4b6d      	ldr	r3, [pc, #436]	; (8006a34 <HAL_RCC_OscConfig+0x240>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a6c      	ldr	r2, [pc, #432]	; (8006a34 <HAL_RCC_OscConfig+0x240>)
 8006884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006888:	6013      	str	r3, [r2, #0]
 800688a:	e00b      	b.n	80068a4 <HAL_RCC_OscConfig+0xb0>
 800688c:	4b69      	ldr	r3, [pc, #420]	; (8006a34 <HAL_RCC_OscConfig+0x240>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a68      	ldr	r2, [pc, #416]	; (8006a34 <HAL_RCC_OscConfig+0x240>)
 8006892:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006896:	6013      	str	r3, [r2, #0]
 8006898:	4b66      	ldr	r3, [pc, #408]	; (8006a34 <HAL_RCC_OscConfig+0x240>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a65      	ldr	r2, [pc, #404]	; (8006a34 <HAL_RCC_OscConfig+0x240>)
 800689e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d013      	beq.n	80068d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068ac:	f7fb fdb4 	bl	8002418 <HAL_GetTick>
 80068b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068b2:	e008      	b.n	80068c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068b4:	f7fb fdb0 	bl	8002418 <HAL_GetTick>
 80068b8:	4602      	mov	r2, r0
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	1ad3      	subs	r3, r2, r3
 80068be:	2b64      	cmp	r3, #100	; 0x64
 80068c0:	d901      	bls.n	80068c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80068c2:	2303      	movs	r3, #3
 80068c4:	e207      	b.n	8006cd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068c6:	4b5b      	ldr	r3, [pc, #364]	; (8006a34 <HAL_RCC_OscConfig+0x240>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d0f0      	beq.n	80068b4 <HAL_RCC_OscConfig+0xc0>
 80068d2:	e014      	b.n	80068fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068d4:	f7fb fda0 	bl	8002418 <HAL_GetTick>
 80068d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068da:	e008      	b.n	80068ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068dc:	f7fb fd9c 	bl	8002418 <HAL_GetTick>
 80068e0:	4602      	mov	r2, r0
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	1ad3      	subs	r3, r2, r3
 80068e6:	2b64      	cmp	r3, #100	; 0x64
 80068e8:	d901      	bls.n	80068ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80068ea:	2303      	movs	r3, #3
 80068ec:	e1f3      	b.n	8006cd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068ee:	4b51      	ldr	r3, [pc, #324]	; (8006a34 <HAL_RCC_OscConfig+0x240>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d1f0      	bne.n	80068dc <HAL_RCC_OscConfig+0xe8>
 80068fa:	e000      	b.n	80068fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 0302 	and.w	r3, r3, #2
 8006906:	2b00      	cmp	r3, #0
 8006908:	d063      	beq.n	80069d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800690a:	4b4a      	ldr	r3, [pc, #296]	; (8006a34 <HAL_RCC_OscConfig+0x240>)
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	f003 030c 	and.w	r3, r3, #12
 8006912:	2b00      	cmp	r3, #0
 8006914:	d00b      	beq.n	800692e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006916:	4b47      	ldr	r3, [pc, #284]	; (8006a34 <HAL_RCC_OscConfig+0x240>)
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800691e:	2b08      	cmp	r3, #8
 8006920:	d11c      	bne.n	800695c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006922:	4b44      	ldr	r3, [pc, #272]	; (8006a34 <HAL_RCC_OscConfig+0x240>)
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800692a:	2b00      	cmp	r3, #0
 800692c:	d116      	bne.n	800695c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800692e:	4b41      	ldr	r3, [pc, #260]	; (8006a34 <HAL_RCC_OscConfig+0x240>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f003 0302 	and.w	r3, r3, #2
 8006936:	2b00      	cmp	r3, #0
 8006938:	d005      	beq.n	8006946 <HAL_RCC_OscConfig+0x152>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	2b01      	cmp	r3, #1
 8006940:	d001      	beq.n	8006946 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	e1c7      	b.n	8006cd6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006946:	4b3b      	ldr	r3, [pc, #236]	; (8006a34 <HAL_RCC_OscConfig+0x240>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	691b      	ldr	r3, [r3, #16]
 8006952:	00db      	lsls	r3, r3, #3
 8006954:	4937      	ldr	r1, [pc, #220]	; (8006a34 <HAL_RCC_OscConfig+0x240>)
 8006956:	4313      	orrs	r3, r2
 8006958:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800695a:	e03a      	b.n	80069d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d020      	beq.n	80069a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006964:	4b34      	ldr	r3, [pc, #208]	; (8006a38 <HAL_RCC_OscConfig+0x244>)
 8006966:	2201      	movs	r2, #1
 8006968:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800696a:	f7fb fd55 	bl	8002418 <HAL_GetTick>
 800696e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006970:	e008      	b.n	8006984 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006972:	f7fb fd51 	bl	8002418 <HAL_GetTick>
 8006976:	4602      	mov	r2, r0
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	1ad3      	subs	r3, r2, r3
 800697c:	2b02      	cmp	r3, #2
 800697e:	d901      	bls.n	8006984 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006980:	2303      	movs	r3, #3
 8006982:	e1a8      	b.n	8006cd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006984:	4b2b      	ldr	r3, [pc, #172]	; (8006a34 <HAL_RCC_OscConfig+0x240>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 0302 	and.w	r3, r3, #2
 800698c:	2b00      	cmp	r3, #0
 800698e:	d0f0      	beq.n	8006972 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006990:	4b28      	ldr	r3, [pc, #160]	; (8006a34 <HAL_RCC_OscConfig+0x240>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	691b      	ldr	r3, [r3, #16]
 800699c:	00db      	lsls	r3, r3, #3
 800699e:	4925      	ldr	r1, [pc, #148]	; (8006a34 <HAL_RCC_OscConfig+0x240>)
 80069a0:	4313      	orrs	r3, r2
 80069a2:	600b      	str	r3, [r1, #0]
 80069a4:	e015      	b.n	80069d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80069a6:	4b24      	ldr	r3, [pc, #144]	; (8006a38 <HAL_RCC_OscConfig+0x244>)
 80069a8:	2200      	movs	r2, #0
 80069aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069ac:	f7fb fd34 	bl	8002418 <HAL_GetTick>
 80069b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069b2:	e008      	b.n	80069c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80069b4:	f7fb fd30 	bl	8002418 <HAL_GetTick>
 80069b8:	4602      	mov	r2, r0
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	1ad3      	subs	r3, r2, r3
 80069be:	2b02      	cmp	r3, #2
 80069c0:	d901      	bls.n	80069c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80069c2:	2303      	movs	r3, #3
 80069c4:	e187      	b.n	8006cd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069c6:	4b1b      	ldr	r3, [pc, #108]	; (8006a34 <HAL_RCC_OscConfig+0x240>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f003 0302 	and.w	r3, r3, #2
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d1f0      	bne.n	80069b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f003 0308 	and.w	r3, r3, #8
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d036      	beq.n	8006a4c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	695b      	ldr	r3, [r3, #20]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d016      	beq.n	8006a14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069e6:	4b15      	ldr	r3, [pc, #84]	; (8006a3c <HAL_RCC_OscConfig+0x248>)
 80069e8:	2201      	movs	r2, #1
 80069ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069ec:	f7fb fd14 	bl	8002418 <HAL_GetTick>
 80069f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069f2:	e008      	b.n	8006a06 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80069f4:	f7fb fd10 	bl	8002418 <HAL_GetTick>
 80069f8:	4602      	mov	r2, r0
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	1ad3      	subs	r3, r2, r3
 80069fe:	2b02      	cmp	r3, #2
 8006a00:	d901      	bls.n	8006a06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006a02:	2303      	movs	r3, #3
 8006a04:	e167      	b.n	8006cd6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a06:	4b0b      	ldr	r3, [pc, #44]	; (8006a34 <HAL_RCC_OscConfig+0x240>)
 8006a08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a0a:	f003 0302 	and.w	r3, r3, #2
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d0f0      	beq.n	80069f4 <HAL_RCC_OscConfig+0x200>
 8006a12:	e01b      	b.n	8006a4c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a14:	4b09      	ldr	r3, [pc, #36]	; (8006a3c <HAL_RCC_OscConfig+0x248>)
 8006a16:	2200      	movs	r2, #0
 8006a18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a1a:	f7fb fcfd 	bl	8002418 <HAL_GetTick>
 8006a1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a20:	e00e      	b.n	8006a40 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a22:	f7fb fcf9 	bl	8002418 <HAL_GetTick>
 8006a26:	4602      	mov	r2, r0
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	1ad3      	subs	r3, r2, r3
 8006a2c:	2b02      	cmp	r3, #2
 8006a2e:	d907      	bls.n	8006a40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006a30:	2303      	movs	r3, #3
 8006a32:	e150      	b.n	8006cd6 <HAL_RCC_OscConfig+0x4e2>
 8006a34:	40023800 	.word	0x40023800
 8006a38:	42470000 	.word	0x42470000
 8006a3c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a40:	4b88      	ldr	r3, [pc, #544]	; (8006c64 <HAL_RCC_OscConfig+0x470>)
 8006a42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a44:	f003 0302 	and.w	r3, r3, #2
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d1ea      	bne.n	8006a22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f003 0304 	and.w	r3, r3, #4
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	f000 8097 	beq.w	8006b88 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a5e:	4b81      	ldr	r3, [pc, #516]	; (8006c64 <HAL_RCC_OscConfig+0x470>)
 8006a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d10f      	bne.n	8006a8a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	60bb      	str	r3, [r7, #8]
 8006a6e:	4b7d      	ldr	r3, [pc, #500]	; (8006c64 <HAL_RCC_OscConfig+0x470>)
 8006a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a72:	4a7c      	ldr	r2, [pc, #496]	; (8006c64 <HAL_RCC_OscConfig+0x470>)
 8006a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a78:	6413      	str	r3, [r2, #64]	; 0x40
 8006a7a:	4b7a      	ldr	r3, [pc, #488]	; (8006c64 <HAL_RCC_OscConfig+0x470>)
 8006a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a82:	60bb      	str	r3, [r7, #8]
 8006a84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a86:	2301      	movs	r3, #1
 8006a88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a8a:	4b77      	ldr	r3, [pc, #476]	; (8006c68 <HAL_RCC_OscConfig+0x474>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d118      	bne.n	8006ac8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a96:	4b74      	ldr	r3, [pc, #464]	; (8006c68 <HAL_RCC_OscConfig+0x474>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a73      	ldr	r2, [pc, #460]	; (8006c68 <HAL_RCC_OscConfig+0x474>)
 8006a9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006aa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006aa2:	f7fb fcb9 	bl	8002418 <HAL_GetTick>
 8006aa6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006aa8:	e008      	b.n	8006abc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006aaa:	f7fb fcb5 	bl	8002418 <HAL_GetTick>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	1ad3      	subs	r3, r2, r3
 8006ab4:	2b02      	cmp	r3, #2
 8006ab6:	d901      	bls.n	8006abc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006ab8:	2303      	movs	r3, #3
 8006aba:	e10c      	b.n	8006cd6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006abc:	4b6a      	ldr	r3, [pc, #424]	; (8006c68 <HAL_RCC_OscConfig+0x474>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d0f0      	beq.n	8006aaa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d106      	bne.n	8006ade <HAL_RCC_OscConfig+0x2ea>
 8006ad0:	4b64      	ldr	r3, [pc, #400]	; (8006c64 <HAL_RCC_OscConfig+0x470>)
 8006ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ad4:	4a63      	ldr	r2, [pc, #396]	; (8006c64 <HAL_RCC_OscConfig+0x470>)
 8006ad6:	f043 0301 	orr.w	r3, r3, #1
 8006ada:	6713      	str	r3, [r2, #112]	; 0x70
 8006adc:	e01c      	b.n	8006b18 <HAL_RCC_OscConfig+0x324>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	2b05      	cmp	r3, #5
 8006ae4:	d10c      	bne.n	8006b00 <HAL_RCC_OscConfig+0x30c>
 8006ae6:	4b5f      	ldr	r3, [pc, #380]	; (8006c64 <HAL_RCC_OscConfig+0x470>)
 8006ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aea:	4a5e      	ldr	r2, [pc, #376]	; (8006c64 <HAL_RCC_OscConfig+0x470>)
 8006aec:	f043 0304 	orr.w	r3, r3, #4
 8006af0:	6713      	str	r3, [r2, #112]	; 0x70
 8006af2:	4b5c      	ldr	r3, [pc, #368]	; (8006c64 <HAL_RCC_OscConfig+0x470>)
 8006af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006af6:	4a5b      	ldr	r2, [pc, #364]	; (8006c64 <HAL_RCC_OscConfig+0x470>)
 8006af8:	f043 0301 	orr.w	r3, r3, #1
 8006afc:	6713      	str	r3, [r2, #112]	; 0x70
 8006afe:	e00b      	b.n	8006b18 <HAL_RCC_OscConfig+0x324>
 8006b00:	4b58      	ldr	r3, [pc, #352]	; (8006c64 <HAL_RCC_OscConfig+0x470>)
 8006b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b04:	4a57      	ldr	r2, [pc, #348]	; (8006c64 <HAL_RCC_OscConfig+0x470>)
 8006b06:	f023 0301 	bic.w	r3, r3, #1
 8006b0a:	6713      	str	r3, [r2, #112]	; 0x70
 8006b0c:	4b55      	ldr	r3, [pc, #340]	; (8006c64 <HAL_RCC_OscConfig+0x470>)
 8006b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b10:	4a54      	ldr	r2, [pc, #336]	; (8006c64 <HAL_RCC_OscConfig+0x470>)
 8006b12:	f023 0304 	bic.w	r3, r3, #4
 8006b16:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d015      	beq.n	8006b4c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b20:	f7fb fc7a 	bl	8002418 <HAL_GetTick>
 8006b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b26:	e00a      	b.n	8006b3e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b28:	f7fb fc76 	bl	8002418 <HAL_GetTick>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	1ad3      	subs	r3, r2, r3
 8006b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d901      	bls.n	8006b3e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006b3a:	2303      	movs	r3, #3
 8006b3c:	e0cb      	b.n	8006cd6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b3e:	4b49      	ldr	r3, [pc, #292]	; (8006c64 <HAL_RCC_OscConfig+0x470>)
 8006b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b42:	f003 0302 	and.w	r3, r3, #2
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d0ee      	beq.n	8006b28 <HAL_RCC_OscConfig+0x334>
 8006b4a:	e014      	b.n	8006b76 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b4c:	f7fb fc64 	bl	8002418 <HAL_GetTick>
 8006b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b52:	e00a      	b.n	8006b6a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b54:	f7fb fc60 	bl	8002418 <HAL_GetTick>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	1ad3      	subs	r3, r2, r3
 8006b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d901      	bls.n	8006b6a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006b66:	2303      	movs	r3, #3
 8006b68:	e0b5      	b.n	8006cd6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b6a:	4b3e      	ldr	r3, [pc, #248]	; (8006c64 <HAL_RCC_OscConfig+0x470>)
 8006b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b6e:	f003 0302 	and.w	r3, r3, #2
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d1ee      	bne.n	8006b54 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b76:	7dfb      	ldrb	r3, [r7, #23]
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d105      	bne.n	8006b88 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b7c:	4b39      	ldr	r3, [pc, #228]	; (8006c64 <HAL_RCC_OscConfig+0x470>)
 8006b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b80:	4a38      	ldr	r2, [pc, #224]	; (8006c64 <HAL_RCC_OscConfig+0x470>)
 8006b82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b86:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	699b      	ldr	r3, [r3, #24]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	f000 80a1 	beq.w	8006cd4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006b92:	4b34      	ldr	r3, [pc, #208]	; (8006c64 <HAL_RCC_OscConfig+0x470>)
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	f003 030c 	and.w	r3, r3, #12
 8006b9a:	2b08      	cmp	r3, #8
 8006b9c:	d05c      	beq.n	8006c58 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	699b      	ldr	r3, [r3, #24]
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	d141      	bne.n	8006c2a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ba6:	4b31      	ldr	r3, [pc, #196]	; (8006c6c <HAL_RCC_OscConfig+0x478>)
 8006ba8:	2200      	movs	r2, #0
 8006baa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bac:	f7fb fc34 	bl	8002418 <HAL_GetTick>
 8006bb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bb2:	e008      	b.n	8006bc6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bb4:	f7fb fc30 	bl	8002418 <HAL_GetTick>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	1ad3      	subs	r3, r2, r3
 8006bbe:	2b02      	cmp	r3, #2
 8006bc0:	d901      	bls.n	8006bc6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006bc2:	2303      	movs	r3, #3
 8006bc4:	e087      	b.n	8006cd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bc6:	4b27      	ldr	r3, [pc, #156]	; (8006c64 <HAL_RCC_OscConfig+0x470>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d1f0      	bne.n	8006bb4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	69da      	ldr	r2, [r3, #28]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6a1b      	ldr	r3, [r3, #32]
 8006bda:	431a      	orrs	r2, r3
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be0:	019b      	lsls	r3, r3, #6
 8006be2:	431a      	orrs	r2, r3
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006be8:	085b      	lsrs	r3, r3, #1
 8006bea:	3b01      	subs	r3, #1
 8006bec:	041b      	lsls	r3, r3, #16
 8006bee:	431a      	orrs	r2, r3
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf4:	061b      	lsls	r3, r3, #24
 8006bf6:	491b      	ldr	r1, [pc, #108]	; (8006c64 <HAL_RCC_OscConfig+0x470>)
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006bfc:	4b1b      	ldr	r3, [pc, #108]	; (8006c6c <HAL_RCC_OscConfig+0x478>)
 8006bfe:	2201      	movs	r2, #1
 8006c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c02:	f7fb fc09 	bl	8002418 <HAL_GetTick>
 8006c06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c08:	e008      	b.n	8006c1c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c0a:	f7fb fc05 	bl	8002418 <HAL_GetTick>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	1ad3      	subs	r3, r2, r3
 8006c14:	2b02      	cmp	r3, #2
 8006c16:	d901      	bls.n	8006c1c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006c18:	2303      	movs	r3, #3
 8006c1a:	e05c      	b.n	8006cd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c1c:	4b11      	ldr	r3, [pc, #68]	; (8006c64 <HAL_RCC_OscConfig+0x470>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d0f0      	beq.n	8006c0a <HAL_RCC_OscConfig+0x416>
 8006c28:	e054      	b.n	8006cd4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c2a:	4b10      	ldr	r3, [pc, #64]	; (8006c6c <HAL_RCC_OscConfig+0x478>)
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c30:	f7fb fbf2 	bl	8002418 <HAL_GetTick>
 8006c34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c36:	e008      	b.n	8006c4a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c38:	f7fb fbee 	bl	8002418 <HAL_GetTick>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	1ad3      	subs	r3, r2, r3
 8006c42:	2b02      	cmp	r3, #2
 8006c44:	d901      	bls.n	8006c4a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006c46:	2303      	movs	r3, #3
 8006c48:	e045      	b.n	8006cd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c4a:	4b06      	ldr	r3, [pc, #24]	; (8006c64 <HAL_RCC_OscConfig+0x470>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d1f0      	bne.n	8006c38 <HAL_RCC_OscConfig+0x444>
 8006c56:	e03d      	b.n	8006cd4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	699b      	ldr	r3, [r3, #24]
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d107      	bne.n	8006c70 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006c60:	2301      	movs	r3, #1
 8006c62:	e038      	b.n	8006cd6 <HAL_RCC_OscConfig+0x4e2>
 8006c64:	40023800 	.word	0x40023800
 8006c68:	40007000 	.word	0x40007000
 8006c6c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006c70:	4b1b      	ldr	r3, [pc, #108]	; (8006ce0 <HAL_RCC_OscConfig+0x4ec>)
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	699b      	ldr	r3, [r3, #24]
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d028      	beq.n	8006cd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d121      	bne.n	8006cd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d11a      	bne.n	8006cd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006c9a:	68fa      	ldr	r2, [r7, #12]
 8006c9c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006ca0:	4013      	ands	r3, r2
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006ca6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d111      	bne.n	8006cd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cb6:	085b      	lsrs	r3, r3, #1
 8006cb8:	3b01      	subs	r3, #1
 8006cba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d107      	bne.n	8006cd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d001      	beq.n	8006cd4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	e000      	b.n	8006cd6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006cd4:	2300      	movs	r3, #0
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3718      	adds	r7, #24
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}
 8006cde:	bf00      	nop
 8006ce0:	40023800 	.word	0x40023800

08006ce4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d101      	bne.n	8006cf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	e0cc      	b.n	8006e92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006cf8:	4b68      	ldr	r3, [pc, #416]	; (8006e9c <HAL_RCC_ClockConfig+0x1b8>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f003 0307 	and.w	r3, r3, #7
 8006d00:	683a      	ldr	r2, [r7, #0]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d90c      	bls.n	8006d20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d06:	4b65      	ldr	r3, [pc, #404]	; (8006e9c <HAL_RCC_ClockConfig+0x1b8>)
 8006d08:	683a      	ldr	r2, [r7, #0]
 8006d0a:	b2d2      	uxtb	r2, r2
 8006d0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d0e:	4b63      	ldr	r3, [pc, #396]	; (8006e9c <HAL_RCC_ClockConfig+0x1b8>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f003 0307 	and.w	r3, r3, #7
 8006d16:	683a      	ldr	r2, [r7, #0]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d001      	beq.n	8006d20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	e0b8      	b.n	8006e92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f003 0302 	and.w	r3, r3, #2
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d020      	beq.n	8006d6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f003 0304 	and.w	r3, r3, #4
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d005      	beq.n	8006d44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d38:	4b59      	ldr	r3, [pc, #356]	; (8006ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	4a58      	ldr	r2, [pc, #352]	; (8006ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006d42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f003 0308 	and.w	r3, r3, #8
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d005      	beq.n	8006d5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006d50:	4b53      	ldr	r3, [pc, #332]	; (8006ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	4a52      	ldr	r2, [pc, #328]	; (8006ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006d5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d5c:	4b50      	ldr	r3, [pc, #320]	; (8006ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	494d      	ldr	r1, [pc, #308]	; (8006ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f003 0301 	and.w	r3, r3, #1
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d044      	beq.n	8006e04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d107      	bne.n	8006d92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d82:	4b47      	ldr	r3, [pc, #284]	; (8006ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d119      	bne.n	8006dc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e07f      	b.n	8006e92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	2b02      	cmp	r3, #2
 8006d98:	d003      	beq.n	8006da2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d9e:	2b03      	cmp	r3, #3
 8006da0:	d107      	bne.n	8006db2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006da2:	4b3f      	ldr	r3, [pc, #252]	; (8006ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d109      	bne.n	8006dc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	e06f      	b.n	8006e92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006db2:	4b3b      	ldr	r3, [pc, #236]	; (8006ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f003 0302 	and.w	r3, r3, #2
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d101      	bne.n	8006dc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e067      	b.n	8006e92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006dc2:	4b37      	ldr	r3, [pc, #220]	; (8006ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	f023 0203 	bic.w	r2, r3, #3
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	4934      	ldr	r1, [pc, #208]	; (8006ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006dd4:	f7fb fb20 	bl	8002418 <HAL_GetTick>
 8006dd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dda:	e00a      	b.n	8006df2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ddc:	f7fb fb1c 	bl	8002418 <HAL_GetTick>
 8006de0:	4602      	mov	r2, r0
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	1ad3      	subs	r3, r2, r3
 8006de6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d901      	bls.n	8006df2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006dee:	2303      	movs	r3, #3
 8006df0:	e04f      	b.n	8006e92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006df2:	4b2b      	ldr	r3, [pc, #172]	; (8006ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	f003 020c 	and.w	r2, r3, #12
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d1eb      	bne.n	8006ddc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006e04:	4b25      	ldr	r3, [pc, #148]	; (8006e9c <HAL_RCC_ClockConfig+0x1b8>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f003 0307 	and.w	r3, r3, #7
 8006e0c:	683a      	ldr	r2, [r7, #0]
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d20c      	bcs.n	8006e2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e12:	4b22      	ldr	r3, [pc, #136]	; (8006e9c <HAL_RCC_ClockConfig+0x1b8>)
 8006e14:	683a      	ldr	r2, [r7, #0]
 8006e16:	b2d2      	uxtb	r2, r2
 8006e18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e1a:	4b20      	ldr	r3, [pc, #128]	; (8006e9c <HAL_RCC_ClockConfig+0x1b8>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f003 0307 	and.w	r3, r3, #7
 8006e22:	683a      	ldr	r2, [r7, #0]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d001      	beq.n	8006e2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e032      	b.n	8006e92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f003 0304 	and.w	r3, r3, #4
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d008      	beq.n	8006e4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e38:	4b19      	ldr	r3, [pc, #100]	; (8006ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	4916      	ldr	r1, [pc, #88]	; (8006ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e46:	4313      	orrs	r3, r2
 8006e48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f003 0308 	and.w	r3, r3, #8
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d009      	beq.n	8006e6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e56:	4b12      	ldr	r3, [pc, #72]	; (8006ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	691b      	ldr	r3, [r3, #16]
 8006e62:	00db      	lsls	r3, r3, #3
 8006e64:	490e      	ldr	r1, [pc, #56]	; (8006ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e66:	4313      	orrs	r3, r2
 8006e68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006e6a:	f000 f821 	bl	8006eb0 <HAL_RCC_GetSysClockFreq>
 8006e6e:	4602      	mov	r2, r0
 8006e70:	4b0b      	ldr	r3, [pc, #44]	; (8006ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	091b      	lsrs	r3, r3, #4
 8006e76:	f003 030f 	and.w	r3, r3, #15
 8006e7a:	490a      	ldr	r1, [pc, #40]	; (8006ea4 <HAL_RCC_ClockConfig+0x1c0>)
 8006e7c:	5ccb      	ldrb	r3, [r1, r3]
 8006e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8006e82:	4a09      	ldr	r2, [pc, #36]	; (8006ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8006e84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006e86:	4b09      	ldr	r3, [pc, #36]	; (8006eac <HAL_RCC_ClockConfig+0x1c8>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f7fb fa80 	bl	8002390 <HAL_InitTick>

  return HAL_OK;
 8006e90:	2300      	movs	r3, #0
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3710      	adds	r7, #16
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	bf00      	nop
 8006e9c:	40023c00 	.word	0x40023c00
 8006ea0:	40023800 	.word	0x40023800
 8006ea4:	0800c114 	.word	0x0800c114
 8006ea8:	20000204 	.word	0x20000204
 8006eac:	20000208 	.word	0x20000208

08006eb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006eb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006eb4:	b094      	sub	sp, #80	; 0x50
 8006eb6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	647b      	str	r3, [r7, #68]	; 0x44
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ec8:	4b79      	ldr	r3, [pc, #484]	; (80070b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	f003 030c 	and.w	r3, r3, #12
 8006ed0:	2b08      	cmp	r3, #8
 8006ed2:	d00d      	beq.n	8006ef0 <HAL_RCC_GetSysClockFreq+0x40>
 8006ed4:	2b08      	cmp	r3, #8
 8006ed6:	f200 80e1 	bhi.w	800709c <HAL_RCC_GetSysClockFreq+0x1ec>
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d002      	beq.n	8006ee4 <HAL_RCC_GetSysClockFreq+0x34>
 8006ede:	2b04      	cmp	r3, #4
 8006ee0:	d003      	beq.n	8006eea <HAL_RCC_GetSysClockFreq+0x3a>
 8006ee2:	e0db      	b.n	800709c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006ee4:	4b73      	ldr	r3, [pc, #460]	; (80070b4 <HAL_RCC_GetSysClockFreq+0x204>)
 8006ee6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006ee8:	e0db      	b.n	80070a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006eea:	4b73      	ldr	r3, [pc, #460]	; (80070b8 <HAL_RCC_GetSysClockFreq+0x208>)
 8006eec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006eee:	e0d8      	b.n	80070a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ef0:	4b6f      	ldr	r3, [pc, #444]	; (80070b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ef8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006efa:	4b6d      	ldr	r3, [pc, #436]	; (80070b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d063      	beq.n	8006fce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f06:	4b6a      	ldr	r3, [pc, #424]	; (80070b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	099b      	lsrs	r3, r3, #6
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f10:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f18:	633b      	str	r3, [r7, #48]	; 0x30
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	637b      	str	r3, [r7, #52]	; 0x34
 8006f1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006f22:	4622      	mov	r2, r4
 8006f24:	462b      	mov	r3, r5
 8006f26:	f04f 0000 	mov.w	r0, #0
 8006f2a:	f04f 0100 	mov.w	r1, #0
 8006f2e:	0159      	lsls	r1, r3, #5
 8006f30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f34:	0150      	lsls	r0, r2, #5
 8006f36:	4602      	mov	r2, r0
 8006f38:	460b      	mov	r3, r1
 8006f3a:	4621      	mov	r1, r4
 8006f3c:	1a51      	subs	r1, r2, r1
 8006f3e:	6139      	str	r1, [r7, #16]
 8006f40:	4629      	mov	r1, r5
 8006f42:	eb63 0301 	sbc.w	r3, r3, r1
 8006f46:	617b      	str	r3, [r7, #20]
 8006f48:	f04f 0200 	mov.w	r2, #0
 8006f4c:	f04f 0300 	mov.w	r3, #0
 8006f50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f54:	4659      	mov	r1, fp
 8006f56:	018b      	lsls	r3, r1, #6
 8006f58:	4651      	mov	r1, sl
 8006f5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006f5e:	4651      	mov	r1, sl
 8006f60:	018a      	lsls	r2, r1, #6
 8006f62:	4651      	mov	r1, sl
 8006f64:	ebb2 0801 	subs.w	r8, r2, r1
 8006f68:	4659      	mov	r1, fp
 8006f6a:	eb63 0901 	sbc.w	r9, r3, r1
 8006f6e:	f04f 0200 	mov.w	r2, #0
 8006f72:	f04f 0300 	mov.w	r3, #0
 8006f76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006f7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006f82:	4690      	mov	r8, r2
 8006f84:	4699      	mov	r9, r3
 8006f86:	4623      	mov	r3, r4
 8006f88:	eb18 0303 	adds.w	r3, r8, r3
 8006f8c:	60bb      	str	r3, [r7, #8]
 8006f8e:	462b      	mov	r3, r5
 8006f90:	eb49 0303 	adc.w	r3, r9, r3
 8006f94:	60fb      	str	r3, [r7, #12]
 8006f96:	f04f 0200 	mov.w	r2, #0
 8006f9a:	f04f 0300 	mov.w	r3, #0
 8006f9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006fa2:	4629      	mov	r1, r5
 8006fa4:	024b      	lsls	r3, r1, #9
 8006fa6:	4621      	mov	r1, r4
 8006fa8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006fac:	4621      	mov	r1, r4
 8006fae:	024a      	lsls	r2, r1, #9
 8006fb0:	4610      	mov	r0, r2
 8006fb2:	4619      	mov	r1, r3
 8006fb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006fbc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006fc0:	f7f9 f902 	bl	80001c8 <__aeabi_uldivmod>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	460b      	mov	r3, r1
 8006fc8:	4613      	mov	r3, r2
 8006fca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fcc:	e058      	b.n	8007080 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006fce:	4b38      	ldr	r3, [pc, #224]	; (80070b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	099b      	lsrs	r3, r3, #6
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	4611      	mov	r1, r2
 8006fda:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006fde:	623b      	str	r3, [r7, #32]
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	627b      	str	r3, [r7, #36]	; 0x24
 8006fe4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006fe8:	4642      	mov	r2, r8
 8006fea:	464b      	mov	r3, r9
 8006fec:	f04f 0000 	mov.w	r0, #0
 8006ff0:	f04f 0100 	mov.w	r1, #0
 8006ff4:	0159      	lsls	r1, r3, #5
 8006ff6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ffa:	0150      	lsls	r0, r2, #5
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	460b      	mov	r3, r1
 8007000:	4641      	mov	r1, r8
 8007002:	ebb2 0a01 	subs.w	sl, r2, r1
 8007006:	4649      	mov	r1, r9
 8007008:	eb63 0b01 	sbc.w	fp, r3, r1
 800700c:	f04f 0200 	mov.w	r2, #0
 8007010:	f04f 0300 	mov.w	r3, #0
 8007014:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007018:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800701c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007020:	ebb2 040a 	subs.w	r4, r2, sl
 8007024:	eb63 050b 	sbc.w	r5, r3, fp
 8007028:	f04f 0200 	mov.w	r2, #0
 800702c:	f04f 0300 	mov.w	r3, #0
 8007030:	00eb      	lsls	r3, r5, #3
 8007032:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007036:	00e2      	lsls	r2, r4, #3
 8007038:	4614      	mov	r4, r2
 800703a:	461d      	mov	r5, r3
 800703c:	4643      	mov	r3, r8
 800703e:	18e3      	adds	r3, r4, r3
 8007040:	603b      	str	r3, [r7, #0]
 8007042:	464b      	mov	r3, r9
 8007044:	eb45 0303 	adc.w	r3, r5, r3
 8007048:	607b      	str	r3, [r7, #4]
 800704a:	f04f 0200 	mov.w	r2, #0
 800704e:	f04f 0300 	mov.w	r3, #0
 8007052:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007056:	4629      	mov	r1, r5
 8007058:	028b      	lsls	r3, r1, #10
 800705a:	4621      	mov	r1, r4
 800705c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007060:	4621      	mov	r1, r4
 8007062:	028a      	lsls	r2, r1, #10
 8007064:	4610      	mov	r0, r2
 8007066:	4619      	mov	r1, r3
 8007068:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800706a:	2200      	movs	r2, #0
 800706c:	61bb      	str	r3, [r7, #24]
 800706e:	61fa      	str	r2, [r7, #28]
 8007070:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007074:	f7f9 f8a8 	bl	80001c8 <__aeabi_uldivmod>
 8007078:	4602      	mov	r2, r0
 800707a:	460b      	mov	r3, r1
 800707c:	4613      	mov	r3, r2
 800707e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007080:	4b0b      	ldr	r3, [pc, #44]	; (80070b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	0c1b      	lsrs	r3, r3, #16
 8007086:	f003 0303 	and.w	r3, r3, #3
 800708a:	3301      	adds	r3, #1
 800708c:	005b      	lsls	r3, r3, #1
 800708e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007090:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007092:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007094:	fbb2 f3f3 	udiv	r3, r2, r3
 8007098:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800709a:	e002      	b.n	80070a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800709c:	4b05      	ldr	r3, [pc, #20]	; (80070b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800709e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80070a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80070a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3750      	adds	r7, #80	; 0x50
 80070a8:	46bd      	mov	sp, r7
 80070aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070ae:	bf00      	nop
 80070b0:	40023800 	.word	0x40023800
 80070b4:	00f42400 	.word	0x00f42400
 80070b8:	007a1200 	.word	0x007a1200

080070bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070bc:	b480      	push	{r7}
 80070be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80070c0:	4b03      	ldr	r3, [pc, #12]	; (80070d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80070c2:	681b      	ldr	r3, [r3, #0]
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr
 80070ce:	bf00      	nop
 80070d0:	20000204 	.word	0x20000204

080070d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80070d8:	f7ff fff0 	bl	80070bc <HAL_RCC_GetHCLKFreq>
 80070dc:	4602      	mov	r2, r0
 80070de:	4b05      	ldr	r3, [pc, #20]	; (80070f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	0a9b      	lsrs	r3, r3, #10
 80070e4:	f003 0307 	and.w	r3, r3, #7
 80070e8:	4903      	ldr	r1, [pc, #12]	; (80070f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80070ea:	5ccb      	ldrb	r3, [r1, r3]
 80070ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	bd80      	pop	{r7, pc}
 80070f4:	40023800 	.word	0x40023800
 80070f8:	0800c124 	.word	0x0800c124

080070fc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b086      	sub	sp, #24
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007104:	2300      	movs	r3, #0
 8007106:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007108:	2300      	movs	r3, #0
 800710a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f003 0301 	and.w	r3, r3, #1
 8007114:	2b00      	cmp	r3, #0
 8007116:	d105      	bne.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007120:	2b00      	cmp	r3, #0
 8007122:	d035      	beq.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007124:	4b62      	ldr	r3, [pc, #392]	; (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007126:	2200      	movs	r2, #0
 8007128:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800712a:	f7fb f975 	bl	8002418 <HAL_GetTick>
 800712e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007130:	e008      	b.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007132:	f7fb f971 	bl	8002418 <HAL_GetTick>
 8007136:	4602      	mov	r2, r0
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	1ad3      	subs	r3, r2, r3
 800713c:	2b02      	cmp	r3, #2
 800713e:	d901      	bls.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007140:	2303      	movs	r3, #3
 8007142:	e0b0      	b.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007144:	4b5b      	ldr	r3, [pc, #364]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800714c:	2b00      	cmp	r3, #0
 800714e:	d1f0      	bne.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	019a      	lsls	r2, r3, #6
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	071b      	lsls	r3, r3, #28
 800715c:	4955      	ldr	r1, [pc, #340]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800715e:	4313      	orrs	r3, r2
 8007160:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007164:	4b52      	ldr	r3, [pc, #328]	; (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007166:	2201      	movs	r2, #1
 8007168:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800716a:	f7fb f955 	bl	8002418 <HAL_GetTick>
 800716e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007170:	e008      	b.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007172:	f7fb f951 	bl	8002418 <HAL_GetTick>
 8007176:	4602      	mov	r2, r0
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	1ad3      	subs	r3, r2, r3
 800717c:	2b02      	cmp	r3, #2
 800717e:	d901      	bls.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007180:	2303      	movs	r3, #3
 8007182:	e090      	b.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007184:	4b4b      	ldr	r3, [pc, #300]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800718c:	2b00      	cmp	r3, #0
 800718e:	d0f0      	beq.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f003 0302 	and.w	r3, r3, #2
 8007198:	2b00      	cmp	r3, #0
 800719a:	f000 8083 	beq.w	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800719e:	2300      	movs	r3, #0
 80071a0:	60fb      	str	r3, [r7, #12]
 80071a2:	4b44      	ldr	r3, [pc, #272]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a6:	4a43      	ldr	r2, [pc, #268]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071ac:	6413      	str	r3, [r2, #64]	; 0x40
 80071ae:	4b41      	ldr	r3, [pc, #260]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071b6:	60fb      	str	r3, [r7, #12]
 80071b8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80071ba:	4b3f      	ldr	r3, [pc, #252]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a3e      	ldr	r2, [pc, #248]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80071c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071c4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80071c6:	f7fb f927 	bl	8002418 <HAL_GetTick>
 80071ca:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80071cc:	e008      	b.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80071ce:	f7fb f923 	bl	8002418 <HAL_GetTick>
 80071d2:	4602      	mov	r2, r0
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	1ad3      	subs	r3, r2, r3
 80071d8:	2b02      	cmp	r3, #2
 80071da:	d901      	bls.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80071dc:	2303      	movs	r3, #3
 80071de:	e062      	b.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80071e0:	4b35      	ldr	r3, [pc, #212]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d0f0      	beq.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80071ec:	4b31      	ldr	r3, [pc, #196]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071f4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d02f      	beq.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	68db      	ldr	r3, [r3, #12]
 8007200:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007204:	693a      	ldr	r2, [r7, #16]
 8007206:	429a      	cmp	r2, r3
 8007208:	d028      	beq.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800720a:	4b2a      	ldr	r3, [pc, #168]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800720c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800720e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007212:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007214:	4b29      	ldr	r3, [pc, #164]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007216:	2201      	movs	r2, #1
 8007218:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800721a:	4b28      	ldr	r3, [pc, #160]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800721c:	2200      	movs	r2, #0
 800721e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007220:	4a24      	ldr	r2, [pc, #144]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007226:	4b23      	ldr	r3, [pc, #140]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800722a:	f003 0301 	and.w	r3, r3, #1
 800722e:	2b01      	cmp	r3, #1
 8007230:	d114      	bne.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007232:	f7fb f8f1 	bl	8002418 <HAL_GetTick>
 8007236:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007238:	e00a      	b.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800723a:	f7fb f8ed 	bl	8002418 <HAL_GetTick>
 800723e:	4602      	mov	r2, r0
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	1ad3      	subs	r3, r2, r3
 8007244:	f241 3288 	movw	r2, #5000	; 0x1388
 8007248:	4293      	cmp	r3, r2
 800724a:	d901      	bls.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800724c:	2303      	movs	r3, #3
 800724e:	e02a      	b.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007250:	4b18      	ldr	r3, [pc, #96]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007254:	f003 0302 	and.w	r3, r3, #2
 8007258:	2b00      	cmp	r3, #0
 800725a:	d0ee      	beq.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007264:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007268:	d10d      	bne.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800726a:	4b12      	ldr	r3, [pc, #72]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	68db      	ldr	r3, [r3, #12]
 8007276:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800727a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800727e:	490d      	ldr	r1, [pc, #52]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007280:	4313      	orrs	r3, r2
 8007282:	608b      	str	r3, [r1, #8]
 8007284:	e005      	b.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007286:	4b0b      	ldr	r3, [pc, #44]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	4a0a      	ldr	r2, [pc, #40]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800728c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007290:	6093      	str	r3, [r2, #8]
 8007292:	4b08      	ldr	r3, [pc, #32]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007294:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800729e:	4905      	ldr	r1, [pc, #20]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072a0:	4313      	orrs	r3, r2
 80072a2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80072a4:	2300      	movs	r3, #0
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3718      	adds	r7, #24
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}
 80072ae:	bf00      	nop
 80072b0:	42470068 	.word	0x42470068
 80072b4:	40023800 	.word	0x40023800
 80072b8:	40007000 	.word	0x40007000
 80072bc:	42470e40 	.word	0x42470e40

080072c0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b087      	sub	sp, #28
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80072c8:	2300      	movs	r3, #0
 80072ca:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80072cc:	2300      	movs	r3, #0
 80072ce:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80072d0:	2300      	movs	r3, #0
 80072d2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80072d4:	2300      	movs	r3, #0
 80072d6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2b01      	cmp	r3, #1
 80072dc:	d13e      	bne.n	800735c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80072de:	4b23      	ldr	r3, [pc, #140]	; (800736c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80072e6:	60fb      	str	r3, [r7, #12]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d005      	beq.n	80072fa <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d12f      	bne.n	8007354 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80072f4:	4b1e      	ldr	r3, [pc, #120]	; (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80072f6:	617b      	str	r3, [r7, #20]
          break;
 80072f8:	e02f      	b.n	800735a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80072fa:	4b1c      	ldr	r3, [pc, #112]	; (800736c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007302:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007306:	d108      	bne.n	800731a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007308:	4b18      	ldr	r3, [pc, #96]	; (800736c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007310:	4a18      	ldr	r2, [pc, #96]	; (8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007312:	fbb2 f3f3 	udiv	r3, r2, r3
 8007316:	613b      	str	r3, [r7, #16]
 8007318:	e007      	b.n	800732a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800731a:	4b14      	ldr	r3, [pc, #80]	; (800736c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007322:	4a15      	ldr	r2, [pc, #84]	; (8007378 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007324:	fbb2 f3f3 	udiv	r3, r2, r3
 8007328:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800732a:	4b10      	ldr	r3, [pc, #64]	; (800736c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800732c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007330:	099b      	lsrs	r3, r3, #6
 8007332:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	fb02 f303 	mul.w	r3, r2, r3
 800733c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800733e:	4b0b      	ldr	r3, [pc, #44]	; (800736c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007340:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007344:	0f1b      	lsrs	r3, r3, #28
 8007346:	f003 0307 	and.w	r3, r3, #7
 800734a:	68ba      	ldr	r2, [r7, #8]
 800734c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007350:	617b      	str	r3, [r7, #20]
          break;
 8007352:	e002      	b.n	800735a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007354:	2300      	movs	r3, #0
 8007356:	617b      	str	r3, [r7, #20]
          break;
 8007358:	bf00      	nop
        }
      }
      break;
 800735a:	bf00      	nop
    }
  }
  return frequency;
 800735c:	697b      	ldr	r3, [r7, #20]
}
 800735e:	4618      	mov	r0, r3
 8007360:	371c      	adds	r7, #28
 8007362:	46bd      	mov	sp, r7
 8007364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007368:	4770      	bx	lr
 800736a:	bf00      	nop
 800736c:	40023800 	.word	0x40023800
 8007370:	00bb8000 	.word	0x00bb8000
 8007374:	007a1200 	.word	0x007a1200
 8007378:	00f42400 	.word	0x00f42400

0800737c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b082      	sub	sp, #8
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d101      	bne.n	800738e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	e07b      	b.n	8007486 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007392:	2b00      	cmp	r3, #0
 8007394:	d108      	bne.n	80073a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800739e:	d009      	beq.n	80073b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2200      	movs	r2, #0
 80073a4:	61da      	str	r2, [r3, #28]
 80073a6:	e005      	b.n	80073b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2200      	movs	r2, #0
 80073b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d106      	bne.n	80073d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f7fa fea6 	bl	8002120 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2202      	movs	r2, #2
 80073d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	689b      	ldr	r3, [r3, #8]
 80073f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80073fc:	431a      	orrs	r2, r3
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	68db      	ldr	r3, [r3, #12]
 8007402:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007406:	431a      	orrs	r2, r3
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	691b      	ldr	r3, [r3, #16]
 800740c:	f003 0302 	and.w	r3, r3, #2
 8007410:	431a      	orrs	r2, r3
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	695b      	ldr	r3, [r3, #20]
 8007416:	f003 0301 	and.w	r3, r3, #1
 800741a:	431a      	orrs	r2, r3
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	699b      	ldr	r3, [r3, #24]
 8007420:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007424:	431a      	orrs	r2, r3
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	69db      	ldr	r3, [r3, #28]
 800742a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800742e:	431a      	orrs	r2, r3
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6a1b      	ldr	r3, [r3, #32]
 8007434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007438:	ea42 0103 	orr.w	r1, r2, r3
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007440:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	430a      	orrs	r2, r1
 800744a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	699b      	ldr	r3, [r3, #24]
 8007450:	0c1b      	lsrs	r3, r3, #16
 8007452:	f003 0104 	and.w	r1, r3, #4
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745a:	f003 0210 	and.w	r2, r3, #16
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	430a      	orrs	r2, r1
 8007464:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	69da      	ldr	r2, [r3, #28]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007474:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2201      	movs	r2, #1
 8007480:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007484:	2300      	movs	r3, #0
}
 8007486:	4618      	mov	r0, r3
 8007488:	3708      	adds	r7, #8
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}

0800748e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800748e:	b084      	sub	sp, #16
 8007490:	b580      	push	{r7, lr}
 8007492:	b084      	sub	sp, #16
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	f107 001c 	add.w	r0, r7, #28
 800749c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80074a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	d122      	bne.n	80074ec <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	68db      	ldr	r3, [r3, #12]
 80074b6:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80074ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	68db      	ldr	r3, [r3, #12]
 80074c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80074ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d105      	bne.n	80074e0 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	68db      	ldr	r3, [r3, #12]
 80074d8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f000 f99f 	bl	8007824 <USB_CoreReset>
 80074e6:	4603      	mov	r3, r0
 80074e8:	73fb      	strb	r3, [r7, #15]
 80074ea:	e01a      	b.n	8007522 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	68db      	ldr	r3, [r3, #12]
 80074f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 f993 	bl	8007824 <USB_CoreReset>
 80074fe:	4603      	mov	r3, r0
 8007500:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007502:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007504:	2b00      	cmp	r3, #0
 8007506:	d106      	bne.n	8007516 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800750c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	639a      	str	r2, [r3, #56]	; 0x38
 8007514:	e005      	b.n	8007522 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800751a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007524:	2b01      	cmp	r3, #1
 8007526:	d10b      	bne.n	8007540 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	f043 0206 	orr.w	r2, r3, #6
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	689b      	ldr	r3, [r3, #8]
 8007538:	f043 0220 	orr.w	r2, r3, #32
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007540:	7bfb      	ldrb	r3, [r7, #15]
}
 8007542:	4618      	mov	r0, r3
 8007544:	3710      	adds	r7, #16
 8007546:	46bd      	mov	sp, r7
 8007548:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800754c:	b004      	add	sp, #16
 800754e:	4770      	bx	lr

08007550 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007550:	b480      	push	{r7}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	f043 0201 	orr.w	r2, r3, #1
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007564:	2300      	movs	r3, #0
}
 8007566:	4618      	mov	r0, r3
 8007568:	370c      	adds	r7, #12
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr

08007572 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007572:	b480      	push	{r7}
 8007574:	b083      	sub	sp, #12
 8007576:	af00      	add	r7, sp, #0
 8007578:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	f023 0201 	bic.w	r2, r3, #1
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007586:	2300      	movs	r3, #0
}
 8007588:	4618      	mov	r0, r3
 800758a:	370c      	adds	r7, #12
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr

08007594 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	460b      	mov	r3, r1
 800759e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80075a0:	2300      	movs	r3, #0
 80075a2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	68db      	ldr	r3, [r3, #12]
 80075a8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80075b0:	78fb      	ldrb	r3, [r7, #3]
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d115      	bne.n	80075e2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	68db      	ldr	r3, [r3, #12]
 80075ba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80075c2:	2001      	movs	r0, #1
 80075c4:	f7fa ff34 	bl	8002430 <HAL_Delay>
      ms++;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	3301      	adds	r3, #1
 80075cc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f000 f919 	bl	8007806 <USB_GetMode>
 80075d4:	4603      	mov	r3, r0
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d01e      	beq.n	8007618 <USB_SetCurrentMode+0x84>
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2b31      	cmp	r3, #49	; 0x31
 80075de:	d9f0      	bls.n	80075c2 <USB_SetCurrentMode+0x2e>
 80075e0:	e01a      	b.n	8007618 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80075e2:	78fb      	ldrb	r3, [r7, #3]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d115      	bne.n	8007614 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	68db      	ldr	r3, [r3, #12]
 80075ec:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80075f4:	2001      	movs	r0, #1
 80075f6:	f7fa ff1b 	bl	8002430 <HAL_Delay>
      ms++;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	3301      	adds	r3, #1
 80075fe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f000 f900 	bl	8007806 <USB_GetMode>
 8007606:	4603      	mov	r3, r0
 8007608:	2b00      	cmp	r3, #0
 800760a:	d005      	beq.n	8007618 <USB_SetCurrentMode+0x84>
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2b31      	cmp	r3, #49	; 0x31
 8007610:	d9f0      	bls.n	80075f4 <USB_SetCurrentMode+0x60>
 8007612:	e001      	b.n	8007618 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007614:	2301      	movs	r3, #1
 8007616:	e005      	b.n	8007624 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2b32      	cmp	r3, #50	; 0x32
 800761c:	d101      	bne.n	8007622 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	e000      	b.n	8007624 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007622:	2300      	movs	r3, #0
}
 8007624:	4618      	mov	r0, r3
 8007626:	3710      	adds	r7, #16
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}

0800762c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800762c:	b480      	push	{r7}
 800762e:	b085      	sub	sp, #20
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007636:	2300      	movs	r3, #0
 8007638:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	019b      	lsls	r3, r3, #6
 800763e:	f043 0220 	orr.w	r2, r3, #32
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	3301      	adds	r3, #1
 800764a:	60fb      	str	r3, [r7, #12]
 800764c:	4a08      	ldr	r2, [pc, #32]	; (8007670 <USB_FlushTxFifo+0x44>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d901      	bls.n	8007656 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8007652:	2303      	movs	r3, #3
 8007654:	e006      	b.n	8007664 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	691b      	ldr	r3, [r3, #16]
 800765a:	f003 0320 	and.w	r3, r3, #32
 800765e:	2b20      	cmp	r3, #32
 8007660:	d0f1      	beq.n	8007646 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007662:	2300      	movs	r3, #0
}
 8007664:	4618      	mov	r0, r3
 8007666:	3714      	adds	r7, #20
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr
 8007670:	00030d40 	.word	0x00030d40

08007674 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007674:	b480      	push	{r7}
 8007676:	b085      	sub	sp, #20
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800767c:	2300      	movs	r3, #0
 800767e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2210      	movs	r2, #16
 8007684:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	3301      	adds	r3, #1
 800768a:	60fb      	str	r3, [r7, #12]
 800768c:	4a08      	ldr	r2, [pc, #32]	; (80076b0 <USB_FlushRxFifo+0x3c>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d901      	bls.n	8007696 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8007692:	2303      	movs	r3, #3
 8007694:	e006      	b.n	80076a4 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	691b      	ldr	r3, [r3, #16]
 800769a:	f003 0310 	and.w	r3, r3, #16
 800769e:	2b10      	cmp	r3, #16
 80076a0:	d0f1      	beq.n	8007686 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80076a2:	2300      	movs	r3, #0
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3714      	adds	r7, #20
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr
 80076b0:	00030d40 	.word	0x00030d40

080076b4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b089      	sub	sp, #36	; 0x24
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	60f8      	str	r0, [r7, #12]
 80076bc:	60b9      	str	r1, [r7, #8]
 80076be:	4611      	mov	r1, r2
 80076c0:	461a      	mov	r2, r3
 80076c2:	460b      	mov	r3, r1
 80076c4:	71fb      	strb	r3, [r7, #7]
 80076c6:	4613      	mov	r3, r2
 80076c8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80076d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d123      	bne.n	8007722 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80076da:	88bb      	ldrh	r3, [r7, #4]
 80076dc:	3303      	adds	r3, #3
 80076de:	089b      	lsrs	r3, r3, #2
 80076e0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80076e2:	2300      	movs	r3, #0
 80076e4:	61bb      	str	r3, [r7, #24]
 80076e6:	e018      	b.n	800771a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80076e8:	79fb      	ldrb	r3, [r7, #7]
 80076ea:	031a      	lsls	r2, r3, #12
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	4413      	add	r3, r2
 80076f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076f4:	461a      	mov	r2, r3
 80076f6:	69fb      	ldr	r3, [r7, #28]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	6013      	str	r3, [r2, #0]
      pSrc++;
 80076fc:	69fb      	ldr	r3, [r7, #28]
 80076fe:	3301      	adds	r3, #1
 8007700:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007702:	69fb      	ldr	r3, [r7, #28]
 8007704:	3301      	adds	r3, #1
 8007706:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007708:	69fb      	ldr	r3, [r7, #28]
 800770a:	3301      	adds	r3, #1
 800770c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800770e:	69fb      	ldr	r3, [r7, #28]
 8007710:	3301      	adds	r3, #1
 8007712:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007714:	69bb      	ldr	r3, [r7, #24]
 8007716:	3301      	adds	r3, #1
 8007718:	61bb      	str	r3, [r7, #24]
 800771a:	69ba      	ldr	r2, [r7, #24]
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	429a      	cmp	r2, r3
 8007720:	d3e2      	bcc.n	80076e8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007722:	2300      	movs	r3, #0
}
 8007724:	4618      	mov	r0, r3
 8007726:	3724      	adds	r7, #36	; 0x24
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr

08007730 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007730:	b480      	push	{r7}
 8007732:	b08b      	sub	sp, #44	; 0x2c
 8007734:	af00      	add	r7, sp, #0
 8007736:	60f8      	str	r0, [r7, #12]
 8007738:	60b9      	str	r1, [r7, #8]
 800773a:	4613      	mov	r3, r2
 800773c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007746:	88fb      	ldrh	r3, [r7, #6]
 8007748:	089b      	lsrs	r3, r3, #2
 800774a:	b29b      	uxth	r3, r3
 800774c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800774e:	88fb      	ldrh	r3, [r7, #6]
 8007750:	f003 0303 	and.w	r3, r3, #3
 8007754:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007756:	2300      	movs	r3, #0
 8007758:	623b      	str	r3, [r7, #32]
 800775a:	e014      	b.n	8007786 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007766:	601a      	str	r2, [r3, #0]
    pDest++;
 8007768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776a:	3301      	adds	r3, #1
 800776c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800776e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007770:	3301      	adds	r3, #1
 8007772:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007776:	3301      	adds	r3, #1
 8007778:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800777a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777c:	3301      	adds	r3, #1
 800777e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007780:	6a3b      	ldr	r3, [r7, #32]
 8007782:	3301      	adds	r3, #1
 8007784:	623b      	str	r3, [r7, #32]
 8007786:	6a3a      	ldr	r2, [r7, #32]
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	429a      	cmp	r2, r3
 800778c:	d3e6      	bcc.n	800775c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800778e:	8bfb      	ldrh	r3, [r7, #30]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d01e      	beq.n	80077d2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007794:	2300      	movs	r3, #0
 8007796:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007798:	69bb      	ldr	r3, [r7, #24]
 800779a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800779e:	461a      	mov	r2, r3
 80077a0:	f107 0310 	add.w	r3, r7, #16
 80077a4:	6812      	ldr	r2, [r2, #0]
 80077a6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80077a8:	693a      	ldr	r2, [r7, #16]
 80077aa:	6a3b      	ldr	r3, [r7, #32]
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	00db      	lsls	r3, r3, #3
 80077b0:	fa22 f303 	lsr.w	r3, r2, r3
 80077b4:	b2da      	uxtb	r2, r3
 80077b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b8:	701a      	strb	r2, [r3, #0]
      i++;
 80077ba:	6a3b      	ldr	r3, [r7, #32]
 80077bc:	3301      	adds	r3, #1
 80077be:	623b      	str	r3, [r7, #32]
      pDest++;
 80077c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c2:	3301      	adds	r3, #1
 80077c4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80077c6:	8bfb      	ldrh	r3, [r7, #30]
 80077c8:	3b01      	subs	r3, #1
 80077ca:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80077cc:	8bfb      	ldrh	r3, [r7, #30]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d1ea      	bne.n	80077a8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80077d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	372c      	adds	r7, #44	; 0x2c
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr

080077e0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b085      	sub	sp, #20
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	695b      	ldr	r3, [r3, #20]
 80077ec:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	699b      	ldr	r3, [r3, #24]
 80077f2:	68fa      	ldr	r2, [r7, #12]
 80077f4:	4013      	ands	r3, r2
 80077f6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80077f8:	68fb      	ldr	r3, [r7, #12]
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3714      	adds	r7, #20
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr

08007806 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007806:	b480      	push	{r7}
 8007808:	b083      	sub	sp, #12
 800780a:	af00      	add	r7, sp, #0
 800780c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	695b      	ldr	r3, [r3, #20]
 8007812:	f003 0301 	and.w	r3, r3, #1
}
 8007816:	4618      	mov	r0, r3
 8007818:	370c      	adds	r7, #12
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	4770      	bx	lr
	...

08007824 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007824:	b480      	push	{r7}
 8007826:	b085      	sub	sp, #20
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800782c:	2300      	movs	r3, #0
 800782e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	3301      	adds	r3, #1
 8007834:	60fb      	str	r3, [r7, #12]
 8007836:	4a13      	ldr	r2, [pc, #76]	; (8007884 <USB_CoreReset+0x60>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d901      	bls.n	8007840 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800783c:	2303      	movs	r3, #3
 800783e:	e01a      	b.n	8007876 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	691b      	ldr	r3, [r3, #16]
 8007844:	2b00      	cmp	r3, #0
 8007846:	daf3      	bge.n	8007830 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007848:	2300      	movs	r3, #0
 800784a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	691b      	ldr	r3, [r3, #16]
 8007850:	f043 0201 	orr.w	r2, r3, #1
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	3301      	adds	r3, #1
 800785c:	60fb      	str	r3, [r7, #12]
 800785e:	4a09      	ldr	r2, [pc, #36]	; (8007884 <USB_CoreReset+0x60>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d901      	bls.n	8007868 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8007864:	2303      	movs	r3, #3
 8007866:	e006      	b.n	8007876 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	691b      	ldr	r3, [r3, #16]
 800786c:	f003 0301 	and.w	r3, r3, #1
 8007870:	2b01      	cmp	r3, #1
 8007872:	d0f1      	beq.n	8007858 <USB_CoreReset+0x34>

  return HAL_OK;
 8007874:	2300      	movs	r3, #0
}
 8007876:	4618      	mov	r0, r3
 8007878:	3714      	adds	r7, #20
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr
 8007882:	bf00      	nop
 8007884:	00030d40 	.word	0x00030d40

08007888 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007888:	b084      	sub	sp, #16
 800788a:	b580      	push	{r7, lr}
 800788c:	b084      	sub	sp, #16
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]
 8007892:	f107 001c 	add.w	r0, r7, #28
 8007896:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80078a4:	461a      	mov	r2, r3
 80078a6:	2300      	movs	r3, #0
 80078a8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ba:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078c6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d018      	beq.n	800790c <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80078da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d10a      	bne.n	80078f6 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	68ba      	ldr	r2, [r7, #8]
 80078ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80078ee:	f043 0304 	orr.w	r3, r3, #4
 80078f2:	6013      	str	r3, [r2, #0]
 80078f4:	e014      	b.n	8007920 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	68ba      	ldr	r2, [r7, #8]
 8007900:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007904:	f023 0304 	bic.w	r3, r3, #4
 8007908:	6013      	str	r3, [r2, #0]
 800790a:	e009      	b.n	8007920 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	68ba      	ldr	r2, [r7, #8]
 8007916:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800791a:	f023 0304 	bic.w	r3, r3, #4
 800791e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8007920:	2110      	movs	r1, #16
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f7ff fe82 	bl	800762c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f7ff fea3 	bl	8007674 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800792e:	2300      	movs	r3, #0
 8007930:	60fb      	str	r3, [r7, #12]
 8007932:	e015      	b.n	8007960 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	015a      	lsls	r2, r3, #5
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	4413      	add	r3, r2
 800793c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007940:	461a      	mov	r2, r3
 8007942:	f04f 33ff 	mov.w	r3, #4294967295
 8007946:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	015a      	lsls	r2, r3, #5
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	4413      	add	r3, r2
 8007950:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007954:	461a      	mov	r2, r3
 8007956:	2300      	movs	r3, #0
 8007958:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	3301      	adds	r3, #1
 800795e:	60fb      	str	r3, [r7, #12]
 8007960:	6a3b      	ldr	r3, [r7, #32]
 8007962:	68fa      	ldr	r2, [r7, #12]
 8007964:	429a      	cmp	r2, r3
 8007966:	d3e5      	bcc.n	8007934 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2200      	movs	r2, #0
 800796c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f04f 32ff 	mov.w	r2, #4294967295
 8007974:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800797a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800797e:	2b00      	cmp	r3, #0
 8007980:	d00b      	beq.n	800799a <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007988:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4a13      	ldr	r2, [pc, #76]	; (80079dc <USB_HostInit+0x154>)
 800798e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	4a13      	ldr	r2, [pc, #76]	; (80079e0 <USB_HostInit+0x158>)
 8007994:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007998:	e009      	b.n	80079ae <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2280      	movs	r2, #128	; 0x80
 800799e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	4a10      	ldr	r2, [pc, #64]	; (80079e4 <USB_HostInit+0x15c>)
 80079a4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	4a0f      	ldr	r2, [pc, #60]	; (80079e8 <USB_HostInit+0x160>)
 80079aa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80079ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d105      	bne.n	80079c0 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	699b      	ldr	r3, [r3, #24]
 80079b8:	f043 0210 	orr.w	r2, r3, #16
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	699a      	ldr	r2, [r3, #24]
 80079c4:	4b09      	ldr	r3, [pc, #36]	; (80079ec <USB_HostInit+0x164>)
 80079c6:	4313      	orrs	r3, r2
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80079cc:	2300      	movs	r3, #0
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3710      	adds	r7, #16
 80079d2:	46bd      	mov	sp, r7
 80079d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80079d8:	b004      	add	sp, #16
 80079da:	4770      	bx	lr
 80079dc:	01000200 	.word	0x01000200
 80079e0:	00e00300 	.word	0x00e00300
 80079e4:	00600080 	.word	0x00600080
 80079e8:	004000e0 	.word	0x004000e0
 80079ec:	a3200008 	.word	0xa3200008

080079f0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b085      	sub	sp, #20
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	460b      	mov	r3, r1
 80079fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	68fa      	ldr	r2, [r7, #12]
 8007a0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007a0e:	f023 0303 	bic.w	r3, r3, #3
 8007a12:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a1a:	681a      	ldr	r2, [r3, #0]
 8007a1c:	78fb      	ldrb	r3, [r7, #3]
 8007a1e:	f003 0303 	and.w	r3, r3, #3
 8007a22:	68f9      	ldr	r1, [r7, #12]
 8007a24:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007a2c:	78fb      	ldrb	r3, [r7, #3]
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d107      	bne.n	8007a42 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a38:	461a      	mov	r2, r3
 8007a3a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007a3e:	6053      	str	r3, [r2, #4]
 8007a40:	e009      	b.n	8007a56 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007a42:	78fb      	ldrb	r3, [r7, #3]
 8007a44:	2b02      	cmp	r3, #2
 8007a46:	d106      	bne.n	8007a56 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a4e:	461a      	mov	r2, r3
 8007a50:	f241 7370 	movw	r3, #6000	; 0x1770
 8007a54:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007a56:	2300      	movs	r3, #0
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3714      	adds	r7, #20
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a62:	4770      	bx	lr

08007a64 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b084      	sub	sp, #16
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007a70:	2300      	movs	r3, #0
 8007a72:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007a84:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	68fa      	ldr	r2, [r7, #12]
 8007a8a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007a8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a92:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007a94:	2064      	movs	r0, #100	; 0x64
 8007a96:	f7fa fccb 	bl	8002430 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	68fa      	ldr	r2, [r7, #12]
 8007a9e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007aa2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007aa6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007aa8:	200a      	movs	r0, #10
 8007aaa:	f7fa fcc1 	bl	8002430 <HAL_Delay>

  return HAL_OK;
 8007aae:	2300      	movs	r3, #0
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3710      	adds	r7, #16
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}

08007ab8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b085      	sub	sp, #20
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	460b      	mov	r3, r1
 8007ac2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007adc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d109      	bne.n	8007afc <USB_DriveVbus+0x44>
 8007ae8:	78fb      	ldrb	r3, [r7, #3]
 8007aea:	2b01      	cmp	r3, #1
 8007aec:	d106      	bne.n	8007afc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	68fa      	ldr	r2, [r7, #12]
 8007af2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007af6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007afa:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b06:	d109      	bne.n	8007b1c <USB_DriveVbus+0x64>
 8007b08:	78fb      	ldrb	r3, [r7, #3]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d106      	bne.n	8007b1c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	68fa      	ldr	r2, [r7, #12]
 8007b12:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007b16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b1a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007b1c:	2300      	movs	r3, #0
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3714      	adds	r7, #20
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr

08007b2a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007b2a:	b480      	push	{r7}
 8007b2c:	b085      	sub	sp, #20
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007b36:	2300      	movs	r3, #0
 8007b38:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	0c5b      	lsrs	r3, r3, #17
 8007b48:	f003 0303 	and.w	r3, r3, #3
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3714      	adds	r7, #20
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr

08007b58 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b085      	sub	sp, #20
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	b29b      	uxth	r3, r3
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3714      	adds	r7, #20
 8007b72:	46bd      	mov	sp, r7
 8007b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b78:	4770      	bx	lr
	...

08007b7c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b088      	sub	sp, #32
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	4608      	mov	r0, r1
 8007b86:	4611      	mov	r1, r2
 8007b88:	461a      	mov	r2, r3
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	70fb      	strb	r3, [r7, #3]
 8007b8e:	460b      	mov	r3, r1
 8007b90:	70bb      	strb	r3, [r7, #2]
 8007b92:	4613      	mov	r3, r2
 8007b94:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007b96:	2300      	movs	r3, #0
 8007b98:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8007b9e:	78fb      	ldrb	r3, [r7, #3]
 8007ba0:	015a      	lsls	r2, r3, #5
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	4413      	add	r3, r2
 8007ba6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007baa:	461a      	mov	r2, r3
 8007bac:	f04f 33ff 	mov.w	r3, #4294967295
 8007bb0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007bb2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007bb6:	2b03      	cmp	r3, #3
 8007bb8:	d87e      	bhi.n	8007cb8 <USB_HC_Init+0x13c>
 8007bba:	a201      	add	r2, pc, #4	; (adr r2, 8007bc0 <USB_HC_Init+0x44>)
 8007bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bc0:	08007bd1 	.word	0x08007bd1
 8007bc4:	08007c7b 	.word	0x08007c7b
 8007bc8:	08007bd1 	.word	0x08007bd1
 8007bcc:	08007c3d 	.word	0x08007c3d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007bd0:	78fb      	ldrb	r3, [r7, #3]
 8007bd2:	015a      	lsls	r2, r3, #5
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	4413      	add	r3, r2
 8007bd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bdc:	461a      	mov	r2, r3
 8007bde:	f240 439d 	movw	r3, #1181	; 0x49d
 8007be2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007be4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	da10      	bge.n	8007c0e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007bec:	78fb      	ldrb	r3, [r7, #3]
 8007bee:	015a      	lsls	r2, r3, #5
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	4413      	add	r3, r2
 8007bf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bf8:	68db      	ldr	r3, [r3, #12]
 8007bfa:	78fa      	ldrb	r2, [r7, #3]
 8007bfc:	0151      	lsls	r1, r2, #5
 8007bfe:	693a      	ldr	r2, [r7, #16]
 8007c00:	440a      	add	r2, r1
 8007c02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c0a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8007c0c:	e057      	b.n	8007cbe <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d051      	beq.n	8007cbe <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007c1a:	78fb      	ldrb	r3, [r7, #3]
 8007c1c:	015a      	lsls	r2, r3, #5
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	4413      	add	r3, r2
 8007c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c26:	68db      	ldr	r3, [r3, #12]
 8007c28:	78fa      	ldrb	r2, [r7, #3]
 8007c2a:	0151      	lsls	r1, r2, #5
 8007c2c:	693a      	ldr	r2, [r7, #16]
 8007c2e:	440a      	add	r2, r1
 8007c30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c34:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007c38:	60d3      	str	r3, [r2, #12]
      break;
 8007c3a:	e040      	b.n	8007cbe <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007c3c:	78fb      	ldrb	r3, [r7, #3]
 8007c3e:	015a      	lsls	r2, r3, #5
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	4413      	add	r3, r2
 8007c44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c48:	461a      	mov	r2, r3
 8007c4a:	f240 639d 	movw	r3, #1693	; 0x69d
 8007c4e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007c50:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	da34      	bge.n	8007cc2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007c58:	78fb      	ldrb	r3, [r7, #3]
 8007c5a:	015a      	lsls	r2, r3, #5
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	4413      	add	r3, r2
 8007c60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c64:	68db      	ldr	r3, [r3, #12]
 8007c66:	78fa      	ldrb	r2, [r7, #3]
 8007c68:	0151      	lsls	r1, r2, #5
 8007c6a:	693a      	ldr	r2, [r7, #16]
 8007c6c:	440a      	add	r2, r1
 8007c6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c76:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007c78:	e023      	b.n	8007cc2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007c7a:	78fb      	ldrb	r3, [r7, #3]
 8007c7c:	015a      	lsls	r2, r3, #5
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	4413      	add	r3, r2
 8007c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c86:	461a      	mov	r2, r3
 8007c88:	f240 2325 	movw	r3, #549	; 0x225
 8007c8c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007c8e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	da17      	bge.n	8007cc6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007c96:	78fb      	ldrb	r3, [r7, #3]
 8007c98:	015a      	lsls	r2, r3, #5
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	4413      	add	r3, r2
 8007c9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ca2:	68db      	ldr	r3, [r3, #12]
 8007ca4:	78fa      	ldrb	r2, [r7, #3]
 8007ca6:	0151      	lsls	r1, r2, #5
 8007ca8:	693a      	ldr	r2, [r7, #16]
 8007caa:	440a      	add	r2, r1
 8007cac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007cb0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007cb4:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007cb6:	e006      	b.n	8007cc6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	77fb      	strb	r3, [r7, #31]
      break;
 8007cbc:	e004      	b.n	8007cc8 <USB_HC_Init+0x14c>
      break;
 8007cbe:	bf00      	nop
 8007cc0:	e002      	b.n	8007cc8 <USB_HC_Init+0x14c>
      break;
 8007cc2:	bf00      	nop
 8007cc4:	e000      	b.n	8007cc8 <USB_HC_Init+0x14c>
      break;
 8007cc6:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007cce:	699a      	ldr	r2, [r3, #24]
 8007cd0:	78fb      	ldrb	r3, [r7, #3]
 8007cd2:	f003 030f 	and.w	r3, r3, #15
 8007cd6:	2101      	movs	r1, #1
 8007cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8007cdc:	6939      	ldr	r1, [r7, #16]
 8007cde:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	699b      	ldr	r3, [r3, #24]
 8007cea:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007cf2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	da03      	bge.n	8007d02 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007cfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cfe:	61bb      	str	r3, [r7, #24]
 8007d00:	e001      	b.n	8007d06 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8007d02:	2300      	movs	r3, #0
 8007d04:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f7ff ff0f 	bl	8007b2a <USB_GetHostSpeed>
 8007d0c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007d0e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007d12:	2b02      	cmp	r3, #2
 8007d14:	d106      	bne.n	8007d24 <USB_HC_Init+0x1a8>
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2b02      	cmp	r3, #2
 8007d1a:	d003      	beq.n	8007d24 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007d1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007d20:	617b      	str	r3, [r7, #20]
 8007d22:	e001      	b.n	8007d28 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007d24:	2300      	movs	r3, #0
 8007d26:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007d28:	787b      	ldrb	r3, [r7, #1]
 8007d2a:	059b      	lsls	r3, r3, #22
 8007d2c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007d30:	78bb      	ldrb	r3, [r7, #2]
 8007d32:	02db      	lsls	r3, r3, #11
 8007d34:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007d38:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007d3a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007d3e:	049b      	lsls	r3, r3, #18
 8007d40:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007d44:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007d46:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007d48:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007d4c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007d4e:	69bb      	ldr	r3, [r7, #24]
 8007d50:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007d52:	78fb      	ldrb	r3, [r7, #3]
 8007d54:	0159      	lsls	r1, r3, #5
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	440b      	add	r3, r1
 8007d5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d5e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007d64:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8007d66:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007d6a:	2b03      	cmp	r3, #3
 8007d6c:	d10f      	bne.n	8007d8e <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8007d6e:	78fb      	ldrb	r3, [r7, #3]
 8007d70:	015a      	lsls	r2, r3, #5
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	4413      	add	r3, r2
 8007d76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	78fa      	ldrb	r2, [r7, #3]
 8007d7e:	0151      	lsls	r1, r2, #5
 8007d80:	693a      	ldr	r2, [r7, #16]
 8007d82:	440a      	add	r2, r1
 8007d84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d88:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007d8c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007d8e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3720      	adds	r7, #32
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b08c      	sub	sp, #48	; 0x30
 8007d9c:	af02      	add	r7, sp, #8
 8007d9e:	60f8      	str	r0, [r7, #12]
 8007da0:	60b9      	str	r1, [r7, #8]
 8007da2:	4613      	mov	r3, r2
 8007da4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	785b      	ldrb	r3, [r3, #1]
 8007dae:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007db0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007db4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d02d      	beq.n	8007e1e <USB_HC_StartXfer+0x86>
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	791b      	ldrb	r3, [r3, #4]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d129      	bne.n	8007e1e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8007dca:	79fb      	ldrb	r3, [r7, #7]
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d117      	bne.n	8007e00 <USB_HC_StartXfer+0x68>
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	79db      	ldrb	r3, [r3, #7]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d003      	beq.n	8007de0 <USB_HC_StartXfer+0x48>
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	79db      	ldrb	r3, [r3, #7]
 8007ddc:	2b02      	cmp	r3, #2
 8007dde:	d10f      	bne.n	8007e00 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007de0:	69fb      	ldr	r3, [r7, #28]
 8007de2:	015a      	lsls	r2, r3, #5
 8007de4:	6a3b      	ldr	r3, [r7, #32]
 8007de6:	4413      	add	r3, r2
 8007de8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dec:	68db      	ldr	r3, [r3, #12]
 8007dee:	69fa      	ldr	r2, [r7, #28]
 8007df0:	0151      	lsls	r1, r2, #5
 8007df2:	6a3a      	ldr	r2, [r7, #32]
 8007df4:	440a      	add	r2, r1
 8007df6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dfe:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007e00:	79fb      	ldrb	r3, [r7, #7]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d10b      	bne.n	8007e1e <USB_HC_StartXfer+0x86>
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	795b      	ldrb	r3, [r3, #5]
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	d107      	bne.n	8007e1e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	785b      	ldrb	r3, [r3, #1]
 8007e12:	4619      	mov	r1, r3
 8007e14:	68f8      	ldr	r0, [r7, #12]
 8007e16:	f000 fa2f 	bl	8008278 <USB_DoPing>
      return HAL_OK;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	e0f8      	b.n	8008010 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	695b      	ldr	r3, [r3, #20]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d018      	beq.n	8007e58 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	695b      	ldr	r3, [r3, #20]
 8007e2a:	68ba      	ldr	r2, [r7, #8]
 8007e2c:	8912      	ldrh	r2, [r2, #8]
 8007e2e:	4413      	add	r3, r2
 8007e30:	3b01      	subs	r3, #1
 8007e32:	68ba      	ldr	r2, [r7, #8]
 8007e34:	8912      	ldrh	r2, [r2, #8]
 8007e36:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e3a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007e3c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007e3e:	8b7b      	ldrh	r3, [r7, #26]
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d90b      	bls.n	8007e5c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8007e44:	8b7b      	ldrh	r3, [r7, #26]
 8007e46:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007e48:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007e4a:	68ba      	ldr	r2, [r7, #8]
 8007e4c:	8912      	ldrh	r2, [r2, #8]
 8007e4e:	fb03 f202 	mul.w	r2, r3, r2
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	611a      	str	r2, [r3, #16]
 8007e56:	e001      	b.n	8007e5c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	78db      	ldrb	r3, [r3, #3]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d007      	beq.n	8007e74 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007e64:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007e66:	68ba      	ldr	r2, [r7, #8]
 8007e68:	8912      	ldrh	r2, [r2, #8]
 8007e6a:	fb03 f202 	mul.w	r2, r3, r2
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	611a      	str	r2, [r3, #16]
 8007e72:	e003      	b.n	8007e7c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	695a      	ldr	r2, [r3, #20]
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	691b      	ldr	r3, [r3, #16]
 8007e80:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007e84:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007e86:	04d9      	lsls	r1, r3, #19
 8007e88:	4b63      	ldr	r3, [pc, #396]	; (8008018 <USB_HC_StartXfer+0x280>)
 8007e8a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007e8c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	7a9b      	ldrb	r3, [r3, #10]
 8007e92:	075b      	lsls	r3, r3, #29
 8007e94:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007e98:	69f9      	ldr	r1, [r7, #28]
 8007e9a:	0148      	lsls	r0, r1, #5
 8007e9c:	6a39      	ldr	r1, [r7, #32]
 8007e9e:	4401      	add	r1, r0
 8007ea0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007ea4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007ea6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007ea8:	79fb      	ldrb	r3, [r7, #7]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d009      	beq.n	8007ec2 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	68d9      	ldr	r1, [r3, #12]
 8007eb2:	69fb      	ldr	r3, [r7, #28]
 8007eb4:	015a      	lsls	r2, r3, #5
 8007eb6:	6a3b      	ldr	r3, [r7, #32]
 8007eb8:	4413      	add	r3, r2
 8007eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ebe:	460a      	mov	r2, r1
 8007ec0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007ec2:	6a3b      	ldr	r3, [r7, #32]
 8007ec4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	f003 0301 	and.w	r3, r3, #1
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	bf0c      	ite	eq
 8007ed2:	2301      	moveq	r3, #1
 8007ed4:	2300      	movne	r3, #0
 8007ed6:	b2db      	uxtb	r3, r3
 8007ed8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007eda:	69fb      	ldr	r3, [r7, #28]
 8007edc:	015a      	lsls	r2, r3, #5
 8007ede:	6a3b      	ldr	r3, [r7, #32]
 8007ee0:	4413      	add	r3, r2
 8007ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	69fa      	ldr	r2, [r7, #28]
 8007eea:	0151      	lsls	r1, r2, #5
 8007eec:	6a3a      	ldr	r2, [r7, #32]
 8007eee:	440a      	add	r2, r1
 8007ef0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ef4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007ef8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007efa:	69fb      	ldr	r3, [r7, #28]
 8007efc:	015a      	lsls	r2, r3, #5
 8007efe:	6a3b      	ldr	r3, [r7, #32]
 8007f00:	4413      	add	r3, r2
 8007f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f06:	681a      	ldr	r2, [r3, #0]
 8007f08:	7e7b      	ldrb	r3, [r7, #25]
 8007f0a:	075b      	lsls	r3, r3, #29
 8007f0c:	69f9      	ldr	r1, [r7, #28]
 8007f0e:	0148      	lsls	r0, r1, #5
 8007f10:	6a39      	ldr	r1, [r7, #32]
 8007f12:	4401      	add	r1, r0
 8007f14:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007f1c:	69fb      	ldr	r3, [r7, #28]
 8007f1e:	015a      	lsls	r2, r3, #5
 8007f20:	6a3b      	ldr	r3, [r7, #32]
 8007f22:	4413      	add	r3, r2
 8007f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007f32:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	78db      	ldrb	r3, [r3, #3]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d004      	beq.n	8007f46 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f42:	613b      	str	r3, [r7, #16]
 8007f44:	e003      	b.n	8007f4e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007f4c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007f54:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007f56:	69fb      	ldr	r3, [r7, #28]
 8007f58:	015a      	lsls	r2, r3, #5
 8007f5a:	6a3b      	ldr	r3, [r7, #32]
 8007f5c:	4413      	add	r3, r2
 8007f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f62:	461a      	mov	r2, r3
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007f68:	79fb      	ldrb	r3, [r7, #7]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d001      	beq.n	8007f72 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	e04e      	b.n	8008010 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	78db      	ldrb	r3, [r3, #3]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d149      	bne.n	800800e <USB_HC_StartXfer+0x276>
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	695b      	ldr	r3, [r3, #20]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d045      	beq.n	800800e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	79db      	ldrb	r3, [r3, #7]
 8007f86:	2b03      	cmp	r3, #3
 8007f88:	d830      	bhi.n	8007fec <USB_HC_StartXfer+0x254>
 8007f8a:	a201      	add	r2, pc, #4	; (adr r2, 8007f90 <USB_HC_StartXfer+0x1f8>)
 8007f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f90:	08007fa1 	.word	0x08007fa1
 8007f94:	08007fc5 	.word	0x08007fc5
 8007f98:	08007fa1 	.word	0x08007fa1
 8007f9c:	08007fc5 	.word	0x08007fc5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	695b      	ldr	r3, [r3, #20]
 8007fa4:	3303      	adds	r3, #3
 8007fa6:	089b      	lsrs	r3, r3, #2
 8007fa8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007faa:	8afa      	ldrh	r2, [r7, #22]
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d91c      	bls.n	8007ff0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	699b      	ldr	r3, [r3, #24]
 8007fba:	f043 0220 	orr.w	r2, r3, #32
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	619a      	str	r2, [r3, #24]
        }
        break;
 8007fc2:	e015      	b.n	8007ff0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	695b      	ldr	r3, [r3, #20]
 8007fc8:	3303      	adds	r3, #3
 8007fca:	089b      	lsrs	r3, r3, #2
 8007fcc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007fce:	8afa      	ldrh	r2, [r7, #22]
 8007fd0:	6a3b      	ldr	r3, [r7, #32]
 8007fd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007fd6:	691b      	ldr	r3, [r3, #16]
 8007fd8:	b29b      	uxth	r3, r3
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d90a      	bls.n	8007ff4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	699b      	ldr	r3, [r3, #24]
 8007fe2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	619a      	str	r2, [r3, #24]
        }
        break;
 8007fea:	e003      	b.n	8007ff4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007fec:	bf00      	nop
 8007fee:	e002      	b.n	8007ff6 <USB_HC_StartXfer+0x25e>
        break;
 8007ff0:	bf00      	nop
 8007ff2:	e000      	b.n	8007ff6 <USB_HC_StartXfer+0x25e>
        break;
 8007ff4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	68d9      	ldr	r1, [r3, #12]
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	785a      	ldrb	r2, [r3, #1]
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	695b      	ldr	r3, [r3, #20]
 8008002:	b29b      	uxth	r3, r3
 8008004:	2000      	movs	r0, #0
 8008006:	9000      	str	r0, [sp, #0]
 8008008:	68f8      	ldr	r0, [r7, #12]
 800800a:	f7ff fb53 	bl	80076b4 <USB_WritePacket>
  }

  return HAL_OK;
 800800e:	2300      	movs	r3, #0
}
 8008010:	4618      	mov	r0, r3
 8008012:	3728      	adds	r7, #40	; 0x28
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}
 8008018:	1ff80000 	.word	0x1ff80000

0800801c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800801c:	b480      	push	{r7}
 800801e:	b085      	sub	sp, #20
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800802e:	695b      	ldr	r3, [r3, #20]
 8008030:	b29b      	uxth	r3, r3
}
 8008032:	4618      	mov	r0, r3
 8008034:	3714      	adds	r7, #20
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr

0800803e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800803e:	b480      	push	{r7}
 8008040:	b089      	sub	sp, #36	; 0x24
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
 8008046:	460b      	mov	r3, r1
 8008048:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800804e:	78fb      	ldrb	r3, [r7, #3]
 8008050:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8008052:	2300      	movs	r3, #0
 8008054:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	015a      	lsls	r2, r3, #5
 800805a:	69bb      	ldr	r3, [r7, #24]
 800805c:	4413      	add	r3, r2
 800805e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	0c9b      	lsrs	r3, r3, #18
 8008066:	f003 0303 	and.w	r3, r3, #3
 800806a:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	015a      	lsls	r2, r3, #5
 8008070:	69bb      	ldr	r3, [r7, #24]
 8008072:	4413      	add	r3, r2
 8008074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	0fdb      	lsrs	r3, r3, #31
 800807c:	f003 0301 	and.w	r3, r3, #1
 8008080:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	689b      	ldr	r3, [r3, #8]
 8008086:	f003 0320 	and.w	r3, r3, #32
 800808a:	2b20      	cmp	r3, #32
 800808c:	d104      	bne.n	8008098 <USB_HC_Halt+0x5a>
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d101      	bne.n	8008098 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8008094:	2300      	movs	r3, #0
 8008096:	e0e8      	b.n	800826a <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d002      	beq.n	80080a4 <USB_HC_Halt+0x66>
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	2b02      	cmp	r3, #2
 80080a2:	d173      	bne.n	800818c <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	015a      	lsls	r2, r3, #5
 80080a8:	69bb      	ldr	r3, [r7, #24]
 80080aa:	4413      	add	r3, r2
 80080ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	697a      	ldr	r2, [r7, #20]
 80080b4:	0151      	lsls	r1, r2, #5
 80080b6:	69ba      	ldr	r2, [r7, #24]
 80080b8:	440a      	add	r2, r1
 80080ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80080be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80080c2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	f003 0320 	and.w	r3, r3, #32
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	f040 80cb 	bne.w	8008268 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080d6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d143      	bne.n	8008166 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	015a      	lsls	r2, r3, #5
 80080e2:	69bb      	ldr	r3, [r7, #24]
 80080e4:	4413      	add	r3, r2
 80080e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	697a      	ldr	r2, [r7, #20]
 80080ee:	0151      	lsls	r1, r2, #5
 80080f0:	69ba      	ldr	r2, [r7, #24]
 80080f2:	440a      	add	r2, r1
 80080f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80080f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80080fc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	015a      	lsls	r2, r3, #5
 8008102:	69bb      	ldr	r3, [r7, #24]
 8008104:	4413      	add	r3, r2
 8008106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	697a      	ldr	r2, [r7, #20]
 800810e:	0151      	lsls	r1, r2, #5
 8008110:	69ba      	ldr	r2, [r7, #24]
 8008112:	440a      	add	r2, r1
 8008114:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008118:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800811c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	015a      	lsls	r2, r3, #5
 8008122:	69bb      	ldr	r3, [r7, #24]
 8008124:	4413      	add	r3, r2
 8008126:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	697a      	ldr	r2, [r7, #20]
 800812e:	0151      	lsls	r1, r2, #5
 8008130:	69ba      	ldr	r2, [r7, #24]
 8008132:	440a      	add	r2, r1
 8008134:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008138:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800813c:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800813e:	69fb      	ldr	r3, [r7, #28]
 8008140:	3301      	adds	r3, #1
 8008142:	61fb      	str	r3, [r7, #28]
 8008144:	69fb      	ldr	r3, [r7, #28]
 8008146:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800814a:	d81d      	bhi.n	8008188 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	015a      	lsls	r2, r3, #5
 8008150:	69bb      	ldr	r3, [r7, #24]
 8008152:	4413      	add	r3, r2
 8008154:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800815e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008162:	d0ec      	beq.n	800813e <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008164:	e080      	b.n	8008268 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	015a      	lsls	r2, r3, #5
 800816a:	69bb      	ldr	r3, [r7, #24]
 800816c:	4413      	add	r3, r2
 800816e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	697a      	ldr	r2, [r7, #20]
 8008176:	0151      	lsls	r1, r2, #5
 8008178:	69ba      	ldr	r2, [r7, #24]
 800817a:	440a      	add	r2, r1
 800817c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008180:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008184:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008186:	e06f      	b.n	8008268 <USB_HC_Halt+0x22a>
            break;
 8008188:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800818a:	e06d      	b.n	8008268 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	015a      	lsls	r2, r3, #5
 8008190:	69bb      	ldr	r3, [r7, #24]
 8008192:	4413      	add	r3, r2
 8008194:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	697a      	ldr	r2, [r7, #20]
 800819c:	0151      	lsls	r1, r2, #5
 800819e:	69ba      	ldr	r2, [r7, #24]
 80081a0:	440a      	add	r2, r1
 80081a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80081a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80081aa:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80081ac:	69bb      	ldr	r3, [r7, #24]
 80081ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081b2:	691b      	ldr	r3, [r3, #16]
 80081b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d143      	bne.n	8008244 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	015a      	lsls	r2, r3, #5
 80081c0:	69bb      	ldr	r3, [r7, #24]
 80081c2:	4413      	add	r3, r2
 80081c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	697a      	ldr	r2, [r7, #20]
 80081cc:	0151      	lsls	r1, r2, #5
 80081ce:	69ba      	ldr	r2, [r7, #24]
 80081d0:	440a      	add	r2, r1
 80081d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80081d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80081da:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	015a      	lsls	r2, r3, #5
 80081e0:	69bb      	ldr	r3, [r7, #24]
 80081e2:	4413      	add	r3, r2
 80081e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	697a      	ldr	r2, [r7, #20]
 80081ec:	0151      	lsls	r1, r2, #5
 80081ee:	69ba      	ldr	r2, [r7, #24]
 80081f0:	440a      	add	r2, r1
 80081f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80081f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80081fa:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	015a      	lsls	r2, r3, #5
 8008200:	69bb      	ldr	r3, [r7, #24]
 8008202:	4413      	add	r3, r2
 8008204:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	697a      	ldr	r2, [r7, #20]
 800820c:	0151      	lsls	r1, r2, #5
 800820e:	69ba      	ldr	r2, [r7, #24]
 8008210:	440a      	add	r2, r1
 8008212:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008216:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800821a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800821c:	69fb      	ldr	r3, [r7, #28]
 800821e:	3301      	adds	r3, #1
 8008220:	61fb      	str	r3, [r7, #28]
 8008222:	69fb      	ldr	r3, [r7, #28]
 8008224:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008228:	d81d      	bhi.n	8008266 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	015a      	lsls	r2, r3, #5
 800822e:	69bb      	ldr	r3, [r7, #24]
 8008230:	4413      	add	r3, r2
 8008232:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800823c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008240:	d0ec      	beq.n	800821c <USB_HC_Halt+0x1de>
 8008242:	e011      	b.n	8008268 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	015a      	lsls	r2, r3, #5
 8008248:	69bb      	ldr	r3, [r7, #24]
 800824a:	4413      	add	r3, r2
 800824c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	697a      	ldr	r2, [r7, #20]
 8008254:	0151      	lsls	r1, r2, #5
 8008256:	69ba      	ldr	r2, [r7, #24]
 8008258:	440a      	add	r2, r1
 800825a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800825e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008262:	6013      	str	r3, [r2, #0]
 8008264:	e000      	b.n	8008268 <USB_HC_Halt+0x22a>
          break;
 8008266:	bf00      	nop
    }
  }

  return HAL_OK;
 8008268:	2300      	movs	r3, #0
}
 800826a:	4618      	mov	r0, r3
 800826c:	3724      	adds	r7, #36	; 0x24
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr
	...

08008278 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008278:	b480      	push	{r7}
 800827a:	b087      	sub	sp, #28
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	460b      	mov	r3, r1
 8008282:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008288:	78fb      	ldrb	r3, [r7, #3]
 800828a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800828c:	2301      	movs	r3, #1
 800828e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	04da      	lsls	r2, r3, #19
 8008294:	4b15      	ldr	r3, [pc, #84]	; (80082ec <USB_DoPing+0x74>)
 8008296:	4013      	ands	r3, r2
 8008298:	693a      	ldr	r2, [r7, #16]
 800829a:	0151      	lsls	r1, r2, #5
 800829c:	697a      	ldr	r2, [r7, #20]
 800829e:	440a      	add	r2, r1
 80082a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80082a8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	015a      	lsls	r2, r3, #5
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	4413      	add	r3, r2
 80082b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80082c0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80082c8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	015a      	lsls	r2, r3, #5
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	4413      	add	r3, r2
 80082d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082d6:	461a      	mov	r2, r3
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80082dc:	2300      	movs	r3, #0
}
 80082de:	4618      	mov	r0, r3
 80082e0:	371c      	adds	r7, #28
 80082e2:	46bd      	mov	sp, r7
 80082e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e8:	4770      	bx	lr
 80082ea:	bf00      	nop
 80082ec:	1ff80000 	.word	0x1ff80000

080082f0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b086      	sub	sp, #24
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80082fc:	2300      	movs	r3, #0
 80082fe:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f7ff f936 	bl	8007572 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8008306:	2110      	movs	r1, #16
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f7ff f98f 	bl	800762c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f7ff f9b0 	bl	8007674 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008314:	2300      	movs	r3, #0
 8008316:	613b      	str	r3, [r7, #16]
 8008318:	e01f      	b.n	800835a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	015a      	lsls	r2, r3, #5
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	4413      	add	r3, r2
 8008322:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008330:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008338:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008340:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	015a      	lsls	r2, r3, #5
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	4413      	add	r3, r2
 800834a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800834e:	461a      	mov	r2, r3
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	3301      	adds	r3, #1
 8008358:	613b      	str	r3, [r7, #16]
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	2b0f      	cmp	r3, #15
 800835e:	d9dc      	bls.n	800831a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008360:	2300      	movs	r3, #0
 8008362:	613b      	str	r3, [r7, #16]
 8008364:	e034      	b.n	80083d0 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	015a      	lsls	r2, r3, #5
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	4413      	add	r3, r2
 800836e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800837c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008384:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800838c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	015a      	lsls	r2, r3, #5
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	4413      	add	r3, r2
 8008396:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800839a:	461a      	mov	r2, r3
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	3301      	adds	r3, #1
 80083a4:	617b      	str	r3, [r7, #20]
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80083ac:	d80c      	bhi.n	80083c8 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	015a      	lsls	r2, r3, #5
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	4413      	add	r3, r2
 80083b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80083c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80083c4:	d0ec      	beq.n	80083a0 <USB_StopHost+0xb0>
 80083c6:	e000      	b.n	80083ca <USB_StopHost+0xda>
        break;
 80083c8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	3301      	adds	r3, #1
 80083ce:	613b      	str	r3, [r7, #16]
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	2b0f      	cmp	r3, #15
 80083d4:	d9c7      	bls.n	8008366 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80083dc:	461a      	mov	r2, r3
 80083de:	f04f 33ff 	mov.w	r3, #4294967295
 80083e2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f04f 32ff 	mov.w	r2, #4294967295
 80083ea:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f7ff f8af 	bl	8007550 <USB_EnableGlobalInt>

  return HAL_OK;
 80083f2:	2300      	movs	r3, #0
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3718      	adds	r7, #24
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}

080083fc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8008400:	4904      	ldr	r1, [pc, #16]	; (8008414 <MX_FATFS_Init+0x18>)
 8008402:	4805      	ldr	r0, [pc, #20]	; (8008418 <MX_FATFS_Init+0x1c>)
 8008404:	f003 f84c 	bl	800b4a0 <FATFS_LinkDriver>
 8008408:	4603      	mov	r3, r0
 800840a:	461a      	mov	r2, r3
 800840c:	4b03      	ldr	r3, [pc, #12]	; (800841c <MX_FATFS_Init+0x20>)
 800840e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008410:	bf00      	nop
 8008412:	bd80      	pop	{r7, pc}
 8008414:	20001e44 	.word	0x20001e44
 8008418:	0800c134 	.word	0x0800c134
 800841c:	20001e40 	.word	0x20001e40

08008420 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8008420:	b480      	push	{r7}
 8008422:	b083      	sub	sp, #12
 8008424:	af00      	add	r7, sp, #0
 8008426:	4603      	mov	r3, r0
 8008428:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 800842a:	2300      	movs	r3, #0
}
 800842c:	4618      	mov	r0, r3
 800842e:	370c      	adds	r7, #12
 8008430:	46bd      	mov	sp, r7
 8008432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008436:	4770      	bx	lr

08008438 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b084      	sub	sp, #16
 800843c:	af00      	add	r7, sp, #0
 800843e:	4603      	mov	r3, r0
 8008440:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8008442:	2301      	movs	r3, #1
 8008444:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8008446:	79fb      	ldrb	r3, [r7, #7]
 8008448:	4619      	mov	r1, r3
 800844a:	4808      	ldr	r0, [pc, #32]	; (800846c <USBH_status+0x34>)
 800844c:	f000 fe1a 	bl	8009084 <USBH_MSC_UnitIsReady>
 8008450:	4603      	mov	r3, r0
 8008452:	2b00      	cmp	r3, #0
 8008454:	d002      	beq.n	800845c <USBH_status+0x24>
  {
    res = RES_OK;
 8008456:	2300      	movs	r3, #0
 8008458:	73fb      	strb	r3, [r7, #15]
 800845a:	e001      	b.n	8008460 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 800845c:	2301      	movs	r3, #1
 800845e:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8008460:	7bfb      	ldrb	r3, [r7, #15]
}
 8008462:	4618      	mov	r0, r3
 8008464:	3710      	adds	r7, #16
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
 800846a:	bf00      	nop
 800846c:	20001e54 	.word	0x20001e54

08008470 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b094      	sub	sp, #80	; 0x50
 8008474:	af02      	add	r7, sp, #8
 8008476:	60b9      	str	r1, [r7, #8]
 8008478:	607a      	str	r2, [r7, #4]
 800847a:	603b      	str	r3, [r7, #0]
 800847c:	4603      	mov	r3, r0
 800847e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008480:	2301      	movs	r3, #1
 8008482:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8008486:	7bf9      	ldrb	r1, [r7, #15]
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	9300      	str	r3, [sp, #0]
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	687a      	ldr	r2, [r7, #4]
 8008490:	4813      	ldr	r0, [pc, #76]	; (80084e0 <USBH_read+0x70>)
 8008492:	f000 fe41 	bl	8009118 <USBH_MSC_Read>
 8008496:	4603      	mov	r3, r0
 8008498:	2b00      	cmp	r3, #0
 800849a:	d103      	bne.n	80084a4 <USBH_read+0x34>
  {
    res = RES_OK;
 800849c:	2300      	movs	r3, #0
 800849e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80084a2:	e017      	b.n	80084d4 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80084a4:	f107 0210 	add.w	r2, r7, #16
 80084a8:	7bfb      	ldrb	r3, [r7, #15]
 80084aa:	4619      	mov	r1, r3
 80084ac:	480c      	ldr	r0, [pc, #48]	; (80084e0 <USBH_read+0x70>)
 80084ae:	f000 fe0f 	bl	80090d0 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80084b2:	7f7b      	ldrb	r3, [r7, #29]
 80084b4:	2b3a      	cmp	r3, #58	; 0x3a
 80084b6:	d005      	beq.n	80084c4 <USBH_read+0x54>
 80084b8:	2b3a      	cmp	r3, #58	; 0x3a
 80084ba:	dc07      	bgt.n	80084cc <USBH_read+0x5c>
 80084bc:	2b04      	cmp	r3, #4
 80084be:	d001      	beq.n	80084c4 <USBH_read+0x54>
 80084c0:	2b28      	cmp	r3, #40	; 0x28
 80084c2:	d103      	bne.n	80084cc <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 80084c4:	2303      	movs	r3, #3
 80084c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80084ca:	e003      	b.n	80084d4 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 80084cc:	2301      	movs	r3, #1
 80084ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80084d2:	bf00      	nop
    }
  }

  return res;
 80084d4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3748      	adds	r7, #72	; 0x48
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}
 80084e0:	20001e54 	.word	0x20001e54

080084e4 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b094      	sub	sp, #80	; 0x50
 80084e8:	af02      	add	r7, sp, #8
 80084ea:	60b9      	str	r1, [r7, #8]
 80084ec:	607a      	str	r2, [r7, #4]
 80084ee:	603b      	str	r3, [r7, #0]
 80084f0:	4603      	mov	r3, r0
 80084f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80084f4:	2301      	movs	r3, #1
 80084f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 80084fa:	7bf9      	ldrb	r1, [r7, #15]
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	9300      	str	r3, [sp, #0]
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	687a      	ldr	r2, [r7, #4]
 8008504:	4817      	ldr	r0, [pc, #92]	; (8008564 <USBH_write+0x80>)
 8008506:	f000 fe70 	bl	80091ea <USBH_MSC_Write>
 800850a:	4603      	mov	r3, r0
 800850c:	2b00      	cmp	r3, #0
 800850e:	d103      	bne.n	8008518 <USBH_write+0x34>
  {
    res = RES_OK;
 8008510:	2300      	movs	r3, #0
 8008512:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008516:	e01f      	b.n	8008558 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8008518:	f107 0210 	add.w	r2, r7, #16
 800851c:	7bfb      	ldrb	r3, [r7, #15]
 800851e:	4619      	mov	r1, r3
 8008520:	4810      	ldr	r0, [pc, #64]	; (8008564 <USBH_write+0x80>)
 8008522:	f000 fdd5 	bl	80090d0 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8008526:	7f7b      	ldrb	r3, [r7, #29]
 8008528:	2b3a      	cmp	r3, #58	; 0x3a
 800852a:	d00d      	beq.n	8008548 <USBH_write+0x64>
 800852c:	2b3a      	cmp	r3, #58	; 0x3a
 800852e:	dc0f      	bgt.n	8008550 <USBH_write+0x6c>
 8008530:	2b28      	cmp	r3, #40	; 0x28
 8008532:	d009      	beq.n	8008548 <USBH_write+0x64>
 8008534:	2b28      	cmp	r3, #40	; 0x28
 8008536:	dc0b      	bgt.n	8008550 <USBH_write+0x6c>
 8008538:	2b04      	cmp	r3, #4
 800853a:	d005      	beq.n	8008548 <USBH_write+0x64>
 800853c:	2b27      	cmp	r3, #39	; 0x27
 800853e:	d107      	bne.n	8008550 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8008540:	2302      	movs	r3, #2
 8008542:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008546:	e007      	b.n	8008558 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8008548:	2303      	movs	r3, #3
 800854a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800854e:	e003      	b.n	8008558 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8008550:	2301      	movs	r3, #1
 8008552:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008556:	bf00      	nop
    }
  }

  return res;
 8008558:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800855c:	4618      	mov	r0, r3
 800855e:	3748      	adds	r7, #72	; 0x48
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}
 8008564:	20001e54 	.word	0x20001e54

08008568 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b090      	sub	sp, #64	; 0x40
 800856c:	af00      	add	r7, sp, #0
 800856e:	4603      	mov	r3, r0
 8008570:	603a      	str	r2, [r7, #0]
 8008572:	71fb      	strb	r3, [r7, #7]
 8008574:	460b      	mov	r3, r1
 8008576:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008578:	2301      	movs	r3, #1
 800857a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 800857e:	79bb      	ldrb	r3, [r7, #6]
 8008580:	2b03      	cmp	r3, #3
 8008582:	d852      	bhi.n	800862a <USBH_ioctl+0xc2>
 8008584:	a201      	add	r2, pc, #4	; (adr r2, 800858c <USBH_ioctl+0x24>)
 8008586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800858a:	bf00      	nop
 800858c:	0800859d 	.word	0x0800859d
 8008590:	080085a5 	.word	0x080085a5
 8008594:	080085cf 	.word	0x080085cf
 8008598:	080085fb 	.word	0x080085fb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 800859c:	2300      	movs	r3, #0
 800859e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80085a2:	e045      	b.n	8008630 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80085a4:	f107 0208 	add.w	r2, r7, #8
 80085a8:	79fb      	ldrb	r3, [r7, #7]
 80085aa:	4619      	mov	r1, r3
 80085ac:	4823      	ldr	r0, [pc, #140]	; (800863c <USBH_ioctl+0xd4>)
 80085ae:	f000 fd8f 	bl	80090d0 <USBH_MSC_GetLUNInfo>
 80085b2:	4603      	mov	r3, r0
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d106      	bne.n	80085c6 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 80085b8:	68fa      	ldr	r2, [r7, #12]
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80085be:	2300      	movs	r3, #0
 80085c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80085c4:	e034      	b.n	8008630 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80085c6:	2301      	movs	r3, #1
 80085c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80085cc:	e030      	b.n	8008630 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80085ce:	f107 0208 	add.w	r2, r7, #8
 80085d2:	79fb      	ldrb	r3, [r7, #7]
 80085d4:	4619      	mov	r1, r3
 80085d6:	4819      	ldr	r0, [pc, #100]	; (800863c <USBH_ioctl+0xd4>)
 80085d8:	f000 fd7a 	bl	80090d0 <USBH_MSC_GetLUNInfo>
 80085dc:	4603      	mov	r3, r0
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d107      	bne.n	80085f2 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 80085e2:	8a3b      	ldrh	r3, [r7, #16]
 80085e4:	461a      	mov	r2, r3
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80085ea:	2300      	movs	r3, #0
 80085ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80085f0:	e01e      	b.n	8008630 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80085f2:	2301      	movs	r3, #1
 80085f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80085f8:	e01a      	b.n	8008630 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80085fa:	f107 0208 	add.w	r2, r7, #8
 80085fe:	79fb      	ldrb	r3, [r7, #7]
 8008600:	4619      	mov	r1, r3
 8008602:	480e      	ldr	r0, [pc, #56]	; (800863c <USBH_ioctl+0xd4>)
 8008604:	f000 fd64 	bl	80090d0 <USBH_MSC_GetLUNInfo>
 8008608:	4603      	mov	r3, r0
 800860a:	2b00      	cmp	r3, #0
 800860c:	d109      	bne.n	8008622 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800860e:	8a3b      	ldrh	r3, [r7, #16]
 8008610:	0a5b      	lsrs	r3, r3, #9
 8008612:	b29b      	uxth	r3, r3
 8008614:	461a      	mov	r2, r3
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800861a:	2300      	movs	r3, #0
 800861c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008620:	e006      	b.n	8008630 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008622:	2301      	movs	r3, #1
 8008624:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008628:	e002      	b.n	8008630 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 800862a:	2304      	movs	r3, #4
 800862c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8008630:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008634:	4618      	mov	r0, r3
 8008636:	3740      	adds	r7, #64	; 0x40
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}
 800863c:	20001e54 	.word	0x20001e54

08008640 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008640:	b590      	push	{r4, r7, lr}
 8008642:	b089      	sub	sp, #36	; 0x24
 8008644:	af04      	add	r7, sp, #16
 8008646:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800864e:	7919      	ldrb	r1, [r3, #4]
 8008650:	2350      	movs	r3, #80	; 0x50
 8008652:	2206      	movs	r2, #6
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f001 fc53 	bl	8009f00 <USBH_FindInterface>
 800865a:	4603      	mov	r3, r0
 800865c:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800865e:	7bfb      	ldrb	r3, [r7, #15]
 8008660:	2bff      	cmp	r3, #255	; 0xff
 8008662:	d002      	beq.n	800866a <USBH_MSC_InterfaceInit+0x2a>
 8008664:	7bfb      	ldrb	r3, [r7, #15]
 8008666:	2b01      	cmp	r3, #1
 8008668:	d901      	bls.n	800866e <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800866a:	2302      	movs	r3, #2
 800866c:	e0ef      	b.n	800884e <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 800866e:	7bfb      	ldrb	r3, [r7, #15]
 8008670:	4619      	mov	r1, r3
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f001 fc28 	bl	8009ec8 <USBH_SelectInterface>
 8008678:	4603      	mov	r3, r0
 800867a:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800867c:	7bbb      	ldrb	r3, [r7, #14]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d001      	beq.n	8008686 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8008682:	2302      	movs	r3, #2
 8008684:	e0e3      	b.n	800884e <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800868c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008690:	f003 fa78 	bl	800bb84 <malloc>
 8008694:	4603      	mov	r3, r0
 8008696:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800869e:	69db      	ldr	r3, [r3, #28]
 80086a0:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d101      	bne.n	80086ac <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 80086a8:	2302      	movs	r3, #2
 80086aa:	e0d0      	b.n	800884e <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 80086ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80086b0:	2100      	movs	r1, #0
 80086b2:	68b8      	ldr	r0, [r7, #8]
 80086b4:	f003 fa84 	bl	800bbc0 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80086b8:	7bfb      	ldrb	r3, [r7, #15]
 80086ba:	687a      	ldr	r2, [r7, #4]
 80086bc:	211a      	movs	r1, #26
 80086be:	fb01 f303 	mul.w	r3, r1, r3
 80086c2:	4413      	add	r3, r2
 80086c4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80086c8:	781b      	ldrb	r3, [r3, #0]
 80086ca:	b25b      	sxtb	r3, r3
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	da16      	bge.n	80086fe <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80086d0:	7bfb      	ldrb	r3, [r7, #15]
 80086d2:	687a      	ldr	r2, [r7, #4]
 80086d4:	211a      	movs	r1, #26
 80086d6:	fb01 f303 	mul.w	r3, r1, r3
 80086da:	4413      	add	r3, r2
 80086dc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80086e0:	781a      	ldrb	r2, [r3, #0]
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80086e6:	7bfb      	ldrb	r3, [r7, #15]
 80086e8:	687a      	ldr	r2, [r7, #4]
 80086ea:	211a      	movs	r1, #26
 80086ec:	fb01 f303 	mul.w	r3, r1, r3
 80086f0:	4413      	add	r3, r2
 80086f2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80086f6:	881a      	ldrh	r2, [r3, #0]
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	815a      	strh	r2, [r3, #10]
 80086fc:	e015      	b.n	800872a <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80086fe:	7bfb      	ldrb	r3, [r7, #15]
 8008700:	687a      	ldr	r2, [r7, #4]
 8008702:	211a      	movs	r1, #26
 8008704:	fb01 f303 	mul.w	r3, r1, r3
 8008708:	4413      	add	r3, r2
 800870a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800870e:	781a      	ldrb	r2, [r3, #0]
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008714:	7bfb      	ldrb	r3, [r7, #15]
 8008716:	687a      	ldr	r2, [r7, #4]
 8008718:	211a      	movs	r1, #26
 800871a:	fb01 f303 	mul.w	r3, r1, r3
 800871e:	4413      	add	r3, r2
 8008720:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008724:	881a      	ldrh	r2, [r3, #0]
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800872a:	7bfb      	ldrb	r3, [r7, #15]
 800872c:	687a      	ldr	r2, [r7, #4]
 800872e:	211a      	movs	r1, #26
 8008730:	fb01 f303 	mul.w	r3, r1, r3
 8008734:	4413      	add	r3, r2
 8008736:	f203 3356 	addw	r3, r3, #854	; 0x356
 800873a:	781b      	ldrb	r3, [r3, #0]
 800873c:	b25b      	sxtb	r3, r3
 800873e:	2b00      	cmp	r3, #0
 8008740:	da16      	bge.n	8008770 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008742:	7bfb      	ldrb	r3, [r7, #15]
 8008744:	687a      	ldr	r2, [r7, #4]
 8008746:	211a      	movs	r1, #26
 8008748:	fb01 f303 	mul.w	r3, r1, r3
 800874c:	4413      	add	r3, r2
 800874e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008752:	781a      	ldrb	r2, [r3, #0]
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008758:	7bfb      	ldrb	r3, [r7, #15]
 800875a:	687a      	ldr	r2, [r7, #4]
 800875c:	211a      	movs	r1, #26
 800875e:	fb01 f303 	mul.w	r3, r1, r3
 8008762:	4413      	add	r3, r2
 8008764:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008768:	881a      	ldrh	r2, [r3, #0]
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	815a      	strh	r2, [r3, #10]
 800876e:	e015      	b.n	800879c <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008770:	7bfb      	ldrb	r3, [r7, #15]
 8008772:	687a      	ldr	r2, [r7, #4]
 8008774:	211a      	movs	r1, #26
 8008776:	fb01 f303 	mul.w	r3, r1, r3
 800877a:	4413      	add	r3, r2
 800877c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008780:	781a      	ldrb	r2, [r3, #0]
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008786:	7bfb      	ldrb	r3, [r7, #15]
 8008788:	687a      	ldr	r2, [r7, #4]
 800878a:	211a      	movs	r1, #26
 800878c:	fb01 f303 	mul.w	r3, r1, r3
 8008790:	4413      	add	r3, r2
 8008792:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008796:	881a      	ldrh	r2, [r3, #0]
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	2200      	movs	r2, #0
 80087a0:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	2200      	movs	r2, #0
 80087a6:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	2200      	movs	r2, #0
 80087ac:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	799b      	ldrb	r3, [r3, #6]
 80087b2:	4619      	mov	r1, r3
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f002 fdc4 	bl	800b342 <USBH_AllocPipe>
 80087ba:	4603      	mov	r3, r0
 80087bc:	461a      	mov	r2, r3
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	79db      	ldrb	r3, [r3, #7]
 80087c6:	4619      	mov	r1, r3
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f002 fdba 	bl	800b342 <USBH_AllocPipe>
 80087ce:	4603      	mov	r3, r0
 80087d0:	461a      	mov	r2, r3
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 fdac 	bl	8009334 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	7959      	ldrb	r1, [r3, #5]
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	7998      	ldrb	r0, [r3, #6]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80087f0:	68ba      	ldr	r2, [r7, #8]
 80087f2:	8912      	ldrh	r2, [r2, #8]
 80087f4:	9202      	str	r2, [sp, #8]
 80087f6:	2202      	movs	r2, #2
 80087f8:	9201      	str	r2, [sp, #4]
 80087fa:	9300      	str	r3, [sp, #0]
 80087fc:	4623      	mov	r3, r4
 80087fe:	4602      	mov	r2, r0
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f002 fd6f 	bl	800b2e4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	7919      	ldrb	r1, [r3, #4]
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	79d8      	ldrb	r0, [r3, #7]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800881a:	68ba      	ldr	r2, [r7, #8]
 800881c:	8952      	ldrh	r2, [r2, #10]
 800881e:	9202      	str	r2, [sp, #8]
 8008820:	2202      	movs	r2, #2
 8008822:	9201      	str	r2, [sp, #4]
 8008824:	9300      	str	r3, [sp, #0]
 8008826:	4623      	mov	r3, r4
 8008828:	4602      	mov	r2, r0
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f002 fd5a 	bl	800b2e4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	791b      	ldrb	r3, [r3, #4]
 8008834:	2200      	movs	r2, #0
 8008836:	4619      	mov	r1, r3
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f003 f8c5 	bl	800b9c8 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	795b      	ldrb	r3, [r3, #5]
 8008842:	2200      	movs	r2, #0
 8008844:	4619      	mov	r1, r3
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f003 f8be 	bl	800b9c8 <USBH_LL_SetToggle>

  return USBH_OK;
 800884c:	2300      	movs	r3, #0
}
 800884e:	4618      	mov	r0, r3
 8008850:	3714      	adds	r7, #20
 8008852:	46bd      	mov	sp, r7
 8008854:	bd90      	pop	{r4, r7, pc}

08008856 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008856:	b580      	push	{r7, lr}
 8008858:	b084      	sub	sp, #16
 800885a:	af00      	add	r7, sp, #0
 800885c:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008864:	69db      	ldr	r3, [r3, #28]
 8008866:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	795b      	ldrb	r3, [r3, #5]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d00e      	beq.n	800888e <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	795b      	ldrb	r3, [r3, #5]
 8008874:	4619      	mov	r1, r3
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f002 fd53 	bl	800b322 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	795b      	ldrb	r3, [r3, #5]
 8008880:	4619      	mov	r1, r3
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f002 fd7e 	bl	800b384 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2200      	movs	r2, #0
 800888c:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	791b      	ldrb	r3, [r3, #4]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d00e      	beq.n	80088b4 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	791b      	ldrb	r3, [r3, #4]
 800889a:	4619      	mov	r1, r3
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f002 fd40 	bl	800b322 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	791b      	ldrb	r3, [r3, #4]
 80088a6:	4619      	mov	r1, r3
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f002 fd6b 	bl	800b384 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2200      	movs	r2, #0
 80088b2:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80088ba:	69db      	ldr	r3, [r3, #28]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d00b      	beq.n	80088d8 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80088c6:	69db      	ldr	r3, [r3, #28]
 80088c8:	4618      	mov	r0, r3
 80088ca:	f003 f963 	bl	800bb94 <free>
    phost->pActiveClass->pData = 0U;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80088d4:	2200      	movs	r2, #0
 80088d6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80088d8:	2300      	movs	r3, #0
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3710      	adds	r7, #16
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}

080088e2 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80088e2:	b580      	push	{r7, lr}
 80088e4:	b084      	sub	sp, #16
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80088f0:	69db      	ldr	r3, [r3, #28]
 80088f2:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 80088f4:	2301      	movs	r3, #1
 80088f6:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	7b9b      	ldrb	r3, [r3, #14]
 80088fc:	2b03      	cmp	r3, #3
 80088fe:	d041      	beq.n	8008984 <USBH_MSC_ClassRequest+0xa2>
 8008900:	2b03      	cmp	r3, #3
 8008902:	dc4b      	bgt.n	800899c <USBH_MSC_ClassRequest+0xba>
 8008904:	2b00      	cmp	r3, #0
 8008906:	d001      	beq.n	800890c <USBH_MSC_ClassRequest+0x2a>
 8008908:	2b02      	cmp	r3, #2
 800890a:	d147      	bne.n	800899c <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	4619      	mov	r1, r3
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f000 fcf0 	bl	80092f6 <USBH_MSC_BOT_REQ_GetMaxLUN>
 8008916:	4603      	mov	r3, r0
 8008918:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 800891a:	7bfb      	ldrb	r3, [r7, #15]
 800891c:	2b03      	cmp	r3, #3
 800891e:	d104      	bne.n	800892a <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	2200      	movs	r2, #0
 8008924:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8008926:	2300      	movs	r3, #0
 8008928:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 800892a:	7bfb      	ldrb	r3, [r7, #15]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d137      	bne.n	80089a0 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	2b02      	cmp	r3, #2
 8008936:	d804      	bhi.n	8008942 <USBH_MSC_ClassRequest+0x60>
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	781b      	ldrb	r3, [r3, #0]
 800893c:	3301      	adds	r3, #1
 800893e:	b2da      	uxtb	r2, r3
 8008940:	e000      	b.n	8008944 <USBH_MSC_ClassRequest+0x62>
 8008942:	2202      	movs	r2, #2
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8008948:	2300      	movs	r3, #0
 800894a:	73bb      	strb	r3, [r7, #14]
 800894c:	e014      	b.n	8008978 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800894e:	7bbb      	ldrb	r3, [r7, #14]
 8008950:	68ba      	ldr	r2, [r7, #8]
 8008952:	2134      	movs	r1, #52	; 0x34
 8008954:	fb01 f303 	mul.w	r3, r1, r3
 8008958:	4413      	add	r3, r2
 800895a:	3392      	adds	r3, #146	; 0x92
 800895c:	2202      	movs	r2, #2
 800895e:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8008960:	7bbb      	ldrb	r3, [r7, #14]
 8008962:	68ba      	ldr	r2, [r7, #8]
 8008964:	2134      	movs	r1, #52	; 0x34
 8008966:	fb01 f303 	mul.w	r3, r1, r3
 800896a:	4413      	add	r3, r2
 800896c:	33c1      	adds	r3, #193	; 0xc1
 800896e:	2200      	movs	r2, #0
 8008970:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8008972:	7bbb      	ldrb	r3, [r7, #14]
 8008974:	3301      	adds	r3, #1
 8008976:	73bb      	strb	r3, [r7, #14]
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	781b      	ldrb	r3, [r3, #0]
 800897c:	7bba      	ldrb	r2, [r7, #14]
 800897e:	429a      	cmp	r2, r3
 8008980:	d3e5      	bcc.n	800894e <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8008982:	e00d      	b.n	80089a0 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8008984:	2100      	movs	r1, #0
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f002 f87b 	bl	800aa82 <USBH_ClrFeature>
 800898c:	4603      	mov	r3, r0
 800898e:	2b00      	cmp	r3, #0
 8008990:	d108      	bne.n	80089a4 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	7bda      	ldrb	r2, [r3, #15]
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	739a      	strb	r2, [r3, #14]
      }
      break;
 800899a:	e003      	b.n	80089a4 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 800899c:	bf00      	nop
 800899e:	e002      	b.n	80089a6 <USBH_MSC_ClassRequest+0xc4>
      break;
 80089a0:	bf00      	nop
 80089a2:	e000      	b.n	80089a6 <USBH_MSC_ClassRequest+0xc4>
      break;
 80089a4:	bf00      	nop
  }

  return status;
 80089a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3710      	adds	r7, #16
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}

080089b0 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b086      	sub	sp, #24
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80089be:	69db      	ldr	r3, [r3, #28]
 80089c0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 80089c2:	2301      	movs	r3, #1
 80089c4:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 80089c6:	2301      	movs	r3, #1
 80089c8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 80089ca:	2301      	movs	r3, #1
 80089cc:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	7b1b      	ldrb	r3, [r3, #12]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d003      	beq.n	80089de <USBH_MSC_Process+0x2e>
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	f000 8271 	beq.w	8008ebe <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 80089dc:	e272      	b.n	8008ec4 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	781b      	ldrb	r3, [r3, #0]
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	429a      	cmp	r2, r3
 80089ec:	f080 824f 	bcs.w	8008e8e <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80089f6:	4619      	mov	r1, r3
 80089f8:	693a      	ldr	r2, [r7, #16]
 80089fa:	2334      	movs	r3, #52	; 0x34
 80089fc:	fb01 f303 	mul.w	r3, r1, r3
 8008a00:	4413      	add	r3, r2
 8008a02:	3391      	adds	r3, #145	; 0x91
 8008a04:	2201      	movs	r2, #1
 8008a06:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008a0e:	4619      	mov	r1, r3
 8008a10:	693a      	ldr	r2, [r7, #16]
 8008a12:	2334      	movs	r3, #52	; 0x34
 8008a14:	fb01 f303 	mul.w	r3, r1, r3
 8008a18:	4413      	add	r3, r2
 8008a1a:	3390      	adds	r3, #144	; 0x90
 8008a1c:	781b      	ldrb	r3, [r3, #0]
 8008a1e:	2b08      	cmp	r3, #8
 8008a20:	f200 8243 	bhi.w	8008eaa <USBH_MSC_Process+0x4fa>
 8008a24:	a201      	add	r2, pc, #4	; (adr r2, 8008a2c <USBH_MSC_Process+0x7c>)
 8008a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a2a:	bf00      	nop
 8008a2c:	08008a51 	.word	0x08008a51
 8008a30:	08008eab 	.word	0x08008eab
 8008a34:	08008b19 	.word	0x08008b19
 8008a38:	08008c9d 	.word	0x08008c9d
 8008a3c:	08008a77 	.word	0x08008a77
 8008a40:	08008d69 	.word	0x08008d69
 8008a44:	08008eab 	.word	0x08008eab
 8008a48:	08008eab 	.word	0x08008eab
 8008a4c:	08008e7d 	.word	0x08008e7d
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008a56:	4619      	mov	r1, r3
 8008a58:	693a      	ldr	r2, [r7, #16]
 8008a5a:	2334      	movs	r3, #52	; 0x34
 8008a5c:	fb01 f303 	mul.w	r3, r1, r3
 8008a60:	4413      	add	r3, r2
 8008a62:	3390      	adds	r3, #144	; 0x90
 8008a64:	2204      	movs	r2, #4
 8008a66:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8008a74:	e222      	b.n	8008ebc <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008a7c:	b2d9      	uxtb	r1, r3
 8008a7e:	693b      	ldr	r3, [r7, #16]
 8008a80:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008a84:	461a      	mov	r2, r3
 8008a86:	2334      	movs	r3, #52	; 0x34
 8008a88:	fb02 f303 	mul.w	r3, r2, r3
 8008a8c:	3398      	adds	r3, #152	; 0x98
 8008a8e:	693a      	ldr	r2, [r7, #16]
 8008a90:	4413      	add	r3, r2
 8008a92:	3307      	adds	r3, #7
 8008a94:	461a      	mov	r2, r3
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f000 ff6a 	bl	8009970 <USBH_MSC_SCSI_Inquiry>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008aa0:	7bfb      	ldrb	r3, [r7, #15]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d10b      	bne.n	8008abe <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008aac:	4619      	mov	r1, r3
 8008aae:	693a      	ldr	r2, [r7, #16]
 8008ab0:	2334      	movs	r3, #52	; 0x34
 8008ab2:	fb01 f303 	mul.w	r3, r1, r3
 8008ab6:	4413      	add	r3, r2
 8008ab8:	3390      	adds	r3, #144	; 0x90
 8008aba:	2202      	movs	r2, #2
 8008abc:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8008abe:	7bfb      	ldrb	r3, [r7, #15]
 8008ac0:	2b02      	cmp	r3, #2
 8008ac2:	d10c      	bne.n	8008ade <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008aca:	4619      	mov	r1, r3
 8008acc:	693a      	ldr	r2, [r7, #16]
 8008ace:	2334      	movs	r3, #52	; 0x34
 8008ad0:	fb01 f303 	mul.w	r3, r1, r3
 8008ad4:	4413      	add	r3, r2
 8008ad6:	3390      	adds	r3, #144	; 0x90
 8008ad8:	2205      	movs	r2, #5
 8008ada:	701a      	strb	r2, [r3, #0]
            break;
 8008adc:	e1e7      	b.n	8008eae <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008ade:	7bfb      	ldrb	r3, [r7, #15]
 8008ae0:	2b04      	cmp	r3, #4
 8008ae2:	f040 81e4 	bne.w	8008eae <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008aec:	4619      	mov	r1, r3
 8008aee:	693a      	ldr	r2, [r7, #16]
 8008af0:	2334      	movs	r3, #52	; 0x34
 8008af2:	fb01 f303 	mul.w	r3, r1, r3
 8008af6:	4413      	add	r3, r2
 8008af8:	3390      	adds	r3, #144	; 0x90
 8008afa:	2201      	movs	r2, #1
 8008afc:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008b04:	4619      	mov	r1, r3
 8008b06:	693a      	ldr	r2, [r7, #16]
 8008b08:	2334      	movs	r3, #52	; 0x34
 8008b0a:	fb01 f303 	mul.w	r3, r1, r3
 8008b0e:	4413      	add	r3, r2
 8008b10:	3391      	adds	r3, #145	; 0x91
 8008b12:	2202      	movs	r2, #2
 8008b14:	701a      	strb	r2, [r3, #0]
            break;
 8008b16:	e1ca      	b.n	8008eae <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008b1e:	b2db      	uxtb	r3, r3
 8008b20:	4619      	mov	r1, r3
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f000 fe66 	bl	80097f4 <USBH_MSC_SCSI_TestUnitReady>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8008b2c:	7bbb      	ldrb	r3, [r7, #14]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d149      	bne.n	8008bc6 <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008b38:	4619      	mov	r1, r3
 8008b3a:	693a      	ldr	r2, [r7, #16]
 8008b3c:	2334      	movs	r3, #52	; 0x34
 8008b3e:	fb01 f303 	mul.w	r3, r1, r3
 8008b42:	4413      	add	r3, r2
 8008b44:	3392      	adds	r3, #146	; 0x92
 8008b46:	781b      	ldrb	r3, [r3, #0]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d00c      	beq.n	8008b66 <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008b52:	4619      	mov	r1, r3
 8008b54:	693a      	ldr	r2, [r7, #16]
 8008b56:	2334      	movs	r3, #52	; 0x34
 8008b58:	fb01 f303 	mul.w	r3, r1, r3
 8008b5c:	4413      	add	r3, r2
 8008b5e:	33c1      	adds	r3, #193	; 0xc1
 8008b60:	2201      	movs	r2, #1
 8008b62:	701a      	strb	r2, [r3, #0]
 8008b64:	e00b      	b.n	8008b7e <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008b6c:	4619      	mov	r1, r3
 8008b6e:	693a      	ldr	r2, [r7, #16]
 8008b70:	2334      	movs	r3, #52	; 0x34
 8008b72:	fb01 f303 	mul.w	r3, r1, r3
 8008b76:	4413      	add	r3, r2
 8008b78:	33c1      	adds	r3, #193	; 0xc1
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8008b7e:	693b      	ldr	r3, [r7, #16]
 8008b80:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008b84:	4619      	mov	r1, r3
 8008b86:	693a      	ldr	r2, [r7, #16]
 8008b88:	2334      	movs	r3, #52	; 0x34
 8008b8a:	fb01 f303 	mul.w	r3, r1, r3
 8008b8e:	4413      	add	r3, r2
 8008b90:	3390      	adds	r3, #144	; 0x90
 8008b92:	2203      	movs	r2, #3
 8008b94:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	693a      	ldr	r2, [r7, #16]
 8008ba0:	2334      	movs	r3, #52	; 0x34
 8008ba2:	fb01 f303 	mul.w	r3, r1, r3
 8008ba6:	4413      	add	r3, r2
 8008ba8:	3391      	adds	r3, #145	; 0x91
 8008baa:	2200      	movs	r2, #0
 8008bac:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008bb4:	4619      	mov	r1, r3
 8008bb6:	693a      	ldr	r2, [r7, #16]
 8008bb8:	2334      	movs	r3, #52	; 0x34
 8008bba:	fb01 f303 	mul.w	r3, r1, r3
 8008bbe:	4413      	add	r3, r2
 8008bc0:	3392      	adds	r3, #146	; 0x92
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8008bc6:	7bbb      	ldrb	r3, [r7, #14]
 8008bc8:	2b02      	cmp	r3, #2
 8008bca:	d14a      	bne.n	8008c62 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008bd2:	4619      	mov	r1, r3
 8008bd4:	693a      	ldr	r2, [r7, #16]
 8008bd6:	2334      	movs	r3, #52	; 0x34
 8008bd8:	fb01 f303 	mul.w	r3, r1, r3
 8008bdc:	4413      	add	r3, r2
 8008bde:	3392      	adds	r3, #146	; 0x92
 8008be0:	781b      	ldrb	r3, [r3, #0]
 8008be2:	2b02      	cmp	r3, #2
 8008be4:	d00c      	beq.n	8008c00 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008bec:	4619      	mov	r1, r3
 8008bee:	693a      	ldr	r2, [r7, #16]
 8008bf0:	2334      	movs	r3, #52	; 0x34
 8008bf2:	fb01 f303 	mul.w	r3, r1, r3
 8008bf6:	4413      	add	r3, r2
 8008bf8:	33c1      	adds	r3, #193	; 0xc1
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	701a      	strb	r2, [r3, #0]
 8008bfe:	e00b      	b.n	8008c18 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c06:	4619      	mov	r1, r3
 8008c08:	693a      	ldr	r2, [r7, #16]
 8008c0a:	2334      	movs	r3, #52	; 0x34
 8008c0c:	fb01 f303 	mul.w	r3, r1, r3
 8008c10:	4413      	add	r3, r2
 8008c12:	33c1      	adds	r3, #193	; 0xc1
 8008c14:	2200      	movs	r2, #0
 8008c16:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c1e:	4619      	mov	r1, r3
 8008c20:	693a      	ldr	r2, [r7, #16]
 8008c22:	2334      	movs	r3, #52	; 0x34
 8008c24:	fb01 f303 	mul.w	r3, r1, r3
 8008c28:	4413      	add	r3, r2
 8008c2a:	3390      	adds	r3, #144	; 0x90
 8008c2c:	2205      	movs	r2, #5
 8008c2e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c36:	4619      	mov	r1, r3
 8008c38:	693a      	ldr	r2, [r7, #16]
 8008c3a:	2334      	movs	r3, #52	; 0x34
 8008c3c:	fb01 f303 	mul.w	r3, r1, r3
 8008c40:	4413      	add	r3, r2
 8008c42:	3391      	adds	r3, #145	; 0x91
 8008c44:	2201      	movs	r2, #1
 8008c46:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c4e:	4619      	mov	r1, r3
 8008c50:	693a      	ldr	r2, [r7, #16]
 8008c52:	2334      	movs	r3, #52	; 0x34
 8008c54:	fb01 f303 	mul.w	r3, r1, r3
 8008c58:	4413      	add	r3, r2
 8008c5a:	3392      	adds	r3, #146	; 0x92
 8008c5c:	2202      	movs	r2, #2
 8008c5e:	701a      	strb	r2, [r3, #0]
            break;
 8008c60:	e127      	b.n	8008eb2 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8008c62:	7bbb      	ldrb	r3, [r7, #14]
 8008c64:	2b04      	cmp	r3, #4
 8008c66:	f040 8124 	bne.w	8008eb2 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c70:	4619      	mov	r1, r3
 8008c72:	693a      	ldr	r2, [r7, #16]
 8008c74:	2334      	movs	r3, #52	; 0x34
 8008c76:	fb01 f303 	mul.w	r3, r1, r3
 8008c7a:	4413      	add	r3, r2
 8008c7c:	3390      	adds	r3, #144	; 0x90
 8008c7e:	2201      	movs	r2, #1
 8008c80:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c88:	4619      	mov	r1, r3
 8008c8a:	693a      	ldr	r2, [r7, #16]
 8008c8c:	2334      	movs	r3, #52	; 0x34
 8008c8e:	fb01 f303 	mul.w	r3, r1, r3
 8008c92:	4413      	add	r3, r2
 8008c94:	3391      	adds	r3, #145	; 0x91
 8008c96:	2202      	movs	r2, #2
 8008c98:	701a      	strb	r2, [r3, #0]
            break;
 8008c9a:	e10a      	b.n	8008eb2 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008ca2:	b2d9      	uxtb	r1, r3
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008caa:	461a      	mov	r2, r3
 8008cac:	2334      	movs	r3, #52	; 0x34
 8008cae:	fb02 f303 	mul.w	r3, r2, r3
 8008cb2:	3390      	adds	r3, #144	; 0x90
 8008cb4:	693a      	ldr	r2, [r7, #16]
 8008cb6:	4413      	add	r3, r2
 8008cb8:	3304      	adds	r3, #4
 8008cba:	461a      	mov	r2, r3
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f000 fddc 	bl	800987a <USBH_MSC_SCSI_ReadCapacity>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008cc6:	7bfb      	ldrb	r3, [r7, #15]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d120      	bne.n	8008d0e <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008cd2:	4619      	mov	r1, r3
 8008cd4:	693a      	ldr	r2, [r7, #16]
 8008cd6:	2334      	movs	r3, #52	; 0x34
 8008cd8:	fb01 f303 	mul.w	r3, r1, r3
 8008cdc:	4413      	add	r3, r2
 8008cde:	3390      	adds	r3, #144	; 0x90
 8008ce0:	2201      	movs	r2, #1
 8008ce2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008cea:	4619      	mov	r1, r3
 8008cec:	693a      	ldr	r2, [r7, #16]
 8008cee:	2334      	movs	r3, #52	; 0x34
 8008cf0:	fb01 f303 	mul.w	r3, r1, r3
 8008cf4:	4413      	add	r3, r2
 8008cf6:	3391      	adds	r3, #145	; 0x91
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008d02:	3301      	adds	r3, #1
 8008d04:	b29a      	uxth	r2, r3
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8008d0c:	e0d3      	b.n	8008eb6 <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 8008d0e:	7bfb      	ldrb	r3, [r7, #15]
 8008d10:	2b02      	cmp	r3, #2
 8008d12:	d10c      	bne.n	8008d2e <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008d1a:	4619      	mov	r1, r3
 8008d1c:	693a      	ldr	r2, [r7, #16]
 8008d1e:	2334      	movs	r3, #52	; 0x34
 8008d20:	fb01 f303 	mul.w	r3, r1, r3
 8008d24:	4413      	add	r3, r2
 8008d26:	3390      	adds	r3, #144	; 0x90
 8008d28:	2205      	movs	r2, #5
 8008d2a:	701a      	strb	r2, [r3, #0]
            break;
 8008d2c:	e0c3      	b.n	8008eb6 <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008d2e:	7bfb      	ldrb	r3, [r7, #15]
 8008d30:	2b04      	cmp	r3, #4
 8008d32:	f040 80c0 	bne.w	8008eb6 <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	693a      	ldr	r2, [r7, #16]
 8008d40:	2334      	movs	r3, #52	; 0x34
 8008d42:	fb01 f303 	mul.w	r3, r1, r3
 8008d46:	4413      	add	r3, r2
 8008d48:	3390      	adds	r3, #144	; 0x90
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008d54:	4619      	mov	r1, r3
 8008d56:	693a      	ldr	r2, [r7, #16]
 8008d58:	2334      	movs	r3, #52	; 0x34
 8008d5a:	fb01 f303 	mul.w	r3, r1, r3
 8008d5e:	4413      	add	r3, r2
 8008d60:	3391      	adds	r3, #145	; 0x91
 8008d62:	2202      	movs	r2, #2
 8008d64:	701a      	strb	r2, [r3, #0]
            break;
 8008d66:	e0a6      	b.n	8008eb6 <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008d6e:	b2d9      	uxtb	r1, r3
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008d76:	461a      	mov	r2, r3
 8008d78:	2334      	movs	r3, #52	; 0x34
 8008d7a:	fb02 f303 	mul.w	r3, r2, r3
 8008d7e:	3398      	adds	r3, #152	; 0x98
 8008d80:	693a      	ldr	r2, [r7, #16]
 8008d82:	4413      	add	r3, r2
 8008d84:	3304      	adds	r3, #4
 8008d86:	461a      	mov	r2, r3
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f000 fe96 	bl	8009aba <USBH_MSC_SCSI_RequestSense>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008d92:	7bfb      	ldrb	r3, [r7, #15]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d145      	bne.n	8008e24 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008d9e:	4619      	mov	r1, r3
 8008da0:	693a      	ldr	r2, [r7, #16]
 8008da2:	2334      	movs	r3, #52	; 0x34
 8008da4:	fb01 f303 	mul.w	r3, r1, r3
 8008da8:	4413      	add	r3, r2
 8008daa:	339c      	adds	r3, #156	; 0x9c
 8008dac:	781b      	ldrb	r3, [r3, #0]
 8008dae:	2b06      	cmp	r3, #6
 8008db0:	d00c      	beq.n	8008dcc <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008db8:	4619      	mov	r1, r3
 8008dba:	693a      	ldr	r2, [r7, #16]
 8008dbc:	2334      	movs	r3, #52	; 0x34
 8008dbe:	fb01 f303 	mul.w	r3, r1, r3
 8008dc2:	4413      	add	r3, r2
 8008dc4:	339c      	adds	r3, #156	; 0x9c
 8008dc6:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8008dc8:	2b02      	cmp	r3, #2
 8008dca:	d117      	bne.n	8008dfc <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008dd2:	693b      	ldr	r3, [r7, #16]
 8008dd4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8008dd8:	1ad3      	subs	r3, r2, r3
 8008dda:	f242 720f 	movw	r2, #9999	; 0x270f
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d80c      	bhi.n	8008dfc <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008de8:	4619      	mov	r1, r3
 8008dea:	693a      	ldr	r2, [r7, #16]
 8008dec:	2334      	movs	r3, #52	; 0x34
 8008dee:	fb01 f303 	mul.w	r3, r1, r3
 8008df2:	4413      	add	r3, r2
 8008df4:	3390      	adds	r3, #144	; 0x90
 8008df6:	2202      	movs	r2, #2
 8008df8:	701a      	strb	r2, [r3, #0]
                  break;
 8008dfa:	e05f      	b.n	8008ebc <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e02:	4619      	mov	r1, r3
 8008e04:	693a      	ldr	r2, [r7, #16]
 8008e06:	2334      	movs	r3, #52	; 0x34
 8008e08:	fb01 f303 	mul.w	r3, r1, r3
 8008e0c:	4413      	add	r3, r2
 8008e0e:	3390      	adds	r3, #144	; 0x90
 8008e10:	2201      	movs	r2, #1
 8008e12:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e1a:	3301      	adds	r3, #1
 8008e1c:	b29a      	uxth	r2, r3
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8008e24:	7bfb      	ldrb	r3, [r7, #15]
 8008e26:	2b02      	cmp	r3, #2
 8008e28:	d10c      	bne.n	8008e44 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e30:	4619      	mov	r1, r3
 8008e32:	693a      	ldr	r2, [r7, #16]
 8008e34:	2334      	movs	r3, #52	; 0x34
 8008e36:	fb01 f303 	mul.w	r3, r1, r3
 8008e3a:	4413      	add	r3, r2
 8008e3c:	3390      	adds	r3, #144	; 0x90
 8008e3e:	2208      	movs	r2, #8
 8008e40:	701a      	strb	r2, [r3, #0]
            break;
 8008e42:	e03a      	b.n	8008eba <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008e44:	7bfb      	ldrb	r3, [r7, #15]
 8008e46:	2b04      	cmp	r3, #4
 8008e48:	d137      	bne.n	8008eba <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e50:	4619      	mov	r1, r3
 8008e52:	693a      	ldr	r2, [r7, #16]
 8008e54:	2334      	movs	r3, #52	; 0x34
 8008e56:	fb01 f303 	mul.w	r3, r1, r3
 8008e5a:	4413      	add	r3, r2
 8008e5c:	3390      	adds	r3, #144	; 0x90
 8008e5e:	2201      	movs	r2, #1
 8008e60:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e68:	4619      	mov	r1, r3
 8008e6a:	693a      	ldr	r2, [r7, #16]
 8008e6c:	2334      	movs	r3, #52	; 0x34
 8008e6e:	fb01 f303 	mul.w	r3, r1, r3
 8008e72:	4413      	add	r3, r2
 8008e74:	3391      	adds	r3, #145	; 0x91
 8008e76:	2202      	movs	r2, #2
 8008e78:	701a      	strb	r2, [r3, #0]
            break;
 8008e7a:	e01e      	b.n	8008eba <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e82:	3301      	adds	r3, #1
 8008e84:	b29a      	uxth	r2, r3
 8008e86:	693b      	ldr	r3, [r7, #16]
 8008e88:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8008e8c:	e016      	b.n	8008ebc <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 8008e8e:	693b      	ldr	r3, [r7, #16]
 8008e90:	2200      	movs	r2, #0
 8008e92:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	2201      	movs	r2, #1
 8008e9a:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008ea2:	2102      	movs	r1, #2
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	4798      	blx	r3
      break;
 8008ea8:	e00c      	b.n	8008ec4 <USBH_MSC_Process+0x514>
            break;
 8008eaa:	bf00      	nop
 8008eac:	e00a      	b.n	8008ec4 <USBH_MSC_Process+0x514>
            break;
 8008eae:	bf00      	nop
 8008eb0:	e008      	b.n	8008ec4 <USBH_MSC_Process+0x514>
            break;
 8008eb2:	bf00      	nop
 8008eb4:	e006      	b.n	8008ec4 <USBH_MSC_Process+0x514>
            break;
 8008eb6:	bf00      	nop
 8008eb8:	e004      	b.n	8008ec4 <USBH_MSC_Process+0x514>
            break;
 8008eba:	bf00      	nop
      break;
 8008ebc:	e002      	b.n	8008ec4 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	75fb      	strb	r3, [r7, #23]
      break;
 8008ec2:	bf00      	nop
  }
  return error;
 8008ec4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3718      	adds	r7, #24
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}
 8008ece:	bf00      	nop

08008ed0 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b083      	sub	sp, #12
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008ed8:	2300      	movs	r3, #0
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	370c      	adds	r7, #12
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr

08008ee6 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8008ee6:	b580      	push	{r7, lr}
 8008ee8:	b088      	sub	sp, #32
 8008eea:	af02      	add	r7, sp, #8
 8008eec:	6078      	str	r0, [r7, #4]
 8008eee:	460b      	mov	r3, r1
 8008ef0:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ef8:	69db      	ldr	r3, [r3, #28]
 8008efa:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8008efc:	2301      	movs	r3, #1
 8008efe:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8008f00:	2301      	movs	r3, #1
 8008f02:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8008f04:	78fb      	ldrb	r3, [r7, #3]
 8008f06:	693a      	ldr	r2, [r7, #16]
 8008f08:	2134      	movs	r1, #52	; 0x34
 8008f0a:	fb01 f303 	mul.w	r3, r1, r3
 8008f0e:	4413      	add	r3, r2
 8008f10:	3390      	adds	r3, #144	; 0x90
 8008f12:	781b      	ldrb	r3, [r3, #0]
 8008f14:	2b07      	cmp	r3, #7
 8008f16:	d03c      	beq.n	8008f92 <USBH_MSC_RdWrProcess+0xac>
 8008f18:	2b07      	cmp	r3, #7
 8008f1a:	f300 80a7 	bgt.w	800906c <USBH_MSC_RdWrProcess+0x186>
 8008f1e:	2b05      	cmp	r3, #5
 8008f20:	d06c      	beq.n	8008ffc <USBH_MSC_RdWrProcess+0x116>
 8008f22:	2b06      	cmp	r3, #6
 8008f24:	f040 80a2 	bne.w	800906c <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8008f28:	78f9      	ldrb	r1, [r7, #3]
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	9300      	str	r3, [sp, #0]
 8008f2e:	2300      	movs	r3, #0
 8008f30:	2200      	movs	r2, #0
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f000 fea5 	bl	8009c82 <USBH_MSC_SCSI_Read>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8008f3c:	7bfb      	ldrb	r3, [r7, #15]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d10b      	bne.n	8008f5a <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8008f42:	78fb      	ldrb	r3, [r7, #3]
 8008f44:	693a      	ldr	r2, [r7, #16]
 8008f46:	2134      	movs	r1, #52	; 0x34
 8008f48:	fb01 f303 	mul.w	r3, r1, r3
 8008f4c:	4413      	add	r3, r2
 8008f4e:	3390      	adds	r3, #144	; 0x90
 8008f50:	2201      	movs	r2, #1
 8008f52:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8008f54:	2300      	movs	r3, #0
 8008f56:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008f58:	e08a      	b.n	8009070 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 8008f5a:	7bfb      	ldrb	r3, [r7, #15]
 8008f5c:	2b02      	cmp	r3, #2
 8008f5e:	d109      	bne.n	8008f74 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8008f60:	78fb      	ldrb	r3, [r7, #3]
 8008f62:	693a      	ldr	r2, [r7, #16]
 8008f64:	2134      	movs	r1, #52	; 0x34
 8008f66:	fb01 f303 	mul.w	r3, r1, r3
 8008f6a:	4413      	add	r3, r2
 8008f6c:	3390      	adds	r3, #144	; 0x90
 8008f6e:	2205      	movs	r2, #5
 8008f70:	701a      	strb	r2, [r3, #0]
      break;
 8008f72:	e07d      	b.n	8009070 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008f74:	7bfb      	ldrb	r3, [r7, #15]
 8008f76:	2b04      	cmp	r3, #4
 8008f78:	d17a      	bne.n	8009070 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8008f7a:	78fb      	ldrb	r3, [r7, #3]
 8008f7c:	693a      	ldr	r2, [r7, #16]
 8008f7e:	2134      	movs	r1, #52	; 0x34
 8008f80:	fb01 f303 	mul.w	r3, r1, r3
 8008f84:	4413      	add	r3, r2
 8008f86:	3390      	adds	r3, #144	; 0x90
 8008f88:	2208      	movs	r2, #8
 8008f8a:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8008f8c:	2302      	movs	r3, #2
 8008f8e:	75fb      	strb	r3, [r7, #23]
      break;
 8008f90:	e06e      	b.n	8009070 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8008f92:	78f9      	ldrb	r1, [r7, #3]
 8008f94:	2300      	movs	r3, #0
 8008f96:	9300      	str	r3, [sp, #0]
 8008f98:	2300      	movs	r3, #0
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f000 fe05 	bl	8009bac <USBH_MSC_SCSI_Write>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8008fa6:	7bfb      	ldrb	r3, [r7, #15]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d10b      	bne.n	8008fc4 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8008fac:	78fb      	ldrb	r3, [r7, #3]
 8008fae:	693a      	ldr	r2, [r7, #16]
 8008fb0:	2134      	movs	r1, #52	; 0x34
 8008fb2:	fb01 f303 	mul.w	r3, r1, r3
 8008fb6:	4413      	add	r3, r2
 8008fb8:	3390      	adds	r3, #144	; 0x90
 8008fba:	2201      	movs	r2, #1
 8008fbc:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008fc2:	e057      	b.n	8009074 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 8008fc4:	7bfb      	ldrb	r3, [r7, #15]
 8008fc6:	2b02      	cmp	r3, #2
 8008fc8:	d109      	bne.n	8008fde <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8008fca:	78fb      	ldrb	r3, [r7, #3]
 8008fcc:	693a      	ldr	r2, [r7, #16]
 8008fce:	2134      	movs	r1, #52	; 0x34
 8008fd0:	fb01 f303 	mul.w	r3, r1, r3
 8008fd4:	4413      	add	r3, r2
 8008fd6:	3390      	adds	r3, #144	; 0x90
 8008fd8:	2205      	movs	r2, #5
 8008fda:	701a      	strb	r2, [r3, #0]
      break;
 8008fdc:	e04a      	b.n	8009074 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008fde:	7bfb      	ldrb	r3, [r7, #15]
 8008fe0:	2b04      	cmp	r3, #4
 8008fe2:	d147      	bne.n	8009074 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8008fe4:	78fb      	ldrb	r3, [r7, #3]
 8008fe6:	693a      	ldr	r2, [r7, #16]
 8008fe8:	2134      	movs	r1, #52	; 0x34
 8008fea:	fb01 f303 	mul.w	r3, r1, r3
 8008fee:	4413      	add	r3, r2
 8008ff0:	3390      	adds	r3, #144	; 0x90
 8008ff2:	2208      	movs	r2, #8
 8008ff4:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8008ff6:	2302      	movs	r3, #2
 8008ff8:	75fb      	strb	r3, [r7, #23]
      break;
 8008ffa:	e03b      	b.n	8009074 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8008ffc:	78fb      	ldrb	r3, [r7, #3]
 8008ffe:	2234      	movs	r2, #52	; 0x34
 8009000:	fb02 f303 	mul.w	r3, r2, r3
 8009004:	3398      	adds	r3, #152	; 0x98
 8009006:	693a      	ldr	r2, [r7, #16]
 8009008:	4413      	add	r3, r2
 800900a:	1d1a      	adds	r2, r3, #4
 800900c:	78fb      	ldrb	r3, [r7, #3]
 800900e:	4619      	mov	r1, r3
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f000 fd52 	bl	8009aba <USBH_MSC_SCSI_RequestSense>
 8009016:	4603      	mov	r3, r0
 8009018:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800901a:	7bfb      	ldrb	r3, [r7, #15]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d113      	bne.n	8009048 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009020:	78fb      	ldrb	r3, [r7, #3]
 8009022:	693a      	ldr	r2, [r7, #16]
 8009024:	2134      	movs	r1, #52	; 0x34
 8009026:	fb01 f303 	mul.w	r3, r1, r3
 800902a:	4413      	add	r3, r2
 800902c:	3390      	adds	r3, #144	; 0x90
 800902e:	2201      	movs	r2, #1
 8009030:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8009032:	78fb      	ldrb	r3, [r7, #3]
 8009034:	693a      	ldr	r2, [r7, #16]
 8009036:	2134      	movs	r1, #52	; 0x34
 8009038:	fb01 f303 	mul.w	r3, r1, r3
 800903c:	4413      	add	r3, r2
 800903e:	3391      	adds	r3, #145	; 0x91
 8009040:	2202      	movs	r2, #2
 8009042:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 8009044:	2302      	movs	r3, #2
 8009046:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 8009048:	7bfb      	ldrb	r3, [r7, #15]
 800904a:	2b02      	cmp	r3, #2
 800904c:	d014      	beq.n	8009078 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800904e:	7bfb      	ldrb	r3, [r7, #15]
 8009050:	2b04      	cmp	r3, #4
 8009052:	d111      	bne.n	8009078 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009054:	78fb      	ldrb	r3, [r7, #3]
 8009056:	693a      	ldr	r2, [r7, #16]
 8009058:	2134      	movs	r1, #52	; 0x34
 800905a:	fb01 f303 	mul.w	r3, r1, r3
 800905e:	4413      	add	r3, r2
 8009060:	3390      	adds	r3, #144	; 0x90
 8009062:	2208      	movs	r2, #8
 8009064:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8009066:	2302      	movs	r3, #2
 8009068:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800906a:	e005      	b.n	8009078 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 800906c:	bf00      	nop
 800906e:	e004      	b.n	800907a <USBH_MSC_RdWrProcess+0x194>
      break;
 8009070:	bf00      	nop
 8009072:	e002      	b.n	800907a <USBH_MSC_RdWrProcess+0x194>
      break;
 8009074:	bf00      	nop
 8009076:	e000      	b.n	800907a <USBH_MSC_RdWrProcess+0x194>
      break;
 8009078:	bf00      	nop

  }
  return error;
 800907a:	7dfb      	ldrb	r3, [r7, #23]
}
 800907c:	4618      	mov	r0, r3
 800907e:	3718      	adds	r7, #24
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}

08009084 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009084:	b480      	push	{r7}
 8009086:	b085      	sub	sp, #20
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
 800908c:	460b      	mov	r3, r1
 800908e:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009096:	69db      	ldr	r3, [r3, #28]
 8009098:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	781b      	ldrb	r3, [r3, #0]
 800909e:	b2db      	uxtb	r3, r3
 80090a0:	2b0b      	cmp	r3, #11
 80090a2:	d10c      	bne.n	80090be <USBH_MSC_UnitIsReady+0x3a>
 80090a4:	78fb      	ldrb	r3, [r7, #3]
 80090a6:	68ba      	ldr	r2, [r7, #8]
 80090a8:	2134      	movs	r1, #52	; 0x34
 80090aa:	fb01 f303 	mul.w	r3, r1, r3
 80090ae:	4413      	add	r3, r2
 80090b0:	3391      	adds	r3, #145	; 0x91
 80090b2:	781b      	ldrb	r3, [r3, #0]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d102      	bne.n	80090be <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 80090b8:	2301      	movs	r3, #1
 80090ba:	73fb      	strb	r3, [r7, #15]
 80090bc:	e001      	b.n	80090c2 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 80090be:	2300      	movs	r3, #0
 80090c0:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80090c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3714      	adds	r7, #20
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr

080090d0 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b086      	sub	sp, #24
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	60f8      	str	r0, [r7, #12]
 80090d8:	460b      	mov	r3, r1
 80090da:	607a      	str	r2, [r7, #4]
 80090dc:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80090e4:	69db      	ldr	r3, [r3, #28]
 80090e6:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	781b      	ldrb	r3, [r3, #0]
 80090ec:	b2db      	uxtb	r3, r3
 80090ee:	2b0b      	cmp	r3, #11
 80090f0:	d10d      	bne.n	800910e <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 80090f2:	7afb      	ldrb	r3, [r7, #11]
 80090f4:	2234      	movs	r2, #52	; 0x34
 80090f6:	fb02 f303 	mul.w	r3, r2, r3
 80090fa:	3390      	adds	r3, #144	; 0x90
 80090fc:	697a      	ldr	r2, [r7, #20]
 80090fe:	4413      	add	r3, r2
 8009100:	2234      	movs	r2, #52	; 0x34
 8009102:	4619      	mov	r1, r3
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f002 fd4d 	bl	800bba4 <memcpy>
    return USBH_OK;
 800910a:	2300      	movs	r3, #0
 800910c:	e000      	b.n	8009110 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800910e:	2302      	movs	r3, #2
  }
}
 8009110:	4618      	mov	r0, r3
 8009112:	3718      	adds	r7, #24
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b088      	sub	sp, #32
 800911c:	af02      	add	r7, sp, #8
 800911e:	60f8      	str	r0, [r7, #12]
 8009120:	607a      	str	r2, [r7, #4]
 8009122:	603b      	str	r3, [r7, #0]
 8009124:	460b      	mov	r3, r1
 8009126:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800912e:	69db      	ldr	r3, [r3, #28]
 8009130:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009138:	b2db      	uxtb	r3, r3
 800913a:	2b00      	cmp	r3, #0
 800913c:	d00e      	beq.n	800915c <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	781b      	ldrb	r3, [r3, #0]
 8009142:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8009144:	2b0b      	cmp	r3, #11
 8009146:	d109      	bne.n	800915c <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8009148:	7afb      	ldrb	r3, [r7, #11]
 800914a:	697a      	ldr	r2, [r7, #20]
 800914c:	2134      	movs	r1, #52	; 0x34
 800914e:	fb01 f303 	mul.w	r3, r1, r3
 8009152:	4413      	add	r3, r2
 8009154:	3390      	adds	r3, #144	; 0x90
 8009156:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8009158:	2b01      	cmp	r3, #1
 800915a:	d001      	beq.n	8009160 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800915c:	2302      	movs	r3, #2
 800915e:	e040      	b.n	80091e2 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	2206      	movs	r2, #6
 8009164:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8009166:	7afb      	ldrb	r3, [r7, #11]
 8009168:	697a      	ldr	r2, [r7, #20]
 800916a:	2134      	movs	r1, #52	; 0x34
 800916c:	fb01 f303 	mul.w	r3, r1, r3
 8009170:	4413      	add	r3, r2
 8009172:	3390      	adds	r3, #144	; 0x90
 8009174:	2206      	movs	r2, #6
 8009176:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8009178:	7afb      	ldrb	r3, [r7, #11]
 800917a:	b29a      	uxth	r2, r3
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8009182:	7af9      	ldrb	r1, [r7, #11]
 8009184:	6a3b      	ldr	r3, [r7, #32]
 8009186:	9300      	str	r3, [sp, #0]
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	687a      	ldr	r2, [r7, #4]
 800918c:	68f8      	ldr	r0, [r7, #12]
 800918e:	f000 fd78 	bl	8009c82 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009198:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800919a:	e016      	b.n	80091ca <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	1ad2      	subs	r2, r2, r3
 80091a6:	6a3b      	ldr	r3, [r7, #32]
 80091a8:	f242 7110 	movw	r1, #10000	; 0x2710
 80091ac:	fb01 f303 	mul.w	r3, r1, r3
 80091b0:	429a      	cmp	r2, r3
 80091b2:	d805      	bhi.n	80091c0 <USBH_MSC_Read+0xa8>
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80091ba:	b2db      	uxtb	r3, r3
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d104      	bne.n	80091ca <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	2201      	movs	r2, #1
 80091c4:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80091c6:	2302      	movs	r3, #2
 80091c8:	e00b      	b.n	80091e2 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80091ca:	7afb      	ldrb	r3, [r7, #11]
 80091cc:	4619      	mov	r1, r3
 80091ce:	68f8      	ldr	r0, [r7, #12]
 80091d0:	f7ff fe89 	bl	8008ee6 <USBH_MSC_RdWrProcess>
 80091d4:	4603      	mov	r3, r0
 80091d6:	2b01      	cmp	r3, #1
 80091d8:	d0e0      	beq.n	800919c <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	2201      	movs	r2, #1
 80091de:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 80091e0:	2300      	movs	r3, #0
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3718      	adds	r7, #24
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}

080091ea <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 80091ea:	b580      	push	{r7, lr}
 80091ec:	b088      	sub	sp, #32
 80091ee:	af02      	add	r7, sp, #8
 80091f0:	60f8      	str	r0, [r7, #12]
 80091f2:	607a      	str	r2, [r7, #4]
 80091f4:	603b      	str	r3, [r7, #0]
 80091f6:	460b      	mov	r3, r1
 80091f8:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009200:	69db      	ldr	r3, [r3, #28]
 8009202:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800920a:	b2db      	uxtb	r3, r3
 800920c:	2b00      	cmp	r3, #0
 800920e:	d00e      	beq.n	800922e <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	781b      	ldrb	r3, [r3, #0]
 8009214:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8009216:	2b0b      	cmp	r3, #11
 8009218:	d109      	bne.n	800922e <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800921a:	7afb      	ldrb	r3, [r7, #11]
 800921c:	697a      	ldr	r2, [r7, #20]
 800921e:	2134      	movs	r1, #52	; 0x34
 8009220:	fb01 f303 	mul.w	r3, r1, r3
 8009224:	4413      	add	r3, r2
 8009226:	3390      	adds	r3, #144	; 0x90
 8009228:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800922a:	2b01      	cmp	r3, #1
 800922c:	d001      	beq.n	8009232 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800922e:	2302      	movs	r3, #2
 8009230:	e040      	b.n	80092b4 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	2207      	movs	r2, #7
 8009236:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8009238:	7afb      	ldrb	r3, [r7, #11]
 800923a:	697a      	ldr	r2, [r7, #20]
 800923c:	2134      	movs	r1, #52	; 0x34
 800923e:	fb01 f303 	mul.w	r3, r1, r3
 8009242:	4413      	add	r3, r2
 8009244:	3390      	adds	r3, #144	; 0x90
 8009246:	2207      	movs	r2, #7
 8009248:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800924a:	7afb      	ldrb	r3, [r7, #11]
 800924c:	b29a      	uxth	r2, r3
 800924e:	697b      	ldr	r3, [r7, #20]
 8009250:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8009254:	7af9      	ldrb	r1, [r7, #11]
 8009256:	6a3b      	ldr	r3, [r7, #32]
 8009258:	9300      	str	r3, [sp, #0]
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	687a      	ldr	r2, [r7, #4]
 800925e:	68f8      	ldr	r0, [r7, #12]
 8009260:	f000 fca4 	bl	8009bac <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800926a:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800926c:	e016      	b.n	800929c <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009274:	693b      	ldr	r3, [r7, #16]
 8009276:	1ad2      	subs	r2, r2, r3
 8009278:	6a3b      	ldr	r3, [r7, #32]
 800927a:	f242 7110 	movw	r1, #10000	; 0x2710
 800927e:	fb01 f303 	mul.w	r3, r1, r3
 8009282:	429a      	cmp	r2, r3
 8009284:	d805      	bhi.n	8009292 <USBH_MSC_Write+0xa8>
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800928c:	b2db      	uxtb	r3, r3
 800928e:	2b00      	cmp	r3, #0
 8009290:	d104      	bne.n	800929c <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	2201      	movs	r2, #1
 8009296:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8009298:	2302      	movs	r3, #2
 800929a:	e00b      	b.n	80092b4 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800929c:	7afb      	ldrb	r3, [r7, #11]
 800929e:	4619      	mov	r1, r3
 80092a0:	68f8      	ldr	r0, [r7, #12]
 80092a2:	f7ff fe20 	bl	8008ee6 <USBH_MSC_RdWrProcess>
 80092a6:	4603      	mov	r3, r0
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	d0e0      	beq.n	800926e <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	2201      	movs	r2, #1
 80092b0:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 80092b2:	2300      	movs	r3, #0
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3718      	adds	r7, #24
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b082      	sub	sp, #8
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2221      	movs	r2, #33	; 0x21
 80092c8:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	22ff      	movs	r2, #255	; 0xff
 80092ce:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2200      	movs	r2, #0
 80092d4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2200      	movs	r2, #0
 80092da:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2200      	movs	r2, #0
 80092e0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 80092e2:	2200      	movs	r2, #0
 80092e4:	2100      	movs	r1, #0
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f001 fdab 	bl	800ae42 <USBH_CtlReq>
 80092ec:	4603      	mov	r3, r0
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3708      	adds	r7, #8
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}

080092f6 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 80092f6:	b580      	push	{r7, lr}
 80092f8:	b082      	sub	sp, #8
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	6078      	str	r0, [r7, #4]
 80092fe:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	22a1      	movs	r2, #161	; 0xa1
 8009304:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	22fe      	movs	r2, #254	; 0xfe
 800930a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2200      	movs	r2, #0
 8009310:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2200      	movs	r2, #0
 8009316:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2201      	movs	r2, #1
 800931c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800931e:	2201      	movs	r2, #1
 8009320:	6839      	ldr	r1, [r7, #0]
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f001 fd8d 	bl	800ae42 <USBH_CtlReq>
 8009328:	4603      	mov	r3, r0
}
 800932a:	4618      	mov	r0, r3
 800932c:	3708      	adds	r7, #8
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
	...

08009334 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8009334:	b480      	push	{r7}
 8009336:	b085      	sub	sp, #20
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009342:	69db      	ldr	r3, [r3, #28]
 8009344:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	4a09      	ldr	r2, [pc, #36]	; (8009370 <USBH_MSC_BOT_Init+0x3c>)
 800934a:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	4a09      	ldr	r2, [pc, #36]	; (8009374 <USBH_MSC_BOT_Init+0x40>)
 8009350:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	2201      	movs	r2, #1
 8009356:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2201      	movs	r2, #1
 800935e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8009362:	2300      	movs	r3, #0
}
 8009364:	4618      	mov	r0, r3
 8009366:	3714      	adds	r7, #20
 8009368:	46bd      	mov	sp, r7
 800936a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936e:	4770      	bx	lr
 8009370:	43425355 	.word	0x43425355
 8009374:	20304050 	.word	0x20304050

08009378 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b088      	sub	sp, #32
 800937c:	af02      	add	r7, sp, #8
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	460b      	mov	r3, r1
 8009382:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8009384:	2301      	movs	r3, #1
 8009386:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8009388:	2301      	movs	r3, #1
 800938a:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800938c:	2301      	movs	r3, #1
 800938e:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009390:	2300      	movs	r3, #0
 8009392:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800939a:	69db      	ldr	r3, [r3, #28]
 800939c:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800939e:	2300      	movs	r3, #0
 80093a0:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80093a8:	3b01      	subs	r3, #1
 80093aa:	2b0a      	cmp	r3, #10
 80093ac:	f200 819e 	bhi.w	80096ec <USBH_MSC_BOT_Process+0x374>
 80093b0:	a201      	add	r2, pc, #4	; (adr r2, 80093b8 <USBH_MSC_BOT_Process+0x40>)
 80093b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093b6:	bf00      	nop
 80093b8:	080093e5 	.word	0x080093e5
 80093bc:	0800940d 	.word	0x0800940d
 80093c0:	08009477 	.word	0x08009477
 80093c4:	08009495 	.word	0x08009495
 80093c8:	08009519 	.word	0x08009519
 80093cc:	0800953b 	.word	0x0800953b
 80093d0:	080095d3 	.word	0x080095d3
 80093d4:	080095ef 	.word	0x080095ef
 80093d8:	08009641 	.word	0x08009641
 80093dc:	08009671 	.word	0x08009671
 80093e0:	080096d3 	.word	0x080096d3
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 80093e4:	693b      	ldr	r3, [r7, #16]
 80093e6:	78fa      	ldrb	r2, [r7, #3]
 80093e8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 80093ec:	693b      	ldr	r3, [r7, #16]
 80093ee:	2202      	movs	r2, #2
 80093f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80093fa:	693b      	ldr	r3, [r7, #16]
 80093fc:	795b      	ldrb	r3, [r3, #5]
 80093fe:	2201      	movs	r2, #1
 8009400:	9200      	str	r2, [sp, #0]
 8009402:	221f      	movs	r2, #31
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f001 ff2a 	bl	800b25e <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800940a:	e17e      	b.n	800970a <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	795b      	ldrb	r3, [r3, #5]
 8009410:	4619      	mov	r1, r3
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f002 faae 	bl	800b974 <USBH_LL_GetURBState>
 8009418:	4603      	mov	r3, r0
 800941a:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800941c:	7d3b      	ldrb	r3, [r7, #20]
 800941e:	2b01      	cmp	r3, #1
 8009420:	d118      	bne.n	8009454 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009426:	2b00      	cmp	r3, #0
 8009428:	d00f      	beq.n	800944a <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800942a:	693b      	ldr	r3, [r7, #16]
 800942c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8009430:	b25b      	sxtb	r3, r3
 8009432:	2b00      	cmp	r3, #0
 8009434:	da04      	bge.n	8009440 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	2203      	movs	r2, #3
 800943a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800943e:	e157      	b.n	80096f0 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	2205      	movs	r2, #5
 8009444:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009448:	e152      	b.n	80096f0 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	2207      	movs	r2, #7
 800944e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009452:	e14d      	b.n	80096f0 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009454:	7d3b      	ldrb	r3, [r7, #20]
 8009456:	2b02      	cmp	r3, #2
 8009458:	d104      	bne.n	8009464 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	2201      	movs	r2, #1
 800945e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009462:	e145      	b.n	80096f0 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 8009464:	7d3b      	ldrb	r3, [r7, #20]
 8009466:	2b05      	cmp	r3, #5
 8009468:	f040 8142 	bne.w	80096f0 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	220a      	movs	r2, #10
 8009470:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009474:	e13c      	b.n	80096f0 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8009476:	693b      	ldr	r3, [r7, #16]
 8009478:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	895a      	ldrh	r2, [r3, #10]
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	791b      	ldrb	r3, [r3, #4]
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f001 ff0f 	bl	800b2a8 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	2204      	movs	r2, #4
 800948e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8009492:	e13a      	b.n	800970a <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	791b      	ldrb	r3, [r3, #4]
 8009498:	4619      	mov	r1, r3
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f002 fa6a 	bl	800b974 <USBH_LL_GetURBState>
 80094a0:	4603      	mov	r3, r0
 80094a2:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80094a4:	7d3b      	ldrb	r3, [r7, #20]
 80094a6:	2b01      	cmp	r3, #1
 80094a8:	d12d      	bne.n	8009506 <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 80094aa:	693b      	ldr	r3, [r7, #16]
 80094ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094ae:	693a      	ldr	r2, [r7, #16]
 80094b0:	8952      	ldrh	r2, [r2, #10]
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d910      	bls.n	80094d8 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094bc:	693a      	ldr	r2, [r7, #16]
 80094be:	8952      	ldrh	r2, [r2, #10]
 80094c0:	441a      	add	r2, r3
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094cc:	693a      	ldr	r2, [r7, #16]
 80094ce:	8952      	ldrh	r2, [r2, #10]
 80094d0:	1a9a      	subs	r2, r3, r2
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	65da      	str	r2, [r3, #92]	; 0x5c
 80094d6:	e002      	b.n	80094de <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	2200      	movs	r2, #0
 80094dc:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d00a      	beq.n	80094fc <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	895a      	ldrh	r2, [r3, #10]
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	791b      	ldrb	r3, [r3, #4]
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f001 fed7 	bl	800b2a8 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 80094fa:	e0fb      	b.n	80096f4 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	2207      	movs	r2, #7
 8009500:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009504:	e0f6      	b.n	80096f4 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 8009506:	7d3b      	ldrb	r3, [r7, #20]
 8009508:	2b05      	cmp	r3, #5
 800950a:	f040 80f3 	bne.w	80096f4 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800950e:	693b      	ldr	r3, [r7, #16]
 8009510:	2209      	movs	r2, #9
 8009512:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009516:	e0ed      	b.n	80096f4 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	891a      	ldrh	r2, [r3, #8]
 8009522:	693b      	ldr	r3, [r7, #16]
 8009524:	795b      	ldrb	r3, [r3, #5]
 8009526:	2001      	movs	r0, #1
 8009528:	9000      	str	r0, [sp, #0]
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f001 fe97 	bl	800b25e <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	2206      	movs	r2, #6
 8009534:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009538:	e0e7      	b.n	800970a <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	795b      	ldrb	r3, [r3, #5]
 800953e:	4619      	mov	r1, r3
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f002 fa17 	bl	800b974 <USBH_LL_GetURBState>
 8009546:	4603      	mov	r3, r0
 8009548:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800954a:	7d3b      	ldrb	r3, [r7, #20]
 800954c:	2b01      	cmp	r3, #1
 800954e:	d12f      	bne.n	80095b0 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009554:	693a      	ldr	r2, [r7, #16]
 8009556:	8912      	ldrh	r2, [r2, #8]
 8009558:	4293      	cmp	r3, r2
 800955a:	d910      	bls.n	800957e <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800955c:	693b      	ldr	r3, [r7, #16]
 800955e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009562:	693a      	ldr	r2, [r7, #16]
 8009564:	8912      	ldrh	r2, [r2, #8]
 8009566:	441a      	add	r2, r3
 8009568:	693b      	ldr	r3, [r7, #16]
 800956a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009572:	693a      	ldr	r2, [r7, #16]
 8009574:	8912      	ldrh	r2, [r2, #8]
 8009576:	1a9a      	subs	r2, r3, r2
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	65da      	str	r2, [r3, #92]	; 0x5c
 800957c:	e002      	b.n	8009584 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800957e:	693b      	ldr	r3, [r7, #16]
 8009580:	2200      	movs	r2, #0
 8009582:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009584:	693b      	ldr	r3, [r7, #16]
 8009586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009588:	2b00      	cmp	r3, #0
 800958a:	d00c      	beq.n	80095a6 <USBH_MSC_BOT_Process+0x22e>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	891a      	ldrh	r2, [r3, #8]
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	795b      	ldrb	r3, [r3, #5]
 800959a:	2001      	movs	r0, #1
 800959c:	9000      	str	r0, [sp, #0]
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f001 fe5d 	bl	800b25e <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 80095a4:	e0a8      	b.n	80096f8 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80095a6:	693b      	ldr	r3, [r7, #16]
 80095a8:	2207      	movs	r2, #7
 80095aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80095ae:	e0a3      	b.n	80096f8 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 80095b0:	7d3b      	ldrb	r3, [r7, #20]
 80095b2:	2b02      	cmp	r3, #2
 80095b4:	d104      	bne.n	80095c0 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 80095b6:	693b      	ldr	r3, [r7, #16]
 80095b8:	2205      	movs	r2, #5
 80095ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80095be:	e09b      	b.n	80096f8 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 80095c0:	7d3b      	ldrb	r3, [r7, #20]
 80095c2:	2b05      	cmp	r3, #5
 80095c4:	f040 8098 	bne.w	80096f8 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 80095c8:	693b      	ldr	r3, [r7, #16]
 80095ca:	220a      	movs	r2, #10
 80095cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80095d0:	e092      	b.n	80096f8 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 80095d2:	693b      	ldr	r3, [r7, #16]
 80095d4:	f103 0178 	add.w	r1, r3, #120	; 0x78
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	791b      	ldrb	r3, [r3, #4]
 80095dc:	220d      	movs	r2, #13
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f001 fe62 	bl	800b2a8 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 80095e4:	693b      	ldr	r3, [r7, #16]
 80095e6:	2208      	movs	r2, #8
 80095e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80095ec:	e08d      	b.n	800970a <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	791b      	ldrb	r3, [r3, #4]
 80095f2:	4619      	mov	r1, r3
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f002 f9bd 	bl	800b974 <USBH_LL_GetURBState>
 80095fa:	4603      	mov	r3, r0
 80095fc:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 80095fe:	7d3b      	ldrb	r3, [r7, #20]
 8009600:	2b01      	cmp	r3, #1
 8009602:	d115      	bne.n	8009630 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	2201      	movs	r2, #1
 8009608:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	2201      	movs	r2, #1
 8009610:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f000 f8a9 	bl	800976c <USBH_MSC_DecodeCSW>
 800961a:	4603      	mov	r3, r0
 800961c:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800961e:	7d7b      	ldrb	r3, [r7, #21]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d102      	bne.n	800962a <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 8009624:	2300      	movs	r3, #0
 8009626:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8009628:	e068      	b.n	80096fc <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800962a:	2302      	movs	r3, #2
 800962c:	75fb      	strb	r3, [r7, #23]
      break;
 800962e:	e065      	b.n	80096fc <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 8009630:	7d3b      	ldrb	r3, [r7, #20]
 8009632:	2b05      	cmp	r3, #5
 8009634:	d162      	bne.n	80096fc <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	2209      	movs	r2, #9
 800963a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800963e:	e05d      	b.n	80096fc <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8009640:	78fb      	ldrb	r3, [r7, #3]
 8009642:	2200      	movs	r2, #0
 8009644:	4619      	mov	r1, r3
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f000 f864 	bl	8009714 <USBH_MSC_BOT_Abort>
 800964c:	4603      	mov	r3, r0
 800964e:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009650:	7dbb      	ldrb	r3, [r7, #22]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d104      	bne.n	8009660 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	2207      	movs	r2, #7
 800965a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800965e:	e04f      	b.n	8009700 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 8009660:	7dbb      	ldrb	r3, [r7, #22]
 8009662:	2b04      	cmp	r3, #4
 8009664:	d14c      	bne.n	8009700 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009666:	693b      	ldr	r3, [r7, #16]
 8009668:	220b      	movs	r2, #11
 800966a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800966e:	e047      	b.n	8009700 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8009670:	78fb      	ldrb	r3, [r7, #3]
 8009672:	2201      	movs	r2, #1
 8009674:	4619      	mov	r1, r3
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f000 f84c 	bl	8009714 <USBH_MSC_BOT_Abort>
 800967c:	4603      	mov	r3, r0
 800967e:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009680:	7dbb      	ldrb	r3, [r7, #22]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d11d      	bne.n	80096c2 <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	795b      	ldrb	r3, [r3, #5]
 800968a:	4619      	mov	r1, r3
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f002 f9cb 	bl	800ba28 <USBH_LL_GetToggle>
 8009692:	4603      	mov	r3, r0
 8009694:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	7959      	ldrb	r1, [r3, #5]
 800969a:	7bfb      	ldrb	r3, [r7, #15]
 800969c:	f1c3 0301 	rsb	r3, r3, #1
 80096a0:	b2db      	uxtb	r3, r3
 80096a2:	461a      	mov	r2, r3
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f002 f98f 	bl	800b9c8 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 80096aa:	693b      	ldr	r3, [r7, #16]
 80096ac:	791b      	ldrb	r3, [r3, #4]
 80096ae:	2200      	movs	r2, #0
 80096b0:	4619      	mov	r1, r3
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f002 f988 	bl	800b9c8 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 80096b8:	693b      	ldr	r3, [r7, #16]
 80096ba:	2209      	movs	r2, #9
 80096bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 80096c0:	e020      	b.n	8009704 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 80096c2:	7dbb      	ldrb	r3, [r7, #22]
 80096c4:	2b04      	cmp	r3, #4
 80096c6:	d11d      	bne.n	8009704 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 80096c8:	693b      	ldr	r3, [r7, #16]
 80096ca:	220b      	movs	r2, #11
 80096cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80096d0:	e018      	b.n	8009704 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f7ff fdf2 	bl	80092bc <USBH_MSC_BOT_REQ_Reset>
 80096d8:	4603      	mov	r3, r0
 80096da:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 80096dc:	7dfb      	ldrb	r3, [r7, #23]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d112      	bne.n	8009708 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	2201      	movs	r2, #1
 80096e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 80096ea:	e00d      	b.n	8009708 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 80096ec:	bf00      	nop
 80096ee:	e00c      	b.n	800970a <USBH_MSC_BOT_Process+0x392>
      break;
 80096f0:	bf00      	nop
 80096f2:	e00a      	b.n	800970a <USBH_MSC_BOT_Process+0x392>
      break;
 80096f4:	bf00      	nop
 80096f6:	e008      	b.n	800970a <USBH_MSC_BOT_Process+0x392>
      break;
 80096f8:	bf00      	nop
 80096fa:	e006      	b.n	800970a <USBH_MSC_BOT_Process+0x392>
      break;
 80096fc:	bf00      	nop
 80096fe:	e004      	b.n	800970a <USBH_MSC_BOT_Process+0x392>
      break;
 8009700:	bf00      	nop
 8009702:	e002      	b.n	800970a <USBH_MSC_BOT_Process+0x392>
      break;
 8009704:	bf00      	nop
 8009706:	e000      	b.n	800970a <USBH_MSC_BOT_Process+0x392>
      break;
 8009708:	bf00      	nop
  }
  return status;
 800970a:	7dfb      	ldrb	r3, [r7, #23]
}
 800970c:	4618      	mov	r0, r3
 800970e:	3718      	adds	r7, #24
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b084      	sub	sp, #16
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	460b      	mov	r3, r1
 800971e:	70fb      	strb	r3, [r7, #3]
 8009720:	4613      	mov	r3, r2
 8009722:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8009724:	2302      	movs	r3, #2
 8009726:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800972e:	69db      	ldr	r3, [r3, #28]
 8009730:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8009732:	78bb      	ldrb	r3, [r7, #2]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d002      	beq.n	800973e <USBH_MSC_BOT_Abort+0x2a>
 8009738:	2b01      	cmp	r3, #1
 800973a:	d009      	beq.n	8009750 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800973c:	e011      	b.n	8009762 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	79db      	ldrb	r3, [r3, #7]
 8009742:	4619      	mov	r1, r3
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f001 f99c 	bl	800aa82 <USBH_ClrFeature>
 800974a:	4603      	mov	r3, r0
 800974c:	73fb      	strb	r3, [r7, #15]
      break;
 800974e:	e008      	b.n	8009762 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	799b      	ldrb	r3, [r3, #6]
 8009754:	4619      	mov	r1, r3
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f001 f993 	bl	800aa82 <USBH_ClrFeature>
 800975c:	4603      	mov	r3, r0
 800975e:	73fb      	strb	r3, [r7, #15]
      break;
 8009760:	bf00      	nop
  }
  return status;
 8009762:	7bfb      	ldrb	r3, [r7, #15]
}
 8009764:	4618      	mov	r0, r3
 8009766:	3710      	adds	r7, #16
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}

0800976c <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b084      	sub	sp, #16
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800977a:	69db      	ldr	r3, [r3, #28]
 800977c:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800977e:	2301      	movs	r3, #1
 8009780:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	791b      	ldrb	r3, [r3, #4]
 8009786:	4619      	mov	r1, r3
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f002 f861 	bl	800b850 <USBH_LL_GetLastXferSize>
 800978e:	4603      	mov	r3, r0
 8009790:	2b0d      	cmp	r3, #13
 8009792:	d002      	beq.n	800979a <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8009794:	2302      	movs	r3, #2
 8009796:	73fb      	strb	r3, [r7, #15]
 8009798:	e024      	b.n	80097e4 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800979e:	4a14      	ldr	r2, [pc, #80]	; (80097f0 <USBH_MSC_DecodeCSW+0x84>)
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d11d      	bne.n	80097e0 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097ac:	429a      	cmp	r2, r3
 80097ae:	d119      	bne.n	80097e4 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d102      	bne.n	80097c0 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 80097ba:	2300      	movs	r3, #0
 80097bc:	73fb      	strb	r3, [r7, #15]
 80097be:	e011      	b.n	80097e4 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80097c6:	2b01      	cmp	r3, #1
 80097c8:	d102      	bne.n	80097d0 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 80097ca:	2301      	movs	r3, #1
 80097cc:	73fb      	strb	r3, [r7, #15]
 80097ce:	e009      	b.n	80097e4 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80097d6:	2b02      	cmp	r3, #2
 80097d8:	d104      	bne.n	80097e4 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 80097da:	2302      	movs	r3, #2
 80097dc:	73fb      	strb	r3, [r7, #15]
 80097de:	e001      	b.n	80097e4 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 80097e0:	2302      	movs	r3, #2
 80097e2:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 80097e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3710      	adds	r7, #16
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}
 80097ee:	bf00      	nop
 80097f0:	53425355 	.word	0x53425355

080097f4 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b084      	sub	sp, #16
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
 80097fc:	460b      	mov	r3, r1
 80097fe:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009800:	2302      	movs	r3, #2
 8009802:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800980a:	69db      	ldr	r3, [r3, #28]
 800980c:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009814:	2b01      	cmp	r3, #1
 8009816:	d002      	beq.n	800981e <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8009818:	2b02      	cmp	r3, #2
 800981a:	d021      	beq.n	8009860 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800981c:	e028      	b.n	8009870 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	2200      	movs	r2, #0
 8009822:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	2200      	movs	r2, #0
 8009828:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	220a      	movs	r2, #10
 8009830:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	3363      	adds	r3, #99	; 0x63
 8009838:	2210      	movs	r2, #16
 800983a:	2100      	movs	r1, #0
 800983c:	4618      	mov	r0, r3
 800983e:	f002 f9bf 	bl	800bbc0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	2200      	movs	r2, #0
 8009846:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	2201      	movs	r2, #1
 800984e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	2202      	movs	r2, #2
 8009856:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800985a:	2301      	movs	r3, #1
 800985c:	73fb      	strb	r3, [r7, #15]
      break;
 800985e:	e007      	b.n	8009870 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009860:	78fb      	ldrb	r3, [r7, #3]
 8009862:	4619      	mov	r1, r3
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f7ff fd87 	bl	8009378 <USBH_MSC_BOT_Process>
 800986a:	4603      	mov	r3, r0
 800986c:	73fb      	strb	r3, [r7, #15]
      break;
 800986e:	bf00      	nop
  }

  return error;
 8009870:	7bfb      	ldrb	r3, [r7, #15]
}
 8009872:	4618      	mov	r0, r3
 8009874:	3710      	adds	r7, #16
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}

0800987a <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800987a:	b580      	push	{r7, lr}
 800987c:	b086      	sub	sp, #24
 800987e:	af00      	add	r7, sp, #0
 8009880:	60f8      	str	r0, [r7, #12]
 8009882:	460b      	mov	r3, r1
 8009884:	607a      	str	r2, [r7, #4]
 8009886:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8009888:	2301      	movs	r3, #1
 800988a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009892:	69db      	ldr	r3, [r3, #28]
 8009894:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800989c:	2b01      	cmp	r3, #1
 800989e:	d002      	beq.n	80098a6 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 80098a0:	2b02      	cmp	r3, #2
 80098a2:	d027      	beq.n	80098f4 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 80098a4:	e05f      	b.n	8009966 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 80098a6:	693b      	ldr	r3, [r7, #16]
 80098a8:	2208      	movs	r2, #8
 80098aa:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	2280      	movs	r2, #128	; 0x80
 80098b0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	220a      	movs	r2, #10
 80098b8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80098bc:	693b      	ldr	r3, [r7, #16]
 80098be:	3363      	adds	r3, #99	; 0x63
 80098c0:	2210      	movs	r2, #16
 80098c2:	2100      	movs	r1, #0
 80098c4:	4618      	mov	r0, r3
 80098c6:	f002 f97b 	bl	800bbc0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	2225      	movs	r2, #37	; 0x25
 80098ce:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	2201      	movs	r2, #1
 80098d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	2202      	movs	r2, #2
 80098de:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	f103 0210 	add.w	r2, r3, #16
 80098e8:	693b      	ldr	r3, [r7, #16]
 80098ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80098ee:	2301      	movs	r3, #1
 80098f0:	75fb      	strb	r3, [r7, #23]
      break;
 80098f2:	e038      	b.n	8009966 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 80098f4:	7afb      	ldrb	r3, [r7, #11]
 80098f6:	4619      	mov	r1, r3
 80098f8:	68f8      	ldr	r0, [r7, #12]
 80098fa:	f7ff fd3d 	bl	8009378 <USBH_MSC_BOT_Process>
 80098fe:	4603      	mov	r3, r0
 8009900:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009902:	7dfb      	ldrb	r3, [r7, #23]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d12d      	bne.n	8009964 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800990e:	3303      	adds	r3, #3
 8009910:	781b      	ldrb	r3, [r3, #0]
 8009912:	461a      	mov	r2, r3
 8009914:	693b      	ldr	r3, [r7, #16]
 8009916:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800991a:	3302      	adds	r3, #2
 800991c:	781b      	ldrb	r3, [r3, #0]
 800991e:	021b      	lsls	r3, r3, #8
 8009920:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009928:	3301      	adds	r3, #1
 800992a:	781b      	ldrb	r3, [r3, #0]
 800992c:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800992e:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009936:	781b      	ldrb	r3, [r3, #0]
 8009938:	061b      	lsls	r3, r3, #24
 800993a:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009946:	3307      	adds	r3, #7
 8009948:	781b      	ldrb	r3, [r3, #0]
 800994a:	b29a      	uxth	r2, r3
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009952:	3306      	adds	r3, #6
 8009954:	781b      	ldrb	r3, [r3, #0]
 8009956:	b29b      	uxth	r3, r3
 8009958:	021b      	lsls	r3, r3, #8
 800995a:	b29b      	uxth	r3, r3
 800995c:	4313      	orrs	r3, r2
 800995e:	b29a      	uxth	r2, r3
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	809a      	strh	r2, [r3, #4]
      break;
 8009964:	bf00      	nop
  }

  return error;
 8009966:	7dfb      	ldrb	r3, [r7, #23]
}
 8009968:	4618      	mov	r0, r3
 800996a:	3718      	adds	r7, #24
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}

08009970 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b086      	sub	sp, #24
 8009974:	af00      	add	r7, sp, #0
 8009976:	60f8      	str	r0, [r7, #12]
 8009978:	460b      	mov	r3, r1
 800997a:	607a      	str	r2, [r7, #4]
 800997c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800997e:	2302      	movs	r3, #2
 8009980:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009988:	69db      	ldr	r3, [r3, #28]
 800998a:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009992:	2b01      	cmp	r3, #1
 8009994:	d002      	beq.n	800999c <USBH_MSC_SCSI_Inquiry+0x2c>
 8009996:	2b02      	cmp	r3, #2
 8009998:	d03d      	beq.n	8009a16 <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800999a:	e089      	b.n	8009ab0 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800999c:	693b      	ldr	r3, [r7, #16]
 800999e:	2224      	movs	r2, #36	; 0x24
 80099a0:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	2280      	movs	r2, #128	; 0x80
 80099a6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80099aa:	693b      	ldr	r3, [r7, #16]
 80099ac:	220a      	movs	r2, #10
 80099ae:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	3363      	adds	r3, #99	; 0x63
 80099b6:	220a      	movs	r2, #10
 80099b8:	2100      	movs	r1, #0
 80099ba:	4618      	mov	r0, r3
 80099bc:	f002 f900 	bl	800bbc0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 80099c0:	693b      	ldr	r3, [r7, #16]
 80099c2:	2212      	movs	r2, #18
 80099c4:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80099c8:	7afb      	ldrb	r3, [r7, #11]
 80099ca:	015b      	lsls	r3, r3, #5
 80099cc:	b2da      	uxtb	r2, r3
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	2200      	movs	r2, #0
 80099d8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 80099dc:	693b      	ldr	r3, [r7, #16]
 80099de:	2200      	movs	r2, #0
 80099e0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	2224      	movs	r2, #36	; 0x24
 80099e8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 80099ec:	693b      	ldr	r3, [r7, #16]
 80099ee:	2200      	movs	r2, #0
 80099f0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	2201      	movs	r2, #1
 80099f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80099fc:	693b      	ldr	r3, [r7, #16]
 80099fe:	2202      	movs	r2, #2
 8009a00:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	f103 0210 	add.w	r2, r3, #16
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009a10:	2301      	movs	r3, #1
 8009a12:	75fb      	strb	r3, [r7, #23]
      break;
 8009a14:	e04c      	b.n	8009ab0 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009a16:	7afb      	ldrb	r3, [r7, #11]
 8009a18:	4619      	mov	r1, r3
 8009a1a:	68f8      	ldr	r0, [r7, #12]
 8009a1c:	f7ff fcac 	bl	8009378 <USBH_MSC_BOT_Process>
 8009a20:	4603      	mov	r3, r0
 8009a22:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009a24:	7dfb      	ldrb	r3, [r7, #23]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d141      	bne.n	8009aae <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8009a2a:	2222      	movs	r2, #34	; 0x22
 8009a2c:	2100      	movs	r1, #0
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f002 f8c6 	bl	800bbc0 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8009a34:	693b      	ldr	r3, [r7, #16]
 8009a36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a3a:	781b      	ldrb	r3, [r3, #0]
 8009a3c:	f003 031f 	and.w	r3, r3, #31
 8009a40:	b2da      	uxtb	r2, r3
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a4c:	781b      	ldrb	r3, [r3, #0]
 8009a4e:	095b      	lsrs	r3, r3, #5
 8009a50:	b2da      	uxtb	r2, r3
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8009a56:	693b      	ldr	r3, [r7, #16]
 8009a58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a5c:	3301      	adds	r3, #1
 8009a5e:	781b      	ldrb	r3, [r3, #0]
 8009a60:	b25b      	sxtb	r3, r3
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	da03      	bge.n	8009a6e <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2201      	movs	r2, #1
 8009a6a:	709a      	strb	r2, [r3, #2]
 8009a6c:	e002      	b.n	8009a74 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2200      	movs	r2, #0
 8009a72:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	1cd8      	adds	r0, r3, #3
 8009a78:	693b      	ldr	r3, [r7, #16]
 8009a7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a7e:	3308      	adds	r3, #8
 8009a80:	2208      	movs	r2, #8
 8009a82:	4619      	mov	r1, r3
 8009a84:	f002 f88e 	bl	800bba4 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f103 000c 	add.w	r0, r3, #12
 8009a8e:	693b      	ldr	r3, [r7, #16]
 8009a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a94:	3310      	adds	r3, #16
 8009a96:	2210      	movs	r2, #16
 8009a98:	4619      	mov	r1, r3
 8009a9a:	f002 f883 	bl	800bba4 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	331d      	adds	r3, #29
 8009aa2:	693a      	ldr	r2, [r7, #16]
 8009aa4:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8009aa8:	3220      	adds	r2, #32
 8009aaa:	6812      	ldr	r2, [r2, #0]
 8009aac:	601a      	str	r2, [r3, #0]
      break;
 8009aae:	bf00      	nop
  }

  return error;
 8009ab0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	3718      	adds	r7, #24
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}

08009aba <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8009aba:	b580      	push	{r7, lr}
 8009abc:	b086      	sub	sp, #24
 8009abe:	af00      	add	r7, sp, #0
 8009ac0:	60f8      	str	r0, [r7, #12]
 8009ac2:	460b      	mov	r3, r1
 8009ac4:	607a      	str	r2, [r7, #4]
 8009ac6:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009ac8:	2302      	movs	r3, #2
 8009aca:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ad2:	69db      	ldr	r3, [r3, #28]
 8009ad4:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009ad6:	693b      	ldr	r3, [r7, #16]
 8009ad8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009adc:	2b01      	cmp	r3, #1
 8009ade:	d002      	beq.n	8009ae6 <USBH_MSC_SCSI_RequestSense+0x2c>
 8009ae0:	2b02      	cmp	r3, #2
 8009ae2:	d03d      	beq.n	8009b60 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8009ae4:	e05d      	b.n	8009ba2 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	220e      	movs	r2, #14
 8009aea:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009aec:	693b      	ldr	r3, [r7, #16]
 8009aee:	2280      	movs	r2, #128	; 0x80
 8009af0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009af4:	693b      	ldr	r3, [r7, #16]
 8009af6:	220a      	movs	r2, #10
 8009af8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009afc:	693b      	ldr	r3, [r7, #16]
 8009afe:	3363      	adds	r3, #99	; 0x63
 8009b00:	2210      	movs	r2, #16
 8009b02:	2100      	movs	r1, #0
 8009b04:	4618      	mov	r0, r3
 8009b06:	f002 f85b 	bl	800bbc0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8009b0a:	693b      	ldr	r3, [r7, #16]
 8009b0c:	2203      	movs	r2, #3
 8009b0e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8009b12:	7afb      	ldrb	r3, [r7, #11]
 8009b14:	015b      	lsls	r3, r3, #5
 8009b16:	b2da      	uxtb	r2, r3
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8009b1e:	693b      	ldr	r3, [r7, #16]
 8009b20:	2200      	movs	r2, #0
 8009b22:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	2200      	movs	r2, #0
 8009b2a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8009b2e:	693b      	ldr	r3, [r7, #16]
 8009b30:	220e      	movs	r2, #14
 8009b32:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	2201      	movs	r2, #1
 8009b42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	2202      	movs	r2, #2
 8009b4a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009b4e:	693b      	ldr	r3, [r7, #16]
 8009b50:	f103 0210 	add.w	r2, r3, #16
 8009b54:	693b      	ldr	r3, [r7, #16]
 8009b56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	75fb      	strb	r3, [r7, #23]
      break;
 8009b5e:	e020      	b.n	8009ba2 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009b60:	7afb      	ldrb	r3, [r7, #11]
 8009b62:	4619      	mov	r1, r3
 8009b64:	68f8      	ldr	r0, [r7, #12]
 8009b66:	f7ff fc07 	bl	8009378 <USBH_MSC_BOT_Process>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009b6e:	7dfb      	ldrb	r3, [r7, #23]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d115      	bne.n	8009ba0 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b7a:	3302      	adds	r3, #2
 8009b7c:	781b      	ldrb	r3, [r3, #0]
 8009b7e:	f003 030f 	and.w	r3, r3, #15
 8009b82:	b2da      	uxtb	r2, r3
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8009b88:	693b      	ldr	r3, [r7, #16]
 8009b8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b8e:	7b1a      	ldrb	r2, [r3, #12]
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8009b94:	693b      	ldr	r3, [r7, #16]
 8009b96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b9a:	7b5a      	ldrb	r2, [r3, #13]
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	709a      	strb	r2, [r3, #2]
      break;
 8009ba0:	bf00      	nop
  }

  return error;
 8009ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3718      	adds	r7, #24
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}

08009bac <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b086      	sub	sp, #24
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	60f8      	str	r0, [r7, #12]
 8009bb4:	607a      	str	r2, [r7, #4]
 8009bb6:	603b      	str	r3, [r7, #0]
 8009bb8:	460b      	mov	r3, r1
 8009bba:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009bbc:	2302      	movs	r3, #2
 8009bbe:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009bc6:	69db      	ldr	r3, [r3, #28]
 8009bc8:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009bd0:	2b01      	cmp	r3, #1
 8009bd2:	d002      	beq.n	8009bda <USBH_MSC_SCSI_Write+0x2e>
 8009bd4:	2b02      	cmp	r3, #2
 8009bd6:	d047      	beq.n	8009c68 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8009bd8:	e04e      	b.n	8009c78 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8009bda:	693b      	ldr	r3, [r7, #16]
 8009bdc:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8009be0:	461a      	mov	r2, r3
 8009be2:	6a3b      	ldr	r3, [r7, #32]
 8009be4:	fb03 f202 	mul.w	r2, r3, r2
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	220a      	movs	r2, #10
 8009bf8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	3363      	adds	r3, #99	; 0x63
 8009c00:	2210      	movs	r2, #16
 8009c02:	2100      	movs	r1, #0
 8009c04:	4618      	mov	r0, r3
 8009c06:	f001 ffdb 	bl	800bbc0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8009c0a:	693b      	ldr	r3, [r7, #16]
 8009c0c:	222a      	movs	r2, #42	; 0x2a
 8009c0e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8009c12:	79fa      	ldrb	r2, [r7, #7]
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8009c1a:	79ba      	ldrb	r2, [r7, #6]
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8009c22:	797a      	ldrb	r2, [r7, #5]
 8009c24:	693b      	ldr	r3, [r7, #16]
 8009c26:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8009c2a:	1d3b      	adds	r3, r7, #4
 8009c2c:	781a      	ldrb	r2, [r3, #0]
 8009c2e:	693b      	ldr	r3, [r7, #16]
 8009c30:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8009c34:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8009c3e:	f107 0320 	add.w	r3, r7, #32
 8009c42:	781a      	ldrb	r2, [r3, #0]
 8009c44:	693b      	ldr	r3, [r7, #16]
 8009c46:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009c4a:	693b      	ldr	r3, [r7, #16]
 8009c4c:	2201      	movs	r2, #1
 8009c4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	2202      	movs	r2, #2
 8009c56:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	683a      	ldr	r2, [r7, #0]
 8009c5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009c62:	2301      	movs	r3, #1
 8009c64:	75fb      	strb	r3, [r7, #23]
      break;
 8009c66:	e007      	b.n	8009c78 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009c68:	7afb      	ldrb	r3, [r7, #11]
 8009c6a:	4619      	mov	r1, r3
 8009c6c:	68f8      	ldr	r0, [r7, #12]
 8009c6e:	f7ff fb83 	bl	8009378 <USBH_MSC_BOT_Process>
 8009c72:	4603      	mov	r3, r0
 8009c74:	75fb      	strb	r3, [r7, #23]
      break;
 8009c76:	bf00      	nop
  }

  return error;
 8009c78:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3718      	adds	r7, #24
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}

08009c82 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8009c82:	b580      	push	{r7, lr}
 8009c84:	b086      	sub	sp, #24
 8009c86:	af00      	add	r7, sp, #0
 8009c88:	60f8      	str	r0, [r7, #12]
 8009c8a:	607a      	str	r2, [r7, #4]
 8009c8c:	603b      	str	r3, [r7, #0]
 8009c8e:	460b      	mov	r3, r1
 8009c90:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009c92:	2302      	movs	r3, #2
 8009c94:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c9c:	69db      	ldr	r3, [r3, #28]
 8009c9e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009ca6:	2b01      	cmp	r3, #1
 8009ca8:	d002      	beq.n	8009cb0 <USBH_MSC_SCSI_Read+0x2e>
 8009caa:	2b02      	cmp	r3, #2
 8009cac:	d047      	beq.n	8009d3e <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8009cae:	e04e      	b.n	8009d4e <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8009cb6:	461a      	mov	r2, r3
 8009cb8:	6a3b      	ldr	r3, [r7, #32]
 8009cba:	fb03 f202 	mul.w	r2, r3, r2
 8009cbe:	693b      	ldr	r3, [r7, #16]
 8009cc0:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	2280      	movs	r2, #128	; 0x80
 8009cc6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009cca:	693b      	ldr	r3, [r7, #16]
 8009ccc:	220a      	movs	r2, #10
 8009cce:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	3363      	adds	r3, #99	; 0x63
 8009cd6:	2210      	movs	r2, #16
 8009cd8:	2100      	movs	r1, #0
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f001 ff70 	bl	800bbc0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8009ce0:	693b      	ldr	r3, [r7, #16]
 8009ce2:	2228      	movs	r2, #40	; 0x28
 8009ce4:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8009ce8:	79fa      	ldrb	r2, [r7, #7]
 8009cea:	693b      	ldr	r3, [r7, #16]
 8009cec:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8009cf0:	79ba      	ldrb	r2, [r7, #6]
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8009cf8:	797a      	ldrb	r2, [r7, #5]
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8009d00:	1d3b      	adds	r3, r7, #4
 8009d02:	781a      	ldrb	r2, [r3, #0]
 8009d04:	693b      	ldr	r3, [r7, #16]
 8009d06:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8009d0a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8009d14:	f107 0320 	add.w	r3, r7, #32
 8009d18:	781a      	ldrb	r2, [r3, #0]
 8009d1a:	693b      	ldr	r3, [r7, #16]
 8009d1c:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009d20:	693b      	ldr	r3, [r7, #16]
 8009d22:	2201      	movs	r2, #1
 8009d24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009d28:	693b      	ldr	r3, [r7, #16]
 8009d2a:	2202      	movs	r2, #2
 8009d2c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	683a      	ldr	r2, [r7, #0]
 8009d34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009d38:	2301      	movs	r3, #1
 8009d3a:	75fb      	strb	r3, [r7, #23]
      break;
 8009d3c:	e007      	b.n	8009d4e <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009d3e:	7afb      	ldrb	r3, [r7, #11]
 8009d40:	4619      	mov	r1, r3
 8009d42:	68f8      	ldr	r0, [r7, #12]
 8009d44:	f7ff fb18 	bl	8009378 <USBH_MSC_BOT_Process>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	75fb      	strb	r3, [r7, #23]
      break;
 8009d4c:	bf00      	nop
  }

  return error;
 8009d4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d50:	4618      	mov	r0, r3
 8009d52:	3718      	adds	r7, #24
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}

08009d58 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b084      	sub	sp, #16
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	60f8      	str	r0, [r7, #12]
 8009d60:	60b9      	str	r1, [r7, #8]
 8009d62:	4613      	mov	r3, r2
 8009d64:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d101      	bne.n	8009d70 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009d6c:	2302      	movs	r3, #2
 8009d6e:	e029      	b.n	8009dc4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	79fa      	ldrb	r2, [r7, #7]
 8009d74:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	2200      	movs	r2, #0
 8009d84:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8009d88:	68f8      	ldr	r0, [r7, #12]
 8009d8a:	f000 f81f 	bl	8009dcc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	2200      	movs	r2, #0
 8009d92:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	2200      	movs	r2, #0
 8009d9a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	2200      	movs	r2, #0
 8009da2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	2200      	movs	r2, #0
 8009daa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d003      	beq.n	8009dbc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	68ba      	ldr	r2, [r7, #8]
 8009db8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8009dbc:	68f8      	ldr	r0, [r7, #12]
 8009dbe:	f001 fc93 	bl	800b6e8 <USBH_LL_Init>

  return USBH_OK;
 8009dc2:	2300      	movs	r3, #0
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	3710      	adds	r7, #16
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}

08009dcc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009dcc:	b480      	push	{r7}
 8009dce:	b085      	sub	sp, #20
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009dd8:	2300      	movs	r3, #0
 8009dda:	60fb      	str	r3, [r7, #12]
 8009ddc:	e009      	b.n	8009df2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009dde:	687a      	ldr	r2, [r7, #4]
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	33e0      	adds	r3, #224	; 0xe0
 8009de4:	009b      	lsls	r3, r3, #2
 8009de6:	4413      	add	r3, r2
 8009de8:	2200      	movs	r2, #0
 8009dea:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	3301      	adds	r3, #1
 8009df0:	60fb      	str	r3, [r7, #12]
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	2b0e      	cmp	r3, #14
 8009df6:	d9f2      	bls.n	8009dde <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009df8:	2300      	movs	r3, #0
 8009dfa:	60fb      	str	r3, [r7, #12]
 8009dfc:	e009      	b.n	8009e12 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009dfe:	687a      	ldr	r2, [r7, #4]
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	4413      	add	r3, r2
 8009e04:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009e08:	2200      	movs	r2, #0
 8009e0a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	3301      	adds	r3, #1
 8009e10:	60fb      	str	r3, [r7, #12]
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e18:	d3f1      	bcc.n	8009dfe <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2200      	movs	r2, #0
 8009e24:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2201      	movs	r2, #1
 8009e2a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2201      	movs	r2, #1
 8009e38:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2240      	movs	r2, #64	; 0x40
 8009e3e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2200      	movs	r2, #0
 8009e44:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2200      	movs	r2, #0
 8009e4a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2201      	movs	r2, #1
 8009e52:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2200      	movs	r2, #0
 8009e5a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2200      	movs	r2, #0
 8009e62:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8009e66:	2300      	movs	r3, #0
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3714      	adds	r7, #20
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e72:	4770      	bx	lr

08009e74 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b085      	sub	sp, #20
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
 8009e7c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d016      	beq.n	8009eb6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d10e      	bne.n	8009eb0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009e98:	1c59      	adds	r1, r3, #1
 8009e9a:	687a      	ldr	r2, [r7, #4]
 8009e9c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8009ea0:	687a      	ldr	r2, [r7, #4]
 8009ea2:	33de      	adds	r3, #222	; 0xde
 8009ea4:	6839      	ldr	r1, [r7, #0]
 8009ea6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	73fb      	strb	r3, [r7, #15]
 8009eae:	e004      	b.n	8009eba <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009eb0:	2302      	movs	r3, #2
 8009eb2:	73fb      	strb	r3, [r7, #15]
 8009eb4:	e001      	b.n	8009eba <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009eb6:	2302      	movs	r3, #2
 8009eb8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	3714      	adds	r7, #20
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec6:	4770      	bx	lr

08009ec8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b085      	sub	sp, #20
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
 8009ed0:	460b      	mov	r3, r1
 8009ed2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8009ede:	78fa      	ldrb	r2, [r7, #3]
 8009ee0:	429a      	cmp	r2, r3
 8009ee2:	d204      	bcs.n	8009eee <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	78fa      	ldrb	r2, [r7, #3]
 8009ee8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8009eec:	e001      	b.n	8009ef2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009eee:	2302      	movs	r3, #2
 8009ef0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	3714      	adds	r7, #20
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efe:	4770      	bx	lr

08009f00 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009f00:	b480      	push	{r7}
 8009f02:	b087      	sub	sp, #28
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
 8009f08:	4608      	mov	r0, r1
 8009f0a:	4611      	mov	r1, r2
 8009f0c:	461a      	mov	r2, r3
 8009f0e:	4603      	mov	r3, r0
 8009f10:	70fb      	strb	r3, [r7, #3]
 8009f12:	460b      	mov	r3, r1
 8009f14:	70bb      	strb	r3, [r7, #2]
 8009f16:	4613      	mov	r3, r2
 8009f18:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8009f1e:	2300      	movs	r3, #0
 8009f20:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009f28:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009f2a:	e025      	b.n	8009f78 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009f2c:	7dfb      	ldrb	r3, [r7, #23]
 8009f2e:	221a      	movs	r2, #26
 8009f30:	fb02 f303 	mul.w	r3, r2, r3
 8009f34:	3308      	adds	r3, #8
 8009f36:	68fa      	ldr	r2, [r7, #12]
 8009f38:	4413      	add	r3, r2
 8009f3a:	3302      	adds	r3, #2
 8009f3c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009f3e:	693b      	ldr	r3, [r7, #16]
 8009f40:	795b      	ldrb	r3, [r3, #5]
 8009f42:	78fa      	ldrb	r2, [r7, #3]
 8009f44:	429a      	cmp	r2, r3
 8009f46:	d002      	beq.n	8009f4e <USBH_FindInterface+0x4e>
 8009f48:	78fb      	ldrb	r3, [r7, #3]
 8009f4a:	2bff      	cmp	r3, #255	; 0xff
 8009f4c:	d111      	bne.n	8009f72 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009f4e:	693b      	ldr	r3, [r7, #16]
 8009f50:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009f52:	78ba      	ldrb	r2, [r7, #2]
 8009f54:	429a      	cmp	r2, r3
 8009f56:	d002      	beq.n	8009f5e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009f58:	78bb      	ldrb	r3, [r7, #2]
 8009f5a:	2bff      	cmp	r3, #255	; 0xff
 8009f5c:	d109      	bne.n	8009f72 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009f5e:	693b      	ldr	r3, [r7, #16]
 8009f60:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009f62:	787a      	ldrb	r2, [r7, #1]
 8009f64:	429a      	cmp	r2, r3
 8009f66:	d002      	beq.n	8009f6e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009f68:	787b      	ldrb	r3, [r7, #1]
 8009f6a:	2bff      	cmp	r3, #255	; 0xff
 8009f6c:	d101      	bne.n	8009f72 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009f6e:	7dfb      	ldrb	r3, [r7, #23]
 8009f70:	e006      	b.n	8009f80 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009f72:	7dfb      	ldrb	r3, [r7, #23]
 8009f74:	3301      	adds	r3, #1
 8009f76:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009f78:	7dfb      	ldrb	r3, [r7, #23]
 8009f7a:	2b01      	cmp	r3, #1
 8009f7c:	d9d6      	bls.n	8009f2c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009f7e:	23ff      	movs	r3, #255	; 0xff
}
 8009f80:	4618      	mov	r0, r3
 8009f82:	371c      	adds	r7, #28
 8009f84:	46bd      	mov	sp, r7
 8009f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8a:	4770      	bx	lr

08009f8c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b082      	sub	sp, #8
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f001 fbe3 	bl	800b760 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8009f9a:	2101      	movs	r1, #1
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f001 fcfc 	bl	800b99a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009fa2:	2300      	movs	r3, #0
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	3708      	adds	r7, #8
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}

08009fac <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b088      	sub	sp, #32
 8009fb0:	af04      	add	r7, sp, #16
 8009fb2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009fb4:	2302      	movs	r3, #2
 8009fb6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009fb8:	2300      	movs	r3, #0
 8009fba:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8009fc2:	b2db      	uxtb	r3, r3
 8009fc4:	2b01      	cmp	r3, #1
 8009fc6:	d102      	bne.n	8009fce <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2203      	movs	r2, #3
 8009fcc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	781b      	ldrb	r3, [r3, #0]
 8009fd2:	b2db      	uxtb	r3, r3
 8009fd4:	2b0b      	cmp	r3, #11
 8009fd6:	f200 81b3 	bhi.w	800a340 <USBH_Process+0x394>
 8009fda:	a201      	add	r2, pc, #4	; (adr r2, 8009fe0 <USBH_Process+0x34>)
 8009fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fe0:	0800a011 	.word	0x0800a011
 8009fe4:	0800a043 	.word	0x0800a043
 8009fe8:	0800a0ab 	.word	0x0800a0ab
 8009fec:	0800a2db 	.word	0x0800a2db
 8009ff0:	0800a341 	.word	0x0800a341
 8009ff4:	0800a14f 	.word	0x0800a14f
 8009ff8:	0800a281 	.word	0x0800a281
 8009ffc:	0800a185 	.word	0x0800a185
 800a000:	0800a1a5 	.word	0x0800a1a5
 800a004:	0800a1c5 	.word	0x0800a1c5
 800a008:	0800a1f3 	.word	0x0800a1f3
 800a00c:	0800a2c3 	.word	0x0800a2c3
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a016:	b2db      	uxtb	r3, r3
 800a018:	2b00      	cmp	r3, #0
 800a01a:	f000 8193 	beq.w	800a344 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2201      	movs	r2, #1
 800a022:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a024:	20c8      	movs	r0, #200	; 0xc8
 800a026:	f001 fd2f 	bl	800ba88 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f001 fbf5 	bl	800b81a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2200      	movs	r2, #0
 800a034:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2200      	movs	r2, #0
 800a03c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a040:	e180      	b.n	800a344 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800a048:	2b01      	cmp	r3, #1
 800a04a:	d107      	bne.n	800a05c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2200      	movs	r2, #0
 800a050:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2202      	movs	r2, #2
 800a058:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a05a:	e182      	b.n	800a362 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a062:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a066:	d914      	bls.n	800a092 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a06e:	3301      	adds	r3, #1
 800a070:	b2da      	uxtb	r2, r3
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a07e:	2b03      	cmp	r3, #3
 800a080:	d903      	bls.n	800a08a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	220d      	movs	r2, #13
 800a086:	701a      	strb	r2, [r3, #0]
      break;
 800a088:	e16b      	b.n	800a362 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2200      	movs	r2, #0
 800a08e:	701a      	strb	r2, [r3, #0]
      break;
 800a090:	e167      	b.n	800a362 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a098:	f103 020a 	add.w	r2, r3, #10
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800a0a2:	200a      	movs	r0, #10
 800a0a4:	f001 fcf0 	bl	800ba88 <USBH_Delay>
      break;
 800a0a8:	e15b      	b.n	800a362 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d005      	beq.n	800a0c0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a0ba:	2104      	movs	r1, #4
 800a0bc:	6878      	ldr	r0, [r7, #4]
 800a0be:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a0c0:	2064      	movs	r0, #100	; 0x64
 800a0c2:	f001 fce1 	bl	800ba88 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f001 fb80 	bl	800b7cc <USBH_LL_GetSpeed>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	461a      	mov	r2, r3
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2205      	movs	r2, #5
 800a0da:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a0dc:	2100      	movs	r1, #0
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f001 f92f 	bl	800b342 <USBH_AllocPipe>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	461a      	mov	r2, r3
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a0ec:	2180      	movs	r1, #128	; 0x80
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f001 f927 	bl	800b342 <USBH_AllocPipe>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	461a      	mov	r2, r3
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	7919      	ldrb	r1, [r3, #4]
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a10c:	687a      	ldr	r2, [r7, #4]
 800a10e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a110:	b292      	uxth	r2, r2
 800a112:	9202      	str	r2, [sp, #8]
 800a114:	2200      	movs	r2, #0
 800a116:	9201      	str	r2, [sp, #4]
 800a118:	9300      	str	r3, [sp, #0]
 800a11a:	4603      	mov	r3, r0
 800a11c:	2280      	movs	r2, #128	; 0x80
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f001 f8e0 	bl	800b2e4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	7959      	ldrb	r1, [r3, #5]
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a134:	687a      	ldr	r2, [r7, #4]
 800a136:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a138:	b292      	uxth	r2, r2
 800a13a:	9202      	str	r2, [sp, #8]
 800a13c:	2200      	movs	r2, #0
 800a13e:	9201      	str	r2, [sp, #4]
 800a140:	9300      	str	r3, [sp, #0]
 800a142:	4603      	mov	r3, r0
 800a144:	2200      	movs	r2, #0
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f001 f8cc 	bl	800b2e4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a14c:	e109      	b.n	800a362 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f000 f90c 	bl	800a36c <USBH_HandleEnum>
 800a154:	4603      	mov	r3, r0
 800a156:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a158:	7bbb      	ldrb	r3, [r7, #14]
 800a15a:	b2db      	uxtb	r3, r3
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	f040 80f3 	bne.w	800a348 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2200      	movs	r2, #0
 800a166:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800a170:	2b01      	cmp	r3, #1
 800a172:	d103      	bne.n	800a17c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2208      	movs	r2, #8
 800a178:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a17a:	e0e5      	b.n	800a348 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2207      	movs	r2, #7
 800a180:	701a      	strb	r2, [r3, #0]
      break;
 800a182:	e0e1      	b.n	800a348 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	f000 80de 	beq.w	800a34c <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a196:	2101      	movs	r1, #1
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2208      	movs	r2, #8
 800a1a0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800a1a2:	e0d3      	b.n	800a34c <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800a1aa:	b29b      	uxth	r3, r3
 800a1ac:	4619      	mov	r1, r3
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f000 fc20 	bl	800a9f4 <USBH_SetCfg>
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	f040 80ca 	bne.w	800a350 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2209      	movs	r2, #9
 800a1c0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a1c2:	e0c5      	b.n	800a350 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800a1ca:	f003 0320 	and.w	r3, r3, #32
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d00b      	beq.n	800a1ea <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800a1d2:	2101      	movs	r1, #1
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f000 fc30 	bl	800aa3a <USBH_SetFeature>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	f040 80b9 	bne.w	800a354 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	220a      	movs	r2, #10
 800a1e6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a1e8:	e0b4      	b.n	800a354 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	220a      	movs	r2, #10
 800a1ee:	701a      	strb	r2, [r3, #0]
      break;
 800a1f0:	e0b0      	b.n	800a354 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	f000 80ad 	beq.w	800a358 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2200      	movs	r2, #0
 800a202:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a206:	2300      	movs	r3, #0
 800a208:	73fb      	strb	r3, [r7, #15]
 800a20a:	e016      	b.n	800a23a <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a20c:	7bfa      	ldrb	r2, [r7, #15]
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	32de      	adds	r2, #222	; 0xde
 800a212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a216:	791a      	ldrb	r2, [r3, #4]
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800a21e:	429a      	cmp	r2, r3
 800a220:	d108      	bne.n	800a234 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a222:	7bfa      	ldrb	r2, [r7, #15]
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	32de      	adds	r2, #222	; 0xde
 800a228:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800a232:	e005      	b.n	800a240 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a234:	7bfb      	ldrb	r3, [r7, #15]
 800a236:	3301      	adds	r3, #1
 800a238:	73fb      	strb	r3, [r7, #15]
 800a23a:	7bfb      	ldrb	r3, [r7, #15]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d0e5      	beq.n	800a20c <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a246:	2b00      	cmp	r3, #0
 800a248:	d016      	beq.n	800a278 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a250:	689b      	ldr	r3, [r3, #8]
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	4798      	blx	r3
 800a256:	4603      	mov	r3, r0
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d109      	bne.n	800a270 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2206      	movs	r2, #6
 800a260:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a268:	2103      	movs	r1, #3
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a26e:	e073      	b.n	800a358 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	220d      	movs	r2, #13
 800a274:	701a      	strb	r2, [r3, #0]
      break;
 800a276:	e06f      	b.n	800a358 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	220d      	movs	r2, #13
 800a27c:	701a      	strb	r2, [r3, #0]
      break;
 800a27e:	e06b      	b.n	800a358 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a286:	2b00      	cmp	r3, #0
 800a288:	d017      	beq.n	800a2ba <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a290:	691b      	ldr	r3, [r3, #16]
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	4798      	blx	r3
 800a296:	4603      	mov	r3, r0
 800a298:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a29a:	7bbb      	ldrb	r3, [r7, #14]
 800a29c:	b2db      	uxtb	r3, r3
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d103      	bne.n	800a2aa <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	220b      	movs	r2, #11
 800a2a6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a2a8:	e058      	b.n	800a35c <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800a2aa:	7bbb      	ldrb	r3, [r7, #14]
 800a2ac:	b2db      	uxtb	r3, r3
 800a2ae:	2b02      	cmp	r3, #2
 800a2b0:	d154      	bne.n	800a35c <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	220d      	movs	r2, #13
 800a2b6:	701a      	strb	r2, [r3, #0]
      break;
 800a2b8:	e050      	b.n	800a35c <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	220d      	movs	r2, #13
 800a2be:	701a      	strb	r2, [r3, #0]
      break;
 800a2c0:	e04c      	b.n	800a35c <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d049      	beq.n	800a360 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a2d2:	695b      	ldr	r3, [r3, #20]
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	4798      	blx	r3
      }
      break;
 800a2d8:	e042      	b.n	800a360 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f7ff fd72 	bl	8009dcc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d009      	beq.n	800a306 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a2f8:	68db      	ldr	r3, [r3, #12]
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2200      	movs	r2, #0
 800a302:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d005      	beq.n	800a31c <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a316:	2105      	movs	r1, #5
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800a322:	b2db      	uxtb	r3, r3
 800a324:	2b01      	cmp	r3, #1
 800a326:	d107      	bne.n	800a338 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2200      	movs	r2, #0
 800a32c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	f7ff fe2b 	bl	8009f8c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a336:	e014      	b.n	800a362 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f001 fa11 	bl	800b760 <USBH_LL_Start>
      break;
 800a33e:	e010      	b.n	800a362 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800a340:	bf00      	nop
 800a342:	e00e      	b.n	800a362 <USBH_Process+0x3b6>
      break;
 800a344:	bf00      	nop
 800a346:	e00c      	b.n	800a362 <USBH_Process+0x3b6>
      break;
 800a348:	bf00      	nop
 800a34a:	e00a      	b.n	800a362 <USBH_Process+0x3b6>
    break;
 800a34c:	bf00      	nop
 800a34e:	e008      	b.n	800a362 <USBH_Process+0x3b6>
      break;
 800a350:	bf00      	nop
 800a352:	e006      	b.n	800a362 <USBH_Process+0x3b6>
      break;
 800a354:	bf00      	nop
 800a356:	e004      	b.n	800a362 <USBH_Process+0x3b6>
      break;
 800a358:	bf00      	nop
 800a35a:	e002      	b.n	800a362 <USBH_Process+0x3b6>
      break;
 800a35c:	bf00      	nop
 800a35e:	e000      	b.n	800a362 <USBH_Process+0x3b6>
      break;
 800a360:	bf00      	nop
  }
  return USBH_OK;
 800a362:	2300      	movs	r3, #0
}
 800a364:	4618      	mov	r0, r3
 800a366:	3710      	adds	r7, #16
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}

0800a36c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b088      	sub	sp, #32
 800a370:	af04      	add	r7, sp, #16
 800a372:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a374:	2301      	movs	r3, #1
 800a376:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a378:	2301      	movs	r3, #1
 800a37a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	785b      	ldrb	r3, [r3, #1]
 800a380:	2b07      	cmp	r3, #7
 800a382:	f200 81c1 	bhi.w	800a708 <USBH_HandleEnum+0x39c>
 800a386:	a201      	add	r2, pc, #4	; (adr r2, 800a38c <USBH_HandleEnum+0x20>)
 800a388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a38c:	0800a3ad 	.word	0x0800a3ad
 800a390:	0800a46b 	.word	0x0800a46b
 800a394:	0800a4d5 	.word	0x0800a4d5
 800a398:	0800a563 	.word	0x0800a563
 800a39c:	0800a5cd 	.word	0x0800a5cd
 800a3a0:	0800a63d 	.word	0x0800a63d
 800a3a4:	0800a683 	.word	0x0800a683
 800a3a8:	0800a6c9 	.word	0x0800a6c9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a3ac:	2108      	movs	r1, #8
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f000 fa50 	bl	800a854 <USBH_Get_DevDesc>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a3b8:	7bbb      	ldrb	r3, [r7, #14]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d130      	bne.n	800a420 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2201      	movs	r2, #1
 800a3cc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	7919      	ldrb	r1, [r3, #4]
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a3de:	687a      	ldr	r2, [r7, #4]
 800a3e0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a3e2:	b292      	uxth	r2, r2
 800a3e4:	9202      	str	r2, [sp, #8]
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	9201      	str	r2, [sp, #4]
 800a3ea:	9300      	str	r3, [sp, #0]
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	2280      	movs	r2, #128	; 0x80
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f000 ff77 	bl	800b2e4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	7959      	ldrb	r1, [r3, #5]
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a406:	687a      	ldr	r2, [r7, #4]
 800a408:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a40a:	b292      	uxth	r2, r2
 800a40c:	9202      	str	r2, [sp, #8]
 800a40e:	2200      	movs	r2, #0
 800a410:	9201      	str	r2, [sp, #4]
 800a412:	9300      	str	r3, [sp, #0]
 800a414:	4603      	mov	r3, r0
 800a416:	2200      	movs	r2, #0
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f000 ff63 	bl	800b2e4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a41e:	e175      	b.n	800a70c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a420:	7bbb      	ldrb	r3, [r7, #14]
 800a422:	2b03      	cmp	r3, #3
 800a424:	f040 8172 	bne.w	800a70c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a42e:	3301      	adds	r3, #1
 800a430:	b2da      	uxtb	r2, r3
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a43e:	2b03      	cmp	r3, #3
 800a440:	d903      	bls.n	800a44a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	220d      	movs	r2, #13
 800a446:	701a      	strb	r2, [r3, #0]
      break;
 800a448:	e160      	b.n	800a70c <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	795b      	ldrb	r3, [r3, #5]
 800a44e:	4619      	mov	r1, r3
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	f000 ff97 	bl	800b384 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	791b      	ldrb	r3, [r3, #4]
 800a45a:	4619      	mov	r1, r3
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f000 ff91 	bl	800b384 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2200      	movs	r2, #0
 800a466:	701a      	strb	r2, [r3, #0]
      break;
 800a468:	e150      	b.n	800a70c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a46a:	2112      	movs	r1, #18
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f000 f9f1 	bl	800a854 <USBH_Get_DevDesc>
 800a472:	4603      	mov	r3, r0
 800a474:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a476:	7bbb      	ldrb	r3, [r7, #14]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d103      	bne.n	800a484 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2202      	movs	r2, #2
 800a480:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a482:	e145      	b.n	800a710 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a484:	7bbb      	ldrb	r3, [r7, #14]
 800a486:	2b03      	cmp	r3, #3
 800a488:	f040 8142 	bne.w	800a710 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a492:	3301      	adds	r3, #1
 800a494:	b2da      	uxtb	r2, r3
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a4a2:	2b03      	cmp	r3, #3
 800a4a4:	d903      	bls.n	800a4ae <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	220d      	movs	r2, #13
 800a4aa:	701a      	strb	r2, [r3, #0]
      break;
 800a4ac:	e130      	b.n	800a710 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	795b      	ldrb	r3, [r3, #5]
 800a4b2:	4619      	mov	r1, r3
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f000 ff65 	bl	800b384 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	791b      	ldrb	r3, [r3, #4]
 800a4be:	4619      	mov	r1, r3
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	f000 ff5f 	bl	800b384 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	701a      	strb	r2, [r3, #0]
      break;
 800a4d2:	e11d      	b.n	800a710 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a4d4:	2101      	movs	r1, #1
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f000 fa68 	bl	800a9ac <USBH_SetAddress>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a4e0:	7bbb      	ldrb	r3, [r7, #14]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d132      	bne.n	800a54c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800a4e6:	2002      	movs	r0, #2
 800a4e8:	f001 face 	bl	800ba88 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2201      	movs	r2, #1
 800a4f0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2203      	movs	r2, #3
 800a4f8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	7919      	ldrb	r1, [r3, #4]
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a50a:	687a      	ldr	r2, [r7, #4]
 800a50c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a50e:	b292      	uxth	r2, r2
 800a510:	9202      	str	r2, [sp, #8]
 800a512:	2200      	movs	r2, #0
 800a514:	9201      	str	r2, [sp, #4]
 800a516:	9300      	str	r3, [sp, #0]
 800a518:	4603      	mov	r3, r0
 800a51a:	2280      	movs	r2, #128	; 0x80
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f000 fee1 	bl	800b2e4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	7959      	ldrb	r1, [r3, #5]
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a532:	687a      	ldr	r2, [r7, #4]
 800a534:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a536:	b292      	uxth	r2, r2
 800a538:	9202      	str	r2, [sp, #8]
 800a53a:	2200      	movs	r2, #0
 800a53c:	9201      	str	r2, [sp, #4]
 800a53e:	9300      	str	r3, [sp, #0]
 800a540:	4603      	mov	r3, r0
 800a542:	2200      	movs	r2, #0
 800a544:	6878      	ldr	r0, [r7, #4]
 800a546:	f000 fecd 	bl	800b2e4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a54a:	e0e3      	b.n	800a714 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a54c:	7bbb      	ldrb	r3, [r7, #14]
 800a54e:	2b03      	cmp	r3, #3
 800a550:	f040 80e0 	bne.w	800a714 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	220d      	movs	r2, #13
 800a558:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2200      	movs	r2, #0
 800a55e:	705a      	strb	r2, [r3, #1]
      break;
 800a560:	e0d8      	b.n	800a714 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a562:	2109      	movs	r1, #9
 800a564:	6878      	ldr	r0, [r7, #4]
 800a566:	f000 f99d 	bl	800a8a4 <USBH_Get_CfgDesc>
 800a56a:	4603      	mov	r3, r0
 800a56c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a56e:	7bbb      	ldrb	r3, [r7, #14]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d103      	bne.n	800a57c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2204      	movs	r2, #4
 800a578:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a57a:	e0cd      	b.n	800a718 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a57c:	7bbb      	ldrb	r3, [r7, #14]
 800a57e:	2b03      	cmp	r3, #3
 800a580:	f040 80ca 	bne.w	800a718 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a58a:	3301      	adds	r3, #1
 800a58c:	b2da      	uxtb	r2, r3
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a59a:	2b03      	cmp	r3, #3
 800a59c:	d903      	bls.n	800a5a6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	220d      	movs	r2, #13
 800a5a2:	701a      	strb	r2, [r3, #0]
      break;
 800a5a4:	e0b8      	b.n	800a718 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	795b      	ldrb	r3, [r3, #5]
 800a5aa:	4619      	mov	r1, r3
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	f000 fee9 	bl	800b384 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	791b      	ldrb	r3, [r3, #4]
 800a5b6:	4619      	mov	r1, r3
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f000 fee3 	bl	800b384 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	701a      	strb	r2, [r3, #0]
      break;
 800a5ca:	e0a5      	b.n	800a718 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800a5d2:	4619      	mov	r1, r3
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f000 f965 	bl	800a8a4 <USBH_Get_CfgDesc>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a5de:	7bbb      	ldrb	r3, [r7, #14]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d103      	bne.n	800a5ec <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2205      	movs	r2, #5
 800a5e8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a5ea:	e097      	b.n	800a71c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a5ec:	7bbb      	ldrb	r3, [r7, #14]
 800a5ee:	2b03      	cmp	r3, #3
 800a5f0:	f040 8094 	bne.w	800a71c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a5fa:	3301      	adds	r3, #1
 800a5fc:	b2da      	uxtb	r2, r3
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a60a:	2b03      	cmp	r3, #3
 800a60c:	d903      	bls.n	800a616 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	220d      	movs	r2, #13
 800a612:	701a      	strb	r2, [r3, #0]
      break;
 800a614:	e082      	b.n	800a71c <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	795b      	ldrb	r3, [r3, #5]
 800a61a:	4619      	mov	r1, r3
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	f000 feb1 	bl	800b384 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	791b      	ldrb	r3, [r3, #4]
 800a626:	4619      	mov	r1, r3
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f000 feab 	bl	800b384 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2200      	movs	r2, #0
 800a632:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2200      	movs	r2, #0
 800a638:	701a      	strb	r2, [r3, #0]
      break;
 800a63a:	e06f      	b.n	800a71c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800a642:	2b00      	cmp	r3, #0
 800a644:	d019      	beq.n	800a67a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a652:	23ff      	movs	r3, #255	; 0xff
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f000 f949 	bl	800a8ec <USBH_Get_StringDesc>
 800a65a:	4603      	mov	r3, r0
 800a65c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a65e:	7bbb      	ldrb	r3, [r7, #14]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d103      	bne.n	800a66c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2206      	movs	r2, #6
 800a668:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a66a:	e059      	b.n	800a720 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a66c:	7bbb      	ldrb	r3, [r7, #14]
 800a66e:	2b03      	cmp	r3, #3
 800a670:	d156      	bne.n	800a720 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2206      	movs	r2, #6
 800a676:	705a      	strb	r2, [r3, #1]
      break;
 800a678:	e052      	b.n	800a720 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2206      	movs	r2, #6
 800a67e:	705a      	strb	r2, [r3, #1]
      break;
 800a680:	e04e      	b.n	800a720 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d019      	beq.n	800a6c0 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a698:	23ff      	movs	r3, #255	; 0xff
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f000 f926 	bl	800a8ec <USBH_Get_StringDesc>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a6a4:	7bbb      	ldrb	r3, [r7, #14]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d103      	bne.n	800a6b2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2207      	movs	r2, #7
 800a6ae:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a6b0:	e038      	b.n	800a724 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a6b2:	7bbb      	ldrb	r3, [r7, #14]
 800a6b4:	2b03      	cmp	r3, #3
 800a6b6:	d135      	bne.n	800a724 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2207      	movs	r2, #7
 800a6bc:	705a      	strb	r2, [r3, #1]
      break;
 800a6be:	e031      	b.n	800a724 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2207      	movs	r2, #7
 800a6c4:	705a      	strb	r2, [r3, #1]
      break;
 800a6c6:	e02d      	b.n	800a724 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d017      	beq.n	800a702 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a6de:	23ff      	movs	r3, #255	; 0xff
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	f000 f903 	bl	800a8ec <USBH_Get_StringDesc>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a6ea:	7bbb      	ldrb	r3, [r7, #14]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d102      	bne.n	800a6f6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a6f4:	e018      	b.n	800a728 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a6f6:	7bbb      	ldrb	r3, [r7, #14]
 800a6f8:	2b03      	cmp	r3, #3
 800a6fa:	d115      	bne.n	800a728 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	73fb      	strb	r3, [r7, #15]
      break;
 800a700:	e012      	b.n	800a728 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800a702:	2300      	movs	r3, #0
 800a704:	73fb      	strb	r3, [r7, #15]
      break;
 800a706:	e00f      	b.n	800a728 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800a708:	bf00      	nop
 800a70a:	e00e      	b.n	800a72a <USBH_HandleEnum+0x3be>
      break;
 800a70c:	bf00      	nop
 800a70e:	e00c      	b.n	800a72a <USBH_HandleEnum+0x3be>
      break;
 800a710:	bf00      	nop
 800a712:	e00a      	b.n	800a72a <USBH_HandleEnum+0x3be>
      break;
 800a714:	bf00      	nop
 800a716:	e008      	b.n	800a72a <USBH_HandleEnum+0x3be>
      break;
 800a718:	bf00      	nop
 800a71a:	e006      	b.n	800a72a <USBH_HandleEnum+0x3be>
      break;
 800a71c:	bf00      	nop
 800a71e:	e004      	b.n	800a72a <USBH_HandleEnum+0x3be>
      break;
 800a720:	bf00      	nop
 800a722:	e002      	b.n	800a72a <USBH_HandleEnum+0x3be>
      break;
 800a724:	bf00      	nop
 800a726:	e000      	b.n	800a72a <USBH_HandleEnum+0x3be>
      break;
 800a728:	bf00      	nop
  }
  return Status;
 800a72a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	3710      	adds	r7, #16
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}

0800a734 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a734:	b480      	push	{r7}
 800a736:	b083      	sub	sp, #12
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
 800a73c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	683a      	ldr	r2, [r7, #0]
 800a742:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800a746:	bf00      	nop
 800a748:	370c      	adds	r7, #12
 800a74a:	46bd      	mov	sp, r7
 800a74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a750:	4770      	bx	lr

0800a752 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a752:	b580      	push	{r7, lr}
 800a754:	b082      	sub	sp, #8
 800a756:	af00      	add	r7, sp, #0
 800a758:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a760:	1c5a      	adds	r2, r3, #1
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800a768:	6878      	ldr	r0, [r7, #4]
 800a76a:	f000 f804 	bl	800a776 <USBH_HandleSof>
}
 800a76e:	bf00      	nop
 800a770:	3708      	adds	r7, #8
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}

0800a776 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a776:	b580      	push	{r7, lr}
 800a778:	b082      	sub	sp, #8
 800a77a:	af00      	add	r7, sp, #0
 800a77c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	781b      	ldrb	r3, [r3, #0]
 800a782:	b2db      	uxtb	r3, r3
 800a784:	2b0b      	cmp	r3, #11
 800a786:	d10a      	bne.n	800a79e <USBH_HandleSof+0x28>
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d005      	beq.n	800a79e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a798:	699b      	ldr	r3, [r3, #24]
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	4798      	blx	r3
  }
}
 800a79e:	bf00      	nop
 800a7a0:	3708      	adds	r7, #8
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}

0800a7a6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a7a6:	b480      	push	{r7}
 800a7a8:	b083      	sub	sp, #12
 800a7aa:	af00      	add	r7, sp, #0
 800a7ac:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2201      	movs	r2, #1
 800a7b2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800a7b6:	bf00      	nop
}
 800a7b8:	370c      	adds	r7, #12
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c0:	4770      	bx	lr

0800a7c2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a7c2:	b480      	push	{r7}
 800a7c4:	b083      	sub	sp, #12
 800a7c6:	af00      	add	r7, sp, #0
 800a7c8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800a7d2:	bf00      	nop
}
 800a7d4:	370c      	adds	r7, #12
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7dc:	4770      	bx	lr

0800a7de <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a7de:	b480      	push	{r7}
 800a7e0:	b083      	sub	sp, #12
 800a7e2:	af00      	add	r7, sp, #0
 800a7e4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2201      	movs	r2, #1
 800a7ea:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800a7fe:	2300      	movs	r3, #0
}
 800a800:	4618      	mov	r0, r3
 800a802:	370c      	adds	r7, #12
 800a804:	46bd      	mov	sp, r7
 800a806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80a:	4770      	bx	lr

0800a80c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b082      	sub	sp, #8
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2201      	movs	r2, #1
 800a818:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2200      	movs	r2, #0
 800a820:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2200      	movs	r2, #0
 800a828:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f000 ffb2 	bl	800b796 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	791b      	ldrb	r3, [r3, #4]
 800a836:	4619      	mov	r1, r3
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	f000 fda3 	bl	800b384 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	795b      	ldrb	r3, [r3, #5]
 800a842:	4619      	mov	r1, r3
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f000 fd9d 	bl	800b384 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800a84a:	2300      	movs	r3, #0
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	3708      	adds	r7, #8
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}

0800a854 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b086      	sub	sp, #24
 800a858:	af02      	add	r7, sp, #8
 800a85a:	6078      	str	r0, [r7, #4]
 800a85c:	460b      	mov	r3, r1
 800a85e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800a866:	78fb      	ldrb	r3, [r7, #3]
 800a868:	b29b      	uxth	r3, r3
 800a86a:	9300      	str	r3, [sp, #0]
 800a86c:	4613      	mov	r3, r2
 800a86e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a872:	2100      	movs	r1, #0
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	f000 f864 	bl	800a942 <USBH_GetDescriptor>
 800a87a:	4603      	mov	r3, r0
 800a87c:	73fb      	strb	r3, [r7, #15]
 800a87e:	7bfb      	ldrb	r3, [r7, #15]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d10a      	bne.n	800a89a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f203 3026 	addw	r0, r3, #806	; 0x326
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a890:	78fa      	ldrb	r2, [r7, #3]
 800a892:	b292      	uxth	r2, r2
 800a894:	4619      	mov	r1, r3
 800a896:	f000 f918 	bl	800aaca <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800a89a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	3710      	adds	r7, #16
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd80      	pop	{r7, pc}

0800a8a4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b086      	sub	sp, #24
 800a8a8:	af02      	add	r7, sp, #8
 800a8aa:	6078      	str	r0, [r7, #4]
 800a8ac:	460b      	mov	r3, r1
 800a8ae:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	331c      	adds	r3, #28
 800a8b4:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a8b6:	887b      	ldrh	r3, [r7, #2]
 800a8b8:	9300      	str	r3, [sp, #0]
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a8c0:	2100      	movs	r1, #0
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f000 f83d 	bl	800a942 <USBH_GetDescriptor>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	72fb      	strb	r3, [r7, #11]
 800a8cc:	7afb      	ldrb	r3, [r7, #11]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d107      	bne.n	800a8e2 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a8d8:	887a      	ldrh	r2, [r7, #2]
 800a8da:	68f9      	ldr	r1, [r7, #12]
 800a8dc:	4618      	mov	r0, r3
 800a8de:	f000 f964 	bl	800abaa <USBH_ParseCfgDesc>
  }

  return status;
 800a8e2:	7afb      	ldrb	r3, [r7, #11]
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	3710      	adds	r7, #16
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd80      	pop	{r7, pc}

0800a8ec <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b088      	sub	sp, #32
 800a8f0:	af02      	add	r7, sp, #8
 800a8f2:	60f8      	str	r0, [r7, #12]
 800a8f4:	607a      	str	r2, [r7, #4]
 800a8f6:	461a      	mov	r2, r3
 800a8f8:	460b      	mov	r3, r1
 800a8fa:	72fb      	strb	r3, [r7, #11]
 800a8fc:	4613      	mov	r3, r2
 800a8fe:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800a900:	7afb      	ldrb	r3, [r7, #11]
 800a902:	b29b      	uxth	r3, r3
 800a904:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a908:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800a910:	893b      	ldrh	r3, [r7, #8]
 800a912:	9300      	str	r3, [sp, #0]
 800a914:	460b      	mov	r3, r1
 800a916:	2100      	movs	r1, #0
 800a918:	68f8      	ldr	r0, [r7, #12]
 800a91a:	f000 f812 	bl	800a942 <USBH_GetDescriptor>
 800a91e:	4603      	mov	r3, r0
 800a920:	75fb      	strb	r3, [r7, #23]
 800a922:	7dfb      	ldrb	r3, [r7, #23]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d107      	bne.n	800a938 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a92e:	893a      	ldrh	r2, [r7, #8]
 800a930:	6879      	ldr	r1, [r7, #4]
 800a932:	4618      	mov	r0, r3
 800a934:	f000 fa37 	bl	800ada6 <USBH_ParseStringDesc>
  }

  return status;
 800a938:	7dfb      	ldrb	r3, [r7, #23]
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	3718      	adds	r7, #24
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}

0800a942 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800a942:	b580      	push	{r7, lr}
 800a944:	b084      	sub	sp, #16
 800a946:	af00      	add	r7, sp, #0
 800a948:	60f8      	str	r0, [r7, #12]
 800a94a:	607b      	str	r3, [r7, #4]
 800a94c:	460b      	mov	r3, r1
 800a94e:	72fb      	strb	r3, [r7, #11]
 800a950:	4613      	mov	r3, r2
 800a952:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	789b      	ldrb	r3, [r3, #2]
 800a958:	2b01      	cmp	r3, #1
 800a95a:	d11c      	bne.n	800a996 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a95c:	7afb      	ldrb	r3, [r7, #11]
 800a95e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a962:	b2da      	uxtb	r2, r3
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	2206      	movs	r2, #6
 800a96c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	893a      	ldrh	r2, [r7, #8]
 800a972:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a974:	893b      	ldrh	r3, [r7, #8]
 800a976:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a97a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a97e:	d104      	bne.n	800a98a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	f240 4209 	movw	r2, #1033	; 0x409
 800a986:	829a      	strh	r2, [r3, #20]
 800a988:	e002      	b.n	800a990 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	2200      	movs	r2, #0
 800a98e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	8b3a      	ldrh	r2, [r7, #24]
 800a994:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a996:	8b3b      	ldrh	r3, [r7, #24]
 800a998:	461a      	mov	r2, r3
 800a99a:	6879      	ldr	r1, [r7, #4]
 800a99c:	68f8      	ldr	r0, [r7, #12]
 800a99e:	f000 fa50 	bl	800ae42 <USBH_CtlReq>
 800a9a2:	4603      	mov	r3, r0
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	3710      	adds	r7, #16
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}

0800a9ac <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b082      	sub	sp, #8
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
 800a9b4:	460b      	mov	r3, r1
 800a9b6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	789b      	ldrb	r3, [r3, #2]
 800a9bc:	2b01      	cmp	r3, #1
 800a9be:	d10f      	bne.n	800a9e0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2205      	movs	r2, #5
 800a9ca:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a9cc:	78fb      	ldrb	r3, [r7, #3]
 800a9ce:	b29a      	uxth	r2, r3
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	2100      	movs	r1, #0
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f000 fa2c 	bl	800ae42 <USBH_CtlReq>
 800a9ea:	4603      	mov	r3, r0
}
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	3708      	adds	r7, #8
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd80      	pop	{r7, pc}

0800a9f4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b082      	sub	sp, #8
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
 800a9fc:	460b      	mov	r3, r1
 800a9fe:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	789b      	ldrb	r3, [r3, #2]
 800aa04:	2b01      	cmp	r3, #1
 800aa06:	d10e      	bne.n	800aa26 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2209      	movs	r2, #9
 800aa12:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	887a      	ldrh	r2, [r7, #2]
 800aa18:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2200      	movs	r2, #0
 800aa24:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800aa26:	2200      	movs	r2, #0
 800aa28:	2100      	movs	r1, #0
 800aa2a:	6878      	ldr	r0, [r7, #4]
 800aa2c:	f000 fa09 	bl	800ae42 <USBH_CtlReq>
 800aa30:	4603      	mov	r3, r0
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	3708      	adds	r7, #8
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}

0800aa3a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800aa3a:	b580      	push	{r7, lr}
 800aa3c:	b082      	sub	sp, #8
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	6078      	str	r0, [r7, #4]
 800aa42:	460b      	mov	r3, r1
 800aa44:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	789b      	ldrb	r3, [r3, #2]
 800aa4a:	2b01      	cmp	r3, #1
 800aa4c:	d10f      	bne.n	800aa6e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2200      	movs	r2, #0
 800aa52:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2203      	movs	r2, #3
 800aa58:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800aa5a:	78fb      	ldrb	r3, [r7, #3]
 800aa5c:	b29a      	uxth	r2, r3
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2200      	movs	r2, #0
 800aa66:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800aa6e:	2200      	movs	r2, #0
 800aa70:	2100      	movs	r1, #0
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	f000 f9e5 	bl	800ae42 <USBH_CtlReq>
 800aa78:	4603      	mov	r3, r0
}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	3708      	adds	r7, #8
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}

0800aa82 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800aa82:	b580      	push	{r7, lr}
 800aa84:	b082      	sub	sp, #8
 800aa86:	af00      	add	r7, sp, #0
 800aa88:	6078      	str	r0, [r7, #4]
 800aa8a:	460b      	mov	r3, r1
 800aa8c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	789b      	ldrb	r3, [r3, #2]
 800aa92:	2b01      	cmp	r3, #1
 800aa94:	d10f      	bne.n	800aab6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2202      	movs	r2, #2
 800aa9a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2201      	movs	r2, #1
 800aaa0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800aaa8:	78fb      	ldrb	r3, [r7, #3]
 800aaaa:	b29a      	uxth	r2, r3
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2200      	movs	r2, #0
 800aab4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800aab6:	2200      	movs	r2, #0
 800aab8:	2100      	movs	r1, #0
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f000 f9c1 	bl	800ae42 <USBH_CtlReq>
 800aac0:	4603      	mov	r3, r0
}
 800aac2:	4618      	mov	r0, r3
 800aac4:	3708      	adds	r7, #8
 800aac6:	46bd      	mov	sp, r7
 800aac8:	bd80      	pop	{r7, pc}

0800aaca <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800aaca:	b480      	push	{r7}
 800aacc:	b085      	sub	sp, #20
 800aace:	af00      	add	r7, sp, #0
 800aad0:	60f8      	str	r0, [r7, #12]
 800aad2:	60b9      	str	r1, [r7, #8]
 800aad4:	4613      	mov	r3, r2
 800aad6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	781a      	ldrb	r2, [r3, #0]
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	785a      	ldrb	r2, [r3, #1]
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	3302      	adds	r3, #2
 800aaec:	781b      	ldrb	r3, [r3, #0]
 800aaee:	b29a      	uxth	r2, r3
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	3303      	adds	r3, #3
 800aaf4:	781b      	ldrb	r3, [r3, #0]
 800aaf6:	b29b      	uxth	r3, r3
 800aaf8:	021b      	lsls	r3, r3, #8
 800aafa:	b29b      	uxth	r3, r3
 800aafc:	4313      	orrs	r3, r2
 800aafe:	b29a      	uxth	r2, r3
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	791a      	ldrb	r2, [r3, #4]
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	795a      	ldrb	r2, [r3, #5]
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	799a      	ldrb	r2, [r3, #6]
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	79da      	ldrb	r2, [r3, #7]
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800ab24:	88fb      	ldrh	r3, [r7, #6]
 800ab26:	2b08      	cmp	r3, #8
 800ab28:	d939      	bls.n	800ab9e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800ab2a:	68bb      	ldr	r3, [r7, #8]
 800ab2c:	3308      	adds	r3, #8
 800ab2e:	781b      	ldrb	r3, [r3, #0]
 800ab30:	b29a      	uxth	r2, r3
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	3309      	adds	r3, #9
 800ab36:	781b      	ldrb	r3, [r3, #0]
 800ab38:	b29b      	uxth	r3, r3
 800ab3a:	021b      	lsls	r3, r3, #8
 800ab3c:	b29b      	uxth	r3, r3
 800ab3e:	4313      	orrs	r3, r2
 800ab40:	b29a      	uxth	r2, r3
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	330a      	adds	r3, #10
 800ab4a:	781b      	ldrb	r3, [r3, #0]
 800ab4c:	b29a      	uxth	r2, r3
 800ab4e:	68bb      	ldr	r3, [r7, #8]
 800ab50:	330b      	adds	r3, #11
 800ab52:	781b      	ldrb	r3, [r3, #0]
 800ab54:	b29b      	uxth	r3, r3
 800ab56:	021b      	lsls	r3, r3, #8
 800ab58:	b29b      	uxth	r3, r3
 800ab5a:	4313      	orrs	r3, r2
 800ab5c:	b29a      	uxth	r2, r3
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	330c      	adds	r3, #12
 800ab66:	781b      	ldrb	r3, [r3, #0]
 800ab68:	b29a      	uxth	r2, r3
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	330d      	adds	r3, #13
 800ab6e:	781b      	ldrb	r3, [r3, #0]
 800ab70:	b29b      	uxth	r3, r3
 800ab72:	021b      	lsls	r3, r3, #8
 800ab74:	b29b      	uxth	r3, r3
 800ab76:	4313      	orrs	r3, r2
 800ab78:	b29a      	uxth	r2, r3
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	7b9a      	ldrb	r2, [r3, #14]
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	7bda      	ldrb	r2, [r3, #15]
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800ab8e:	68bb      	ldr	r3, [r7, #8]
 800ab90:	7c1a      	ldrb	r2, [r3, #16]
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	7c5a      	ldrb	r2, [r3, #17]
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	745a      	strb	r2, [r3, #17]
  }
}
 800ab9e:	bf00      	nop
 800aba0:	3714      	adds	r7, #20
 800aba2:	46bd      	mov	sp, r7
 800aba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba8:	4770      	bx	lr

0800abaa <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800abaa:	b580      	push	{r7, lr}
 800abac:	b08a      	sub	sp, #40	; 0x28
 800abae:	af00      	add	r7, sp, #0
 800abb0:	60f8      	str	r0, [r7, #12]
 800abb2:	60b9      	str	r1, [r7, #8]
 800abb4:	4613      	mov	r3, r2
 800abb6:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800abbc:	2300      	movs	r3, #0
 800abbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800abc2:	2300      	movs	r3, #0
 800abc4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	781a      	ldrb	r2, [r3, #0]
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	785a      	ldrb	r2, [r3, #1]
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	3302      	adds	r3, #2
 800abe0:	781b      	ldrb	r3, [r3, #0]
 800abe2:	b29a      	uxth	r2, r3
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	3303      	adds	r3, #3
 800abe8:	781b      	ldrb	r3, [r3, #0]
 800abea:	b29b      	uxth	r3, r3
 800abec:	021b      	lsls	r3, r3, #8
 800abee:	b29b      	uxth	r3, r3
 800abf0:	4313      	orrs	r3, r2
 800abf2:	b29a      	uxth	r2, r3
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	791a      	ldrb	r2, [r3, #4]
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800ac00:	68bb      	ldr	r3, [r7, #8]
 800ac02:	795a      	ldrb	r2, [r3, #5]
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	799a      	ldrb	r2, [r3, #6]
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	79da      	ldrb	r2, [r3, #7]
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	7a1a      	ldrb	r2, [r3, #8]
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800ac20:	88fb      	ldrh	r3, [r7, #6]
 800ac22:	2b09      	cmp	r3, #9
 800ac24:	d95f      	bls.n	800ace6 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800ac26:	2309      	movs	r3, #9
 800ac28:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ac2e:	e051      	b.n	800acd4 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ac30:	f107 0316 	add.w	r3, r7, #22
 800ac34:	4619      	mov	r1, r3
 800ac36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ac38:	f000 f8e8 	bl	800ae0c <USBH_GetNextDesc>
 800ac3c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800ac3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac40:	785b      	ldrb	r3, [r3, #1]
 800ac42:	2b04      	cmp	r3, #4
 800ac44:	d146      	bne.n	800acd4 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800ac46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ac4a:	221a      	movs	r2, #26
 800ac4c:	fb02 f303 	mul.w	r3, r2, r3
 800ac50:	3308      	adds	r3, #8
 800ac52:	68fa      	ldr	r2, [r7, #12]
 800ac54:	4413      	add	r3, r2
 800ac56:	3302      	adds	r3, #2
 800ac58:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800ac5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ac5c:	69f8      	ldr	r0, [r7, #28]
 800ac5e:	f000 f846 	bl	800acee <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800ac62:	2300      	movs	r3, #0
 800ac64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800ac68:	2300      	movs	r3, #0
 800ac6a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ac6c:	e022      	b.n	800acb4 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ac6e:	f107 0316 	add.w	r3, r7, #22
 800ac72:	4619      	mov	r1, r3
 800ac74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ac76:	f000 f8c9 	bl	800ae0c <USBH_GetNextDesc>
 800ac7a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800ac7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac7e:	785b      	ldrb	r3, [r3, #1]
 800ac80:	2b05      	cmp	r3, #5
 800ac82:	d117      	bne.n	800acb4 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800ac84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ac88:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800ac8c:	3201      	adds	r2, #1
 800ac8e:	00d2      	lsls	r2, r2, #3
 800ac90:	211a      	movs	r1, #26
 800ac92:	fb01 f303 	mul.w	r3, r1, r3
 800ac96:	4413      	add	r3, r2
 800ac98:	3308      	adds	r3, #8
 800ac9a:	68fa      	ldr	r2, [r7, #12]
 800ac9c:	4413      	add	r3, r2
 800ac9e:	3304      	adds	r3, #4
 800aca0:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800aca2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aca4:	69b8      	ldr	r0, [r7, #24]
 800aca6:	f000 f851 	bl	800ad4c <USBH_ParseEPDesc>
            ep_ix++;
 800acaa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800acae:	3301      	adds	r3, #1
 800acb0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800acb4:	69fb      	ldr	r3, [r7, #28]
 800acb6:	791b      	ldrb	r3, [r3, #4]
 800acb8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800acbc:	429a      	cmp	r2, r3
 800acbe:	d204      	bcs.n	800acca <USBH_ParseCfgDesc+0x120>
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	885a      	ldrh	r2, [r3, #2]
 800acc4:	8afb      	ldrh	r3, [r7, #22]
 800acc6:	429a      	cmp	r2, r3
 800acc8:	d8d1      	bhi.n	800ac6e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800acca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800acce:	3301      	adds	r3, #1
 800acd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800acd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800acd8:	2b01      	cmp	r3, #1
 800acda:	d804      	bhi.n	800ace6 <USBH_ParseCfgDesc+0x13c>
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	885a      	ldrh	r2, [r3, #2]
 800ace0:	8afb      	ldrh	r3, [r7, #22]
 800ace2:	429a      	cmp	r2, r3
 800ace4:	d8a4      	bhi.n	800ac30 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800ace6:	bf00      	nop
 800ace8:	3728      	adds	r7, #40	; 0x28
 800acea:	46bd      	mov	sp, r7
 800acec:	bd80      	pop	{r7, pc}

0800acee <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800acee:	b480      	push	{r7}
 800acf0:	b083      	sub	sp, #12
 800acf2:	af00      	add	r7, sp, #0
 800acf4:	6078      	str	r0, [r7, #4]
 800acf6:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	781a      	ldrb	r2, [r3, #0]
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	785a      	ldrb	r2, [r3, #1]
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	789a      	ldrb	r2, [r3, #2]
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	78da      	ldrb	r2, [r3, #3]
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	791a      	ldrb	r2, [r3, #4]
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	795a      	ldrb	r2, [r3, #5]
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	799a      	ldrb	r2, [r3, #6]
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	79da      	ldrb	r2, [r3, #7]
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	7a1a      	ldrb	r2, [r3, #8]
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	721a      	strb	r2, [r3, #8]
}
 800ad40:	bf00      	nop
 800ad42:	370c      	adds	r7, #12
 800ad44:	46bd      	mov	sp, r7
 800ad46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4a:	4770      	bx	lr

0800ad4c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	b083      	sub	sp, #12
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
 800ad54:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	781a      	ldrb	r2, [r3, #0]
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	785a      	ldrb	r2, [r3, #1]
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	789a      	ldrb	r2, [r3, #2]
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	78da      	ldrb	r2, [r3, #3]
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	3304      	adds	r3, #4
 800ad7a:	781b      	ldrb	r3, [r3, #0]
 800ad7c:	b29a      	uxth	r2, r3
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	3305      	adds	r3, #5
 800ad82:	781b      	ldrb	r3, [r3, #0]
 800ad84:	b29b      	uxth	r3, r3
 800ad86:	021b      	lsls	r3, r3, #8
 800ad88:	b29b      	uxth	r3, r3
 800ad8a:	4313      	orrs	r3, r2
 800ad8c:	b29a      	uxth	r2, r3
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	799a      	ldrb	r2, [r3, #6]
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	719a      	strb	r2, [r3, #6]
}
 800ad9a:	bf00      	nop
 800ad9c:	370c      	adds	r7, #12
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada4:	4770      	bx	lr

0800ada6 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800ada6:	b480      	push	{r7}
 800ada8:	b087      	sub	sp, #28
 800adaa:	af00      	add	r7, sp, #0
 800adac:	60f8      	str	r0, [r7, #12]
 800adae:	60b9      	str	r1, [r7, #8]
 800adb0:	4613      	mov	r3, r2
 800adb2:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	3301      	adds	r3, #1
 800adb8:	781b      	ldrb	r3, [r3, #0]
 800adba:	2b03      	cmp	r3, #3
 800adbc:	d120      	bne.n	800ae00 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	781b      	ldrb	r3, [r3, #0]
 800adc2:	1e9a      	subs	r2, r3, #2
 800adc4:	88fb      	ldrh	r3, [r7, #6]
 800adc6:	4293      	cmp	r3, r2
 800adc8:	bf28      	it	cs
 800adca:	4613      	movcs	r3, r2
 800adcc:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	3302      	adds	r3, #2
 800add2:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800add4:	2300      	movs	r3, #0
 800add6:	82fb      	strh	r3, [r7, #22]
 800add8:	e00b      	b.n	800adf2 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800adda:	8afb      	ldrh	r3, [r7, #22]
 800addc:	68fa      	ldr	r2, [r7, #12]
 800adde:	4413      	add	r3, r2
 800ade0:	781a      	ldrb	r2, [r3, #0]
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	701a      	strb	r2, [r3, #0]
      pdest++;
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	3301      	adds	r3, #1
 800adea:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800adec:	8afb      	ldrh	r3, [r7, #22]
 800adee:	3302      	adds	r3, #2
 800adf0:	82fb      	strh	r3, [r7, #22]
 800adf2:	8afa      	ldrh	r2, [r7, #22]
 800adf4:	8abb      	ldrh	r3, [r7, #20]
 800adf6:	429a      	cmp	r2, r3
 800adf8:	d3ef      	bcc.n	800adda <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800adfa:	68bb      	ldr	r3, [r7, #8]
 800adfc:	2200      	movs	r2, #0
 800adfe:	701a      	strb	r2, [r3, #0]
  }
}
 800ae00:	bf00      	nop
 800ae02:	371c      	adds	r7, #28
 800ae04:	46bd      	mov	sp, r7
 800ae06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0a:	4770      	bx	lr

0800ae0c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b085      	sub	sp, #20
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
 800ae14:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	881a      	ldrh	r2, [r3, #0]
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	781b      	ldrb	r3, [r3, #0]
 800ae1e:	b29b      	uxth	r3, r3
 800ae20:	4413      	add	r3, r2
 800ae22:	b29a      	uxth	r2, r3
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	781b      	ldrb	r3, [r3, #0]
 800ae2c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	4413      	add	r3, r2
 800ae32:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ae34:	68fb      	ldr	r3, [r7, #12]
}
 800ae36:	4618      	mov	r0, r3
 800ae38:	3714      	adds	r7, #20
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae40:	4770      	bx	lr

0800ae42 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800ae42:	b580      	push	{r7, lr}
 800ae44:	b086      	sub	sp, #24
 800ae46:	af00      	add	r7, sp, #0
 800ae48:	60f8      	str	r0, [r7, #12]
 800ae4a:	60b9      	str	r1, [r7, #8]
 800ae4c:	4613      	mov	r3, r2
 800ae4e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800ae50:	2301      	movs	r3, #1
 800ae52:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	789b      	ldrb	r3, [r3, #2]
 800ae58:	2b01      	cmp	r3, #1
 800ae5a:	d002      	beq.n	800ae62 <USBH_CtlReq+0x20>
 800ae5c:	2b02      	cmp	r3, #2
 800ae5e:	d00f      	beq.n	800ae80 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800ae60:	e027      	b.n	800aeb2 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	68ba      	ldr	r2, [r7, #8]
 800ae66:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	88fa      	ldrh	r2, [r7, #6]
 800ae6c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	2201      	movs	r2, #1
 800ae72:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	2202      	movs	r2, #2
 800ae78:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	75fb      	strb	r3, [r7, #23]
      break;
 800ae7e:	e018      	b.n	800aeb2 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800ae80:	68f8      	ldr	r0, [r7, #12]
 800ae82:	f000 f81b 	bl	800aebc <USBH_HandleControl>
 800ae86:	4603      	mov	r3, r0
 800ae88:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800ae8a:	7dfb      	ldrb	r3, [r7, #23]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d002      	beq.n	800ae96 <USBH_CtlReq+0x54>
 800ae90:	7dfb      	ldrb	r3, [r7, #23]
 800ae92:	2b03      	cmp	r3, #3
 800ae94:	d106      	bne.n	800aea4 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	2201      	movs	r2, #1
 800ae9a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	2200      	movs	r2, #0
 800aea0:	761a      	strb	r2, [r3, #24]
      break;
 800aea2:	e005      	b.n	800aeb0 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800aea4:	7dfb      	ldrb	r3, [r7, #23]
 800aea6:	2b02      	cmp	r3, #2
 800aea8:	d102      	bne.n	800aeb0 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	2201      	movs	r2, #1
 800aeae:	709a      	strb	r2, [r3, #2]
      break;
 800aeb0:	bf00      	nop
  }
  return status;
 800aeb2:	7dfb      	ldrb	r3, [r7, #23]
}
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	3718      	adds	r7, #24
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bd80      	pop	{r7, pc}

0800aebc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b086      	sub	sp, #24
 800aec0:	af02      	add	r7, sp, #8
 800aec2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800aec4:	2301      	movs	r3, #1
 800aec6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800aec8:	2300      	movs	r3, #0
 800aeca:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	7e1b      	ldrb	r3, [r3, #24]
 800aed0:	3b01      	subs	r3, #1
 800aed2:	2b0a      	cmp	r3, #10
 800aed4:	f200 8156 	bhi.w	800b184 <USBH_HandleControl+0x2c8>
 800aed8:	a201      	add	r2, pc, #4	; (adr r2, 800aee0 <USBH_HandleControl+0x24>)
 800aeda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aede:	bf00      	nop
 800aee0:	0800af0d 	.word	0x0800af0d
 800aee4:	0800af27 	.word	0x0800af27
 800aee8:	0800af91 	.word	0x0800af91
 800aeec:	0800afb7 	.word	0x0800afb7
 800aef0:	0800afef 	.word	0x0800afef
 800aef4:	0800b019 	.word	0x0800b019
 800aef8:	0800b06b 	.word	0x0800b06b
 800aefc:	0800b08d 	.word	0x0800b08d
 800af00:	0800b0c9 	.word	0x0800b0c9
 800af04:	0800b0ef 	.word	0x0800b0ef
 800af08:	0800b12d 	.word	0x0800b12d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f103 0110 	add.w	r1, r3, #16
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	795b      	ldrb	r3, [r3, #5]
 800af16:	461a      	mov	r2, r3
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f000 f943 	bl	800b1a4 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	2202      	movs	r2, #2
 800af22:	761a      	strb	r2, [r3, #24]
      break;
 800af24:	e139      	b.n	800b19a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	795b      	ldrb	r3, [r3, #5]
 800af2a:	4619      	mov	r1, r3
 800af2c:	6878      	ldr	r0, [r7, #4]
 800af2e:	f000 fd21 	bl	800b974 <USBH_LL_GetURBState>
 800af32:	4603      	mov	r3, r0
 800af34:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800af36:	7bbb      	ldrb	r3, [r7, #14]
 800af38:	2b01      	cmp	r3, #1
 800af3a:	d11e      	bne.n	800af7a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	7c1b      	ldrb	r3, [r3, #16]
 800af40:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800af44:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	8adb      	ldrh	r3, [r3, #22]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d00a      	beq.n	800af64 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800af4e:	7b7b      	ldrb	r3, [r7, #13]
 800af50:	2b80      	cmp	r3, #128	; 0x80
 800af52:	d103      	bne.n	800af5c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2203      	movs	r2, #3
 800af58:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800af5a:	e115      	b.n	800b188 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2205      	movs	r2, #5
 800af60:	761a      	strb	r2, [r3, #24]
      break;
 800af62:	e111      	b.n	800b188 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800af64:	7b7b      	ldrb	r3, [r7, #13]
 800af66:	2b80      	cmp	r3, #128	; 0x80
 800af68:	d103      	bne.n	800af72 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2209      	movs	r2, #9
 800af6e:	761a      	strb	r2, [r3, #24]
      break;
 800af70:	e10a      	b.n	800b188 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2207      	movs	r2, #7
 800af76:	761a      	strb	r2, [r3, #24]
      break;
 800af78:	e106      	b.n	800b188 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800af7a:	7bbb      	ldrb	r3, [r7, #14]
 800af7c:	2b04      	cmp	r3, #4
 800af7e:	d003      	beq.n	800af88 <USBH_HandleControl+0xcc>
 800af80:	7bbb      	ldrb	r3, [r7, #14]
 800af82:	2b02      	cmp	r3, #2
 800af84:	f040 8100 	bne.w	800b188 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	220b      	movs	r2, #11
 800af8c:	761a      	strb	r2, [r3, #24]
      break;
 800af8e:	e0fb      	b.n	800b188 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800af96:	b29a      	uxth	r2, r3
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	6899      	ldr	r1, [r3, #8]
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	899a      	ldrh	r2, [r3, #12]
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	791b      	ldrb	r3, [r3, #4]
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f000 f93a 	bl	800b222 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	2204      	movs	r2, #4
 800afb2:	761a      	strb	r2, [r3, #24]
      break;
 800afb4:	e0f1      	b.n	800b19a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	791b      	ldrb	r3, [r3, #4]
 800afba:	4619      	mov	r1, r3
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f000 fcd9 	bl	800b974 <USBH_LL_GetURBState>
 800afc2:	4603      	mov	r3, r0
 800afc4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800afc6:	7bbb      	ldrb	r3, [r7, #14]
 800afc8:	2b01      	cmp	r3, #1
 800afca:	d102      	bne.n	800afd2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2209      	movs	r2, #9
 800afd0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800afd2:	7bbb      	ldrb	r3, [r7, #14]
 800afd4:	2b05      	cmp	r3, #5
 800afd6:	d102      	bne.n	800afde <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800afd8:	2303      	movs	r3, #3
 800afda:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800afdc:	e0d6      	b.n	800b18c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800afde:	7bbb      	ldrb	r3, [r7, #14]
 800afe0:	2b04      	cmp	r3, #4
 800afe2:	f040 80d3 	bne.w	800b18c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	220b      	movs	r2, #11
 800afea:	761a      	strb	r2, [r3, #24]
      break;
 800afec:	e0ce      	b.n	800b18c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6899      	ldr	r1, [r3, #8]
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	899a      	ldrh	r2, [r3, #12]
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	795b      	ldrb	r3, [r3, #5]
 800affa:	2001      	movs	r0, #1
 800affc:	9000      	str	r0, [sp, #0]
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f000 f8ea 	bl	800b1d8 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b00a:	b29a      	uxth	r2, r3
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2206      	movs	r2, #6
 800b014:	761a      	strb	r2, [r3, #24]
      break;
 800b016:	e0c0      	b.n	800b19a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	795b      	ldrb	r3, [r3, #5]
 800b01c:	4619      	mov	r1, r3
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f000 fca8 	bl	800b974 <USBH_LL_GetURBState>
 800b024:	4603      	mov	r3, r0
 800b026:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b028:	7bbb      	ldrb	r3, [r7, #14]
 800b02a:	2b01      	cmp	r3, #1
 800b02c:	d103      	bne.n	800b036 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2207      	movs	r2, #7
 800b032:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b034:	e0ac      	b.n	800b190 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800b036:	7bbb      	ldrb	r3, [r7, #14]
 800b038:	2b05      	cmp	r3, #5
 800b03a:	d105      	bne.n	800b048 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	220c      	movs	r2, #12
 800b040:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b042:	2303      	movs	r3, #3
 800b044:	73fb      	strb	r3, [r7, #15]
      break;
 800b046:	e0a3      	b.n	800b190 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b048:	7bbb      	ldrb	r3, [r7, #14]
 800b04a:	2b02      	cmp	r3, #2
 800b04c:	d103      	bne.n	800b056 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2205      	movs	r2, #5
 800b052:	761a      	strb	r2, [r3, #24]
      break;
 800b054:	e09c      	b.n	800b190 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800b056:	7bbb      	ldrb	r3, [r7, #14]
 800b058:	2b04      	cmp	r3, #4
 800b05a:	f040 8099 	bne.w	800b190 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	220b      	movs	r2, #11
 800b062:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b064:	2302      	movs	r3, #2
 800b066:	73fb      	strb	r3, [r7, #15]
      break;
 800b068:	e092      	b.n	800b190 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	791b      	ldrb	r3, [r3, #4]
 800b06e:	2200      	movs	r2, #0
 800b070:	2100      	movs	r1, #0
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f000 f8d5 	bl	800b222 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b07e:	b29a      	uxth	r2, r3
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2208      	movs	r2, #8
 800b088:	761a      	strb	r2, [r3, #24]

      break;
 800b08a:	e086      	b.n	800b19a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	791b      	ldrb	r3, [r3, #4]
 800b090:	4619      	mov	r1, r3
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f000 fc6e 	bl	800b974 <USBH_LL_GetURBState>
 800b098:	4603      	mov	r3, r0
 800b09a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b09c:	7bbb      	ldrb	r3, [r7, #14]
 800b09e:	2b01      	cmp	r3, #1
 800b0a0:	d105      	bne.n	800b0ae <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	220d      	movs	r2, #13
 800b0a6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b0ac:	e072      	b.n	800b194 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800b0ae:	7bbb      	ldrb	r3, [r7, #14]
 800b0b0:	2b04      	cmp	r3, #4
 800b0b2:	d103      	bne.n	800b0bc <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	220b      	movs	r2, #11
 800b0b8:	761a      	strb	r2, [r3, #24]
      break;
 800b0ba:	e06b      	b.n	800b194 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800b0bc:	7bbb      	ldrb	r3, [r7, #14]
 800b0be:	2b05      	cmp	r3, #5
 800b0c0:	d168      	bne.n	800b194 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800b0c2:	2303      	movs	r3, #3
 800b0c4:	73fb      	strb	r3, [r7, #15]
      break;
 800b0c6:	e065      	b.n	800b194 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	795b      	ldrb	r3, [r3, #5]
 800b0cc:	2201      	movs	r2, #1
 800b0ce:	9200      	str	r2, [sp, #0]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	2100      	movs	r1, #0
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f000 f87f 	bl	800b1d8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b0e0:	b29a      	uxth	r2, r3
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	220a      	movs	r2, #10
 800b0ea:	761a      	strb	r2, [r3, #24]
      break;
 800b0ec:	e055      	b.n	800b19a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	795b      	ldrb	r3, [r3, #5]
 800b0f2:	4619      	mov	r1, r3
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	f000 fc3d 	bl	800b974 <USBH_LL_GetURBState>
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b0fe:	7bbb      	ldrb	r3, [r7, #14]
 800b100:	2b01      	cmp	r3, #1
 800b102:	d105      	bne.n	800b110 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800b104:	2300      	movs	r3, #0
 800b106:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	220d      	movs	r2, #13
 800b10c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b10e:	e043      	b.n	800b198 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b110:	7bbb      	ldrb	r3, [r7, #14]
 800b112:	2b02      	cmp	r3, #2
 800b114:	d103      	bne.n	800b11e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2209      	movs	r2, #9
 800b11a:	761a      	strb	r2, [r3, #24]
      break;
 800b11c:	e03c      	b.n	800b198 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800b11e:	7bbb      	ldrb	r3, [r7, #14]
 800b120:	2b04      	cmp	r3, #4
 800b122:	d139      	bne.n	800b198 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	220b      	movs	r2, #11
 800b128:	761a      	strb	r2, [r3, #24]
      break;
 800b12a:	e035      	b.n	800b198 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	7e5b      	ldrb	r3, [r3, #25]
 800b130:	3301      	adds	r3, #1
 800b132:	b2da      	uxtb	r2, r3
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	765a      	strb	r2, [r3, #25]
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	7e5b      	ldrb	r3, [r3, #25]
 800b13c:	2b02      	cmp	r3, #2
 800b13e:	d806      	bhi.n	800b14e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2201      	movs	r2, #1
 800b144:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2201      	movs	r2, #1
 800b14a:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b14c:	e025      	b.n	800b19a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b154:	2106      	movs	r1, #6
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2200      	movs	r2, #0
 800b15e:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	795b      	ldrb	r3, [r3, #5]
 800b164:	4619      	mov	r1, r3
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f000 f90c 	bl	800b384 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	791b      	ldrb	r3, [r3, #4]
 800b170:	4619      	mov	r1, r3
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	f000 f906 	bl	800b384 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2200      	movs	r2, #0
 800b17c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b17e:	2302      	movs	r3, #2
 800b180:	73fb      	strb	r3, [r7, #15]
      break;
 800b182:	e00a      	b.n	800b19a <USBH_HandleControl+0x2de>

    default:
      break;
 800b184:	bf00      	nop
 800b186:	e008      	b.n	800b19a <USBH_HandleControl+0x2de>
      break;
 800b188:	bf00      	nop
 800b18a:	e006      	b.n	800b19a <USBH_HandleControl+0x2de>
      break;
 800b18c:	bf00      	nop
 800b18e:	e004      	b.n	800b19a <USBH_HandleControl+0x2de>
      break;
 800b190:	bf00      	nop
 800b192:	e002      	b.n	800b19a <USBH_HandleControl+0x2de>
      break;
 800b194:	bf00      	nop
 800b196:	e000      	b.n	800b19a <USBH_HandleControl+0x2de>
      break;
 800b198:	bf00      	nop
  }

  return status;
 800b19a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b19c:	4618      	mov	r0, r3
 800b19e:	3710      	adds	r7, #16
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bd80      	pop	{r7, pc}

0800b1a4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b088      	sub	sp, #32
 800b1a8:	af04      	add	r7, sp, #16
 800b1aa:	60f8      	str	r0, [r7, #12]
 800b1ac:	60b9      	str	r1, [r7, #8]
 800b1ae:	4613      	mov	r3, r2
 800b1b0:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b1b2:	79f9      	ldrb	r1, [r7, #7]
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	9303      	str	r3, [sp, #12]
 800b1b8:	2308      	movs	r3, #8
 800b1ba:	9302      	str	r3, [sp, #8]
 800b1bc:	68bb      	ldr	r3, [r7, #8]
 800b1be:	9301      	str	r3, [sp, #4]
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	9300      	str	r3, [sp, #0]
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	68f8      	ldr	r0, [r7, #12]
 800b1ca:	f000 fba2 	bl	800b912 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800b1ce:	2300      	movs	r3, #0
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	3710      	adds	r7, #16
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}

0800b1d8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b088      	sub	sp, #32
 800b1dc:	af04      	add	r7, sp, #16
 800b1de:	60f8      	str	r0, [r7, #12]
 800b1e0:	60b9      	str	r1, [r7, #8]
 800b1e2:	4611      	mov	r1, r2
 800b1e4:	461a      	mov	r2, r3
 800b1e6:	460b      	mov	r3, r1
 800b1e8:	80fb      	strh	r3, [r7, #6]
 800b1ea:	4613      	mov	r3, r2
 800b1ec:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d001      	beq.n	800b1fc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b1fc:	7979      	ldrb	r1, [r7, #5]
 800b1fe:	7e3b      	ldrb	r3, [r7, #24]
 800b200:	9303      	str	r3, [sp, #12]
 800b202:	88fb      	ldrh	r3, [r7, #6]
 800b204:	9302      	str	r3, [sp, #8]
 800b206:	68bb      	ldr	r3, [r7, #8]
 800b208:	9301      	str	r3, [sp, #4]
 800b20a:	2301      	movs	r3, #1
 800b20c:	9300      	str	r3, [sp, #0]
 800b20e:	2300      	movs	r3, #0
 800b210:	2200      	movs	r2, #0
 800b212:	68f8      	ldr	r0, [r7, #12]
 800b214:	f000 fb7d 	bl	800b912 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b218:	2300      	movs	r3, #0
}
 800b21a:	4618      	mov	r0, r3
 800b21c:	3710      	adds	r7, #16
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}

0800b222 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b222:	b580      	push	{r7, lr}
 800b224:	b088      	sub	sp, #32
 800b226:	af04      	add	r7, sp, #16
 800b228:	60f8      	str	r0, [r7, #12]
 800b22a:	60b9      	str	r1, [r7, #8]
 800b22c:	4611      	mov	r1, r2
 800b22e:	461a      	mov	r2, r3
 800b230:	460b      	mov	r3, r1
 800b232:	80fb      	strh	r3, [r7, #6]
 800b234:	4613      	mov	r3, r2
 800b236:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b238:	7979      	ldrb	r1, [r7, #5]
 800b23a:	2300      	movs	r3, #0
 800b23c:	9303      	str	r3, [sp, #12]
 800b23e:	88fb      	ldrh	r3, [r7, #6]
 800b240:	9302      	str	r3, [sp, #8]
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	9301      	str	r3, [sp, #4]
 800b246:	2301      	movs	r3, #1
 800b248:	9300      	str	r3, [sp, #0]
 800b24a:	2300      	movs	r3, #0
 800b24c:	2201      	movs	r2, #1
 800b24e:	68f8      	ldr	r0, [r7, #12]
 800b250:	f000 fb5f 	bl	800b912 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b254:	2300      	movs	r3, #0

}
 800b256:	4618      	mov	r0, r3
 800b258:	3710      	adds	r7, #16
 800b25a:	46bd      	mov	sp, r7
 800b25c:	bd80      	pop	{r7, pc}

0800b25e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b25e:	b580      	push	{r7, lr}
 800b260:	b088      	sub	sp, #32
 800b262:	af04      	add	r7, sp, #16
 800b264:	60f8      	str	r0, [r7, #12]
 800b266:	60b9      	str	r1, [r7, #8]
 800b268:	4611      	mov	r1, r2
 800b26a:	461a      	mov	r2, r3
 800b26c:	460b      	mov	r3, r1
 800b26e:	80fb      	strh	r3, [r7, #6]
 800b270:	4613      	mov	r3, r2
 800b272:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d001      	beq.n	800b282 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b27e:	2300      	movs	r3, #0
 800b280:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b282:	7979      	ldrb	r1, [r7, #5]
 800b284:	7e3b      	ldrb	r3, [r7, #24]
 800b286:	9303      	str	r3, [sp, #12]
 800b288:	88fb      	ldrh	r3, [r7, #6]
 800b28a:	9302      	str	r3, [sp, #8]
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	9301      	str	r3, [sp, #4]
 800b290:	2301      	movs	r3, #1
 800b292:	9300      	str	r3, [sp, #0]
 800b294:	2302      	movs	r3, #2
 800b296:	2200      	movs	r2, #0
 800b298:	68f8      	ldr	r0, [r7, #12]
 800b29a:	f000 fb3a 	bl	800b912 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b29e:	2300      	movs	r3, #0
}
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	3710      	adds	r7, #16
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	bd80      	pop	{r7, pc}

0800b2a8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b088      	sub	sp, #32
 800b2ac:	af04      	add	r7, sp, #16
 800b2ae:	60f8      	str	r0, [r7, #12]
 800b2b0:	60b9      	str	r1, [r7, #8]
 800b2b2:	4611      	mov	r1, r2
 800b2b4:	461a      	mov	r2, r3
 800b2b6:	460b      	mov	r3, r1
 800b2b8:	80fb      	strh	r3, [r7, #6]
 800b2ba:	4613      	mov	r3, r2
 800b2bc:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b2be:	7979      	ldrb	r1, [r7, #5]
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	9303      	str	r3, [sp, #12]
 800b2c4:	88fb      	ldrh	r3, [r7, #6]
 800b2c6:	9302      	str	r3, [sp, #8]
 800b2c8:	68bb      	ldr	r3, [r7, #8]
 800b2ca:	9301      	str	r3, [sp, #4]
 800b2cc:	2301      	movs	r3, #1
 800b2ce:	9300      	str	r3, [sp, #0]
 800b2d0:	2302      	movs	r3, #2
 800b2d2:	2201      	movs	r2, #1
 800b2d4:	68f8      	ldr	r0, [r7, #12]
 800b2d6:	f000 fb1c 	bl	800b912 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b2da:	2300      	movs	r3, #0
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3710      	adds	r7, #16
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}

0800b2e4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b086      	sub	sp, #24
 800b2e8:	af04      	add	r7, sp, #16
 800b2ea:	6078      	str	r0, [r7, #4]
 800b2ec:	4608      	mov	r0, r1
 800b2ee:	4611      	mov	r1, r2
 800b2f0:	461a      	mov	r2, r3
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	70fb      	strb	r3, [r7, #3]
 800b2f6:	460b      	mov	r3, r1
 800b2f8:	70bb      	strb	r3, [r7, #2]
 800b2fa:	4613      	mov	r3, r2
 800b2fc:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b2fe:	7878      	ldrb	r0, [r7, #1]
 800b300:	78ba      	ldrb	r2, [r7, #2]
 800b302:	78f9      	ldrb	r1, [r7, #3]
 800b304:	8b3b      	ldrh	r3, [r7, #24]
 800b306:	9302      	str	r3, [sp, #8]
 800b308:	7d3b      	ldrb	r3, [r7, #20]
 800b30a:	9301      	str	r3, [sp, #4]
 800b30c:	7c3b      	ldrb	r3, [r7, #16]
 800b30e:	9300      	str	r3, [sp, #0]
 800b310:	4603      	mov	r3, r0
 800b312:	6878      	ldr	r0, [r7, #4]
 800b314:	f000 faaf 	bl	800b876 <USBH_LL_OpenPipe>

  return USBH_OK;
 800b318:	2300      	movs	r3, #0
}
 800b31a:	4618      	mov	r0, r3
 800b31c:	3708      	adds	r7, #8
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}

0800b322 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b322:	b580      	push	{r7, lr}
 800b324:	b082      	sub	sp, #8
 800b326:	af00      	add	r7, sp, #0
 800b328:	6078      	str	r0, [r7, #4]
 800b32a:	460b      	mov	r3, r1
 800b32c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800b32e:	78fb      	ldrb	r3, [r7, #3]
 800b330:	4619      	mov	r1, r3
 800b332:	6878      	ldr	r0, [r7, #4]
 800b334:	f000 face 	bl	800b8d4 <USBH_LL_ClosePipe>

  return USBH_OK;
 800b338:	2300      	movs	r3, #0
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	3708      	adds	r7, #8
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}

0800b342 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b342:	b580      	push	{r7, lr}
 800b344:	b084      	sub	sp, #16
 800b346:	af00      	add	r7, sp, #0
 800b348:	6078      	str	r0, [r7, #4]
 800b34a:	460b      	mov	r3, r1
 800b34c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	f000 f836 	bl	800b3c0 <USBH_GetFreePipe>
 800b354:	4603      	mov	r3, r0
 800b356:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b358:	89fb      	ldrh	r3, [r7, #14]
 800b35a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b35e:	4293      	cmp	r3, r2
 800b360:	d00a      	beq.n	800b378 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800b362:	78fa      	ldrb	r2, [r7, #3]
 800b364:	89fb      	ldrh	r3, [r7, #14]
 800b366:	f003 030f 	and.w	r3, r3, #15
 800b36a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b36e:	6879      	ldr	r1, [r7, #4]
 800b370:	33e0      	adds	r3, #224	; 0xe0
 800b372:	009b      	lsls	r3, r3, #2
 800b374:	440b      	add	r3, r1
 800b376:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b378:	89fb      	ldrh	r3, [r7, #14]
 800b37a:	b2db      	uxtb	r3, r3
}
 800b37c:	4618      	mov	r0, r3
 800b37e:	3710      	adds	r7, #16
 800b380:	46bd      	mov	sp, r7
 800b382:	bd80      	pop	{r7, pc}

0800b384 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b384:	b480      	push	{r7}
 800b386:	b083      	sub	sp, #12
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
 800b38c:	460b      	mov	r3, r1
 800b38e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800b390:	78fb      	ldrb	r3, [r7, #3]
 800b392:	2b0a      	cmp	r3, #10
 800b394:	d80d      	bhi.n	800b3b2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b396:	78fb      	ldrb	r3, [r7, #3]
 800b398:	687a      	ldr	r2, [r7, #4]
 800b39a:	33e0      	adds	r3, #224	; 0xe0
 800b39c:	009b      	lsls	r3, r3, #2
 800b39e:	4413      	add	r3, r2
 800b3a0:	685a      	ldr	r2, [r3, #4]
 800b3a2:	78fb      	ldrb	r3, [r7, #3]
 800b3a4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b3a8:	6879      	ldr	r1, [r7, #4]
 800b3aa:	33e0      	adds	r3, #224	; 0xe0
 800b3ac:	009b      	lsls	r3, r3, #2
 800b3ae:	440b      	add	r3, r1
 800b3b0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b3b2:	2300      	movs	r3, #0
}
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	370c      	adds	r7, #12
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3be:	4770      	bx	lr

0800b3c0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	b085      	sub	sp, #20
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	73fb      	strb	r3, [r7, #15]
 800b3d0:	e00f      	b.n	800b3f2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b3d2:	7bfb      	ldrb	r3, [r7, #15]
 800b3d4:	687a      	ldr	r2, [r7, #4]
 800b3d6:	33e0      	adds	r3, #224	; 0xe0
 800b3d8:	009b      	lsls	r3, r3, #2
 800b3da:	4413      	add	r3, r2
 800b3dc:	685b      	ldr	r3, [r3, #4]
 800b3de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d102      	bne.n	800b3ec <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b3e6:	7bfb      	ldrb	r3, [r7, #15]
 800b3e8:	b29b      	uxth	r3, r3
 800b3ea:	e007      	b.n	800b3fc <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800b3ec:	7bfb      	ldrb	r3, [r7, #15]
 800b3ee:	3301      	adds	r3, #1
 800b3f0:	73fb      	strb	r3, [r7, #15]
 800b3f2:	7bfb      	ldrb	r3, [r7, #15]
 800b3f4:	2b0a      	cmp	r3, #10
 800b3f6:	d9ec      	bls.n	800b3d2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b3f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	3714      	adds	r7, #20
 800b400:	46bd      	mov	sp, r7
 800b402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b406:	4770      	bx	lr

0800b408 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b408:	b480      	push	{r7}
 800b40a:	b087      	sub	sp, #28
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	60f8      	str	r0, [r7, #12]
 800b410:	60b9      	str	r1, [r7, #8]
 800b412:	4613      	mov	r3, r2
 800b414:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b416:	2301      	movs	r3, #1
 800b418:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b41a:	2300      	movs	r3, #0
 800b41c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b41e:	4b1f      	ldr	r3, [pc, #124]	; (800b49c <FATFS_LinkDriverEx+0x94>)
 800b420:	7a5b      	ldrb	r3, [r3, #9]
 800b422:	b2db      	uxtb	r3, r3
 800b424:	2b00      	cmp	r3, #0
 800b426:	d131      	bne.n	800b48c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b428:	4b1c      	ldr	r3, [pc, #112]	; (800b49c <FATFS_LinkDriverEx+0x94>)
 800b42a:	7a5b      	ldrb	r3, [r3, #9]
 800b42c:	b2db      	uxtb	r3, r3
 800b42e:	461a      	mov	r2, r3
 800b430:	4b1a      	ldr	r3, [pc, #104]	; (800b49c <FATFS_LinkDriverEx+0x94>)
 800b432:	2100      	movs	r1, #0
 800b434:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b436:	4b19      	ldr	r3, [pc, #100]	; (800b49c <FATFS_LinkDriverEx+0x94>)
 800b438:	7a5b      	ldrb	r3, [r3, #9]
 800b43a:	b2db      	uxtb	r3, r3
 800b43c:	4a17      	ldr	r2, [pc, #92]	; (800b49c <FATFS_LinkDriverEx+0x94>)
 800b43e:	009b      	lsls	r3, r3, #2
 800b440:	4413      	add	r3, r2
 800b442:	68fa      	ldr	r2, [r7, #12]
 800b444:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b446:	4b15      	ldr	r3, [pc, #84]	; (800b49c <FATFS_LinkDriverEx+0x94>)
 800b448:	7a5b      	ldrb	r3, [r3, #9]
 800b44a:	b2db      	uxtb	r3, r3
 800b44c:	461a      	mov	r2, r3
 800b44e:	4b13      	ldr	r3, [pc, #76]	; (800b49c <FATFS_LinkDriverEx+0x94>)
 800b450:	4413      	add	r3, r2
 800b452:	79fa      	ldrb	r2, [r7, #7]
 800b454:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b456:	4b11      	ldr	r3, [pc, #68]	; (800b49c <FATFS_LinkDriverEx+0x94>)
 800b458:	7a5b      	ldrb	r3, [r3, #9]
 800b45a:	b2db      	uxtb	r3, r3
 800b45c:	1c5a      	adds	r2, r3, #1
 800b45e:	b2d1      	uxtb	r1, r2
 800b460:	4a0e      	ldr	r2, [pc, #56]	; (800b49c <FATFS_LinkDriverEx+0x94>)
 800b462:	7251      	strb	r1, [r2, #9]
 800b464:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b466:	7dbb      	ldrb	r3, [r7, #22]
 800b468:	3330      	adds	r3, #48	; 0x30
 800b46a:	b2da      	uxtb	r2, r3
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	3301      	adds	r3, #1
 800b474:	223a      	movs	r2, #58	; 0x3a
 800b476:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b478:	68bb      	ldr	r3, [r7, #8]
 800b47a:	3302      	adds	r3, #2
 800b47c:	222f      	movs	r2, #47	; 0x2f
 800b47e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b480:	68bb      	ldr	r3, [r7, #8]
 800b482:	3303      	adds	r3, #3
 800b484:	2200      	movs	r2, #0
 800b486:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b488:	2300      	movs	r3, #0
 800b48a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b48c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b48e:	4618      	mov	r0, r3
 800b490:	371c      	adds	r7, #28
 800b492:	46bd      	mov	sp, r7
 800b494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b498:	4770      	bx	lr
 800b49a:	bf00      	nop
 800b49c:	20001e48 	.word	0x20001e48

0800b4a0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b082      	sub	sp, #8
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
 800b4a8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	6839      	ldr	r1, [r7, #0]
 800b4ae:	6878      	ldr	r0, [r7, #4]
 800b4b0:	f7ff ffaa 	bl	800b408 <FATFS_LinkDriverEx>
 800b4b4:	4603      	mov	r3, r0
}
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	3708      	adds	r7, #8
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bd80      	pop	{r7, pc}
	...

0800b4c0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b4c4:	2201      	movs	r2, #1
 800b4c6:	490e      	ldr	r1, [pc, #56]	; (800b500 <MX_USB_HOST_Init+0x40>)
 800b4c8:	480e      	ldr	r0, [pc, #56]	; (800b504 <MX_USB_HOST_Init+0x44>)
 800b4ca:	f7fe fc45 	bl	8009d58 <USBH_Init>
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d001      	beq.n	800b4d8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b4d4:	f7f5 fcf0 	bl	8000eb8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800b4d8:	490b      	ldr	r1, [pc, #44]	; (800b508 <MX_USB_HOST_Init+0x48>)
 800b4da:	480a      	ldr	r0, [pc, #40]	; (800b504 <MX_USB_HOST_Init+0x44>)
 800b4dc:	f7fe fcca 	bl	8009e74 <USBH_RegisterClass>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d001      	beq.n	800b4ea <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b4e6:	f7f5 fce7 	bl	8000eb8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b4ea:	4806      	ldr	r0, [pc, #24]	; (800b504 <MX_USB_HOST_Init+0x44>)
 800b4ec:	f7fe fd4e 	bl	8009f8c <USBH_Start>
 800b4f0:	4603      	mov	r3, r0
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d001      	beq.n	800b4fa <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b4f6:	f7f5 fcdf 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b4fa:	bf00      	nop
 800b4fc:	bd80      	pop	{r7, pc}
 800b4fe:	bf00      	nop
 800b500:	0800b521 	.word	0x0800b521
 800b504:	20001e54 	.word	0x20001e54
 800b508:	20000210 	.word	0x20000210

0800b50c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800b510:	4802      	ldr	r0, [pc, #8]	; (800b51c <MX_USB_HOST_Process+0x10>)
 800b512:	f7fe fd4b 	bl	8009fac <USBH_Process>
}
 800b516:	bf00      	nop
 800b518:	bd80      	pop	{r7, pc}
 800b51a:	bf00      	nop
 800b51c:	20001e54 	.word	0x20001e54

0800b520 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b520:	b480      	push	{r7}
 800b522:	b083      	sub	sp, #12
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
 800b528:	460b      	mov	r3, r1
 800b52a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b52c:	78fb      	ldrb	r3, [r7, #3]
 800b52e:	3b01      	subs	r3, #1
 800b530:	2b04      	cmp	r3, #4
 800b532:	d819      	bhi.n	800b568 <USBH_UserProcess+0x48>
 800b534:	a201      	add	r2, pc, #4	; (adr r2, 800b53c <USBH_UserProcess+0x1c>)
 800b536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b53a:	bf00      	nop
 800b53c:	0800b569 	.word	0x0800b569
 800b540:	0800b559 	.word	0x0800b559
 800b544:	0800b569 	.word	0x0800b569
 800b548:	0800b561 	.word	0x0800b561
 800b54c:	0800b551 	.word	0x0800b551
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b550:	4b09      	ldr	r3, [pc, #36]	; (800b578 <USBH_UserProcess+0x58>)
 800b552:	2203      	movs	r2, #3
 800b554:	701a      	strb	r2, [r3, #0]
  break;
 800b556:	e008      	b.n	800b56a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b558:	4b07      	ldr	r3, [pc, #28]	; (800b578 <USBH_UserProcess+0x58>)
 800b55a:	2202      	movs	r2, #2
 800b55c:	701a      	strb	r2, [r3, #0]
  break;
 800b55e:	e004      	b.n	800b56a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b560:	4b05      	ldr	r3, [pc, #20]	; (800b578 <USBH_UserProcess+0x58>)
 800b562:	2201      	movs	r2, #1
 800b564:	701a      	strb	r2, [r3, #0]
  break;
 800b566:	e000      	b.n	800b56a <USBH_UserProcess+0x4a>

  default:
  break;
 800b568:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b56a:	bf00      	nop
 800b56c:	370c      	adds	r7, #12
 800b56e:	46bd      	mov	sp, r7
 800b570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b574:	4770      	bx	lr
 800b576:	bf00      	nop
 800b578:	2000222c 	.word	0x2000222c

0800b57c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b08a      	sub	sp, #40	; 0x28
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b584:	f107 0314 	add.w	r3, r7, #20
 800b588:	2200      	movs	r2, #0
 800b58a:	601a      	str	r2, [r3, #0]
 800b58c:	605a      	str	r2, [r3, #4]
 800b58e:	609a      	str	r2, [r3, #8]
 800b590:	60da      	str	r2, [r3, #12]
 800b592:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b59c:	d147      	bne.n	800b62e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b59e:	2300      	movs	r3, #0
 800b5a0:	613b      	str	r3, [r7, #16]
 800b5a2:	4b25      	ldr	r3, [pc, #148]	; (800b638 <HAL_HCD_MspInit+0xbc>)
 800b5a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5a6:	4a24      	ldr	r2, [pc, #144]	; (800b638 <HAL_HCD_MspInit+0xbc>)
 800b5a8:	f043 0301 	orr.w	r3, r3, #1
 800b5ac:	6313      	str	r3, [r2, #48]	; 0x30
 800b5ae:	4b22      	ldr	r3, [pc, #136]	; (800b638 <HAL_HCD_MspInit+0xbc>)
 800b5b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5b2:	f003 0301 	and.w	r3, r3, #1
 800b5b6:	613b      	str	r3, [r7, #16]
 800b5b8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800b5ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b5be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b5c8:	f107 0314 	add.w	r3, r7, #20
 800b5cc:	4619      	mov	r1, r3
 800b5ce:	481b      	ldr	r0, [pc, #108]	; (800b63c <HAL_HCD_MspInit+0xc0>)
 800b5d0:	f7f7 fbd4 	bl	8002d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b5d4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b5d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b5da:	2302      	movs	r3, #2
 800b5dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b5de:	2300      	movs	r3, #0
 800b5e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b5e6:	230a      	movs	r3, #10
 800b5e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b5ea:	f107 0314 	add.w	r3, r7, #20
 800b5ee:	4619      	mov	r1, r3
 800b5f0:	4812      	ldr	r0, [pc, #72]	; (800b63c <HAL_HCD_MspInit+0xc0>)
 800b5f2:	f7f7 fbc3 	bl	8002d7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b5f6:	4b10      	ldr	r3, [pc, #64]	; (800b638 <HAL_HCD_MspInit+0xbc>)
 800b5f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5fa:	4a0f      	ldr	r2, [pc, #60]	; (800b638 <HAL_HCD_MspInit+0xbc>)
 800b5fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b600:	6353      	str	r3, [r2, #52]	; 0x34
 800b602:	2300      	movs	r3, #0
 800b604:	60fb      	str	r3, [r7, #12]
 800b606:	4b0c      	ldr	r3, [pc, #48]	; (800b638 <HAL_HCD_MspInit+0xbc>)
 800b608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b60a:	4a0b      	ldr	r2, [pc, #44]	; (800b638 <HAL_HCD_MspInit+0xbc>)
 800b60c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b610:	6453      	str	r3, [r2, #68]	; 0x44
 800b612:	4b09      	ldr	r3, [pc, #36]	; (800b638 <HAL_HCD_MspInit+0xbc>)
 800b614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b616:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b61a:	60fb      	str	r3, [r7, #12]
 800b61c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b61e:	2200      	movs	r2, #0
 800b620:	2100      	movs	r1, #0
 800b622:	2043      	movs	r0, #67	; 0x43
 800b624:	f7f7 f803 	bl	800262e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b628:	2043      	movs	r0, #67	; 0x43
 800b62a:	f7f7 f81c 	bl	8002666 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b62e:	bf00      	nop
 800b630:	3728      	adds	r7, #40	; 0x28
 800b632:	46bd      	mov	sp, r7
 800b634:	bd80      	pop	{r7, pc}
 800b636:	bf00      	nop
 800b638:	40023800 	.word	0x40023800
 800b63c:	40020000 	.word	0x40020000

0800b640 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b082      	sub	sp, #8
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b64e:	4618      	mov	r0, r3
 800b650:	f7ff f87f 	bl	800a752 <USBH_LL_IncTimer>
}
 800b654:	bf00      	nop
 800b656:	3708      	adds	r7, #8
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd80      	pop	{r7, pc}

0800b65c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b082      	sub	sp, #8
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b66a:	4618      	mov	r0, r3
 800b66c:	f7ff f8b7 	bl	800a7de <USBH_LL_Connect>
}
 800b670:	bf00      	nop
 800b672:	3708      	adds	r7, #8
 800b674:	46bd      	mov	sp, r7
 800b676:	bd80      	pop	{r7, pc}

0800b678 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b082      	sub	sp, #8
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b686:	4618      	mov	r0, r3
 800b688:	f7ff f8c0 	bl	800a80c <USBH_LL_Disconnect>
}
 800b68c:	bf00      	nop
 800b68e:	3708      	adds	r7, #8
 800b690:	46bd      	mov	sp, r7
 800b692:	bd80      	pop	{r7, pc}

0800b694 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b694:	b480      	push	{r7}
 800b696:	b083      	sub	sp, #12
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
 800b69c:	460b      	mov	r3, r1
 800b69e:	70fb      	strb	r3, [r7, #3]
 800b6a0:	4613      	mov	r3, r2
 800b6a2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b6a4:	bf00      	nop
 800b6a6:	370c      	adds	r7, #12
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ae:	4770      	bx	lr

0800b6b0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b082      	sub	sp, #8
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f7ff f871 	bl	800a7a6 <USBH_LL_PortEnabled>
}
 800b6c4:	bf00      	nop
 800b6c6:	3708      	adds	r7, #8
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd80      	pop	{r7, pc}

0800b6cc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b082      	sub	sp, #8
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b6da:	4618      	mov	r0, r3
 800b6dc:	f7ff f871 	bl	800a7c2 <USBH_LL_PortDisabled>
}
 800b6e0:	bf00      	nop
 800b6e2:	3708      	adds	r7, #8
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}

0800b6e8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b082      	sub	sp, #8
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b6f6:	2b01      	cmp	r3, #1
 800b6f8:	d12a      	bne.n	800b750 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b6fa:	4a18      	ldr	r2, [pc, #96]	; (800b75c <USBH_LL_Init+0x74>)
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	4a15      	ldr	r2, [pc, #84]	; (800b75c <USBH_LL_Init+0x74>)
 800b706:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b70a:	4b14      	ldr	r3, [pc, #80]	; (800b75c <USBH_LL_Init+0x74>)
 800b70c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b710:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b712:	4b12      	ldr	r3, [pc, #72]	; (800b75c <USBH_LL_Init+0x74>)
 800b714:	2208      	movs	r2, #8
 800b716:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b718:	4b10      	ldr	r3, [pc, #64]	; (800b75c <USBH_LL_Init+0x74>)
 800b71a:	2201      	movs	r2, #1
 800b71c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b71e:	4b0f      	ldr	r3, [pc, #60]	; (800b75c <USBH_LL_Init+0x74>)
 800b720:	2200      	movs	r2, #0
 800b722:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b724:	4b0d      	ldr	r3, [pc, #52]	; (800b75c <USBH_LL_Init+0x74>)
 800b726:	2202      	movs	r2, #2
 800b728:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b72a:	4b0c      	ldr	r3, [pc, #48]	; (800b75c <USBH_LL_Init+0x74>)
 800b72c:	2200      	movs	r2, #0
 800b72e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b730:	480a      	ldr	r0, [pc, #40]	; (800b75c <USBH_LL_Init+0x74>)
 800b732:	f7f7 fcd8 	bl	80030e6 <HAL_HCD_Init>
 800b736:	4603      	mov	r3, r0
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d001      	beq.n	800b740 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b73c:	f7f5 fbbc 	bl	8000eb8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b740:	4806      	ldr	r0, [pc, #24]	; (800b75c <USBH_LL_Init+0x74>)
 800b742:	f7f8 f8bc 	bl	80038be <HAL_HCD_GetCurrentFrame>
 800b746:	4603      	mov	r3, r0
 800b748:	4619      	mov	r1, r3
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	f7fe fff2 	bl	800a734 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b750:	2300      	movs	r3, #0
}
 800b752:	4618      	mov	r0, r3
 800b754:	3708      	adds	r7, #8
 800b756:	46bd      	mov	sp, r7
 800b758:	bd80      	pop	{r7, pc}
 800b75a:	bf00      	nop
 800b75c:	20002230 	.word	0x20002230

0800b760 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b084      	sub	sp, #16
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b768:	2300      	movs	r3, #0
 800b76a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b76c:	2300      	movs	r3, #0
 800b76e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b776:	4618      	mov	r0, r3
 800b778:	f7f8 f82b 	bl	80037d2 <HAL_HCD_Start>
 800b77c:	4603      	mov	r3, r0
 800b77e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b780:	7bfb      	ldrb	r3, [r7, #15]
 800b782:	4618      	mov	r0, r3
 800b784:	f000 f98c 	bl	800baa0 <USBH_Get_USB_Status>
 800b788:	4603      	mov	r3, r0
 800b78a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b78c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b78e:	4618      	mov	r0, r3
 800b790:	3710      	adds	r7, #16
 800b792:	46bd      	mov	sp, r7
 800b794:	bd80      	pop	{r7, pc}

0800b796 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b796:	b580      	push	{r7, lr}
 800b798:	b084      	sub	sp, #16
 800b79a:	af00      	add	r7, sp, #0
 800b79c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b79e:	2300      	movs	r3, #0
 800b7a0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	f7f8 f833 	bl	8003818 <HAL_HCD_Stop>
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b7b6:	7bfb      	ldrb	r3, [r7, #15]
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	f000 f971 	bl	800baa0 <USBH_Get_USB_Status>
 800b7be:	4603      	mov	r3, r0
 800b7c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b7c2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	3710      	adds	r7, #16
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	bd80      	pop	{r7, pc}

0800b7cc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b084      	sub	sp, #16
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b7d4:	2301      	movs	r3, #1
 800b7d6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b7de:	4618      	mov	r0, r3
 800b7e0:	f7f8 f87b 	bl	80038da <HAL_HCD_GetCurrentSpeed>
 800b7e4:	4603      	mov	r3, r0
 800b7e6:	2b02      	cmp	r3, #2
 800b7e8:	d00c      	beq.n	800b804 <USBH_LL_GetSpeed+0x38>
 800b7ea:	2b02      	cmp	r3, #2
 800b7ec:	d80d      	bhi.n	800b80a <USBH_LL_GetSpeed+0x3e>
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d002      	beq.n	800b7f8 <USBH_LL_GetSpeed+0x2c>
 800b7f2:	2b01      	cmp	r3, #1
 800b7f4:	d003      	beq.n	800b7fe <USBH_LL_GetSpeed+0x32>
 800b7f6:	e008      	b.n	800b80a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	73fb      	strb	r3, [r7, #15]
    break;
 800b7fc:	e008      	b.n	800b810 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b7fe:	2301      	movs	r3, #1
 800b800:	73fb      	strb	r3, [r7, #15]
    break;
 800b802:	e005      	b.n	800b810 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b804:	2302      	movs	r3, #2
 800b806:	73fb      	strb	r3, [r7, #15]
    break;
 800b808:	e002      	b.n	800b810 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b80a:	2301      	movs	r3, #1
 800b80c:	73fb      	strb	r3, [r7, #15]
    break;
 800b80e:	bf00      	nop
  }
  return  speed;
 800b810:	7bfb      	ldrb	r3, [r7, #15]
}
 800b812:	4618      	mov	r0, r3
 800b814:	3710      	adds	r7, #16
 800b816:	46bd      	mov	sp, r7
 800b818:	bd80      	pop	{r7, pc}

0800b81a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b81a:	b580      	push	{r7, lr}
 800b81c:	b084      	sub	sp, #16
 800b81e:	af00      	add	r7, sp, #0
 800b820:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b822:	2300      	movs	r3, #0
 800b824:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b826:	2300      	movs	r3, #0
 800b828:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b830:	4618      	mov	r0, r3
 800b832:	f7f8 f80e 	bl	8003852 <HAL_HCD_ResetPort>
 800b836:	4603      	mov	r3, r0
 800b838:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b83a:	7bfb      	ldrb	r3, [r7, #15]
 800b83c:	4618      	mov	r0, r3
 800b83e:	f000 f92f 	bl	800baa0 <USBH_Get_USB_Status>
 800b842:	4603      	mov	r3, r0
 800b844:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b846:	7bbb      	ldrb	r3, [r7, #14]
}
 800b848:	4618      	mov	r0, r3
 800b84a:	3710      	adds	r7, #16
 800b84c:	46bd      	mov	sp, r7
 800b84e:	bd80      	pop	{r7, pc}

0800b850 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b082      	sub	sp, #8
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
 800b858:	460b      	mov	r3, r1
 800b85a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b862:	78fa      	ldrb	r2, [r7, #3]
 800b864:	4611      	mov	r1, r2
 800b866:	4618      	mov	r0, r3
 800b868:	f7f8 f815 	bl	8003896 <HAL_HCD_HC_GetXferCount>
 800b86c:	4603      	mov	r3, r0
}
 800b86e:	4618      	mov	r0, r3
 800b870:	3708      	adds	r7, #8
 800b872:	46bd      	mov	sp, r7
 800b874:	bd80      	pop	{r7, pc}

0800b876 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b876:	b590      	push	{r4, r7, lr}
 800b878:	b089      	sub	sp, #36	; 0x24
 800b87a:	af04      	add	r7, sp, #16
 800b87c:	6078      	str	r0, [r7, #4]
 800b87e:	4608      	mov	r0, r1
 800b880:	4611      	mov	r1, r2
 800b882:	461a      	mov	r2, r3
 800b884:	4603      	mov	r3, r0
 800b886:	70fb      	strb	r3, [r7, #3]
 800b888:	460b      	mov	r3, r1
 800b88a:	70bb      	strb	r3, [r7, #2]
 800b88c:	4613      	mov	r3, r2
 800b88e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b890:	2300      	movs	r3, #0
 800b892:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b894:	2300      	movs	r3, #0
 800b896:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b89e:	787c      	ldrb	r4, [r7, #1]
 800b8a0:	78ba      	ldrb	r2, [r7, #2]
 800b8a2:	78f9      	ldrb	r1, [r7, #3]
 800b8a4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b8a6:	9302      	str	r3, [sp, #8]
 800b8a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b8ac:	9301      	str	r3, [sp, #4]
 800b8ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b8b2:	9300      	str	r3, [sp, #0]
 800b8b4:	4623      	mov	r3, r4
 800b8b6:	f7f7 fc78 	bl	80031aa <HAL_HCD_HC_Init>
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b8be:	7bfb      	ldrb	r3, [r7, #15]
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	f000 f8ed 	bl	800baa0 <USBH_Get_USB_Status>
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b8ca:	7bbb      	ldrb	r3, [r7, #14]
}
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	3714      	adds	r7, #20
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd90      	pop	{r4, r7, pc}

0800b8d4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b084      	sub	sp, #16
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
 800b8dc:	460b      	mov	r3, r1
 800b8de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b8ee:	78fa      	ldrb	r2, [r7, #3]
 800b8f0:	4611      	mov	r1, r2
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f7f7 fce8 	bl	80032c8 <HAL_HCD_HC_Halt>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b8fc:	7bfb      	ldrb	r3, [r7, #15]
 800b8fe:	4618      	mov	r0, r3
 800b900:	f000 f8ce 	bl	800baa0 <USBH_Get_USB_Status>
 800b904:	4603      	mov	r3, r0
 800b906:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b908:	7bbb      	ldrb	r3, [r7, #14]
}
 800b90a:	4618      	mov	r0, r3
 800b90c:	3710      	adds	r7, #16
 800b90e:	46bd      	mov	sp, r7
 800b910:	bd80      	pop	{r7, pc}

0800b912 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b912:	b590      	push	{r4, r7, lr}
 800b914:	b089      	sub	sp, #36	; 0x24
 800b916:	af04      	add	r7, sp, #16
 800b918:	6078      	str	r0, [r7, #4]
 800b91a:	4608      	mov	r0, r1
 800b91c:	4611      	mov	r1, r2
 800b91e:	461a      	mov	r2, r3
 800b920:	4603      	mov	r3, r0
 800b922:	70fb      	strb	r3, [r7, #3]
 800b924:	460b      	mov	r3, r1
 800b926:	70bb      	strb	r3, [r7, #2]
 800b928:	4613      	mov	r3, r2
 800b92a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b92c:	2300      	movs	r3, #0
 800b92e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b930:	2300      	movs	r3, #0
 800b932:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b93a:	787c      	ldrb	r4, [r7, #1]
 800b93c:	78ba      	ldrb	r2, [r7, #2]
 800b93e:	78f9      	ldrb	r1, [r7, #3]
 800b940:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b944:	9303      	str	r3, [sp, #12]
 800b946:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b948:	9302      	str	r3, [sp, #8]
 800b94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b94c:	9301      	str	r3, [sp, #4]
 800b94e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b952:	9300      	str	r3, [sp, #0]
 800b954:	4623      	mov	r3, r4
 800b956:	f7f7 fcdb 	bl	8003310 <HAL_HCD_HC_SubmitRequest>
 800b95a:	4603      	mov	r3, r0
 800b95c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b95e:	7bfb      	ldrb	r3, [r7, #15]
 800b960:	4618      	mov	r0, r3
 800b962:	f000 f89d 	bl	800baa0 <USBH_Get_USB_Status>
 800b966:	4603      	mov	r3, r0
 800b968:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b96a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b96c:	4618      	mov	r0, r3
 800b96e:	3714      	adds	r7, #20
 800b970:	46bd      	mov	sp, r7
 800b972:	bd90      	pop	{r4, r7, pc}

0800b974 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b082      	sub	sp, #8
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
 800b97c:	460b      	mov	r3, r1
 800b97e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b986:	78fa      	ldrb	r2, [r7, #3]
 800b988:	4611      	mov	r1, r2
 800b98a:	4618      	mov	r0, r3
 800b98c:	f7f7 ff6f 	bl	800386e <HAL_HCD_HC_GetURBState>
 800b990:	4603      	mov	r3, r0
}
 800b992:	4618      	mov	r0, r3
 800b994:	3708      	adds	r7, #8
 800b996:	46bd      	mov	sp, r7
 800b998:	bd80      	pop	{r7, pc}

0800b99a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b99a:	b580      	push	{r7, lr}
 800b99c:	b082      	sub	sp, #8
 800b99e:	af00      	add	r7, sp, #0
 800b9a0:	6078      	str	r0, [r7, #4]
 800b9a2:	460b      	mov	r3, r1
 800b9a4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b9ac:	2b01      	cmp	r3, #1
 800b9ae:	d103      	bne.n	800b9b8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b9b0:	78fb      	ldrb	r3, [r7, #3]
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f000 f8a0 	bl	800baf8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b9b8:	20c8      	movs	r0, #200	; 0xc8
 800b9ba:	f7f6 fd39 	bl	8002430 <HAL_Delay>
  return USBH_OK;
 800b9be:	2300      	movs	r3, #0
}
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	3708      	adds	r7, #8
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	bd80      	pop	{r7, pc}

0800b9c8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b9c8:	b480      	push	{r7}
 800b9ca:	b085      	sub	sp, #20
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
 800b9d0:	460b      	mov	r3, r1
 800b9d2:	70fb      	strb	r3, [r7, #3]
 800b9d4:	4613      	mov	r3, r2
 800b9d6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b9de:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b9e0:	78fb      	ldrb	r3, [r7, #3]
 800b9e2:	68fa      	ldr	r2, [r7, #12]
 800b9e4:	212c      	movs	r1, #44	; 0x2c
 800b9e6:	fb01 f303 	mul.w	r3, r1, r3
 800b9ea:	4413      	add	r3, r2
 800b9ec:	333b      	adds	r3, #59	; 0x3b
 800b9ee:	781b      	ldrb	r3, [r3, #0]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d009      	beq.n	800ba08 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b9f4:	78fb      	ldrb	r3, [r7, #3]
 800b9f6:	68fa      	ldr	r2, [r7, #12]
 800b9f8:	212c      	movs	r1, #44	; 0x2c
 800b9fa:	fb01 f303 	mul.w	r3, r1, r3
 800b9fe:	4413      	add	r3, r2
 800ba00:	3354      	adds	r3, #84	; 0x54
 800ba02:	78ba      	ldrb	r2, [r7, #2]
 800ba04:	701a      	strb	r2, [r3, #0]
 800ba06:	e008      	b.n	800ba1a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800ba08:	78fb      	ldrb	r3, [r7, #3]
 800ba0a:	68fa      	ldr	r2, [r7, #12]
 800ba0c:	212c      	movs	r1, #44	; 0x2c
 800ba0e:	fb01 f303 	mul.w	r3, r1, r3
 800ba12:	4413      	add	r3, r2
 800ba14:	3355      	adds	r3, #85	; 0x55
 800ba16:	78ba      	ldrb	r2, [r7, #2]
 800ba18:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800ba1a:	2300      	movs	r3, #0
}
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	3714      	adds	r7, #20
 800ba20:	46bd      	mov	sp, r7
 800ba22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba26:	4770      	bx	lr

0800ba28 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ba28:	b480      	push	{r7}
 800ba2a:	b085      	sub	sp, #20
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
 800ba30:	460b      	mov	r3, r1
 800ba32:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800ba34:	2300      	movs	r3, #0
 800ba36:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ba3e:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800ba40:	78fb      	ldrb	r3, [r7, #3]
 800ba42:	68ba      	ldr	r2, [r7, #8]
 800ba44:	212c      	movs	r1, #44	; 0x2c
 800ba46:	fb01 f303 	mul.w	r3, r1, r3
 800ba4a:	4413      	add	r3, r2
 800ba4c:	333b      	adds	r3, #59	; 0x3b
 800ba4e:	781b      	ldrb	r3, [r3, #0]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d009      	beq.n	800ba68 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800ba54:	78fb      	ldrb	r3, [r7, #3]
 800ba56:	68ba      	ldr	r2, [r7, #8]
 800ba58:	212c      	movs	r1, #44	; 0x2c
 800ba5a:	fb01 f303 	mul.w	r3, r1, r3
 800ba5e:	4413      	add	r3, r2
 800ba60:	3354      	adds	r3, #84	; 0x54
 800ba62:	781b      	ldrb	r3, [r3, #0]
 800ba64:	73fb      	strb	r3, [r7, #15]
 800ba66:	e008      	b.n	800ba7a <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800ba68:	78fb      	ldrb	r3, [r7, #3]
 800ba6a:	68ba      	ldr	r2, [r7, #8]
 800ba6c:	212c      	movs	r1, #44	; 0x2c
 800ba6e:	fb01 f303 	mul.w	r3, r1, r3
 800ba72:	4413      	add	r3, r2
 800ba74:	3355      	adds	r3, #85	; 0x55
 800ba76:	781b      	ldrb	r3, [r3, #0]
 800ba78:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800ba7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	3714      	adds	r7, #20
 800ba80:	46bd      	mov	sp, r7
 800ba82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba86:	4770      	bx	lr

0800ba88 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b082      	sub	sp, #8
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f7f6 fccd 	bl	8002430 <HAL_Delay>
}
 800ba96:	bf00      	nop
 800ba98:	3708      	adds	r7, #8
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	bd80      	pop	{r7, pc}
	...

0800baa0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800baa0:	b480      	push	{r7}
 800baa2:	b085      	sub	sp, #20
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	4603      	mov	r3, r0
 800baa8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800baaa:	2300      	movs	r3, #0
 800baac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800baae:	79fb      	ldrb	r3, [r7, #7]
 800bab0:	2b03      	cmp	r3, #3
 800bab2:	d817      	bhi.n	800bae4 <USBH_Get_USB_Status+0x44>
 800bab4:	a201      	add	r2, pc, #4	; (adr r2, 800babc <USBH_Get_USB_Status+0x1c>)
 800bab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baba:	bf00      	nop
 800babc:	0800bacd 	.word	0x0800bacd
 800bac0:	0800bad3 	.word	0x0800bad3
 800bac4:	0800bad9 	.word	0x0800bad9
 800bac8:	0800badf 	.word	0x0800badf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800bacc:	2300      	movs	r3, #0
 800bace:	73fb      	strb	r3, [r7, #15]
    break;
 800bad0:	e00b      	b.n	800baea <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800bad2:	2302      	movs	r3, #2
 800bad4:	73fb      	strb	r3, [r7, #15]
    break;
 800bad6:	e008      	b.n	800baea <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800bad8:	2301      	movs	r3, #1
 800bada:	73fb      	strb	r3, [r7, #15]
    break;
 800badc:	e005      	b.n	800baea <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800bade:	2302      	movs	r3, #2
 800bae0:	73fb      	strb	r3, [r7, #15]
    break;
 800bae2:	e002      	b.n	800baea <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800bae4:	2302      	movs	r3, #2
 800bae6:	73fb      	strb	r3, [r7, #15]
    break;
 800bae8:	bf00      	nop
  }
  return usb_status;
 800baea:	7bfb      	ldrb	r3, [r7, #15]
}
 800baec:	4618      	mov	r0, r3
 800baee:	3714      	adds	r7, #20
 800baf0:	46bd      	mov	sp, r7
 800baf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf6:	4770      	bx	lr

0800baf8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b084      	sub	sp, #16
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	4603      	mov	r3, r0
 800bb00:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800bb02:	79fb      	ldrb	r3, [r7, #7]
 800bb04:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800bb06:	79fb      	ldrb	r3, [r7, #7]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d102      	bne.n	800bb12 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	73fb      	strb	r3, [r7, #15]
 800bb10:	e001      	b.n	800bb16 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800bb12:	2301      	movs	r3, #1
 800bb14:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800bb16:	7bfb      	ldrb	r3, [r7, #15]
 800bb18:	461a      	mov	r2, r3
 800bb1a:	2101      	movs	r1, #1
 800bb1c:	4803      	ldr	r0, [pc, #12]	; (800bb2c <MX_DriverVbusFS+0x34>)
 800bb1e:	f7f7 fac9 	bl	80030b4 <HAL_GPIO_WritePin>
}
 800bb22:	bf00      	nop
 800bb24:	3710      	adds	r7, #16
 800bb26:	46bd      	mov	sp, r7
 800bb28:	bd80      	pop	{r7, pc}
 800bb2a:	bf00      	nop
 800bb2c:	40020800 	.word	0x40020800

0800bb30 <__errno>:
 800bb30:	4b01      	ldr	r3, [pc, #4]	; (800bb38 <__errno+0x8>)
 800bb32:	6818      	ldr	r0, [r3, #0]
 800bb34:	4770      	bx	lr
 800bb36:	bf00      	nop
 800bb38:	20000230 	.word	0x20000230

0800bb3c <__libc_init_array>:
 800bb3c:	b570      	push	{r4, r5, r6, lr}
 800bb3e:	4d0d      	ldr	r5, [pc, #52]	; (800bb74 <__libc_init_array+0x38>)
 800bb40:	4c0d      	ldr	r4, [pc, #52]	; (800bb78 <__libc_init_array+0x3c>)
 800bb42:	1b64      	subs	r4, r4, r5
 800bb44:	10a4      	asrs	r4, r4, #2
 800bb46:	2600      	movs	r6, #0
 800bb48:	42a6      	cmp	r6, r4
 800bb4a:	d109      	bne.n	800bb60 <__libc_init_array+0x24>
 800bb4c:	4d0b      	ldr	r5, [pc, #44]	; (800bb7c <__libc_init_array+0x40>)
 800bb4e:	4c0c      	ldr	r4, [pc, #48]	; (800bb80 <__libc_init_array+0x44>)
 800bb50:	f000 f93c 	bl	800bdcc <_init>
 800bb54:	1b64      	subs	r4, r4, r5
 800bb56:	10a4      	asrs	r4, r4, #2
 800bb58:	2600      	movs	r6, #0
 800bb5a:	42a6      	cmp	r6, r4
 800bb5c:	d105      	bne.n	800bb6a <__libc_init_array+0x2e>
 800bb5e:	bd70      	pop	{r4, r5, r6, pc}
 800bb60:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb64:	4798      	blx	r3
 800bb66:	3601      	adds	r6, #1
 800bb68:	e7ee      	b.n	800bb48 <__libc_init_array+0xc>
 800bb6a:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb6e:	4798      	blx	r3
 800bb70:	3601      	adds	r6, #1
 800bb72:	e7f2      	b.n	800bb5a <__libc_init_array+0x1e>
 800bb74:	0800c150 	.word	0x0800c150
 800bb78:	0800c150 	.word	0x0800c150
 800bb7c:	0800c150 	.word	0x0800c150
 800bb80:	0800c154 	.word	0x0800c154

0800bb84 <malloc>:
 800bb84:	4b02      	ldr	r3, [pc, #8]	; (800bb90 <malloc+0xc>)
 800bb86:	4601      	mov	r1, r0
 800bb88:	6818      	ldr	r0, [r3, #0]
 800bb8a:	f000 b88d 	b.w	800bca8 <_malloc_r>
 800bb8e:	bf00      	nop
 800bb90:	20000230 	.word	0x20000230

0800bb94 <free>:
 800bb94:	4b02      	ldr	r3, [pc, #8]	; (800bba0 <free+0xc>)
 800bb96:	4601      	mov	r1, r0
 800bb98:	6818      	ldr	r0, [r3, #0]
 800bb9a:	f000 b819 	b.w	800bbd0 <_free_r>
 800bb9e:	bf00      	nop
 800bba0:	20000230 	.word	0x20000230

0800bba4 <memcpy>:
 800bba4:	440a      	add	r2, r1
 800bba6:	4291      	cmp	r1, r2
 800bba8:	f100 33ff 	add.w	r3, r0, #4294967295
 800bbac:	d100      	bne.n	800bbb0 <memcpy+0xc>
 800bbae:	4770      	bx	lr
 800bbb0:	b510      	push	{r4, lr}
 800bbb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bbb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bbba:	4291      	cmp	r1, r2
 800bbbc:	d1f9      	bne.n	800bbb2 <memcpy+0xe>
 800bbbe:	bd10      	pop	{r4, pc}

0800bbc0 <memset>:
 800bbc0:	4402      	add	r2, r0
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	4293      	cmp	r3, r2
 800bbc6:	d100      	bne.n	800bbca <memset+0xa>
 800bbc8:	4770      	bx	lr
 800bbca:	f803 1b01 	strb.w	r1, [r3], #1
 800bbce:	e7f9      	b.n	800bbc4 <memset+0x4>

0800bbd0 <_free_r>:
 800bbd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bbd2:	2900      	cmp	r1, #0
 800bbd4:	d044      	beq.n	800bc60 <_free_r+0x90>
 800bbd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bbda:	9001      	str	r0, [sp, #4]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	f1a1 0404 	sub.w	r4, r1, #4
 800bbe2:	bfb8      	it	lt
 800bbe4:	18e4      	addlt	r4, r4, r3
 800bbe6:	f000 f8e3 	bl	800bdb0 <__malloc_lock>
 800bbea:	4a1e      	ldr	r2, [pc, #120]	; (800bc64 <_free_r+0x94>)
 800bbec:	9801      	ldr	r0, [sp, #4]
 800bbee:	6813      	ldr	r3, [r2, #0]
 800bbf0:	b933      	cbnz	r3, 800bc00 <_free_r+0x30>
 800bbf2:	6063      	str	r3, [r4, #4]
 800bbf4:	6014      	str	r4, [r2, #0]
 800bbf6:	b003      	add	sp, #12
 800bbf8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bbfc:	f000 b8de 	b.w	800bdbc <__malloc_unlock>
 800bc00:	42a3      	cmp	r3, r4
 800bc02:	d908      	bls.n	800bc16 <_free_r+0x46>
 800bc04:	6825      	ldr	r5, [r4, #0]
 800bc06:	1961      	adds	r1, r4, r5
 800bc08:	428b      	cmp	r3, r1
 800bc0a:	bf01      	itttt	eq
 800bc0c:	6819      	ldreq	r1, [r3, #0]
 800bc0e:	685b      	ldreq	r3, [r3, #4]
 800bc10:	1949      	addeq	r1, r1, r5
 800bc12:	6021      	streq	r1, [r4, #0]
 800bc14:	e7ed      	b.n	800bbf2 <_free_r+0x22>
 800bc16:	461a      	mov	r2, r3
 800bc18:	685b      	ldr	r3, [r3, #4]
 800bc1a:	b10b      	cbz	r3, 800bc20 <_free_r+0x50>
 800bc1c:	42a3      	cmp	r3, r4
 800bc1e:	d9fa      	bls.n	800bc16 <_free_r+0x46>
 800bc20:	6811      	ldr	r1, [r2, #0]
 800bc22:	1855      	adds	r5, r2, r1
 800bc24:	42a5      	cmp	r5, r4
 800bc26:	d10b      	bne.n	800bc40 <_free_r+0x70>
 800bc28:	6824      	ldr	r4, [r4, #0]
 800bc2a:	4421      	add	r1, r4
 800bc2c:	1854      	adds	r4, r2, r1
 800bc2e:	42a3      	cmp	r3, r4
 800bc30:	6011      	str	r1, [r2, #0]
 800bc32:	d1e0      	bne.n	800bbf6 <_free_r+0x26>
 800bc34:	681c      	ldr	r4, [r3, #0]
 800bc36:	685b      	ldr	r3, [r3, #4]
 800bc38:	6053      	str	r3, [r2, #4]
 800bc3a:	4421      	add	r1, r4
 800bc3c:	6011      	str	r1, [r2, #0]
 800bc3e:	e7da      	b.n	800bbf6 <_free_r+0x26>
 800bc40:	d902      	bls.n	800bc48 <_free_r+0x78>
 800bc42:	230c      	movs	r3, #12
 800bc44:	6003      	str	r3, [r0, #0]
 800bc46:	e7d6      	b.n	800bbf6 <_free_r+0x26>
 800bc48:	6825      	ldr	r5, [r4, #0]
 800bc4a:	1961      	adds	r1, r4, r5
 800bc4c:	428b      	cmp	r3, r1
 800bc4e:	bf04      	itt	eq
 800bc50:	6819      	ldreq	r1, [r3, #0]
 800bc52:	685b      	ldreq	r3, [r3, #4]
 800bc54:	6063      	str	r3, [r4, #4]
 800bc56:	bf04      	itt	eq
 800bc58:	1949      	addeq	r1, r1, r5
 800bc5a:	6021      	streq	r1, [r4, #0]
 800bc5c:	6054      	str	r4, [r2, #4]
 800bc5e:	e7ca      	b.n	800bbf6 <_free_r+0x26>
 800bc60:	b003      	add	sp, #12
 800bc62:	bd30      	pop	{r4, r5, pc}
 800bc64:	20002534 	.word	0x20002534

0800bc68 <sbrk_aligned>:
 800bc68:	b570      	push	{r4, r5, r6, lr}
 800bc6a:	4e0e      	ldr	r6, [pc, #56]	; (800bca4 <sbrk_aligned+0x3c>)
 800bc6c:	460c      	mov	r4, r1
 800bc6e:	6831      	ldr	r1, [r6, #0]
 800bc70:	4605      	mov	r5, r0
 800bc72:	b911      	cbnz	r1, 800bc7a <sbrk_aligned+0x12>
 800bc74:	f000 f88c 	bl	800bd90 <_sbrk_r>
 800bc78:	6030      	str	r0, [r6, #0]
 800bc7a:	4621      	mov	r1, r4
 800bc7c:	4628      	mov	r0, r5
 800bc7e:	f000 f887 	bl	800bd90 <_sbrk_r>
 800bc82:	1c43      	adds	r3, r0, #1
 800bc84:	d00a      	beq.n	800bc9c <sbrk_aligned+0x34>
 800bc86:	1cc4      	adds	r4, r0, #3
 800bc88:	f024 0403 	bic.w	r4, r4, #3
 800bc8c:	42a0      	cmp	r0, r4
 800bc8e:	d007      	beq.n	800bca0 <sbrk_aligned+0x38>
 800bc90:	1a21      	subs	r1, r4, r0
 800bc92:	4628      	mov	r0, r5
 800bc94:	f000 f87c 	bl	800bd90 <_sbrk_r>
 800bc98:	3001      	adds	r0, #1
 800bc9a:	d101      	bne.n	800bca0 <sbrk_aligned+0x38>
 800bc9c:	f04f 34ff 	mov.w	r4, #4294967295
 800bca0:	4620      	mov	r0, r4
 800bca2:	bd70      	pop	{r4, r5, r6, pc}
 800bca4:	20002538 	.word	0x20002538

0800bca8 <_malloc_r>:
 800bca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcac:	1ccd      	adds	r5, r1, #3
 800bcae:	f025 0503 	bic.w	r5, r5, #3
 800bcb2:	3508      	adds	r5, #8
 800bcb4:	2d0c      	cmp	r5, #12
 800bcb6:	bf38      	it	cc
 800bcb8:	250c      	movcc	r5, #12
 800bcba:	2d00      	cmp	r5, #0
 800bcbc:	4607      	mov	r7, r0
 800bcbe:	db01      	blt.n	800bcc4 <_malloc_r+0x1c>
 800bcc0:	42a9      	cmp	r1, r5
 800bcc2:	d905      	bls.n	800bcd0 <_malloc_r+0x28>
 800bcc4:	230c      	movs	r3, #12
 800bcc6:	603b      	str	r3, [r7, #0]
 800bcc8:	2600      	movs	r6, #0
 800bcca:	4630      	mov	r0, r6
 800bccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcd0:	4e2e      	ldr	r6, [pc, #184]	; (800bd8c <_malloc_r+0xe4>)
 800bcd2:	f000 f86d 	bl	800bdb0 <__malloc_lock>
 800bcd6:	6833      	ldr	r3, [r6, #0]
 800bcd8:	461c      	mov	r4, r3
 800bcda:	bb34      	cbnz	r4, 800bd2a <_malloc_r+0x82>
 800bcdc:	4629      	mov	r1, r5
 800bcde:	4638      	mov	r0, r7
 800bce0:	f7ff ffc2 	bl	800bc68 <sbrk_aligned>
 800bce4:	1c43      	adds	r3, r0, #1
 800bce6:	4604      	mov	r4, r0
 800bce8:	d14d      	bne.n	800bd86 <_malloc_r+0xde>
 800bcea:	6834      	ldr	r4, [r6, #0]
 800bcec:	4626      	mov	r6, r4
 800bcee:	2e00      	cmp	r6, #0
 800bcf0:	d140      	bne.n	800bd74 <_malloc_r+0xcc>
 800bcf2:	6823      	ldr	r3, [r4, #0]
 800bcf4:	4631      	mov	r1, r6
 800bcf6:	4638      	mov	r0, r7
 800bcf8:	eb04 0803 	add.w	r8, r4, r3
 800bcfc:	f000 f848 	bl	800bd90 <_sbrk_r>
 800bd00:	4580      	cmp	r8, r0
 800bd02:	d13a      	bne.n	800bd7a <_malloc_r+0xd2>
 800bd04:	6821      	ldr	r1, [r4, #0]
 800bd06:	3503      	adds	r5, #3
 800bd08:	1a6d      	subs	r5, r5, r1
 800bd0a:	f025 0503 	bic.w	r5, r5, #3
 800bd0e:	3508      	adds	r5, #8
 800bd10:	2d0c      	cmp	r5, #12
 800bd12:	bf38      	it	cc
 800bd14:	250c      	movcc	r5, #12
 800bd16:	4629      	mov	r1, r5
 800bd18:	4638      	mov	r0, r7
 800bd1a:	f7ff ffa5 	bl	800bc68 <sbrk_aligned>
 800bd1e:	3001      	adds	r0, #1
 800bd20:	d02b      	beq.n	800bd7a <_malloc_r+0xd2>
 800bd22:	6823      	ldr	r3, [r4, #0]
 800bd24:	442b      	add	r3, r5
 800bd26:	6023      	str	r3, [r4, #0]
 800bd28:	e00e      	b.n	800bd48 <_malloc_r+0xa0>
 800bd2a:	6822      	ldr	r2, [r4, #0]
 800bd2c:	1b52      	subs	r2, r2, r5
 800bd2e:	d41e      	bmi.n	800bd6e <_malloc_r+0xc6>
 800bd30:	2a0b      	cmp	r2, #11
 800bd32:	d916      	bls.n	800bd62 <_malloc_r+0xba>
 800bd34:	1961      	adds	r1, r4, r5
 800bd36:	42a3      	cmp	r3, r4
 800bd38:	6025      	str	r5, [r4, #0]
 800bd3a:	bf18      	it	ne
 800bd3c:	6059      	strne	r1, [r3, #4]
 800bd3e:	6863      	ldr	r3, [r4, #4]
 800bd40:	bf08      	it	eq
 800bd42:	6031      	streq	r1, [r6, #0]
 800bd44:	5162      	str	r2, [r4, r5]
 800bd46:	604b      	str	r3, [r1, #4]
 800bd48:	4638      	mov	r0, r7
 800bd4a:	f104 060b 	add.w	r6, r4, #11
 800bd4e:	f000 f835 	bl	800bdbc <__malloc_unlock>
 800bd52:	f026 0607 	bic.w	r6, r6, #7
 800bd56:	1d23      	adds	r3, r4, #4
 800bd58:	1af2      	subs	r2, r6, r3
 800bd5a:	d0b6      	beq.n	800bcca <_malloc_r+0x22>
 800bd5c:	1b9b      	subs	r3, r3, r6
 800bd5e:	50a3      	str	r3, [r4, r2]
 800bd60:	e7b3      	b.n	800bcca <_malloc_r+0x22>
 800bd62:	6862      	ldr	r2, [r4, #4]
 800bd64:	42a3      	cmp	r3, r4
 800bd66:	bf0c      	ite	eq
 800bd68:	6032      	streq	r2, [r6, #0]
 800bd6a:	605a      	strne	r2, [r3, #4]
 800bd6c:	e7ec      	b.n	800bd48 <_malloc_r+0xa0>
 800bd6e:	4623      	mov	r3, r4
 800bd70:	6864      	ldr	r4, [r4, #4]
 800bd72:	e7b2      	b.n	800bcda <_malloc_r+0x32>
 800bd74:	4634      	mov	r4, r6
 800bd76:	6876      	ldr	r6, [r6, #4]
 800bd78:	e7b9      	b.n	800bcee <_malloc_r+0x46>
 800bd7a:	230c      	movs	r3, #12
 800bd7c:	603b      	str	r3, [r7, #0]
 800bd7e:	4638      	mov	r0, r7
 800bd80:	f000 f81c 	bl	800bdbc <__malloc_unlock>
 800bd84:	e7a1      	b.n	800bcca <_malloc_r+0x22>
 800bd86:	6025      	str	r5, [r4, #0]
 800bd88:	e7de      	b.n	800bd48 <_malloc_r+0xa0>
 800bd8a:	bf00      	nop
 800bd8c:	20002534 	.word	0x20002534

0800bd90 <_sbrk_r>:
 800bd90:	b538      	push	{r3, r4, r5, lr}
 800bd92:	4d06      	ldr	r5, [pc, #24]	; (800bdac <_sbrk_r+0x1c>)
 800bd94:	2300      	movs	r3, #0
 800bd96:	4604      	mov	r4, r0
 800bd98:	4608      	mov	r0, r1
 800bd9a:	602b      	str	r3, [r5, #0]
 800bd9c:	f7f6 fa64 	bl	8002268 <_sbrk>
 800bda0:	1c43      	adds	r3, r0, #1
 800bda2:	d102      	bne.n	800bdaa <_sbrk_r+0x1a>
 800bda4:	682b      	ldr	r3, [r5, #0]
 800bda6:	b103      	cbz	r3, 800bdaa <_sbrk_r+0x1a>
 800bda8:	6023      	str	r3, [r4, #0]
 800bdaa:	bd38      	pop	{r3, r4, r5, pc}
 800bdac:	2000253c 	.word	0x2000253c

0800bdb0 <__malloc_lock>:
 800bdb0:	4801      	ldr	r0, [pc, #4]	; (800bdb8 <__malloc_lock+0x8>)
 800bdb2:	f000 b809 	b.w	800bdc8 <__retarget_lock_acquire_recursive>
 800bdb6:	bf00      	nop
 800bdb8:	20002540 	.word	0x20002540

0800bdbc <__malloc_unlock>:
 800bdbc:	4801      	ldr	r0, [pc, #4]	; (800bdc4 <__malloc_unlock+0x8>)
 800bdbe:	f000 b804 	b.w	800bdca <__retarget_lock_release_recursive>
 800bdc2:	bf00      	nop
 800bdc4:	20002540 	.word	0x20002540

0800bdc8 <__retarget_lock_acquire_recursive>:
 800bdc8:	4770      	bx	lr

0800bdca <__retarget_lock_release_recursive>:
 800bdca:	4770      	bx	lr

0800bdcc <_init>:
 800bdcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdce:	bf00      	nop
 800bdd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdd2:	bc08      	pop	{r3}
 800bdd4:	469e      	mov	lr, r3
 800bdd6:	4770      	bx	lr

0800bdd8 <_fini>:
 800bdd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdda:	bf00      	nop
 800bddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdde:	bc08      	pop	{r3}
 800bde0:	469e      	mov	lr, r3
 800bde2:	4770      	bx	lr
