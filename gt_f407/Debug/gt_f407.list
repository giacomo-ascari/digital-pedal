
gt_f407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091ac  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08009334  08009334  00019334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009378  08009378  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08009378  08009378  00019378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009380  08009380  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009380  08009380  00019380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009384  08009384  00019384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08009388  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          000008b4  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000944  20000944  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   000177e1  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e10  00000000  00000000  000378a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e98  00000000  00000000  0003b6b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d10  00000000  00000000  0003c550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024c90  00000000  00000000  0003d260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001620b  00000000  00000000  00061ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8340  00000000  00000000  000780fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014043b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003be4  00000000  00000000  0014048c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800931c 	.word	0x0800931c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	0800931c 	.word	0x0800931c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <HAL_UART_RxHalfCpltCallback>:
extern ApplicationTypeDef Appli_state;

Commander_HandleTypeDef hcommander;

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b086      	sub	sp, #24
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	UNUSED(huart);
	Command command;
	memcpy(&command, hcommander.uart_rx_buffer, COMMAND_BYTESIZE);
 80004d4:	f107 030c 	add.w	r3, r7, #12
 80004d8:	220a      	movs	r2, #10
 80004da:	4907      	ldr	r1, [pc, #28]	; (80004f8 <HAL_UART_RxHalfCpltCallback+0x2c>)
 80004dc:	4618      	mov	r0, r3
 80004de:	f008 fe09 	bl	80090f4 <memcpy>
	Commander_Enqueue(&hcommander, &command);
 80004e2:	f107 030c 	add.w	r3, r7, #12
 80004e6:	4619      	mov	r1, r3
 80004e8:	4804      	ldr	r0, [pc, #16]	; (80004fc <HAL_UART_RxHalfCpltCallback+0x30>)
 80004ea:	f000 fb6c 	bl	8000bc6 <Commander_Enqueue>
}
 80004ee:	bf00      	nop
 80004f0:	3718      	adds	r7, #24
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	20000158 	.word	0x20000158
 80004fc:	20000150 	.word	0x20000150

08000500 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b086      	sub	sp, #24
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
	UNUSED(huart);
	Command command;
	memcpy(&command, hcommander.uart_rx_buffer + COMMAND_BYTESIZE, COMMAND_BYTESIZE);
 8000508:	4908      	ldr	r1, [pc, #32]	; (800052c <HAL_UART_RxCpltCallback+0x2c>)
 800050a:	f107 030c 	add.w	r3, r7, #12
 800050e:	220a      	movs	r2, #10
 8000510:	4618      	mov	r0, r3
 8000512:	f008 fdef 	bl	80090f4 <memcpy>
	Commander_Enqueue(&hcommander, &command);
 8000516:	f107 030c 	add.w	r3, r7, #12
 800051a:	4619      	mov	r1, r3
 800051c:	4804      	ldr	r0, [pc, #16]	; (8000530 <HAL_UART_RxCpltCallback+0x30>)
 800051e:	f000 fb52 	bl	8000bc6 <Commander_Enqueue>
}
 8000522:	bf00      	nop
 8000524:	3718      	adds	r7, #24
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	20000162 	.word	0x20000162
 8000530:	20000150 	.word	0x20000150

08000534 <command_callback>:

void command_callback(Command command) {
 8000534:	b480      	push	{r7}
 8000536:	b085      	sub	sp, #20
 8000538:	af00      	add	r7, sp, #0
 800053a:	1d3b      	adds	r3, r7, #4
 800053c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//states[0] = states[0] == GPIO_PIN_RESET ? GPIO_PIN_SET : GPIO_PIN_RESET;
}
 8000540:	bf00      	nop
 8000542:	3714      	adds	r7, #20
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr

0800054c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000552:	f000 fb69 	bl	8000c28 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000556:	f000 f861 	bl	800061c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800055a:	f000 f915 	bl	8000788 <MX_GPIO_Init>
	MX_DMA_Init();
 800055e:	f000 f8f3 	bl	8000748 <MX_DMA_Init>
	MX_USART1_UART_Init();
 8000562:	f000 f8c7 	bl	80006f4 <MX_USART1_UART_Init>
	MX_FATFS_Init();
 8000566:	f005 f8df 	bl	8005728 <MX_FATFS_Init>
	MX_USB_HOST_Init();
 800056a:	f008 fa51 	bl	8008a10 <MX_USB_HOST_Init>
	/* USER CODE BEGIN 2 */
	Commander_Init(&hcommander, &huart1, &hdma_usart1_rx, command_callback);
 800056e:	4b23      	ldr	r3, [pc, #140]	; (80005fc <main+0xb0>)
 8000570:	4a23      	ldr	r2, [pc, #140]	; (8000600 <main+0xb4>)
 8000572:	4924      	ldr	r1, [pc, #144]	; (8000604 <main+0xb8>)
 8000574:	4824      	ldr	r0, [pc, #144]	; (8000608 <main+0xbc>)
 8000576:	f000 fae2 	bl	8000b3e <Commander_Init>
	Commander_Start(&hcommander);
 800057a:	4823      	ldr	r0, [pc, #140]	; (8000608 <main+0xbc>)
 800057c:	f000 fb02 	bl	8000b84 <Commander_Start>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		/* USER CODE END WHILE */
		MX_USB_HOST_Process();
 8000580:	f008 fa6c 	bl	8008a5c <MX_USB_HOST_Process>

		/* USER CODE BEGIN 3 */
		HAL_GPIO_WritePin(OtgPower_GPIO_Port, OtgPower_Pin, GPIO_PIN_RESET);
 8000584:	2200      	movs	r2, #0
 8000586:	f44f 7100 	mov.w	r1, #512	; 0x200
 800058a:	4820      	ldr	r0, [pc, #128]	; (800060c <main+0xc0>)
 800058c:	f001 fa00 	bl	8001990 <HAL_GPIO_WritePin>

		switch(Appli_state)
 8000590:	4b1f      	ldr	r3, [pc, #124]	; (8000610 <main+0xc4>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	2b03      	cmp	r3, #3
 8000596:	d82e      	bhi.n	80005f6 <main+0xaa>
 8000598:	a201      	add	r2, pc, #4	; (adr r2, 80005a0 <main+0x54>)
 800059a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800059e:	bf00      	nop
 80005a0:	080005f7 	.word	0x080005f7
 80005a4:	080005c7 	.word	0x080005c7
 80005a8:	080005f7 	.word	0x080005f7
 80005ac:	080005b1 	.word	0x080005b1
		case APPLICATION_IDLE:

			break;

		case APPLICATION_DISCONNECT:
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80005b0:	2200      	movs	r2, #0
 80005b2:	2108      	movs	r1, #8
 80005b4:	4817      	ldr	r0, [pc, #92]	; (8000614 <main+0xc8>)
 80005b6:	f001 f9eb 	bl	8001990 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005ba:	2200      	movs	r2, #0
 80005bc:	2110      	movs	r1, #16
 80005be:	4815      	ldr	r0, [pc, #84]	; (8000614 <main+0xc8>)
 80005c0:	f001 f9e6 	bl	8001990 <HAL_GPIO_WritePin>
			break;
 80005c4:	e018      	b.n	80005f8 <main+0xac>

		case APPLICATION_START:
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80005c6:	2201      	movs	r2, #1
 80005c8:	2108      	movs	r1, #8
 80005ca:	4812      	ldr	r0, [pc, #72]	; (8000614 <main+0xc8>)
 80005cc:	f001 f9e0 	bl	8001990 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80005d0:	2201      	movs	r2, #1
 80005d2:	2110      	movs	r1, #16
 80005d4:	480f      	ldr	r0, [pc, #60]	; (8000614 <main+0xc8>)
 80005d6:	f001 f9db 	bl	8001990 <HAL_GPIO_WritePin>
			Command command = {255, 0, 45, 17.13};
 80005da:	4a0f      	ldr	r2, [pc, #60]	; (8000618 <main+0xcc>)
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	ca07      	ldmia	r2, {r0, r1, r2}
 80005e0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			Commander_Send(&hcommander, &command);
 80005e4:	1d3b      	adds	r3, r7, #4
 80005e6:	4619      	mov	r1, r3
 80005e8:	4807      	ldr	r0, [pc, #28]	; (8000608 <main+0xbc>)
 80005ea:	f000 fadb 	bl	8000ba4 <Commander_Send>
			HAL_Delay(50);
 80005ee:	2032      	movs	r0, #50	; 0x32
 80005f0:	f000 fb8c 	bl	8000d0c <HAL_Delay>
			break;
 80005f4:	e000      	b.n	80005f8 <main+0xac>

		default:
			break;
 80005f6:	bf00      	nop
		MX_USB_HOST_Process();
 80005f8:	e7c2      	b.n	8000580 <main+0x34>
 80005fa:	bf00      	nop
 80005fc:	08000535 	.word	0x08000535
 8000600:	200000f0 	.word	0x200000f0
 8000604:	200000ac 	.word	0x200000ac
 8000608:	20000150 	.word	0x20000150
 800060c:	40020800 	.word	0x40020800
 8000610:	2000062c 	.word	0x2000062c
 8000614:	40020c00 	.word	0x40020c00
 8000618:	08009334 	.word	0x08009334

0800061c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b094      	sub	sp, #80	; 0x50
 8000620:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	2230      	movs	r2, #48	; 0x30
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f008 fd70 	bl	8009110 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	4b29      	ldr	r3, [pc, #164]	; (80006ec <SystemClock_Config+0xd0>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	4a28      	ldr	r2, [pc, #160]	; (80006ec <SystemClock_Config+0xd0>)
 800064a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064e:	6413      	str	r3, [r2, #64]	; 0x40
 8000650:	4b26      	ldr	r3, [pc, #152]	; (80006ec <SystemClock_Config+0xd0>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800065c:	2300      	movs	r3, #0
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	4b23      	ldr	r3, [pc, #140]	; (80006f0 <SystemClock_Config+0xd4>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a22      	ldr	r2, [pc, #136]	; (80006f0 <SystemClock_Config+0xd4>)
 8000666:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	4b20      	ldr	r3, [pc, #128]	; (80006f0 <SystemClock_Config+0xd4>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000678:	2303      	movs	r3, #3
 800067a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800067c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000680:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000682:	2301      	movs	r3, #1
 8000684:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000686:	2310      	movs	r3, #16
 8000688:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068a:	2302      	movs	r3, #2
 800068c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800068e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000692:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000694:	2304      	movs	r3, #4
 8000696:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8000698:	23a8      	movs	r3, #168	; 0xa8
 800069a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800069c:	2302      	movs	r3, #2
 800069e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80006a0:	2307      	movs	r3, #7
 80006a2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a4:	f107 0320 	add.w	r3, r7, #32
 80006a8:	4618      	mov	r0, r3
 80006aa:	f002 fd95 	bl	80031d8 <HAL_RCC_OscConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0x9c>
	{
		Error_Handler();
 80006b4:	f000 f8ec 	bl	8000890 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b8:	230f      	movs	r3, #15
 80006ba:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006bc:	2300      	movs	r3, #0
 80006be:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006cc:	f107 030c 	add.w	r3, r7, #12
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f002 fff8 	bl	80036c8 <HAL_RCC_ClockConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0xc6>
	{
		Error_Handler();
 80006de:	f000 f8d7 	bl	8000890 <Error_Handler>
	}
}
 80006e2:	bf00      	nop
 80006e4:	3750      	adds	r7, #80	; 0x50
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40007000 	.word	0x40007000

080006f4 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80006f8:	4b11      	ldr	r3, [pc, #68]	; (8000740 <MX_USART1_UART_Init+0x4c>)
 80006fa:	4a12      	ldr	r2, [pc, #72]	; (8000744 <MX_USART1_UART_Init+0x50>)
 80006fc:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80006fe:	4b10      	ldr	r3, [pc, #64]	; (8000740 <MX_USART1_UART_Init+0x4c>)
 8000700:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000704:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000706:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <MX_USART1_UART_Init+0x4c>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800070c:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <MX_USART1_UART_Init+0x4c>)
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000712:	4b0b      	ldr	r3, [pc, #44]	; (8000740 <MX_USART1_UART_Init+0x4c>)
 8000714:	2200      	movs	r2, #0
 8000716:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000718:	4b09      	ldr	r3, [pc, #36]	; (8000740 <MX_USART1_UART_Init+0x4c>)
 800071a:	220c      	movs	r2, #12
 800071c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071e:	4b08      	ldr	r3, [pc, #32]	; (8000740 <MX_USART1_UART_Init+0x4c>)
 8000720:	2200      	movs	r2, #0
 8000722:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000724:	4b06      	ldr	r3, [pc, #24]	; (8000740 <MX_USART1_UART_Init+0x4c>)
 8000726:	2200      	movs	r2, #0
 8000728:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 800072a:	4805      	ldr	r0, [pc, #20]	; (8000740 <MX_USART1_UART_Init+0x4c>)
 800072c:	f003 f9ec 	bl	8003b08 <HAL_UART_Init>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 8000736:	f000 f8ab 	bl	8000890 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	200000ac 	.word	0x200000ac
 8000744:	40011000 	.word	0x40011000

08000748 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <MX_DMA_Init+0x3c>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a0b      	ldr	r2, [pc, #44]	; (8000784 <MX_DMA_Init+0x3c>)
 8000758:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b09      	ldr	r3, [pc, #36]	; (8000784 <MX_DMA_Init+0x3c>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800076a:	2200      	movs	r2, #0
 800076c:	2100      	movs	r1, #0
 800076e:	203a      	movs	r0, #58	; 0x3a
 8000770:	f000 fbcb 	bl	8000f0a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000774:	203a      	movs	r0, #58	; 0x3a
 8000776:	f000 fbe4 	bl	8000f42 <HAL_NVIC_EnableIRQ>

}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40023800 	.word	0x40023800

08000788 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08a      	sub	sp, #40	; 0x28
 800078c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078e:	f107 0314 	add.w	r3, r7, #20
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
 800079c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	613b      	str	r3, [r7, #16]
 80007a2:	4b38      	ldr	r3, [pc, #224]	; (8000884 <MX_GPIO_Init+0xfc>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a37      	ldr	r2, [pc, #220]	; (8000884 <MX_GPIO_Init+0xfc>)
 80007a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b35      	ldr	r3, [pc, #212]	; (8000884 <MX_GPIO_Init+0xfc>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007b6:	613b      	str	r3, [r7, #16]
 80007b8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	60fb      	str	r3, [r7, #12]
 80007be:	4b31      	ldr	r3, [pc, #196]	; (8000884 <MX_GPIO_Init+0xfc>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a30      	ldr	r2, [pc, #192]	; (8000884 <MX_GPIO_Init+0xfc>)
 80007c4:	f043 0304 	orr.w	r3, r3, #4
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b2e      	ldr	r3, [pc, #184]	; (8000884 <MX_GPIO_Init+0xfc>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0304 	and.w	r3, r3, #4
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	60bb      	str	r3, [r7, #8]
 80007da:	4b2a      	ldr	r3, [pc, #168]	; (8000884 <MX_GPIO_Init+0xfc>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a29      	ldr	r2, [pc, #164]	; (8000884 <MX_GPIO_Init+0xfc>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b27      	ldr	r3, [pc, #156]	; (8000884 <MX_GPIO_Init+0xfc>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	4b23      	ldr	r3, [pc, #140]	; (8000884 <MX_GPIO_Init+0xfc>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a22      	ldr	r2, [pc, #136]	; (8000884 <MX_GPIO_Init+0xfc>)
 80007fc:	f043 0308 	orr.w	r3, r3, #8
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b20      	ldr	r3, [pc, #128]	; (8000884 <MX_GPIO_Init+0xfc>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0308 	and.w	r3, r3, #8
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	603b      	str	r3, [r7, #0]
 8000812:	4b1c      	ldr	r3, [pc, #112]	; (8000884 <MX_GPIO_Init+0xfc>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a1b      	ldr	r2, [pc, #108]	; (8000884 <MX_GPIO_Init+0xfc>)
 8000818:	f043 0302 	orr.w	r3, r3, #2
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b19      	ldr	r3, [pc, #100]	; (8000884 <MX_GPIO_Init+0xfc>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0302 	and.w	r3, r3, #2
 8000826:	603b      	str	r3, [r7, #0]
 8000828:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OtgPower_GPIO_Port, OtgPower_Pin, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000830:	4815      	ldr	r0, [pc, #84]	; (8000888 <MX_GPIO_Init+0x100>)
 8000832:	f001 f8ad 	bl	8001990 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, LD1_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	2118      	movs	r1, #24
 800083a:	4814      	ldr	r0, [pc, #80]	; (800088c <MX_GPIO_Init+0x104>)
 800083c:	f001 f8a8 	bl	8001990 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : OtgPower_Pin */
	GPIO_InitStruct.Pin = OtgPower_Pin;
 8000840:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000844:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000846:	2301      	movs	r3, #1
 8000848:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084e:	2300      	movs	r3, #0
 8000850:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(OtgPower_GPIO_Port, &GPIO_InitStruct);
 8000852:	f107 0314 	add.w	r3, r7, #20
 8000856:	4619      	mov	r1, r3
 8000858:	480b      	ldr	r0, [pc, #44]	; (8000888 <MX_GPIO_Init+0x100>)
 800085a:	f000 fefd 	bl	8001658 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin|LD2_Pin;
 800085e:	2318      	movs	r3, #24
 8000860:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000862:	2301      	movs	r3, #1
 8000864:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086a:	2300      	movs	r3, #0
 800086c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800086e:	f107 0314 	add.w	r3, r7, #20
 8000872:	4619      	mov	r1, r3
 8000874:	4805      	ldr	r0, [pc, #20]	; (800088c <MX_GPIO_Init+0x104>)
 8000876:	f000 feef 	bl	8001658 <HAL_GPIO_Init>

}
 800087a:	bf00      	nop
 800087c:	3728      	adds	r7, #40	; 0x28
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40023800 	.word	0x40023800
 8000888:	40020800 	.word	0x40020800
 800088c:	40020c00 	.word	0x40020c00

08000890 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000894:	b672      	cpsid	i
}
 8000896:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000898:	e7fe      	b.n	8000898 <Error_Handler+0x8>
	...

0800089c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	4b10      	ldr	r3, [pc, #64]	; (80008e8 <HAL_MspInit+0x4c>)
 80008a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008aa:	4a0f      	ldr	r2, [pc, #60]	; (80008e8 <HAL_MspInit+0x4c>)
 80008ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008b0:	6453      	str	r3, [r2, #68]	; 0x44
 80008b2:	4b0d      	ldr	r3, [pc, #52]	; (80008e8 <HAL_MspInit+0x4c>)
 80008b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	603b      	str	r3, [r7, #0]
 80008c2:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <HAL_MspInit+0x4c>)
 80008c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c6:	4a08      	ldr	r2, [pc, #32]	; (80008e8 <HAL_MspInit+0x4c>)
 80008c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008cc:	6413      	str	r3, [r2, #64]	; 0x40
 80008ce:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <HAL_MspInit+0x4c>)
 80008d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d6:	603b      	str	r3, [r7, #0]
 80008d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008da:	bf00      	nop
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	40023800 	.word	0x40023800

080008ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08a      	sub	sp, #40	; 0x28
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a30      	ldr	r2, [pc, #192]	; (80009cc <HAL_UART_MspInit+0xe0>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d15a      	bne.n	80009c4 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	613b      	str	r3, [r7, #16]
 8000912:	4b2f      	ldr	r3, [pc, #188]	; (80009d0 <HAL_UART_MspInit+0xe4>)
 8000914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000916:	4a2e      	ldr	r2, [pc, #184]	; (80009d0 <HAL_UART_MspInit+0xe4>)
 8000918:	f043 0310 	orr.w	r3, r3, #16
 800091c:	6453      	str	r3, [r2, #68]	; 0x44
 800091e:	4b2c      	ldr	r3, [pc, #176]	; (80009d0 <HAL_UART_MspInit+0xe4>)
 8000920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000922:	f003 0310 	and.w	r3, r3, #16
 8000926:	613b      	str	r3, [r7, #16]
 8000928:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	4b28      	ldr	r3, [pc, #160]	; (80009d0 <HAL_UART_MspInit+0xe4>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a27      	ldr	r2, [pc, #156]	; (80009d0 <HAL_UART_MspInit+0xe4>)
 8000934:	f043 0302 	orr.w	r3, r3, #2
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b25      	ldr	r3, [pc, #148]	; (80009d0 <HAL_UART_MspInit+0xe4>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0302 	and.w	r3, r3, #2
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000946:	23c0      	movs	r3, #192	; 0xc0
 8000948:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094a:	2302      	movs	r3, #2
 800094c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000952:	2303      	movs	r3, #3
 8000954:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000956:	2307      	movs	r3, #7
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800095a:	f107 0314 	add.w	r3, r7, #20
 800095e:	4619      	mov	r1, r3
 8000960:	481c      	ldr	r0, [pc, #112]	; (80009d4 <HAL_UART_MspInit+0xe8>)
 8000962:	f000 fe79 	bl	8001658 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000966:	4b1c      	ldr	r3, [pc, #112]	; (80009d8 <HAL_UART_MspInit+0xec>)
 8000968:	4a1c      	ldr	r2, [pc, #112]	; (80009dc <HAL_UART_MspInit+0xf0>)
 800096a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800096c:	4b1a      	ldr	r3, [pc, #104]	; (80009d8 <HAL_UART_MspInit+0xec>)
 800096e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000972:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000974:	4b18      	ldr	r3, [pc, #96]	; (80009d8 <HAL_UART_MspInit+0xec>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800097a:	4b17      	ldr	r3, [pc, #92]	; (80009d8 <HAL_UART_MspInit+0xec>)
 800097c:	2200      	movs	r2, #0
 800097e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000980:	4b15      	ldr	r3, [pc, #84]	; (80009d8 <HAL_UART_MspInit+0xec>)
 8000982:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000986:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000988:	4b13      	ldr	r3, [pc, #76]	; (80009d8 <HAL_UART_MspInit+0xec>)
 800098a:	2200      	movs	r2, #0
 800098c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800098e:	4b12      	ldr	r3, [pc, #72]	; (80009d8 <HAL_UART_MspInit+0xec>)
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000994:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <HAL_UART_MspInit+0xec>)
 8000996:	f44f 7280 	mov.w	r2, #256	; 0x100
 800099a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800099c:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <HAL_UART_MspInit+0xec>)
 800099e:	2200      	movs	r2, #0
 80009a0:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009a2:	4b0d      	ldr	r3, [pc, #52]	; (80009d8 <HAL_UART_MspInit+0xec>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80009a8:	480b      	ldr	r0, [pc, #44]	; (80009d8 <HAL_UART_MspInit+0xec>)
 80009aa:	f000 fae5 	bl	8000f78 <HAL_DMA_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80009b4:	f7ff ff6c 	bl	8000890 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	4a07      	ldr	r2, [pc, #28]	; (80009d8 <HAL_UART_MspInit+0xec>)
 80009bc:	639a      	str	r2, [r3, #56]	; 0x38
 80009be:	4a06      	ldr	r2, [pc, #24]	; (80009d8 <HAL_UART_MspInit+0xec>)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80009c4:	bf00      	nop
 80009c6:	3728      	adds	r7, #40	; 0x28
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40011000 	.word	0x40011000
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40020400 	.word	0x40020400
 80009d8:	200000f0 	.word	0x200000f0
 80009dc:	40026440 	.word	0x40026440

080009e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <NMI_Handler+0x4>

080009e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ea:	e7fe      	b.n	80009ea <HardFault_Handler+0x4>

080009ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <MemManage_Handler+0x4>

080009f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009f6:	e7fe      	b.n	80009f6 <BusFault_Handler+0x4>

080009f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009fc:	e7fe      	b.n	80009fc <UsageFault_Handler+0x4>

080009fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr

08000a0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr

08000a1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a2c:	f000 f94e 	bl	8000ccc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000a38:	4802      	ldr	r0, [pc, #8]	; (8000a44 <DMA2_Stream2_IRQHandler+0x10>)
 8000a3a:	f000 fba3 	bl	8001184 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	200000f0 	.word	0x200000f0

08000a48 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000a4c:	4802      	ldr	r0, [pc, #8]	; (8000a58 <OTG_FS_IRQHandler+0x10>)
 8000a4e:	f001 fa23 	bl	8001e98 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000630 	.word	0x20000630

08000a5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a64:	4a14      	ldr	r2, [pc, #80]	; (8000ab8 <_sbrk+0x5c>)
 8000a66:	4b15      	ldr	r3, [pc, #84]	; (8000abc <_sbrk+0x60>)
 8000a68:	1ad3      	subs	r3, r2, r3
 8000a6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a70:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <_sbrk+0x64>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d102      	bne.n	8000a7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a78:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <_sbrk+0x64>)
 8000a7a:	4a12      	ldr	r2, [pc, #72]	; (8000ac4 <_sbrk+0x68>)
 8000a7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a7e:	4b10      	ldr	r3, [pc, #64]	; (8000ac0 <_sbrk+0x64>)
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4413      	add	r3, r2
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d207      	bcs.n	8000a9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a8c:	f008 faf8 	bl	8009080 <__errno>
 8000a90:	4603      	mov	r3, r0
 8000a92:	220c      	movs	r2, #12
 8000a94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a9a:	e009      	b.n	8000ab0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a9c:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <_sbrk+0x64>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aa2:	4b07      	ldr	r3, [pc, #28]	; (8000ac0 <_sbrk+0x64>)
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	4a05      	ldr	r2, [pc, #20]	; (8000ac0 <_sbrk+0x64>)
 8000aac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aae:	68fb      	ldr	r3, [r7, #12]
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3718      	adds	r7, #24
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20020000 	.word	0x20020000
 8000abc:	00000400 	.word	0x00000400
 8000ac0:	20000238 	.word	0x20000238
 8000ac4:	20000948 	.word	0x20000948

08000ac8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000acc:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <SystemInit+0x20>)
 8000ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ad2:	4a05      	ldr	r2, [pc, #20]	; (8000ae8 <SystemInit+0x20>)
 8000ad4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ad8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000aec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000af0:	480d      	ldr	r0, [pc, #52]	; (8000b28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000af2:	490e      	ldr	r1, [pc, #56]	; (8000b2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000af4:	4a0e      	ldr	r2, [pc, #56]	; (8000b30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000af6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af8:	e002      	b.n	8000b00 <LoopCopyDataInit>

08000afa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000afa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000afc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000afe:	3304      	adds	r3, #4

08000b00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b04:	d3f9      	bcc.n	8000afa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b06:	4a0b      	ldr	r2, [pc, #44]	; (8000b34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b08:	4c0b      	ldr	r4, [pc, #44]	; (8000b38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b0c:	e001      	b.n	8000b12 <LoopFillZerobss>

08000b0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b10:	3204      	adds	r2, #4

08000b12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b14:	d3fb      	bcc.n	8000b0e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b16:	f7ff ffd7 	bl	8000ac8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b1a:	f008 fab7 	bl	800908c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b1e:	f7ff fd15 	bl	800054c <main>
  bx  lr    
 8000b22:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b2c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000b30:	08009388 	.word	0x08009388
  ldr r2, =_sbss
 8000b34:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000b38:	20000944 	.word	0x20000944

08000b3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b3c:	e7fe      	b.n	8000b3c <ADC_IRQHandler>

08000b3e <Commander_Init>:

#include "stm32f4xx_hal.h"
#include "commander.h"
#include <string.h>

void Commander_Init(Commander_HandleTypeDef *hcommander, UART_HandleTypeDef *huart, DMA_HandleTypeDef *hdma_uart_rx, void (*command_callback)(Command command)) {
 8000b3e:	b480      	push	{r7}
 8000b40:	b085      	sub	sp, #20
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	60f8      	str	r0, [r7, #12]
 8000b46:	60b9      	str	r1, [r7, #8]
 8000b48:	607a      	str	r2, [r7, #4]
 8000b4a:	603b      	str	r3, [r7, #0]
	hcommander->huart = huart;
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	68ba      	ldr	r2, [r7, #8]
 8000b50:	601a      	str	r2, [r3, #0]
	hcommander->hdma_uart_rx = hdma_uart_rx;
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	687a      	ldr	r2, [r7, #4]
 8000b56:	605a      	str	r2, [r3, #4]
	hcommander->command_index = 0;
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
	hcommander->commands_to_handle = 0;
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	2200      	movs	r2, #0
 8000b64:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
	hcommander->counter = 0;
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	hcommander->command_callback = command_callback;
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	683a      	ldr	r2, [r7, #0]
 8000b74:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
 8000b78:	bf00      	nop
 8000b7a:	3714      	adds	r7, #20
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <Commander_Start>:

void Commander_Start(Commander_HandleTypeDef *hcommander) {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(hcommander->huart, hcommander->uart_rx_buffer, COMMAND_BYTESIZE * 2);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6818      	ldr	r0, [r3, #0]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	3308      	adds	r3, #8
 8000b94:	2214      	movs	r2, #20
 8000b96:	4619      	mov	r1, r3
 8000b98:	f003 f895 	bl	8003cc6 <HAL_UART_Receive_DMA>
}
 8000b9c:	bf00      	nop
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <Commander_Send>:

void Commander_Send(Commander_HandleTypeDef *hcommander, Command *command) {
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	6039      	str	r1, [r7, #0]
	//HAL_StatusTypeDef status;
	/*status = */HAL_UART_Transmit(hcommander->huart, (uint8_t *)command, COMMAND_BYTESIZE, 1000);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6818      	ldr	r0, [r3, #0]
 8000bb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bb6:	220a      	movs	r2, #10
 8000bb8:	6839      	ldr	r1, [r7, #0]
 8000bba:	f002 fff2 	bl	8003ba2 <HAL_UART_Transmit>
}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <Commander_Enqueue>:
		hcommander->commands_to_handle--;
		hcommander->command_callback(hcommander->command_buffer[index]);
	}
}

void Commander_Enqueue(Commander_HandleTypeDef *hcommander, Command *command) {
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b084      	sub	sp, #16
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
 8000bce:	6039      	str	r1, [r7, #0]
	uint8_t index = (hcommander->command_index + hcommander->commands_to_handle) % COMMANDS_COUNT;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8000bdc:	4413      	add	r3, r2
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	f003 030f 	and.w	r3, r3, #15
 8000be4:	73fb      	strb	r3, [r7, #15]
	memcpy(hcommander->command_buffer + index, command, COMMAND_BYTESIZE);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	f103 011c 	add.w	r1, r3, #28
 8000bec:	7bfa      	ldrb	r2, [r7, #15]
 8000bee:	4613      	mov	r3, r2
 8000bf0:	005b      	lsls	r3, r3, #1
 8000bf2:	4413      	add	r3, r2
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	440b      	add	r3, r1
 8000bf8:	220a      	movs	r2, #10
 8000bfa:	6839      	ldr	r1, [r7, #0]
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f008 fa79 	bl	80090f4 <memcpy>
	hcommander->commands_to_handle++;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8000c08:	3301      	adds	r3, #1
 8000c0a:	b2da      	uxtb	r2, r3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
	hcommander->counter++;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c18:	1c5a      	adds	r2, r3, #1
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
}
 8000c20:	bf00      	nop
 8000c22:	3710      	adds	r7, #16
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c2c:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <HAL_Init+0x40>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a0d      	ldr	r2, [pc, #52]	; (8000c68 <HAL_Init+0x40>)
 8000c32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c38:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <HAL_Init+0x40>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a0a      	ldr	r2, [pc, #40]	; (8000c68 <HAL_Init+0x40>)
 8000c3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c44:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <HAL_Init+0x40>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a07      	ldr	r2, [pc, #28]	; (8000c68 <HAL_Init+0x40>)
 8000c4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c50:	2003      	movs	r0, #3
 8000c52:	f000 f94f 	bl	8000ef4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c56:	200f      	movs	r0, #15
 8000c58:	f000 f808 	bl	8000c6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c5c:	f7ff fe1e 	bl	800089c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c60:	2300      	movs	r3, #0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40023c00 	.word	0x40023c00

08000c6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c74:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <HAL_InitTick+0x54>)
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	4b12      	ldr	r3, [pc, #72]	; (8000cc4 <HAL_InitTick+0x58>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f000 f967 	bl	8000f5e <HAL_SYSTICK_Config>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
 8000c98:	e00e      	b.n	8000cb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2b0f      	cmp	r3, #15
 8000c9e:	d80a      	bhi.n	8000cb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	6879      	ldr	r1, [r7, #4]
 8000ca4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ca8:	f000 f92f 	bl	8000f0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cac:	4a06      	ldr	r2, [pc, #24]	; (8000cc8 <HAL_InitTick+0x5c>)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e000      	b.n	8000cb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	20000000 	.word	0x20000000
 8000cc4:	20000008 	.word	0x20000008
 8000cc8:	20000004 	.word	0x20000004

08000ccc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd0:	4b06      	ldr	r3, [pc, #24]	; (8000cec <HAL_IncTick+0x20>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <HAL_IncTick+0x24>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4413      	add	r3, r2
 8000cdc:	4a04      	ldr	r2, [pc, #16]	; (8000cf0 <HAL_IncTick+0x24>)
 8000cde:	6013      	str	r3, [r2, #0]
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	20000008 	.word	0x20000008
 8000cf0:	2000023c 	.word	0x2000023c

08000cf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf8:	4b03      	ldr	r3, [pc, #12]	; (8000d08 <HAL_GetTick+0x14>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	2000023c 	.word	0x2000023c

08000d0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d14:	f7ff ffee 	bl	8000cf4 <HAL_GetTick>
 8000d18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d24:	d005      	beq.n	8000d32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d26:	4b0a      	ldr	r3, [pc, #40]	; (8000d50 <HAL_Delay+0x44>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	4413      	add	r3, r2
 8000d30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d32:	bf00      	nop
 8000d34:	f7ff ffde 	bl	8000cf4 <HAL_GetTick>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	68fa      	ldr	r2, [r7, #12]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d8f7      	bhi.n	8000d34 <HAL_Delay+0x28>
  {
  }
}
 8000d44:	bf00      	nop
 8000d46:	bf00      	nop
 8000d48:	3710      	adds	r7, #16
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	20000008 	.word	0x20000008

08000d54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f003 0307 	and.w	r3, r3, #7
 8000d62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d64:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <__NVIC_SetPriorityGrouping+0x44>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d6a:	68ba      	ldr	r2, [r7, #8]
 8000d6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d70:	4013      	ands	r3, r2
 8000d72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d86:	4a04      	ldr	r2, [pc, #16]	; (8000d98 <__NVIC_SetPriorityGrouping+0x44>)
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	60d3      	str	r3, [r2, #12]
}
 8000d8c:	bf00      	nop
 8000d8e:	3714      	adds	r7, #20
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da0:	4b04      	ldr	r3, [pc, #16]	; (8000db4 <__NVIC_GetPriorityGrouping+0x18>)
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	0a1b      	lsrs	r3, r3, #8
 8000da6:	f003 0307 	and.w	r3, r3, #7
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	db0b      	blt.n	8000de2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	f003 021f 	and.w	r2, r3, #31
 8000dd0:	4907      	ldr	r1, [pc, #28]	; (8000df0 <__NVIC_EnableIRQ+0x38>)
 8000dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd6:	095b      	lsrs	r3, r3, #5
 8000dd8:	2001      	movs	r0, #1
 8000dda:	fa00 f202 	lsl.w	r2, r0, r2
 8000dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000de2:	bf00      	nop
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	e000e100 	.word	0xe000e100

08000df4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	6039      	str	r1, [r7, #0]
 8000dfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	db0a      	blt.n	8000e1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	b2da      	uxtb	r2, r3
 8000e0c:	490c      	ldr	r1, [pc, #48]	; (8000e40 <__NVIC_SetPriority+0x4c>)
 8000e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e12:	0112      	lsls	r2, r2, #4
 8000e14:	b2d2      	uxtb	r2, r2
 8000e16:	440b      	add	r3, r1
 8000e18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e1c:	e00a      	b.n	8000e34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	4908      	ldr	r1, [pc, #32]	; (8000e44 <__NVIC_SetPriority+0x50>)
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	f003 030f 	and.w	r3, r3, #15
 8000e2a:	3b04      	subs	r3, #4
 8000e2c:	0112      	lsls	r2, r2, #4
 8000e2e:	b2d2      	uxtb	r2, r2
 8000e30:	440b      	add	r3, r1
 8000e32:	761a      	strb	r2, [r3, #24]
}
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	e000e100 	.word	0xe000e100
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b089      	sub	sp, #36	; 0x24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	f003 0307 	and.w	r3, r3, #7
 8000e5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	f1c3 0307 	rsb	r3, r3, #7
 8000e62:	2b04      	cmp	r3, #4
 8000e64:	bf28      	it	cs
 8000e66:	2304      	movcs	r3, #4
 8000e68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	3304      	adds	r3, #4
 8000e6e:	2b06      	cmp	r3, #6
 8000e70:	d902      	bls.n	8000e78 <NVIC_EncodePriority+0x30>
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	3b03      	subs	r3, #3
 8000e76:	e000      	b.n	8000e7a <NVIC_EncodePriority+0x32>
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	43da      	mvns	r2, r3
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	401a      	ands	r2, r3
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9a:	43d9      	mvns	r1, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea0:	4313      	orrs	r3, r2
         );
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3724      	adds	r7, #36	; 0x24
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
	...

08000eb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	3b01      	subs	r3, #1
 8000ebc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ec0:	d301      	bcc.n	8000ec6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e00f      	b.n	8000ee6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ec6:	4a0a      	ldr	r2, [pc, #40]	; (8000ef0 <SysTick_Config+0x40>)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ece:	210f      	movs	r1, #15
 8000ed0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ed4:	f7ff ff8e 	bl	8000df4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ed8:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <SysTick_Config+0x40>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ede:	4b04      	ldr	r3, [pc, #16]	; (8000ef0 <SysTick_Config+0x40>)
 8000ee0:	2207      	movs	r2, #7
 8000ee2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	e000e010 	.word	0xe000e010

08000ef4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f7ff ff29 	bl	8000d54 <__NVIC_SetPriorityGrouping>
}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b086      	sub	sp, #24
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	4603      	mov	r3, r0
 8000f12:	60b9      	str	r1, [r7, #8]
 8000f14:	607a      	str	r2, [r7, #4]
 8000f16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f1c:	f7ff ff3e 	bl	8000d9c <__NVIC_GetPriorityGrouping>
 8000f20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	68b9      	ldr	r1, [r7, #8]
 8000f26:	6978      	ldr	r0, [r7, #20]
 8000f28:	f7ff ff8e 	bl	8000e48 <NVIC_EncodePriority>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f32:	4611      	mov	r1, r2
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff ff5d 	bl	8000df4 <__NVIC_SetPriority>
}
 8000f3a:	bf00      	nop
 8000f3c:	3718      	adds	r7, #24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b082      	sub	sp, #8
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	4603      	mov	r3, r0
 8000f4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff ff31 	bl	8000db8 <__NVIC_EnableIRQ>
}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b082      	sub	sp, #8
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f7ff ffa2 	bl	8000eb0 <SysTick_Config>
 8000f6c:	4603      	mov	r3, r0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
	...

08000f78 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000f84:	f7ff feb6 	bl	8000cf4 <HAL_GetTick>
 8000f88:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d101      	bne.n	8000f94 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	e099      	b.n	80010c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2202      	movs	r2, #2
 8000f98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f022 0201 	bic.w	r2, r2, #1
 8000fb2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fb4:	e00f      	b.n	8000fd6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000fb6:	f7ff fe9d 	bl	8000cf4 <HAL_GetTick>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	2b05      	cmp	r3, #5
 8000fc2:	d908      	bls.n	8000fd6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2220      	movs	r2, #32
 8000fc8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2203      	movs	r2, #3
 8000fce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	e078      	b.n	80010c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f003 0301 	and.w	r3, r3, #1
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d1e8      	bne.n	8000fb6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000fec:	697a      	ldr	r2, [r7, #20]
 8000fee:	4b38      	ldr	r3, [pc, #224]	; (80010d0 <HAL_DMA_Init+0x158>)
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	685a      	ldr	r2, [r3, #4]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001002:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	691b      	ldr	r3, [r3, #16]
 8001008:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800100e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	699b      	ldr	r3, [r3, #24]
 8001014:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800101a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6a1b      	ldr	r3, [r3, #32]
 8001020:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001022:	697a      	ldr	r2, [r7, #20]
 8001024:	4313      	orrs	r3, r2
 8001026:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102c:	2b04      	cmp	r3, #4
 800102e:	d107      	bne.n	8001040 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001038:	4313      	orrs	r3, r2
 800103a:	697a      	ldr	r2, [r7, #20]
 800103c:	4313      	orrs	r3, r2
 800103e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	697a      	ldr	r2, [r7, #20]
 8001046:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	695b      	ldr	r3, [r3, #20]
 800104e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	f023 0307 	bic.w	r3, r3, #7
 8001056:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800105c:	697a      	ldr	r2, [r7, #20]
 800105e:	4313      	orrs	r3, r2
 8001060:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001066:	2b04      	cmp	r3, #4
 8001068:	d117      	bne.n	800109a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800106e:	697a      	ldr	r2, [r7, #20]
 8001070:	4313      	orrs	r3, r2
 8001072:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001078:	2b00      	cmp	r3, #0
 800107a:	d00e      	beq.n	800109a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f000 fa6f 	bl	8001560 <DMA_CheckFifoParam>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d008      	beq.n	800109a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2240      	movs	r2, #64	; 0x40
 800108c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2201      	movs	r2, #1
 8001092:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001096:	2301      	movs	r3, #1
 8001098:	e016      	b.n	80010c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	697a      	ldr	r2, [r7, #20]
 80010a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f000 fa26 	bl	80014f4 <DMA_CalcBaseAndBitshift>
 80010a8:	4603      	mov	r3, r0
 80010aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010b0:	223f      	movs	r2, #63	; 0x3f
 80010b2:	409a      	lsls	r2, r3
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2200      	movs	r2, #0
 80010bc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2201      	movs	r2, #1
 80010c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80010c6:	2300      	movs	r3, #0
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3718      	adds	r7, #24
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	f010803f 	.word	0xf010803f

080010d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
 80010e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80010e2:	2300      	movs	r3, #0
 80010e4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d101      	bne.n	80010fa <HAL_DMA_Start_IT+0x26>
 80010f6:	2302      	movs	r3, #2
 80010f8:	e040      	b.n	800117c <HAL_DMA_Start_IT+0xa8>
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	2201      	movs	r2, #1
 80010fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001108:	b2db      	uxtb	r3, r3
 800110a:	2b01      	cmp	r3, #1
 800110c:	d12f      	bne.n	800116e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	2202      	movs	r2, #2
 8001112:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	2200      	movs	r2, #0
 800111a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	68b9      	ldr	r1, [r7, #8]
 8001122:	68f8      	ldr	r0, [r7, #12]
 8001124:	f000 f9b8 	bl	8001498 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800112c:	223f      	movs	r2, #63	; 0x3f
 800112e:	409a      	lsls	r2, r3
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f042 0216 	orr.w	r2, r2, #22
 8001142:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001148:	2b00      	cmp	r3, #0
 800114a:	d007      	beq.n	800115c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f042 0208 	orr.w	r2, r2, #8
 800115a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f042 0201 	orr.w	r2, r2, #1
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	e005      	b.n	800117a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	2200      	movs	r2, #0
 8001172:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001176:	2302      	movs	r3, #2
 8001178:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800117a:	7dfb      	ldrb	r3, [r7, #23]
}
 800117c:	4618      	mov	r0, r3
 800117e:	3718      	adds	r7, #24
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800118c:	2300      	movs	r3, #0
 800118e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001190:	4b8e      	ldr	r3, [pc, #568]	; (80013cc <HAL_DMA_IRQHandler+0x248>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a8e      	ldr	r2, [pc, #568]	; (80013d0 <HAL_DMA_IRQHandler+0x24c>)
 8001196:	fba2 2303 	umull	r2, r3, r2, r3
 800119a:	0a9b      	lsrs	r3, r3, #10
 800119c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011ae:	2208      	movs	r2, #8
 80011b0:	409a      	lsls	r2, r3
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	4013      	ands	r3, r2
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d01a      	beq.n	80011f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 0304 	and.w	r3, r3, #4
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d013      	beq.n	80011f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f022 0204 	bic.w	r2, r2, #4
 80011d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011dc:	2208      	movs	r2, #8
 80011de:	409a      	lsls	r2, r3
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011e8:	f043 0201 	orr.w	r2, r3, #1
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011f4:	2201      	movs	r2, #1
 80011f6:	409a      	lsls	r2, r3
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	4013      	ands	r3, r2
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d012      	beq.n	8001226 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	695b      	ldr	r3, [r3, #20]
 8001206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800120a:	2b00      	cmp	r3, #0
 800120c:	d00b      	beq.n	8001226 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001212:	2201      	movs	r2, #1
 8001214:	409a      	lsls	r2, r3
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800121e:	f043 0202 	orr.w	r2, r3, #2
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800122a:	2204      	movs	r2, #4
 800122c:	409a      	lsls	r2, r3
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	4013      	ands	r3, r2
 8001232:	2b00      	cmp	r3, #0
 8001234:	d012      	beq.n	800125c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 0302 	and.w	r3, r3, #2
 8001240:	2b00      	cmp	r3, #0
 8001242:	d00b      	beq.n	800125c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001248:	2204      	movs	r2, #4
 800124a:	409a      	lsls	r2, r3
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001254:	f043 0204 	orr.w	r2, r3, #4
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001260:	2210      	movs	r2, #16
 8001262:	409a      	lsls	r2, r3
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	4013      	ands	r3, r2
 8001268:	2b00      	cmp	r3, #0
 800126a:	d043      	beq.n	80012f4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0308 	and.w	r3, r3, #8
 8001276:	2b00      	cmp	r3, #0
 8001278:	d03c      	beq.n	80012f4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800127e:	2210      	movs	r2, #16
 8001280:	409a      	lsls	r2, r3
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d018      	beq.n	80012c6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d108      	bne.n	80012b4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d024      	beq.n	80012f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	4798      	blx	r3
 80012b2:	e01f      	b.n	80012f4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d01b      	beq.n	80012f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	4798      	blx	r3
 80012c4:	e016      	b.n	80012f4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d107      	bne.n	80012e4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f022 0208 	bic.w	r2, r2, #8
 80012e2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d003      	beq.n	80012f4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012f8:	2220      	movs	r2, #32
 80012fa:	409a      	lsls	r2, r3
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	4013      	ands	r3, r2
 8001300:	2b00      	cmp	r3, #0
 8001302:	f000 808f 	beq.w	8001424 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 0310 	and.w	r3, r3, #16
 8001310:	2b00      	cmp	r3, #0
 8001312:	f000 8087 	beq.w	8001424 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800131a:	2220      	movs	r2, #32
 800131c:	409a      	lsls	r2, r3
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001328:	b2db      	uxtb	r3, r3
 800132a:	2b05      	cmp	r3, #5
 800132c:	d136      	bne.n	800139c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f022 0216 	bic.w	r2, r2, #22
 800133c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	695a      	ldr	r2, [r3, #20]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800134c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	2b00      	cmp	r3, #0
 8001354:	d103      	bne.n	800135e <HAL_DMA_IRQHandler+0x1da>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800135a:	2b00      	cmp	r3, #0
 800135c:	d007      	beq.n	800136e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f022 0208 	bic.w	r2, r2, #8
 800136c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001372:	223f      	movs	r2, #63	; 0x3f
 8001374:	409a      	lsls	r2, r3
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2201      	movs	r2, #1
 800137e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2200      	movs	r2, #0
 8001386:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800138e:	2b00      	cmp	r3, #0
 8001390:	d07e      	beq.n	8001490 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	4798      	blx	r3
        }
        return;
 800139a:	e079      	b.n	8001490 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d01d      	beq.n	80013e6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d10d      	bne.n	80013d4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d031      	beq.n	8001424 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	4798      	blx	r3
 80013c8:	e02c      	b.n	8001424 <HAL_DMA_IRQHandler+0x2a0>
 80013ca:	bf00      	nop
 80013cc:	20000000 	.word	0x20000000
 80013d0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d023      	beq.n	8001424 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	4798      	blx	r3
 80013e4:	e01e      	b.n	8001424 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d10f      	bne.n	8001414 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f022 0210 	bic.w	r2, r2, #16
 8001402:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2201      	movs	r2, #1
 8001408:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2200      	movs	r2, #0
 8001410:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001418:	2b00      	cmp	r3, #0
 800141a:	d003      	beq.n	8001424 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001428:	2b00      	cmp	r3, #0
 800142a:	d032      	beq.n	8001492 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001430:	f003 0301 	and.w	r3, r3, #1
 8001434:	2b00      	cmp	r3, #0
 8001436:	d022      	beq.n	800147e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2205      	movs	r2, #5
 800143c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f022 0201 	bic.w	r2, r2, #1
 800144e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	3301      	adds	r3, #1
 8001454:	60bb      	str	r3, [r7, #8]
 8001456:	697a      	ldr	r2, [r7, #20]
 8001458:	429a      	cmp	r2, r3
 800145a:	d307      	bcc.n	800146c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	2b00      	cmp	r3, #0
 8001468:	d1f2      	bne.n	8001450 <HAL_DMA_IRQHandler+0x2cc>
 800146a:	e000      	b.n	800146e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800146c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2201      	movs	r2, #1
 8001472:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2200      	movs	r2, #0
 800147a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001482:	2b00      	cmp	r3, #0
 8001484:	d005      	beq.n	8001492 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	4798      	blx	r3
 800148e:	e000      	b.n	8001492 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001490:	bf00      	nop
    }
  }
}
 8001492:	3718      	adds	r7, #24
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
 80014a4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80014b4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	683a      	ldr	r2, [r7, #0]
 80014bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	2b40      	cmp	r3, #64	; 0x40
 80014c4:	d108      	bne.n	80014d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	68ba      	ldr	r2, [r7, #8]
 80014d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80014d6:	e007      	b.n	80014e8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	68ba      	ldr	r2, [r7, #8]
 80014de:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	60da      	str	r2, [r3, #12]
}
 80014e8:	bf00      	nop
 80014ea:	3714      	adds	r7, #20
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	b2db      	uxtb	r3, r3
 8001502:	3b10      	subs	r3, #16
 8001504:	4a14      	ldr	r2, [pc, #80]	; (8001558 <DMA_CalcBaseAndBitshift+0x64>)
 8001506:	fba2 2303 	umull	r2, r3, r2, r3
 800150a:	091b      	lsrs	r3, r3, #4
 800150c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800150e:	4a13      	ldr	r2, [pc, #76]	; (800155c <DMA_CalcBaseAndBitshift+0x68>)
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	4413      	add	r3, r2
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	461a      	mov	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2b03      	cmp	r3, #3
 8001520:	d909      	bls.n	8001536 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800152a:	f023 0303 	bic.w	r3, r3, #3
 800152e:	1d1a      	adds	r2, r3, #4
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	659a      	str	r2, [r3, #88]	; 0x58
 8001534:	e007      	b.n	8001546 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800153e:	f023 0303 	bic.w	r3, r3, #3
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800154a:	4618      	mov	r0, r3
 800154c:	3714      	adds	r7, #20
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	aaaaaaab 	.word	0xaaaaaaab
 800155c:	0800935c 	.word	0x0800935c

08001560 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001568:	2300      	movs	r3, #0
 800156a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001570:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d11f      	bne.n	80015ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	2b03      	cmp	r3, #3
 800157e:	d856      	bhi.n	800162e <DMA_CheckFifoParam+0xce>
 8001580:	a201      	add	r2, pc, #4	; (adr r2, 8001588 <DMA_CheckFifoParam+0x28>)
 8001582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001586:	bf00      	nop
 8001588:	08001599 	.word	0x08001599
 800158c:	080015ab 	.word	0x080015ab
 8001590:	08001599 	.word	0x08001599
 8001594:	0800162f 	.word	0x0800162f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800159c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d046      	beq.n	8001632 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015a8:	e043      	b.n	8001632 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80015b2:	d140      	bne.n	8001636 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015b8:	e03d      	b.n	8001636 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	699b      	ldr	r3, [r3, #24]
 80015be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015c2:	d121      	bne.n	8001608 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	2b03      	cmp	r3, #3
 80015c8:	d837      	bhi.n	800163a <DMA_CheckFifoParam+0xda>
 80015ca:	a201      	add	r2, pc, #4	; (adr r2, 80015d0 <DMA_CheckFifoParam+0x70>)
 80015cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d0:	080015e1 	.word	0x080015e1
 80015d4:	080015e7 	.word	0x080015e7
 80015d8:	080015e1 	.word	0x080015e1
 80015dc:	080015f9 	.word	0x080015f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	73fb      	strb	r3, [r7, #15]
      break;
 80015e4:	e030      	b.n	8001648 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d025      	beq.n	800163e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015f6:	e022      	b.n	800163e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015fc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001600:	d11f      	bne.n	8001642 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001606:	e01c      	b.n	8001642 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	2b02      	cmp	r3, #2
 800160c:	d903      	bls.n	8001616 <DMA_CheckFifoParam+0xb6>
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	2b03      	cmp	r3, #3
 8001612:	d003      	beq.n	800161c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001614:	e018      	b.n	8001648 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	73fb      	strb	r3, [r7, #15]
      break;
 800161a:	e015      	b.n	8001648 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001620:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d00e      	beq.n	8001646 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	73fb      	strb	r3, [r7, #15]
      break;
 800162c:	e00b      	b.n	8001646 <DMA_CheckFifoParam+0xe6>
      break;
 800162e:	bf00      	nop
 8001630:	e00a      	b.n	8001648 <DMA_CheckFifoParam+0xe8>
      break;
 8001632:	bf00      	nop
 8001634:	e008      	b.n	8001648 <DMA_CheckFifoParam+0xe8>
      break;
 8001636:	bf00      	nop
 8001638:	e006      	b.n	8001648 <DMA_CheckFifoParam+0xe8>
      break;
 800163a:	bf00      	nop
 800163c:	e004      	b.n	8001648 <DMA_CheckFifoParam+0xe8>
      break;
 800163e:	bf00      	nop
 8001640:	e002      	b.n	8001648 <DMA_CheckFifoParam+0xe8>
      break;   
 8001642:	bf00      	nop
 8001644:	e000      	b.n	8001648 <DMA_CheckFifoParam+0xe8>
      break;
 8001646:	bf00      	nop
    }
  } 
  
  return status; 
 8001648:	7bfb      	ldrb	r3, [r7, #15]
}
 800164a:	4618      	mov	r0, r3
 800164c:	3714      	adds	r7, #20
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop

08001658 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001658:	b480      	push	{r7}
 800165a:	b089      	sub	sp, #36	; 0x24
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001662:	2300      	movs	r3, #0
 8001664:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001666:	2300      	movs	r3, #0
 8001668:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800166a:	2300      	movs	r3, #0
 800166c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800166e:	2300      	movs	r3, #0
 8001670:	61fb      	str	r3, [r7, #28]
 8001672:	e16b      	b.n	800194c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001674:	2201      	movs	r2, #1
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	697a      	ldr	r2, [r7, #20]
 8001684:	4013      	ands	r3, r2
 8001686:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	429a      	cmp	r2, r3
 800168e:	f040 815a 	bne.w	8001946 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f003 0303 	and.w	r3, r3, #3
 800169a:	2b01      	cmp	r3, #1
 800169c:	d005      	beq.n	80016aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d130      	bne.n	800170c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	2203      	movs	r2, #3
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	43db      	mvns	r3, r3
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	4013      	ands	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	68da      	ldr	r2, [r3, #12]
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016e0:	2201      	movs	r2, #1
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	43db      	mvns	r3, r3
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	4013      	ands	r3, r2
 80016ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	091b      	lsrs	r3, r3, #4
 80016f6:	f003 0201 	and.w	r2, r3, #1
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	4313      	orrs	r3, r2
 8001704:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f003 0303 	and.w	r3, r3, #3
 8001714:	2b03      	cmp	r3, #3
 8001716:	d017      	beq.n	8001748 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	2203      	movs	r2, #3
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	43db      	mvns	r3, r3
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	4013      	ands	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	689a      	ldr	r2, [r3, #8]
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	4313      	orrs	r3, r2
 8001740:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f003 0303 	and.w	r3, r3, #3
 8001750:	2b02      	cmp	r3, #2
 8001752:	d123      	bne.n	800179c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	08da      	lsrs	r2, r3, #3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	3208      	adds	r2, #8
 800175c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001760:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	f003 0307 	and.w	r3, r3, #7
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	220f      	movs	r2, #15
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	43db      	mvns	r3, r3
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	4013      	ands	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	691a      	ldr	r2, [r3, #16]
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	4313      	orrs	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	08da      	lsrs	r2, r3, #3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	3208      	adds	r2, #8
 8001796:	69b9      	ldr	r1, [r7, #24]
 8001798:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	2203      	movs	r2, #3
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	43db      	mvns	r3, r3
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	4013      	ands	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f003 0203 	and.w	r2, r3, #3
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	f000 80b4 	beq.w	8001946 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	60fb      	str	r3, [r7, #12]
 80017e2:	4b60      	ldr	r3, [pc, #384]	; (8001964 <HAL_GPIO_Init+0x30c>)
 80017e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e6:	4a5f      	ldr	r2, [pc, #380]	; (8001964 <HAL_GPIO_Init+0x30c>)
 80017e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017ec:	6453      	str	r3, [r2, #68]	; 0x44
 80017ee:	4b5d      	ldr	r3, [pc, #372]	; (8001964 <HAL_GPIO_Init+0x30c>)
 80017f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017fa:	4a5b      	ldr	r2, [pc, #364]	; (8001968 <HAL_GPIO_Init+0x310>)
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	089b      	lsrs	r3, r3, #2
 8001800:	3302      	adds	r3, #2
 8001802:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001806:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	f003 0303 	and.w	r3, r3, #3
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	220f      	movs	r2, #15
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	43db      	mvns	r3, r3
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	4013      	ands	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a52      	ldr	r2, [pc, #328]	; (800196c <HAL_GPIO_Init+0x314>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d02b      	beq.n	800187e <HAL_GPIO_Init+0x226>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a51      	ldr	r2, [pc, #324]	; (8001970 <HAL_GPIO_Init+0x318>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d025      	beq.n	800187a <HAL_GPIO_Init+0x222>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a50      	ldr	r2, [pc, #320]	; (8001974 <HAL_GPIO_Init+0x31c>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d01f      	beq.n	8001876 <HAL_GPIO_Init+0x21e>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a4f      	ldr	r2, [pc, #316]	; (8001978 <HAL_GPIO_Init+0x320>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d019      	beq.n	8001872 <HAL_GPIO_Init+0x21a>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a4e      	ldr	r2, [pc, #312]	; (800197c <HAL_GPIO_Init+0x324>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d013      	beq.n	800186e <HAL_GPIO_Init+0x216>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a4d      	ldr	r2, [pc, #308]	; (8001980 <HAL_GPIO_Init+0x328>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d00d      	beq.n	800186a <HAL_GPIO_Init+0x212>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a4c      	ldr	r2, [pc, #304]	; (8001984 <HAL_GPIO_Init+0x32c>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d007      	beq.n	8001866 <HAL_GPIO_Init+0x20e>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a4b      	ldr	r2, [pc, #300]	; (8001988 <HAL_GPIO_Init+0x330>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d101      	bne.n	8001862 <HAL_GPIO_Init+0x20a>
 800185e:	2307      	movs	r3, #7
 8001860:	e00e      	b.n	8001880 <HAL_GPIO_Init+0x228>
 8001862:	2308      	movs	r3, #8
 8001864:	e00c      	b.n	8001880 <HAL_GPIO_Init+0x228>
 8001866:	2306      	movs	r3, #6
 8001868:	e00a      	b.n	8001880 <HAL_GPIO_Init+0x228>
 800186a:	2305      	movs	r3, #5
 800186c:	e008      	b.n	8001880 <HAL_GPIO_Init+0x228>
 800186e:	2304      	movs	r3, #4
 8001870:	e006      	b.n	8001880 <HAL_GPIO_Init+0x228>
 8001872:	2303      	movs	r3, #3
 8001874:	e004      	b.n	8001880 <HAL_GPIO_Init+0x228>
 8001876:	2302      	movs	r3, #2
 8001878:	e002      	b.n	8001880 <HAL_GPIO_Init+0x228>
 800187a:	2301      	movs	r3, #1
 800187c:	e000      	b.n	8001880 <HAL_GPIO_Init+0x228>
 800187e:	2300      	movs	r3, #0
 8001880:	69fa      	ldr	r2, [r7, #28]
 8001882:	f002 0203 	and.w	r2, r2, #3
 8001886:	0092      	lsls	r2, r2, #2
 8001888:	4093      	lsls	r3, r2
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	4313      	orrs	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001890:	4935      	ldr	r1, [pc, #212]	; (8001968 <HAL_GPIO_Init+0x310>)
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	089b      	lsrs	r3, r3, #2
 8001896:	3302      	adds	r3, #2
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800189e:	4b3b      	ldr	r3, [pc, #236]	; (800198c <HAL_GPIO_Init+0x334>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	43db      	mvns	r3, r3
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	4013      	ands	r3, r2
 80018ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d003      	beq.n	80018c2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	4313      	orrs	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018c2:	4a32      	ldr	r2, [pc, #200]	; (800198c <HAL_GPIO_Init+0x334>)
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018c8:	4b30      	ldr	r3, [pc, #192]	; (800198c <HAL_GPIO_Init+0x334>)
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	43db      	mvns	r3, r3
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	4013      	ands	r3, r2
 80018d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d003      	beq.n	80018ec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018ec:	4a27      	ldr	r2, [pc, #156]	; (800198c <HAL_GPIO_Init+0x334>)
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018f2:	4b26      	ldr	r3, [pc, #152]	; (800198c <HAL_GPIO_Init+0x334>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	43db      	mvns	r3, r3
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	4013      	ands	r3, r2
 8001900:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d003      	beq.n	8001916 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	4313      	orrs	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001916:	4a1d      	ldr	r2, [pc, #116]	; (800198c <HAL_GPIO_Init+0x334>)
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800191c:	4b1b      	ldr	r3, [pc, #108]	; (800198c <HAL_GPIO_Init+0x334>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	43db      	mvns	r3, r3
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	4013      	ands	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d003      	beq.n	8001940 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	4313      	orrs	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001940:	4a12      	ldr	r2, [pc, #72]	; (800198c <HAL_GPIO_Init+0x334>)
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	3301      	adds	r3, #1
 800194a:	61fb      	str	r3, [r7, #28]
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	2b0f      	cmp	r3, #15
 8001950:	f67f ae90 	bls.w	8001674 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001954:	bf00      	nop
 8001956:	bf00      	nop
 8001958:	3724      	adds	r7, #36	; 0x24
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	40023800 	.word	0x40023800
 8001968:	40013800 	.word	0x40013800
 800196c:	40020000 	.word	0x40020000
 8001970:	40020400 	.word	0x40020400
 8001974:	40020800 	.word	0x40020800
 8001978:	40020c00 	.word	0x40020c00
 800197c:	40021000 	.word	0x40021000
 8001980:	40021400 	.word	0x40021400
 8001984:	40021800 	.word	0x40021800
 8001988:	40021c00 	.word	0x40021c00
 800198c:	40013c00 	.word	0x40013c00

08001990 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	460b      	mov	r3, r1
 800199a:	807b      	strh	r3, [r7, #2]
 800199c:	4613      	mov	r3, r2
 800199e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019a0:	787b      	ldrb	r3, [r7, #1]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d003      	beq.n	80019ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019a6:	887a      	ldrh	r2, [r7, #2]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019ac:	e003      	b.n	80019b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019ae:	887b      	ldrh	r3, [r7, #2]
 80019b0:	041a      	lsls	r2, r3, #16
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	619a      	str	r2, [r3, #24]
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80019c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019c4:	b08f      	sub	sp, #60	; 0x3c
 80019c6:	af0a      	add	r7, sp, #40	; 0x28
 80019c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d101      	bne.n	80019d4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e054      	b.n	8001a7e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d106      	bne.n	80019f4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f007 f86c 	bl	8008acc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2203      	movs	r2, #3
 80019f8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d102      	bne.n	8001a0e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f002 ff14 	bl	8004840 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	603b      	str	r3, [r7, #0]
 8001a1e:	687e      	ldr	r6, [r7, #4]
 8001a20:	466d      	mov	r5, sp
 8001a22:	f106 0410 	add.w	r4, r6, #16
 8001a26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a2e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a32:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a36:	1d33      	adds	r3, r6, #4
 8001a38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a3a:	6838      	ldr	r0, [r7, #0]
 8001a3c:	f002 fe8e 	bl	800475c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2101      	movs	r1, #1
 8001a46:	4618      	mov	r0, r3
 8001a48:	f002 ff0b 	bl	8004862 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	603b      	str	r3, [r7, #0]
 8001a52:	687e      	ldr	r6, [r7, #4]
 8001a54:	466d      	mov	r5, sp
 8001a56:	f106 0410 	add.w	r4, r6, #16
 8001a5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a62:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a66:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a6a:	1d33      	adds	r3, r6, #4
 8001a6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a6e:	6838      	ldr	r0, [r7, #0]
 8001a70:	f003 f894 	bl	8004b9c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3714      	adds	r7, #20
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a86 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001a86:	b590      	push	{r4, r7, lr}
 8001a88:	b089      	sub	sp, #36	; 0x24
 8001a8a:	af04      	add	r7, sp, #16
 8001a8c:	6078      	str	r0, [r7, #4]
 8001a8e:	4608      	mov	r0, r1
 8001a90:	4611      	mov	r1, r2
 8001a92:	461a      	mov	r2, r3
 8001a94:	4603      	mov	r3, r0
 8001a96:	70fb      	strb	r3, [r7, #3]
 8001a98:	460b      	mov	r3, r1
 8001a9a:	70bb      	strb	r3, [r7, #2]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d101      	bne.n	8001aae <HAL_HCD_HC_Init+0x28>
 8001aaa:	2302      	movs	r3, #2
 8001aac:	e076      	b.n	8001b9c <HAL_HCD_HC_Init+0x116>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001ab6:	78fb      	ldrb	r3, [r7, #3]
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	212c      	movs	r1, #44	; 0x2c
 8001abc:	fb01 f303 	mul.w	r3, r1, r3
 8001ac0:	4413      	add	r3, r2
 8001ac2:	333d      	adds	r3, #61	; 0x3d
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001ac8:	78fb      	ldrb	r3, [r7, #3]
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	212c      	movs	r1, #44	; 0x2c
 8001ace:	fb01 f303 	mul.w	r3, r1, r3
 8001ad2:	4413      	add	r3, r2
 8001ad4:	3338      	adds	r3, #56	; 0x38
 8001ad6:	787a      	ldrb	r2, [r7, #1]
 8001ad8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001ada:	78fb      	ldrb	r3, [r7, #3]
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	212c      	movs	r1, #44	; 0x2c
 8001ae0:	fb01 f303 	mul.w	r3, r1, r3
 8001ae4:	4413      	add	r3, r2
 8001ae6:	3340      	adds	r3, #64	; 0x40
 8001ae8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001aea:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001aec:	78fb      	ldrb	r3, [r7, #3]
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	212c      	movs	r1, #44	; 0x2c
 8001af2:	fb01 f303 	mul.w	r3, r1, r3
 8001af6:	4413      	add	r3, r2
 8001af8:	3339      	adds	r3, #57	; 0x39
 8001afa:	78fa      	ldrb	r2, [r7, #3]
 8001afc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001afe:	78fb      	ldrb	r3, [r7, #3]
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	212c      	movs	r1, #44	; 0x2c
 8001b04:	fb01 f303 	mul.w	r3, r1, r3
 8001b08:	4413      	add	r3, r2
 8001b0a:	333f      	adds	r3, #63	; 0x3f
 8001b0c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001b10:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001b12:	78fb      	ldrb	r3, [r7, #3]
 8001b14:	78ba      	ldrb	r2, [r7, #2]
 8001b16:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b1a:	b2d0      	uxtb	r0, r2
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	212c      	movs	r1, #44	; 0x2c
 8001b20:	fb01 f303 	mul.w	r3, r1, r3
 8001b24:	4413      	add	r3, r2
 8001b26:	333a      	adds	r3, #58	; 0x3a
 8001b28:	4602      	mov	r2, r0
 8001b2a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001b2c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	da09      	bge.n	8001b48 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001b34:	78fb      	ldrb	r3, [r7, #3]
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	212c      	movs	r1, #44	; 0x2c
 8001b3a:	fb01 f303 	mul.w	r3, r1, r3
 8001b3e:	4413      	add	r3, r2
 8001b40:	333b      	adds	r3, #59	; 0x3b
 8001b42:	2201      	movs	r2, #1
 8001b44:	701a      	strb	r2, [r3, #0]
 8001b46:	e008      	b.n	8001b5a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001b48:	78fb      	ldrb	r3, [r7, #3]
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	212c      	movs	r1, #44	; 0x2c
 8001b4e:	fb01 f303 	mul.w	r3, r1, r3
 8001b52:	4413      	add	r3, r2
 8001b54:	333b      	adds	r3, #59	; 0x3b
 8001b56:	2200      	movs	r2, #0
 8001b58:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001b5a:	78fb      	ldrb	r3, [r7, #3]
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	212c      	movs	r1, #44	; 0x2c
 8001b60:	fb01 f303 	mul.w	r3, r1, r3
 8001b64:	4413      	add	r3, r2
 8001b66:	333c      	adds	r3, #60	; 0x3c
 8001b68:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001b6c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6818      	ldr	r0, [r3, #0]
 8001b72:	787c      	ldrb	r4, [r7, #1]
 8001b74:	78ba      	ldrb	r2, [r7, #2]
 8001b76:	78f9      	ldrb	r1, [r7, #3]
 8001b78:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001b7a:	9302      	str	r3, [sp, #8]
 8001b7c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001b80:	9301      	str	r3, [sp, #4]
 8001b82:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b86:	9300      	str	r3, [sp, #0]
 8001b88:	4623      	mov	r3, r4
 8001b8a:	f003 f98d 	bl	8004ea8 <USB_HC_Init>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3714      	adds	r7, #20
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd90      	pop	{r4, r7, pc}

08001ba4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	460b      	mov	r3, r1
 8001bae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d101      	bne.n	8001bc2 <HAL_HCD_HC_Halt+0x1e>
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	e00f      	b.n	8001be2 <HAL_HCD_HC_Halt+0x3e>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	78fa      	ldrb	r2, [r7, #3]
 8001bd0:	4611      	mov	r1, r2
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f003 fbdd 	bl	8005392 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
	...

08001bec <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	4608      	mov	r0, r1
 8001bf6:	4611      	mov	r1, r2
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	70fb      	strb	r3, [r7, #3]
 8001bfe:	460b      	mov	r3, r1
 8001c00:	70bb      	strb	r3, [r7, #2]
 8001c02:	4613      	mov	r3, r2
 8001c04:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001c06:	78fb      	ldrb	r3, [r7, #3]
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	212c      	movs	r1, #44	; 0x2c
 8001c0c:	fb01 f303 	mul.w	r3, r1, r3
 8001c10:	4413      	add	r3, r2
 8001c12:	333b      	adds	r3, #59	; 0x3b
 8001c14:	78ba      	ldrb	r2, [r7, #2]
 8001c16:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001c18:	78fb      	ldrb	r3, [r7, #3]
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	212c      	movs	r1, #44	; 0x2c
 8001c1e:	fb01 f303 	mul.w	r3, r1, r3
 8001c22:	4413      	add	r3, r2
 8001c24:	333f      	adds	r3, #63	; 0x3f
 8001c26:	787a      	ldrb	r2, [r7, #1]
 8001c28:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001c2a:	7c3b      	ldrb	r3, [r7, #16]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d112      	bne.n	8001c56 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001c30:	78fb      	ldrb	r3, [r7, #3]
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	212c      	movs	r1, #44	; 0x2c
 8001c36:	fb01 f303 	mul.w	r3, r1, r3
 8001c3a:	4413      	add	r3, r2
 8001c3c:	3342      	adds	r3, #66	; 0x42
 8001c3e:	2203      	movs	r2, #3
 8001c40:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001c42:	78fb      	ldrb	r3, [r7, #3]
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	212c      	movs	r1, #44	; 0x2c
 8001c48:	fb01 f303 	mul.w	r3, r1, r3
 8001c4c:	4413      	add	r3, r2
 8001c4e:	333d      	adds	r3, #61	; 0x3d
 8001c50:	7f3a      	ldrb	r2, [r7, #28]
 8001c52:	701a      	strb	r2, [r3, #0]
 8001c54:	e008      	b.n	8001c68 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c56:	78fb      	ldrb	r3, [r7, #3]
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	212c      	movs	r1, #44	; 0x2c
 8001c5c:	fb01 f303 	mul.w	r3, r1, r3
 8001c60:	4413      	add	r3, r2
 8001c62:	3342      	adds	r3, #66	; 0x42
 8001c64:	2202      	movs	r2, #2
 8001c66:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001c68:	787b      	ldrb	r3, [r7, #1]
 8001c6a:	2b03      	cmp	r3, #3
 8001c6c:	f200 80c6 	bhi.w	8001dfc <HAL_HCD_HC_SubmitRequest+0x210>
 8001c70:	a201      	add	r2, pc, #4	; (adr r2, 8001c78 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c76:	bf00      	nop
 8001c78:	08001c89 	.word	0x08001c89
 8001c7c:	08001de9 	.word	0x08001de9
 8001c80:	08001ced 	.word	0x08001ced
 8001c84:	08001d6b 	.word	0x08001d6b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001c88:	7c3b      	ldrb	r3, [r7, #16]
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	f040 80b8 	bne.w	8001e00 <HAL_HCD_HC_SubmitRequest+0x214>
 8001c90:	78bb      	ldrb	r3, [r7, #2]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	f040 80b4 	bne.w	8001e00 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001c98:	8b3b      	ldrh	r3, [r7, #24]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d108      	bne.n	8001cb0 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001c9e:	78fb      	ldrb	r3, [r7, #3]
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	212c      	movs	r1, #44	; 0x2c
 8001ca4:	fb01 f303 	mul.w	r3, r1, r3
 8001ca8:	4413      	add	r3, r2
 8001caa:	3355      	adds	r3, #85	; 0x55
 8001cac:	2201      	movs	r2, #1
 8001cae:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001cb0:	78fb      	ldrb	r3, [r7, #3]
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	212c      	movs	r1, #44	; 0x2c
 8001cb6:	fb01 f303 	mul.w	r3, r1, r3
 8001cba:	4413      	add	r3, r2
 8001cbc:	3355      	adds	r3, #85	; 0x55
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d109      	bne.n	8001cd8 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cc4:	78fb      	ldrb	r3, [r7, #3]
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	212c      	movs	r1, #44	; 0x2c
 8001cca:	fb01 f303 	mul.w	r3, r1, r3
 8001cce:	4413      	add	r3, r2
 8001cd0:	3342      	adds	r3, #66	; 0x42
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001cd6:	e093      	b.n	8001e00 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cd8:	78fb      	ldrb	r3, [r7, #3]
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	212c      	movs	r1, #44	; 0x2c
 8001cde:	fb01 f303 	mul.w	r3, r1, r3
 8001ce2:	4413      	add	r3, r2
 8001ce4:	3342      	adds	r3, #66	; 0x42
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	701a      	strb	r2, [r3, #0]
      break;
 8001cea:	e089      	b.n	8001e00 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001cec:	78bb      	ldrb	r3, [r7, #2]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d11d      	bne.n	8001d2e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001cf2:	78fb      	ldrb	r3, [r7, #3]
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	212c      	movs	r1, #44	; 0x2c
 8001cf8:	fb01 f303 	mul.w	r3, r1, r3
 8001cfc:	4413      	add	r3, r2
 8001cfe:	3355      	adds	r3, #85	; 0x55
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d109      	bne.n	8001d1a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d06:	78fb      	ldrb	r3, [r7, #3]
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	212c      	movs	r1, #44	; 0x2c
 8001d0c:	fb01 f303 	mul.w	r3, r1, r3
 8001d10:	4413      	add	r3, r2
 8001d12:	3342      	adds	r3, #66	; 0x42
 8001d14:	2200      	movs	r2, #0
 8001d16:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001d18:	e073      	b.n	8001e02 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d1a:	78fb      	ldrb	r3, [r7, #3]
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	212c      	movs	r1, #44	; 0x2c
 8001d20:	fb01 f303 	mul.w	r3, r1, r3
 8001d24:	4413      	add	r3, r2
 8001d26:	3342      	adds	r3, #66	; 0x42
 8001d28:	2202      	movs	r2, #2
 8001d2a:	701a      	strb	r2, [r3, #0]
      break;
 8001d2c:	e069      	b.n	8001e02 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001d2e:	78fb      	ldrb	r3, [r7, #3]
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	212c      	movs	r1, #44	; 0x2c
 8001d34:	fb01 f303 	mul.w	r3, r1, r3
 8001d38:	4413      	add	r3, r2
 8001d3a:	3354      	adds	r3, #84	; 0x54
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d109      	bne.n	8001d56 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d42:	78fb      	ldrb	r3, [r7, #3]
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	212c      	movs	r1, #44	; 0x2c
 8001d48:	fb01 f303 	mul.w	r3, r1, r3
 8001d4c:	4413      	add	r3, r2
 8001d4e:	3342      	adds	r3, #66	; 0x42
 8001d50:	2200      	movs	r2, #0
 8001d52:	701a      	strb	r2, [r3, #0]
      break;
 8001d54:	e055      	b.n	8001e02 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d56:	78fb      	ldrb	r3, [r7, #3]
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	212c      	movs	r1, #44	; 0x2c
 8001d5c:	fb01 f303 	mul.w	r3, r1, r3
 8001d60:	4413      	add	r3, r2
 8001d62:	3342      	adds	r3, #66	; 0x42
 8001d64:	2202      	movs	r2, #2
 8001d66:	701a      	strb	r2, [r3, #0]
      break;
 8001d68:	e04b      	b.n	8001e02 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001d6a:	78bb      	ldrb	r3, [r7, #2]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d11d      	bne.n	8001dac <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001d70:	78fb      	ldrb	r3, [r7, #3]
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	212c      	movs	r1, #44	; 0x2c
 8001d76:	fb01 f303 	mul.w	r3, r1, r3
 8001d7a:	4413      	add	r3, r2
 8001d7c:	3355      	adds	r3, #85	; 0x55
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d109      	bne.n	8001d98 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d84:	78fb      	ldrb	r3, [r7, #3]
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	212c      	movs	r1, #44	; 0x2c
 8001d8a:	fb01 f303 	mul.w	r3, r1, r3
 8001d8e:	4413      	add	r3, r2
 8001d90:	3342      	adds	r3, #66	; 0x42
 8001d92:	2200      	movs	r2, #0
 8001d94:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001d96:	e034      	b.n	8001e02 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d98:	78fb      	ldrb	r3, [r7, #3]
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	212c      	movs	r1, #44	; 0x2c
 8001d9e:	fb01 f303 	mul.w	r3, r1, r3
 8001da2:	4413      	add	r3, r2
 8001da4:	3342      	adds	r3, #66	; 0x42
 8001da6:	2202      	movs	r2, #2
 8001da8:	701a      	strb	r2, [r3, #0]
      break;
 8001daa:	e02a      	b.n	8001e02 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001dac:	78fb      	ldrb	r3, [r7, #3]
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	212c      	movs	r1, #44	; 0x2c
 8001db2:	fb01 f303 	mul.w	r3, r1, r3
 8001db6:	4413      	add	r3, r2
 8001db8:	3354      	adds	r3, #84	; 0x54
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d109      	bne.n	8001dd4 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001dc0:	78fb      	ldrb	r3, [r7, #3]
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	212c      	movs	r1, #44	; 0x2c
 8001dc6:	fb01 f303 	mul.w	r3, r1, r3
 8001dca:	4413      	add	r3, r2
 8001dcc:	3342      	adds	r3, #66	; 0x42
 8001dce:	2200      	movs	r2, #0
 8001dd0:	701a      	strb	r2, [r3, #0]
      break;
 8001dd2:	e016      	b.n	8001e02 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001dd4:	78fb      	ldrb	r3, [r7, #3]
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	212c      	movs	r1, #44	; 0x2c
 8001dda:	fb01 f303 	mul.w	r3, r1, r3
 8001dde:	4413      	add	r3, r2
 8001de0:	3342      	adds	r3, #66	; 0x42
 8001de2:	2202      	movs	r2, #2
 8001de4:	701a      	strb	r2, [r3, #0]
      break;
 8001de6:	e00c      	b.n	8001e02 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001de8:	78fb      	ldrb	r3, [r7, #3]
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	212c      	movs	r1, #44	; 0x2c
 8001dee:	fb01 f303 	mul.w	r3, r1, r3
 8001df2:	4413      	add	r3, r2
 8001df4:	3342      	adds	r3, #66	; 0x42
 8001df6:	2200      	movs	r2, #0
 8001df8:	701a      	strb	r2, [r3, #0]
      break;
 8001dfa:	e002      	b.n	8001e02 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001dfc:	bf00      	nop
 8001dfe:	e000      	b.n	8001e02 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001e00:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001e02:	78fb      	ldrb	r3, [r7, #3]
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	212c      	movs	r1, #44	; 0x2c
 8001e08:	fb01 f303 	mul.w	r3, r1, r3
 8001e0c:	4413      	add	r3, r2
 8001e0e:	3344      	adds	r3, #68	; 0x44
 8001e10:	697a      	ldr	r2, [r7, #20]
 8001e12:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001e14:	78fb      	ldrb	r3, [r7, #3]
 8001e16:	8b3a      	ldrh	r2, [r7, #24]
 8001e18:	6879      	ldr	r1, [r7, #4]
 8001e1a:	202c      	movs	r0, #44	; 0x2c
 8001e1c:	fb00 f303 	mul.w	r3, r0, r3
 8001e20:	440b      	add	r3, r1
 8001e22:	334c      	adds	r3, #76	; 0x4c
 8001e24:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001e26:	78fb      	ldrb	r3, [r7, #3]
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	212c      	movs	r1, #44	; 0x2c
 8001e2c:	fb01 f303 	mul.w	r3, r1, r3
 8001e30:	4413      	add	r3, r2
 8001e32:	3360      	adds	r3, #96	; 0x60
 8001e34:	2200      	movs	r2, #0
 8001e36:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001e38:	78fb      	ldrb	r3, [r7, #3]
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	212c      	movs	r1, #44	; 0x2c
 8001e3e:	fb01 f303 	mul.w	r3, r1, r3
 8001e42:	4413      	add	r3, r2
 8001e44:	3350      	adds	r3, #80	; 0x50
 8001e46:	2200      	movs	r2, #0
 8001e48:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001e4a:	78fb      	ldrb	r3, [r7, #3]
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	212c      	movs	r1, #44	; 0x2c
 8001e50:	fb01 f303 	mul.w	r3, r1, r3
 8001e54:	4413      	add	r3, r2
 8001e56:	3339      	adds	r3, #57	; 0x39
 8001e58:	78fa      	ldrb	r2, [r7, #3]
 8001e5a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001e5c:	78fb      	ldrb	r3, [r7, #3]
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	212c      	movs	r1, #44	; 0x2c
 8001e62:	fb01 f303 	mul.w	r3, r1, r3
 8001e66:	4413      	add	r3, r2
 8001e68:	3361      	adds	r3, #97	; 0x61
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6818      	ldr	r0, [r3, #0]
 8001e72:	78fb      	ldrb	r3, [r7, #3]
 8001e74:	222c      	movs	r2, #44	; 0x2c
 8001e76:	fb02 f303 	mul.w	r3, r2, r3
 8001e7a:	3338      	adds	r3, #56	; 0x38
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	18d1      	adds	r1, r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	691b      	ldr	r3, [r3, #16]
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	461a      	mov	r2, r3
 8001e88:	f003 f930 	bl	80050ec <USB_HC_StartXfer>
 8001e8c:	4603      	mov	r3, r0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop

08001e98 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f002 fe31 	bl	8004b16 <USB_GetMode>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	f040 80f6 	bne.w	80020a8 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f002 fe15 	bl	8004af0 <USB_ReadInterrupts>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f000 80ec 	beq.w	80020a6 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f002 fe0c 	bl	8004af0 <USB_ReadInterrupts>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ede:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ee2:	d104      	bne.n	8001eee <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001eec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f002 fdfc 	bl	8004af0 <USB_ReadInterrupts>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001efe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f02:	d104      	bne.n	8001f0e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001f0c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f002 fdec 	bl	8004af0 <USB_ReadInterrupts>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f1e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001f22:	d104      	bne.n	8001f2e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f2c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f002 fddc 	bl	8004af0 <USB_ReadInterrupts>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d103      	bne.n	8001f4a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2202      	movs	r2, #2
 8001f48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f002 fdce 	bl	8004af0 <USB_ReadInterrupts>
 8001f54:	4603      	mov	r3, r0
 8001f56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f5e:	d11c      	bne.n	8001f9a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001f68:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d10f      	bne.n	8001f9a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001f7a:	2110      	movs	r1, #16
 8001f7c:	6938      	ldr	r0, [r7, #16]
 8001f7e:	f002 fcbd 	bl	80048fc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001f82:	6938      	ldr	r0, [r7, #16]
 8001f84:	f002 fcee 	bl	8004964 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2101      	movs	r1, #1
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f002 fec4 	bl	8004d1c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f006 fe17 	bl	8008bc8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f002 fda6 	bl	8004af0 <USB_ReadInterrupts>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001faa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fae:	d102      	bne.n	8001fb6 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f001 f89e 	bl	80030f2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f002 fd98 	bl	8004af0 <USB_ReadInterrupts>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	f003 0308 	and.w	r3, r3, #8
 8001fc6:	2b08      	cmp	r3, #8
 8001fc8:	d106      	bne.n	8001fd8 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f006 fde0 	bl	8008b90 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2208      	movs	r2, #8
 8001fd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f002 fd87 	bl	8004af0 <USB_ReadInterrupts>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	f003 0310 	and.w	r3, r3, #16
 8001fe8:	2b10      	cmp	r3, #16
 8001fea:	d101      	bne.n	8001ff0 <HAL_HCD_IRQHandler+0x158>
 8001fec:	2301      	movs	r3, #1
 8001fee:	e000      	b.n	8001ff2 <HAL_HCD_IRQHandler+0x15a>
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d012      	beq.n	800201c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	699a      	ldr	r2, [r3, #24]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f022 0210 	bic.w	r2, r2, #16
 8002004:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 ffa1 	bl	8002f4e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	699a      	ldr	r2, [r3, #24]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f042 0210 	orr.w	r2, r2, #16
 800201a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4618      	mov	r0, r3
 8002022:	f002 fd65 	bl	8004af0 <USB_ReadInterrupts>
 8002026:	4603      	mov	r3, r0
 8002028:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002030:	d13a      	bne.n	80020a8 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	f003 f99a 	bl	8005370 <USB_HC_ReadInterrupt>
 800203c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800203e:	2300      	movs	r3, #0
 8002040:	617b      	str	r3, [r7, #20]
 8002042:	e025      	b.n	8002090 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	f003 030f 	and.w	r3, r3, #15
 800204a:	68ba      	ldr	r2, [r7, #8]
 800204c:	fa22 f303 	lsr.w	r3, r2, r3
 8002050:	f003 0301 	and.w	r3, r3, #1
 8002054:	2b00      	cmp	r3, #0
 8002056:	d018      	beq.n	800208a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	015a      	lsls	r2, r3, #5
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	4413      	add	r3, r2
 8002060:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800206a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800206e:	d106      	bne.n	800207e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	b2db      	uxtb	r3, r3
 8002074:	4619      	mov	r1, r3
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f8ab 	bl	80021d2 <HCD_HC_IN_IRQHandler>
 800207c:	e005      	b.n	800208a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	b2db      	uxtb	r3, r3
 8002082:	4619      	mov	r1, r3
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 fbf9 	bl	800287c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	3301      	adds	r3, #1
 800208e:	617b      	str	r3, [r7, #20]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	697a      	ldr	r2, [r7, #20]
 8002096:	429a      	cmp	r2, r3
 8002098:	d3d4      	bcc.n	8002044 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020a2:	615a      	str	r2, [r3, #20]
 80020a4:	e000      	b.n	80020a8 <HAL_HCD_IRQHandler+0x210>
      return;
 80020a6:	bf00      	nop
    }
  }
}
 80020a8:	3718      	adds	r7, #24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b082      	sub	sp, #8
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d101      	bne.n	80020c4 <HAL_HCD_Start+0x16>
 80020c0:	2302      	movs	r3, #2
 80020c2:	e013      	b.n	80020ec <HAL_HCD_Start+0x3e>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2101      	movs	r1, #1
 80020d2:	4618      	mov	r0, r3
 80020d4:	f002 fe86 	bl	8004de4 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4618      	mov	r0, r3
 80020de:	f002 fb9e 	bl	800481e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002102:	2b01      	cmp	r3, #1
 8002104:	d101      	bne.n	800210a <HAL_HCD_Stop+0x16>
 8002106:	2302      	movs	r3, #2
 8002108:	e00d      	b.n	8002126 <HAL_HCD_Stop+0x32>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2201      	movs	r2, #1
 800210e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f003 fa74 	bl	8005604 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b082      	sub	sp, #8
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f002 fe28 	bl	8004d90 <USB_ResetPort>
 8002140:	4603      	mov	r3, r0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800214a:	b480      	push	{r7}
 800214c:	b083      	sub	sp, #12
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
 8002152:	460b      	mov	r3, r1
 8002154:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002156:	78fb      	ldrb	r3, [r7, #3]
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	212c      	movs	r1, #44	; 0x2c
 800215c:	fb01 f303 	mul.w	r3, r1, r3
 8002160:	4413      	add	r3, r2
 8002162:	3360      	adds	r3, #96	; 0x60
 8002164:	781b      	ldrb	r3, [r3, #0]
}
 8002166:	4618      	mov	r0, r3
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002172:	b480      	push	{r7}
 8002174:	b083      	sub	sp, #12
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
 800217a:	460b      	mov	r3, r1
 800217c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800217e:	78fb      	ldrb	r3, [r7, #3]
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	212c      	movs	r1, #44	; 0x2c
 8002184:	fb01 f303 	mul.w	r3, r1, r3
 8002188:	4413      	add	r3, r2
 800218a:	3350      	adds	r3, #80	; 0x50
 800218c:	681b      	ldr	r3, [r3, #0]
}
 800218e:	4618      	mov	r0, r3
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b082      	sub	sp, #8
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f002 fe6c 	bl	8004e84 <USB_GetCurrentFrame>
 80021ac:	4603      	mov	r3, r0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b082      	sub	sp, #8
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f002 fe47 	bl	8004e56 <USB_GetHostSpeed>
 80021c8:	4603      	mov	r3, r0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b086      	sub	sp, #24
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
 80021da:	460b      	mov	r3, r1
 80021dc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80021e8:	78fb      	ldrb	r3, [r7, #3]
 80021ea:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	015a      	lsls	r2, r3, #5
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	4413      	add	r3, r2
 80021f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f003 0304 	and.w	r3, r3, #4
 80021fe:	2b04      	cmp	r3, #4
 8002200:	d11a      	bne.n	8002238 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	015a      	lsls	r2, r3, #5
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	4413      	add	r3, r2
 800220a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800220e:	461a      	mov	r2, r3
 8002210:	2304      	movs	r3, #4
 8002212:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	212c      	movs	r1, #44	; 0x2c
 800221a:	fb01 f303 	mul.w	r3, r1, r3
 800221e:	4413      	add	r3, r2
 8002220:	3361      	adds	r3, #97	; 0x61
 8002222:	2206      	movs	r2, #6
 8002224:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	b2d2      	uxtb	r2, r2
 800222e:	4611      	mov	r1, r2
 8002230:	4618      	mov	r0, r3
 8002232:	f003 f8ae 	bl	8005392 <USB_HC_Halt>
 8002236:	e0af      	b.n	8002398 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	015a      	lsls	r2, r3, #5
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	4413      	add	r3, r2
 8002240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800224a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800224e:	d11b      	bne.n	8002288 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	015a      	lsls	r2, r3, #5
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	4413      	add	r3, r2
 8002258:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800225c:	461a      	mov	r2, r3
 800225e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002262:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	212c      	movs	r1, #44	; 0x2c
 800226a:	fb01 f303 	mul.w	r3, r1, r3
 800226e:	4413      	add	r3, r2
 8002270:	3361      	adds	r3, #97	; 0x61
 8002272:	2207      	movs	r2, #7
 8002274:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	b2d2      	uxtb	r2, r2
 800227e:	4611      	mov	r1, r2
 8002280:	4618      	mov	r0, r3
 8002282:	f003 f886 	bl	8005392 <USB_HC_Halt>
 8002286:	e087      	b.n	8002398 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	015a      	lsls	r2, r3, #5
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	4413      	add	r3, r2
 8002290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f003 0320 	and.w	r3, r3, #32
 800229a:	2b20      	cmp	r3, #32
 800229c:	d109      	bne.n	80022b2 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	015a      	lsls	r2, r3, #5
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	4413      	add	r3, r2
 80022a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022aa:	461a      	mov	r2, r3
 80022ac:	2320      	movs	r3, #32
 80022ae:	6093      	str	r3, [r2, #8]
 80022b0:	e072      	b.n	8002398 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	015a      	lsls	r2, r3, #5
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	4413      	add	r3, r2
 80022ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f003 0308 	and.w	r3, r3, #8
 80022c4:	2b08      	cmp	r3, #8
 80022c6:	d11a      	bne.n	80022fe <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	015a      	lsls	r2, r3, #5
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	4413      	add	r3, r2
 80022d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022d4:	461a      	mov	r2, r3
 80022d6:	2308      	movs	r3, #8
 80022d8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	212c      	movs	r1, #44	; 0x2c
 80022e0:	fb01 f303 	mul.w	r3, r1, r3
 80022e4:	4413      	add	r3, r2
 80022e6:	3361      	adds	r3, #97	; 0x61
 80022e8:	2205      	movs	r2, #5
 80022ea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	b2d2      	uxtb	r2, r2
 80022f4:	4611      	mov	r1, r2
 80022f6:	4618      	mov	r0, r3
 80022f8:	f003 f84b 	bl	8005392 <USB_HC_Halt>
 80022fc:	e04c      	b.n	8002398 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	015a      	lsls	r2, r3, #5
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	4413      	add	r3, r2
 8002306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002310:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002314:	d11b      	bne.n	800234e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	015a      	lsls	r2, r3, #5
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	4413      	add	r3, r2
 800231e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002322:	461a      	mov	r2, r3
 8002324:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002328:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	212c      	movs	r1, #44	; 0x2c
 8002330:	fb01 f303 	mul.w	r3, r1, r3
 8002334:	4413      	add	r3, r2
 8002336:	3361      	adds	r3, #97	; 0x61
 8002338:	2208      	movs	r2, #8
 800233a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	b2d2      	uxtb	r2, r2
 8002344:	4611      	mov	r1, r2
 8002346:	4618      	mov	r0, r3
 8002348:	f003 f823 	bl	8005392 <USB_HC_Halt>
 800234c:	e024      	b.n	8002398 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	015a      	lsls	r2, r3, #5
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	4413      	add	r3, r2
 8002356:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002360:	2b80      	cmp	r3, #128	; 0x80
 8002362:	d119      	bne.n	8002398 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	015a      	lsls	r2, r3, #5
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	4413      	add	r3, r2
 800236c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002370:	461a      	mov	r2, r3
 8002372:	2380      	movs	r3, #128	; 0x80
 8002374:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	212c      	movs	r1, #44	; 0x2c
 800237c:	fb01 f303 	mul.w	r3, r1, r3
 8002380:	4413      	add	r3, r2
 8002382:	3361      	adds	r3, #97	; 0x61
 8002384:	2206      	movs	r2, #6
 8002386:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68fa      	ldr	r2, [r7, #12]
 800238e:	b2d2      	uxtb	r2, r2
 8002390:	4611      	mov	r1, r2
 8002392:	4618      	mov	r0, r3
 8002394:	f002 fffd 	bl	8005392 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	015a      	lsls	r2, r3, #5
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	4413      	add	r3, r2
 80023a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023ae:	d112      	bne.n	80023d6 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	b2d2      	uxtb	r2, r2
 80023b8:	4611      	mov	r1, r2
 80023ba:	4618      	mov	r0, r3
 80023bc:	f002 ffe9 	bl	8005392 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	015a      	lsls	r2, r3, #5
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	4413      	add	r3, r2
 80023c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023cc:	461a      	mov	r2, r3
 80023ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023d2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80023d4:	e24e      	b.n	8002874 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	015a      	lsls	r2, r3, #5
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	4413      	add	r3, r2
 80023de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	f040 80df 	bne.w	80025ac <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d019      	beq.n	800242a <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	212c      	movs	r1, #44	; 0x2c
 80023fc:	fb01 f303 	mul.w	r3, r1, r3
 8002400:	4413      	add	r3, r2
 8002402:	3348      	adds	r3, #72	; 0x48
 8002404:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	0159      	lsls	r1, r3, #5
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	440b      	add	r3, r1
 800240e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002418:	1ad2      	subs	r2, r2, r3
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	202c      	movs	r0, #44	; 0x2c
 8002420:	fb00 f303 	mul.w	r3, r0, r3
 8002424:	440b      	add	r3, r1
 8002426:	3350      	adds	r3, #80	; 0x50
 8002428:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	212c      	movs	r1, #44	; 0x2c
 8002430:	fb01 f303 	mul.w	r3, r1, r3
 8002434:	4413      	add	r3, r2
 8002436:	3361      	adds	r3, #97	; 0x61
 8002438:	2201      	movs	r2, #1
 800243a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	212c      	movs	r1, #44	; 0x2c
 8002442:	fb01 f303 	mul.w	r3, r1, r3
 8002446:	4413      	add	r3, r2
 8002448:	335c      	adds	r3, #92	; 0x5c
 800244a:	2200      	movs	r2, #0
 800244c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	015a      	lsls	r2, r3, #5
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	4413      	add	r3, r2
 8002456:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800245a:	461a      	mov	r2, r3
 800245c:	2301      	movs	r3, #1
 800245e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	212c      	movs	r1, #44	; 0x2c
 8002466:	fb01 f303 	mul.w	r3, r1, r3
 800246a:	4413      	add	r3, r2
 800246c:	333f      	adds	r3, #63	; 0x3f
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d009      	beq.n	8002488 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	212c      	movs	r1, #44	; 0x2c
 800247a:	fb01 f303 	mul.w	r3, r1, r3
 800247e:	4413      	add	r3, r2
 8002480:	333f      	adds	r3, #63	; 0x3f
 8002482:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002484:	2b02      	cmp	r3, #2
 8002486:	d111      	bne.n	80024ac <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68fa      	ldr	r2, [r7, #12]
 800248e:	b2d2      	uxtb	r2, r2
 8002490:	4611      	mov	r1, r2
 8002492:	4618      	mov	r0, r3
 8002494:	f002 ff7d 	bl	8005392 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	015a      	lsls	r2, r3, #5
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	4413      	add	r3, r2
 80024a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a4:	461a      	mov	r2, r3
 80024a6:	2310      	movs	r3, #16
 80024a8:	6093      	str	r3, [r2, #8]
 80024aa:	e03a      	b.n	8002522 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	212c      	movs	r1, #44	; 0x2c
 80024b2:	fb01 f303 	mul.w	r3, r1, r3
 80024b6:	4413      	add	r3, r2
 80024b8:	333f      	adds	r3, #63	; 0x3f
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	2b03      	cmp	r3, #3
 80024be:	d009      	beq.n	80024d4 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	212c      	movs	r1, #44	; 0x2c
 80024c6:	fb01 f303 	mul.w	r3, r1, r3
 80024ca:	4413      	add	r3, r2
 80024cc:	333f      	adds	r3, #63	; 0x3f
 80024ce:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d126      	bne.n	8002522 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	015a      	lsls	r2, r3, #5
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	4413      	add	r3, r2
 80024dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	0151      	lsls	r1, r2, #5
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	440a      	add	r2, r1
 80024ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80024f2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	212c      	movs	r1, #44	; 0x2c
 80024fa:	fb01 f303 	mul.w	r3, r1, r3
 80024fe:	4413      	add	r3, r2
 8002500:	3360      	adds	r3, #96	; 0x60
 8002502:	2201      	movs	r2, #1
 8002504:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	b2d9      	uxtb	r1, r3
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	202c      	movs	r0, #44	; 0x2c
 8002510:	fb00 f303 	mul.w	r3, r0, r3
 8002514:	4413      	add	r3, r2
 8002516:	3360      	adds	r3, #96	; 0x60
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	461a      	mov	r2, r3
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f006 fb61 	bl	8008be4 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d12b      	bne.n	8002582 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	212c      	movs	r1, #44	; 0x2c
 8002530:	fb01 f303 	mul.w	r3, r1, r3
 8002534:	4413      	add	r3, r2
 8002536:	3348      	adds	r3, #72	; 0x48
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	6879      	ldr	r1, [r7, #4]
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	202c      	movs	r0, #44	; 0x2c
 8002540:	fb00 f202 	mul.w	r2, r0, r2
 8002544:	440a      	add	r2, r1
 8002546:	3240      	adds	r2, #64	; 0x40
 8002548:	8812      	ldrh	r2, [r2, #0]
 800254a:	fbb3 f3f2 	udiv	r3, r3, r2
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	2b00      	cmp	r3, #0
 8002554:	f000 818e 	beq.w	8002874 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	212c      	movs	r1, #44	; 0x2c
 800255e:	fb01 f303 	mul.w	r3, r1, r3
 8002562:	4413      	add	r3, r2
 8002564:	3354      	adds	r3, #84	; 0x54
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	f083 0301 	eor.w	r3, r3, #1
 800256c:	b2d8      	uxtb	r0, r3
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	212c      	movs	r1, #44	; 0x2c
 8002574:	fb01 f303 	mul.w	r3, r1, r3
 8002578:	4413      	add	r3, r2
 800257a:	3354      	adds	r3, #84	; 0x54
 800257c:	4602      	mov	r2, r0
 800257e:	701a      	strb	r2, [r3, #0]
}
 8002580:	e178      	b.n	8002874 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	212c      	movs	r1, #44	; 0x2c
 8002588:	fb01 f303 	mul.w	r3, r1, r3
 800258c:	4413      	add	r3, r2
 800258e:	3354      	adds	r3, #84	; 0x54
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	f083 0301 	eor.w	r3, r3, #1
 8002596:	b2d8      	uxtb	r0, r3
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	212c      	movs	r1, #44	; 0x2c
 800259e:	fb01 f303 	mul.w	r3, r1, r3
 80025a2:	4413      	add	r3, r2
 80025a4:	3354      	adds	r3, #84	; 0x54
 80025a6:	4602      	mov	r2, r0
 80025a8:	701a      	strb	r2, [r3, #0]
}
 80025aa:	e163      	b.n	8002874 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	015a      	lsls	r2, r3, #5
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	4413      	add	r3, r2
 80025b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b02      	cmp	r3, #2
 80025c0:	f040 80f6 	bne.w	80027b0 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	212c      	movs	r1, #44	; 0x2c
 80025ca:	fb01 f303 	mul.w	r3, r1, r3
 80025ce:	4413      	add	r3, r2
 80025d0:	3361      	adds	r3, #97	; 0x61
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d109      	bne.n	80025ec <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	212c      	movs	r1, #44	; 0x2c
 80025de:	fb01 f303 	mul.w	r3, r1, r3
 80025e2:	4413      	add	r3, r2
 80025e4:	3360      	adds	r3, #96	; 0x60
 80025e6:	2201      	movs	r2, #1
 80025e8:	701a      	strb	r2, [r3, #0]
 80025ea:	e0c9      	b.n	8002780 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	212c      	movs	r1, #44	; 0x2c
 80025f2:	fb01 f303 	mul.w	r3, r1, r3
 80025f6:	4413      	add	r3, r2
 80025f8:	3361      	adds	r3, #97	; 0x61
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	2b05      	cmp	r3, #5
 80025fe:	d109      	bne.n	8002614 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	212c      	movs	r1, #44	; 0x2c
 8002606:	fb01 f303 	mul.w	r3, r1, r3
 800260a:	4413      	add	r3, r2
 800260c:	3360      	adds	r3, #96	; 0x60
 800260e:	2205      	movs	r2, #5
 8002610:	701a      	strb	r2, [r3, #0]
 8002612:	e0b5      	b.n	8002780 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	212c      	movs	r1, #44	; 0x2c
 800261a:	fb01 f303 	mul.w	r3, r1, r3
 800261e:	4413      	add	r3, r2
 8002620:	3361      	adds	r3, #97	; 0x61
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	2b06      	cmp	r3, #6
 8002626:	d009      	beq.n	800263c <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	212c      	movs	r1, #44	; 0x2c
 800262e:	fb01 f303 	mul.w	r3, r1, r3
 8002632:	4413      	add	r3, r2
 8002634:	3361      	adds	r3, #97	; 0x61
 8002636:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002638:	2b08      	cmp	r3, #8
 800263a:	d150      	bne.n	80026de <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	212c      	movs	r1, #44	; 0x2c
 8002642:	fb01 f303 	mul.w	r3, r1, r3
 8002646:	4413      	add	r3, r2
 8002648:	335c      	adds	r3, #92	; 0x5c
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	1c5a      	adds	r2, r3, #1
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	202c      	movs	r0, #44	; 0x2c
 8002654:	fb00 f303 	mul.w	r3, r0, r3
 8002658:	440b      	add	r3, r1
 800265a:	335c      	adds	r3, #92	; 0x5c
 800265c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	212c      	movs	r1, #44	; 0x2c
 8002664:	fb01 f303 	mul.w	r3, r1, r3
 8002668:	4413      	add	r3, r2
 800266a:	335c      	adds	r3, #92	; 0x5c
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2b02      	cmp	r3, #2
 8002670:	d912      	bls.n	8002698 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	212c      	movs	r1, #44	; 0x2c
 8002678:	fb01 f303 	mul.w	r3, r1, r3
 800267c:	4413      	add	r3, r2
 800267e:	335c      	adds	r3, #92	; 0x5c
 8002680:	2200      	movs	r2, #0
 8002682:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	212c      	movs	r1, #44	; 0x2c
 800268a:	fb01 f303 	mul.w	r3, r1, r3
 800268e:	4413      	add	r3, r2
 8002690:	3360      	adds	r3, #96	; 0x60
 8002692:	2204      	movs	r2, #4
 8002694:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002696:	e073      	b.n	8002780 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	212c      	movs	r1, #44	; 0x2c
 800269e:	fb01 f303 	mul.w	r3, r1, r3
 80026a2:	4413      	add	r3, r2
 80026a4:	3360      	adds	r3, #96	; 0x60
 80026a6:	2202      	movs	r2, #2
 80026a8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	015a      	lsls	r2, r3, #5
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	4413      	add	r3, r2
 80026b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80026c0:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80026c8:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	015a      	lsls	r2, r3, #5
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	4413      	add	r3, r2
 80026d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d6:	461a      	mov	r2, r3
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80026dc:	e050      	b.n	8002780 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	212c      	movs	r1, #44	; 0x2c
 80026e4:	fb01 f303 	mul.w	r3, r1, r3
 80026e8:	4413      	add	r3, r2
 80026ea:	3361      	adds	r3, #97	; 0x61
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	2b03      	cmp	r3, #3
 80026f0:	d122      	bne.n	8002738 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	212c      	movs	r1, #44	; 0x2c
 80026f8:	fb01 f303 	mul.w	r3, r1, r3
 80026fc:	4413      	add	r3, r2
 80026fe:	3360      	adds	r3, #96	; 0x60
 8002700:	2202      	movs	r2, #2
 8002702:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	015a      	lsls	r2, r3, #5
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	4413      	add	r3, r2
 800270c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800271a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002722:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	015a      	lsls	r2, r3, #5
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	4413      	add	r3, r2
 800272c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002730:	461a      	mov	r2, r3
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	6013      	str	r3, [r2, #0]
 8002736:	e023      	b.n	8002780 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	212c      	movs	r1, #44	; 0x2c
 800273e:	fb01 f303 	mul.w	r3, r1, r3
 8002742:	4413      	add	r3, r2
 8002744:	3361      	adds	r3, #97	; 0x61
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	2b07      	cmp	r3, #7
 800274a:	d119      	bne.n	8002780 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	212c      	movs	r1, #44	; 0x2c
 8002752:	fb01 f303 	mul.w	r3, r1, r3
 8002756:	4413      	add	r3, r2
 8002758:	335c      	adds	r3, #92	; 0x5c
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	1c5a      	adds	r2, r3, #1
 800275e:	6879      	ldr	r1, [r7, #4]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	202c      	movs	r0, #44	; 0x2c
 8002764:	fb00 f303 	mul.w	r3, r0, r3
 8002768:	440b      	add	r3, r1
 800276a:	335c      	adds	r3, #92	; 0x5c
 800276c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	212c      	movs	r1, #44	; 0x2c
 8002774:	fb01 f303 	mul.w	r3, r1, r3
 8002778:	4413      	add	r3, r2
 800277a:	3360      	adds	r3, #96	; 0x60
 800277c:	2204      	movs	r2, #4
 800277e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	015a      	lsls	r2, r3, #5
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	4413      	add	r3, r2
 8002788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800278c:	461a      	mov	r2, r3
 800278e:	2302      	movs	r3, #2
 8002790:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	b2d9      	uxtb	r1, r3
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	202c      	movs	r0, #44	; 0x2c
 800279c:	fb00 f303 	mul.w	r3, r0, r3
 80027a0:	4413      	add	r3, r2
 80027a2:	3360      	adds	r3, #96	; 0x60
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	461a      	mov	r2, r3
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f006 fa1b 	bl	8008be4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80027ae:	e061      	b.n	8002874 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	015a      	lsls	r2, r3, #5
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	4413      	add	r3, r2
 80027b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f003 0310 	and.w	r3, r3, #16
 80027c2:	2b10      	cmp	r3, #16
 80027c4:	d156      	bne.n	8002874 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	212c      	movs	r1, #44	; 0x2c
 80027cc:	fb01 f303 	mul.w	r3, r1, r3
 80027d0:	4413      	add	r3, r2
 80027d2:	333f      	adds	r3, #63	; 0x3f
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	2b03      	cmp	r3, #3
 80027d8:	d111      	bne.n	80027fe <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	212c      	movs	r1, #44	; 0x2c
 80027e0:	fb01 f303 	mul.w	r3, r1, r3
 80027e4:	4413      	add	r3, r2
 80027e6:	335c      	adds	r3, #92	; 0x5c
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	b2d2      	uxtb	r2, r2
 80027f4:	4611      	mov	r1, r2
 80027f6:	4618      	mov	r0, r3
 80027f8:	f002 fdcb 	bl	8005392 <USB_HC_Halt>
 80027fc:	e031      	b.n	8002862 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	212c      	movs	r1, #44	; 0x2c
 8002804:	fb01 f303 	mul.w	r3, r1, r3
 8002808:	4413      	add	r3, r2
 800280a:	333f      	adds	r3, #63	; 0x3f
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d009      	beq.n	8002826 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	212c      	movs	r1, #44	; 0x2c
 8002818:	fb01 f303 	mul.w	r3, r1, r3
 800281c:	4413      	add	r3, r2
 800281e:	333f      	adds	r3, #63	; 0x3f
 8002820:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002822:	2b02      	cmp	r3, #2
 8002824:	d11d      	bne.n	8002862 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	212c      	movs	r1, #44	; 0x2c
 800282c:	fb01 f303 	mul.w	r3, r1, r3
 8002830:	4413      	add	r3, r2
 8002832:	335c      	adds	r3, #92	; 0x5c
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	691b      	ldr	r3, [r3, #16]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d110      	bne.n	8002862 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	212c      	movs	r1, #44	; 0x2c
 8002846:	fb01 f303 	mul.w	r3, r1, r3
 800284a:	4413      	add	r3, r2
 800284c:	3361      	adds	r3, #97	; 0x61
 800284e:	2203      	movs	r2, #3
 8002850:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	b2d2      	uxtb	r2, r2
 800285a:	4611      	mov	r1, r2
 800285c:	4618      	mov	r0, r3
 800285e:	f002 fd98 	bl	8005392 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	015a      	lsls	r2, r3, #5
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	4413      	add	r3, r2
 800286a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800286e:	461a      	mov	r2, r3
 8002870:	2310      	movs	r3, #16
 8002872:	6093      	str	r3, [r2, #8]
}
 8002874:	bf00      	nop
 8002876:	3718      	adds	r7, #24
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b088      	sub	sp, #32
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	460b      	mov	r3, r1
 8002886:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002892:	78fb      	ldrb	r3, [r7, #3]
 8002894:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	015a      	lsls	r2, r3, #5
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	4413      	add	r3, r2
 800289e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f003 0304 	and.w	r3, r3, #4
 80028a8:	2b04      	cmp	r3, #4
 80028aa:	d11a      	bne.n	80028e2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	015a      	lsls	r2, r3, #5
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	4413      	add	r3, r2
 80028b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028b8:	461a      	mov	r2, r3
 80028ba:	2304      	movs	r3, #4
 80028bc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	212c      	movs	r1, #44	; 0x2c
 80028c4:	fb01 f303 	mul.w	r3, r1, r3
 80028c8:	4413      	add	r3, r2
 80028ca:	3361      	adds	r3, #97	; 0x61
 80028cc:	2206      	movs	r2, #6
 80028ce:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	697a      	ldr	r2, [r7, #20]
 80028d6:	b2d2      	uxtb	r2, r2
 80028d8:	4611      	mov	r1, r2
 80028da:	4618      	mov	r0, r3
 80028dc:	f002 fd59 	bl	8005392 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80028e0:	e331      	b.n	8002f46 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	015a      	lsls	r2, r3, #5
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	4413      	add	r3, r2
 80028ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f003 0320 	and.w	r3, r3, #32
 80028f4:	2b20      	cmp	r3, #32
 80028f6:	d12e      	bne.n	8002956 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	015a      	lsls	r2, r3, #5
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	4413      	add	r3, r2
 8002900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002904:	461a      	mov	r2, r3
 8002906:	2320      	movs	r3, #32
 8002908:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	212c      	movs	r1, #44	; 0x2c
 8002910:	fb01 f303 	mul.w	r3, r1, r3
 8002914:	4413      	add	r3, r2
 8002916:	333d      	adds	r3, #61	; 0x3d
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	2b01      	cmp	r3, #1
 800291c:	f040 8313 	bne.w	8002f46 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	212c      	movs	r1, #44	; 0x2c
 8002926:	fb01 f303 	mul.w	r3, r1, r3
 800292a:	4413      	add	r3, r2
 800292c:	333d      	adds	r3, #61	; 0x3d
 800292e:	2200      	movs	r2, #0
 8002930:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	212c      	movs	r1, #44	; 0x2c
 8002938:	fb01 f303 	mul.w	r3, r1, r3
 800293c:	4413      	add	r3, r2
 800293e:	3360      	adds	r3, #96	; 0x60
 8002940:	2202      	movs	r2, #2
 8002942:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	697a      	ldr	r2, [r7, #20]
 800294a:	b2d2      	uxtb	r2, r2
 800294c:	4611      	mov	r1, r2
 800294e:	4618      	mov	r0, r3
 8002950:	f002 fd1f 	bl	8005392 <USB_HC_Halt>
}
 8002954:	e2f7      	b.n	8002f46 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	015a      	lsls	r2, r3, #5
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	4413      	add	r3, r2
 800295e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002968:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800296c:	d112      	bne.n	8002994 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	015a      	lsls	r2, r3, #5
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	4413      	add	r3, r2
 8002976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800297a:	461a      	mov	r2, r3
 800297c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002980:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	b2d2      	uxtb	r2, r2
 800298a:	4611      	mov	r1, r2
 800298c:	4618      	mov	r0, r3
 800298e:	f002 fd00 	bl	8005392 <USB_HC_Halt>
}
 8002992:	e2d8      	b.n	8002f46 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	015a      	lsls	r2, r3, #5
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	4413      	add	r3, r2
 800299c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d140      	bne.n	8002a2c <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	212c      	movs	r1, #44	; 0x2c
 80029b0:	fb01 f303 	mul.w	r3, r1, r3
 80029b4:	4413      	add	r3, r2
 80029b6:	335c      	adds	r3, #92	; 0x5c
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	015a      	lsls	r2, r3, #5
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	4413      	add	r3, r2
 80029c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ce:	2b40      	cmp	r3, #64	; 0x40
 80029d0:	d111      	bne.n	80029f6 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	212c      	movs	r1, #44	; 0x2c
 80029d8:	fb01 f303 	mul.w	r3, r1, r3
 80029dc:	4413      	add	r3, r2
 80029de:	333d      	adds	r3, #61	; 0x3d
 80029e0:	2201      	movs	r2, #1
 80029e2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	015a      	lsls	r2, r3, #5
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	4413      	add	r3, r2
 80029ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f0:	461a      	mov	r2, r3
 80029f2:	2340      	movs	r3, #64	; 0x40
 80029f4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	015a      	lsls	r2, r3, #5
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	4413      	add	r3, r2
 80029fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a02:	461a      	mov	r2, r3
 8002a04:	2301      	movs	r3, #1
 8002a06:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	212c      	movs	r1, #44	; 0x2c
 8002a0e:	fb01 f303 	mul.w	r3, r1, r3
 8002a12:	4413      	add	r3, r2
 8002a14:	3361      	adds	r3, #97	; 0x61
 8002a16:	2201      	movs	r2, #1
 8002a18:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	b2d2      	uxtb	r2, r2
 8002a22:	4611      	mov	r1, r2
 8002a24:	4618      	mov	r0, r3
 8002a26:	f002 fcb4 	bl	8005392 <USB_HC_Halt>
}
 8002a2a:	e28c      	b.n	8002f46 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	015a      	lsls	r2, r3, #5
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	4413      	add	r3, r2
 8002a34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a3e:	2b40      	cmp	r3, #64	; 0x40
 8002a40:	d12c      	bne.n	8002a9c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	212c      	movs	r1, #44	; 0x2c
 8002a48:	fb01 f303 	mul.w	r3, r1, r3
 8002a4c:	4413      	add	r3, r2
 8002a4e:	3361      	adds	r3, #97	; 0x61
 8002a50:	2204      	movs	r2, #4
 8002a52:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	212c      	movs	r1, #44	; 0x2c
 8002a5a:	fb01 f303 	mul.w	r3, r1, r3
 8002a5e:	4413      	add	r3, r2
 8002a60:	333d      	adds	r3, #61	; 0x3d
 8002a62:	2201      	movs	r2, #1
 8002a64:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	212c      	movs	r1, #44	; 0x2c
 8002a6c:	fb01 f303 	mul.w	r3, r1, r3
 8002a70:	4413      	add	r3, r2
 8002a72:	335c      	adds	r3, #92	; 0x5c
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	697a      	ldr	r2, [r7, #20]
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	4611      	mov	r1, r2
 8002a82:	4618      	mov	r0, r3
 8002a84:	f002 fc85 	bl	8005392 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	015a      	lsls	r2, r3, #5
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	4413      	add	r3, r2
 8002a90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a94:	461a      	mov	r2, r3
 8002a96:	2340      	movs	r3, #64	; 0x40
 8002a98:	6093      	str	r3, [r2, #8]
}
 8002a9a:	e254      	b.n	8002f46 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	015a      	lsls	r2, r3, #5
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f003 0308 	and.w	r3, r3, #8
 8002aae:	2b08      	cmp	r3, #8
 8002ab0:	d11a      	bne.n	8002ae8 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	015a      	lsls	r2, r3, #5
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	4413      	add	r3, r2
 8002aba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002abe:	461a      	mov	r2, r3
 8002ac0:	2308      	movs	r3, #8
 8002ac2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	212c      	movs	r1, #44	; 0x2c
 8002aca:	fb01 f303 	mul.w	r3, r1, r3
 8002ace:	4413      	add	r3, r2
 8002ad0:	3361      	adds	r3, #97	; 0x61
 8002ad2:	2205      	movs	r2, #5
 8002ad4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	697a      	ldr	r2, [r7, #20]
 8002adc:	b2d2      	uxtb	r2, r2
 8002ade:	4611      	mov	r1, r2
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f002 fc56 	bl	8005392 <USB_HC_Halt>
}
 8002ae6:	e22e      	b.n	8002f46 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	015a      	lsls	r2, r3, #5
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	4413      	add	r3, r2
 8002af0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f003 0310 	and.w	r3, r3, #16
 8002afa:	2b10      	cmp	r3, #16
 8002afc:	d140      	bne.n	8002b80 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	212c      	movs	r1, #44	; 0x2c
 8002b04:	fb01 f303 	mul.w	r3, r1, r3
 8002b08:	4413      	add	r3, r2
 8002b0a:	335c      	adds	r3, #92	; 0x5c
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	212c      	movs	r1, #44	; 0x2c
 8002b16:	fb01 f303 	mul.w	r3, r1, r3
 8002b1a:	4413      	add	r3, r2
 8002b1c:	3361      	adds	r3, #97	; 0x61
 8002b1e:	2203      	movs	r2, #3
 8002b20:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	212c      	movs	r1, #44	; 0x2c
 8002b28:	fb01 f303 	mul.w	r3, r1, r3
 8002b2c:	4413      	add	r3, r2
 8002b2e:	333d      	adds	r3, #61	; 0x3d
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d112      	bne.n	8002b5c <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	212c      	movs	r1, #44	; 0x2c
 8002b3c:	fb01 f303 	mul.w	r3, r1, r3
 8002b40:	4413      	add	r3, r2
 8002b42:	333c      	adds	r3, #60	; 0x3c
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d108      	bne.n	8002b5c <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	212c      	movs	r1, #44	; 0x2c
 8002b50:	fb01 f303 	mul.w	r3, r1, r3
 8002b54:	4413      	add	r3, r2
 8002b56:	333d      	adds	r3, #61	; 0x3d
 8002b58:	2201      	movs	r2, #1
 8002b5a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	697a      	ldr	r2, [r7, #20]
 8002b62:	b2d2      	uxtb	r2, r2
 8002b64:	4611      	mov	r1, r2
 8002b66:	4618      	mov	r0, r3
 8002b68:	f002 fc13 	bl	8005392 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	015a      	lsls	r2, r3, #5
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	4413      	add	r3, r2
 8002b74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b78:	461a      	mov	r2, r3
 8002b7a:	2310      	movs	r3, #16
 8002b7c:	6093      	str	r3, [r2, #8]
}
 8002b7e:	e1e2      	b.n	8002f46 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	015a      	lsls	r2, r3, #5
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	4413      	add	r3, r2
 8002b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b92:	2b80      	cmp	r3, #128	; 0x80
 8002b94:	d164      	bne.n	8002c60 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d111      	bne.n	8002bc2 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	212c      	movs	r1, #44	; 0x2c
 8002ba4:	fb01 f303 	mul.w	r3, r1, r3
 8002ba8:	4413      	add	r3, r2
 8002baa:	3361      	adds	r3, #97	; 0x61
 8002bac:	2206      	movs	r2, #6
 8002bae:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	697a      	ldr	r2, [r7, #20]
 8002bb6:	b2d2      	uxtb	r2, r2
 8002bb8:	4611      	mov	r1, r2
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f002 fbe9 	bl	8005392 <USB_HC_Halt>
 8002bc0:	e044      	b.n	8002c4c <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	212c      	movs	r1, #44	; 0x2c
 8002bc8:	fb01 f303 	mul.w	r3, r1, r3
 8002bcc:	4413      	add	r3, r2
 8002bce:	335c      	adds	r3, #92	; 0x5c
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	1c5a      	adds	r2, r3, #1
 8002bd4:	6879      	ldr	r1, [r7, #4]
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	202c      	movs	r0, #44	; 0x2c
 8002bda:	fb00 f303 	mul.w	r3, r0, r3
 8002bde:	440b      	add	r3, r1
 8002be0:	335c      	adds	r3, #92	; 0x5c
 8002be2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	212c      	movs	r1, #44	; 0x2c
 8002bea:	fb01 f303 	mul.w	r3, r1, r3
 8002bee:	4413      	add	r3, r2
 8002bf0:	335c      	adds	r3, #92	; 0x5c
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d920      	bls.n	8002c3a <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	212c      	movs	r1, #44	; 0x2c
 8002bfe:	fb01 f303 	mul.w	r3, r1, r3
 8002c02:	4413      	add	r3, r2
 8002c04:	335c      	adds	r3, #92	; 0x5c
 8002c06:	2200      	movs	r2, #0
 8002c08:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	212c      	movs	r1, #44	; 0x2c
 8002c10:	fb01 f303 	mul.w	r3, r1, r3
 8002c14:	4413      	add	r3, r2
 8002c16:	3360      	adds	r3, #96	; 0x60
 8002c18:	2204      	movs	r2, #4
 8002c1a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	b2d9      	uxtb	r1, r3
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	202c      	movs	r0, #44	; 0x2c
 8002c26:	fb00 f303 	mul.w	r3, r0, r3
 8002c2a:	4413      	add	r3, r2
 8002c2c:	3360      	adds	r3, #96	; 0x60
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	461a      	mov	r2, r3
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f005 ffd6 	bl	8008be4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002c38:	e008      	b.n	8002c4c <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	212c      	movs	r1, #44	; 0x2c
 8002c40:	fb01 f303 	mul.w	r3, r1, r3
 8002c44:	4413      	add	r3, r2
 8002c46:	3360      	adds	r3, #96	; 0x60
 8002c48:	2202      	movs	r2, #2
 8002c4a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	015a      	lsls	r2, r3, #5
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	4413      	add	r3, r2
 8002c54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c58:	461a      	mov	r2, r3
 8002c5a:	2380      	movs	r3, #128	; 0x80
 8002c5c:	6093      	str	r3, [r2, #8]
}
 8002c5e:	e172      	b.n	8002f46 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	015a      	lsls	r2, r3, #5
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	4413      	add	r3, r2
 8002c68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c76:	d11b      	bne.n	8002cb0 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	212c      	movs	r1, #44	; 0x2c
 8002c7e:	fb01 f303 	mul.w	r3, r1, r3
 8002c82:	4413      	add	r3, r2
 8002c84:	3361      	adds	r3, #97	; 0x61
 8002c86:	2208      	movs	r2, #8
 8002c88:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	697a      	ldr	r2, [r7, #20]
 8002c90:	b2d2      	uxtb	r2, r2
 8002c92:	4611      	mov	r1, r2
 8002c94:	4618      	mov	r0, r3
 8002c96:	f002 fb7c 	bl	8005392 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	015a      	lsls	r2, r3, #5
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cac:	6093      	str	r3, [r2, #8]
}
 8002cae:	e14a      	b.n	8002f46 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	015a      	lsls	r2, r3, #5
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	f040 813f 	bne.w	8002f46 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	212c      	movs	r1, #44	; 0x2c
 8002cce:	fb01 f303 	mul.w	r3, r1, r3
 8002cd2:	4413      	add	r3, r2
 8002cd4:	3361      	adds	r3, #97	; 0x61
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d17d      	bne.n	8002dd8 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	212c      	movs	r1, #44	; 0x2c
 8002ce2:	fb01 f303 	mul.w	r3, r1, r3
 8002ce6:	4413      	add	r3, r2
 8002ce8:	3360      	adds	r3, #96	; 0x60
 8002cea:	2201      	movs	r2, #1
 8002cec:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	212c      	movs	r1, #44	; 0x2c
 8002cf4:	fb01 f303 	mul.w	r3, r1, r3
 8002cf8:	4413      	add	r3, r2
 8002cfa:	333f      	adds	r3, #63	; 0x3f
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d00a      	beq.n	8002d18 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	212c      	movs	r1, #44	; 0x2c
 8002d08:	fb01 f303 	mul.w	r3, r1, r3
 8002d0c:	4413      	add	r3, r2
 8002d0e:	333f      	adds	r3, #63	; 0x3f
 8002d10:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002d12:	2b03      	cmp	r3, #3
 8002d14:	f040 8100 	bne.w	8002f18 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d113      	bne.n	8002d48 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	212c      	movs	r1, #44	; 0x2c
 8002d26:	fb01 f303 	mul.w	r3, r1, r3
 8002d2a:	4413      	add	r3, r2
 8002d2c:	3355      	adds	r3, #85	; 0x55
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	f083 0301 	eor.w	r3, r3, #1
 8002d34:	b2d8      	uxtb	r0, r3
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	212c      	movs	r1, #44	; 0x2c
 8002d3c:	fb01 f303 	mul.w	r3, r1, r3
 8002d40:	4413      	add	r3, r2
 8002d42:	3355      	adds	r3, #85	; 0x55
 8002d44:	4602      	mov	r2, r0
 8002d46:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	f040 80e3 	bne.w	8002f18 <HCD_HC_OUT_IRQHandler+0x69c>
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	212c      	movs	r1, #44	; 0x2c
 8002d58:	fb01 f303 	mul.w	r3, r1, r3
 8002d5c:	4413      	add	r3, r2
 8002d5e:	334c      	adds	r3, #76	; 0x4c
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	f000 80d8 	beq.w	8002f18 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	212c      	movs	r1, #44	; 0x2c
 8002d6e:	fb01 f303 	mul.w	r3, r1, r3
 8002d72:	4413      	add	r3, r2
 8002d74:	334c      	adds	r3, #76	; 0x4c
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6879      	ldr	r1, [r7, #4]
 8002d7a:	697a      	ldr	r2, [r7, #20]
 8002d7c:	202c      	movs	r0, #44	; 0x2c
 8002d7e:	fb00 f202 	mul.w	r2, r0, r2
 8002d82:	440a      	add	r2, r1
 8002d84:	3240      	adds	r2, #64	; 0x40
 8002d86:	8812      	ldrh	r2, [r2, #0]
 8002d88:	4413      	add	r3, r2
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	6879      	ldr	r1, [r7, #4]
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	202c      	movs	r0, #44	; 0x2c
 8002d92:	fb00 f202 	mul.w	r2, r0, r2
 8002d96:	440a      	add	r2, r1
 8002d98:	3240      	adds	r2, #64	; 0x40
 8002d9a:	8812      	ldrh	r2, [r2, #0]
 8002d9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002da0:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f003 0301 	and.w	r3, r3, #1
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	f000 80b5 	beq.w	8002f18 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	212c      	movs	r1, #44	; 0x2c
 8002db4:	fb01 f303 	mul.w	r3, r1, r3
 8002db8:	4413      	add	r3, r2
 8002dba:	3355      	adds	r3, #85	; 0x55
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	f083 0301 	eor.w	r3, r3, #1
 8002dc2:	b2d8      	uxtb	r0, r3
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	212c      	movs	r1, #44	; 0x2c
 8002dca:	fb01 f303 	mul.w	r3, r1, r3
 8002dce:	4413      	add	r3, r2
 8002dd0:	3355      	adds	r3, #85	; 0x55
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	701a      	strb	r2, [r3, #0]
 8002dd6:	e09f      	b.n	8002f18 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	212c      	movs	r1, #44	; 0x2c
 8002dde:	fb01 f303 	mul.w	r3, r1, r3
 8002de2:	4413      	add	r3, r2
 8002de4:	3361      	adds	r3, #97	; 0x61
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	2b03      	cmp	r3, #3
 8002dea:	d109      	bne.n	8002e00 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	212c      	movs	r1, #44	; 0x2c
 8002df2:	fb01 f303 	mul.w	r3, r1, r3
 8002df6:	4413      	add	r3, r2
 8002df8:	3360      	adds	r3, #96	; 0x60
 8002dfa:	2202      	movs	r2, #2
 8002dfc:	701a      	strb	r2, [r3, #0]
 8002dfe:	e08b      	b.n	8002f18 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	212c      	movs	r1, #44	; 0x2c
 8002e06:	fb01 f303 	mul.w	r3, r1, r3
 8002e0a:	4413      	add	r3, r2
 8002e0c:	3361      	adds	r3, #97	; 0x61
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	2b04      	cmp	r3, #4
 8002e12:	d109      	bne.n	8002e28 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	212c      	movs	r1, #44	; 0x2c
 8002e1a:	fb01 f303 	mul.w	r3, r1, r3
 8002e1e:	4413      	add	r3, r2
 8002e20:	3360      	adds	r3, #96	; 0x60
 8002e22:	2202      	movs	r2, #2
 8002e24:	701a      	strb	r2, [r3, #0]
 8002e26:	e077      	b.n	8002f18 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	212c      	movs	r1, #44	; 0x2c
 8002e2e:	fb01 f303 	mul.w	r3, r1, r3
 8002e32:	4413      	add	r3, r2
 8002e34:	3361      	adds	r3, #97	; 0x61
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	2b05      	cmp	r3, #5
 8002e3a:	d109      	bne.n	8002e50 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	212c      	movs	r1, #44	; 0x2c
 8002e42:	fb01 f303 	mul.w	r3, r1, r3
 8002e46:	4413      	add	r3, r2
 8002e48:	3360      	adds	r3, #96	; 0x60
 8002e4a:	2205      	movs	r2, #5
 8002e4c:	701a      	strb	r2, [r3, #0]
 8002e4e:	e063      	b.n	8002f18 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	212c      	movs	r1, #44	; 0x2c
 8002e56:	fb01 f303 	mul.w	r3, r1, r3
 8002e5a:	4413      	add	r3, r2
 8002e5c:	3361      	adds	r3, #97	; 0x61
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	2b06      	cmp	r3, #6
 8002e62:	d009      	beq.n	8002e78 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	212c      	movs	r1, #44	; 0x2c
 8002e6a:	fb01 f303 	mul.w	r3, r1, r3
 8002e6e:	4413      	add	r3, r2
 8002e70:	3361      	adds	r3, #97	; 0x61
 8002e72:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e74:	2b08      	cmp	r3, #8
 8002e76:	d14f      	bne.n	8002f18 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	212c      	movs	r1, #44	; 0x2c
 8002e7e:	fb01 f303 	mul.w	r3, r1, r3
 8002e82:	4413      	add	r3, r2
 8002e84:	335c      	adds	r3, #92	; 0x5c
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	1c5a      	adds	r2, r3, #1
 8002e8a:	6879      	ldr	r1, [r7, #4]
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	202c      	movs	r0, #44	; 0x2c
 8002e90:	fb00 f303 	mul.w	r3, r0, r3
 8002e94:	440b      	add	r3, r1
 8002e96:	335c      	adds	r3, #92	; 0x5c
 8002e98:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	212c      	movs	r1, #44	; 0x2c
 8002ea0:	fb01 f303 	mul.w	r3, r1, r3
 8002ea4:	4413      	add	r3, r2
 8002ea6:	335c      	adds	r3, #92	; 0x5c
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d912      	bls.n	8002ed4 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	212c      	movs	r1, #44	; 0x2c
 8002eb4:	fb01 f303 	mul.w	r3, r1, r3
 8002eb8:	4413      	add	r3, r2
 8002eba:	335c      	adds	r3, #92	; 0x5c
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	212c      	movs	r1, #44	; 0x2c
 8002ec6:	fb01 f303 	mul.w	r3, r1, r3
 8002eca:	4413      	add	r3, r2
 8002ecc:	3360      	adds	r3, #96	; 0x60
 8002ece:	2204      	movs	r2, #4
 8002ed0:	701a      	strb	r2, [r3, #0]
 8002ed2:	e021      	b.n	8002f18 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	212c      	movs	r1, #44	; 0x2c
 8002eda:	fb01 f303 	mul.w	r3, r1, r3
 8002ede:	4413      	add	r3, r2
 8002ee0:	3360      	adds	r3, #96	; 0x60
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	015a      	lsls	r2, r3, #5
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	4413      	add	r3, r2
 8002eee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002efc:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f04:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	015a      	lsls	r2, r3, #5
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f12:	461a      	mov	r2, r3
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	015a      	lsls	r2, r3, #5
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	4413      	add	r3, r2
 8002f20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f24:	461a      	mov	r2, r3
 8002f26:	2302      	movs	r3, #2
 8002f28:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	b2d9      	uxtb	r1, r3
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	202c      	movs	r0, #44	; 0x2c
 8002f34:	fb00 f303 	mul.w	r3, r0, r3
 8002f38:	4413      	add	r3, r2
 8002f3a:	3360      	adds	r3, #96	; 0x60
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	461a      	mov	r2, r3
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f005 fe4f 	bl	8008be4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002f46:	bf00      	nop
 8002f48:	3720      	adds	r7, #32
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b08a      	sub	sp, #40	; 0x28
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	6a1b      	ldr	r3, [r3, #32]
 8002f66:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	f003 030f 	and.w	r3, r3, #15
 8002f6e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	0c5b      	lsrs	r3, r3, #17
 8002f74:	f003 030f 	and.w	r3, r3, #15
 8002f78:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	091b      	lsrs	r3, r3, #4
 8002f7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f82:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d004      	beq.n	8002f94 <HCD_RXQLVL_IRQHandler+0x46>
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	2b05      	cmp	r3, #5
 8002f8e:	f000 80a9 	beq.w	80030e4 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002f92:	e0aa      	b.n	80030ea <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f000 80a6 	beq.w	80030e8 <HCD_RXQLVL_IRQHandler+0x19a>
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	212c      	movs	r1, #44	; 0x2c
 8002fa2:	fb01 f303 	mul.w	r3, r1, r3
 8002fa6:	4413      	add	r3, r2
 8002fa8:	3344      	adds	r3, #68	; 0x44
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f000 809b 	beq.w	80030e8 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	212c      	movs	r1, #44	; 0x2c
 8002fb8:	fb01 f303 	mul.w	r3, r1, r3
 8002fbc:	4413      	add	r3, r2
 8002fbe:	3350      	adds	r3, #80	; 0x50
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	441a      	add	r2, r3
 8002fc6:	6879      	ldr	r1, [r7, #4]
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	202c      	movs	r0, #44	; 0x2c
 8002fcc:	fb00 f303 	mul.w	r3, r0, r3
 8002fd0:	440b      	add	r3, r1
 8002fd2:	334c      	adds	r3, #76	; 0x4c
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d87a      	bhi.n	80030d0 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6818      	ldr	r0, [r3, #0]
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	212c      	movs	r1, #44	; 0x2c
 8002fe4:	fb01 f303 	mul.w	r3, r1, r3
 8002fe8:	4413      	add	r3, r2
 8002fea:	3344      	adds	r3, #68	; 0x44
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	b292      	uxth	r2, r2
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	f001 fd24 	bl	8004a40 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	212c      	movs	r1, #44	; 0x2c
 8002ffe:	fb01 f303 	mul.w	r3, r1, r3
 8003002:	4413      	add	r3, r2
 8003004:	3344      	adds	r3, #68	; 0x44
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	441a      	add	r2, r3
 800300c:	6879      	ldr	r1, [r7, #4]
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	202c      	movs	r0, #44	; 0x2c
 8003012:	fb00 f303 	mul.w	r3, r0, r3
 8003016:	440b      	add	r3, r1
 8003018:	3344      	adds	r3, #68	; 0x44
 800301a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	212c      	movs	r1, #44	; 0x2c
 8003022:	fb01 f303 	mul.w	r3, r1, r3
 8003026:	4413      	add	r3, r2
 8003028:	3350      	adds	r3, #80	; 0x50
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	441a      	add	r2, r3
 8003030:	6879      	ldr	r1, [r7, #4]
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	202c      	movs	r0, #44	; 0x2c
 8003036:	fb00 f303 	mul.w	r3, r0, r3
 800303a:	440b      	add	r3, r1
 800303c:	3350      	adds	r3, #80	; 0x50
 800303e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	015a      	lsls	r2, r3, #5
 8003044:	6a3b      	ldr	r3, [r7, #32]
 8003046:	4413      	add	r3, r2
 8003048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	0cdb      	lsrs	r3, r3, #19
 8003050:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003054:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	212c      	movs	r1, #44	; 0x2c
 800305c:	fb01 f303 	mul.w	r3, r1, r3
 8003060:	4413      	add	r3, r2
 8003062:	3340      	adds	r3, #64	; 0x40
 8003064:	881b      	ldrh	r3, [r3, #0]
 8003066:	461a      	mov	r2, r3
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	4293      	cmp	r3, r2
 800306c:	d13c      	bne.n	80030e8 <HCD_RXQLVL_IRQHandler+0x19a>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d039      	beq.n	80030e8 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	015a      	lsls	r2, r3, #5
 8003078:	6a3b      	ldr	r3, [r7, #32]
 800307a:	4413      	add	r3, r2
 800307c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800308a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003092:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	015a      	lsls	r2, r3, #5
 8003098:	6a3b      	ldr	r3, [r7, #32]
 800309a:	4413      	add	r3, r2
 800309c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030a0:	461a      	mov	r2, r3
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	212c      	movs	r1, #44	; 0x2c
 80030ac:	fb01 f303 	mul.w	r3, r1, r3
 80030b0:	4413      	add	r3, r2
 80030b2:	3354      	adds	r3, #84	; 0x54
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	f083 0301 	eor.w	r3, r3, #1
 80030ba:	b2d8      	uxtb	r0, r3
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	212c      	movs	r1, #44	; 0x2c
 80030c2:	fb01 f303 	mul.w	r3, r1, r3
 80030c6:	4413      	add	r3, r2
 80030c8:	3354      	adds	r3, #84	; 0x54
 80030ca:	4602      	mov	r2, r0
 80030cc:	701a      	strb	r2, [r3, #0]
      break;
 80030ce:	e00b      	b.n	80030e8 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	212c      	movs	r1, #44	; 0x2c
 80030d6:	fb01 f303 	mul.w	r3, r1, r3
 80030da:	4413      	add	r3, r2
 80030dc:	3360      	adds	r3, #96	; 0x60
 80030de:	2204      	movs	r2, #4
 80030e0:	701a      	strb	r2, [r3, #0]
      break;
 80030e2:	e001      	b.n	80030e8 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80030e4:	bf00      	nop
 80030e6:	e000      	b.n	80030ea <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80030e8:	bf00      	nop
  }
}
 80030ea:	bf00      	nop
 80030ec:	3728      	adds	r7, #40	; 0x28
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b086      	sub	sp, #24
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800311e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b02      	cmp	r3, #2
 8003128:	d10b      	bne.n	8003142 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	2b01      	cmp	r3, #1
 8003132:	d102      	bne.n	800313a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f005 fd39 	bl	8008bac <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	f043 0302 	orr.w	r3, r3, #2
 8003140:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f003 0308 	and.w	r3, r3, #8
 8003148:	2b08      	cmp	r3, #8
 800314a:	d132      	bne.n	80031b2 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	f043 0308 	orr.w	r3, r3, #8
 8003152:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f003 0304 	and.w	r3, r3, #4
 800315a:	2b04      	cmp	r3, #4
 800315c:	d126      	bne.n	80031ac <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	2b02      	cmp	r3, #2
 8003164:	d113      	bne.n	800318e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800316c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003170:	d106      	bne.n	8003180 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2102      	movs	r1, #2
 8003178:	4618      	mov	r0, r3
 800317a:	f001 fdcf 	bl	8004d1c <USB_InitFSLSPClkSel>
 800317e:	e011      	b.n	80031a4 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2101      	movs	r1, #1
 8003186:	4618      	mov	r0, r3
 8003188:	f001 fdc8 	bl	8004d1c <USB_InitFSLSPClkSel>
 800318c:	e00a      	b.n	80031a4 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d106      	bne.n	80031a4 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800319c:	461a      	mov	r2, r3
 800319e:	f64e 2360 	movw	r3, #60000	; 0xea60
 80031a2:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f005 fd2b 	bl	8008c00 <HAL_HCD_PortEnabled_Callback>
 80031aa:	e002      	b.n	80031b2 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f005 fd35 	bl	8008c1c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f003 0320 	and.w	r3, r3, #32
 80031b8:	2b20      	cmp	r3, #32
 80031ba:	d103      	bne.n	80031c4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	f043 0320 	orr.w	r3, r3, #32
 80031c2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80031ca:	461a      	mov	r2, r3
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	6013      	str	r3, [r2, #0]
}
 80031d0:	bf00      	nop
 80031d2:	3718      	adds	r7, #24
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b086      	sub	sp, #24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e267      	b.n	80036ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d075      	beq.n	80032e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031f6:	4b88      	ldr	r3, [pc, #544]	; (8003418 <HAL_RCC_OscConfig+0x240>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 030c 	and.w	r3, r3, #12
 80031fe:	2b04      	cmp	r3, #4
 8003200:	d00c      	beq.n	800321c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003202:	4b85      	ldr	r3, [pc, #532]	; (8003418 <HAL_RCC_OscConfig+0x240>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800320a:	2b08      	cmp	r3, #8
 800320c:	d112      	bne.n	8003234 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800320e:	4b82      	ldr	r3, [pc, #520]	; (8003418 <HAL_RCC_OscConfig+0x240>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003216:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800321a:	d10b      	bne.n	8003234 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800321c:	4b7e      	ldr	r3, [pc, #504]	; (8003418 <HAL_RCC_OscConfig+0x240>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d05b      	beq.n	80032e0 <HAL_RCC_OscConfig+0x108>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d157      	bne.n	80032e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e242      	b.n	80036ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800323c:	d106      	bne.n	800324c <HAL_RCC_OscConfig+0x74>
 800323e:	4b76      	ldr	r3, [pc, #472]	; (8003418 <HAL_RCC_OscConfig+0x240>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a75      	ldr	r2, [pc, #468]	; (8003418 <HAL_RCC_OscConfig+0x240>)
 8003244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003248:	6013      	str	r3, [r2, #0]
 800324a:	e01d      	b.n	8003288 <HAL_RCC_OscConfig+0xb0>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003254:	d10c      	bne.n	8003270 <HAL_RCC_OscConfig+0x98>
 8003256:	4b70      	ldr	r3, [pc, #448]	; (8003418 <HAL_RCC_OscConfig+0x240>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a6f      	ldr	r2, [pc, #444]	; (8003418 <HAL_RCC_OscConfig+0x240>)
 800325c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003260:	6013      	str	r3, [r2, #0]
 8003262:	4b6d      	ldr	r3, [pc, #436]	; (8003418 <HAL_RCC_OscConfig+0x240>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a6c      	ldr	r2, [pc, #432]	; (8003418 <HAL_RCC_OscConfig+0x240>)
 8003268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800326c:	6013      	str	r3, [r2, #0]
 800326e:	e00b      	b.n	8003288 <HAL_RCC_OscConfig+0xb0>
 8003270:	4b69      	ldr	r3, [pc, #420]	; (8003418 <HAL_RCC_OscConfig+0x240>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a68      	ldr	r2, [pc, #416]	; (8003418 <HAL_RCC_OscConfig+0x240>)
 8003276:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800327a:	6013      	str	r3, [r2, #0]
 800327c:	4b66      	ldr	r3, [pc, #408]	; (8003418 <HAL_RCC_OscConfig+0x240>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a65      	ldr	r2, [pc, #404]	; (8003418 <HAL_RCC_OscConfig+0x240>)
 8003282:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003286:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d013      	beq.n	80032b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003290:	f7fd fd30 	bl	8000cf4 <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003298:	f7fd fd2c 	bl	8000cf4 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b64      	cmp	r3, #100	; 0x64
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e207      	b.n	80036ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032aa:	4b5b      	ldr	r3, [pc, #364]	; (8003418 <HAL_RCC_OscConfig+0x240>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d0f0      	beq.n	8003298 <HAL_RCC_OscConfig+0xc0>
 80032b6:	e014      	b.n	80032e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b8:	f7fd fd1c 	bl	8000cf4 <HAL_GetTick>
 80032bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032be:	e008      	b.n	80032d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032c0:	f7fd fd18 	bl	8000cf4 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b64      	cmp	r3, #100	; 0x64
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e1f3      	b.n	80036ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032d2:	4b51      	ldr	r3, [pc, #324]	; (8003418 <HAL_RCC_OscConfig+0x240>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1f0      	bne.n	80032c0 <HAL_RCC_OscConfig+0xe8>
 80032de:	e000      	b.n	80032e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d063      	beq.n	80033b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032ee:	4b4a      	ldr	r3, [pc, #296]	; (8003418 <HAL_RCC_OscConfig+0x240>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f003 030c 	and.w	r3, r3, #12
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00b      	beq.n	8003312 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032fa:	4b47      	ldr	r3, [pc, #284]	; (8003418 <HAL_RCC_OscConfig+0x240>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003302:	2b08      	cmp	r3, #8
 8003304:	d11c      	bne.n	8003340 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003306:	4b44      	ldr	r3, [pc, #272]	; (8003418 <HAL_RCC_OscConfig+0x240>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d116      	bne.n	8003340 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003312:	4b41      	ldr	r3, [pc, #260]	; (8003418 <HAL_RCC_OscConfig+0x240>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d005      	beq.n	800332a <HAL_RCC_OscConfig+0x152>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d001      	beq.n	800332a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e1c7      	b.n	80036ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800332a:	4b3b      	ldr	r3, [pc, #236]	; (8003418 <HAL_RCC_OscConfig+0x240>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	00db      	lsls	r3, r3, #3
 8003338:	4937      	ldr	r1, [pc, #220]	; (8003418 <HAL_RCC_OscConfig+0x240>)
 800333a:	4313      	orrs	r3, r2
 800333c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800333e:	e03a      	b.n	80033b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d020      	beq.n	800338a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003348:	4b34      	ldr	r3, [pc, #208]	; (800341c <HAL_RCC_OscConfig+0x244>)
 800334a:	2201      	movs	r2, #1
 800334c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800334e:	f7fd fcd1 	bl	8000cf4 <HAL_GetTick>
 8003352:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003354:	e008      	b.n	8003368 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003356:	f7fd fccd 	bl	8000cf4 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	2b02      	cmp	r3, #2
 8003362:	d901      	bls.n	8003368 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e1a8      	b.n	80036ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003368:	4b2b      	ldr	r3, [pc, #172]	; (8003418 <HAL_RCC_OscConfig+0x240>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d0f0      	beq.n	8003356 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003374:	4b28      	ldr	r3, [pc, #160]	; (8003418 <HAL_RCC_OscConfig+0x240>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	00db      	lsls	r3, r3, #3
 8003382:	4925      	ldr	r1, [pc, #148]	; (8003418 <HAL_RCC_OscConfig+0x240>)
 8003384:	4313      	orrs	r3, r2
 8003386:	600b      	str	r3, [r1, #0]
 8003388:	e015      	b.n	80033b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800338a:	4b24      	ldr	r3, [pc, #144]	; (800341c <HAL_RCC_OscConfig+0x244>)
 800338c:	2200      	movs	r2, #0
 800338e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003390:	f7fd fcb0 	bl	8000cf4 <HAL_GetTick>
 8003394:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003396:	e008      	b.n	80033aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003398:	f7fd fcac 	bl	8000cf4 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e187      	b.n	80036ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033aa:	4b1b      	ldr	r3, [pc, #108]	; (8003418 <HAL_RCC_OscConfig+0x240>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1f0      	bne.n	8003398 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0308 	and.w	r3, r3, #8
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d036      	beq.n	8003430 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d016      	beq.n	80033f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033ca:	4b15      	ldr	r3, [pc, #84]	; (8003420 <HAL_RCC_OscConfig+0x248>)
 80033cc:	2201      	movs	r2, #1
 80033ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d0:	f7fd fc90 	bl	8000cf4 <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033d8:	f7fd fc8c 	bl	8000cf4 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e167      	b.n	80036ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ea:	4b0b      	ldr	r3, [pc, #44]	; (8003418 <HAL_RCC_OscConfig+0x240>)
 80033ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d0f0      	beq.n	80033d8 <HAL_RCC_OscConfig+0x200>
 80033f6:	e01b      	b.n	8003430 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033f8:	4b09      	ldr	r3, [pc, #36]	; (8003420 <HAL_RCC_OscConfig+0x248>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033fe:	f7fd fc79 	bl	8000cf4 <HAL_GetTick>
 8003402:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003404:	e00e      	b.n	8003424 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003406:	f7fd fc75 	bl	8000cf4 <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	2b02      	cmp	r3, #2
 8003412:	d907      	bls.n	8003424 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e150      	b.n	80036ba <HAL_RCC_OscConfig+0x4e2>
 8003418:	40023800 	.word	0x40023800
 800341c:	42470000 	.word	0x42470000
 8003420:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003424:	4b88      	ldr	r3, [pc, #544]	; (8003648 <HAL_RCC_OscConfig+0x470>)
 8003426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1ea      	bne.n	8003406 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0304 	and.w	r3, r3, #4
 8003438:	2b00      	cmp	r3, #0
 800343a:	f000 8097 	beq.w	800356c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800343e:	2300      	movs	r3, #0
 8003440:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003442:	4b81      	ldr	r3, [pc, #516]	; (8003648 <HAL_RCC_OscConfig+0x470>)
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d10f      	bne.n	800346e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800344e:	2300      	movs	r3, #0
 8003450:	60bb      	str	r3, [r7, #8]
 8003452:	4b7d      	ldr	r3, [pc, #500]	; (8003648 <HAL_RCC_OscConfig+0x470>)
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	4a7c      	ldr	r2, [pc, #496]	; (8003648 <HAL_RCC_OscConfig+0x470>)
 8003458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800345c:	6413      	str	r3, [r2, #64]	; 0x40
 800345e:	4b7a      	ldr	r3, [pc, #488]	; (8003648 <HAL_RCC_OscConfig+0x470>)
 8003460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003466:	60bb      	str	r3, [r7, #8]
 8003468:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800346a:	2301      	movs	r3, #1
 800346c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800346e:	4b77      	ldr	r3, [pc, #476]	; (800364c <HAL_RCC_OscConfig+0x474>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003476:	2b00      	cmp	r3, #0
 8003478:	d118      	bne.n	80034ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800347a:	4b74      	ldr	r3, [pc, #464]	; (800364c <HAL_RCC_OscConfig+0x474>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a73      	ldr	r2, [pc, #460]	; (800364c <HAL_RCC_OscConfig+0x474>)
 8003480:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003484:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003486:	f7fd fc35 	bl	8000cf4 <HAL_GetTick>
 800348a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800348c:	e008      	b.n	80034a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800348e:	f7fd fc31 	bl	8000cf4 <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	2b02      	cmp	r3, #2
 800349a:	d901      	bls.n	80034a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e10c      	b.n	80036ba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034a0:	4b6a      	ldr	r3, [pc, #424]	; (800364c <HAL_RCC_OscConfig+0x474>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d0f0      	beq.n	800348e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d106      	bne.n	80034c2 <HAL_RCC_OscConfig+0x2ea>
 80034b4:	4b64      	ldr	r3, [pc, #400]	; (8003648 <HAL_RCC_OscConfig+0x470>)
 80034b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b8:	4a63      	ldr	r2, [pc, #396]	; (8003648 <HAL_RCC_OscConfig+0x470>)
 80034ba:	f043 0301 	orr.w	r3, r3, #1
 80034be:	6713      	str	r3, [r2, #112]	; 0x70
 80034c0:	e01c      	b.n	80034fc <HAL_RCC_OscConfig+0x324>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	2b05      	cmp	r3, #5
 80034c8:	d10c      	bne.n	80034e4 <HAL_RCC_OscConfig+0x30c>
 80034ca:	4b5f      	ldr	r3, [pc, #380]	; (8003648 <HAL_RCC_OscConfig+0x470>)
 80034cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ce:	4a5e      	ldr	r2, [pc, #376]	; (8003648 <HAL_RCC_OscConfig+0x470>)
 80034d0:	f043 0304 	orr.w	r3, r3, #4
 80034d4:	6713      	str	r3, [r2, #112]	; 0x70
 80034d6:	4b5c      	ldr	r3, [pc, #368]	; (8003648 <HAL_RCC_OscConfig+0x470>)
 80034d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034da:	4a5b      	ldr	r2, [pc, #364]	; (8003648 <HAL_RCC_OscConfig+0x470>)
 80034dc:	f043 0301 	orr.w	r3, r3, #1
 80034e0:	6713      	str	r3, [r2, #112]	; 0x70
 80034e2:	e00b      	b.n	80034fc <HAL_RCC_OscConfig+0x324>
 80034e4:	4b58      	ldr	r3, [pc, #352]	; (8003648 <HAL_RCC_OscConfig+0x470>)
 80034e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e8:	4a57      	ldr	r2, [pc, #348]	; (8003648 <HAL_RCC_OscConfig+0x470>)
 80034ea:	f023 0301 	bic.w	r3, r3, #1
 80034ee:	6713      	str	r3, [r2, #112]	; 0x70
 80034f0:	4b55      	ldr	r3, [pc, #340]	; (8003648 <HAL_RCC_OscConfig+0x470>)
 80034f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f4:	4a54      	ldr	r2, [pc, #336]	; (8003648 <HAL_RCC_OscConfig+0x470>)
 80034f6:	f023 0304 	bic.w	r3, r3, #4
 80034fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d015      	beq.n	8003530 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003504:	f7fd fbf6 	bl	8000cf4 <HAL_GetTick>
 8003508:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800350a:	e00a      	b.n	8003522 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800350c:	f7fd fbf2 	bl	8000cf4 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	f241 3288 	movw	r2, #5000	; 0x1388
 800351a:	4293      	cmp	r3, r2
 800351c:	d901      	bls.n	8003522 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e0cb      	b.n	80036ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003522:	4b49      	ldr	r3, [pc, #292]	; (8003648 <HAL_RCC_OscConfig+0x470>)
 8003524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d0ee      	beq.n	800350c <HAL_RCC_OscConfig+0x334>
 800352e:	e014      	b.n	800355a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003530:	f7fd fbe0 	bl	8000cf4 <HAL_GetTick>
 8003534:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003536:	e00a      	b.n	800354e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003538:	f7fd fbdc 	bl	8000cf4 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	f241 3288 	movw	r2, #5000	; 0x1388
 8003546:	4293      	cmp	r3, r2
 8003548:	d901      	bls.n	800354e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e0b5      	b.n	80036ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800354e:	4b3e      	ldr	r3, [pc, #248]	; (8003648 <HAL_RCC_OscConfig+0x470>)
 8003550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1ee      	bne.n	8003538 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800355a:	7dfb      	ldrb	r3, [r7, #23]
 800355c:	2b01      	cmp	r3, #1
 800355e:	d105      	bne.n	800356c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003560:	4b39      	ldr	r3, [pc, #228]	; (8003648 <HAL_RCC_OscConfig+0x470>)
 8003562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003564:	4a38      	ldr	r2, [pc, #224]	; (8003648 <HAL_RCC_OscConfig+0x470>)
 8003566:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800356a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	2b00      	cmp	r3, #0
 8003572:	f000 80a1 	beq.w	80036b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003576:	4b34      	ldr	r3, [pc, #208]	; (8003648 <HAL_RCC_OscConfig+0x470>)
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f003 030c 	and.w	r3, r3, #12
 800357e:	2b08      	cmp	r3, #8
 8003580:	d05c      	beq.n	800363c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	2b02      	cmp	r3, #2
 8003588:	d141      	bne.n	800360e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800358a:	4b31      	ldr	r3, [pc, #196]	; (8003650 <HAL_RCC_OscConfig+0x478>)
 800358c:	2200      	movs	r2, #0
 800358e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003590:	f7fd fbb0 	bl	8000cf4 <HAL_GetTick>
 8003594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003596:	e008      	b.n	80035aa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003598:	f7fd fbac 	bl	8000cf4 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e087      	b.n	80036ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035aa:	4b27      	ldr	r3, [pc, #156]	; (8003648 <HAL_RCC_OscConfig+0x470>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1f0      	bne.n	8003598 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	69da      	ldr	r2, [r3, #28]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	431a      	orrs	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c4:	019b      	lsls	r3, r3, #6
 80035c6:	431a      	orrs	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035cc:	085b      	lsrs	r3, r3, #1
 80035ce:	3b01      	subs	r3, #1
 80035d0:	041b      	lsls	r3, r3, #16
 80035d2:	431a      	orrs	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d8:	061b      	lsls	r3, r3, #24
 80035da:	491b      	ldr	r1, [pc, #108]	; (8003648 <HAL_RCC_OscConfig+0x470>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035e0:	4b1b      	ldr	r3, [pc, #108]	; (8003650 <HAL_RCC_OscConfig+0x478>)
 80035e2:	2201      	movs	r2, #1
 80035e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e6:	f7fd fb85 	bl	8000cf4 <HAL_GetTick>
 80035ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ec:	e008      	b.n	8003600 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035ee:	f7fd fb81 	bl	8000cf4 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d901      	bls.n	8003600 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e05c      	b.n	80036ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003600:	4b11      	ldr	r3, [pc, #68]	; (8003648 <HAL_RCC_OscConfig+0x470>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d0f0      	beq.n	80035ee <HAL_RCC_OscConfig+0x416>
 800360c:	e054      	b.n	80036b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800360e:	4b10      	ldr	r3, [pc, #64]	; (8003650 <HAL_RCC_OscConfig+0x478>)
 8003610:	2200      	movs	r2, #0
 8003612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003614:	f7fd fb6e 	bl	8000cf4 <HAL_GetTick>
 8003618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800361a:	e008      	b.n	800362e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800361c:	f7fd fb6a 	bl	8000cf4 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b02      	cmp	r3, #2
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e045      	b.n	80036ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800362e:	4b06      	ldr	r3, [pc, #24]	; (8003648 <HAL_RCC_OscConfig+0x470>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1f0      	bne.n	800361c <HAL_RCC_OscConfig+0x444>
 800363a:	e03d      	b.n	80036b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d107      	bne.n	8003654 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e038      	b.n	80036ba <HAL_RCC_OscConfig+0x4e2>
 8003648:	40023800 	.word	0x40023800
 800364c:	40007000 	.word	0x40007000
 8003650:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003654:	4b1b      	ldr	r3, [pc, #108]	; (80036c4 <HAL_RCC_OscConfig+0x4ec>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d028      	beq.n	80036b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800366c:	429a      	cmp	r2, r3
 800366e:	d121      	bne.n	80036b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800367a:	429a      	cmp	r2, r3
 800367c:	d11a      	bne.n	80036b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003684:	4013      	ands	r3, r2
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800368a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800368c:	4293      	cmp	r3, r2
 800368e:	d111      	bne.n	80036b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369a:	085b      	lsrs	r3, r3, #1
 800369c:	3b01      	subs	r3, #1
 800369e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d107      	bne.n	80036b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d001      	beq.n	80036b8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e000      	b.n	80036ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3718      	adds	r7, #24
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	40023800 	.word	0x40023800

080036c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d101      	bne.n	80036dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e0cc      	b.n	8003876 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036dc:	4b68      	ldr	r3, [pc, #416]	; (8003880 <HAL_RCC_ClockConfig+0x1b8>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0307 	and.w	r3, r3, #7
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d90c      	bls.n	8003704 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ea:	4b65      	ldr	r3, [pc, #404]	; (8003880 <HAL_RCC_ClockConfig+0x1b8>)
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	b2d2      	uxtb	r2, r2
 80036f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036f2:	4b63      	ldr	r3, [pc, #396]	; (8003880 <HAL_RCC_ClockConfig+0x1b8>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0307 	and.w	r3, r3, #7
 80036fa:	683a      	ldr	r2, [r7, #0]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d001      	beq.n	8003704 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e0b8      	b.n	8003876 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d020      	beq.n	8003752 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0304 	and.w	r3, r3, #4
 8003718:	2b00      	cmp	r3, #0
 800371a:	d005      	beq.n	8003728 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800371c:	4b59      	ldr	r3, [pc, #356]	; (8003884 <HAL_RCC_ClockConfig+0x1bc>)
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	4a58      	ldr	r2, [pc, #352]	; (8003884 <HAL_RCC_ClockConfig+0x1bc>)
 8003722:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003726:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0308 	and.w	r3, r3, #8
 8003730:	2b00      	cmp	r3, #0
 8003732:	d005      	beq.n	8003740 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003734:	4b53      	ldr	r3, [pc, #332]	; (8003884 <HAL_RCC_ClockConfig+0x1bc>)
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	4a52      	ldr	r2, [pc, #328]	; (8003884 <HAL_RCC_ClockConfig+0x1bc>)
 800373a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800373e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003740:	4b50      	ldr	r3, [pc, #320]	; (8003884 <HAL_RCC_ClockConfig+0x1bc>)
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	494d      	ldr	r1, [pc, #308]	; (8003884 <HAL_RCC_ClockConfig+0x1bc>)
 800374e:	4313      	orrs	r3, r2
 8003750:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b00      	cmp	r3, #0
 800375c:	d044      	beq.n	80037e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	2b01      	cmp	r3, #1
 8003764:	d107      	bne.n	8003776 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003766:	4b47      	ldr	r3, [pc, #284]	; (8003884 <HAL_RCC_ClockConfig+0x1bc>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d119      	bne.n	80037a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e07f      	b.n	8003876 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	2b02      	cmp	r3, #2
 800377c:	d003      	beq.n	8003786 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003782:	2b03      	cmp	r3, #3
 8003784:	d107      	bne.n	8003796 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003786:	4b3f      	ldr	r3, [pc, #252]	; (8003884 <HAL_RCC_ClockConfig+0x1bc>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d109      	bne.n	80037a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e06f      	b.n	8003876 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003796:	4b3b      	ldr	r3, [pc, #236]	; (8003884 <HAL_RCC_ClockConfig+0x1bc>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e067      	b.n	8003876 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037a6:	4b37      	ldr	r3, [pc, #220]	; (8003884 <HAL_RCC_ClockConfig+0x1bc>)
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f023 0203 	bic.w	r2, r3, #3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	4934      	ldr	r1, [pc, #208]	; (8003884 <HAL_RCC_ClockConfig+0x1bc>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037b8:	f7fd fa9c 	bl	8000cf4 <HAL_GetTick>
 80037bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037be:	e00a      	b.n	80037d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037c0:	f7fd fa98 	bl	8000cf4 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e04f      	b.n	8003876 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037d6:	4b2b      	ldr	r3, [pc, #172]	; (8003884 <HAL_RCC_ClockConfig+0x1bc>)
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f003 020c 	and.w	r2, r3, #12
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d1eb      	bne.n	80037c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037e8:	4b25      	ldr	r3, [pc, #148]	; (8003880 <HAL_RCC_ClockConfig+0x1b8>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0307 	and.w	r3, r3, #7
 80037f0:	683a      	ldr	r2, [r7, #0]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d20c      	bcs.n	8003810 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037f6:	4b22      	ldr	r3, [pc, #136]	; (8003880 <HAL_RCC_ClockConfig+0x1b8>)
 80037f8:	683a      	ldr	r2, [r7, #0]
 80037fa:	b2d2      	uxtb	r2, r2
 80037fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037fe:	4b20      	ldr	r3, [pc, #128]	; (8003880 <HAL_RCC_ClockConfig+0x1b8>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0307 	and.w	r3, r3, #7
 8003806:	683a      	ldr	r2, [r7, #0]
 8003808:	429a      	cmp	r2, r3
 800380a:	d001      	beq.n	8003810 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e032      	b.n	8003876 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0304 	and.w	r3, r3, #4
 8003818:	2b00      	cmp	r3, #0
 800381a:	d008      	beq.n	800382e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800381c:	4b19      	ldr	r3, [pc, #100]	; (8003884 <HAL_RCC_ClockConfig+0x1bc>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	4916      	ldr	r1, [pc, #88]	; (8003884 <HAL_RCC_ClockConfig+0x1bc>)
 800382a:	4313      	orrs	r3, r2
 800382c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0308 	and.w	r3, r3, #8
 8003836:	2b00      	cmp	r3, #0
 8003838:	d009      	beq.n	800384e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800383a:	4b12      	ldr	r3, [pc, #72]	; (8003884 <HAL_RCC_ClockConfig+0x1bc>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	00db      	lsls	r3, r3, #3
 8003848:	490e      	ldr	r1, [pc, #56]	; (8003884 <HAL_RCC_ClockConfig+0x1bc>)
 800384a:	4313      	orrs	r3, r2
 800384c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800384e:	f000 f821 	bl	8003894 <HAL_RCC_GetSysClockFreq>
 8003852:	4602      	mov	r2, r0
 8003854:	4b0b      	ldr	r3, [pc, #44]	; (8003884 <HAL_RCC_ClockConfig+0x1bc>)
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	091b      	lsrs	r3, r3, #4
 800385a:	f003 030f 	and.w	r3, r3, #15
 800385e:	490a      	ldr	r1, [pc, #40]	; (8003888 <HAL_RCC_ClockConfig+0x1c0>)
 8003860:	5ccb      	ldrb	r3, [r1, r3]
 8003862:	fa22 f303 	lsr.w	r3, r2, r3
 8003866:	4a09      	ldr	r2, [pc, #36]	; (800388c <HAL_RCC_ClockConfig+0x1c4>)
 8003868:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800386a:	4b09      	ldr	r3, [pc, #36]	; (8003890 <HAL_RCC_ClockConfig+0x1c8>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4618      	mov	r0, r3
 8003870:	f7fd f9fc 	bl	8000c6c <HAL_InitTick>

  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	40023c00 	.word	0x40023c00
 8003884:	40023800 	.word	0x40023800
 8003888:	08009344 	.word	0x08009344
 800388c:	20000000 	.word	0x20000000
 8003890:	20000004 	.word	0x20000004

08003894 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003894:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003898:	b094      	sub	sp, #80	; 0x50
 800389a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800389c:	2300      	movs	r3, #0
 800389e:	647b      	str	r3, [r7, #68]	; 0x44
 80038a0:	2300      	movs	r3, #0
 80038a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038a4:	2300      	movs	r3, #0
 80038a6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80038a8:	2300      	movs	r3, #0
 80038aa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038ac:	4b79      	ldr	r3, [pc, #484]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x200>)
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f003 030c 	and.w	r3, r3, #12
 80038b4:	2b08      	cmp	r3, #8
 80038b6:	d00d      	beq.n	80038d4 <HAL_RCC_GetSysClockFreq+0x40>
 80038b8:	2b08      	cmp	r3, #8
 80038ba:	f200 80e1 	bhi.w	8003a80 <HAL_RCC_GetSysClockFreq+0x1ec>
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d002      	beq.n	80038c8 <HAL_RCC_GetSysClockFreq+0x34>
 80038c2:	2b04      	cmp	r3, #4
 80038c4:	d003      	beq.n	80038ce <HAL_RCC_GetSysClockFreq+0x3a>
 80038c6:	e0db      	b.n	8003a80 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038c8:	4b73      	ldr	r3, [pc, #460]	; (8003a98 <HAL_RCC_GetSysClockFreq+0x204>)
 80038ca:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80038cc:	e0db      	b.n	8003a86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038ce:	4b73      	ldr	r3, [pc, #460]	; (8003a9c <HAL_RCC_GetSysClockFreq+0x208>)
 80038d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80038d2:	e0d8      	b.n	8003a86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038d4:	4b6f      	ldr	r3, [pc, #444]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x200>)
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038dc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038de:	4b6d      	ldr	r3, [pc, #436]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x200>)
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d063      	beq.n	80039b2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038ea:	4b6a      	ldr	r3, [pc, #424]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x200>)
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	099b      	lsrs	r3, r3, #6
 80038f0:	2200      	movs	r2, #0
 80038f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80038f4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80038f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038fc:	633b      	str	r3, [r7, #48]	; 0x30
 80038fe:	2300      	movs	r3, #0
 8003900:	637b      	str	r3, [r7, #52]	; 0x34
 8003902:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003906:	4622      	mov	r2, r4
 8003908:	462b      	mov	r3, r5
 800390a:	f04f 0000 	mov.w	r0, #0
 800390e:	f04f 0100 	mov.w	r1, #0
 8003912:	0159      	lsls	r1, r3, #5
 8003914:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003918:	0150      	lsls	r0, r2, #5
 800391a:	4602      	mov	r2, r0
 800391c:	460b      	mov	r3, r1
 800391e:	4621      	mov	r1, r4
 8003920:	1a51      	subs	r1, r2, r1
 8003922:	6139      	str	r1, [r7, #16]
 8003924:	4629      	mov	r1, r5
 8003926:	eb63 0301 	sbc.w	r3, r3, r1
 800392a:	617b      	str	r3, [r7, #20]
 800392c:	f04f 0200 	mov.w	r2, #0
 8003930:	f04f 0300 	mov.w	r3, #0
 8003934:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003938:	4659      	mov	r1, fp
 800393a:	018b      	lsls	r3, r1, #6
 800393c:	4651      	mov	r1, sl
 800393e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003942:	4651      	mov	r1, sl
 8003944:	018a      	lsls	r2, r1, #6
 8003946:	4651      	mov	r1, sl
 8003948:	ebb2 0801 	subs.w	r8, r2, r1
 800394c:	4659      	mov	r1, fp
 800394e:	eb63 0901 	sbc.w	r9, r3, r1
 8003952:	f04f 0200 	mov.w	r2, #0
 8003956:	f04f 0300 	mov.w	r3, #0
 800395a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800395e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003962:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003966:	4690      	mov	r8, r2
 8003968:	4699      	mov	r9, r3
 800396a:	4623      	mov	r3, r4
 800396c:	eb18 0303 	adds.w	r3, r8, r3
 8003970:	60bb      	str	r3, [r7, #8]
 8003972:	462b      	mov	r3, r5
 8003974:	eb49 0303 	adc.w	r3, r9, r3
 8003978:	60fb      	str	r3, [r7, #12]
 800397a:	f04f 0200 	mov.w	r2, #0
 800397e:	f04f 0300 	mov.w	r3, #0
 8003982:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003986:	4629      	mov	r1, r5
 8003988:	024b      	lsls	r3, r1, #9
 800398a:	4621      	mov	r1, r4
 800398c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003990:	4621      	mov	r1, r4
 8003992:	024a      	lsls	r2, r1, #9
 8003994:	4610      	mov	r0, r2
 8003996:	4619      	mov	r1, r3
 8003998:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800399a:	2200      	movs	r2, #0
 800399c:	62bb      	str	r3, [r7, #40]	; 0x28
 800399e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80039a4:	f7fc fc10 	bl	80001c8 <__aeabi_uldivmod>
 80039a8:	4602      	mov	r2, r0
 80039aa:	460b      	mov	r3, r1
 80039ac:	4613      	mov	r3, r2
 80039ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039b0:	e058      	b.n	8003a64 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039b2:	4b38      	ldr	r3, [pc, #224]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x200>)
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	099b      	lsrs	r3, r3, #6
 80039b8:	2200      	movs	r2, #0
 80039ba:	4618      	mov	r0, r3
 80039bc:	4611      	mov	r1, r2
 80039be:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80039c2:	623b      	str	r3, [r7, #32]
 80039c4:	2300      	movs	r3, #0
 80039c6:	627b      	str	r3, [r7, #36]	; 0x24
 80039c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80039cc:	4642      	mov	r2, r8
 80039ce:	464b      	mov	r3, r9
 80039d0:	f04f 0000 	mov.w	r0, #0
 80039d4:	f04f 0100 	mov.w	r1, #0
 80039d8:	0159      	lsls	r1, r3, #5
 80039da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039de:	0150      	lsls	r0, r2, #5
 80039e0:	4602      	mov	r2, r0
 80039e2:	460b      	mov	r3, r1
 80039e4:	4641      	mov	r1, r8
 80039e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80039ea:	4649      	mov	r1, r9
 80039ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80039f0:	f04f 0200 	mov.w	r2, #0
 80039f4:	f04f 0300 	mov.w	r3, #0
 80039f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80039fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003a00:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003a04:	ebb2 040a 	subs.w	r4, r2, sl
 8003a08:	eb63 050b 	sbc.w	r5, r3, fp
 8003a0c:	f04f 0200 	mov.w	r2, #0
 8003a10:	f04f 0300 	mov.w	r3, #0
 8003a14:	00eb      	lsls	r3, r5, #3
 8003a16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a1a:	00e2      	lsls	r2, r4, #3
 8003a1c:	4614      	mov	r4, r2
 8003a1e:	461d      	mov	r5, r3
 8003a20:	4643      	mov	r3, r8
 8003a22:	18e3      	adds	r3, r4, r3
 8003a24:	603b      	str	r3, [r7, #0]
 8003a26:	464b      	mov	r3, r9
 8003a28:	eb45 0303 	adc.w	r3, r5, r3
 8003a2c:	607b      	str	r3, [r7, #4]
 8003a2e:	f04f 0200 	mov.w	r2, #0
 8003a32:	f04f 0300 	mov.w	r3, #0
 8003a36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a3a:	4629      	mov	r1, r5
 8003a3c:	028b      	lsls	r3, r1, #10
 8003a3e:	4621      	mov	r1, r4
 8003a40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a44:	4621      	mov	r1, r4
 8003a46:	028a      	lsls	r2, r1, #10
 8003a48:	4610      	mov	r0, r2
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a4e:	2200      	movs	r2, #0
 8003a50:	61bb      	str	r3, [r7, #24]
 8003a52:	61fa      	str	r2, [r7, #28]
 8003a54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a58:	f7fc fbb6 	bl	80001c8 <__aeabi_uldivmod>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	460b      	mov	r3, r1
 8003a60:	4613      	mov	r3, r2
 8003a62:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a64:	4b0b      	ldr	r3, [pc, #44]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	0c1b      	lsrs	r3, r3, #16
 8003a6a:	f003 0303 	and.w	r3, r3, #3
 8003a6e:	3301      	adds	r3, #1
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003a74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a7c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a7e:	e002      	b.n	8003a86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a80:	4b05      	ldr	r3, [pc, #20]	; (8003a98 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a82:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3750      	adds	r7, #80	; 0x50
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a92:	bf00      	nop
 8003a94:	40023800 	.word	0x40023800
 8003a98:	00f42400 	.word	0x00f42400
 8003a9c:	007a1200 	.word	0x007a1200

08003aa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003aa4:	4b03      	ldr	r3, [pc, #12]	; (8003ab4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	20000000 	.word	0x20000000

08003ab8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003abc:	f7ff fff0 	bl	8003aa0 <HAL_RCC_GetHCLKFreq>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	4b05      	ldr	r3, [pc, #20]	; (8003ad8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	0a9b      	lsrs	r3, r3, #10
 8003ac8:	f003 0307 	and.w	r3, r3, #7
 8003acc:	4903      	ldr	r1, [pc, #12]	; (8003adc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ace:	5ccb      	ldrb	r3, [r1, r3]
 8003ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	40023800 	.word	0x40023800
 8003adc:	08009354 	.word	0x08009354

08003ae0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ae4:	f7ff ffdc 	bl	8003aa0 <HAL_RCC_GetHCLKFreq>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	4b05      	ldr	r3, [pc, #20]	; (8003b00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	0b5b      	lsrs	r3, r3, #13
 8003af0:	f003 0307 	and.w	r3, r3, #7
 8003af4:	4903      	ldr	r1, [pc, #12]	; (8003b04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003af6:	5ccb      	ldrb	r3, [r1, r3]
 8003af8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	40023800 	.word	0x40023800
 8003b04:	08009354 	.word	0x08009354

08003b08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d101      	bne.n	8003b1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e03f      	b.n	8003b9a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d106      	bne.n	8003b34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f7fc fedc 	bl	80008ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2224      	movs	r2, #36	; 0x24
 8003b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68da      	ldr	r2, [r3, #12]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 fb91 	bl	8004274 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	691a      	ldr	r2, [r3, #16]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	695a      	ldr	r2, [r3, #20]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68da      	ldr	r2, [r3, #12]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2220      	movs	r2, #32
 8003b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2220      	movs	r2, #32
 8003b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3708      	adds	r7, #8
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b08a      	sub	sp, #40	; 0x28
 8003ba6:	af02      	add	r7, sp, #8
 8003ba8:	60f8      	str	r0, [r7, #12]
 8003baa:	60b9      	str	r1, [r7, #8]
 8003bac:	603b      	str	r3, [r7, #0]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b20      	cmp	r3, #32
 8003bc0:	d17c      	bne.n	8003cbc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d002      	beq.n	8003bce <HAL_UART_Transmit+0x2c>
 8003bc8:	88fb      	ldrh	r3, [r7, #6]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d101      	bne.n	8003bd2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e075      	b.n	8003cbe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d101      	bne.n	8003be0 <HAL_UART_Transmit+0x3e>
 8003bdc:	2302      	movs	r3, #2
 8003bde:	e06e      	b.n	8003cbe <HAL_UART_Transmit+0x11c>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2221      	movs	r2, #33	; 0x21
 8003bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003bf6:	f7fd f87d 	bl	8000cf4 <HAL_GetTick>
 8003bfa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	88fa      	ldrh	r2, [r7, #6]
 8003c00:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	88fa      	ldrh	r2, [r7, #6]
 8003c06:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c10:	d108      	bne.n	8003c24 <HAL_UART_Transmit+0x82>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d104      	bne.n	8003c24 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	61bb      	str	r3, [r7, #24]
 8003c22:	e003      	b.n	8003c2c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003c34:	e02a      	b.n	8003c8c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	9300      	str	r3, [sp, #0]
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	2180      	movs	r1, #128	; 0x80
 8003c40:	68f8      	ldr	r0, [r7, #12]
 8003c42:	f000 f97e 	bl	8003f42 <UART_WaitOnFlagUntilTimeout>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d001      	beq.n	8003c50 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e036      	b.n	8003cbe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10b      	bne.n	8003c6e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	881b      	ldrh	r3, [r3, #0]
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c64:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	3302      	adds	r3, #2
 8003c6a:	61bb      	str	r3, [r7, #24]
 8003c6c:	e007      	b.n	8003c7e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	781a      	ldrb	r2, [r3, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	3b01      	subs	r3, #1
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1cf      	bne.n	8003c36 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	9300      	str	r3, [sp, #0]
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	2140      	movs	r1, #64	; 0x40
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	f000 f94e 	bl	8003f42 <UART_WaitOnFlagUntilTimeout>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d001      	beq.n	8003cb0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e006      	b.n	8003cbe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	e000      	b.n	8003cbe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003cbc:	2302      	movs	r3, #2
  }
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3720      	adds	r7, #32
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b084      	sub	sp, #16
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	60f8      	str	r0, [r7, #12]
 8003cce:	60b9      	str	r1, [r7, #8]
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b20      	cmp	r3, #32
 8003cde:	d11d      	bne.n	8003d1c <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d002      	beq.n	8003cec <HAL_UART_Receive_DMA+0x26>
 8003ce6:	88fb      	ldrh	r3, [r7, #6]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d101      	bne.n	8003cf0 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e016      	b.n	8003d1e <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d101      	bne.n	8003cfe <HAL_UART_Receive_DMA+0x38>
 8003cfa:	2302      	movs	r3, #2
 8003cfc:	e00f      	b.n	8003d1e <HAL_UART_Receive_DMA+0x58>
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2201      	movs	r2, #1
 8003d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003d0c:	88fb      	ldrh	r3, [r7, #6]
 8003d0e:	461a      	mov	r2, r3
 8003d10:	68b9      	ldr	r1, [r7, #8]
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	f000 f984 	bl	8004020 <UART_Start_Receive_DMA>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	e000      	b.n	8003d1e <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003d1c:	2302      	movs	r3, #2
  }
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d26:	b480      	push	{r7}
 8003d28:	b083      	sub	sp, #12
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d2e:	bf00      	nop
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	b083      	sub	sp, #12
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
 8003d42:	460b      	mov	r3, r1
 8003d44:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d46:	bf00      	nop
 8003d48:	370c      	adds	r7, #12
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr

08003d52 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b09c      	sub	sp, #112	; 0x70
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d172      	bne.n	8003e54 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003d6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d70:	2200      	movs	r2, #0
 8003d72:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	330c      	adds	r3, #12
 8003d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d7e:	e853 3f00 	ldrex	r3, [r3]
 8003d82:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003d84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	330c      	adds	r3, #12
 8003d92:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003d94:	65ba      	str	r2, [r7, #88]	; 0x58
 8003d96:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d98:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d9a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d9c:	e841 2300 	strex	r3, r2, [r1]
 8003da0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003da2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1e5      	bne.n	8003d74 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003da8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	3314      	adds	r3, #20
 8003dae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db2:	e853 3f00 	ldrex	r3, [r3]
 8003db6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dba:	f023 0301 	bic.w	r3, r3, #1
 8003dbe:	667b      	str	r3, [r7, #100]	; 0x64
 8003dc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	3314      	adds	r3, #20
 8003dc6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003dc8:	647a      	str	r2, [r7, #68]	; 0x44
 8003dca:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dcc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003dce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003dd0:	e841 2300 	strex	r3, r2, [r1]
 8003dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003dd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1e5      	bne.n	8003da8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ddc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	3314      	adds	r3, #20
 8003de2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de6:	e853 3f00 	ldrex	r3, [r3]
 8003dea:	623b      	str	r3, [r7, #32]
   return(result);
 8003dec:	6a3b      	ldr	r3, [r7, #32]
 8003dee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003df2:	663b      	str	r3, [r7, #96]	; 0x60
 8003df4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	3314      	adds	r3, #20
 8003dfa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003dfc:	633a      	str	r2, [r7, #48]	; 0x30
 8003dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e00:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e04:	e841 2300 	strex	r3, r2, [r1]
 8003e08:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1e5      	bne.n	8003ddc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003e10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e12:	2220      	movs	r2, #32
 8003e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d119      	bne.n	8003e54 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	330c      	adds	r3, #12
 8003e26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	e853 3f00 	ldrex	r3, [r3]
 8003e2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f023 0310 	bic.w	r3, r3, #16
 8003e36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	330c      	adds	r3, #12
 8003e3e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003e40:	61fa      	str	r2, [r7, #28]
 8003e42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e44:	69b9      	ldr	r1, [r7, #24]
 8003e46:	69fa      	ldr	r2, [r7, #28]
 8003e48:	e841 2300 	strex	r3, r2, [r1]
 8003e4c:	617b      	str	r3, [r7, #20]
   return(result);
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1e5      	bne.n	8003e20 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d106      	bne.n	8003e6a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e5e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e60:	4619      	mov	r1, r3
 8003e62:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003e64:	f7ff ff69 	bl	8003d3a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003e68:	e002      	b.n	8003e70 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8003e6a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003e6c:	f7fc fb48 	bl	8000500 <HAL_UART_RxCpltCallback>
}
 8003e70:	bf00      	nop
 8003e72:	3770      	adds	r7, #112	; 0x70
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e84:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d108      	bne.n	8003ea0 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e92:	085b      	lsrs	r3, r3, #1
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	4619      	mov	r1, r3
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f7ff ff4e 	bl	8003d3a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003e9e:	e002      	b.n	8003ea6 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	f7fc fb13 	bl	80004cc <HAL_UART_RxHalfCpltCallback>
}
 8003ea6:	bf00      	nop
 8003ea8:	3710      	adds	r7, #16
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b084      	sub	sp, #16
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ebe:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eca:	2b80      	cmp	r3, #128	; 0x80
 8003ecc:	bf0c      	ite	eq
 8003ece:	2301      	moveq	r3, #1
 8003ed0:	2300      	movne	r3, #0
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	2b21      	cmp	r3, #33	; 0x21
 8003ee0:	d108      	bne.n	8003ef4 <UART_DMAError+0x46>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d005      	beq.n	8003ef4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	2200      	movs	r2, #0
 8003eec:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003eee:	68b8      	ldr	r0, [r7, #8]
 8003ef0:	f000 f934 	bl	800415c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003efe:	2b40      	cmp	r3, #64	; 0x40
 8003f00:	bf0c      	ite	eq
 8003f02:	2301      	moveq	r3, #1
 8003f04:	2300      	movne	r3, #0
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	2b22      	cmp	r3, #34	; 0x22
 8003f14:	d108      	bne.n	8003f28 <UART_DMAError+0x7a>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d005      	beq.n	8003f28 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003f22:	68b8      	ldr	r0, [r7, #8]
 8003f24:	f000 f942 	bl	80041ac <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2c:	f043 0210 	orr.w	r2, r3, #16
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f34:	68b8      	ldr	r0, [r7, #8]
 8003f36:	f7ff fef6 	bl	8003d26 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f3a:	bf00      	nop
 8003f3c:	3710      	adds	r7, #16
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b090      	sub	sp, #64	; 0x40
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	60f8      	str	r0, [r7, #12]
 8003f4a:	60b9      	str	r1, [r7, #8]
 8003f4c:	603b      	str	r3, [r7, #0]
 8003f4e:	4613      	mov	r3, r2
 8003f50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f52:	e050      	b.n	8003ff6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f5a:	d04c      	beq.n	8003ff6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d007      	beq.n	8003f72 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f62:	f7fc fec7 	bl	8000cf4 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d241      	bcs.n	8003ff6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	330c      	adds	r3, #12
 8003f78:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f7c:	e853 3f00 	ldrex	r3, [r3]
 8003f80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f84:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	330c      	adds	r3, #12
 8003f90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f92:	637a      	str	r2, [r7, #52]	; 0x34
 8003f94:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f9a:	e841 2300 	strex	r3, r2, [r1]
 8003f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1e5      	bne.n	8003f72 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	3314      	adds	r3, #20
 8003fac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	e853 3f00 	ldrex	r3, [r3]
 8003fb4:	613b      	str	r3, [r7, #16]
   return(result);
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	f023 0301 	bic.w	r3, r3, #1
 8003fbc:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	3314      	adds	r3, #20
 8003fc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fc6:	623a      	str	r2, [r7, #32]
 8003fc8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fca:	69f9      	ldr	r1, [r7, #28]
 8003fcc:	6a3a      	ldr	r2, [r7, #32]
 8003fce:	e841 2300 	strex	r3, r2, [r1]
 8003fd2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1e5      	bne.n	8003fa6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2220      	movs	r2, #32
 8003fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2220      	movs	r2, #32
 8003fe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e00f      	b.n	8004016 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	4013      	ands	r3, r2
 8004000:	68ba      	ldr	r2, [r7, #8]
 8004002:	429a      	cmp	r2, r3
 8004004:	bf0c      	ite	eq
 8004006:	2301      	moveq	r3, #1
 8004008:	2300      	movne	r3, #0
 800400a:	b2db      	uxtb	r3, r3
 800400c:	461a      	mov	r2, r3
 800400e:	79fb      	ldrb	r3, [r7, #7]
 8004010:	429a      	cmp	r2, r3
 8004012:	d09f      	beq.n	8003f54 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3740      	adds	r7, #64	; 0x40
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
	...

08004020 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b098      	sub	sp, #96	; 0x60
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	4613      	mov	r3, r2
 800402c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800402e:	68ba      	ldr	r2, [r7, #8]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	88fa      	ldrh	r2, [r7, #6]
 8004038:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2222      	movs	r2, #34	; 0x22
 8004044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800404c:	4a40      	ldr	r2, [pc, #256]	; (8004150 <UART_Start_Receive_DMA+0x130>)
 800404e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004054:	4a3f      	ldr	r2, [pc, #252]	; (8004154 <UART_Start_Receive_DMA+0x134>)
 8004056:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405c:	4a3e      	ldr	r2, [pc, #248]	; (8004158 <UART_Start_Receive_DMA+0x138>)
 800405e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004064:	2200      	movs	r2, #0
 8004066:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004068:	f107 0308 	add.w	r3, r7, #8
 800406c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	3304      	adds	r3, #4
 8004078:	4619      	mov	r1, r3
 800407a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	88fb      	ldrh	r3, [r7, #6]
 8004080:	f7fd f828 	bl	80010d4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004084:	2300      	movs	r3, #0
 8004086:	613b      	str	r3, [r7, #16]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	613b      	str	r3, [r7, #16]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	613b      	str	r3, [r7, #16]
 8004098:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d019      	beq.n	80040de <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	330c      	adds	r3, #12
 80040b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040b4:	e853 3f00 	ldrex	r3, [r3]
 80040b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80040ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	330c      	adds	r3, #12
 80040c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80040ca:	64fa      	str	r2, [r7, #76]	; 0x4c
 80040cc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ce:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80040d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040d2:	e841 2300 	strex	r3, r2, [r1]
 80040d6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80040d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d1e5      	bne.n	80040aa <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	3314      	adds	r3, #20
 80040e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e8:	e853 3f00 	ldrex	r3, [r3]
 80040ec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80040ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f0:	f043 0301 	orr.w	r3, r3, #1
 80040f4:	657b      	str	r3, [r7, #84]	; 0x54
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	3314      	adds	r3, #20
 80040fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80040fe:	63ba      	str	r2, [r7, #56]	; 0x38
 8004100:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004102:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004104:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004106:	e841 2300 	strex	r3, r2, [r1]
 800410a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800410c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1e5      	bne.n	80040de <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	3314      	adds	r3, #20
 8004118:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	e853 3f00 	ldrex	r3, [r3]
 8004120:	617b      	str	r3, [r7, #20]
   return(result);
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004128:	653b      	str	r3, [r7, #80]	; 0x50
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	3314      	adds	r3, #20
 8004130:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004132:	627a      	str	r2, [r7, #36]	; 0x24
 8004134:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004136:	6a39      	ldr	r1, [r7, #32]
 8004138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800413a:	e841 2300 	strex	r3, r2, [r1]
 800413e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1e5      	bne.n	8004112 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	3760      	adds	r7, #96	; 0x60
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	08003d53 	.word	0x08003d53
 8004154:	08003e79 	.word	0x08003e79
 8004158:	08003eaf 	.word	0x08003eaf

0800415c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800415c:	b480      	push	{r7}
 800415e:	b089      	sub	sp, #36	; 0x24
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	330c      	adds	r3, #12
 800416a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	e853 3f00 	ldrex	r3, [r3]
 8004172:	60bb      	str	r3, [r7, #8]
   return(result);
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800417a:	61fb      	str	r3, [r7, #28]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	330c      	adds	r3, #12
 8004182:	69fa      	ldr	r2, [r7, #28]
 8004184:	61ba      	str	r2, [r7, #24]
 8004186:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004188:	6979      	ldr	r1, [r7, #20]
 800418a:	69ba      	ldr	r2, [r7, #24]
 800418c:	e841 2300 	strex	r3, r2, [r1]
 8004190:	613b      	str	r3, [r7, #16]
   return(result);
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1e5      	bne.n	8004164 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2220      	movs	r2, #32
 800419c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80041a0:	bf00      	nop
 80041a2:	3724      	adds	r7, #36	; 0x24
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b095      	sub	sp, #84	; 0x54
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	330c      	adds	r3, #12
 80041ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041be:	e853 3f00 	ldrex	r3, [r3]
 80041c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80041c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	330c      	adds	r3, #12
 80041d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041d4:	643a      	str	r2, [r7, #64]	; 0x40
 80041d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80041da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80041dc:	e841 2300 	strex	r3, r2, [r1]
 80041e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d1e5      	bne.n	80041b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	3314      	adds	r3, #20
 80041ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f0:	6a3b      	ldr	r3, [r7, #32]
 80041f2:	e853 3f00 	ldrex	r3, [r3]
 80041f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	f023 0301 	bic.w	r3, r3, #1
 80041fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	3314      	adds	r3, #20
 8004206:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004208:	62fa      	str	r2, [r7, #44]	; 0x2c
 800420a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800420e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004210:	e841 2300 	strex	r3, r2, [r1]
 8004214:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004218:	2b00      	cmp	r3, #0
 800421a:	d1e5      	bne.n	80041e8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004220:	2b01      	cmp	r3, #1
 8004222:	d119      	bne.n	8004258 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	330c      	adds	r3, #12
 800422a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	e853 3f00 	ldrex	r3, [r3]
 8004232:	60bb      	str	r3, [r7, #8]
   return(result);
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	f023 0310 	bic.w	r3, r3, #16
 800423a:	647b      	str	r3, [r7, #68]	; 0x44
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	330c      	adds	r3, #12
 8004242:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004244:	61ba      	str	r2, [r7, #24]
 8004246:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004248:	6979      	ldr	r1, [r7, #20]
 800424a:	69ba      	ldr	r2, [r7, #24]
 800424c:	e841 2300 	strex	r3, r2, [r1]
 8004250:	613b      	str	r3, [r7, #16]
   return(result);
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d1e5      	bne.n	8004224 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2220      	movs	r2, #32
 800425c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004266:	bf00      	nop
 8004268:	3754      	adds	r7, #84	; 0x54
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
	...

08004274 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004274:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004278:	b0c0      	sub	sp, #256	; 0x100
 800427a:	af00      	add	r7, sp, #0
 800427c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800428c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004290:	68d9      	ldr	r1, [r3, #12]
 8004292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	ea40 0301 	orr.w	r3, r0, r1
 800429c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800429e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042a2:	689a      	ldr	r2, [r3, #8]
 80042a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	431a      	orrs	r2, r3
 80042ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	431a      	orrs	r2, r3
 80042b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042b8:	69db      	ldr	r3, [r3, #28]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80042c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80042cc:	f021 010c 	bic.w	r1, r1, #12
 80042d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80042da:	430b      	orrs	r3, r1
 80042dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	695b      	ldr	r3, [r3, #20]
 80042e6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80042ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ee:	6999      	ldr	r1, [r3, #24]
 80042f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	ea40 0301 	orr.w	r3, r0, r1
 80042fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80042fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	4b8f      	ldr	r3, [pc, #572]	; (8004540 <UART_SetConfig+0x2cc>)
 8004304:	429a      	cmp	r2, r3
 8004306:	d005      	beq.n	8004314 <UART_SetConfig+0xa0>
 8004308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	4b8d      	ldr	r3, [pc, #564]	; (8004544 <UART_SetConfig+0x2d0>)
 8004310:	429a      	cmp	r2, r3
 8004312:	d104      	bne.n	800431e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004314:	f7ff fbe4 	bl	8003ae0 <HAL_RCC_GetPCLK2Freq>
 8004318:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800431c:	e003      	b.n	8004326 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800431e:	f7ff fbcb 	bl	8003ab8 <HAL_RCC_GetPCLK1Freq>
 8004322:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800432a:	69db      	ldr	r3, [r3, #28]
 800432c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004330:	f040 810c 	bne.w	800454c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004334:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004338:	2200      	movs	r2, #0
 800433a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800433e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004342:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004346:	4622      	mov	r2, r4
 8004348:	462b      	mov	r3, r5
 800434a:	1891      	adds	r1, r2, r2
 800434c:	65b9      	str	r1, [r7, #88]	; 0x58
 800434e:	415b      	adcs	r3, r3
 8004350:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004352:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004356:	4621      	mov	r1, r4
 8004358:	eb12 0801 	adds.w	r8, r2, r1
 800435c:	4629      	mov	r1, r5
 800435e:	eb43 0901 	adc.w	r9, r3, r1
 8004362:	f04f 0200 	mov.w	r2, #0
 8004366:	f04f 0300 	mov.w	r3, #0
 800436a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800436e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004372:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004376:	4690      	mov	r8, r2
 8004378:	4699      	mov	r9, r3
 800437a:	4623      	mov	r3, r4
 800437c:	eb18 0303 	adds.w	r3, r8, r3
 8004380:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004384:	462b      	mov	r3, r5
 8004386:	eb49 0303 	adc.w	r3, r9, r3
 800438a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800438e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800439a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800439e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80043a2:	460b      	mov	r3, r1
 80043a4:	18db      	adds	r3, r3, r3
 80043a6:	653b      	str	r3, [r7, #80]	; 0x50
 80043a8:	4613      	mov	r3, r2
 80043aa:	eb42 0303 	adc.w	r3, r2, r3
 80043ae:	657b      	str	r3, [r7, #84]	; 0x54
 80043b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80043b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80043b8:	f7fb ff06 	bl	80001c8 <__aeabi_uldivmod>
 80043bc:	4602      	mov	r2, r0
 80043be:	460b      	mov	r3, r1
 80043c0:	4b61      	ldr	r3, [pc, #388]	; (8004548 <UART_SetConfig+0x2d4>)
 80043c2:	fba3 2302 	umull	r2, r3, r3, r2
 80043c6:	095b      	lsrs	r3, r3, #5
 80043c8:	011c      	lsls	r4, r3, #4
 80043ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043ce:	2200      	movs	r2, #0
 80043d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80043d4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80043d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80043dc:	4642      	mov	r2, r8
 80043de:	464b      	mov	r3, r9
 80043e0:	1891      	adds	r1, r2, r2
 80043e2:	64b9      	str	r1, [r7, #72]	; 0x48
 80043e4:	415b      	adcs	r3, r3
 80043e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80043ec:	4641      	mov	r1, r8
 80043ee:	eb12 0a01 	adds.w	sl, r2, r1
 80043f2:	4649      	mov	r1, r9
 80043f4:	eb43 0b01 	adc.w	fp, r3, r1
 80043f8:	f04f 0200 	mov.w	r2, #0
 80043fc:	f04f 0300 	mov.w	r3, #0
 8004400:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004404:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004408:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800440c:	4692      	mov	sl, r2
 800440e:	469b      	mov	fp, r3
 8004410:	4643      	mov	r3, r8
 8004412:	eb1a 0303 	adds.w	r3, sl, r3
 8004416:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800441a:	464b      	mov	r3, r9
 800441c:	eb4b 0303 	adc.w	r3, fp, r3
 8004420:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004430:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004434:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004438:	460b      	mov	r3, r1
 800443a:	18db      	adds	r3, r3, r3
 800443c:	643b      	str	r3, [r7, #64]	; 0x40
 800443e:	4613      	mov	r3, r2
 8004440:	eb42 0303 	adc.w	r3, r2, r3
 8004444:	647b      	str	r3, [r7, #68]	; 0x44
 8004446:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800444a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800444e:	f7fb febb 	bl	80001c8 <__aeabi_uldivmod>
 8004452:	4602      	mov	r2, r0
 8004454:	460b      	mov	r3, r1
 8004456:	4611      	mov	r1, r2
 8004458:	4b3b      	ldr	r3, [pc, #236]	; (8004548 <UART_SetConfig+0x2d4>)
 800445a:	fba3 2301 	umull	r2, r3, r3, r1
 800445e:	095b      	lsrs	r3, r3, #5
 8004460:	2264      	movs	r2, #100	; 0x64
 8004462:	fb02 f303 	mul.w	r3, r2, r3
 8004466:	1acb      	subs	r3, r1, r3
 8004468:	00db      	lsls	r3, r3, #3
 800446a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800446e:	4b36      	ldr	r3, [pc, #216]	; (8004548 <UART_SetConfig+0x2d4>)
 8004470:	fba3 2302 	umull	r2, r3, r3, r2
 8004474:	095b      	lsrs	r3, r3, #5
 8004476:	005b      	lsls	r3, r3, #1
 8004478:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800447c:	441c      	add	r4, r3
 800447e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004482:	2200      	movs	r2, #0
 8004484:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004488:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800448c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004490:	4642      	mov	r2, r8
 8004492:	464b      	mov	r3, r9
 8004494:	1891      	adds	r1, r2, r2
 8004496:	63b9      	str	r1, [r7, #56]	; 0x38
 8004498:	415b      	adcs	r3, r3
 800449a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800449c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80044a0:	4641      	mov	r1, r8
 80044a2:	1851      	adds	r1, r2, r1
 80044a4:	6339      	str	r1, [r7, #48]	; 0x30
 80044a6:	4649      	mov	r1, r9
 80044a8:	414b      	adcs	r3, r1
 80044aa:	637b      	str	r3, [r7, #52]	; 0x34
 80044ac:	f04f 0200 	mov.w	r2, #0
 80044b0:	f04f 0300 	mov.w	r3, #0
 80044b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80044b8:	4659      	mov	r1, fp
 80044ba:	00cb      	lsls	r3, r1, #3
 80044bc:	4651      	mov	r1, sl
 80044be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044c2:	4651      	mov	r1, sl
 80044c4:	00ca      	lsls	r2, r1, #3
 80044c6:	4610      	mov	r0, r2
 80044c8:	4619      	mov	r1, r3
 80044ca:	4603      	mov	r3, r0
 80044cc:	4642      	mov	r2, r8
 80044ce:	189b      	adds	r3, r3, r2
 80044d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80044d4:	464b      	mov	r3, r9
 80044d6:	460a      	mov	r2, r1
 80044d8:	eb42 0303 	adc.w	r3, r2, r3
 80044dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80044ec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80044f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80044f4:	460b      	mov	r3, r1
 80044f6:	18db      	adds	r3, r3, r3
 80044f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80044fa:	4613      	mov	r3, r2
 80044fc:	eb42 0303 	adc.w	r3, r2, r3
 8004500:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004502:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004506:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800450a:	f7fb fe5d 	bl	80001c8 <__aeabi_uldivmod>
 800450e:	4602      	mov	r2, r0
 8004510:	460b      	mov	r3, r1
 8004512:	4b0d      	ldr	r3, [pc, #52]	; (8004548 <UART_SetConfig+0x2d4>)
 8004514:	fba3 1302 	umull	r1, r3, r3, r2
 8004518:	095b      	lsrs	r3, r3, #5
 800451a:	2164      	movs	r1, #100	; 0x64
 800451c:	fb01 f303 	mul.w	r3, r1, r3
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	00db      	lsls	r3, r3, #3
 8004524:	3332      	adds	r3, #50	; 0x32
 8004526:	4a08      	ldr	r2, [pc, #32]	; (8004548 <UART_SetConfig+0x2d4>)
 8004528:	fba2 2303 	umull	r2, r3, r2, r3
 800452c:	095b      	lsrs	r3, r3, #5
 800452e:	f003 0207 	and.w	r2, r3, #7
 8004532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4422      	add	r2, r4
 800453a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800453c:	e105      	b.n	800474a <UART_SetConfig+0x4d6>
 800453e:	bf00      	nop
 8004540:	40011000 	.word	0x40011000
 8004544:	40011400 	.word	0x40011400
 8004548:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800454c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004550:	2200      	movs	r2, #0
 8004552:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004556:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800455a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800455e:	4642      	mov	r2, r8
 8004560:	464b      	mov	r3, r9
 8004562:	1891      	adds	r1, r2, r2
 8004564:	6239      	str	r1, [r7, #32]
 8004566:	415b      	adcs	r3, r3
 8004568:	627b      	str	r3, [r7, #36]	; 0x24
 800456a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800456e:	4641      	mov	r1, r8
 8004570:	1854      	adds	r4, r2, r1
 8004572:	4649      	mov	r1, r9
 8004574:	eb43 0501 	adc.w	r5, r3, r1
 8004578:	f04f 0200 	mov.w	r2, #0
 800457c:	f04f 0300 	mov.w	r3, #0
 8004580:	00eb      	lsls	r3, r5, #3
 8004582:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004586:	00e2      	lsls	r2, r4, #3
 8004588:	4614      	mov	r4, r2
 800458a:	461d      	mov	r5, r3
 800458c:	4643      	mov	r3, r8
 800458e:	18e3      	adds	r3, r4, r3
 8004590:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004594:	464b      	mov	r3, r9
 8004596:	eb45 0303 	adc.w	r3, r5, r3
 800459a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800459e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80045aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80045ae:	f04f 0200 	mov.w	r2, #0
 80045b2:	f04f 0300 	mov.w	r3, #0
 80045b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80045ba:	4629      	mov	r1, r5
 80045bc:	008b      	lsls	r3, r1, #2
 80045be:	4621      	mov	r1, r4
 80045c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045c4:	4621      	mov	r1, r4
 80045c6:	008a      	lsls	r2, r1, #2
 80045c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80045cc:	f7fb fdfc 	bl	80001c8 <__aeabi_uldivmod>
 80045d0:	4602      	mov	r2, r0
 80045d2:	460b      	mov	r3, r1
 80045d4:	4b60      	ldr	r3, [pc, #384]	; (8004758 <UART_SetConfig+0x4e4>)
 80045d6:	fba3 2302 	umull	r2, r3, r3, r2
 80045da:	095b      	lsrs	r3, r3, #5
 80045dc:	011c      	lsls	r4, r3, #4
 80045de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045e2:	2200      	movs	r2, #0
 80045e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80045e8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80045ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80045f0:	4642      	mov	r2, r8
 80045f2:	464b      	mov	r3, r9
 80045f4:	1891      	adds	r1, r2, r2
 80045f6:	61b9      	str	r1, [r7, #24]
 80045f8:	415b      	adcs	r3, r3
 80045fa:	61fb      	str	r3, [r7, #28]
 80045fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004600:	4641      	mov	r1, r8
 8004602:	1851      	adds	r1, r2, r1
 8004604:	6139      	str	r1, [r7, #16]
 8004606:	4649      	mov	r1, r9
 8004608:	414b      	adcs	r3, r1
 800460a:	617b      	str	r3, [r7, #20]
 800460c:	f04f 0200 	mov.w	r2, #0
 8004610:	f04f 0300 	mov.w	r3, #0
 8004614:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004618:	4659      	mov	r1, fp
 800461a:	00cb      	lsls	r3, r1, #3
 800461c:	4651      	mov	r1, sl
 800461e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004622:	4651      	mov	r1, sl
 8004624:	00ca      	lsls	r2, r1, #3
 8004626:	4610      	mov	r0, r2
 8004628:	4619      	mov	r1, r3
 800462a:	4603      	mov	r3, r0
 800462c:	4642      	mov	r2, r8
 800462e:	189b      	adds	r3, r3, r2
 8004630:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004634:	464b      	mov	r3, r9
 8004636:	460a      	mov	r2, r1
 8004638:	eb42 0303 	adc.w	r3, r2, r3
 800463c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	67bb      	str	r3, [r7, #120]	; 0x78
 800464a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800464c:	f04f 0200 	mov.w	r2, #0
 8004650:	f04f 0300 	mov.w	r3, #0
 8004654:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004658:	4649      	mov	r1, r9
 800465a:	008b      	lsls	r3, r1, #2
 800465c:	4641      	mov	r1, r8
 800465e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004662:	4641      	mov	r1, r8
 8004664:	008a      	lsls	r2, r1, #2
 8004666:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800466a:	f7fb fdad 	bl	80001c8 <__aeabi_uldivmod>
 800466e:	4602      	mov	r2, r0
 8004670:	460b      	mov	r3, r1
 8004672:	4b39      	ldr	r3, [pc, #228]	; (8004758 <UART_SetConfig+0x4e4>)
 8004674:	fba3 1302 	umull	r1, r3, r3, r2
 8004678:	095b      	lsrs	r3, r3, #5
 800467a:	2164      	movs	r1, #100	; 0x64
 800467c:	fb01 f303 	mul.w	r3, r1, r3
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	011b      	lsls	r3, r3, #4
 8004684:	3332      	adds	r3, #50	; 0x32
 8004686:	4a34      	ldr	r2, [pc, #208]	; (8004758 <UART_SetConfig+0x4e4>)
 8004688:	fba2 2303 	umull	r2, r3, r2, r3
 800468c:	095b      	lsrs	r3, r3, #5
 800468e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004692:	441c      	add	r4, r3
 8004694:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004698:	2200      	movs	r2, #0
 800469a:	673b      	str	r3, [r7, #112]	; 0x70
 800469c:	677a      	str	r2, [r7, #116]	; 0x74
 800469e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80046a2:	4642      	mov	r2, r8
 80046a4:	464b      	mov	r3, r9
 80046a6:	1891      	adds	r1, r2, r2
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	415b      	adcs	r3, r3
 80046ac:	60fb      	str	r3, [r7, #12]
 80046ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046b2:	4641      	mov	r1, r8
 80046b4:	1851      	adds	r1, r2, r1
 80046b6:	6039      	str	r1, [r7, #0]
 80046b8:	4649      	mov	r1, r9
 80046ba:	414b      	adcs	r3, r1
 80046bc:	607b      	str	r3, [r7, #4]
 80046be:	f04f 0200 	mov.w	r2, #0
 80046c2:	f04f 0300 	mov.w	r3, #0
 80046c6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80046ca:	4659      	mov	r1, fp
 80046cc:	00cb      	lsls	r3, r1, #3
 80046ce:	4651      	mov	r1, sl
 80046d0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046d4:	4651      	mov	r1, sl
 80046d6:	00ca      	lsls	r2, r1, #3
 80046d8:	4610      	mov	r0, r2
 80046da:	4619      	mov	r1, r3
 80046dc:	4603      	mov	r3, r0
 80046de:	4642      	mov	r2, r8
 80046e0:	189b      	adds	r3, r3, r2
 80046e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80046e4:	464b      	mov	r3, r9
 80046e6:	460a      	mov	r2, r1
 80046e8:	eb42 0303 	adc.w	r3, r2, r3
 80046ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80046ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	663b      	str	r3, [r7, #96]	; 0x60
 80046f8:	667a      	str	r2, [r7, #100]	; 0x64
 80046fa:	f04f 0200 	mov.w	r2, #0
 80046fe:	f04f 0300 	mov.w	r3, #0
 8004702:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004706:	4649      	mov	r1, r9
 8004708:	008b      	lsls	r3, r1, #2
 800470a:	4641      	mov	r1, r8
 800470c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004710:	4641      	mov	r1, r8
 8004712:	008a      	lsls	r2, r1, #2
 8004714:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004718:	f7fb fd56 	bl	80001c8 <__aeabi_uldivmod>
 800471c:	4602      	mov	r2, r0
 800471e:	460b      	mov	r3, r1
 8004720:	4b0d      	ldr	r3, [pc, #52]	; (8004758 <UART_SetConfig+0x4e4>)
 8004722:	fba3 1302 	umull	r1, r3, r3, r2
 8004726:	095b      	lsrs	r3, r3, #5
 8004728:	2164      	movs	r1, #100	; 0x64
 800472a:	fb01 f303 	mul.w	r3, r1, r3
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	011b      	lsls	r3, r3, #4
 8004732:	3332      	adds	r3, #50	; 0x32
 8004734:	4a08      	ldr	r2, [pc, #32]	; (8004758 <UART_SetConfig+0x4e4>)
 8004736:	fba2 2303 	umull	r2, r3, r2, r3
 800473a:	095b      	lsrs	r3, r3, #5
 800473c:	f003 020f 	and.w	r2, r3, #15
 8004740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4422      	add	r2, r4
 8004748:	609a      	str	r2, [r3, #8]
}
 800474a:	bf00      	nop
 800474c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004750:	46bd      	mov	sp, r7
 8004752:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004756:	bf00      	nop
 8004758:	51eb851f 	.word	0x51eb851f

0800475c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800475c:	b084      	sub	sp, #16
 800475e:	b580      	push	{r7, lr}
 8004760:	b084      	sub	sp, #16
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
 8004766:	f107 001c 	add.w	r0, r7, #28
 800476a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800476e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004770:	2b01      	cmp	r3, #1
 8004772:	d122      	bne.n	80047ba <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004778:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004788:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800479c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d105      	bne.n	80047ae <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 f9c0 	bl	8004b34 <USB_CoreReset>
 80047b4:	4603      	mov	r3, r0
 80047b6:	73fb      	strb	r3, [r7, #15]
 80047b8:	e01a      	b.n	80047f0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 f9b4 	bl	8004b34 <USB_CoreReset>
 80047cc:	4603      	mov	r3, r0
 80047ce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80047d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d106      	bne.n	80047e4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	639a      	str	r2, [r3, #56]	; 0x38
 80047e2:	e005      	b.n	80047f0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80047f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d10b      	bne.n	800480e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f043 0206 	orr.w	r2, r3, #6
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f043 0220 	orr.w	r2, r3, #32
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800480e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004810:	4618      	mov	r0, r3
 8004812:	3710      	adds	r7, #16
 8004814:	46bd      	mov	sp, r7
 8004816:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800481a:	b004      	add	sp, #16
 800481c:	4770      	bx	lr

0800481e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800481e:	b480      	push	{r7}
 8004820:	b083      	sub	sp, #12
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f043 0201 	orr.w	r2, r3, #1
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004832:	2300      	movs	r3, #0
}
 8004834:	4618      	mov	r0, r3
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f023 0201 	bic.w	r2, r3, #1
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	370c      	adds	r7, #12
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004862:	b580      	push	{r7, lr}
 8004864:	b084      	sub	sp, #16
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
 800486a:	460b      	mov	r3, r1
 800486c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800486e:	2300      	movs	r3, #0
 8004870:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800487e:	78fb      	ldrb	r3, [r7, #3]
 8004880:	2b01      	cmp	r3, #1
 8004882:	d115      	bne.n	80048b0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004890:	2001      	movs	r0, #1
 8004892:	f7fc fa3b 	bl	8000d0c <HAL_Delay>
      ms++;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	3301      	adds	r3, #1
 800489a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 f93a 	bl	8004b16 <USB_GetMode>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d01e      	beq.n	80048e6 <USB_SetCurrentMode+0x84>
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2b31      	cmp	r3, #49	; 0x31
 80048ac:	d9f0      	bls.n	8004890 <USB_SetCurrentMode+0x2e>
 80048ae:	e01a      	b.n	80048e6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80048b0:	78fb      	ldrb	r3, [r7, #3]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d115      	bne.n	80048e2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80048c2:	2001      	movs	r0, #1
 80048c4:	f7fc fa22 	bl	8000d0c <HAL_Delay>
      ms++;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	3301      	adds	r3, #1
 80048cc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 f921 	bl	8004b16 <USB_GetMode>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d005      	beq.n	80048e6 <USB_SetCurrentMode+0x84>
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2b31      	cmp	r3, #49	; 0x31
 80048de:	d9f0      	bls.n	80048c2 <USB_SetCurrentMode+0x60>
 80048e0:	e001      	b.n	80048e6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e005      	b.n	80048f2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2b32      	cmp	r3, #50	; 0x32
 80048ea:	d101      	bne.n	80048f0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e000      	b.n	80048f2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3710      	adds	r7, #16
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
	...

080048fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b085      	sub	sp, #20
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004906:	2300      	movs	r3, #0
 8004908:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	3301      	adds	r3, #1
 800490e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	4a13      	ldr	r2, [pc, #76]	; (8004960 <USB_FlushTxFifo+0x64>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d901      	bls.n	800491c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e01b      	b.n	8004954 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	691b      	ldr	r3, [r3, #16]
 8004920:	2b00      	cmp	r3, #0
 8004922:	daf2      	bge.n	800490a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004924:	2300      	movs	r3, #0
 8004926:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	019b      	lsls	r3, r3, #6
 800492c:	f043 0220 	orr.w	r2, r3, #32
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	3301      	adds	r3, #1
 8004938:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	4a08      	ldr	r2, [pc, #32]	; (8004960 <USB_FlushTxFifo+0x64>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d901      	bls.n	8004946 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e006      	b.n	8004954 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	f003 0320 	and.w	r3, r3, #32
 800494e:	2b20      	cmp	r3, #32
 8004950:	d0f0      	beq.n	8004934 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	3714      	adds	r7, #20
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr
 8004960:	00030d40 	.word	0x00030d40

08004964 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004964:	b480      	push	{r7}
 8004966:	b085      	sub	sp, #20
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800496c:	2300      	movs	r3, #0
 800496e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	3301      	adds	r3, #1
 8004974:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	4a11      	ldr	r2, [pc, #68]	; (80049c0 <USB_FlushRxFifo+0x5c>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d901      	bls.n	8004982 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e018      	b.n	80049b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	2b00      	cmp	r3, #0
 8004988:	daf2      	bge.n	8004970 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800498a:	2300      	movs	r3, #0
 800498c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2210      	movs	r2, #16
 8004992:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	3301      	adds	r3, #1
 8004998:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	4a08      	ldr	r2, [pc, #32]	; (80049c0 <USB_FlushRxFifo+0x5c>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d901      	bls.n	80049a6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e006      	b.n	80049b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	f003 0310 	and.w	r3, r3, #16
 80049ae:	2b10      	cmp	r3, #16
 80049b0:	d0f0      	beq.n	8004994 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80049b2:	2300      	movs	r3, #0
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3714      	adds	r7, #20
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr
 80049c0:	00030d40 	.word	0x00030d40

080049c4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b089      	sub	sp, #36	; 0x24
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	4611      	mov	r1, r2
 80049d0:	461a      	mov	r2, r3
 80049d2:	460b      	mov	r3, r1
 80049d4:	71fb      	strb	r3, [r7, #7]
 80049d6:	4613      	mov	r3, r2
 80049d8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80049e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d123      	bne.n	8004a32 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80049ea:	88bb      	ldrh	r3, [r7, #4]
 80049ec:	3303      	adds	r3, #3
 80049ee:	089b      	lsrs	r3, r3, #2
 80049f0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80049f2:	2300      	movs	r3, #0
 80049f4:	61bb      	str	r3, [r7, #24]
 80049f6:	e018      	b.n	8004a2a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80049f8:	79fb      	ldrb	r3, [r7, #7]
 80049fa:	031a      	lsls	r2, r3, #12
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	4413      	add	r3, r2
 8004a00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a04:	461a      	mov	r2, r3
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	3301      	adds	r3, #1
 8004a10:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	3301      	adds	r3, #1
 8004a16:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	3301      	adds	r3, #1
 8004a22:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	3301      	adds	r3, #1
 8004a28:	61bb      	str	r3, [r7, #24]
 8004a2a:	69ba      	ldr	r2, [r7, #24]
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d3e2      	bcc.n	80049f8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004a32:	2300      	movs	r3, #0
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3724      	adds	r7, #36	; 0x24
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b08b      	sub	sp, #44	; 0x2c
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004a56:	88fb      	ldrh	r3, [r7, #6]
 8004a58:	089b      	lsrs	r3, r3, #2
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004a5e:	88fb      	ldrh	r3, [r7, #6]
 8004a60:	f003 0303 	and.w	r3, r3, #3
 8004a64:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004a66:	2300      	movs	r3, #0
 8004a68:	623b      	str	r3, [r7, #32]
 8004a6a:	e014      	b.n	8004a96 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a76:	601a      	str	r2, [r3, #0]
    pDest++;
 8004a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a80:	3301      	adds	r3, #1
 8004a82:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a86:	3301      	adds	r3, #1
 8004a88:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004a90:	6a3b      	ldr	r3, [r7, #32]
 8004a92:	3301      	adds	r3, #1
 8004a94:	623b      	str	r3, [r7, #32]
 8004a96:	6a3a      	ldr	r2, [r7, #32]
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d3e6      	bcc.n	8004a6c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004a9e:	8bfb      	ldrh	r3, [r7, #30]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d01e      	beq.n	8004ae2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004aae:	461a      	mov	r2, r3
 8004ab0:	f107 0310 	add.w	r3, r7, #16
 8004ab4:	6812      	ldr	r2, [r2, #0]
 8004ab6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004ab8:	693a      	ldr	r2, [r7, #16]
 8004aba:	6a3b      	ldr	r3, [r7, #32]
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	00db      	lsls	r3, r3, #3
 8004ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ac4:	b2da      	uxtb	r2, r3
 8004ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac8:	701a      	strb	r2, [r3, #0]
      i++;
 8004aca:	6a3b      	ldr	r3, [r7, #32]
 8004acc:	3301      	adds	r3, #1
 8004ace:	623b      	str	r3, [r7, #32]
      pDest++;
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004ad6:	8bfb      	ldrh	r3, [r7, #30]
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004adc:	8bfb      	ldrh	r3, [r7, #30]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1ea      	bne.n	8004ab8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	372c      	adds	r7, #44	; 0x2c
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b085      	sub	sp, #20
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	695b      	ldr	r3, [r3, #20]
 8004afc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	4013      	ands	r3, r2
 8004b06:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004b08:	68fb      	ldr	r3, [r7, #12]
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3714      	adds	r7, #20
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr

08004b16 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004b16:	b480      	push	{r7}
 8004b18:	b083      	sub	sp, #12
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	f003 0301 	and.w	r3, r3, #1
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	370c      	adds	r7, #12
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
	...

08004b34 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	3301      	adds	r3, #1
 8004b44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	4a13      	ldr	r2, [pc, #76]	; (8004b98 <USB_CoreReset+0x64>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d901      	bls.n	8004b52 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e01b      	b.n	8004b8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	daf2      	bge.n	8004b40 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	f043 0201 	orr.w	r2, r3, #1
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	3301      	adds	r3, #1
 8004b6e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	4a09      	ldr	r2, [pc, #36]	; (8004b98 <USB_CoreReset+0x64>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d901      	bls.n	8004b7c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e006      	b.n	8004b8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	f003 0301 	and.w	r3, r3, #1
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d0f0      	beq.n	8004b6a <USB_CoreReset+0x36>

  return HAL_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3714      	adds	r7, #20
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	00030d40 	.word	0x00030d40

08004b9c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b9c:	b084      	sub	sp, #16
 8004b9e:	b580      	push	{r7, lr}
 8004ba0:	b086      	sub	sp, #24
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
 8004ba6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004baa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bde:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d018      	beq.n	8004c24 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d10a      	bne.n	8004c0e <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c06:	f043 0304 	orr.w	r3, r3, #4
 8004c0a:	6013      	str	r3, [r2, #0]
 8004c0c:	e014      	b.n	8004c38 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c1c:	f023 0304 	bic.w	r3, r3, #4
 8004c20:	6013      	str	r3, [r2, #0]
 8004c22:	e009      	b.n	8004c38 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c32:	f023 0304 	bic.w	r3, r3, #4
 8004c36:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004c38:	2110      	movs	r1, #16
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f7ff fe5e 	bl	80048fc <USB_FlushTxFifo>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d001      	beq.n	8004c4a <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f7ff fe8a 	bl	8004964 <USB_FlushRxFifo>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d001      	beq.n	8004c5a <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	613b      	str	r3, [r7, #16]
 8004c5e:	e015      	b.n	8004c8c <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	015a      	lsls	r2, r3, #5
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	4413      	add	r3, r2
 8004c68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c72:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	015a      	lsls	r2, r3, #5
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	4413      	add	r3, r2
 8004c7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c80:	461a      	mov	r2, r3
 8004c82:	2300      	movs	r3, #0
 8004c84:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	3301      	adds	r3, #1
 8004c8a:	613b      	str	r3, [r7, #16]
 8004c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c8e:	693a      	ldr	r2, [r7, #16]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d3e5      	bcc.n	8004c60 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ca0:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00b      	beq.n	8004cc6 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cb4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a13      	ldr	r2, [pc, #76]	; (8004d08 <USB_HostInit+0x16c>)
 8004cba:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a13      	ldr	r2, [pc, #76]	; (8004d0c <USB_HostInit+0x170>)
 8004cc0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004cc4:	e009      	b.n	8004cda <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2280      	movs	r2, #128	; 0x80
 8004cca:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a10      	ldr	r2, [pc, #64]	; (8004d10 <USB_HostInit+0x174>)
 8004cd0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a0f      	ldr	r2, [pc, #60]	; (8004d14 <USB_HostInit+0x178>)
 8004cd6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d105      	bne.n	8004cec <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	f043 0210 	orr.w	r2, r3, #16
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	699a      	ldr	r2, [r3, #24]
 8004cf0:	4b09      	ldr	r3, [pc, #36]	; (8004d18 <USB_HostInit+0x17c>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8004cf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3718      	adds	r7, #24
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d04:	b004      	add	sp, #16
 8004d06:	4770      	bx	lr
 8004d08:	01000200 	.word	0x01000200
 8004d0c:	00e00300 	.word	0x00e00300
 8004d10:	00600080 	.word	0x00600080
 8004d14:	004000e0 	.word	0x004000e0
 8004d18:	a3200008 	.word	0xa3200008

08004d1c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	460b      	mov	r3, r1
 8004d26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d3a:	f023 0303 	bic.w	r3, r3, #3
 8004d3e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	78fb      	ldrb	r3, [r7, #3]
 8004d4a:	f003 0303 	and.w	r3, r3, #3
 8004d4e:	68f9      	ldr	r1, [r7, #12]
 8004d50:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004d54:	4313      	orrs	r3, r2
 8004d56:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004d58:	78fb      	ldrb	r3, [r7, #3]
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d107      	bne.n	8004d6e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d64:	461a      	mov	r2, r3
 8004d66:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004d6a:	6053      	str	r3, [r2, #4]
 8004d6c:	e009      	b.n	8004d82 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004d6e:	78fb      	ldrb	r3, [r7, #3]
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d106      	bne.n	8004d82 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	f241 7370 	movw	r3, #6000	; 0x1770
 8004d80:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004d82:	2300      	movs	r3, #0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3714      	adds	r7, #20
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004db0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	68fa      	ldr	r2, [r7, #12]
 8004db6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004dba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dbe:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004dc0:	2064      	movs	r0, #100	; 0x64
 8004dc2:	f7fb ffa3 	bl	8000d0c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004dce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dd2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004dd4:	200a      	movs	r0, #10
 8004dd6:	f7fb ff99 	bl	8000d0c <HAL_Delay>

  return HAL_OK;
 8004dda:	2300      	movs	r3, #0
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3710      	adds	r7, #16
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b085      	sub	sp, #20
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	460b      	mov	r3, r1
 8004dee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004df4:	2300      	movs	r3, #0
 8004df6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004e08:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d109      	bne.n	8004e28 <USB_DriveVbus+0x44>
 8004e14:	78fb      	ldrb	r3, [r7, #3]
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d106      	bne.n	8004e28 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	68fa      	ldr	r2, [r7, #12]
 8004e1e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004e22:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004e26:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e32:	d109      	bne.n	8004e48 <USB_DriveVbus+0x64>
 8004e34:	78fb      	ldrb	r3, [r7, #3]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d106      	bne.n	8004e48 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	68fa      	ldr	r2, [r7, #12]
 8004e3e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004e42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e46:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3714      	adds	r7, #20
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr

08004e56 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004e56:	b480      	push	{r7}
 8004e58:	b085      	sub	sp, #20
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004e62:	2300      	movs	r3, #0
 8004e64:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	0c5b      	lsrs	r3, r3, #17
 8004e74:	f003 0303 	and.w	r3, r3, #3
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3714      	adds	r7, #20
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	b29b      	uxth	r3, r3
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3714      	adds	r7, #20
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
	...

08004ea8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b088      	sub	sp, #32
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	4608      	mov	r0, r1
 8004eb2:	4611      	mov	r1, r2
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	70fb      	strb	r3, [r7, #3]
 8004eba:	460b      	mov	r3, r1
 8004ebc:	70bb      	strb	r3, [r7, #2]
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004eca:	78fb      	ldrb	r3, [r7, #3]
 8004ecc:	015a      	lsls	r2, r3, #5
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004edc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004ede:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004ee2:	2b03      	cmp	r3, #3
 8004ee4:	d87e      	bhi.n	8004fe4 <USB_HC_Init+0x13c>
 8004ee6:	a201      	add	r2, pc, #4	; (adr r2, 8004eec <USB_HC_Init+0x44>)
 8004ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eec:	08004efd 	.word	0x08004efd
 8004ef0:	08004fa7 	.word	0x08004fa7
 8004ef4:	08004efd 	.word	0x08004efd
 8004ef8:	08004f69 	.word	0x08004f69
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004efc:	78fb      	ldrb	r3, [r7, #3]
 8004efe:	015a      	lsls	r2, r3, #5
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	4413      	add	r3, r2
 8004f04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f08:	461a      	mov	r2, r3
 8004f0a:	f240 439d 	movw	r3, #1181	; 0x49d
 8004f0e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004f10:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	da10      	bge.n	8004f3a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004f18:	78fb      	ldrb	r3, [r7, #3]
 8004f1a:	015a      	lsls	r2, r3, #5
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	4413      	add	r3, r2
 8004f20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	78fa      	ldrb	r2, [r7, #3]
 8004f28:	0151      	lsls	r1, r2, #5
 8004f2a:	693a      	ldr	r2, [r7, #16]
 8004f2c:	440a      	add	r2, r1
 8004f2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f36:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8004f38:	e057      	b.n	8004fea <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d051      	beq.n	8004fea <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8004f46:	78fb      	ldrb	r3, [r7, #3]
 8004f48:	015a      	lsls	r2, r3, #5
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	78fa      	ldrb	r2, [r7, #3]
 8004f56:	0151      	lsls	r1, r2, #5
 8004f58:	693a      	ldr	r2, [r7, #16]
 8004f5a:	440a      	add	r2, r1
 8004f5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f60:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004f64:	60d3      	str	r3, [r2, #12]
      break;
 8004f66:	e040      	b.n	8004fea <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004f68:	78fb      	ldrb	r3, [r7, #3]
 8004f6a:	015a      	lsls	r2, r3, #5
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	4413      	add	r3, r2
 8004f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f74:	461a      	mov	r2, r3
 8004f76:	f240 639d 	movw	r3, #1693	; 0x69d
 8004f7a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004f7c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	da34      	bge.n	8004fee <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004f84:	78fb      	ldrb	r3, [r7, #3]
 8004f86:	015a      	lsls	r2, r3, #5
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	78fa      	ldrb	r2, [r7, #3]
 8004f94:	0151      	lsls	r1, r2, #5
 8004f96:	693a      	ldr	r2, [r7, #16]
 8004f98:	440a      	add	r2, r1
 8004f9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fa2:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004fa4:	e023      	b.n	8004fee <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004fa6:	78fb      	ldrb	r3, [r7, #3]
 8004fa8:	015a      	lsls	r2, r3, #5
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	4413      	add	r3, r2
 8004fae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	f240 2325 	movw	r3, #549	; 0x225
 8004fb8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004fba:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	da17      	bge.n	8004ff2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004fc2:	78fb      	ldrb	r3, [r7, #3]
 8004fc4:	015a      	lsls	r2, r3, #5
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	4413      	add	r3, r2
 8004fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	78fa      	ldrb	r2, [r7, #3]
 8004fd2:	0151      	lsls	r1, r2, #5
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	440a      	add	r2, r1
 8004fd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fdc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004fe0:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004fe2:	e006      	b.n	8004ff2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	77fb      	strb	r3, [r7, #31]
      break;
 8004fe8:	e004      	b.n	8004ff4 <USB_HC_Init+0x14c>
      break;
 8004fea:	bf00      	nop
 8004fec:	e002      	b.n	8004ff4 <USB_HC_Init+0x14c>
      break;
 8004fee:	bf00      	nop
 8004ff0:	e000      	b.n	8004ff4 <USB_HC_Init+0x14c>
      break;
 8004ff2:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8004ff4:	78fb      	ldrb	r3, [r7, #3]
 8004ff6:	015a      	lsls	r2, r3, #5
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	78fa      	ldrb	r2, [r7, #3]
 8005004:	0151      	lsls	r1, r2, #5
 8005006:	693a      	ldr	r2, [r7, #16]
 8005008:	440a      	add	r2, r1
 800500a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800500e:	f043 0302 	orr.w	r3, r3, #2
 8005012:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800501a:	699a      	ldr	r2, [r3, #24]
 800501c:	78fb      	ldrb	r3, [r7, #3]
 800501e:	f003 030f 	and.w	r3, r3, #15
 8005022:	2101      	movs	r1, #1
 8005024:	fa01 f303 	lsl.w	r3, r1, r3
 8005028:	6939      	ldr	r1, [r7, #16]
 800502a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800502e:	4313      	orrs	r3, r2
 8005030:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800503e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005042:	2b00      	cmp	r3, #0
 8005044:	da03      	bge.n	800504e <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005046:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800504a:	61bb      	str	r3, [r7, #24]
 800504c:	e001      	b.n	8005052 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800504e:	2300      	movs	r3, #0
 8005050:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f7ff feff 	bl	8004e56 <USB_GetHostSpeed>
 8005058:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800505a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800505e:	2b02      	cmp	r3, #2
 8005060:	d106      	bne.n	8005070 <USB_HC_Init+0x1c8>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2b02      	cmp	r3, #2
 8005066:	d003      	beq.n	8005070 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005068:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800506c:	617b      	str	r3, [r7, #20]
 800506e:	e001      	b.n	8005074 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005070:	2300      	movs	r3, #0
 8005072:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005074:	787b      	ldrb	r3, [r7, #1]
 8005076:	059b      	lsls	r3, r3, #22
 8005078:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800507c:	78bb      	ldrb	r3, [r7, #2]
 800507e:	02db      	lsls	r3, r3, #11
 8005080:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005084:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005086:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800508a:	049b      	lsls	r3, r3, #18
 800508c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005090:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005092:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005094:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005098:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800509e:	78fb      	ldrb	r3, [r7, #3]
 80050a0:	0159      	lsls	r1, r3, #5
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	440b      	add	r3, r1
 80050a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050aa:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80050b0:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80050b2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80050b6:	2b03      	cmp	r3, #3
 80050b8:	d003      	beq.n	80050c2 <USB_HC_Init+0x21a>
 80050ba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d10f      	bne.n	80050e2 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80050c2:	78fb      	ldrb	r3, [r7, #3]
 80050c4:	015a      	lsls	r2, r3, #5
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	4413      	add	r3, r2
 80050ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	78fa      	ldrb	r2, [r7, #3]
 80050d2:	0151      	lsls	r1, r2, #5
 80050d4:	693a      	ldr	r2, [r7, #16]
 80050d6:	440a      	add	r2, r1
 80050d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80050e0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80050e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3720      	adds	r7, #32
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b08c      	sub	sp, #48	; 0x30
 80050f0:	af02      	add	r7, sp, #8
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	4613      	mov	r3, r2
 80050f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	785b      	ldrb	r3, [r3, #1]
 8005102:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005104:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005108:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800510e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005112:	2b00      	cmp	r3, #0
 8005114:	d02d      	beq.n	8005172 <USB_HC_StartXfer+0x86>
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	791b      	ldrb	r3, [r3, #4]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d129      	bne.n	8005172 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800511e:	79fb      	ldrb	r3, [r7, #7]
 8005120:	2b01      	cmp	r3, #1
 8005122:	d117      	bne.n	8005154 <USB_HC_StartXfer+0x68>
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	79db      	ldrb	r3, [r3, #7]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d003      	beq.n	8005134 <USB_HC_StartXfer+0x48>
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	79db      	ldrb	r3, [r3, #7]
 8005130:	2b02      	cmp	r3, #2
 8005132:	d10f      	bne.n	8005154 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	015a      	lsls	r2, r3, #5
 8005138:	6a3b      	ldr	r3, [r7, #32]
 800513a:	4413      	add	r3, r2
 800513c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	69fa      	ldr	r2, [r7, #28]
 8005144:	0151      	lsls	r1, r2, #5
 8005146:	6a3a      	ldr	r2, [r7, #32]
 8005148:	440a      	add	r2, r1
 800514a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800514e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005152:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005154:	79fb      	ldrb	r3, [r7, #7]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d10b      	bne.n	8005172 <USB_HC_StartXfer+0x86>
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	795b      	ldrb	r3, [r3, #5]
 800515e:	2b01      	cmp	r3, #1
 8005160:	d107      	bne.n	8005172 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	785b      	ldrb	r3, [r3, #1]
 8005166:	4619      	mov	r1, r3
 8005168:	68f8      	ldr	r0, [r7, #12]
 800516a:	f000 fa0f 	bl	800558c <USB_DoPing>
      return HAL_OK;
 800516e:	2300      	movs	r3, #0
 8005170:	e0f8      	b.n	8005364 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	695b      	ldr	r3, [r3, #20]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d018      	beq.n	80051ac <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	68ba      	ldr	r2, [r7, #8]
 8005180:	8912      	ldrh	r2, [r2, #8]
 8005182:	4413      	add	r3, r2
 8005184:	3b01      	subs	r3, #1
 8005186:	68ba      	ldr	r2, [r7, #8]
 8005188:	8912      	ldrh	r2, [r2, #8]
 800518a:	fbb3 f3f2 	udiv	r3, r3, r2
 800518e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005190:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005192:	8b7b      	ldrh	r3, [r7, #26]
 8005194:	429a      	cmp	r2, r3
 8005196:	d90b      	bls.n	80051b0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005198:	8b7b      	ldrh	r3, [r7, #26]
 800519a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800519c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800519e:	68ba      	ldr	r2, [r7, #8]
 80051a0:	8912      	ldrh	r2, [r2, #8]
 80051a2:	fb03 f202 	mul.w	r2, r3, r2
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	611a      	str	r2, [r3, #16]
 80051aa:	e001      	b.n	80051b0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80051ac:	2301      	movs	r3, #1
 80051ae:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	78db      	ldrb	r3, [r3, #3]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d007      	beq.n	80051c8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80051b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80051ba:	68ba      	ldr	r2, [r7, #8]
 80051bc:	8912      	ldrh	r2, [r2, #8]
 80051be:	fb03 f202 	mul.w	r2, r3, r2
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	611a      	str	r2, [r3, #16]
 80051c6:	e003      	b.n	80051d0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	695a      	ldr	r2, [r3, #20]
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	691b      	ldr	r3, [r3, #16]
 80051d4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80051d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80051da:	04d9      	lsls	r1, r3, #19
 80051dc:	4b63      	ldr	r3, [pc, #396]	; (800536c <USB_HC_StartXfer+0x280>)
 80051de:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80051e0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	7a9b      	ldrb	r3, [r3, #10]
 80051e6:	075b      	lsls	r3, r3, #29
 80051e8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80051ec:	69f9      	ldr	r1, [r7, #28]
 80051ee:	0148      	lsls	r0, r1, #5
 80051f0:	6a39      	ldr	r1, [r7, #32]
 80051f2:	4401      	add	r1, r0
 80051f4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80051f8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80051fa:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80051fc:	79fb      	ldrb	r3, [r7, #7]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d009      	beq.n	8005216 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	68d9      	ldr	r1, [r3, #12]
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	015a      	lsls	r2, r3, #5
 800520a:	6a3b      	ldr	r3, [r7, #32]
 800520c:	4413      	add	r3, r2
 800520e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005212:	460a      	mov	r2, r1
 8005214:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005216:	6a3b      	ldr	r3, [r7, #32]
 8005218:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f003 0301 	and.w	r3, r3, #1
 8005222:	2b00      	cmp	r3, #0
 8005224:	bf0c      	ite	eq
 8005226:	2301      	moveq	r3, #1
 8005228:	2300      	movne	r3, #0
 800522a:	b2db      	uxtb	r3, r3
 800522c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	015a      	lsls	r2, r3, #5
 8005232:	6a3b      	ldr	r3, [r7, #32]
 8005234:	4413      	add	r3, r2
 8005236:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	69fa      	ldr	r2, [r7, #28]
 800523e:	0151      	lsls	r1, r2, #5
 8005240:	6a3a      	ldr	r2, [r7, #32]
 8005242:	440a      	add	r2, r1
 8005244:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005248:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800524c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	015a      	lsls	r2, r3, #5
 8005252:	6a3b      	ldr	r3, [r7, #32]
 8005254:	4413      	add	r3, r2
 8005256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	7e7b      	ldrb	r3, [r7, #25]
 800525e:	075b      	lsls	r3, r3, #29
 8005260:	69f9      	ldr	r1, [r7, #28]
 8005262:	0148      	lsls	r0, r1, #5
 8005264:	6a39      	ldr	r1, [r7, #32]
 8005266:	4401      	add	r1, r0
 8005268:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800526c:	4313      	orrs	r3, r2
 800526e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	015a      	lsls	r2, r3, #5
 8005274:	6a3b      	ldr	r3, [r7, #32]
 8005276:	4413      	add	r3, r2
 8005278:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005286:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	78db      	ldrb	r3, [r3, #3]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d004      	beq.n	800529a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005296:	613b      	str	r3, [r7, #16]
 8005298:	e003      	b.n	80052a2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80052a0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052a8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	015a      	lsls	r2, r3, #5
 80052ae:	6a3b      	ldr	r3, [r7, #32]
 80052b0:	4413      	add	r3, r2
 80052b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052b6:	461a      	mov	r2, r3
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80052bc:	79fb      	ldrb	r3, [r7, #7]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d001      	beq.n	80052c6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80052c2:	2300      	movs	r3, #0
 80052c4:	e04e      	b.n	8005364 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	78db      	ldrb	r3, [r3, #3]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d149      	bne.n	8005362 <USB_HC_StartXfer+0x276>
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d045      	beq.n	8005362 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	79db      	ldrb	r3, [r3, #7]
 80052da:	2b03      	cmp	r3, #3
 80052dc:	d830      	bhi.n	8005340 <USB_HC_StartXfer+0x254>
 80052de:	a201      	add	r2, pc, #4	; (adr r2, 80052e4 <USB_HC_StartXfer+0x1f8>)
 80052e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e4:	080052f5 	.word	0x080052f5
 80052e8:	08005319 	.word	0x08005319
 80052ec:	080052f5 	.word	0x080052f5
 80052f0:	08005319 	.word	0x08005319
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	695b      	ldr	r3, [r3, #20]
 80052f8:	3303      	adds	r3, #3
 80052fa:	089b      	lsrs	r3, r3, #2
 80052fc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80052fe:	8afa      	ldrh	r2, [r7, #22]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005304:	b29b      	uxth	r3, r3
 8005306:	429a      	cmp	r2, r3
 8005308:	d91c      	bls.n	8005344 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	699b      	ldr	r3, [r3, #24]
 800530e:	f043 0220 	orr.w	r2, r3, #32
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	619a      	str	r2, [r3, #24]
        }
        break;
 8005316:	e015      	b.n	8005344 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	695b      	ldr	r3, [r3, #20]
 800531c:	3303      	adds	r3, #3
 800531e:	089b      	lsrs	r3, r3, #2
 8005320:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005322:	8afa      	ldrh	r2, [r7, #22]
 8005324:	6a3b      	ldr	r3, [r7, #32]
 8005326:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	b29b      	uxth	r3, r3
 800532e:	429a      	cmp	r2, r3
 8005330:	d90a      	bls.n	8005348 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	619a      	str	r2, [r3, #24]
        }
        break;
 800533e:	e003      	b.n	8005348 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005340:	bf00      	nop
 8005342:	e002      	b.n	800534a <USB_HC_StartXfer+0x25e>
        break;
 8005344:	bf00      	nop
 8005346:	e000      	b.n	800534a <USB_HC_StartXfer+0x25e>
        break;
 8005348:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	68d9      	ldr	r1, [r3, #12]
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	785a      	ldrb	r2, [r3, #1]
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	b29b      	uxth	r3, r3
 8005358:	2000      	movs	r0, #0
 800535a:	9000      	str	r0, [sp, #0]
 800535c:	68f8      	ldr	r0, [r7, #12]
 800535e:	f7ff fb31 	bl	80049c4 <USB_WritePacket>
  }

  return HAL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	4618      	mov	r0, r3
 8005366:	3728      	adds	r7, #40	; 0x28
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	1ff80000 	.word	0x1ff80000

08005370 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005370:	b480      	push	{r7}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005382:	695b      	ldr	r3, [r3, #20]
 8005384:	b29b      	uxth	r3, r3
}
 8005386:	4618      	mov	r0, r3
 8005388:	3714      	adds	r7, #20
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr

08005392 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005392:	b480      	push	{r7}
 8005394:	b089      	sub	sp, #36	; 0x24
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
 800539a:	460b      	mov	r3, r1
 800539c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80053a2:	78fb      	ldrb	r3, [r7, #3]
 80053a4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80053a6:	2300      	movs	r3, #0
 80053a8:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	015a      	lsls	r2, r3, #5
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	4413      	add	r3, r2
 80053b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	0c9b      	lsrs	r3, r3, #18
 80053ba:	f003 0303 	and.w	r3, r3, #3
 80053be:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	015a      	lsls	r2, r3, #5
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	4413      	add	r3, r2
 80053c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	0fdb      	lsrs	r3, r3, #31
 80053d0:	f003 0301 	and.w	r3, r3, #1
 80053d4:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f003 0320 	and.w	r3, r3, #32
 80053de:	2b20      	cmp	r3, #32
 80053e0:	d104      	bne.n	80053ec <USB_HC_Halt+0x5a>
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d101      	bne.n	80053ec <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80053e8:	2300      	movs	r3, #0
 80053ea:	e0c8      	b.n	800557e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d002      	beq.n	80053f8 <USB_HC_Halt+0x66>
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d163      	bne.n	80054c0 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	015a      	lsls	r2, r3, #5
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	4413      	add	r3, r2
 8005400:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	69ba      	ldr	r2, [r7, #24]
 8005408:	0151      	lsls	r1, r2, #5
 800540a:	69fa      	ldr	r2, [r7, #28]
 800540c:	440a      	add	r2, r1
 800540e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005412:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005416:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	f003 0320 	and.w	r3, r3, #32
 8005420:	2b00      	cmp	r3, #0
 8005422:	f040 80ab 	bne.w	800557c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800542a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d133      	bne.n	800549a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	015a      	lsls	r2, r3, #5
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	4413      	add	r3, r2
 800543a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	69ba      	ldr	r2, [r7, #24]
 8005442:	0151      	lsls	r1, r2, #5
 8005444:	69fa      	ldr	r2, [r7, #28]
 8005446:	440a      	add	r2, r1
 8005448:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800544c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005450:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	015a      	lsls	r2, r3, #5
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	4413      	add	r3, r2
 800545a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	69ba      	ldr	r2, [r7, #24]
 8005462:	0151      	lsls	r1, r2, #5
 8005464:	69fa      	ldr	r2, [r7, #28]
 8005466:	440a      	add	r2, r1
 8005468:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800546c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005470:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	3301      	adds	r3, #1
 8005476:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800547e:	d81d      	bhi.n	80054bc <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	015a      	lsls	r2, r3, #5
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	4413      	add	r3, r2
 8005488:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005492:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005496:	d0ec      	beq.n	8005472 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005498:	e070      	b.n	800557c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	015a      	lsls	r2, r3, #5
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	4413      	add	r3, r2
 80054a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	69ba      	ldr	r2, [r7, #24]
 80054aa:	0151      	lsls	r1, r2, #5
 80054ac:	69fa      	ldr	r2, [r7, #28]
 80054ae:	440a      	add	r2, r1
 80054b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80054b8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80054ba:	e05f      	b.n	800557c <USB_HC_Halt+0x1ea>
            break;
 80054bc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80054be:	e05d      	b.n	800557c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	015a      	lsls	r2, r3, #5
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	4413      	add	r3, r2
 80054c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	69ba      	ldr	r2, [r7, #24]
 80054d0:	0151      	lsls	r1, r2, #5
 80054d2:	69fa      	ldr	r2, [r7, #28]
 80054d4:	440a      	add	r2, r1
 80054d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054de:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054e6:	691b      	ldr	r3, [r3, #16]
 80054e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d133      	bne.n	8005558 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	015a      	lsls	r2, r3, #5
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	4413      	add	r3, r2
 80054f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	69ba      	ldr	r2, [r7, #24]
 8005500:	0151      	lsls	r1, r2, #5
 8005502:	69fa      	ldr	r2, [r7, #28]
 8005504:	440a      	add	r2, r1
 8005506:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800550a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800550e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	015a      	lsls	r2, r3, #5
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	4413      	add	r3, r2
 8005518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	69ba      	ldr	r2, [r7, #24]
 8005520:	0151      	lsls	r1, r2, #5
 8005522:	69fa      	ldr	r2, [r7, #28]
 8005524:	440a      	add	r2, r1
 8005526:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800552a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800552e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	3301      	adds	r3, #1
 8005534:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800553c:	d81d      	bhi.n	800557a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800553e:	69bb      	ldr	r3, [r7, #24]
 8005540:	015a      	lsls	r2, r3, #5
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	4413      	add	r3, r2
 8005546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005550:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005554:	d0ec      	beq.n	8005530 <USB_HC_Halt+0x19e>
 8005556:	e011      	b.n	800557c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	015a      	lsls	r2, r3, #5
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	4413      	add	r3, r2
 8005560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	69ba      	ldr	r2, [r7, #24]
 8005568:	0151      	lsls	r1, r2, #5
 800556a:	69fa      	ldr	r2, [r7, #28]
 800556c:	440a      	add	r2, r1
 800556e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005572:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005576:	6013      	str	r3, [r2, #0]
 8005578:	e000      	b.n	800557c <USB_HC_Halt+0x1ea>
          break;
 800557a:	bf00      	nop
    }
  }

  return HAL_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	3724      	adds	r7, #36	; 0x24
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr
	...

0800558c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800558c:	b480      	push	{r7}
 800558e:	b087      	sub	sp, #28
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	460b      	mov	r3, r1
 8005596:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800559c:	78fb      	ldrb	r3, [r7, #3]
 800559e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80055a0:	2301      	movs	r3, #1
 80055a2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	04da      	lsls	r2, r3, #19
 80055a8:	4b15      	ldr	r3, [pc, #84]	; (8005600 <USB_DoPing+0x74>)
 80055aa:	4013      	ands	r3, r2
 80055ac:	693a      	ldr	r2, [r7, #16]
 80055ae:	0151      	lsls	r1, r2, #5
 80055b0:	697a      	ldr	r2, [r7, #20]
 80055b2:	440a      	add	r2, r1
 80055b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80055bc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	015a      	lsls	r2, r3, #5
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	4413      	add	r3, r2
 80055c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80055d4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80055dc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	015a      	lsls	r2, r3, #5
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	4413      	add	r3, r2
 80055e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055ea:	461a      	mov	r2, r3
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	371c      	adds	r7, #28
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr
 80055fe:	bf00      	nop
 8005600:	1ff80000 	.word	0x1ff80000

08005604 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b088      	sub	sp, #32
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800560c:	2300      	movs	r3, #0
 800560e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005614:	2300      	movs	r3, #0
 8005616:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f7ff f911 	bl	8004840 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800561e:	2110      	movs	r1, #16
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f7ff f96b 	bl	80048fc <USB_FlushTxFifo>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d001      	beq.n	8005630 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f7ff f997 	bl	8004964 <USB_FlushRxFifo>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d001      	beq.n	8005640 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005640:	2300      	movs	r3, #0
 8005642:	61bb      	str	r3, [r7, #24]
 8005644:	e01f      	b.n	8005686 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	015a      	lsls	r2, r3, #5
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	4413      	add	r3, r2
 800564e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800565c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005664:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800566c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	015a      	lsls	r2, r3, #5
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	4413      	add	r3, r2
 8005676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800567a:	461a      	mov	r2, r3
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	3301      	adds	r3, #1
 8005684:	61bb      	str	r3, [r7, #24]
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	2b0f      	cmp	r3, #15
 800568a:	d9dc      	bls.n	8005646 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800568c:	2300      	movs	r3, #0
 800568e:	61bb      	str	r3, [r7, #24]
 8005690:	e034      	b.n	80056fc <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	015a      	lsls	r2, r3, #5
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	4413      	add	r3, r2
 800569a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056a8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80056b0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80056b8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	015a      	lsls	r2, r3, #5
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	4413      	add	r3, r2
 80056c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056c6:	461a      	mov	r2, r3
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	3301      	adds	r3, #1
 80056d0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056d8:	d80c      	bhi.n	80056f4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80056da:	69bb      	ldr	r3, [r7, #24]
 80056dc:	015a      	lsls	r2, r3, #5
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	4413      	add	r3, r2
 80056e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056f0:	d0ec      	beq.n	80056cc <USB_StopHost+0xc8>
 80056f2:	e000      	b.n	80056f6 <USB_StopHost+0xf2>
        break;
 80056f4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	3301      	adds	r3, #1
 80056fa:	61bb      	str	r3, [r7, #24]
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	2b0f      	cmp	r3, #15
 8005700:	d9c7      	bls.n	8005692 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005708:	461a      	mov	r2, r3
 800570a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800570e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005716:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f7ff f880 	bl	800481e <USB_EnableGlobalInt>

  return ret;
 800571e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005720:	4618      	mov	r0, r3
 8005722:	3720      	adds	r7, #32
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 800572c:	4904      	ldr	r1, [pc, #16]	; (8005740 <MX_FATFS_Init+0x18>)
 800572e:	4805      	ldr	r0, [pc, #20]	; (8005744 <MX_FATFS_Init+0x1c>)
 8005730:	f003 f95e 	bl	80089f0 <FATFS_LinkDriver>
 8005734:	4603      	mov	r3, r0
 8005736:	461a      	mov	r2, r3
 8005738:	4b03      	ldr	r3, [pc, #12]	; (8005748 <MX_FATFS_Init+0x20>)
 800573a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800573c:	bf00      	nop
 800573e:	bd80      	pop	{r7, pc}
 8005740:	20000244 	.word	0x20000244
 8005744:	08009364 	.word	0x08009364
 8005748:	20000240 	.word	0x20000240

0800574c <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	4603      	mov	r3, r0
 8005754:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8005756:	2300      	movs	r3, #0
}
 8005758:	4618      	mov	r0, r3
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	4603      	mov	r3, r0
 800576c:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8005772:	79fb      	ldrb	r3, [r7, #7]
 8005774:	4619      	mov	r1, r3
 8005776:	4808      	ldr	r0, [pc, #32]	; (8005798 <USBH_status+0x34>)
 8005778:	f000 fe32 	bl	80063e0 <USBH_MSC_UnitIsReady>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d002      	beq.n	8005788 <USBH_status+0x24>
  {
    res = RES_OK;
 8005782:	2300      	movs	r3, #0
 8005784:	73fb      	strb	r3, [r7, #15]
 8005786:	e001      	b.n	800578c <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800578c:	7bfb      	ldrb	r3, [r7, #15]
}
 800578e:	4618      	mov	r0, r3
 8005790:	3710      	adds	r7, #16
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
 8005796:	bf00      	nop
 8005798:	20000254 	.word	0x20000254

0800579c <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b094      	sub	sp, #80	; 0x50
 80057a0:	af02      	add	r7, sp, #8
 80057a2:	60b9      	str	r1, [r7, #8]
 80057a4:	607a      	str	r2, [r7, #4]
 80057a6:	603b      	str	r3, [r7, #0]
 80057a8:	4603      	mov	r3, r0
 80057aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 80057b2:	7bf9      	ldrb	r1, [r7, #15]
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	9300      	str	r3, [sp, #0]
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	4813      	ldr	r0, [pc, #76]	; (800580c <USBH_read+0x70>)
 80057be:	f000 fe59 	bl	8006474 <USBH_MSC_Read>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d103      	bne.n	80057d0 <USBH_read+0x34>
  {
    res = RES_OK;
 80057c8:	2300      	movs	r3, #0
 80057ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80057ce:	e017      	b.n	8005800 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80057d0:	f107 0210 	add.w	r2, r7, #16
 80057d4:	7bfb      	ldrb	r3, [r7, #15]
 80057d6:	4619      	mov	r1, r3
 80057d8:	480c      	ldr	r0, [pc, #48]	; (800580c <USBH_read+0x70>)
 80057da:	f000 fe27 	bl	800642c <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80057de:	7f7b      	ldrb	r3, [r7, #29]
 80057e0:	2b3a      	cmp	r3, #58	; 0x3a
 80057e2:	d005      	beq.n	80057f0 <USBH_read+0x54>
 80057e4:	2b3a      	cmp	r3, #58	; 0x3a
 80057e6:	dc07      	bgt.n	80057f8 <USBH_read+0x5c>
 80057e8:	2b04      	cmp	r3, #4
 80057ea:	d001      	beq.n	80057f0 <USBH_read+0x54>
 80057ec:	2b28      	cmp	r3, #40	; 0x28
 80057ee:	d103      	bne.n	80057f8 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 80057f0:	2303      	movs	r3, #3
 80057f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80057f6:	e003      	b.n	8005800 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80057fe:	bf00      	nop
    }
  }

  return res;
 8005800:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8005804:	4618      	mov	r0, r3
 8005806:	3748      	adds	r7, #72	; 0x48
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}
 800580c:	20000254 	.word	0x20000254

08005810 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b094      	sub	sp, #80	; 0x50
 8005814:	af02      	add	r7, sp, #8
 8005816:	60b9      	str	r1, [r7, #8]
 8005818:	607a      	str	r2, [r7, #4]
 800581a:	603b      	str	r3, [r7, #0]
 800581c:	4603      	mov	r3, r0
 800581e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8005826:	7bf9      	ldrb	r1, [r7, #15]
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	9300      	str	r3, [sp, #0]
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	4817      	ldr	r0, [pc, #92]	; (8005890 <USBH_write+0x80>)
 8005832:	f000 fe88 	bl	8006546 <USBH_MSC_Write>
 8005836:	4603      	mov	r3, r0
 8005838:	2b00      	cmp	r3, #0
 800583a:	d103      	bne.n	8005844 <USBH_write+0x34>
  {
    res = RES_OK;
 800583c:	2300      	movs	r3, #0
 800583e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005842:	e01f      	b.n	8005884 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8005844:	f107 0210 	add.w	r2, r7, #16
 8005848:	7bfb      	ldrb	r3, [r7, #15]
 800584a:	4619      	mov	r1, r3
 800584c:	4810      	ldr	r0, [pc, #64]	; (8005890 <USBH_write+0x80>)
 800584e:	f000 fded 	bl	800642c <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8005852:	7f7b      	ldrb	r3, [r7, #29]
 8005854:	2b3a      	cmp	r3, #58	; 0x3a
 8005856:	d00d      	beq.n	8005874 <USBH_write+0x64>
 8005858:	2b3a      	cmp	r3, #58	; 0x3a
 800585a:	dc0f      	bgt.n	800587c <USBH_write+0x6c>
 800585c:	2b28      	cmp	r3, #40	; 0x28
 800585e:	d009      	beq.n	8005874 <USBH_write+0x64>
 8005860:	2b28      	cmp	r3, #40	; 0x28
 8005862:	dc0b      	bgt.n	800587c <USBH_write+0x6c>
 8005864:	2b04      	cmp	r3, #4
 8005866:	d005      	beq.n	8005874 <USBH_write+0x64>
 8005868:	2b27      	cmp	r3, #39	; 0x27
 800586a:	d107      	bne.n	800587c <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 800586c:	2302      	movs	r3, #2
 800586e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8005872:	e007      	b.n	8005884 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8005874:	2303      	movs	r3, #3
 8005876:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800587a:	e003      	b.n	8005884 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8005882:	bf00      	nop
    }
  }

  return res;
 8005884:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8005888:	4618      	mov	r0, r3
 800588a:	3748      	adds	r7, #72	; 0x48
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	20000254 	.word	0x20000254

08005894 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b090      	sub	sp, #64	; 0x40
 8005898:	af00      	add	r7, sp, #0
 800589a:	4603      	mov	r3, r0
 800589c:	603a      	str	r2, [r7, #0]
 800589e:	71fb      	strb	r3, [r7, #7]
 80058a0:	460b      	mov	r3, r1
 80058a2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 80058aa:	79bb      	ldrb	r3, [r7, #6]
 80058ac:	2b03      	cmp	r3, #3
 80058ae:	d852      	bhi.n	8005956 <USBH_ioctl+0xc2>
 80058b0:	a201      	add	r2, pc, #4	; (adr r2, 80058b8 <USBH_ioctl+0x24>)
 80058b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b6:	bf00      	nop
 80058b8:	080058c9 	.word	0x080058c9
 80058bc:	080058d1 	.word	0x080058d1
 80058c0:	080058fb 	.word	0x080058fb
 80058c4:	08005927 	.word	0x08005927
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 80058c8:	2300      	movs	r3, #0
 80058ca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80058ce:	e045      	b.n	800595c <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80058d0:	f107 0208 	add.w	r2, r7, #8
 80058d4:	79fb      	ldrb	r3, [r7, #7]
 80058d6:	4619      	mov	r1, r3
 80058d8:	4823      	ldr	r0, [pc, #140]	; (8005968 <USBH_ioctl+0xd4>)
 80058da:	f000 fda7 	bl	800642c <USBH_MSC_GetLUNInfo>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d106      	bne.n	80058f2 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 80058e4:	68fa      	ldr	r2, [r7, #12]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80058ea:	2300      	movs	r3, #0
 80058ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80058f0:	e034      	b.n	800595c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80058f8:	e030      	b.n	800595c <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80058fa:	f107 0208 	add.w	r2, r7, #8
 80058fe:	79fb      	ldrb	r3, [r7, #7]
 8005900:	4619      	mov	r1, r3
 8005902:	4819      	ldr	r0, [pc, #100]	; (8005968 <USBH_ioctl+0xd4>)
 8005904:	f000 fd92 	bl	800642c <USBH_MSC_GetLUNInfo>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d107      	bne.n	800591e <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800590e:	8a3b      	ldrh	r3, [r7, #16]
 8005910:	461a      	mov	r2, r3
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8005916:	2300      	movs	r3, #0
 8005918:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800591c:	e01e      	b.n	800595c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8005924:	e01a      	b.n	800595c <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8005926:	f107 0208 	add.w	r2, r7, #8
 800592a:	79fb      	ldrb	r3, [r7, #7]
 800592c:	4619      	mov	r1, r3
 800592e:	480e      	ldr	r0, [pc, #56]	; (8005968 <USBH_ioctl+0xd4>)
 8005930:	f000 fd7c 	bl	800642c <USBH_MSC_GetLUNInfo>
 8005934:	4603      	mov	r3, r0
 8005936:	2b00      	cmp	r3, #0
 8005938:	d109      	bne.n	800594e <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800593a:	8a3b      	ldrh	r3, [r7, #16]
 800593c:	0a5b      	lsrs	r3, r3, #9
 800593e:	b29b      	uxth	r3, r3
 8005940:	461a      	mov	r2, r3
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8005946:	2300      	movs	r3, #0
 8005948:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800594c:	e006      	b.n	800595c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8005954:	e002      	b.n	800595c <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8005956:	2304      	movs	r3, #4
 8005958:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 800595c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8005960:	4618      	mov	r0, r3
 8005962:	3740      	adds	r7, #64	; 0x40
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}
 8005968:	20000254 	.word	0x20000254

0800596c <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800596c:	b590      	push	{r4, r7, lr}
 800596e:	b089      	sub	sp, #36	; 0x24
 8005970:	af04      	add	r7, sp, #16
 8005972:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800597a:	7919      	ldrb	r1, [r3, #4]
 800597c:	2350      	movs	r3, #80	; 0x50
 800597e:	2206      	movs	r2, #6
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f001 fc6b 	bl	800725c <USBH_FindInterface>
 8005986:	4603      	mov	r3, r0
 8005988:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800598a:	7bfb      	ldrb	r3, [r7, #15]
 800598c:	2bff      	cmp	r3, #255	; 0xff
 800598e:	d002      	beq.n	8005996 <USBH_MSC_InterfaceInit+0x2a>
 8005990:	7bfb      	ldrb	r3, [r7, #15]
 8005992:	2b01      	cmp	r3, #1
 8005994:	d901      	bls.n	800599a <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005996:	2302      	movs	r3, #2
 8005998:	e106      	b.n	8005ba8 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 800599a:	7bfb      	ldrb	r3, [r7, #15]
 800599c:	4619      	mov	r1, r3
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f001 fc40 	bl	8007224 <USBH_SelectInterface>
 80059a4:	4603      	mov	r3, r0
 80059a6:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80059a8:	7bbb      	ldrb	r3, [r7, #14]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d001      	beq.n	80059b2 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 80059ae:	2302      	movs	r3, #2
 80059b0:	e0fa      	b.n	8005ba8 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80059b8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80059bc:	f003 fb8a 	bl	80090d4 <malloc>
 80059c0:	4603      	mov	r3, r0
 80059c2:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80059ca:	69db      	ldr	r3, [r3, #28]
 80059cc:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d101      	bne.n	80059d8 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 80059d4:	2302      	movs	r3, #2
 80059d6:	e0e7      	b.n	8005ba8 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 80059d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059dc:	2100      	movs	r1, #0
 80059de:	68b8      	ldr	r0, [r7, #8]
 80059e0:	f003 fb96 	bl	8009110 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80059e4:	7bfb      	ldrb	r3, [r7, #15]
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	211a      	movs	r1, #26
 80059ea:	fb01 f303 	mul.w	r3, r1, r3
 80059ee:	4413      	add	r3, r2
 80059f0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	b25b      	sxtb	r3, r3
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	da16      	bge.n	8005a2a <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80059fc:	7bfb      	ldrb	r3, [r7, #15]
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	211a      	movs	r1, #26
 8005a02:	fb01 f303 	mul.w	r3, r1, r3
 8005a06:	4413      	add	r3, r2
 8005a08:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005a0c:	781a      	ldrb	r2, [r3, #0]
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005a12:	7bfb      	ldrb	r3, [r7, #15]
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	211a      	movs	r1, #26
 8005a18:	fb01 f303 	mul.w	r3, r1, r3
 8005a1c:	4413      	add	r3, r2
 8005a1e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005a22:	881a      	ldrh	r2, [r3, #0]
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	815a      	strh	r2, [r3, #10]
 8005a28:	e015      	b.n	8005a56 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8005a2a:	7bfb      	ldrb	r3, [r7, #15]
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	211a      	movs	r1, #26
 8005a30:	fb01 f303 	mul.w	r3, r1, r3
 8005a34:	4413      	add	r3, r2
 8005a36:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005a3a:	781a      	ldrb	r2, [r3, #0]
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005a40:	7bfb      	ldrb	r3, [r7, #15]
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	211a      	movs	r1, #26
 8005a46:	fb01 f303 	mul.w	r3, r1, r3
 8005a4a:	4413      	add	r3, r2
 8005a4c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005a50:	881a      	ldrh	r2, [r3, #0]
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8005a56:	7bfb      	ldrb	r3, [r7, #15]
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	211a      	movs	r1, #26
 8005a5c:	fb01 f303 	mul.w	r3, r1, r3
 8005a60:	4413      	add	r3, r2
 8005a62:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	b25b      	sxtb	r3, r3
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	da16      	bge.n	8005a9c <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8005a6e:	7bfb      	ldrb	r3, [r7, #15]
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	211a      	movs	r1, #26
 8005a74:	fb01 f303 	mul.w	r3, r1, r3
 8005a78:	4413      	add	r3, r2
 8005a7a:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005a7e:	781a      	ldrb	r2, [r3, #0]
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005a84:	7bfb      	ldrb	r3, [r7, #15]
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	211a      	movs	r1, #26
 8005a8a:	fb01 f303 	mul.w	r3, r1, r3
 8005a8e:	4413      	add	r3, r2
 8005a90:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005a94:	881a      	ldrh	r2, [r3, #0]
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	815a      	strh	r2, [r3, #10]
 8005a9a:	e015      	b.n	8005ac8 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8005a9c:	7bfb      	ldrb	r3, [r7, #15]
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	211a      	movs	r1, #26
 8005aa2:	fb01 f303 	mul.w	r3, r1, r3
 8005aa6:	4413      	add	r3, r2
 8005aa8:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005aac:	781a      	ldrb	r2, [r3, #0]
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005ab2:	7bfb      	ldrb	r3, [r7, #15]
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	211a      	movs	r1, #26
 8005ab8:	fb01 f303 	mul.w	r3, r1, r3
 8005abc:	4413      	add	r3, r2
 8005abe:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005ac2:	881a      	ldrh	r2, [r3, #0]
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	2200      	movs	r2, #0
 8005acc:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	799b      	ldrb	r3, [r3, #6]
 8005ade:	4619      	mov	r1, r3
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f002 fed6 	bl	8008892 <USBH_AllocPipe>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	461a      	mov	r2, r3
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	79db      	ldrb	r3, [r3, #7]
 8005af2:	4619      	mov	r1, r3
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f002 fecc 	bl	8008892 <USBH_AllocPipe>
 8005afa:	4603      	mov	r3, r0
 8005afc:	461a      	mov	r2, r3
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 fdc4 	bl	8006690 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	799b      	ldrb	r3, [r3, #6]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d01e      	beq.n	8005b4e <USBH_MSC_InterfaceInit+0x1e2>
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	891b      	ldrh	r3, [r3, #8]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d01a      	beq.n	8005b4e <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	7959      	ldrb	r1, [r3, #5]
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	7998      	ldrb	r0, [r3, #6]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005b2c:	68ba      	ldr	r2, [r7, #8]
 8005b2e:	8912      	ldrh	r2, [r2, #8]
 8005b30:	9202      	str	r2, [sp, #8]
 8005b32:	2202      	movs	r2, #2
 8005b34:	9201      	str	r2, [sp, #4]
 8005b36:	9300      	str	r3, [sp, #0]
 8005b38:	4623      	mov	r3, r4
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f002 fe79 	bl	8008834 <USBH_OpenPipe>
 8005b42:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	79db      	ldrb	r3, [r3, #7]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d02c      	beq.n	8005ba6 <USBH_MSC_InterfaceInit+0x23a>
 8005b4c:	e001      	b.n	8005b52 <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e02a      	b.n	8005ba8 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	895b      	ldrh	r3, [r3, #10]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d025      	beq.n	8005ba6 <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	7919      	ldrb	r1, [r3, #4]
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	79d8      	ldrb	r0, [r3, #7]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005b6e:	68ba      	ldr	r2, [r7, #8]
 8005b70:	8952      	ldrh	r2, [r2, #10]
 8005b72:	9202      	str	r2, [sp, #8]
 8005b74:	2202      	movs	r2, #2
 8005b76:	9201      	str	r2, [sp, #4]
 8005b78:	9300      	str	r3, [sp, #0]
 8005b7a:	4623      	mov	r3, r4
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f002 fe58 	bl	8008834 <USBH_OpenPipe>
 8005b84:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	791b      	ldrb	r3, [r3, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f003 f9c2 	bl	8008f18 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	795b      	ldrb	r3, [r3, #5]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f003 f9bb 	bl	8008f18 <USBH_LL_SetToggle>

  return USBH_OK;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	e000      	b.n	8005ba8 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 8005ba6:	2303      	movs	r3, #3
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3714      	adds	r7, #20
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd90      	pop	{r4, r7, pc}

08005bb0 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b084      	sub	sp, #16
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005bbe:	69db      	ldr	r3, [r3, #28]
 8005bc0:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	795b      	ldrb	r3, [r3, #5]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00e      	beq.n	8005be8 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	795b      	ldrb	r3, [r3, #5]
 8005bce:	4619      	mov	r1, r3
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f002 fe4e 	bl	8008872 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	795b      	ldrb	r3, [r3, #5]
 8005bda:	4619      	mov	r1, r3
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f002 fe79 	bl	80088d4 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2200      	movs	r2, #0
 8005be6:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	791b      	ldrb	r3, [r3, #4]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d00e      	beq.n	8005c0e <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	791b      	ldrb	r3, [r3, #4]
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f002 fe3b 	bl	8008872 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	791b      	ldrb	r3, [r3, #4]
 8005c00:	4619      	mov	r1, r3
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f002 fe66 	bl	80088d4 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c14:	69db      	ldr	r3, [r3, #28]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00b      	beq.n	8005c32 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c20:	69db      	ldr	r3, [r3, #28]
 8005c22:	4618      	mov	r0, r3
 8005c24:	f003 fa5e 	bl	80090e4 <free>
    phost->pActiveClass->pData = 0U;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c2e:	2200      	movs	r2, #0
 8005c30:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005c32:	2300      	movs	r3, #0
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3710      	adds	r7, #16
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c4a:	69db      	ldr	r3, [r3, #28]
 8005c4c:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	7b9b      	ldrb	r3, [r3, #14]
 8005c56:	2b03      	cmp	r3, #3
 8005c58:	d041      	beq.n	8005cde <USBH_MSC_ClassRequest+0xa2>
 8005c5a:	2b03      	cmp	r3, #3
 8005c5c:	dc4b      	bgt.n	8005cf6 <USBH_MSC_ClassRequest+0xba>
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d001      	beq.n	8005c66 <USBH_MSC_ClassRequest+0x2a>
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	d147      	bne.n	8005cf6 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	4619      	mov	r1, r3
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 fcf1 	bl	8006652 <USBH_MSC_BOT_REQ_GetMaxLUN>
 8005c70:	4603      	mov	r3, r0
 8005c72:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8005c74:	7bfb      	ldrb	r3, [r7, #15]
 8005c76:	2b03      	cmp	r3, #3
 8005c78:	d104      	bne.n	8005c84 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8005c80:	2300      	movs	r3, #0
 8005c82:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8005c84:	7bfb      	ldrb	r3, [r7, #15]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d137      	bne.n	8005cfa <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	2b02      	cmp	r3, #2
 8005c90:	d804      	bhi.n	8005c9c <USBH_MSC_ClassRequest+0x60>
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	3301      	adds	r3, #1
 8005c98:	b2da      	uxtb	r2, r3
 8005c9a:	e000      	b.n	8005c9e <USBH_MSC_ClassRequest+0x62>
 8005c9c:	2202      	movs	r2, #2
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	73bb      	strb	r3, [r7, #14]
 8005ca6:	e014      	b.n	8005cd2 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8005ca8:	7bbb      	ldrb	r3, [r7, #14]
 8005caa:	68ba      	ldr	r2, [r7, #8]
 8005cac:	2134      	movs	r1, #52	; 0x34
 8005cae:	fb01 f303 	mul.w	r3, r1, r3
 8005cb2:	4413      	add	r3, r2
 8005cb4:	3392      	adds	r3, #146	; 0x92
 8005cb6:	2202      	movs	r2, #2
 8005cb8:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8005cba:	7bbb      	ldrb	r3, [r7, #14]
 8005cbc:	68ba      	ldr	r2, [r7, #8]
 8005cbe:	2134      	movs	r1, #52	; 0x34
 8005cc0:	fb01 f303 	mul.w	r3, r1, r3
 8005cc4:	4413      	add	r3, r2
 8005cc6:	33c1      	adds	r3, #193	; 0xc1
 8005cc8:	2200      	movs	r2, #0
 8005cca:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8005ccc:	7bbb      	ldrb	r3, [r7, #14]
 8005cce:	3301      	adds	r3, #1
 8005cd0:	73bb      	strb	r3, [r7, #14]
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	7bba      	ldrb	r2, [r7, #14]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d3e5      	bcc.n	8005ca8 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8005cdc:	e00d      	b.n	8005cfa <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8005cde:	2100      	movs	r1, #0
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f002 f888 	bl	8007df6 <USBH_ClrFeature>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d108      	bne.n	8005cfe <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	7bda      	ldrb	r2, [r3, #15]
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	739a      	strb	r2, [r3, #14]
      }
      break;
 8005cf4:	e003      	b.n	8005cfe <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 8005cf6:	bf00      	nop
 8005cf8:	e002      	b.n	8005d00 <USBH_MSC_ClassRequest+0xc4>
      break;
 8005cfa:	bf00      	nop
 8005cfc:	e000      	b.n	8005d00 <USBH_MSC_ClassRequest+0xc4>
      break;
 8005cfe:	bf00      	nop
  }

  return status;
 8005d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3710      	adds	r7, #16
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
	...

08005d0c <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b086      	sub	sp, #24
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d1a:	69db      	ldr	r3, [r3, #28]
 8005d1c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8005d22:	2301      	movs	r3, #1
 8005d24:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8005d26:	2301      	movs	r3, #1
 8005d28:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	7b1b      	ldrb	r3, [r3, #12]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d003      	beq.n	8005d3a <USBH_MSC_Process+0x2e>
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	f000 8271 	beq.w	800621a <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8005d38:	e272      	b.n	8006220 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	429a      	cmp	r2, r3
 8005d48:	f080 824f 	bcs.w	80061ea <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005d52:	4619      	mov	r1, r3
 8005d54:	693a      	ldr	r2, [r7, #16]
 8005d56:	2334      	movs	r3, #52	; 0x34
 8005d58:	fb01 f303 	mul.w	r3, r1, r3
 8005d5c:	4413      	add	r3, r2
 8005d5e:	3391      	adds	r3, #145	; 0x91
 8005d60:	2201      	movs	r2, #1
 8005d62:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005d6a:	4619      	mov	r1, r3
 8005d6c:	693a      	ldr	r2, [r7, #16]
 8005d6e:	2334      	movs	r3, #52	; 0x34
 8005d70:	fb01 f303 	mul.w	r3, r1, r3
 8005d74:	4413      	add	r3, r2
 8005d76:	3390      	adds	r3, #144	; 0x90
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	2b08      	cmp	r3, #8
 8005d7c:	f200 8243 	bhi.w	8006206 <USBH_MSC_Process+0x4fa>
 8005d80:	a201      	add	r2, pc, #4	; (adr r2, 8005d88 <USBH_MSC_Process+0x7c>)
 8005d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d86:	bf00      	nop
 8005d88:	08005dad 	.word	0x08005dad
 8005d8c:	08006207 	.word	0x08006207
 8005d90:	08005e75 	.word	0x08005e75
 8005d94:	08005ff9 	.word	0x08005ff9
 8005d98:	08005dd3 	.word	0x08005dd3
 8005d9c:	080060c5 	.word	0x080060c5
 8005da0:	08006207 	.word	0x08006207
 8005da4:	08006207 	.word	0x08006207
 8005da8:	080061d9 	.word	0x080061d9
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005db2:	4619      	mov	r1, r3
 8005db4:	693a      	ldr	r2, [r7, #16]
 8005db6:	2334      	movs	r3, #52	; 0x34
 8005db8:	fb01 f303 	mul.w	r3, r1, r3
 8005dbc:	4413      	add	r3, r2
 8005dbe:	3390      	adds	r3, #144	; 0x90
 8005dc0:	2204      	movs	r2, #4
 8005dc2:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8005dd0:	e222      	b.n	8006218 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005dd8:	b2d9      	uxtb	r1, r3
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005de0:	461a      	mov	r2, r3
 8005de2:	2334      	movs	r3, #52	; 0x34
 8005de4:	fb02 f303 	mul.w	r3, r2, r3
 8005de8:	3398      	adds	r3, #152	; 0x98
 8005dea:	693a      	ldr	r2, [r7, #16]
 8005dec:	4413      	add	r3, r2
 8005dee:	3307      	adds	r3, #7
 8005df0:	461a      	mov	r2, r3
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 ff6a 	bl	8006ccc <USBH_MSC_SCSI_Inquiry>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8005dfc:	7bfb      	ldrb	r3, [r7, #15]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d10b      	bne.n	8005e1a <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005e08:	4619      	mov	r1, r3
 8005e0a:	693a      	ldr	r2, [r7, #16]
 8005e0c:	2334      	movs	r3, #52	; 0x34
 8005e0e:	fb01 f303 	mul.w	r3, r1, r3
 8005e12:	4413      	add	r3, r2
 8005e14:	3390      	adds	r3, #144	; 0x90
 8005e16:	2202      	movs	r2, #2
 8005e18:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8005e1a:	7bfb      	ldrb	r3, [r7, #15]
 8005e1c:	2b02      	cmp	r3, #2
 8005e1e:	d10c      	bne.n	8005e3a <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005e26:	4619      	mov	r1, r3
 8005e28:	693a      	ldr	r2, [r7, #16]
 8005e2a:	2334      	movs	r3, #52	; 0x34
 8005e2c:	fb01 f303 	mul.w	r3, r1, r3
 8005e30:	4413      	add	r3, r2
 8005e32:	3390      	adds	r3, #144	; 0x90
 8005e34:	2205      	movs	r2, #5
 8005e36:	701a      	strb	r2, [r3, #0]
            break;
 8005e38:	e1e7      	b.n	800620a <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8005e3a:	7bfb      	ldrb	r3, [r7, #15]
 8005e3c:	2b04      	cmp	r3, #4
 8005e3e:	f040 81e4 	bne.w	800620a <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005e48:	4619      	mov	r1, r3
 8005e4a:	693a      	ldr	r2, [r7, #16]
 8005e4c:	2334      	movs	r3, #52	; 0x34
 8005e4e:	fb01 f303 	mul.w	r3, r1, r3
 8005e52:	4413      	add	r3, r2
 8005e54:	3390      	adds	r3, #144	; 0x90
 8005e56:	2201      	movs	r2, #1
 8005e58:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005e60:	4619      	mov	r1, r3
 8005e62:	693a      	ldr	r2, [r7, #16]
 8005e64:	2334      	movs	r3, #52	; 0x34
 8005e66:	fb01 f303 	mul.w	r3, r1, r3
 8005e6a:	4413      	add	r3, r2
 8005e6c:	3391      	adds	r3, #145	; 0x91
 8005e6e:	2202      	movs	r2, #2
 8005e70:	701a      	strb	r2, [r3, #0]
            break;
 8005e72:	e1ca      	b.n	800620a <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	4619      	mov	r1, r3
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 fe66 	bl	8006b50 <USBH_MSC_SCSI_TestUnitReady>
 8005e84:	4603      	mov	r3, r0
 8005e86:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8005e88:	7bbb      	ldrb	r3, [r7, #14]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d149      	bne.n	8005f22 <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005e94:	4619      	mov	r1, r3
 8005e96:	693a      	ldr	r2, [r7, #16]
 8005e98:	2334      	movs	r3, #52	; 0x34
 8005e9a:	fb01 f303 	mul.w	r3, r1, r3
 8005e9e:	4413      	add	r3, r2
 8005ea0:	3392      	adds	r3, #146	; 0x92
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d00c      	beq.n	8005ec2 <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005eae:	4619      	mov	r1, r3
 8005eb0:	693a      	ldr	r2, [r7, #16]
 8005eb2:	2334      	movs	r3, #52	; 0x34
 8005eb4:	fb01 f303 	mul.w	r3, r1, r3
 8005eb8:	4413      	add	r3, r2
 8005eba:	33c1      	adds	r3, #193	; 0xc1
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	701a      	strb	r2, [r3, #0]
 8005ec0:	e00b      	b.n	8005eda <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005ec8:	4619      	mov	r1, r3
 8005eca:	693a      	ldr	r2, [r7, #16]
 8005ecc:	2334      	movs	r3, #52	; 0x34
 8005ece:	fb01 f303 	mul.w	r3, r1, r3
 8005ed2:	4413      	add	r3, r2
 8005ed4:	33c1      	adds	r3, #193	; 0xc1
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	693a      	ldr	r2, [r7, #16]
 8005ee4:	2334      	movs	r3, #52	; 0x34
 8005ee6:	fb01 f303 	mul.w	r3, r1, r3
 8005eea:	4413      	add	r3, r2
 8005eec:	3390      	adds	r3, #144	; 0x90
 8005eee:	2203      	movs	r2, #3
 8005ef0:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005ef8:	4619      	mov	r1, r3
 8005efa:	693a      	ldr	r2, [r7, #16]
 8005efc:	2334      	movs	r3, #52	; 0x34
 8005efe:	fb01 f303 	mul.w	r3, r1, r3
 8005f02:	4413      	add	r3, r2
 8005f04:	3391      	adds	r3, #145	; 0x91
 8005f06:	2200      	movs	r2, #0
 8005f08:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005f10:	4619      	mov	r1, r3
 8005f12:	693a      	ldr	r2, [r7, #16]
 8005f14:	2334      	movs	r3, #52	; 0x34
 8005f16:	fb01 f303 	mul.w	r3, r1, r3
 8005f1a:	4413      	add	r3, r2
 8005f1c:	3392      	adds	r3, #146	; 0x92
 8005f1e:	2200      	movs	r2, #0
 8005f20:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8005f22:	7bbb      	ldrb	r3, [r7, #14]
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	d14a      	bne.n	8005fbe <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005f2e:	4619      	mov	r1, r3
 8005f30:	693a      	ldr	r2, [r7, #16]
 8005f32:	2334      	movs	r3, #52	; 0x34
 8005f34:	fb01 f303 	mul.w	r3, r1, r3
 8005f38:	4413      	add	r3, r2
 8005f3a:	3392      	adds	r3, #146	; 0x92
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	2b02      	cmp	r3, #2
 8005f40:	d00c      	beq.n	8005f5c <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005f48:	4619      	mov	r1, r3
 8005f4a:	693a      	ldr	r2, [r7, #16]
 8005f4c:	2334      	movs	r3, #52	; 0x34
 8005f4e:	fb01 f303 	mul.w	r3, r1, r3
 8005f52:	4413      	add	r3, r2
 8005f54:	33c1      	adds	r3, #193	; 0xc1
 8005f56:	2201      	movs	r2, #1
 8005f58:	701a      	strb	r2, [r3, #0]
 8005f5a:	e00b      	b.n	8005f74 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005f62:	4619      	mov	r1, r3
 8005f64:	693a      	ldr	r2, [r7, #16]
 8005f66:	2334      	movs	r3, #52	; 0x34
 8005f68:	fb01 f303 	mul.w	r3, r1, r3
 8005f6c:	4413      	add	r3, r2
 8005f6e:	33c1      	adds	r3, #193	; 0xc1
 8005f70:	2200      	movs	r2, #0
 8005f72:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	693a      	ldr	r2, [r7, #16]
 8005f7e:	2334      	movs	r3, #52	; 0x34
 8005f80:	fb01 f303 	mul.w	r3, r1, r3
 8005f84:	4413      	add	r3, r2
 8005f86:	3390      	adds	r3, #144	; 0x90
 8005f88:	2205      	movs	r2, #5
 8005f8a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005f92:	4619      	mov	r1, r3
 8005f94:	693a      	ldr	r2, [r7, #16]
 8005f96:	2334      	movs	r3, #52	; 0x34
 8005f98:	fb01 f303 	mul.w	r3, r1, r3
 8005f9c:	4413      	add	r3, r2
 8005f9e:	3391      	adds	r3, #145	; 0x91
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005faa:	4619      	mov	r1, r3
 8005fac:	693a      	ldr	r2, [r7, #16]
 8005fae:	2334      	movs	r3, #52	; 0x34
 8005fb0:	fb01 f303 	mul.w	r3, r1, r3
 8005fb4:	4413      	add	r3, r2
 8005fb6:	3392      	adds	r3, #146	; 0x92
 8005fb8:	2202      	movs	r2, #2
 8005fba:	701a      	strb	r2, [r3, #0]
            break;
 8005fbc:	e127      	b.n	800620e <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8005fbe:	7bbb      	ldrb	r3, [r7, #14]
 8005fc0:	2b04      	cmp	r3, #4
 8005fc2:	f040 8124 	bne.w	800620e <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005fcc:	4619      	mov	r1, r3
 8005fce:	693a      	ldr	r2, [r7, #16]
 8005fd0:	2334      	movs	r3, #52	; 0x34
 8005fd2:	fb01 f303 	mul.w	r3, r1, r3
 8005fd6:	4413      	add	r3, r2
 8005fd8:	3390      	adds	r3, #144	; 0x90
 8005fda:	2201      	movs	r2, #1
 8005fdc:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	693a      	ldr	r2, [r7, #16]
 8005fe8:	2334      	movs	r3, #52	; 0x34
 8005fea:	fb01 f303 	mul.w	r3, r1, r3
 8005fee:	4413      	add	r3, r2
 8005ff0:	3391      	adds	r3, #145	; 0x91
 8005ff2:	2202      	movs	r2, #2
 8005ff4:	701a      	strb	r2, [r3, #0]
            break;
 8005ff6:	e10a      	b.n	800620e <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005ffe:	b2d9      	uxtb	r1, r3
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006006:	461a      	mov	r2, r3
 8006008:	2334      	movs	r3, #52	; 0x34
 800600a:	fb02 f303 	mul.w	r3, r2, r3
 800600e:	3390      	adds	r3, #144	; 0x90
 8006010:	693a      	ldr	r2, [r7, #16]
 8006012:	4413      	add	r3, r2
 8006014:	3304      	adds	r3, #4
 8006016:	461a      	mov	r2, r3
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f000 fddc 	bl	8006bd6 <USBH_MSC_SCSI_ReadCapacity>
 800601e:	4603      	mov	r3, r0
 8006020:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8006022:	7bfb      	ldrb	r3, [r7, #15]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d120      	bne.n	800606a <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800602e:	4619      	mov	r1, r3
 8006030:	693a      	ldr	r2, [r7, #16]
 8006032:	2334      	movs	r3, #52	; 0x34
 8006034:	fb01 f303 	mul.w	r3, r1, r3
 8006038:	4413      	add	r3, r2
 800603a:	3390      	adds	r3, #144	; 0x90
 800603c:	2201      	movs	r2, #1
 800603e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006046:	4619      	mov	r1, r3
 8006048:	693a      	ldr	r2, [r7, #16]
 800604a:	2334      	movs	r3, #52	; 0x34
 800604c:	fb01 f303 	mul.w	r3, r1, r3
 8006050:	4413      	add	r3, r2
 8006052:	3391      	adds	r3, #145	; 0x91
 8006054:	2200      	movs	r2, #0
 8006056:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800605e:	3301      	adds	r3, #1
 8006060:	b29a      	uxth	r2, r3
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8006068:	e0d3      	b.n	8006212 <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 800606a:	7bfb      	ldrb	r3, [r7, #15]
 800606c:	2b02      	cmp	r3, #2
 800606e:	d10c      	bne.n	800608a <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006076:	4619      	mov	r1, r3
 8006078:	693a      	ldr	r2, [r7, #16]
 800607a:	2334      	movs	r3, #52	; 0x34
 800607c:	fb01 f303 	mul.w	r3, r1, r3
 8006080:	4413      	add	r3, r2
 8006082:	3390      	adds	r3, #144	; 0x90
 8006084:	2205      	movs	r2, #5
 8006086:	701a      	strb	r2, [r3, #0]
            break;
 8006088:	e0c3      	b.n	8006212 <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800608a:	7bfb      	ldrb	r3, [r7, #15]
 800608c:	2b04      	cmp	r3, #4
 800608e:	f040 80c0 	bne.w	8006212 <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006098:	4619      	mov	r1, r3
 800609a:	693a      	ldr	r2, [r7, #16]
 800609c:	2334      	movs	r3, #52	; 0x34
 800609e:	fb01 f303 	mul.w	r3, r1, r3
 80060a2:	4413      	add	r3, r2
 80060a4:	3390      	adds	r3, #144	; 0x90
 80060a6:	2201      	movs	r2, #1
 80060a8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80060b0:	4619      	mov	r1, r3
 80060b2:	693a      	ldr	r2, [r7, #16]
 80060b4:	2334      	movs	r3, #52	; 0x34
 80060b6:	fb01 f303 	mul.w	r3, r1, r3
 80060ba:	4413      	add	r3, r2
 80060bc:	3391      	adds	r3, #145	; 0x91
 80060be:	2202      	movs	r2, #2
 80060c0:	701a      	strb	r2, [r3, #0]
            break;
 80060c2:	e0a6      	b.n	8006212 <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80060ca:	b2d9      	uxtb	r1, r3
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80060d2:	461a      	mov	r2, r3
 80060d4:	2334      	movs	r3, #52	; 0x34
 80060d6:	fb02 f303 	mul.w	r3, r2, r3
 80060da:	3398      	adds	r3, #152	; 0x98
 80060dc:	693a      	ldr	r2, [r7, #16]
 80060de:	4413      	add	r3, r2
 80060e0:	3304      	adds	r3, #4
 80060e2:	461a      	mov	r2, r3
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f000 fe96 	bl	8006e16 <USBH_MSC_SCSI_RequestSense>
 80060ea:	4603      	mov	r3, r0
 80060ec:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80060ee:	7bfb      	ldrb	r3, [r7, #15]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d145      	bne.n	8006180 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80060fa:	4619      	mov	r1, r3
 80060fc:	693a      	ldr	r2, [r7, #16]
 80060fe:	2334      	movs	r3, #52	; 0x34
 8006100:	fb01 f303 	mul.w	r3, r1, r3
 8006104:	4413      	add	r3, r2
 8006106:	339c      	adds	r3, #156	; 0x9c
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	2b06      	cmp	r3, #6
 800610c:	d00c      	beq.n	8006128 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006114:	4619      	mov	r1, r3
 8006116:	693a      	ldr	r2, [r7, #16]
 8006118:	2334      	movs	r3, #52	; 0x34
 800611a:	fb01 f303 	mul.w	r3, r1, r3
 800611e:	4413      	add	r3, r2
 8006120:	339c      	adds	r3, #156	; 0x9c
 8006122:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8006124:	2b02      	cmp	r3, #2
 8006126:	d117      	bne.n	8006158 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	f242 720f 	movw	r2, #9999	; 0x270f
 800613a:	4293      	cmp	r3, r2
 800613c:	d80c      	bhi.n	8006158 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006144:	4619      	mov	r1, r3
 8006146:	693a      	ldr	r2, [r7, #16]
 8006148:	2334      	movs	r3, #52	; 0x34
 800614a:	fb01 f303 	mul.w	r3, r1, r3
 800614e:	4413      	add	r3, r2
 8006150:	3390      	adds	r3, #144	; 0x90
 8006152:	2202      	movs	r2, #2
 8006154:	701a      	strb	r2, [r3, #0]
                  break;
 8006156:	e05f      	b.n	8006218 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800615e:	4619      	mov	r1, r3
 8006160:	693a      	ldr	r2, [r7, #16]
 8006162:	2334      	movs	r3, #52	; 0x34
 8006164:	fb01 f303 	mul.w	r3, r1, r3
 8006168:	4413      	add	r3, r2
 800616a:	3390      	adds	r3, #144	; 0x90
 800616c:	2201      	movs	r2, #1
 800616e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006176:	3301      	adds	r3, #1
 8006178:	b29a      	uxth	r2, r3
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8006180:	7bfb      	ldrb	r3, [r7, #15]
 8006182:	2b02      	cmp	r3, #2
 8006184:	d10c      	bne.n	80061a0 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800618c:	4619      	mov	r1, r3
 800618e:	693a      	ldr	r2, [r7, #16]
 8006190:	2334      	movs	r3, #52	; 0x34
 8006192:	fb01 f303 	mul.w	r3, r1, r3
 8006196:	4413      	add	r3, r2
 8006198:	3390      	adds	r3, #144	; 0x90
 800619a:	2208      	movs	r2, #8
 800619c:	701a      	strb	r2, [r3, #0]
            break;
 800619e:	e03a      	b.n	8006216 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80061a0:	7bfb      	ldrb	r3, [r7, #15]
 80061a2:	2b04      	cmp	r3, #4
 80061a4:	d137      	bne.n	8006216 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80061ac:	4619      	mov	r1, r3
 80061ae:	693a      	ldr	r2, [r7, #16]
 80061b0:	2334      	movs	r3, #52	; 0x34
 80061b2:	fb01 f303 	mul.w	r3, r1, r3
 80061b6:	4413      	add	r3, r2
 80061b8:	3390      	adds	r3, #144	; 0x90
 80061ba:	2201      	movs	r2, #1
 80061bc:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80061c4:	4619      	mov	r1, r3
 80061c6:	693a      	ldr	r2, [r7, #16]
 80061c8:	2334      	movs	r3, #52	; 0x34
 80061ca:	fb01 f303 	mul.w	r3, r1, r3
 80061ce:	4413      	add	r3, r2
 80061d0:	3391      	adds	r3, #145	; 0x91
 80061d2:	2202      	movs	r2, #2
 80061d4:	701a      	strb	r2, [r3, #0]
            break;
 80061d6:	e01e      	b.n	8006216 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80061de:	3301      	adds	r3, #1
 80061e0:	b29a      	uxth	r2, r3
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 80061e8:	e016      	b.n	8006218 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	2200      	movs	r2, #0
 80061ee:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	2201      	movs	r2, #1
 80061f6:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80061fe:	2102      	movs	r1, #2
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	4798      	blx	r3
      break;
 8006204:	e00c      	b.n	8006220 <USBH_MSC_Process+0x514>
            break;
 8006206:	bf00      	nop
 8006208:	e00a      	b.n	8006220 <USBH_MSC_Process+0x514>
            break;
 800620a:	bf00      	nop
 800620c:	e008      	b.n	8006220 <USBH_MSC_Process+0x514>
            break;
 800620e:	bf00      	nop
 8006210:	e006      	b.n	8006220 <USBH_MSC_Process+0x514>
            break;
 8006212:	bf00      	nop
 8006214:	e004      	b.n	8006220 <USBH_MSC_Process+0x514>
            break;
 8006216:	bf00      	nop
      break;
 8006218:	e002      	b.n	8006220 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 800621a:	2300      	movs	r3, #0
 800621c:	75fb      	strb	r3, [r7, #23]
      break;
 800621e:	bf00      	nop
  }
  return error;
 8006220:	7dfb      	ldrb	r3, [r7, #23]
}
 8006222:	4618      	mov	r0, r3
 8006224:	3718      	adds	r7, #24
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop

0800622c <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006234:	2300      	movs	r3, #0
}
 8006236:	4618      	mov	r0, r3
 8006238:	370c      	adds	r7, #12
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr

08006242 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8006242:	b580      	push	{r7, lr}
 8006244:	b088      	sub	sp, #32
 8006246:	af02      	add	r7, sp, #8
 8006248:	6078      	str	r0, [r7, #4]
 800624a:	460b      	mov	r3, r1
 800624c:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006254:	69db      	ldr	r3, [r3, #28]
 8006256:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8006258:	2301      	movs	r3, #1
 800625a:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800625c:	2301      	movs	r3, #1
 800625e:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8006260:	78fb      	ldrb	r3, [r7, #3]
 8006262:	693a      	ldr	r2, [r7, #16]
 8006264:	2134      	movs	r1, #52	; 0x34
 8006266:	fb01 f303 	mul.w	r3, r1, r3
 800626a:	4413      	add	r3, r2
 800626c:	3390      	adds	r3, #144	; 0x90
 800626e:	781b      	ldrb	r3, [r3, #0]
 8006270:	2b07      	cmp	r3, #7
 8006272:	d03c      	beq.n	80062ee <USBH_MSC_RdWrProcess+0xac>
 8006274:	2b07      	cmp	r3, #7
 8006276:	f300 80a7 	bgt.w	80063c8 <USBH_MSC_RdWrProcess+0x186>
 800627a:	2b05      	cmp	r3, #5
 800627c:	d06c      	beq.n	8006358 <USBH_MSC_RdWrProcess+0x116>
 800627e:	2b06      	cmp	r3, #6
 8006280:	f040 80a2 	bne.w	80063c8 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8006284:	78f9      	ldrb	r1, [r7, #3]
 8006286:	2300      	movs	r3, #0
 8006288:	9300      	str	r3, [sp, #0]
 800628a:	2300      	movs	r3, #0
 800628c:	2200      	movs	r2, #0
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 fea5 	bl	8006fde <USBH_MSC_SCSI_Read>
 8006294:	4603      	mov	r3, r0
 8006296:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8006298:	7bfb      	ldrb	r3, [r7, #15]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d10b      	bne.n	80062b6 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800629e:	78fb      	ldrb	r3, [r7, #3]
 80062a0:	693a      	ldr	r2, [r7, #16]
 80062a2:	2134      	movs	r1, #52	; 0x34
 80062a4:	fb01 f303 	mul.w	r3, r1, r3
 80062a8:	4413      	add	r3, r2
 80062aa:	3390      	adds	r3, #144	; 0x90
 80062ac:	2201      	movs	r2, #1
 80062ae:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 80062b0:	2300      	movs	r3, #0
 80062b2:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80062b4:	e08a      	b.n	80063cc <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 80062b6:	7bfb      	ldrb	r3, [r7, #15]
 80062b8:	2b02      	cmp	r3, #2
 80062ba:	d109      	bne.n	80062d0 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80062bc:	78fb      	ldrb	r3, [r7, #3]
 80062be:	693a      	ldr	r2, [r7, #16]
 80062c0:	2134      	movs	r1, #52	; 0x34
 80062c2:	fb01 f303 	mul.w	r3, r1, r3
 80062c6:	4413      	add	r3, r2
 80062c8:	3390      	adds	r3, #144	; 0x90
 80062ca:	2205      	movs	r2, #5
 80062cc:	701a      	strb	r2, [r3, #0]
      break;
 80062ce:	e07d      	b.n	80063cc <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80062d0:	7bfb      	ldrb	r3, [r7, #15]
 80062d2:	2b04      	cmp	r3, #4
 80062d4:	d17a      	bne.n	80063cc <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80062d6:	78fb      	ldrb	r3, [r7, #3]
 80062d8:	693a      	ldr	r2, [r7, #16]
 80062da:	2134      	movs	r1, #52	; 0x34
 80062dc:	fb01 f303 	mul.w	r3, r1, r3
 80062e0:	4413      	add	r3, r2
 80062e2:	3390      	adds	r3, #144	; 0x90
 80062e4:	2208      	movs	r2, #8
 80062e6:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80062e8:	2302      	movs	r3, #2
 80062ea:	75fb      	strb	r3, [r7, #23]
      break;
 80062ec:	e06e      	b.n	80063cc <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 80062ee:	78f9      	ldrb	r1, [r7, #3]
 80062f0:	2300      	movs	r3, #0
 80062f2:	9300      	str	r3, [sp, #0]
 80062f4:	2300      	movs	r3, #0
 80062f6:	2200      	movs	r2, #0
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 fe05 	bl	8006f08 <USBH_MSC_SCSI_Write>
 80062fe:	4603      	mov	r3, r0
 8006300:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8006302:	7bfb      	ldrb	r3, [r7, #15]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d10b      	bne.n	8006320 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8006308:	78fb      	ldrb	r3, [r7, #3]
 800630a:	693a      	ldr	r2, [r7, #16]
 800630c:	2134      	movs	r1, #52	; 0x34
 800630e:	fb01 f303 	mul.w	r3, r1, r3
 8006312:	4413      	add	r3, r2
 8006314:	3390      	adds	r3, #144	; 0x90
 8006316:	2201      	movs	r2, #1
 8006318:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800631a:	2300      	movs	r3, #0
 800631c:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800631e:	e057      	b.n	80063d0 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 8006320:	7bfb      	ldrb	r3, [r7, #15]
 8006322:	2b02      	cmp	r3, #2
 8006324:	d109      	bne.n	800633a <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8006326:	78fb      	ldrb	r3, [r7, #3]
 8006328:	693a      	ldr	r2, [r7, #16]
 800632a:	2134      	movs	r1, #52	; 0x34
 800632c:	fb01 f303 	mul.w	r3, r1, r3
 8006330:	4413      	add	r3, r2
 8006332:	3390      	adds	r3, #144	; 0x90
 8006334:	2205      	movs	r2, #5
 8006336:	701a      	strb	r2, [r3, #0]
      break;
 8006338:	e04a      	b.n	80063d0 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800633a:	7bfb      	ldrb	r3, [r7, #15]
 800633c:	2b04      	cmp	r3, #4
 800633e:	d147      	bne.n	80063d0 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8006340:	78fb      	ldrb	r3, [r7, #3]
 8006342:	693a      	ldr	r2, [r7, #16]
 8006344:	2134      	movs	r1, #52	; 0x34
 8006346:	fb01 f303 	mul.w	r3, r1, r3
 800634a:	4413      	add	r3, r2
 800634c:	3390      	adds	r3, #144	; 0x90
 800634e:	2208      	movs	r2, #8
 8006350:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8006352:	2302      	movs	r3, #2
 8006354:	75fb      	strb	r3, [r7, #23]
      break;
 8006356:	e03b      	b.n	80063d0 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8006358:	78fb      	ldrb	r3, [r7, #3]
 800635a:	2234      	movs	r2, #52	; 0x34
 800635c:	fb02 f303 	mul.w	r3, r2, r3
 8006360:	3398      	adds	r3, #152	; 0x98
 8006362:	693a      	ldr	r2, [r7, #16]
 8006364:	4413      	add	r3, r2
 8006366:	1d1a      	adds	r2, r3, #4
 8006368:	78fb      	ldrb	r3, [r7, #3]
 800636a:	4619      	mov	r1, r3
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f000 fd52 	bl	8006e16 <USBH_MSC_SCSI_RequestSense>
 8006372:	4603      	mov	r3, r0
 8006374:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8006376:	7bfb      	ldrb	r3, [r7, #15]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d113      	bne.n	80063a4 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800637c:	78fb      	ldrb	r3, [r7, #3]
 800637e:	693a      	ldr	r2, [r7, #16]
 8006380:	2134      	movs	r1, #52	; 0x34
 8006382:	fb01 f303 	mul.w	r3, r1, r3
 8006386:	4413      	add	r3, r2
 8006388:	3390      	adds	r3, #144	; 0x90
 800638a:	2201      	movs	r2, #1
 800638c:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800638e:	78fb      	ldrb	r3, [r7, #3]
 8006390:	693a      	ldr	r2, [r7, #16]
 8006392:	2134      	movs	r1, #52	; 0x34
 8006394:	fb01 f303 	mul.w	r3, r1, r3
 8006398:	4413      	add	r3, r2
 800639a:	3391      	adds	r3, #145	; 0x91
 800639c:	2202      	movs	r2, #2
 800639e:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 80063a0:	2302      	movs	r3, #2
 80063a2:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 80063a4:	7bfb      	ldrb	r3, [r7, #15]
 80063a6:	2b02      	cmp	r3, #2
 80063a8:	d014      	beq.n	80063d4 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80063aa:	7bfb      	ldrb	r3, [r7, #15]
 80063ac:	2b04      	cmp	r3, #4
 80063ae:	d111      	bne.n	80063d4 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80063b0:	78fb      	ldrb	r3, [r7, #3]
 80063b2:	693a      	ldr	r2, [r7, #16]
 80063b4:	2134      	movs	r1, #52	; 0x34
 80063b6:	fb01 f303 	mul.w	r3, r1, r3
 80063ba:	4413      	add	r3, r2
 80063bc:	3390      	adds	r3, #144	; 0x90
 80063be:	2208      	movs	r2, #8
 80063c0:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80063c2:	2302      	movs	r3, #2
 80063c4:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80063c6:	e005      	b.n	80063d4 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 80063c8:	bf00      	nop
 80063ca:	e004      	b.n	80063d6 <USBH_MSC_RdWrProcess+0x194>
      break;
 80063cc:	bf00      	nop
 80063ce:	e002      	b.n	80063d6 <USBH_MSC_RdWrProcess+0x194>
      break;
 80063d0:	bf00      	nop
 80063d2:	e000      	b.n	80063d6 <USBH_MSC_RdWrProcess+0x194>
      break;
 80063d4:	bf00      	nop

  }
  return error;
 80063d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3718      	adds	r7, #24
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b085      	sub	sp, #20
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	460b      	mov	r3, r1
 80063ea:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063f2:	69db      	ldr	r3, [r3, #28]
 80063f4:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	2b0b      	cmp	r3, #11
 80063fe:	d10c      	bne.n	800641a <USBH_MSC_UnitIsReady+0x3a>
 8006400:	78fb      	ldrb	r3, [r7, #3]
 8006402:	68ba      	ldr	r2, [r7, #8]
 8006404:	2134      	movs	r1, #52	; 0x34
 8006406:	fb01 f303 	mul.w	r3, r1, r3
 800640a:	4413      	add	r3, r2
 800640c:	3391      	adds	r3, #145	; 0x91
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d102      	bne.n	800641a <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8006414:	2301      	movs	r3, #1
 8006416:	73fb      	strb	r3, [r7, #15]
 8006418:	e001      	b.n	800641e <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800641a:	2300      	movs	r3, #0
 800641c:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800641e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006420:	4618      	mov	r0, r3
 8006422:	3714      	adds	r7, #20
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr

0800642c <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b086      	sub	sp, #24
 8006430:	af00      	add	r7, sp, #0
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	460b      	mov	r3, r1
 8006436:	607a      	str	r2, [r7, #4]
 8006438:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006440:	69db      	ldr	r3, [r3, #28]
 8006442:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	b2db      	uxtb	r3, r3
 800644a:	2b0b      	cmp	r3, #11
 800644c:	d10d      	bne.n	800646a <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800644e:	7afb      	ldrb	r3, [r7, #11]
 8006450:	2234      	movs	r2, #52	; 0x34
 8006452:	fb02 f303 	mul.w	r3, r2, r3
 8006456:	3390      	adds	r3, #144	; 0x90
 8006458:	697a      	ldr	r2, [r7, #20]
 800645a:	4413      	add	r3, r2
 800645c:	2234      	movs	r2, #52	; 0x34
 800645e:	4619      	mov	r1, r3
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f002 fe47 	bl	80090f4 <memcpy>
    return USBH_OK;
 8006466:	2300      	movs	r3, #0
 8006468:	e000      	b.n	800646c <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800646a:	2302      	movs	r3, #2
  }
}
 800646c:	4618      	mov	r0, r3
 800646e:	3718      	adds	r7, #24
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b088      	sub	sp, #32
 8006478:	af02      	add	r7, sp, #8
 800647a:	60f8      	str	r0, [r7, #12]
 800647c:	607a      	str	r2, [r7, #4]
 800647e:	603b      	str	r3, [r7, #0]
 8006480:	460b      	mov	r3, r1
 8006482:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800648a:	69db      	ldr	r3, [r3, #28]
 800648c:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006494:	b2db      	uxtb	r3, r3
 8006496:	2b00      	cmp	r3, #0
 8006498:	d00e      	beq.n	80064b8 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 80064a0:	2b0b      	cmp	r3, #11
 80064a2:	d109      	bne.n	80064b8 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80064a4:	7afb      	ldrb	r3, [r7, #11]
 80064a6:	697a      	ldr	r2, [r7, #20]
 80064a8:	2134      	movs	r1, #52	; 0x34
 80064aa:	fb01 f303 	mul.w	r3, r1, r3
 80064ae:	4413      	add	r3, r2
 80064b0:	3390      	adds	r3, #144	; 0x90
 80064b2:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d001      	beq.n	80064bc <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 80064b8:	2302      	movs	r3, #2
 80064ba:	e040      	b.n	800653e <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	2206      	movs	r2, #6
 80064c0:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 80064c2:	7afb      	ldrb	r3, [r7, #11]
 80064c4:	697a      	ldr	r2, [r7, #20]
 80064c6:	2134      	movs	r1, #52	; 0x34
 80064c8:	fb01 f303 	mul.w	r3, r1, r3
 80064cc:	4413      	add	r3, r2
 80064ce:	3390      	adds	r3, #144	; 0x90
 80064d0:	2206      	movs	r2, #6
 80064d2:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 80064d4:	7afb      	ldrb	r3, [r7, #11]
 80064d6:	b29a      	uxth	r2, r3
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 80064de:	7af9      	ldrb	r1, [r7, #11]
 80064e0:	6a3b      	ldr	r3, [r7, #32]
 80064e2:	9300      	str	r3, [sp, #0]
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	68f8      	ldr	r0, [r7, #12]
 80064ea:	f000 fd78 	bl	8006fde <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80064f4:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80064f6:	e016      	b.n	8006526 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	1ad2      	subs	r2, r2, r3
 8006502:	6a3b      	ldr	r3, [r7, #32]
 8006504:	f242 7110 	movw	r1, #10000	; 0x2710
 8006508:	fb01 f303 	mul.w	r3, r1, r3
 800650c:	429a      	cmp	r2, r3
 800650e:	d805      	bhi.n	800651c <USBH_MSC_Read+0xa8>
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006516:	b2db      	uxtb	r3, r3
 8006518:	2b00      	cmp	r3, #0
 800651a:	d104      	bne.n	8006526 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	2201      	movs	r2, #1
 8006520:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8006522:	2302      	movs	r3, #2
 8006524:	e00b      	b.n	800653e <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8006526:	7afb      	ldrb	r3, [r7, #11]
 8006528:	4619      	mov	r1, r3
 800652a:	68f8      	ldr	r0, [r7, #12]
 800652c:	f7ff fe89 	bl	8006242 <USBH_MSC_RdWrProcess>
 8006530:	4603      	mov	r3, r0
 8006532:	2b01      	cmp	r3, #1
 8006534:	d0e0      	beq.n	80064f8 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	2201      	movs	r2, #1
 800653a:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800653c:	2300      	movs	r3, #0
}
 800653e:	4618      	mov	r0, r3
 8006540:	3718      	adds	r7, #24
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}

08006546 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8006546:	b580      	push	{r7, lr}
 8006548:	b088      	sub	sp, #32
 800654a:	af02      	add	r7, sp, #8
 800654c:	60f8      	str	r0, [r7, #12]
 800654e:	607a      	str	r2, [r7, #4]
 8006550:	603b      	str	r3, [r7, #0]
 8006552:	460b      	mov	r3, r1
 8006554:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800655c:	69db      	ldr	r3, [r3, #28]
 800655e:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006566:	b2db      	uxtb	r3, r3
 8006568:	2b00      	cmp	r3, #0
 800656a:	d00e      	beq.n	800658a <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8006572:	2b0b      	cmp	r3, #11
 8006574:	d109      	bne.n	800658a <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8006576:	7afb      	ldrb	r3, [r7, #11]
 8006578:	697a      	ldr	r2, [r7, #20]
 800657a:	2134      	movs	r1, #52	; 0x34
 800657c:	fb01 f303 	mul.w	r3, r1, r3
 8006580:	4413      	add	r3, r2
 8006582:	3390      	adds	r3, #144	; 0x90
 8006584:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8006586:	2b01      	cmp	r3, #1
 8006588:	d001      	beq.n	800658e <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800658a:	2302      	movs	r3, #2
 800658c:	e040      	b.n	8006610 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	2207      	movs	r2, #7
 8006592:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8006594:	7afb      	ldrb	r3, [r7, #11]
 8006596:	697a      	ldr	r2, [r7, #20]
 8006598:	2134      	movs	r1, #52	; 0x34
 800659a:	fb01 f303 	mul.w	r3, r1, r3
 800659e:	4413      	add	r3, r2
 80065a0:	3390      	adds	r3, #144	; 0x90
 80065a2:	2207      	movs	r2, #7
 80065a4:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 80065a6:	7afb      	ldrb	r3, [r7, #11]
 80065a8:	b29a      	uxth	r2, r3
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 80065b0:	7af9      	ldrb	r1, [r7, #11]
 80065b2:	6a3b      	ldr	r3, [r7, #32]
 80065b4:	9300      	str	r3, [sp, #0]
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	68f8      	ldr	r0, [r7, #12]
 80065bc:	f000 fca4 	bl	8006f08 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80065c6:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80065c8:	e016      	b.n	80065f8 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	1ad2      	subs	r2, r2, r3
 80065d4:	6a3b      	ldr	r3, [r7, #32]
 80065d6:	f242 7110 	movw	r1, #10000	; 0x2710
 80065da:	fb01 f303 	mul.w	r3, r1, r3
 80065de:	429a      	cmp	r2, r3
 80065e0:	d805      	bhi.n	80065ee <USBH_MSC_Write+0xa8>
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d104      	bne.n	80065f8 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	2201      	movs	r2, #1
 80065f2:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80065f4:	2302      	movs	r3, #2
 80065f6:	e00b      	b.n	8006610 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80065f8:	7afb      	ldrb	r3, [r7, #11]
 80065fa:	4619      	mov	r1, r3
 80065fc:	68f8      	ldr	r0, [r7, #12]
 80065fe:	f7ff fe20 	bl	8006242 <USBH_MSC_RdWrProcess>
 8006602:	4603      	mov	r3, r0
 8006604:	2b01      	cmp	r3, #1
 8006606:	d0e0      	beq.n	80065ca <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	2201      	movs	r2, #1
 800660c:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800660e:	2300      	movs	r3, #0
}
 8006610:	4618      	mov	r0, r3
 8006612:	3718      	adds	r7, #24
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2221      	movs	r2, #33	; 0x21
 8006624:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	22ff      	movs	r2, #255	; 0xff
 800662a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800663e:	2200      	movs	r2, #0
 8006640:	2100      	movs	r1, #0
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f001 fea4 	bl	8008390 <USBH_CtlReq>
 8006648:	4603      	mov	r3, r0
}
 800664a:	4618      	mov	r0, r3
 800664c:	3708      	adds	r7, #8
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}

08006652 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8006652:	b580      	push	{r7, lr}
 8006654:	b082      	sub	sp, #8
 8006656:	af00      	add	r7, sp, #0
 8006658:	6078      	str	r0, [r7, #4]
 800665a:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	22a1      	movs	r2, #161	; 0xa1
 8006660:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	22fe      	movs	r2, #254	; 0xfe
 8006666:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800667a:	2201      	movs	r2, #1
 800667c:	6839      	ldr	r1, [r7, #0]
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f001 fe86 	bl	8008390 <USBH_CtlReq>
 8006684:	4603      	mov	r3, r0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3708      	adds	r7, #8
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
	...

08006690 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8006690:	b480      	push	{r7}
 8006692:	b085      	sub	sp, #20
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800669e:	69db      	ldr	r3, [r3, #28]
 80066a0:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	4a09      	ldr	r2, [pc, #36]	; (80066cc <USBH_MSC_BOT_Init+0x3c>)
 80066a6:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	4a09      	ldr	r2, [pc, #36]	; (80066d0 <USBH_MSC_BOT_Init+0x40>)
 80066ac:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2201      	movs	r2, #1
 80066b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2201      	movs	r2, #1
 80066ba:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3714      	adds	r7, #20
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr
 80066cc:	43425355 	.word	0x43425355
 80066d0:	20304050 	.word	0x20304050

080066d4 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b088      	sub	sp, #32
 80066d8:	af02      	add	r7, sp, #8
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	460b      	mov	r3, r1
 80066de:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 80066e0:	2301      	movs	r3, #1
 80066e2:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 80066e4:	2301      	movs	r3, #1
 80066e6:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 80066e8:	2301      	movs	r3, #1
 80066ea:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80066ec:	2300      	movs	r3, #0
 80066ee:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066f6:	69db      	ldr	r3, [r3, #28]
 80066f8:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 80066fa:	2300      	movs	r3, #0
 80066fc:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006704:	3b01      	subs	r3, #1
 8006706:	2b0a      	cmp	r3, #10
 8006708:	f200 819e 	bhi.w	8006a48 <USBH_MSC_BOT_Process+0x374>
 800670c:	a201      	add	r2, pc, #4	; (adr r2, 8006714 <USBH_MSC_BOT_Process+0x40>)
 800670e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006712:	bf00      	nop
 8006714:	08006741 	.word	0x08006741
 8006718:	08006769 	.word	0x08006769
 800671c:	080067d3 	.word	0x080067d3
 8006720:	080067f1 	.word	0x080067f1
 8006724:	08006875 	.word	0x08006875
 8006728:	08006897 	.word	0x08006897
 800672c:	0800692f 	.word	0x0800692f
 8006730:	0800694b 	.word	0x0800694b
 8006734:	0800699d 	.word	0x0800699d
 8006738:	080069cd 	.word	0x080069cd
 800673c:	08006a2f 	.word	0x08006a2f
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	78fa      	ldrb	r2, [r7, #3]
 8006744:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	2202      	movs	r2, #2
 800674c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	795b      	ldrb	r3, [r3, #5]
 800675a:	2201      	movs	r2, #1
 800675c:	9200      	str	r2, [sp, #0]
 800675e:	221f      	movs	r2, #31
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f002 f824 	bl	80087ae <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8006766:	e17e      	b.n	8006a66 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	795b      	ldrb	r3, [r3, #5]
 800676c:	4619      	mov	r1, r3
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f002 fba8 	bl	8008ec4 <USBH_LL_GetURBState>
 8006774:	4603      	mov	r3, r0
 8006776:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8006778:	7d3b      	ldrb	r3, [r7, #20]
 800677a:	2b01      	cmp	r3, #1
 800677c:	d118      	bne.n	80067b0 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006782:	2b00      	cmp	r3, #0
 8006784:	d00f      	beq.n	80067a6 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800678c:	b25b      	sxtb	r3, r3
 800678e:	2b00      	cmp	r3, #0
 8006790:	da04      	bge.n	800679c <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	2203      	movs	r2, #3
 8006796:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800679a:	e157      	b.n	8006a4c <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	2205      	movs	r2, #5
 80067a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80067a4:	e152      	b.n	8006a4c <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	2207      	movs	r2, #7
 80067aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80067ae:	e14d      	b.n	8006a4c <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 80067b0:	7d3b      	ldrb	r3, [r7, #20]
 80067b2:	2b02      	cmp	r3, #2
 80067b4:	d104      	bne.n	80067c0 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	2201      	movs	r2, #1
 80067ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80067be:	e145      	b.n	8006a4c <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 80067c0:	7d3b      	ldrb	r3, [r7, #20]
 80067c2:	2b05      	cmp	r3, #5
 80067c4:	f040 8142 	bne.w	8006a4c <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	220a      	movs	r2, #10
 80067cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80067d0:	e13c      	b.n	8006a4c <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	895a      	ldrh	r2, [r3, #10]
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	791b      	ldrb	r3, [r3, #4]
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f002 f809 	bl	80087f8 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	2204      	movs	r2, #4
 80067ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 80067ee:	e13a      	b.n	8006a66 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	791b      	ldrb	r3, [r3, #4]
 80067f4:	4619      	mov	r1, r3
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f002 fb64 	bl	8008ec4 <USBH_LL_GetURBState>
 80067fc:	4603      	mov	r3, r0
 80067fe:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8006800:	7d3b      	ldrb	r3, [r7, #20]
 8006802:	2b01      	cmp	r3, #1
 8006804:	d12d      	bne.n	8006862 <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800680a:	693a      	ldr	r2, [r7, #16]
 800680c:	8952      	ldrh	r2, [r2, #10]
 800680e:	4293      	cmp	r3, r2
 8006810:	d910      	bls.n	8006834 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006818:	693a      	ldr	r2, [r7, #16]
 800681a:	8952      	ldrh	r2, [r2, #10]
 800681c:	441a      	add	r2, r3
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006828:	693a      	ldr	r2, [r7, #16]
 800682a:	8952      	ldrh	r2, [r2, #10]
 800682c:	1a9a      	subs	r2, r3, r2
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	65da      	str	r2, [r3, #92]	; 0x5c
 8006832:	e002      	b.n	800683a <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	2200      	movs	r2, #0
 8006838:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800683e:	2b00      	cmp	r3, #0
 8006840:	d00a      	beq.n	8006858 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	895a      	ldrh	r2, [r3, #10]
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	791b      	ldrb	r3, [r3, #4]
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f001 ffd1 	bl	80087f8 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8006856:	e0fb      	b.n	8006a50 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	2207      	movs	r2, #7
 800685c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006860:	e0f6      	b.n	8006a50 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 8006862:	7d3b      	ldrb	r3, [r7, #20]
 8006864:	2b05      	cmp	r3, #5
 8006866:	f040 80f3 	bne.w	8006a50 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	2209      	movs	r2, #9
 800686e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006872:	e0ed      	b.n	8006a50 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	891a      	ldrh	r2, [r3, #8]
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	795b      	ldrb	r3, [r3, #5]
 8006882:	2001      	movs	r0, #1
 8006884:	9000      	str	r0, [sp, #0]
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f001 ff91 	bl	80087ae <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	2206      	movs	r2, #6
 8006890:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006894:	e0e7      	b.n	8006a66 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	795b      	ldrb	r3, [r3, #5]
 800689a:	4619      	mov	r1, r3
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f002 fb11 	bl	8008ec4 <USBH_LL_GetURBState>
 80068a2:	4603      	mov	r3, r0
 80068a4:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80068a6:	7d3b      	ldrb	r3, [r7, #20]
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d12f      	bne.n	800690c <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068b0:	693a      	ldr	r2, [r7, #16]
 80068b2:	8912      	ldrh	r2, [r2, #8]
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d910      	bls.n	80068da <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068be:	693a      	ldr	r2, [r7, #16]
 80068c0:	8912      	ldrh	r2, [r2, #8]
 80068c2:	441a      	add	r2, r3
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068ce:	693a      	ldr	r2, [r7, #16]
 80068d0:	8912      	ldrh	r2, [r2, #8]
 80068d2:	1a9a      	subs	r2, r3, r2
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	65da      	str	r2, [r3, #92]	; 0x5c
 80068d8:	e002      	b.n	80068e0 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	2200      	movs	r2, #0
 80068de:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d00c      	beq.n	8006902 <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	891a      	ldrh	r2, [r3, #8]
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	795b      	ldrb	r3, [r3, #5]
 80068f6:	2001      	movs	r0, #1
 80068f8:	9000      	str	r0, [sp, #0]
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f001 ff57 	bl	80087ae <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8006900:	e0a8      	b.n	8006a54 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	2207      	movs	r2, #7
 8006906:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800690a:	e0a3      	b.n	8006a54 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 800690c:	7d3b      	ldrb	r3, [r7, #20]
 800690e:	2b02      	cmp	r3, #2
 8006910:	d104      	bne.n	800691c <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	2205      	movs	r2, #5
 8006916:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800691a:	e09b      	b.n	8006a54 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 800691c:	7d3b      	ldrb	r3, [r7, #20]
 800691e:	2b05      	cmp	r3, #5
 8006920:	f040 8098 	bne.w	8006a54 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	220a      	movs	r2, #10
 8006928:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800692c:	e092      	b.n	8006a54 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	791b      	ldrb	r3, [r3, #4]
 8006938:	220d      	movs	r2, #13
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f001 ff5c 	bl	80087f8 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	2208      	movs	r2, #8
 8006944:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006948:	e08d      	b.n	8006a66 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	791b      	ldrb	r3, [r3, #4]
 800694e:	4619      	mov	r1, r3
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f002 fab7 	bl	8008ec4 <USBH_LL_GetURBState>
 8006956:	4603      	mov	r3, r0
 8006958:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800695a:	7d3b      	ldrb	r3, [r7, #20]
 800695c:	2b01      	cmp	r3, #1
 800695e:	d115      	bne.n	800698c <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	2201      	movs	r2, #1
 8006964:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	2201      	movs	r2, #1
 800696c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 f8a9 	bl	8006ac8 <USBH_MSC_DecodeCSW>
 8006976:	4603      	mov	r3, r0
 8006978:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800697a:	7d7b      	ldrb	r3, [r7, #21]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d102      	bne.n	8006986 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 8006980:	2300      	movs	r3, #0
 8006982:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8006984:	e068      	b.n	8006a58 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 8006986:	2302      	movs	r3, #2
 8006988:	75fb      	strb	r3, [r7, #23]
      break;
 800698a:	e065      	b.n	8006a58 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 800698c:	7d3b      	ldrb	r3, [r7, #20]
 800698e:	2b05      	cmp	r3, #5
 8006990:	d162      	bne.n	8006a58 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	2209      	movs	r2, #9
 8006996:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800699a:	e05d      	b.n	8006a58 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800699c:	78fb      	ldrb	r3, [r7, #3]
 800699e:	2200      	movs	r2, #0
 80069a0:	4619      	mov	r1, r3
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 f864 	bl	8006a70 <USBH_MSC_BOT_Abort>
 80069a8:	4603      	mov	r3, r0
 80069aa:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 80069ac:	7dbb      	ldrb	r3, [r7, #22]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d104      	bne.n	80069bc <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	2207      	movs	r2, #7
 80069b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 80069ba:	e04f      	b.n	8006a5c <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 80069bc:	7dbb      	ldrb	r3, [r7, #22]
 80069be:	2b04      	cmp	r3, #4
 80069c0:	d14c      	bne.n	8006a5c <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	220b      	movs	r2, #11
 80069c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80069ca:	e047      	b.n	8006a5c <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 80069cc:	78fb      	ldrb	r3, [r7, #3]
 80069ce:	2201      	movs	r2, #1
 80069d0:	4619      	mov	r1, r3
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 f84c 	bl	8006a70 <USBH_MSC_BOT_Abort>
 80069d8:	4603      	mov	r3, r0
 80069da:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 80069dc:	7dbb      	ldrb	r3, [r7, #22]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d11d      	bne.n	8006a1e <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	795b      	ldrb	r3, [r3, #5]
 80069e6:	4619      	mov	r1, r3
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f002 fac5 	bl	8008f78 <USBH_LL_GetToggle>
 80069ee:	4603      	mov	r3, r0
 80069f0:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	7959      	ldrb	r1, [r3, #5]
 80069f6:	7bfb      	ldrb	r3, [r7, #15]
 80069f8:	f1c3 0301 	rsb	r3, r3, #1
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	461a      	mov	r2, r3
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f002 fa89 	bl	8008f18 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	791b      	ldrb	r3, [r3, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f002 fa82 	bl	8008f18 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	2209      	movs	r2, #9
 8006a18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8006a1c:	e020      	b.n	8006a60 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 8006a1e:	7dbb      	ldrb	r3, [r7, #22]
 8006a20:	2b04      	cmp	r3, #4
 8006a22:	d11d      	bne.n	8006a60 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	220b      	movs	r2, #11
 8006a28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006a2c:	e018      	b.n	8006a60 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f7ff fdf2 	bl	8006618 <USBH_MSC_BOT_REQ_Reset>
 8006a34:	4603      	mov	r3, r0
 8006a36:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8006a38:	7dfb      	ldrb	r3, [r7, #23]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d112      	bne.n	8006a64 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	2201      	movs	r2, #1
 8006a42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8006a46:	e00d      	b.n	8006a64 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 8006a48:	bf00      	nop
 8006a4a:	e00c      	b.n	8006a66 <USBH_MSC_BOT_Process+0x392>
      break;
 8006a4c:	bf00      	nop
 8006a4e:	e00a      	b.n	8006a66 <USBH_MSC_BOT_Process+0x392>
      break;
 8006a50:	bf00      	nop
 8006a52:	e008      	b.n	8006a66 <USBH_MSC_BOT_Process+0x392>
      break;
 8006a54:	bf00      	nop
 8006a56:	e006      	b.n	8006a66 <USBH_MSC_BOT_Process+0x392>
      break;
 8006a58:	bf00      	nop
 8006a5a:	e004      	b.n	8006a66 <USBH_MSC_BOT_Process+0x392>
      break;
 8006a5c:	bf00      	nop
 8006a5e:	e002      	b.n	8006a66 <USBH_MSC_BOT_Process+0x392>
      break;
 8006a60:	bf00      	nop
 8006a62:	e000      	b.n	8006a66 <USBH_MSC_BOT_Process+0x392>
      break;
 8006a64:	bf00      	nop
  }
  return status;
 8006a66:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3718      	adds	r7, #24
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	460b      	mov	r3, r1
 8006a7a:	70fb      	strb	r3, [r7, #3]
 8006a7c:	4613      	mov	r3, r2
 8006a7e:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8006a80:	2302      	movs	r3, #2
 8006a82:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a8a:	69db      	ldr	r3, [r3, #28]
 8006a8c:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8006a8e:	78bb      	ldrb	r3, [r7, #2]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d002      	beq.n	8006a9a <USBH_MSC_BOT_Abort+0x2a>
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d009      	beq.n	8006aac <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8006a98:	e011      	b.n	8006abe <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	79db      	ldrb	r3, [r3, #7]
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f001 f9a8 	bl	8007df6 <USBH_ClrFeature>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	73fb      	strb	r3, [r7, #15]
      break;
 8006aaa:	e008      	b.n	8006abe <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	799b      	ldrb	r3, [r3, #6]
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f001 f99f 	bl	8007df6 <USBH_ClrFeature>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	73fb      	strb	r3, [r7, #15]
      break;
 8006abc:	bf00      	nop
  }
  return status;
 8006abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3710      	adds	r7, #16
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ad6:	69db      	ldr	r3, [r3, #28]
 8006ad8:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8006ada:	2301      	movs	r3, #1
 8006adc:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	791b      	ldrb	r3, [r3, #4]
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f002 f95b 	bl	8008da0 <USBH_LL_GetLastXferSize>
 8006aea:	4603      	mov	r3, r0
 8006aec:	2b0d      	cmp	r3, #13
 8006aee:	d002      	beq.n	8006af6 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8006af0:	2302      	movs	r3, #2
 8006af2:	73fb      	strb	r3, [r7, #15]
 8006af4:	e024      	b.n	8006b40 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006afa:	4a14      	ldr	r2, [pc, #80]	; (8006b4c <USBH_MSC_DecodeCSW+0x84>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d11d      	bne.n	8006b3c <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d119      	bne.n	8006b40 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d102      	bne.n	8006b1c <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8006b16:	2300      	movs	r3, #0
 8006b18:	73fb      	strb	r3, [r7, #15]
 8006b1a:	e011      	b.n	8006b40 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d102      	bne.n	8006b2c <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8006b26:	2301      	movs	r3, #1
 8006b28:	73fb      	strb	r3, [r7, #15]
 8006b2a:	e009      	b.n	8006b40 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006b32:	2b02      	cmp	r3, #2
 8006b34:	d104      	bne.n	8006b40 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8006b36:	2302      	movs	r3, #2
 8006b38:	73fb      	strb	r3, [r7, #15]
 8006b3a:	e001      	b.n	8006b40 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8006b3c:	2302      	movs	r3, #2
 8006b3e:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8006b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3710      	adds	r7, #16
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	53425355 	.word	0x53425355

08006b50 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b084      	sub	sp, #16
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	460b      	mov	r3, r1
 8006b5a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8006b5c:	2302      	movs	r3, #2
 8006b5e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b66:	69db      	ldr	r3, [r3, #28]
 8006b68:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d002      	beq.n	8006b7a <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8006b74:	2b02      	cmp	r3, #2
 8006b76:	d021      	beq.n	8006bbc <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8006b78:	e028      	b.n	8006bcc <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	220a      	movs	r2, #10
 8006b8c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	3363      	adds	r3, #99	; 0x63
 8006b94:	2210      	movs	r2, #16
 8006b96:	2100      	movs	r1, #0
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f002 fab9 	bl	8009110 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	2202      	movs	r2, #2
 8006bb2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	73fb      	strb	r3, [r7, #15]
      break;
 8006bba:	e007      	b.n	8006bcc <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006bbc:	78fb      	ldrb	r3, [r7, #3]
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f7ff fd87 	bl	80066d4 <USBH_MSC_BOT_Process>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	73fb      	strb	r3, [r7, #15]
      break;
 8006bca:	bf00      	nop
  }

  return error;
 8006bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3710      	adds	r7, #16
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}

08006bd6 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8006bd6:	b580      	push	{r7, lr}
 8006bd8:	b086      	sub	sp, #24
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	60f8      	str	r0, [r7, #12]
 8006bde:	460b      	mov	r3, r1
 8006be0:	607a      	str	r2, [r7, #4]
 8006be2:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8006be4:	2301      	movs	r3, #1
 8006be6:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bee:	69db      	ldr	r3, [r3, #28]
 8006bf0:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d002      	beq.n	8006c02 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8006bfc:	2b02      	cmp	r3, #2
 8006bfe:	d027      	beq.n	8006c50 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8006c00:	e05f      	b.n	8006cc2 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	2208      	movs	r2, #8
 8006c06:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	2280      	movs	r2, #128	; 0x80
 8006c0c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	220a      	movs	r2, #10
 8006c14:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	3363      	adds	r3, #99	; 0x63
 8006c1c:	2210      	movs	r2, #16
 8006c1e:	2100      	movs	r1, #0
 8006c20:	4618      	mov	r0, r3
 8006c22:	f002 fa75 	bl	8009110 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	2225      	movs	r2, #37	; 0x25
 8006c2a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	2201      	movs	r2, #1
 8006c32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	2202      	movs	r2, #2
 8006c3a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	f103 0210 	add.w	r2, r3, #16
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	75fb      	strb	r3, [r7, #23]
      break;
 8006c4e:	e038      	b.n	8006cc2 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006c50:	7afb      	ldrb	r3, [r7, #11]
 8006c52:	4619      	mov	r1, r3
 8006c54:	68f8      	ldr	r0, [r7, #12]
 8006c56:	f7ff fd3d 	bl	80066d4 <USBH_MSC_BOT_Process>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8006c5e:	7dfb      	ldrb	r3, [r7, #23]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d12d      	bne.n	8006cc0 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c6a:	3303      	adds	r3, #3
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	461a      	mov	r2, r3
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c76:	3302      	adds	r3, #2
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	021b      	lsls	r3, r3, #8
 8006c7c:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c84:	3301      	adds	r3, #1
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8006c8a:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	061b      	lsls	r3, r3, #24
 8006c96:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ca2:	3307      	adds	r3, #7
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	b29a      	uxth	r2, r3
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cae:	3306      	adds	r3, #6
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	021b      	lsls	r3, r3, #8
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	b29a      	uxth	r2, r3
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	809a      	strh	r2, [r3, #4]
      break;
 8006cc0:	bf00      	nop
  }

  return error;
 8006cc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3718      	adds	r7, #24
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b086      	sub	sp, #24
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	460b      	mov	r3, r1
 8006cd6:	607a      	str	r2, [r7, #4]
 8006cd8:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8006cda:	2302      	movs	r3, #2
 8006cdc:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ce4:	69db      	ldr	r3, [r3, #28]
 8006ce6:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d002      	beq.n	8006cf8 <USBH_MSC_SCSI_Inquiry+0x2c>
 8006cf2:	2b02      	cmp	r3, #2
 8006cf4:	d03d      	beq.n	8006d72 <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8006cf6:	e089      	b.n	8006e0c <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	2224      	movs	r2, #36	; 0x24
 8006cfc:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	2280      	movs	r2, #128	; 0x80
 8006d02:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	220a      	movs	r2, #10
 8006d0a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	3363      	adds	r3, #99	; 0x63
 8006d12:	220a      	movs	r2, #10
 8006d14:	2100      	movs	r1, #0
 8006d16:	4618      	mov	r0, r3
 8006d18:	f002 f9fa 	bl	8009110 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	2212      	movs	r2, #18
 8006d20:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8006d24:	7afb      	ldrb	r3, [r7, #11]
 8006d26:	015b      	lsls	r3, r3, #5
 8006d28:	b2da      	uxtb	r2, r3
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	2224      	movs	r2, #36	; 0x24
 8006d44:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	2201      	movs	r2, #1
 8006d54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	2202      	movs	r2, #2
 8006d5c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	f103 0210 	add.w	r2, r3, #16
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	75fb      	strb	r3, [r7, #23]
      break;
 8006d70:	e04c      	b.n	8006e0c <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006d72:	7afb      	ldrb	r3, [r7, #11]
 8006d74:	4619      	mov	r1, r3
 8006d76:	68f8      	ldr	r0, [r7, #12]
 8006d78:	f7ff fcac 	bl	80066d4 <USBH_MSC_BOT_Process>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8006d80:	7dfb      	ldrb	r3, [r7, #23]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d141      	bne.n	8006e0a <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8006d86:	2222      	movs	r2, #34	; 0x22
 8006d88:	2100      	movs	r1, #0
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f002 f9c0 	bl	8009110 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	f003 031f 	and.w	r3, r3, #31
 8006d9c:	b2da      	uxtb	r2, r3
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	095b      	lsrs	r3, r3, #5
 8006dac:	b2da      	uxtb	r2, r3
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006db8:	3301      	adds	r3, #1
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	b25b      	sxtb	r3, r3
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	da03      	bge.n	8006dca <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	709a      	strb	r2, [r3, #2]
 8006dc8:	e002      	b.n	8006dd0 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	1cd8      	adds	r0, r3, #3
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006dda:	3308      	adds	r3, #8
 8006ddc:	2208      	movs	r2, #8
 8006dde:	4619      	mov	r1, r3
 8006de0:	f002 f988 	bl	80090f4 <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f103 000c 	add.w	r0, r3, #12
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006df0:	3310      	adds	r3, #16
 8006df2:	2210      	movs	r2, #16
 8006df4:	4619      	mov	r1, r3
 8006df6:	f002 f97d 	bl	80090f4 <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	331d      	adds	r3, #29
 8006dfe:	693a      	ldr	r2, [r7, #16]
 8006e00:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8006e04:	3220      	adds	r2, #32
 8006e06:	6812      	ldr	r2, [r2, #0]
 8006e08:	601a      	str	r2, [r3, #0]
      break;
 8006e0a:	bf00      	nop
  }

  return error;
 8006e0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3718      	adds	r7, #24
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}

08006e16 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8006e16:	b580      	push	{r7, lr}
 8006e18:	b086      	sub	sp, #24
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	60f8      	str	r0, [r7, #12]
 8006e1e:	460b      	mov	r3, r1
 8006e20:	607a      	str	r2, [r7, #4]
 8006e22:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8006e24:	2302      	movs	r3, #2
 8006e26:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e2e:	69db      	ldr	r3, [r3, #28]
 8006e30:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d002      	beq.n	8006e42 <USBH_MSC_SCSI_RequestSense+0x2c>
 8006e3c:	2b02      	cmp	r3, #2
 8006e3e:	d03d      	beq.n	8006ebc <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8006e40:	e05d      	b.n	8006efe <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	220e      	movs	r2, #14
 8006e46:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	2280      	movs	r2, #128	; 0x80
 8006e4c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	220a      	movs	r2, #10
 8006e54:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	3363      	adds	r3, #99	; 0x63
 8006e5c:	2210      	movs	r2, #16
 8006e5e:	2100      	movs	r1, #0
 8006e60:	4618      	mov	r0, r3
 8006e62:	f002 f955 	bl	8009110 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	2203      	movs	r2, #3
 8006e6a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8006e6e:	7afb      	ldrb	r3, [r7, #11]
 8006e70:	015b      	lsls	r3, r3, #5
 8006e72:	b2da      	uxtb	r2, r3
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	2200      	movs	r2, #0
 8006e86:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	220e      	movs	r2, #14
 8006e8e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	2200      	movs	r2, #0
 8006e96:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	2202      	movs	r2, #2
 8006ea6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	f103 0210 	add.w	r2, r3, #16
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	75fb      	strb	r3, [r7, #23]
      break;
 8006eba:	e020      	b.n	8006efe <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006ebc:	7afb      	ldrb	r3, [r7, #11]
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	68f8      	ldr	r0, [r7, #12]
 8006ec2:	f7ff fc07 	bl	80066d4 <USBH_MSC_BOT_Process>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8006eca:	7dfb      	ldrb	r3, [r7, #23]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d115      	bne.n	8006efc <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ed6:	3302      	adds	r3, #2
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	f003 030f 	and.w	r3, r3, #15
 8006ede:	b2da      	uxtb	r2, r3
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006eea:	7b1a      	ldrb	r2, [r3, #12]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ef6:	7b5a      	ldrb	r2, [r3, #13]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	709a      	strb	r2, [r3, #2]
      break;
 8006efc:	bf00      	nop
  }

  return error;
 8006efe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3718      	adds	r7, #24
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b086      	sub	sp, #24
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	607a      	str	r2, [r7, #4]
 8006f12:	603b      	str	r3, [r7, #0]
 8006f14:	460b      	mov	r3, r1
 8006f16:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8006f18:	2302      	movs	r3, #2
 8006f1a:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f22:	69db      	ldr	r3, [r3, #28]
 8006f24:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d002      	beq.n	8006f36 <USBH_MSC_SCSI_Write+0x2e>
 8006f30:	2b02      	cmp	r3, #2
 8006f32:	d047      	beq.n	8006fc4 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8006f34:	e04e      	b.n	8006fd4 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	6a3b      	ldr	r3, [r7, #32]
 8006f40:	fb03 f202 	mul.w	r2, r3, r2
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	220a      	movs	r2, #10
 8006f54:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	3363      	adds	r3, #99	; 0x63
 8006f5c:	2210      	movs	r2, #16
 8006f5e:	2100      	movs	r1, #0
 8006f60:	4618      	mov	r0, r3
 8006f62:	f002 f8d5 	bl	8009110 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	222a      	movs	r2, #42	; 0x2a
 8006f6a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8006f6e:	79fa      	ldrb	r2, [r7, #7]
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8006f76:	79ba      	ldrb	r2, [r7, #6]
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8006f7e:	797a      	ldrb	r2, [r7, #5]
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8006f86:	1d3b      	adds	r3, r7, #4
 8006f88:	781a      	ldrb	r2, [r3, #0]
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8006f90:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8006f9a:	f107 0320 	add.w	r3, r7, #32
 8006f9e:	781a      	ldrb	r2, [r3, #0]
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	2201      	movs	r2, #1
 8006faa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	2202      	movs	r2, #2
 8006fb2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	683a      	ldr	r2, [r7, #0]
 8006fba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	75fb      	strb	r3, [r7, #23]
      break;
 8006fc2:	e007      	b.n	8006fd4 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006fc4:	7afb      	ldrb	r3, [r7, #11]
 8006fc6:	4619      	mov	r1, r3
 8006fc8:	68f8      	ldr	r0, [r7, #12]
 8006fca:	f7ff fb83 	bl	80066d4 <USBH_MSC_BOT_Process>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	75fb      	strb	r3, [r7, #23]
      break;
 8006fd2:	bf00      	nop
  }

  return error;
 8006fd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3718      	adds	r7, #24
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}

08006fde <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8006fde:	b580      	push	{r7, lr}
 8006fe0:	b086      	sub	sp, #24
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	60f8      	str	r0, [r7, #12]
 8006fe6:	607a      	str	r2, [r7, #4]
 8006fe8:	603b      	str	r3, [r7, #0]
 8006fea:	460b      	mov	r3, r1
 8006fec:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8006fee:	2302      	movs	r3, #2
 8006ff0:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ff8:	69db      	ldr	r3, [r3, #28]
 8006ffa:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8007002:	2b01      	cmp	r3, #1
 8007004:	d002      	beq.n	800700c <USBH_MSC_SCSI_Read+0x2e>
 8007006:	2b02      	cmp	r3, #2
 8007008:	d047      	beq.n	800709a <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800700a:	e04e      	b.n	80070aa <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8007012:	461a      	mov	r2, r3
 8007014:	6a3b      	ldr	r3, [r7, #32]
 8007016:	fb03 f202 	mul.w	r2, r3, r2
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	2280      	movs	r2, #128	; 0x80
 8007022:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	220a      	movs	r2, #10
 800702a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	3363      	adds	r3, #99	; 0x63
 8007032:	2210      	movs	r2, #16
 8007034:	2100      	movs	r1, #0
 8007036:	4618      	mov	r0, r3
 8007038:	f002 f86a 	bl	8009110 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	2228      	movs	r2, #40	; 0x28
 8007040:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8007044:	79fa      	ldrb	r2, [r7, #7]
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800704c:	79ba      	ldrb	r2, [r7, #6]
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8007054:	797a      	ldrb	r2, [r7, #5]
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800705c:	1d3b      	adds	r3, r7, #4
 800705e:	781a      	ldrb	r2, [r3, #0]
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8007066:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8007070:	f107 0320 	add.w	r3, r7, #32
 8007074:	781a      	ldrb	r2, [r3, #0]
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	2201      	movs	r2, #1
 8007080:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	2202      	movs	r2, #2
 8007088:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	683a      	ldr	r2, [r7, #0]
 8007090:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8007094:	2301      	movs	r3, #1
 8007096:	75fb      	strb	r3, [r7, #23]
      break;
 8007098:	e007      	b.n	80070aa <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800709a:	7afb      	ldrb	r3, [r7, #11]
 800709c:	4619      	mov	r1, r3
 800709e:	68f8      	ldr	r0, [r7, #12]
 80070a0:	f7ff fb18 	bl	80066d4 <USBH_MSC_BOT_Process>
 80070a4:	4603      	mov	r3, r0
 80070a6:	75fb      	strb	r3, [r7, #23]
      break;
 80070a8:	bf00      	nop
  }

  return error;
 80070aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3718      	adds	r7, #24
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b084      	sub	sp, #16
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	60f8      	str	r0, [r7, #12]
 80070bc:	60b9      	str	r1, [r7, #8]
 80070be:	4613      	mov	r3, r2
 80070c0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d101      	bne.n	80070cc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80070c8:	2302      	movs	r3, #2
 80070ca:	e029      	b.n	8007120 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	79fa      	ldrb	r2, [r7, #7]
 80070d0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2200      	movs	r2, #0
 80070d8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2200      	movs	r2, #0
 80070e0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80070e4:	68f8      	ldr	r0, [r7, #12]
 80070e6:	f000 f81f 	bl	8007128 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2200      	movs	r2, #0
 80070ee:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2200      	movs	r2, #0
 80070f6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2200      	movs	r2, #0
 80070fe:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2200      	movs	r2, #0
 8007106:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d003      	beq.n	8007118 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	68ba      	ldr	r2, [r7, #8]
 8007114:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007118:	68f8      	ldr	r0, [r7, #12]
 800711a:	f001 fd8d 	bl	8008c38 <USBH_LL_Init>

  return USBH_OK;
 800711e:	2300      	movs	r3, #0
}
 8007120:	4618      	mov	r0, r3
 8007122:	3710      	adds	r7, #16
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}

08007128 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007128:	b480      	push	{r7}
 800712a:	b085      	sub	sp, #20
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007130:	2300      	movs	r3, #0
 8007132:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007134:	2300      	movs	r3, #0
 8007136:	60fb      	str	r3, [r7, #12]
 8007138:	e009      	b.n	800714e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	33e0      	adds	r3, #224	; 0xe0
 8007140:	009b      	lsls	r3, r3, #2
 8007142:	4413      	add	r3, r2
 8007144:	2200      	movs	r2, #0
 8007146:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	3301      	adds	r3, #1
 800714c:	60fb      	str	r3, [r7, #12]
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2b0f      	cmp	r3, #15
 8007152:	d9f2      	bls.n	800713a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007154:	2300      	movs	r3, #0
 8007156:	60fb      	str	r3, [r7, #12]
 8007158:	e009      	b.n	800716e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	4413      	add	r3, r2
 8007160:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007164:	2200      	movs	r2, #0
 8007166:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	3301      	adds	r3, #1
 800716c:	60fb      	str	r3, [r7, #12]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007174:	d3f1      	bcc.n	800715a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2200      	movs	r2, #0
 800717a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2201      	movs	r2, #1
 8007186:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2200      	movs	r2, #0
 800718c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2201      	movs	r2, #1
 8007194:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2240      	movs	r2, #64	; 0x40
 800719a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2201      	movs	r2, #1
 80071ae:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2200      	movs	r2, #0
 80071be:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80071c2:	2300      	movs	r3, #0
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3714      	adds	r7, #20
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b085      	sub	sp, #20
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80071da:	2300      	movs	r3, #0
 80071dc:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d016      	beq.n	8007212 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d10e      	bne.n	800720c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80071f4:	1c59      	adds	r1, r3, #1
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	33de      	adds	r3, #222	; 0xde
 8007200:	6839      	ldr	r1, [r7, #0]
 8007202:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007206:	2300      	movs	r3, #0
 8007208:	73fb      	strb	r3, [r7, #15]
 800720a:	e004      	b.n	8007216 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800720c:	2302      	movs	r3, #2
 800720e:	73fb      	strb	r3, [r7, #15]
 8007210:	e001      	b.n	8007216 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007212:	2302      	movs	r3, #2
 8007214:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007216:	7bfb      	ldrb	r3, [r7, #15]
}
 8007218:	4618      	mov	r0, r3
 800721a:	3714      	adds	r7, #20
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007224:	b480      	push	{r7}
 8007226:	b085      	sub	sp, #20
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	460b      	mov	r3, r1
 800722e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007230:	2300      	movs	r3, #0
 8007232:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800723a:	78fa      	ldrb	r2, [r7, #3]
 800723c:	429a      	cmp	r2, r3
 800723e:	d204      	bcs.n	800724a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	78fa      	ldrb	r2, [r7, #3]
 8007244:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007248:	e001      	b.n	800724e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800724a:	2302      	movs	r3, #2
 800724c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800724e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007250:	4618      	mov	r0, r3
 8007252:	3714      	adds	r7, #20
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr

0800725c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800725c:	b480      	push	{r7}
 800725e:	b087      	sub	sp, #28
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	4608      	mov	r0, r1
 8007266:	4611      	mov	r1, r2
 8007268:	461a      	mov	r2, r3
 800726a:	4603      	mov	r3, r0
 800726c:	70fb      	strb	r3, [r7, #3]
 800726e:	460b      	mov	r3, r1
 8007270:	70bb      	strb	r3, [r7, #2]
 8007272:	4613      	mov	r3, r2
 8007274:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007276:	2300      	movs	r3, #0
 8007278:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800727a:	2300      	movs	r3, #0
 800727c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007284:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007286:	e025      	b.n	80072d4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007288:	7dfb      	ldrb	r3, [r7, #23]
 800728a:	221a      	movs	r2, #26
 800728c:	fb02 f303 	mul.w	r3, r2, r3
 8007290:	3308      	adds	r3, #8
 8007292:	68fa      	ldr	r2, [r7, #12]
 8007294:	4413      	add	r3, r2
 8007296:	3302      	adds	r3, #2
 8007298:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	795b      	ldrb	r3, [r3, #5]
 800729e:	78fa      	ldrb	r2, [r7, #3]
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d002      	beq.n	80072aa <USBH_FindInterface+0x4e>
 80072a4:	78fb      	ldrb	r3, [r7, #3]
 80072a6:	2bff      	cmp	r3, #255	; 0xff
 80072a8:	d111      	bne.n	80072ce <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80072ae:	78ba      	ldrb	r2, [r7, #2]
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d002      	beq.n	80072ba <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80072b4:	78bb      	ldrb	r3, [r7, #2]
 80072b6:	2bff      	cmp	r3, #255	; 0xff
 80072b8:	d109      	bne.n	80072ce <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80072be:	787a      	ldrb	r2, [r7, #1]
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d002      	beq.n	80072ca <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80072c4:	787b      	ldrb	r3, [r7, #1]
 80072c6:	2bff      	cmp	r3, #255	; 0xff
 80072c8:	d101      	bne.n	80072ce <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80072ca:	7dfb      	ldrb	r3, [r7, #23]
 80072cc:	e006      	b.n	80072dc <USBH_FindInterface+0x80>
    }
    if_ix++;
 80072ce:	7dfb      	ldrb	r3, [r7, #23]
 80072d0:	3301      	adds	r3, #1
 80072d2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80072d4:	7dfb      	ldrb	r3, [r7, #23]
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d9d6      	bls.n	8007288 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80072da:	23ff      	movs	r3, #255	; 0xff
}
 80072dc:	4618      	mov	r0, r3
 80072de:	371c      	adds	r7, #28
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr

080072e8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b082      	sub	sp, #8
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f001 fcdd 	bl	8008cb0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80072f6:	2101      	movs	r1, #1
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f001 fdf6 	bl	8008eea <USBH_LL_DriverVBUS>

  return USBH_OK;
 80072fe:	2300      	movs	r3, #0
}
 8007300:	4618      	mov	r0, r3
 8007302:	3708      	adds	r7, #8
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b088      	sub	sp, #32
 800730c:	af04      	add	r7, sp, #16
 800730e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007310:	2302      	movs	r3, #2
 8007312:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007314:	2300      	movs	r3, #0
 8007316:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800731e:	b2db      	uxtb	r3, r3
 8007320:	2b01      	cmp	r3, #1
 8007322:	d102      	bne.n	800732a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2203      	movs	r2, #3
 8007328:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	b2db      	uxtb	r3, r3
 8007330:	2b0b      	cmp	r3, #11
 8007332:	f200 81be 	bhi.w	80076b2 <USBH_Process+0x3aa>
 8007336:	a201      	add	r2, pc, #4	; (adr r2, 800733c <USBH_Process+0x34>)
 8007338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800733c:	0800736d 	.word	0x0800736d
 8007340:	0800739f 	.word	0x0800739f
 8007344:	08007407 	.word	0x08007407
 8007348:	0800764d 	.word	0x0800764d
 800734c:	080076b3 	.word	0x080076b3
 8007350:	080074ab 	.word	0x080074ab
 8007354:	080075f3 	.word	0x080075f3
 8007358:	080074e1 	.word	0x080074e1
 800735c:	08007501 	.word	0x08007501
 8007360:	08007521 	.word	0x08007521
 8007364:	08007565 	.word	0x08007565
 8007368:	08007635 	.word	0x08007635
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007372:	b2db      	uxtb	r3, r3
 8007374:	2b00      	cmp	r3, #0
 8007376:	f000 819e 	beq.w	80076b6 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2201      	movs	r2, #1
 800737e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007380:	20c8      	movs	r0, #200	; 0xc8
 8007382:	f001 fe29 	bl	8008fd8 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f001 fcef 	bl	8008d6a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2200      	movs	r2, #0
 8007390:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2200      	movs	r2, #0
 8007398:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800739c:	e18b      	b.n	80076b6 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d107      	bne.n	80073b8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2202      	movs	r2, #2
 80073b4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80073b6:	e18d      	b.n	80076d4 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80073be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80073c2:	d914      	bls.n	80073ee <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80073ca:	3301      	adds	r3, #1
 80073cc:	b2da      	uxtb	r2, r3
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80073da:	2b03      	cmp	r3, #3
 80073dc:	d903      	bls.n	80073e6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	220d      	movs	r2, #13
 80073e2:	701a      	strb	r2, [r3, #0]
      break;
 80073e4:	e176      	b.n	80076d4 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2200      	movs	r2, #0
 80073ea:	701a      	strb	r2, [r3, #0]
      break;
 80073ec:	e172      	b.n	80076d4 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80073f4:	f103 020a 	add.w	r2, r3, #10
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80073fe:	200a      	movs	r0, #10
 8007400:	f001 fdea 	bl	8008fd8 <USBH_Delay>
      break;
 8007404:	e166      	b.n	80076d4 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800740c:	2b00      	cmp	r3, #0
 800740e:	d005      	beq.n	800741c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007416:	2104      	movs	r1, #4
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800741c:	2064      	movs	r0, #100	; 0x64
 800741e:	f001 fddb 	bl	8008fd8 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f001 fc7a 	bl	8008d1c <USBH_LL_GetSpeed>
 8007428:	4603      	mov	r3, r0
 800742a:	461a      	mov	r2, r3
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2205      	movs	r2, #5
 8007436:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007438:	2100      	movs	r1, #0
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f001 fa29 	bl	8008892 <USBH_AllocPipe>
 8007440:	4603      	mov	r3, r0
 8007442:	461a      	mov	r2, r3
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007448:	2180      	movs	r1, #128	; 0x80
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f001 fa21 	bl	8008892 <USBH_AllocPipe>
 8007450:	4603      	mov	r3, r0
 8007452:	461a      	mov	r2, r3
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	7919      	ldrb	r1, [r3, #4]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007468:	687a      	ldr	r2, [r7, #4]
 800746a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800746c:	b292      	uxth	r2, r2
 800746e:	9202      	str	r2, [sp, #8]
 8007470:	2200      	movs	r2, #0
 8007472:	9201      	str	r2, [sp, #4]
 8007474:	9300      	str	r3, [sp, #0]
 8007476:	4603      	mov	r3, r0
 8007478:	2280      	movs	r2, #128	; 0x80
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f001 f9da 	bl	8008834 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	7959      	ldrb	r1, [r3, #5]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007494:	b292      	uxth	r2, r2
 8007496:	9202      	str	r2, [sp, #8]
 8007498:	2200      	movs	r2, #0
 800749a:	9201      	str	r2, [sp, #4]
 800749c:	9300      	str	r3, [sp, #0]
 800749e:	4603      	mov	r3, r0
 80074a0:	2200      	movs	r2, #0
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f001 f9c6 	bl	8008834 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80074a8:	e114      	b.n	80076d4 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 f918 	bl	80076e0 <USBH_HandleEnum>
 80074b0:	4603      	mov	r3, r0
 80074b2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80074b4:	7bbb      	ldrb	r3, [r7, #14]
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	f040 80fe 	bne.w	80076ba <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2200      	movs	r2, #0
 80074c2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	d103      	bne.n	80074d8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2208      	movs	r2, #8
 80074d4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80074d6:	e0f0      	b.n	80076ba <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2207      	movs	r2, #7
 80074dc:	701a      	strb	r2, [r3, #0]
      break;
 80074de:	e0ec      	b.n	80076ba <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	f000 80e9 	beq.w	80076be <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80074f2:	2101      	movs	r1, #1
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2208      	movs	r2, #8
 80074fc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80074fe:	e0de      	b.n	80076be <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007506:	b29b      	uxth	r3, r3
 8007508:	4619      	mov	r1, r3
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 fc2c 	bl	8007d68 <USBH_SetCfg>
 8007510:	4603      	mov	r3, r0
 8007512:	2b00      	cmp	r3, #0
 8007514:	f040 80d5 	bne.w	80076c2 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2209      	movs	r2, #9
 800751c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800751e:	e0d0      	b.n	80076c2 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007526:	f003 0320 	and.w	r3, r3, #32
 800752a:	2b00      	cmp	r3, #0
 800752c:	d016      	beq.n	800755c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800752e:	2101      	movs	r1, #1
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 fc3c 	bl	8007dae <USBH_SetFeature>
 8007536:	4603      	mov	r3, r0
 8007538:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800753a:	7bbb      	ldrb	r3, [r7, #14]
 800753c:	b2db      	uxtb	r3, r3
 800753e:	2b00      	cmp	r3, #0
 8007540:	d103      	bne.n	800754a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	220a      	movs	r2, #10
 8007546:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007548:	e0bd      	b.n	80076c6 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800754a:	7bbb      	ldrb	r3, [r7, #14]
 800754c:	b2db      	uxtb	r3, r3
 800754e:	2b03      	cmp	r3, #3
 8007550:	f040 80b9 	bne.w	80076c6 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	220a      	movs	r2, #10
 8007558:	701a      	strb	r2, [r3, #0]
      break;
 800755a:	e0b4      	b.n	80076c6 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	220a      	movs	r2, #10
 8007560:	701a      	strb	r2, [r3, #0]
      break;
 8007562:	e0b0      	b.n	80076c6 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800756a:	2b00      	cmp	r3, #0
 800756c:	f000 80ad 	beq.w	80076ca <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2200      	movs	r2, #0
 8007574:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007578:	2300      	movs	r3, #0
 800757a:	73fb      	strb	r3, [r7, #15]
 800757c:	e016      	b.n	80075ac <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800757e:	7bfa      	ldrb	r2, [r7, #15]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	32de      	adds	r2, #222	; 0xde
 8007584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007588:	791a      	ldrb	r2, [r3, #4]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007590:	429a      	cmp	r2, r3
 8007592:	d108      	bne.n	80075a6 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007594:	7bfa      	ldrb	r2, [r7, #15]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	32de      	adds	r2, #222	; 0xde
 800759a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80075a4:	e005      	b.n	80075b2 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80075a6:	7bfb      	ldrb	r3, [r7, #15]
 80075a8:	3301      	adds	r3, #1
 80075aa:	73fb      	strb	r3, [r7, #15]
 80075ac:	7bfb      	ldrb	r3, [r7, #15]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d0e5      	beq.n	800757e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d016      	beq.n	80075ea <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	4798      	blx	r3
 80075c8:	4603      	mov	r3, r0
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d109      	bne.n	80075e2 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2206      	movs	r2, #6
 80075d2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80075da:	2103      	movs	r1, #3
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80075e0:	e073      	b.n	80076ca <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	220d      	movs	r2, #13
 80075e6:	701a      	strb	r2, [r3, #0]
      break;
 80075e8:	e06f      	b.n	80076ca <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	220d      	movs	r2, #13
 80075ee:	701a      	strb	r2, [r3, #0]
      break;
 80075f0:	e06b      	b.n	80076ca <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d017      	beq.n	800762c <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007602:	691b      	ldr	r3, [r3, #16]
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	4798      	blx	r3
 8007608:	4603      	mov	r3, r0
 800760a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800760c:	7bbb      	ldrb	r3, [r7, #14]
 800760e:	b2db      	uxtb	r3, r3
 8007610:	2b00      	cmp	r3, #0
 8007612:	d103      	bne.n	800761c <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	220b      	movs	r2, #11
 8007618:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800761a:	e058      	b.n	80076ce <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800761c:	7bbb      	ldrb	r3, [r7, #14]
 800761e:	b2db      	uxtb	r3, r3
 8007620:	2b02      	cmp	r3, #2
 8007622:	d154      	bne.n	80076ce <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	220d      	movs	r2, #13
 8007628:	701a      	strb	r2, [r3, #0]
      break;
 800762a:	e050      	b.n	80076ce <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	220d      	movs	r2, #13
 8007630:	701a      	strb	r2, [r3, #0]
      break;
 8007632:	e04c      	b.n	80076ce <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800763a:	2b00      	cmp	r3, #0
 800763c:	d049      	beq.n	80076d2 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007644:	695b      	ldr	r3, [r3, #20]
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	4798      	blx	r3
      }
      break;
 800764a:	e042      	b.n	80076d2 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2200      	movs	r2, #0
 8007650:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f7ff fd67 	bl	8007128 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007660:	2b00      	cmp	r3, #0
 8007662:	d009      	beq.n	8007678 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2200      	movs	r2, #0
 8007674:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800767e:	2b00      	cmp	r3, #0
 8007680:	d005      	beq.n	800768e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007688:	2105      	movs	r1, #5
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007694:	b2db      	uxtb	r3, r3
 8007696:	2b01      	cmp	r3, #1
 8007698:	d107      	bne.n	80076aa <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2200      	movs	r2, #0
 800769e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f7ff fe20 	bl	80072e8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80076a8:	e014      	b.n	80076d4 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f001 fb00 	bl	8008cb0 <USBH_LL_Start>
      break;
 80076b0:	e010      	b.n	80076d4 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 80076b2:	bf00      	nop
 80076b4:	e00e      	b.n	80076d4 <USBH_Process+0x3cc>
      break;
 80076b6:	bf00      	nop
 80076b8:	e00c      	b.n	80076d4 <USBH_Process+0x3cc>
      break;
 80076ba:	bf00      	nop
 80076bc:	e00a      	b.n	80076d4 <USBH_Process+0x3cc>
    break;
 80076be:	bf00      	nop
 80076c0:	e008      	b.n	80076d4 <USBH_Process+0x3cc>
      break;
 80076c2:	bf00      	nop
 80076c4:	e006      	b.n	80076d4 <USBH_Process+0x3cc>
      break;
 80076c6:	bf00      	nop
 80076c8:	e004      	b.n	80076d4 <USBH_Process+0x3cc>
      break;
 80076ca:	bf00      	nop
 80076cc:	e002      	b.n	80076d4 <USBH_Process+0x3cc>
      break;
 80076ce:	bf00      	nop
 80076d0:	e000      	b.n	80076d4 <USBH_Process+0x3cc>
      break;
 80076d2:	bf00      	nop
  }
  return USBH_OK;
 80076d4:	2300      	movs	r3, #0
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3710      	adds	r7, #16
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
 80076de:	bf00      	nop

080076e0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b088      	sub	sp, #32
 80076e4:	af04      	add	r7, sp, #16
 80076e6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80076e8:	2301      	movs	r3, #1
 80076ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80076ec:	2301      	movs	r3, #1
 80076ee:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	785b      	ldrb	r3, [r3, #1]
 80076f4:	2b07      	cmp	r3, #7
 80076f6:	f200 81c1 	bhi.w	8007a7c <USBH_HandleEnum+0x39c>
 80076fa:	a201      	add	r2, pc, #4	; (adr r2, 8007700 <USBH_HandleEnum+0x20>)
 80076fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007700:	08007721 	.word	0x08007721
 8007704:	080077df 	.word	0x080077df
 8007708:	08007849 	.word	0x08007849
 800770c:	080078d7 	.word	0x080078d7
 8007710:	08007941 	.word	0x08007941
 8007714:	080079b1 	.word	0x080079b1
 8007718:	080079f7 	.word	0x080079f7
 800771c:	08007a3d 	.word	0x08007a3d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007720:	2108      	movs	r1, #8
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 fa50 	bl	8007bc8 <USBH_Get_DevDesc>
 8007728:	4603      	mov	r3, r0
 800772a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800772c:	7bbb      	ldrb	r3, [r7, #14]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d130      	bne.n	8007794 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2201      	movs	r2, #1
 8007740:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	7919      	ldrb	r1, [r3, #4]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007756:	b292      	uxth	r2, r2
 8007758:	9202      	str	r2, [sp, #8]
 800775a:	2200      	movs	r2, #0
 800775c:	9201      	str	r2, [sp, #4]
 800775e:	9300      	str	r3, [sp, #0]
 8007760:	4603      	mov	r3, r0
 8007762:	2280      	movs	r2, #128	; 0x80
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f001 f865 	bl	8008834 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	7959      	ldrb	r1, [r3, #5]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800777e:	b292      	uxth	r2, r2
 8007780:	9202      	str	r2, [sp, #8]
 8007782:	2200      	movs	r2, #0
 8007784:	9201      	str	r2, [sp, #4]
 8007786:	9300      	str	r3, [sp, #0]
 8007788:	4603      	mov	r3, r0
 800778a:	2200      	movs	r2, #0
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f001 f851 	bl	8008834 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007792:	e175      	b.n	8007a80 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007794:	7bbb      	ldrb	r3, [r7, #14]
 8007796:	2b03      	cmp	r3, #3
 8007798:	f040 8172 	bne.w	8007a80 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80077a2:	3301      	adds	r3, #1
 80077a4:	b2da      	uxtb	r2, r3
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80077b2:	2b03      	cmp	r3, #3
 80077b4:	d903      	bls.n	80077be <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	220d      	movs	r2, #13
 80077ba:	701a      	strb	r2, [r3, #0]
      break;
 80077bc:	e160      	b.n	8007a80 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	795b      	ldrb	r3, [r3, #5]
 80077c2:	4619      	mov	r1, r3
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f001 f885 	bl	80088d4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	791b      	ldrb	r3, [r3, #4]
 80077ce:	4619      	mov	r1, r3
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f001 f87f 	bl	80088d4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2200      	movs	r2, #0
 80077da:	701a      	strb	r2, [r3, #0]
      break;
 80077dc:	e150      	b.n	8007a80 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80077de:	2112      	movs	r1, #18
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f000 f9f1 	bl	8007bc8 <USBH_Get_DevDesc>
 80077e6:	4603      	mov	r3, r0
 80077e8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80077ea:	7bbb      	ldrb	r3, [r7, #14]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d103      	bne.n	80077f8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2202      	movs	r2, #2
 80077f4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80077f6:	e145      	b.n	8007a84 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077f8:	7bbb      	ldrb	r3, [r7, #14]
 80077fa:	2b03      	cmp	r3, #3
 80077fc:	f040 8142 	bne.w	8007a84 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007806:	3301      	adds	r3, #1
 8007808:	b2da      	uxtb	r2, r3
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007816:	2b03      	cmp	r3, #3
 8007818:	d903      	bls.n	8007822 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	220d      	movs	r2, #13
 800781e:	701a      	strb	r2, [r3, #0]
      break;
 8007820:	e130      	b.n	8007a84 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	795b      	ldrb	r3, [r3, #5]
 8007826:	4619      	mov	r1, r3
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f001 f853 	bl	80088d4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	791b      	ldrb	r3, [r3, #4]
 8007832:	4619      	mov	r1, r3
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f001 f84d 	bl	80088d4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2200      	movs	r2, #0
 8007844:	701a      	strb	r2, [r3, #0]
      break;
 8007846:	e11d      	b.n	8007a84 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007848:	2101      	movs	r1, #1
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 fa68 	bl	8007d20 <USBH_SetAddress>
 8007850:	4603      	mov	r3, r0
 8007852:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007854:	7bbb      	ldrb	r3, [r7, #14]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d132      	bne.n	80078c0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800785a:	2002      	movs	r0, #2
 800785c:	f001 fbbc 	bl	8008fd8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2201      	movs	r2, #1
 8007864:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2203      	movs	r2, #3
 800786c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	7919      	ldrb	r1, [r3, #4]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007882:	b292      	uxth	r2, r2
 8007884:	9202      	str	r2, [sp, #8]
 8007886:	2200      	movs	r2, #0
 8007888:	9201      	str	r2, [sp, #4]
 800788a:	9300      	str	r3, [sp, #0]
 800788c:	4603      	mov	r3, r0
 800788e:	2280      	movs	r2, #128	; 0x80
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 ffcf 	bl	8008834 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	7959      	ldrb	r1, [r3, #5]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80078aa:	b292      	uxth	r2, r2
 80078ac:	9202      	str	r2, [sp, #8]
 80078ae:	2200      	movs	r2, #0
 80078b0:	9201      	str	r2, [sp, #4]
 80078b2:	9300      	str	r3, [sp, #0]
 80078b4:	4603      	mov	r3, r0
 80078b6:	2200      	movs	r2, #0
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 ffbb 	bl	8008834 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80078be:	e0e3      	b.n	8007a88 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078c0:	7bbb      	ldrb	r3, [r7, #14]
 80078c2:	2b03      	cmp	r3, #3
 80078c4:	f040 80e0 	bne.w	8007a88 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	220d      	movs	r2, #13
 80078cc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2200      	movs	r2, #0
 80078d2:	705a      	strb	r2, [r3, #1]
      break;
 80078d4:	e0d8      	b.n	8007a88 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80078d6:	2109      	movs	r1, #9
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 f99d 	bl	8007c18 <USBH_Get_CfgDesc>
 80078de:	4603      	mov	r3, r0
 80078e0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80078e2:	7bbb      	ldrb	r3, [r7, #14]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d103      	bne.n	80078f0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2204      	movs	r2, #4
 80078ec:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80078ee:	e0cd      	b.n	8007a8c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078f0:	7bbb      	ldrb	r3, [r7, #14]
 80078f2:	2b03      	cmp	r3, #3
 80078f4:	f040 80ca 	bne.w	8007a8c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80078fe:	3301      	adds	r3, #1
 8007900:	b2da      	uxtb	r2, r3
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800790e:	2b03      	cmp	r3, #3
 8007910:	d903      	bls.n	800791a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	220d      	movs	r2, #13
 8007916:	701a      	strb	r2, [r3, #0]
      break;
 8007918:	e0b8      	b.n	8007a8c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	795b      	ldrb	r3, [r3, #5]
 800791e:	4619      	mov	r1, r3
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 ffd7 	bl	80088d4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	791b      	ldrb	r3, [r3, #4]
 800792a:	4619      	mov	r1, r3
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 ffd1 	bl	80088d4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2200      	movs	r2, #0
 800793c:	701a      	strb	r2, [r3, #0]
      break;
 800793e:	e0a5      	b.n	8007a8c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007946:	4619      	mov	r1, r3
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 f965 	bl	8007c18 <USBH_Get_CfgDesc>
 800794e:	4603      	mov	r3, r0
 8007950:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007952:	7bbb      	ldrb	r3, [r7, #14]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d103      	bne.n	8007960 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2205      	movs	r2, #5
 800795c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800795e:	e097      	b.n	8007a90 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007960:	7bbb      	ldrb	r3, [r7, #14]
 8007962:	2b03      	cmp	r3, #3
 8007964:	f040 8094 	bne.w	8007a90 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800796e:	3301      	adds	r3, #1
 8007970:	b2da      	uxtb	r2, r3
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800797e:	2b03      	cmp	r3, #3
 8007980:	d903      	bls.n	800798a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	220d      	movs	r2, #13
 8007986:	701a      	strb	r2, [r3, #0]
      break;
 8007988:	e082      	b.n	8007a90 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	795b      	ldrb	r3, [r3, #5]
 800798e:	4619      	mov	r1, r3
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 ff9f 	bl	80088d4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	791b      	ldrb	r3, [r3, #4]
 800799a:	4619      	mov	r1, r3
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 ff99 	bl	80088d4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	701a      	strb	r2, [r3, #0]
      break;
 80079ae:	e06f      	b.n	8007a90 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d019      	beq.n	80079ee <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80079c6:	23ff      	movs	r3, #255	; 0xff
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 f949 	bl	8007c60 <USBH_Get_StringDesc>
 80079ce:	4603      	mov	r3, r0
 80079d0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80079d2:	7bbb      	ldrb	r3, [r7, #14]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d103      	bne.n	80079e0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2206      	movs	r2, #6
 80079dc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80079de:	e059      	b.n	8007a94 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80079e0:	7bbb      	ldrb	r3, [r7, #14]
 80079e2:	2b03      	cmp	r3, #3
 80079e4:	d156      	bne.n	8007a94 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2206      	movs	r2, #6
 80079ea:	705a      	strb	r2, [r3, #1]
      break;
 80079ec:	e052      	b.n	8007a94 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2206      	movs	r2, #6
 80079f2:	705a      	strb	r2, [r3, #1]
      break;
 80079f4:	e04e      	b.n	8007a94 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d019      	beq.n	8007a34 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007a0c:	23ff      	movs	r3, #255	; 0xff
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 f926 	bl	8007c60 <USBH_Get_StringDesc>
 8007a14:	4603      	mov	r3, r0
 8007a16:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007a18:	7bbb      	ldrb	r3, [r7, #14]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d103      	bne.n	8007a26 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2207      	movs	r2, #7
 8007a22:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007a24:	e038      	b.n	8007a98 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a26:	7bbb      	ldrb	r3, [r7, #14]
 8007a28:	2b03      	cmp	r3, #3
 8007a2a:	d135      	bne.n	8007a98 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2207      	movs	r2, #7
 8007a30:	705a      	strb	r2, [r3, #1]
      break;
 8007a32:	e031      	b.n	8007a98 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2207      	movs	r2, #7
 8007a38:	705a      	strb	r2, [r3, #1]
      break;
 8007a3a:	e02d      	b.n	8007a98 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d017      	beq.n	8007a76 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007a52:	23ff      	movs	r3, #255	; 0xff
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 f903 	bl	8007c60 <USBH_Get_StringDesc>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007a5e:	7bbb      	ldrb	r3, [r7, #14]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d102      	bne.n	8007a6a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007a64:	2300      	movs	r3, #0
 8007a66:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007a68:	e018      	b.n	8007a9c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a6a:	7bbb      	ldrb	r3, [r7, #14]
 8007a6c:	2b03      	cmp	r3, #3
 8007a6e:	d115      	bne.n	8007a9c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007a70:	2300      	movs	r3, #0
 8007a72:	73fb      	strb	r3, [r7, #15]
      break;
 8007a74:	e012      	b.n	8007a9c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007a76:	2300      	movs	r3, #0
 8007a78:	73fb      	strb	r3, [r7, #15]
      break;
 8007a7a:	e00f      	b.n	8007a9c <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007a7c:	bf00      	nop
 8007a7e:	e00e      	b.n	8007a9e <USBH_HandleEnum+0x3be>
      break;
 8007a80:	bf00      	nop
 8007a82:	e00c      	b.n	8007a9e <USBH_HandleEnum+0x3be>
      break;
 8007a84:	bf00      	nop
 8007a86:	e00a      	b.n	8007a9e <USBH_HandleEnum+0x3be>
      break;
 8007a88:	bf00      	nop
 8007a8a:	e008      	b.n	8007a9e <USBH_HandleEnum+0x3be>
      break;
 8007a8c:	bf00      	nop
 8007a8e:	e006      	b.n	8007a9e <USBH_HandleEnum+0x3be>
      break;
 8007a90:	bf00      	nop
 8007a92:	e004      	b.n	8007a9e <USBH_HandleEnum+0x3be>
      break;
 8007a94:	bf00      	nop
 8007a96:	e002      	b.n	8007a9e <USBH_HandleEnum+0x3be>
      break;
 8007a98:	bf00      	nop
 8007a9a:	e000      	b.n	8007a9e <USBH_HandleEnum+0x3be>
      break;
 8007a9c:	bf00      	nop
  }
  return Status;
 8007a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3710      	adds	r7, #16
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b083      	sub	sp, #12
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	683a      	ldr	r2, [r7, #0]
 8007ab6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007aba:	bf00      	nop
 8007abc:	370c      	adds	r7, #12
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr

08007ac6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	b082      	sub	sp, #8
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007ad4:	1c5a      	adds	r2, r3, #1
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f000 f804 	bl	8007aea <USBH_HandleSof>
}
 8007ae2:	bf00      	nop
 8007ae4:	3708      	adds	r7, #8
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}

08007aea <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007aea:	b580      	push	{r7, lr}
 8007aec:	b082      	sub	sp, #8
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	781b      	ldrb	r3, [r3, #0]
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	2b0b      	cmp	r3, #11
 8007afa:	d10a      	bne.n	8007b12 <USBH_HandleSof+0x28>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d005      	beq.n	8007b12 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b0c:	699b      	ldr	r3, [r3, #24]
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	4798      	blx	r3
  }
}
 8007b12:	bf00      	nop
 8007b14:	3708      	adds	r7, #8
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}

08007b1a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007b1a:	b480      	push	{r7}
 8007b1c:	b083      	sub	sp, #12
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2201      	movs	r2, #1
 8007b26:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007b2a:	bf00      	nop
}
 8007b2c:	370c      	adds	r7, #12
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b34:	4770      	bx	lr

08007b36 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007b36:	b480      	push	{r7}
 8007b38:	b083      	sub	sp, #12
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2200      	movs	r2, #0
 8007b42:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007b46:	bf00      	nop
}
 8007b48:	370c      	adds	r7, #12
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr

08007b52 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007b52:	b480      	push	{r7}
 8007b54:	b083      	sub	sp, #12
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007b72:	2300      	movs	r3, #0
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	370c      	adds	r7, #12
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr

08007b80 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b082      	sub	sp, #8
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2200      	movs	r2, #0
 8007b94:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f001 f8a0 	bl	8008ce6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	791b      	ldrb	r3, [r3, #4]
 8007baa:	4619      	mov	r1, r3
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 fe91 	bl	80088d4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	795b      	ldrb	r3, [r3, #5]
 8007bb6:	4619      	mov	r1, r3
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f000 fe8b 	bl	80088d4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007bbe:	2300      	movs	r3, #0
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3708      	adds	r7, #8
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b086      	sub	sp, #24
 8007bcc:	af02      	add	r7, sp, #8
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	460b      	mov	r3, r1
 8007bd2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007bda:	78fb      	ldrb	r3, [r7, #3]
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	9300      	str	r3, [sp, #0]
 8007be0:	4613      	mov	r3, r2
 8007be2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007be6:	2100      	movs	r1, #0
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 f864 	bl	8007cb6 <USBH_GetDescriptor>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8007bf2:	7bfb      	ldrb	r3, [r7, #15]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d10a      	bne.n	8007c0e <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007c04:	78fa      	ldrb	r2, [r7, #3]
 8007c06:	b292      	uxth	r2, r2
 8007c08:	4619      	mov	r1, r3
 8007c0a:	f000 f918 	bl	8007e3e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3710      	adds	r7, #16
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}

08007c18 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b086      	sub	sp, #24
 8007c1c:	af02      	add	r7, sp, #8
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	460b      	mov	r3, r1
 8007c22:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	331c      	adds	r3, #28
 8007c28:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007c2a:	887b      	ldrh	r3, [r7, #2]
 8007c2c:	9300      	str	r3, [sp, #0]
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c34:	2100      	movs	r1, #0
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 f83d 	bl	8007cb6 <USBH_GetDescriptor>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007c40:	7bfb      	ldrb	r3, [r7, #15]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d107      	bne.n	8007c56 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007c46:	887b      	ldrh	r3, [r7, #2]
 8007c48:	461a      	mov	r2, r3
 8007c4a:	68b9      	ldr	r1, [r7, #8]
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 f987 	bl	8007f60 <USBH_ParseCfgDesc>
 8007c52:	4603      	mov	r3, r0
 8007c54:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3710      	adds	r7, #16
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b088      	sub	sp, #32
 8007c64:	af02      	add	r7, sp, #8
 8007c66:	60f8      	str	r0, [r7, #12]
 8007c68:	607a      	str	r2, [r7, #4]
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	460b      	mov	r3, r1
 8007c6e:	72fb      	strb	r3, [r7, #11]
 8007c70:	4613      	mov	r3, r2
 8007c72:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007c74:	7afb      	ldrb	r3, [r7, #11]
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007c7c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007c84:	893b      	ldrh	r3, [r7, #8]
 8007c86:	9300      	str	r3, [sp, #0]
 8007c88:	460b      	mov	r3, r1
 8007c8a:	2100      	movs	r1, #0
 8007c8c:	68f8      	ldr	r0, [r7, #12]
 8007c8e:	f000 f812 	bl	8007cb6 <USBH_GetDescriptor>
 8007c92:	4603      	mov	r3, r0
 8007c94:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007c96:	7dfb      	ldrb	r3, [r7, #23]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d107      	bne.n	8007cac <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007ca2:	893a      	ldrh	r2, [r7, #8]
 8007ca4:	6879      	ldr	r1, [r7, #4]
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f000 fb24 	bl	80082f4 <USBH_ParseStringDesc>
  }

  return status;
 8007cac:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3718      	adds	r7, #24
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}

08007cb6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007cb6:	b580      	push	{r7, lr}
 8007cb8:	b084      	sub	sp, #16
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	60f8      	str	r0, [r7, #12]
 8007cbe:	607b      	str	r3, [r7, #4]
 8007cc0:	460b      	mov	r3, r1
 8007cc2:	72fb      	strb	r3, [r7, #11]
 8007cc4:	4613      	mov	r3, r2
 8007cc6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	789b      	ldrb	r3, [r3, #2]
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d11c      	bne.n	8007d0a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007cd0:	7afb      	ldrb	r3, [r7, #11]
 8007cd2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007cd6:	b2da      	uxtb	r2, r3
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2206      	movs	r2, #6
 8007ce0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	893a      	ldrh	r2, [r7, #8]
 8007ce6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007ce8:	893b      	ldrh	r3, [r7, #8]
 8007cea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007cee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cf2:	d104      	bne.n	8007cfe <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f240 4209 	movw	r2, #1033	; 0x409
 8007cfa:	829a      	strh	r2, [r3, #20]
 8007cfc:	e002      	b.n	8007d04 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2200      	movs	r2, #0
 8007d02:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	8b3a      	ldrh	r2, [r7, #24]
 8007d08:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007d0a:	8b3b      	ldrh	r3, [r7, #24]
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	6879      	ldr	r1, [r7, #4]
 8007d10:	68f8      	ldr	r0, [r7, #12]
 8007d12:	f000 fb3d 	bl	8008390 <USBH_CtlReq>
 8007d16:	4603      	mov	r3, r0
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3710      	adds	r7, #16
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b082      	sub	sp, #8
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	460b      	mov	r3, r1
 8007d2a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	789b      	ldrb	r3, [r3, #2]
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d10f      	bne.n	8007d54 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2200      	movs	r2, #0
 8007d38:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2205      	movs	r2, #5
 8007d3e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007d40:	78fb      	ldrb	r3, [r7, #3]
 8007d42:	b29a      	uxth	r2, r3
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2200      	movs	r2, #0
 8007d52:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007d54:	2200      	movs	r2, #0
 8007d56:	2100      	movs	r1, #0
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 fb19 	bl	8008390 <USBH_CtlReq>
 8007d5e:	4603      	mov	r3, r0
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3708      	adds	r7, #8
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}

08007d68 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b082      	sub	sp, #8
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	460b      	mov	r3, r1
 8007d72:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	789b      	ldrb	r3, [r3, #2]
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d10e      	bne.n	8007d9a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2209      	movs	r2, #9
 8007d86:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	887a      	ldrh	r2, [r7, #2]
 8007d8c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2200      	movs	r2, #0
 8007d92:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2200      	movs	r2, #0
 8007d98:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	2100      	movs	r1, #0
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 faf6 	bl	8008390 <USBH_CtlReq>
 8007da4:	4603      	mov	r3, r0
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3708      	adds	r7, #8
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}

08007dae <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007dae:	b580      	push	{r7, lr}
 8007db0:	b082      	sub	sp, #8
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	6078      	str	r0, [r7, #4]
 8007db6:	460b      	mov	r3, r1
 8007db8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	789b      	ldrb	r3, [r3, #2]
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d10f      	bne.n	8007de2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2203      	movs	r2, #3
 8007dcc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007dce:	78fb      	ldrb	r3, [r7, #3]
 8007dd0:	b29a      	uxth	r2, r3
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2200      	movs	r2, #0
 8007de0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007de2:	2200      	movs	r2, #0
 8007de4:	2100      	movs	r1, #0
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 fad2 	bl	8008390 <USBH_CtlReq>
 8007dec:	4603      	mov	r3, r0
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3708      	adds	r7, #8
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}

08007df6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007df6:	b580      	push	{r7, lr}
 8007df8:	b082      	sub	sp, #8
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
 8007dfe:	460b      	mov	r3, r1
 8007e00:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	789b      	ldrb	r3, [r3, #2]
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	d10f      	bne.n	8007e2a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2202      	movs	r2, #2
 8007e0e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2201      	movs	r2, #1
 8007e14:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007e1c:	78fb      	ldrb	r3, [r7, #3]
 8007e1e:	b29a      	uxth	r2, r3
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2200      	movs	r2, #0
 8007e28:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	2100      	movs	r1, #0
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 faae 	bl	8008390 <USBH_CtlReq>
 8007e34:	4603      	mov	r3, r0
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3708      	adds	r7, #8
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}

08007e3e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007e3e:	b480      	push	{r7}
 8007e40:	b085      	sub	sp, #20
 8007e42:	af00      	add	r7, sp, #0
 8007e44:	60f8      	str	r0, [r7, #12]
 8007e46:	60b9      	str	r1, [r7, #8]
 8007e48:	4613      	mov	r3, r2
 8007e4a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	781a      	ldrb	r2, [r3, #0]
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	785a      	ldrb	r2, [r3, #1]
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	3302      	adds	r3, #2
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	b29a      	uxth	r2, r3
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	3303      	adds	r3, #3
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	021b      	lsls	r3, r3, #8
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	4313      	orrs	r3, r2
 8007e72:	b29a      	uxth	r2, r3
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	791a      	ldrb	r2, [r3, #4]
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	795a      	ldrb	r2, [r3, #5]
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	799a      	ldrb	r2, [r3, #6]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	79da      	ldrb	r2, [r3, #7]
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	79db      	ldrb	r3, [r3, #7]
 8007e9c:	2b20      	cmp	r3, #32
 8007e9e:	dc11      	bgt.n	8007ec4 <USBH_ParseDevDesc+0x86>
 8007ea0:	2b08      	cmp	r3, #8
 8007ea2:	db16      	blt.n	8007ed2 <USBH_ParseDevDesc+0x94>
 8007ea4:	3b08      	subs	r3, #8
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8007eac:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8007eb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	bf14      	ite	ne
 8007eb8:	2301      	movne	r3, #1
 8007eba:	2300      	moveq	r3, #0
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d102      	bne.n	8007ec8 <USBH_ParseDevDesc+0x8a>
 8007ec2:	e006      	b.n	8007ed2 <USBH_ParseDevDesc+0x94>
 8007ec4:	2b40      	cmp	r3, #64	; 0x40
 8007ec6:	d104      	bne.n	8007ed2 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	79da      	ldrb	r2, [r3, #7]
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	71da      	strb	r2, [r3, #7]
      break;
 8007ed0:	e003      	b.n	8007eda <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2240      	movs	r2, #64	; 0x40
 8007ed6:	71da      	strb	r2, [r3, #7]
      break;
 8007ed8:	bf00      	nop
  }

  if (length > 8U)
 8007eda:	88fb      	ldrh	r3, [r7, #6]
 8007edc:	2b08      	cmp	r3, #8
 8007ede:	d939      	bls.n	8007f54 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	3308      	adds	r3, #8
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	b29a      	uxth	r2, r3
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	3309      	adds	r3, #9
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	021b      	lsls	r3, r3, #8
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	b29a      	uxth	r2, r3
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	330a      	adds	r3, #10
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	b29a      	uxth	r2, r3
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	330b      	adds	r3, #11
 8007f08:	781b      	ldrb	r3, [r3, #0]
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	021b      	lsls	r3, r3, #8
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	4313      	orrs	r3, r2
 8007f12:	b29a      	uxth	r2, r3
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	330c      	adds	r3, #12
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	b29a      	uxth	r2, r3
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	330d      	adds	r3, #13
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	021b      	lsls	r3, r3, #8
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	b29a      	uxth	r2, r3
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	7b9a      	ldrb	r2, [r3, #14]
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	7bda      	ldrb	r2, [r3, #15]
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	7c1a      	ldrb	r2, [r3, #16]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	7c5a      	ldrb	r2, [r3, #17]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	745a      	strb	r2, [r3, #17]
  }
}
 8007f54:	bf00      	nop
 8007f56:	3714      	adds	r7, #20
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr

08007f60 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b08c      	sub	sp, #48	; 0x30
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	60f8      	str	r0, [r7, #12]
 8007f68:	60b9      	str	r1, [r7, #8]
 8007f6a:	4613      	mov	r3, r2
 8007f6c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007f74:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007f76:	2300      	movs	r3, #0
 8007f78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007f80:	2300      	movs	r3, #0
 8007f82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007f86:	2300      	movs	r3, #0
 8007f88:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	781a      	ldrb	r2, [r3, #0]
 8007f94:	6a3b      	ldr	r3, [r7, #32]
 8007f96:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	785a      	ldrb	r2, [r3, #1]
 8007f9c:	6a3b      	ldr	r3, [r7, #32]
 8007f9e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	3302      	adds	r3, #2
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	b29a      	uxth	r2, r3
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	3303      	adds	r3, #3
 8007fac:	781b      	ldrb	r3, [r3, #0]
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	021b      	lsls	r3, r3, #8
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fbc:	bf28      	it	cs
 8007fbe:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007fc2:	b29a      	uxth	r2, r3
 8007fc4:	6a3b      	ldr	r3, [r7, #32]
 8007fc6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	791a      	ldrb	r2, [r3, #4]
 8007fcc:	6a3b      	ldr	r3, [r7, #32]
 8007fce:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	795a      	ldrb	r2, [r3, #5]
 8007fd4:	6a3b      	ldr	r3, [r7, #32]
 8007fd6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	799a      	ldrb	r2, [r3, #6]
 8007fdc:	6a3b      	ldr	r3, [r7, #32]
 8007fde:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	79da      	ldrb	r2, [r3, #7]
 8007fe4:	6a3b      	ldr	r3, [r7, #32]
 8007fe6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	7a1a      	ldrb	r2, [r3, #8]
 8007fec:	6a3b      	ldr	r3, [r7, #32]
 8007fee:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007ff0:	6a3b      	ldr	r3, [r7, #32]
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	2b09      	cmp	r3, #9
 8007ff6:	d002      	beq.n	8007ffe <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007ff8:	6a3b      	ldr	r3, [r7, #32]
 8007ffa:	2209      	movs	r2, #9
 8007ffc:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007ffe:	88fb      	ldrh	r3, [r7, #6]
 8008000:	2b09      	cmp	r3, #9
 8008002:	f240 809d 	bls.w	8008140 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8008006:	2309      	movs	r3, #9
 8008008:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800800a:	2300      	movs	r3, #0
 800800c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800800e:	e081      	b.n	8008114 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008010:	f107 0316 	add.w	r3, r7, #22
 8008014:	4619      	mov	r1, r3
 8008016:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008018:	f000 f99f 	bl	800835a <USBH_GetNextDesc>
 800801c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800801e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008020:	785b      	ldrb	r3, [r3, #1]
 8008022:	2b04      	cmp	r3, #4
 8008024:	d176      	bne.n	8008114 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008028:	781b      	ldrb	r3, [r3, #0]
 800802a:	2b09      	cmp	r3, #9
 800802c:	d002      	beq.n	8008034 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800802e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008030:	2209      	movs	r2, #9
 8008032:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008034:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008038:	221a      	movs	r2, #26
 800803a:	fb02 f303 	mul.w	r3, r2, r3
 800803e:	3308      	adds	r3, #8
 8008040:	6a3a      	ldr	r2, [r7, #32]
 8008042:	4413      	add	r3, r2
 8008044:	3302      	adds	r3, #2
 8008046:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008048:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800804a:	69f8      	ldr	r0, [r7, #28]
 800804c:	f000 f87e 	bl	800814c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008050:	2300      	movs	r3, #0
 8008052:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008056:	2300      	movs	r3, #0
 8008058:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800805a:	e043      	b.n	80080e4 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800805c:	f107 0316 	add.w	r3, r7, #22
 8008060:	4619      	mov	r1, r3
 8008062:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008064:	f000 f979 	bl	800835a <USBH_GetNextDesc>
 8008068:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800806a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800806c:	785b      	ldrb	r3, [r3, #1]
 800806e:	2b05      	cmp	r3, #5
 8008070:	d138      	bne.n	80080e4 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8008072:	69fb      	ldr	r3, [r7, #28]
 8008074:	795b      	ldrb	r3, [r3, #5]
 8008076:	2b01      	cmp	r3, #1
 8008078:	d10f      	bne.n	800809a <USBH_ParseCfgDesc+0x13a>
 800807a:	69fb      	ldr	r3, [r7, #28]
 800807c:	799b      	ldrb	r3, [r3, #6]
 800807e:	2b02      	cmp	r3, #2
 8008080:	d10b      	bne.n	800809a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008082:	69fb      	ldr	r3, [r7, #28]
 8008084:	79db      	ldrb	r3, [r3, #7]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d10f      	bne.n	80080aa <USBH_ParseCfgDesc+0x14a>
 800808a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	2b09      	cmp	r3, #9
 8008090:	d00b      	beq.n	80080aa <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8008092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008094:	2209      	movs	r2, #9
 8008096:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008098:	e007      	b.n	80080aa <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800809a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	2b07      	cmp	r3, #7
 80080a0:	d004      	beq.n	80080ac <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80080a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080a4:	2207      	movs	r2, #7
 80080a6:	701a      	strb	r2, [r3, #0]
 80080a8:	e000      	b.n	80080ac <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80080aa:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80080ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80080b0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80080b4:	3201      	adds	r2, #1
 80080b6:	00d2      	lsls	r2, r2, #3
 80080b8:	211a      	movs	r1, #26
 80080ba:	fb01 f303 	mul.w	r3, r1, r3
 80080be:	4413      	add	r3, r2
 80080c0:	3308      	adds	r3, #8
 80080c2:	6a3a      	ldr	r2, [r7, #32]
 80080c4:	4413      	add	r3, r2
 80080c6:	3304      	adds	r3, #4
 80080c8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80080ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080cc:	69b9      	ldr	r1, [r7, #24]
 80080ce:	68f8      	ldr	r0, [r7, #12]
 80080d0:	f000 f86b 	bl	80081aa <USBH_ParseEPDesc>
 80080d4:	4603      	mov	r3, r0
 80080d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 80080da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80080de:	3301      	adds	r3, #1
 80080e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80080e4:	69fb      	ldr	r3, [r7, #28]
 80080e6:	791b      	ldrb	r3, [r3, #4]
 80080e8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d204      	bcs.n	80080fa <USBH_ParseCfgDesc+0x19a>
 80080f0:	6a3b      	ldr	r3, [r7, #32]
 80080f2:	885a      	ldrh	r2, [r3, #2]
 80080f4:	8afb      	ldrh	r3, [r7, #22]
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d8b0      	bhi.n	800805c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80080fa:	69fb      	ldr	r3, [r7, #28]
 80080fc:	791b      	ldrb	r3, [r3, #4]
 80080fe:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008102:	429a      	cmp	r2, r3
 8008104:	d201      	bcs.n	800810a <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8008106:	2303      	movs	r3, #3
 8008108:	e01c      	b.n	8008144 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800810a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800810e:	3301      	adds	r3, #1
 8008110:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008114:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008118:	2b01      	cmp	r3, #1
 800811a:	d805      	bhi.n	8008128 <USBH_ParseCfgDesc+0x1c8>
 800811c:	6a3b      	ldr	r3, [r7, #32]
 800811e:	885a      	ldrh	r2, [r3, #2]
 8008120:	8afb      	ldrh	r3, [r7, #22]
 8008122:	429a      	cmp	r2, r3
 8008124:	f63f af74 	bhi.w	8008010 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008128:	6a3b      	ldr	r3, [r7, #32]
 800812a:	791b      	ldrb	r3, [r3, #4]
 800812c:	2b02      	cmp	r3, #2
 800812e:	bf28      	it	cs
 8008130:	2302      	movcs	r3, #2
 8008132:	b2db      	uxtb	r3, r3
 8008134:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008138:	429a      	cmp	r2, r3
 800813a:	d201      	bcs.n	8008140 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800813c:	2303      	movs	r3, #3
 800813e:	e001      	b.n	8008144 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8008140:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008144:	4618      	mov	r0, r3
 8008146:	3730      	adds	r7, #48	; 0x30
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}

0800814c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800814c:	b480      	push	{r7}
 800814e:	b083      	sub	sp, #12
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	781a      	ldrb	r2, [r3, #0]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	785a      	ldrb	r2, [r3, #1]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	789a      	ldrb	r2, [r3, #2]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	78da      	ldrb	r2, [r3, #3]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	791a      	ldrb	r2, [r3, #4]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	795a      	ldrb	r2, [r3, #5]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	799a      	ldrb	r2, [r3, #6]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	79da      	ldrb	r2, [r3, #7]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	7a1a      	ldrb	r2, [r3, #8]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	721a      	strb	r2, [r3, #8]
}
 800819e:	bf00      	nop
 80081a0:	370c      	adds	r7, #12
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr

080081aa <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 80081aa:	b480      	push	{r7}
 80081ac:	b087      	sub	sp, #28
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	60f8      	str	r0, [r7, #12]
 80081b2:	60b9      	str	r1, [r7, #8]
 80081b4:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80081b6:	2300      	movs	r3, #0
 80081b8:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	781a      	ldrb	r2, [r3, #0]
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	785a      	ldrb	r2, [r3, #1]
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	789a      	ldrb	r2, [r3, #2]
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	78da      	ldrb	r2, [r3, #3]
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	3304      	adds	r3, #4
 80081de:	781b      	ldrb	r3, [r3, #0]
 80081e0:	b29a      	uxth	r2, r3
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	3305      	adds	r3, #5
 80081e6:	781b      	ldrb	r3, [r3, #0]
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	021b      	lsls	r3, r3, #8
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	4313      	orrs	r3, r2
 80081f0:	b29a      	uxth	r2, r3
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	799a      	ldrb	r2, [r3, #6]
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	889b      	ldrh	r3, [r3, #4]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d102      	bne.n	800820c <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8008206:	2303      	movs	r3, #3
 8008208:	75fb      	strb	r3, [r7, #23]
 800820a:	e033      	b.n	8008274 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	889b      	ldrh	r3, [r3, #4]
 8008210:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008214:	f023 0307 	bic.w	r3, r3, #7
 8008218:	b29a      	uxth	r2, r3
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	889b      	ldrh	r3, [r3, #4]
 8008222:	b21a      	sxth	r2, r3
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	3304      	adds	r3, #4
 8008228:	781b      	ldrb	r3, [r3, #0]
 800822a:	b299      	uxth	r1, r3
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	3305      	adds	r3, #5
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	b29b      	uxth	r3, r3
 8008234:	021b      	lsls	r3, r3, #8
 8008236:	b29b      	uxth	r3, r3
 8008238:	430b      	orrs	r3, r1
 800823a:	b29b      	uxth	r3, r3
 800823c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008240:	2b00      	cmp	r3, #0
 8008242:	d110      	bne.n	8008266 <USBH_ParseEPDesc+0xbc>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	3304      	adds	r3, #4
 8008248:	781b      	ldrb	r3, [r3, #0]
 800824a:	b299      	uxth	r1, r3
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	3305      	adds	r3, #5
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	b29b      	uxth	r3, r3
 8008254:	021b      	lsls	r3, r3, #8
 8008256:	b29b      	uxth	r3, r3
 8008258:	430b      	orrs	r3, r1
 800825a:	b29b      	uxth	r3, r3
 800825c:	b21b      	sxth	r3, r3
 800825e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008262:	b21b      	sxth	r3, r3
 8008264:	e001      	b.n	800826a <USBH_ParseEPDesc+0xc0>
 8008266:	f44f 7300 	mov.w	r3, #512	; 0x200
 800826a:	4313      	orrs	r3, r2
 800826c:	b21b      	sxth	r3, r3
 800826e:	b29a      	uxth	r2, r3
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800827a:	2b00      	cmp	r3, #0
 800827c:	d116      	bne.n	80082ac <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	78db      	ldrb	r3, [r3, #3]
 8008282:	f003 0303 	and.w	r3, r3, #3
 8008286:	2b01      	cmp	r3, #1
 8008288:	d005      	beq.n	8008296 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	78db      	ldrb	r3, [r3, #3]
 800828e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008292:	2b03      	cmp	r3, #3
 8008294:	d127      	bne.n	80082e6 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	799b      	ldrb	r3, [r3, #6]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d003      	beq.n	80082a6 <USBH_ParseEPDesc+0xfc>
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	799b      	ldrb	r3, [r3, #6]
 80082a2:	2b10      	cmp	r3, #16
 80082a4:	d91f      	bls.n	80082e6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80082a6:	2303      	movs	r3, #3
 80082a8:	75fb      	strb	r3, [r7, #23]
 80082aa:	e01c      	b.n	80082e6 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	78db      	ldrb	r3, [r3, #3]
 80082b0:	f003 0303 	and.w	r3, r3, #3
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d10a      	bne.n	80082ce <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	799b      	ldrb	r3, [r3, #6]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d003      	beq.n	80082c8 <USBH_ParseEPDesc+0x11e>
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	799b      	ldrb	r3, [r3, #6]
 80082c4:	2b10      	cmp	r3, #16
 80082c6:	d90e      	bls.n	80082e6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80082c8:	2303      	movs	r3, #3
 80082ca:	75fb      	strb	r3, [r7, #23]
 80082cc:	e00b      	b.n	80082e6 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	78db      	ldrb	r3, [r3, #3]
 80082d2:	f003 0303 	and.w	r3, r3, #3
 80082d6:	2b03      	cmp	r3, #3
 80082d8:	d105      	bne.n	80082e6 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	799b      	ldrb	r3, [r3, #6]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d101      	bne.n	80082e6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80082e2:	2303      	movs	r3, #3
 80082e4:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 80082e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	371c      	adds	r7, #28
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr

080082f4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b087      	sub	sp, #28
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	60f8      	str	r0, [r7, #12]
 80082fc:	60b9      	str	r1, [r7, #8]
 80082fe:	4613      	mov	r3, r2
 8008300:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	3301      	adds	r3, #1
 8008306:	781b      	ldrb	r3, [r3, #0]
 8008308:	2b03      	cmp	r3, #3
 800830a:	d120      	bne.n	800834e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	1e9a      	subs	r2, r3, #2
 8008312:	88fb      	ldrh	r3, [r7, #6]
 8008314:	4293      	cmp	r3, r2
 8008316:	bf28      	it	cs
 8008318:	4613      	movcs	r3, r2
 800831a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	3302      	adds	r3, #2
 8008320:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008322:	2300      	movs	r3, #0
 8008324:	82fb      	strh	r3, [r7, #22]
 8008326:	e00b      	b.n	8008340 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008328:	8afb      	ldrh	r3, [r7, #22]
 800832a:	68fa      	ldr	r2, [r7, #12]
 800832c:	4413      	add	r3, r2
 800832e:	781a      	ldrb	r2, [r3, #0]
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	3301      	adds	r3, #1
 8008338:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800833a:	8afb      	ldrh	r3, [r7, #22]
 800833c:	3302      	adds	r3, #2
 800833e:	82fb      	strh	r3, [r7, #22]
 8008340:	8afa      	ldrh	r2, [r7, #22]
 8008342:	8abb      	ldrh	r3, [r7, #20]
 8008344:	429a      	cmp	r2, r3
 8008346:	d3ef      	bcc.n	8008328 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	2200      	movs	r2, #0
 800834c:	701a      	strb	r2, [r3, #0]
  }
}
 800834e:	bf00      	nop
 8008350:	371c      	adds	r7, #28
 8008352:	46bd      	mov	sp, r7
 8008354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008358:	4770      	bx	lr

0800835a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800835a:	b480      	push	{r7}
 800835c:	b085      	sub	sp, #20
 800835e:	af00      	add	r7, sp, #0
 8008360:	6078      	str	r0, [r7, #4]
 8008362:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	881a      	ldrh	r2, [r3, #0]
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	781b      	ldrb	r3, [r3, #0]
 800836c:	b29b      	uxth	r3, r3
 800836e:	4413      	add	r3, r2
 8008370:	b29a      	uxth	r2, r3
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	781b      	ldrb	r3, [r3, #0]
 800837a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	4413      	add	r3, r2
 8008380:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008382:	68fb      	ldr	r3, [r7, #12]
}
 8008384:	4618      	mov	r0, r3
 8008386:	3714      	adds	r7, #20
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr

08008390 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b086      	sub	sp, #24
 8008394:	af00      	add	r7, sp, #0
 8008396:	60f8      	str	r0, [r7, #12]
 8008398:	60b9      	str	r1, [r7, #8]
 800839a:	4613      	mov	r3, r2
 800839c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800839e:	2301      	movs	r3, #1
 80083a0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	789b      	ldrb	r3, [r3, #2]
 80083a6:	2b01      	cmp	r3, #1
 80083a8:	d002      	beq.n	80083b0 <USBH_CtlReq+0x20>
 80083aa:	2b02      	cmp	r3, #2
 80083ac:	d00f      	beq.n	80083ce <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80083ae:	e027      	b.n	8008400 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	68ba      	ldr	r2, [r7, #8]
 80083b4:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	88fa      	ldrh	r2, [r7, #6]
 80083ba:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2201      	movs	r2, #1
 80083c0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2202      	movs	r2, #2
 80083c6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80083c8:	2301      	movs	r3, #1
 80083ca:	75fb      	strb	r3, [r7, #23]
      break;
 80083cc:	e018      	b.n	8008400 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80083ce:	68f8      	ldr	r0, [r7, #12]
 80083d0:	f000 f81c 	bl	800840c <USBH_HandleControl>
 80083d4:	4603      	mov	r3, r0
 80083d6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80083d8:	7dfb      	ldrb	r3, [r7, #23]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d002      	beq.n	80083e4 <USBH_CtlReq+0x54>
 80083de:	7dfb      	ldrb	r3, [r7, #23]
 80083e0:	2b03      	cmp	r3, #3
 80083e2:	d106      	bne.n	80083f2 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2201      	movs	r2, #1
 80083e8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	2200      	movs	r2, #0
 80083ee:	761a      	strb	r2, [r3, #24]
      break;
 80083f0:	e005      	b.n	80083fe <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80083f2:	7dfb      	ldrb	r3, [r7, #23]
 80083f4:	2b02      	cmp	r3, #2
 80083f6:	d102      	bne.n	80083fe <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2201      	movs	r2, #1
 80083fc:	709a      	strb	r2, [r3, #2]
      break;
 80083fe:	bf00      	nop
  }
  return status;
 8008400:	7dfb      	ldrb	r3, [r7, #23]
}
 8008402:	4618      	mov	r0, r3
 8008404:	3718      	adds	r7, #24
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
	...

0800840c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b086      	sub	sp, #24
 8008410:	af02      	add	r7, sp, #8
 8008412:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008414:	2301      	movs	r3, #1
 8008416:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008418:	2300      	movs	r3, #0
 800841a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	7e1b      	ldrb	r3, [r3, #24]
 8008420:	3b01      	subs	r3, #1
 8008422:	2b0a      	cmp	r3, #10
 8008424:	f200 8156 	bhi.w	80086d4 <USBH_HandleControl+0x2c8>
 8008428:	a201      	add	r2, pc, #4	; (adr r2, 8008430 <USBH_HandleControl+0x24>)
 800842a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800842e:	bf00      	nop
 8008430:	0800845d 	.word	0x0800845d
 8008434:	08008477 	.word	0x08008477
 8008438:	080084e1 	.word	0x080084e1
 800843c:	08008507 	.word	0x08008507
 8008440:	0800853f 	.word	0x0800853f
 8008444:	08008569 	.word	0x08008569
 8008448:	080085bb 	.word	0x080085bb
 800844c:	080085dd 	.word	0x080085dd
 8008450:	08008619 	.word	0x08008619
 8008454:	0800863f 	.word	0x0800863f
 8008458:	0800867d 	.word	0x0800867d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f103 0110 	add.w	r1, r3, #16
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	795b      	ldrb	r3, [r3, #5]
 8008466:	461a      	mov	r2, r3
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f000 f943 	bl	80086f4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2202      	movs	r2, #2
 8008472:	761a      	strb	r2, [r3, #24]
      break;
 8008474:	e139      	b.n	80086ea <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	795b      	ldrb	r3, [r3, #5]
 800847a:	4619      	mov	r1, r3
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f000 fd21 	bl	8008ec4 <USBH_LL_GetURBState>
 8008482:	4603      	mov	r3, r0
 8008484:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008486:	7bbb      	ldrb	r3, [r7, #14]
 8008488:	2b01      	cmp	r3, #1
 800848a:	d11e      	bne.n	80084ca <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	7c1b      	ldrb	r3, [r3, #16]
 8008490:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008494:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	8adb      	ldrh	r3, [r3, #22]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d00a      	beq.n	80084b4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800849e:	7b7b      	ldrb	r3, [r7, #13]
 80084a0:	2b80      	cmp	r3, #128	; 0x80
 80084a2:	d103      	bne.n	80084ac <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2203      	movs	r2, #3
 80084a8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80084aa:	e115      	b.n	80086d8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2205      	movs	r2, #5
 80084b0:	761a      	strb	r2, [r3, #24]
      break;
 80084b2:	e111      	b.n	80086d8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80084b4:	7b7b      	ldrb	r3, [r7, #13]
 80084b6:	2b80      	cmp	r3, #128	; 0x80
 80084b8:	d103      	bne.n	80084c2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2209      	movs	r2, #9
 80084be:	761a      	strb	r2, [r3, #24]
      break;
 80084c0:	e10a      	b.n	80086d8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2207      	movs	r2, #7
 80084c6:	761a      	strb	r2, [r3, #24]
      break;
 80084c8:	e106      	b.n	80086d8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80084ca:	7bbb      	ldrb	r3, [r7, #14]
 80084cc:	2b04      	cmp	r3, #4
 80084ce:	d003      	beq.n	80084d8 <USBH_HandleControl+0xcc>
 80084d0:	7bbb      	ldrb	r3, [r7, #14]
 80084d2:	2b02      	cmp	r3, #2
 80084d4:	f040 8100 	bne.w	80086d8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	220b      	movs	r2, #11
 80084dc:	761a      	strb	r2, [r3, #24]
      break;
 80084de:	e0fb      	b.n	80086d8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80084e6:	b29a      	uxth	r2, r3
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6899      	ldr	r1, [r3, #8]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	899a      	ldrh	r2, [r3, #12]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	791b      	ldrb	r3, [r3, #4]
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f000 f93a 	bl	8008772 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2204      	movs	r2, #4
 8008502:	761a      	strb	r2, [r3, #24]
      break;
 8008504:	e0f1      	b.n	80086ea <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	791b      	ldrb	r3, [r3, #4]
 800850a:	4619      	mov	r1, r3
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f000 fcd9 	bl	8008ec4 <USBH_LL_GetURBState>
 8008512:	4603      	mov	r3, r0
 8008514:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008516:	7bbb      	ldrb	r3, [r7, #14]
 8008518:	2b01      	cmp	r3, #1
 800851a:	d102      	bne.n	8008522 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2209      	movs	r2, #9
 8008520:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008522:	7bbb      	ldrb	r3, [r7, #14]
 8008524:	2b05      	cmp	r3, #5
 8008526:	d102      	bne.n	800852e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008528:	2303      	movs	r3, #3
 800852a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800852c:	e0d6      	b.n	80086dc <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800852e:	7bbb      	ldrb	r3, [r7, #14]
 8008530:	2b04      	cmp	r3, #4
 8008532:	f040 80d3 	bne.w	80086dc <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	220b      	movs	r2, #11
 800853a:	761a      	strb	r2, [r3, #24]
      break;
 800853c:	e0ce      	b.n	80086dc <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6899      	ldr	r1, [r3, #8]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	899a      	ldrh	r2, [r3, #12]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	795b      	ldrb	r3, [r3, #5]
 800854a:	2001      	movs	r0, #1
 800854c:	9000      	str	r0, [sp, #0]
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f000 f8ea 	bl	8008728 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800855a:	b29a      	uxth	r2, r3
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2206      	movs	r2, #6
 8008564:	761a      	strb	r2, [r3, #24]
      break;
 8008566:	e0c0      	b.n	80086ea <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	795b      	ldrb	r3, [r3, #5]
 800856c:	4619      	mov	r1, r3
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f000 fca8 	bl	8008ec4 <USBH_LL_GetURBState>
 8008574:	4603      	mov	r3, r0
 8008576:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008578:	7bbb      	ldrb	r3, [r7, #14]
 800857a:	2b01      	cmp	r3, #1
 800857c:	d103      	bne.n	8008586 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2207      	movs	r2, #7
 8008582:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008584:	e0ac      	b.n	80086e0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008586:	7bbb      	ldrb	r3, [r7, #14]
 8008588:	2b05      	cmp	r3, #5
 800858a:	d105      	bne.n	8008598 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	220c      	movs	r2, #12
 8008590:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008592:	2303      	movs	r3, #3
 8008594:	73fb      	strb	r3, [r7, #15]
      break;
 8008596:	e0a3      	b.n	80086e0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008598:	7bbb      	ldrb	r3, [r7, #14]
 800859a:	2b02      	cmp	r3, #2
 800859c:	d103      	bne.n	80085a6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2205      	movs	r2, #5
 80085a2:	761a      	strb	r2, [r3, #24]
      break;
 80085a4:	e09c      	b.n	80086e0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80085a6:	7bbb      	ldrb	r3, [r7, #14]
 80085a8:	2b04      	cmp	r3, #4
 80085aa:	f040 8099 	bne.w	80086e0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	220b      	movs	r2, #11
 80085b2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80085b4:	2302      	movs	r3, #2
 80085b6:	73fb      	strb	r3, [r7, #15]
      break;
 80085b8:	e092      	b.n	80086e0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	791b      	ldrb	r3, [r3, #4]
 80085be:	2200      	movs	r2, #0
 80085c0:	2100      	movs	r1, #0
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 f8d5 	bl	8008772 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80085ce:	b29a      	uxth	r2, r3
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2208      	movs	r2, #8
 80085d8:	761a      	strb	r2, [r3, #24]

      break;
 80085da:	e086      	b.n	80086ea <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	791b      	ldrb	r3, [r3, #4]
 80085e0:	4619      	mov	r1, r3
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f000 fc6e 	bl	8008ec4 <USBH_LL_GetURBState>
 80085e8:	4603      	mov	r3, r0
 80085ea:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80085ec:	7bbb      	ldrb	r3, [r7, #14]
 80085ee:	2b01      	cmp	r3, #1
 80085f0:	d105      	bne.n	80085fe <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	220d      	movs	r2, #13
 80085f6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80085f8:	2300      	movs	r3, #0
 80085fa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80085fc:	e072      	b.n	80086e4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80085fe:	7bbb      	ldrb	r3, [r7, #14]
 8008600:	2b04      	cmp	r3, #4
 8008602:	d103      	bne.n	800860c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	220b      	movs	r2, #11
 8008608:	761a      	strb	r2, [r3, #24]
      break;
 800860a:	e06b      	b.n	80086e4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800860c:	7bbb      	ldrb	r3, [r7, #14]
 800860e:	2b05      	cmp	r3, #5
 8008610:	d168      	bne.n	80086e4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008612:	2303      	movs	r3, #3
 8008614:	73fb      	strb	r3, [r7, #15]
      break;
 8008616:	e065      	b.n	80086e4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	795b      	ldrb	r3, [r3, #5]
 800861c:	2201      	movs	r2, #1
 800861e:	9200      	str	r2, [sp, #0]
 8008620:	2200      	movs	r2, #0
 8008622:	2100      	movs	r1, #0
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f000 f87f 	bl	8008728 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008630:	b29a      	uxth	r2, r3
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	220a      	movs	r2, #10
 800863a:	761a      	strb	r2, [r3, #24]
      break;
 800863c:	e055      	b.n	80086ea <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	795b      	ldrb	r3, [r3, #5]
 8008642:	4619      	mov	r1, r3
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f000 fc3d 	bl	8008ec4 <USBH_LL_GetURBState>
 800864a:	4603      	mov	r3, r0
 800864c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800864e:	7bbb      	ldrb	r3, [r7, #14]
 8008650:	2b01      	cmp	r3, #1
 8008652:	d105      	bne.n	8008660 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008654:	2300      	movs	r3, #0
 8008656:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	220d      	movs	r2, #13
 800865c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800865e:	e043      	b.n	80086e8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008660:	7bbb      	ldrb	r3, [r7, #14]
 8008662:	2b02      	cmp	r3, #2
 8008664:	d103      	bne.n	800866e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2209      	movs	r2, #9
 800866a:	761a      	strb	r2, [r3, #24]
      break;
 800866c:	e03c      	b.n	80086e8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800866e:	7bbb      	ldrb	r3, [r7, #14]
 8008670:	2b04      	cmp	r3, #4
 8008672:	d139      	bne.n	80086e8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	220b      	movs	r2, #11
 8008678:	761a      	strb	r2, [r3, #24]
      break;
 800867a:	e035      	b.n	80086e8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	7e5b      	ldrb	r3, [r3, #25]
 8008680:	3301      	adds	r3, #1
 8008682:	b2da      	uxtb	r2, r3
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	765a      	strb	r2, [r3, #25]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	7e5b      	ldrb	r3, [r3, #25]
 800868c:	2b02      	cmp	r3, #2
 800868e:	d806      	bhi.n	800869e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2201      	movs	r2, #1
 8008694:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2201      	movs	r2, #1
 800869a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800869c:	e025      	b.n	80086ea <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80086a4:	2106      	movs	r1, #6
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2200      	movs	r2, #0
 80086ae:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	795b      	ldrb	r3, [r3, #5]
 80086b4:	4619      	mov	r1, r3
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 f90c 	bl	80088d4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	791b      	ldrb	r3, [r3, #4]
 80086c0:	4619      	mov	r1, r3
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f000 f906 	bl	80088d4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2200      	movs	r2, #0
 80086cc:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80086ce:	2302      	movs	r3, #2
 80086d0:	73fb      	strb	r3, [r7, #15]
      break;
 80086d2:	e00a      	b.n	80086ea <USBH_HandleControl+0x2de>

    default:
      break;
 80086d4:	bf00      	nop
 80086d6:	e008      	b.n	80086ea <USBH_HandleControl+0x2de>
      break;
 80086d8:	bf00      	nop
 80086da:	e006      	b.n	80086ea <USBH_HandleControl+0x2de>
      break;
 80086dc:	bf00      	nop
 80086de:	e004      	b.n	80086ea <USBH_HandleControl+0x2de>
      break;
 80086e0:	bf00      	nop
 80086e2:	e002      	b.n	80086ea <USBH_HandleControl+0x2de>
      break;
 80086e4:	bf00      	nop
 80086e6:	e000      	b.n	80086ea <USBH_HandleControl+0x2de>
      break;
 80086e8:	bf00      	nop
  }

  return status;
 80086ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3710      	adds	r7, #16
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}

080086f4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b088      	sub	sp, #32
 80086f8:	af04      	add	r7, sp, #16
 80086fa:	60f8      	str	r0, [r7, #12]
 80086fc:	60b9      	str	r1, [r7, #8]
 80086fe:	4613      	mov	r3, r2
 8008700:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008702:	79f9      	ldrb	r1, [r7, #7]
 8008704:	2300      	movs	r3, #0
 8008706:	9303      	str	r3, [sp, #12]
 8008708:	2308      	movs	r3, #8
 800870a:	9302      	str	r3, [sp, #8]
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	9301      	str	r3, [sp, #4]
 8008710:	2300      	movs	r3, #0
 8008712:	9300      	str	r3, [sp, #0]
 8008714:	2300      	movs	r3, #0
 8008716:	2200      	movs	r2, #0
 8008718:	68f8      	ldr	r0, [r7, #12]
 800871a:	f000 fba2 	bl	8008e62 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800871e:	2300      	movs	r3, #0
}
 8008720:	4618      	mov	r0, r3
 8008722:	3710      	adds	r7, #16
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b088      	sub	sp, #32
 800872c:	af04      	add	r7, sp, #16
 800872e:	60f8      	str	r0, [r7, #12]
 8008730:	60b9      	str	r1, [r7, #8]
 8008732:	4611      	mov	r1, r2
 8008734:	461a      	mov	r2, r3
 8008736:	460b      	mov	r3, r1
 8008738:	80fb      	strh	r3, [r7, #6]
 800873a:	4613      	mov	r3, r2
 800873c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008744:	2b00      	cmp	r3, #0
 8008746:	d001      	beq.n	800874c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008748:	2300      	movs	r3, #0
 800874a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800874c:	7979      	ldrb	r1, [r7, #5]
 800874e:	7e3b      	ldrb	r3, [r7, #24]
 8008750:	9303      	str	r3, [sp, #12]
 8008752:	88fb      	ldrh	r3, [r7, #6]
 8008754:	9302      	str	r3, [sp, #8]
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	9301      	str	r3, [sp, #4]
 800875a:	2301      	movs	r3, #1
 800875c:	9300      	str	r3, [sp, #0]
 800875e:	2300      	movs	r3, #0
 8008760:	2200      	movs	r2, #0
 8008762:	68f8      	ldr	r0, [r7, #12]
 8008764:	f000 fb7d 	bl	8008e62 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008768:	2300      	movs	r3, #0
}
 800876a:	4618      	mov	r0, r3
 800876c:	3710      	adds	r7, #16
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}

08008772 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008772:	b580      	push	{r7, lr}
 8008774:	b088      	sub	sp, #32
 8008776:	af04      	add	r7, sp, #16
 8008778:	60f8      	str	r0, [r7, #12]
 800877a:	60b9      	str	r1, [r7, #8]
 800877c:	4611      	mov	r1, r2
 800877e:	461a      	mov	r2, r3
 8008780:	460b      	mov	r3, r1
 8008782:	80fb      	strh	r3, [r7, #6]
 8008784:	4613      	mov	r3, r2
 8008786:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008788:	7979      	ldrb	r1, [r7, #5]
 800878a:	2300      	movs	r3, #0
 800878c:	9303      	str	r3, [sp, #12]
 800878e:	88fb      	ldrh	r3, [r7, #6]
 8008790:	9302      	str	r3, [sp, #8]
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	9301      	str	r3, [sp, #4]
 8008796:	2301      	movs	r3, #1
 8008798:	9300      	str	r3, [sp, #0]
 800879a:	2300      	movs	r3, #0
 800879c:	2201      	movs	r2, #1
 800879e:	68f8      	ldr	r0, [r7, #12]
 80087a0:	f000 fb5f 	bl	8008e62 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80087a4:	2300      	movs	r3, #0

}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3710      	adds	r7, #16
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}

080087ae <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80087ae:	b580      	push	{r7, lr}
 80087b0:	b088      	sub	sp, #32
 80087b2:	af04      	add	r7, sp, #16
 80087b4:	60f8      	str	r0, [r7, #12]
 80087b6:	60b9      	str	r1, [r7, #8]
 80087b8:	4611      	mov	r1, r2
 80087ba:	461a      	mov	r2, r3
 80087bc:	460b      	mov	r3, r1
 80087be:	80fb      	strh	r3, [r7, #6]
 80087c0:	4613      	mov	r3, r2
 80087c2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d001      	beq.n	80087d2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80087ce:	2300      	movs	r3, #0
 80087d0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80087d2:	7979      	ldrb	r1, [r7, #5]
 80087d4:	7e3b      	ldrb	r3, [r7, #24]
 80087d6:	9303      	str	r3, [sp, #12]
 80087d8:	88fb      	ldrh	r3, [r7, #6]
 80087da:	9302      	str	r3, [sp, #8]
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	9301      	str	r3, [sp, #4]
 80087e0:	2301      	movs	r3, #1
 80087e2:	9300      	str	r3, [sp, #0]
 80087e4:	2302      	movs	r3, #2
 80087e6:	2200      	movs	r2, #0
 80087e8:	68f8      	ldr	r0, [r7, #12]
 80087ea:	f000 fb3a 	bl	8008e62 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80087ee:	2300      	movs	r3, #0
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3710      	adds	r7, #16
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}

080087f8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b088      	sub	sp, #32
 80087fc:	af04      	add	r7, sp, #16
 80087fe:	60f8      	str	r0, [r7, #12]
 8008800:	60b9      	str	r1, [r7, #8]
 8008802:	4611      	mov	r1, r2
 8008804:	461a      	mov	r2, r3
 8008806:	460b      	mov	r3, r1
 8008808:	80fb      	strh	r3, [r7, #6]
 800880a:	4613      	mov	r3, r2
 800880c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800880e:	7979      	ldrb	r1, [r7, #5]
 8008810:	2300      	movs	r3, #0
 8008812:	9303      	str	r3, [sp, #12]
 8008814:	88fb      	ldrh	r3, [r7, #6]
 8008816:	9302      	str	r3, [sp, #8]
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	9301      	str	r3, [sp, #4]
 800881c:	2301      	movs	r3, #1
 800881e:	9300      	str	r3, [sp, #0]
 8008820:	2302      	movs	r3, #2
 8008822:	2201      	movs	r2, #1
 8008824:	68f8      	ldr	r0, [r7, #12]
 8008826:	f000 fb1c 	bl	8008e62 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800882a:	2300      	movs	r3, #0
}
 800882c:	4618      	mov	r0, r3
 800882e:	3710      	adds	r7, #16
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}

08008834 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b086      	sub	sp, #24
 8008838:	af04      	add	r7, sp, #16
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	4608      	mov	r0, r1
 800883e:	4611      	mov	r1, r2
 8008840:	461a      	mov	r2, r3
 8008842:	4603      	mov	r3, r0
 8008844:	70fb      	strb	r3, [r7, #3]
 8008846:	460b      	mov	r3, r1
 8008848:	70bb      	strb	r3, [r7, #2]
 800884a:	4613      	mov	r3, r2
 800884c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800884e:	7878      	ldrb	r0, [r7, #1]
 8008850:	78ba      	ldrb	r2, [r7, #2]
 8008852:	78f9      	ldrb	r1, [r7, #3]
 8008854:	8b3b      	ldrh	r3, [r7, #24]
 8008856:	9302      	str	r3, [sp, #8]
 8008858:	7d3b      	ldrb	r3, [r7, #20]
 800885a:	9301      	str	r3, [sp, #4]
 800885c:	7c3b      	ldrb	r3, [r7, #16]
 800885e:	9300      	str	r3, [sp, #0]
 8008860:	4603      	mov	r3, r0
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 faaf 	bl	8008dc6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008868:	2300      	movs	r3, #0
}
 800886a:	4618      	mov	r0, r3
 800886c:	3708      	adds	r7, #8
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}

08008872 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008872:	b580      	push	{r7, lr}
 8008874:	b082      	sub	sp, #8
 8008876:	af00      	add	r7, sp, #0
 8008878:	6078      	str	r0, [r7, #4]
 800887a:	460b      	mov	r3, r1
 800887c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800887e:	78fb      	ldrb	r3, [r7, #3]
 8008880:	4619      	mov	r1, r3
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 face 	bl	8008e24 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008888:	2300      	movs	r3, #0
}
 800888a:	4618      	mov	r0, r3
 800888c:	3708      	adds	r7, #8
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}

08008892 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008892:	b580      	push	{r7, lr}
 8008894:	b084      	sub	sp, #16
 8008896:	af00      	add	r7, sp, #0
 8008898:	6078      	str	r0, [r7, #4]
 800889a:	460b      	mov	r3, r1
 800889c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f000 f836 	bl	8008910 <USBH_GetFreePipe>
 80088a4:	4603      	mov	r3, r0
 80088a6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80088a8:	89fb      	ldrh	r3, [r7, #14]
 80088aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d00a      	beq.n	80088c8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80088b2:	78fa      	ldrb	r2, [r7, #3]
 80088b4:	89fb      	ldrh	r3, [r7, #14]
 80088b6:	f003 030f 	and.w	r3, r3, #15
 80088ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80088be:	6879      	ldr	r1, [r7, #4]
 80088c0:	33e0      	adds	r3, #224	; 0xe0
 80088c2:	009b      	lsls	r3, r3, #2
 80088c4:	440b      	add	r3, r1
 80088c6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80088c8:	89fb      	ldrh	r3, [r7, #14]
 80088ca:	b2db      	uxtb	r3, r3
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3710      	adds	r7, #16
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b083      	sub	sp, #12
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	460b      	mov	r3, r1
 80088de:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80088e0:	78fb      	ldrb	r3, [r7, #3]
 80088e2:	2b0f      	cmp	r3, #15
 80088e4:	d80d      	bhi.n	8008902 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80088e6:	78fb      	ldrb	r3, [r7, #3]
 80088e8:	687a      	ldr	r2, [r7, #4]
 80088ea:	33e0      	adds	r3, #224	; 0xe0
 80088ec:	009b      	lsls	r3, r3, #2
 80088ee:	4413      	add	r3, r2
 80088f0:	685a      	ldr	r2, [r3, #4]
 80088f2:	78fb      	ldrb	r3, [r7, #3]
 80088f4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80088f8:	6879      	ldr	r1, [r7, #4]
 80088fa:	33e0      	adds	r3, #224	; 0xe0
 80088fc:	009b      	lsls	r3, r3, #2
 80088fe:	440b      	add	r3, r1
 8008900:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008902:	2300      	movs	r3, #0
}
 8008904:	4618      	mov	r0, r3
 8008906:	370c      	adds	r7, #12
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr

08008910 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008910:	b480      	push	{r7}
 8008912:	b085      	sub	sp, #20
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008918:	2300      	movs	r3, #0
 800891a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800891c:	2300      	movs	r3, #0
 800891e:	73fb      	strb	r3, [r7, #15]
 8008920:	e00f      	b.n	8008942 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008922:	7bfb      	ldrb	r3, [r7, #15]
 8008924:	687a      	ldr	r2, [r7, #4]
 8008926:	33e0      	adds	r3, #224	; 0xe0
 8008928:	009b      	lsls	r3, r3, #2
 800892a:	4413      	add	r3, r2
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008932:	2b00      	cmp	r3, #0
 8008934:	d102      	bne.n	800893c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008936:	7bfb      	ldrb	r3, [r7, #15]
 8008938:	b29b      	uxth	r3, r3
 800893a:	e007      	b.n	800894c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800893c:	7bfb      	ldrb	r3, [r7, #15]
 800893e:	3301      	adds	r3, #1
 8008940:	73fb      	strb	r3, [r7, #15]
 8008942:	7bfb      	ldrb	r3, [r7, #15]
 8008944:	2b0f      	cmp	r3, #15
 8008946:	d9ec      	bls.n	8008922 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008948:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800894c:	4618      	mov	r0, r3
 800894e:	3714      	adds	r7, #20
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr

08008958 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008958:	b480      	push	{r7}
 800895a:	b087      	sub	sp, #28
 800895c:	af00      	add	r7, sp, #0
 800895e:	60f8      	str	r0, [r7, #12]
 8008960:	60b9      	str	r1, [r7, #8]
 8008962:	4613      	mov	r3, r2
 8008964:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008966:	2301      	movs	r3, #1
 8008968:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800896a:	2300      	movs	r3, #0
 800896c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800896e:	4b1f      	ldr	r3, [pc, #124]	; (80089ec <FATFS_LinkDriverEx+0x94>)
 8008970:	7a5b      	ldrb	r3, [r3, #9]
 8008972:	b2db      	uxtb	r3, r3
 8008974:	2b00      	cmp	r3, #0
 8008976:	d131      	bne.n	80089dc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008978:	4b1c      	ldr	r3, [pc, #112]	; (80089ec <FATFS_LinkDriverEx+0x94>)
 800897a:	7a5b      	ldrb	r3, [r3, #9]
 800897c:	b2db      	uxtb	r3, r3
 800897e:	461a      	mov	r2, r3
 8008980:	4b1a      	ldr	r3, [pc, #104]	; (80089ec <FATFS_LinkDriverEx+0x94>)
 8008982:	2100      	movs	r1, #0
 8008984:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008986:	4b19      	ldr	r3, [pc, #100]	; (80089ec <FATFS_LinkDriverEx+0x94>)
 8008988:	7a5b      	ldrb	r3, [r3, #9]
 800898a:	b2db      	uxtb	r3, r3
 800898c:	4a17      	ldr	r2, [pc, #92]	; (80089ec <FATFS_LinkDriverEx+0x94>)
 800898e:	009b      	lsls	r3, r3, #2
 8008990:	4413      	add	r3, r2
 8008992:	68fa      	ldr	r2, [r7, #12]
 8008994:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008996:	4b15      	ldr	r3, [pc, #84]	; (80089ec <FATFS_LinkDriverEx+0x94>)
 8008998:	7a5b      	ldrb	r3, [r3, #9]
 800899a:	b2db      	uxtb	r3, r3
 800899c:	461a      	mov	r2, r3
 800899e:	4b13      	ldr	r3, [pc, #76]	; (80089ec <FATFS_LinkDriverEx+0x94>)
 80089a0:	4413      	add	r3, r2
 80089a2:	79fa      	ldrb	r2, [r7, #7]
 80089a4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80089a6:	4b11      	ldr	r3, [pc, #68]	; (80089ec <FATFS_LinkDriverEx+0x94>)
 80089a8:	7a5b      	ldrb	r3, [r3, #9]
 80089aa:	b2db      	uxtb	r3, r3
 80089ac:	1c5a      	adds	r2, r3, #1
 80089ae:	b2d1      	uxtb	r1, r2
 80089b0:	4a0e      	ldr	r2, [pc, #56]	; (80089ec <FATFS_LinkDriverEx+0x94>)
 80089b2:	7251      	strb	r1, [r2, #9]
 80089b4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80089b6:	7dbb      	ldrb	r3, [r7, #22]
 80089b8:	3330      	adds	r3, #48	; 0x30
 80089ba:	b2da      	uxtb	r2, r3
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	3301      	adds	r3, #1
 80089c4:	223a      	movs	r2, #58	; 0x3a
 80089c6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	3302      	adds	r3, #2
 80089cc:	222f      	movs	r2, #47	; 0x2f
 80089ce:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	3303      	adds	r3, #3
 80089d4:	2200      	movs	r2, #0
 80089d6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80089d8:	2300      	movs	r3, #0
 80089da:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80089dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80089de:	4618      	mov	r0, r3
 80089e0:	371c      	adds	r7, #28
 80089e2:	46bd      	mov	sp, r7
 80089e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e8:	4770      	bx	lr
 80089ea:	bf00      	nop
 80089ec:	20000248 	.word	0x20000248

080089f0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b082      	sub	sp, #8
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80089fa:	2200      	movs	r2, #0
 80089fc:	6839      	ldr	r1, [r7, #0]
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f7ff ffaa 	bl	8008958 <FATFS_LinkDriverEx>
 8008a04:	4603      	mov	r3, r0
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3708      	adds	r7, #8
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}
	...

08008a10 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008a14:	2201      	movs	r2, #1
 8008a16:	490e      	ldr	r1, [pc, #56]	; (8008a50 <MX_USB_HOST_Init+0x40>)
 8008a18:	480e      	ldr	r0, [pc, #56]	; (8008a54 <MX_USB_HOST_Init+0x44>)
 8008a1a:	f7fe fb4b 	bl	80070b4 <USBH_Init>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d001      	beq.n	8008a28 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008a24:	f7f7 ff34 	bl	8000890 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 8008a28:	490b      	ldr	r1, [pc, #44]	; (8008a58 <MX_USB_HOST_Init+0x48>)
 8008a2a:	480a      	ldr	r0, [pc, #40]	; (8008a54 <MX_USB_HOST_Init+0x44>)
 8008a2c:	f7fe fbd0 	bl	80071d0 <USBH_RegisterClass>
 8008a30:	4603      	mov	r3, r0
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d001      	beq.n	8008a3a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008a36:	f7f7 ff2b 	bl	8000890 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008a3a:	4806      	ldr	r0, [pc, #24]	; (8008a54 <MX_USB_HOST_Init+0x44>)
 8008a3c:	f7fe fc54 	bl	80072e8 <USBH_Start>
 8008a40:	4603      	mov	r3, r0
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d001      	beq.n	8008a4a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008a46:	f7f7 ff23 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008a4a:	bf00      	nop
 8008a4c:	bd80      	pop	{r7, pc}
 8008a4e:	bf00      	nop
 8008a50:	08008a71 	.word	0x08008a71
 8008a54:	20000254 	.word	0x20000254
 8008a58:	2000000c 	.word	0x2000000c

08008a5c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008a60:	4802      	ldr	r0, [pc, #8]	; (8008a6c <MX_USB_HOST_Process+0x10>)
 8008a62:	f7fe fc51 	bl	8007308 <USBH_Process>
}
 8008a66:	bf00      	nop
 8008a68:	bd80      	pop	{r7, pc}
 8008a6a:	bf00      	nop
 8008a6c:	20000254 	.word	0x20000254

08008a70 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b083      	sub	sp, #12
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	460b      	mov	r3, r1
 8008a7a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008a7c:	78fb      	ldrb	r3, [r7, #3]
 8008a7e:	3b01      	subs	r3, #1
 8008a80:	2b04      	cmp	r3, #4
 8008a82:	d819      	bhi.n	8008ab8 <USBH_UserProcess+0x48>
 8008a84:	a201      	add	r2, pc, #4	; (adr r2, 8008a8c <USBH_UserProcess+0x1c>)
 8008a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a8a:	bf00      	nop
 8008a8c:	08008ab9 	.word	0x08008ab9
 8008a90:	08008aa9 	.word	0x08008aa9
 8008a94:	08008ab9 	.word	0x08008ab9
 8008a98:	08008ab1 	.word	0x08008ab1
 8008a9c:	08008aa1 	.word	0x08008aa1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008aa0:	4b09      	ldr	r3, [pc, #36]	; (8008ac8 <USBH_UserProcess+0x58>)
 8008aa2:	2203      	movs	r2, #3
 8008aa4:	701a      	strb	r2, [r3, #0]
  break;
 8008aa6:	e008      	b.n	8008aba <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008aa8:	4b07      	ldr	r3, [pc, #28]	; (8008ac8 <USBH_UserProcess+0x58>)
 8008aaa:	2202      	movs	r2, #2
 8008aac:	701a      	strb	r2, [r3, #0]
  break;
 8008aae:	e004      	b.n	8008aba <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008ab0:	4b05      	ldr	r3, [pc, #20]	; (8008ac8 <USBH_UserProcess+0x58>)
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	701a      	strb	r2, [r3, #0]
  break;
 8008ab6:	e000      	b.n	8008aba <USBH_UserProcess+0x4a>

  default:
  break;
 8008ab8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008aba:	bf00      	nop
 8008abc:	370c      	adds	r7, #12
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac4:	4770      	bx	lr
 8008ac6:	bf00      	nop
 8008ac8:	2000062c 	.word	0x2000062c

08008acc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b08a      	sub	sp, #40	; 0x28
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ad4:	f107 0314 	add.w	r3, r7, #20
 8008ad8:	2200      	movs	r2, #0
 8008ada:	601a      	str	r2, [r3, #0]
 8008adc:	605a      	str	r2, [r3, #4]
 8008ade:	609a      	str	r2, [r3, #8]
 8008ae0:	60da      	str	r2, [r3, #12]
 8008ae2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008aec:	d147      	bne.n	8008b7e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008aee:	2300      	movs	r3, #0
 8008af0:	613b      	str	r3, [r7, #16]
 8008af2:	4b25      	ldr	r3, [pc, #148]	; (8008b88 <HAL_HCD_MspInit+0xbc>)
 8008af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008af6:	4a24      	ldr	r2, [pc, #144]	; (8008b88 <HAL_HCD_MspInit+0xbc>)
 8008af8:	f043 0301 	orr.w	r3, r3, #1
 8008afc:	6313      	str	r3, [r2, #48]	; 0x30
 8008afe:	4b22      	ldr	r3, [pc, #136]	; (8008b88 <HAL_HCD_MspInit+0xbc>)
 8008b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b02:	f003 0301 	and.w	r3, r3, #1
 8008b06:	613b      	str	r3, [r7, #16]
 8008b08:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008b0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008b10:	2300      	movs	r3, #0
 8008b12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b14:	2300      	movs	r3, #0
 8008b16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b18:	f107 0314 	add.w	r3, r7, #20
 8008b1c:	4619      	mov	r1, r3
 8008b1e:	481b      	ldr	r0, [pc, #108]	; (8008b8c <HAL_HCD_MspInit+0xc0>)
 8008b20:	f7f8 fd9a 	bl	8001658 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008b24:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008b28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b2a:	2302      	movs	r3, #2
 8008b2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b32:	2303      	movs	r3, #3
 8008b34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008b36:	230a      	movs	r3, #10
 8008b38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b3a:	f107 0314 	add.w	r3, r7, #20
 8008b3e:	4619      	mov	r1, r3
 8008b40:	4812      	ldr	r0, [pc, #72]	; (8008b8c <HAL_HCD_MspInit+0xc0>)
 8008b42:	f7f8 fd89 	bl	8001658 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008b46:	4b10      	ldr	r3, [pc, #64]	; (8008b88 <HAL_HCD_MspInit+0xbc>)
 8008b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b4a:	4a0f      	ldr	r2, [pc, #60]	; (8008b88 <HAL_HCD_MspInit+0xbc>)
 8008b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b50:	6353      	str	r3, [r2, #52]	; 0x34
 8008b52:	2300      	movs	r3, #0
 8008b54:	60fb      	str	r3, [r7, #12]
 8008b56:	4b0c      	ldr	r3, [pc, #48]	; (8008b88 <HAL_HCD_MspInit+0xbc>)
 8008b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b5a:	4a0b      	ldr	r2, [pc, #44]	; (8008b88 <HAL_HCD_MspInit+0xbc>)
 8008b5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008b60:	6453      	str	r3, [r2, #68]	; 0x44
 8008b62:	4b09      	ldr	r3, [pc, #36]	; (8008b88 <HAL_HCD_MspInit+0xbc>)
 8008b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b6a:	60fb      	str	r3, [r7, #12]
 8008b6c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008b6e:	2200      	movs	r2, #0
 8008b70:	2100      	movs	r1, #0
 8008b72:	2043      	movs	r0, #67	; 0x43
 8008b74:	f7f8 f9c9 	bl	8000f0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008b78:	2043      	movs	r0, #67	; 0x43
 8008b7a:	f7f8 f9e2 	bl	8000f42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008b7e:	bf00      	nop
 8008b80:	3728      	adds	r7, #40	; 0x28
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
 8008b86:	bf00      	nop
 8008b88:	40023800 	.word	0x40023800
 8008b8c:	40020000 	.word	0x40020000

08008b90 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b082      	sub	sp, #8
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f7fe ff91 	bl	8007ac6 <USBH_LL_IncTimer>
}
 8008ba4:	bf00      	nop
 8008ba6:	3708      	adds	r7, #8
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}

08008bac <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b082      	sub	sp, #8
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f7fe ffc9 	bl	8007b52 <USBH_LL_Connect>
}
 8008bc0:	bf00      	nop
 8008bc2:	3708      	adds	r7, #8
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b082      	sub	sp, #8
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f7fe ffd2 	bl	8007b80 <USBH_LL_Disconnect>
}
 8008bdc:	bf00      	nop
 8008bde:	3708      	adds	r7, #8
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b083      	sub	sp, #12
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	460b      	mov	r3, r1
 8008bee:	70fb      	strb	r3, [r7, #3]
 8008bf0:	4613      	mov	r3, r2
 8008bf2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008bf4:	bf00      	nop
 8008bf6:	370c      	adds	r7, #12
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr

08008c00 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b082      	sub	sp, #8
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f7fe ff83 	bl	8007b1a <USBH_LL_PortEnabled>
}
 8008c14:	bf00      	nop
 8008c16:	3708      	adds	r7, #8
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b082      	sub	sp, #8
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f7fe ff83 	bl	8007b36 <USBH_LL_PortDisabled>
}
 8008c30:	bf00      	nop
 8008c32:	3708      	adds	r7, #8
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b082      	sub	sp, #8
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	d12a      	bne.n	8008ca0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008c4a:	4a18      	ldr	r2, [pc, #96]	; (8008cac <USBH_LL_Init+0x74>)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	4a15      	ldr	r2, [pc, #84]	; (8008cac <USBH_LL_Init+0x74>)
 8008c56:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008c5a:	4b14      	ldr	r3, [pc, #80]	; (8008cac <USBH_LL_Init+0x74>)
 8008c5c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008c60:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008c62:	4b12      	ldr	r3, [pc, #72]	; (8008cac <USBH_LL_Init+0x74>)
 8008c64:	2208      	movs	r2, #8
 8008c66:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008c68:	4b10      	ldr	r3, [pc, #64]	; (8008cac <USBH_LL_Init+0x74>)
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008c6e:	4b0f      	ldr	r3, [pc, #60]	; (8008cac <USBH_LL_Init+0x74>)
 8008c70:	2200      	movs	r2, #0
 8008c72:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008c74:	4b0d      	ldr	r3, [pc, #52]	; (8008cac <USBH_LL_Init+0x74>)
 8008c76:	2202      	movs	r2, #2
 8008c78:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008c7a:	4b0c      	ldr	r3, [pc, #48]	; (8008cac <USBH_LL_Init+0x74>)
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008c80:	480a      	ldr	r0, [pc, #40]	; (8008cac <USBH_LL_Init+0x74>)
 8008c82:	f7f8 fe9e 	bl	80019c2 <HAL_HCD_Init>
 8008c86:	4603      	mov	r3, r0
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d001      	beq.n	8008c90 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008c8c:	f7f7 fe00 	bl	8000890 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008c90:	4806      	ldr	r0, [pc, #24]	; (8008cac <USBH_LL_Init+0x74>)
 8008c92:	f7f9 fa82 	bl	800219a <HAL_HCD_GetCurrentFrame>
 8008c96:	4603      	mov	r3, r0
 8008c98:	4619      	mov	r1, r3
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f7fe ff04 	bl	8007aa8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008ca0:	2300      	movs	r3, #0
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3708      	adds	r7, #8
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}
 8008caa:	bf00      	nop
 8008cac:	20000630 	.word	0x20000630

08008cb0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b084      	sub	sp, #16
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f7f9 f9f1 	bl	80020ae <HAL_HCD_Start>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008cd0:	7bfb      	ldrb	r3, [r7, #15]
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f000 f98c 	bl	8008ff0 <USBH_Get_USB_Status>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cdc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3710      	adds	r7, #16
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}

08008ce6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008ce6:	b580      	push	{r7, lr}
 8008ce8:	b084      	sub	sp, #16
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f7f9 f9f9 	bl	80020f4 <HAL_HCD_Stop>
 8008d02:	4603      	mov	r3, r0
 8008d04:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008d06:	7bfb      	ldrb	r3, [r7, #15]
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f000 f971 	bl	8008ff0 <USBH_Get_USB_Status>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d12:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3710      	adds	r7, #16
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b084      	sub	sp, #16
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008d24:	2301      	movs	r3, #1
 8008d26:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f7f9 fa41 	bl	80021b6 <HAL_HCD_GetCurrentSpeed>
 8008d34:	4603      	mov	r3, r0
 8008d36:	2b02      	cmp	r3, #2
 8008d38:	d00c      	beq.n	8008d54 <USBH_LL_GetSpeed+0x38>
 8008d3a:	2b02      	cmp	r3, #2
 8008d3c:	d80d      	bhi.n	8008d5a <USBH_LL_GetSpeed+0x3e>
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d002      	beq.n	8008d48 <USBH_LL_GetSpeed+0x2c>
 8008d42:	2b01      	cmp	r3, #1
 8008d44:	d003      	beq.n	8008d4e <USBH_LL_GetSpeed+0x32>
 8008d46:	e008      	b.n	8008d5a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	73fb      	strb	r3, [r7, #15]
    break;
 8008d4c:	e008      	b.n	8008d60 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008d4e:	2301      	movs	r3, #1
 8008d50:	73fb      	strb	r3, [r7, #15]
    break;
 8008d52:	e005      	b.n	8008d60 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008d54:	2302      	movs	r3, #2
 8008d56:	73fb      	strb	r3, [r7, #15]
    break;
 8008d58:	e002      	b.n	8008d60 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	73fb      	strb	r3, [r7, #15]
    break;
 8008d5e:	bf00      	nop
  }
  return  speed;
 8008d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3710      	adds	r7, #16
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}

08008d6a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008d6a:	b580      	push	{r7, lr}
 8008d6c:	b084      	sub	sp, #16
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d72:	2300      	movs	r3, #0
 8008d74:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008d76:	2300      	movs	r3, #0
 8008d78:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008d80:	4618      	mov	r0, r3
 8008d82:	f7f9 f9d4 	bl	800212e <HAL_HCD_ResetPort>
 8008d86:	4603      	mov	r3, r0
 8008d88:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008d8a:	7bfb      	ldrb	r3, [r7, #15]
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f000 f92f 	bl	8008ff0 <USBH_Get_USB_Status>
 8008d92:	4603      	mov	r3, r0
 8008d94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d96:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3710      	adds	r7, #16
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}

08008da0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b082      	sub	sp, #8
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	460b      	mov	r3, r1
 8008daa:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008db2:	78fa      	ldrb	r2, [r7, #3]
 8008db4:	4611      	mov	r1, r2
 8008db6:	4618      	mov	r0, r3
 8008db8:	f7f9 f9db 	bl	8002172 <HAL_HCD_HC_GetXferCount>
 8008dbc:	4603      	mov	r3, r0
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3708      	adds	r7, #8
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}

08008dc6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008dc6:	b590      	push	{r4, r7, lr}
 8008dc8:	b089      	sub	sp, #36	; 0x24
 8008dca:	af04      	add	r7, sp, #16
 8008dcc:	6078      	str	r0, [r7, #4]
 8008dce:	4608      	mov	r0, r1
 8008dd0:	4611      	mov	r1, r2
 8008dd2:	461a      	mov	r2, r3
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	70fb      	strb	r3, [r7, #3]
 8008dd8:	460b      	mov	r3, r1
 8008dda:	70bb      	strb	r3, [r7, #2]
 8008ddc:	4613      	mov	r3, r2
 8008dde:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008de0:	2300      	movs	r3, #0
 8008de2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008de4:	2300      	movs	r3, #0
 8008de6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008dee:	787c      	ldrb	r4, [r7, #1]
 8008df0:	78ba      	ldrb	r2, [r7, #2]
 8008df2:	78f9      	ldrb	r1, [r7, #3]
 8008df4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008df6:	9302      	str	r3, [sp, #8]
 8008df8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008dfc:	9301      	str	r3, [sp, #4]
 8008dfe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008e02:	9300      	str	r3, [sp, #0]
 8008e04:	4623      	mov	r3, r4
 8008e06:	f7f8 fe3e 	bl	8001a86 <HAL_HCD_HC_Init>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008e0e:	7bfb      	ldrb	r3, [r7, #15]
 8008e10:	4618      	mov	r0, r3
 8008e12:	f000 f8ed 	bl	8008ff0 <USBH_Get_USB_Status>
 8008e16:	4603      	mov	r3, r0
 8008e18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e1a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3714      	adds	r7, #20
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd90      	pop	{r4, r7, pc}

08008e24 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b084      	sub	sp, #16
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	460b      	mov	r3, r1
 8008e2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e30:	2300      	movs	r3, #0
 8008e32:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008e34:	2300      	movs	r3, #0
 8008e36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008e3e:	78fa      	ldrb	r2, [r7, #3]
 8008e40:	4611      	mov	r1, r2
 8008e42:	4618      	mov	r0, r3
 8008e44:	f7f8 feae 	bl	8001ba4 <HAL_HCD_HC_Halt>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008e4c:	7bfb      	ldrb	r3, [r7, #15]
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f000 f8ce 	bl	8008ff0 <USBH_Get_USB_Status>
 8008e54:	4603      	mov	r3, r0
 8008e56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e58:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3710      	adds	r7, #16
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}

08008e62 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008e62:	b590      	push	{r4, r7, lr}
 8008e64:	b089      	sub	sp, #36	; 0x24
 8008e66:	af04      	add	r7, sp, #16
 8008e68:	6078      	str	r0, [r7, #4]
 8008e6a:	4608      	mov	r0, r1
 8008e6c:	4611      	mov	r1, r2
 8008e6e:	461a      	mov	r2, r3
 8008e70:	4603      	mov	r3, r0
 8008e72:	70fb      	strb	r3, [r7, #3]
 8008e74:	460b      	mov	r3, r1
 8008e76:	70bb      	strb	r3, [r7, #2]
 8008e78:	4613      	mov	r3, r2
 8008e7a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008e80:	2300      	movs	r3, #0
 8008e82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008e8a:	787c      	ldrb	r4, [r7, #1]
 8008e8c:	78ba      	ldrb	r2, [r7, #2]
 8008e8e:	78f9      	ldrb	r1, [r7, #3]
 8008e90:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008e94:	9303      	str	r3, [sp, #12]
 8008e96:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008e98:	9302      	str	r3, [sp, #8]
 8008e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e9c:	9301      	str	r3, [sp, #4]
 8008e9e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008ea2:	9300      	str	r3, [sp, #0]
 8008ea4:	4623      	mov	r3, r4
 8008ea6:	f7f8 fea1 	bl	8001bec <HAL_HCD_HC_SubmitRequest>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008eae:	7bfb      	ldrb	r3, [r7, #15]
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f000 f89d 	bl	8008ff0 <USBH_Get_USB_Status>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008eba:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3714      	adds	r7, #20
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd90      	pop	{r4, r7, pc}

08008ec4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b082      	sub	sp, #8
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	460b      	mov	r3, r1
 8008ece:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008ed6:	78fa      	ldrb	r2, [r7, #3]
 8008ed8:	4611      	mov	r1, r2
 8008eda:	4618      	mov	r0, r3
 8008edc:	f7f9 f935 	bl	800214a <HAL_HCD_HC_GetURBState>
 8008ee0:	4603      	mov	r3, r0
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3708      	adds	r7, #8
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}

08008eea <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008eea:	b580      	push	{r7, lr}
 8008eec:	b082      	sub	sp, #8
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	6078      	str	r0, [r7, #4]
 8008ef2:	460b      	mov	r3, r1
 8008ef4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	d103      	bne.n	8008f08 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008f00:	78fb      	ldrb	r3, [r7, #3]
 8008f02:	4618      	mov	r0, r3
 8008f04:	f000 f8a0 	bl	8009048 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008f08:	20c8      	movs	r0, #200	; 0xc8
 8008f0a:	f7f7 feff 	bl	8000d0c <HAL_Delay>
  return USBH_OK;
 8008f0e:	2300      	movs	r3, #0
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3708      	adds	r7, #8
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b085      	sub	sp, #20
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
 8008f20:	460b      	mov	r3, r1
 8008f22:	70fb      	strb	r3, [r7, #3]
 8008f24:	4613      	mov	r3, r2
 8008f26:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008f2e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008f30:	78fb      	ldrb	r3, [r7, #3]
 8008f32:	68fa      	ldr	r2, [r7, #12]
 8008f34:	212c      	movs	r1, #44	; 0x2c
 8008f36:	fb01 f303 	mul.w	r3, r1, r3
 8008f3a:	4413      	add	r3, r2
 8008f3c:	333b      	adds	r3, #59	; 0x3b
 8008f3e:	781b      	ldrb	r3, [r3, #0]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d009      	beq.n	8008f58 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008f44:	78fb      	ldrb	r3, [r7, #3]
 8008f46:	68fa      	ldr	r2, [r7, #12]
 8008f48:	212c      	movs	r1, #44	; 0x2c
 8008f4a:	fb01 f303 	mul.w	r3, r1, r3
 8008f4e:	4413      	add	r3, r2
 8008f50:	3354      	adds	r3, #84	; 0x54
 8008f52:	78ba      	ldrb	r2, [r7, #2]
 8008f54:	701a      	strb	r2, [r3, #0]
 8008f56:	e008      	b.n	8008f6a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008f58:	78fb      	ldrb	r3, [r7, #3]
 8008f5a:	68fa      	ldr	r2, [r7, #12]
 8008f5c:	212c      	movs	r1, #44	; 0x2c
 8008f5e:	fb01 f303 	mul.w	r3, r1, r3
 8008f62:	4413      	add	r3, r2
 8008f64:	3355      	adds	r3, #85	; 0x55
 8008f66:	78ba      	ldrb	r2, [r7, #2]
 8008f68:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008f6a:	2300      	movs	r3, #0
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3714      	adds	r7, #20
 8008f70:	46bd      	mov	sp, r7
 8008f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f76:	4770      	bx	lr

08008f78 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b085      	sub	sp, #20
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
 8008f80:	460b      	mov	r3, r1
 8008f82:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 8008f84:	2300      	movs	r3, #0
 8008f86:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008f8e:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 8008f90:	78fb      	ldrb	r3, [r7, #3]
 8008f92:	68ba      	ldr	r2, [r7, #8]
 8008f94:	212c      	movs	r1, #44	; 0x2c
 8008f96:	fb01 f303 	mul.w	r3, r1, r3
 8008f9a:	4413      	add	r3, r2
 8008f9c:	333b      	adds	r3, #59	; 0x3b
 8008f9e:	781b      	ldrb	r3, [r3, #0]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d009      	beq.n	8008fb8 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 8008fa4:	78fb      	ldrb	r3, [r7, #3]
 8008fa6:	68ba      	ldr	r2, [r7, #8]
 8008fa8:	212c      	movs	r1, #44	; 0x2c
 8008faa:	fb01 f303 	mul.w	r3, r1, r3
 8008fae:	4413      	add	r3, r2
 8008fb0:	3354      	adds	r3, #84	; 0x54
 8008fb2:	781b      	ldrb	r3, [r3, #0]
 8008fb4:	73fb      	strb	r3, [r7, #15]
 8008fb6:	e008      	b.n	8008fca <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8008fb8:	78fb      	ldrb	r3, [r7, #3]
 8008fba:	68ba      	ldr	r2, [r7, #8]
 8008fbc:	212c      	movs	r1, #44	; 0x2c
 8008fbe:	fb01 f303 	mul.w	r3, r1, r3
 8008fc2:	4413      	add	r3, r2
 8008fc4:	3355      	adds	r3, #85	; 0x55
 8008fc6:	781b      	ldrb	r3, [r3, #0]
 8008fc8:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 8008fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3714      	adds	r7, #20
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr

08008fd8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b082      	sub	sp, #8
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f7f7 fe93 	bl	8000d0c <HAL_Delay>
}
 8008fe6:	bf00      	nop
 8008fe8:	3708      	adds	r7, #8
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}
	...

08008ff0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b085      	sub	sp, #20
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008ffe:	79fb      	ldrb	r3, [r7, #7]
 8009000:	2b03      	cmp	r3, #3
 8009002:	d817      	bhi.n	8009034 <USBH_Get_USB_Status+0x44>
 8009004:	a201      	add	r2, pc, #4	; (adr r2, 800900c <USBH_Get_USB_Status+0x1c>)
 8009006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800900a:	bf00      	nop
 800900c:	0800901d 	.word	0x0800901d
 8009010:	08009023 	.word	0x08009023
 8009014:	08009029 	.word	0x08009029
 8009018:	0800902f 	.word	0x0800902f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800901c:	2300      	movs	r3, #0
 800901e:	73fb      	strb	r3, [r7, #15]
    break;
 8009020:	e00b      	b.n	800903a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009022:	2302      	movs	r3, #2
 8009024:	73fb      	strb	r3, [r7, #15]
    break;
 8009026:	e008      	b.n	800903a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009028:	2301      	movs	r3, #1
 800902a:	73fb      	strb	r3, [r7, #15]
    break;
 800902c:	e005      	b.n	800903a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800902e:	2302      	movs	r3, #2
 8009030:	73fb      	strb	r3, [r7, #15]
    break;
 8009032:	e002      	b.n	800903a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009034:	2302      	movs	r3, #2
 8009036:	73fb      	strb	r3, [r7, #15]
    break;
 8009038:	bf00      	nop
  }
  return usb_status;
 800903a:	7bfb      	ldrb	r3, [r7, #15]
}
 800903c:	4618      	mov	r0, r3
 800903e:	3714      	adds	r7, #20
 8009040:	46bd      	mov	sp, r7
 8009042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009046:	4770      	bx	lr

08009048 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b084      	sub	sp, #16
 800904c:	af00      	add	r7, sp, #0
 800904e:	4603      	mov	r3, r0
 8009050:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009052:	79fb      	ldrb	r3, [r7, #7]
 8009054:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009056:	79fb      	ldrb	r3, [r7, #7]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d102      	bne.n	8009062 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800905c:	2300      	movs	r3, #0
 800905e:	73fb      	strb	r3, [r7, #15]
 8009060:	e001      	b.n	8009066 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009062:	2301      	movs	r3, #1
 8009064:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,(GPIO_PinState)data);
 8009066:	7bfb      	ldrb	r3, [r7, #15]
 8009068:	461a      	mov	r2, r3
 800906a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800906e:	4803      	ldr	r0, [pc, #12]	; (800907c <MX_DriverVbusFS+0x34>)
 8009070:	f7f8 fc8e 	bl	8001990 <HAL_GPIO_WritePin>
}
 8009074:	bf00      	nop
 8009076:	3710      	adds	r7, #16
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}
 800907c:	40020800 	.word	0x40020800

08009080 <__errno>:
 8009080:	4b01      	ldr	r3, [pc, #4]	; (8009088 <__errno+0x8>)
 8009082:	6818      	ldr	r0, [r3, #0]
 8009084:	4770      	bx	lr
 8009086:	bf00      	nop
 8009088:	2000002c 	.word	0x2000002c

0800908c <__libc_init_array>:
 800908c:	b570      	push	{r4, r5, r6, lr}
 800908e:	4d0d      	ldr	r5, [pc, #52]	; (80090c4 <__libc_init_array+0x38>)
 8009090:	4c0d      	ldr	r4, [pc, #52]	; (80090c8 <__libc_init_array+0x3c>)
 8009092:	1b64      	subs	r4, r4, r5
 8009094:	10a4      	asrs	r4, r4, #2
 8009096:	2600      	movs	r6, #0
 8009098:	42a6      	cmp	r6, r4
 800909a:	d109      	bne.n	80090b0 <__libc_init_array+0x24>
 800909c:	4d0b      	ldr	r5, [pc, #44]	; (80090cc <__libc_init_array+0x40>)
 800909e:	4c0c      	ldr	r4, [pc, #48]	; (80090d0 <__libc_init_array+0x44>)
 80090a0:	f000 f93c 	bl	800931c <_init>
 80090a4:	1b64      	subs	r4, r4, r5
 80090a6:	10a4      	asrs	r4, r4, #2
 80090a8:	2600      	movs	r6, #0
 80090aa:	42a6      	cmp	r6, r4
 80090ac:	d105      	bne.n	80090ba <__libc_init_array+0x2e>
 80090ae:	bd70      	pop	{r4, r5, r6, pc}
 80090b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80090b4:	4798      	blx	r3
 80090b6:	3601      	adds	r6, #1
 80090b8:	e7ee      	b.n	8009098 <__libc_init_array+0xc>
 80090ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80090be:	4798      	blx	r3
 80090c0:	3601      	adds	r6, #1
 80090c2:	e7f2      	b.n	80090aa <__libc_init_array+0x1e>
 80090c4:	08009380 	.word	0x08009380
 80090c8:	08009380 	.word	0x08009380
 80090cc:	08009380 	.word	0x08009380
 80090d0:	08009384 	.word	0x08009384

080090d4 <malloc>:
 80090d4:	4b02      	ldr	r3, [pc, #8]	; (80090e0 <malloc+0xc>)
 80090d6:	4601      	mov	r1, r0
 80090d8:	6818      	ldr	r0, [r3, #0]
 80090da:	f000 b88d 	b.w	80091f8 <_malloc_r>
 80090de:	bf00      	nop
 80090e0:	2000002c 	.word	0x2000002c

080090e4 <free>:
 80090e4:	4b02      	ldr	r3, [pc, #8]	; (80090f0 <free+0xc>)
 80090e6:	4601      	mov	r1, r0
 80090e8:	6818      	ldr	r0, [r3, #0]
 80090ea:	f000 b819 	b.w	8009120 <_free_r>
 80090ee:	bf00      	nop
 80090f0:	2000002c 	.word	0x2000002c

080090f4 <memcpy>:
 80090f4:	440a      	add	r2, r1
 80090f6:	4291      	cmp	r1, r2
 80090f8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80090fc:	d100      	bne.n	8009100 <memcpy+0xc>
 80090fe:	4770      	bx	lr
 8009100:	b510      	push	{r4, lr}
 8009102:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009106:	f803 4f01 	strb.w	r4, [r3, #1]!
 800910a:	4291      	cmp	r1, r2
 800910c:	d1f9      	bne.n	8009102 <memcpy+0xe>
 800910e:	bd10      	pop	{r4, pc}

08009110 <memset>:
 8009110:	4402      	add	r2, r0
 8009112:	4603      	mov	r3, r0
 8009114:	4293      	cmp	r3, r2
 8009116:	d100      	bne.n	800911a <memset+0xa>
 8009118:	4770      	bx	lr
 800911a:	f803 1b01 	strb.w	r1, [r3], #1
 800911e:	e7f9      	b.n	8009114 <memset+0x4>

08009120 <_free_r>:
 8009120:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009122:	2900      	cmp	r1, #0
 8009124:	d044      	beq.n	80091b0 <_free_r+0x90>
 8009126:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800912a:	9001      	str	r0, [sp, #4]
 800912c:	2b00      	cmp	r3, #0
 800912e:	f1a1 0404 	sub.w	r4, r1, #4
 8009132:	bfb8      	it	lt
 8009134:	18e4      	addlt	r4, r4, r3
 8009136:	f000 f8e3 	bl	8009300 <__malloc_lock>
 800913a:	4a1e      	ldr	r2, [pc, #120]	; (80091b4 <_free_r+0x94>)
 800913c:	9801      	ldr	r0, [sp, #4]
 800913e:	6813      	ldr	r3, [r2, #0]
 8009140:	b933      	cbnz	r3, 8009150 <_free_r+0x30>
 8009142:	6063      	str	r3, [r4, #4]
 8009144:	6014      	str	r4, [r2, #0]
 8009146:	b003      	add	sp, #12
 8009148:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800914c:	f000 b8de 	b.w	800930c <__malloc_unlock>
 8009150:	42a3      	cmp	r3, r4
 8009152:	d908      	bls.n	8009166 <_free_r+0x46>
 8009154:	6825      	ldr	r5, [r4, #0]
 8009156:	1961      	adds	r1, r4, r5
 8009158:	428b      	cmp	r3, r1
 800915a:	bf01      	itttt	eq
 800915c:	6819      	ldreq	r1, [r3, #0]
 800915e:	685b      	ldreq	r3, [r3, #4]
 8009160:	1949      	addeq	r1, r1, r5
 8009162:	6021      	streq	r1, [r4, #0]
 8009164:	e7ed      	b.n	8009142 <_free_r+0x22>
 8009166:	461a      	mov	r2, r3
 8009168:	685b      	ldr	r3, [r3, #4]
 800916a:	b10b      	cbz	r3, 8009170 <_free_r+0x50>
 800916c:	42a3      	cmp	r3, r4
 800916e:	d9fa      	bls.n	8009166 <_free_r+0x46>
 8009170:	6811      	ldr	r1, [r2, #0]
 8009172:	1855      	adds	r5, r2, r1
 8009174:	42a5      	cmp	r5, r4
 8009176:	d10b      	bne.n	8009190 <_free_r+0x70>
 8009178:	6824      	ldr	r4, [r4, #0]
 800917a:	4421      	add	r1, r4
 800917c:	1854      	adds	r4, r2, r1
 800917e:	42a3      	cmp	r3, r4
 8009180:	6011      	str	r1, [r2, #0]
 8009182:	d1e0      	bne.n	8009146 <_free_r+0x26>
 8009184:	681c      	ldr	r4, [r3, #0]
 8009186:	685b      	ldr	r3, [r3, #4]
 8009188:	6053      	str	r3, [r2, #4]
 800918a:	4421      	add	r1, r4
 800918c:	6011      	str	r1, [r2, #0]
 800918e:	e7da      	b.n	8009146 <_free_r+0x26>
 8009190:	d902      	bls.n	8009198 <_free_r+0x78>
 8009192:	230c      	movs	r3, #12
 8009194:	6003      	str	r3, [r0, #0]
 8009196:	e7d6      	b.n	8009146 <_free_r+0x26>
 8009198:	6825      	ldr	r5, [r4, #0]
 800919a:	1961      	adds	r1, r4, r5
 800919c:	428b      	cmp	r3, r1
 800919e:	bf04      	itt	eq
 80091a0:	6819      	ldreq	r1, [r3, #0]
 80091a2:	685b      	ldreq	r3, [r3, #4]
 80091a4:	6063      	str	r3, [r4, #4]
 80091a6:	bf04      	itt	eq
 80091a8:	1949      	addeq	r1, r1, r5
 80091aa:	6021      	streq	r1, [r4, #0]
 80091ac:	6054      	str	r4, [r2, #4]
 80091ae:	e7ca      	b.n	8009146 <_free_r+0x26>
 80091b0:	b003      	add	sp, #12
 80091b2:	bd30      	pop	{r4, r5, pc}
 80091b4:	20000934 	.word	0x20000934

080091b8 <sbrk_aligned>:
 80091b8:	b570      	push	{r4, r5, r6, lr}
 80091ba:	4e0e      	ldr	r6, [pc, #56]	; (80091f4 <sbrk_aligned+0x3c>)
 80091bc:	460c      	mov	r4, r1
 80091be:	6831      	ldr	r1, [r6, #0]
 80091c0:	4605      	mov	r5, r0
 80091c2:	b911      	cbnz	r1, 80091ca <sbrk_aligned+0x12>
 80091c4:	f000 f88c 	bl	80092e0 <_sbrk_r>
 80091c8:	6030      	str	r0, [r6, #0]
 80091ca:	4621      	mov	r1, r4
 80091cc:	4628      	mov	r0, r5
 80091ce:	f000 f887 	bl	80092e0 <_sbrk_r>
 80091d2:	1c43      	adds	r3, r0, #1
 80091d4:	d00a      	beq.n	80091ec <sbrk_aligned+0x34>
 80091d6:	1cc4      	adds	r4, r0, #3
 80091d8:	f024 0403 	bic.w	r4, r4, #3
 80091dc:	42a0      	cmp	r0, r4
 80091de:	d007      	beq.n	80091f0 <sbrk_aligned+0x38>
 80091e0:	1a21      	subs	r1, r4, r0
 80091e2:	4628      	mov	r0, r5
 80091e4:	f000 f87c 	bl	80092e0 <_sbrk_r>
 80091e8:	3001      	adds	r0, #1
 80091ea:	d101      	bne.n	80091f0 <sbrk_aligned+0x38>
 80091ec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80091f0:	4620      	mov	r0, r4
 80091f2:	bd70      	pop	{r4, r5, r6, pc}
 80091f4:	20000938 	.word	0x20000938

080091f8 <_malloc_r>:
 80091f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091fc:	1ccd      	adds	r5, r1, #3
 80091fe:	f025 0503 	bic.w	r5, r5, #3
 8009202:	3508      	adds	r5, #8
 8009204:	2d0c      	cmp	r5, #12
 8009206:	bf38      	it	cc
 8009208:	250c      	movcc	r5, #12
 800920a:	2d00      	cmp	r5, #0
 800920c:	4607      	mov	r7, r0
 800920e:	db01      	blt.n	8009214 <_malloc_r+0x1c>
 8009210:	42a9      	cmp	r1, r5
 8009212:	d905      	bls.n	8009220 <_malloc_r+0x28>
 8009214:	230c      	movs	r3, #12
 8009216:	603b      	str	r3, [r7, #0]
 8009218:	2600      	movs	r6, #0
 800921a:	4630      	mov	r0, r6
 800921c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009220:	4e2e      	ldr	r6, [pc, #184]	; (80092dc <_malloc_r+0xe4>)
 8009222:	f000 f86d 	bl	8009300 <__malloc_lock>
 8009226:	6833      	ldr	r3, [r6, #0]
 8009228:	461c      	mov	r4, r3
 800922a:	bb34      	cbnz	r4, 800927a <_malloc_r+0x82>
 800922c:	4629      	mov	r1, r5
 800922e:	4638      	mov	r0, r7
 8009230:	f7ff ffc2 	bl	80091b8 <sbrk_aligned>
 8009234:	1c43      	adds	r3, r0, #1
 8009236:	4604      	mov	r4, r0
 8009238:	d14d      	bne.n	80092d6 <_malloc_r+0xde>
 800923a:	6834      	ldr	r4, [r6, #0]
 800923c:	4626      	mov	r6, r4
 800923e:	2e00      	cmp	r6, #0
 8009240:	d140      	bne.n	80092c4 <_malloc_r+0xcc>
 8009242:	6823      	ldr	r3, [r4, #0]
 8009244:	4631      	mov	r1, r6
 8009246:	4638      	mov	r0, r7
 8009248:	eb04 0803 	add.w	r8, r4, r3
 800924c:	f000 f848 	bl	80092e0 <_sbrk_r>
 8009250:	4580      	cmp	r8, r0
 8009252:	d13a      	bne.n	80092ca <_malloc_r+0xd2>
 8009254:	6821      	ldr	r1, [r4, #0]
 8009256:	3503      	adds	r5, #3
 8009258:	1a6d      	subs	r5, r5, r1
 800925a:	f025 0503 	bic.w	r5, r5, #3
 800925e:	3508      	adds	r5, #8
 8009260:	2d0c      	cmp	r5, #12
 8009262:	bf38      	it	cc
 8009264:	250c      	movcc	r5, #12
 8009266:	4629      	mov	r1, r5
 8009268:	4638      	mov	r0, r7
 800926a:	f7ff ffa5 	bl	80091b8 <sbrk_aligned>
 800926e:	3001      	adds	r0, #1
 8009270:	d02b      	beq.n	80092ca <_malloc_r+0xd2>
 8009272:	6823      	ldr	r3, [r4, #0]
 8009274:	442b      	add	r3, r5
 8009276:	6023      	str	r3, [r4, #0]
 8009278:	e00e      	b.n	8009298 <_malloc_r+0xa0>
 800927a:	6822      	ldr	r2, [r4, #0]
 800927c:	1b52      	subs	r2, r2, r5
 800927e:	d41e      	bmi.n	80092be <_malloc_r+0xc6>
 8009280:	2a0b      	cmp	r2, #11
 8009282:	d916      	bls.n	80092b2 <_malloc_r+0xba>
 8009284:	1961      	adds	r1, r4, r5
 8009286:	42a3      	cmp	r3, r4
 8009288:	6025      	str	r5, [r4, #0]
 800928a:	bf18      	it	ne
 800928c:	6059      	strne	r1, [r3, #4]
 800928e:	6863      	ldr	r3, [r4, #4]
 8009290:	bf08      	it	eq
 8009292:	6031      	streq	r1, [r6, #0]
 8009294:	5162      	str	r2, [r4, r5]
 8009296:	604b      	str	r3, [r1, #4]
 8009298:	4638      	mov	r0, r7
 800929a:	f104 060b 	add.w	r6, r4, #11
 800929e:	f000 f835 	bl	800930c <__malloc_unlock>
 80092a2:	f026 0607 	bic.w	r6, r6, #7
 80092a6:	1d23      	adds	r3, r4, #4
 80092a8:	1af2      	subs	r2, r6, r3
 80092aa:	d0b6      	beq.n	800921a <_malloc_r+0x22>
 80092ac:	1b9b      	subs	r3, r3, r6
 80092ae:	50a3      	str	r3, [r4, r2]
 80092b0:	e7b3      	b.n	800921a <_malloc_r+0x22>
 80092b2:	6862      	ldr	r2, [r4, #4]
 80092b4:	42a3      	cmp	r3, r4
 80092b6:	bf0c      	ite	eq
 80092b8:	6032      	streq	r2, [r6, #0]
 80092ba:	605a      	strne	r2, [r3, #4]
 80092bc:	e7ec      	b.n	8009298 <_malloc_r+0xa0>
 80092be:	4623      	mov	r3, r4
 80092c0:	6864      	ldr	r4, [r4, #4]
 80092c2:	e7b2      	b.n	800922a <_malloc_r+0x32>
 80092c4:	4634      	mov	r4, r6
 80092c6:	6876      	ldr	r6, [r6, #4]
 80092c8:	e7b9      	b.n	800923e <_malloc_r+0x46>
 80092ca:	230c      	movs	r3, #12
 80092cc:	603b      	str	r3, [r7, #0]
 80092ce:	4638      	mov	r0, r7
 80092d0:	f000 f81c 	bl	800930c <__malloc_unlock>
 80092d4:	e7a1      	b.n	800921a <_malloc_r+0x22>
 80092d6:	6025      	str	r5, [r4, #0]
 80092d8:	e7de      	b.n	8009298 <_malloc_r+0xa0>
 80092da:	bf00      	nop
 80092dc:	20000934 	.word	0x20000934

080092e0 <_sbrk_r>:
 80092e0:	b538      	push	{r3, r4, r5, lr}
 80092e2:	4d06      	ldr	r5, [pc, #24]	; (80092fc <_sbrk_r+0x1c>)
 80092e4:	2300      	movs	r3, #0
 80092e6:	4604      	mov	r4, r0
 80092e8:	4608      	mov	r0, r1
 80092ea:	602b      	str	r3, [r5, #0]
 80092ec:	f7f7 fbb6 	bl	8000a5c <_sbrk>
 80092f0:	1c43      	adds	r3, r0, #1
 80092f2:	d102      	bne.n	80092fa <_sbrk_r+0x1a>
 80092f4:	682b      	ldr	r3, [r5, #0]
 80092f6:	b103      	cbz	r3, 80092fa <_sbrk_r+0x1a>
 80092f8:	6023      	str	r3, [r4, #0]
 80092fa:	bd38      	pop	{r3, r4, r5, pc}
 80092fc:	2000093c 	.word	0x2000093c

08009300 <__malloc_lock>:
 8009300:	4801      	ldr	r0, [pc, #4]	; (8009308 <__malloc_lock+0x8>)
 8009302:	f000 b809 	b.w	8009318 <__retarget_lock_acquire_recursive>
 8009306:	bf00      	nop
 8009308:	20000940 	.word	0x20000940

0800930c <__malloc_unlock>:
 800930c:	4801      	ldr	r0, [pc, #4]	; (8009314 <__malloc_unlock+0x8>)
 800930e:	f000 b804 	b.w	800931a <__retarget_lock_release_recursive>
 8009312:	bf00      	nop
 8009314:	20000940 	.word	0x20000940

08009318 <__retarget_lock_acquire_recursive>:
 8009318:	4770      	bx	lr

0800931a <__retarget_lock_release_recursive>:
 800931a:	4770      	bx	lr

0800931c <_init>:
 800931c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800931e:	bf00      	nop
 8009320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009322:	bc08      	pop	{r3}
 8009324:	469e      	mov	lr, r3
 8009326:	4770      	bx	lr

08009328 <_fini>:
 8009328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800932a:	bf00      	nop
 800932c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800932e:	bc08      	pop	{r3}
 8009330:	469e      	mov	lr, r3
 8009332:	4770      	bx	lr
