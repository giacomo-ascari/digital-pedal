
gt_f407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094f0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000668  08009678  08009678  00019678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ce0  08009ce0  00020298  2**0
                  CONTENTS
  4 .ARM          00000008  08009ce0  08009ce0  00019ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ce8  08009ce8  00020298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ce8  08009ce8  00019ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009cec  08009cec  00019cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000298  20000000  08009cf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020298  2**0
                  CONTENTS
 10 .bss          0000347c  20000298  20000298  00020298  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20003714  20003714  00020298  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020298  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002eb2c  00000000  00000000  000202c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006677  00000000  00000000  0004edf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    000205e9  00000000  00000000  0005546b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001658  00000000  00000000  00075a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001a78  00000000  00000000  000770b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00027efd  00000000  00000000  00078b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002e872  00000000  00000000  000a0a25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cfea2  00000000  00000000  000cf297  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0019f139  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000041c8  00000000  00000000  0019f18c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000298 	.word	0x20000298
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009660 	.word	0x08009660

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000029c 	.word	0x2000029c
 80001c4:	08009660 	.word	0x08009660

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80004cc:	b508      	push	{r3, lr}
  if(hi2s->Instance == I2S3)
 80004ce:	6802      	ldr	r2, [r0, #0]
 80004d0:	4b03      	ldr	r3, [pc, #12]	; (80004e0 <HAL_I2S_TxCpltCallback+0x14>)
 80004d2:	429a      	cmp	r2, r3
 80004d4:	d000      	beq.n	80004d8 <HAL_I2S_TxCpltCallback+0xc>
  {
    /* Call the user function which will manage directly transfer complete */  
    AUDIO_OUT_TransferComplete_CallBack();
  }
}
 80004d6:	bd08      	pop	{r3, pc}
    AUDIO_OUT_TransferComplete_CallBack();
 80004d8:	f000 fc48 	bl	8000d6c <AUDIO_OUT_TransferComplete_CallBack>
}
 80004dc:	e7fb      	b.n	80004d6 <HAL_I2S_TxCpltCallback+0xa>
 80004de:	bf00      	nop
 80004e0:	40003c00 	.word	0x40003c00

080004e4 <HAL_I2S_TxHalfCpltCallback>:
/**
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80004e4:	b508      	push	{r3, lr}
  if(hi2s->Instance == I2S3)
 80004e6:	6802      	ldr	r2, [r0, #0]
 80004e8:	4b03      	ldr	r3, [pc, #12]	; (80004f8 <HAL_I2S_TxHalfCpltCallback+0x14>)
 80004ea:	429a      	cmp	r2, r3
 80004ec:	d000      	beq.n	80004f0 <HAL_I2S_TxHalfCpltCallback+0xc>
  {
    /* Manage the remaining file size and new address offset: This function should
       be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
    AUDIO_OUT_HalfTransfer_CallBack();
  }
}
 80004ee:	bd08      	pop	{r3, pc}
    AUDIO_OUT_HalfTransfer_CallBack();
 80004f0:	f000 fc28 	bl	8000d44 <AUDIO_OUT_HalfTransfer_CallBack>
}
 80004f4:	e7fb      	b.n	80004ee <HAL_I2S_TxHalfCpltCallback+0xa>
 80004f6:	bf00      	nop
 80004f8:	40003c00 	.word	0x40003c00

080004fc <AUDIO_OUT_Error_CallBack>:
/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void AUDIO_OUT_Error_CallBack(void)
{
}
 80004fc:	4770      	bx	lr
	...

08000500 <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8000500:	b508      	push	{r3, lr}
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f411e_discovery_audio.h) */ 
  if(hi2s->Instance == I2S3)
 8000502:	6802      	ldr	r2, [r0, #0]
 8000504:	4b03      	ldr	r3, [pc, #12]	; (8000514 <HAL_I2S_ErrorCallback+0x14>)
 8000506:	429a      	cmp	r2, r3
 8000508:	d000      	beq.n	800050c <HAL_I2S_ErrorCallback+0xc>
  {
    AUDIO_OUT_Error_CallBack();
  }
}
 800050a:	bd08      	pop	{r3, pc}
    AUDIO_OUT_Error_CallBack();
 800050c:	f7ff fff6 	bl	80004fc <AUDIO_OUT_Error_CallBack>
}
 8000510:	e7fb      	b.n	800050a <HAL_I2S_ErrorCallback+0xa>
 8000512:	bf00      	nop
 8000514:	40003c00 	.word	0x40003c00

08000518 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8000518:	b570      	push	{r4, r5, r6, lr}
 800051a:	b088      	sub	sp, #32
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 800051c:	482b      	ldr	r0, [pc, #172]	; (80005cc <I2Cx_Init+0xb4>)
 800051e:	f002 fd3f 	bl	8002fa0 <HAL_I2C_GetState>
 8000522:	b108      	cbz	r0, 8000528 <I2Cx_Init+0x10>

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
    HAL_I2C_Init(&I2cHandle);
  }
}
 8000524:	b008      	add	sp, #32
 8000526:	bd70      	pop	{r4, r5, r6, pc}
    I2cHandle.Instance = AUDIO_I2Cx;
 8000528:	4c28      	ldr	r4, [pc, #160]	; (80005cc <I2Cx_Init+0xb4>)
 800052a:	4b29      	ldr	r3, [pc, #164]	; (80005d0 <I2Cx_Init+0xb8>)
 800052c:	6023      	str	r3, [r4, #0]
    I2cHandle.Init.OwnAddress1 =  0x43;
 800052e:	2343      	movs	r3, #67	; 0x43
 8000530:	60e3      	str	r3, [r4, #12]
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 8000532:	4b28      	ldr	r3, [pc, #160]	; (80005d4 <I2Cx_Init+0xbc>)
 8000534:	6063      	str	r3, [r4, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000536:	2500      	movs	r5, #0
 8000538:	60a5      	str	r5, [r4, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800053a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800053e:	6123      	str	r3, [r4, #16]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 8000540:	6165      	str	r5, [r4, #20]
    I2cHandle.Init.OwnAddress2 = 0x00;
 8000542:	61a5      	str	r5, [r4, #24]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8000544:	61e5      	str	r5, [r4, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 8000546:	6225      	str	r5, [r4, #32]
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the I2C peripheral */
  AUDIO_I2Cx_CLOCK_ENABLE();
 8000548:	9501      	str	r5, [sp, #4]
 800054a:	4e23      	ldr	r6, [pc, #140]	; (80005d8 <I2Cx_Init+0xc0>)
 800054c:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800054e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000552:	6433      	str	r3, [r6, #64]	; 0x40
 8000554:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8000556:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800055a:	9301      	str	r3, [sp, #4]
 800055c:	9b01      	ldr	r3, [sp, #4]

  /* Enable SCK and SDA GPIO clocks */
  AUDIO_I2Cx_GPIO_CLK_ENABLE();
 800055e:	9502      	str	r5, [sp, #8]
 8000560:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8000562:	f043 0302 	orr.w	r3, r3, #2
 8000566:	6333      	str	r3, [r6, #48]	; 0x30
 8000568:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800056a:	f003 0302 	and.w	r3, r3, #2
 800056e:	9302      	str	r3, [sp, #8]
 8000570:	9b02      	ldr	r3, [sp, #8]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = AUDIO_I2Cx_SDA_PIN | AUDIO_I2Cx_SCL_PIN;
 8000572:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000576:	9303      	str	r3, [sp, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8000578:	2312      	movs	r3, #18
 800057a:	9304      	str	r3, [sp, #16]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800057c:	9505      	str	r5, [sp, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800057e:	2302      	movs	r3, #2
 8000580:	9306      	str	r3, [sp, #24]
  GPIO_InitStructure.Alternate = AUDIO_I2Cx_AF;
 8000582:	2304      	movs	r3, #4
 8000584:	9307      	str	r3, [sp, #28]

  HAL_GPIO_Init(AUDIO_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8000586:	a903      	add	r1, sp, #12
 8000588:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800058c:	f500 3001 	add.w	r0, r0, #132096	; 0x20400
 8000590:	f001 fae2 	bl	8001b58 <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  AUDIO_I2Cx_FORCE_RESET();
 8000594:	6a33      	ldr	r3, [r6, #32]
 8000596:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800059a:	6233      	str	r3, [r6, #32]

  /* Release the I2C peripheral clock reset */
  AUDIO_I2Cx_RELEASE_RESET();
 800059c:	6a33      	ldr	r3, [r6, #32]
 800059e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80005a2:	6233      	str	r3, [r6, #32]

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80005a4:	462a      	mov	r2, r5
 80005a6:	210f      	movs	r1, #15
 80005a8:	201f      	movs	r0, #31
 80005aa:	f001 f88d 	bl	80016c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_EV_IRQn);
 80005ae:	201f      	movs	r0, #31
 80005b0:	f001 f8c0 	bl	8001734 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 80005b4:	462a      	mov	r2, r5
 80005b6:	210f      	movs	r1, #15
 80005b8:	2020      	movs	r0, #32
 80005ba:	f001 f885 	bl	80016c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_ER_IRQn);
 80005be:	2020      	movs	r0, #32
 80005c0:	f001 f8b8 	bl	8001734 <HAL_NVIC_EnableIRQ>
    HAL_I2C_Init(&I2cHandle);
 80005c4:	4620      	mov	r0, r4
 80005c6:	f002 fb59 	bl	8002c7c <HAL_I2C_Init>
}
 80005ca:	e7ab      	b.n	8000524 <I2Cx_Init+0xc>
 80005cc:	200002b4 	.word	0x200002b4
 80005d0:	40005400 	.word	0x40005400
 80005d4:	000186a0 	.word	0x000186a0
 80005d8:	40023800 	.word	0x40023800

080005dc <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void) 
{
 80005dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005de:	b087      	sub	sp, #28
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 80005e0:	2600      	movs	r6, #0
 80005e2:	9600      	str	r6, [sp, #0]
 80005e4:	4b15      	ldr	r3, [pc, #84]	; (800063c <AUDIO_IO_Init+0x60>)
 80005e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005e8:	f042 0208 	orr.w	r2, r2, #8
 80005ec:	631a      	str	r2, [r3, #48]	; 0x30
 80005ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f0:	f003 0308 	and.w	r3, r3, #8
 80005f4:	9300      	str	r3, [sp, #0]
 80005f6:	9b00      	ldr	r3, [sp, #0]
  
  /* Audio reset pin configuration -------------------------------------------*/
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN;
 80005f8:	f44f 7580 	mov.w	r5, #256	; 0x100
 80005fc:	9501      	str	r5, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fe:	2701      	movs	r7, #1
 8000600:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000602:	2302      	movs	r3, #2
 8000604:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000606:	9603      	str	r6, [sp, #12]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);
 8000608:	4c0d      	ldr	r4, [pc, #52]	; (8000640 <AUDIO_IO_Init+0x64>)
 800060a:	a901      	add	r1, sp, #4
 800060c:	4620      	mov	r0, r4
 800060e:	f001 faa3 	bl	8001b58 <HAL_GPIO_Init>
  
  I2Cx_Init();
 8000612:	f7ff ff81 	bl	8000518 <I2Cx_Init>
  
  /* Power Down the codec */
  CODEC_AUDIO_POWER_OFF();
 8000616:	4632      	mov	r2, r6
 8000618:	4629      	mov	r1, r5
 800061a:	4620      	mov	r0, r4
 800061c:	f001 fc4e 	bl	8001ebc <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8000620:	2005      	movs	r0, #5
 8000622:	f001 f82b 	bl	800167c <HAL_Delay>
  
  /* Power on the codec */
  CODEC_AUDIO_POWER_ON();
 8000626:	463a      	mov	r2, r7
 8000628:	4629      	mov	r1, r5
 800062a:	4620      	mov	r0, r4
 800062c:	f001 fc46 	bl	8001ebc <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8000630:	2005      	movs	r0, #5
 8000632:	f001 f823 	bl	800167c <HAL_Delay>
}
 8000636:	b007      	add	sp, #28
 8000638:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800063a:	bf00      	nop
 800063c:	40023800 	.word	0x40023800
 8000640:	40020800 	.word	0x40020800

08000644 <AUDIO_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  */
void AUDIO_IO_Write (uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000644:	b500      	push	{lr}
 8000646:	b087      	sub	sp, #28
  I2Cx_WriteData(Addr, Reg, Value);
 8000648:	f88d 2017 	strb.w	r2, [sp, #23]
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 800064c:	4b0b      	ldr	r3, [pc, #44]	; (800067c <AUDIO_IO_Write+0x38>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	9302      	str	r3, [sp, #8]
 8000652:	2301      	movs	r3, #1
 8000654:	9301      	str	r3, [sp, #4]
 8000656:	f10d 0217 	add.w	r2, sp, #23
 800065a:	9200      	str	r2, [sp, #0]
 800065c:	460a      	mov	r2, r1
 800065e:	4601      	mov	r1, r0
 8000660:	4807      	ldr	r0, [pc, #28]	; (8000680 <AUDIO_IO_Write+0x3c>)
 8000662:	f002 fbe7 	bl	8002e34 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 8000666:	b910      	cbnz	r0, 800066e <AUDIO_IO_Write+0x2a>
}
 8000668:	b007      	add	sp, #28
 800066a:	f85d fb04 	ldr.w	pc, [sp], #4
  HAL_I2C_DeInit(&I2cHandle);
 800066e:	4804      	ldr	r0, [pc, #16]	; (8000680 <AUDIO_IO_Write+0x3c>)
 8000670:	f002 fbc6 	bl	8002e00 <HAL_I2C_DeInit>
  I2Cx_Init();
 8000674:	f7ff ff50 	bl	8000518 <I2Cx_Init>
}
 8000678:	e7f6      	b.n	8000668 <AUDIO_IO_Write+0x24>
 800067a:	bf00      	nop
 800067c:	20000000 	.word	0x20000000
 8000680:	200002b4 	.word	0x200002b4

08000684 <cs43l22_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8000684:	b510      	push	{r4, lr}
  uint32_t counter = 0;
  
  /* Set the Mute mode */
  if(Cmd == AUDIO_MUTE_ON)
 8000686:	2901      	cmp	r1, #1
 8000688:	d012      	beq.n	80006b0 <cs43l22_SetMute+0x2c>
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x01);
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x01);
  }
  else /* AUDIO_MUTE_OFF Disable the Mute */
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 800068a:	b2c4      	uxtb	r4, r0
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
  uint32_t result = 0;
  
  AUDIO_IO_Write(Addr, Reg, Value);
 800068c:	2200      	movs	r2, #0
 800068e:	2122      	movs	r1, #34	; 0x22
 8000690:	4620      	mov	r0, r4
 8000692:	f7ff ffd7 	bl	8000644 <AUDIO_IO_Write>
 8000696:	2200      	movs	r2, #0
 8000698:	2123      	movs	r1, #35	; 0x23
 800069a:	4620      	mov	r0, r4
 800069c:	f7ff ffd2 	bl	8000644 <AUDIO_IO_Write>
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 80006a0:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <cs43l22_SetMute+0x50>)
 80006a2:	781a      	ldrb	r2, [r3, #0]
  AUDIO_IO_Write(Addr, Reg, Value);
 80006a4:	2104      	movs	r1, #4
 80006a6:	4620      	mov	r0, r4
 80006a8:	f7ff ffcc 	bl	8000644 <AUDIO_IO_Write>
}
 80006ac:	2000      	movs	r0, #0
 80006ae:	bd10      	pop	{r4, pc}
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 80006b0:	b2c4      	uxtb	r4, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 80006b2:	22ff      	movs	r2, #255	; 0xff
 80006b4:	2104      	movs	r1, #4
 80006b6:	4620      	mov	r0, r4
 80006b8:	f7ff ffc4 	bl	8000644 <AUDIO_IO_Write>
 80006bc:	2201      	movs	r2, #1
 80006be:	2122      	movs	r1, #34	; 0x22
 80006c0:	4620      	mov	r0, r4
 80006c2:	f7ff ffbf 	bl	8000644 <AUDIO_IO_Write>
 80006c6:	2201      	movs	r2, #1
 80006c8:	2123      	movs	r1, #35	; 0x23
 80006ca:	4620      	mov	r0, r4
 80006cc:	f7ff ffba 	bl	8000644 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 80006d0:	e7ec      	b.n	80006ac <cs43l22_SetMute+0x28>
 80006d2:	bf00      	nop
 80006d4:	20000308 	.word	0x20000308

080006d8 <cs43l22_Play>:
{
 80006d8:	b538      	push	{r3, r4, r5, lr}
  if(Is_cs43l22_Stop == 1)
 80006da:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <cs43l22_Play+0x3c>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d002      	beq.n	80006e8 <cs43l22_Play+0x10>
  uint32_t counter = 0;
 80006e2:	2400      	movs	r4, #0
}
 80006e4:	4620      	mov	r0, r4
 80006e6:	bd38      	pop	{r3, r4, r5, pc}
 80006e8:	4604      	mov	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0b00000110);
 80006ea:	b2c5      	uxtb	r5, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 80006ec:	2206      	movs	r2, #6
 80006ee:	210e      	movs	r1, #14
 80006f0:	4628      	mov	r0, r5
 80006f2:	f7ff ffa7 	bl	8000644 <AUDIO_IO_Write>
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80006f6:	2100      	movs	r1, #0
 80006f8:	4620      	mov	r0, r4
 80006fa:	f7ff ffc3 	bl	8000684 <cs43l22_SetMute>
 80006fe:	4604      	mov	r4, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 8000700:	229e      	movs	r2, #158	; 0x9e
 8000702:	2102      	movs	r1, #2
 8000704:	4628      	mov	r0, r5
 8000706:	f7ff ff9d 	bl	8000644 <AUDIO_IO_Write>
    Is_cs43l22_Stop = 0;
 800070a:	4b02      	ldr	r3, [pc, #8]	; (8000714 <cs43l22_Play+0x3c>)
 800070c:	2200      	movs	r2, #0
 800070e:	701a      	strb	r2, [r3, #0]
 8000710:	e7e8      	b.n	80006e4 <cs43l22_Play+0xc>
 8000712:	bf00      	nop
 8000714:	20000004 	.word	0x20000004

08000718 <cs43l22_SetVolume>:
{
 8000718:	b538      	push	{r3, r4, r5, lr}
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19); 
 800071a:	b2c5      	uxtb	r5, r0
 800071c:	3119      	adds	r1, #25
 800071e:	b2cc      	uxtb	r4, r1
  AUDIO_IO_Write(Addr, Reg, Value);
 8000720:	4622      	mov	r2, r4
 8000722:	2120      	movs	r1, #32
 8000724:	4628      	mov	r0, r5
 8000726:	f7ff ff8d 	bl	8000644 <AUDIO_IO_Write>
 800072a:	4622      	mov	r2, r4
 800072c:	2121      	movs	r1, #33	; 0x21
 800072e:	4628      	mov	r0, r5
 8000730:	f7ff ff88 	bl	8000644 <AUDIO_IO_Write>
}
 8000734:	2000      	movs	r0, #0
 8000736:	bd38      	pop	{r3, r4, r5, pc}

08000738 <cs43l22_Init>:
{
 8000738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800073c:	4605      	mov	r5, r0
 800073e:	460e      	mov	r6, r1
 8000740:	4617      	mov	r7, r2
  AUDIO_IO_Init();     
 8000742:	f7ff ff4b 	bl	80005dc <AUDIO_IO_Init>
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
 8000746:	b2ec      	uxtb	r4, r5
  AUDIO_IO_Write(Addr, Reg, Value);
 8000748:	2201      	movs	r2, #1
 800074a:	2102      	movs	r1, #2
 800074c:	4620      	mov	r0, r4
 800074e:	f7ff ff79 	bl	8000644 <AUDIO_IO_Write>
  switch (OutputDevice)
 8000752:	1e73      	subs	r3, r6, #1
 8000754:	2b03      	cmp	r3, #3
 8000756:	d875      	bhi.n	8000844 <cs43l22_Init+0x10c>
 8000758:	e8df f003 	tbb	[pc, r3]
 800075c:	706c5402 	.word	0x706c5402
    OutputDev = 0xFA;
 8000760:	4b46      	ldr	r3, [pc, #280]	; (800087c <cs43l22_Init+0x144>)
 8000762:	22fa      	movs	r2, #250	; 0xfa
 8000764:	701a      	strb	r2, [r3, #0]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8000766:	4b45      	ldr	r3, [pc, #276]	; (800087c <cs43l22_Init+0x144>)
 8000768:	781a      	ldrb	r2, [r3, #0]
  AUDIO_IO_Write(Addr, Reg, Value);
 800076a:	2104      	movs	r1, #4
 800076c:	4620      	mov	r0, r4
 800076e:	f7ff ff69 	bl	8000644 <AUDIO_IO_Write>
 8000772:	2281      	movs	r2, #129	; 0x81
 8000774:	2105      	movs	r1, #5
 8000776:	4620      	mov	r0, r4
 8000778:	f7ff ff64 	bl	8000644 <AUDIO_IO_Write>
 800077c:	2204      	movs	r2, #4
 800077e:	2106      	movs	r1, #6
 8000780:	4620      	mov	r0, r4
 8000782:	f7ff ff5f 	bl	8000644 <AUDIO_IO_Write>
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8000786:	4639      	mov	r1, r7
 8000788:	4628      	mov	r0, r5
 800078a:	f7ff ffc5 	bl	8000718 <cs43l22_SetVolume>
 800078e:	4605      	mov	r5, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 8000790:	2206      	movs	r2, #6
 8000792:	210f      	movs	r1, #15
 8000794:	4620      	mov	r0, r4
 8000796:	f7ff ff55 	bl	8000644 <AUDIO_IO_Write>
 800079a:	2200      	movs	r2, #0
 800079c:	2124      	movs	r1, #36	; 0x24
 800079e:	4620      	mov	r0, r4
 80007a0:	f7ff ff50 	bl	8000644 <AUDIO_IO_Write>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2125      	movs	r1, #37	; 0x25
 80007a8:	4620      	mov	r0, r4
 80007aa:	f7ff ff4b 	bl	8000644 <AUDIO_IO_Write>
 80007ae:	2200      	movs	r2, #0
 80007b0:	210a      	movs	r1, #10
 80007b2:	4620      	mov	r0, r4
 80007b4:	f7ff ff46 	bl	8000644 <AUDIO_IO_Write>
 80007b8:	2204      	movs	r2, #4
 80007ba:	210e      	movs	r1, #14
 80007bc:	4620      	mov	r0, r4
 80007be:	f7ff ff41 	bl	8000644 <AUDIO_IO_Write>
 80007c2:	2200      	movs	r2, #0
 80007c4:	2127      	movs	r1, #39	; 0x27
 80007c6:	4620      	mov	r0, r4
 80007c8:	f7ff ff3c 	bl	8000644 <AUDIO_IO_Write>
 80007cc:	220f      	movs	r2, #15
 80007ce:	211f      	movs	r1, #31
 80007d0:	4620      	mov	r0, r4
 80007d2:	f7ff ff37 	bl	8000644 <AUDIO_IO_Write>
 80007d6:	220a      	movs	r2, #10
 80007d8:	211a      	movs	r1, #26
 80007da:	4620      	mov	r0, r4
 80007dc:	f7ff ff32 	bl	8000644 <AUDIO_IO_Write>
 80007e0:	220a      	movs	r2, #10
 80007e2:	211b      	movs	r1, #27
 80007e4:	4620      	mov	r0, r4
 80007e6:	f7ff ff2d 	bl	8000644 <AUDIO_IO_Write>
 80007ea:	2200      	movs	r2, #0
 80007ec:	2108      	movs	r1, #8
 80007ee:	4620      	mov	r0, r4
 80007f0:	f7ff ff28 	bl	8000644 <AUDIO_IO_Write>
 80007f4:	2200      	movs	r2, #0
 80007f6:	2108      	movs	r1, #8
 80007f8:	4620      	mov	r0, r4
 80007fa:	f7ff ff23 	bl	8000644 <AUDIO_IO_Write>
}
 80007fe:	4628      	mov	r0, r5
 8000800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    OutputDev = 0xAF;
 8000804:	4b1d      	ldr	r3, [pc, #116]	; (800087c <cs43l22_Init+0x144>)
 8000806:	22af      	movs	r2, #175	; 0xaf
 8000808:	701a      	strb	r2, [r3, #0]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 800080a:	781a      	ldrb	r2, [r3, #0]
  AUDIO_IO_Write(Addr, Reg, Value);
 800080c:	2104      	movs	r1, #4
 800080e:	4620      	mov	r0, r4
 8000810:	f7ff ff18 	bl	8000644 <AUDIO_IO_Write>
 8000814:	2281      	movs	r2, #129	; 0x81
 8000816:	2105      	movs	r1, #5
 8000818:	4620      	mov	r0, r4
 800081a:	f7ff ff13 	bl	8000644 <AUDIO_IO_Write>
 800081e:	2204      	movs	r2, #4
 8000820:	2106      	movs	r1, #6
 8000822:	4620      	mov	r0, r4
 8000824:	f7ff ff0e 	bl	8000644 <AUDIO_IO_Write>
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8000828:	4639      	mov	r1, r7
 800082a:	4628      	mov	r0, r5
 800082c:	f7ff ff74 	bl	8000718 <cs43l22_SetVolume>
 8000830:	4605      	mov	r5, r0
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 8000832:	e7bc      	b.n	80007ae <cs43l22_Init+0x76>
    OutputDev = 0xAA;
 8000834:	4b11      	ldr	r3, [pc, #68]	; (800087c <cs43l22_Init+0x144>)
 8000836:	22aa      	movs	r2, #170	; 0xaa
 8000838:	701a      	strb	r2, [r3, #0]
    break;
 800083a:	e794      	b.n	8000766 <cs43l22_Init+0x2e>
    OutputDev = 0x05;
 800083c:	4b0f      	ldr	r3, [pc, #60]	; (800087c <cs43l22_Init+0x144>)
 800083e:	2205      	movs	r2, #5
 8000840:	701a      	strb	r2, [r3, #0]
    break;    
 8000842:	e790      	b.n	8000766 <cs43l22_Init+0x2e>
    OutputDev = 0x05;
 8000844:	4b0d      	ldr	r3, [pc, #52]	; (800087c <cs43l22_Init+0x144>)
 8000846:	f04f 0805 	mov.w	r8, #5
 800084a:	f883 8000 	strb.w	r8, [r3]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 800084e:	781a      	ldrb	r2, [r3, #0]
  AUDIO_IO_Write(Addr, Reg, Value);
 8000850:	2104      	movs	r1, #4
 8000852:	4620      	mov	r0, r4
 8000854:	f7ff fef6 	bl	8000644 <AUDIO_IO_Write>
 8000858:	2281      	movs	r2, #129	; 0x81
 800085a:	4641      	mov	r1, r8
 800085c:	4620      	mov	r0, r4
 800085e:	f7ff fef1 	bl	8000644 <AUDIO_IO_Write>
 8000862:	2204      	movs	r2, #4
 8000864:	2106      	movs	r1, #6
 8000866:	4620      	mov	r0, r4
 8000868:	f7ff feec 	bl	8000644 <AUDIO_IO_Write>
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 800086c:	4639      	mov	r1, r7
 800086e:	4628      	mov	r0, r5
 8000870:	f7ff ff52 	bl	8000718 <cs43l22_SetVolume>
 8000874:	4605      	mov	r5, r0
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 8000876:	2e02      	cmp	r6, #2
 8000878:	d099      	beq.n	80007ae <cs43l22_Init+0x76>
 800087a:	e789      	b.n	8000790 <cs43l22_Init+0x58>
 800087c:	20000308 	.word	0x20000308

08000880 <HAL_UART_RxHalfCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8000880:	b510      	push	{r4, lr}
	UNUSED(huart);
	memcpy(&(hcommander.in_command), hcommander.uart_rx_buffer, COMMAND_BYTESIZE);
 8000882:	4c06      	ldr	r4, [pc, #24]	; (800089c <HAL_UART_RxHalfCpltCallback+0x1c>)
 8000884:	f240 1203 	movw	r2, #259	; 0x103
 8000888:	f104 0108 	add.w	r1, r4, #8
 800088c:	f504 7004 	add.w	r0, r4, #528	; 0x210
 8000890:	f008 fdd2 	bl	8009438 <memcpy>
	hcommander.command_to_process = 1;
 8000894:	2301      	movs	r3, #1
 8000896:	f884 341d 	strb.w	r3, [r4, #1053]	; 0x41d
}
 800089a:	bd10      	pop	{r4, pc}
 800089c:	20000468 	.word	0x20000468

080008a0 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80008a0:	b510      	push	{r4, lr}
	UNUSED(huart);
	memcpy(&(hcommander.in_command), hcommander.uart_rx_buffer + COMMAND_BYTESIZE, COMMAND_BYTESIZE);
 80008a2:	4c06      	ldr	r4, [pc, #24]	; (80008bc <HAL_UART_RxCpltCallback+0x1c>)
 80008a4:	f240 1203 	movw	r2, #259	; 0x103
 80008a8:	f204 110b 	addw	r1, r4, #267	; 0x10b
 80008ac:	f504 7004 	add.w	r0, r4, #528	; 0x210
 80008b0:	f008 fdc2 	bl	8009438 <memcpy>
	hcommander.command_to_process = 1;
 80008b4:	2301      	movs	r3, #1
 80008b6:	f884 341d 	strb.w	r3, [r4, #1053]	; 0x41d
}
 80008ba:	bd10      	pop	{r4, pc}
 80008bc:	20000468 	.word	0x20000468

080008c0 <usb_save>:


uint8_t usb_save() {
 80008c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	res = f_open(&pbFile, "A.PB", FA_WRITE | FA_CREATE_ALWAYS);
 80008c4:	220a      	movs	r2, #10
 80008c6:	4915      	ldr	r1, [pc, #84]	; (800091c <usb_save+0x5c>)
 80008c8:	4815      	ldr	r0, [pc, #84]	; (8000920 <usb_save+0x60>)
 80008ca:	f007 fc3f 	bl	800814c <f_open>
 80008ce:	4b15      	ldr	r3, [pc, #84]	; (8000924 <usb_save+0x64>)
 80008d0:	7018      	strb	r0, [r3, #0]
	if (res != FR_OK) return 0;
 80008d2:	b9f8      	cbnz	r0, 8000914 <usb_save+0x54>
 80008d4:	4605      	mov	r5, r0
 80008d6:	4c14      	ldr	r4, [pc, #80]	; (8000928 <usb_save+0x68>)
 80008d8:	f504 7964 	add.w	r9, r4, #912	; 0x390

	for (uint8_t i = 0; i < MAX_PEDALS_COUNT; i++) {
		res = f_write(&pbFile, (const void *)hpedalboard.pedals[i].pedal_raw, RAW_PEDAL_SIZE, &byteswritten);
 80008dc:	4e13      	ldr	r6, [pc, #76]	; (800092c <usb_save+0x6c>)
 80008de:	f8df 8040 	ldr.w	r8, [pc, #64]	; 8000920 <usb_save+0x60>
 80008e2:	461f      	mov	r7, r3
 80008e4:	4633      	mov	r3, r6
 80008e6:	2291      	movs	r2, #145	; 0x91
 80008e8:	4621      	mov	r1, r4
 80008ea:	4640      	mov	r0, r8
 80008ec:	f007 fe43 	bl	8008576 <f_write>
 80008f0:	7038      	strb	r0, [r7, #0]
		if((res != FR_OK) || (byteswritten == 0)) return 0;
 80008f2:	b960      	cbnz	r0, 800090e <usb_save+0x4e>
 80008f4:	6833      	ldr	r3, [r6, #0]
 80008f6:	b17b      	cbz	r3, 8000918 <usb_save+0x58>
	for (uint8_t i = 0; i < MAX_PEDALS_COUNT; i++) {
 80008f8:	3498      	adds	r4, #152	; 0x98
 80008fa:	454c      	cmp	r4, r9
 80008fc:	d1f2      	bne.n	80008e4 <usb_save+0x24>
	}

	res = f_close(&pbFile);
 80008fe:	4808      	ldr	r0, [pc, #32]	; (8000920 <usb_save+0x60>)
 8000900:	f007 ff7c 	bl	80087fc <f_close>
 8000904:	4b07      	ldr	r3, [pc, #28]	; (8000924 <usb_save+0x64>)
 8000906:	7018      	strb	r0, [r3, #0]
	if (res != FR_OK) return 0;
 8000908:	fab0 f580 	clz	r5, r0
 800090c:	096d      	lsrs	r5, r5, #5
	if (res != FR_OK) return 0;
	return 1;
}
 800090e:	4628      	mov	r0, r5
 8000910:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (res != FR_OK) return 0;
 8000914:	2500      	movs	r5, #0
 8000916:	e7fa      	b.n	800090e <usb_save+0x4e>
		if((res != FR_OK) || (byteswritten == 0)) return 0;
 8000918:	4605      	mov	r5, r0
 800091a:	e7f8      	b.n	800090e <usb_save+0x4e>
 800091c:	0800984c 	.word	0x0800984c
 8000920:	20000e68 	.word	0x20000e68
 8000924:	20001e98 	.word	0x20001e98
 8000928:	20000a90 	.word	0x20000a90
 800092c:	20000460 	.word	0x20000460

08000930 <usb_load>:

uint8_t usb_load() {
 8000930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	res = f_open(&pbFile, "A.PB", FA_READ);
 8000934:	2201      	movs	r2, #1
 8000936:	491a      	ldr	r1, [pc, #104]	; (80009a0 <usb_load+0x70>)
 8000938:	481a      	ldr	r0, [pc, #104]	; (80009a4 <usb_load+0x74>)
 800093a:	f007 fc07 	bl	800814c <f_open>
 800093e:	4b1a      	ldr	r3, [pc, #104]	; (80009a8 <usb_load+0x78>)
 8000940:	7018      	strb	r0, [r3, #0]
	if (res != FR_OK) return 0;
 8000942:	bb48      	cbnz	r0, 8000998 <usb_load+0x68>
 8000944:	4606      	mov	r6, r0
 8000946:	4d19      	ldr	r5, [pc, #100]	; (80009ac <usb_load+0x7c>)

	for (uint8_t i = 0; i < MAX_PEDALS_COUNT; i++) {
 8000948:	4604      	mov	r4, r0
		res = f_read(&pbFile, (uint8_t*)hpedalboard.pedals[i].pedal_raw, RAW_PEDAL_SIZE, &bytesread);
 800094a:	f8df 8064 	ldr.w	r8, [pc, #100]	; 80009b0 <usb_load+0x80>
 800094e:	f8df 9054 	ldr.w	r9, [pc, #84]	; 80009a4 <usb_load+0x74>
 8000952:	461f      	mov	r7, r3
 8000954:	4643      	mov	r3, r8
 8000956:	2291      	movs	r2, #145	; 0x91
 8000958:	4629      	mov	r1, r5
 800095a:	4648      	mov	r0, r9
 800095c:	f007 fd2a 	bl	80083b4 <f_read>
 8000960:	7038      	strb	r0, [r7, #0]
		Pedalboard_SetPedal(&hpedalboard, hpedalboard.pedals[i].pedal_formatted.type, i, UPDATE);
 8000962:	2301      	movs	r3, #1
 8000964:	4622      	mov	r2, r4
 8000966:	7829      	ldrb	r1, [r5, #0]
 8000968:	4810      	ldr	r0, [pc, #64]	; (80009ac <usb_load+0x7c>)
 800096a:	f008 fb21 	bl	8008fb0 <Pedalboard_SetPedal>
		if((res != FR_OK) || (bytesread == 0)) return 0;
 800096e:	783b      	ldrb	r3, [r7, #0]
 8000970:	b97b      	cbnz	r3, 8000992 <usb_load+0x62>
 8000972:	f8d8 2000 	ldr.w	r2, [r8]
 8000976:	b18a      	cbz	r2, 800099c <usb_load+0x6c>
	for (uint8_t i = 0; i < MAX_PEDALS_COUNT; i++) {
 8000978:	3401      	adds	r4, #1
 800097a:	b2e4      	uxtb	r4, r4
 800097c:	3598      	adds	r5, #152	; 0x98
 800097e:	2c06      	cmp	r4, #6
 8000980:	d1e8      	bne.n	8000954 <usb_load+0x24>
	}

	res = f_close(&pbFile);
 8000982:	4808      	ldr	r0, [pc, #32]	; (80009a4 <usb_load+0x74>)
 8000984:	f007 ff3a 	bl	80087fc <f_close>
 8000988:	4b07      	ldr	r3, [pc, #28]	; (80009a8 <usb_load+0x78>)
 800098a:	7018      	strb	r0, [r3, #0]
	if (res != FR_OK) return 0;
 800098c:	fab0 f680 	clz	r6, r0
 8000990:	0976      	lsrs	r6, r6, #5

	//Close file
	f_close(&myFile);
	return 1;  // success
	 */
}
 8000992:	4630      	mov	r0, r6
 8000994:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (res != FR_OK) return 0;
 8000998:	2600      	movs	r6, #0
 800099a:	e7fa      	b.n	8000992 <usb_load+0x62>
		if((res != FR_OK) || (bytesread == 0)) return 0;
 800099c:	461e      	mov	r6, r3
 800099e:	e7f8      	b.n	8000992 <usb_load+0x62>
 80009a0:	0800984c 	.word	0x0800984c
 80009a4:	20000e68 	.word	0x20000e68
 80009a8:	20001e98 	.word	0x20001e98
 80009ac:	20000a90 	.word	0x20000a90
 80009b0:	2000045c 	.word	0x2000045c

080009b4 <command_callback>:

void command_callback() {
 80009b4:	b570      	push	{r4, r5, r6, lr}

	Command *in_command = &(hcommander.in_command);
	Command *out_command = &(hcommander.out_command);

	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80009b6:	4c63      	ldr	r4, [pc, #396]	; (8000b44 <command_callback+0x190>)
 80009b8:	2201      	movs	r2, #1
 80009ba:	2108      	movs	r1, #8
 80009bc:	4620      	mov	r0, r4
 80009be:	f001 fa7d 	bl	8001ebc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80009c2:	2201      	movs	r2, #1
 80009c4:	2110      	movs	r1, #16
 80009c6:	4620      	mov	r0, r4
 80009c8:	f001 fa78 	bl	8001ebc <HAL_GPIO_WritePin>

	if (in_command->header < PAGE_COUNT && in_command->subheader < MAX_PEDALS_COUNT) {
 80009cc:	4b5e      	ldr	r3, [pc, #376]	; (8000b48 <command_callback+0x194>)
 80009ce:	f893 3210 	ldrb.w	r3, [r3, #528]	; 0x210
 80009d2:	2b05      	cmp	r3, #5
 80009d4:	f200 809f 	bhi.w	8000b16 <command_callback+0x162>
 80009d8:	4a5b      	ldr	r2, [pc, #364]	; (8000b48 <command_callback+0x194>)
 80009da:	f892 2211 	ldrb.w	r2, [r2, #529]	; 0x211
 80009de:	2a05      	cmp	r2, #5
 80009e0:	f200 8099 	bhi.w	8000b16 <command_callback+0x162>

		out_command->header = in_command->header;
 80009e4:	4958      	ldr	r1, [pc, #352]	; (8000b48 <command_callback+0x194>)
 80009e6:	f881 3314 	strb.w	r3, [r1, #788]	; 0x314
		out_command->subheader = in_command->subheader;
 80009ea:	f881 2315 	strb.w	r2, [r1, #789]	; 0x315
		out_command->param = in_command->param;
 80009ee:	f891 4212 	ldrb.w	r4, [r1, #530]	; 0x212
 80009f2:	f881 4316 	strb.w	r4, [r1, #790]	; 0x316

		if (in_command->header == OVERVIEW) {
 80009f6:	b193      	cbz	r3, 8000a1e <command_callback+0x6a>

			// in_command->subheader == FIRST
			memcpy(out_command->payload.bytes, hpedalboard.pedals[in_command->param].pedal_raw, RAW_PEDAL_SIZE);
			Commander_Send(&hcommander);

		} else if (in_command->header == PLOT) {
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d01e      	beq.n	8000a3a <command_callback+0x86>
			while (signal_index < SIGNAL_SIZE);
			memcpy(out_command->payload.bytes, signal_in, SIGNAL_SIZE);
			memcpy(out_command->payload.bytes + SIGNAL_SIZE, signal_out, SIGNAL_SIZE);
			Commander_Send(&hcommander);

		} else if (in_command->header == EDIT) {
 80009fc:	2b02      	cmp	r3, #2
 80009fe:	d042      	beq.n	8000a86 <command_callback+0xd2>
				memcpy(hpedalboard.pedals[in_command->param].pedal_raw + 1, in_command->payload.bytes + 1, RAW_PEDAL_SIZE - 1);
				Pedalboard_SetPedal(&hpedalboard, in_command->payload.bytes[0], in_command->param, UPDATE);
				Commander_Send(&hcommander);
			}

		} else if (in_command->header == MODE) {
 8000a00:	2b03      	cmp	r3, #3
 8000a02:	d065      	beq.n	8000ad0 <command_callback+0x11c>
				mode = in_command->param;
			}
			out_command->param = mode;
			Commander_Send(&hcommander);

		}  else if (in_command->header == TUNER) {
 8000a04:	2b04      	cmp	r3, #4
 8000a06:	d06f      	beq.n	8000ae8 <command_callback+0x134>
			Commander_Send(&hcommander);

		}  else if (in_command->header == FILES) {

			// in_command->subheader == FIRST || in_command->subheader == PERIODIC
			out_command->param = usb_ready;
 8000a08:	4b50      	ldr	r3, [pc, #320]	; (8000b4c <command_callback+0x198>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	494e      	ldr	r1, [pc, #312]	; (8000b48 <command_callback+0x194>)
 8000a0e:	f881 3316 	strb.w	r3, [r1, #790]	; 0x316
			if (in_command->subheader == USER) {
 8000a12:	2a02      	cmp	r2, #2
 8000a14:	d06c      	beq.n	8000af0 <command_callback+0x13c>
					} else {
						out_command->param = usb_load();
					}
				}
			}
			Commander_Send(&hcommander);
 8000a16:	484c      	ldr	r0, [pc, #304]	; (8000b48 <command_callback+0x194>)
 8000a18:	f008 f93f 	bl	8008c9a <Commander_Send>
 8000a1c:	e086      	b.n	8000b2c <command_callback+0x178>
			memcpy(out_command->payload.bytes, hpedalboard.pedals[in_command->param].pedal_raw, RAW_PEDAL_SIZE);
 8000a1e:	460d      	mov	r5, r1
 8000a20:	2291      	movs	r2, #145	; 0x91
 8000a22:	4b4b      	ldr	r3, [pc, #300]	; (8000b50 <command_callback+0x19c>)
 8000a24:	2198      	movs	r1, #152	; 0x98
 8000a26:	fb01 3104 	mla	r1, r1, r4, r3
 8000a2a:	f505 7046 	add.w	r0, r5, #792	; 0x318
 8000a2e:	f008 fd03 	bl	8009438 <memcpy>
			Commander_Send(&hcommander);
 8000a32:	4628      	mov	r0, r5
 8000a34:	f008 f931 	bl	8008c9a <Commander_Send>
 8000a38:	e078      	b.n	8000b2c <command_callback+0x178>
			plot_xscale = in_command->payload.bytes[0] ? in_command->payload.bytes[0] : 1;
 8000a3a:	4a43      	ldr	r2, [pc, #268]	; (8000b48 <command_callback+0x194>)
 8000a3c:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	bf38      	it	cc
 8000a44:	2301      	movcc	r3, #1
 8000a46:	4943      	ldr	r1, [pc, #268]	; (8000b54 <command_callback+0x1a0>)
 8000a48:	700b      	strb	r3, [r1, #0]
			plot_yscale = in_command->payload.bytes[1];
 8000a4a:	f892 2215 	ldrb.w	r2, [r2, #533]	; 0x215
 8000a4e:	4b42      	ldr	r3, [pc, #264]	; (8000b58 <command_callback+0x1a4>)
 8000a50:	701a      	strb	r2, [r3, #0]
			signal_index = 0;
 8000a52:	4b42      	ldr	r3, [pc, #264]	; (8000b5c <command_callback+0x1a8>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	801a      	strh	r2, [r3, #0]
			while (signal_index < SIGNAL_SIZE);
 8000a58:	461a      	mov	r2, r3
 8000a5a:	8813      	ldrh	r3, [r2, #0]
 8000a5c:	b29b      	uxth	r3, r3
 8000a5e:	2b7f      	cmp	r3, #127	; 0x7f
 8000a60:	d9fb      	bls.n	8000a5a <command_callback+0xa6>
			memcpy(out_command->payload.bytes, signal_in, SIGNAL_SIZE);
 8000a62:	4c39      	ldr	r4, [pc, #228]	; (8000b48 <command_callback+0x194>)
 8000a64:	2580      	movs	r5, #128	; 0x80
 8000a66:	462a      	mov	r2, r5
 8000a68:	493d      	ldr	r1, [pc, #244]	; (8000b60 <command_callback+0x1ac>)
 8000a6a:	f504 7046 	add.w	r0, r4, #792	; 0x318
 8000a6e:	f008 fce3 	bl	8009438 <memcpy>
			memcpy(out_command->payload.bytes + SIGNAL_SIZE, signal_out, SIGNAL_SIZE);
 8000a72:	462a      	mov	r2, r5
 8000a74:	493b      	ldr	r1, [pc, #236]	; (8000b64 <command_callback+0x1b0>)
 8000a76:	f504 7066 	add.w	r0, r4, #920	; 0x398
 8000a7a:	f008 fcdd 	bl	8009438 <memcpy>
			Commander_Send(&hcommander);
 8000a7e:	4620      	mov	r0, r4
 8000a80:	f008 f90b 	bl	8008c9a <Commander_Send>
 8000a84:	e052      	b.n	8000b2c <command_callback+0x178>
			if (in_command->subheader == FIRST) {
 8000a86:	b96a      	cbnz	r2, 8000aa4 <command_callback+0xf0>
				memcpy(out_command->payload.bytes, hpedalboard.pedals[in_command->param].pedal_raw, RAW_PEDAL_SIZE);
 8000a88:	4d2f      	ldr	r5, [pc, #188]	; (8000b48 <command_callback+0x194>)
 8000a8a:	2291      	movs	r2, #145	; 0x91
 8000a8c:	4b30      	ldr	r3, [pc, #192]	; (8000b50 <command_callback+0x19c>)
 8000a8e:	2198      	movs	r1, #152	; 0x98
 8000a90:	fb01 3104 	mla	r1, r1, r4, r3
 8000a94:	f505 7046 	add.w	r0, r5, #792	; 0x318
 8000a98:	f008 fcce 	bl	8009438 <memcpy>
				Commander_Send(&hcommander);
 8000a9c:	4628      	mov	r0, r5
 8000a9e:	f008 f8fc 	bl	8008c9a <Commander_Send>
 8000aa2:	e043      	b.n	8000b2c <command_callback+0x178>
				memcpy(hpedalboard.pedals[in_command->param].pedal_raw + 1, in_command->payload.bytes + 1, RAW_PEDAL_SIZE - 1);
 8000aa4:	4e2a      	ldr	r6, [pc, #168]	; (8000b50 <command_callback+0x19c>)
 8000aa6:	2098      	movs	r0, #152	; 0x98
 8000aa8:	fb00 6004 	mla	r0, r0, r4, r6
 8000aac:	4d26      	ldr	r5, [pc, #152]	; (8000b48 <command_callback+0x194>)
 8000aae:	2290      	movs	r2, #144	; 0x90
 8000ab0:	f205 2115 	addw	r1, r5, #533	; 0x215
 8000ab4:	3001      	adds	r0, #1
 8000ab6:	f008 fcbf 	bl	8009438 <memcpy>
				Pedalboard_SetPedal(&hpedalboard, in_command->payload.bytes[0], in_command->param, UPDATE);
 8000aba:	2301      	movs	r3, #1
 8000abc:	4622      	mov	r2, r4
 8000abe:	f895 1214 	ldrb.w	r1, [r5, #532]	; 0x214
 8000ac2:	4630      	mov	r0, r6
 8000ac4:	f008 fa74 	bl	8008fb0 <Pedalboard_SetPedal>
				Commander_Send(&hcommander);
 8000ac8:	4628      	mov	r0, r5
 8000aca:	f008 f8e6 	bl	8008c9a <Commander_Send>
 8000ace:	e02d      	b.n	8000b2c <command_callback+0x178>
			if (in_command->subheader == USER) {
 8000ad0:	2a02      	cmp	r2, #2
				mode = in_command->param;
 8000ad2:	bf04      	itt	eq
 8000ad4:	4b24      	ldreq	r3, [pc, #144]	; (8000b68 <command_callback+0x1b4>)
 8000ad6:	701c      	strbeq	r4, [r3, #0]
			out_command->param = mode;
 8000ad8:	481b      	ldr	r0, [pc, #108]	; (8000b48 <command_callback+0x194>)
 8000ada:	4b23      	ldr	r3, [pc, #140]	; (8000b68 <command_callback+0x1b4>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	f880 3316 	strb.w	r3, [r0, #790]	; 0x316
			Commander_Send(&hcommander);
 8000ae2:	f008 f8da 	bl	8008c9a <Commander_Send>
 8000ae6:	e021      	b.n	8000b2c <command_callback+0x178>
			Commander_Send(&hcommander);
 8000ae8:	4817      	ldr	r0, [pc, #92]	; (8000b48 <command_callback+0x194>)
 8000aea:	f008 f8d6 	bl	8008c9a <Commander_Send>
 8000aee:	e01d      	b.n	8000b2c <command_callback+0x178>
				if (usb_ready) {
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d090      	beq.n	8000a16 <command_callback+0x62>
					out_command->param = 0;
 8000af4:	2200      	movs	r2, #0
 8000af6:	f881 2316 	strb.w	r2, [r1, #790]	; 0x316
					if (in_command->param == 1) {
 8000afa:	2c01      	cmp	r4, #1
 8000afc:	d005      	beq.n	8000b0a <command_callback+0x156>
						out_command->param = usb_load();
 8000afe:	f7ff ff17 	bl	8000930 <usb_load>
 8000b02:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <command_callback+0x194>)
 8000b04:	f883 0316 	strb.w	r0, [r3, #790]	; 0x316
 8000b08:	e785      	b.n	8000a16 <command_callback+0x62>
						out_command->param = usb_save();
 8000b0a:	f7ff fed9 	bl	80008c0 <usb_save>
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <command_callback+0x194>)
 8000b10:	f883 0316 	strb.w	r0, [r3, #790]	; 0x316
 8000b14:	e77f      	b.n	8000a16 <command_callback+0x62>
		}

	} else {

		// surely faulty command
		Commander_Pause(&hcommander);
 8000b16:	4c0c      	ldr	r4, [pc, #48]	; (8000b48 <command_callback+0x194>)
 8000b18:	4620      	mov	r0, r4
 8000b1a:	f008 f8b4 	bl	8008c86 <Commander_Pause>
		HAL_Delay(5000);
 8000b1e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000b22:	f000 fdab 	bl	800167c <HAL_Delay>
		Commander_Resume(&hcommander);
 8000b26:	4620      	mov	r0, r4
 8000b28:	f008 f8b2 	bl	8008c90 <Commander_Resume>
	}

	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000b2c:	4c05      	ldr	r4, [pc, #20]	; (8000b44 <command_callback+0x190>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2108      	movs	r1, #8
 8000b32:	4620      	mov	r0, r4
 8000b34:	f001 f9c2 	bl	8001ebc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	2110      	movs	r1, #16
 8000b3c:	4620      	mov	r0, r4
 8000b3e:	f001 f9bd 	bl	8001ebc <HAL_GPIO_WritePin>
}
 8000b42:	bd70      	pop	{r4, r5, r6, pc}
 8000b44:	40020c00 	.word	0x40020c00
 8000b48:	20000468 	.word	0x20000468
 8000b4c:	20002fdd 	.word	0x20002fdd
 8000b50:	20000a90 	.word	0x20000a90
 8000b54:	20000005 	.word	0x20000005
 8000b58:	20000006 	.word	0x20000006
 8000b5c:	20001f1c 	.word	0x20001f1c
 8000b60:	20001e9c 	.word	0x20001e9c
 8000b64:	20001f20 	.word	0x20001f20
 8000b68:	20000e64 	.word	0x20000e64

08000b6c <DSP>:
// 0 medium significant byte
// 1 most significant byte
// 2 empty byte
// 3 least significant byte

void DSP(uint8_t * buf, int16_t * out) {
 8000b6c:	b530      	push	{r4, r5, lr}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	460d      	mov	r5, r1

	// RAW (int16) and OUT (int16*) are input and output

	// conversion of terrible adc i2s frame
	uint32_t adc = 0x00000000 + (buf[1]<<24) + (buf[0]<<16) + (buf[3]<<8);
 8000b72:	7843      	ldrb	r3, [r0, #1]
 8000b74:	7804      	ldrb	r4, [r0, #0]
 8000b76:	0424      	lsls	r4, r4, #16
 8000b78:	eb04 6403 	add.w	r4, r4, r3, lsl #24

	// cutting 24bits on 32bits frame to 16bits
	int16_t raw = (adc >> 16);
 8000b7c:	1424      	asrs	r4, r4, #16

	// casting 16bits to 32bits float
	// this leaves room for dsp operations
	// that requires additional precision
	float mid = (float)raw;
 8000b7e:	ee07 4a90 	vmov	s15, r4
 8000b82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b86:	edcd 7a01 	vstr	s15, [sp, #4]

	// processing intermediate value
	Pedalboard_Process(&hpedalboard, &mid);
 8000b8a:	a901      	add	r1, sp, #4
 8000b8c:	481b      	ldr	r0, [pc, #108]	; (8000bfc <DSP+0x90>)
 8000b8e:	f008 fac4 	bl	800911a <Pedalboard_Process>

	// casting float to 16bits
	*out = (int16_t)mid;
 8000b92:	eddd 7a01 	vldr	s15, [sp, #4]
 8000b96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b9a:	ee17 3a90 	vmov	r3, s15
 8000b9e:	802b      	strh	r3, [r5, #0]

	// saving for debugging thingies
	if (signal_index < SIGNAL_SIZE && signal_samples % plot_xscale == 0) {
 8000ba0:	4b17      	ldr	r3, [pc, #92]	; (8000c00 <DSP+0x94>)
 8000ba2:	881b      	ldrh	r3, [r3, #0]
 8000ba4:	b29b      	uxth	r3, r3
 8000ba6:	2b7f      	cmp	r3, #127	; 0x7f
 8000ba8:	d821      	bhi.n	8000bee <DSP+0x82>
 8000baa:	4b16      	ldr	r3, [pc, #88]	; (8000c04 <DSP+0x98>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a16      	ldr	r2, [pc, #88]	; (8000c08 <DSP+0x9c>)
 8000bb0:	7812      	ldrb	r2, [r2, #0]
 8000bb2:	b2d2      	uxtb	r2, r2
 8000bb4:	fbb3 f1f2 	udiv	r1, r3, r2
 8000bb8:	fb02 3311 	mls	r3, r2, r1, r3
 8000bbc:	b9bb      	cbnz	r3, 8000bee <DSP+0x82>
		signal_in[signal_index] = (raw * plot_yscale) >> 8;
 8000bbe:	4913      	ldr	r1, [pc, #76]	; (8000c0c <DSP+0xa0>)
 8000bc0:	7808      	ldrb	r0, [r1, #0]
 8000bc2:	4a0f      	ldr	r2, [pc, #60]	; (8000c00 <DSP+0x94>)
 8000bc4:	8813      	ldrh	r3, [r2, #0]
 8000bc6:	b29b      	uxth	r3, r3
 8000bc8:	fb00 f404 	mul.w	r4, r0, r4
 8000bcc:	1224      	asrs	r4, r4, #8
 8000bce:	4810      	ldr	r0, [pc, #64]	; (8000c10 <DSP+0xa4>)
 8000bd0:	54c4      	strb	r4, [r0, r3]
		signal_out[signal_index] = (*out * plot_yscale) >> 8;
 8000bd2:	7808      	ldrb	r0, [r1, #0]
 8000bd4:	8811      	ldrh	r1, [r2, #0]
 8000bd6:	b289      	uxth	r1, r1
 8000bd8:	f9b5 3000 	ldrsh.w	r3, [r5]
 8000bdc:	fb00 f303 	mul.w	r3, r0, r3
 8000be0:	121b      	asrs	r3, r3, #8
 8000be2:	480c      	ldr	r0, [pc, #48]	; (8000c14 <DSP+0xa8>)
 8000be4:	5443      	strb	r3, [r0, r1]
		signal_index++;
 8000be6:	8813      	ldrh	r3, [r2, #0]
 8000be8:	3301      	adds	r3, #1
 8000bea:	b29b      	uxth	r3, r3
 8000bec:	8013      	strh	r3, [r2, #0]
	}
	signal_samples++;
 8000bee:	4a05      	ldr	r2, [pc, #20]	; (8000c04 <DSP+0x98>)
 8000bf0:	6813      	ldr	r3, [r2, #0]
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	6013      	str	r3, [r2, #0]
}
 8000bf6:	b003      	add	sp, #12
 8000bf8:	bd30      	pop	{r4, r5, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20000a90 	.word	0x20000a90
 8000c00:	20001f1c 	.word	0x20001f1c
 8000c04:	20001fa0 	.word	0x20001fa0
 8000c08:	20000005 	.word	0x20000005
 8000c0c:	20000006 	.word	0x20000006
 8000c10:	20001e9c 	.word	0x20001e9c
 8000c14:	20001f20 	.word	0x20001f20

08000c18 <Mode_N_DSP>:
// TS: Tip Sleeve
// TRS: Tip Ring Sleeve
// TIP is RIGHT
// RING is LEFT

void Mode_N_DSP(uint8_t * buf_tip, uint8_t * buf_ring, int16_t * out_tip, int16_t * out_ring) {
 8000c18:	b570      	push	{r4, r5, r6, lr}
 8000c1a:	4615      	mov	r5, r2
 8000c1c:	461e      	mov	r6, r3

	if (mode == TS_TO_TS) {
 8000c1e:	4a25      	ldr	r2, [pc, #148]	; (8000cb4 <Mode_N_DSP+0x9c>)
 8000c20:	7814      	ldrb	r4, [r2, #0]
 8000c22:	b1b4      	cbz	r4, 8000c52 <Mode_N_DSP+0x3a>
 8000c24:	468c      	mov	ip, r1
		DSP(buf_tip, out_tip);
		*out_ring = 0;

	} else if (mode == TS_TO_RS) {
 8000c26:	2c01      	cmp	r4, #1
 8000c28:	d019      	beq.n	8000c5e <Mode_N_DSP+0x46>
		DSP(buf_tip, out_ring);
		*out_tip = 0;

	} else if (mode == RS_TO_TS) {
 8000c2a:	2c02      	cmp	r4, #2
 8000c2c:	d01d      	beq.n	8000c6a <Mode_N_DSP+0x52>
		DSP(buf_ring, out_tip);
		*out_ring = 0;

	} else if (mode == RS_TO_RS) {
 8000c2e:	2c03      	cmp	r4, #3
 8000c30:	d022      	beq.n	8000c78 <Mode_N_DSP+0x60>
		DSP(buf_ring, out_ring);
		*out_tip = 0;

	} else if (mode == TS_TO_TRS_BALANCED) {
 8000c32:	2c04      	cmp	r4, #4
 8000c34:	d027      	beq.n	8000c86 <Mode_N_DSP+0x6e>
		DSP(buf_tip, out_tip);
		*out_ring = - *out_tip;

	} else if (mode == TS_TO_TRS_UNBALANCED) {
 8000c36:	2c05      	cmp	r4, #5
 8000c38:	d02c      	beq.n	8000c94 <Mode_N_DSP+0x7c>
		DSP(buf_tip, out_tip);
		*out_ring = *out_tip;

	} else if (mode == RS_TO_TRS_BALANCED) {
 8000c3a:	2c06      	cmp	r4, #6
 8000c3c:	d031      	beq.n	8000ca2 <Mode_N_DSP+0x8a>
		DSP(buf_ring, out_tip);
		*out_ring = *out_tip;

	} else if (mode == RS_TO_TRS_UNBALANCED) {
 8000c3e:	2c07      	cmp	r4, #7
 8000c40:	d10c      	bne.n	8000c5c <Mode_N_DSP+0x44>
		DSP(buf_ring, out_tip);
 8000c42:	4629      	mov	r1, r5
 8000c44:	4660      	mov	r0, ip
 8000c46:	f7ff ff91 	bl	8000b6c <DSP>
		*out_ring = *out_tip;
 8000c4a:	f9b5 3000 	ldrsh.w	r3, [r5]
 8000c4e:	8033      	strh	r3, [r6, #0]
	}
}
 8000c50:	e004      	b.n	8000c5c <Mode_N_DSP+0x44>
		DSP(buf_tip, out_tip);
 8000c52:	4629      	mov	r1, r5
 8000c54:	f7ff ff8a 	bl	8000b6c <DSP>
		*out_ring = 0;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	8033      	strh	r3, [r6, #0]
}
 8000c5c:	bd70      	pop	{r4, r5, r6, pc}
		DSP(buf_tip, out_ring);
 8000c5e:	4619      	mov	r1, r3
 8000c60:	f7ff ff84 	bl	8000b6c <DSP>
		*out_tip = 0;
 8000c64:	2300      	movs	r3, #0
 8000c66:	802b      	strh	r3, [r5, #0]
 8000c68:	e7f8      	b.n	8000c5c <Mode_N_DSP+0x44>
		DSP(buf_ring, out_tip);
 8000c6a:	4629      	mov	r1, r5
 8000c6c:	4660      	mov	r0, ip
 8000c6e:	f7ff ff7d 	bl	8000b6c <DSP>
		*out_ring = 0;
 8000c72:	2300      	movs	r3, #0
 8000c74:	8033      	strh	r3, [r6, #0]
 8000c76:	e7f1      	b.n	8000c5c <Mode_N_DSP+0x44>
		DSP(buf_ring, out_ring);
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4660      	mov	r0, ip
 8000c7c:	f7ff ff76 	bl	8000b6c <DSP>
		*out_tip = 0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	802b      	strh	r3, [r5, #0]
 8000c84:	e7ea      	b.n	8000c5c <Mode_N_DSP+0x44>
		DSP(buf_tip, out_tip);
 8000c86:	4629      	mov	r1, r5
 8000c88:	f7ff ff70 	bl	8000b6c <DSP>
		*out_ring = - *out_tip;
 8000c8c:	882b      	ldrh	r3, [r5, #0]
 8000c8e:	425b      	negs	r3, r3
 8000c90:	8033      	strh	r3, [r6, #0]
 8000c92:	e7e3      	b.n	8000c5c <Mode_N_DSP+0x44>
		DSP(buf_tip, out_tip);
 8000c94:	4629      	mov	r1, r5
 8000c96:	f7ff ff69 	bl	8000b6c <DSP>
		*out_ring = *out_tip;
 8000c9a:	f9b5 3000 	ldrsh.w	r3, [r5]
 8000c9e:	8033      	strh	r3, [r6, #0]
 8000ca0:	e7dc      	b.n	8000c5c <Mode_N_DSP+0x44>
		DSP(buf_ring, out_tip);
 8000ca2:	4629      	mov	r1, r5
 8000ca4:	4660      	mov	r0, ip
 8000ca6:	f7ff ff61 	bl	8000b6c <DSP>
		*out_ring = *out_tip;
 8000caa:	f9b5 3000 	ldrsh.w	r3, [r5]
 8000cae:	8033      	strh	r3, [r6, #0]
 8000cb0:	e7d4      	b.n	8000c5c <Mode_N_DSP+0x44>
 8000cb2:	bf00      	nop
 8000cb4:	20000e64 	.word	0x20000e64

08000cb8 <HAL_I2S_RxHalfCpltCallback>:

void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 8000cb8:	b508      	push	{r3, lr}
	if (hi2s->Instance == SPI2) {
 8000cba:	6802      	ldr	r2, [r0, #0]
 8000cbc:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <HAL_I2S_RxHalfCpltCallback+0x34>)
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	d000      	beq.n	8000cc4 <HAL_I2S_RxHalfCpltCallback+0xc>
			//DSP(&ADC_BUFF.ADC8[4], &DSP_BUFF[dsp_index + 1]); // tip (right)
			//DSP_BUFF[dsp_index] = -DSP_BUFF[dsp_index + 1];
			dsp_index += 2;
		}
	}
}
 8000cc2:	bd08      	pop	{r3, pc}
		if (dsp_index < HALF_QUANTITY) {
 8000cc4:	4b0a      	ldr	r3, [pc, #40]	; (8000cf0 <HAL_I2S_RxHalfCpltCallback+0x38>)
 8000cc6:	881a      	ldrh	r2, [r3, #0]
 8000cc8:	2a1f      	cmp	r2, #31
 8000cca:	d8fa      	bhi.n	8000cc2 <HAL_I2S_RxHalfCpltCallback+0xa>
			Mode_N_DSP(&ADC_BUFF.ADC8[4], &ADC_BUFF.ADC8[0], &DSP_BUFF[dsp_index + 1], &DSP_BUFF[dsp_index]);
 8000ccc:	3201      	adds	r2, #1
 8000cce:	0052      	lsls	r2, r2, #1
 8000cd0:	4808      	ldr	r0, [pc, #32]	; (8000cf4 <HAL_I2S_RxHalfCpltCallback+0x3c>)
 8000cd2:	1e93      	subs	r3, r2, #2
 8000cd4:	4908      	ldr	r1, [pc, #32]	; (8000cf8 <HAL_I2S_RxHalfCpltCallback+0x40>)
 8000cd6:	4403      	add	r3, r0
 8000cd8:	4402      	add	r2, r0
 8000cda:	1d08      	adds	r0, r1, #4
 8000cdc:	f7ff ff9c 	bl	8000c18 <Mode_N_DSP>
			dsp_index += 2;
 8000ce0:	4a03      	ldr	r2, [pc, #12]	; (8000cf0 <HAL_I2S_RxHalfCpltCallback+0x38>)
 8000ce2:	8813      	ldrh	r3, [r2, #0]
 8000ce4:	3302      	adds	r3, #2
 8000ce6:	8013      	strh	r3, [r2, #0]
}
 8000ce8:	e7eb      	b.n	8000cc2 <HAL_I2S_RxHalfCpltCallback+0xa>
 8000cea:	bf00      	nop
 8000cec:	40003800 	.word	0x40003800
 8000cf0:	20000464 	.word	0x20000464
 8000cf4:	2000041c 	.word	0x2000041c
 8000cf8:	2000030c 	.word	0x2000030c

08000cfc <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8000cfc:	b508      	push	{r3, lr}
	if (hi2s->Instance == SPI2) {
 8000cfe:	6802      	ldr	r2, [r0, #0]
 8000d00:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <HAL_I2S_RxCpltCallback+0x38>)
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d000      	beq.n	8000d08 <HAL_I2S_RxCpltCallback+0xc>
			//DSP_BUFF[dsp_index] = -DSP_BUFF[dsp_index + 1];
			dsp_index += 2;
		}

	}
}
 8000d06:	bd08      	pop	{r3, pc}
		if (dsp_index < HALF_QUANTITY) {
 8000d08:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <HAL_I2S_RxCpltCallback+0x3c>)
 8000d0a:	881a      	ldrh	r2, [r3, #0]
 8000d0c:	2a1f      	cmp	r2, #31
 8000d0e:	d8fa      	bhi.n	8000d06 <HAL_I2S_RxCpltCallback+0xa>
			Mode_N_DSP(&ADC_BUFF.ADC8[12], &ADC_BUFF.ADC8[8], &DSP_BUFF[dsp_index + 1], &DSP_BUFF[dsp_index]);
 8000d10:	3201      	adds	r2, #1
 8000d12:	0052      	lsls	r2, r2, #1
 8000d14:	4909      	ldr	r1, [pc, #36]	; (8000d3c <HAL_I2S_RxCpltCallback+0x40>)
 8000d16:	1e93      	subs	r3, r2, #2
 8000d18:	4809      	ldr	r0, [pc, #36]	; (8000d40 <HAL_I2S_RxCpltCallback+0x44>)
 8000d1a:	440b      	add	r3, r1
 8000d1c:	440a      	add	r2, r1
 8000d1e:	f100 0108 	add.w	r1, r0, #8
 8000d22:	300c      	adds	r0, #12
 8000d24:	f7ff ff78 	bl	8000c18 <Mode_N_DSP>
			dsp_index += 2;
 8000d28:	4a03      	ldr	r2, [pc, #12]	; (8000d38 <HAL_I2S_RxCpltCallback+0x3c>)
 8000d2a:	8813      	ldrh	r3, [r2, #0]
 8000d2c:	3302      	adds	r3, #2
 8000d2e:	8013      	strh	r3, [r2, #0]
}
 8000d30:	e7e9      	b.n	8000d06 <HAL_I2S_RxCpltCallback+0xa>
 8000d32:	bf00      	nop
 8000d34:	40003800 	.word	0x40003800
 8000d38:	20000464 	.word	0x20000464
 8000d3c:	2000041c 	.word	0x2000041c
 8000d40:	2000030c 	.word	0x2000030c

08000d44 <AUDIO_OUT_HalfTransfer_CallBack>:

void AUDIO_OUT_HalfTransfer_CallBack() {
	for (uint16_t i = 0; i < HALF_QUANTITY; i++) {
 8000d44:	4806      	ldr	r0, [pc, #24]	; (8000d60 <AUDIO_OUT_HalfTransfer_CallBack+0x1c>)
 8000d46:	1e83      	subs	r3, r0, #2
 8000d48:	4a06      	ldr	r2, [pc, #24]	; (8000d64 <AUDIO_OUT_HalfTransfer_CallBack+0x20>)
 8000d4a:	303e      	adds	r0, #62	; 0x3e
		DAC_BUFF[i] = DSP_BUFF[i];
 8000d4c:	f833 1f02 	ldrh.w	r1, [r3, #2]!
 8000d50:	f822 1f02 	strh.w	r1, [r2, #2]!
	for (uint16_t i = 0; i < HALF_QUANTITY; i++) {
 8000d54:	4283      	cmp	r3, r0
 8000d56:	d1f9      	bne.n	8000d4c <AUDIO_OUT_HalfTransfer_CallBack+0x8>
	}
	dsp_index = 0;
 8000d58:	4b03      	ldr	r3, [pc, #12]	; (8000d68 <AUDIO_OUT_HalfTransfer_CallBack+0x24>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	801a      	strh	r2, [r3, #0]
}
 8000d5e:	4770      	bx	lr
 8000d60:	2000041c 	.word	0x2000041c
 8000d64:	2000031a 	.word	0x2000031a
 8000d68:	20000464 	.word	0x20000464

08000d6c <AUDIO_OUT_TransferComplete_CallBack>:

void AUDIO_OUT_TransferComplete_CallBack() {
	for (uint16_t i = 0; i < HALF_QUANTITY; i++) {
 8000d6c:	4806      	ldr	r0, [pc, #24]	; (8000d88 <AUDIO_OUT_TransferComplete_CallBack+0x1c>)
 8000d6e:	1e83      	subs	r3, r0, #2
 8000d70:	4a06      	ldr	r2, [pc, #24]	; (8000d8c <AUDIO_OUT_TransferComplete_CallBack+0x20>)
 8000d72:	303e      	adds	r0, #62	; 0x3e
		DAC_BUFF[HALF_QUANTITY + i] = DSP_BUFF[i];
 8000d74:	f833 1f02 	ldrh.w	r1, [r3, #2]!
 8000d78:	f822 1f02 	strh.w	r1, [r2, #2]!
	for (uint16_t i = 0; i < HALF_QUANTITY; i++) {
 8000d7c:	4283      	cmp	r3, r0
 8000d7e:	d1f9      	bne.n	8000d74 <AUDIO_OUT_TransferComplete_CallBack+0x8>
	}
	dsp_index = 0;
 8000d80:	4b03      	ldr	r3, [pc, #12]	; (8000d90 <AUDIO_OUT_TransferComplete_CallBack+0x24>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	801a      	strh	r2, [r3, #0]
}
 8000d86:	4770      	bx	lr
 8000d88:	2000041c 	.word	0x2000041c
 8000d8c:	2000035a 	.word	0x2000035a
 8000d90:	20000464 	.word	0x20000464

08000d94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d94:	b500      	push	{lr}
 8000d96:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d98:	2230      	movs	r2, #48	; 0x30
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	a808      	add	r0, sp, #32
 8000d9e:	f008 fb59 	bl	8009454 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da2:	2300      	movs	r3, #0
 8000da4:	9303      	str	r3, [sp, #12]
 8000da6:	9304      	str	r3, [sp, #16]
 8000da8:	9305      	str	r3, [sp, #20]
 8000daa:	9306      	str	r3, [sp, #24]
 8000dac:	9307      	str	r3, [sp, #28]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dae:	9301      	str	r3, [sp, #4]
 8000db0:	4a20      	ldr	r2, [pc, #128]	; (8000e34 <SystemClock_Config+0xa0>)
 8000db2:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000db4:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000db8:	6411      	str	r1, [r2, #64]	; 0x40
 8000dba:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000dbc:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000dc0:	9201      	str	r2, [sp, #4]
 8000dc2:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dc4:	9302      	str	r3, [sp, #8]
 8000dc6:	4b1c      	ldr	r3, [pc, #112]	; (8000e38 <SystemClock_Config+0xa4>)
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dd6:	9302      	str	r3, [sp, #8]
 8000dd8:	9b02      	ldr	r3, [sp, #8]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000de2:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000de4:	2302      	movs	r3, #2
 8000de6:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000de8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000dec:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000dee:	2204      	movs	r2, #4
 8000df0:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000df2:	22a8      	movs	r2, #168	; 0xa8
 8000df4:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000df6:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000df8:	2307      	movs	r3, #7
 8000dfa:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dfc:	a808      	add	r0, sp, #32
 8000dfe:	f002 fcb9 	bl	8003774 <HAL_RCC_OscConfig>
 8000e02:	b998      	cbnz	r0, 8000e2c <SystemClock_Config+0x98>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e04:	230f      	movs	r3, #15
 8000e06:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e10:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e14:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e1a:	9307      	str	r3, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e1c:	2105      	movs	r1, #5
 8000e1e:	a803      	add	r0, sp, #12
 8000e20:	f002 ff0e 	bl	8003c40 <HAL_RCC_ClockConfig>
 8000e24:	b920      	cbnz	r0, 8000e30 <SystemClock_Config+0x9c>
  {
    Error_Handler();
  }
}
 8000e26:	b015      	add	sp, #84	; 0x54
 8000e28:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e2c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000e2e:	e7fe      	b.n	8000e2e <SystemClock_Config+0x9a>
 8000e30:	b672      	cpsid	i
 8000e32:	e7fe      	b.n	8000e32 <SystemClock_Config+0x9e>
 8000e34:	40023800 	.word	0x40023800
 8000e38:	40007000 	.word	0x40007000

08000e3c <PeriphCommonClock_Config>:
{
 8000e3c:	b500      	push	{lr}
 8000e3e:	b085      	sub	sp, #20
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e40:	2300      	movs	r3, #0
 8000e42:	9303      	str	r3, [sp, #12]
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000e44:	2301      	movs	r3, #1
 8000e46:	9300      	str	r3, [sp, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 196;
 8000e48:	23c4      	movs	r3, #196	; 0xc4
 8000e4a:	9301      	str	r3, [sp, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 4;
 8000e4c:	2304      	movs	r3, #4
 8000e4e:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e50:	4668      	mov	r0, sp
 8000e52:	f002 ffc7 	bl	8003de4 <HAL_RCCEx_PeriphCLKConfig>
 8000e56:	b910      	cbnz	r0, 8000e5e <PeriphCommonClock_Config+0x22>
}
 8000e58:	b005      	add	sp, #20
 8000e5a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e5e:	b672      	cpsid	i
	while (1)
 8000e60:	e7fe      	b.n	8000e60 <PeriphCommonClock_Config+0x24>
	...

08000e64 <main>:
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08c      	sub	sp, #48	; 0x30
  HAL_Init();
 8000e68:	f000 fbdc 	bl	8001624 <HAL_Init>
  SystemClock_Config();
 8000e6c:	f7ff ff92 	bl	8000d94 <SystemClock_Config>
  PeriphCommonClock_Config();
 8000e70:	f7ff ffe4 	bl	8000e3c <PeriphCommonClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	2400      	movs	r4, #0
 8000e76:	9407      	str	r4, [sp, #28]
 8000e78:	9408      	str	r4, [sp, #32]
 8000e7a:	9409      	str	r4, [sp, #36]	; 0x24
 8000e7c:	940a      	str	r4, [sp, #40]	; 0x28
 8000e7e:	940b      	str	r4, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e80:	9402      	str	r4, [sp, #8]
 8000e82:	4dab      	ldr	r5, [pc, #684]	; (8001130 <main+0x2cc>)
 8000e84:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000e86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e8a:	632b      	str	r3, [r5, #48]	; 0x30
 8000e8c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e92:	9302      	str	r3, [sp, #8]
 8000e94:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e96:	9403      	str	r4, [sp, #12]
 8000e98:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000e9a:	f043 0302 	orr.w	r3, r3, #2
 8000e9e:	632b      	str	r3, [r5, #48]	; 0x30
 8000ea0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000ea2:	f003 0302 	and.w	r3, r3, #2
 8000ea6:	9303      	str	r3, [sp, #12]
 8000ea8:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eaa:	9404      	str	r4, [sp, #16]
 8000eac:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000eae:	f043 0304 	orr.w	r3, r3, #4
 8000eb2:	632b      	str	r3, [r5, #48]	; 0x30
 8000eb4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000eb6:	f003 0304 	and.w	r3, r3, #4
 8000eba:	9304      	str	r3, [sp, #16]
 8000ebc:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ebe:	9405      	str	r4, [sp, #20]
 8000ec0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000ec2:	f043 0301 	orr.w	r3, r3, #1
 8000ec6:	632b      	str	r3, [r5, #48]	; 0x30
 8000ec8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	9305      	str	r3, [sp, #20]
 8000ed0:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ed2:	9406      	str	r4, [sp, #24]
 8000ed4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000ed6:	f043 0308 	orr.w	r3, r3, #8
 8000eda:	632b      	str	r3, [r5, #48]	; 0x30
 8000edc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000ede:	f003 0308 	and.w	r3, r3, #8
 8000ee2:	9306      	str	r3, [sp, #24]
 8000ee4:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(SPKRPower_GPIO_Port, SPKRPower_Pin, GPIO_PIN_RESET);
 8000ee6:	f8df 9284 	ldr.w	r9, [pc, #644]	; 800116c <main+0x308>
 8000eea:	4622      	mov	r2, r4
 8000eec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ef0:	4648      	mov	r0, r9
 8000ef2:	f000 ffe3 	bl	8001ebc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OtgPower_GPIO_Port, OtgPower_Pin, GPIO_PIN_RESET);
 8000ef6:	f8df 8280 	ldr.w	r8, [pc, #640]	; 8001178 <main+0x314>
 8000efa:	4622      	mov	r2, r4
 8000efc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f00:	4640      	mov	r0, r8
 8000f02:	f000 ffdb 	bl	8001ebc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LD1_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000f06:	4f8b      	ldr	r7, [pc, #556]	; (8001134 <main+0x2d0>)
 8000f08:	4622      	mov	r2, r4
 8000f0a:	2118      	movs	r1, #24
 8000f0c:	4638      	mov	r0, r7
 8000f0e:	f000 ffd5 	bl	8001ebc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = SPKRPower_Pin;
 8000f12:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f16:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f18:	2601      	movs	r6, #1
 8000f1a:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1e:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(SPKRPower_GPIO_Port, &GPIO_InitStruct);
 8000f20:	a907      	add	r1, sp, #28
 8000f22:	4648      	mov	r0, r9
 8000f24:	f000 fe18 	bl	8001b58 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OtgPower_Pin;
 8000f28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f2c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2e:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f32:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(OtgPower_GPIO_Port, &GPIO_InitStruct);
 8000f34:	a907      	add	r1, sp, #28
 8000f36:	4640      	mov	r0, r8
 8000f38:	f000 fe0e 	bl	8001b58 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD1_Pin|LD2_Pin;
 8000f3c:	2318      	movs	r3, #24
 8000f3e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f40:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f44:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f46:	a907      	add	r1, sp, #28
 8000f48:	4638      	mov	r0, r7
 8000f4a:	f000 fe05 	bl	8001b58 <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f4e:	9401      	str	r4, [sp, #4]
 8000f50:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000f52:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f56:	632b      	str	r3, [r5, #48]	; 0x30
 8000f58:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000f5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f5e:	9301      	str	r3, [sp, #4]
 8000f60:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f62:	9407      	str	r4, [sp, #28]
 8000f64:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000f66:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f6a:	632b      	str	r3, [r5, #48]	; 0x30
 8000f6c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000f6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f72:	9307      	str	r3, [sp, #28]
 8000f74:	9b07      	ldr	r3, [sp, #28]
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000f76:	4622      	mov	r2, r4
 8000f78:	4621      	mov	r1, r4
 8000f7a:	200e      	movs	r0, #14
 8000f7c:	f000 fba4 	bl	80016c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000f80:	200e      	movs	r0, #14
 8000f82:	f000 fbd7 	bl	8001734 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000f86:	4622      	mov	r2, r4
 8000f88:	4621      	mov	r1, r4
 8000f8a:	2010      	movs	r0, #16
 8000f8c:	f000 fb9c 	bl	80016c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000f90:	2010      	movs	r0, #16
 8000f92:	f000 fbcf 	bl	8001734 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000f96:	4622      	mov	r2, r4
 8000f98:	4621      	mov	r1, r4
 8000f9a:	203a      	movs	r0, #58	; 0x3a
 8000f9c:	f000 fb94 	bl	80016c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000fa0:	203a      	movs	r0, #58	; 0x3a
 8000fa2:	f000 fbc7 	bl	8001734 <HAL_NVIC_EnableIRQ>
  huart1.Instance = USART1;
 8000fa6:	4864      	ldr	r0, [pc, #400]	; (8001138 <main+0x2d4>)
 8000fa8:	4b64      	ldr	r3, [pc, #400]	; (800113c <main+0x2d8>)
 8000faa:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8000fac:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000fb0:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fb2:	6084      	str	r4, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fb4:	60c4      	str	r4, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fb6:	6104      	str	r4, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fb8:	230c      	movs	r3, #12
 8000fba:	6143      	str	r3, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fbc:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fbe:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fc0:	f003 f8da 	bl	8004178 <HAL_UART_Init>
 8000fc4:	2800      	cmp	r0, #0
 8000fc6:	d17a      	bne.n	80010be <main+0x25a>
  MX_FATFS_Init();
 8000fc8:	f003 ff70 	bl	8004eac <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8000fcc:	f007 fcd8 	bl	8008980 <MX_USB_HOST_Init>
  hi2s3.Instance = SPI3;
 8000fd0:	485b      	ldr	r0, [pc, #364]	; (8001140 <main+0x2dc>)
 8000fd2:	4b5c      	ldr	r3, [pc, #368]	; (8001144 <main+0x2e0>)
 8000fd4:	6003      	str	r3, [r0, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000fd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fda:	6042      	str	r2, [r0, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	6083      	str	r3, [r0, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000fe0:	60c3      	str	r3, [r0, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000fe2:	6102      	str	r2, [r0, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000fe4:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000fe8:	6142      	str	r2, [r0, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000fea:	6183      	str	r3, [r0, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000fec:	61c3      	str	r3, [r0, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000fee:	6203      	str	r3, [r0, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000ff0:	f001 ffda 	bl	8002fa8 <HAL_I2S_Init>
 8000ff4:	2800      	cmp	r0, #0
 8000ff6:	d164      	bne.n	80010c2 <main+0x25e>
  hi2c1.Instance = I2C1;
 8000ff8:	4853      	ldr	r0, [pc, #332]	; (8001148 <main+0x2e4>)
 8000ffa:	4b54      	ldr	r3, [pc, #336]	; (800114c <main+0x2e8>)
 8000ffc:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ffe:	4b54      	ldr	r3, [pc, #336]	; (8001150 <main+0x2ec>)
 8001000:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001002:	2300      	movs	r3, #0
 8001004:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001006:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001008:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800100c:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800100e:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001010:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001012:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001014:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001016:	f001 fe31 	bl	8002c7c <HAL_I2C_Init>
 800101a:	2800      	cmp	r0, #0
 800101c:	d153      	bne.n	80010c6 <main+0x262>
  hi2s2.Instance = SPI2;
 800101e:	484d      	ldr	r0, [pc, #308]	; (8001154 <main+0x2f0>)
 8001020:	4b4d      	ldr	r3, [pc, #308]	; (8001158 <main+0x2f4>)
 8001022:	6003      	str	r3, [r0, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8001024:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001028:	6043      	str	r3, [r0, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800102a:	2300      	movs	r3, #0
 800102c:	6083      	str	r3, [r0, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 800102e:	2203      	movs	r2, #3
 8001030:	60c2      	str	r2, [r0, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001032:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001036:	6102      	str	r2, [r0, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8001038:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800103c:	6142      	str	r2, [r0, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800103e:	6183      	str	r3, [r0, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001040:	61c3      	str	r3, [r0, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001042:	6203      	str	r3, [r0, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001044:	f001 ffb0 	bl	8002fa8 <HAL_I2S_Init>
 8001048:	2800      	cmp	r0, #0
 800104a:	d13e      	bne.n	80010ca <main+0x266>
	Commander_Init(&hcommander, &huart1, &hdma_usart1_rx, command_callback);
 800104c:	4c43      	ldr	r4, [pc, #268]	; (800115c <main+0x2f8>)
 800104e:	4b44      	ldr	r3, [pc, #272]	; (8001160 <main+0x2fc>)
 8001050:	4a44      	ldr	r2, [pc, #272]	; (8001164 <main+0x300>)
 8001052:	4939      	ldr	r1, [pc, #228]	; (8001138 <main+0x2d4>)
 8001054:	4620      	mov	r0, r4
 8001056:	f007 fe01 	bl	8008c5c <Commander_Init>
	Commander_Start(&hcommander);
 800105a:	4620      	mov	r0, r4
 800105c:	f007 fe0a 	bl	8008c74 <Commander_Start>
	Pedalboard_Init(&hpedalboard);
 8001060:	4c41      	ldr	r4, [pc, #260]	; (8001168 <main+0x304>)
 8001062:	4620      	mov	r0, r4
 8001064:	f007 fe6c 	bl	8008d40 <Pedalboard_Init>
	Pedalboard_SetPedal(&hpedalboard, AMPLIFIER, MAX_PEDALS_COUNT - 1, INSERT);
 8001068:	2300      	movs	r3, #0
 800106a:	2205      	movs	r2, #5
 800106c:	4619      	mov	r1, r3
 800106e:	4620      	mov	r0, r4
 8001070:	f007 ff9e 	bl	8008fb0 <Pedalboard_SetPedal>
	HAL_GPIO_WritePin(SPKRPower_GPIO_Port, SPKRPower_Pin, RESET);
 8001074:	2200      	movs	r2, #0
 8001076:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800107a:	483c      	ldr	r0, [pc, #240]	; (800116c <main+0x308>)
 800107c:	f000 ff1e 	bl	8001ebc <HAL_GPIO_WritePin>
	cs43l22_Init(0x94, OUTPUT_DEVICE_HEADPHONE, 200, AUDIO_FREQUENCY_48K);
 8001080:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8001084:	22c8      	movs	r2, #200	; 0xc8
 8001086:	2102      	movs	r1, #2
 8001088:	2094      	movs	r0, #148	; 0x94
 800108a:	f7ff fb55 	bl	8000738 <cs43l22_Init>
	cs43l22_Play(AUDIO_I2C_ADDRESS, (uint16_t *)DAC_BUFF, SAMPLES_QUANTITY);
 800108e:	4c38      	ldr	r4, [pc, #224]	; (8001170 <main+0x30c>)
 8001090:	2240      	movs	r2, #64	; 0x40
 8001092:	4621      	mov	r1, r4
 8001094:	2094      	movs	r0, #148	; 0x94
 8001096:	f7ff fb1f 	bl	80006d8 <cs43l22_Play>
	HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t *)DAC_BUFF, SAMPLES_QUANTITY);
 800109a:	2240      	movs	r2, #64	; 0x40
 800109c:	4621      	mov	r1, r4
 800109e:	4828      	ldr	r0, [pc, #160]	; (8001140 <main+0x2dc>)
 80010a0:	f002 f844 	bl	800312c <HAL_I2S_Transmit_DMA>
	cs43l22_SetVolume(AUDIO_I2C_ADDRESS, 220);
 80010a4:	21dc      	movs	r1, #220	; 0xdc
 80010a6:	2094      	movs	r0, #148	; 0x94
 80010a8:	f7ff fb36 	bl	8000718 <cs43l22_SetVolume>
	HAL_I2S_Receive_DMA(&hi2s2, ADC_BUFF.ADC16, 4);
 80010ac:	2204      	movs	r2, #4
 80010ae:	4931      	ldr	r1, [pc, #196]	; (8001174 <main+0x310>)
 80010b0:	4828      	ldr	r0, [pc, #160]	; (8001154 <main+0x2f0>)
 80010b2:	f002 f8a9 	bl	8003208 <HAL_I2S_Receive_DMA>
		HAL_GPIO_WritePin(OtgPower_GPIO_Port, OtgPower_Pin, GPIO_PIN_RESET);
 80010b6:	4e30      	ldr	r6, [pc, #192]	; (8001178 <main+0x314>)
		Commander_ProcessIncoming(&hcommander);
 80010b8:	4d28      	ldr	r5, [pc, #160]	; (800115c <main+0x2f8>)
		if (Appli_state == APPLICATION_START) {
 80010ba:	4c30      	ldr	r4, [pc, #192]	; (800117c <main+0x318>)
 80010bc:	e016      	b.n	80010ec <main+0x288>
 80010be:	b672      	cpsid	i
	while (1)
 80010c0:	e7fe      	b.n	80010c0 <main+0x25c>
 80010c2:	b672      	cpsid	i
 80010c4:	e7fe      	b.n	80010c4 <main+0x260>
 80010c6:	b672      	cpsid	i
 80010c8:	e7fe      	b.n	80010c8 <main+0x264>
 80010ca:	b672      	cpsid	i
 80010cc:	e7fe      	b.n	80010cc <main+0x268>
			res = f_mount(&usbFatFS, (TCHAR const*)USBHPath, 0);
 80010ce:	2200      	movs	r2, #0
 80010d0:	492b      	ldr	r1, [pc, #172]	; (8001180 <main+0x31c>)
 80010d2:	482c      	ldr	r0, [pc, #176]	; (8001184 <main+0x320>)
 80010d4:	f007 f806 	bl	80080e4 <f_mount>
 80010d8:	4b2b      	ldr	r3, [pc, #172]	; (8001188 <main+0x324>)
 80010da:	7018      	strb	r0, [r3, #0]
			if (res == FR_OK) {
 80010dc:	fab0 f080 	clz	r0, r0
 80010e0:	0940      	lsrs	r0, r0, #5
 80010e2:	4b2a      	ldr	r3, [pc, #168]	; (800118c <main+0x328>)
 80010e4:	7018      	strb	r0, [r3, #0]
			usb_ready = 0;
 80010e6:	4b2a      	ldr	r3, [pc, #168]	; (8001190 <main+0x32c>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	701a      	strb	r2, [r3, #0]
    MX_USB_HOST_Process();
 80010ec:	f007 fc68 	bl	80089c0 <MX_USB_HOST_Process>
		HAL_GPIO_WritePin(OtgPower_GPIO_Port, OtgPower_Pin, GPIO_PIN_RESET);
 80010f0:	2200      	movs	r2, #0
 80010f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010f6:	4630      	mov	r0, r6
 80010f8:	f000 fee0 	bl	8001ebc <HAL_GPIO_WritePin>
		Commander_ProcessIncoming(&hcommander);
 80010fc:	4628      	mov	r0, r5
 80010fe:	f007 fdda 	bl	8008cb6 <Commander_ProcessIncoming>
		if (Appli_state == APPLICATION_START) {
 8001102:	7823      	ldrb	r3, [r4, #0]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d0e2      	beq.n	80010ce <main+0x26a>
		} else if (Appli_state == APPLICATION_READY) {
 8001108:	2b02      	cmp	r3, #2
 800110a:	d005      	beq.n	8001118 <main+0x2b4>
			usb_mounted = 0;
 800110c:	2300      	movs	r3, #0
 800110e:	4a1f      	ldr	r2, [pc, #124]	; (800118c <main+0x328>)
 8001110:	7013      	strb	r3, [r2, #0]
			usb_ready = 0;
 8001112:	4a1f      	ldr	r2, [pc, #124]	; (8001190 <main+0x32c>)
 8001114:	7013      	strb	r3, [r2, #0]
 8001116:	e7e9      	b.n	80010ec <main+0x288>
			if (usb_mounted) {
 8001118:	4b1c      	ldr	r3, [pc, #112]	; (800118c <main+0x328>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	b11b      	cbz	r3, 8001126 <main+0x2c2>
				usb_ready = 1;
 800111e:	4b1c      	ldr	r3, [pc, #112]	; (8001190 <main+0x32c>)
 8001120:	2201      	movs	r2, #1
 8001122:	701a      	strb	r2, [r3, #0]
 8001124:	e7e2      	b.n	80010ec <main+0x288>
				usb_ready = 0;
 8001126:	4b1a      	ldr	r3, [pc, #104]	; (8001190 <main+0x32c>)
 8001128:	2200      	movs	r2, #0
 800112a:	701a      	strb	r2, [r3, #0]
 800112c:	e7de      	b.n	80010ec <main+0x288>
 800112e:	bf00      	nop
 8001130:	40023800 	.word	0x40023800
 8001134:	40020c00 	.word	0x40020c00
 8001138:	20000e20 	.word	0x20000e20
 800113c:	40011000 	.word	0x40011000
 8001140:	20000a48 	.word	0x20000a48
 8001144:	40003c00 	.word	0x40003c00
 8001148:	200009ac 	.word	0x200009ac
 800114c:	40005400 	.word	0x40005400
 8001150:	000186a0 	.word	0x000186a0
 8001154:	20000a00 	.word	0x20000a00
 8001158:	40003800 	.word	0x40003800
 800115c:	20000468 	.word	0x20000468
 8001160:	080009b5 	.word	0x080009b5
 8001164:	2000094c 	.word	0x2000094c
 8001168:	20000a90 	.word	0x20000a90
 800116c:	40020400 	.word	0x40020400
 8001170:	2000031c 	.word	0x2000031c
 8001174:	2000030c 	.word	0x2000030c
 8001178:	40020800 	.word	0x40020800
 800117c:	20003024 	.word	0x20003024
 8001180:	20002fe8 	.word	0x20002fe8
 8001184:	20001fa4 	.word	0x20001fa4
 8001188:	20001e98 	.word	0x20001e98
 800118c:	20002fdc 	.word	0x20002fdc
 8001190:	20002fdd 	.word	0x20002fdd

08001194 <Error_Handler>:
 8001194:	b672      	cpsid	i
	while (1)
 8001196:	e7fe      	b.n	8001196 <Error_Handler+0x2>

08001198 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001198:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800119a:	2100      	movs	r1, #0
 800119c:	9100      	str	r1, [sp, #0]
 800119e:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <HAL_MspInit+0x34>)
 80011a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80011a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80011a6:	645a      	str	r2, [r3, #68]	; 0x44
 80011a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80011aa:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80011ae:	9200      	str	r2, [sp, #0]
 80011b0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b2:	9101      	str	r1, [sp, #4]
 80011b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011b6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80011ba:	641a      	str	r2, [r3, #64]	; 0x40
 80011bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c2:	9301      	str	r3, [sp, #4]
 80011c4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011c6:	b002      	add	sp, #8
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	40023800 	.word	0x40023800

080011d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011d0:	b530      	push	{r4, r5, lr}
 80011d2:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d4:	2300      	movs	r3, #0
 80011d6:	9303      	str	r3, [sp, #12]
 80011d8:	9304      	str	r3, [sp, #16]
 80011da:	9305      	str	r3, [sp, #20]
 80011dc:	9306      	str	r3, [sp, #24]
 80011de:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C1)
 80011e0:	6802      	ldr	r2, [r0, #0]
 80011e2:	4b14      	ldr	r3, [pc, #80]	; (8001234 <HAL_I2C_MspInit+0x64>)
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d001      	beq.n	80011ec <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80011e8:	b009      	add	sp, #36	; 0x24
 80011ea:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ec:	2500      	movs	r5, #0
 80011ee:	9501      	str	r5, [sp, #4]
 80011f0:	4c11      	ldr	r4, [pc, #68]	; (8001238 <HAL_I2C_MspInit+0x68>)
 80011f2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80011f4:	f043 0302 	orr.w	r3, r3, #2
 80011f8:	6323      	str	r3, [r4, #48]	; 0x30
 80011fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80011fc:	f003 0302 	and.w	r3, r3, #2
 8001200:	9301      	str	r3, [sp, #4]
 8001202:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001204:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001208:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800120a:	2312      	movs	r3, #18
 800120c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800120e:	2303      	movs	r3, #3
 8001210:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001212:	2304      	movs	r3, #4
 8001214:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001216:	a903      	add	r1, sp, #12
 8001218:	4808      	ldr	r0, [pc, #32]	; (800123c <HAL_I2C_MspInit+0x6c>)
 800121a:	f000 fc9d 	bl	8001b58 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800121e:	9502      	str	r5, [sp, #8]
 8001220:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001222:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001226:	6423      	str	r3, [r4, #64]	; 0x40
 8001228:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800122a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800122e:	9302      	str	r3, [sp, #8]
 8001230:	9b02      	ldr	r3, [sp, #8]
}
 8001232:	e7d9      	b.n	80011e8 <HAL_I2C_MspInit+0x18>
 8001234:	40005400 	.word	0x40005400
 8001238:	40023800 	.word	0x40023800
 800123c:	40020400 	.word	0x40020400

08001240 <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
  if(hi2c->Instance==I2C1)
 8001240:	6802      	ldr	r2, [r0, #0]
 8001242:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <HAL_I2C_MspDeInit+0x30>)
 8001244:	429a      	cmp	r2, r3
 8001246:	d000      	beq.n	800124a <HAL_I2C_MspDeInit+0xa>
 8001248:	4770      	bx	lr
{
 800124a:	b510      	push	{r4, lr}
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800124c:	4a09      	ldr	r2, [pc, #36]	; (8001274 <HAL_I2C_MspDeInit+0x34>)
 800124e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001250:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001254:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8001256:	4c08      	ldr	r4, [pc, #32]	; (8001278 <HAL_I2C_MspDeInit+0x38>)
 8001258:	f44f 7180 	mov.w	r1, #256	; 0x100
 800125c:	4620      	mov	r0, r4
 800125e:	f000 fd81 	bl	8001d64 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8001262:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001266:	4620      	mov	r0, r4
 8001268:	f000 fd7c 	bl	8001d64 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800126c:	bd10      	pop	{r4, pc}
 800126e:	bf00      	nop
 8001270:	40005400 	.word	0x40005400
 8001274:	40023800 	.word	0x40023800
 8001278:	40020400 	.word	0x40020400

0800127c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800127c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800127e:	b08d      	sub	sp, #52	; 0x34
 8001280:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001282:	2300      	movs	r3, #0
 8001284:	9307      	str	r3, [sp, #28]
 8001286:	9308      	str	r3, [sp, #32]
 8001288:	9309      	str	r3, [sp, #36]	; 0x24
 800128a:	930a      	str	r3, [sp, #40]	; 0x28
 800128c:	930b      	str	r3, [sp, #44]	; 0x2c
  if(hi2s->Instance==SPI2)
 800128e:	6803      	ldr	r3, [r0, #0]
 8001290:	4a59      	ldr	r2, [pc, #356]	; (80013f8 <HAL_I2S_MspInit+0x17c>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d004      	beq.n	80012a0 <HAL_I2S_MspInit+0x24>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
  else if(hi2s->Instance==SPI3)
 8001296:	4a59      	ldr	r2, [pc, #356]	; (80013fc <HAL_I2S_MspInit+0x180>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d058      	beq.n	800134e <HAL_I2S_MspInit+0xd2>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800129c:	b00d      	add	sp, #52	; 0x34
 800129e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 80012a0:	2500      	movs	r5, #0
 80012a2:	9501      	str	r5, [sp, #4]
 80012a4:	4b56      	ldr	r3, [pc, #344]	; (8001400 <HAL_I2S_MspInit+0x184>)
 80012a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80012ac:	641a      	str	r2, [r3, #64]	; 0x40
 80012ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012b0:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80012b4:	9201      	str	r2, [sp, #4]
 80012b6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b8:	9502      	str	r5, [sp, #8]
 80012ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012bc:	f042 0202 	orr.w	r2, r2, #2
 80012c0:	631a      	str	r2, [r3, #48]	; 0x30
 80012c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012c4:	f002 0202 	and.w	r2, r2, #2
 80012c8:	9202      	str	r2, [sp, #8]
 80012ca:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012cc:	9503      	str	r5, [sp, #12]
 80012ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012d0:	f042 0204 	orr.w	r2, r2, #4
 80012d4:	631a      	str	r2, [r3, #48]	; 0x30
 80012d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d8:	f003 0304 	and.w	r3, r3, #4
 80012dc:	9303      	str	r3, [sp, #12]
 80012de:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80012e0:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80012e4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e6:	2702      	movs	r7, #2
 80012e8:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012ea:	2605      	movs	r6, #5
 80012ec:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ee:	a907      	add	r1, sp, #28
 80012f0:	4844      	ldr	r0, [pc, #272]	; (8001404 <HAL_I2S_MspInit+0x188>)
 80012f2:	f000 fc31 	bl	8001b58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012f6:	2340      	movs	r3, #64	; 0x40
 80012f8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fa:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fe:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001300:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001302:	a907      	add	r1, sp, #28
 8001304:	4840      	ldr	r0, [pc, #256]	; (8001408 <HAL_I2S_MspInit+0x18c>)
 8001306:	f000 fc27 	bl	8001b58 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 800130a:	4840      	ldr	r0, [pc, #256]	; (800140c <HAL_I2S_MspInit+0x190>)
 800130c:	4b40      	ldr	r3, [pc, #256]	; (8001410 <HAL_I2S_MspInit+0x194>)
 800130e:	6003      	str	r3, [r0, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8001310:	6045      	str	r5, [r0, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001312:	6085      	str	r5, [r0, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001314:	60c5      	str	r5, [r0, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001316:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800131a:	6103      	str	r3, [r0, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800131c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001320:	6143      	str	r3, [r0, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001322:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001326:	6183      	str	r3, [r0, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8001328:	f44f 7380 	mov.w	r3, #256	; 0x100
 800132c:	61c3      	str	r3, [r0, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800132e:	6205      	str	r5, [r0, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001330:	2304      	movs	r3, #4
 8001332:	6243      	str	r3, [r0, #36]	; 0x24
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8001334:	6285      	str	r5, [r0, #40]	; 0x28
    hdma_spi2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001336:	62c5      	str	r5, [r0, #44]	; 0x2c
    hdma_spi2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001338:	6305      	str	r5, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800133a:	f000 fa3d 	bl	80017b8 <HAL_DMA_Init>
 800133e:	b918      	cbnz	r0, 8001348 <HAL_I2S_MspInit+0xcc>
    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8001340:	4b32      	ldr	r3, [pc, #200]	; (800140c <HAL_I2S_MspInit+0x190>)
 8001342:	63e3      	str	r3, [r4, #60]	; 0x3c
 8001344:	639c      	str	r4, [r3, #56]	; 0x38
 8001346:	e7a9      	b.n	800129c <HAL_I2S_MspInit+0x20>
      Error_Handler();
 8001348:	f7ff ff24 	bl	8001194 <Error_Handler>
 800134c:	e7f8      	b.n	8001340 <HAL_I2S_MspInit+0xc4>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800134e:	2500      	movs	r5, #0
 8001350:	9504      	str	r5, [sp, #16]
 8001352:	4b2b      	ldr	r3, [pc, #172]	; (8001400 <HAL_I2S_MspInit+0x184>)
 8001354:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001356:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800135a:	641a      	str	r2, [r3, #64]	; 0x40
 800135c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800135e:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8001362:	9204      	str	r2, [sp, #16]
 8001364:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001366:	9505      	str	r5, [sp, #20]
 8001368:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800136a:	f042 0204 	orr.w	r2, r2, #4
 800136e:	631a      	str	r2, [r3, #48]	; 0x30
 8001370:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001372:	f002 0204 	and.w	r2, r2, #4
 8001376:	9205      	str	r2, [sp, #20]
 8001378:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137a:	9506      	str	r5, [sp, #24]
 800137c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800137e:	f042 0201 	orr.w	r2, r2, #1
 8001382:	631a      	str	r2, [r3, #48]	; 0x30
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	9306      	str	r3, [sp, #24]
 800138c:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 800138e:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001392:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001394:	2702      	movs	r7, #2
 8001396:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001398:	2606      	movs	r6, #6
 800139a:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800139c:	a907      	add	r1, sp, #28
 800139e:	481a      	ldr	r0, [pc, #104]	; (8001408 <HAL_I2S_MspInit+0x18c>)
 80013a0:	f000 fbda 	bl	8001b58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80013a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013a8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013aa:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ae:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013b0:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b2:	a907      	add	r1, sp, #28
 80013b4:	4817      	ldr	r0, [pc, #92]	; (8001414 <HAL_I2S_MspInit+0x198>)
 80013b6:	f000 fbcf 	bl	8001b58 <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream5;
 80013ba:	4817      	ldr	r0, [pc, #92]	; (8001418 <HAL_I2S_MspInit+0x19c>)
 80013bc:	4b17      	ldr	r3, [pc, #92]	; (800141c <HAL_I2S_MspInit+0x1a0>)
 80013be:	6003      	str	r3, [r0, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 80013c0:	6045      	str	r5, [r0, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013c2:	2340      	movs	r3, #64	; 0x40
 80013c4:	6083      	str	r3, [r0, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013c6:	60c5      	str	r5, [r0, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013cc:	6103      	str	r3, [r0, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013d2:	6143      	str	r3, [r0, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013d8:	6183      	str	r3, [r0, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 80013da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013de:	61c3      	str	r3, [r0, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80013e0:	6205      	str	r5, [r0, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013e2:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80013e4:	f000 f9e8 	bl	80017b8 <HAL_DMA_Init>
 80013e8:	b918      	cbnz	r0, 80013f2 <HAL_I2S_MspInit+0x176>
    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 80013ea:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <HAL_I2S_MspInit+0x19c>)
 80013ec:	63a3      	str	r3, [r4, #56]	; 0x38
 80013ee:	639c      	str	r4, [r3, #56]	; 0x38
}
 80013f0:	e754      	b.n	800129c <HAL_I2S_MspInit+0x20>
      Error_Handler();
 80013f2:	f7ff fecf 	bl	8001194 <Error_Handler>
 80013f6:	e7f8      	b.n	80013ea <HAL_I2S_MspInit+0x16e>
 80013f8:	40003800 	.word	0x40003800
 80013fc:	40003c00 	.word	0x40003c00
 8001400:	40023800 	.word	0x40023800
 8001404:	40020400 	.word	0x40020400
 8001408:	40020800 	.word	0x40020800
 800140c:	2000088c 	.word	0x2000088c
 8001410:	40026058 	.word	0x40026058
 8001414:	40020000 	.word	0x40020000
 8001418:	200008ec 	.word	0x200008ec
 800141c:	40026088 	.word	0x40026088

08001420 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001420:	b530      	push	{r4, r5, lr}
 8001422:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001424:	2300      	movs	r3, #0
 8001426:	9303      	str	r3, [sp, #12]
 8001428:	9304      	str	r3, [sp, #16]
 800142a:	9305      	str	r3, [sp, #20]
 800142c:	9306      	str	r3, [sp, #24]
 800142e:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 8001430:	6802      	ldr	r2, [r0, #0]
 8001432:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001436:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 800143a:	429a      	cmp	r2, r3
 800143c:	d001      	beq.n	8001442 <HAL_UART_MspInit+0x22>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800143e:	b009      	add	sp, #36	; 0x24
 8001440:	bd30      	pop	{r4, r5, pc}
 8001442:	4604      	mov	r4, r0
    __HAL_RCC_USART1_CLK_ENABLE();
 8001444:	2500      	movs	r5, #0
 8001446:	9501      	str	r5, [sp, #4]
 8001448:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 800144c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800144e:	f042 0210 	orr.w	r2, r2, #16
 8001452:	645a      	str	r2, [r3, #68]	; 0x44
 8001454:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001456:	f002 0210 	and.w	r2, r2, #16
 800145a:	9201      	str	r2, [sp, #4]
 800145c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800145e:	9502      	str	r5, [sp, #8]
 8001460:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001462:	f042 0202 	orr.w	r2, r2, #2
 8001466:	631a      	str	r2, [r3, #48]	; 0x30
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	9302      	str	r3, [sp, #8]
 8001470:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001472:	23c0      	movs	r3, #192	; 0xc0
 8001474:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001476:	2302      	movs	r3, #2
 8001478:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147a:	2303      	movs	r3, #3
 800147c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800147e:	2307      	movs	r3, #7
 8001480:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001482:	a903      	add	r1, sp, #12
 8001484:	480f      	ldr	r0, [pc, #60]	; (80014c4 <HAL_UART_MspInit+0xa4>)
 8001486:	f000 fb67 	bl	8001b58 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800148a:	480f      	ldr	r0, [pc, #60]	; (80014c8 <HAL_UART_MspInit+0xa8>)
 800148c:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <HAL_UART_MspInit+0xac>)
 800148e:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001490:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001494:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001496:	6085      	str	r5, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001498:	60c5      	str	r5, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800149a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800149e:	6103      	str	r3, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014a0:	6145      	str	r5, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014a2:	6185      	str	r5, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80014a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014a8:	61c3      	str	r3, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80014aa:	6205      	str	r5, [r0, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014ac:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80014ae:	f000 f983 	bl	80017b8 <HAL_DMA_Init>
 80014b2:	b918      	cbnz	r0, 80014bc <HAL_UART_MspInit+0x9c>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80014b4:	4b04      	ldr	r3, [pc, #16]	; (80014c8 <HAL_UART_MspInit+0xa8>)
 80014b6:	63a3      	str	r3, [r4, #56]	; 0x38
 80014b8:	639c      	str	r4, [r3, #56]	; 0x38
}
 80014ba:	e7c0      	b.n	800143e <HAL_UART_MspInit+0x1e>
      Error_Handler();
 80014bc:	f7ff fe6a 	bl	8001194 <Error_Handler>
 80014c0:	e7f8      	b.n	80014b4 <HAL_UART_MspInit+0x94>
 80014c2:	bf00      	nop
 80014c4:	40020400 	.word	0x40020400
 80014c8:	2000094c 	.word	0x2000094c
 80014cc:	40026440 	.word	0x40026440

080014d0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014d0:	e7fe      	b.n	80014d0 <NMI_Handler>

080014d2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014d2:	e7fe      	b.n	80014d2 <HardFault_Handler>

080014d4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014d4:	e7fe      	b.n	80014d4 <MemManage_Handler>

080014d6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014d6:	e7fe      	b.n	80014d6 <BusFault_Handler>

080014d8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014d8:	e7fe      	b.n	80014d8 <UsageFault_Handler>

080014da <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014da:	4770      	bx	lr

080014dc <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014dc:	4770      	bx	lr

080014de <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014de:	4770      	bx	lr

080014e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014e2:	f000 f8b9 	bl	8001658 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014e6:	bd08      	pop	{r3, pc}

080014e8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80014e8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80014ea:	4802      	ldr	r0, [pc, #8]	; (80014f4 <DMA1_Stream3_IRQHandler+0xc>)
 80014ec:	f000 fa46 	bl	800197c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80014f0:	bd08      	pop	{r3, pc}
 80014f2:	bf00      	nop
 80014f4:	2000088c 	.word	0x2000088c

080014f8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80014f8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80014fa:	4802      	ldr	r0, [pc, #8]	; (8001504 <DMA1_Stream5_IRQHandler+0xc>)
 80014fc:	f000 fa3e 	bl	800197c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001500:	bd08      	pop	{r3, pc}
 8001502:	bf00      	nop
 8001504:	200008ec 	.word	0x200008ec

08001508 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001508:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800150a:	4802      	ldr	r0, [pc, #8]	; (8001514 <DMA2_Stream2_IRQHandler+0xc>)
 800150c:	f000 fa36 	bl	800197c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001510:	bd08      	pop	{r3, pc}
 8001512:	bf00      	nop
 8001514:	2000094c 	.word	0x2000094c

08001518 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001518:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800151a:	4802      	ldr	r0, [pc, #8]	; (8001524 <OTG_FS_IRQHandler+0xc>)
 800151c:	f000 fe28 	bl	8002170 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001520:	bd08      	pop	{r3, pc}
 8001522:	bf00      	nop
 8001524:	20003400 	.word	0x20003400

08001528 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001528:	b508      	push	{r3, lr}
 800152a:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800152c:	4a0c      	ldr	r2, [pc, #48]	; (8001560 <_sbrk+0x38>)
 800152e:	6812      	ldr	r2, [r2, #0]
 8001530:	b152      	cbz	r2, 8001548 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001532:	4a0b      	ldr	r2, [pc, #44]	; (8001560 <_sbrk+0x38>)
 8001534:	6810      	ldr	r0, [r2, #0]
 8001536:	4403      	add	r3, r0
 8001538:	4a0a      	ldr	r2, [pc, #40]	; (8001564 <_sbrk+0x3c>)
 800153a:	490b      	ldr	r1, [pc, #44]	; (8001568 <_sbrk+0x40>)
 800153c:	1a52      	subs	r2, r2, r1
 800153e:	4293      	cmp	r3, r2
 8001540:	d806      	bhi.n	8001550 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001542:	4a07      	ldr	r2, [pc, #28]	; (8001560 <_sbrk+0x38>)
 8001544:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001546:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 8001548:	4a05      	ldr	r2, [pc, #20]	; (8001560 <_sbrk+0x38>)
 800154a:	4908      	ldr	r1, [pc, #32]	; (800156c <_sbrk+0x44>)
 800154c:	6011      	str	r1, [r2, #0]
 800154e:	e7f0      	b.n	8001532 <_sbrk+0xa>
    errno = ENOMEM;
 8001550:	f007 ff38 	bl	80093c4 <__errno>
 8001554:	230c      	movs	r3, #12
 8001556:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001558:	f04f 30ff 	mov.w	r0, #4294967295
 800155c:	e7f3      	b.n	8001546 <_sbrk+0x1e>
 800155e:	bf00      	nop
 8001560:	20002fe0 	.word	0x20002fe0
 8001564:	20020000 	.word	0x20020000
 8001568:	00000400 	.word	0x00000400
 800156c:	20003718 	.word	0x20003718

08001570 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001570:	4a03      	ldr	r2, [pc, #12]	; (8001580 <SystemInit+0x10>)
 8001572:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001576:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800157a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800157e:	4770      	bx	lr
 8001580:	e000ed00 	.word	0xe000ed00

08001584 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001584:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001588:	480d      	ldr	r0, [pc, #52]	; (80015c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800158a:	490e      	ldr	r1, [pc, #56]	; (80015c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800158c:	4a0e      	ldr	r2, [pc, #56]	; (80015c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800158e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001590:	e002      	b.n	8001598 <LoopCopyDataInit>

08001592 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001592:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001594:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001596:	3304      	adds	r3, #4

08001598 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001598:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800159a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800159c:	d3f9      	bcc.n	8001592 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800159e:	4a0b      	ldr	r2, [pc, #44]	; (80015cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015a0:	4c0b      	ldr	r4, [pc, #44]	; (80015d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015a4:	e001      	b.n	80015aa <LoopFillZerobss>

080015a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015a8:	3204      	adds	r2, #4

080015aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015ac:	d3fb      	bcc.n	80015a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015ae:	f7ff ffdf 	bl	8001570 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015b2:	f007 ff0d 	bl	80093d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015b6:	f7ff fc55 	bl	8000e64 <main>
  bx  lr    
 80015ba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80015bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015c4:	20000298 	.word	0x20000298
  ldr r2, =_sidata
 80015c8:	08009cf0 	.word	0x08009cf0
  ldr r2, =_sbss
 80015cc:	20000298 	.word	0x20000298
  ldr r4, =_ebss
 80015d0:	20003714 	.word	0x20003714

080015d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015d4:	e7fe      	b.n	80015d4 <ADC_IRQHandler>
	...

080015d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015d8:	b510      	push	{r4, lr}
 80015da:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015dc:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <HAL_InitTick+0x40>)
 80015de:	7818      	ldrb	r0, [r3, #0]
 80015e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015e4:	fbb3 f3f0 	udiv	r3, r3, r0
 80015e8:	4a0c      	ldr	r2, [pc, #48]	; (800161c <HAL_InitTick+0x44>)
 80015ea:	6810      	ldr	r0, [r2, #0]
 80015ec:	fbb0 f0f3 	udiv	r0, r0, r3
 80015f0:	f000 f8ae 	bl	8001750 <HAL_SYSTICK_Config>
 80015f4:	b968      	cbnz	r0, 8001612 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015f6:	2c0f      	cmp	r4, #15
 80015f8:	d901      	bls.n	80015fe <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80015fa:	2001      	movs	r0, #1
 80015fc:	e00a      	b.n	8001614 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015fe:	2200      	movs	r2, #0
 8001600:	4621      	mov	r1, r4
 8001602:	f04f 30ff 	mov.w	r0, #4294967295
 8001606:	f000 f85f 	bl	80016c8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800160a:	4b05      	ldr	r3, [pc, #20]	; (8001620 <HAL_InitTick+0x48>)
 800160c:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800160e:	2000      	movs	r0, #0
 8001610:	e000      	b.n	8001614 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8001612:	2001      	movs	r0, #1
}
 8001614:	bd10      	pop	{r4, pc}
 8001616:	bf00      	nop
 8001618:	2000000c 	.word	0x2000000c
 800161c:	20000008 	.word	0x20000008
 8001620:	20000010 	.word	0x20000010

08001624 <HAL_Init>:
{
 8001624:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001626:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <HAL_Init+0x30>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800162e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001636:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800163e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001640:	2003      	movs	r0, #3
 8001642:	f000 f82f 	bl	80016a4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001646:	200f      	movs	r0, #15
 8001648:	f7ff ffc6 	bl	80015d8 <HAL_InitTick>
  HAL_MspInit();
 800164c:	f7ff fda4 	bl	8001198 <HAL_MspInit>
}
 8001650:	2000      	movs	r0, #0
 8001652:	bd08      	pop	{r3, pc}
 8001654:	40023c00 	.word	0x40023c00

08001658 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001658:	4a03      	ldr	r2, [pc, #12]	; (8001668 <HAL_IncTick+0x10>)
 800165a:	6811      	ldr	r1, [r2, #0]
 800165c:	4b03      	ldr	r3, [pc, #12]	; (800166c <HAL_IncTick+0x14>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	440b      	add	r3, r1
 8001662:	6013      	str	r3, [r2, #0]
}
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	20002fe4 	.word	0x20002fe4
 800166c:	2000000c 	.word	0x2000000c

08001670 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001670:	4b01      	ldr	r3, [pc, #4]	; (8001678 <HAL_GetTick+0x8>)
 8001672:	6818      	ldr	r0, [r3, #0]
}
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	20002fe4 	.word	0x20002fe4

0800167c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800167c:	b538      	push	{r3, r4, r5, lr}
 800167e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001680:	f7ff fff6 	bl	8001670 <HAL_GetTick>
 8001684:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001686:	f1b4 3fff 	cmp.w	r4, #4294967295
 800168a:	d002      	beq.n	8001692 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 800168c:	4b04      	ldr	r3, [pc, #16]	; (80016a0 <HAL_Delay+0x24>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001692:	f7ff ffed 	bl	8001670 <HAL_GetTick>
 8001696:	1b40      	subs	r0, r0, r5
 8001698:	42a0      	cmp	r0, r4
 800169a:	d3fa      	bcc.n	8001692 <HAL_Delay+0x16>
  {
  }
}
 800169c:	bd38      	pop	{r3, r4, r5, pc}
 800169e:	bf00      	nop
 80016a0:	2000000c 	.word	0x2000000c

080016a4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016a4:	4907      	ldr	r1, [pc, #28]	; (80016c4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80016a6:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016a8:	0203      	lsls	r3, r0, #8
 80016aa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80016b2:	0412      	lsls	r2, r2, #16
 80016b4:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80016c0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80016c2:	4770      	bx	lr
 80016c4:	e000ed00 	.word	0xe000ed00

080016c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016c8:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016ca:	4b18      	ldr	r3, [pc, #96]	; (800172c <HAL_NVIC_SetPriority+0x64>)
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016d2:	f1c3 0c07 	rsb	ip, r3, #7
 80016d6:	f1bc 0f04 	cmp.w	ip, #4
 80016da:	bf28      	it	cs
 80016dc:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016e0:	f103 0e04 	add.w	lr, r3, #4
 80016e4:	f1be 0f06 	cmp.w	lr, #6
 80016e8:	bf8c      	ite	hi
 80016ea:	3b03      	subhi	r3, #3
 80016ec:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ee:	f04f 3eff 	mov.w	lr, #4294967295
 80016f2:	fa0e fc0c 	lsl.w	ip, lr, ip
 80016f6:	ea21 010c 	bic.w	r1, r1, ip
 80016fa:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016fc:	fa0e f303 	lsl.w	r3, lr, r3
 8001700:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001704:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001706:	2800      	cmp	r0, #0
 8001708:	db09      	blt.n	800171e <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800170a:	0109      	lsls	r1, r1, #4
 800170c:	b2c9      	uxtb	r1, r1
 800170e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001712:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001716:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800171a:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800171e:	f000 000f 	and.w	r0, r0, #15
 8001722:	0109      	lsls	r1, r1, #4
 8001724:	b2c9      	uxtb	r1, r1
 8001726:	4b02      	ldr	r3, [pc, #8]	; (8001730 <HAL_NVIC_SetPriority+0x68>)
 8001728:	5419      	strb	r1, [r3, r0]
 800172a:	e7f6      	b.n	800171a <HAL_NVIC_SetPriority+0x52>
 800172c:	e000ed00 	.word	0xe000ed00
 8001730:	e000ed14 	.word	0xe000ed14

08001734 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001734:	2800      	cmp	r0, #0
 8001736:	db08      	blt.n	800174a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001738:	0942      	lsrs	r2, r0, #5
 800173a:	f000 001f 	and.w	r0, r0, #31
 800173e:	2301      	movs	r3, #1
 8001740:	fa03 f000 	lsl.w	r0, r3, r0
 8001744:	4b01      	ldr	r3, [pc, #4]	; (800174c <HAL_NVIC_EnableIRQ+0x18>)
 8001746:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800174a:	4770      	bx	lr
 800174c:	e000e100 	.word	0xe000e100

08001750 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001750:	3801      	subs	r0, #1
 8001752:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001756:	d20b      	bcs.n	8001770 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001758:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800175c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800175e:	4a05      	ldr	r2, [pc, #20]	; (8001774 <HAL_SYSTICK_Config+0x24>)
 8001760:	21f0      	movs	r1, #240	; 0xf0
 8001762:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001766:	2000      	movs	r0, #0
 8001768:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800176a:	2207      	movs	r2, #7
 800176c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800176e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001770:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001772:	4770      	bx	lr
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001778:	b410      	push	{r4}
 800177a:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800177c:	6803      	ldr	r3, [r0, #0]
 800177e:	b2d8      	uxtb	r0, r3
 8001780:	3810      	subs	r0, #16
 8001782:	490b      	ldr	r1, [pc, #44]	; (80017b0 <DMA_CalcBaseAndBitshift+0x38>)
 8001784:	fba1 4100 	umull	r4, r1, r1, r0
 8001788:	0909      	lsrs	r1, r1, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800178a:	4c0a      	ldr	r4, [pc, #40]	; (80017b4 <DMA_CalcBaseAndBitshift+0x3c>)
 800178c:	5c61      	ldrb	r1, [r4, r1]
 800178e:	65d1      	str	r1, [r2, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001790:	285f      	cmp	r0, #95	; 0x5f
 8001792:	d908      	bls.n	80017a6 <DMA_CalcBaseAndBitshift+0x2e>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001794:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001798:	f023 0303 	bic.w	r3, r3, #3
 800179c:	1d18      	adds	r0, r3, #4
 800179e:	6590      	str	r0, [r2, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 80017a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80017a4:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80017a6:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
 80017aa:	f020 0003 	bic.w	r0, r0, #3
 80017ae:	e7f6      	b.n	800179e <DMA_CalcBaseAndBitshift+0x26>
 80017b0:	aaaaaaab 	.word	0xaaaaaaab
 80017b4:	0800986c 	.word	0x0800986c

080017b8 <HAL_DMA_Init>:
{
 80017b8:	b538      	push	{r3, r4, r5, lr}
 80017ba:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80017bc:	f7ff ff58 	bl	8001670 <HAL_GetTick>
  if(hdma == NULL)
 80017c0:	2c00      	cmp	r4, #0
 80017c2:	f000 808c 	beq.w	80018de <HAL_DMA_Init+0x126>
 80017c6:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 80017c8:	2302      	movs	r3, #2
 80017ca:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 80017ce:	2300      	movs	r3, #0
 80017d0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 80017d4:	6822      	ldr	r2, [r4, #0]
 80017d6:	6813      	ldr	r3, [r2, #0]
 80017d8:	f023 0301 	bic.w	r3, r3, #1
 80017dc:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017de:	6823      	ldr	r3, [r4, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	f012 0f01 	tst.w	r2, #1
 80017e6:	d00a      	beq.n	80017fe <HAL_DMA_Init+0x46>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017e8:	f7ff ff42 	bl	8001670 <HAL_GetTick>
 80017ec:	1b43      	subs	r3, r0, r5
 80017ee:	2b05      	cmp	r3, #5
 80017f0:	d9f5      	bls.n	80017de <HAL_DMA_Init+0x26>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017f2:	2320      	movs	r3, #32
 80017f4:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017f6:	2003      	movs	r0, #3
 80017f8:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80017fc:	bd38      	pop	{r3, r4, r5, pc}
  tmp = hdma->Instance->CR;
 80017fe:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001800:	4838      	ldr	r0, [pc, #224]	; (80018e4 <HAL_DMA_Init+0x12c>)
 8001802:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001804:	6861      	ldr	r1, [r4, #4]
 8001806:	68a2      	ldr	r2, [r4, #8]
 8001808:	430a      	orrs	r2, r1
 800180a:	68e1      	ldr	r1, [r4, #12]
 800180c:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800180e:	6921      	ldr	r1, [r4, #16]
 8001810:	430a      	orrs	r2, r1
 8001812:	6961      	ldr	r1, [r4, #20]
 8001814:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001816:	69a1      	ldr	r1, [r4, #24]
 8001818:	430a      	orrs	r2, r1
 800181a:	69e1      	ldr	r1, [r4, #28]
 800181c:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 800181e:	6a21      	ldr	r1, [r4, #32]
 8001820:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001822:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001824:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001826:	2904      	cmp	r1, #4
 8001828:	d021      	beq.n	800186e <HAL_DMA_Init+0xb6>
  hdma->Instance->CR = tmp;  
 800182a:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 800182c:	6821      	ldr	r1, [r4, #0]
 800182e:	694a      	ldr	r2, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001830:	f022 0207 	bic.w	r2, r2, #7
  tmp |= hdma->Init.FIFOMode;
 8001834:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001836:	431a      	orrs	r2, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001838:	2b04      	cmp	r3, #4
 800183a:	d10a      	bne.n	8001852 <HAL_DMA_Init+0x9a>
    tmp |= hdma->Init.FIFOThreshold;
 800183c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800183e:	4302      	orrs	r2, r0
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001840:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001842:	b133      	cbz	r3, 8001852 <HAL_DMA_Init+0x9a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001844:	69a5      	ldr	r5, [r4, #24]
 8001846:	bb3d      	cbnz	r5, 8001898 <HAL_DMA_Init+0xe0>
  {
    switch (tmp)
 8001848:	2801      	cmp	r0, #1
 800184a:	d01f      	beq.n	800188c <HAL_DMA_Init+0xd4>
 800184c:	f030 0002 	bics.w	r0, r0, #2
 8001850:	d012      	beq.n	8001878 <HAL_DMA_Init+0xc0>
  hdma->Instance->FCR = tmp;
 8001852:	614a      	str	r2, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001854:	4620      	mov	r0, r4
 8001856:	f7ff ff8f 	bl	8001778 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800185a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800185c:	233f      	movs	r3, #63	; 0x3f
 800185e:	4093      	lsls	r3, r2
 8001860:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001862:	2000      	movs	r0, #0
 8001864:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001866:	2301      	movs	r3, #1
 8001868:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 800186c:	e7c6      	b.n	80017fc <HAL_DMA_Init+0x44>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800186e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001870:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001872:	4301      	orrs	r1, r0
 8001874:	430a      	orrs	r2, r1
 8001876:	e7d8      	b.n	800182a <HAL_DMA_Init+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8001878:	f3c3 6300 	ubfx	r3, r3, #24, #1
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800187c:	2b00      	cmp	r3, #0
 800187e:	d0e8      	beq.n	8001852 <HAL_DMA_Init+0x9a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001880:	2340      	movs	r3, #64	; 0x40
 8001882:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001884:	2001      	movs	r0, #1
 8001886:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 800188a:	e7b7      	b.n	80017fc <HAL_DMA_Init+0x44>
  HAL_StatusTypeDef status = HAL_OK;
 800188c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001890:	bf14      	ite	ne
 8001892:	2300      	movne	r3, #0
 8001894:	2301      	moveq	r3, #1
 8001896:	e7f1      	b.n	800187c <HAL_DMA_Init+0xc4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001898:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 800189c:	d008      	beq.n	80018b0 <HAL_DMA_Init+0xf8>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800189e:	2802      	cmp	r0, #2
 80018a0:	d9ee      	bls.n	8001880 <HAL_DMA_Init+0xc8>
 80018a2:	2803      	cmp	r0, #3
 80018a4:	d1d5      	bne.n	8001852 <HAL_DMA_Init+0x9a>
  HAL_StatusTypeDef status = HAL_OK;
 80018a6:	f3c3 6300 	ubfx	r3, r3, #24, #1
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d0d1      	beq.n	8001852 <HAL_DMA_Init+0x9a>
 80018ae:	e7e7      	b.n	8001880 <HAL_DMA_Init+0xc8>
    switch (tmp)
 80018b0:	2803      	cmp	r0, #3
 80018b2:	d8ce      	bhi.n	8001852 <HAL_DMA_Init+0x9a>
 80018b4:	a501      	add	r5, pc, #4	; (adr r5, 80018bc <HAL_DMA_Init+0x104>)
 80018b6:	f855 f020 	ldr.w	pc, [r5, r0, lsl #2]
 80018ba:	bf00      	nop
 80018bc:	08001881 	.word	0x08001881
 80018c0:	080018cd 	.word	0x080018cd
 80018c4:	08001881 	.word	0x08001881
 80018c8:	080018d3 	.word	0x080018d3
  HAL_StatusTypeDef status = HAL_OK;
 80018cc:	f3c3 6300 	ubfx	r3, r3, #24, #1
 80018d0:	e7eb      	b.n	80018aa <HAL_DMA_Init+0xf2>
 80018d2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80018d6:	bf14      	ite	ne
 80018d8:	2300      	movne	r3, #0
 80018da:	2301      	moveq	r3, #1
 80018dc:	e7e5      	b.n	80018aa <HAL_DMA_Init+0xf2>
    return HAL_ERROR;
 80018de:	2001      	movs	r0, #1
 80018e0:	e78c      	b.n	80017fc <HAL_DMA_Init+0x44>
 80018e2:	bf00      	nop
 80018e4:	f010803f 	.word	0xf010803f

080018e8 <HAL_DMA_Start_IT>:
{
 80018e8:	b470      	push	{r4, r5, r6}
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018ea:	6d84      	ldr	r4, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 80018ec:	f890 c034 	ldrb.w	ip, [r0, #52]	; 0x34
 80018f0:	f1bc 0f01 	cmp.w	ip, #1
 80018f4:	d03f      	beq.n	8001976 <HAL_DMA_Start_IT+0x8e>
 80018f6:	f04f 0c01 	mov.w	ip, #1
 80018fa:	f880 c034 	strb.w	ip, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80018fe:	f890 c035 	ldrb.w	ip, [r0, #53]	; 0x35
 8001902:	fa5f fc8c 	uxtb.w	ip, ip
 8001906:	f1bc 0f01 	cmp.w	ip, #1
 800190a:	d005      	beq.n	8001918 <HAL_DMA_Start_IT+0x30>
    __HAL_UNLOCK(hdma);	  
 800190c:	2300      	movs	r3, #0
 800190e:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    status = HAL_BUSY;
 8001912:	2002      	movs	r0, #2
}
 8001914:	bc70      	pop	{r4, r5, r6}
 8001916:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8001918:	2502      	movs	r5, #2
 800191a:	f880 5035 	strb.w	r5, [r0, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800191e:	2500      	movs	r5, #0
 8001920:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001922:	6806      	ldr	r6, [r0, #0]
 8001924:	6835      	ldr	r5, [r6, #0]
 8001926:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 800192a:	6035      	str	r5, [r6, #0]
  hdma->Instance->NDTR = DataLength;
 800192c:	6805      	ldr	r5, [r0, #0]
 800192e:	606b      	str	r3, [r5, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001930:	6883      	ldr	r3, [r0, #8]
 8001932:	2b40      	cmp	r3, #64	; 0x40
 8001934:	d01a      	beq.n	800196c <HAL_DMA_Start_IT+0x84>
    hdma->Instance->PAR = SrcAddress;
 8001936:	6803      	ldr	r3, [r0, #0]
 8001938:	6099      	str	r1, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800193a:	6803      	ldr	r3, [r0, #0]
 800193c:	60da      	str	r2, [r3, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800193e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001940:	233f      	movs	r3, #63	; 0x3f
 8001942:	4093      	lsls	r3, r2
 8001944:	60a3      	str	r3, [r4, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001946:	6802      	ldr	r2, [r0, #0]
 8001948:	6813      	ldr	r3, [r2, #0]
 800194a:	f043 0316 	orr.w	r3, r3, #22
 800194e:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8001950:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001952:	b123      	cbz	r3, 800195e <HAL_DMA_Start_IT+0x76>
      hdma->Instance->CR  |= DMA_IT_HT;
 8001954:	6802      	ldr	r2, [r0, #0]
 8001956:	6813      	ldr	r3, [r2, #0]
 8001958:	f043 0308 	orr.w	r3, r3, #8
 800195c:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 800195e:	6802      	ldr	r2, [r0, #0]
 8001960:	6813      	ldr	r3, [r2, #0]
 8001962:	f043 0301 	orr.w	r3, r3, #1
 8001966:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001968:	2000      	movs	r0, #0
 800196a:	e7d3      	b.n	8001914 <HAL_DMA_Start_IT+0x2c>
    hdma->Instance->PAR = DstAddress;
 800196c:	6803      	ldr	r3, [r0, #0]
 800196e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8001970:	6803      	ldr	r3, [r0, #0]
 8001972:	60d9      	str	r1, [r3, #12]
 8001974:	e7e3      	b.n	800193e <HAL_DMA_Start_IT+0x56>
  __HAL_LOCK(hdma);
 8001976:	2002      	movs	r0, #2
 8001978:	e7cc      	b.n	8001914 <HAL_DMA_Start_IT+0x2c>
	...

0800197c <HAL_DMA_IRQHandler>:
{
 800197c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800197e:	b083      	sub	sp, #12
 8001980:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8001982:	2300      	movs	r3, #0
 8001984:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001986:	4b72      	ldr	r3, [pc, #456]	; (8001b50 <HAL_DMA_IRQHandler+0x1d4>)
 8001988:	681e      	ldr	r6, [r3, #0]
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800198a:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 800198c:	683d      	ldr	r5, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800198e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001990:	2308      	movs	r3, #8
 8001992:	4093      	lsls	r3, r2
 8001994:	422b      	tst	r3, r5
 8001996:	d010      	beq.n	80019ba <HAL_DMA_IRQHandler+0x3e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001998:	6803      	ldr	r3, [r0, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	f012 0f04 	tst.w	r2, #4
 80019a0:	d00b      	beq.n	80019ba <HAL_DMA_IRQHandler+0x3e>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	f022 0204 	bic.w	r2, r2, #4
 80019a8:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80019aa:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80019ac:	2308      	movs	r3, #8
 80019ae:	4093      	lsls	r3, r2
 80019b0:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80019b2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80019ba:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80019bc:	2301      	movs	r3, #1
 80019be:	4093      	lsls	r3, r2
 80019c0:	422b      	tst	r3, r5
 80019c2:	d009      	beq.n	80019d8 <HAL_DMA_IRQHandler+0x5c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80019c4:	6822      	ldr	r2, [r4, #0]
 80019c6:	6952      	ldr	r2, [r2, #20]
 80019c8:	f012 0f80 	tst.w	r2, #128	; 0x80
 80019cc:	d004      	beq.n	80019d8 <HAL_DMA_IRQHandler+0x5c>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80019ce:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80019d0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80019d2:	f043 0302 	orr.w	r3, r3, #2
 80019d6:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80019d8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80019da:	2304      	movs	r3, #4
 80019dc:	4093      	lsls	r3, r2
 80019de:	422b      	tst	r3, r5
 80019e0:	d009      	beq.n	80019f6 <HAL_DMA_IRQHandler+0x7a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80019e2:	6822      	ldr	r2, [r4, #0]
 80019e4:	6812      	ldr	r2, [r2, #0]
 80019e6:	f012 0f02 	tst.w	r2, #2
 80019ea:	d004      	beq.n	80019f6 <HAL_DMA_IRQHandler+0x7a>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80019ec:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80019ee:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80019f0:	f043 0304 	orr.w	r3, r3, #4
 80019f4:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80019f6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80019f8:	2310      	movs	r3, #16
 80019fa:	4093      	lsls	r3, r2
 80019fc:	422b      	tst	r3, r5
 80019fe:	d024      	beq.n	8001a4a <HAL_DMA_IRQHandler+0xce>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a00:	6822      	ldr	r2, [r4, #0]
 8001a02:	6812      	ldr	r2, [r2, #0]
 8001a04:	f012 0f08 	tst.w	r2, #8
 8001a08:	d01f      	beq.n	8001a4a <HAL_DMA_IRQHandler+0xce>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a0a:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a0c:	6823      	ldr	r3, [r4, #0]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8001a14:	d00d      	beq.n	8001a32 <HAL_DMA_IRQHandler+0xb6>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001a1c:	d104      	bne.n	8001a28 <HAL_DMA_IRQHandler+0xac>
          if(hdma->XferHalfCpltCallback != NULL)
 8001a1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a20:	b19b      	cbz	r3, 8001a4a <HAL_DMA_IRQHandler+0xce>
            hdma->XferHalfCpltCallback(hdma);
 8001a22:	4620      	mov	r0, r4
 8001a24:	4798      	blx	r3
 8001a26:	e010      	b.n	8001a4a <HAL_DMA_IRQHandler+0xce>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a28:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001a2a:	b173      	cbz	r3, 8001a4a <HAL_DMA_IRQHandler+0xce>
            hdma->XferM1HalfCpltCallback(hdma);
 8001a2c:	4620      	mov	r0, r4
 8001a2e:	4798      	blx	r3
 8001a30:	e00b      	b.n	8001a4a <HAL_DMA_IRQHandler+0xce>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001a38:	d103      	bne.n	8001a42 <HAL_DMA_IRQHandler+0xc6>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	f022 0208 	bic.w	r2, r2, #8
 8001a40:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8001a42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a44:	b10b      	cbz	r3, 8001a4a <HAL_DMA_IRQHandler+0xce>
          hdma->XferHalfCpltCallback(hdma);
 8001a46:	4620      	mov	r0, r4
 8001a48:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001a4a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001a4c:	2320      	movs	r3, #32
 8001a4e:	4093      	lsls	r3, r2
 8001a50:	422b      	tst	r3, r5
 8001a52:	d055      	beq.n	8001b00 <HAL_DMA_IRQHandler+0x184>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001a54:	6822      	ldr	r2, [r4, #0]
 8001a56:	6812      	ldr	r2, [r2, #0]
 8001a58:	f012 0f10 	tst.w	r2, #16
 8001a5c:	d050      	beq.n	8001b00 <HAL_DMA_IRQHandler+0x184>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a5e:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a60:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	2b05      	cmp	r3, #5
 8001a68:	d00e      	beq.n	8001a88 <HAL_DMA_IRQHandler+0x10c>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a6a:	6823      	ldr	r3, [r4, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8001a72:	d033      	beq.n	8001adc <HAL_DMA_IRQHandler+0x160>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001a7a:	d12a      	bne.n	8001ad2 <HAL_DMA_IRQHandler+0x156>
          if(hdma->XferM1CpltCallback != NULL)
 8001a7c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d03e      	beq.n	8001b00 <HAL_DMA_IRQHandler+0x184>
            hdma->XferM1CpltCallback(hdma);
 8001a82:	4620      	mov	r0, r4
 8001a84:	4798      	blx	r3
 8001a86:	e03b      	b.n	8001b00 <HAL_DMA_IRQHandler+0x184>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a88:	6822      	ldr	r2, [r4, #0]
 8001a8a:	6813      	ldr	r3, [r2, #0]
 8001a8c:	f023 0316 	bic.w	r3, r3, #22
 8001a90:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a92:	6822      	ldr	r2, [r4, #0]
 8001a94:	6953      	ldr	r3, [r2, #20]
 8001a96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a9a:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a9e:	b1a3      	cbz	r3, 8001aca <HAL_DMA_IRQHandler+0x14e>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001aa0:	6822      	ldr	r2, [r4, #0]
 8001aa2:	6813      	ldr	r3, [r2, #0]
 8001aa4:	f023 0308 	bic.w	r3, r3, #8
 8001aa8:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001aaa:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001aac:	233f      	movs	r3, #63	; 0x3f
 8001aae:	4093      	lsls	r3, r2
 8001ab0:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8001ab8:	2300      	movs	r3, #0
 8001aba:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 8001abe:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d043      	beq.n	8001b4c <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8001ac4:	4620      	mov	r0, r4
 8001ac6:	4798      	blx	r3
 8001ac8:	e040      	b.n	8001b4c <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001aca:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d1e7      	bne.n	8001aa0 <HAL_DMA_IRQHandler+0x124>
 8001ad0:	e7eb      	b.n	8001aaa <HAL_DMA_IRQHandler+0x12e>
          if(hdma->XferCpltCallback != NULL)
 8001ad2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001ad4:	b1a3      	cbz	r3, 8001b00 <HAL_DMA_IRQHandler+0x184>
            hdma->XferCpltCallback(hdma);
 8001ad6:	4620      	mov	r0, r4
 8001ad8:	4798      	blx	r3
 8001ada:	e011      	b.n	8001b00 <HAL_DMA_IRQHandler+0x184>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001ae2:	d109      	bne.n	8001af8 <HAL_DMA_IRQHandler+0x17c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	f022 0210 	bic.w	r2, r2, #16
 8001aea:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8001aec:	2301      	movs	r3, #1
 8001aee:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8001af2:	2300      	movs	r3, #0
 8001af4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8001af8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001afa:	b10b      	cbz	r3, 8001b00 <HAL_DMA_IRQHandler+0x184>
          hdma->XferCpltCallback(hdma);
 8001afc:	4620      	mov	r0, r4
 8001afe:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001b00:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001b02:	b31b      	cbz	r3, 8001b4c <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001b04:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001b06:	f013 0f01 	tst.w	r3, #1
 8001b0a:	d01b      	beq.n	8001b44 <HAL_DMA_IRQHandler+0x1c8>
  uint32_t timeout = SystemCoreClock / 9600U;
 8001b0c:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <HAL_DMA_IRQHandler+0x1d8>)
 8001b0e:	fba3 3606 	umull	r3, r6, r3, r6
 8001b12:	0ab6      	lsrs	r6, r6, #10
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b14:	2305      	movs	r3, #5
 8001b16:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001b1a:	6822      	ldr	r2, [r4, #0]
 8001b1c:	6813      	ldr	r3, [r2, #0]
 8001b1e:	f023 0301 	bic.w	r3, r3, #1
 8001b22:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8001b24:	9b01      	ldr	r3, [sp, #4]
 8001b26:	3301      	adds	r3, #1
 8001b28:	9301      	str	r3, [sp, #4]
 8001b2a:	42b3      	cmp	r3, r6
 8001b2c:	d804      	bhi.n	8001b38 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001b2e:	6823      	ldr	r3, [r4, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f013 0f01 	tst.w	r3, #1
 8001b36:	d1f5      	bne.n	8001b24 <HAL_DMA_IRQHandler+0x1a8>
      hdma->State = HAL_DMA_STATE_READY;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8001b3e:	2300      	movs	r3, #0
 8001b40:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 8001b44:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001b46:	b10b      	cbz	r3, 8001b4c <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8001b48:	4620      	mov	r0, r4
 8001b4a:	4798      	blx	r3
}
 8001b4c:	b003      	add	sp, #12
 8001b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b50:	20000008 	.word	0x20000008
 8001b54:	1b4e81b5 	.word	0x1b4e81b5

08001b58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b5c:	b083      	sub	sp, #12
 8001b5e:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b60:	4613      	mov	r3, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b62:	4d7b      	ldr	r5, [pc, #492]	; (8001d50 <HAL_GPIO_Init+0x1f8>)
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b64:	4c7b      	ldr	r4, [pc, #492]	; (8001d54 <HAL_GPIO_Init+0x1fc>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b66:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 8001d5c <HAL_GPIO_Init+0x204>
 8001b6a:	e04d      	b.n	8001c08 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8001b6c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b6e:	f04f 0903 	mov.w	r9, #3
 8001b72:	fa09 f902 	lsl.w	r9, r9, r2
 8001b76:	ea27 0909 	bic.w	r9, r7, r9
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b7a:	68cf      	ldr	r7, [r1, #12]
 8001b7c:	4097      	lsls	r7, r2
 8001b7e:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 8001b82:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001b84:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b86:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b8a:	684f      	ldr	r7, [r1, #4]
 8001b8c:	f3c7 1700 	ubfx	r7, r7, #4, #1
 8001b90:	409f      	lsls	r7, r3
 8001b92:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001b96:	6047      	str	r7, [r0, #4]
 8001b98:	e046      	b.n	8001c28 <HAL_GPIO_Init+0xd0>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b9a:	f04f 0e00 	mov.w	lr, #0
 8001b9e:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001ba2:	ea4e 0e0a 	orr.w	lr, lr, sl
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ba6:	f8c7 e008 	str.w	lr, [r7, #8]
        temp = EXTI->RTSR;
 8001baa:	68a7      	ldr	r7, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8001bac:	ea6f 0e0c 	mvn.w	lr, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bb0:	684e      	ldr	r6, [r1, #4]
 8001bb2:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001bb6:	bf0c      	ite	eq
 8001bb8:	ea0e 0707 	andeq.w	r7, lr, r7
        {
          temp |= iocurrent;
 8001bbc:	ea4c 0707 	orrne.w	r7, ip, r7
        }
        EXTI->RTSR = temp;
 8001bc0:	60a7      	str	r7, [r4, #8]

        temp = EXTI->FTSR;
 8001bc2:	68e7      	ldr	r7, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bc4:	684e      	ldr	r6, [r1, #4]
 8001bc6:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 8001bca:	bf0c      	ite	eq
 8001bcc:	ea0e 0707 	andeq.w	r7, lr, r7
        {
          temp |= iocurrent;
 8001bd0:	ea4c 0707 	orrne.w	r7, ip, r7
        }
        EXTI->FTSR = temp;
 8001bd4:	60e7      	str	r7, [r4, #12]

        temp = EXTI->EMR;
 8001bd6:	6867      	ldr	r7, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bd8:	684e      	ldr	r6, [r1, #4]
 8001bda:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001bde:	bf0c      	ite	eq
 8001be0:	ea0e 0707 	andeq.w	r7, lr, r7
        {
          temp |= iocurrent;
 8001be4:	ea4c 0707 	orrne.w	r7, ip, r7
        }
        EXTI->EMR = temp;
 8001be8:	6067      	str	r7, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bea:	6827      	ldr	r7, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bec:	684e      	ldr	r6, [r1, #4]
 8001bee:	f416 3f80 	tst.w	r6, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001bf2:	bf0c      	ite	eq
 8001bf4:	ea0e 0707 	andeq.w	r7, lr, r7
        {
          temp |= iocurrent;
 8001bf8:	ea4c 0707 	orrne.w	r7, ip, r7
        }
        EXTI->IMR = temp;
 8001bfc:	6027      	str	r7, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bfe:	3301      	adds	r3, #1
 8001c00:	3202      	adds	r2, #2
 8001c02:	2b10      	cmp	r3, #16
 8001c04:	f000 80a1 	beq.w	8001d4a <HAL_GPIO_Init+0x1f2>
    ioposition = 0x01U << position;
 8001c08:	f04f 0e01 	mov.w	lr, #1
 8001c0c:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c10:	680f      	ldr	r7, [r1, #0]
 8001c12:	ea0e 0c07 	and.w	ip, lr, r7
    if(iocurrent == ioposition)
 8001c16:	ea3e 0607 	bics.w	r6, lr, r7
 8001c1a:	d1f0      	bne.n	8001bfe <HAL_GPIO_Init+0xa6>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c1c:	684f      	ldr	r7, [r1, #4]
 8001c1e:	f007 0703 	and.w	r7, r7, #3
 8001c22:	3f01      	subs	r7, #1
 8001c24:	2f01      	cmp	r7, #1
 8001c26:	d9a1      	bls.n	8001b6c <HAL_GPIO_Init+0x14>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c28:	684f      	ldr	r7, [r1, #4]
 8001c2a:	f007 0703 	and.w	r7, r7, #3
 8001c2e:	2f03      	cmp	r7, #3
 8001c30:	d027      	beq.n	8001c82 <HAL_GPIO_Init+0x12a>
        temp = GPIOx->PUPDR;
 8001c32:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c34:	f04f 0e03 	mov.w	lr, #3
 8001c38:	fa0e fe02 	lsl.w	lr, lr, r2
 8001c3c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c40:	688f      	ldr	r7, [r1, #8]
 8001c42:	4097      	lsls	r7, r2
 8001c44:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8001c48:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c4a:	684f      	ldr	r7, [r1, #4]
 8001c4c:	f007 0703 	and.w	r7, r7, #3
 8001c50:	2f02      	cmp	r7, #2
 8001c52:	d116      	bne.n	8001c82 <HAL_GPIO_Init+0x12a>
        temp = GPIOx->AFR[position >> 3U];
 8001c54:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8001c58:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8001c5c:	f8de 7020 	ldr.w	r7, [lr, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c60:	f003 0907 	and.w	r9, r3, #7
 8001c64:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8001c68:	f04f 0a0f 	mov.w	sl, #15
 8001c6c:	fa0a fa09 	lsl.w	sl, sl, r9
 8001c70:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c74:	690f      	ldr	r7, [r1, #16]
 8001c76:	fa07 f709 	lsl.w	r7, r7, r9
 8001c7a:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->AFR[position >> 3U] = temp;
 8001c7e:	f8ce 7020 	str.w	r7, [lr, #32]
      temp = GPIOx->MODER;
 8001c82:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c84:	f04f 0e03 	mov.w	lr, #3
 8001c88:	fa0e fe02 	lsl.w	lr, lr, r2
 8001c8c:	ea27 0e0e 	bic.w	lr, r7, lr
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c90:	684f      	ldr	r7, [r1, #4]
 8001c92:	f007 0703 	and.w	r7, r7, #3
 8001c96:	4097      	lsls	r7, r2
 8001c98:	ea47 070e 	orr.w	r7, r7, lr
      GPIOx->MODER = temp;
 8001c9c:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c9e:	684f      	ldr	r7, [r1, #4]
 8001ca0:	f417 3f40 	tst.w	r7, #196608	; 0x30000
 8001ca4:	d0ab      	beq.n	8001bfe <HAL_GPIO_Init+0xa6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ca6:	2700      	movs	r7, #0
 8001ca8:	9701      	str	r7, [sp, #4]
 8001caa:	6c6f      	ldr	r7, [r5, #68]	; 0x44
 8001cac:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8001cb0:	646f      	str	r7, [r5, #68]	; 0x44
 8001cb2:	6c6f      	ldr	r7, [r5, #68]	; 0x44
 8001cb4:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8001cb8:	9701      	str	r7, [sp, #4]
 8001cba:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001cbc:	f023 0703 	bic.w	r7, r3, #3
 8001cc0:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001cc4:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8001cc8:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ccc:	f003 0e03 	and.w	lr, r3, #3
 8001cd0:	ea4f 0b8e 	mov.w	fp, lr, lsl #2
 8001cd4:	f04f 0e0f 	mov.w	lr, #15
 8001cd8:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001cdc:	ea2a 0a0e 	bic.w	sl, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ce0:	4e1d      	ldr	r6, [pc, #116]	; (8001d58 <HAL_GPIO_Init+0x200>)
 8001ce2:	42b0      	cmp	r0, r6
 8001ce4:	f43f af59 	beq.w	8001b9a <HAL_GPIO_Init+0x42>
 8001ce8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001cec:	42b0      	cmp	r0, r6
 8001cee:	d01a      	beq.n	8001d26 <HAL_GPIO_Init+0x1ce>
 8001cf0:	4540      	cmp	r0, r8
 8001cf2:	d01b      	beq.n	8001d2c <HAL_GPIO_Init+0x1d4>
 8001cf4:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8001cf8:	42b0      	cmp	r0, r6
 8001cfa:	d01a      	beq.n	8001d32 <HAL_GPIO_Init+0x1da>
 8001cfc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001d00:	42b0      	cmp	r0, r6
 8001d02:	d019      	beq.n	8001d38 <HAL_GPIO_Init+0x1e0>
 8001d04:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001d08:	42b0      	cmp	r0, r6
 8001d0a:	d018      	beq.n	8001d3e <HAL_GPIO_Init+0x1e6>
 8001d0c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001d10:	42b0      	cmp	r0, r6
 8001d12:	d017      	beq.n	8001d44 <HAL_GPIO_Init+0x1ec>
 8001d14:	f8df e048 	ldr.w	lr, [pc, #72]	; 8001d60 <HAL_GPIO_Init+0x208>
 8001d18:	4570      	cmp	r0, lr
 8001d1a:	bf0c      	ite	eq
 8001d1c:	f04f 0e07 	moveq.w	lr, #7
 8001d20:	f04f 0e08 	movne.w	lr, #8
 8001d24:	e73b      	b.n	8001b9e <HAL_GPIO_Init+0x46>
 8001d26:	f04f 0e01 	mov.w	lr, #1
 8001d2a:	e738      	b.n	8001b9e <HAL_GPIO_Init+0x46>
 8001d2c:	f04f 0e02 	mov.w	lr, #2
 8001d30:	e735      	b.n	8001b9e <HAL_GPIO_Init+0x46>
 8001d32:	f04f 0e03 	mov.w	lr, #3
 8001d36:	e732      	b.n	8001b9e <HAL_GPIO_Init+0x46>
 8001d38:	f04f 0e04 	mov.w	lr, #4
 8001d3c:	e72f      	b.n	8001b9e <HAL_GPIO_Init+0x46>
 8001d3e:	f04f 0e05 	mov.w	lr, #5
 8001d42:	e72c      	b.n	8001b9e <HAL_GPIO_Init+0x46>
 8001d44:	f04f 0e06 	mov.w	lr, #6
 8001d48:	e729      	b.n	8001b9e <HAL_GPIO_Init+0x46>
      }
    }
  }
}
 8001d4a:	b003      	add	sp, #12
 8001d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d50:	40023800 	.word	0x40023800
 8001d54:	40013c00 	.word	0x40013c00
 8001d58:	40020000 	.word	0x40020000
 8001d5c:	40020800 	.word	0x40020800
 8001d60:	40021c00 	.word	0x40021c00

08001d64 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d68:	b083      	sub	sp, #12

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d6a:	2300      	movs	r3, #0
    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001d6c:	f8df 913c 	ldr.w	r9, [pc, #316]	; 8001eac <HAL_GPIO_DeInit+0x148>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001d70:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8001eb0 <HAL_GPIO_DeInit+0x14c>
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001d74:	f8df a13c 	ldr.w	sl, [pc, #316]	; 8001eb4 <HAL_GPIO_DeInit+0x150>
 8001d78:	f8df b13c 	ldr.w	fp, [pc, #316]	; 8001eb8 <HAL_GPIO_DeInit+0x154>
 8001d7c:	e02b      	b.n	8001dd6 <HAL_GPIO_DeInit+0x72>
 8001d7e:	f04f 0e00 	mov.w	lr, #0
 8001d82:	fa0e f505 	lsl.w	r5, lr, r5
 8001d86:	4565      	cmp	r5, ip
 8001d88:	d06c      	beq.n	8001e64 <HAL_GPIO_DeInit+0x100>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d8a:	6805      	ldr	r5, [r0, #0]
 8001d8c:	005c      	lsls	r4, r3, #1
 8001d8e:	2603      	movs	r6, #3
 8001d90:	fa06 f404 	lsl.w	r4, r6, r4
 8001d94:	ea25 0504 	bic.w	r5, r5, r4
 8001d98:	6005      	str	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d9a:	fa23 f506 	lsr.w	r5, r3, r6
 8001d9e:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8001da2:	6a2e      	ldr	r6, [r5, #32]
 8001da4:	f003 0707 	and.w	r7, r3, #7
 8001da8:	ea4f 0c87 	mov.w	ip, r7, lsl #2
 8001dac:	270f      	movs	r7, #15
 8001dae:	fa07 f70c 	lsl.w	r7, r7, ip
 8001db2:	ea26 0607 	bic.w	r6, r6, r7
 8001db6:	622e      	str	r6, [r5, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001db8:	68c5      	ldr	r5, [r0, #12]
 8001dba:	ea25 0504 	bic.w	r5, r5, r4
 8001dbe:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dc0:	6845      	ldr	r5, [r0, #4]
 8001dc2:	ea25 0202 	bic.w	r2, r5, r2
 8001dc6:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001dc8:	6882      	ldr	r2, [r0, #8]
 8001dca:	ea22 0404 	bic.w	r4, r2, r4
 8001dce:	6084      	str	r4, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	2b10      	cmp	r3, #16
 8001dd4:	d064      	beq.n	8001ea0 <HAL_GPIO_DeInit+0x13c>
    ioposition = 0x01U << position;
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	409a      	lsls	r2, r3
    iocurrent = (GPIO_Pin) & ioposition;
 8001dda:	ea02 0701 	and.w	r7, r2, r1
    if(iocurrent == ioposition)
 8001dde:	ea32 0401 	bics.w	r4, r2, r1
 8001de2:	d1f5      	bne.n	8001dd0 <HAL_GPIO_DeInit+0x6c>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001de4:	f023 0403 	bic.w	r4, r3, #3
 8001de8:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8001dec:	f504 349c 	add.w	r4, r4, #79872	; 0x13800
 8001df0:	f8d4 c008 	ldr.w	ip, [r4, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001df4:	f003 0503 	and.w	r5, r3, #3
 8001df8:	00ad      	lsls	r5, r5, #2
 8001dfa:	260f      	movs	r6, #15
 8001dfc:	40ae      	lsls	r6, r5
 8001dfe:	9601      	str	r6, [sp, #4]
 8001e00:	ea06 0c0c 	and.w	ip, r6, ip
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001e04:	4548      	cmp	r0, r9
 8001e06:	d0ba      	beq.n	8001d7e <HAL_GPIO_DeInit+0x1a>
 8001e08:	4550      	cmp	r0, sl
 8001e0a:	d019      	beq.n	8001e40 <HAL_GPIO_DeInit+0xdc>
 8001e0c:	4558      	cmp	r0, fp
 8001e0e:	d01a      	beq.n	8001e46 <HAL_GPIO_DeInit+0xe2>
 8001e10:	4e25      	ldr	r6, [pc, #148]	; (8001ea8 <HAL_GPIO_DeInit+0x144>)
 8001e12:	42b0      	cmp	r0, r6
 8001e14:	d01a      	beq.n	8001e4c <HAL_GPIO_DeInit+0xe8>
 8001e16:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001e1a:	42b0      	cmp	r0, r6
 8001e1c:	d019      	beq.n	8001e52 <HAL_GPIO_DeInit+0xee>
 8001e1e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001e22:	42b0      	cmp	r0, r6
 8001e24:	d018      	beq.n	8001e58 <HAL_GPIO_DeInit+0xf4>
 8001e26:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001e2a:	42b0      	cmp	r0, r6
 8001e2c:	d017      	beq.n	8001e5e <HAL_GPIO_DeInit+0xfa>
 8001e2e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001e32:	42b0      	cmp	r0, r6
 8001e34:	bf0c      	ite	eq
 8001e36:	f04f 0e07 	moveq.w	lr, #7
 8001e3a:	f04f 0e08 	movne.w	lr, #8
 8001e3e:	e7a0      	b.n	8001d82 <HAL_GPIO_DeInit+0x1e>
 8001e40:	f04f 0e01 	mov.w	lr, #1
 8001e44:	e79d      	b.n	8001d82 <HAL_GPIO_DeInit+0x1e>
 8001e46:	f04f 0e02 	mov.w	lr, #2
 8001e4a:	e79a      	b.n	8001d82 <HAL_GPIO_DeInit+0x1e>
 8001e4c:	f04f 0e03 	mov.w	lr, #3
 8001e50:	e797      	b.n	8001d82 <HAL_GPIO_DeInit+0x1e>
 8001e52:	f04f 0e04 	mov.w	lr, #4
 8001e56:	e794      	b.n	8001d82 <HAL_GPIO_DeInit+0x1e>
 8001e58:	f04f 0e05 	mov.w	lr, #5
 8001e5c:	e791      	b.n	8001d82 <HAL_GPIO_DeInit+0x1e>
 8001e5e:	f04f 0e06 	mov.w	lr, #6
 8001e62:	e78e      	b.n	8001d82 <HAL_GPIO_DeInit+0x1e>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001e64:	f8d8 5000 	ldr.w	r5, [r8]
 8001e68:	ea25 0507 	bic.w	r5, r5, r7
 8001e6c:	f8c8 5000 	str.w	r5, [r8]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001e70:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8001e74:	ea25 0507 	bic.w	r5, r5, r7
 8001e78:	f8c8 5004 	str.w	r5, [r8, #4]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001e7c:	f8d8 500c 	ldr.w	r5, [r8, #12]
 8001e80:	ea25 0507 	bic.w	r5, r5, r7
 8001e84:	f8c8 500c 	str.w	r5, [r8, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001e88:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8001e8c:	ea25 0707 	bic.w	r7, r5, r7
 8001e90:	f8c8 7008 	str.w	r7, [r8, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001e94:	68a5      	ldr	r5, [r4, #8]
 8001e96:	9e01      	ldr	r6, [sp, #4]
 8001e98:	ea25 0606 	bic.w	r6, r5, r6
 8001e9c:	60a6      	str	r6, [r4, #8]
 8001e9e:	e774      	b.n	8001d8a <HAL_GPIO_DeInit+0x26>
    }
  }
}
 8001ea0:	b003      	add	sp, #12
 8001ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40020c00 	.word	0x40020c00
 8001eac:	40020000 	.word	0x40020000
 8001eb0:	40013c00 	.word	0x40013c00
 8001eb4:	40020400 	.word	0x40020400
 8001eb8:	40020800 	.word	0x40020800

08001ebc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ebc:	b10a      	cbz	r2, 8001ec2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ebe:	6181      	str	r1, [r0, #24]
 8001ec0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ec2:	0409      	lsls	r1, r1, #16
 8001ec4:	6181      	str	r1, [r0, #24]
  }
}
 8001ec6:	4770      	bx	lr

08001ec8 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	4604      	mov	r4, r0
 8001ece:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
 8001ed2:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 8001ed6:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001eda:	f894 52f8 	ldrb.w	r5, [r4, #760]	; 0x2f8
 8001ede:	2d01      	cmp	r5, #1
 8001ee0:	d025      	beq.n	8001f2e <HAL_HCD_HC_Init+0x66>
 8001ee2:	2501      	movs	r5, #1
 8001ee4:	f884 52f8 	strb.w	r5, [r4, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001ee8:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
 8001eec:	fb0c 4c01 	mla	ip, ip, r1, r4
 8001ef0:	2500      	movs	r5, #0
 8001ef2:	f88c 503d 	strb.w	r5, [ip, #61]	; 0x3d
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001ef6:	f88c 3038 	strb.w	r3, [ip, #56]	; 0x38
  hhcd->hc[ch_num].max_packet = mps;
 8001efa:	f8ac 7040 	strh.w	r7, [ip, #64]	; 0x40
  hhcd->hc[ch_num].ch_num = ch_num;
 8001efe:	f88c 1039 	strb.w	r1, [ip, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 8001f02:	f88c 603f 	strb.w	r6, [ip, #63]	; 0x3f
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001f06:	f002 0e7f 	and.w	lr, r2, #127	; 0x7f
 8001f0a:	f88c e03a 	strb.w	lr, [ip, #58]	; 0x3a

  if ((epnum & 0x80U) == 0x80U)
 8001f0e:	ea4f 1ed2 	mov.w	lr, r2, lsr #7
 8001f12:	f88c e03b 	strb.w	lr, [ip, #59]	; 0x3b
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
  }

  hhcd->hc[ch_num].speed = speed;
 8001f16:	f88c 003c 	strb.w	r0, [ip, #60]	; 0x3c

  status =  USB_HC_Init(hhcd->Instance,
 8001f1a:	9702      	str	r7, [sp, #8]
 8001f1c:	9601      	str	r6, [sp, #4]
 8001f1e:	9000      	str	r0, [sp, #0]
 8001f20:	6820      	ldr	r0, [r4, #0]
 8001f22:	f002 fd9c 	bl	8004a5e <USB_HC_Init>
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001f26:	f884 52f8 	strb.w	r5, [r4, #760]	; 0x2f8

  return status;
}
 8001f2a:	b005      	add	sp, #20
 8001f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hhcd);
 8001f2e:	2002      	movs	r0, #2
 8001f30:	e7fb      	b.n	8001f2a <HAL_HCD_HC_Init+0x62>

08001f32 <HAL_HCD_HC_Halt>:
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
  HAL_StatusTypeDef status = HAL_OK;

  __HAL_LOCK(hhcd);
 8001f32:	f890 32f8 	ldrb.w	r3, [r0, #760]	; 0x2f8
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d00b      	beq.n	8001f52 <HAL_HCD_HC_Halt+0x20>
{
 8001f3a:	b510      	push	{r4, lr}
 8001f3c:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8001f3e:	2301      	movs	r3, #1
 8001f40:	f880 32f8 	strb.w	r3, [r0, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f44:	6800      	ldr	r0, [r0, #0]
 8001f46:	f002 fe40 	bl	8004bca <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001f4a:	2000      	movs	r0, #0
 8001f4c:	f884 02f8 	strb.w	r0, [r4, #760]	; 0x2f8

  return status;
}
 8001f50:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8001f52:	2002      	movs	r0, #2
}
 8001f54:	4770      	bx	lr

08001f56 <HAL_HCD_Init>:
  if (hhcd == NULL)
 8001f56:	2800      	cmp	r0, #0
 8001f58:	d04d      	beq.n	8001ff6 <HAL_HCD_Init+0xa0>
{
 8001f5a:	b570      	push	{r4, r5, r6, lr}
 8001f5c:	b08a      	sub	sp, #40	; 0x28
 8001f5e:	4604      	mov	r4, r0
  USBx = hhcd->Instance;
 8001f60:	6805      	ldr	r5, [r0, #0]
  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001f62:	f890 32f9 	ldrb.w	r3, [r0, #761]	; 0x2f9
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d040      	beq.n	8001fec <HAL_HCD_Init+0x96>
  hhcd->State = HAL_HCD_STATE_BUSY;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	f884 32f9 	strb.w	r3, [r4, #761]	; 0x2f9
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f70:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8001f72:	f413 7f80 	tst.w	r3, #256	; 0x100
    hhcd->Init.dma_enable = 0U;
 8001f76:	bf04      	itt	eq
 8001f78:	2300      	moveq	r3, #0
 8001f7a:	6123      	streq	r3, [r4, #16]
  __HAL_HCD_DISABLE(hhcd);
 8001f7c:	6820      	ldr	r0, [r4, #0]
 8001f7e:	f002 fbbe 	bl	80046fe <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001f82:	46a4      	mov	ip, r4
 8001f84:	f85c 6b10 	ldr.w	r6, [ip], #16
 8001f88:	46ee      	mov	lr, sp
 8001f8a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001f8e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8001f92:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001f96:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8001f9a:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8001f9e:	e88e 0003 	stmia.w	lr, {r0, r1}
 8001fa2:	1d25      	adds	r5, r4, #4
 8001fa4:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8001fa8:	4630      	mov	r0, r6
 8001faa:	f002 fb5d 	bl	8004668 <USB_CoreInit>
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001fae:	2101      	movs	r1, #1
 8001fb0:	6820      	ldr	r0, [r4, #0]
 8001fb2:	f002 fbaa 	bl	800470a <USB_SetCurrentMode>
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001fb6:	46a4      	mov	ip, r4
 8001fb8:	f85c 6b10 	ldr.w	r6, [ip], #16
 8001fbc:	46ee      	mov	lr, sp
 8001fbe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001fc2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8001fc6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001fca:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8001fce:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8001fd2:	e88e 0003 	stmia.w	lr, {r0, r1}
 8001fd6:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8001fda:	4630      	mov	r0, r6
 8001fdc:	f002 fc58 	bl	8004890 <USB_HostInit>
  hhcd->State = HAL_HCD_STATE_READY;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	f884 32f9 	strb.w	r3, [r4, #761]	; 0x2f9
  return HAL_OK;
 8001fe6:	2000      	movs	r0, #0
}
 8001fe8:	b00a      	add	sp, #40	; 0x28
 8001fea:	bd70      	pop	{r4, r5, r6, pc}
    hhcd->Lock = HAL_UNLOCKED;
 8001fec:	f880 32f8 	strb.w	r3, [r0, #760]	; 0x2f8
    HAL_HCD_MspInit(hhcd);
 8001ff0:	f006 fcee 	bl	80089d0 <HAL_HCD_MspInit>
 8001ff4:	e7b9      	b.n	8001f6a <HAL_HCD_Init+0x14>
    return HAL_ERROR;
 8001ff6:	2001      	movs	r0, #1
}
 8001ff8:	4770      	bx	lr

08001ffa <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001ffa:	b538      	push	{r3, r4, r5, lr}
 8001ffc:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8002000:	f8bd 5018 	ldrh.w	r5, [sp, #24]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002004:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
 8002008:	fb0c 0c01 	mla	ip, ip, r1, r0
 800200c:	f88c 203b 	strb.w	r2, [ip, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002010:	f88c 303f 	strb.w	r3, [ip, #63]	; 0x3f

  if (token == 0U)
 8002014:	bb3c      	cbnz	r4, 8002066 <HAL_HCD_HC_SubmitRequest+0x6c>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002016:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
 800201a:	fb0c 0c01 	mla	ip, ip, r1, r0
 800201e:	2403      	movs	r4, #3
 8002020:	f88c 4042 	strb.w	r4, [ip, #66]	; 0x42
    hhcd->hc[ch_num].do_ping = do_ping;
 8002024:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8002028:	f88c 403d 	strb.w	r4, [ip, #61]	; 0x3d
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800202c:	2b02      	cmp	r3, #2
 800202e:	d048      	beq.n	80020c2 <HAL_HCD_HC_SubmitRequest+0xc8>
 8002030:	2b03      	cmp	r3, #3
 8002032:	d06e      	beq.n	8002112 <HAL_HCD_HC_SubmitRequest+0x118>
 8002034:	2b01      	cmp	r3, #1
 8002036:	f000 8094 	beq.w	8002162 <HAL_HCD_HC_SubmitRequest+0x168>

    default:
      break;
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800203a:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
 800203e:	fb0c 0301 	mla	r3, ip, r1, r0
 8002042:	9a05      	ldr	r2, [sp, #20]
 8002044:	645a      	str	r2, [r3, #68]	; 0x44
  hhcd->hc[ch_num].xfer_len  = length;
 8002046:	64dd      	str	r5, [r3, #76]	; 0x4c
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002048:	2200      	movs	r2, #0
 800204a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  hhcd->hc[ch_num].xfer_count = 0U;
 800204e:	651a      	str	r2, [r3, #80]	; 0x50
  hhcd->hc[ch_num].ch_num = ch_num;
 8002050:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  hhcd->hc[ch_num].state = HC_IDLE;
 8002054:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002058:	4619      	mov	r1, r3
 800205a:	7c02      	ldrb	r2, [r0, #16]
 800205c:	3138      	adds	r1, #56	; 0x38
 800205e:	6800      	ldr	r0, [r0, #0]
 8002060:	f002 fe34 	bl	8004ccc <USB_HC_StartXfer>
}
 8002064:	bd38      	pop	{r3, r4, r5, pc}
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002066:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
 800206a:	fb0c 0c01 	mla	ip, ip, r1, r0
 800206e:	f04f 0e02 	mov.w	lr, #2
 8002072:	f88c e042 	strb.w	lr, [ip, #66]	; 0x42
  switch (ep_type)
 8002076:	2b03      	cmp	r3, #3
 8002078:	d8df      	bhi.n	800203a <HAL_HCD_HC_SubmitRequest+0x40>
 800207a:	e8df f003 	tbb	[pc, r3]
 800207e:	7202      	.short	0x7202
 8002080:	4a22      	.short	0x4a22
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002082:	2c01      	cmp	r4, #1
 8002084:	d1d9      	bne.n	800203a <HAL_HCD_HC_SubmitRequest+0x40>
 8002086:	2a00      	cmp	r2, #0
 8002088:	d1d7      	bne.n	800203a <HAL_HCD_HC_SubmitRequest+0x40>
        if (length == 0U)
 800208a:	b965      	cbnz	r5, 80020a6 <HAL_HCD_HC_SubmitRequest+0xac>
          hhcd->hc[ch_num].toggle_out = 1U;
 800208c:	232c      	movs	r3, #44	; 0x2c
 800208e:	fb03 0301 	mla	r3, r3, r1, r0
 8002092:	2201      	movs	r2, #1
 8002094:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002098:	232c      	movs	r3, #44	; 0x2c
 800209a:	fb03 0301 	mla	r3, r3, r1, r0
 800209e:	2202      	movs	r2, #2
 80020a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020a4:	e7c9      	b.n	800203a <HAL_HCD_HC_SubmitRequest+0x40>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80020a6:	232c      	movs	r3, #44	; 0x2c
 80020a8:	fb03 0301 	mla	r3, r3, r1, r0
 80020ac:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1f1      	bne.n	8002098 <HAL_HCD_HC_SubmitRequest+0x9e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020b4:	232c      	movs	r3, #44	; 0x2c
 80020b6:	fb03 0301 	mla	r3, r3, r1, r0
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020c0:	e7bb      	b.n	800203a <HAL_HCD_HC_SubmitRequest+0x40>
      if (direction == 0U)
 80020c2:	b992      	cbnz	r2, 80020ea <HAL_HCD_HC_SubmitRequest+0xf0>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80020c4:	232c      	movs	r3, #44	; 0x2c
 80020c6:	fb03 0301 	mla	r3, r3, r1, r0
 80020ca:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80020ce:	b92b      	cbnz	r3, 80020dc <HAL_HCD_HC_SubmitRequest+0xe2>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020d0:	232c      	movs	r3, #44	; 0x2c
 80020d2:	fb03 0301 	mla	r3, r3, r1, r0
 80020d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020da:	e7ae      	b.n	800203a <HAL_HCD_HC_SubmitRequest+0x40>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020dc:	232c      	movs	r3, #44	; 0x2c
 80020de:	fb03 0301 	mla	r3, r3, r1, r0
 80020e2:	2202      	movs	r2, #2
 80020e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020e8:	e7a7      	b.n	800203a <HAL_HCD_HC_SubmitRequest+0x40>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80020ea:	232c      	movs	r3, #44	; 0x2c
 80020ec:	fb03 0301 	mla	r3, r3, r1, r0
 80020f0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80020f4:	b933      	cbnz	r3, 8002104 <HAL_HCD_HC_SubmitRequest+0x10a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020f6:	232c      	movs	r3, #44	; 0x2c
 80020f8:	fb03 0301 	mla	r3, r3, r1, r0
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002102:	e79a      	b.n	800203a <HAL_HCD_HC_SubmitRequest+0x40>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002104:	232c      	movs	r3, #44	; 0x2c
 8002106:	fb03 0301 	mla	r3, r3, r1, r0
 800210a:	2202      	movs	r2, #2
 800210c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002110:	e793      	b.n	800203a <HAL_HCD_HC_SubmitRequest+0x40>
      if (direction == 0U)
 8002112:	b992      	cbnz	r2, 800213a <HAL_HCD_HC_SubmitRequest+0x140>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002114:	232c      	movs	r3, #44	; 0x2c
 8002116:	fb03 0301 	mla	r3, r3, r1, r0
 800211a:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800211e:	b92b      	cbnz	r3, 800212c <HAL_HCD_HC_SubmitRequest+0x132>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002120:	232c      	movs	r3, #44	; 0x2c
 8002122:	fb03 0301 	mla	r3, r3, r1, r0
 8002126:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800212a:	e786      	b.n	800203a <HAL_HCD_HC_SubmitRequest+0x40>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800212c:	232c      	movs	r3, #44	; 0x2c
 800212e:	fb03 0301 	mla	r3, r3, r1, r0
 8002132:	2202      	movs	r2, #2
 8002134:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002138:	e77f      	b.n	800203a <HAL_HCD_HC_SubmitRequest+0x40>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800213a:	232c      	movs	r3, #44	; 0x2c
 800213c:	fb03 0301 	mla	r3, r3, r1, r0
 8002140:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002144:	b933      	cbnz	r3, 8002154 <HAL_HCD_HC_SubmitRequest+0x15a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002146:	232c      	movs	r3, #44	; 0x2c
 8002148:	fb03 0301 	mla	r3, r3, r1, r0
 800214c:	2200      	movs	r2, #0
 800214e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002152:	e772      	b.n	800203a <HAL_HCD_HC_SubmitRequest+0x40>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002154:	232c      	movs	r3, #44	; 0x2c
 8002156:	fb03 0301 	mla	r3, r3, r1, r0
 800215a:	2202      	movs	r2, #2
 800215c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002160:	e76b      	b.n	800203a <HAL_HCD_HC_SubmitRequest+0x40>
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002162:	232c      	movs	r3, #44	; 0x2c
 8002164:	fb03 0301 	mla	r3, r3, r1, r0
 8002168:	2200      	movs	r2, #0
 800216a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      break;
 800216e:	e764      	b.n	800203a <HAL_HCD_HC_SubmitRequest+0x40>

08002170 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002174:	b085      	sub	sp, #20
 8002176:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002178:	6805      	ldr	r5, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800217a:	4628      	mov	r0, r5
 800217c:	f002 fb84 	bl	8004888 <USB_GetMode>
 8002180:	2801      	cmp	r0, #1
 8002182:	d002      	beq.n	800218a <HAL_HCD_IRQHandler+0x1a>
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
    }
  }
}
 8002184:	b005      	add	sp, #20
 8002186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800218a:	6820      	ldr	r0, [r4, #0]
 800218c:	f002 fb78 	bl	8004880 <USB_ReadInterrupts>
 8002190:	2800      	cmp	r0, #0
 8002192:	d0f7      	beq.n	8002184 <HAL_HCD_IRQHandler+0x14>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002194:	6820      	ldr	r0, [r4, #0]
 8002196:	f002 fb73 	bl	8004880 <USB_ReadInterrupts>
 800219a:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 800219e:	d003      	beq.n	80021a8 <HAL_HCD_IRQHandler+0x38>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80021a0:	6823      	ldr	r3, [r4, #0]
 80021a2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80021a6:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80021a8:	6820      	ldr	r0, [r4, #0]
 80021aa:	f002 fb69 	bl	8004880 <USB_ReadInterrupts>
 80021ae:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 80021b2:	d003      	beq.n	80021bc <HAL_HCD_IRQHandler+0x4c>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80021b4:	6823      	ldr	r3, [r4, #0]
 80021b6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80021ba:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80021bc:	6820      	ldr	r0, [r4, #0]
 80021be:	f002 fb5f 	bl	8004880 <USB_ReadInterrupts>
 80021c2:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 80021c6:	d003      	beq.n	80021d0 <HAL_HCD_IRQHandler+0x60>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80021c8:	6823      	ldr	r3, [r4, #0]
 80021ca:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80021ce:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80021d0:	6820      	ldr	r0, [r4, #0]
 80021d2:	f002 fb55 	bl	8004880 <USB_ReadInterrupts>
 80021d6:	f010 0f02 	tst.w	r0, #2
 80021da:	d002      	beq.n	80021e2 <HAL_HCD_IRQHandler+0x72>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80021dc:	6823      	ldr	r3, [r4, #0]
 80021de:	2202      	movs	r2, #2
 80021e0:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80021e2:	6820      	ldr	r0, [r4, #0]
 80021e4:	f002 fb4c 	bl	8004880 <USB_ReadInterrupts>
 80021e8:	f010 5f00 	tst.w	r0, #536870912	; 0x20000000
 80021ec:	d008      	beq.n	8002200 <HAL_HCD_IRQHandler+0x90>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80021ee:	6823      	ldr	r3, [r4, #0]
 80021f0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80021f4:	615a      	str	r2, [r3, #20]
      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80021f6:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 80021fa:	f013 0f01 	tst.w	r3, #1
 80021fe:	d025      	beq.n	800224c <HAL_HCD_IRQHandler+0xdc>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002200:	6820      	ldr	r0, [r4, #0]
 8002202:	f002 fb3d 	bl	8004880 <USB_ReadInterrupts>
 8002206:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 800220a:	d12e      	bne.n	800226a <HAL_HCD_IRQHandler+0xfa>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800220c:	6820      	ldr	r0, [r4, #0]
 800220e:	f002 fb37 	bl	8004880 <USB_ReadInterrupts>
 8002212:	f010 0f08 	tst.w	r0, #8
 8002216:	d179      	bne.n	800230c <HAL_HCD_IRQHandler+0x19c>
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002218:	6820      	ldr	r0, [r4, #0]
 800221a:	f002 fb31 	bl	8004880 <USB_ReadInterrupts>
 800221e:	f010 0f10 	tst.w	r0, #16
 8002222:	d17a      	bne.n	800231a <HAL_HCD_IRQHandler+0x1aa>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002224:	6820      	ldr	r0, [r4, #0]
 8002226:	f002 fb2b 	bl	8004880 <USB_ReadInterrupts>
 800222a:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 800222e:	d0a9      	beq.n	8002184 <HAL_HCD_IRQHandler+0x14>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002230:	6820      	ldr	r0, [r4, #0]
 8002232:	f002 fcc5 	bl	8004bc0 <USB_HC_ReadInterrupt>
 8002236:	4681      	mov	r9, r0
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002238:	68a3      	ldr	r3, [r4, #8]
 800223a:	2b00      	cmp	r3, #0
 800223c:	f000 8372 	beq.w	8002924 <HAL_HCD_IRQHandler+0x7b4>
 8002240:	f505 65a0 	add.w	r5, r5, #1280	; 0x500
 8002244:	2600      	movs	r6, #0
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
  {
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002246:	f04f 0b2c 	mov.w	fp, #44	; 0x2c
 800224a:	e149      	b.n	80024e0 <HAL_HCD_IRQHandler+0x370>
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800224c:	2110      	movs	r1, #16
 800224e:	4628      	mov	r0, r5
 8002250:	f002 fa8c 	bl	800476c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002254:	4628      	mov	r0, r5
 8002256:	f002 fab1 	bl	80047bc <USB_FlushRxFifo>
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800225a:	2101      	movs	r1, #1
 800225c:	6820      	ldr	r0, [r4, #0]
 800225e:	f002 fb8d 	bl	800497c <USB_InitFSLSPClkSel>
        HAL_HCD_Disconnect_Callback(hhcd);
 8002262:	4620      	mov	r0, r4
 8002264:	f006 fc0c 	bl	8008a80 <HAL_HCD_Disconnect_Callback>
 8002268:	e7ca      	b.n	8002200 <HAL_HCD_IRQHandler+0x90>
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
 800226a:	6826      	ldr	r6, [r4, #0]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800226c:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 8002270:	9302      	str	r3, [sp, #8]
  hprt0_dup = USBx_HPRT0;
 8002272:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 8002276:	9303      	str	r3, [sp, #12]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002278:	9b03      	ldr	r3, [sp, #12]
 800227a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800227e:	9303      	str	r3, [sp, #12]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002280:	9b02      	ldr	r3, [sp, #8]
 8002282:	f013 0f02 	tst.w	r3, #2
 8002286:	d007      	beq.n	8002298 <HAL_HCD_IRQHandler+0x128>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002288:	9b02      	ldr	r3, [sp, #8]
 800228a:	f013 0f01 	tst.w	r3, #1
 800228e:	d124      	bne.n	80022da <HAL_HCD_IRQHandler+0x16a>
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002290:	9b03      	ldr	r3, [sp, #12]
 8002292:	f043 0302 	orr.w	r3, r3, #2
 8002296:	9303      	str	r3, [sp, #12]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002298:	9b02      	ldr	r3, [sp, #8]
 800229a:	f013 0f08 	tst.w	r3, #8
 800229e:	d010      	beq.n	80022c2 <HAL_HCD_IRQHandler+0x152>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80022a0:	9b03      	ldr	r3, [sp, #12]
 80022a2:	f043 0308 	orr.w	r3, r3, #8
 80022a6:	9303      	str	r3, [sp, #12]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80022a8:	9b02      	ldr	r3, [sp, #8]
 80022aa:	f013 0f04 	tst.w	r3, #4
 80022ae:	d029      	beq.n	8002304 <HAL_HCD_IRQHandler+0x194>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80022b0:	69a3      	ldr	r3, [r4, #24]
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d015      	beq.n	80022e2 <HAL_HCD_IRQHandler+0x172>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80022b6:	68e3      	ldr	r3, [r4, #12]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d01e      	beq.n	80022fa <HAL_HCD_IRQHandler+0x18a>
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80022bc:	4620      	mov	r0, r4
 80022be:	f006 fbe6 	bl	8008a8e <HAL_HCD_PortEnabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80022c2:	9b02      	ldr	r3, [sp, #8]
 80022c4:	f013 0f20 	tst.w	r3, #32
 80022c8:	d003      	beq.n	80022d2 <HAL_HCD_IRQHandler+0x162>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80022ca:	9b03      	ldr	r3, [sp, #12]
 80022cc:	f043 0320 	orr.w	r3, r3, #32
 80022d0:	9303      	str	r3, [sp, #12]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80022d2:	9b03      	ldr	r3, [sp, #12]
 80022d4:	f8c6 3440 	str.w	r3, [r6, #1088]	; 0x440
}
 80022d8:	e798      	b.n	800220c <HAL_HCD_IRQHandler+0x9c>
      HAL_HCD_Connect_Callback(hhcd);
 80022da:	4620      	mov	r0, r4
 80022dc:	f006 fbca 	bl	8008a74 <HAL_HCD_Connect_Callback>
 80022e0:	e7d6      	b.n	8002290 <HAL_HCD_IRQHandler+0x120>
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80022e2:	9b02      	ldr	r3, [sp, #8]
 80022e4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80022e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80022ec:	bf0c      	ite	eq
 80022ee:	2102      	moveq	r1, #2
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80022f0:	2101      	movne	r1, #1
 80022f2:	6820      	ldr	r0, [r4, #0]
 80022f4:	f002 fb42 	bl	800497c <USB_InitFSLSPClkSel>
 80022f8:	e7e0      	b.n	80022bc <HAL_HCD_IRQHandler+0x14c>
          USBx_HOST->HFIR = 60000U;
 80022fa:	f64e 2260 	movw	r2, #60000	; 0xea60
 80022fe:	f8c6 2404 	str.w	r2, [r6, #1028]	; 0x404
 8002302:	e7db      	b.n	80022bc <HAL_HCD_IRQHandler+0x14c>
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002304:	4620      	mov	r0, r4
 8002306:	f006 fbc8 	bl	8008a9a <HAL_HCD_PortDisabled_Callback>
 800230a:	e7da      	b.n	80022c2 <HAL_HCD_IRQHandler+0x152>
      HAL_HCD_SOF_Callback(hhcd);
 800230c:	4620      	mov	r0, r4
 800230e:	f006 fbab 	bl	8008a68 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002312:	6823      	ldr	r3, [r4, #0]
 8002314:	2208      	movs	r2, #8
 8002316:	615a      	str	r2, [r3, #20]
 8002318:	e77e      	b.n	8002218 <HAL_HCD_IRQHandler+0xa8>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800231a:	6822      	ldr	r2, [r4, #0]
 800231c:	6993      	ldr	r3, [r2, #24]
 800231e:	f023 0310 	bic.w	r3, r3, #16
 8002322:	6193      	str	r3, [r2, #24]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002324:	6827      	ldr	r7, [r4, #0]
  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002326:	6a3e      	ldr	r6, [r7, #32]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002328:	f3c6 4243 	ubfx	r2, r6, #17, #4
  switch (pktsts)
 800232c:	2a02      	cmp	r2, #2
 800232e:	d005      	beq.n	800233c <HAL_HCD_IRQHandler+0x1cc>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002330:	6822      	ldr	r2, [r4, #0]
 8002332:	6993      	ldr	r3, [r2, #24]
 8002334:	f043 0310 	orr.w	r3, r3, #16
 8002338:	6193      	str	r3, [r2, #24]
 800233a:	e773      	b.n	8002224 <HAL_HCD_IRQHandler+0xb4>
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800233c:	f3c6 180a 	ubfx	r8, r6, #4, #11
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002340:	f1b8 0f00 	cmp.w	r8, #0
 8002344:	d0f4      	beq.n	8002330 <HAL_HCD_IRQHandler+0x1c0>
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002346:	f006 060f 	and.w	r6, r6, #15
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800234a:	232c      	movs	r3, #44	; 0x2c
 800234c:	fb03 4306 	mla	r3, r3, r6, r4
 8002350:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002352:	2900      	cmp	r1, #0
 8002354:	d0ec      	beq.n	8002330 <HAL_HCD_IRQHandler+0x1c0>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002356:	232c      	movs	r3, #44	; 0x2c
 8002358:	fb03 4306 	mla	r3, r3, r6, r4
 800235c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800235e:	4442      	add	r2, r8
 8002360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002362:	429a      	cmp	r2, r3
 8002364:	d906      	bls.n	8002374 <HAL_HCD_IRQHandler+0x204>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002366:	232c      	movs	r3, #44	; 0x2c
 8002368:	fb03 4306 	mla	r3, r3, r6, r4
 800236c:	2204      	movs	r2, #4
 800236e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8002372:	e7dd      	b.n	8002330 <HAL_HCD_IRQHandler+0x1c0>
          (void)USB_ReadPacket(hhcd->Instance,
 8002374:	4642      	mov	r2, r8
 8002376:	4638      	mov	r0, r7
 8002378:	f002 fa5d 	bl	8004836 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800237c:	222c      	movs	r2, #44	; 0x2c
 800237e:	fb02 4206 	mla	r2, r2, r6, r4
 8002382:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8002384:	4443      	add	r3, r8
 8002386:	6453      	str	r3, [r2, #68]	; 0x44
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002388:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800238a:	4443      	add	r3, r8
 800238c:	6513      	str	r3, [r2, #80]	; 0x50
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800238e:	0170      	lsls	r0, r6, #5
 8002390:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8002394:	eb03 1146 	add.w	r1, r3, r6, lsl #5
 8002398:	6909      	ldr	r1, [r1, #16]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800239a:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 800239e:	4590      	cmp	r8, r2
 80023a0:	d1c6      	bne.n	8002330 <HAL_HCD_IRQHandler+0x1c0>
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80023a2:	f3c1 41c9 	ubfx	r1, r1, #19, #10
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80023a6:	2900      	cmp	r1, #0
 80023a8:	d0c2      	beq.n	8002330 <HAL_HCD_IRQHandler+0x1c0>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80023aa:	58c2      	ldr	r2, [r0, r3]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80023ac:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80023b0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80023b4:	50c2      	str	r2, [r0, r3]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80023b6:	232c      	movs	r3, #44	; 0x2c
 80023b8:	fb03 4306 	mla	r3, r3, r6, r4
 80023bc:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 80023c0:	f082 0201 	eor.w	r2, r2, #1
 80023c4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80023c8:	e7b2      	b.n	8002330 <HAL_HCD_IRQHandler+0x1c0>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80023ca:	2304      	movs	r3, #4
 80023cc:	60bb      	str	r3, [r7, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80023ce:	fb0b 4308 	mla	r3, fp, r8, r4
 80023d2:	2206      	movs	r2, #6
 80023d4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023d8:	4641      	mov	r1, r8
 80023da:	6820      	ldr	r0, [r4, #0]
 80023dc:	f002 fbf5 	bl	8004bca <USB_HC_Halt>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	f413 7f00 	tst.w	r3, #512	; 0x200
 80023e6:	d16e      	bne.n	80024c6 <HAL_HCD_IRQHandler+0x356>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	f013 0f01 	tst.w	r3, #1
 80023ee:	f000 80c2 	beq.w	8002576 <HAL_HCD_IRQHandler+0x406>
    if (hhcd->Init.dma_enable != 0U)
 80023f2:	6923      	ldr	r3, [r4, #16]
 80023f4:	b13b      	cbz	r3, 8002406 <HAL_HCD_IRQHandler+0x296>
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80023f6:	693a      	ldr	r2, [r7, #16]
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80023f8:	fb0b 4108 	mla	r1, fp, r8, r4
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80023fc:	f3c2 0212 	ubfx	r2, r2, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002400:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 8002402:	1a9b      	subs	r3, r3, r2
 8002404:	650b      	str	r3, [r1, #80]	; 0x50
    hhcd->hc[ch_num].state = HC_XFRC;
 8002406:	fb0b 4308 	mla	r3, fp, r8, r4
 800240a:	2201      	movs	r2, #1
 800240c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002410:	2100      	movs	r1, #0
 8002412:	65d9      	str	r1, [r3, #92]	; 0x5c
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002414:	60ba      	str	r2, [r7, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002416:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800241a:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
 800241e:	f000 8085 	beq.w	800252c <HAL_HCD_IRQHandler+0x3bc>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002422:	2b01      	cmp	r3, #1
 8002424:	f040 8088 	bne.w	8002538 <HAL_HCD_IRQHandler+0x3c8>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002428:	9a01      	ldr	r2, [sp, #4]
 800242a:	f85a 3002 	ldr.w	r3, [sl, r2]
 800242e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002432:	f84a 3002 	str.w	r3, [sl, r2]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002436:	fb0b 4308 	mla	r3, fp, r8, r4
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002440:	4641      	mov	r1, r8
 8002442:	4620      	mov	r0, r4
 8002444:	f006 fb22 	bl	8008a8c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002448:	e076      	b.n	8002538 <HAL_HCD_IRQHandler+0x3c8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800244a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800244e:	60bb      	str	r3, [r7, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002450:	fb0b 4308 	mla	r3, fp, r8, r4
 8002454:	2207      	movs	r2, #7
 8002456:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800245a:	4641      	mov	r1, r8
 800245c:	6820      	ldr	r0, [r4, #0]
 800245e:	f002 fbb4 	bl	8004bca <USB_HC_Halt>
 8002462:	e7bd      	b.n	80023e0 <HAL_HCD_IRQHandler+0x270>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	f013 0f08 	tst.w	r3, #8
 800246a:	d113      	bne.n	8002494 <HAL_HCD_IRQHandler+0x324>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002472:	d11b      	bne.n	80024ac <HAL_HCD_IRQHandler+0x33c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	f013 0f80 	tst.w	r3, #128	; 0x80
 800247a:	d0b1      	beq.n	80023e0 <HAL_HCD_IRQHandler+0x270>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800247c:	2380      	movs	r3, #128	; 0x80
 800247e:	60bb      	str	r3, [r7, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002480:	fb0b 4308 	mla	r3, fp, r8, r4
 8002484:	2206      	movs	r2, #6
 8002486:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800248a:	4641      	mov	r1, r8
 800248c:	6820      	ldr	r0, [r4, #0]
 800248e:	f002 fb9c 	bl	8004bca <USB_HC_Halt>
 8002492:	e7a5      	b.n	80023e0 <HAL_HCD_IRQHandler+0x270>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002494:	2308      	movs	r3, #8
 8002496:	60bb      	str	r3, [r7, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002498:	fb0b 4308 	mla	r3, fp, r8, r4
 800249c:	2205      	movs	r2, #5
 800249e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024a2:	4641      	mov	r1, r8
 80024a4:	6820      	ldr	r0, [r4, #0]
 80024a6:	f002 fb90 	bl	8004bca <USB_HC_Halt>
 80024aa:	e799      	b.n	80023e0 <HAL_HCD_IRQHandler+0x270>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80024ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024b0:	60bb      	str	r3, [r7, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80024b2:	fb0b 4308 	mla	r3, fp, r8, r4
 80024b6:	2208      	movs	r2, #8
 80024b8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024bc:	4641      	mov	r1, r8
 80024be:	6820      	ldr	r0, [r4, #0]
 80024c0:	f002 fb83 	bl	8004bca <USB_HC_Halt>
 80024c4:	e78c      	b.n	80023e0 <HAL_HCD_IRQHandler+0x270>
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024c6:	4641      	mov	r1, r8
 80024c8:	6820      	ldr	r0, [r4, #0]
 80024ca:	f002 fb7e 	bl	8004bca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80024ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024d2:	60bb      	str	r3, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80024d4:	3601      	adds	r6, #1
 80024d6:	3520      	adds	r5, #32
 80024d8:	68a3      	ldr	r3, [r4, #8]
 80024da:	42b3      	cmp	r3, r6
 80024dc:	f240 8222 	bls.w	8002924 <HAL_HCD_IRQHandler+0x7b4>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80024e0:	f006 030f 	and.w	r3, r6, #15
 80024e4:	fa29 f303 	lsr.w	r3, r9, r3
 80024e8:	f013 0f01 	tst.w	r3, #1
 80024ec:	d0f2      	beq.n	80024d4 <HAL_HCD_IRQHandler+0x364>
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80024ee:	682b      	ldr	r3, [r5, #0]
 80024f0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80024f4:	f000 80ca 	beq.w	800268c <HAL_HCD_IRQHandler+0x51c>
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80024f8:	fa5f f886 	uxtb.w	r8, r6
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80024fc:	6823      	ldr	r3, [r4, #0]
 80024fe:	f503 6aa0 	add.w	sl, r3, #1280	; 0x500
 8002502:	ea4f 1348 	mov.w	r3, r8, lsl #5
 8002506:	9301      	str	r3, [sp, #4]
 8002508:	eb0a 1748 	add.w	r7, sl, r8, lsl #5
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	f013 0f04 	tst.w	r3, #4
 8002512:	f47f af5a 	bne.w	80023ca <HAL_HCD_IRQHandler+0x25a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	f413 7f80 	tst.w	r3, #256	; 0x100
 800251c:	d195      	bne.n	800244a <HAL_HCD_IRQHandler+0x2da>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	f013 0f20 	tst.w	r3, #32
 8002524:	d09e      	beq.n	8002464 <HAL_HCD_IRQHandler+0x2f4>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002526:	2320      	movs	r3, #32
 8002528:	60bb      	str	r3, [r7, #8]
 800252a:	e759      	b.n	80023e0 <HAL_HCD_IRQHandler+0x270>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800252c:	4641      	mov	r1, r8
 800252e:	6820      	ldr	r0, [r4, #0]
 8002530:	f002 fb4b 	bl	8004bca <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002534:	2310      	movs	r3, #16
 8002536:	60bb      	str	r3, [r7, #8]
    if (hhcd->Init.dma_enable == 1U)
 8002538:	6923      	ldr	r3, [r4, #16]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d008      	beq.n	8002550 <HAL_HCD_IRQHandler+0x3e0>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800253e:	fb0b 4808 	mla	r8, fp, r8, r4
 8002542:	f898 3054 	ldrb.w	r3, [r8, #84]	; 0x54
 8002546:	f083 0301 	eor.w	r3, r3, #1
 800254a:	f888 3054 	strb.w	r3, [r8, #84]	; 0x54
 800254e:	e7c1      	b.n	80024d4 <HAL_HCD_IRQHandler+0x364>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002550:	fb0b 4308 	mla	r3, fp, r8, r4
 8002554:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8002558:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800255a:	fbb3 f3f2 	udiv	r3, r3, r2
 800255e:	f013 0f01 	tst.w	r3, #1
 8002562:	d0b7      	beq.n	80024d4 <HAL_HCD_IRQHandler+0x364>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002564:	fb0b 4808 	mla	r8, fp, r8, r4
 8002568:	f898 3054 	ldrb.w	r3, [r8, #84]	; 0x54
 800256c:	f083 0301 	eor.w	r3, r3, #1
 8002570:	f888 3054 	strb.w	r3, [r8, #84]	; 0x54
 8002574:	e7ae      	b.n	80024d4 <HAL_HCD_IRQHandler+0x364>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	f013 0f02 	tst.w	r3, #2
 800257c:	d05c      	beq.n	8002638 <HAL_HCD_IRQHandler+0x4c8>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800257e:	fb0b 4308 	mla	r3, fp, r8, r4
 8002582:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002586:	2b01      	cmp	r3, #1
 8002588:	d012      	beq.n	80025b0 <HAL_HCD_IRQHandler+0x440>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800258a:	2b05      	cmp	r3, #5
 800258c:	d020      	beq.n	80025d0 <HAL_HCD_IRQHandler+0x460>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800258e:	2b06      	cmp	r3, #6
 8002590:	d024      	beq.n	80025dc <HAL_HCD_IRQHandler+0x46c>
 8002592:	2b08      	cmp	r3, #8
 8002594:	d022      	beq.n	80025dc <HAL_HCD_IRQHandler+0x46c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002596:	2b03      	cmp	r3, #3
 8002598:	d03e      	beq.n	8002618 <HAL_HCD_IRQHandler+0x4a8>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800259a:	2b07      	cmp	r3, #7
 800259c:	d10d      	bne.n	80025ba <HAL_HCD_IRQHandler+0x44a>
      hhcd->hc[ch_num].ErrCnt++;
 800259e:	fb0b 4308 	mla	r3, fp, r8, r4
 80025a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80025a4:	3201      	adds	r2, #1
 80025a6:	65da      	str	r2, [r3, #92]	; 0x5c
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80025a8:	2204      	movs	r2, #4
 80025aa:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 80025ae:	e004      	b.n	80025ba <HAL_HCD_IRQHandler+0x44a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80025b0:	fb0b 4308 	mla	r3, fp, r8, r4
 80025b4:	2201      	movs	r2, #1
 80025b6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80025ba:	2302      	movs	r3, #2
 80025bc:	60bb      	str	r3, [r7, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80025be:	fb0b 4308 	mla	r3, fp, r8, r4
 80025c2:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 80025c6:	4641      	mov	r1, r8
 80025c8:	4620      	mov	r0, r4
 80025ca:	f006 fa5f 	bl	8008a8c <HAL_HCD_HC_NotifyURBChange_Callback>
 80025ce:	e781      	b.n	80024d4 <HAL_HCD_IRQHandler+0x364>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80025d0:	fb0b 4308 	mla	r3, fp, r8, r4
 80025d4:	2205      	movs	r2, #5
 80025d6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 80025da:	e7ee      	b.n	80025ba <HAL_HCD_IRQHandler+0x44a>
      hhcd->hc[ch_num].ErrCnt++;
 80025dc:	fb0b 4208 	mla	r2, fp, r8, r4
 80025e0:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 80025e2:	3301      	adds	r3, #1
 80025e4:	65d3      	str	r3, [r2, #92]	; 0x5c
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d906      	bls.n	80025f8 <HAL_HCD_IRQHandler+0x488>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80025ea:	4613      	mov	r3, r2
 80025ec:	2200      	movs	r2, #0
 80025ee:	65da      	str	r2, [r3, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80025f0:	2204      	movs	r2, #4
 80025f2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 80025f6:	e7e0      	b.n	80025ba <HAL_HCD_IRQHandler+0x44a>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80025f8:	fb0b 4308 	mla	r3, fp, r8, r4
 80025fc:	f04f 0202 	mov.w	r2, #2
 8002600:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002604:	9a01      	ldr	r2, [sp, #4]
 8002606:	f85a 3002 	ldr.w	r3, [sl, r2]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800260a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800260e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002612:	f84a 3002 	str.w	r3, [sl, r2]
 8002616:	e7d0      	b.n	80025ba <HAL_HCD_IRQHandler+0x44a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002618:	fb0b 4308 	mla	r3, fp, r8, r4
 800261c:	f04f 0202 	mov.w	r2, #2
 8002620:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002624:	9a01      	ldr	r2, [sp, #4]
 8002626:	f85a 3002 	ldr.w	r3, [sl, r2]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800262a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800262e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002632:	f84a 3002 	str.w	r3, [sl, r2]
 8002636:	e7c0      	b.n	80025ba <HAL_HCD_IRQHandler+0x44a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	f013 0f10 	tst.w	r3, #16
 800263e:	f43f af49 	beq.w	80024d4 <HAL_HCD_IRQHandler+0x364>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002642:	fb0b 4308 	mla	r3, fp, r8, r4
 8002646:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800264a:	2b03      	cmp	r3, #3
 800264c:	d00b      	beq.n	8002666 <HAL_HCD_IRQHandler+0x4f6>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800264e:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8002652:	d105      	bne.n	8002660 <HAL_HCD_IRQHandler+0x4f0>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002654:	fb0b 4308 	mla	r3, fp, r8, r4
 8002658:	2200      	movs	r2, #0
 800265a:	65da      	str	r2, [r3, #92]	; 0x5c
      if (hhcd->Init.dma_enable == 0U)
 800265c:	6923      	ldr	r3, [r4, #16]
 800265e:	b15b      	cbz	r3, 8002678 <HAL_HCD_IRQHandler+0x508>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002660:	2310      	movs	r3, #16
 8002662:	60bb      	str	r3, [r7, #8]
 8002664:	e736      	b.n	80024d4 <HAL_HCD_IRQHandler+0x364>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002666:	fb0b 4308 	mla	r3, fp, r8, r4
 800266a:	2200      	movs	r2, #0
 800266c:	65da      	str	r2, [r3, #92]	; 0x5c
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800266e:	4641      	mov	r1, r8
 8002670:	6820      	ldr	r0, [r4, #0]
 8002672:	f002 faaa 	bl	8004bca <USB_HC_Halt>
 8002676:	e7f3      	b.n	8002660 <HAL_HCD_IRQHandler+0x4f0>
        hhcd->hc[ch_num].state = HC_NAK;
 8002678:	fb0b 4308 	mla	r3, fp, r8, r4
 800267c:	2203      	movs	r2, #3
 800267e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002682:	4641      	mov	r1, r8
 8002684:	6820      	ldr	r0, [r4, #0]
 8002686:	f002 faa0 	bl	8004bca <USB_HC_Halt>
 800268a:	e7e9      	b.n	8002660 <HAL_HCD_IRQHandler+0x4f0>
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800268c:	b2f1      	uxtb	r1, r6
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800268e:	6820      	ldr	r0, [r4, #0]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002690:	f500 63a0 	add.w	r3, r0, #1280	; 0x500
 8002694:	ea4f 1c41 	mov.w	ip, r1, lsl #5
 8002698:	eb03 1741 	add.w	r7, r3, r1, lsl #5
 800269c:	68ba      	ldr	r2, [r7, #8]
 800269e:	f012 0f04 	tst.w	r2, #4
 80026a2:	d11a      	bne.n	80026da <HAL_HCD_IRQHandler+0x56a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80026a4:	68ba      	ldr	r2, [r7, #8]
 80026a6:	f012 0f20 	tst.w	r2, #32
 80026aa:	d021      	beq.n	80026f0 <HAL_HCD_IRQHandler+0x580>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80026ac:	2320      	movs	r3, #32
 80026ae:	60bb      	str	r3, [r7, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80026b0:	fb0b 4301 	mla	r3, fp, r1, r4
 80026b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	f47f af0b 	bne.w	80024d4 <HAL_HCD_IRQHandler+0x364>
      hhcd->hc[ch_num].do_ping = 0U;
 80026be:	fb0b 4301 	mla	r3, fp, r1, r4
 80026c2:	f04f 0200 	mov.w	r2, #0
 80026c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80026ca:	f04f 0202 	mov.w	r2, #2
 80026ce:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026d2:	6820      	ldr	r0, [r4, #0]
 80026d4:	f002 fa79 	bl	8004bca <USB_HC_Halt>
 80026d8:	e6fc      	b.n	80024d4 <HAL_HCD_IRQHandler+0x364>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80026da:	2304      	movs	r3, #4
 80026dc:	60bb      	str	r3, [r7, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80026de:	fb0b 4301 	mla	r3, fp, r1, r4
 80026e2:	2206      	movs	r2, #6
 80026e4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026e8:	6820      	ldr	r0, [r4, #0]
 80026ea:	f002 fa6e 	bl	8004bca <USB_HC_Halt>
 80026ee:	e6f1      	b.n	80024d4 <HAL_HCD_IRQHandler+0x364>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80026f0:	68ba      	ldr	r2, [r7, #8]
 80026f2:	f412 7f00 	tst.w	r2, #512	; 0x200
 80026f6:	d11c      	bne.n	8002732 <HAL_HCD_IRQHandler+0x5c2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80026f8:	68ba      	ldr	r2, [r7, #8]
 80026fa:	f012 0f01 	tst.w	r2, #1
 80026fe:	d01f      	beq.n	8002740 <HAL_HCD_IRQHandler+0x5d0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002700:	fb0b 4301 	mla	r3, fp, r1, r4
 8002704:	2200      	movs	r2, #0
 8002706:	65da      	str	r2, [r3, #92]	; 0x5c
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800270e:	d006      	beq.n	800271e <HAL_HCD_IRQHandler+0x5ae>
      hhcd->hc[ch_num].do_ping = 1U;
 8002710:	fb0b 4301 	mla	r3, fp, r1, r4
 8002714:	2201      	movs	r2, #1
 8002716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800271a:	2340      	movs	r3, #64	; 0x40
 800271c:	60bb      	str	r3, [r7, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800271e:	2301      	movs	r3, #1
 8002720:	60bb      	str	r3, [r7, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002722:	fb0b 4201 	mla	r2, fp, r1, r4
 8002726:	f882 3061 	strb.w	r3, [r2, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800272a:	6820      	ldr	r0, [r4, #0]
 800272c:	f002 fa4d 	bl	8004bca <USB_HC_Halt>
 8002730:	e6d0      	b.n	80024d4 <HAL_HCD_IRQHandler+0x364>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002732:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002736:	60bb      	str	r3, [r7, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002738:	6820      	ldr	r0, [r4, #0]
 800273a:	f002 fa46 	bl	8004bca <USB_HC_Halt>
 800273e:	e6c9      	b.n	80024d4 <HAL_HCD_IRQHandler+0x364>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002740:	68ba      	ldr	r2, [r7, #8]
 8002742:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002746:	d120      	bne.n	800278a <HAL_HCD_IRQHandler+0x61a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002748:	68ba      	ldr	r2, [r7, #8]
 800274a:	f012 0f08 	tst.w	r2, #8
 800274e:	d12b      	bne.n	80027a8 <HAL_HCD_IRQHandler+0x638>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002750:	68ba      	ldr	r2, [r7, #8]
 8002752:	f012 0f10 	tst.w	r2, #16
 8002756:	d032      	beq.n	80027be <HAL_HCD_IRQHandler+0x64e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002758:	fb0b 4301 	mla	r3, fp, r1, r4
 800275c:	2200      	movs	r2, #0
 800275e:	65da      	str	r2, [r3, #92]	; 0x5c
    hhcd->hc[ch_num].state = HC_NAK;
 8002760:	2203      	movs	r2, #3
 8002762:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002766:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800276a:	b94b      	cbnz	r3, 8002780 <HAL_HCD_IRQHandler+0x610>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800276c:	fb0b 4301 	mla	r3, fp, r1, r4
 8002770:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002774:	b923      	cbnz	r3, 8002780 <HAL_HCD_IRQHandler+0x610>
        hhcd->hc[ch_num].do_ping = 1U;
 8002776:	fb0b 4301 	mla	r3, fp, r1, r4
 800277a:	2201      	movs	r2, #1
 800277c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002780:	f002 fa23 	bl	8004bca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002784:	2310      	movs	r3, #16
 8002786:	60bb      	str	r3, [r7, #8]
 8002788:	e6a4      	b.n	80024d4 <HAL_HCD_IRQHandler+0x364>
    hhcd->hc[ch_num].state = HC_NYET;
 800278a:	fb0b 4301 	mla	r3, fp, r1, r4
 800278e:	2204      	movs	r2, #4
 8002790:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    hhcd->hc[ch_num].do_ping = 1U;
 8002794:	2201      	movs	r2, #1
 8002796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hhcd->hc[ch_num].ErrCnt = 0U;
 800279a:	2200      	movs	r2, #0
 800279c:	65da      	str	r2, [r3, #92]	; 0x5c
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800279e:	f002 fa14 	bl	8004bca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80027a2:	2340      	movs	r3, #64	; 0x40
 80027a4:	60bb      	str	r3, [r7, #8]
 80027a6:	e695      	b.n	80024d4 <HAL_HCD_IRQHandler+0x364>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80027a8:	2308      	movs	r3, #8
 80027aa:	60bb      	str	r3, [r7, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80027ac:	fb0b 4301 	mla	r3, fp, r1, r4
 80027b0:	2205      	movs	r2, #5
 80027b2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027b6:	6820      	ldr	r0, [r4, #0]
 80027b8:	f002 fa07 	bl	8004bca <USB_HC_Halt>
 80027bc:	e68a      	b.n	80024d4 <HAL_HCD_IRQHandler+0x364>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80027be:	68ba      	ldr	r2, [r7, #8]
 80027c0:	f012 0f80 	tst.w	r2, #128	; 0x80
 80027c4:	d023      	beq.n	800280e <HAL_HCD_IRQHandler+0x69e>
    if (hhcd->Init.dma_enable == 0U)
 80027c6:	6923      	ldr	r3, [r4, #16]
 80027c8:	b17b      	cbz	r3, 80027ea <HAL_HCD_IRQHandler+0x67a>
      hhcd->hc[ch_num].ErrCnt++;
 80027ca:	fb0b 4201 	mla	r2, fp, r1, r4
 80027ce:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 80027d0:	3301      	adds	r3, #1
 80027d2:	65d3      	str	r3, [r2, #92]	; 0x5c
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d810      	bhi.n	80027fa <HAL_HCD_IRQHandler+0x68a>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80027d8:	fb0b 4101 	mla	r1, fp, r1, r4
 80027dc:	f04f 0302 	mov.w	r3, #2
 80027e0:	f881 3060 	strb.w	r3, [r1, #96]	; 0x60
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80027e4:	2380      	movs	r3, #128	; 0x80
 80027e6:	60bb      	str	r3, [r7, #8]
 80027e8:	e674      	b.n	80024d4 <HAL_HCD_IRQHandler+0x364>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80027ea:	fb0b 4301 	mla	r3, fp, r1, r4
 80027ee:	2206      	movs	r2, #6
 80027f0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027f4:	f002 f9e9 	bl	8004bca <USB_HC_Halt>
 80027f8:	e7f4      	b.n	80027e4 <HAL_HCD_IRQHandler+0x674>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80027fa:	4613      	mov	r3, r2
 80027fc:	2200      	movs	r2, #0
 80027fe:	65da      	str	r2, [r3, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002800:	2204      	movs	r2, #4
 8002802:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002806:	4620      	mov	r0, r4
 8002808:	f006 f940 	bl	8008a8c <HAL_HCD_HC_NotifyURBChange_Callback>
 800280c:	e7ea      	b.n	80027e4 <HAL_HCD_IRQHandler+0x674>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800280e:	68ba      	ldr	r2, [r7, #8]
 8002810:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002814:	d121      	bne.n	800285a <HAL_HCD_IRQHandler+0x6ea>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002816:	68ba      	ldr	r2, [r7, #8]
 8002818:	f012 0f02 	tst.w	r2, #2
 800281c:	f43f ae5a 	beq.w	80024d4 <HAL_HCD_IRQHandler+0x364>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002820:	fb0b 4201 	mla	r2, fp, r1, r4
 8002824:	f892 2061 	ldrb.w	r2, [r2, #97]	; 0x61
 8002828:	2a01      	cmp	r2, #1
 800282a:	d021      	beq.n	8002870 <HAL_HCD_IRQHandler+0x700>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800282c:	2a03      	cmp	r2, #3
 800282e:	d04e      	beq.n	80028ce <HAL_HCD_IRQHandler+0x75e>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002830:	2a04      	cmp	r2, #4
 8002832:	d05c      	beq.n	80028ee <HAL_HCD_IRQHandler+0x77e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002834:	2a05      	cmp	r2, #5
 8002836:	d061      	beq.n	80028fc <HAL_HCD_IRQHandler+0x78c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002838:	2a06      	cmp	r2, #6
 800283a:	d001      	beq.n	8002840 <HAL_HCD_IRQHandler+0x6d0>
 800283c:	2a08      	cmp	r2, #8
 800283e:	d14c      	bne.n	80028da <HAL_HCD_IRQHandler+0x76a>
      hhcd->hc[ch_num].ErrCnt++;
 8002840:	fb0b 4001 	mla	r0, fp, r1, r4
 8002844:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8002846:	3201      	adds	r2, #1
 8002848:	65c2      	str	r2, [r0, #92]	; 0x5c
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800284a:	2a02      	cmp	r2, #2
 800284c:	d95b      	bls.n	8002906 <HAL_HCD_IRQHandler+0x796>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800284e:	2200      	movs	r2, #0
 8002850:	65c2      	str	r2, [r0, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002852:	2204      	movs	r2, #4
 8002854:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
 8002858:	e03f      	b.n	80028da <HAL_HCD_IRQHandler+0x76a>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800285a:	fb0b 4301 	mla	r3, fp, r1, r4
 800285e:	2208      	movs	r2, #8
 8002860:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002864:	f002 f9b1 	bl	8004bca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002868:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800286c:	60bb      	str	r3, [r7, #8]
 800286e:	e631      	b.n	80024d4 <HAL_HCD_IRQHandler+0x364>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002870:	fb0b 4301 	mla	r3, fp, r1, r4
 8002874:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002878:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800287c:	3b02      	subs	r3, #2
 800287e:	b2db      	uxtb	r3, r3
 8002880:	4293      	cmp	r3, r2
 8002882:	d82a      	bhi.n	80028da <HAL_HCD_IRQHandler+0x76a>
        if (hhcd->Init.dma_enable == 0U)
 8002884:	6923      	ldr	r3, [r4, #16]
 8002886:	b943      	cbnz	r3, 800289a <HAL_HCD_IRQHandler+0x72a>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002888:	fb0b 4201 	mla	r2, fp, r1, r4
 800288c:	f892 3055 	ldrb.w	r3, [r2, #85]	; 0x55
 8002890:	f083 0301 	eor.w	r3, r3, #1
 8002894:	f882 3055 	strb.w	r3, [r2, #85]	; 0x55
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002898:	e01f      	b.n	80028da <HAL_HCD_IRQHandler+0x76a>
 800289a:	2b01      	cmp	r3, #1
 800289c:	d11d      	bne.n	80028da <HAL_HCD_IRQHandler+0x76a>
 800289e:	fb0b 4301 	mla	r3, fp, r1, r4
 80028a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028a4:	b1cb      	cbz	r3, 80028da <HAL_HCD_IRQHandler+0x76a>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80028a6:	fb0b 4201 	mla	r2, fp, r1, r4
 80028aa:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 80028ae:	3b01      	subs	r3, #1
 80028b0:	4413      	add	r3, r2
 80028b2:	fbb3 f3f2 	udiv	r3, r3, r2
          if ((num_packets & 1U) != 0U)
 80028b6:	f013 0f01 	tst.w	r3, #1
 80028ba:	d00e      	beq.n	80028da <HAL_HCD_IRQHandler+0x76a>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80028bc:	fb0b 4201 	mla	r2, fp, r1, r4
 80028c0:	f892 3055 	ldrb.w	r3, [r2, #85]	; 0x55
 80028c4:	f083 0301 	eor.w	r3, r3, #1
 80028c8:	f882 3055 	strb.w	r3, [r2, #85]	; 0x55
 80028cc:	e005      	b.n	80028da <HAL_HCD_IRQHandler+0x76a>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80028ce:	fb0b 4301 	mla	r3, fp, r1, r4
 80028d2:	f04f 0202 	mov.w	r2, #2
 80028d6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80028da:	2302      	movs	r3, #2
 80028dc:	60bb      	str	r3, [r7, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80028de:	fb0b 4301 	mla	r3, fp, r1, r4
 80028e2:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 80028e6:	4620      	mov	r0, r4
 80028e8:	f006 f8d0 	bl	8008a8c <HAL_HCD_HC_NotifyURBChange_Callback>
 80028ec:	e5f2      	b.n	80024d4 <HAL_HCD_IRQHandler+0x364>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80028ee:	fb0b 4301 	mla	r3, fp, r1, r4
 80028f2:	f04f 0202 	mov.w	r2, #2
 80028f6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 80028fa:	e7ee      	b.n	80028da <HAL_HCD_IRQHandler+0x76a>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80028fc:	fb0b 4301 	mla	r3, fp, r1, r4
 8002900:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8002904:	e7e9      	b.n	80028da <HAL_HCD_IRQHandler+0x76a>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002906:	fb0b 4201 	mla	r2, fp, r1, r4
 800290a:	f04f 0002 	mov.w	r0, #2
 800290e:	f882 0060 	strb.w	r0, [r2, #96]	; 0x60
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002912:	f853 200c 	ldr.w	r2, [r3, ip]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002916:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800291a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800291e:	f843 200c 	str.w	r2, [r3, ip]
 8002922:	e7da      	b.n	80028da <HAL_HCD_IRQHandler+0x76a>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002924:	6823      	ldr	r3, [r4, #0]
 8002926:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800292a:	615a      	str	r2, [r3, #20]
 800292c:	e42a      	b.n	8002184 <HAL_HCD_IRQHandler+0x14>

0800292e <HAL_HCD_Start>:
  __HAL_LOCK(hhcd);
 800292e:	f890 32f8 	ldrb.w	r3, [r0, #760]	; 0x2f8
 8002932:	2b01      	cmp	r3, #1
 8002934:	d00e      	beq.n	8002954 <HAL_HCD_Start+0x26>
{
 8002936:	b510      	push	{r4, lr}
 8002938:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 800293a:	2101      	movs	r1, #1
 800293c:	f880 12f8 	strb.w	r1, [r0, #760]	; 0x2f8
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002940:	6800      	ldr	r0, [r0, #0]
 8002942:	f002 f858 	bl	80049f6 <USB_DriveVbus>
  __HAL_HCD_ENABLE(hhcd);
 8002946:	6820      	ldr	r0, [r4, #0]
 8002948:	f001 fed3 	bl	80046f2 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800294c:	2000      	movs	r0, #0
 800294e:	f884 02f8 	strb.w	r0, [r4, #760]	; 0x2f8
}
 8002952:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8002954:	2002      	movs	r0, #2
}
 8002956:	4770      	bx	lr

08002958 <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd);
 8002958:	f890 32f8 	ldrb.w	r3, [r0, #760]	; 0x2f8
 800295c:	2b01      	cmp	r3, #1
 800295e:	d00b      	beq.n	8002978 <HAL_HCD_Stop+0x20>
{
 8002960:	b510      	push	{r4, lr}
 8002962:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8002964:	2301      	movs	r3, #1
 8002966:	f880 32f8 	strb.w	r3, [r0, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800296a:	6800      	ldr	r0, [r0, #0]
 800296c:	f002 fa59 	bl	8004e22 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002970:	2000      	movs	r0, #0
 8002972:	f884 02f8 	strb.w	r0, [r4, #760]	; 0x2f8
}
 8002976:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8002978:	2002      	movs	r0, #2
}
 800297a:	4770      	bx	lr

0800297c <HAL_HCD_ResetPort>:
{
 800297c:	b508      	push	{r3, lr}
  return (USB_ResetPort(hhcd->Instance));
 800297e:	6800      	ldr	r0, [r0, #0]
 8002980:	f002 f81a 	bl	80049b8 <USB_ResetPort>
}
 8002984:	bd08      	pop	{r3, pc}

08002986 <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 8002986:	232c      	movs	r3, #44	; 0x2c
 8002988:	fb03 0001 	mla	r0, r3, r1, r0
}
 800298c:	f890 0060 	ldrb.w	r0, [r0, #96]	; 0x60
 8002990:	4770      	bx	lr

08002992 <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count;
 8002992:	232c      	movs	r3, #44	; 0x2c
 8002994:	fb03 0001 	mla	r0, r3, r1, r0
}
 8002998:	6d00      	ldr	r0, [r0, #80]	; 0x50
 800299a:	4770      	bx	lr

0800299c <HAL_HCD_GetCurrentFrame>:
{
 800299c:	b508      	push	{r3, lr}
  return (USB_GetCurrentFrame(hhcd->Instance));
 800299e:	6800      	ldr	r0, [r0, #0]
 80029a0:	f002 f858 	bl	8004a54 <USB_GetCurrentFrame>
}
 80029a4:	bd08      	pop	{r3, pc}

080029a6 <HAL_HCD_GetCurrentSpeed>:
{
 80029a6:	b508      	push	{r3, lr}
  return (USB_GetHostSpeed(hhcd->Instance));
 80029a8:	6800      	ldr	r0, [r0, #0]
 80029aa:	f002 f848 	bl	8004a3e <USB_GetHostSpeed>
}
 80029ae:	bd08      	pop	{r3, pc}

080029b0 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029b0:	6803      	ldr	r3, [r0, #0]
 80029b2:	695a      	ldr	r2, [r3, #20]
 80029b4:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80029b8:	d101      	bne.n	80029be <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 80029ba:	2000      	movs	r0, #0
}
 80029bc:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029c2:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80029c4:	2300      	movs	r3, #0
 80029c6:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80029c8:	2220      	movs	r2, #32
 80029ca:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029ce:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029d2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80029d4:	f042 0204 	orr.w	r2, r2, #4
 80029d8:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 80029da:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 80029de:	2001      	movs	r0, #1
 80029e0:	4770      	bx	lr

080029e2 <I2C_WaitOnFlagUntilTimeout>:
{
 80029e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029e6:	4606      	mov	r6, r0
 80029e8:	460c      	mov	r4, r1
 80029ea:	4617      	mov	r7, r2
 80029ec:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029ee:	f3c1 4807 	ubfx	r8, r1, #16, #8
 80029f2:	f1b8 0f01 	cmp.w	r8, #1
 80029f6:	6833      	ldr	r3, [r6, #0]
 80029f8:	bf0c      	ite	eq
 80029fa:	695b      	ldreq	r3, [r3, #20]
 80029fc:	699b      	ldrne	r3, [r3, #24]
 80029fe:	ea24 0c03 	bic.w	ip, r4, r3
 8002a02:	fa1f fc8c 	uxth.w	ip, ip
 8002a06:	fabc fc8c 	clz	ip, ip
 8002a0a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8002a0e:	4567      	cmp	r7, ip
 8002a10:	d119      	bne.n	8002a46 <I2C_WaitOnFlagUntilTimeout+0x64>
    if (Timeout != HAL_MAX_DELAY)
 8002a12:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002a16:	d0ec      	beq.n	80029f2 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a18:	f7fe fe2a 	bl	8001670 <HAL_GetTick>
 8002a1c:	9b06      	ldr	r3, [sp, #24]
 8002a1e:	1ac0      	subs	r0, r0, r3
 8002a20:	42a8      	cmp	r0, r5
 8002a22:	d801      	bhi.n	8002a28 <I2C_WaitOnFlagUntilTimeout+0x46>
 8002a24:	2d00      	cmp	r5, #0
 8002a26:	d1e4      	bne.n	80029f2 <I2C_WaitOnFlagUntilTimeout+0x10>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002a2c:	2220      	movs	r2, #32
 8002a2e:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a32:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a36:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8002a38:	f042 0220 	orr.w	r2, r2, #32
 8002a3c:	6432      	str	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002a3e:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        return HAL_ERROR;
 8002a42:	2001      	movs	r0, #1
 8002a44:	e000      	b.n	8002a48 <I2C_WaitOnFlagUntilTimeout+0x66>
  return HAL_OK;
 8002a46:	2000      	movs	r0, #0
}
 8002a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002a4c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8002a4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a50:	4605      	mov	r5, r0
 8002a52:	460e      	mov	r6, r1
 8002a54:	4617      	mov	r7, r2
 8002a56:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a58:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8002a5c:	e03b      	b.n	8002ad6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a64:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a66:	682b      	ldr	r3, [r5, #0]
 8002a68:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a6c:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a72:	2220      	movs	r2, #32
 8002a74:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a78:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a7c:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002a7e:	f042 0204 	orr.w	r2, r2, #4
 8002a82:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8002a84:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8002a88:	2001      	movs	r0, #1
}
 8002a8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a8e:	f7fe fdef 	bl	8001670 <HAL_GetTick>
 8002a92:	eba0 0009 	sub.w	r0, r0, r9
 8002a96:	42b8      	cmp	r0, r7
 8002a98:	d800      	bhi.n	8002a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x50>
 8002a9a:	b9e7      	cbnz	r7, 8002ad6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002aa0:	2220      	movs	r2, #32
 8002aa2:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002aa6:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002aaa:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002aac:	f042 0220 	orr.w	r2, r2, #32
 8002ab0:	642a      	str	r2, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002ab2:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_ERROR;
 8002ab6:	2001      	movs	r0, #1
 8002ab8:	e7e7      	b.n	8002a8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002aba:	682b      	ldr	r3, [r5, #0]
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	ea26 0303 	bic.w	r3, r6, r3
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	b19b      	cbz	r3, 8002aee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ac6:	682b      	ldr	r3, [r5, #0]
 8002ac8:	695a      	ldr	r2, [r3, #20]
 8002aca:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002ace:	d1c6      	bne.n	8002a5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x12>
    if (Timeout != HAL_MAX_DELAY)
 8002ad0:	f1b7 3fff 	cmp.w	r7, #4294967295
 8002ad4:	d1db      	bne.n	8002a8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x42>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ad6:	f1b8 0f01 	cmp.w	r8, #1
 8002ada:	d0ee      	beq.n	8002aba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x6e>
 8002adc:	682b      	ldr	r3, [r5, #0]
 8002ade:	699c      	ldr	r4, [r3, #24]
 8002ae0:	ea26 0404 	bic.w	r4, r6, r4
 8002ae4:	b2a4      	uxth	r4, r4
 8002ae6:	2c00      	cmp	r4, #0
 8002ae8:	d1ed      	bne.n	8002ac6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x7a>
  return HAL_OK;
 8002aea:	2000      	movs	r0, #0
 8002aec:	e7cd      	b.n	8002a8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3e>
 8002aee:	2000      	movs	r0, #0
 8002af0:	e7cb      	b.n	8002a8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3e>

08002af2 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8002af2:	b570      	push	{r4, r5, r6, lr}
 8002af4:	4604      	mov	r4, r0
 8002af6:	460d      	mov	r5, r1
 8002af8:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002afa:	6823      	ldr	r3, [r4, #0]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002b02:	d11c      	bne.n	8002b3e <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b04:	4620      	mov	r0, r4
 8002b06:	f7ff ff53 	bl	80029b0 <I2C_IsAcknowledgeFailed>
 8002b0a:	b9d0      	cbnz	r0, 8002b42 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8002b0c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002b10:	d0f3      	beq.n	8002afa <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b12:	f7fe fdad 	bl	8001670 <HAL_GetTick>
 8002b16:	1b80      	subs	r0, r0, r6
 8002b18:	42a8      	cmp	r0, r5
 8002b1a:	d801      	bhi.n	8002b20 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8002b1c:	2d00      	cmp	r5, #0
 8002b1e:	d1ec      	bne.n	8002afa <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b20:	2300      	movs	r3, #0
 8002b22:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b24:	2220      	movs	r2, #32
 8002b26:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b2a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b2e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002b30:	f042 0220 	orr.w	r2, r2, #32
 8002b34:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002b36:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8002b3a:	2001      	movs	r0, #1
 8002b3c:	e000      	b.n	8002b40 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 8002b3e:	2000      	movs	r0, #0
}
 8002b40:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002b42:	2001      	movs	r0, #1
 8002b44:	e7fc      	b.n	8002b40 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
	...

08002b48 <I2C_RequestMemoryWrite>:
{
 8002b48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002b4c:	b085      	sub	sp, #20
 8002b4e:	4604      	mov	r4, r0
 8002b50:	460d      	mov	r5, r1
 8002b52:	4691      	mov	r9, r2
 8002b54:	461f      	mov	r7, r3
 8002b56:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8002b5a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b5c:	6803      	ldr	r3, [r0, #0]
 8002b5e:	6819      	ldr	r1, [r3, #0]
 8002b60:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002b64:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b66:	9600      	str	r6, [sp, #0]
 8002b68:	4643      	mov	r3, r8
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b70:	f7ff ff37 	bl	80029e2 <I2C_WaitOnFlagUntilTimeout>
 8002b74:	b970      	cbnz	r0, 8002b94 <I2C_RequestMemoryWrite+0x4c>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b76:	6823      	ldr	r3, [r4, #0]
 8002b78:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8002b7c:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b7e:	4633      	mov	r3, r6
 8002b80:	4642      	mov	r2, r8
 8002b82:	4928      	ldr	r1, [pc, #160]	; (8002c24 <I2C_RequestMemoryWrite+0xdc>)
 8002b84:	4620      	mov	r0, r4
 8002b86:	f7ff ff61 	bl	8002a4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b8a:	b168      	cbz	r0, 8002ba8 <I2C_RequestMemoryWrite+0x60>
    return HAL_ERROR;
 8002b8c:	2001      	movs	r0, #1
}
 8002b8e:	b005      	add	sp, #20
 8002b90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b94:	6823      	ldr	r3, [r4, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002b9c:	d040      	beq.n	8002c20 <I2C_RequestMemoryWrite+0xd8>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ba2:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8002ba4:	2003      	movs	r0, #3
 8002ba6:	e7f2      	b.n	8002b8e <I2C_RequestMemoryWrite+0x46>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ba8:	2300      	movs	r3, #0
 8002baa:	9303      	str	r3, [sp, #12]
 8002bac:	6823      	ldr	r3, [r4, #0]
 8002bae:	695a      	ldr	r2, [r3, #20]
 8002bb0:	9203      	str	r2, [sp, #12]
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	9303      	str	r3, [sp, #12]
 8002bb6:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bb8:	4632      	mov	r2, r6
 8002bba:	4641      	mov	r1, r8
 8002bbc:	4620      	mov	r0, r4
 8002bbe:	f7ff ff98 	bl	8002af2 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bc2:	b930      	cbnz	r0, 8002bd2 <I2C_RequestMemoryWrite+0x8a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002bc4:	2f01      	cmp	r7, #1
 8002bc6:	d110      	bne.n	8002bea <I2C_RequestMemoryWrite+0xa2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002bc8:	6823      	ldr	r3, [r4, #0]
 8002bca:	fa5f f689 	uxtb.w	r6, r9
 8002bce:	611e      	str	r6, [r3, #16]
 8002bd0:	e7dd      	b.n	8002b8e <I2C_RequestMemoryWrite+0x46>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002bd4:	2b04      	cmp	r3, #4
 8002bd6:	d001      	beq.n	8002bdc <I2C_RequestMemoryWrite+0x94>
    return HAL_ERROR;
 8002bd8:	2001      	movs	r0, #1
 8002bda:	e7d8      	b.n	8002b8e <I2C_RequestMemoryWrite+0x46>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bdc:	6822      	ldr	r2, [r4, #0]
 8002bde:	6813      	ldr	r3, [r2, #0]
 8002be0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002be4:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 8002be6:	2001      	movs	r0, #1
 8002be8:	e7d1      	b.n	8002b8e <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002bea:	6823      	ldr	r3, [r4, #0]
 8002bec:	ea4f 2219 	mov.w	r2, r9, lsr #8
 8002bf0:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bf2:	4632      	mov	r2, r6
 8002bf4:	4641      	mov	r1, r8
 8002bf6:	4620      	mov	r0, r4
 8002bf8:	f7ff ff7b 	bl	8002af2 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bfc:	b920      	cbnz	r0, 8002c08 <I2C_RequestMemoryWrite+0xc0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002bfe:	6823      	ldr	r3, [r4, #0]
 8002c00:	fa5f f689 	uxtb.w	r6, r9
 8002c04:	611e      	str	r6, [r3, #16]
 8002c06:	e7c2      	b.n	8002b8e <I2C_RequestMemoryWrite+0x46>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c08:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002c0a:	2b04      	cmp	r3, #4
 8002c0c:	d001      	beq.n	8002c12 <I2C_RequestMemoryWrite+0xca>
      return HAL_ERROR;
 8002c0e:	2001      	movs	r0, #1
 8002c10:	e7bd      	b.n	8002b8e <I2C_RequestMemoryWrite+0x46>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c12:	6822      	ldr	r2, [r4, #0]
 8002c14:	6813      	ldr	r3, [r2, #0]
 8002c16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c1a:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8002c1c:	2001      	movs	r0, #1
 8002c1e:	e7b6      	b.n	8002b8e <I2C_RequestMemoryWrite+0x46>
    return HAL_TIMEOUT;
 8002c20:	2003      	movs	r0, #3
 8002c22:	e7b4      	b.n	8002b8e <I2C_RequestMemoryWrite+0x46>
 8002c24:	00010002 	.word	0x00010002

08002c28 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8002c28:	b570      	push	{r4, r5, r6, lr}
 8002c2a:	4604      	mov	r4, r0
 8002c2c:	460d      	mov	r5, r1
 8002c2e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c30:	6823      	ldr	r3, [r4, #0]
 8002c32:	695b      	ldr	r3, [r3, #20]
 8002c34:	f013 0f04 	tst.w	r3, #4
 8002c38:	d11c      	bne.n	8002c74 <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c3a:	4620      	mov	r0, r4
 8002c3c:	f7ff feb8 	bl	80029b0 <I2C_IsAcknowledgeFailed>
 8002c40:	b9d0      	cbnz	r0, 8002c78 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8002c42:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002c46:	d0f3      	beq.n	8002c30 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c48:	f7fe fd12 	bl	8001670 <HAL_GetTick>
 8002c4c:	1b80      	subs	r0, r0, r6
 8002c4e:	42a8      	cmp	r0, r5
 8002c50:	d801      	bhi.n	8002c56 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8002c52:	2d00      	cmp	r5, #0
 8002c54:	d1ec      	bne.n	8002c30 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c56:	2300      	movs	r3, #0
 8002c58:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c5a:	2220      	movs	r2, #32
 8002c5c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c60:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c64:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002c66:	f042 0220 	orr.w	r2, r2, #32
 8002c6a:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002c6c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8002c70:	2001      	movs	r0, #1
 8002c72:	e000      	b.n	8002c76 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 8002c74:	2000      	movs	r0, #0
}
 8002c76:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002c78:	2001      	movs	r0, #1
 8002c7a:	e7fc      	b.n	8002c76 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

08002c7c <HAL_I2C_Init>:
  if (hi2c == NULL)
 8002c7c:	2800      	cmp	r0, #0
 8002c7e:	f000 80b0 	beq.w	8002de2 <HAL_I2C_Init+0x166>
{
 8002c82:	b570      	push	{r4, r5, r6, lr}
 8002c84:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c86:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d073      	beq.n	8002d76 <HAL_I2C_Init+0xfa>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c8e:	2324      	movs	r3, #36	; 0x24
 8002c90:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002c94:	6822      	ldr	r2, [r4, #0]
 8002c96:	6813      	ldr	r3, [r2, #0]
 8002c98:	f023 0301 	bic.w	r3, r3, #1
 8002c9c:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c9e:	6822      	ldr	r2, [r4, #0]
 8002ca0:	6813      	ldr	r3, [r2, #0]
 8002ca2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ca6:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ca8:	6822      	ldr	r2, [r4, #0]
 8002caa:	6813      	ldr	r3, [r2, #0]
 8002cac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002cb0:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002cb2:	f001 f877 	bl	8003da4 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002cb6:	6862      	ldr	r2, [r4, #4]
 8002cb8:	4b4c      	ldr	r3, [pc, #304]	; (8002dec <HAL_I2C_Init+0x170>)
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d860      	bhi.n	8002d80 <HAL_I2C_Init+0x104>
 8002cbe:	4b4c      	ldr	r3, [pc, #304]	; (8002df0 <HAL_I2C_Init+0x174>)
 8002cc0:	4298      	cmp	r0, r3
 8002cc2:	f240 8090 	bls.w	8002de6 <HAL_I2C_Init+0x16a>
  freqrange = I2C_FREQRANGE(pclk1);
 8002cc6:	494b      	ldr	r1, [pc, #300]	; (8002df4 <HAL_I2C_Init+0x178>)
 8002cc8:	fba1 3100 	umull	r3, r1, r1, r0
 8002ccc:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cce:	6825      	ldr	r5, [r4, #0]
 8002cd0:	686a      	ldr	r2, [r5, #4]
 8002cd2:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002cd6:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 8002cda:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cdc:	6821      	ldr	r1, [r4, #0]
 8002cde:	6a0a      	ldr	r2, [r1, #32]
 8002ce0:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002ce4:	4d41      	ldr	r5, [pc, #260]	; (8002dec <HAL_I2C_Init+0x170>)
 8002ce6:	6866      	ldr	r6, [r4, #4]
 8002ce8:	42ae      	cmp	r6, r5
 8002cea:	d84e      	bhi.n	8002d8a <HAL_I2C_Init+0x10e>
 8002cec:	3301      	adds	r3, #1
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002cf2:	6821      	ldr	r1, [r4, #0]
 8002cf4:	69ca      	ldr	r2, [r1, #28]
 8002cf6:	f422 424f 	bic.w	r2, r2, #52992	; 0xcf00
 8002cfa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002cfe:	6865      	ldr	r5, [r4, #4]
 8002d00:	4b3a      	ldr	r3, [pc, #232]	; (8002dec <HAL_I2C_Init+0x170>)
 8002d02:	429d      	cmp	r5, r3
 8002d04:	d84b      	bhi.n	8002d9e <HAL_I2C_Init+0x122>
 8002d06:	1e43      	subs	r3, r0, #1
 8002d08:	006d      	lsls	r5, r5, #1
 8002d0a:	fbb3 f3f5 	udiv	r3, r3, r5
 8002d0e:	3301      	adds	r3, #1
 8002d10:	f640 70fc 	movw	r0, #4092	; 0xffc
 8002d14:	4203      	tst	r3, r0
 8002d16:	d05e      	beq.n	8002dd6 <HAL_I2C_Init+0x15a>
 8002d18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	61cb      	str	r3, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d20:	6821      	ldr	r1, [r4, #0]
 8002d22:	680a      	ldr	r2, [r1, #0]
 8002d24:	69e3      	ldr	r3, [r4, #28]
 8002d26:	6a20      	ldr	r0, [r4, #32]
 8002d28:	4303      	orrs	r3, r0
 8002d2a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d32:	6821      	ldr	r1, [r4, #0]
 8002d34:	688a      	ldr	r2, [r1, #8]
 8002d36:	6923      	ldr	r3, [r4, #16]
 8002d38:	68e0      	ldr	r0, [r4, #12]
 8002d3a:	4303      	orrs	r3, r0
 8002d3c:	f422 4203 	bic.w	r2, r2, #33536	; 0x8300
 8002d40:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d44:	4313      	orrs	r3, r2
 8002d46:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d48:	6821      	ldr	r1, [r4, #0]
 8002d4a:	68ca      	ldr	r2, [r1, #12]
 8002d4c:	6963      	ldr	r3, [r4, #20]
 8002d4e:	69a0      	ldr	r0, [r4, #24]
 8002d50:	4303      	orrs	r3, r0
 8002d52:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d56:	4313      	orrs	r3, r2
 8002d58:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8002d5a:	6822      	ldr	r2, [r4, #0]
 8002d5c:	6813      	ldr	r3, [r2, #0]
 8002d5e:	f043 0301 	orr.w	r3, r3, #1
 8002d62:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d64:	2000      	movs	r0, #0
 8002d66:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d68:	2320      	movs	r3, #32
 8002d6a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d6e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d70:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8002d74:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002d76:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8002d7a:	f7fe fa29 	bl	80011d0 <HAL_I2C_MspInit>
 8002d7e:	e786      	b.n	8002c8e <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d80:	4b1d      	ldr	r3, [pc, #116]	; (8002df8 <HAL_I2C_Init+0x17c>)
 8002d82:	4298      	cmp	r0, r3
 8002d84:	d89f      	bhi.n	8002cc6 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8002d86:	2001      	movs	r0, #1
 8002d88:	e7f4      	b.n	8002d74 <HAL_I2C_Init+0xf8>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d8a:	f44f 7596 	mov.w	r5, #300	; 0x12c
 8002d8e:	fb05 f303 	mul.w	r3, r5, r3
 8002d92:	4d1a      	ldr	r5, [pc, #104]	; (8002dfc <HAL_I2C_Init+0x180>)
 8002d94:	fba5 5303 	umull	r5, r3, r5, r3
 8002d98:	099b      	lsrs	r3, r3, #6
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	e7a7      	b.n	8002cee <HAL_I2C_Init+0x72>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d9e:	68a3      	ldr	r3, [r4, #8]
 8002da0:	b95b      	cbnz	r3, 8002dba <HAL_I2C_Init+0x13e>
 8002da2:	3801      	subs	r0, #1
 8002da4:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8002da8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dac:	3301      	adds	r3, #1
 8002dae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002db2:	b193      	cbz	r3, 8002dda <HAL_I2C_Init+0x15e>
 8002db4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002db8:	e7b0      	b.n	8002d1c <HAL_I2C_Init+0xa0>
 8002dba:	3801      	subs	r0, #1
 8002dbc:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8002dc0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002dc4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dc8:	3301      	adds	r3, #1
 8002dca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dce:	b133      	cbz	r3, 8002dde <HAL_I2C_Init+0x162>
 8002dd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002dd4:	e7a2      	b.n	8002d1c <HAL_I2C_Init+0xa0>
 8002dd6:	2304      	movs	r3, #4
 8002dd8:	e7a0      	b.n	8002d1c <HAL_I2C_Init+0xa0>
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e79e      	b.n	8002d1c <HAL_I2C_Init+0xa0>
 8002dde:	2301      	movs	r3, #1
 8002de0:	e79c      	b.n	8002d1c <HAL_I2C_Init+0xa0>
    return HAL_ERROR;
 8002de2:	2001      	movs	r0, #1
}
 8002de4:	4770      	bx	lr
    return HAL_ERROR;
 8002de6:	2001      	movs	r0, #1
 8002de8:	e7c4      	b.n	8002d74 <HAL_I2C_Init+0xf8>
 8002dea:	bf00      	nop
 8002dec:	000186a0 	.word	0x000186a0
 8002df0:	001e847f 	.word	0x001e847f
 8002df4:	431bde83 	.word	0x431bde83
 8002df8:	003d08ff 	.word	0x003d08ff
 8002dfc:	10624dd3 	.word	0x10624dd3

08002e00 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 8002e00:	b1a8      	cbz	r0, 8002e2e <HAL_I2C_DeInit+0x2e>
{
 8002e02:	b510      	push	{r4, lr}
 8002e04:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e06:	2324      	movs	r3, #36	; 0x24
 8002e08:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002e0c:	6802      	ldr	r2, [r0, #0]
 8002e0e:	6813      	ldr	r3, [r2, #0]
 8002e10:	f023 0301 	bic.w	r3, r3, #1
 8002e14:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8002e16:	f7fe fa13 	bl	8001240 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002e1a:	2000      	movs	r0, #0
 8002e1c:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8002e1e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e22:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002e24:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  __HAL_UNLOCK(hi2c);
 8002e28:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002e2c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002e2e:	2001      	movs	r0, #1
}
 8002e30:	4770      	bx	lr
	...

08002e34 <HAL_I2C_Mem_Write>:
{
 8002e34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002e38:	b083      	sub	sp, #12
 8002e3a:	4604      	mov	r4, r0
 8002e3c:	460f      	mov	r7, r1
 8002e3e:	4690      	mov	r8, r2
 8002e40:	4699      	mov	r9, r3
 8002e42:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8002e44:	f7fe fc14 	bl	8001670 <HAL_GetTick>
 8002e48:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e4a:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8002e4e:	b2c0      	uxtb	r0, r0
 8002e50:	2820      	cmp	r0, #32
 8002e52:	d003      	beq.n	8002e5c <HAL_I2C_Mem_Write+0x28>
    return HAL_BUSY;
 8002e54:	2002      	movs	r0, #2
}
 8002e56:	b003      	add	sp, #12
 8002e58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e5c:	9500      	str	r5, [sp, #0]
 8002e5e:	2319      	movs	r3, #25
 8002e60:	2201      	movs	r2, #1
 8002e62:	494d      	ldr	r1, [pc, #308]	; (8002f98 <HAL_I2C_Mem_Write+0x164>)
 8002e64:	4620      	mov	r0, r4
 8002e66:	f7ff fdbc 	bl	80029e2 <I2C_WaitOnFlagUntilTimeout>
 8002e6a:	2800      	cmp	r0, #0
 8002e6c:	f040 808d 	bne.w	8002f8a <HAL_I2C_Mem_Write+0x156>
    __HAL_LOCK(hi2c);
 8002e70:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	f000 808a 	beq.w	8002f8e <HAL_I2C_Mem_Write+0x15a>
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e80:	6823      	ldr	r3, [r4, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	f012 0f01 	tst.w	r2, #1
 8002e88:	d103      	bne.n	8002e92 <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	f042 0201 	orr.w	r2, r2, #1
 8002e90:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e92:	6822      	ldr	r2, [r4, #0]
 8002e94:	6813      	ldr	r3, [r2, #0]
 8002e96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e9a:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002e9c:	2321      	movs	r3, #33	; 0x21
 8002e9e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ea2:	2340      	movs	r3, #64	; 0x40
 8002ea4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8002eac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002eae:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002eb0:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8002eb4:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002eb6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002eb8:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002eba:	4b38      	ldr	r3, [pc, #224]	; (8002f9c <HAL_I2C_Mem_Write+0x168>)
 8002ebc:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ebe:	9501      	str	r5, [sp, #4]
 8002ec0:	9600      	str	r6, [sp, #0]
 8002ec2:	464b      	mov	r3, r9
 8002ec4:	4642      	mov	r2, r8
 8002ec6:	4639      	mov	r1, r7
 8002ec8:	4620      	mov	r0, r4
 8002eca:	f7ff fe3d 	bl	8002b48 <I2C_RequestMemoryWrite>
 8002ece:	2800      	cmp	r0, #0
 8002ed0:	d15f      	bne.n	8002f92 <HAL_I2C_Mem_Write+0x15e>
    while (hi2c->XferSize > 0U)
 8002ed2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002ed4:	b9d3      	cbnz	r3, 8002f0c <HAL_I2C_Mem_Write+0xd8>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ed6:	462a      	mov	r2, r5
 8002ed8:	4631      	mov	r1, r6
 8002eda:	4620      	mov	r0, r4
 8002edc:	f7ff fea4 	bl	8002c28 <I2C_WaitOnBTFFlagUntilTimeout>
 8002ee0:	2800      	cmp	r0, #0
 8002ee2:	d044      	beq.n	8002f6e <HAL_I2C_Mem_Write+0x13a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ee4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	d03a      	beq.n	8002f60 <HAL_I2C_Mem_Write+0x12c>
      return HAL_ERROR;
 8002eea:	2001      	movs	r0, #1
 8002eec:	e7b3      	b.n	8002e56 <HAL_I2C_Mem_Write+0x22>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002ef0:	2b04      	cmp	r3, #4
 8002ef2:	d001      	beq.n	8002ef8 <HAL_I2C_Mem_Write+0xc4>
        return HAL_ERROR;
 8002ef4:	2001      	movs	r0, #1
 8002ef6:	e7ae      	b.n	8002e56 <HAL_I2C_Mem_Write+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ef8:	6822      	ldr	r2, [r4, #0]
 8002efa:	6813      	ldr	r3, [r2, #0]
 8002efc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f00:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8002f02:	2001      	movs	r0, #1
 8002f04:	e7a7      	b.n	8002e56 <HAL_I2C_Mem_Write+0x22>
    while (hi2c->XferSize > 0U)
 8002f06:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d0e4      	beq.n	8002ed6 <HAL_I2C_Mem_Write+0xa2>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f0c:	462a      	mov	r2, r5
 8002f0e:	4631      	mov	r1, r6
 8002f10:	4620      	mov	r0, r4
 8002f12:	f7ff fdee 	bl	8002af2 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f16:	2800      	cmp	r0, #0
 8002f18:	d1e9      	bne.n	8002eee <HAL_I2C_Mem_Write+0xba>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f1a:	6823      	ldr	r3, [r4, #0]
 8002f1c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002f1e:	7812      	ldrb	r2, [r2, #0]
 8002f20:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002f22:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002f24:	1c43      	adds	r3, r0, #1
 8002f26:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8002f28:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002f30:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8002f32:	3901      	subs	r1, #1
 8002f34:	b289      	uxth	r1, r1
 8002f36:	8561      	strh	r1, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f38:	6822      	ldr	r2, [r4, #0]
 8002f3a:	6951      	ldr	r1, [r2, #20]
 8002f3c:	f011 0f04 	tst.w	r1, #4
 8002f40:	d0e1      	beq.n	8002f06 <HAL_I2C_Mem_Write+0xd2>
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d0c7      	beq.n	8002ed6 <HAL_I2C_Mem_Write+0xa2>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f46:	7843      	ldrb	r3, [r0, #1]
 8002f48:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8002f4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8002f50:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002f52:	3b01      	subs	r3, #1
 8002f54:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8002f56:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	8563      	strh	r3, [r4, #42]	; 0x2a
 8002f5e:	e7d2      	b.n	8002f06 <HAL_I2C_Mem_Write+0xd2>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f60:	6822      	ldr	r2, [r4, #0]
 8002f62:	6813      	ldr	r3, [r2, #0]
 8002f64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f68:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8002f6a:	2001      	movs	r0, #1
 8002f6c:	e773      	b.n	8002e56 <HAL_I2C_Mem_Write+0x22>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f6e:	6822      	ldr	r2, [r4, #0]
 8002f70:	6813      	ldr	r3, [r2, #0]
 8002f72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f76:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002f78:	2320      	movs	r3, #32
 8002f7a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8002f84:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8002f88:	e765      	b.n	8002e56 <HAL_I2C_Mem_Write+0x22>
      return HAL_BUSY;
 8002f8a:	2002      	movs	r0, #2
 8002f8c:	e763      	b.n	8002e56 <HAL_I2C_Mem_Write+0x22>
    __HAL_LOCK(hi2c);
 8002f8e:	2002      	movs	r0, #2
 8002f90:	e761      	b.n	8002e56 <HAL_I2C_Mem_Write+0x22>
      return HAL_ERROR;
 8002f92:	2001      	movs	r0, #1
 8002f94:	e75f      	b.n	8002e56 <HAL_I2C_Mem_Write+0x22>
 8002f96:	bf00      	nop
 8002f98:	00100002 	.word	0x00100002
 8002f9c:	ffff0000 	.word	0xffff0000

08002fa0 <HAL_I2C_GetState>:
  return hi2c->State;
 8002fa0:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 8002fa4:	4770      	bx	lr
	...

08002fa8 <HAL_I2S_Init>:
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002fa8:	2800      	cmp	r0, #0
 8002faa:	f000 80b3 	beq.w	8003114 <HAL_I2S_Init+0x16c>
{
 8002fae:	b538      	push	{r3, r4, r5, lr}
 8002fb0:	4604      	mov	r4, r0
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002fb2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d038      	beq.n	800302c <HAL_I2S_Init+0x84>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002fba:	2202      	movs	r2, #2
 8002fbc:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002fc0:	6821      	ldr	r1, [r4, #0]
 8002fc2:	69cb      	ldr	r3, [r1, #28]
 8002fc4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002fc8:	f023 030f 	bic.w	r3, r3, #15
 8002fcc:	61cb      	str	r3, [r1, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002fce:	6823      	ldr	r3, [r4, #0]
 8002fd0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002fd2:	6963      	ldr	r3, [r4, #20]
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d04a      	beq.n	800306e <HAL_I2S_Init+0xc6>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002fd8:	68e3      	ldr	r3, [r4, #12]
      packetlength = 16U;
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	bf0c      	ite	eq
 8002fde:	2510      	moveq	r5, #16
 8002fe0:	2520      	movne	r5, #32
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002fe2:	68a3      	ldr	r3, [r4, #8]
 8002fe4:	2b20      	cmp	r3, #32
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002fe6:	bf98      	it	ls
 8002fe8:	006d      	lslls	r5, r5, #1
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002fea:	2001      	movs	r0, #1
 8002fec:	f000 ffa4 	bl	8003f38 <HAL_RCCEx_GetPeriphCLKFreq>
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002ff0:	6923      	ldr	r3, [r4, #16]
 8002ff2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ff6:	d020      	beq.n	800303a <HAL_I2S_Init+0x92>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002ff8:	fbb0 f0f5 	udiv	r0, r0, r5
 8002ffc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003000:	0043      	lsls	r3, r0, #1
 8003002:	6960      	ldr	r0, [r4, #20]
 8003004:	fbb3 f3f0 	udiv	r3, r3, r0
 8003008:	3305      	adds	r3, #5
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800300a:	4a43      	ldr	r2, [pc, #268]	; (8003118 <HAL_I2S_Init+0x170>)
 800300c:	fba2 2303 	umull	r2, r3, r2, r3

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003010:	f3c3 02c0 	ubfx	r2, r3, #3, #1

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003014:	ebc2 03d3 	rsb	r3, r2, r3, lsr #3
 8003018:	085b      	lsrs	r3, r3, #1
    i2sdiv = 2U;
    i2sodd = 0U;
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800301a:	1e99      	subs	r1, r3, #2
 800301c:	29fd      	cmp	r1, #253	; 0xfd
 800301e:	d924      	bls.n	800306a <HAL_I2S_Init+0xc2>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003020:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003022:	f043 0310 	orr.w	r3, r3, #16
 8003026:	6463      	str	r3, [r4, #68]	; 0x44
    return  HAL_ERROR;
 8003028:	2001      	movs	r0, #1
 800302a:	e03f      	b.n	80030ac <HAL_I2S_Init+0x104>
    hi2s->Lock = HAL_UNLOCKED;
 800302c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003030:	4b3a      	ldr	r3, [pc, #232]	; (800311c <HAL_I2S_Init+0x174>)
 8003032:	6343      	str	r3, [r0, #52]	; 0x34
    HAL_I2S_MspInit(hi2s);
 8003034:	f7fe f922 	bl	800127c <HAL_I2S_MspInit>
 8003038:	e7bf      	b.n	8002fba <HAL_I2S_Init+0x12>
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800303a:	68e3      	ldr	r3, [r4, #12]
 800303c:	b153      	cbz	r3, 8003054 <HAL_I2S_Init+0xac>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800303e:	00ad      	lsls	r5, r5, #2
 8003040:	fbb0 f0f5 	udiv	r0, r0, r5
 8003044:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003048:	0043      	lsls	r3, r0, #1
 800304a:	6960      	ldr	r0, [r4, #20]
 800304c:	fbb3 f3f0 	udiv	r3, r3, r0
 8003050:	3305      	adds	r3, #5
 8003052:	e7da      	b.n	800300a <HAL_I2S_Init+0x62>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003054:	00ed      	lsls	r5, r5, #3
 8003056:	fbb0 f0f5 	udiv	r0, r0, r5
 800305a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800305e:	0043      	lsls	r3, r0, #1
 8003060:	6960      	ldr	r0, [r4, #20]
 8003062:	fbb3 f3f0 	udiv	r3, r3, r0
 8003066:	3305      	adds	r3, #5
 8003068:	e7cf      	b.n	800300a <HAL_I2S_Init+0x62>
    i2sodd = (uint32_t)(i2sodd << 8U);
 800306a:	0212      	lsls	r2, r2, #8
 800306c:	e000      	b.n	8003070 <HAL_I2S_Init+0xc8>
    i2sodd = 0U;
 800306e:	2200      	movs	r2, #0
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003070:	6821      	ldr	r1, [r4, #0]
 8003072:	4313      	orrs	r3, r2
 8003074:	6922      	ldr	r2, [r4, #16]
 8003076:	4313      	orrs	r3, r2
 8003078:	620b      	str	r3, [r1, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800307a:	6821      	ldr	r1, [r4, #0]
 800307c:	69ca      	ldr	r2, [r1, #28]
 800307e:	6863      	ldr	r3, [r4, #4]
 8003080:	68a0      	ldr	r0, [r4, #8]
 8003082:	4303      	orrs	r3, r0
 8003084:	f422 627b 	bic.w	r2, r2, #4016	; 0xfb0
 8003088:	f022 020f 	bic.w	r2, r2, #15
 800308c:	4313      	orrs	r3, r2
 800308e:	68e2      	ldr	r2, [r4, #12]
 8003090:	4313      	orrs	r3, r2
 8003092:	69a2      	ldr	r2, [r4, #24]
 8003094:	4313      	orrs	r3, r2
 8003096:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800309a:	61cb      	str	r3, [r1, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800309c:	6a23      	ldr	r3, [r4, #32]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d005      	beq.n	80030ae <HAL_I2S_Init+0x106>
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80030a2:	2000      	movs	r0, #0
 80030a4:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80030a6:	2301      	movs	r3, #1
 80030a8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  return HAL_OK;
}
 80030ac:	bd38      	pop	{r3, r4, r5, pc}
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80030ae:	4b1c      	ldr	r3, [pc, #112]	; (8003120 <HAL_I2S_Init+0x178>)
 80030b0:	6363      	str	r3, [r4, #52]	; 0x34
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80030b2:	6821      	ldr	r1, [r4, #0]
 80030b4:	4b1b      	ldr	r3, [pc, #108]	; (8003124 <HAL_I2S_Init+0x17c>)
 80030b6:	4a1c      	ldr	r2, [pc, #112]	; (8003128 <HAL_I2S_Init+0x180>)
 80030b8:	4299      	cmp	r1, r3
 80030ba:	bf18      	it	ne
 80030bc:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 80030c0:	69d3      	ldr	r3, [r2, #28]
 80030c2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80030c6:	f023 030f 	bic.w	r3, r3, #15
 80030ca:	61d3      	str	r3, [r2, #28]
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80030cc:	6821      	ldr	r1, [r4, #0]
 80030ce:	4a15      	ldr	r2, [pc, #84]	; (8003124 <HAL_I2S_Init+0x17c>)
 80030d0:	4b15      	ldr	r3, [pc, #84]	; (8003128 <HAL_I2S_Init+0x180>)
 80030d2:	4291      	cmp	r1, r2
 80030d4:	bf18      	it	ne
 80030d6:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 80030da:	2202      	movs	r2, #2
 80030dc:	621a      	str	r2, [r3, #32]
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80030de:	6821      	ldr	r1, [r4, #0]
 80030e0:	4b10      	ldr	r3, [pc, #64]	; (8003124 <HAL_I2S_Init+0x17c>)
 80030e2:	4a11      	ldr	r2, [pc, #68]	; (8003128 <HAL_I2S_Init+0x180>)
 80030e4:	4299      	cmp	r1, r3
 80030e6:	bf18      	it	ne
 80030e8:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 80030ec:	69d1      	ldr	r1, [r2, #28]
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80030ee:	6863      	ldr	r3, [r4, #4]
      tmp = I2S_MODE_SLAVE_TX;
 80030f0:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 80030f4:	bf0c      	ite	eq
 80030f6:	f44f 7080 	moveq.w	r0, #256	; 0x100
 80030fa:	2000      	movne	r0, #0
                         (uint16_t)hi2s->Init.Standard   | \
 80030fc:	68a3      	ldr	r3, [r4, #8]
                         (uint16_t)hi2s->Init.DataFormat | \
 80030fe:	68e5      	ldr	r5, [r4, #12]
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003100:	432b      	orrs	r3, r5
 8003102:	4303      	orrs	r3, r0
                         (uint16_t)hi2s->Init.CPOL);
 8003104:	69a0      	ldr	r0, [r4, #24]
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003106:	4303      	orrs	r3, r0
 8003108:	430b      	orrs	r3, r1
 800310a:	b29b      	uxth	r3, r3
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800310c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003110:	61d3      	str	r3, [r2, #28]
 8003112:	e7c6      	b.n	80030a2 <HAL_I2S_Init+0xfa>
    return HAL_ERROR;
 8003114:	2001      	movs	r0, #1
}
 8003116:	4770      	bx	lr
 8003118:	cccccccd 	.word	0xcccccccd
 800311c:	08003361 	.word	0x08003361
 8003120:	080034b5 	.word	0x080034b5
 8003124:	40003800 	.word	0x40003800
 8003128:	40003400 	.word	0x40003400

0800312c <HAL_I2S_Transmit_DMA>:
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800312c:	2900      	cmp	r1, #0
 800312e:	d05e      	beq.n	80031ee <HAL_I2S_Transmit_DMA+0xc2>
{
 8003130:	b538      	push	{r3, r4, r5, lr}
 8003132:	4604      	mov	r4, r0
  if ((pData == NULL) || (Size == 0U))
 8003134:	2a00      	cmp	r2, #0
 8003136:	d05c      	beq.n	80031f2 <HAL_I2S_Transmit_DMA+0xc6>
  {
    return  HAL_ERROR;
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003138:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b01      	cmp	r3, #1
 8003140:	d059      	beq.n	80031f6 <HAL_I2S_Transmit_DMA+0xca>
 8003142:	2301      	movs	r3, #1
 8003144:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8003148:	f894 5041 	ldrb.w	r5, [r4, #65]	; 0x41
 800314c:	b2ed      	uxtb	r5, r5
 800314e:	429d      	cmp	r5, r3
 8003150:	d110      	bne.n	8003174 <HAL_I2S_Transmit_DMA+0x48>
    __HAL_UNLOCK(hi2s);
    return HAL_BUSY;
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8003152:	2303      	movs	r3, #3
 8003154:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003158:	2300      	movs	r3, #0
 800315a:	6463      	str	r3, [r4, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 800315c:	6261      	str	r1, [r4, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800315e:	6823      	ldr	r3, [r4, #0]
 8003160:	69db      	ldr	r3, [r3, #28]
 8003162:	f003 0307 	and.w	r3, r3, #7

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8003166:	2b03      	cmp	r3, #3
 8003168:	d009      	beq.n	800317e <HAL_I2S_Transmit_DMA+0x52>
 800316a:	2b05      	cmp	r3, #5
 800316c:	d007      	beq.n	800317e <HAL_I2S_Transmit_DMA+0x52>
    hi2s->TxXferSize = (Size << 1U);
    hi2s->TxXferCount = (Size << 1U);
  }
  else
  {
    hi2s->TxXferSize = Size;
 800316e:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8003170:	8562      	strh	r2, [r4, #42]	; 0x2a
 8003172:	e008      	b.n	8003186 <HAL_I2S_Transmit_DMA+0x5a>
    __HAL_UNLOCK(hi2s);
 8003174:	2300      	movs	r3, #0
 8003176:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_BUSY;
 800317a:	2002      	movs	r0, #2
 800317c:	e03a      	b.n	80031f4 <HAL_I2S_Transmit_DMA+0xc8>
    hi2s->TxXferSize = (Size << 1U);
 800317e:	0052      	lsls	r2, r2, #1
 8003180:	b292      	uxth	r2, r2
 8003182:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8003184:	8562      	strh	r2, [r4, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8003186:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003188:	4a1c      	ldr	r2, [pc, #112]	; (80031fc <HAL_I2S_Transmit_DMA+0xd0>)
 800318a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 800318c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800318e:	4a1c      	ldr	r2, [pc, #112]	; (8003200 <HAL_I2S_Transmit_DMA+0xd4>)
 8003190:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8003192:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003194:	4a1b      	ldr	r2, [pc, #108]	; (8003204 <HAL_I2S_Transmit_DMA+0xd8>)
 8003196:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
                                 (uint32_t)hi2s->pTxBuffPtr,
                                 (uint32_t)&hi2s->Instance->DR,
                                 hi2s->TxXferSize))
 8003198:	8d23      	ldrh	r3, [r4, #40]	; 0x28
                                 (uint32_t)&hi2s->Instance->DR,
 800319a:	6822      	ldr	r2, [r4, #0]
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800319c:	b29b      	uxth	r3, r3
 800319e:	320c      	adds	r2, #12
 80031a0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80031a2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80031a4:	f7fe fba0 	bl	80018e8 <HAL_DMA_Start_IT>
 80031a8:	b9a8      	cbnz	r0, 80031d6 <HAL_I2S_Transmit_DMA+0xaa>
    __HAL_UNLOCK(hi2s);
    return HAL_ERROR;
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80031aa:	6823      	ldr	r3, [r4, #0]
 80031ac:	69da      	ldr	r2, [r3, #28]
 80031ae:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80031b2:	d103      	bne.n	80031bc <HAL_I2S_Transmit_DMA+0x90>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80031b4:	69da      	ldr	r2, [r3, #28]
 80031b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031ba:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 80031bc:	6823      	ldr	r3, [r4, #0]
 80031be:	685a      	ldr	r2, [r3, #4]
 80031c0:	f012 0f02 	tst.w	r2, #2
 80031c4:	d103      	bne.n	80031ce <HAL_I2S_Transmit_DMA+0xa2>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80031c6:	685a      	ldr	r2, [r3, #4]
 80031c8:	f042 0202 	orr.w	r2, r2, #2
 80031cc:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80031ce:	2300      	movs	r3, #0
 80031d0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  return HAL_OK;
 80031d4:	e00e      	b.n	80031f4 <HAL_I2S_Transmit_DMA+0xc8>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80031d6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80031d8:	f043 0308 	orr.w	r3, r3, #8
 80031dc:	6463      	str	r3, [r4, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80031de:	2301      	movs	r3, #1
 80031e0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2s);
 80031e4:	2300      	movs	r3, #0
 80031e6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 80031ea:	4628      	mov	r0, r5
 80031ec:	e002      	b.n	80031f4 <HAL_I2S_Transmit_DMA+0xc8>
    return  HAL_ERROR;
 80031ee:	2001      	movs	r0, #1
}
 80031f0:	4770      	bx	lr
    return  HAL_ERROR;
 80031f2:	2001      	movs	r0, #1
}
 80031f4:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hi2s);
 80031f6:	2002      	movs	r0, #2
 80031f8:	e7fc      	b.n	80031f4 <HAL_I2S_Transmit_DMA+0xc8>
 80031fa:	bf00      	nop
 80031fc:	08003305 	.word	0x08003305
 8003200:	0800330f 	.word	0x0800330f
 8003204:	08003489 	.word	0x08003489

08003208 <HAL_I2S_Receive_DMA>:
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8003208:	2900      	cmp	r1, #0
 800320a:	d06d      	beq.n	80032e8 <HAL_I2S_Receive_DMA+0xe0>
{
 800320c:	b530      	push	{r4, r5, lr}
 800320e:	b083      	sub	sp, #12
 8003210:	4604      	mov	r4, r0
  if ((pData == NULL) || (Size == 0U))
 8003212:	2a00      	cmp	r2, #0
 8003214:	d06a      	beq.n	80032ec <HAL_I2S_Receive_DMA+0xe4>
  {
    return  HAL_ERROR;
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003216:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800321a:	b2db      	uxtb	r3, r3
 800321c:	2b01      	cmp	r3, #1
 800321e:	d068      	beq.n	80032f2 <HAL_I2S_Receive_DMA+0xea>
 8003220:	2301      	movs	r3, #1
 8003222:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8003226:	f894 5041 	ldrb.w	r5, [r4, #65]	; 0x41
 800322a:	b2ed      	uxtb	r5, r5
 800322c:	429d      	cmp	r5, r3
 800322e:	d110      	bne.n	8003252 <HAL_I2S_Receive_DMA+0x4a>
    __HAL_UNLOCK(hi2s);
    return HAL_BUSY;
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8003230:	2304      	movs	r3, #4
 8003232:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003236:	2300      	movs	r3, #0
 8003238:	6463      	str	r3, [r4, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 800323a:	62e1      	str	r1, [r4, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800323c:	6823      	ldr	r3, [r4, #0]
 800323e:	69db      	ldr	r3, [r3, #28]
 8003240:	f003 0307 	and.w	r3, r3, #7

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8003244:	2b03      	cmp	r3, #3
 8003246:	d009      	beq.n	800325c <HAL_I2S_Receive_DMA+0x54>
 8003248:	2b05      	cmp	r3, #5
 800324a:	d007      	beq.n	800325c <HAL_I2S_Receive_DMA+0x54>
    hi2s->RxXferSize = (Size << 1U);
    hi2s->RxXferCount = (Size << 1U);
  }
  else
  {
    hi2s->RxXferSize = Size;
 800324c:	8622      	strh	r2, [r4, #48]	; 0x30
    hi2s->RxXferCount = Size;
 800324e:	8662      	strh	r2, [r4, #50]	; 0x32
 8003250:	e008      	b.n	8003264 <HAL_I2S_Receive_DMA+0x5c>
    __HAL_UNLOCK(hi2s);
 8003252:	2300      	movs	r3, #0
 8003254:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_BUSY;
 8003258:	2002      	movs	r0, #2
 800325a:	e048      	b.n	80032ee <HAL_I2S_Receive_DMA+0xe6>
    hi2s->RxXferSize = (Size << 1U);
 800325c:	0052      	lsls	r2, r2, #1
 800325e:	b292      	uxth	r2, r2
 8003260:	8622      	strh	r2, [r4, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8003262:	8662      	strh	r2, [r4, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8003264:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003266:	4a24      	ldr	r2, [pc, #144]	; (80032f8 <HAL_I2S_Receive_DMA+0xf0>)
 8003268:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 800326a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800326c:	4a23      	ldr	r2, [pc, #140]	; (80032fc <HAL_I2S_Receive_DMA+0xf4>)
 800326e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8003270:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003272:	4a23      	ldr	r2, [pc, #140]	; (8003300 <HAL_I2S_Receive_DMA+0xf8>)
 8003274:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8003276:	6821      	ldr	r1, [r4, #0]
 8003278:	69cb      	ldr	r3, [r1, #28]
 800327a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800327e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003282:	d01d      	beq.n	80032c0 <HAL_I2S_Receive_DMA+0xb8>
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
                                 hi2s->RxXferSize))
 8003284:	8e23      	ldrh	r3, [r4, #48]	; 0x30
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8003286:	b29b      	uxth	r3, r3
 8003288:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800328a:	310c      	adds	r1, #12
 800328c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800328e:	f7fe fb2b 	bl	80018e8 <HAL_DMA_Start_IT>
 8003292:	b9e8      	cbnz	r0, 80032d0 <HAL_I2S_Receive_DMA+0xc8>
    __HAL_UNLOCK(hi2s);
    return HAL_ERROR;
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8003294:	6823      	ldr	r3, [r4, #0]
 8003296:	69da      	ldr	r2, [r3, #28]
 8003298:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800329c:	d103      	bne.n	80032a6 <HAL_I2S_Receive_DMA+0x9e>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800329e:	69da      	ldr	r2, [r3, #28]
 80032a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032a4:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 80032a6:	6823      	ldr	r3, [r4, #0]
 80032a8:	685a      	ldr	r2, [r3, #4]
 80032aa:	f012 0f01 	tst.w	r2, #1
 80032ae:	d103      	bne.n	80032b8 <HAL_I2S_Receive_DMA+0xb0>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80032b0:	685a      	ldr	r2, [r3, #4]
 80032b2:	f042 0201 	orr.w	r2, r2, #1
 80032b6:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80032b8:	2300      	movs	r3, #0
 80032ba:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  return HAL_OK;
 80032be:	e016      	b.n	80032ee <HAL_I2S_Receive_DMA+0xe6>
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80032c0:	2300      	movs	r3, #0
 80032c2:	9301      	str	r3, [sp, #4]
 80032c4:	68cb      	ldr	r3, [r1, #12]
 80032c6:	9301      	str	r3, [sp, #4]
 80032c8:	688b      	ldr	r3, [r1, #8]
 80032ca:	9301      	str	r3, [sp, #4]
 80032cc:	9b01      	ldr	r3, [sp, #4]
 80032ce:	e7d9      	b.n	8003284 <HAL_I2S_Receive_DMA+0x7c>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80032d0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80032d2:	f043 0308 	orr.w	r3, r3, #8
 80032d6:	6463      	str	r3, [r4, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80032d8:	2301      	movs	r3, #1
 80032da:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2s);
 80032de:	2300      	movs	r3, #0
 80032e0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 80032e4:	4628      	mov	r0, r5
 80032e6:	e002      	b.n	80032ee <HAL_I2S_Receive_DMA+0xe6>
    return  HAL_ERROR;
 80032e8:	2001      	movs	r0, #1
}
 80032ea:	4770      	bx	lr
    return  HAL_ERROR;
 80032ec:	2001      	movs	r0, #1
}
 80032ee:	b003      	add	sp, #12
 80032f0:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hi2s);
 80032f2:	2002      	movs	r0, #2
 80032f4:	e7fb      	b.n	80032ee <HAL_I2S_Receive_DMA+0xe6>
 80032f6:	bf00      	nop
 80032f8:	08003333 	.word	0x08003333
 80032fc:	0800333d 	.word	0x0800333d
 8003300:	08003489 	.word	0x08003489

08003304 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003304:	b508      	push	{r3, lr}

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8003306:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8003308:	f7fd f8ec 	bl	80004e4 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800330c:	bd08      	pop	{r3, pc}

0800330e <I2S_DMATxCplt>:
{
 800330e:	b508      	push	{r3, lr}
 8003310:	4603      	mov	r3, r0
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003312:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode == DMA_NORMAL)
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	b94b      	cbnz	r3, 800332c <I2S_DMATxCplt+0x1e>
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003318:	6802      	ldr	r2, [r0, #0]
 800331a:	6853      	ldr	r3, [r2, #4]
 800331c:	f023 0302 	bic.w	r3, r3, #2
 8003320:	6053      	str	r3, [r2, #4]
    hi2s->TxXferCount = 0U;
 8003322:	2300      	movs	r3, #0
 8003324:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8003326:	2301      	movs	r3, #1
 8003328:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  HAL_I2S_TxCpltCallback(hi2s);
 800332c:	f7fd f8ce 	bl	80004cc <HAL_I2S_TxCpltCallback>
}
 8003330:	bd08      	pop	{r3, pc}

08003332 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003332:	b508      	push	{r3, lr}

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8003334:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8003336:	f7fd fcbf 	bl	8000cb8 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800333a:	bd08      	pop	{r3, pc}

0800333c <I2S_DMARxCplt>:
{
 800333c:	b508      	push	{r3, lr}
 800333e:	4603      	mov	r3, r0
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003340:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode == DMA_NORMAL)
 8003342:	69db      	ldr	r3, [r3, #28]
 8003344:	b94b      	cbnz	r3, 800335a <I2S_DMARxCplt+0x1e>
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003346:	6802      	ldr	r2, [r0, #0]
 8003348:	6853      	ldr	r3, [r2, #4]
 800334a:	f023 0301 	bic.w	r3, r3, #1
 800334e:	6053      	str	r3, [r2, #4]
    hi2s->RxXferCount = 0U;
 8003350:	2300      	movs	r3, #0
 8003352:	8643      	strh	r3, [r0, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8003354:	2301      	movs	r3, #1
 8003356:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  HAL_I2S_RxCpltCallback(hi2s);
 800335a:	f7fd fccf 	bl	8000cfc <HAL_I2S_RxCpltCallback>
}
 800335e:	bd08      	pop	{r3, pc}

08003360 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003360:	b510      	push	{r4, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	4604      	mov	r4, r0
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003366:	6802      	ldr	r2, [r0, #0]
 8003368:	6893      	ldr	r3, [r2, #8]
 800336a:	9303      	str	r3, [sp, #12]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800336c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b04      	cmp	r3, #4
 8003374:	d006      	beq.n	8003384 <I2S_IRQHandler+0x24>
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003376:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800337a:	b2db      	uxtb	r3, r3
 800337c:	2b03      	cmp	r3, #3
 800337e:	d042      	beq.n	8003406 <I2S_IRQHandler+0xa6>
#else
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003380:	b004      	add	sp, #16
 8003382:	bd10      	pop	{r4, pc}
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003384:	9b03      	ldr	r3, [sp, #12]
 8003386:	f013 0f01 	tst.w	r3, #1
 800338a:	d003      	beq.n	8003394 <I2S_IRQHandler+0x34>
 800338c:	6853      	ldr	r3, [r2, #4]
 800338e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003392:	d11f      	bne.n	80033d4 <I2S_IRQHandler+0x74>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003394:	9b03      	ldr	r3, [sp, #12]
 8003396:	f013 0f40 	tst.w	r3, #64	; 0x40
 800339a:	d0ec      	beq.n	8003376 <I2S_IRQHandler+0x16>
 800339c:	6823      	ldr	r3, [r4, #0]
 800339e:	685a      	ldr	r2, [r3, #4]
 80033a0:	f012 0f20 	tst.w	r2, #32
 80033a4:	d0e7      	beq.n	8003376 <I2S_IRQHandler+0x16>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80033a6:	685a      	ldr	r2, [r3, #4]
 80033a8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80033ac:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80033ae:	2300      	movs	r3, #0
 80033b0:	9301      	str	r3, [sp, #4]
 80033b2:	6823      	ldr	r3, [r4, #0]
 80033b4:	68da      	ldr	r2, [r3, #12]
 80033b6:	9201      	str	r2, [sp, #4]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	9301      	str	r3, [sp, #4]
 80033bc:	9b01      	ldr	r3, [sp, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 80033be:	2301      	movs	r3, #1
 80033c0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80033c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80033c6:	f043 0302 	orr.w	r3, r3, #2
 80033ca:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80033cc:	4620      	mov	r0, r4
 80033ce:	f7fd f897 	bl	8000500 <HAL_I2S_ErrorCallback>
 80033d2:	e7d0      	b.n	8003376 <I2S_IRQHandler+0x16>
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80033d4:	68d2      	ldr	r2, [r2, #12]
 80033d6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80033d8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80033da:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80033dc:	3302      	adds	r3, #2
 80033de:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2s->RxXferCount--;
 80033e0:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80033e2:	3b01      	subs	r3, #1
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	8643      	strh	r3, [r0, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 80033e8:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1d1      	bne.n	8003394 <I2S_IRQHandler+0x34>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80033f0:	6802      	ldr	r2, [r0, #0]
 80033f2:	6853      	ldr	r3, [r2, #4]
 80033f4:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80033f8:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 80033fa:	2301      	movs	r3, #1
 80033fc:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 8003400:	f7fd fc7c 	bl	8000cfc <HAL_I2S_RxCpltCallback>
 8003404:	e7c6      	b.n	8003394 <I2S_IRQHandler+0x34>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003406:	9b03      	ldr	r3, [sp, #12]
 8003408:	f013 0f02 	tst.w	r3, #2
 800340c:	d004      	beq.n	8003418 <I2S_IRQHandler+0xb8>
 800340e:	6823      	ldr	r3, [r4, #0]
 8003410:	685a      	ldr	r2, [r3, #4]
 8003412:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003416:	d11d      	bne.n	8003454 <I2S_IRQHandler+0xf4>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003418:	9b03      	ldr	r3, [sp, #12]
 800341a:	f013 0f08 	tst.w	r3, #8
 800341e:	d0af      	beq.n	8003380 <I2S_IRQHandler+0x20>
 8003420:	6823      	ldr	r3, [r4, #0]
 8003422:	685a      	ldr	r2, [r3, #4]
 8003424:	f012 0f20 	tst.w	r2, #32
 8003428:	d0aa      	beq.n	8003380 <I2S_IRQHandler+0x20>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800342a:	685a      	ldr	r2, [r3, #4]
 800342c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003430:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003432:	2300      	movs	r3, #0
 8003434:	9302      	str	r3, [sp, #8]
 8003436:	6823      	ldr	r3, [r4, #0]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	9302      	str	r3, [sp, #8]
 800343c:	9b02      	ldr	r3, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 800343e:	2301      	movs	r3, #1
 8003440:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003444:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003446:	f043 0304 	orr.w	r3, r3, #4
 800344a:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 800344c:	4620      	mov	r0, r4
 800344e:	f7fd f857 	bl	8000500 <HAL_I2S_ErrorCallback>
}
 8003452:	e795      	b.n	8003380 <I2S_IRQHandler+0x20>
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003454:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003456:	8812      	ldrh	r2, [r2, #0]
 8003458:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800345a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800345c:	3302      	adds	r3, #2
 800345e:	6263      	str	r3, [r4, #36]	; 0x24
  hi2s->TxXferCount--;
 8003460:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003462:	3b01      	subs	r3, #1
 8003464:	b29b      	uxth	r3, r3
 8003466:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8003468:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800346a:	b29b      	uxth	r3, r3
 800346c:	2b00      	cmp	r3, #0
 800346e:	d1d3      	bne.n	8003418 <I2S_IRQHandler+0xb8>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003470:	6822      	ldr	r2, [r4, #0]
 8003472:	6853      	ldr	r3, [r2, #4]
 8003474:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003478:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 800347a:	2301      	movs	r3, #1
 800347c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 8003480:	4620      	mov	r0, r4
 8003482:	f7fd f823 	bl	80004cc <HAL_I2S_TxCpltCallback>
 8003486:	e7c7      	b.n	8003418 <I2S_IRQHandler+0xb8>

08003488 <I2S_DMAError>:
{
 8003488:	b508      	push	{r3, lr}
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800348a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800348c:	6802      	ldr	r2, [r0, #0]
 800348e:	6853      	ldr	r3, [r2, #4]
 8003490:	f023 0303 	bic.w	r3, r3, #3
 8003494:	6053      	str	r3, [r2, #4]
  hi2s->TxXferCount = 0U;
 8003496:	2300      	movs	r3, #0
 8003498:	8543      	strh	r3, [r0, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 800349a:	8643      	strh	r3, [r0, #50]	; 0x32
  hi2s->State = HAL_I2S_STATE_READY;
 800349c:	2301      	movs	r3, #1
 800349e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80034a2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80034a4:	f043 0308 	orr.w	r3, r3, #8
 80034a8:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_I2S_ErrorCallback(hi2s);
 80034aa:	f7fd f829 	bl	8000500 <HAL_I2S_ErrorCallback>
}
 80034ae:	bd08      	pop	{r3, pc}

080034b0 <HAL_I2SEx_TxRxCpltCallback>:
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80034b0:	4770      	bx	lr
	...

080034b4 <HAL_I2SEx_FullDuplex_IRQHandler>:
{
 80034b4:	b510      	push	{r4, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	4604      	mov	r4, r0
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80034ba:	6802      	ldr	r2, [r0, #0]
 80034bc:	6893      	ldr	r3, [r2, #8]
 80034be:	9305      	str	r3, [sp, #20]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80034c0:	499a      	ldr	r1, [pc, #616]	; (800372c <HAL_I2SEx_FullDuplex_IRQHandler+0x278>)
 80034c2:	4b9b      	ldr	r3, [pc, #620]	; (8003730 <HAL_I2SEx_FullDuplex_IRQHandler+0x27c>)
 80034c4:	428a      	cmp	r2, r1
 80034c6:	bf18      	it	ne
 80034c8:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 80034cc:	6899      	ldr	r1, [r3, #8]
 80034ce:	9104      	str	r1, [sp, #16]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80034d0:	6851      	ldr	r1, [r2, #4]
 80034d2:	9103      	str	r1, [sp, #12]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80034d4:	6859      	ldr	r1, [r3, #4]
 80034d6:	9102      	str	r1, [sp, #8]
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80034d8:	6841      	ldr	r1, [r0, #4]
 80034da:	f431 7100 	bics.w	r1, r1, #512	; 0x200
 80034de:	f040 80ac 	bne.w	800363a <HAL_I2SEx_FullDuplex_IRQHandler+0x186>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80034e2:	9b05      	ldr	r3, [sp, #20]
 80034e4:	f013 0f02 	tst.w	r3, #2
 80034e8:	d003      	beq.n	80034f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x3e>
 80034ea:	9b03      	ldr	r3, [sp, #12]
 80034ec:	f013 0f80 	tst.w	r3, #128	; 0x80
 80034f0:	d15b      	bne.n	80035aa <HAL_I2SEx_FullDuplex_IRQHandler+0xf6>
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80034f2:	9b04      	ldr	r3, [sp, #16]
 80034f4:	f013 0f01 	tst.w	r3, #1
 80034f8:	d003      	beq.n	8003502 <HAL_I2SEx_FullDuplex_IRQHandler+0x4e>
 80034fa:	9b02      	ldr	r3, [sp, #8]
 80034fc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003500:	d16f      	bne.n	80035e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x12e>
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003502:	9b04      	ldr	r3, [sp, #16]
 8003504:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003508:	d025      	beq.n	8003556 <HAL_I2SEx_FullDuplex_IRQHandler+0xa2>
 800350a:	9b02      	ldr	r3, [sp, #8]
 800350c:	f013 0f20 	tst.w	r3, #32
 8003510:	d021      	beq.n	8003556 <HAL_I2SEx_FullDuplex_IRQHandler+0xa2>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003512:	6821      	ldr	r1, [r4, #0]
 8003514:	4a85      	ldr	r2, [pc, #532]	; (800372c <HAL_I2SEx_FullDuplex_IRQHandler+0x278>)
 8003516:	4b86      	ldr	r3, [pc, #536]	; (8003730 <HAL_I2SEx_FullDuplex_IRQHandler+0x27c>)
 8003518:	4291      	cmp	r1, r2
 800351a:	bf18      	it	ne
 800351c:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8003520:	685a      	ldr	r2, [r3, #4]
 8003522:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003526:	605a      	str	r2, [r3, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003528:	6822      	ldr	r2, [r4, #0]
 800352a:	6853      	ldr	r3, [r2, #4]
 800352c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003530:	6053      	str	r3, [r2, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003532:	2300      	movs	r3, #0
 8003534:	9300      	str	r3, [sp, #0]
 8003536:	6823      	ldr	r3, [r4, #0]
 8003538:	68da      	ldr	r2, [r3, #12]
 800353a:	9200      	str	r2, [sp, #0]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	9300      	str	r3, [sp, #0]
 8003540:	9b00      	ldr	r3, [sp, #0]
      hi2s->State = HAL_I2S_STATE_READY;
 8003542:	2301      	movs	r3, #1
 8003544:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003548:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800354a:	f043 0302 	orr.w	r3, r3, #2
 800354e:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8003550:	4620      	mov	r0, r4
 8003552:	f7fc ffd5 	bl	8000500 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003556:	9b05      	ldr	r3, [sp, #20]
 8003558:	f013 0f08 	tst.w	r3, #8
 800355c:	d023      	beq.n	80035a6 <HAL_I2SEx_FullDuplex_IRQHandler+0xf2>
 800355e:	9b03      	ldr	r3, [sp, #12]
 8003560:	f013 0f20 	tst.w	r3, #32
 8003564:	d01f      	beq.n	80035a6 <HAL_I2SEx_FullDuplex_IRQHandler+0xf2>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003566:	6822      	ldr	r2, [r4, #0]
 8003568:	6853      	ldr	r3, [r2, #4]
 800356a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800356e:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003570:	6821      	ldr	r1, [r4, #0]
 8003572:	4a6e      	ldr	r2, [pc, #440]	; (800372c <HAL_I2SEx_FullDuplex_IRQHandler+0x278>)
 8003574:	4b6e      	ldr	r3, [pc, #440]	; (8003730 <HAL_I2SEx_FullDuplex_IRQHandler+0x27c>)
 8003576:	4291      	cmp	r1, r2
 8003578:	bf18      	it	ne
 800357a:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 800357e:	685a      	ldr	r2, [r3, #4]
 8003580:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003584:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003586:	2300      	movs	r3, #0
 8003588:	9301      	str	r3, [sp, #4]
 800358a:	6823      	ldr	r3, [r4, #0]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	9301      	str	r3, [sp, #4]
 8003590:	9b01      	ldr	r3, [sp, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8003592:	2301      	movs	r3, #1
 8003594:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003598:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800359a:	f043 0304 	orr.w	r3, r3, #4
 800359e:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80035a0:	4620      	mov	r0, r4
 80035a2:	f7fc ffad 	bl	8000500 <HAL_I2S_ErrorCallback>
}
 80035a6:	b006      	add	sp, #24
 80035a8:	bd10      	pop	{r4, pc}
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80035aa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80035ac:	1c99      	adds	r1, r3, #2
 80035ae:	6241      	str	r1, [r0, #36]	; 0x24
 80035b0:	881b      	ldrh	r3, [r3, #0]
 80035b2:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 80035b4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80035b6:	3b01      	subs	r3, #1
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	8543      	strh	r3, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80035bc:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80035be:	b29b      	uxth	r3, r3
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d196      	bne.n	80034f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x3e>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035c4:	6802      	ldr	r2, [r0, #0]
 80035c6:	6853      	ldr	r3, [r2, #4]
 80035c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035cc:	6053      	str	r3, [r2, #4]

    if (hi2s->RxXferCount == 0U)
 80035ce:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d18d      	bne.n	80034f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x3e>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80035d6:	2301      	movs	r3, #1
 80035d8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80035dc:	f7ff ff68 	bl	80034b0 <HAL_I2SEx_TxRxCpltCallback>
 80035e0:	e787      	b.n	80034f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x3e>
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80035e2:	6821      	ldr	r1, [r4, #0]
 80035e4:	4a51      	ldr	r2, [pc, #324]	; (800372c <HAL_I2SEx_FullDuplex_IRQHandler+0x278>)
 80035e6:	4b52      	ldr	r3, [pc, #328]	; (8003730 <HAL_I2SEx_FullDuplex_IRQHandler+0x27c>)
 80035e8:	4291      	cmp	r1, r2
 80035ea:	bf18      	it	ne
 80035ec:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 80035f0:	68da      	ldr	r2, [r3, #12]
 80035f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80035f4:	1c99      	adds	r1, r3, #2
 80035f6:	62e1      	str	r1, [r4, #44]	; 0x2c
 80035f8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80035fa:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80035fc:	3b01      	subs	r3, #1
 80035fe:	b29b      	uxth	r3, r3
 8003600:	8663      	strh	r3, [r4, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003602:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8003604:	b29b      	uxth	r3, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	f47f af7b 	bne.w	8003502 <HAL_I2SEx_FullDuplex_IRQHandler+0x4e>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800360c:	6821      	ldr	r1, [r4, #0]
 800360e:	4a47      	ldr	r2, [pc, #284]	; (800372c <HAL_I2SEx_FullDuplex_IRQHandler+0x278>)
 8003610:	4b47      	ldr	r3, [pc, #284]	; (8003730 <HAL_I2SEx_FullDuplex_IRQHandler+0x27c>)
 8003612:	4291      	cmp	r1, r2
 8003614:	bf18      	it	ne
 8003616:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 800361a:	685a      	ldr	r2, [r3, #4]
 800361c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003620:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003622:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003624:	b29b      	uxth	r3, r3
 8003626:	2b00      	cmp	r3, #0
 8003628:	f47f af6b 	bne.w	8003502 <HAL_I2SEx_FullDuplex_IRQHandler+0x4e>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800362c:	2301      	movs	r3, #1
 800362e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003632:	4620      	mov	r0, r4
 8003634:	f7ff ff3c 	bl	80034b0 <HAL_I2SEx_TxRxCpltCallback>
 8003638:	e763      	b.n	8003502 <HAL_I2SEx_FullDuplex_IRQHandler+0x4e>
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800363a:	9a04      	ldr	r2, [sp, #16]
 800363c:	f012 0f02 	tst.w	r2, #2
 8003640:	d003      	beq.n	800364a <HAL_I2SEx_FullDuplex_IRQHandler+0x196>
 8003642:	9a02      	ldr	r2, [sp, #8]
 8003644:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003648:	d14e      	bne.n	80036e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x234>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800364a:	9b05      	ldr	r3, [sp, #20]
 800364c:	f013 0f01 	tst.w	r3, #1
 8003650:	d003      	beq.n	800365a <HAL_I2SEx_FullDuplex_IRQHandler+0x1a6>
 8003652:	9b03      	ldr	r3, [sp, #12]
 8003654:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003658:	d16c      	bne.n	8003734 <HAL_I2SEx_FullDuplex_IRQHandler+0x280>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800365a:	9b05      	ldr	r3, [sp, #20]
 800365c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003660:	d01d      	beq.n	800369e <HAL_I2SEx_FullDuplex_IRQHandler+0x1ea>
 8003662:	9b03      	ldr	r3, [sp, #12]
 8003664:	f013 0f20 	tst.w	r3, #32
 8003668:	d019      	beq.n	800369e <HAL_I2SEx_FullDuplex_IRQHandler+0x1ea>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800366a:	6822      	ldr	r2, [r4, #0]
 800366c:	6853      	ldr	r3, [r2, #4]
 800366e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8003672:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003674:	6821      	ldr	r1, [r4, #0]
 8003676:	4a2d      	ldr	r2, [pc, #180]	; (800372c <HAL_I2SEx_FullDuplex_IRQHandler+0x278>)
 8003678:	4b2d      	ldr	r3, [pc, #180]	; (8003730 <HAL_I2SEx_FullDuplex_IRQHandler+0x27c>)
 800367a:	4291      	cmp	r1, r2
 800367c:	bf18      	it	ne
 800367e:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8003682:	685a      	ldr	r2, [r3, #4]
 8003684:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003688:	605a      	str	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 800368a:	2301      	movs	r3, #1
 800368c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003690:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003692:	f043 0302 	orr.w	r3, r3, #2
 8003696:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8003698:	4620      	mov	r0, r4
 800369a:	f7fc ff31 	bl	8000500 <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800369e:	9b04      	ldr	r3, [sp, #16]
 80036a0:	f013 0f08 	tst.w	r3, #8
 80036a4:	f43f af7f 	beq.w	80035a6 <HAL_I2SEx_FullDuplex_IRQHandler+0xf2>
 80036a8:	9b02      	ldr	r3, [sp, #8]
 80036aa:	f013 0f20 	tst.w	r3, #32
 80036ae:	f43f af7a 	beq.w	80035a6 <HAL_I2SEx_FullDuplex_IRQHandler+0xf2>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036b2:	6821      	ldr	r1, [r4, #0]
 80036b4:	4a1d      	ldr	r2, [pc, #116]	; (800372c <HAL_I2SEx_FullDuplex_IRQHandler+0x278>)
 80036b6:	4b1e      	ldr	r3, [pc, #120]	; (8003730 <HAL_I2SEx_FullDuplex_IRQHandler+0x27c>)
 80036b8:	4291      	cmp	r1, r2
 80036ba:	bf18      	it	ne
 80036bc:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 80036c0:	685a      	ldr	r2, [r3, #4]
 80036c2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036c6:	605a      	str	r2, [r3, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036c8:	6822      	ldr	r2, [r4, #0]
 80036ca:	6853      	ldr	r3, [r2, #4]
 80036cc:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80036d0:	6053      	str	r3, [r2, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 80036d2:	2301      	movs	r3, #1
 80036d4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80036d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80036da:	f043 0304 	orr.w	r3, r3, #4
 80036de:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80036e0:	4620      	mov	r0, r4
 80036e2:	f7fc ff0d 	bl	8000500 <HAL_I2S_ErrorCallback>
}
 80036e6:	e75e      	b.n	80035a6 <HAL_I2SEx_FullDuplex_IRQHandler+0xf2>
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80036e8:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80036ea:	1c91      	adds	r1, r2, #2
 80036ec:	6241      	str	r1, [r0, #36]	; 0x24
 80036ee:	8812      	ldrh	r2, [r2, #0]
 80036f0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80036f2:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80036f4:	3b01      	subs	r3, #1
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	8543      	strh	r3, [r0, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 80036fa:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1a3      	bne.n	800364a <HAL_I2SEx_FullDuplex_IRQHandler+0x196>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003702:	6801      	ldr	r1, [r0, #0]
 8003704:	4a09      	ldr	r2, [pc, #36]	; (800372c <HAL_I2SEx_FullDuplex_IRQHandler+0x278>)
 8003706:	4b0a      	ldr	r3, [pc, #40]	; (8003730 <HAL_I2SEx_FullDuplex_IRQHandler+0x27c>)
 8003708:	4291      	cmp	r1, r2
 800370a:	bf18      	it	ne
 800370c:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8003710:	685a      	ldr	r2, [r3, #4]
 8003712:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003716:	605a      	str	r2, [r3, #4]
    if (hi2s->RxXferCount == 0U)
 8003718:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 800371a:	b29b      	uxth	r3, r3
 800371c:	2b00      	cmp	r3, #0
 800371e:	d194      	bne.n	800364a <HAL_I2SEx_FullDuplex_IRQHandler+0x196>
      hi2s->State = HAL_I2S_STATE_READY;
 8003720:	2301      	movs	r3, #1
 8003722:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003726:	f7ff fec3 	bl	80034b0 <HAL_I2SEx_TxRxCpltCallback>
 800372a:	e78e      	b.n	800364a <HAL_I2SEx_FullDuplex_IRQHandler+0x196>
 800372c:	40003800 	.word	0x40003800
 8003730:	40003400 	.word	0x40003400
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003734:	6823      	ldr	r3, [r4, #0]
 8003736:	68da      	ldr	r2, [r3, #12]
 8003738:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800373a:	1c99      	adds	r1, r3, #2
 800373c:	62e1      	str	r1, [r4, #44]	; 0x2c
 800373e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003740:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8003742:	3b01      	subs	r3, #1
 8003744:	b29b      	uxth	r3, r3
 8003746:	8663      	strh	r3, [r4, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 8003748:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800374a:	b29b      	uxth	r3, r3
 800374c:	2b00      	cmp	r3, #0
 800374e:	d184      	bne.n	800365a <HAL_I2SEx_FullDuplex_IRQHandler+0x1a6>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003750:	6822      	ldr	r2, [r4, #0]
 8003752:	6853      	ldr	r3, [r2, #4]
 8003754:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8003758:	6053      	str	r3, [r2, #4]
    if (hi2s->TxXferCount == 0U)
 800375a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800375c:	b29b      	uxth	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	f47f af7b 	bne.w	800365a <HAL_I2SEx_FullDuplex_IRQHandler+0x1a6>
      hi2s->State = HAL_I2S_STATE_READY;
 8003764:	2301      	movs	r3, #1
 8003766:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800376a:	4620      	mov	r0, r4
 800376c:	f7ff fea0 	bl	80034b0 <HAL_I2SEx_TxRxCpltCallback>
 8003770:	e773      	b.n	800365a <HAL_I2SEx_FullDuplex_IRQHandler+0x1a6>
 8003772:	bf00      	nop

08003774 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003774:	2800      	cmp	r0, #0
 8003776:	f000 81e1 	beq.w	8003b3c <HAL_RCC_OscConfig+0x3c8>
{
 800377a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003782:	6803      	ldr	r3, [r0, #0]
 8003784:	f013 0f01 	tst.w	r3, #1
 8003788:	d03b      	beq.n	8003802 <HAL_RCC_OscConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800378a:	4b9f      	ldr	r3, [pc, #636]	; (8003a08 <HAL_RCC_OscConfig+0x294>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f003 030c 	and.w	r3, r3, #12
 8003792:	2b04      	cmp	r3, #4
 8003794:	d02c      	beq.n	80037f0 <HAL_RCC_OscConfig+0x7c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003796:	4b9c      	ldr	r3, [pc, #624]	; (8003a08 <HAL_RCC_OscConfig+0x294>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800379e:	2b08      	cmp	r3, #8
 80037a0:	d021      	beq.n	80037e6 <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037a2:	6863      	ldr	r3, [r4, #4]
 80037a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037a8:	d04f      	beq.n	800384a <HAL_RCC_OscConfig+0xd6>
 80037aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037ae:	d052      	beq.n	8003856 <HAL_RCC_OscConfig+0xe2>
 80037b0:	4b95      	ldr	r3, [pc, #596]	; (8003a08 <HAL_RCC_OscConfig+0x294>)
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80037b8:	601a      	str	r2, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80037c0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037c2:	6863      	ldr	r3, [r4, #4]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d050      	beq.n	800386a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c8:	f7fd ff52 	bl	8001670 <HAL_GetTick>
 80037cc:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ce:	4e8e      	ldr	r6, [pc, #568]	; (8003a08 <HAL_RCC_OscConfig+0x294>)
 80037d0:	6833      	ldr	r3, [r6, #0]
 80037d2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80037d6:	d114      	bne.n	8003802 <HAL_RCC_OscConfig+0x8e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037d8:	f7fd ff4a 	bl	8001670 <HAL_GetTick>
 80037dc:	1b40      	subs	r0, r0, r5
 80037de:	2864      	cmp	r0, #100	; 0x64
 80037e0:	d9f6      	bls.n	80037d0 <HAL_RCC_OscConfig+0x5c>
          {
            return HAL_TIMEOUT;
 80037e2:	2003      	movs	r0, #3
 80037e4:	e1b1      	b.n	8003b4a <HAL_RCC_OscConfig+0x3d6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037e6:	4b88      	ldr	r3, [pc, #544]	; (8003a08 <HAL_RCC_OscConfig+0x294>)
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80037ee:	d0d8      	beq.n	80037a2 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037f0:	4b85      	ldr	r3, [pc, #532]	; (8003a08 <HAL_RCC_OscConfig+0x294>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80037f8:	d003      	beq.n	8003802 <HAL_RCC_OscConfig+0x8e>
 80037fa:	6863      	ldr	r3, [r4, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f000 819f 	beq.w	8003b40 <HAL_RCC_OscConfig+0x3cc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003802:	6823      	ldr	r3, [r4, #0]
 8003804:	f013 0f02 	tst.w	r3, #2
 8003808:	d054      	beq.n	80038b4 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800380a:	4b7f      	ldr	r3, [pc, #508]	; (8003a08 <HAL_RCC_OscConfig+0x294>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f013 0f0c 	tst.w	r3, #12
 8003812:	d03e      	beq.n	8003892 <HAL_RCC_OscConfig+0x11e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003814:	4b7c      	ldr	r3, [pc, #496]	; (8003a08 <HAL_RCC_OscConfig+0x294>)
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800381c:	2b08      	cmp	r3, #8
 800381e:	d033      	beq.n	8003888 <HAL_RCC_OscConfig+0x114>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003820:	68e3      	ldr	r3, [r4, #12]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d068      	beq.n	80038f8 <HAL_RCC_OscConfig+0x184>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003826:	4b79      	ldr	r3, [pc, #484]	; (8003a0c <HAL_RCC_OscConfig+0x298>)
 8003828:	2201      	movs	r2, #1
 800382a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800382c:	f7fd ff20 	bl	8001670 <HAL_GetTick>
 8003830:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003832:	4e75      	ldr	r6, [pc, #468]	; (8003a08 <HAL_RCC_OscConfig+0x294>)
 8003834:	6833      	ldr	r3, [r6, #0]
 8003836:	f013 0f02 	tst.w	r3, #2
 800383a:	d154      	bne.n	80038e6 <HAL_RCC_OscConfig+0x172>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800383c:	f7fd ff18 	bl	8001670 <HAL_GetTick>
 8003840:	1b40      	subs	r0, r0, r5
 8003842:	2802      	cmp	r0, #2
 8003844:	d9f6      	bls.n	8003834 <HAL_RCC_OscConfig+0xc0>
          {
            return HAL_TIMEOUT;
 8003846:	2003      	movs	r0, #3
 8003848:	e17f      	b.n	8003b4a <HAL_RCC_OscConfig+0x3d6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800384a:	4a6f      	ldr	r2, [pc, #444]	; (8003a08 <HAL_RCC_OscConfig+0x294>)
 800384c:	6813      	ldr	r3, [r2, #0]
 800384e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003852:	6013      	str	r3, [r2, #0]
 8003854:	e7b5      	b.n	80037c2 <HAL_RCC_OscConfig+0x4e>
 8003856:	4b6c      	ldr	r3, [pc, #432]	; (8003a08 <HAL_RCC_OscConfig+0x294>)
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800385e:	601a      	str	r2, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	e7ab      	b.n	80037c2 <HAL_RCC_OscConfig+0x4e>
        tickstart = HAL_GetTick();
 800386a:	f7fd ff01 	bl	8001670 <HAL_GetTick>
 800386e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003870:	4e65      	ldr	r6, [pc, #404]	; (8003a08 <HAL_RCC_OscConfig+0x294>)
 8003872:	6833      	ldr	r3, [r6, #0]
 8003874:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003878:	d0c3      	beq.n	8003802 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800387a:	f7fd fef9 	bl	8001670 <HAL_GetTick>
 800387e:	1b40      	subs	r0, r0, r5
 8003880:	2864      	cmp	r0, #100	; 0x64
 8003882:	d9f6      	bls.n	8003872 <HAL_RCC_OscConfig+0xfe>
            return HAL_TIMEOUT;
 8003884:	2003      	movs	r0, #3
 8003886:	e160      	b.n	8003b4a <HAL_RCC_OscConfig+0x3d6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003888:	4b5f      	ldr	r3, [pc, #380]	; (8003a08 <HAL_RCC_OscConfig+0x294>)
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003890:	d1c6      	bne.n	8003820 <HAL_RCC_OscConfig+0xac>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003892:	4b5d      	ldr	r3, [pc, #372]	; (8003a08 <HAL_RCC_OscConfig+0x294>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f013 0f02 	tst.w	r3, #2
 800389a:	d003      	beq.n	80038a4 <HAL_RCC_OscConfig+0x130>
 800389c:	68e3      	ldr	r3, [r4, #12]
 800389e:	2b01      	cmp	r3, #1
 80038a0:	f040 8150 	bne.w	8003b44 <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038a4:	4a58      	ldr	r2, [pc, #352]	; (8003a08 <HAL_RCC_OscConfig+0x294>)
 80038a6:	6813      	ldr	r3, [r2, #0]
 80038a8:	6921      	ldr	r1, [r4, #16]
 80038aa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80038ae:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80038b2:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038b4:	6823      	ldr	r3, [r4, #0]
 80038b6:	f013 0f08 	tst.w	r3, #8
 80038ba:	d042      	beq.n	8003942 <HAL_RCC_OscConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038bc:	6963      	ldr	r3, [r4, #20]
 80038be:	b36b      	cbz	r3, 800391c <HAL_RCC_OscConfig+0x1a8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038c0:	4b52      	ldr	r3, [pc, #328]	; (8003a0c <HAL_RCC_OscConfig+0x298>)
 80038c2:	2201      	movs	r2, #1
 80038c4:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038c8:	f7fd fed2 	bl	8001670 <HAL_GetTick>
 80038cc:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038ce:	4e4e      	ldr	r6, [pc, #312]	; (8003a08 <HAL_RCC_OscConfig+0x294>)
 80038d0:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80038d2:	f013 0f02 	tst.w	r3, #2
 80038d6:	d134      	bne.n	8003942 <HAL_RCC_OscConfig+0x1ce>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038d8:	f7fd feca 	bl	8001670 <HAL_GetTick>
 80038dc:	1b40      	subs	r0, r0, r5
 80038de:	2802      	cmp	r0, #2
 80038e0:	d9f6      	bls.n	80038d0 <HAL_RCC_OscConfig+0x15c>
        {
          return HAL_TIMEOUT;
 80038e2:	2003      	movs	r0, #3
 80038e4:	e131      	b.n	8003b4a <HAL_RCC_OscConfig+0x3d6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038e6:	4a48      	ldr	r2, [pc, #288]	; (8003a08 <HAL_RCC_OscConfig+0x294>)
 80038e8:	6813      	ldr	r3, [r2, #0]
 80038ea:	6921      	ldr	r1, [r4, #16]
 80038ec:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80038f0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80038f4:	6013      	str	r3, [r2, #0]
 80038f6:	e7dd      	b.n	80038b4 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 80038f8:	4b44      	ldr	r3, [pc, #272]	; (8003a0c <HAL_RCC_OscConfig+0x298>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80038fe:	f7fd feb7 	bl	8001670 <HAL_GetTick>
 8003902:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003904:	4e40      	ldr	r6, [pc, #256]	; (8003a08 <HAL_RCC_OscConfig+0x294>)
 8003906:	6833      	ldr	r3, [r6, #0]
 8003908:	f013 0f02 	tst.w	r3, #2
 800390c:	d0d2      	beq.n	80038b4 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800390e:	f7fd feaf 	bl	8001670 <HAL_GetTick>
 8003912:	1b40      	subs	r0, r0, r5
 8003914:	2802      	cmp	r0, #2
 8003916:	d9f6      	bls.n	8003906 <HAL_RCC_OscConfig+0x192>
            return HAL_TIMEOUT;
 8003918:	2003      	movs	r0, #3
 800391a:	e116      	b.n	8003b4a <HAL_RCC_OscConfig+0x3d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800391c:	4b3b      	ldr	r3, [pc, #236]	; (8003a0c <HAL_RCC_OscConfig+0x298>)
 800391e:	2200      	movs	r2, #0
 8003920:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003924:	f7fd fea4 	bl	8001670 <HAL_GetTick>
 8003928:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800392a:	4e37      	ldr	r6, [pc, #220]	; (8003a08 <HAL_RCC_OscConfig+0x294>)
 800392c:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800392e:	f013 0f02 	tst.w	r3, #2
 8003932:	d006      	beq.n	8003942 <HAL_RCC_OscConfig+0x1ce>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003934:	f7fd fe9c 	bl	8001670 <HAL_GetTick>
 8003938:	1b40      	subs	r0, r0, r5
 800393a:	2802      	cmp	r0, #2
 800393c:	d9f6      	bls.n	800392c <HAL_RCC_OscConfig+0x1b8>
        {
          return HAL_TIMEOUT;
 800393e:	2003      	movs	r0, #3
 8003940:	e103      	b.n	8003b4a <HAL_RCC_OscConfig+0x3d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003942:	6823      	ldr	r3, [r4, #0]
 8003944:	f013 0f04 	tst.w	r3, #4
 8003948:	d076      	beq.n	8003a38 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800394a:	4b2f      	ldr	r3, [pc, #188]	; (8003a08 <HAL_RCC_OscConfig+0x294>)
 800394c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003952:	d133      	bne.n	80039bc <HAL_RCC_OscConfig+0x248>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003954:	2300      	movs	r3, #0
 8003956:	9301      	str	r3, [sp, #4]
 8003958:	4b2b      	ldr	r3, [pc, #172]	; (8003a08 <HAL_RCC_OscConfig+0x294>)
 800395a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800395c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003960:	641a      	str	r2, [r3, #64]	; 0x40
 8003962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003968:	9301      	str	r3, [sp, #4]
 800396a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800396c:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800396e:	4b28      	ldr	r3, [pc, #160]	; (8003a10 <HAL_RCC_OscConfig+0x29c>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003976:	d023      	beq.n	80039c0 <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003978:	68a3      	ldr	r3, [r4, #8]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d034      	beq.n	80039e8 <HAL_RCC_OscConfig+0x274>
 800397e:	2b05      	cmp	r3, #5
 8003980:	d038      	beq.n	80039f4 <HAL_RCC_OscConfig+0x280>
 8003982:	4b21      	ldr	r3, [pc, #132]	; (8003a08 <HAL_RCC_OscConfig+0x294>)
 8003984:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003986:	f022 0201 	bic.w	r2, r2, #1
 800398a:	671a      	str	r2, [r3, #112]	; 0x70
 800398c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800398e:	f022 0204 	bic.w	r2, r2, #4
 8003992:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003994:	68a3      	ldr	r3, [r4, #8]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d03c      	beq.n	8003a14 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800399a:	f7fd fe69 	bl	8001670 <HAL_GetTick>
 800399e:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039a0:	4f19      	ldr	r7, [pc, #100]	; (8003a08 <HAL_RCC_OscConfig+0x294>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039a2:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039a8:	f013 0f02 	tst.w	r3, #2
 80039ac:	d143      	bne.n	8003a36 <HAL_RCC_OscConfig+0x2c2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039ae:	f7fd fe5f 	bl	8001670 <HAL_GetTick>
 80039b2:	1b80      	subs	r0, r0, r6
 80039b4:	4540      	cmp	r0, r8
 80039b6:	d9f6      	bls.n	80039a6 <HAL_RCC_OscConfig+0x232>
        {
          return HAL_TIMEOUT;
 80039b8:	2003      	movs	r0, #3
 80039ba:	e0c6      	b.n	8003b4a <HAL_RCC_OscConfig+0x3d6>
    FlagStatus       pwrclkchanged = RESET;
 80039bc:	2500      	movs	r5, #0
 80039be:	e7d6      	b.n	800396e <HAL_RCC_OscConfig+0x1fa>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039c0:	4a13      	ldr	r2, [pc, #76]	; (8003a10 <HAL_RCC_OscConfig+0x29c>)
 80039c2:	6813      	ldr	r3, [r2, #0]
 80039c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039c8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80039ca:	f7fd fe51 	bl	8001670 <HAL_GetTick>
 80039ce:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039d0:	4f0f      	ldr	r7, [pc, #60]	; (8003a10 <HAL_RCC_OscConfig+0x29c>)
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80039d8:	d1ce      	bne.n	8003978 <HAL_RCC_OscConfig+0x204>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039da:	f7fd fe49 	bl	8001670 <HAL_GetTick>
 80039de:	1b80      	subs	r0, r0, r6
 80039e0:	2802      	cmp	r0, #2
 80039e2:	d9f6      	bls.n	80039d2 <HAL_RCC_OscConfig+0x25e>
          return HAL_TIMEOUT;
 80039e4:	2003      	movs	r0, #3
 80039e6:	e0b0      	b.n	8003b4a <HAL_RCC_OscConfig+0x3d6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039e8:	4a07      	ldr	r2, [pc, #28]	; (8003a08 <HAL_RCC_OscConfig+0x294>)
 80039ea:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80039ec:	f043 0301 	orr.w	r3, r3, #1
 80039f0:	6713      	str	r3, [r2, #112]	; 0x70
 80039f2:	e7cf      	b.n	8003994 <HAL_RCC_OscConfig+0x220>
 80039f4:	4b04      	ldr	r3, [pc, #16]	; (8003a08 <HAL_RCC_OscConfig+0x294>)
 80039f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80039f8:	f042 0204 	orr.w	r2, r2, #4
 80039fc:	671a      	str	r2, [r3, #112]	; 0x70
 80039fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a00:	f042 0201 	orr.w	r2, r2, #1
 8003a04:	671a      	str	r2, [r3, #112]	; 0x70
 8003a06:	e7c5      	b.n	8003994 <HAL_RCC_OscConfig+0x220>
 8003a08:	40023800 	.word	0x40023800
 8003a0c:	42470000 	.word	0x42470000
 8003a10:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a14:	f7fd fe2c 	bl	8001670 <HAL_GetTick>
 8003a18:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a1a:	4f52      	ldr	r7, [pc, #328]	; (8003b64 <HAL_RCC_OscConfig+0x3f0>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a1c:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a22:	f013 0f02 	tst.w	r3, #2
 8003a26:	d006      	beq.n	8003a36 <HAL_RCC_OscConfig+0x2c2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a28:	f7fd fe22 	bl	8001670 <HAL_GetTick>
 8003a2c:	1b80      	subs	r0, r0, r6
 8003a2e:	4540      	cmp	r0, r8
 8003a30:	d9f6      	bls.n	8003a20 <HAL_RCC_OscConfig+0x2ac>
        {
          return HAL_TIMEOUT;
 8003a32:	2003      	movs	r0, #3
 8003a34:	e089      	b.n	8003b4a <HAL_RCC_OscConfig+0x3d6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a36:	b9ed      	cbnz	r5, 8003a74 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a38:	69a3      	ldr	r3, [r4, #24]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	f000 8084 	beq.w	8003b48 <HAL_RCC_OscConfig+0x3d4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a40:	4a48      	ldr	r2, [pc, #288]	; (8003b64 <HAL_RCC_OscConfig+0x3f0>)
 8003a42:	6892      	ldr	r2, [r2, #8]
 8003a44:	f002 020c 	and.w	r2, r2, #12
 8003a48:	2a08      	cmp	r2, #8
 8003a4a:	d051      	beq.n	8003af0 <HAL_RCC_OscConfig+0x37c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d017      	beq.n	8003a80 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a50:	4b45      	ldr	r3, [pc, #276]	; (8003b68 <HAL_RCC_OscConfig+0x3f4>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a56:	f7fd fe0b 	bl	8001670 <HAL_GetTick>
 8003a5a:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a5c:	4d41      	ldr	r5, [pc, #260]	; (8003b64 <HAL_RCC_OscConfig+0x3f0>)
 8003a5e:	682b      	ldr	r3, [r5, #0]
 8003a60:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003a64:	d042      	beq.n	8003aec <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a66:	f7fd fe03 	bl	8001670 <HAL_GetTick>
 8003a6a:	1b00      	subs	r0, r0, r4
 8003a6c:	2802      	cmp	r0, #2
 8003a6e:	d9f6      	bls.n	8003a5e <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8003a70:	2003      	movs	r0, #3
 8003a72:	e06a      	b.n	8003b4a <HAL_RCC_OscConfig+0x3d6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a74:	4a3b      	ldr	r2, [pc, #236]	; (8003b64 <HAL_RCC_OscConfig+0x3f0>)
 8003a76:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003a78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a7e:	e7db      	b.n	8003a38 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8003a80:	4b39      	ldr	r3, [pc, #228]	; (8003b68 <HAL_RCC_OscConfig+0x3f4>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003a86:	f7fd fdf3 	bl	8001670 <HAL_GetTick>
 8003a8a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a8c:	4e35      	ldr	r6, [pc, #212]	; (8003b64 <HAL_RCC_OscConfig+0x3f0>)
 8003a8e:	6833      	ldr	r3, [r6, #0]
 8003a90:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003a94:	d006      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a96:	f7fd fdeb 	bl	8001670 <HAL_GetTick>
 8003a9a:	1b40      	subs	r0, r0, r5
 8003a9c:	2802      	cmp	r0, #2
 8003a9e:	d9f6      	bls.n	8003a8e <HAL_RCC_OscConfig+0x31a>
            return HAL_TIMEOUT;
 8003aa0:	2003      	movs	r0, #3
 8003aa2:	e052      	b.n	8003b4a <HAL_RCC_OscConfig+0x3d6>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003aa4:	69e3      	ldr	r3, [r4, #28]
 8003aa6:	6a22      	ldr	r2, [r4, #32]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003aac:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003ab0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003ab2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003ab6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003ab8:	0852      	lsrs	r2, r2, #1
 8003aba:	3a01      	subs	r2, #1
 8003abc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003ac0:	4a28      	ldr	r2, [pc, #160]	; (8003b64 <HAL_RCC_OscConfig+0x3f0>)
 8003ac2:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8003ac4:	4b28      	ldr	r3, [pc, #160]	; (8003b68 <HAL_RCC_OscConfig+0x3f4>)
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003aca:	f7fd fdd1 	bl	8001670 <HAL_GetTick>
 8003ace:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ad0:	4d24      	ldr	r5, [pc, #144]	; (8003b64 <HAL_RCC_OscConfig+0x3f0>)
 8003ad2:	682b      	ldr	r3, [r5, #0]
 8003ad4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003ad8:	d106      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ada:	f7fd fdc9 	bl	8001670 <HAL_GetTick>
 8003ade:	1b00      	subs	r0, r0, r4
 8003ae0:	2802      	cmp	r0, #2
 8003ae2:	d9f6      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x35e>
            return HAL_TIMEOUT;
 8003ae4:	2003      	movs	r0, #3
 8003ae6:	e030      	b.n	8003b4a <HAL_RCC_OscConfig+0x3d6>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8003ae8:	2000      	movs	r0, #0
 8003aea:	e02e      	b.n	8003b4a <HAL_RCC_OscConfig+0x3d6>
 8003aec:	2000      	movs	r0, #0
 8003aee:	e02c      	b.n	8003b4a <HAL_RCC_OscConfig+0x3d6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d02d      	beq.n	8003b50 <HAL_RCC_OscConfig+0x3dc>
        pll_config = RCC->PLLCFGR;
 8003af4:	4b1b      	ldr	r3, [pc, #108]	; (8003b64 <HAL_RCC_OscConfig+0x3f0>)
 8003af6:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003af8:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003afc:	69e2      	ldr	r2, [r4, #28]
 8003afe:	4291      	cmp	r1, r2
 8003b00:	d128      	bne.n	8003b54 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b06:	6a21      	ldr	r1, [r4, #32]
 8003b08:	428a      	cmp	r2, r1
 8003b0a:	d125      	bne.n	8003b58 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b0c:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b0e:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8003b12:	401a      	ands	r2, r3
 8003b14:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8003b18:	d120      	bne.n	8003b5c <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b1a:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8003b1e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003b20:	0852      	lsrs	r2, r2, #1
 8003b22:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b24:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8003b28:	d11a      	bne.n	8003b60 <HAL_RCC_OscConfig+0x3ec>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b2a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003b2c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b30:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
        return HAL_ERROR;
 8003b34:	bf14      	ite	ne
 8003b36:	2001      	movne	r0, #1
 8003b38:	2000      	moveq	r0, #0
 8003b3a:	e006      	b.n	8003b4a <HAL_RCC_OscConfig+0x3d6>
    return HAL_ERROR;
 8003b3c:	2001      	movs	r0, #1
}
 8003b3e:	4770      	bx	lr
        return HAL_ERROR;
 8003b40:	2001      	movs	r0, #1
 8003b42:	e002      	b.n	8003b4a <HAL_RCC_OscConfig+0x3d6>
        return HAL_ERROR;
 8003b44:	2001      	movs	r0, #1
 8003b46:	e000      	b.n	8003b4a <HAL_RCC_OscConfig+0x3d6>
  return HAL_OK;
 8003b48:	2000      	movs	r0, #0
}
 8003b4a:	b002      	add	sp, #8
 8003b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 8003b50:	2001      	movs	r0, #1
 8003b52:	e7fa      	b.n	8003b4a <HAL_RCC_OscConfig+0x3d6>
          return HAL_ERROR;
 8003b54:	2001      	movs	r0, #1
 8003b56:	e7f8      	b.n	8003b4a <HAL_RCC_OscConfig+0x3d6>
 8003b58:	2001      	movs	r0, #1
 8003b5a:	e7f6      	b.n	8003b4a <HAL_RCC_OscConfig+0x3d6>
 8003b5c:	2001      	movs	r0, #1
 8003b5e:	e7f4      	b.n	8003b4a <HAL_RCC_OscConfig+0x3d6>
 8003b60:	2001      	movs	r0, #1
 8003b62:	e7f2      	b.n	8003b4a <HAL_RCC_OscConfig+0x3d6>
 8003b64:	40023800 	.word	0x40023800
 8003b68:	42470000 	.word	0x42470000

08003b6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b6c:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b6e:	4b31      	ldr	r3, [pc, #196]	; (8003c34 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f003 030c 	and.w	r3, r3, #12
 8003b76:	2b04      	cmp	r3, #4
 8003b78:	d057      	beq.n	8003c2a <HAL_RCC_GetSysClockFreq+0xbe>
 8003b7a:	2b08      	cmp	r3, #8
 8003b7c:	d157      	bne.n	8003c2e <HAL_RCC_GetSysClockFreq+0xc2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b7e:	4b2d      	ldr	r3, [pc, #180]	; (8003c34 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003b80:	685a      	ldr	r2, [r3, #4]
 8003b82:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003b8c:	d02a      	beq.n	8003be4 <HAL_RCC_GetSysClockFreq+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b8e:	4b29      	ldr	r3, [pc, #164]	; (8003c34 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003b90:	6859      	ldr	r1, [r3, #4]
 8003b92:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 8003b96:	ea4f 114c 	mov.w	r1, ip, lsl #5
 8003b9a:	ebb1 000c 	subs.w	r0, r1, ip
 8003b9e:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8003ba2:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8003ba6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003baa:	0181      	lsls	r1, r0, #6
 8003bac:	1a09      	subs	r1, r1, r0
 8003bae:	eb63 030e 	sbc.w	r3, r3, lr
 8003bb2:	00db      	lsls	r3, r3, #3
 8003bb4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bb8:	00c9      	lsls	r1, r1, #3
 8003bba:	eb11 0c0c 	adds.w	ip, r1, ip
 8003bbe:	f143 0300 	adc.w	r3, r3, #0
 8003bc2:	0259      	lsls	r1, r3, #9
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	ea4f 204c 	mov.w	r0, ip, lsl #9
 8003bca:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 8003bce:	f7fc fafb 	bl	80001c8 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003bd2:	4b18      	ldr	r3, [pc, #96]	; (8003c34 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003bda:	3301      	adds	r3, #1
 8003bdc:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8003bde:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8003be2:	e025      	b.n	8003c30 <HAL_RCC_GetSysClockFreq+0xc4>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003be4:	4b13      	ldr	r3, [pc, #76]	; (8003c34 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003be6:	6859      	ldr	r1, [r3, #4]
 8003be8:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 8003bec:	ea4f 114c 	mov.w	r1, ip, lsl #5
 8003bf0:	ebb1 000c 	subs.w	r0, r1, ip
 8003bf4:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8003bf8:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8003bfc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003c00:	0181      	lsls	r1, r0, #6
 8003c02:	1a09      	subs	r1, r1, r0
 8003c04:	eb63 030e 	sbc.w	r3, r3, lr
 8003c08:	00db      	lsls	r3, r3, #3
 8003c0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c0e:	00c9      	lsls	r1, r1, #3
 8003c10:	eb11 0c0c 	adds.w	ip, r1, ip
 8003c14:	f143 0300 	adc.w	r3, r3, #0
 8003c18:	0299      	lsls	r1, r3, #10
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8003c20:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8003c24:	f7fc fad0 	bl	80001c8 <__aeabi_uldivmod>
 8003c28:	e7d3      	b.n	8003bd2 <HAL_RCC_GetSysClockFreq+0x66>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c2a:	4803      	ldr	r0, [pc, #12]	; (8003c38 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003c2c:	e000      	b.n	8003c30 <HAL_RCC_GetSysClockFreq+0xc4>
      sysclockfreq = HSI_VALUE;
 8003c2e:	4803      	ldr	r0, [pc, #12]	; (8003c3c <HAL_RCC_GetSysClockFreq+0xd0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003c30:	bd08      	pop	{r3, pc}
 8003c32:	bf00      	nop
 8003c34:	40023800 	.word	0x40023800
 8003c38:	007a1200 	.word	0x007a1200
 8003c3c:	00f42400 	.word	0x00f42400

08003c40 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003c40:	2800      	cmp	r0, #0
 8003c42:	f000 809d 	beq.w	8003d80 <HAL_RCC_ClockConfig+0x140>
{
 8003c46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c4a:	460d      	mov	r5, r1
 8003c4c:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c4e:	4b50      	ldr	r3, [pc, #320]	; (8003d90 <HAL_RCC_ClockConfig+0x150>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0307 	and.w	r3, r3, #7
 8003c56:	428b      	cmp	r3, r1
 8003c58:	d208      	bcs.n	8003c6c <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c5a:	b2cb      	uxtb	r3, r1
 8003c5c:	4a4c      	ldr	r2, [pc, #304]	; (8003d90 <HAL_RCC_ClockConfig+0x150>)
 8003c5e:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c60:	6813      	ldr	r3, [r2, #0]
 8003c62:	f003 0307 	and.w	r3, r3, #7
 8003c66:	428b      	cmp	r3, r1
 8003c68:	f040 808c 	bne.w	8003d84 <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c6c:	6823      	ldr	r3, [r4, #0]
 8003c6e:	f013 0f02 	tst.w	r3, #2
 8003c72:	d017      	beq.n	8003ca4 <HAL_RCC_ClockConfig+0x64>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c74:	f013 0f04 	tst.w	r3, #4
 8003c78:	d004      	beq.n	8003c84 <HAL_RCC_ClockConfig+0x44>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c7a:	4a46      	ldr	r2, [pc, #280]	; (8003d94 <HAL_RCC_ClockConfig+0x154>)
 8003c7c:	6893      	ldr	r3, [r2, #8]
 8003c7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c82:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c84:	6823      	ldr	r3, [r4, #0]
 8003c86:	f013 0f08 	tst.w	r3, #8
 8003c8a:	d004      	beq.n	8003c96 <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c8c:	4a41      	ldr	r2, [pc, #260]	; (8003d94 <HAL_RCC_ClockConfig+0x154>)
 8003c8e:	6893      	ldr	r3, [r2, #8]
 8003c90:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c94:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c96:	4a3f      	ldr	r2, [pc, #252]	; (8003d94 <HAL_RCC_ClockConfig+0x154>)
 8003c98:	6893      	ldr	r3, [r2, #8]
 8003c9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c9e:	68a1      	ldr	r1, [r4, #8]
 8003ca0:	430b      	orrs	r3, r1
 8003ca2:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ca4:	6823      	ldr	r3, [r4, #0]
 8003ca6:	f013 0f01 	tst.w	r3, #1
 8003caa:	d032      	beq.n	8003d12 <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cac:	6862      	ldr	r2, [r4, #4]
 8003cae:	2a01      	cmp	r2, #1
 8003cb0:	d021      	beq.n	8003cf6 <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cb2:	1e93      	subs	r3, r2, #2
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d925      	bls.n	8003d04 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cb8:	4b36      	ldr	r3, [pc, #216]	; (8003d94 <HAL_RCC_ClockConfig+0x154>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f013 0f02 	tst.w	r3, #2
 8003cc0:	d062      	beq.n	8003d88 <HAL_RCC_ClockConfig+0x148>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cc2:	4934      	ldr	r1, [pc, #208]	; (8003d94 <HAL_RCC_ClockConfig+0x154>)
 8003cc4:	688b      	ldr	r3, [r1, #8]
 8003cc6:	f023 0303 	bic.w	r3, r3, #3
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8003cce:	f7fd fccf 	bl	8001670 <HAL_GetTick>
 8003cd2:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cd4:	4f2f      	ldr	r7, [pc, #188]	; (8003d94 <HAL_RCC_ClockConfig+0x154>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cd6:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	f003 030c 	and.w	r3, r3, #12
 8003ce0:	6862      	ldr	r2, [r4, #4]
 8003ce2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003ce6:	d014      	beq.n	8003d12 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ce8:	f7fd fcc2 	bl	8001670 <HAL_GetTick>
 8003cec:	1b80      	subs	r0, r0, r6
 8003cee:	4540      	cmp	r0, r8
 8003cf0:	d9f3      	bls.n	8003cda <HAL_RCC_ClockConfig+0x9a>
        return HAL_TIMEOUT;
 8003cf2:	2003      	movs	r0, #3
 8003cf4:	e042      	b.n	8003d7c <HAL_RCC_ClockConfig+0x13c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cf6:	4b27      	ldr	r3, [pc, #156]	; (8003d94 <HAL_RCC_ClockConfig+0x154>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003cfe:	d1e0      	bne.n	8003cc2 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8003d00:	2001      	movs	r0, #1
 8003d02:	e03b      	b.n	8003d7c <HAL_RCC_ClockConfig+0x13c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d04:	4b23      	ldr	r3, [pc, #140]	; (8003d94 <HAL_RCC_ClockConfig+0x154>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003d0c:	d1d9      	bne.n	8003cc2 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8003d0e:	2001      	movs	r0, #1
 8003d10:	e034      	b.n	8003d7c <HAL_RCC_ClockConfig+0x13c>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d12:	4b1f      	ldr	r3, [pc, #124]	; (8003d90 <HAL_RCC_ClockConfig+0x150>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0307 	and.w	r3, r3, #7
 8003d1a:	42ab      	cmp	r3, r5
 8003d1c:	d907      	bls.n	8003d2e <HAL_RCC_ClockConfig+0xee>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d1e:	b2ea      	uxtb	r2, r5
 8003d20:	4b1b      	ldr	r3, [pc, #108]	; (8003d90 <HAL_RCC_ClockConfig+0x150>)
 8003d22:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0307 	and.w	r3, r3, #7
 8003d2a:	42ab      	cmp	r3, r5
 8003d2c:	d12e      	bne.n	8003d8c <HAL_RCC_ClockConfig+0x14c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d2e:	6823      	ldr	r3, [r4, #0]
 8003d30:	f013 0f04 	tst.w	r3, #4
 8003d34:	d006      	beq.n	8003d44 <HAL_RCC_ClockConfig+0x104>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d36:	4a17      	ldr	r2, [pc, #92]	; (8003d94 <HAL_RCC_ClockConfig+0x154>)
 8003d38:	6893      	ldr	r3, [r2, #8]
 8003d3a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8003d3e:	68e1      	ldr	r1, [r4, #12]
 8003d40:	430b      	orrs	r3, r1
 8003d42:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d44:	6823      	ldr	r3, [r4, #0]
 8003d46:	f013 0f08 	tst.w	r3, #8
 8003d4a:	d007      	beq.n	8003d5c <HAL_RCC_ClockConfig+0x11c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d4c:	4a11      	ldr	r2, [pc, #68]	; (8003d94 <HAL_RCC_ClockConfig+0x154>)
 8003d4e:	6893      	ldr	r3, [r2, #8]
 8003d50:	6921      	ldr	r1, [r4, #16]
 8003d52:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003d56:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003d5a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d5c:	f7ff ff06 	bl	8003b6c <HAL_RCC_GetSysClockFreq>
 8003d60:	4b0c      	ldr	r3, [pc, #48]	; (8003d94 <HAL_RCC_ClockConfig+0x154>)
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003d68:	4a0b      	ldr	r2, [pc, #44]	; (8003d98 <HAL_RCC_ClockConfig+0x158>)
 8003d6a:	5cd3      	ldrb	r3, [r2, r3]
 8003d6c:	40d8      	lsrs	r0, r3
 8003d6e:	4b0b      	ldr	r3, [pc, #44]	; (8003d9c <HAL_RCC_ClockConfig+0x15c>)
 8003d70:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8003d72:	4b0b      	ldr	r3, [pc, #44]	; (8003da0 <HAL_RCC_ClockConfig+0x160>)
 8003d74:	6818      	ldr	r0, [r3, #0]
 8003d76:	f7fd fc2f 	bl	80015d8 <HAL_InitTick>
  return HAL_OK;
 8003d7a:	2000      	movs	r0, #0
}
 8003d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8003d80:	2001      	movs	r0, #1
}
 8003d82:	4770      	bx	lr
      return HAL_ERROR;
 8003d84:	2001      	movs	r0, #1
 8003d86:	e7f9      	b.n	8003d7c <HAL_RCC_ClockConfig+0x13c>
        return HAL_ERROR;
 8003d88:	2001      	movs	r0, #1
 8003d8a:	e7f7      	b.n	8003d7c <HAL_RCC_ClockConfig+0x13c>
      return HAL_ERROR;
 8003d8c:	2001      	movs	r0, #1
 8003d8e:	e7f5      	b.n	8003d7c <HAL_RCC_ClockConfig+0x13c>
 8003d90:	40023c00 	.word	0x40023c00
 8003d94:	40023800 	.word	0x40023800
 8003d98:	08009854 	.word	0x08009854
 8003d9c:	20000008 	.word	0x20000008
 8003da0:	20000010 	.word	0x20000010

08003da4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003da4:	4b04      	ldr	r3, [pc, #16]	; (8003db8 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003dac:	4a03      	ldr	r2, [pc, #12]	; (8003dbc <HAL_RCC_GetPCLK1Freq+0x18>)
 8003dae:	5cd3      	ldrb	r3, [r2, r3]
 8003db0:	4a03      	ldr	r2, [pc, #12]	; (8003dc0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003db2:	6810      	ldr	r0, [r2, #0]
}
 8003db4:	40d8      	lsrs	r0, r3
 8003db6:	4770      	bx	lr
 8003db8:	40023800 	.word	0x40023800
 8003dbc:	08009864 	.word	0x08009864
 8003dc0:	20000008 	.word	0x20000008

08003dc4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003dc4:	4b04      	ldr	r3, [pc, #16]	; (8003dd8 <HAL_RCC_GetPCLK2Freq+0x14>)
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003dcc:	4a03      	ldr	r2, [pc, #12]	; (8003ddc <HAL_RCC_GetPCLK2Freq+0x18>)
 8003dce:	5cd3      	ldrb	r3, [r2, r3]
 8003dd0:	4a03      	ldr	r2, [pc, #12]	; (8003de0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003dd2:	6810      	ldr	r0, [r2, #0]
}
 8003dd4:	40d8      	lsrs	r0, r3
 8003dd6:	4770      	bx	lr
 8003dd8:	40023800 	.word	0x40023800
 8003ddc:	08009864 	.word	0x08009864
 8003de0:	20000008 	.word	0x20000008

08003de4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003de6:	b083      	sub	sp, #12
 8003de8:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003dea:	6803      	ldr	r3, [r0, #0]
 8003dec:	f013 0f05 	tst.w	r3, #5
 8003df0:	d106      	bne.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x1c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003df2:	6823      	ldr	r3, [r4, #0]
 8003df4:	f013 0f02 	tst.w	r3, #2
 8003df8:	d12e      	bne.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x74>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003dfa:	2000      	movs	r0, #0
}
 8003dfc:	b003      	add	sp, #12
 8003dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8003e00:	4b4a      	ldr	r3, [pc, #296]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8003e02:	2200      	movs	r2, #0
 8003e04:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 8003e06:	f7fd fc33 	bl	8001670 <HAL_GetTick>
 8003e0a:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e0c:	4e48      	ldr	r6, [pc, #288]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003e0e:	6833      	ldr	r3, [r6, #0]
 8003e10:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003e14:	d006      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x40>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003e16:	f7fd fc2b 	bl	8001670 <HAL_GetTick>
 8003e1a:	1b43      	subs	r3, r0, r5
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d9f6      	bls.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x2a>
        return HAL_TIMEOUT;
 8003e20:	2003      	movs	r0, #3
 8003e22:	e7eb      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003e24:	6862      	ldr	r2, [r4, #4]
 8003e26:	68a3      	ldr	r3, [r4, #8]
 8003e28:	071b      	lsls	r3, r3, #28
 8003e2a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003e2e:	4a40      	ldr	r2, [pc, #256]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003e30:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8003e34:	4b3d      	ldr	r3, [pc, #244]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8003e36:	2201      	movs	r2, #1
 8003e38:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 8003e3a:	f7fd fc19 	bl	8001670 <HAL_GetTick>
 8003e3e:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e40:	4e3b      	ldr	r6, [pc, #236]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003e42:	6833      	ldr	r3, [r6, #0]
 8003e44:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003e48:	d1d3      	bne.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003e4a:	f7fd fc11 	bl	8001670 <HAL_GetTick>
 8003e4e:	1b43      	subs	r3, r0, r5
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d9f6      	bls.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x5e>
        return HAL_TIMEOUT;
 8003e54:	2003      	movs	r0, #3
 8003e56:	e7d1      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e58:	2300      	movs	r3, #0
 8003e5a:	9301      	str	r3, [sp, #4]
 8003e5c:	4b34      	ldr	r3, [pc, #208]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003e5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e60:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003e64:	641a      	str	r2, [r3, #64]	; 0x40
 8003e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e6c:	9301      	str	r3, [sp, #4]
 8003e6e:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8003e70:	4a30      	ldr	r2, [pc, #192]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003e72:	6813      	ldr	r3, [r2, #0]
 8003e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e78:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003e7a:	f7fd fbf9 	bl	8001670 <HAL_GetTick>
 8003e7e:	4605      	mov	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003e80:	4e2c      	ldr	r6, [pc, #176]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003e82:	6833      	ldr	r3, [r6, #0]
 8003e84:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003e88:	d106      	bne.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003e8a:	f7fd fbf1 	bl	8001670 <HAL_GetTick>
 8003e8e:	1b43      	subs	r3, r0, r5
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d9f6      	bls.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x9e>
        return HAL_TIMEOUT;
 8003e94:	2003      	movs	r0, #3
 8003e96:	e7b1      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x18>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e98:	4b25      	ldr	r3, [pc, #148]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e9c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003ea0:	d014      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003ea2:	68e2      	ldr	r2, [r4, #12]
 8003ea4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d00f      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003eac:	4b20      	ldr	r3, [pc, #128]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003eae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003eb0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8003eb4:	491d      	ldr	r1, [pc, #116]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8003eb6:	2001      	movs	r0, #1
 8003eb8:	f8c1 0e40 	str.w	r0, [r1, #3648]	; 0xe40
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ebc:	2000      	movs	r0, #0
 8003ebe:	f8c1 0e40 	str.w	r0, [r1, #3648]	; 0xe40
      RCC->BDCR = tmpreg1;
 8003ec2:	671a      	str	r2, [r3, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec6:	f013 0f01 	tst.w	r3, #1
 8003eca:	d113      	bne.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ecc:	68e3      	ldr	r3, [r4, #12]
 8003ece:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003ed2:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8003ed6:	d01e      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x132>
 8003ed8:	4a15      	ldr	r2, [pc, #84]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003eda:	6893      	ldr	r3, [r2, #8]
 8003edc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003ee0:	6093      	str	r3, [r2, #8]
 8003ee2:	4a13      	ldr	r2, [pc, #76]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003ee4:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8003ee6:	68e3      	ldr	r3, [r4, #12]
 8003ee8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eec:	430b      	orrs	r3, r1
 8003eee:	6713      	str	r3, [r2, #112]	; 0x70
  return HAL_OK;
 8003ef0:	2000      	movs	r0, #0
 8003ef2:	e783      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x18>
        tickstart = HAL_GetTick();
 8003ef4:	f7fd fbbc 	bl	8001670 <HAL_GetTick>
 8003ef8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003efa:	4e0d      	ldr	r6, [pc, #52]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003efc:	f241 3788 	movw	r7, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f00:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8003f02:	f013 0f02 	tst.w	r3, #2
 8003f06:	d1e1      	bne.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f08:	f7fd fbb2 	bl	8001670 <HAL_GetTick>
 8003f0c:	1b40      	subs	r0, r0, r5
 8003f0e:	42b8      	cmp	r0, r7
 8003f10:	d9f6      	bls.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x11c>
            return HAL_TIMEOUT;
 8003f12:	2003      	movs	r0, #3
 8003f14:	e772      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f16:	4906      	ldr	r1, [pc, #24]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003f18:	688a      	ldr	r2, [r1, #8]
 8003f1a:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8003f1e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003f22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f26:	4313      	orrs	r3, r2
 8003f28:	608b      	str	r3, [r1, #8]
 8003f2a:	e7da      	b.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003f2c:	42470000 	.word	0x42470000
 8003f30:	40023800 	.word	0x40023800
 8003f34:	40007000 	.word	0x40007000

08003f38 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 8003f38:	2801      	cmp	r0, #1
 8003f3a:	d001      	beq.n	8003f40 <HAL_RCCEx_GetPeriphCLKFreq+0x8>
  uint32_t frequency = 0U;
 8003f3c:	2000      	movs	r0, #0
 8003f3e:	4770      	bx	lr
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003f40:	4b10      	ldr	r3, [pc, #64]	; (8003f84 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
 8003f42:	689b      	ldr	r3, [r3, #8]
      switch (srcclk)
 8003f44:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8003f48:	d001      	beq.n	8003f4e <HAL_RCCEx_GetPeriphCLKFreq+0x16>
 8003f4a:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 8003f4c:	4770      	bx	lr
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003f4e:	4b0d      	ldr	r3, [pc, #52]	; (8003f84 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003f56:	4b0b      	ldr	r3, [pc, #44]	; (8003f84 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
 8003f58:	685a      	ldr	r2, [r3, #4]
 8003f5a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003f5e:	bf14      	ite	ne
 8003f60:	4809      	ldrne	r0, [pc, #36]	; (8003f88 <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003f62:	480a      	ldreq	r0, [pc, #40]	; (8003f8c <HAL_RCCEx_GetPeriphCLKFreq+0x54>)
 8003f64:	fbb0 f2f2 	udiv	r2, r0, r2
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003f68:	4b06      	ldr	r3, [pc, #24]	; (8003f84 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
 8003f6a:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003f6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003f72:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8003f76:	fb02 f000 	mul.w	r0, r2, r0
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003f7a:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8003f7e:	fbb0 f0f3 	udiv	r0, r0, r3
          break;
 8003f82:	4770      	bx	lr
 8003f84:	40023800 	.word	0x40023800
 8003f88:	007a1200 	.word	0x007a1200
 8003f8c:	00f42400 	.word	0x00f42400

08003f90 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f90:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f92:	f102 030c 	add.w	r3, r2, #12
 8003f96:	e853 3f00 	ldrex	r3, [r3]
 8003f9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9e:	320c      	adds	r2, #12
 8003fa0:	e842 3100 	strex	r1, r3, [r2]
 8003fa4:	2900      	cmp	r1, #0
 8003fa6:	d1f3      	bne.n	8003f90 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fa8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003faa:	f102 0314 	add.w	r3, r2, #20
 8003fae:	e853 3f00 	ldrex	r3, [r3]
 8003fb2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb6:	3214      	adds	r2, #20
 8003fb8:	e842 3100 	strex	r1, r3, [r2]
 8003fbc:	2900      	cmp	r1, #0
 8003fbe:	d1f3      	bne.n	8003fa8 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fc0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d005      	beq.n	8003fd2 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fc6:	2320      	movs	r3, #32
 8003fc8:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	6303      	str	r3, [r0, #48]	; 0x30
}
 8003fd0:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fd2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd4:	f102 030c 	add.w	r3, r2, #12
 8003fd8:	e853 3f00 	ldrex	r3, [r3]
 8003fdc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe0:	320c      	adds	r2, #12
 8003fe2:	e842 3100 	strex	r1, r3, [r2]
 8003fe6:	2900      	cmp	r1, #0
 8003fe8:	d1f3      	bne.n	8003fd2 <UART_EndRxTransfer+0x42>
 8003fea:	e7ec      	b.n	8003fc6 <UART_EndRxTransfer+0x36>

08003fec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fec:	b538      	push	{r3, r4, r5, lr}
 8003fee:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ff0:	6802      	ldr	r2, [r0, #0]
 8003ff2:	6913      	ldr	r3, [r2, #16]
 8003ff4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003ff8:	68c1      	ldr	r1, [r0, #12]
 8003ffa:	430b      	orrs	r3, r1
 8003ffc:	6113      	str	r3, [r2, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
 8003ffe:	6801      	ldr	r1, [r0, #0]
 8004000:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004002:	6883      	ldr	r3, [r0, #8]
 8004004:	6900      	ldr	r0, [r0, #16]
 8004006:	4303      	orrs	r3, r0
 8004008:	6960      	ldr	r0, [r4, #20]
 800400a:	4303      	orrs	r3, r0
 800400c:	69e0      	ldr	r0, [r4, #28]
 800400e:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8004010:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
 8004014:	f022 020c 	bic.w	r2, r2, #12
 8004018:	4313      	orrs	r3, r2
 800401a:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800401c:	6822      	ldr	r2, [r4, #0]
 800401e:	6953      	ldr	r3, [r2, #20]
 8004020:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004024:	69a1      	ldr	r1, [r4, #24]
 8004026:	430b      	orrs	r3, r1
 8004028:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800402a:	6823      	ldr	r3, [r4, #0]
 800402c:	4a2e      	ldr	r2, [pc, #184]	; (80040e8 <UART_SetConfig+0xfc>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d006      	beq.n	8004040 <UART_SetConfig+0x54>
 8004032:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004036:	4293      	cmp	r3, r2
 8004038:	d002      	beq.n	8004040 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800403a:	f7ff feb3 	bl	8003da4 <HAL_RCC_GetPCLK1Freq>
 800403e:	e001      	b.n	8004044 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004040:	f7ff fec0 	bl	8003dc4 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004044:	69e3      	ldr	r3, [r4, #28]
 8004046:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800404a:	d024      	beq.n	8004096 <UART_SetConfig+0xaa>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800404c:	2100      	movs	r1, #0
 800404e:	1803      	adds	r3, r0, r0
 8004050:	4149      	adcs	r1, r1
 8004052:	181b      	adds	r3, r3, r0
 8004054:	f141 0100 	adc.w	r1, r1, #0
 8004058:	00c9      	lsls	r1, r1, #3
 800405a:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 800405e:	00db      	lsls	r3, r3, #3
 8004060:	1818      	adds	r0, r3, r0
 8004062:	6863      	ldr	r3, [r4, #4]
 8004064:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8004068:	ea4f 7393 	mov.w	r3, r3, lsr #30
 800406c:	f141 0100 	adc.w	r1, r1, #0
 8004070:	f7fc f8aa 	bl	80001c8 <__aeabi_uldivmod>
 8004074:	6821      	ldr	r1, [r4, #0]
 8004076:	4a1d      	ldr	r2, [pc, #116]	; (80040ec <UART_SetConfig+0x100>)
 8004078:	fba2 4300 	umull	r4, r3, r2, r0
 800407c:	095b      	lsrs	r3, r3, #5
 800407e:	2464      	movs	r4, #100	; 0x64
 8004080:	fb04 0013 	mls	r0, r4, r3, r0
 8004084:	0100      	lsls	r0, r0, #4
 8004086:	3032      	adds	r0, #50	; 0x32
 8004088:	fba2 2000 	umull	r2, r0, r2, r0
 800408c:	011b      	lsls	r3, r3, #4
 800408e:	eb03 1050 	add.w	r0, r3, r0, lsr #5
 8004092:	6088      	str	r0, [r1, #8]
  }
}
 8004094:	bd38      	pop	{r3, r4, r5, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004096:	2300      	movs	r3, #0
 8004098:	1802      	adds	r2, r0, r0
 800409a:	eb43 0103 	adc.w	r1, r3, r3
 800409e:	1812      	adds	r2, r2, r0
 80040a0:	f141 0100 	adc.w	r1, r1, #0
 80040a4:	00c9      	lsls	r1, r1, #3
 80040a6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040aa:	00d2      	lsls	r2, r2, #3
 80040ac:	1810      	adds	r0, r2, r0
 80040ae:	f141 0100 	adc.w	r1, r1, #0
 80040b2:	6862      	ldr	r2, [r4, #4]
 80040b4:	1892      	adds	r2, r2, r2
 80040b6:	415b      	adcs	r3, r3
 80040b8:	f7fc f886 	bl	80001c8 <__aeabi_uldivmod>
 80040bc:	4d0b      	ldr	r5, [pc, #44]	; (80040ec <UART_SetConfig+0x100>)
 80040be:	fba5 3200 	umull	r3, r2, r5, r0
 80040c2:	0951      	lsrs	r1, r2, #5
 80040c4:	2364      	movs	r3, #100	; 0x64
 80040c6:	fb03 0311 	mls	r3, r3, r1, r0
 80040ca:	00db      	lsls	r3, r3, #3
 80040cc:	3332      	adds	r3, #50	; 0x32
 80040ce:	fba5 2303 	umull	r2, r3, r5, r3
 80040d2:	6820      	ldr	r0, [r4, #0]
 80040d4:	f3c3 1242 	ubfx	r2, r3, #5, #3
 80040d8:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80040dc:	091b      	lsrs	r3, r3, #4
 80040de:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80040e2:	4413      	add	r3, r2
 80040e4:	6083      	str	r3, [r0, #8]
 80040e6:	e7d5      	b.n	8004094 <UART_SetConfig+0xa8>
 80040e8:	40011000 	.word	0x40011000
 80040ec:	51eb851f 	.word	0x51eb851f

080040f0 <UART_WaitOnFlagUntilTimeout>:
{
 80040f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80040f4:	4680      	mov	r8, r0
 80040f6:	460e      	mov	r6, r1
 80040f8:	4615      	mov	r5, r2
 80040fa:	4699      	mov	r9, r3
 80040fc:	9f08      	ldr	r7, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040fe:	f8d8 2000 	ldr.w	r2, [r8]
 8004102:	6814      	ldr	r4, [r2, #0]
 8004104:	ea36 0304 	bics.w	r3, r6, r4
 8004108:	bf0c      	ite	eq
 800410a:	f04f 0c01 	moveq.w	ip, #1
 800410e:	f04f 0c00 	movne.w	ip, #0
 8004112:	45ac      	cmp	ip, r5
 8004114:	d12d      	bne.n	8004172 <UART_WaitOnFlagUntilTimeout+0x82>
    if (Timeout != HAL_MAX_DELAY)
 8004116:	f1b7 3fff 	cmp.w	r7, #4294967295
 800411a:	d0f2      	beq.n	8004102 <UART_WaitOnFlagUntilTimeout+0x12>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800411c:	b12f      	cbz	r7, 800412a <UART_WaitOnFlagUntilTimeout+0x3a>
 800411e:	f7fd faa7 	bl	8001670 <HAL_GetTick>
 8004122:	eba0 0009 	sub.w	r0, r0, r9
 8004126:	42b8      	cmp	r0, r7
 8004128:	d9e9      	bls.n	80040fe <UART_WaitOnFlagUntilTimeout+0xe>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800412a:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800412e:	f102 030c 	add.w	r3, r2, #12
 8004132:	e853 3f00 	ldrex	r3, [r3]
 8004136:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800413a:	320c      	adds	r2, #12
 800413c:	e842 3100 	strex	r1, r3, [r2]
 8004140:	2900      	cmp	r1, #0
 8004142:	d1f2      	bne.n	800412a <UART_WaitOnFlagUntilTimeout+0x3a>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004144:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004148:	f102 0314 	add.w	r3, r2, #20
 800414c:	e853 3f00 	ldrex	r3, [r3]
 8004150:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004154:	3214      	adds	r2, #20
 8004156:	e842 3100 	strex	r1, r3, [r2]
 800415a:	2900      	cmp	r1, #0
 800415c:	d1f2      	bne.n	8004144 <UART_WaitOnFlagUntilTimeout+0x54>
        huart->gState  = HAL_UART_STATE_READY;
 800415e:	2320      	movs	r3, #32
 8004160:	f888 303d 	strb.w	r3, [r8, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004164:	f888 303e 	strb.w	r3, [r8, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 8004168:	2300      	movs	r3, #0
 800416a:	f888 303c 	strb.w	r3, [r8, #60]	; 0x3c
        return HAL_TIMEOUT;
 800416e:	2003      	movs	r0, #3
 8004170:	e000      	b.n	8004174 <UART_WaitOnFlagUntilTimeout+0x84>
  return HAL_OK;
 8004172:	2000      	movs	r0, #0
}
 8004174:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08004178 <HAL_UART_Init>:
  if (huart == NULL)
 8004178:	b358      	cbz	r0, 80041d2 <HAL_UART_Init+0x5a>
{
 800417a:	b510      	push	{r4, lr}
 800417c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800417e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004182:	b30b      	cbz	r3, 80041c8 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8004184:	2324      	movs	r3, #36	; 0x24
 8004186:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 800418a:	6822      	ldr	r2, [r4, #0]
 800418c:	68d3      	ldr	r3, [r2, #12]
 800418e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004192:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8004194:	4620      	mov	r0, r4
 8004196:	f7ff ff29 	bl	8003fec <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800419a:	6822      	ldr	r2, [r4, #0]
 800419c:	6913      	ldr	r3, [r2, #16]
 800419e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80041a2:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041a4:	6822      	ldr	r2, [r4, #0]
 80041a6:	6953      	ldr	r3, [r2, #20]
 80041a8:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80041ac:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80041ae:	6822      	ldr	r2, [r4, #0]
 80041b0:	68d3      	ldr	r3, [r2, #12]
 80041b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80041b6:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041b8:	2000      	movs	r0, #0
 80041ba:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80041bc:	2320      	movs	r3, #32
 80041be:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80041c2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 80041c6:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80041c8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 80041cc:	f7fd f928 	bl	8001420 <HAL_UART_MspInit>
 80041d0:	e7d8      	b.n	8004184 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80041d2:	2001      	movs	r0, #1
}
 80041d4:	4770      	bx	lr

080041d6 <HAL_UART_Transmit>:
{
 80041d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80041de:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	2b20      	cmp	r3, #32
 80041e6:	d15a      	bne.n	800429e <HAL_UART_Transmit+0xc8>
 80041e8:	4604      	mov	r4, r0
 80041ea:	460d      	mov	r5, r1
 80041ec:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80041ee:	2900      	cmp	r1, #0
 80041f0:	d059      	beq.n	80042a6 <HAL_UART_Transmit+0xd0>
 80041f2:	2a00      	cmp	r2, #0
 80041f4:	d059      	beq.n	80042aa <HAL_UART_Transmit+0xd4>
    __HAL_LOCK(huart);
 80041f6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d057      	beq.n	80042ae <HAL_UART_Transmit+0xd8>
 80041fe:	2301      	movs	r3, #1
 8004200:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004204:	2300      	movs	r3, #0
 8004206:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004208:	2321      	movs	r3, #33	; 0x21
 800420a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 800420e:	f7fd fa2f 	bl	8001670 <HAL_GetTick>
 8004212:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8004214:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8004218:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800421c:	68a3      	ldr	r3, [r4, #8]
 800421e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004222:	d00c      	beq.n	800423e <HAL_UART_Transmit+0x68>
      pdata16bits = NULL;
 8004224:	f04f 0a00 	mov.w	sl, #0
    __HAL_UNLOCK(huart);
 8004228:	2300      	movs	r3, #0
 800422a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 800422e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8004230:	b29b      	uxth	r3, r3
 8004232:	b343      	cbz	r3, 8004286 <HAL_UART_Transmit+0xb0>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004234:	f04f 0900 	mov.w	r9, #0
 8004238:	f04f 0880 	mov.w	r8, #128	; 0x80
 800423c:	e014      	b.n	8004268 <HAL_UART_Transmit+0x92>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800423e:	6923      	ldr	r3, [r4, #16]
 8004240:	b913      	cbnz	r3, 8004248 <HAL_UART_Transmit+0x72>
      pdata16bits = (const uint16_t *) pData;
 8004242:	46aa      	mov	sl, r5
      pdata8bits  = NULL;
 8004244:	2500      	movs	r5, #0
 8004246:	e7ef      	b.n	8004228 <HAL_UART_Transmit+0x52>
      pdata16bits = NULL;
 8004248:	f04f 0a00 	mov.w	sl, #0
 800424c:	e7ec      	b.n	8004228 <HAL_UART_Transmit+0x52>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800424e:	6822      	ldr	r2, [r4, #0]
 8004250:	f83a 3b02 	ldrh.w	r3, [sl], #2
 8004254:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004258:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 800425a:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800425c:	3a01      	subs	r2, #1
 800425e:	b292      	uxth	r2, r2
 8004260:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004262:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8004264:	b29b      	uxth	r3, r3
 8004266:	b173      	cbz	r3, 8004286 <HAL_UART_Transmit+0xb0>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004268:	9600      	str	r6, [sp, #0]
 800426a:	463b      	mov	r3, r7
 800426c:	464a      	mov	r2, r9
 800426e:	4641      	mov	r1, r8
 8004270:	4620      	mov	r0, r4
 8004272:	f7ff ff3d 	bl	80040f0 <UART_WaitOnFlagUntilTimeout>
 8004276:	b9e0      	cbnz	r0, 80042b2 <HAL_UART_Transmit+0xdc>
      if (pdata8bits == NULL)
 8004278:	2d00      	cmp	r5, #0
 800427a:	d0e8      	beq.n	800424e <HAL_UART_Transmit+0x78>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800427c:	6823      	ldr	r3, [r4, #0]
 800427e:	f815 2b01 	ldrb.w	r2, [r5], #1
 8004282:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004284:	e7e9      	b.n	800425a <HAL_UART_Transmit+0x84>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004286:	9600      	str	r6, [sp, #0]
 8004288:	463b      	mov	r3, r7
 800428a:	2200      	movs	r2, #0
 800428c:	2140      	movs	r1, #64	; 0x40
 800428e:	4620      	mov	r0, r4
 8004290:	f7ff ff2e 	bl	80040f0 <UART_WaitOnFlagUntilTimeout>
 8004294:	b978      	cbnz	r0, 80042b6 <HAL_UART_Transmit+0xe0>
    huart->gState = HAL_UART_STATE_READY;
 8004296:	2320      	movs	r3, #32
 8004298:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 800429c:	e000      	b.n	80042a0 <HAL_UART_Transmit+0xca>
    return HAL_BUSY;
 800429e:	2002      	movs	r0, #2
}
 80042a0:	b002      	add	sp, #8
 80042a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 80042a6:	2001      	movs	r0, #1
 80042a8:	e7fa      	b.n	80042a0 <HAL_UART_Transmit+0xca>
 80042aa:	2001      	movs	r0, #1
 80042ac:	e7f8      	b.n	80042a0 <HAL_UART_Transmit+0xca>
    __HAL_LOCK(huart);
 80042ae:	2002      	movs	r0, #2
 80042b0:	e7f6      	b.n	80042a0 <HAL_UART_Transmit+0xca>
        return HAL_TIMEOUT;
 80042b2:	2003      	movs	r0, #3
 80042b4:	e7f4      	b.n	80042a0 <HAL_UART_Transmit+0xca>
      return HAL_TIMEOUT;
 80042b6:	2003      	movs	r0, #3
 80042b8:	e7f2      	b.n	80042a0 <HAL_UART_Transmit+0xca>

080042ba <HAL_UART_DMAPause>:
  __HAL_LOCK(huart);
 80042ba:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d04d      	beq.n	800435e <HAL_UART_DMAPause+0xa4>
 80042c2:	2301      	movs	r3, #1
 80042c4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80042c8:	6803      	ldr	r3, [r0, #0]
 80042ca:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80042cc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	2b21      	cmp	r3, #33	; 0x21
 80042d4:	d00b      	beq.n	80042ee <HAL_UART_DMAPause+0x34>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80042d6:	6803      	ldr	r3, [r0, #0]
 80042d8:	695a      	ldr	r2, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80042da:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	2b22      	cmp	r3, #34	; 0x22
 80042e2:	d014      	beq.n	800430e <HAL_UART_DMAPause+0x54>
  __HAL_UNLOCK(huart);
 80042e4:	2300      	movs	r3, #0
 80042e6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80042ea:	4618      	mov	r0, r3
 80042ec:	4770      	bx	lr
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80042ee:	f012 0f80 	tst.w	r2, #128	; 0x80
 80042f2:	d0f0      	beq.n	80042d6 <HAL_UART_DMAPause+0x1c>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80042f4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f6:	f102 0314 	add.w	r3, r2, #20
 80042fa:	e853 3f00 	ldrex	r3, [r3]
 80042fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004302:	3214      	adds	r2, #20
 8004304:	e842 3100 	strex	r1, r3, [r2]
 8004308:	2900      	cmp	r1, #0
 800430a:	d1f3      	bne.n	80042f4 <HAL_UART_DMAPause+0x3a>
 800430c:	e7e3      	b.n	80042d6 <HAL_UART_DMAPause+0x1c>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800430e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004312:	d0e7      	beq.n	80042e4 <HAL_UART_DMAPause+0x2a>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004314:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004316:	f102 030c 	add.w	r3, r2, #12
 800431a:	e853 3f00 	ldrex	r3, [r3]
 800431e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004322:	320c      	adds	r2, #12
 8004324:	e842 3100 	strex	r1, r3, [r2]
 8004328:	2900      	cmp	r1, #0
 800432a:	d1f3      	bne.n	8004314 <HAL_UART_DMAPause+0x5a>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800432c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432e:	f102 0314 	add.w	r3, r2, #20
 8004332:	e853 3f00 	ldrex	r3, [r3]
 8004336:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800433a:	3214      	adds	r2, #20
 800433c:	e842 3100 	strex	r1, r3, [r2]
 8004340:	2900      	cmp	r1, #0
 8004342:	d1f3      	bne.n	800432c <HAL_UART_DMAPause+0x72>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004344:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004346:	f102 0314 	add.w	r3, r2, #20
 800434a:	e853 3f00 	ldrex	r3, [r3]
 800434e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004352:	3214      	adds	r2, #20
 8004354:	e842 3100 	strex	r1, r3, [r2]
 8004358:	2900      	cmp	r1, #0
 800435a:	d1f3      	bne.n	8004344 <HAL_UART_DMAPause+0x8a>
 800435c:	e7c2      	b.n	80042e4 <HAL_UART_DMAPause+0x2a>
  __HAL_LOCK(huart);
 800435e:	2002      	movs	r0, #2
}
 8004360:	4770      	bx	lr

08004362 <HAL_UART_DMAResume>:
  __HAL_LOCK(huart);
 8004362:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004366:	2b01      	cmp	r3, #1
 8004368:	d053      	beq.n	8004412 <HAL_UART_DMAResume+0xb0>
 800436a:	2301      	movs	r3, #1
 800436c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004370:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004374:	b2db      	uxtb	r3, r3
 8004376:	2b21      	cmp	r3, #33	; 0x21
 8004378:	d009      	beq.n	800438e <HAL_UART_DMAResume+0x2c>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800437a:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800437e:	b2db      	uxtb	r3, r3
 8004380:	2b22      	cmp	r3, #34	; 0x22
 8004382:	d011      	beq.n	80043a8 <HAL_UART_DMAResume+0x46>
  __HAL_UNLOCK(huart);
 8004384:	2300      	movs	r3, #0
 8004386:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800438a:	4618      	mov	r0, r3
}
 800438c:	4770      	bx	lr
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800438e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004390:	f102 0314 	add.w	r3, r2, #20
 8004394:	e853 3f00 	ldrex	r3, [r3]
 8004398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800439c:	3214      	adds	r2, #20
 800439e:	e842 3100 	strex	r1, r3, [r2]
 80043a2:	2900      	cmp	r1, #0
 80043a4:	d1f3      	bne.n	800438e <HAL_UART_DMAResume+0x2c>
 80043a6:	e7e8      	b.n	800437a <HAL_UART_DMAResume+0x18>
{
 80043a8:	b082      	sub	sp, #8
    __HAL_UART_CLEAR_OREFLAG(huart);
 80043aa:	2300      	movs	r3, #0
 80043ac:	9301      	str	r3, [sp, #4]
 80043ae:	6803      	ldr	r3, [r0, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	9201      	str	r2, [sp, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	9301      	str	r3, [sp, #4]
 80043b8:	9b01      	ldr	r3, [sp, #4]
    if (huart->Init.Parity != UART_PARITY_NONE)
 80043ba:	6903      	ldr	r3, [r0, #16]
 80043bc:	b15b      	cbz	r3, 80043d6 <HAL_UART_DMAResume+0x74>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043be:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c0:	f102 030c 	add.w	r3, r2, #12
 80043c4:	e853 3f00 	ldrex	r3, [r3]
 80043c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043cc:	320c      	adds	r2, #12
 80043ce:	e842 3100 	strex	r1, r3, [r2]
 80043d2:	2900      	cmp	r1, #0
 80043d4:	d1f3      	bne.n	80043be <HAL_UART_DMAResume+0x5c>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043d6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d8:	f102 0314 	add.w	r3, r2, #20
 80043dc:	e853 3f00 	ldrex	r3, [r3]
 80043e0:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e4:	3214      	adds	r2, #20
 80043e6:	e842 3100 	strex	r1, r3, [r2]
 80043ea:	2900      	cmp	r1, #0
 80043ec:	d1f3      	bne.n	80043d6 <HAL_UART_DMAResume+0x74>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043ee:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f0:	f102 0314 	add.w	r3, r2, #20
 80043f4:	e853 3f00 	ldrex	r3, [r3]
 80043f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043fc:	3214      	adds	r2, #20
 80043fe:	e842 3100 	strex	r1, r3, [r2]
 8004402:	2900      	cmp	r1, #0
 8004404:	d1f3      	bne.n	80043ee <HAL_UART_DMAResume+0x8c>
  __HAL_UNLOCK(huart);
 8004406:	2300      	movs	r3, #0
 8004408:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800440c:	4618      	mov	r0, r3
}
 800440e:	b002      	add	sp, #8
 8004410:	4770      	bx	lr
  __HAL_LOCK(huart);
 8004412:	2002      	movs	r0, #2
 8004414:	4770      	bx	lr

08004416 <HAL_UART_ErrorCallback>:
}
 8004416:	4770      	bx	lr

08004418 <UART_DMAError>:
{
 8004418:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800441a:	6b84      	ldr	r4, [r0, #56]	; 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800441c:	6823      	ldr	r3, [r4, #0]
 800441e:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004420:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004424:	b2db      	uxtb	r3, r3
 8004426:	2b21      	cmp	r3, #33	; 0x21
 8004428:	d00e      	beq.n	8004448 <UART_DMAError+0x30>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800442a:	6823      	ldr	r3, [r4, #0]
 800442c:	695a      	ldr	r2, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800442e:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8004432:	b2db      	uxtb	r3, r3
 8004434:	2b22      	cmp	r3, #34	; 0x22
 8004436:	d01c      	beq.n	8004472 <UART_DMAError+0x5a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004438:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800443a:	f043 0310 	orr.w	r3, r3, #16
 800443e:	6423      	str	r3, [r4, #64]	; 0x40
  HAL_UART_ErrorCallback(huart);
 8004440:	4620      	mov	r0, r4
 8004442:	f7ff ffe8 	bl	8004416 <HAL_UART_ErrorCallback>
}
 8004446:	bd10      	pop	{r4, pc}
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004448:	f012 0f80 	tst.w	r2, #128	; 0x80
 800444c:	d0ed      	beq.n	800442a <UART_DMAError+0x12>
    huart->TxXferCount = 0x00U;
 800444e:	2300      	movs	r3, #0
 8004450:	84e3      	strh	r3, [r4, #38]	; 0x26
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004452:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004454:	f102 030c 	add.w	r3, r2, #12
 8004458:	e853 3f00 	ldrex	r3, [r3]
 800445c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004460:	320c      	adds	r2, #12
 8004462:	e842 3100 	strex	r1, r3, [r2]
 8004466:	2900      	cmp	r1, #0
 8004468:	d1f3      	bne.n	8004452 <UART_DMAError+0x3a>
  huart->gState = HAL_UART_STATE_READY;
 800446a:	2320      	movs	r3, #32
 800446c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8004470:	e7db      	b.n	800442a <UART_DMAError+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004472:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004476:	d0df      	beq.n	8004438 <UART_DMAError+0x20>
    huart->RxXferCount = 0x00U;
 8004478:	2300      	movs	r3, #0
 800447a:	85e3      	strh	r3, [r4, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800447c:	4620      	mov	r0, r4
 800447e:	f7ff fd87 	bl	8003f90 <UART_EndRxTransfer>
 8004482:	e7d9      	b.n	8004438 <UART_DMAError+0x20>

08004484 <HAL_UARTEx_RxEventCallback>:
}
 8004484:	4770      	bx	lr

08004486 <UART_DMARxHalfCplt>:
{
 8004486:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004488:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800448a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800448c:	2b01      	cmp	r3, #1
 800448e:	d002      	beq.n	8004496 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 8004490:	f7fc f9f6 	bl	8000880 <HAL_UART_RxHalfCpltCallback>
}
 8004494:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004496:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8004498:	0849      	lsrs	r1, r1, #1
 800449a:	f7ff fff3 	bl	8004484 <HAL_UARTEx_RxEventCallback>
 800449e:	e7f9      	b.n	8004494 <UART_DMARxHalfCplt+0xe>

080044a0 <UART_DMAReceiveCplt>:
{
 80044a0:	b508      	push	{r3, lr}
 80044a2:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044a4:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f413 7f80 	tst.w	r3, #256	; 0x100
 80044ae:	d12b      	bne.n	8004508 <UART_DMAReceiveCplt+0x68>
    huart->RxXferCount = 0U;
 80044b0:	2300      	movs	r3, #0
 80044b2:	85c3      	strh	r3, [r0, #46]	; 0x2e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044b4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b6:	f102 030c 	add.w	r3, r2, #12
 80044ba:	e853 3f00 	ldrex	r3, [r3]
 80044be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c2:	320c      	adds	r2, #12
 80044c4:	e842 3100 	strex	r1, r3, [r2]
 80044c8:	2900      	cmp	r1, #0
 80044ca:	d1f3      	bne.n	80044b4 <UART_DMAReceiveCplt+0x14>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044cc:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ce:	f102 0314 	add.w	r3, r2, #20
 80044d2:	e853 3f00 	ldrex	r3, [r3]
 80044d6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044da:	3214      	adds	r2, #20
 80044dc:	e842 3100 	strex	r1, r3, [r2]
 80044e0:	2900      	cmp	r1, #0
 80044e2:	d1f3      	bne.n	80044cc <UART_DMAReceiveCplt+0x2c>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044e4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e6:	f102 0314 	add.w	r3, r2, #20
 80044ea:	e853 3f00 	ldrex	r3, [r3]
 80044ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f2:	3214      	adds	r2, #20
 80044f4:	e842 3100 	strex	r1, r3, [r2]
 80044f8:	2900      	cmp	r1, #0
 80044fa:	d1f3      	bne.n	80044e4 <UART_DMAReceiveCplt+0x44>
    huart->RxState = HAL_UART_STATE_READY;
 80044fc:	2320      	movs	r3, #32
 80044fe:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004502:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004504:	2b01      	cmp	r3, #1
 8004506:	d005      	beq.n	8004514 <UART_DMAReceiveCplt+0x74>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004508:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800450a:	2b01      	cmp	r3, #1
 800450c:	d00f      	beq.n	800452e <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800450e:	f7fc f9c7 	bl	80008a0 <HAL_UART_RxCpltCallback>
}
 8004512:	bd08      	pop	{r3, pc}
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004514:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004516:	f102 030c 	add.w	r3, r2, #12
 800451a:	e853 3f00 	ldrex	r3, [r3]
 800451e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004522:	320c      	adds	r2, #12
 8004524:	e842 3100 	strex	r1, r3, [r2]
 8004528:	2900      	cmp	r1, #0
 800452a:	d1f3      	bne.n	8004514 <UART_DMAReceiveCplt+0x74>
 800452c:	e7ec      	b.n	8004508 <UART_DMAReceiveCplt+0x68>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800452e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8004530:	f7ff ffa8 	bl	8004484 <HAL_UARTEx_RxEventCallback>
 8004534:	e7ed      	b.n	8004512 <UART_DMAReceiveCplt+0x72>
	...

08004538 <UART_Start_Receive_DMA>:
{
 8004538:	b530      	push	{r4, r5, lr}
 800453a:	b083      	sub	sp, #12
 800453c:	4604      	mov	r4, r0
 800453e:	4613      	mov	r3, r2
  huart->pRxBuffPtr = pData;
 8004540:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxXferSize = Size;
 8004542:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004544:	2500      	movs	r5, #0
 8004546:	6405      	str	r5, [r0, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004548:	2222      	movs	r2, #34	; 0x22
 800454a:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800454e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004550:	4820      	ldr	r0, [pc, #128]	; (80045d4 <UART_Start_Receive_DMA+0x9c>)
 8004552:	63d0      	str	r0, [r2, #60]	; 0x3c
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004554:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004556:	4820      	ldr	r0, [pc, #128]	; (80045d8 <UART_Start_Receive_DMA+0xa0>)
 8004558:	6410      	str	r0, [r2, #64]	; 0x40
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800455a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800455c:	481f      	ldr	r0, [pc, #124]	; (80045dc <UART_Start_Receive_DMA+0xa4>)
 800455e:	64d0      	str	r0, [r2, #76]	; 0x4c
  huart->hdmarx->XferAbortCallback = NULL;
 8004560:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004562:	6515      	str	r5, [r2, #80]	; 0x50
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004564:	6820      	ldr	r0, [r4, #0]
 8004566:	460a      	mov	r2, r1
 8004568:	1d01      	adds	r1, r0, #4
 800456a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800456c:	f7fd f9bc 	bl	80018e8 <HAL_DMA_Start_IT>
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004570:	9501      	str	r5, [sp, #4]
 8004572:	6823      	ldr	r3, [r4, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	9201      	str	r2, [sp, #4]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	9301      	str	r3, [sp, #4]
 800457c:	9b01      	ldr	r3, [sp, #4]
  __HAL_UNLOCK(huart);
 800457e:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004582:	6923      	ldr	r3, [r4, #16]
 8004584:	b15b      	cbz	r3, 800459e <UART_Start_Receive_DMA+0x66>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004586:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004588:	f102 030c 	add.w	r3, r2, #12
 800458c:	e853 3f00 	ldrex	r3, [r3]
 8004590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004594:	320c      	adds	r2, #12
 8004596:	e842 3100 	strex	r1, r3, [r2]
 800459a:	2900      	cmp	r1, #0
 800459c:	d1f3      	bne.n	8004586 <UART_Start_Receive_DMA+0x4e>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800459e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a0:	f102 0314 	add.w	r3, r2, #20
 80045a4:	e853 3f00 	ldrex	r3, [r3]
 80045a8:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ac:	3214      	adds	r2, #20
 80045ae:	e842 3100 	strex	r1, r3, [r2]
 80045b2:	2900      	cmp	r1, #0
 80045b4:	d1f3      	bne.n	800459e <UART_Start_Receive_DMA+0x66>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045b6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b8:	f102 0314 	add.w	r3, r2, #20
 80045bc:	e853 3f00 	ldrex	r3, [r3]
 80045c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c4:	3214      	adds	r2, #20
 80045c6:	e842 3100 	strex	r1, r3, [r2]
 80045ca:	2900      	cmp	r1, #0
 80045cc:	d1f3      	bne.n	80045b6 <UART_Start_Receive_DMA+0x7e>
}
 80045ce:	2000      	movs	r0, #0
 80045d0:	b003      	add	sp, #12
 80045d2:	bd30      	pop	{r4, r5, pc}
 80045d4:	080044a1 	.word	0x080044a1
 80045d8:	08004487 	.word	0x08004487
 80045dc:	08004419 	.word	0x08004419

080045e0 <HAL_UART_Receive_DMA>:
{
 80045e0:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 80045e2:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	2b20      	cmp	r3, #32
 80045ea:	d10d      	bne.n	8004608 <HAL_UART_Receive_DMA+0x28>
    if ((pData == NULL) || (Size == 0U))
 80045ec:	b171      	cbz	r1, 800460c <HAL_UART_Receive_DMA+0x2c>
 80045ee:	b17a      	cbz	r2, 8004610 <HAL_UART_Receive_DMA+0x30>
    __HAL_LOCK(huart);
 80045f0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d00d      	beq.n	8004614 <HAL_UART_Receive_DMA+0x34>
 80045f8:	2301      	movs	r3, #1
 80045fa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045fe:	2300      	movs	r3, #0
 8004600:	6303      	str	r3, [r0, #48]	; 0x30
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004602:	f7ff ff99 	bl	8004538 <UART_Start_Receive_DMA>
 8004606:	e000      	b.n	800460a <HAL_UART_Receive_DMA+0x2a>
    return HAL_BUSY;
 8004608:	2002      	movs	r0, #2
}
 800460a:	bd08      	pop	{r3, pc}
      return HAL_ERROR;
 800460c:	2001      	movs	r0, #1
 800460e:	e7fc      	b.n	800460a <HAL_UART_Receive_DMA+0x2a>
 8004610:	2001      	movs	r0, #1
 8004612:	e7fa      	b.n	800460a <HAL_UART_Receive_DMA+0x2a>
    __HAL_LOCK(huart);
 8004614:	2002      	movs	r0, #2
 8004616:	e7f8      	b.n	800460a <HAL_UART_Receive_DMA+0x2a>

08004618 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004618:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800461a:	2300      	movs	r3, #0
 800461c:	9301      	str	r3, [sp, #4]
  /* Wait for AHB master IDLE state. */
  do
  {
    count++;

    if (count > 200000U)
 800461e:	4a11      	ldr	r2, [pc, #68]	; (8004664 <USB_CoreReset+0x4c>)
    count++;
 8004620:	9b01      	ldr	r3, [sp, #4]
 8004622:	3301      	adds	r3, #1
 8004624:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8004626:	9b01      	ldr	r3, [sp, #4]
 8004628:	4293      	cmp	r3, r2
 800462a:	d815      	bhi.n	8004658 <USB_CoreReset+0x40>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800462c:	6903      	ldr	r3, [r0, #16]
 800462e:	2b00      	cmp	r3, #0
 8004630:	daf6      	bge.n	8004620 <USB_CoreReset+0x8>

  /* Core Soft Reset */
  count = 0U;
 8004632:	2300      	movs	r3, #0
 8004634:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004636:	6903      	ldr	r3, [r0, #16]
 8004638:	f043 0301 	orr.w	r3, r3, #1
 800463c:	6103      	str	r3, [r0, #16]

  do
  {
    count++;

    if (count > 200000U)
 800463e:	4a09      	ldr	r2, [pc, #36]	; (8004664 <USB_CoreReset+0x4c>)
    count++;
 8004640:	9b01      	ldr	r3, [sp, #4]
 8004642:	3301      	adds	r3, #1
 8004644:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8004646:	9b01      	ldr	r3, [sp, #4]
 8004648:	4293      	cmp	r3, r2
 800464a:	d808      	bhi.n	800465e <USB_CoreReset+0x46>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800464c:	6903      	ldr	r3, [r0, #16]
 800464e:	f013 0f01 	tst.w	r3, #1
 8004652:	d1f5      	bne.n	8004640 <USB_CoreReset+0x28>

  return HAL_OK;
 8004654:	2000      	movs	r0, #0
 8004656:	e000      	b.n	800465a <USB_CoreReset+0x42>
      return HAL_TIMEOUT;
 8004658:	2003      	movs	r0, #3
}
 800465a:	b002      	add	sp, #8
 800465c:	4770      	bx	lr
      return HAL_TIMEOUT;
 800465e:	2003      	movs	r0, #3
 8004660:	e7fb      	b.n	800465a <USB_CoreReset+0x42>
 8004662:	bf00      	nop
 8004664:	00030d40 	.word	0x00030d40

08004668 <USB_CoreInit>:
{
 8004668:	b084      	sub	sp, #16
 800466a:	b510      	push	{r4, lr}
 800466c:	4604      	mov	r4, r0
 800466e:	a803      	add	r0, sp, #12
 8004670:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004674:	9b08      	ldr	r3, [sp, #32]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d11f      	bne.n	80046ba <USB_CoreInit+0x52>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800467a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800467c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004680:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004682:	68e3      	ldr	r3, [r4, #12]
 8004684:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004688:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800468c:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800468e:	68e3      	ldr	r3, [r4, #12]
 8004690:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004694:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 8004696:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004698:	2b01      	cmp	r3, #1
 800469a:	d009      	beq.n	80046b0 <USB_CoreInit+0x48>
    ret = USB_CoreReset(USBx);
 800469c:	4620      	mov	r0, r4
 800469e:	f7ff ffbb 	bl	8004618 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 80046a2:	9b06      	ldr	r3, [sp, #24]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d01b      	beq.n	80046e0 <USB_CoreInit+0x78>
}
 80046a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046ac:	b004      	add	sp, #16
 80046ae:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80046b0:	68e3      	ldr	r3, [r4, #12]
 80046b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046b6:	60e3      	str	r3, [r4, #12]
 80046b8:	e7f0      	b.n	800469c <USB_CoreInit+0x34>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80046ba:	68e3      	ldr	r3, [r4, #12]
 80046bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046c0:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 80046c2:	4620      	mov	r0, r4
 80046c4:	f7ff ffa8 	bl	8004618 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 80046c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80046ca:	b923      	cbnz	r3, 80046d6 <USB_CoreInit+0x6e>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80046cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80046ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046d2:	63a3      	str	r3, [r4, #56]	; 0x38
 80046d4:	e7e5      	b.n	80046a2 <USB_CoreInit+0x3a>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80046d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80046d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046dc:	63a3      	str	r3, [r4, #56]	; 0x38
 80046de:	e7e0      	b.n	80046a2 <USB_CoreInit+0x3a>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80046e0:	68a3      	ldr	r3, [r4, #8]
 80046e2:	f043 0306 	orr.w	r3, r3, #6
 80046e6:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80046e8:	68a3      	ldr	r3, [r4, #8]
 80046ea:	f043 0320 	orr.w	r3, r3, #32
 80046ee:	60a3      	str	r3, [r4, #8]
 80046f0:	e7da      	b.n	80046a8 <USB_CoreInit+0x40>

080046f2 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80046f2:	6883      	ldr	r3, [r0, #8]
 80046f4:	f043 0301 	orr.w	r3, r3, #1
 80046f8:	6083      	str	r3, [r0, #8]
}
 80046fa:	2000      	movs	r0, #0
 80046fc:	4770      	bx	lr

080046fe <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80046fe:	6883      	ldr	r3, [r0, #8]
 8004700:	f023 0301 	bic.w	r3, r3, #1
 8004704:	6083      	str	r3, [r0, #8]
}
 8004706:	2000      	movs	r0, #0
 8004708:	4770      	bx	lr

0800470a <USB_SetCurrentMode>:
{
 800470a:	b570      	push	{r4, r5, r6, lr}
 800470c:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800470e:	68c3      	ldr	r3, [r0, #12]
 8004710:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004714:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8004716:	2901      	cmp	r1, #1
 8004718:	d015      	beq.n	8004746 <USB_SetCurrentMode+0x3c>
  else if (mode == USB_DEVICE_MODE)
 800471a:	bb29      	cbnz	r1, 8004768 <USB_SetCurrentMode+0x5e>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800471c:	68c3      	ldr	r3, [r0, #12]
 800471e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004722:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8004724:	2400      	movs	r4, #0
      HAL_Delay(1U);
 8004726:	2601      	movs	r6, #1
 8004728:	4630      	mov	r0, r6
 800472a:	f7fc ffa7 	bl	800167c <HAL_Delay>
      ms++;
 800472e:	3401      	adds	r4, #1
  return ((USBx->GINTSTS) & 0x1U);
 8004730:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004732:	f013 0f01 	tst.w	r3, #1
 8004736:	d001      	beq.n	800473c <USB_SetCurrentMode+0x32>
 8004738:	2c32      	cmp	r4, #50	; 0x32
 800473a:	d1f5      	bne.n	8004728 <USB_SetCurrentMode+0x1e>
    return HAL_ERROR;
 800473c:	2c32      	cmp	r4, #50	; 0x32
 800473e:	bf14      	ite	ne
 8004740:	2000      	movne	r0, #0
 8004742:	2001      	moveq	r0, #1
}
 8004744:	bd70      	pop	{r4, r5, r6, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004746:	68c3      	ldr	r3, [r0, #12]
 8004748:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800474c:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 800474e:	2400      	movs	r4, #0
      HAL_Delay(1U);
 8004750:	2601      	movs	r6, #1
 8004752:	4630      	mov	r0, r6
 8004754:	f7fc ff92 	bl	800167c <HAL_Delay>
      ms++;
 8004758:	3401      	adds	r4, #1
  return ((USBx->GINTSTS) & 0x1U);
 800475a:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800475c:	f013 0f01 	tst.w	r3, #1
 8004760:	d1ec      	bne.n	800473c <USB_SetCurrentMode+0x32>
 8004762:	2c32      	cmp	r4, #50	; 0x32
 8004764:	d1f5      	bne.n	8004752 <USB_SetCurrentMode+0x48>
 8004766:	e7e9      	b.n	800473c <USB_SetCurrentMode+0x32>
    return HAL_ERROR;
 8004768:	2001      	movs	r0, #1
 800476a:	e7eb      	b.n	8004744 <USB_SetCurrentMode+0x3a>

0800476c <USB_FlushTxFifo>:
{
 800476c:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800476e:	2300      	movs	r3, #0
 8004770:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8004772:	4a11      	ldr	r2, [pc, #68]	; (80047b8 <USB_FlushTxFifo+0x4c>)
    count++;
 8004774:	9b01      	ldr	r3, [sp, #4]
 8004776:	3301      	adds	r3, #1
 8004778:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800477a:	9b01      	ldr	r3, [sp, #4]
 800477c:	4293      	cmp	r3, r2
 800477e:	d815      	bhi.n	80047ac <USB_FlushTxFifo+0x40>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004780:	6903      	ldr	r3, [r0, #16]
 8004782:	2b00      	cmp	r3, #0
 8004784:	daf6      	bge.n	8004774 <USB_FlushTxFifo+0x8>
  count = 0U;
 8004786:	2300      	movs	r3, #0
 8004788:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800478a:	0189      	lsls	r1, r1, #6
 800478c:	f041 0120 	orr.w	r1, r1, #32
 8004790:	6101      	str	r1, [r0, #16]
    if (count > 200000U)
 8004792:	4a09      	ldr	r2, [pc, #36]	; (80047b8 <USB_FlushTxFifo+0x4c>)
    count++;
 8004794:	9b01      	ldr	r3, [sp, #4]
 8004796:	3301      	adds	r3, #1
 8004798:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800479a:	9b01      	ldr	r3, [sp, #4]
 800479c:	4293      	cmp	r3, r2
 800479e:	d808      	bhi.n	80047b2 <USB_FlushTxFifo+0x46>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80047a0:	6903      	ldr	r3, [r0, #16]
 80047a2:	f013 0f20 	tst.w	r3, #32
 80047a6:	d1f5      	bne.n	8004794 <USB_FlushTxFifo+0x28>
  return HAL_OK;
 80047a8:	2000      	movs	r0, #0
 80047aa:	e000      	b.n	80047ae <USB_FlushTxFifo+0x42>
      return HAL_TIMEOUT;
 80047ac:	2003      	movs	r0, #3
}
 80047ae:	b002      	add	sp, #8
 80047b0:	4770      	bx	lr
      return HAL_TIMEOUT;
 80047b2:	2003      	movs	r0, #3
 80047b4:	e7fb      	b.n	80047ae <USB_FlushTxFifo+0x42>
 80047b6:	bf00      	nop
 80047b8:	00030d40 	.word	0x00030d40

080047bc <USB_FlushRxFifo>:
{
 80047bc:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80047be:	2300      	movs	r3, #0
 80047c0:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 80047c2:	4a10      	ldr	r2, [pc, #64]	; (8004804 <USB_FlushRxFifo+0x48>)
    count++;
 80047c4:	9b01      	ldr	r3, [sp, #4]
 80047c6:	3301      	adds	r3, #1
 80047c8:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 80047ca:	9b01      	ldr	r3, [sp, #4]
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d813      	bhi.n	80047f8 <USB_FlushRxFifo+0x3c>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80047d0:	6903      	ldr	r3, [r0, #16]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	daf6      	bge.n	80047c4 <USB_FlushRxFifo+0x8>
  count = 0U;
 80047d6:	2300      	movs	r3, #0
 80047d8:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80047da:	2310      	movs	r3, #16
 80047dc:	6103      	str	r3, [r0, #16]
    if (count > 200000U)
 80047de:	4a09      	ldr	r2, [pc, #36]	; (8004804 <USB_FlushRxFifo+0x48>)
    count++;
 80047e0:	9b01      	ldr	r3, [sp, #4]
 80047e2:	3301      	adds	r3, #1
 80047e4:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 80047e6:	9b01      	ldr	r3, [sp, #4]
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d808      	bhi.n	80047fe <USB_FlushRxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80047ec:	6903      	ldr	r3, [r0, #16]
 80047ee:	f013 0f10 	tst.w	r3, #16
 80047f2:	d1f5      	bne.n	80047e0 <USB_FlushRxFifo+0x24>
  return HAL_OK;
 80047f4:	2000      	movs	r0, #0
 80047f6:	e000      	b.n	80047fa <USB_FlushRxFifo+0x3e>
      return HAL_TIMEOUT;
 80047f8:	2003      	movs	r0, #3
}
 80047fa:	b002      	add	sp, #8
 80047fc:	4770      	bx	lr
      return HAL_TIMEOUT;
 80047fe:	2003      	movs	r0, #3
 8004800:	e7fb      	b.n	80047fa <USB_FlushRxFifo+0x3e>
 8004802:	bf00      	nop
 8004804:	00030d40 	.word	0x00030d40

08004808 <USB_WritePacket>:
{
 8004808:	b410      	push	{r4}
 800480a:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 800480e:	b974      	cbnz	r4, 800482e <USB_WritePacket+0x26>
    count32b = ((uint32_t)len + 3U) / 4U;
 8004810:	3303      	adds	r3, #3
 8004812:	ea4f 0c93 	mov.w	ip, r3, lsr #2
    for (i = 0U; i < count32b; i++)
 8004816:	2b03      	cmp	r3, #3
 8004818:	d909      	bls.n	800482e <USB_WritePacket+0x26>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800481a:	3201      	adds	r2, #1
 800481c:	eb00 3002 	add.w	r0, r0, r2, lsl #12
    for (i = 0U; i < count32b; i++)
 8004820:	2300      	movs	r3, #0
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004822:	f851 2b04 	ldr.w	r2, [r1], #4
 8004826:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 8004828:	3301      	adds	r3, #1
 800482a:	459c      	cmp	ip, r3
 800482c:	d8f9      	bhi.n	8004822 <USB_WritePacket+0x1a>
}
 800482e:	2000      	movs	r0, #0
 8004830:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004834:	4770      	bx	lr

08004836 <USB_ReadPacket>:
{
 8004836:	b570      	push	{r4, r5, r6, lr}
 8004838:	4606      	mov	r6, r0
  uint16_t remaining_bytes = len % 4U;
 800483a:	f002 0503 	and.w	r5, r2, #3
  for (i = 0U; i < count32b; i++)
 800483e:	ea5f 0c92 	movs.w	ip, r2, lsr #2
 8004842:	d01b      	beq.n	800487c <USB_ReadPacket+0x46>
  uint8_t *pDest = dest;
 8004844:	460a      	mov	r2, r1
  for (i = 0U; i < count32b; i++)
 8004846:	2300      	movs	r3, #0
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004848:	f500 5e80 	add.w	lr, r0, #4096	; 0x1000
 800484c:	f8de 4000 	ldr.w	r4, [lr]
 8004850:	f842 4b04 	str.w	r4, [r2], #4
  for (i = 0U; i < count32b; i++)
 8004854:	3301      	adds	r3, #1
 8004856:	459c      	cmp	ip, r3
 8004858:	d1f8      	bne.n	800484c <USB_ReadPacket+0x16>
    pDest++;
 800485a:	eb01 0083 	add.w	r0, r1, r3, lsl #2
  if (remaining_bytes != 0U)
 800485e:	b165      	cbz	r5, 800487a <USB_ReadPacket+0x44>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004860:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
 8004864:	6834      	ldr	r4, [r6, #0]
 8004866:	1941      	adds	r1, r0, r5
 8004868:	2300      	movs	r3, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800486a:	fa24 f203 	lsr.w	r2, r4, r3
 800486e:	f800 2b01 	strb.w	r2, [r0], #1
    } while (remaining_bytes != 0U);
 8004872:	3308      	adds	r3, #8
 8004874:	4288      	cmp	r0, r1
 8004876:	d1f8      	bne.n	800486a <USB_ReadPacket+0x34>
      pDest++;
 8004878:	4608      	mov	r0, r1
}
 800487a:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t *pDest = dest;
 800487c:	4608      	mov	r0, r1
 800487e:	e7ee      	b.n	800485e <USB_ReadPacket+0x28>

08004880 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8004880:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8004882:	6980      	ldr	r0, [r0, #24]
}
 8004884:	4010      	ands	r0, r2
 8004886:	4770      	bx	lr

08004888 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8004888:	6940      	ldr	r0, [r0, #20]
}
 800488a:	f000 0001 	and.w	r0, r0, #1
 800488e:	4770      	bx	lr

08004890 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004890:	b084      	sub	sp, #16
 8004892:	b570      	push	{r4, r5, r6, lr}
 8004894:	4604      	mov	r4, r0
 8004896:	a805      	add	r0, sp, #20
 8004898:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800489c:	4615      	mov	r5, r2
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800489e:	2300      	movs	r3, #0
 80048a0:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80048a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80048a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80048aa:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80048ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80048ae:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80048b2:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80048b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80048b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048ba:	63a3      	str	r3, [r4, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80048bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80048be:	f413 7f80 	tst.w	r3, #256	; 0x100
 80048c2:	d045      	beq.n	8004950 <USB_HostInit+0xc0>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80048c4:	9b07      	ldr	r3, [sp, #28]
 80048c6:	2b01      	cmp	r3, #1
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80048c8:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 80048cc:	bf0c      	ite	eq
 80048ce:	f043 0304 	orreq.w	r3, r3, #4
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80048d2:	f023 0304 	bicne.w	r3, r3, #4
 80048d6:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80048da:	2110      	movs	r1, #16
 80048dc:	4620      	mov	r0, r4
 80048de:	f7ff ff45 	bl	800476c <USB_FlushTxFifo>
 80048e2:	4606      	mov	r6, r0
  {
    ret = HAL_ERROR;
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80048e4:	4620      	mov	r0, r4
 80048e6:	f7ff ff69 	bl	80047bc <USB_FlushRxFifo>
 80048ea:	4306      	orrs	r6, r0
 80048ec:	f016 0fff 	tst.w	r6, #255	; 0xff
  {
    ret = HAL_ERROR;
 80048f0:	bf14      	ite	ne
 80048f2:	2001      	movne	r0, #1
 80048f4:	2000      	moveq	r0, #0
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80048f6:	b15d      	cbz	r5, 8004910 <USB_HostInit+0x80>
 80048f8:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
 80048fc:	2200      	movs	r2, #0
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80048fe:	f04f 36ff 	mov.w	r6, #4294967295
    USBx_HC(i)->HCINTMSK = 0U;
 8004902:	4611      	mov	r1, r2
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004904:	609e      	str	r6, [r3, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004906:	60d9      	str	r1, [r3, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004908:	3201      	adds	r2, #1
 800490a:	3320      	adds	r3, #32
 800490c:	4295      	cmp	r5, r2
 800490e:	d1f9      	bne.n	8004904 <USB_HostInit+0x74>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004910:	2300      	movs	r3, #0
 8004912:	61a3      	str	r3, [r4, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004914:	f04f 33ff 	mov.w	r3, #4294967295
 8004918:	6163      	str	r3, [r4, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800491a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800491c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004920:	d01d      	beq.n	800495e <USB_HostInit+0xce>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004922:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004926:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004928:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 800492c:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800492e:	4b10      	ldr	r3, [pc, #64]	; (8004970 <USB_HostInit+0xe0>)
 8004930:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004934:	9b08      	ldr	r3, [sp, #32]
 8004936:	b91b      	cbnz	r3, 8004940 <USB_HostInit+0xb0>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004938:	69a3      	ldr	r3, [r4, #24]
 800493a:	f043 0310 	orr.w	r3, r3, #16
 800493e:	61a3      	str	r3, [r4, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004940:	69a2      	ldr	r2, [r4, #24]
 8004942:	4b0c      	ldr	r3, [pc, #48]	; (8004974 <USB_HostInit+0xe4>)
 8004944:	4313      	orrs	r3, r2
 8004946:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
}
 8004948:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800494c:	b004      	add	sp, #16
 800494e:	4770      	bx	lr
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004950:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 8004954:	f023 0304 	bic.w	r3, r3, #4
 8004958:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
 800495c:	e7bd      	b.n	80048da <USB_HostInit+0x4a>
    USBx->GRXFSIZ  = 0x80U;
 800495e:	2380      	movs	r3, #128	; 0x80
 8004960:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004962:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 8004966:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004968:	4b03      	ldr	r3, [pc, #12]	; (8004978 <USB_HostInit+0xe8>)
 800496a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800496e:	e7e1      	b.n	8004934 <USB_HostInit+0xa4>
 8004970:	00e00300 	.word	0x00e00300
 8004974:	a3200008 	.word	0xa3200008
 8004978:	004000e0 	.word	0x004000e0

0800497c <USB_InitFSLSPClkSel>:
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800497c:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
 8004980:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 8004984:	f023 0303 	bic.w	r3, r3, #3
 8004988:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800498c:	f8d0 2400 	ldr.w	r2, [r0, #1024]	; 0x400
 8004990:	f001 0303 	and.w	r3, r1, #3
 8004994:	4313      	orrs	r3, r2
 8004996:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400

  if (freq == HCFG_48_MHZ)
 800499a:	2901      	cmp	r1, #1
 800499c:	d007      	beq.n	80049ae <USB_InitFSLSPClkSel+0x32>
  {
    USBx_HOST->HFIR = 48000U;
  }
  else if (freq == HCFG_6_MHZ)
 800499e:	2902      	cmp	r1, #2
  {
    USBx_HOST->HFIR = 6000U;
 80049a0:	bf04      	itt	eq
 80049a2:	f241 7370 	movweq	r3, #6000	; 0x1770
 80049a6:	f8cc 3004 	streq.w	r3, [ip, #4]
  {
    /* ... */
  }

  return HAL_OK;
}
 80049aa:	2000      	movs	r0, #0
 80049ac:	4770      	bx	lr
    USBx_HOST->HFIR = 48000U;
 80049ae:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80049b2:	f8cc 3004 	str.w	r3, [ip, #4]
 80049b6:	e7f8      	b.n	80049aa <USB_InitFSLSPClkSel+0x2e>

080049b8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80049b8:	b530      	push	{r4, r5, lr}
 80049ba:	b083      	sub	sp, #12
 80049bc:	4604      	mov	r4, r0
  uint32_t USBx_BASE = (uint32_t)USBx;

  __IO uint32_t hprt0 = 0U;
 80049be:	2500      	movs	r5, #0
 80049c0:	9501      	str	r5, [sp, #4]

  hprt0 = USBx_HPRT0;
 80049c2:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 80049c6:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80049c8:	9b01      	ldr	r3, [sp, #4]
 80049ca:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80049ce:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80049d0:	9b01      	ldr	r3, [sp, #4]
 80049d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049d6:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  HAL_Delay(100U);                                 /* See Note #1 */
 80049da:	2064      	movs	r0, #100	; 0x64
 80049dc:	f7fc fe4e 	bl	800167c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80049e0:	9b01      	ldr	r3, [sp, #4]
 80049e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049e6:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay(10U);
 80049ea:	200a      	movs	r0, #10
 80049ec:	f7fc fe46 	bl	800167c <HAL_Delay>

  return HAL_OK;
}
 80049f0:	4628      	mov	r0, r5
 80049f2:	b003      	add	sp, #12
 80049f4:	bd30      	pop	{r4, r5, pc}

080049f6 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80049f6:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 80049f8:	2300      	movs	r3, #0
 80049fa:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 80049fc:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8004a00:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004a02:	9b01      	ldr	r3, [sp, #4]
 8004a04:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004a08:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004a0a:	9b01      	ldr	r3, [sp, #4]
 8004a0c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8004a10:	d101      	bne.n	8004a16 <USB_DriveVbus+0x20>
 8004a12:	2901      	cmp	r1, #1
 8004a14:	d00c      	beq.n	8004a30 <USB_DriveVbus+0x3a>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004a16:	9b01      	ldr	r3, [sp, #4]
 8004a18:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8004a1c:	d005      	beq.n	8004a2a <USB_DriveVbus+0x34>
 8004a1e:	b921      	cbnz	r1, 8004a2a <USB_DriveVbus+0x34>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004a20:	9b01      	ldr	r3, [sp, #4]
 8004a22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a26:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK;
}
 8004a2a:	2000      	movs	r0, #0
 8004a2c:	b002      	add	sp, #8
 8004a2e:	4770      	bx	lr
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004a30:	9b01      	ldr	r3, [sp, #4]
 8004a32:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004a36:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004a3a:	9b01      	ldr	r3, [sp, #4]
 8004a3c:	e7f5      	b.n	8004a2a <USB_DriveVbus+0x34>

08004a3e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004a3e:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8004a40:	2300      	movs	r3, #0
 8004a42:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8004a44:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8004a48:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004a4a:	9801      	ldr	r0, [sp, #4]
}
 8004a4c:	f3c0 4041 	ubfx	r0, r0, #17, #2
 8004a50:	b002      	add	sp, #8
 8004a52:	4770      	bx	lr

08004a54 <USB_GetCurrentFrame>:
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004a54:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8004a58:	6880      	ldr	r0, [r0, #8]
}
 8004a5a:	b280      	uxth	r0, r0
 8004a5c:	4770      	bx	lr

08004a5e <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004a5e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a62:	4691      	mov	r9, r2
 8004a64:	461c      	mov	r4, r3
 8004a66:	f89d 5024 	ldrb.w	r5, [sp, #36]	; 0x24
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004a6a:	eb00 1641 	add.w	r6, r0, r1, lsl #5
 8004a6e:	f506 63a0 	add.w	r3, r6, #1280	; 0x500
 8004a72:	f04f 32ff 	mov.w	r2, #4294967295
 8004a76:	609a      	str	r2, [r3, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004a78:	2d03      	cmp	r5, #3
 8004a7a:	d87a      	bhi.n	8004b72 <USB_HC_Init+0x114>
 8004a7c:	e8df f005 	tbb	[pc, r5]
 8004a80:	2a026e02 	.word	0x2a026e02
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004a84:	f240 429d 	movw	r2, #1181	; 0x49d
 8004a88:	60da      	str	r2, [r3, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004a8a:	f019 0f80 	tst.w	r9, #128	; 0x80
 8004a8e:	d108      	bne.n	8004aa2 <USB_HC_Init+0x44>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
      }
      else
      {
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004a90:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8004a92:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004a96:	d023      	beq.n	8004ae0 <USB_HC_Init+0x82>
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8004a98:	68da      	ldr	r2, [r3, #12]
 8004a9a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8004a9e:	60da      	str	r2, [r3, #12]
 8004aa0:	e01e      	b.n	8004ae0 <USB_HC_Init+0x82>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004aa2:	68da      	ldr	r2, [r3, #12]
 8004aa4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004aa8:	60da      	str	r2, [r3, #12]
      ret = HAL_ERROR;
      break;
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8004aaa:	68da      	ldr	r2, [r3, #12]
 8004aac:	f042 0202 	orr.w	r2, r2, #2
 8004ab0:	60da      	str	r2, [r3, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004ab2:	f8d0 2418 	ldr.w	r2, [r0, #1048]	; 0x418
 8004ab6:	f001 070f 	and.w	r7, r1, #15
 8004aba:	2101      	movs	r1, #1
 8004abc:	40b9      	lsls	r1, r7
 8004abe:	4311      	orrs	r1, r2
 8004ac0:	f8c0 1418 	str.w	r1, [r0, #1048]	; 0x418

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004ac4:	6983      	ldr	r3, [r0, #24]
 8004ac6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004aca:	6183      	str	r3, [r0, #24]
 8004acc:	2700      	movs	r7, #0

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004ace:	f44f 4800 	mov.w	r8, #32768	; 0x8000
 8004ad2:	e019      	b.n	8004b08 <USB_HC_Init+0xaa>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004ad4:	f240 629d 	movw	r2, #1693	; 0x69d
 8004ad8:	60da      	str	r2, [r3, #12]
      if ((epnum & 0x80U) == 0x80U)
 8004ada:	f019 0f80 	tst.w	r9, #128	; 0x80
 8004ade:	d138      	bne.n	8004b52 <USB_HC_Init+0xf4>
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8004ae0:	68da      	ldr	r2, [r3, #12]
 8004ae2:	f042 0202 	orr.w	r2, r2, #2
 8004ae6:	60da      	str	r2, [r3, #12]
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004ae8:	f8d0 7418 	ldr.w	r7, [r0, #1048]	; 0x418
 8004aec:	f001 010f 	and.w	r1, r1, #15
 8004af0:	2301      	movs	r3, #1
 8004af2:	fa03 f101 	lsl.w	r1, r3, r1
 8004af6:	4339      	orrs	r1, r7
 8004af8:	f8c0 1418 	str.w	r1, [r0, #1048]	; 0x418
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004afc:	6983      	ldr	r3, [r0, #24]
 8004afe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004b02:	6183      	str	r3, [r0, #24]
 8004b04:	2700      	movs	r7, #0
  }
  else
  {
    HCcharEpDir = 0U;
 8004b06:	46b8      	mov	r8, r7
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8004b08:	f7ff ff99 	bl	8004a3e <USB_GetHostSpeed>

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8004b0c:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d048      	beq.n	8004ba6 <USB_HC_Init+0x148>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004b14:	2100      	movs	r1, #0
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004b16:	05a3      	lsls	r3, r4, #22
 8004b18:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004b1c:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
 8004b20:	f3c4 040a 	ubfx	r4, r4, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004b24:	4323      	orrs	r3, r4
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004b26:	ea4f 29c9 	mov.w	r9, r9, lsl #11
 8004b2a:	f409 49f0 	and.w	r9, r9, #30720	; 0x7800
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004b2e:	ea43 0309 	orr.w	r3, r3, r9
 8004b32:	04aa      	lsls	r2, r5, #18
 8004b34:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8004b38:	4313      	orrs	r3, r2
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004b3a:	ea43 0308 	orr.w	r3, r3, r8
 8004b3e:	430b      	orrs	r3, r1
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004b40:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8004b44:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
 8004b48:	2d01      	cmp	r5, #1
 8004b4a:	d032      	beq.n	8004bb2 <USB_HC_Init+0x154>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
  }

  return ret;
}
 8004b4c:	4638      	mov	r0, r7
 8004b4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004b52:	68da      	ldr	r2, [r3, #12]
 8004b54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b58:	60da      	str	r2, [r3, #12]
 8004b5a:	e7a6      	b.n	8004aaa <USB_HC_Init+0x4c>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004b5c:	f240 2225 	movw	r2, #549	; 0x225
 8004b60:	60da      	str	r2, [r3, #12]
      if ((epnum & 0x80U) == 0x80U)
 8004b62:	f019 0f80 	tst.w	r9, #128	; 0x80
 8004b66:	d0bb      	beq.n	8004ae0 <USB_HC_Init+0x82>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004b68:	68da      	ldr	r2, [r3, #12]
 8004b6a:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004b6e:	60da      	str	r2, [r3, #12]
 8004b70:	e79b      	b.n	8004aaa <USB_HC_Init+0x4c>
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8004b72:	68da      	ldr	r2, [r3, #12]
 8004b74:	f042 0202 	orr.w	r2, r2, #2
 8004b78:	60da      	str	r2, [r3, #12]
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004b7a:	f8d0 7418 	ldr.w	r7, [r0, #1048]	; 0x418
 8004b7e:	f001 010f 	and.w	r1, r1, #15
 8004b82:	2301      	movs	r3, #1
 8004b84:	408b      	lsls	r3, r1
 8004b86:	433b      	orrs	r3, r7
 8004b88:	f8c0 3418 	str.w	r3, [r0, #1048]	; 0x418
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004b8c:	6983      	ldr	r3, [r0, #24]
 8004b8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004b92:	6183      	str	r3, [r0, #24]
      ret = HAL_ERROR;
 8004b94:	2701      	movs	r7, #1
 8004b96:	f019 0f80 	tst.w	r9, #128	; 0x80
 8004b9a:	bf14      	ite	ne
 8004b9c:	f44f 4800 	movne.w	r8, #32768	; 0x8000
 8004ba0:	f04f 0800 	moveq.w	r8, #0
 8004ba4:	e7b0      	b.n	8004b08 <USB_HC_Init+0xaa>
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004ba6:	2802      	cmp	r0, #2
 8004ba8:	bf0c      	ite	eq
 8004baa:	2100      	moveq	r1, #0
 8004bac:	f44f 3100 	movne.w	r1, #131072	; 0x20000
 8004bb0:	e7b1      	b.n	8004b16 <USB_HC_Init+0xb8>
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004bb2:	f8d6 3500 	ldr.w	r3, [r6, #1280]	; 0x500
 8004bb6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004bba:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
  return ret;
 8004bbe:	e7c5      	b.n	8004b4c <USB_HC_Init+0xee>

08004bc0 <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004bc0:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8004bc4:	6940      	ldr	r0, [r0, #20]
}
 8004bc6:	b280      	uxth	r0, r0
 8004bc8:	4770      	bx	lr

08004bca <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004bca:	b430      	push	{r4, r5}
 8004bcc:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  __IO uint32_t count = 0U;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	9301      	str	r3, [sp, #4]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004bd2:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8004bd6:	f501 62a0 	add.w	r2, r1, #1280	; 0x500
 8004bda:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8004bde:	0c9b      	lsrs	r3, r3, #18
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8004be0:	f8d1 5500 	ldr.w	r5, [r1, #1280]	; 0x500

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8004be4:	6884      	ldr	r4, [r0, #8]
 8004be6:	f014 0f20 	tst.w	r4, #32
 8004bea:	d001      	beq.n	8004bf0 <USB_HC_Halt+0x26>
 8004bec:	2d00      	cmp	r5, #0
 8004bee:	da2d      	bge.n	8004c4c <USB_HC_Halt+0x82>
  {
    return HAL_OK;
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004bf0:	f013 0f01 	tst.w	r3, #1
 8004bf4:	d12e      	bne.n	8004c54 <USB_HC_Halt+0x8a>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004bf6:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8004bfa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004bfe:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004c02:	6883      	ldr	r3, [r0, #8]
 8004c04:	f013 0f20 	tst.w	r3, #32
 8004c08:	d120      	bne.n	8004c4c <USB_HC_Halt+0x82>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004c0a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004c0c:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
 8004c10:	d116      	bne.n	8004c40 <USB_HC_Halt+0x76>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004c12:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8004c16:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004c1a:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004c1e:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8004c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004c26:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
        do
        {
          count++;
 8004c2a:	9b01      	ldr	r3, [sp, #4]
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	9301      	str	r3, [sp, #4]

          if (count > 1000U)
 8004c30:	9b01      	ldr	r3, [sp, #4]
 8004c32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c36:	d809      	bhi.n	8004c4c <USB_HC_Halt+0x82>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004c38:	6813      	ldr	r3, [r2, #0]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	dbf5      	blt.n	8004c2a <USB_HC_Halt+0x60>
 8004c3e:	e005      	b.n	8004c4c <USB_HC_Halt+0x82>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004c40:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8004c44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004c48:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
 8004c4c:	2000      	movs	r0, #0
 8004c4e:	b002      	add	sp, #8
 8004c50:	bc30      	pop	{r4, r5}
 8004c52:	4770      	bx	lr
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004c54:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8004c58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c5c:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004c60:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 8004c64:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
 8004c68:	d116      	bne.n	8004c98 <USB_HC_Halt+0xce>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004c6a:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8004c6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004c72:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004c76:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8004c7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004c7e:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
        count++;
 8004c82:	9b01      	ldr	r3, [sp, #4]
 8004c84:	3301      	adds	r3, #1
 8004c86:	9301      	str	r3, [sp, #4]
        if (count > 1000U)
 8004c88:	9b01      	ldr	r3, [sp, #4]
 8004c8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c8e:	d8dd      	bhi.n	8004c4c <USB_HC_Halt+0x82>
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004c90:	6813      	ldr	r3, [r2, #0]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	dbf5      	blt.n	8004c82 <USB_HC_Halt+0xb8>
 8004c96:	e7d9      	b.n	8004c4c <USB_HC_Halt+0x82>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004c98:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8004c9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ca0:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8004ca4:	e7d2      	b.n	8004c4c <USB_HC_Halt+0x82>
	...

08004ca8 <USB_DoPing>:
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t chnum = (uint32_t)ch_num;
  uint32_t num_packets = 1U;
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004ca8:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8004cac:	4a06      	ldr	r2, [pc, #24]	; (8004cc8 <USB_DoPing+0x20>)
 8004cae:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8004cb2:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004cb6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004cba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8004cbe:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500

  return HAL_OK;
}
 8004cc2:	2000      	movs	r0, #0
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	80080000 	.word	0x80080000

08004ccc <USB_HC_StartXfer>:
{
 8004ccc:	b530      	push	{r4, r5, lr}
 8004cce:	b085      	sub	sp, #20
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004cd0:	784b      	ldrb	r3, [r1, #1]
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004cd2:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8004cd4:	f414 7f80 	tst.w	r4, #256	; 0x100
 8004cd8:	d007      	beq.n	8004cea <USB_HC_StartXfer+0x1e>
 8004cda:	790c      	ldrb	r4, [r1, #4]
 8004cdc:	b92c      	cbnz	r4, 8004cea <USB_HC_StartXfer+0x1e>
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8004cde:	2a01      	cmp	r2, #1
 8004ce0:	d064      	beq.n	8004dac <USB_HC_StartXfer+0xe0>
    if ((dma == 0U) && (hc->do_ping == 1U))
 8004ce2:	b912      	cbnz	r2, 8004cea <USB_HC_StartXfer+0x1e>
 8004ce4:	794c      	ldrb	r4, [r1, #5]
 8004ce6:	2c01      	cmp	r4, #1
 8004ce8:	d06d      	beq.n	8004dc6 <USB_HC_StartXfer+0xfa>
  if (hc->xfer_len > 0U)
 8004cea:	694d      	ldr	r5, [r1, #20]
 8004cec:	2d00      	cmp	r5, #0
 8004cee:	d06e      	beq.n	8004dce <USB_HC_StartXfer+0x102>
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004cf0:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 8004cf4:	1e6c      	subs	r4, r5, #1
 8004cf6:	4464      	add	r4, ip
 8004cf8:	fbb4 f4fc 	udiv	r4, r4, ip
 8004cfc:	b2a4      	uxth	r4, r4
 8004cfe:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8004d02:	bf28      	it	cs
 8004d04:	f44f 7480 	movcs.w	r4, #256	; 0x100
 8004d08:	46a4      	mov	ip, r4
  if (hc->ep_is_in != 0U)
 8004d0a:	78cc      	ldrb	r4, [r1, #3]
 8004d0c:	b114      	cbz	r4, 8004d14 <USB_HC_StartXfer+0x48>
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004d0e:	890d      	ldrh	r5, [r1, #8]
 8004d10:	fb0c f505 	mul.w	r5, ip, r5
 8004d14:	610d      	str	r5, [r1, #16]
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004d16:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8004d1a:	f503 6ea0 	add.w	lr, r3, #1280	; 0x500
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004d1e:	7a8c      	ldrb	r4, [r1, #10]
 8004d20:	0764      	lsls	r4, r4, #29
 8004d22:	f004 44c0 	and.w	r4, r4, #1610612736	; 0x60000000
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004d26:	ea44 44cc 	orr.w	r4, r4, ip, lsl #19
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004d2a:	f3c5 0512 	ubfx	r5, r5, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004d2e:	432c      	orrs	r4, r5
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004d30:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
  if (dma != 0U)
 8004d34:	b112      	cbz	r2, 8004d3c <USB_HC_StartXfer+0x70>
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004d36:	68cc      	ldr	r4, [r1, #12]
 8004d38:	f8c3 4514 	str.w	r4, [r3, #1300]	; 0x514
  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004d3c:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
 8004d40:	f8dc 4008 	ldr.w	r4, [ip, #8]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004d44:	f8d3 5500 	ldr.w	r5, [r3, #1280]	; 0x500
 8004d48:	f025 5500 	bic.w	r5, r5, #536870912	; 0x20000000
 8004d4c:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8004d50:	f8d3 5500 	ldr.w	r5, [r3, #1280]	; 0x500
  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004d54:	f084 0401 	eor.w	r4, r4, #1
 8004d58:	f004 0401 	and.w	r4, r4, #1
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8004d5c:	ea45 7444 	orr.w	r4, r5, r4, lsl #29
 8004d60:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004d64:	f8d3 4500 	ldr.w	r4, [r3, #1280]	; 0x500
 8004d68:	9403      	str	r4, [sp, #12]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004d6a:	9c03      	ldr	r4, [sp, #12]
 8004d6c:	f024 4480 	bic.w	r4, r4, #1073741824	; 0x40000000
 8004d70:	9403      	str	r4, [sp, #12]
  if (hc->ep_is_in != 0U)
 8004d72:	78cc      	ldrb	r4, [r1, #3]
 8004d74:	2c00      	cmp	r4, #0
 8004d76:	d02d      	beq.n	8004dd4 <USB_HC_StartXfer+0x108>
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004d78:	9c03      	ldr	r4, [sp, #12]
 8004d7a:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8004d7e:	9403      	str	r4, [sp, #12]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004d80:	9c03      	ldr	r4, [sp, #12]
 8004d82:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8004d86:	9403      	str	r4, [sp, #12]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004d88:	9c03      	ldr	r4, [sp, #12]
 8004d8a:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
  if (dma != 0U) /* dma mode */
 8004d8e:	2a00      	cmp	r2, #0
 8004d90:	d137      	bne.n	8004e02 <USB_HC_StartXfer+0x136>
  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004d92:	78cb      	ldrb	r3, [r1, #3]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d134      	bne.n	8004e02 <USB_HC_StartXfer+0x136>
 8004d98:	694b      	ldr	r3, [r1, #20]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d031      	beq.n	8004e02 <USB_HC_StartXfer+0x136>
    switch (hc->ep_type)
 8004d9e:	79ca      	ldrb	r2, [r1, #7]
 8004da0:	2a03      	cmp	r2, #3
 8004da2:	d827      	bhi.n	8004df4 <USB_HC_StartXfer+0x128>
 8004da4:	e8df f002 	tbb	[pc, r2]
 8004da8:	301b301b 	.word	0x301b301b
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8004dac:	79cc      	ldrb	r4, [r1, #7]
 8004dae:	f014 0ffd 	tst.w	r4, #253	; 0xfd
 8004db2:	d19a      	bne.n	8004cea <USB_HC_StartXfer+0x1e>
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8004db4:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8004db8:	f8d4 550c 	ldr.w	r5, [r4, #1292]	; 0x50c
 8004dbc:	f025 0570 	bic.w	r5, r5, #112	; 0x70
 8004dc0:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
 8004dc4:	e791      	b.n	8004cea <USB_HC_StartXfer+0x1e>
      (void)USB_DoPing(USBx, hc->ch_num);
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	f7ff ff6e 	bl	8004ca8 <USB_DoPing>
      return HAL_OK;
 8004dcc:	e019      	b.n	8004e02 <USB_HC_StartXfer+0x136>
    num_packets = 1U;
 8004dce:	f04f 0c01 	mov.w	ip, #1
 8004dd2:	e79a      	b.n	8004d0a <USB_HC_StartXfer+0x3e>
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004dd4:	9c03      	ldr	r4, [sp, #12]
 8004dd6:	f424 4400 	bic.w	r4, r4, #32768	; 0x8000
 8004dda:	9403      	str	r4, [sp, #12]
 8004ddc:	e7d0      	b.n	8004d80 <USB_HC_StartXfer+0xb4>
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8004dde:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8004de0:	b292      	uxth	r2, r2
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004de2:	3303      	adds	r3, #3
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8004de4:	f3c3 038f 	ubfx	r3, r3, #2, #16
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d203      	bcs.n	8004df4 <USB_HC_StartXfer+0x128>
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8004dec:	6983      	ldr	r3, [r0, #24]
 8004dee:	f043 0320 	orr.w	r3, r3, #32
 8004df2:	6183      	str	r3, [r0, #24]
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8004df4:	2300      	movs	r3, #0
 8004df6:	9300      	str	r3, [sp, #0]
 8004df8:	8a8b      	ldrh	r3, [r1, #20]
 8004dfa:	784a      	ldrb	r2, [r1, #1]
 8004dfc:	68c9      	ldr	r1, [r1, #12]
 8004dfe:	f7ff fd03 	bl	8004808 <USB_WritePacket>
}
 8004e02:	2000      	movs	r0, #0
 8004e04:	b005      	add	sp, #20
 8004e06:	bd30      	pop	{r4, r5, pc}
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8004e08:	f8dc 2010 	ldr.w	r2, [ip, #16]
 8004e0c:	b292      	uxth	r2, r2
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004e0e:	3303      	adds	r3, #3
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8004e10:	f3c3 038f 	ubfx	r3, r3, #2, #16
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d2ed      	bcs.n	8004df4 <USB_HC_StartXfer+0x128>
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8004e18:	6983      	ldr	r3, [r0, #24]
 8004e1a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e1e:	6183      	str	r3, [r0, #24]
 8004e20:	e7e8      	b.n	8004df4 <USB_HC_StartXfer+0x128>

08004e22 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004e22:	b530      	push	{r4, r5, lr}
 8004e24:	b083      	sub	sp, #12
 8004e26:	4604      	mov	r4, r0
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t count = 0U;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	9301      	str	r3, [sp, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004e2c:	6883      	ldr	r3, [r0, #8]
 8004e2e:	f023 0301 	bic.w	r3, r3, #1
 8004e32:	6083      	str	r3, [r0, #8]
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004e34:	2110      	movs	r1, #16
 8004e36:	f7ff fc99 	bl	800476c <USB_FlushTxFifo>
 8004e3a:	4605      	mov	r5, r0
  {
    ret = HAL_ERROR;
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004e3c:	4620      	mov	r0, r4
 8004e3e:	f7ff fcbd 	bl	80047bc <USB_FlushRxFifo>
 8004e42:	4305      	orrs	r5, r0
 8004e44:	f015 0fff 	tst.w	r5, #255	; 0xff
  {
    ret = HAL_ERROR;
 8004e48:	bf14      	ite	ne
 8004e4a:	2001      	movne	r0, #1
 8004e4c:	2000      	moveq	r0, #0
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8004e4e:	f504 61a0 	add.w	r1, r4, #1280	; 0x500
 8004e52:	f504 6ce0 	add.w	ip, r4, #1792	; 0x700
    ret = HAL_ERROR;
 8004e56:	460a      	mov	r2, r1
  {
    value = USBx_HC(i)->HCCHAR;
 8004e58:	6813      	ldr	r3, [r2, #0]
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004e5a:	f023 2380 	bic.w	r3, r3, #2147516416	; 0x80008000
 8004e5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 8004e62:	f842 3b20 	str.w	r3, [r2], #32
  for (i = 0U; i <= 15U; i++)
 8004e66:	4562      	cmp	r2, ip
 8004e68:	d1f6      	bne.n	8004e58 <USB_StopHost+0x36>
 8004e6a:	e002      	b.n	8004e72 <USB_StopHost+0x50>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8004e6c:	3120      	adds	r1, #32
 8004e6e:	4561      	cmp	r1, ip
 8004e70:	d011      	beq.n	8004e96 <USB_StopHost+0x74>
  {
    value = USBx_HC(i)->HCCHAR;
 8004e72:	460a      	mov	r2, r1
 8004e74:	680b      	ldr	r3, [r1, #0]
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004e76:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004e7a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 8004e7e:	600b      	str	r3, [r1, #0]

    do
    {
      count++;
 8004e80:	9b01      	ldr	r3, [sp, #4]
 8004e82:	3301      	adds	r3, #1
 8004e84:	9301      	str	r3, [sp, #4]

      if (count > 1000U)
 8004e86:	9b01      	ldr	r3, [sp, #4]
 8004e88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e8c:	d8ee      	bhi.n	8004e6c <USB_StopHost+0x4a>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004e8e:	6813      	ldr	r3, [r2, #0]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	dbf5      	blt.n	8004e80 <USB_StopHost+0x5e>
 8004e94:	e7ea      	b.n	8004e6c <USB_StopHost+0x4a>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8004e96:	f04f 33ff 	mov.w	r3, #4294967295
 8004e9a:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004e9e:	6163      	str	r3, [r4, #20]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004ea0:	68a3      	ldr	r3, [r4, #8]
 8004ea2:	f043 0301 	orr.w	r3, r3, #1
 8004ea6:	60a3      	str	r3, [r4, #8]

  (void)USB_EnableGlobalInt(USBx);

  return ret;
}
 8004ea8:	b003      	add	sp, #12
 8004eaa:	bd30      	pop	{r4, r5, pc}

08004eac <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004eac:	b508      	push	{r3, lr}
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8004eae:	4903      	ldr	r1, [pc, #12]	; (8004ebc <MX_FATFS_Init+0x10>)
 8004eb0:	4803      	ldr	r0, [pc, #12]	; (8004ec0 <MX_FATFS_Init+0x14>)
 8004eb2:	f003 fce3 	bl	800887c <FATFS_LinkDriver>
 8004eb6:	4b03      	ldr	r3, [pc, #12]	; (8004ec4 <MX_FATFS_Init+0x18>)
 8004eb8:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004eba:	bd08      	pop	{r3, pc}
 8004ebc:	20002fe8 	.word	0x20002fe8
 8004ec0:	08009874 	.word	0x08009874
 8004ec4:	20002fec 	.word	0x20002fec

08004ec8 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 8004ec8:	2000      	movs	r0, #0
 8004eca:	4770      	bx	lr

08004ecc <USBH_initialize>:
DSTATUS USBH_initialize(BYTE lun)
{
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
}
 8004ecc:	2000      	movs	r0, #0
 8004ece:	4770      	bx	lr

08004ed0 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8004ed0:	b508      	push	{r3, lr}
 8004ed2:	4601      	mov	r1, r0
  DRESULT res = RES_ERROR;

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8004ed4:	4803      	ldr	r0, [pc, #12]	; (8004ee4 <USBH_status+0x14>)
 8004ed6:	f000 fb45 	bl	8005564 <USBH_MSC_UnitIsReady>
  {
    res = RES_ERROR;
  }

  return res;
}
 8004eda:	fab0 f080 	clz	r0, r0
 8004ede:	0940      	lsrs	r0, r0, #5
 8004ee0:	bd08      	pop	{r3, pc}
 8004ee2:	bf00      	nop
 8004ee4:	20003028 	.word	0x20003028

08004ee8 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8004ee8:	b510      	push	{r4, lr}
 8004eea:	b090      	sub	sp, #64	; 0x40
 8004eec:	4604      	mov	r4, r0
  DRESULT res = RES_ERROR;
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8004eee:	9300      	str	r3, [sp, #0]
 8004ef0:	460b      	mov	r3, r1
 8004ef2:	4601      	mov	r1, r0
 8004ef4:	480c      	ldr	r0, [pc, #48]	; (8004f28 <USBH_read+0x40>)
 8004ef6:	f000 fb6c 	bl	80055d2 <USBH_MSC_Read>
 8004efa:	b908      	cbnz	r0, 8004f00 <USBH_read+0x18>
      break;
    }
  }

  return res;
}
 8004efc:	b010      	add	sp, #64	; 0x40
 8004efe:	bd10      	pop	{r4, pc}
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8004f00:	aa03      	add	r2, sp, #12
 8004f02:	4621      	mov	r1, r4
 8004f04:	4808      	ldr	r0, [pc, #32]	; (8004f28 <USBH_read+0x40>)
 8004f06:	f000 fb3f 	bl	8005588 <USBH_MSC_GetLUNInfo>
    switch (info.sense.asc)
 8004f0a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8004f0e:	2b28      	cmp	r3, #40	; 0x28
 8004f10:	d006      	beq.n	8004f20 <USBH_read+0x38>
 8004f12:	2b3a      	cmp	r3, #58	; 0x3a
 8004f14:	d006      	beq.n	8004f24 <USBH_read+0x3c>
      res = RES_NOTRDY;
 8004f16:	2b04      	cmp	r3, #4
 8004f18:	bf14      	ite	ne
 8004f1a:	2001      	movne	r0, #1
 8004f1c:	2003      	moveq	r0, #3
 8004f1e:	e7ed      	b.n	8004efc <USBH_read+0x14>
 8004f20:	2003      	movs	r0, #3
 8004f22:	e7eb      	b.n	8004efc <USBH_read+0x14>
 8004f24:	2003      	movs	r0, #3
 8004f26:	e7e9      	b.n	8004efc <USBH_read+0x14>
 8004f28:	20003028 	.word	0x20003028

08004f2c <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8004f2c:	b530      	push	{r4, r5, lr}
 8004f2e:	b08f      	sub	sp, #60	; 0x3c
 8004f30:	460c      	mov	r4, r1
 8004f32:	4615      	mov	r5, r2
  DRESULT res = RES_ERROR;
  MSC_LUNTypeDef info;

  switch (cmd)
 8004f34:	2903      	cmp	r1, #3
 8004f36:	d803      	bhi.n	8004f40 <USBH_ioctl+0x14>
 8004f38:	e8df f001 	tbb	[pc, r1]
 8004f3c:	170d0422 	.word	0x170d0422
 8004f40:	2004      	movs	r0, #4
 8004f42:	e01e      	b.n	8004f82 <USBH_ioctl+0x56>
    res = RES_OK;
    break;

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8004f44:	aa01      	add	r2, sp, #4
 8004f46:	4601      	mov	r1, r0
 8004f48:	4812      	ldr	r0, [pc, #72]	; (8004f94 <USBH_ioctl+0x68>)
 8004f4a:	f000 fb1d 	bl	8005588 <USBH_MSC_GetLUNInfo>
 8004f4e:	b9d0      	cbnz	r0, 8004f86 <USBH_ioctl+0x5a>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8004f50:	9b02      	ldr	r3, [sp, #8]
 8004f52:	602b      	str	r3, [r5, #0]
      res = RES_OK;
 8004f54:	e015      	b.n	8004f82 <USBH_ioctl+0x56>
    }
    break;

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8004f56:	aa01      	add	r2, sp, #4
 8004f58:	4601      	mov	r1, r0
 8004f5a:	480e      	ldr	r0, [pc, #56]	; (8004f94 <USBH_ioctl+0x68>)
 8004f5c:	f000 fb14 	bl	8005588 <USBH_MSC_GetLUNInfo>
 8004f60:	b998      	cbnz	r0, 8004f8a <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8004f62:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8004f66:	602b      	str	r3, [r5, #0]
      res = RES_OK;
 8004f68:	e00b      	b.n	8004f82 <USBH_ioctl+0x56>
    break;

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8004f6a:	aa01      	add	r2, sp, #4
 8004f6c:	4601      	mov	r1, r0
 8004f6e:	4809      	ldr	r0, [pc, #36]	; (8004f94 <USBH_ioctl+0x68>)
 8004f70:	f000 fb0a 	bl	8005588 <USBH_MSC_GetLUNInfo>
 8004f74:	b958      	cbnz	r0, 8004f8e <USBH_ioctl+0x62>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8004f76:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8004f7a:	0a5b      	lsrs	r3, r3, #9
 8004f7c:	602b      	str	r3, [r5, #0]
      res = RES_OK;
 8004f7e:	e000      	b.n	8004f82 <USBH_ioctl+0x56>
    res = RES_OK;
 8004f80:	4608      	mov	r0, r1
  default:
    res = RES_PARERR;
  }

  return res;
}
 8004f82:	b00f      	add	sp, #60	; 0x3c
 8004f84:	bd30      	pop	{r4, r5, pc}
      res = RES_ERROR;
 8004f86:	4620      	mov	r0, r4
 8004f88:	e7fb      	b.n	8004f82 <USBH_ioctl+0x56>
      res = RES_ERROR;
 8004f8a:	2001      	movs	r0, #1
 8004f8c:	e7f9      	b.n	8004f82 <USBH_ioctl+0x56>
      res = RES_ERROR;
 8004f8e:	2001      	movs	r0, #1
 8004f90:	e7f7      	b.n	8004f82 <USBH_ioctl+0x56>
 8004f92:	bf00      	nop
 8004f94:	20003028 	.word	0x20003028

08004f98 <USBH_write>:
{
 8004f98:	b510      	push	{r4, lr}
 8004f9a:	b090      	sub	sp, #64	; 0x40
 8004f9c:	4604      	mov	r4, r0
  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8004f9e:	9300      	str	r3, [sp, #0]
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	4601      	mov	r1, r0
 8004fa4:	480f      	ldr	r0, [pc, #60]	; (8004fe4 <USBH_write+0x4c>)
 8004fa6:	f000 fb64 	bl	8005672 <USBH_MSC_Write>
 8004faa:	b908      	cbnz	r0, 8004fb0 <USBH_write+0x18>
}
 8004fac:	b010      	add	sp, #64	; 0x40
 8004fae:	bd10      	pop	{r4, pc}
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8004fb0:	aa03      	add	r2, sp, #12
 8004fb2:	4621      	mov	r1, r4
 8004fb4:	480b      	ldr	r0, [pc, #44]	; (8004fe4 <USBH_write+0x4c>)
 8004fb6:	f000 fae7 	bl	8005588 <USBH_MSC_GetLUNInfo>
    switch (info.sense.asc)
 8004fba:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8004fbe:	2b27      	cmp	r3, #39	; 0x27
 8004fc0:	d00c      	beq.n	8004fdc <USBH_write+0x44>
 8004fc2:	d906      	bls.n	8004fd2 <USBH_write+0x3a>
 8004fc4:	2b28      	cmp	r3, #40	; 0x28
 8004fc6:	d00b      	beq.n	8004fe0 <USBH_write+0x48>
 8004fc8:	2b3a      	cmp	r3, #58	; 0x3a
 8004fca:	bf14      	ite	ne
 8004fcc:	2001      	movne	r0, #1
 8004fce:	2003      	moveq	r0, #3
 8004fd0:	e7ec      	b.n	8004fac <USBH_write+0x14>
 8004fd2:	2b04      	cmp	r3, #4
 8004fd4:	bf14      	ite	ne
 8004fd6:	2001      	movne	r0, #1
 8004fd8:	2003      	moveq	r0, #3
 8004fda:	e7e7      	b.n	8004fac <USBH_write+0x14>
      res = RES_WRPRT;
 8004fdc:	2002      	movs	r0, #2
 8004fde:	e7e5      	b.n	8004fac <USBH_write+0x14>
    switch (info.sense.asc)
 8004fe0:	2003      	movs	r0, #3
 8004fe2:	e7e3      	b.n	8004fac <USBH_write+0x14>
 8004fe4:	20003028 	.word	0x20003028

08004fe8 <USBH_MSC_SOFProcess>:
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
}
 8004fe8:	2000      	movs	r0, #0
 8004fea:	4770      	bx	lr

08004fec <USBH_MSC_Process>:
{
 8004fec:	b570      	push	{r4, r5, r6, lr}
 8004fee:	4605      	mov	r5, r0
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8004ff0:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8004ff4:	69de      	ldr	r6, [r3, #28]
  switch (MSC_Handle->state)
 8004ff6:	7b30      	ldrb	r0, [r6, #12]
 8004ff8:	b118      	cbz	r0, 8005002 <USBH_MSC_Process+0x16>
  USBH_StatusTypeDef error = USBH_BUSY;
 8004ffa:	3801      	subs	r0, #1
 8004ffc:	bf18      	it	ne
 8004ffe:	2001      	movne	r0, #1
}
 8005000:	bd70      	pop	{r4, r5, r6, pc}
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8005002:	f8b6 10f8 	ldrh.w	r1, [r6, #248]	; 0xf8
 8005006:	7833      	ldrb	r3, [r6, #0]
 8005008:	428b      	cmp	r3, r1
 800500a:	f240 8118 	bls.w	800523e <USBH_MSC_Process+0x252>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800500e:	2334      	movs	r3, #52	; 0x34
 8005010:	fb03 6301 	mla	r3, r3, r1, r6
 8005014:	2201      	movs	r2, #1
 8005016:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800501a:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800501e:	2b08      	cmp	r3, #8
 8005020:	f200 8119 	bhi.w	8005256 <USBH_MSC_Process+0x26a>
 8005024:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005028:	01170009 	.word	0x01170009
 800502c:	00870044 	.word	0x00870044
 8005030:	00bc0015 	.word	0x00bc0015
 8005034:	01170117 	.word	0x01170117
 8005038:	0106      	.short	0x0106
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800503a:	2334      	movs	r3, #52	; 0x34
 800503c:	fb03 6101 	mla	r1, r3, r1, r6
 8005040:	2304      	movs	r3, #4
 8005042:	f881 3090 	strb.w	r3, [r1, #144]	; 0x90
            MSC_Handle->timer = phost->Timer;
 8005046:	f8d5 33c4 	ldr.w	r3, [r5, #964]	; 0x3c4
 800504a:	f8c6 30fc 	str.w	r3, [r6, #252]	; 0xfc
  USBH_StatusTypeDef error = USBH_BUSY;
 800504e:	2001      	movs	r0, #1
            break;
 8005050:	e7d6      	b.n	8005000 <USBH_MSC_Process+0x14>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8005052:	2234      	movs	r2, #52	; 0x34
 8005054:	fb02 6201 	mla	r2, r2, r1, r6
 8005058:	329f      	adds	r2, #159	; 0x9f
 800505a:	b2c9      	uxtb	r1, r1
 800505c:	4628      	mov	r0, r5
 800505e:	f000 fd29 	bl	8005ab4 <USBH_MSC_SCSI_Inquiry>
            if (scsi_status == USBH_OK)
 8005062:	b948      	cbnz	r0, 8005078 <USBH_MSC_Process+0x8c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8005064:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 8005068:	2234      	movs	r2, #52	; 0x34
 800506a:	fb02 6603 	mla	r6, r2, r3, r6
 800506e:	2302      	movs	r3, #2
 8005070:	f886 3090 	strb.w	r3, [r6, #144]	; 0x90
  USBH_StatusTypeDef error = USBH_BUSY;
 8005074:	2001      	movs	r0, #1
 8005076:	e7c3      	b.n	8005000 <USBH_MSC_Process+0x14>
            if (scsi_status == USBH_FAIL)
 8005078:	2802      	cmp	r0, #2
 800507a:	d109      	bne.n	8005090 <USBH_MSC_Process+0xa4>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800507c:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 8005080:	2234      	movs	r2, #52	; 0x34
 8005082:	fb02 6603 	mla	r6, r2, r3, r6
 8005086:	2305      	movs	r3, #5
 8005088:	f886 3090 	strb.w	r3, [r6, #144]	; 0x90
  USBH_StatusTypeDef error = USBH_BUSY;
 800508c:	2001      	movs	r0, #1
 800508e:	e7b7      	b.n	8005000 <USBH_MSC_Process+0x14>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8005090:	2804      	cmp	r0, #4
 8005092:	f040 80e2 	bne.w	800525a <USBH_MSC_Process+0x26e>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005096:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 800509a:	2234      	movs	r2, #52	; 0x34
 800509c:	fb02 6603 	mla	r6, r2, r3, r6
 80050a0:	2301      	movs	r3, #1
 80050a2:	f886 3090 	strb.w	r3, [r6, #144]	; 0x90
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80050a6:	2202      	movs	r2, #2
 80050a8:	f886 2091 	strb.w	r2, [r6, #145]	; 0x91
  USBH_StatusTypeDef error = USBH_BUSY;
 80050ac:	4618      	mov	r0, r3
 80050ae:	e7a7      	b.n	8005000 <USBH_MSC_Process+0x14>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 80050b0:	b2c9      	uxtb	r1, r1
 80050b2:	4628      	mov	r0, r5
 80050b4:	f000 fc90 	bl	80059d8 <USBH_MSC_SCSI_TestUnitReady>
            if (ready_status == USBH_OK)
 80050b8:	b9a8      	cbnz	r0, 80050e6 <USBH_MSC_Process+0xfa>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 80050ba:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 80050be:	2234      	movs	r2, #52	; 0x34
 80050c0:	fb02 6603 	mla	r6, r2, r3, r6
 80050c4:	f896 3092 	ldrb.w	r3, [r6, #146]	; 0x92
 80050c8:	3b00      	subs	r3, #0
 80050ca:	bf18      	it	ne
 80050cc:	2301      	movne	r3, #1
 80050ce:	f886 30c1 	strb.w	r3, [r6, #193]	; 0xc1
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 80050d2:	2303      	movs	r3, #3
 80050d4:	f886 3090 	strb.w	r3, [r6, #144]	; 0x90
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80050d8:	2300      	movs	r3, #0
 80050da:	f886 3091 	strb.w	r3, [r6, #145]	; 0x91
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 80050de:	f886 3092 	strb.w	r3, [r6, #146]	; 0x92
  USBH_StatusTypeDef error = USBH_BUSY;
 80050e2:	2001      	movs	r0, #1
 80050e4:	e78c      	b.n	8005000 <USBH_MSC_Process+0x14>
            if (ready_status == USBH_FAIL)
 80050e6:	2802      	cmp	r0, #2
 80050e8:	d115      	bne.n	8005116 <USBH_MSC_Process+0x12a>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 80050ea:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 80050ee:	2234      	movs	r2, #52	; 0x34
 80050f0:	fb02 6603 	mla	r6, r2, r3, r6
 80050f4:	f896 3092 	ldrb.w	r3, [r6, #146]	; 0x92
 80050f8:	3b02      	subs	r3, #2
 80050fa:	bf18      	it	ne
 80050fc:	2301      	movne	r3, #1
 80050fe:	f886 30c1 	strb.w	r3, [r6, #193]	; 0xc1
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8005102:	2305      	movs	r3, #5
 8005104:	f886 3090 	strb.w	r3, [r6, #144]	; 0x90
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8005108:	2001      	movs	r0, #1
 800510a:	f886 0091 	strb.w	r0, [r6, #145]	; 0x91
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800510e:	2302      	movs	r3, #2
 8005110:	f886 3092 	strb.w	r3, [r6, #146]	; 0x92
 8005114:	e774      	b.n	8005000 <USBH_MSC_Process+0x14>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8005116:	2804      	cmp	r0, #4
 8005118:	f040 80a1 	bne.w	800525e <USBH_MSC_Process+0x272>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800511c:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 8005120:	2234      	movs	r2, #52	; 0x34
 8005122:	fb02 6603 	mla	r6, r2, r3, r6
 8005126:	2301      	movs	r3, #1
 8005128:	f886 3090 	strb.w	r3, [r6, #144]	; 0x90
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800512c:	2202      	movs	r2, #2
 800512e:	f886 2091 	strb.w	r2, [r6, #145]	; 0x91
  USBH_StatusTypeDef error = USBH_BUSY;
 8005132:	4618      	mov	r0, r3
 8005134:	e764      	b.n	8005000 <USBH_MSC_Process+0x14>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8005136:	2234      	movs	r2, #52	; 0x34
 8005138:	fb02 6201 	mla	r2, r2, r1, r6
 800513c:	3294      	adds	r2, #148	; 0x94
 800513e:	b2c9      	uxtb	r1, r1
 8005140:	4628      	mov	r0, r5
 8005142:	f000 fc70 	bl	8005a26 <USBH_MSC_SCSI_ReadCapacity>
            if (scsi_status == USBH_OK)
 8005146:	b970      	cbnz	r0, 8005166 <USBH_MSC_Process+0x17a>
              if (MSC_Handle->unit[MSC_Handle->current_lun].state_changed == 1U)
 8005148:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800514c:	2234      	movs	r2, #52	; 0x34
 800514e:	fb02 6203 	mla	r2, r2, r3, r6
 8005152:	2001      	movs	r0, #1
 8005154:	f882 0090 	strb.w	r0, [r2, #144]	; 0x90
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8005158:	2100      	movs	r1, #0
 800515a:	f882 1091 	strb.w	r1, [r2, #145]	; 0x91
              MSC_Handle->current_lun++;
 800515e:	4403      	add	r3, r0
 8005160:	f8a6 30f8 	strh.w	r3, [r6, #248]	; 0xf8
 8005164:	e74c      	b.n	8005000 <USBH_MSC_Process+0x14>
            else if (scsi_status == USBH_FAIL)
 8005166:	2802      	cmp	r0, #2
 8005168:	d003      	beq.n	8005172 <USBH_MSC_Process+0x186>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800516a:	2804      	cmp	r0, #4
 800516c:	d00b      	beq.n	8005186 <USBH_MSC_Process+0x19a>
  USBH_StatusTypeDef error = USBH_BUSY;
 800516e:	2001      	movs	r0, #1
 8005170:	e746      	b.n	8005000 <USBH_MSC_Process+0x14>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8005172:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 8005176:	2234      	movs	r2, #52	; 0x34
 8005178:	fb02 6603 	mla	r6, r2, r3, r6
 800517c:	2305      	movs	r3, #5
 800517e:	f886 3090 	strb.w	r3, [r6, #144]	; 0x90
  USBH_StatusTypeDef error = USBH_BUSY;
 8005182:	2001      	movs	r0, #1
 8005184:	e73c      	b.n	8005000 <USBH_MSC_Process+0x14>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005186:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 800518a:	2234      	movs	r2, #52	; 0x34
 800518c:	fb02 6603 	mla	r6, r2, r3, r6
 8005190:	2301      	movs	r3, #1
 8005192:	f886 3090 	strb.w	r3, [r6, #144]	; 0x90
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8005196:	2202      	movs	r2, #2
 8005198:	f886 2091 	strb.w	r2, [r6, #145]	; 0x91
  USBH_StatusTypeDef error = USBH_BUSY;
 800519c:	4618      	mov	r0, r3
 800519e:	e72f      	b.n	8005000 <USBH_MSC_Process+0x14>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 80051a0:	2234      	movs	r2, #52	; 0x34
 80051a2:	fb02 6201 	mla	r2, r2, r1, r6
 80051a6:	329c      	adds	r2, #156	; 0x9c
 80051a8:	b2c9      	uxtb	r1, r1
 80051aa:	4628      	mov	r0, r5
 80051ac:	f000 fce7 	bl	8005b7e <USBH_MSC_SCSI_RequestSense>
            if (scsi_status == USBH_OK)
 80051b0:	bb28      	cbnz	r0, 80051fe <USBH_MSC_Process+0x212>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80051b2:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 80051b6:	2234      	movs	r2, #52	; 0x34
 80051b8:	fb02 6203 	mla	r2, r2, r3, r6
 80051bc:	f892 209c 	ldrb.w	r2, [r2, #156]	; 0x9c
 80051c0:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 80051c4:	2a02      	cmp	r2, #2
 80051c6:	d009      	beq.n	80051dc <USBH_MSC_Process+0x1f0>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80051c8:	2234      	movs	r2, #52	; 0x34
 80051ca:	fb02 6203 	mla	r2, r2, r3, r6
 80051ce:	2001      	movs	r0, #1
 80051d0:	f882 0090 	strb.w	r0, [r2, #144]	; 0x90
              MSC_Handle->current_lun++;
 80051d4:	4403      	add	r3, r0
 80051d6:	f8a6 30f8 	strh.w	r3, [r6, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 80051da:	e711      	b.n	8005000 <USBH_MSC_Process+0x14>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 80051dc:	f8d5 23c4 	ldr.w	r2, [r5, #964]	; 0x3c4
 80051e0:	f8d6 10fc 	ldr.w	r1, [r6, #252]	; 0xfc
 80051e4:	1a52      	subs	r2, r2, r1
 80051e6:	f242 710f 	movw	r1, #9999	; 0x270f
 80051ea:	428a      	cmp	r2, r1
 80051ec:	d8ec      	bhi.n	80051c8 <USBH_MSC_Process+0x1dc>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80051ee:	2234      	movs	r2, #52	; 0x34
 80051f0:	fb02 6303 	mla	r3, r2, r3, r6
 80051f4:	2202      	movs	r2, #2
 80051f6:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  USBH_StatusTypeDef error = USBH_BUSY;
 80051fa:	2001      	movs	r0, #1
                  break;
 80051fc:	e700      	b.n	8005000 <USBH_MSC_Process+0x14>
            if (scsi_status == USBH_FAIL)
 80051fe:	2802      	cmp	r0, #2
 8005200:	d109      	bne.n	8005216 <USBH_MSC_Process+0x22a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8005202:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 8005206:	2234      	movs	r2, #52	; 0x34
 8005208:	fb02 6603 	mla	r6, r2, r3, r6
 800520c:	2308      	movs	r3, #8
 800520e:	f886 3090 	strb.w	r3, [r6, #144]	; 0x90
  USBH_StatusTypeDef error = USBH_BUSY;
 8005212:	2001      	movs	r0, #1
 8005214:	e6f4      	b.n	8005000 <USBH_MSC_Process+0x14>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8005216:	2804      	cmp	r0, #4
 8005218:	d123      	bne.n	8005262 <USBH_MSC_Process+0x276>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800521a:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 800521e:	2234      	movs	r2, #52	; 0x34
 8005220:	fb02 6603 	mla	r6, r2, r3, r6
 8005224:	2301      	movs	r3, #1
 8005226:	f886 3090 	strb.w	r3, [r6, #144]	; 0x90
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800522a:	2202      	movs	r2, #2
 800522c:	f886 2091 	strb.w	r2, [r6, #145]	; 0x91
  USBH_StatusTypeDef error = USBH_BUSY;
 8005230:	4618      	mov	r0, r3
 8005232:	e6e5      	b.n	8005000 <USBH_MSC_Process+0x14>
            MSC_Handle->current_lun++;
 8005234:	3101      	adds	r1, #1
 8005236:	f8a6 10f8 	strh.w	r1, [r6, #248]	; 0xf8
  USBH_StatusTypeDef error = USBH_BUSY;
 800523a:	2001      	movs	r0, #1
            break;
 800523c:	e6e0      	b.n	8005000 <USBH_MSC_Process+0x14>
        MSC_Handle->current_lun = 0U;
 800523e:	2300      	movs	r3, #0
 8005240:	f8a6 30f8 	strh.w	r3, [r6, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8005244:	2401      	movs	r4, #1
 8005246:	7334      	strb	r4, [r6, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005248:	f8d5 33d4 	ldr.w	r3, [r5, #980]	; 0x3d4
 800524c:	2102      	movs	r1, #2
 800524e:	4628      	mov	r0, r5
 8005250:	4798      	blx	r3
  USBH_StatusTypeDef error = USBH_BUSY;
 8005252:	4620      	mov	r0, r4
 8005254:	e6d4      	b.n	8005000 <USBH_MSC_Process+0x14>
 8005256:	2001      	movs	r0, #1
 8005258:	e6d2      	b.n	8005000 <USBH_MSC_Process+0x14>
 800525a:	2001      	movs	r0, #1
 800525c:	e6d0      	b.n	8005000 <USBH_MSC_Process+0x14>
 800525e:	2001      	movs	r0, #1
 8005260:	e6ce      	b.n	8005000 <USBH_MSC_Process+0x14>
 8005262:	2001      	movs	r0, #1
 8005264:	e6cc      	b.n	8005000 <USBH_MSC_Process+0x14>

08005266 <USBH_MSC_ClassRequest>:
{
 8005266:	b510      	push	{r4, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005268:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 800526c:	69dc      	ldr	r4, [r3, #28]
  switch (MSC_Handle->req_state)
 800526e:	7ba3      	ldrb	r3, [r4, #14]
 8005270:	2b02      	cmp	r3, #2
 8005272:	d004      	beq.n	800527e <USBH_MSC_ClassRequest+0x18>
 8005274:	2b03      	cmp	r3, #3
 8005276:	d028      	beq.n	80052ca <USBH_MSC_ClassRequest+0x64>
 8005278:	b10b      	cbz	r3, 800527e <USBH_MSC_ClassRequest+0x18>
 800527a:	2001      	movs	r0, #1
}
 800527c:	bd10      	pop	{r4, pc}
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800527e:	4621      	mov	r1, r4
 8005280:	f000 fa54 	bl	800572c <USBH_MSC_BOT_REQ_GetMaxLUN>
      if (status == USBH_NOT_SUPPORTED)
 8005284:	2803      	cmp	r0, #3
 8005286:	d013      	beq.n	80052b0 <USBH_MSC_ClassRequest+0x4a>
      if (status == USBH_OK)
 8005288:	2800      	cmp	r0, #0
 800528a:	d1f7      	bne.n	800527c <USBH_MSC_ClassRequest+0x16>
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800528c:	7823      	ldrb	r3, [r4, #0]
 800528e:	2b02      	cmp	r3, #2
 8005290:	d90f      	bls.n	80052b2 <USBH_MSC_ClassRequest+0x4c>
 8005292:	2302      	movs	r3, #2
 8005294:	7023      	strb	r3, [r4, #0]
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8005296:	f884 3092 	strb.w	r3, [r4, #146]	; 0x92
          MSC_Handle->unit[i].state_changed = 0U;
 800529a:	2300      	movs	r3, #0
 800529c:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 80052a0:	2302      	movs	r3, #2
 80052a2:	f884 30c6 	strb.w	r3, [r4, #198]	; 0xc6
          MSC_Handle->unit[i].state_changed = 0U;
 80052a6:	2300      	movs	r3, #0
 80052a8:	f884 30f5 	strb.w	r3, [r4, #245]	; 0xf5
  USBH_StatusTypeDef status = USBH_BUSY;
 80052ac:	2000      	movs	r0, #0
 80052ae:	e7e5      	b.n	800527c <USBH_MSC_ClassRequest+0x16>
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 80052b0:	2300      	movs	r3, #0
 80052b2:	3301      	adds	r3, #1
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	7023      	strb	r3, [r4, #0]
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 80052b8:	2202      	movs	r2, #2
 80052ba:	f884 2092 	strb.w	r2, [r4, #146]	; 0x92
          MSC_Handle->unit[i].state_changed = 0U;
 80052be:	2200      	movs	r2, #0
 80052c0:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d9f1      	bls.n	80052ac <USBH_MSC_ClassRequest+0x46>
 80052c8:	e7ea      	b.n	80052a0 <USBH_MSC_ClassRequest+0x3a>
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 80052ca:	2100      	movs	r1, #0
 80052cc:	f001 fb39 	bl	8006942 <USBH_ClrFeature>
 80052d0:	b918      	cbnz	r0, 80052da <USBH_MSC_ClassRequest+0x74>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 80052d2:	7be3      	ldrb	r3, [r4, #15]
 80052d4:	73a3      	strb	r3, [r4, #14]
  USBH_StatusTypeDef status = USBH_BUSY;
 80052d6:	2001      	movs	r0, #1
 80052d8:	e7d0      	b.n	800527c <USBH_MSC_ClassRequest+0x16>
 80052da:	2001      	movs	r0, #1
  return status;
 80052dc:	e7ce      	b.n	800527c <USBH_MSC_ClassRequest+0x16>

080052de <USBH_MSC_InterfaceDeInit>:
{
 80052de:	b538      	push	{r3, r4, r5, lr}
 80052e0:	4604      	mov	r4, r0
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80052e2:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 80052e6:	69dd      	ldr	r5, [r3, #28]
  if ((MSC_Handle->OutPipe) != 0U)
 80052e8:	7969      	ldrb	r1, [r5, #5]
 80052ea:	b951      	cbnz	r1, 8005302 <USBH_MSC_InterfaceDeInit+0x24>
  if ((MSC_Handle->InPipe != 0U))
 80052ec:	7929      	ldrb	r1, [r5, #4]
 80052ee:	b991      	cbnz	r1, 8005316 <USBH_MSC_InterfaceDeInit+0x38>
    USBH_free(phost->pActiveClass->pData);
 80052f0:	4628      	mov	r0, r5
 80052f2:	f004 f899 	bl	8009428 <free>
    phost->pActiveClass->pData = 0U;
 80052f6:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 80052fa:	2200      	movs	r2, #0
 80052fc:	61da      	str	r2, [r3, #28]
}
 80052fe:	2000      	movs	r0, #0
 8005300:	bd38      	pop	{r3, r4, r5, pc}
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8005302:	f001 fba1 	bl	8006a48 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8005306:	7969      	ldrb	r1, [r5, #5]
 8005308:	4620      	mov	r0, r4
 800530a:	f001 fbc1 	bl	8006a90 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800530e:	2300      	movs	r3, #0
 8005310:	716b      	strb	r3, [r5, #5]
  if ((MSC_Handle->InPipe != 0U))
 8005312:	7929      	ldrb	r1, [r5, #4]
 8005314:	b141      	cbz	r1, 8005328 <USBH_MSC_InterfaceDeInit+0x4a>
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8005316:	4620      	mov	r0, r4
 8005318:	f001 fb96 	bl	8006a48 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 800531c:	7929      	ldrb	r1, [r5, #4]
 800531e:	4620      	mov	r0, r4
 8005320:	f001 fbb6 	bl	8006a90 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8005324:	2300      	movs	r3, #0
 8005326:	712b      	strb	r3, [r5, #4]
  if ((phost->pActiveClass->pData) != NULL)
 8005328:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 800532c:	69dd      	ldr	r5, [r3, #28]
 800532e:	2d00      	cmp	r5, #0
 8005330:	d0e5      	beq.n	80052fe <USBH_MSC_InterfaceDeInit+0x20>
 8005332:	e7dd      	b.n	80052f0 <USBH_MSC_InterfaceDeInit+0x12>

08005334 <USBH_MSC_InterfaceInit>:
{
 8005334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005336:	b085      	sub	sp, #20
 8005338:	4604      	mov	r4, r0
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800533a:	f8d0 137c 	ldr.w	r1, [r0, #892]	; 0x37c
 800533e:	2350      	movs	r3, #80	; 0x50
 8005340:	2206      	movs	r2, #6
 8005342:	7909      	ldrb	r1, [r1, #4]
 8005344:	f000 fd51 	bl	8005dea <USBH_FindInterface>
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8005348:	2801      	cmp	r0, #1
 800534a:	f200 8084 	bhi.w	8005456 <USBH_MSC_InterfaceInit+0x122>
 800534e:	4605      	mov	r5, r0
  status = USBH_SelectInterface(phost, interface);
 8005350:	4601      	mov	r1, r0
 8005352:	4620      	mov	r0, r4
 8005354:	f000 fd40 	bl	8005dd8 <USBH_SelectInterface>
  if (status != USBH_OK)
 8005358:	4607      	mov	r7, r0
 800535a:	2800      	cmp	r0, #0
 800535c:	d17f      	bne.n	800545e <USBH_MSC_InterfaceInit+0x12a>
  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800535e:	f8d4 637c 	ldr.w	r6, [r4, #892]	; 0x37c
 8005362:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005366:	f004 f857 	bl	8009418 <malloc>
 800536a:	61f0      	str	r0, [r6, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800536c:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8005370:	69de      	ldr	r6, [r3, #28]
  if (MSC_Handle == NULL)
 8005372:	2e00      	cmp	r6, #0
 8005374:	d075      	beq.n	8005462 <USBH_MSC_InterfaceInit+0x12e>
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8005376:	f44f 7280 	mov.w	r2, #256	; 0x100
 800537a:	2100      	movs	r1, #0
 800537c:	4630      	mov	r0, r6
 800537e:	f004 f869 	bl	8009454 <memset>
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005382:	231a      	movs	r3, #26
 8005384:	fb03 4305 	mla	r3, r3, r5, r4
 8005388:	f893 234e 	ldrb.w	r2, [r3, #846]	; 0x34e
 800538c:	f993 334e 	ldrsb.w	r3, [r3, #846]	; 0x34e
 8005390:	2b00      	cmp	r3, #0
 8005392:	db50      	blt.n	8005436 <USBH_MSC_InterfaceInit+0x102>
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8005394:	71b2      	strb	r2, [r6, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005396:	231a      	movs	r3, #26
 8005398:	fb03 4305 	mla	r3, r3, r5, r4
 800539c:	f8b3 3350 	ldrh.w	r3, [r3, #848]	; 0x350
 80053a0:	8133      	strh	r3, [r6, #8]
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80053a2:	231a      	movs	r3, #26
 80053a4:	fb03 4305 	mla	r3, r3, r5, r4
 80053a8:	f893 2356 	ldrb.w	r2, [r3, #854]	; 0x356
 80053ac:	f993 3356 	ldrsb.w	r3, [r3, #854]	; 0x356
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	db48      	blt.n	8005446 <USBH_MSC_InterfaceInit+0x112>
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 80053b4:	71b2      	strb	r2, [r6, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80053b6:	201a      	movs	r0, #26
 80053b8:	fb00 4505 	mla	r5, r0, r5, r4
 80053bc:	f8b5 3358 	ldrh.w	r3, [r5, #856]	; 0x358
 80053c0:	8133      	strh	r3, [r6, #8]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 80053c2:	79b1      	ldrb	r1, [r6, #6]
 80053c4:	4620      	mov	r0, r4
 80053c6:	f001 fb44 	bl	8006a52 <USBH_AllocPipe>
 80053ca:	7170      	strb	r0, [r6, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 80053cc:	79f1      	ldrb	r1, [r6, #7]
 80053ce:	4620      	mov	r0, r4
 80053d0:	f001 fb3f 	bl	8006a52 <USBH_AllocPipe>
 80053d4:	7130      	strb	r0, [r6, #4]
  (void)USBH_MSC_BOT_Init(phost);
 80053d6:	4620      	mov	r0, r4
 80053d8:	f000 f9b6 	bl	8005748 <USBH_MSC_BOT_Init>
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 80053dc:	79b2      	ldrb	r2, [r6, #6]
 80053de:	2a00      	cmp	r2, #0
 80053e0:	d041      	beq.n	8005466 <USBH_MSC_InterfaceInit+0x132>
 80053e2:	8933      	ldrh	r3, [r6, #8]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d040      	beq.n	800546a <USBH_MSC_InterfaceInit+0x136>
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 80053e8:	7971      	ldrb	r1, [r6, #5]
 80053ea:	9302      	str	r3, [sp, #8]
 80053ec:	2302      	movs	r3, #2
 80053ee:	9301      	str	r3, [sp, #4]
 80053f0:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 80053f4:	9300      	str	r3, [sp, #0]
 80053f6:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 80053fa:	4620      	mov	r0, r4
 80053fc:	f001 fb14 	bl	8006a28 <USBH_OpenPipe>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8005400:	79f2      	ldrb	r2, [r6, #7]
 8005402:	b3a2      	cbz	r2, 800546e <USBH_MSC_InterfaceInit+0x13a>
 8005404:	8973      	ldrh	r3, [r6, #10]
 8005406:	b3a3      	cbz	r3, 8005472 <USBH_MSC_InterfaceInit+0x13e>
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8005408:	7931      	ldrb	r1, [r6, #4]
 800540a:	9302      	str	r3, [sp, #8]
 800540c:	2302      	movs	r3, #2
 800540e:	9301      	str	r3, [sp, #4]
 8005410:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8005414:	9300      	str	r3, [sp, #0]
 8005416:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 800541a:	4620      	mov	r0, r4
 800541c:	f001 fb04 	bl	8006a28 <USBH_OpenPipe>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8005420:	2200      	movs	r2, #0
 8005422:	7931      	ldrb	r1, [r6, #4]
 8005424:	4620      	mov	r0, r4
 8005426:	f003 fb90 	bl	8008b4a <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800542a:	2200      	movs	r2, #0
 800542c:	7971      	ldrb	r1, [r6, #5]
 800542e:	4620      	mov	r0, r4
 8005430:	f003 fb8b 	bl	8008b4a <USBH_LL_SetToggle>
  return USBH_OK;
 8005434:	e010      	b.n	8005458 <USBH_MSC_InterfaceInit+0x124>
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8005436:	71f2      	strb	r2, [r6, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005438:	231a      	movs	r3, #26
 800543a:	fb03 4305 	mla	r3, r3, r5, r4
 800543e:	f8b3 3350 	ldrh.w	r3, [r3, #848]	; 0x350
 8005442:	8173      	strh	r3, [r6, #10]
 8005444:	e7ad      	b.n	80053a2 <USBH_MSC_InterfaceInit+0x6e>
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8005446:	71f2      	strb	r2, [r6, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005448:	201a      	movs	r0, #26
 800544a:	fb00 4505 	mla	r5, r0, r5, r4
 800544e:	f8b5 3358 	ldrh.w	r3, [r5, #856]	; 0x358
 8005452:	8173      	strh	r3, [r6, #10]
 8005454:	e7b5      	b.n	80053c2 <USBH_MSC_InterfaceInit+0x8e>
    return USBH_FAIL;
 8005456:	2702      	movs	r7, #2
}
 8005458:	4638      	mov	r0, r7
 800545a:	b005      	add	sp, #20
 800545c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return USBH_FAIL;
 800545e:	2702      	movs	r7, #2
 8005460:	e7fa      	b.n	8005458 <USBH_MSC_InterfaceInit+0x124>
    return USBH_FAIL;
 8005462:	2702      	movs	r7, #2
 8005464:	e7f8      	b.n	8005458 <USBH_MSC_InterfaceInit+0x124>
    return USBH_NOT_SUPPORTED;
 8005466:	2703      	movs	r7, #3
 8005468:	e7f6      	b.n	8005458 <USBH_MSC_InterfaceInit+0x124>
 800546a:	2703      	movs	r7, #3
 800546c:	e7f4      	b.n	8005458 <USBH_MSC_InterfaceInit+0x124>
    return USBH_NOT_SUPPORTED;
 800546e:	2703      	movs	r7, #3
 8005470:	e7f2      	b.n	8005458 <USBH_MSC_InterfaceInit+0x124>
 8005472:	2703      	movs	r7, #3
 8005474:	e7f0      	b.n	8005458 <USBH_MSC_InterfaceInit+0x124>

08005476 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8005476:	b530      	push	{r4, r5, lr}
 8005478:	b083      	sub	sp, #12
 800547a:	460c      	mov	r4, r1
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800547c:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8005480:	69dd      	ldr	r5, [r3, #28]
  USBH_StatusTypeDef error = USBH_BUSY ;
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8005482:	2334      	movs	r3, #52	; 0x34
 8005484:	fb03 5301 	mla	r3, r3, r1, r5
 8005488:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800548c:	2b06      	cmp	r3, #6
 800548e:	d006      	beq.n	800549e <USBH_MSC_RdWrProcess+0x28>
 8005490:	2b07      	cmp	r3, #7
 8005492:	d027      	beq.n	80054e4 <USBH_MSC_RdWrProcess+0x6e>
 8005494:	2b05      	cmp	r3, #5
 8005496:	d048      	beq.n	800552a <USBH_MSC_RdWrProcess+0xb4>
 8005498:	2001      	movs	r0, #1
    default:
      break;

  }
  return error;
}
 800549a:	b003      	add	sp, #12
 800549c:	bd30      	pop	{r4, r5, pc}
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800549e:	2200      	movs	r2, #0
 80054a0:	9200      	str	r2, [sp, #0]
 80054a2:	4613      	mov	r3, r2
 80054a4:	f000 fbf7 	bl	8005c96 <USBH_MSC_SCSI_Read>
      if (scsi_status == USBH_OK)
 80054a8:	b930      	cbnz	r0, 80054b8 <USBH_MSC_RdWrProcess+0x42>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80054aa:	2134      	movs	r1, #52	; 0x34
 80054ac:	fb01 5404 	mla	r4, r1, r4, r5
 80054b0:	2301      	movs	r3, #1
 80054b2:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
        error = USBH_OK;
 80054b6:	e7f0      	b.n	800549a <USBH_MSC_RdWrProcess+0x24>
      else if (scsi_status == USBH_FAIL)
 80054b8:	2802      	cmp	r0, #2
 80054ba:	d003      	beq.n	80054c4 <USBH_MSC_RdWrProcess+0x4e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80054bc:	2804      	cmp	r0, #4
 80054be:	d009      	beq.n	80054d4 <USBH_MSC_RdWrProcess+0x5e>
  USBH_StatusTypeDef error = USBH_BUSY ;
 80054c0:	2001      	movs	r0, #1
 80054c2:	e7ea      	b.n	800549a <USBH_MSC_RdWrProcess+0x24>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80054c4:	2334      	movs	r3, #52	; 0x34
 80054c6:	fb03 5404 	mla	r4, r3, r4, r5
 80054ca:	2305      	movs	r3, #5
 80054cc:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
  USBH_StatusTypeDef error = USBH_BUSY ;
 80054d0:	2001      	movs	r0, #1
 80054d2:	e7e2      	b.n	800549a <USBH_MSC_RdWrProcess+0x24>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80054d4:	2334      	movs	r3, #52	; 0x34
 80054d6:	fb03 5404 	mla	r4, r3, r4, r5
 80054da:	2308      	movs	r3, #8
 80054dc:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
          error = USBH_FAIL;
 80054e0:	2002      	movs	r0, #2
 80054e2:	e7da      	b.n	800549a <USBH_MSC_RdWrProcess+0x24>
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 80054e4:	2200      	movs	r2, #0
 80054e6:	9200      	str	r2, [sp, #0]
 80054e8:	4613      	mov	r3, r2
 80054ea:	f000 fb8e 	bl	8005c0a <USBH_MSC_SCSI_Write>
      if (scsi_status == USBH_OK)
 80054ee:	b930      	cbnz	r0, 80054fe <USBH_MSC_RdWrProcess+0x88>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80054f0:	2134      	movs	r1, #52	; 0x34
 80054f2:	fb01 5404 	mla	r4, r1, r4, r5
 80054f6:	2301      	movs	r3, #1
 80054f8:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
        error = USBH_OK;
 80054fc:	e7cd      	b.n	800549a <USBH_MSC_RdWrProcess+0x24>
      else if (scsi_status == USBH_FAIL)
 80054fe:	2802      	cmp	r0, #2
 8005500:	d003      	beq.n	800550a <USBH_MSC_RdWrProcess+0x94>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8005502:	2804      	cmp	r0, #4
 8005504:	d009      	beq.n	800551a <USBH_MSC_RdWrProcess+0xa4>
  USBH_StatusTypeDef error = USBH_BUSY ;
 8005506:	2001      	movs	r0, #1
 8005508:	e7c7      	b.n	800549a <USBH_MSC_RdWrProcess+0x24>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800550a:	2334      	movs	r3, #52	; 0x34
 800550c:	fb03 5404 	mla	r4, r3, r4, r5
 8005510:	2305      	movs	r3, #5
 8005512:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
  USBH_StatusTypeDef error = USBH_BUSY ;
 8005516:	2001      	movs	r0, #1
 8005518:	e7bf      	b.n	800549a <USBH_MSC_RdWrProcess+0x24>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800551a:	2334      	movs	r3, #52	; 0x34
 800551c:	fb03 5404 	mla	r4, r3, r4, r5
 8005520:	2308      	movs	r3, #8
 8005522:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
          error = USBH_FAIL;
 8005526:	2002      	movs	r0, #2
 8005528:	e7b7      	b.n	800549a <USBH_MSC_RdWrProcess+0x24>
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800552a:	2234      	movs	r2, #52	; 0x34
 800552c:	fb02 5201 	mla	r2, r2, r1, r5
 8005530:	329c      	adds	r2, #156	; 0x9c
 8005532:	f000 fb24 	bl	8005b7e <USBH_MSC_SCSI_RequestSense>
      if (scsi_status == USBH_OK)
 8005536:	b948      	cbnz	r0, 800554c <USBH_MSC_RdWrProcess+0xd6>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8005538:	2134      	movs	r1, #52	; 0x34
 800553a:	fb01 5404 	mla	r4, r1, r4, r5
 800553e:	2301      	movs	r3, #1
 8005540:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8005544:	2002      	movs	r0, #2
 8005546:	f884 0091 	strb.w	r0, [r4, #145]	; 0x91
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800554a:	e7a6      	b.n	800549a <USBH_MSC_RdWrProcess+0x24>
 800554c:	2804      	cmp	r0, #4
 800554e:	d001      	beq.n	8005554 <USBH_MSC_RdWrProcess+0xde>
  USBH_StatusTypeDef error = USBH_BUSY ;
 8005550:	2001      	movs	r0, #1
 8005552:	e7a2      	b.n	800549a <USBH_MSC_RdWrProcess+0x24>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8005554:	2334      	movs	r3, #52	; 0x34
 8005556:	fb03 5404 	mla	r4, r3, r4, r5
 800555a:	2308      	movs	r3, #8
 800555c:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
          error = USBH_FAIL;
 8005560:	2002      	movs	r0, #2
 8005562:	e79a      	b.n	800549a <USBH_MSC_RdWrProcess+0x24>

08005564 <USBH_MSC_UnitIsReady>:
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8005564:	7803      	ldrb	r3, [r0, #0]
 8005566:	b2db      	uxtb	r3, r3
 8005568:	2b0b      	cmp	r3, #11
 800556a:	d001      	beq.n	8005570 <USBH_MSC_UnitIsReady+0xc>
  {
    res = 1U;
  }
  else
  {
    res = 0U;
 800556c:	2000      	movs	r0, #0
  }

  return res;
}
 800556e:	4770      	bx	lr
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005570:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8005574:	69db      	ldr	r3, [r3, #28]
 8005576:	2234      	movs	r2, #52	; 0x34
 8005578:	fb02 3101 	mla	r1, r2, r1, r3
 800557c:	f891 0091 	ldrb.w	r0, [r1, #145]	; 0x91
    res = 0U;
 8005580:	fab0 f080 	clz	r0, r0
 8005584:	0940      	lsrs	r0, r0, #5
 8005586:	4770      	bx	lr

08005588 <USBH_MSC_GetLUNInfo>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
  if (phost->gState == HOST_CLASS)
 8005588:	7803      	ldrb	r3, [r0, #0]
 800558a:	b2db      	uxtb	r3, r3
 800558c:	2b0b      	cmp	r3, #11
 800558e:	d001      	beq.n	8005594 <USBH_MSC_GetLUNInfo+0xc>
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
    return USBH_OK;
  }
  else
  {
    return USBH_FAIL;
 8005590:	2002      	movs	r0, #2
  }
}
 8005592:	4770      	bx	lr
{
 8005594:	b510      	push	{r4, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005596:	f8d0 037c 	ldr.w	r0, [r0, #892]	; 0x37c
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800559a:	2334      	movs	r3, #52	; 0x34
 800559c:	fb03 f101 	mul.w	r1, r3, r1
 80055a0:	3190      	adds	r1, #144	; 0x90
 80055a2:	69c3      	ldr	r3, [r0, #28]
 80055a4:	440b      	add	r3, r1
 80055a6:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80055aa:	f8d3 e000 	ldr.w	lr, [r3]
 80055ae:	f8d3 c004 	ldr.w	ip, [r3, #4]
 80055b2:	6898      	ldr	r0, [r3, #8]
 80055b4:	68d9      	ldr	r1, [r3, #12]
 80055b6:	f8c2 e000 	str.w	lr, [r2]
 80055ba:	f8c2 c004 	str.w	ip, [r2, #4]
 80055be:	6090      	str	r0, [r2, #8]
 80055c0:	60d1      	str	r1, [r2, #12]
 80055c2:	3310      	adds	r3, #16
 80055c4:	3210      	adds	r2, #16
 80055c6:	42a3      	cmp	r3, r4
 80055c8:	d1ef      	bne.n	80055aa <USBH_MSC_GetLUNInfo+0x22>
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	6013      	str	r3, [r2, #0]
    return USBH_OK;
 80055ce:	2000      	movs	r0, #0
}
 80055d0:	bd10      	pop	{r4, pc}

080055d2 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 80055d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	460d      	mov	r5, r1
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;

  if ((phost->device.is_connected == 0U) ||
 80055da:	f890 1320 	ldrb.w	r1, [r0, #800]	; 0x320
 80055de:	2900      	cmp	r1, #0
 80055e0:	d041      	beq.n	8005666 <USBH_MSC_Read+0x94>
 80055e2:	4604      	mov	r4, r0
      (phost->gState != HOST_CLASS) ||
 80055e4:	7801      	ldrb	r1, [r0, #0]
 80055e6:	b2c9      	uxtb	r1, r1
  if ((phost->device.is_connected == 0U) ||
 80055e8:	290b      	cmp	r1, #11
 80055ea:	d13e      	bne.n	800566a <USBH_MSC_Read+0x98>
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80055ec:	f8d0 137c 	ldr.w	r1, [r0, #892]	; 0x37c
 80055f0:	f8d1 801c 	ldr.w	r8, [r1, #28]
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80055f4:	2134      	movs	r1, #52	; 0x34
 80055f6:	fb01 8105 	mla	r1, r1, r5, r8
      (phost->gState != HOST_CLASS) ||
 80055fa:	f891 1090 	ldrb.w	r1, [r1, #144]	; 0x90
 80055fe:	2901      	cmp	r1, #1
 8005600:	d001      	beq.n	8005606 <USBH_MSC_Read+0x34>
  {
    return  USBH_FAIL;
 8005602:	2002      	movs	r0, #2
 8005604:	e032      	b.n	800566c <USBH_MSC_Read+0x9a>
  }

  MSC_Handle->state = MSC_READ;
 8005606:	2006      	movs	r0, #6
 8005608:	f888 000c 	strb.w	r0, [r8, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800560c:	2134      	movs	r1, #52	; 0x34
 800560e:	fb01 8105 	mla	r1, r1, r5, r8
 8005612:	f881 0090 	strb.w	r0, [r1, #144]	; 0x90
  MSC_Handle->rw_lun = lun;
 8005616:	f8a8 50fa 	strh.w	r5, [r8, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800561a:	9908      	ldr	r1, [sp, #32]
 800561c:	9100      	str	r1, [sp, #0]
 800561e:	4629      	mov	r1, r5
 8005620:	4620      	mov	r0, r4
 8005622:	f000 fb38 	bl	8005c96 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8005626:	f8d4 73c4 	ldr.w	r7, [r4, #964]	; 0x3c4

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800562a:	f242 7610 	movw	r6, #10000	; 0x2710
 800562e:	9b08      	ldr	r3, [sp, #32]
 8005630:	fb03 f606 	mul.w	r6, r3, r6
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8005634:	4629      	mov	r1, r5
 8005636:	4620      	mov	r0, r4
 8005638:	f7ff ff1d 	bl	8005476 <USBH_MSC_RdWrProcess>
 800563c:	2801      	cmp	r0, #1
 800563e:	d10d      	bne.n	800565c <USBH_MSC_Read+0x8a>
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8005640:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8005644:	1bdb      	subs	r3, r3, r7
 8005646:	42b3      	cmp	r3, r6
 8005648:	d803      	bhi.n	8005652 <USBH_MSC_Read+0x80>
 800564a:	f894 3320 	ldrb.w	r3, [r4, #800]	; 0x320
 800564e:	2b00      	cmp	r3, #0
 8005650:	d1f0      	bne.n	8005634 <USBH_MSC_Read+0x62>
    {
      MSC_Handle->state = MSC_IDLE;
 8005652:	2301      	movs	r3, #1
 8005654:	f888 300c 	strb.w	r3, [r8, #12]
      return USBH_FAIL;
 8005658:	2002      	movs	r0, #2
 800565a:	e007      	b.n	800566c <USBH_MSC_Read+0x9a>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800565c:	2301      	movs	r3, #1
 800565e:	f888 300c 	strb.w	r3, [r8, #12]

  return USBH_OK;
 8005662:	2000      	movs	r0, #0
 8005664:	e002      	b.n	800566c <USBH_MSC_Read+0x9a>
    return  USBH_FAIL;
 8005666:	2002      	movs	r0, #2
 8005668:	e000      	b.n	800566c <USBH_MSC_Read+0x9a>
 800566a:	2002      	movs	r0, #2
}
 800566c:	b002      	add	sp, #8
 800566e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005672 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8005672:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005676:	b082      	sub	sp, #8
 8005678:	460d      	mov	r5, r1
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;

  if ((phost->device.is_connected == 0U) ||
 800567a:	f890 1320 	ldrb.w	r1, [r0, #800]	; 0x320
 800567e:	2900      	cmp	r1, #0
 8005680:	d041      	beq.n	8005706 <USBH_MSC_Write+0x94>
 8005682:	4604      	mov	r4, r0
      (phost->gState != HOST_CLASS) ||
 8005684:	7801      	ldrb	r1, [r0, #0]
 8005686:	b2c9      	uxtb	r1, r1
  if ((phost->device.is_connected == 0U) ||
 8005688:	290b      	cmp	r1, #11
 800568a:	d13e      	bne.n	800570a <USBH_MSC_Write+0x98>
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800568c:	f8d0 137c 	ldr.w	r1, [r0, #892]	; 0x37c
 8005690:	f8d1 801c 	ldr.w	r8, [r1, #28]
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8005694:	2134      	movs	r1, #52	; 0x34
 8005696:	fb01 8105 	mla	r1, r1, r5, r8
      (phost->gState != HOST_CLASS) ||
 800569a:	f891 1090 	ldrb.w	r1, [r1, #144]	; 0x90
 800569e:	2901      	cmp	r1, #1
 80056a0:	d001      	beq.n	80056a6 <USBH_MSC_Write+0x34>
  {
    return  USBH_FAIL;
 80056a2:	2002      	movs	r0, #2
 80056a4:	e032      	b.n	800570c <USBH_MSC_Write+0x9a>
  }

  MSC_Handle->state = MSC_WRITE;
 80056a6:	2007      	movs	r0, #7
 80056a8:	f888 000c 	strb.w	r0, [r8, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 80056ac:	2134      	movs	r1, #52	; 0x34
 80056ae:	fb01 8105 	mla	r1, r1, r5, r8
 80056b2:	f881 0090 	strb.w	r0, [r1, #144]	; 0x90
  MSC_Handle->rw_lun = lun;
 80056b6:	f8a8 50fa 	strh.w	r5, [r8, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 80056ba:	9908      	ldr	r1, [sp, #32]
 80056bc:	9100      	str	r1, [sp, #0]
 80056be:	4629      	mov	r1, r5
 80056c0:	4620      	mov	r0, r4
 80056c2:	f000 faa2 	bl	8005c0a <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 80056c6:	f8d4 73c4 	ldr.w	r7, [r4, #964]	; 0x3c4
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80056ca:	f242 7610 	movw	r6, #10000	; 0x2710
 80056ce:	9b08      	ldr	r3, [sp, #32]
 80056d0:	fb03 f606 	mul.w	r6, r3, r6
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80056d4:	4629      	mov	r1, r5
 80056d6:	4620      	mov	r0, r4
 80056d8:	f7ff fecd 	bl	8005476 <USBH_MSC_RdWrProcess>
 80056dc:	2801      	cmp	r0, #1
 80056de:	d10d      	bne.n	80056fc <USBH_MSC_Write+0x8a>
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80056e0:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 80056e4:	1bdb      	subs	r3, r3, r7
 80056e6:	42b3      	cmp	r3, r6
 80056e8:	d803      	bhi.n	80056f2 <USBH_MSC_Write+0x80>
 80056ea:	f894 3320 	ldrb.w	r3, [r4, #800]	; 0x320
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d1f0      	bne.n	80056d4 <USBH_MSC_Write+0x62>
    {
      MSC_Handle->state = MSC_IDLE;
 80056f2:	2301      	movs	r3, #1
 80056f4:	f888 300c 	strb.w	r3, [r8, #12]
      return USBH_FAIL;
 80056f8:	2002      	movs	r0, #2
 80056fa:	e007      	b.n	800570c <USBH_MSC_Write+0x9a>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80056fc:	2301      	movs	r3, #1
 80056fe:	f888 300c 	strb.w	r3, [r8, #12]
  return USBH_OK;
 8005702:	2000      	movs	r0, #0
 8005704:	e002      	b.n	800570c <USBH_MSC_Write+0x9a>
    return  USBH_FAIL;
 8005706:	2002      	movs	r0, #2
 8005708:	e000      	b.n	800570c <USBH_MSC_Write+0x9a>
 800570a:	2002      	movs	r0, #2
}
 800570c:	b002      	add	sp, #8
 800570e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005712 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8005712:	b508      	push	{r3, lr}

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8005714:	2221      	movs	r2, #33	; 0x21
 8005716:	7402      	strb	r2, [r0, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8005718:	22ff      	movs	r2, #255	; 0xff
 800571a:	7442      	strb	r2, [r0, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800571c:	2100      	movs	r1, #0
 800571e:	8241      	strh	r1, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005720:	8281      	strh	r1, [r0, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8005722:	82c1      	strh	r1, [r0, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 8005724:	460a      	mov	r2, r1
 8005726:	f000 fe2c 	bl	8006382 <USBH_CtlReq>
}
 800572a:	bd08      	pop	{r3, pc}

0800572c <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800572c:	b508      	push	{r3, lr}
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800572e:	22a1      	movs	r2, #161	; 0xa1
 8005730:	7402      	strb	r2, [r0, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8005732:	22fe      	movs	r2, #254	; 0xfe
 8005734:	7442      	strb	r2, [r0, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005736:	2200      	movs	r2, #0
 8005738:	8242      	strh	r2, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800573a:	8282      	strh	r2, [r0, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800573c:	2201      	movs	r2, #1
 800573e:	82c2      	strh	r2, [r0, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8005740:	f000 fe1f 	bl	8006382 <USBH_CtlReq>
}
 8005744:	bd08      	pop	{r3, pc}
	...

08005748 <USBH_MSC_BOT_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005748:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 800574c:	69db      	ldr	r3, [r3, #28]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800574e:	4a05      	ldr	r2, [pc, #20]	; (8005764 <USBH_MSC_BOT_Init+0x1c>)
 8005750:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8005752:	4a05      	ldr	r2, [pc, #20]	; (8005768 <USBH_MSC_BOT_Init+0x20>)
 8005754:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005756:	2201      	movs	r2, #1
 8005758:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800575c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
}
 8005760:	2000      	movs	r0, #0
 8005762:	4770      	bx	lr
 8005764:	43425355 	.word	0x43425355
 8005768:	20304050 	.word	0x20304050

0800576c <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800576c:	b570      	push	{r4, r5, r6, lr}
 800576e:	b082      	sub	sp, #8
 8005770:	4605      	mov	r5, r0
  USBH_StatusTypeDef   status = USBH_BUSY;
  USBH_StatusTypeDef   error  = USBH_BUSY;
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005772:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8005776:	69de      	ldr	r6, [r3, #28]
  uint8_t toggle = 0U;

  switch (MSC_Handle->hbot.state)
 8005778:	f896 4050 	ldrb.w	r4, [r6, #80]	; 0x50
 800577c:	1e63      	subs	r3, r4, #1
 800577e:	2b0a      	cmp	r3, #10
 8005780:	f200 8126 	bhi.w	80059d0 <USBH_MSC_BOT_Process+0x264>
 8005784:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005788:	001b000b 	.word	0x001b000b
 800578c:	004a003f 	.word	0x004a003f
 8005790:	007c0070 	.word	0x007c0070
 8005794:	00b600ab 	.word	0x00b600ab
 8005798:	00f800e6 	.word	0x00f800e6
 800579c:	011a      	.short	0x011a
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800579e:	f886 1061 	strb.w	r1, [r6, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 80057a2:	2302      	movs	r3, #2
 80057a4:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 80057a8:	7973      	ldrb	r3, [r6, #5]
 80057aa:	2201      	movs	r2, #1
 80057ac:	9200      	str	r2, [sp, #0]
 80057ae:	221f      	movs	r2, #31
 80057b0:	f106 0154 	add.w	r1, r6, #84	; 0x54
 80057b4:	f001 f910 	bl	80069d8 <USBH_BulkSendData>

    default:
      break;
  }
  return status;
}
 80057b8:	4620      	mov	r0, r4
 80057ba:	b002      	add	sp, #8
 80057bc:	bd70      	pop	{r4, r5, r6, pc}
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80057be:	7971      	ldrb	r1, [r6, #5]
 80057c0:	f003 f9af 	bl	8008b22 <USBH_LL_GetURBState>
 80057c4:	4604      	mov	r4, r0
      if (URB_Status == USBH_URB_DONE)
 80057c6:	2801      	cmp	r0, #1
 80057c8:	d005      	beq.n	80057d6 <USBH_MSC_BOT_Process+0x6a>
      else if (URB_Status == USBH_URB_NOTREADY)
 80057ca:	2802      	cmp	r0, #2
 80057cc:	d012      	beq.n	80057f4 <USBH_MSC_BOT_Process+0x88>
        if (URB_Status == USBH_URB_STALL)
 80057ce:	2805      	cmp	r0, #5
 80057d0:	d014      	beq.n	80057fc <USBH_MSC_BOT_Process+0x90>
  USBH_StatusTypeDef   status = USBH_BUSY;
 80057d2:	2401      	movs	r4, #1
 80057d4:	e7f0      	b.n	80057b8 <USBH_MSC_BOT_Process+0x4c>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 80057d6:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 80057d8:	b143      	cbz	r3, 80057ec <USBH_MSC_BOT_Process+0x80>
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 80057da:	f996 3060 	ldrsb.w	r3, [r6, #96]	; 0x60
 80057de:	2b00      	cmp	r3, #0
            MSC_Handle->hbot.state = BOT_DATA_IN;
 80057e0:	bfb4      	ite	lt
 80057e2:	2303      	movlt	r3, #3
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 80057e4:	2305      	movge	r3, #5
 80057e6:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 80057ea:	e7e5      	b.n	80057b8 <USBH_MSC_BOT_Process+0x4c>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80057ec:	2307      	movs	r3, #7
 80057ee:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 80057f2:	e7e1      	b.n	80057b8 <USBH_MSC_BOT_Process+0x4c>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80057f4:	2401      	movs	r4, #1
 80057f6:	f886 4050 	strb.w	r4, [r6, #80]	; 0x50
 80057fa:	e7dd      	b.n	80057b8 <USBH_MSC_BOT_Process+0x4c>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 80057fc:	230a      	movs	r3, #10
 80057fe:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8005802:	2401      	movs	r4, #1
 8005804:	e7d8      	b.n	80057b8 <USBH_MSC_BOT_Process+0x4c>
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8005806:	7933      	ldrb	r3, [r6, #4]
 8005808:	8972      	ldrh	r2, [r6, #10]
 800580a:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 800580e:	f001 f8fb 	bl	8006a08 <USBH_BulkReceiveData>
      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8005812:	2304      	movs	r3, #4
 8005814:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8005818:	2401      	movs	r4, #1
      break;
 800581a:	e7cd      	b.n	80057b8 <USBH_MSC_BOT_Process+0x4c>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800581c:	7931      	ldrb	r1, [r6, #4]
 800581e:	f003 f980 	bl	8008b22 <USBH_LL_GetURBState>
 8005822:	4604      	mov	r4, r0
      if (URB_Status == USBH_URB_DONE)
 8005824:	2801      	cmp	r0, #1
 8005826:	d003      	beq.n	8005830 <USBH_MSC_BOT_Process+0xc4>
      else if (URB_Status == USBH_URB_STALL)
 8005828:	2805      	cmp	r0, #5
 800582a:	d018      	beq.n	800585e <USBH_MSC_BOT_Process+0xf2>
  USBH_StatusTypeDef   status = USBH_BUSY;
 800582c:	2401      	movs	r4, #1
 800582e:	e7c3      	b.n	80057b8 <USBH_MSC_BOT_Process+0x4c>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8005830:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8005832:	8972      	ldrh	r2, [r6, #10]
 8005834:	4293      	cmp	r3, r2
 8005836:	d90c      	bls.n	8005852 <USBH_MSC_BOT_Process+0xe6>
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8005838:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 800583c:	4411      	add	r1, r2
 800583e:	f8c6 108c 	str.w	r1, [r6, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8005842:	1a9b      	subs	r3, r3, r2
 8005844:	65f3      	str	r3, [r6, #92]	; 0x5c
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8005846:	b133      	cbz	r3, 8005856 <USBH_MSC_BOT_Process+0xea>
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8005848:	7933      	ldrb	r3, [r6, #4]
 800584a:	4628      	mov	r0, r5
 800584c:	f001 f8dc 	bl	8006a08 <USBH_BulkReceiveData>
 8005850:	e7b2      	b.n	80057b8 <USBH_MSC_BOT_Process+0x4c>
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8005852:	2300      	movs	r3, #0
 8005854:	65f3      	str	r3, [r6, #92]	; 0x5c
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8005856:	2307      	movs	r3, #7
 8005858:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 800585c:	e7ac      	b.n	80057b8 <USBH_MSC_BOT_Process+0x4c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800585e:	2309      	movs	r3, #9
 8005860:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8005864:	2401      	movs	r4, #1
 8005866:	e7a7      	b.n	80057b8 <USBH_MSC_BOT_Process+0x4c>
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8005868:	7973      	ldrb	r3, [r6, #5]
 800586a:	8932      	ldrh	r2, [r6, #8]
 800586c:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 8005870:	2401      	movs	r4, #1
 8005872:	9400      	str	r4, [sp, #0]
 8005874:	f001 f8b0 	bl	80069d8 <USBH_BulkSendData>
      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8005878:	2306      	movs	r3, #6
 800587a:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
      break;
 800587e:	e79b      	b.n	80057b8 <USBH_MSC_BOT_Process+0x4c>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8005880:	7971      	ldrb	r1, [r6, #5]
 8005882:	f003 f94e 	bl	8008b22 <USBH_LL_GetURBState>
 8005886:	4604      	mov	r4, r0
      if (URB_Status == USBH_URB_DONE)
 8005888:	2801      	cmp	r0, #1
 800588a:	d005      	beq.n	8005898 <USBH_MSC_BOT_Process+0x12c>
      else if (URB_Status == USBH_URB_NOTREADY)
 800588c:	2802      	cmp	r0, #2
 800588e:	d01c      	beq.n	80058ca <USBH_MSC_BOT_Process+0x15e>
      else if (URB_Status == USBH_URB_STALL)
 8005890:	2805      	cmp	r0, #5
 8005892:	d01f      	beq.n	80058d4 <USBH_MSC_BOT_Process+0x168>
  USBH_StatusTypeDef   status = USBH_BUSY;
 8005894:	2401      	movs	r4, #1
 8005896:	e78f      	b.n	80057b8 <USBH_MSC_BOT_Process+0x4c>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8005898:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 800589a:	8932      	ldrh	r2, [r6, #8]
 800589c:	4293      	cmp	r3, r2
 800589e:	d90e      	bls.n	80058be <USBH_MSC_BOT_Process+0x152>
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 80058a0:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 80058a4:	4411      	add	r1, r2
 80058a6:	f8c6 108c 	str.w	r1, [r6, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 80058aa:	1a9b      	subs	r3, r3, r2
 80058ac:	65f3      	str	r3, [r6, #92]	; 0x5c
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80058ae:	b143      	cbz	r3, 80058c2 <USBH_MSC_BOT_Process+0x156>
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80058b0:	7973      	ldrb	r3, [r6, #5]
 80058b2:	2001      	movs	r0, #1
 80058b4:	9000      	str	r0, [sp, #0]
 80058b6:	4628      	mov	r0, r5
 80058b8:	f001 f88e 	bl	80069d8 <USBH_BulkSendData>
 80058bc:	e77c      	b.n	80057b8 <USBH_MSC_BOT_Process+0x4c>
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 80058be:	2300      	movs	r3, #0
 80058c0:	65f3      	str	r3, [r6, #92]	; 0x5c
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80058c2:	2307      	movs	r3, #7
 80058c4:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 80058c8:	e776      	b.n	80057b8 <USBH_MSC_BOT_Process+0x4c>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 80058ca:	2305      	movs	r3, #5
 80058cc:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 80058d0:	2401      	movs	r4, #1
 80058d2:	e771      	b.n	80057b8 <USBH_MSC_BOT_Process+0x4c>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 80058d4:	230a      	movs	r3, #10
 80058d6:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 80058da:	2401      	movs	r4, #1
 80058dc:	e76c      	b.n	80057b8 <USBH_MSC_BOT_Process+0x4c>
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 80058de:	7933      	ldrb	r3, [r6, #4]
 80058e0:	220d      	movs	r2, #13
 80058e2:	f106 0178 	add.w	r1, r6, #120	; 0x78
 80058e6:	f001 f88f 	bl	8006a08 <USBH_BulkReceiveData>
      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 80058ea:	2308      	movs	r3, #8
 80058ec:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 80058f0:	2401      	movs	r4, #1
      break;
 80058f2:	e761      	b.n	80057b8 <USBH_MSC_BOT_Process+0x4c>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80058f4:	7931      	ldrb	r1, [r6, #4]
 80058f6:	f003 f914 	bl	8008b22 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 80058fa:	2801      	cmp	r0, #1
 80058fc:	d003      	beq.n	8005906 <USBH_MSC_BOT_Process+0x19a>
      else if (URB_Status == USBH_URB_STALL)
 80058fe:	2805      	cmp	r0, #5
 8005900:	d023      	beq.n	800594a <USBH_MSC_BOT_Process+0x1de>
  USBH_StatusTypeDef   status = USBH_BUSY;
 8005902:	2401      	movs	r4, #1
 8005904:	e758      	b.n	80057b8 <USBH_MSC_BOT_Process+0x4c>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005906:	2301      	movs	r3, #1
 8005908:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800590c:	f886 3052 	strb.w	r3, [r6, #82]	; 0x52
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005910:	f8d5 337c 	ldr.w	r3, [r5, #892]	; 0x37c
 8005914:	69dc      	ldr	r4, [r3, #28]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8005916:	7921      	ldrb	r1, [r4, #4]
 8005918:	4628      	mov	r0, r5
 800591a:	f003 f8fc 	bl	8008b16 <USBH_LL_GetLastXferSize>
 800591e:	280d      	cmp	r0, #13
 8005920:	d001      	beq.n	8005926 <USBH_MSC_BOT_Process+0x1ba>
          status = USBH_FAIL;
 8005922:	2402      	movs	r4, #2
 8005924:	e748      	b.n	80057b8 <USBH_MSC_BOT_Process+0x4c>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8005926:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8005928:	4b2a      	ldr	r3, [pc, #168]	; (80059d4 <USBH_MSC_BOT_Process+0x268>)
 800592a:	429a      	cmp	r2, r3
 800592c:	d001      	beq.n	8005932 <USBH_MSC_BOT_Process+0x1c6>
          status = USBH_FAIL;
 800592e:	2402      	movs	r4, #2
 8005930:	e742      	b.n	80057b8 <USBH_MSC_BOT_Process+0x4c>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8005932:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8005934:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005936:	429a      	cmp	r2, r3
 8005938:	d001      	beq.n	800593e <USBH_MSC_BOT_Process+0x1d2>
          status = USBH_FAIL;
 800593a:	2402      	movs	r4, #2
 800593c:	e73c      	b.n	80057b8 <USBH_MSC_BOT_Process+0x4c>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800593e:	f894 4084 	ldrb.w	r4, [r4, #132]	; 0x84
          status = USBH_FAIL;
 8005942:	2c00      	cmp	r4, #0
 8005944:	bf18      	it	ne
 8005946:	2402      	movne	r4, #2
 8005948:	e736      	b.n	80057b8 <USBH_MSC_BOT_Process+0x4c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800594a:	2309      	movs	r3, #9
 800594c:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8005950:	2401      	movs	r4, #1
 8005952:	e731      	b.n	80057b8 <USBH_MSC_BOT_Process+0x4c>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8005954:	79f1      	ldrb	r1, [r6, #7]
 8005956:	f000 fff4 	bl	8006942 <USBH_ClrFeature>
      if (error == USBH_OK)
 800595a:	b920      	cbnz	r0, 8005966 <USBH_MSC_BOT_Process+0x1fa>
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800595c:	2307      	movs	r3, #7
 800595e:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8005962:	2401      	movs	r4, #1
 8005964:	e728      	b.n	80057b8 <USBH_MSC_BOT_Process+0x4c>
      else if (error == USBH_UNRECOVERED_ERROR)
 8005966:	2804      	cmp	r0, #4
 8005968:	d001      	beq.n	800596e <USBH_MSC_BOT_Process+0x202>
  USBH_StatusTypeDef   status = USBH_BUSY;
 800596a:	2401      	movs	r4, #1
 800596c:	e724      	b.n	80057b8 <USBH_MSC_BOT_Process+0x4c>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800596e:	230b      	movs	r3, #11
 8005970:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8005974:	2401      	movs	r4, #1
 8005976:	e71f      	b.n	80057b8 <USBH_MSC_BOT_Process+0x4c>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8005978:	79b1      	ldrb	r1, [r6, #6]
 800597a:	f000 ffe2 	bl	8006942 <USBH_ClrFeature>
      if (error == USBH_OK)
 800597e:	b118      	cbz	r0, 8005988 <USBH_MSC_BOT_Process+0x21c>
        if (error == USBH_UNRECOVERED_ERROR)
 8005980:	2804      	cmp	r0, #4
 8005982:	d016      	beq.n	80059b2 <USBH_MSC_BOT_Process+0x246>
  USBH_StatusTypeDef   status = USBH_BUSY;
 8005984:	2401      	movs	r4, #1
 8005986:	e717      	b.n	80057b8 <USBH_MSC_BOT_Process+0x4c>
        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8005988:	7971      	ldrb	r1, [r6, #5]
 800598a:	4628      	mov	r0, r5
 800598c:	f003 f8f2 	bl	8008b74 <USBH_LL_GetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8005990:	f1c0 0201 	rsb	r2, r0, #1
 8005994:	b2d2      	uxtb	r2, r2
 8005996:	7971      	ldrb	r1, [r6, #5]
 8005998:	4628      	mov	r0, r5
 800599a:	f003 f8d6 	bl	8008b4a <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800599e:	2200      	movs	r2, #0
 80059a0:	7931      	ldrb	r1, [r6, #4]
 80059a2:	4628      	mov	r0, r5
 80059a4:	f003 f8d1 	bl	8008b4a <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 80059a8:	2309      	movs	r3, #9
 80059aa:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 80059ae:	2401      	movs	r4, #1
 80059b0:	e702      	b.n	80057b8 <USBH_MSC_BOT_Process+0x4c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 80059b2:	230b      	movs	r3, #11
 80059b4:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 80059b8:	2401      	movs	r4, #1
 80059ba:	e6fd      	b.n	80057b8 <USBH_MSC_BOT_Process+0x4c>
      status = USBH_MSC_BOT_REQ_Reset(phost);
 80059bc:	f7ff fea9 	bl	8005712 <USBH_MSC_BOT_REQ_Reset>
      if (status == USBH_OK)
 80059c0:	4604      	mov	r4, r0
 80059c2:	2800      	cmp	r0, #0
 80059c4:	f47f aef8 	bne.w	80057b8 <USBH_MSC_BOT_Process+0x4c>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80059c8:	2301      	movs	r3, #1
 80059ca:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 80059ce:	e6f3      	b.n	80057b8 <USBH_MSC_BOT_Process+0x4c>
  switch (MSC_Handle->hbot.state)
 80059d0:	2401      	movs	r4, #1
 80059d2:	e6f1      	b.n	80057b8 <USBH_MSC_BOT_Process+0x4c>
 80059d4:	53425355 	.word	0x53425355

080059d8 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 80059d8:	b508      	push	{r3, lr}
 80059da:	4602      	mov	r2, r0
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80059dc:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 80059e0:	69db      	ldr	r3, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
 80059e2:	f893 0052 	ldrb.w	r0, [r3, #82]	; 0x52
 80059e6:	2801      	cmp	r0, #1
 80059e8:	d003      	beq.n	80059f2 <USBH_MSC_SCSI_TestUnitReady+0x1a>
 80059ea:	2802      	cmp	r0, #2
 80059ec:	d017      	beq.n	8005a1e <USBH_MSC_SCSI_TestUnitReady+0x46>
 80059ee:	2002      	movs	r0, #2
    default:
      break;
  }

  return error;
}
 80059f0:	bd08      	pop	{r3, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 80059f2:	2200      	movs	r2, #0
 80059f4:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80059f6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80059fa:	210a      	movs	r1, #10
 80059fc:	f883 1062 	strb.w	r1, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8005a00:	f8c3 2063 	str.w	r2, [r3, #99]	; 0x63
 8005a04:	f8c3 2067 	str.w	r2, [r3, #103]	; 0x67
 8005a08:	f8c3 206b 	str.w	r2, [r3, #107]	; 0x6b
 8005a0c:	f8c3 206f 	str.w	r2, [r3, #111]	; 0x6f
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005a10:	2201      	movs	r2, #1
 8005a12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8005a16:	2202      	movs	r2, #2
 8005a18:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      break;
 8005a1c:	e7e8      	b.n	80059f0 <USBH_MSC_SCSI_TestUnitReady+0x18>
      error = USBH_MSC_BOT_Process(phost, lun);
 8005a1e:	4610      	mov	r0, r2
 8005a20:	f7ff fea4 	bl	800576c <USBH_MSC_BOT_Process>
      break;
 8005a24:	e7e4      	b.n	80059f0 <USBH_MSC_SCSI_TestUnitReady+0x18>

08005a26 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8005a26:	b538      	push	{r3, r4, r5, lr}
 8005a28:	4603      	mov	r3, r0
  USBH_StatusTypeDef    error = USBH_BUSY ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005a2a:	f8d0 037c 	ldr.w	r0, [r0, #892]	; 0x37c
 8005a2e:	69c4      	ldr	r4, [r0, #28]

  switch (MSC_Handle->hbot.cmd_state)
 8005a30:	f894 0052 	ldrb.w	r0, [r4, #82]	; 0x52
 8005a34:	2801      	cmp	r0, #1
 8005a36:	d004      	beq.n	8005a42 <USBH_MSC_SCSI_ReadCapacity+0x1c>
 8005a38:	4615      	mov	r5, r2
 8005a3a:	2802      	cmp	r0, #2
 8005a3c:	d020      	beq.n	8005a80 <USBH_MSC_SCSI_ReadCapacity+0x5a>
 8005a3e:	2001      	movs	r0, #1
    default:
      break;
  }

  return error;
}
 8005a40:	bd38      	pop	{r3, r4, r5, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8005a42:	2308      	movs	r3, #8
 8005a44:	65e3      	str	r3, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8005a46:	2380      	movs	r3, #128	; 0x80
 8005a48:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8005a4c:	230a      	movs	r3, #10
 8005a4e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8005a52:	2300      	movs	r3, #0
 8005a54:	f8c4 3063 	str.w	r3, [r4, #99]	; 0x63
 8005a58:	f8c4 3067 	str.w	r3, [r4, #103]	; 0x67
 8005a5c:	f8c4 306b 	str.w	r3, [r4, #107]	; 0x6b
 8005a60:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8005a64:	2325      	movs	r3, #37	; 0x25
 8005a66:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8005a70:	2302      	movs	r3, #2
 8005a72:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8005a76:	f104 0310 	add.w	r3, r4, #16
 8005a7a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      break;
 8005a7e:	e7df      	b.n	8005a40 <USBH_MSC_SCSI_ReadCapacity+0x1a>
      error = USBH_MSC_BOT_Process(phost, lun);
 8005a80:	4618      	mov	r0, r3
 8005a82:	f7ff fe73 	bl	800576c <USBH_MSC_BOT_Process>
      if (error == USBH_OK)
 8005a86:	2800      	cmp	r0, #0
 8005a88:	d1da      	bne.n	8005a40 <USBH_MSC_SCSI_ReadCapacity+0x1a>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8005a8a:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005a8e:	7891      	ldrb	r1, [r2, #2]
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8005a90:	7853      	ldrb	r3, [r2, #1]
 8005a92:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8005a94:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005a98:	78d1      	ldrb	r1, [r2, #3]
 8005a9a:	430b      	orrs	r3, r1
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8005a9c:	7812      	ldrb	r2, [r2, #0]
 8005a9e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8005aa2:	602b      	str	r3, [r5, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8005aa4:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005aa8:	7991      	ldrb	r1, [r2, #6]
 8005aaa:	79d3      	ldrb	r3, [r2, #7]
 8005aac:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005ab0:	80ab      	strh	r3, [r5, #4]
 8005ab2:	e7c5      	b.n	8005a40 <USBH_MSC_SCSI_ReadCapacity+0x1a>

08005ab4 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8005ab4:	b570      	push	{r4, r5, r6, lr}
  USBH_StatusTypeDef error = USBH_FAIL;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005ab6:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8005aba:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
 8005abc:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 8005ac0:	2d01      	cmp	r5, #1
 8005ac2:	d005      	beq.n	8005ad0 <USBH_MSC_SCSI_Inquiry+0x1c>
 8005ac4:	4616      	mov	r6, r2
 8005ac6:	2d02      	cmp	r5, #2
 8005ac8:	d024      	beq.n	8005b14 <USBH_MSC_SCSI_Inquiry+0x60>
 8005aca:	2502      	movs	r5, #2
    default:
      break;
  }

  return error;
}
 8005acc:	4628      	mov	r0, r5
 8005ace:	bd70      	pop	{r4, r5, r6, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8005ad0:	2224      	movs	r2, #36	; 0x24
 8005ad2:	65e2      	str	r2, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8005ad4:	2380      	movs	r3, #128	; 0x80
 8005ad6:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8005ada:	230a      	movs	r3, #10
 8005adc:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	f8c4 3063 	str.w	r3, [r4, #99]	; 0x63
 8005ae6:	f8c4 3067 	str.w	r3, [r4, #103]	; 0x67
 8005aea:	f8a4 306b 	strh.w	r3, [r4, #107]	; 0x6b
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8005aee:	2312      	movs	r3, #18
 8005af0:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8005af4:	0149      	lsls	r1, r1, #5
 8005af6:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8005afa:	f884 2067 	strb.w	r2, [r4, #103]	; 0x67
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005afe:	2301      	movs	r3, #1
 8005b00:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8005b04:	2302      	movs	r3, #2
 8005b06:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8005b0a:	f104 0310 	add.w	r3, r4, #16
 8005b0e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      break;
 8005b12:	e7db      	b.n	8005acc <USBH_MSC_SCSI_Inquiry+0x18>
      error = USBH_MSC_BOT_Process(phost, lun);
 8005b14:	f7ff fe2a 	bl	800576c <USBH_MSC_BOT_Process>
      if (error == USBH_OK)
 8005b18:	4605      	mov	r5, r0
 8005b1a:	2800      	cmp	r0, #0
 8005b1c:	d1d6      	bne.n	8005acc <USBH_MSC_SCSI_Inquiry+0x18>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8005b1e:	2222      	movs	r2, #34	; 0x22
 8005b20:	2100      	movs	r1, #0
 8005b22:	4630      	mov	r0, r6
 8005b24:	f003 fc96 	bl	8009454 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8005b28:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	f003 031f 	and.w	r3, r3, #31
 8005b32:	7073      	strb	r3, [r6, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8005b34:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	095b      	lsrs	r3, r3, #5
 8005b3c:	7033      	strb	r3, [r6, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8005b3e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005b42:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8005b46:	2b00      	cmp	r3, #0
          inquiry->RemovableMedia = 1U;
 8005b48:	bfbc      	itt	lt
 8005b4a:	2301      	movlt	r3, #1
 8005b4c:	70b3      	strblt	r3, [r6, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8005b4e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005b52:	689a      	ldr	r2, [r3, #8]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	f8c6 2003 	str.w	r2, [r6, #3]
 8005b5a:	f8c6 3007 	str.w	r3, [r6, #7]
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8005b5e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005b62:	6918      	ldr	r0, [r3, #16]
 8005b64:	6959      	ldr	r1, [r3, #20]
 8005b66:	699a      	ldr	r2, [r3, #24]
 8005b68:	69db      	ldr	r3, [r3, #28]
 8005b6a:	60f0      	str	r0, [r6, #12]
 8005b6c:	6131      	str	r1, [r6, #16]
 8005b6e:	6172      	str	r2, [r6, #20]
 8005b70:	61b3      	str	r3, [r6, #24]
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8005b72:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005b76:	6a1b      	ldr	r3, [r3, #32]
 8005b78:	f8c6 301d 	str.w	r3, [r6, #29]
 8005b7c:	e7a6      	b.n	8005acc <USBH_MSC_SCSI_Inquiry+0x18>

08005b7e <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8005b7e:	b538      	push	{r3, r4, r5, lr}
 8005b80:	4603      	mov	r3, r0
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005b82:	f8d0 037c 	ldr.w	r0, [r0, #892]	; 0x37c
 8005b86:	69c4      	ldr	r4, [r0, #28]

  switch (MSC_Handle->hbot.cmd_state)
 8005b88:	f894 0052 	ldrb.w	r0, [r4, #82]	; 0x52
 8005b8c:	2801      	cmp	r0, #1
 8005b8e:	d004      	beq.n	8005b9a <USBH_MSC_SCSI_RequestSense+0x1c>
 8005b90:	4615      	mov	r5, r2
 8005b92:	2802      	cmp	r0, #2
 8005b94:	d025      	beq.n	8005be2 <USBH_MSC_SCSI_RequestSense+0x64>
 8005b96:	2002      	movs	r0, #2
    default:
      break;
  }

  return error;
}
 8005b98:	bd38      	pop	{r3, r4, r5, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8005b9a:	220e      	movs	r2, #14
 8005b9c:	65e2      	str	r2, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8005b9e:	2380      	movs	r3, #128	; 0x80
 8005ba0:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8005ba4:	230a      	movs	r3, #10
 8005ba6:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8005baa:	2300      	movs	r3, #0
 8005bac:	f8c4 3063 	str.w	r3, [r4, #99]	; 0x63
 8005bb0:	f8c4 3067 	str.w	r3, [r4, #103]	; 0x67
 8005bb4:	f8c4 306b 	str.w	r3, [r4, #107]	; 0x6b
 8005bb8:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8005bc2:	0149      	lsls	r1, r1, #5
 8005bc4:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8005bc8:	f884 2067 	strb.w	r2, [r4, #103]	; 0x67
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8005bd2:	2302      	movs	r3, #2
 8005bd4:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8005bd8:	f104 0310 	add.w	r3, r4, #16
 8005bdc:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      break;
 8005be0:	e7da      	b.n	8005b98 <USBH_MSC_SCSI_RequestSense+0x1a>
      error = USBH_MSC_BOT_Process(phost, lun);
 8005be2:	4618      	mov	r0, r3
 8005be4:	f7ff fdc2 	bl	800576c <USBH_MSC_BOT_Process>
      if (error == USBH_OK)
 8005be8:	2800      	cmp	r0, #0
 8005bea:	d1d5      	bne.n	8005b98 <USBH_MSC_SCSI_RequestSense+0x1a>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8005bec:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005bf0:	789b      	ldrb	r3, [r3, #2]
 8005bf2:	f003 030f 	and.w	r3, r3, #15
 8005bf6:	702b      	strb	r3, [r5, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8005bf8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005bfc:	7b1b      	ldrb	r3, [r3, #12]
 8005bfe:	706b      	strb	r3, [r5, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8005c00:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005c04:	7b5b      	ldrb	r3, [r3, #13]
 8005c06:	70ab      	strb	r3, [r5, #2]
 8005c08:	e7c6      	b.n	8005b98 <USBH_MSC_SCSI_RequestSense+0x1a>

08005c0a <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8005c0a:	b538      	push	{r3, r4, r5, lr}
 8005c0c:	4684      	mov	ip, r0
  USBH_StatusTypeDef    error = USBH_FAIL ;

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005c0e:	f8d0 037c 	ldr.w	r0, [r0, #892]	; 0x37c
 8005c12:	69c4      	ldr	r4, [r0, #28]

  switch (MSC_Handle->hbot.cmd_state)
 8005c14:	f894 0052 	ldrb.w	r0, [r4, #82]	; 0x52
 8005c18:	2801      	cmp	r0, #1
 8005c1a:	d003      	beq.n	8005c24 <USBH_MSC_SCSI_Write+0x1a>
 8005c1c:	2802      	cmp	r0, #2
 8005c1e:	d036      	beq.n	8005c8e <USBH_MSC_SCSI_Write+0x84>
 8005c20:	2002      	movs	r0, #2
    default:
      break;
  }

  return error;
}
 8005c22:	bd38      	pop	{r3, r4, r5, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8005c24:	f8b4 1098 	ldrh.w	r1, [r4, #152]	; 0x98
 8005c28:	9d04      	ldr	r5, [sp, #16]
 8005c2a:	fb05 f101 	mul.w	r1, r5, r1
 8005c2e:	65e1      	str	r1, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8005c30:	2100      	movs	r1, #0
 8005c32:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8005c36:	f04f 0c0a 	mov.w	ip, #10
 8005c3a:	f884 c062 	strb.w	ip, [r4, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8005c3e:	f8c4 1063 	str.w	r1, [r4, #99]	; 0x63
 8005c42:	f8c4 1067 	str.w	r1, [r4, #103]	; 0x67
 8005c46:	f8c4 106b 	str.w	r1, [r4, #107]	; 0x6b
 8005c4a:	f8c4 106f 	str.w	r1, [r4, #111]	; 0x6f
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8005c4e:	212a      	movs	r1, #42	; 0x2a
 8005c50:	f884 1063 	strb.w	r1, [r4, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8005c54:	f3c2 6107 	ubfx	r1, r2, #24, #8
 8005c58:	f884 1065 	strb.w	r1, [r4, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8005c5c:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8005c60:	f884 1066 	strb.w	r1, [r4, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8005c64:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8005c68:	f884 1067 	strb.w	r1, [r4, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8005c6c:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8005c70:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8005c74:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8005c78:	f884 506b 	strb.w	r5, [r4, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8005c82:	2202      	movs	r2, #2
 8005c84:	f884 2052 	strb.w	r2, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8005c88:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      break;
 8005c8c:	e7c9      	b.n	8005c22 <USBH_MSC_SCSI_Write+0x18>
      error = USBH_MSC_BOT_Process(phost, lun);
 8005c8e:	4660      	mov	r0, ip
 8005c90:	f7ff fd6c 	bl	800576c <USBH_MSC_BOT_Process>
      break;
 8005c94:	e7c5      	b.n	8005c22 <USBH_MSC_SCSI_Write+0x18>

08005c96 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8005c96:	b538      	push	{r3, r4, r5, lr}
 8005c98:	4684      	mov	ip, r0
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005c9a:	f8d0 037c 	ldr.w	r0, [r0, #892]	; 0x37c
 8005c9e:	69c4      	ldr	r4, [r0, #28]

  switch (MSC_Handle->hbot.cmd_state)
 8005ca0:	f894 0052 	ldrb.w	r0, [r4, #82]	; 0x52
 8005ca4:	2801      	cmp	r0, #1
 8005ca6:	d003      	beq.n	8005cb0 <USBH_MSC_SCSI_Read+0x1a>
 8005ca8:	2802      	cmp	r0, #2
 8005caa:	d036      	beq.n	8005d1a <USBH_MSC_SCSI_Read+0x84>
 8005cac:	2002      	movs	r0, #2
    default:
      break;
  }

  return error;
}
 8005cae:	bd38      	pop	{r3, r4, r5, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8005cb0:	f8b4 1098 	ldrh.w	r1, [r4, #152]	; 0x98
 8005cb4:	9d04      	ldr	r5, [sp, #16]
 8005cb6:	fb05 f101 	mul.w	r1, r5, r1
 8005cba:	65e1      	str	r1, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8005cbc:	2180      	movs	r1, #128	; 0x80
 8005cbe:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8005cc2:	210a      	movs	r1, #10
 8005cc4:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8005cc8:	2100      	movs	r1, #0
 8005cca:	f8c4 1063 	str.w	r1, [r4, #99]	; 0x63
 8005cce:	f8c4 1067 	str.w	r1, [r4, #103]	; 0x67
 8005cd2:	f8c4 106b 	str.w	r1, [r4, #107]	; 0x6b
 8005cd6:	f8c4 106f 	str.w	r1, [r4, #111]	; 0x6f
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8005cda:	2128      	movs	r1, #40	; 0x28
 8005cdc:	f884 1063 	strb.w	r1, [r4, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8005ce0:	f3c2 6107 	ubfx	r1, r2, #24, #8
 8005ce4:	f884 1065 	strb.w	r1, [r4, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8005ce8:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8005cec:	f884 1066 	strb.w	r1, [r4, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8005cf0:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8005cf4:	f884 1067 	strb.w	r1, [r4, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8005cf8:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8005cfc:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8005d00:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8005d04:	f884 506b 	strb.w	r5, [r4, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005d08:	2201      	movs	r2, #1
 8005d0a:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8005d0e:	2202      	movs	r2, #2
 8005d10:	f884 2052 	strb.w	r2, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8005d14:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      break;
 8005d18:	e7c9      	b.n	8005cae <USBH_MSC_SCSI_Read+0x18>
      error = USBH_MSC_BOT_Process(phost, lun);
 8005d1a:	4660      	mov	r0, ip
 8005d1c:	f7ff fd26 	bl	800576c <USBH_MSC_BOT_Process>
      break;
 8005d20:	e7c5      	b.n	8005cae <USBH_MSC_SCSI_Read+0x18>

08005d22 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005d22:	4684      	mov	ip, r0
  uint32_t i = 0U;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005d24:	f500 7360 	add.w	r3, r0, #896	; 0x380
 8005d28:	f500 7170 	add.w	r1, r0, #960	; 0x3c0
  {
    phost->Pipes[i] = 0U;
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f843 2f04 	str.w	r2, [r3, #4]!
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005d32:	428b      	cmp	r3, r1
 8005d34:	d1fb      	bne.n	8005d2e <DeInitStateMachine+0xc>
 8005d36:	f20c 131b 	addw	r3, ip, #283	; 0x11b
 8005d3a:	f20c 311b 	addw	r1, ip, #795	; 0x31b
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
  {
    phost->device.Data[i] = 0U;
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f803 2f01 	strb.w	r2, [r3, #1]!
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005d44:	428b      	cmp	r3, r1
 8005d46:	d1fb      	bne.n	8005d40 <DeInitStateMachine+0x1e>
  }

  phost->gState = HOST_IDLE;
 8005d48:	2000      	movs	r0, #0
 8005d4a:	f88c 0000 	strb.w	r0, [ip]
  phost->EnumState = ENUM_IDLE;
 8005d4e:	f88c 0001 	strb.w	r0, [ip, #1]
  phost->RequestState = CMD_SEND;
 8005d52:	2301      	movs	r3, #1
 8005d54:	f88c 3002 	strb.w	r3, [ip, #2]
  phost->Timer = 0U;
 8005d58:	f8cc 03c4 	str.w	r0, [ip, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005d5c:	f88c 3018 	strb.w	r3, [ip, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005d60:	2240      	movs	r2, #64	; 0x40
 8005d62:	f88c 2006 	strb.w	r2, [ip, #6]
  phost->Control.errorcount = 0U;
 8005d66:	f88c 0019 	strb.w	r0, [ip, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005d6a:	f88c 031c 	strb.w	r0, [ip, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8005d6e:	f88c 331d 	strb.w	r3, [ip, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8005d72:	f88c 031f 	strb.w	r0, [ip, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8005d76:	f88c 031e 	strb.w	r0, [ip, #798]	; 0x31e

  return USBH_OK;
}
 8005d7a:	4770      	bx	lr

08005d7c <USBH_Init>:
  if (phost == NULL)
 8005d7c:	b1d8      	cbz	r0, 8005db6 <USBH_Init+0x3a>
{
 8005d7e:	b570      	push	{r4, r5, r6, lr}
 8005d80:	460e      	mov	r6, r1
 8005d82:	4604      	mov	r4, r0
  phost->id = id;
 8005d84:	f880 23cc 	strb.w	r2, [r0, #972]	; 0x3cc
  phost->pActiveClass = NULL;
 8005d88:	2500      	movs	r5, #0
 8005d8a:	f8c0 537c 	str.w	r5, [r0, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005d8e:	f8c0 5380 	str.w	r5, [r0, #896]	; 0x380
  (void)DeInitStateMachine(phost);
 8005d92:	f7ff ffc6 	bl	8005d22 <DeInitStateMachine>
  phost->device.PortEnabled = 0U;
 8005d96:	f884 5323 	strb.w	r5, [r4, #803]	; 0x323
  phost->device.is_connected = 0U;
 8005d9a:	f884 5320 	strb.w	r5, [r4, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005d9e:	f884 5321 	strb.w	r5, [r4, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005da2:	f884 5322 	strb.w	r5, [r4, #802]	; 0x322
  if (pUsrFunc != NULL)
 8005da6:	b10e      	cbz	r6, 8005dac <USBH_Init+0x30>
    phost->pUser = pUsrFunc;
 8005da8:	f8c4 63d4 	str.w	r6, [r4, #980]	; 0x3d4
  (void)USBH_LL_Init(phost);
 8005dac:	4620      	mov	r0, r4
 8005dae:	f002 fe7b 	bl	8008aa8 <USBH_LL_Init>
  return USBH_OK;
 8005db2:	2000      	movs	r0, #0
}
 8005db4:	bd70      	pop	{r4, r5, r6, pc}
    return USBH_FAIL;
 8005db6:	2002      	movs	r0, #2
}
 8005db8:	4770      	bx	lr

08005dba <USBH_RegisterClass>:
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
  USBH_StatusTypeDef status = USBH_OK;

  if (pclass != NULL)
 8005dba:	b149      	cbz	r1, 8005dd0 <USBH_RegisterClass+0x16>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005dbc:	f8d0 3380 	ldr.w	r3, [r0, #896]	; 0x380
 8005dc0:	b943      	cbnz	r3, 8005dd4 <USBH_RegisterClass+0x1a>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	f8c0 3380 	str.w	r3, [r0, #896]	; 0x380
 8005dc8:	f8c0 1378 	str.w	r1, [r0, #888]	; 0x378
      status = USBH_OK;
 8005dcc:	2000      	movs	r0, #0
 8005dce:	4770      	bx	lr
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005dd0:	2002      	movs	r0, #2
 8005dd2:	4770      	bx	lr
      status = USBH_FAIL;
 8005dd4:	2002      	movs	r0, #2
  }

  return status;
}
 8005dd6:	4770      	bx	lr

08005dd8 <USBH_SelectInterface>:
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
  USBH_StatusTypeDef status = USBH_OK;

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005dd8:	f890 333c 	ldrb.w	r3, [r0, #828]	; 0x33c
 8005ddc:	428b      	cmp	r3, r1
  {
    phost->device.current_interface = interface;
 8005dde:	bf86      	itte	hi
 8005de0:	f880 1324 	strbhi.w	r1, [r0, #804]	; 0x324
  USBH_StatusTypeDef status = USBH_OK;
 8005de4:	2000      	movhi	r0, #0
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005de6:	2002      	movls	r0, #2
  }

  return status;
}
 8005de8:	4770      	bx	lr

08005dea <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005dea:	b530      	push	{r4, r5, lr}
  uint8_t if_ix = 0U;

  pif = (USBH_InterfaceDescTypeDef *)NULL;
  pcfg = &phost->device.CfgDesc;

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005dec:	4684      	mov	ip, r0
{
 8005dee:	f04f 0e00 	mov.w	lr, #0
 8005df2:	e00c      	b.n	8005e0e <USBH_FindInterface+0x24>
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005df4:	f895 4349 	ldrb.w	r4, [r5, #841]	; 0x349
 8005df8:	429c      	cmp	r4, r3
 8005dfa:	d019      	beq.n	8005e30 <USBH_FindInterface+0x46>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005dfc:	2bff      	cmp	r3, #255	; 0xff
 8005dfe:	d017      	beq.n	8005e30 <USBH_FindInterface+0x46>
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005e00:	f10e 0e01 	add.w	lr, lr, #1
 8005e04:	f10c 0c1a 	add.w	ip, ip, #26
 8005e08:	f1be 0f02 	cmp.w	lr, #2
 8005e0c:	d00f      	beq.n	8005e2e <USBH_FindInterface+0x44>
 8005e0e:	fa5f f08e 	uxtb.w	r0, lr
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005e12:	4665      	mov	r5, ip
 8005e14:	f89c 4347 	ldrb.w	r4, [ip, #839]	; 0x347
 8005e18:	428c      	cmp	r4, r1
 8005e1a:	d001      	beq.n	8005e20 <USBH_FindInterface+0x36>
 8005e1c:	29ff      	cmp	r1, #255	; 0xff
 8005e1e:	d1ef      	bne.n	8005e00 <USBH_FindInterface+0x16>
 8005e20:	f895 4348 	ldrb.w	r4, [r5, #840]	; 0x348
 8005e24:	4294      	cmp	r4, r2
 8005e26:	d0e5      	beq.n	8005df4 <USBH_FindInterface+0xa>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005e28:	2aff      	cmp	r2, #255	; 0xff
 8005e2a:	d1e9      	bne.n	8005e00 <USBH_FindInterface+0x16>
 8005e2c:	e7e2      	b.n	8005df4 <USBH_FindInterface+0xa>
    {
      return  if_ix;
    }
    if_ix++;
  }
  return 0xFFU;
 8005e2e:	20ff      	movs	r0, #255	; 0xff
}
 8005e30:	bd30      	pop	{r4, r5, pc}

08005e32 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8005e32:	b510      	push	{r4, lr}
 8005e34:	4604      	mov	r4, r0
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8005e36:	f002 febc 	bl	8008bb2 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8005e3a:	2101      	movs	r1, #1
 8005e3c:	4620      	mov	r0, r4
 8005e3e:	f002 fe76 	bl	8008b2e <USBH_LL_DriverVBUS>

  return USBH_OK;
}
 8005e42:	2000      	movs	r0, #0
 8005e44:	bd10      	pop	{r4, pc}

08005e46 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8005e46:	b570      	push	{r4, r5, r6, lr}
 8005e48:	b086      	sub	sp, #24
 8005e4a:	4604      	mov	r4, r0
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8005e4c:	2302      	movs	r3, #2
 8005e4e:	f88d 3017 	strb.w	r3, [sp, #23]
  uint8_t idx = 0U;

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8005e52:	f890 3321 	ldrb.w	r3, [r0, #801]	; 0x321
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	2b01      	cmp	r3, #1
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8005e5a:	bf04      	itt	eq
 8005e5c:	2303      	moveq	r3, #3
 8005e5e:	7003      	strbeq	r3, [r0, #0]
  }

  switch (phost->gState)
 8005e60:	7803      	ldrb	r3, [r0, #0]
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	2b0b      	cmp	r3, #11
 8005e66:	d875      	bhi.n	8005f54 <USBH_Process+0x10e>
 8005e68:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005e6c:	001e000c 	.word	0x001e000c
 8005e70:	022a0040 	.word	0x022a0040
 8005e74:	00770074 	.word	0x00770074
 8005e78:	01b70209 	.word	0x01b70209
 8005e7c:	01cb01c1 	.word	0x01cb01c1
 8005e80:	022201e7 	.word	0x022201e7
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8005e84:	f890 3320 	ldrb.w	r3, [r0, #800]	; 0x320
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d063      	beq.n	8005f54 <USBH_Process+0x10e>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	7003      	strb	r3, [r0, #0]
        USBH_Delay(200U);
 8005e90:	20c8      	movs	r0, #200	; 0xc8
 8005e92:	f002 fe83 	bl	8008b9c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8005e96:	4620      	mov	r0, r4
 8005e98:	f002 fe9b 	bl	8008bd2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	f884 331c 	strb.w	r3, [r4, #796]	; 0x31c
        phost->Timeout = 0U;
 8005ea2:	f8c4 33c8 	str.w	r3, [r4, #968]	; 0x3c8
 8005ea6:	e055      	b.n	8005f54 <USBH_Process+0x10e>
      }
      break;

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8005ea8:	f890 3323 	ldrb.w	r3, [r0, #803]	; 0x323
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d010      	beq.n	8005ed2 <USBH_Process+0x8c>
        phost->device.RstCnt = 0U;
        phost->gState = HOST_DEV_ATTACHED;
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8005eb0:	f8d0 33c8 	ldr.w	r3, [r0, #968]	; 0x3c8
 8005eb4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005eb8:	d911      	bls.n	8005ede <USBH_Process+0x98>
        {
          phost->device.RstCnt++;
 8005eba:	f890 331f 	ldrb.w	r3, [r0, #799]	; 0x31f
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8005ec6:	2b03      	cmp	r3, #3
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8005ec8:	bf8c      	ite	hi
 8005eca:	230d      	movhi	r3, #13
          }
          else
          {
            phost->gState = HOST_IDLE;
 8005ecc:	2300      	movls	r3, #0
 8005ece:	7003      	strb	r3, [r0, #0]
 8005ed0:	e040      	b.n	8005f54 <USBH_Process+0x10e>
        phost->device.RstCnt = 0U;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8005ed8:	2302      	movs	r3, #2
 8005eda:	7003      	strb	r3, [r0, #0]
 8005edc:	e03a      	b.n	8005f54 <USBH_Process+0x10e>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8005ede:	330a      	adds	r3, #10
 8005ee0:	f8c0 33c8 	str.w	r3, [r0, #968]	; 0x3c8
          USBH_Delay(10U);
 8005ee4:	200a      	movs	r0, #10
 8005ee6:	f002 fe59 	bl	8008b9c <USBH_Delay>
 8005eea:	e033      	b.n	8005f54 <USBH_Process+0x10e>
#endif
      break;

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8005eec:	f8d0 33d4 	ldr.w	r3, [r0, #980]	; 0x3d4
 8005ef0:	b10b      	cbz	r3, 8005ef6 <USBH_Process+0xb0>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8005ef2:	2104      	movs	r1, #4
 8005ef4:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8005ef6:	2064      	movs	r0, #100	; 0x64
 8005ef8:	f002 fe50 	bl	8008b9c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8005efc:	4620      	mov	r0, r4
 8005efe:	f002 fdfd 	bl	8008afc <USBH_LL_GetSpeed>
 8005f02:	f884 031d 	strb.w	r0, [r4, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8005f06:	2305      	movs	r3, #5
 8005f08:	7023      	strb	r3, [r4, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8005f0a:	2100      	movs	r1, #0
 8005f0c:	4620      	mov	r0, r4
 8005f0e:	f000 fda0 	bl	8006a52 <USBH_AllocPipe>
 8005f12:	7160      	strb	r0, [r4, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8005f14:	2180      	movs	r1, #128	; 0x80
 8005f16:	4620      	mov	r0, r4
 8005f18:	f000 fd9b 	bl	8006a52 <USBH_AllocPipe>
 8005f1c:	4601      	mov	r1, r0
 8005f1e:	7120      	strb	r0, [r4, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005f20:	79a3      	ldrb	r3, [r4, #6]
 8005f22:	9302      	str	r3, [sp, #8]
 8005f24:	2500      	movs	r5, #0
 8005f26:	9501      	str	r5, [sp, #4]
 8005f28:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8005f2c:	9300      	str	r3, [sp, #0]
 8005f2e:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8005f32:	2280      	movs	r2, #128	; 0x80
 8005f34:	4620      	mov	r0, r4
 8005f36:	f000 fd77 	bl	8006a28 <USBH_OpenPipe>
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005f3a:	79a3      	ldrb	r3, [r4, #6]
 8005f3c:	9302      	str	r3, [sp, #8]
 8005f3e:	9501      	str	r5, [sp, #4]
 8005f40:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8005f44:	9300      	str	r3, [sp, #0]
 8005f46:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8005f4a:	462a      	mov	r2, r5
 8005f4c:	7961      	ldrb	r1, [r4, #5]
 8005f4e:	4620      	mov	r0, r4
 8005f50:	f000 fd6a 	bl	8006a28 <USBH_OpenPipe>
    case HOST_ABORT_STATE:
    default :
      break;
  }
  return USBH_OK;
}
 8005f54:	2000      	movs	r0, #0
 8005f56:	b006      	add	sp, #24
 8005f58:	bd70      	pop	{r4, r5, r6, pc}
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
  USBH_StatusTypeDef Status = USBH_BUSY;
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;

  switch (phost->EnumState)
 8005f5a:	7845      	ldrb	r5, [r0, #1]
 8005f5c:	2d07      	cmp	r5, #7
 8005f5e:	f200 813a 	bhi.w	80061d6 <USBH_Process+0x390>
 8005f62:	e8df f015 	tbh	[pc, r5, lsl #1]
 8005f66:	0008      	.short	0x0008
 8005f68:	00690048 	.word	0x00690048
 8005f6c:	00bf009a 	.word	0x00bf009a
 8005f70:	010e00e5 	.word	0x010e00e5
 8005f74:	0127      	.short	0x0127
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8005f76:	2108      	movs	r1, #8
 8005f78:	f000 fafd 	bl	8006576 <USBH_Get_DevDesc>
      if (ReqStatus == USBH_OK)
 8005f7c:	b118      	cbz	r0, 8005f86 <USBH_Process+0x140>
        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
      }
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005f7e:	2803      	cmp	r0, #3
 8005f80:	d021      	beq.n	8005fc6 <USBH_Process+0x180>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8005f82:	2501      	movs	r5, #1
 8005f84:	e0da      	b.n	800613c <USBH_Process+0x2f6>
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8005f86:	f894 332d 	ldrb.w	r3, [r4, #813]	; 0x32d
 8005f8a:	71a3      	strb	r3, [r4, #6]
        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8005f8c:	2501      	movs	r5, #1
 8005f8e:	7065      	strb	r5, [r4, #1]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8005f90:	9302      	str	r3, [sp, #8]
 8005f92:	2600      	movs	r6, #0
 8005f94:	9601      	str	r6, [sp, #4]
 8005f96:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8005f9a:	9300      	str	r3, [sp, #0]
 8005f9c:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8005fa0:	2280      	movs	r2, #128	; 0x80
 8005fa2:	7921      	ldrb	r1, [r4, #4]
 8005fa4:	4620      	mov	r0, r4
 8005fa6:	f000 fd3f 	bl	8006a28 <USBH_OpenPipe>
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005faa:	79a3      	ldrb	r3, [r4, #6]
 8005fac:	9302      	str	r3, [sp, #8]
 8005fae:	9601      	str	r6, [sp, #4]
 8005fb0:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8005fb4:	9300      	str	r3, [sp, #0]
 8005fb6:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8005fba:	4632      	mov	r2, r6
 8005fbc:	7961      	ldrb	r1, [r4, #5]
 8005fbe:	4620      	mov	r0, r4
 8005fc0:	f000 fd32 	bl	8006a28 <USBH_OpenPipe>
 8005fc4:	e0ba      	b.n	800613c <USBH_Process+0x2f6>
      {
        USBH_ErrLog("Control error: Get Device Descriptor request failed");
        phost->device.EnumCnt++;
 8005fc6:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 8005fca:	3301      	adds	r3, #1
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8005fd2:	2b03      	cmp	r3, #3
 8005fd4:	d903      	bls.n	8005fde <USBH_Process+0x198>
        {
          /* Buggy Device can't complete get device desc request */
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
          phost->gState = HOST_ABORT_STATE;
 8005fd6:	230d      	movs	r3, #13
 8005fd8:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8005fda:	2501      	movs	r5, #1
 8005fdc:	e0ae      	b.n	800613c <USBH_Process+0x2f6>
        }
        else
        {
          /* free control pipes */
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8005fde:	7961      	ldrb	r1, [r4, #5]
 8005fe0:	4620      	mov	r0, r4
 8005fe2:	f000 fd55 	bl	8006a90 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8005fe6:	7921      	ldrb	r1, [r4, #4]
 8005fe8:	4620      	mov	r0, r4
 8005fea:	f000 fd51 	bl	8006a90 <USBH_FreePipe>

          /* Reset the USB Device */
          phost->gState = HOST_IDLE;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8005ff2:	2501      	movs	r5, #1
 8005ff4:	e0a2      	b.n	800613c <USBH_Process+0x2f6>
      }
      break;

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8005ff6:	2112      	movs	r1, #18
 8005ff8:	f000 fabd 	bl	8006576 <USBH_Get_DevDesc>
      if (ReqStatus == USBH_OK)
 8005ffc:	b910      	cbnz	r0, 8006004 <USBH_Process+0x1be>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8005ffe:	2302      	movs	r3, #2
 8006000:	7063      	strb	r3, [r4, #1]
 8006002:	e09b      	b.n	800613c <USBH_Process+0x2f6>
      }
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006004:	2803      	cmp	r0, #3
 8006006:	f040 8099 	bne.w	800613c <USBH_Process+0x2f6>
      {
        USBH_ErrLog("Control error: Get Full Device Descriptor request failed");
        phost->device.EnumCnt++;
 800600a:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 800600e:	3301      	adds	r3, #1
 8006010:	b2db      	uxtb	r3, r3
 8006012:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006016:	2b03      	cmp	r3, #3
 8006018:	d902      	bls.n	8006020 <USBH_Process+0x1da>
        {
          /* Buggy Device can't complete get device desc request */
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
          phost->gState = HOST_ABORT_STATE;
 800601a:	230d      	movs	r3, #13
 800601c:	7023      	strb	r3, [r4, #0]
 800601e:	e08d      	b.n	800613c <USBH_Process+0x2f6>
        }
        else
        {
          /* Free control pipes */
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006020:	7961      	ldrb	r1, [r4, #5]
 8006022:	4620      	mov	r0, r4
 8006024:	f000 fd34 	bl	8006a90 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006028:	7921      	ldrb	r1, [r4, #4]
 800602a:	4620      	mov	r0, r4
 800602c:	f000 fd30 	bl	8006a90 <USBH_FreePipe>

          /* Reset the USB Device */
          phost->EnumState = ENUM_IDLE;
 8006030:	2300      	movs	r3, #0
 8006032:	7063      	strb	r3, [r4, #1]
          phost->gState = HOST_IDLE;
 8006034:	7023      	strb	r3, [r4, #0]
 8006036:	e081      	b.n	800613c <USBH_Process+0x2f6>
      }
      break;

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006038:	2101      	movs	r1, #1
 800603a:	f000 fc4f 	bl	80068dc <USBH_SetAddress>
      if (ReqStatus == USBH_OK)
 800603e:	b118      	cbz	r0, 8006048 <USBH_Process+0x202>
        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
      }
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006040:	2803      	cmp	r0, #3
 8006042:	d024      	beq.n	800608e <USBH_Process+0x248>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006044:	2501      	movs	r5, #1
 8006046:	e079      	b.n	800613c <USBH_Process+0x2f6>
        USBH_Delay(2U);
 8006048:	2002      	movs	r0, #2
 800604a:	f002 fda7 	bl	8008b9c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800604e:	2501      	movs	r5, #1
 8006050:	f884 531c 	strb.w	r5, [r4, #796]	; 0x31c
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006054:	2303      	movs	r3, #3
 8006056:	7063      	strb	r3, [r4, #1]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006058:	79a3      	ldrb	r3, [r4, #6]
 800605a:	9302      	str	r3, [sp, #8]
 800605c:	2600      	movs	r6, #0
 800605e:	9601      	str	r6, [sp, #4]
 8006060:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8006064:	9300      	str	r3, [sp, #0]
 8006066:	462b      	mov	r3, r5
 8006068:	2280      	movs	r2, #128	; 0x80
 800606a:	7921      	ldrb	r1, [r4, #4]
 800606c:	4620      	mov	r0, r4
 800606e:	f000 fcdb 	bl	8006a28 <USBH_OpenPipe>
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006072:	79a3      	ldrb	r3, [r4, #6]
 8006074:	9302      	str	r3, [sp, #8]
 8006076:	9601      	str	r6, [sp, #4]
 8006078:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 800607c:	9300      	str	r3, [sp, #0]
 800607e:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8006082:	4632      	mov	r2, r6
 8006084:	7961      	ldrb	r1, [r4, #5]
 8006086:	4620      	mov	r0, r4
 8006088:	f000 fcce 	bl	8006a28 <USBH_OpenPipe>
 800608c:	e056      	b.n	800613c <USBH_Process+0x2f6>
      {
        USBH_ErrLog("Control error: Device Set Address request failed");

        /* Buggy Device can't complete get device desc request */
        USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
        phost->gState = HOST_ABORT_STATE;
 800608e:	230d      	movs	r3, #13
 8006090:	7023      	strb	r3, [r4, #0]
        phost->EnumState = ENUM_IDLE;
 8006092:	2300      	movs	r3, #0
 8006094:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006096:	2501      	movs	r5, #1
 8006098:	e050      	b.n	800613c <USBH_Process+0x2f6>
      }
      break;

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800609a:	2109      	movs	r1, #9
 800609c:	f000 fad9 	bl	8006652 <USBH_Get_CfgDesc>
      if (ReqStatus == USBH_OK)
 80060a0:	b918      	cbnz	r0, 80060aa <USBH_Process+0x264>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80060a2:	2304      	movs	r3, #4
 80060a4:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80060a6:	2501      	movs	r5, #1
 80060a8:	e048      	b.n	800613c <USBH_Process+0x2f6>
      }
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80060aa:	2803      	cmp	r0, #3
 80060ac:	d001      	beq.n	80060b2 <USBH_Process+0x26c>
  USBH_StatusTypeDef Status = USBH_BUSY;
 80060ae:	2501      	movs	r5, #1
 80060b0:	e044      	b.n	800613c <USBH_Process+0x2f6>
      {
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
        phost->device.EnumCnt++;
 80060b2:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 80060b6:	3301      	adds	r3, #1
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80060be:	2b03      	cmp	r3, #3
 80060c0:	d903      	bls.n	80060ca <USBH_Process+0x284>
        {
          /* Buggy Device can't complete get device desc request */
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
          phost->gState = HOST_ABORT_STATE;
 80060c2:	230d      	movs	r3, #13
 80060c4:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80060c6:	2501      	movs	r5, #1
 80060c8:	e038      	b.n	800613c <USBH_Process+0x2f6>
        }
        else
        {
          /* Free control pipes */
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80060ca:	7961      	ldrb	r1, [r4, #5]
 80060cc:	4620      	mov	r0, r4
 80060ce:	f000 fcdf 	bl	8006a90 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80060d2:	7921      	ldrb	r1, [r4, #4]
 80060d4:	4620      	mov	r0, r4
 80060d6:	f000 fcdb 	bl	8006a90 <USBH_FreePipe>

          /* Reset the USB Device */
          phost->EnumState = ENUM_IDLE;
 80060da:	2300      	movs	r3, #0
 80060dc:	7063      	strb	r3, [r4, #1]
          phost->gState = HOST_IDLE;
 80060de:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80060e0:	2501      	movs	r5, #1
 80060e2:	e02b      	b.n	800613c <USBH_Process+0x2f6>
      }
      break;

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80060e4:	f8b0 133a 	ldrh.w	r1, [r0, #826]	; 0x33a
 80060e8:	f000 fab3 	bl	8006652 <USBH_Get_CfgDesc>
      if (ReqStatus == USBH_OK)
 80060ec:	b918      	cbnz	r0, 80060f6 <USBH_Process+0x2b0>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80060ee:	2305      	movs	r3, #5
 80060f0:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80060f2:	2501      	movs	r5, #1
 80060f4:	e022      	b.n	800613c <USBH_Process+0x2f6>
      }
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80060f6:	2803      	cmp	r0, #3
 80060f8:	d001      	beq.n	80060fe <USBH_Process+0x2b8>
  USBH_StatusTypeDef Status = USBH_BUSY;
 80060fa:	2501      	movs	r5, #1
 80060fc:	e01e      	b.n	800613c <USBH_Process+0x2f6>
      {
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
        phost->device.EnumCnt++;
 80060fe:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 8006102:	3301      	adds	r3, #1
 8006104:	b2db      	uxtb	r3, r3
 8006106:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800610a:	2b03      	cmp	r3, #3
 800610c:	d903      	bls.n	8006116 <USBH_Process+0x2d0>
        {
          /* Buggy Device can't complete get device desc request */
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
          phost->gState = HOST_ABORT_STATE;
 800610e:	230d      	movs	r3, #13
 8006110:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006112:	2501      	movs	r5, #1
 8006114:	e012      	b.n	800613c <USBH_Process+0x2f6>
        }
        else
        {
          /* Free control pipes */
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006116:	7961      	ldrb	r1, [r4, #5]
 8006118:	4620      	mov	r0, r4
 800611a:	f000 fcb9 	bl	8006a90 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800611e:	7921      	ldrb	r1, [r4, #4]
 8006120:	4620      	mov	r0, r4
 8006122:	f000 fcb5 	bl	8006a90 <USBH_FreePipe>

          /* Reset the USB Device */
          phost->EnumState = ENUM_IDLE;
 8006126:	2300      	movs	r3, #0
 8006128:	7063      	strb	r3, [r4, #1]
          phost->gState = HOST_IDLE;
 800612a:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800612c:	2501      	movs	r5, #1
 800612e:	e005      	b.n	800613c <USBH_Process+0x2f6>
        /* .. */
      }
      break;

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006130:	f890 1334 	ldrb.w	r1, [r0, #820]	; 0x334
 8006134:	b999      	cbnz	r1, 800615e <USBH_Process+0x318>
        }
      }
      else
      {
        USBH_UsrLog("Manufacturer : N/A");
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006136:	2306      	movs	r3, #6
 8006138:	7043      	strb	r3, [r0, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800613a:	2501      	movs	r5, #1
      status = USBH_HandleEnum(phost);
 800613c:	f88d 5017 	strb.w	r5, [sp, #23]
      if (status == USBH_OK)
 8006140:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8006144:	2b00      	cmp	r3, #0
 8006146:	f47f af05 	bne.w	8005f54 <USBH_Process+0x10e>
        phost->device.current_interface = 0U;
 800614a:	f884 3324 	strb.w	r3, [r4, #804]	; 0x324
        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800614e:	f894 3337 	ldrb.w	r3, [r4, #823]	; 0x337
 8006152:	2b01      	cmp	r3, #1
          phost->gState = HOST_SET_CONFIGURATION;
 8006154:	bf0c      	ite	eq
 8006156:	2308      	moveq	r3, #8
          phost->gState = HOST_INPUT;
 8006158:	2307      	movne	r3, #7
 800615a:	7023      	strb	r3, [r4, #0]
 800615c:	e6fa      	b.n	8005f54 <USBH_Process+0x10e>
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800615e:	23ff      	movs	r3, #255	; 0xff
 8006160:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 8006164:	f000 fb91 	bl	800688a <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 8006168:	b918      	cbnz	r0, 8006172 <USBH_Process+0x32c>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800616a:	2306      	movs	r3, #6
 800616c:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800616e:	2501      	movs	r5, #1
 8006170:	e7e4      	b.n	800613c <USBH_Process+0x2f6>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006172:	2803      	cmp	r0, #3
 8006174:	d001      	beq.n	800617a <USBH_Process+0x334>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006176:	2501      	movs	r5, #1
 8006178:	e7e0      	b.n	800613c <USBH_Process+0x2f6>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800617a:	2306      	movs	r3, #6
 800617c:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800617e:	2501      	movs	r5, #1
 8006180:	e7dc      	b.n	800613c <USBH_Process+0x2f6>
#endif
      }
      break;

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006182:	f890 1335 	ldrb.w	r1, [r0, #821]	; 0x335
 8006186:	b919      	cbnz	r1, 8006190 <USBH_Process+0x34a>
        }
      }
      else
      {
        USBH_UsrLog("Product : N/A");
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006188:	2307      	movs	r3, #7
 800618a:	7043      	strb	r3, [r0, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800618c:	2501      	movs	r5, #1
 800618e:	e7d5      	b.n	800613c <USBH_Process+0x2f6>
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006190:	23ff      	movs	r3, #255	; 0xff
 8006192:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 8006196:	f000 fb78 	bl	800688a <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 800619a:	b918      	cbnz	r0, 80061a4 <USBH_Process+0x35e>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800619c:	2307      	movs	r3, #7
 800619e:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80061a0:	2501      	movs	r5, #1
 80061a2:	e7cb      	b.n	800613c <USBH_Process+0x2f6>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80061a4:	2803      	cmp	r0, #3
 80061a6:	d001      	beq.n	80061ac <USBH_Process+0x366>
  USBH_StatusTypeDef Status = USBH_BUSY;
 80061a8:	2501      	movs	r5, #1
 80061aa:	e7c7      	b.n	800613c <USBH_Process+0x2f6>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80061ac:	2307      	movs	r3, #7
 80061ae:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80061b0:	2501      	movs	r5, #1
 80061b2:	e7c3      	b.n	800613c <USBH_Process+0x2f6>
#endif
      }
      break;

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80061b4:	f890 5336 	ldrb.w	r5, [r0, #822]	; 0x336
 80061b8:	2d00      	cmp	r5, #0
 80061ba:	d0bf      	beq.n	800613c <USBH_Process+0x2f6>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80061bc:	23ff      	movs	r3, #255	; 0xff
 80061be:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 80061c2:	4629      	mov	r1, r5
 80061c4:	f000 fb61 	bl	800688a <USBH_Get_StringDesc>
                                        phost->device.Data, 0xFFU);
        if (ReqStatus == USBH_OK)
 80061c8:	4605      	mov	r5, r0
 80061ca:	2800      	cmp	r0, #0
 80061cc:	d0b6      	beq.n	800613c <USBH_Process+0x2f6>
  USBH_StatusTypeDef Status = USBH_BUSY;
 80061ce:	1ec5      	subs	r5, r0, #3
 80061d0:	bf18      	it	ne
 80061d2:	2501      	movne	r5, #1
 80061d4:	e7b2      	b.n	800613c <USBH_Process+0x2f6>
  switch (phost->EnumState)
 80061d6:	2501      	movs	r5, #1
 80061d8:	e7b0      	b.n	800613c <USBH_Process+0x2f6>
      if (phost->pUser != NULL)
 80061da:	f8d0 33d4 	ldr.w	r3, [r0, #980]	; 0x3d4
 80061de:	2b00      	cmp	r3, #0
 80061e0:	f43f aeb8 	beq.w	8005f54 <USBH_Process+0x10e>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80061e4:	2101      	movs	r1, #1
 80061e6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80061e8:	2308      	movs	r3, #8
 80061ea:	7023      	strb	r3, [r4, #0]
 80061ec:	e6b2      	b.n	8005f54 <USBH_Process+0x10e>
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80061ee:	f890 133d 	ldrb.w	r1, [r0, #829]	; 0x33d
 80061f2:	f000 fb84 	bl	80068fe <USBH_SetCfg>
 80061f6:	2800      	cmp	r0, #0
 80061f8:	f47f aeac 	bne.w	8005f54 <USBH_Process+0x10e>
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80061fc:	2309      	movs	r3, #9
 80061fe:	7023      	strb	r3, [r4, #0]
 8006200:	e6a8      	b.n	8005f54 <USBH_Process+0x10e>
      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006202:	f890 333f 	ldrb.w	r3, [r0, #831]	; 0x33f
 8006206:	f013 0f20 	tst.w	r3, #32
 800620a:	d102      	bne.n	8006212 <USBH_Process+0x3cc>
        phost->gState = HOST_CHECK_CLASS;
 800620c:	230a      	movs	r3, #10
 800620e:	7003      	strb	r3, [r0, #0]
 8006210:	e6a0      	b.n	8005f54 <USBH_Process+0x10e>
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006212:	2101      	movs	r1, #1
 8006214:	f000 fb84 	bl	8006920 <USBH_SetFeature>
 8006218:	f88d 0017 	strb.w	r0, [sp, #23]
        if (status == USBH_OK)
 800621c:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8006220:	b913      	cbnz	r3, 8006228 <USBH_Process+0x3e2>
          phost->gState = HOST_CHECK_CLASS;
 8006222:	230a      	movs	r3, #10
 8006224:	7023      	strb	r3, [r4, #0]
 8006226:	e695      	b.n	8005f54 <USBH_Process+0x10e>
        else if (status == USBH_NOT_SUPPORTED)
 8006228:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800622c:	b2db      	uxtb	r3, r3
 800622e:	2b03      	cmp	r3, #3
 8006230:	f47f ae90 	bne.w	8005f54 <USBH_Process+0x10e>
          phost->gState = HOST_CHECK_CLASS;
 8006234:	230a      	movs	r3, #10
 8006236:	7023      	strb	r3, [r4, #0]
 8006238:	e68c      	b.n	8005f54 <USBH_Process+0x10e>
      if (phost->ClassNumber == 0U)
 800623a:	f8d0 3380 	ldr.w	r3, [r0, #896]	; 0x380
 800623e:	2b00      	cmp	r3, #0
 8006240:	f43f ae88 	beq.w	8005f54 <USBH_Process+0x10e>
        phost->pActiveClass = NULL;
 8006244:	2300      	movs	r3, #0
 8006246:	f8c0 337c 	str.w	r3, [r0, #892]	; 0x37c
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800624a:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 800624e:	7919      	ldrb	r1, [r3, #4]
 8006250:	f890 2347 	ldrb.w	r2, [r0, #839]	; 0x347
 8006254:	4291      	cmp	r1, r2
 8006256:	d002      	beq.n	800625e <USBH_Process+0x418>
          phost->gState = HOST_ABORT_STATE;
 8006258:	230d      	movs	r3, #13
 800625a:	7003      	strb	r3, [r0, #0]
 800625c:	e67a      	b.n	8005f54 <USBH_Process+0x10e>
            phost->pActiveClass = phost->pClass[idx];
 800625e:	f8c0 337c 	str.w	r3, [r0, #892]	; 0x37c
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	4798      	blx	r3
 8006266:	b938      	cbnz	r0, 8006278 <USBH_Process+0x432>
            phost->gState = HOST_CLASS_REQUEST;
 8006268:	2306      	movs	r3, #6
 800626a:	7023      	strb	r3, [r4, #0]
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800626c:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
 8006270:	2103      	movs	r1, #3
 8006272:	4620      	mov	r0, r4
 8006274:	4798      	blx	r3
 8006276:	e66d      	b.n	8005f54 <USBH_Process+0x10e>
            phost->gState = HOST_ABORT_STATE;
 8006278:	230d      	movs	r3, #13
 800627a:	7023      	strb	r3, [r4, #0]
 800627c:	e66a      	b.n	8005f54 <USBH_Process+0x10e>
      if (phost->pActiveClass != NULL)
 800627e:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8006282:	b193      	cbz	r3, 80062aa <USBH_Process+0x464>
        status = phost->pActiveClass->Requests(phost);
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	4798      	blx	r3
 8006288:	f88d 0017 	strb.w	r0, [sp, #23]
        if (status == USBH_OK)
 800628c:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8006290:	b913      	cbnz	r3, 8006298 <USBH_Process+0x452>
          phost->gState = HOST_CLASS;
 8006292:	230b      	movs	r3, #11
 8006294:	7023      	strb	r3, [r4, #0]
 8006296:	e65d      	b.n	8005f54 <USBH_Process+0x10e>
        else if (status == USBH_FAIL)
 8006298:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800629c:	b2db      	uxtb	r3, r3
 800629e:	2b02      	cmp	r3, #2
 80062a0:	f47f ae58 	bne.w	8005f54 <USBH_Process+0x10e>
          phost->gState = HOST_ABORT_STATE;
 80062a4:	230d      	movs	r3, #13
 80062a6:	7023      	strb	r3, [r4, #0]
          USBH_ErrLog("Device not responding Please Unplug.");
 80062a8:	e654      	b.n	8005f54 <USBH_Process+0x10e>
        phost->gState = HOST_ABORT_STATE;
 80062aa:	230d      	movs	r3, #13
 80062ac:	7003      	strb	r3, [r0, #0]
 80062ae:	e651      	b.n	8005f54 <USBH_Process+0x10e>
      if (phost->pActiveClass != NULL)
 80062b0:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	f43f ae4d 	beq.w	8005f54 <USBH_Process+0x10e>
        phost->pActiveClass->BgndProcess(phost);
 80062ba:	695b      	ldr	r3, [r3, #20]
 80062bc:	4798      	blx	r3
 80062be:	e649      	b.n	8005f54 <USBH_Process+0x10e>
      phost->device.is_disconnected = 0U;
 80062c0:	2300      	movs	r3, #0
 80062c2:	f880 3321 	strb.w	r3, [r0, #801]	; 0x321
      (void)DeInitStateMachine(phost);
 80062c6:	f7ff fd2c 	bl	8005d22 <DeInitStateMachine>
      if (phost->pActiveClass != NULL)
 80062ca:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 80062ce:	b12b      	cbz	r3, 80062dc <USBH_Process+0x496>
        phost->pActiveClass->DeInit(phost);
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	4620      	mov	r0, r4
 80062d4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80062d6:	2300      	movs	r3, #0
 80062d8:	f8c4 337c 	str.w	r3, [r4, #892]	; 0x37c
      if (phost->pUser != NULL)
 80062dc:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
 80062e0:	b113      	cbz	r3, 80062e8 <USBH_Process+0x4a2>
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80062e2:	2105      	movs	r1, #5
 80062e4:	4620      	mov	r0, r4
 80062e6:	4798      	blx	r3
      if (phost->device.is_ReEnumerated == 1U)
 80062e8:	f894 3322 	ldrb.w	r3, [r4, #802]	; 0x322
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d003      	beq.n	80062fa <USBH_Process+0x4b4>
        (void)USBH_LL_Start(phost);
 80062f2:	4620      	mov	r0, r4
 80062f4:	f002 fc5d 	bl	8008bb2 <USBH_LL_Start>
  return USBH_OK;
 80062f8:	e62c      	b.n	8005f54 <USBH_Process+0x10e>
        phost->device.is_ReEnumerated = 0U;
 80062fa:	2300      	movs	r3, #0
 80062fc:	f884 3322 	strb.w	r3, [r4, #802]	; 0x322
        (void)USBH_Start(phost);
 8006300:	4620      	mov	r0, r4
 8006302:	f7ff fd96 	bl	8005e32 <USBH_Start>
 8006306:	e625      	b.n	8005f54 <USBH_Process+0x10e>

08006308 <USBH_LL_SetTimer>:
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
  phost->Timer = time;
 8006308:	f8c0 13c4 	str.w	r1, [r0, #964]	; 0x3c4
}
 800630c:	4770      	bx	lr

0800630e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800630e:	b508      	push	{r3, lr}
  phost->Timer++;
 8006310:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4
 8006314:	3301      	adds	r3, #1
 8006316:	f8c0 33c4 	str.w	r3, [r0, #964]	; 0x3c4
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800631a:	7803      	ldrb	r3, [r0, #0]
 800631c:	b2db      	uxtb	r3, r3
 800631e:	2b0b      	cmp	r3, #11
 8006320:	d000      	beq.n	8006324 <USBH_LL_IncTimer+0x16>
}
 8006322:	bd08      	pop	{r3, pc}
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006324:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8006328:	2b00      	cmp	r3, #0
 800632a:	d0fa      	beq.n	8006322 <USBH_LL_IncTimer+0x14>
  {
    phost->pActiveClass->SOFProcess(phost);
 800632c:	699b      	ldr	r3, [r3, #24]
 800632e:	4798      	blx	r3
}
 8006330:	e7f7      	b.n	8006322 <USBH_LL_IncTimer+0x14>

08006332 <USBH_LL_PortEnabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 1U;
 8006332:	2301      	movs	r3, #1
 8006334:	f880 3323 	strb.w	r3, [r0, #803]	; 0x323
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
}
 8006338:	4770      	bx	lr

0800633a <USBH_LL_PortDisabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 0U;
 800633a:	2300      	movs	r3, #0
 800633c:	f880 3323 	strb.w	r3, [r0, #803]	; 0x323

  return;
}
 8006340:	4770      	bx	lr

08006342 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006342:	4603      	mov	r3, r0
  phost->device.is_connected = 1U;
 8006344:	2201      	movs	r2, #1
 8006346:	f880 2320 	strb.w	r2, [r0, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800634a:	2000      	movs	r0, #0
 800634c:	f883 0321 	strb.w	r0, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006350:	f883 0322 	strb.w	r0, [r3, #802]	; 0x322
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
}
 8006354:	4770      	bx	lr

08006356 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006356:	b538      	push	{r3, r4, r5, lr}
 8006358:	4604      	mov	r4, r0
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800635a:	2301      	movs	r3, #1
 800635c:	f880 3321 	strb.w	r3, [r0, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006360:	2500      	movs	r5, #0
 8006362:	f880 5320 	strb.w	r5, [r0, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006366:	f880 5323 	strb.w	r5, [r0, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800636a:	f002 fc2a 	bl	8008bc2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800636e:	7921      	ldrb	r1, [r4, #4]
 8006370:	4620      	mov	r0, r4
 8006372:	f000 fb8d 	bl	8006a90 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006376:	7961      	ldrb	r1, [r4, #5]
 8006378:	4620      	mov	r0, r4
 800637a:	f000 fb89 	bl	8006a90 <USBH_FreePipe>
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
}
 800637e:	4628      	mov	r0, r5
 8006380:	bd38      	pop	{r3, r4, r5, pc}

08006382 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006382:	b570      	push	{r4, r5, r6, lr}
 8006384:	b082      	sub	sp, #8
 8006386:	4604      	mov	r4, r0
  USBH_StatusTypeDef status;
  status = USBH_BUSY;

  switch (phost->RequestState)
 8006388:	7885      	ldrb	r5, [r0, #2]
 800638a:	2d01      	cmp	r5, #1
 800638c:	d005      	beq.n	800639a <USBH_CtlReq+0x18>
 800638e:	2d02      	cmp	r5, #2
 8006390:	d00a      	beq.n	80063a8 <USBH_CtlReq+0x26>
 8006392:	2501      	movs	r5, #1

    default:
      break;
  }
  return status;
}
 8006394:	4628      	mov	r0, r5
 8006396:	b002      	add	sp, #8
 8006398:	bd70      	pop	{r4, r5, r6, pc}
      phost->Control.buff = buff;
 800639a:	6081      	str	r1, [r0, #8]
      phost->Control.length = length;
 800639c:	8182      	strh	r2, [r0, #12]
      phost->Control.state = CTRL_SETUP;
 800639e:	2301      	movs	r3, #1
 80063a0:	7603      	strb	r3, [r0, #24]
      phost->RequestState = CMD_WAIT;
 80063a2:	2302      	movs	r3, #2
 80063a4:	7083      	strb	r3, [r0, #2]
      break;
 80063a6:	e7f5      	b.n	8006394 <USBH_CtlReq+0x12>
{
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;

  switch (phost->Control.state)
 80063a8:	7e03      	ldrb	r3, [r0, #24]
 80063aa:	3b01      	subs	r3, #1
 80063ac:	2b0a      	cmp	r3, #10
 80063ae:	f200 80bb 	bhi.w	8006528 <USBH_CtlReq+0x1a6>
 80063b2:	e8df f003 	tbb	[pc, r3]
 80063b6:	0f06      	.short	0x0f06
 80063b8:	5346372c 	.word	0x5346372c
 80063bc:	8d807267 	.word	0x8d807267
 80063c0:	9d          	.byte	0x9d
 80063c1:	00          	.byte	0x00
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80063c2:	7942      	ldrb	r2, [r0, #5]
 80063c4:	f100 0110 	add.w	r1, r0, #16
 80063c8:	f000 facd 	bl	8006966 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80063cc:	2302      	movs	r3, #2
 80063ce:	7623      	strb	r3, [r4, #24]
  switch (phost->RequestState)
 80063d0:	2501      	movs	r5, #1
  return status;
 80063d2:	e7df      	b.n	8006394 <USBH_CtlReq+0x12>
      break;

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80063d4:	7941      	ldrb	r1, [r0, #5]
 80063d6:	f002 fba4 	bl	8008b22 <USBH_LL_GetURBState>
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80063da:	2801      	cmp	r0, #1
 80063dc:	d006      	beq.n	80063ec <USBH_CtlReq+0x6a>
#endif
#endif
      }
      else
      {
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80063de:	2804      	cmp	r0, #4
 80063e0:	d001      	beq.n	80063e6 <USBH_CtlReq+0x64>
 80063e2:	2802      	cmp	r0, #2
 80063e4:	d1f4      	bne.n	80063d0 <USBH_CtlReq+0x4e>
        {
          phost->Control.state = CTRL_ERROR;
 80063e6:	230b      	movs	r3, #11
 80063e8:	7623      	strb	r3, [r4, #24]
 80063ea:	e7f1      	b.n	80063d0 <USBH_CtlReq+0x4e>
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80063ec:	7c22      	ldrb	r2, [r4, #16]
        if (phost->Control.setup.b.wLength.w != 0U)
 80063ee:	8ae3      	ldrh	r3, [r4, #22]
 80063f0:	b133      	cbz	r3, 8006400 <USBH_CtlReq+0x7e>
          if (direction == USB_D2H)
 80063f2:	f012 0f80 	tst.w	r2, #128	; 0x80
            phost->Control.state = CTRL_DATA_IN;
 80063f6:	bf14      	ite	ne
 80063f8:	2303      	movne	r3, #3
            phost->Control.state = CTRL_DATA_OUT;
 80063fa:	2305      	moveq	r3, #5
 80063fc:	7623      	strb	r3, [r4, #24]
 80063fe:	e7e7      	b.n	80063d0 <USBH_CtlReq+0x4e>
          if (direction == USB_D2H)
 8006400:	f012 0f80 	tst.w	r2, #128	; 0x80
            phost->Control.state = CTRL_STATUS_OUT;
 8006404:	bf14      	ite	ne
 8006406:	2309      	movne	r3, #9
            phost->Control.state = CTRL_STATUS_IN;
 8006408:	2307      	moveq	r3, #7
 800640a:	7623      	strb	r3, [r4, #24]
 800640c:	e7e0      	b.n	80063d0 <USBH_CtlReq+0x4e>
      }
      break;

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800640e:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4
 8006412:	81c3      	strh	r3, [r0, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8006414:	7903      	ldrb	r3, [r0, #4]
 8006416:	8982      	ldrh	r2, [r0, #12]
 8006418:	6881      	ldr	r1, [r0, #8]
 800641a:	f000 facd 	bl	80069b8 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800641e:	2304      	movs	r3, #4
 8006420:	7623      	strb	r3, [r4, #24]
      break;
 8006422:	e7d5      	b.n	80063d0 <USBH_CtlReq+0x4e>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006424:	7901      	ldrb	r1, [r0, #4]
 8006426:	f002 fb7c 	bl	8008b22 <USBH_LL_GetURBState>

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800642a:	2801      	cmp	r0, #1
 800642c:	d006      	beq.n	800643c <USBH_CtlReq+0xba>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800642e:	2805      	cmp	r0, #5
 8006430:	d03c      	beq.n	80064ac <USBH_CtlReq+0x12a>
#endif
#endif
      }
      else
      {
        if (URB_Status == USBH_URB_ERROR)
 8006432:	2804      	cmp	r0, #4
 8006434:	d1cc      	bne.n	80063d0 <USBH_CtlReq+0x4e>
        {
          /* Device error */
          phost->Control.state = CTRL_ERROR;
 8006436:	230b      	movs	r3, #11
 8006438:	7623      	strb	r3, [r4, #24]
 800643a:	e7c9      	b.n	80063d0 <USBH_CtlReq+0x4e>
        phost->Control.state = CTRL_STATUS_OUT;
 800643c:	2309      	movs	r3, #9
 800643e:	7623      	strb	r3, [r4, #24]
      if (URB_Status == USBH_URB_STALL)
 8006440:	e7c6      	b.n	80063d0 <USBH_CtlReq+0x4e>
      }
      break;

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8006442:	2301      	movs	r3, #1
 8006444:	9300      	str	r3, [sp, #0]
 8006446:	7943      	ldrb	r3, [r0, #5]
 8006448:	8982      	ldrh	r2, [r0, #12]
 800644a:	6881      	ldr	r1, [r0, #8]
 800644c:	f000 fa9c 	bl	8006988 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8006450:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8006454:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006456:	2306      	movs	r3, #6
 8006458:	7623      	strb	r3, [r4, #24]
      break;
 800645a:	e7b9      	b.n	80063d0 <USBH_CtlReq+0x4e>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800645c:	7941      	ldrb	r1, [r0, #5]
 800645e:	f002 fb60 	bl	8008b22 <USBH_LL_GetURBState>

      if (URB_Status == USBH_URB_DONE)
 8006462:	2801      	cmp	r0, #1
 8006464:	d008      	beq.n	8006478 <USBH_CtlReq+0xf6>
#endif
#endif
      }

      /* handle error cases */
      else if (URB_Status == USBH_URB_STALL)
 8006466:	2805      	cmp	r0, #5
 8006468:	d020      	beq.n	80064ac <USBH_CtlReq+0x12a>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      else if (URB_Status == USBH_URB_NOTREADY)
 800646a:	2802      	cmp	r0, #2
 800646c:	d007      	beq.n	800647e <USBH_CtlReq+0xfc>
#endif
#endif
      }
      else
      {
        if (URB_Status == USBH_URB_ERROR)
 800646e:	2804      	cmp	r0, #4
 8006470:	d1ae      	bne.n	80063d0 <USBH_CtlReq+0x4e>
        {
          /* device error */
          phost->Control.state = CTRL_ERROR;
 8006472:	230b      	movs	r3, #11
 8006474:	7623      	strb	r3, [r4, #24]
          status = USBH_FAIL;
 8006476:	e054      	b.n	8006522 <USBH_CtlReq+0x1a0>
        phost->Control.state = CTRL_STATUS_IN;
 8006478:	2307      	movs	r3, #7
 800647a:	7623      	strb	r3, [r4, #24]
 800647c:	e7a8      	b.n	80063d0 <USBH_CtlReq+0x4e>
        phost->Control.state = CTRL_DATA_OUT;
 800647e:	2305      	movs	r3, #5
 8006480:	7623      	strb	r3, [r4, #24]
 8006482:	e7a5      	b.n	80063d0 <USBH_CtlReq+0x4e>
      }
      break;

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8006484:	7903      	ldrb	r3, [r0, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	4611      	mov	r1, r2
 800648a:	f000 fa95 	bl	80069b8 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800648e:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8006492:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8006494:	2308      	movs	r3, #8
 8006496:	7623      	strb	r3, [r4, #24]

      break;
 8006498:	e79a      	b.n	80063d0 <USBH_CtlReq+0x4e>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800649a:	7901      	ldrb	r1, [r0, #4]
 800649c:	f002 fb41 	bl	8008b22 <USBH_LL_GetURBState>

      if (URB_Status == USBH_URB_DONE)
 80064a0:	2801      	cmp	r0, #1
 80064a2:	d043      	beq.n	800652c <USBH_CtlReq+0x1aa>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      else if (URB_Status == USBH_URB_ERROR)
 80064a4:	2804      	cmp	r0, #4
 80064a6:	d003      	beq.n	80064b0 <USBH_CtlReq+0x12e>
#endif
#endif
      }
      else
      {
        if (URB_Status == USBH_URB_STALL)
 80064a8:	2805      	cmp	r0, #5
 80064aa:	d191      	bne.n	80063d0 <USBH_CtlReq+0x4e>
{
 80064ac:	2503      	movs	r5, #3
 80064ae:	e03e      	b.n	800652e <USBH_CtlReq+0x1ac>
        phost->Control.state = CTRL_ERROR;
 80064b0:	230b      	movs	r3, #11
 80064b2:	7623      	strb	r3, [r4, #24]
 80064b4:	e78c      	b.n	80063d0 <USBH_CtlReq+0x4e>
        }
      }
      break;

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80064b6:	2301      	movs	r3, #1
 80064b8:	9300      	str	r3, [sp, #0]
 80064ba:	7943      	ldrb	r3, [r0, #5]
 80064bc:	2200      	movs	r2, #0
 80064be:	4611      	mov	r1, r2
 80064c0:	f000 fa62 	bl	8006988 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80064c4:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 80064c8:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80064ca:	230a      	movs	r3, #10
 80064cc:	7623      	strb	r3, [r4, #24]
      break;
 80064ce:	e77f      	b.n	80063d0 <USBH_CtlReq+0x4e>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80064d0:	7941      	ldrb	r1, [r0, #5]
 80064d2:	f002 fb26 	bl	8008b22 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 80064d6:	2801      	cmp	r0, #1
 80064d8:	d028      	beq.n	800652c <USBH_CtlReq+0x1aa>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      else if (URB_Status == USBH_URB_NOTREADY)
 80064da:	2802      	cmp	r0, #2
 80064dc:	d005      	beq.n	80064ea <USBH_CtlReq+0x168>
#endif
#endif
      }
      else
      {
        if (URB_Status == USBH_URB_ERROR)
 80064de:	2804      	cmp	r0, #4
 80064e0:	f47f af76 	bne.w	80063d0 <USBH_CtlReq+0x4e>
        {
          phost->Control.state = CTRL_ERROR;
 80064e4:	230b      	movs	r3, #11
 80064e6:	7623      	strb	r3, [r4, #24]
 80064e8:	e772      	b.n	80063d0 <USBH_CtlReq+0x4e>
        phost->Control.state = CTRL_STATUS_OUT;
 80064ea:	2309      	movs	r3, #9
 80064ec:	7623      	strb	r3, [r4, #24]
 80064ee:	e76f      	b.n	80063d0 <USBH_CtlReq+0x4e>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80064f0:	7e43      	ldrb	r3, [r0, #25]
 80064f2:	3301      	adds	r3, #1
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	7643      	strb	r3, [r0, #25]
 80064f8:	2b02      	cmp	r3, #2
 80064fa:	d803      	bhi.n	8006504 <USBH_CtlReq+0x182>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80064fc:	2301      	movs	r3, #1
 80064fe:	7603      	strb	r3, [r0, #24]
        phost->RequestState = CMD_SEND;
 8006500:	7083      	strb	r3, [r0, #2]
 8006502:	e765      	b.n	80063d0 <USBH_CtlReq+0x4e>
      }
      else
      {
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8006504:	f8d0 33d4 	ldr.w	r3, [r0, #980]	; 0x3d4
 8006508:	2106      	movs	r1, #6
 800650a:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800650c:	2600      	movs	r6, #0
 800650e:	7666      	strb	r6, [r4, #25]
        USBH_ErrLog("Control error: Device not responding");

        /* Free control pipes */
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006510:	7961      	ldrb	r1, [r4, #5]
 8006512:	4620      	mov	r0, r4
 8006514:	f000 fabc 	bl	8006a90 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006518:	7921      	ldrb	r1, [r4, #4]
 800651a:	4620      	mov	r0, r4
 800651c:	f000 fab8 	bl	8006a90 <USBH_FreePipe>

        phost->gState = HOST_IDLE;
 8006520:	7026      	strb	r6, [r4, #0]
        phost->RequestState = CMD_SEND;
 8006522:	2301      	movs	r3, #1
 8006524:	70a3      	strb	r3, [r4, #2]
 8006526:	e735      	b.n	8006394 <USBH_CtlReq+0x12>
  switch (phost->Control.state)
 8006528:	2501      	movs	r5, #1
 800652a:	e733      	b.n	8006394 <USBH_CtlReq+0x12>
{
 800652c:	2500      	movs	r5, #0
        phost->RequestState = CMD_SEND;
 800652e:	2301      	movs	r3, #1
 8006530:	70a3      	strb	r3, [r4, #2]
        phost->Control.state = CTRL_IDLE;
 8006532:	2300      	movs	r3, #0
 8006534:	7623      	strb	r3, [r4, #24]
 8006536:	e72d      	b.n	8006394 <USBH_CtlReq+0x12>

08006538 <USBH_GetDescriptor>:
{
 8006538:	b508      	push	{r3, lr}
 800653a:	468e      	mov	lr, r1
 800653c:	4694      	mov	ip, r2
 800653e:	4619      	mov	r1, r3
 8006540:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  if (phost->RequestState == CMD_SEND)
 8006544:	7883      	ldrb	r3, [r0, #2]
 8006546:	2b01      	cmp	r3, #1
 8006548:	d002      	beq.n	8006550 <USBH_GetDescriptor+0x18>
  return USBH_CtlReq(phost, buff, length);
 800654a:	f7ff ff1a 	bl	8006382 <USBH_CtlReq>
}
 800654e:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006550:	f06e 0e7f 	orn	lr, lr, #127	; 0x7f
 8006554:	f880 e010 	strb.w	lr, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006558:	2306      	movs	r3, #6
 800655a:	7443      	strb	r3, [r0, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800655c:	f8a0 c012 	strh.w	ip, [r0, #18]
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006560:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
      phost->Control.setup.b.wIndex.w = 0U;
 8006564:	f5bc 7f40 	cmp.w	ip, #768	; 0x300
 8006568:	f240 4309 	movw	r3, #1033	; 0x409
 800656c:	bf18      	it	ne
 800656e:	2300      	movne	r3, #0
 8006570:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = length;
 8006572:	82c2      	strh	r2, [r0, #22]
 8006574:	e7e9      	b.n	800654a <USBH_GetDescriptor+0x12>

08006576 <USBH_Get_DevDesc>:
{
 8006576:	b530      	push	{r4, r5, lr}
 8006578:	b083      	sub	sp, #12
 800657a:	4604      	mov	r4, r0
  status = USBH_GetDescriptor(phost,
 800657c:	460d      	mov	r5, r1
 800657e:	9100      	str	r1, [sp, #0]
 8006580:	f500 738e 	add.w	r3, r0, #284	; 0x11c
 8006584:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006588:	2100      	movs	r1, #0
 800658a:	f7ff ffd5 	bl	8006538 <USBH_GetDescriptor>
  if (status == USBH_OK)
 800658e:	b108      	cbz	r0, 8006594 <USBH_Get_DevDesc+0x1e>
}
 8006590:	b003      	add	sp, #12
 8006592:	bd30      	pop	{r4, r5, pc}
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8006594:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 8006598:	f884 3326 	strb.w	r3, [r4, #806]	; 0x326
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800659c:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
 80065a0:	f884 3327 	strb.w	r3, [r4, #807]	; 0x327
  dev_desc->bcdUSB             = LE16(buf +  2);
 80065a4:	f894 211f 	ldrb.w	r2, [r4, #287]	; 0x11f
 80065a8:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
 80065ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80065b0:	f8a4 3328 	strh.w	r3, [r4, #808]	; 0x328
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80065b4:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
 80065b8:	f884 332a 	strb.w	r3, [r4, #810]	; 0x32a
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80065bc:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
 80065c0:	f884 332b 	strb.w	r3, [r4, #811]	; 0x32b
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80065c4:	f894 3122 	ldrb.w	r3, [r4, #290]	; 0x122
 80065c8:	f884 332c 	strb.w	r3, [r4, #812]	; 0x32c
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80065cc:	f894 2123 	ldrb.w	r2, [r4, #291]	; 0x123
  switch (dev_desc->bMaxPacketSize)
 80065d0:	2a20      	cmp	r2, #32
 80065d2:	d80f      	bhi.n	80065f4 <USBH_Get_DevDesc+0x7e>
 80065d4:	2a07      	cmp	r2, #7
 80065d6:	d909      	bls.n	80065ec <USBH_Get_DevDesc+0x76>
 80065d8:	f1a2 0308 	sub.w	r3, r2, #8
 80065dc:	b2d9      	uxtb	r1, r3
 80065de:	2301      	movs	r3, #1
 80065e0:	408b      	lsls	r3, r1
 80065e2:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 80065e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065ea:	b92b      	cbnz	r3, 80065f8 <USBH_Get_DevDesc+0x82>
      dev_desc->bMaxPacketSize = 64U;
 80065ec:	2340      	movs	r3, #64	; 0x40
 80065ee:	f884 332d 	strb.w	r3, [r4, #813]	; 0x32d
      break;
 80065f2:	e003      	b.n	80065fc <USBH_Get_DevDesc+0x86>
  switch (dev_desc->bMaxPacketSize)
 80065f4:	2a40      	cmp	r2, #64	; 0x40
 80065f6:	d1f9      	bne.n	80065ec <USBH_Get_DevDesc+0x76>
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80065f8:	f884 232d 	strb.w	r2, [r4, #813]	; 0x32d
  if (length > 8U)
 80065fc:	2d08      	cmp	r5, #8
 80065fe:	d9c7      	bls.n	8006590 <USBH_Get_DevDesc+0x1a>
    dev_desc->idVendor           = LE16(buf +  8);
 8006600:	f894 2125 	ldrb.w	r2, [r4, #293]	; 0x125
 8006604:	f894 3124 	ldrb.w	r3, [r4, #292]	; 0x124
 8006608:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800660c:	f8a4 332e 	strh.w	r3, [r4, #814]	; 0x32e
    dev_desc->idProduct          = LE16(buf + 10);
 8006610:	f894 2127 	ldrb.w	r2, [r4, #295]	; 0x127
 8006614:	f894 3126 	ldrb.w	r3, [r4, #294]	; 0x126
 8006618:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800661c:	f8a4 3330 	strh.w	r3, [r4, #816]	; 0x330
    dev_desc->bcdDevice          = LE16(buf + 12);
 8006620:	f894 2129 	ldrb.w	r2, [r4, #297]	; 0x129
 8006624:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
 8006628:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800662c:	f8a4 3332 	strh.w	r3, [r4, #818]	; 0x332
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8006630:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
 8006634:	f884 3334 	strb.w	r3, [r4, #820]	; 0x334
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8006638:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
 800663c:	f884 3335 	strb.w	r3, [r4, #821]	; 0x335
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8006640:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
 8006644:	f884 3336 	strb.w	r3, [r4, #822]	; 0x336
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8006648:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 800664c:	f884 3337 	strb.w	r3, [r4, #823]	; 0x337
 8006650:	e79e      	b.n	8006590 <USBH_Get_DevDesc+0x1a>

08006652 <USBH_Get_CfgDesc>:
{
 8006652:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006656:	b085      	sub	sp, #20
 8006658:	4605      	mov	r5, r0
 800665a:	460e      	mov	r6, r1
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800665c:	f100 041c 	add.w	r4, r0, #28
  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8006660:	9100      	str	r1, [sp, #0]
 8006662:	4623      	mov	r3, r4
 8006664:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006668:	2100      	movs	r1, #0
 800666a:	f7ff ff65 	bl	8006538 <USBH_GetDescriptor>
  if (status == USBH_OK)
 800666e:	b110      	cbz	r0, 8006676 <USBH_Get_CfgDesc+0x24>
}
 8006670:	b005      	add	sp, #20
 8006672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8006676:	7f2a      	ldrb	r2, [r5, #28]
 8006678:	f885 2338 	strb.w	r2, [r5, #824]	; 0x338
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800667c:	7f6b      	ldrb	r3, [r5, #29]
 800667e:	f885 3339 	strb.w	r3, [r5, #825]	; 0x339
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8006682:	7fe9      	ldrb	r1, [r5, #31]
 8006684:	7fab      	ldrb	r3, [r5, #30]
 8006686:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800668a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800668e:	bf28      	it	cs
 8006690:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8006694:	f8a5 333a 	strh.w	r3, [r5, #826]	; 0x33a
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8006698:	f895 3020 	ldrb.w	r3, [r5, #32]
 800669c:	f885 333c 	strb.w	r3, [r5, #828]	; 0x33c
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80066a0:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 80066a4:	f885 333d 	strb.w	r3, [r5, #829]	; 0x33d
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80066a8:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 80066ac:	f885 333e 	strb.w	r3, [r5, #830]	; 0x33e
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80066b0:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 80066b4:	f885 333f 	strb.w	r3, [r5, #831]	; 0x33f
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80066b8:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 80066bc:	f885 3340 	strb.w	r3, [r5, #832]	; 0x340
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 80066c0:	2a09      	cmp	r2, #9
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80066c2:	bf1c      	itt	ne
 80066c4:	2309      	movne	r3, #9
 80066c6:	f885 3338 	strbne.w	r3, [r5, #824]	; 0x338
  if (length > USB_CONFIGURATION_DESC_SIZE)
 80066ca:	2e09      	cmp	r6, #9
 80066cc:	d9d0      	bls.n	8006670 <USBH_Get_CfgDesc+0x1e>
 80066ce:	46ab      	mov	fp, r5
  USBH_StatusTypeDef           status = USBH_OK;
 80066d0:	4606      	mov	r6, r0
  if (length > USB_CONFIGURATION_DESC_SIZE)
 80066d2:	2200      	movs	r2, #0
    ptr = USB_LEN_CFG_DESC;
 80066d4:	2309      	movs	r3, #9
        ep_ix = 0U;
 80066d6:	9003      	str	r0, [sp, #12]
 80066d8:	9002      	str	r0, [sp, #8]
 80066da:	b2d7      	uxtb	r7, r2
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80066dc:	2a02      	cmp	r2, #2
 80066de:	f000 80c8 	beq.w	8006872 <USBH_Get_CfgDesc+0x220>
 80066e2:	f8b5 133a 	ldrh.w	r1, [r5, #826]	; 0x33a
 80066e6:	4299      	cmp	r1, r3
 80066e8:	f240 80c3 	bls.w	8006872 <USBH_Get_CfgDesc+0x220>
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80066ec:	7821      	ldrb	r1, [r4, #0]
 80066ee:	440b      	add	r3, r1
 80066f0:	b29b      	uxth	r3, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80066f2:	440c      	add	r4, r1
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80066f4:	7861      	ldrb	r1, [r4, #1]
 80066f6:	2904      	cmp	r1, #4
 80066f8:	d1f0      	bne.n	80066dc <USBH_Get_CfgDesc+0x8a>
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80066fa:	7821      	ldrb	r1, [r4, #0]
 80066fc:	2909      	cmp	r1, #9
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80066fe:	bf1c      	itt	ne
 8006700:	2109      	movne	r1, #9
 8006702:	7021      	strbne	r1, [r4, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8006704:	7821      	ldrb	r1, [r4, #0]
 8006706:	465f      	mov	r7, fp
 8006708:	f88b 1342 	strb.w	r1, [fp, #834]	; 0x342
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800670c:	7861      	ldrb	r1, [r4, #1]
 800670e:	f88b 1343 	strb.w	r1, [fp, #835]	; 0x343
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8006712:	78a1      	ldrb	r1, [r4, #2]
 8006714:	f88b 1344 	strb.w	r1, [fp, #836]	; 0x344
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8006718:	78e1      	ldrb	r1, [r4, #3]
 800671a:	f88b 1345 	strb.w	r1, [fp, #837]	; 0x345
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800671e:	7920      	ldrb	r0, [r4, #4]
 8006720:	f88b 0346 	strb.w	r0, [fp, #838]	; 0x346
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8006724:	7961      	ldrb	r1, [r4, #5]
 8006726:	f88b 1347 	strb.w	r1, [fp, #839]	; 0x347
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800672a:	79a1      	ldrb	r1, [r4, #6]
 800672c:	f88b 1348 	strb.w	r1, [fp, #840]	; 0x348
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8006730:	79e1      	ldrb	r1, [r4, #7]
 8006732:	f88b 1349 	strb.w	r1, [fp, #841]	; 0x349
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8006736:	7a21      	ldrb	r1, [r4, #8]
 8006738:	f88b 134a 	strb.w	r1, [fp, #842]	; 0x34a
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800673c:	2800      	cmp	r0, #0
 800673e:	f000 8094 	beq.w	800686a <USBH_Get_CfgDesc+0x218>
        ep_ix = 0U;
 8006742:	9903      	ldr	r1, [sp, #12]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8006744:	f04f 0c1a 	mov.w	ip, #26
 8006748:	fb0c f902 	mul.w	r9, ip, r2
 800674c:	e01b      	b.n	8006786 <USBH_Get_CfgDesc+0x134>
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800674e:	f897 0348 	ldrb.w	r0, [r7, #840]	; 0x348
 8006752:	2802      	cmp	r0, #2
 8006754:	d126      	bne.n	80067a4 <USBH_Get_CfgDesc+0x152>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006756:	f897 0349 	ldrb.w	r0, [r7, #841]	; 0x349
 800675a:	bb40      	cbnz	r0, 80067ae <USBH_Get_CfgDesc+0x15c>
 800675c:	7820      	ldrb	r0, [r4, #0]
 800675e:	2809      	cmp	r0, #9
 8006760:	d025      	beq.n	80067ae <USBH_Get_CfgDesc+0x15c>
                pdesc->bLength = 0x09U;
 8006762:	f04f 0009 	mov.w	r0, #9
 8006766:	7020      	strb	r0, [r4, #0]
 8006768:	e021      	b.n	80067ae <USBH_Get_CfgDesc+0x15c>
    status = USBH_NOT_SUPPORTED;
 800676a:	2603      	movs	r6, #3
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800676c:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 8006770:	2800      	cmp	r0, #0
 8006772:	d162      	bne.n	800683a <USBH_Get_CfgDesc+0x1e8>
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8006774:	f01e 0f01 	tst.w	lr, #1
 8006778:	d156      	bne.n	8006828 <USBH_Get_CfgDesc+0x1d6>
            ep_ix++;
 800677a:	3101      	adds	r1, #1
 800677c:	b2c9      	uxtb	r1, r1
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800677e:	f897 0346 	ldrb.w	r0, [r7, #838]	; 0x346
 8006782:	4281      	cmp	r1, r0
 8006784:	d271      	bcs.n	800686a <USBH_Get_CfgDesc+0x218>
 8006786:	f8b5 c33a 	ldrh.w	ip, [r5, #826]	; 0x33a
 800678a:	459c      	cmp	ip, r3
 800678c:	d96b      	bls.n	8006866 <USBH_Get_CfgDesc+0x214>
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800678e:	7820      	ldrb	r0, [r4, #0]
 8006790:	4403      	add	r3, r0
 8006792:	b29b      	uxth	r3, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006794:	4404      	add	r4, r0
          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006796:	7860      	ldrb	r0, [r4, #1]
 8006798:	2805      	cmp	r0, #5
 800679a:	d1f0      	bne.n	800677e <USBH_Get_CfgDesc+0x12c>
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800679c:	f897 0347 	ldrb.w	r0, [r7, #839]	; 0x347
 80067a0:	2801      	cmp	r0, #1
 80067a2:	d0d4      	beq.n	800674e <USBH_Get_CfgDesc+0xfc>
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 80067a4:	7820      	ldrb	r0, [r4, #0]
 80067a6:	2807      	cmp	r0, #7
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80067a8:	bf1c      	itt	ne
 80067aa:	2007      	movne	r0, #7
 80067ac:	7020      	strbne	r0, [r4, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80067ae:	7826      	ldrb	r6, [r4, #0]
 80067b0:	1c48      	adds	r0, r1, #1
 80067b2:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
 80067b6:	4428      	add	r0, r5
 80067b8:	f880 6344 	strb.w	r6, [r0, #836]	; 0x344
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80067bc:	7866      	ldrb	r6, [r4, #1]
 80067be:	f880 6345 	strb.w	r6, [r0, #837]	; 0x345
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80067c2:	78a6      	ldrb	r6, [r4, #2]
 80067c4:	f880 6346 	strb.w	r6, [r0, #838]	; 0x346
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80067c8:	f894 e003 	ldrb.w	lr, [r4, #3]
 80067cc:	f880 e347 	strb.w	lr, [r0, #839]	; 0x347
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80067d0:	f894 8005 	ldrb.w	r8, [r4, #5]
 80067d4:	7926      	ldrb	r6, [r4, #4]
 80067d6:	ea46 2608 	orr.w	r6, r6, r8, lsl #8
 80067da:	f8a0 6348 	strh.w	r6, [r0, #840]	; 0x348
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80067de:	f894 8006 	ldrb.w	r8, [r4, #6]
 80067e2:	f880 834a 	strb.w	r8, [r0, #842]	; 0x34a
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 80067e6:	2e00      	cmp	r6, #0
 80067e8:	d0bf      	beq.n	800676a <USBH_Get_CfgDesc+0x118>
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 80067ea:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 80067ee:	1c48      	adds	r0, r1, #1
 80067f0:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
 80067f4:	4428      	add	r0, r5
 80067f6:	f8a0 6348 	strh.w	r6, [r0, #840]	; 0x348
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 80067fa:	b236      	sxth	r6, r6
 80067fc:	7960      	ldrb	r0, [r4, #5]
 80067fe:	f894 a004 	ldrb.w	sl, [r4, #4]
 8006802:	ea4a 2a00 	orr.w	sl, sl, r0, lsl #8
 8006806:	f41a 6fc0 	tst.w	sl, #1536	; 0x600
 800680a:	bf0c      	ite	eq
 800680c:	f3ca 0a0a 	ubfxeq	sl, sl, #0, #11
 8006810:	f44f 7a00 	movne.w	sl, #512	; 0x200
 8006814:	1c48      	adds	r0, r1, #1
 8006816:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
 800681a:	4428      	add	r0, r5
 800681c:	ea46 060a 	orr.w	r6, r6, sl
 8006820:	f8a0 6348 	strh.w	r6, [r0, #840]	; 0x348
  USBH_StatusTypeDef status = USBH_OK;
 8006824:	9e02      	ldr	r6, [sp, #8]
 8006826:	e7a1      	b.n	800676c <USBH_Get_CfgDesc+0x11a>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8006828:	f108 38ff 	add.w	r8, r8, #4294967295
 800682c:	fa5f f888 	uxtb.w	r8, r8
        status = USBH_NOT_SUPPORTED;
 8006830:	f1b8 0f10 	cmp.w	r8, #16
 8006834:	bf28      	it	cs
 8006836:	2603      	movcs	r6, #3
 8006838:	e79f      	b.n	800677a <USBH_Get_CfgDesc+0x128>
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800683a:	f00e 0e03 	and.w	lr, lr, #3
 800683e:	f1be 0f01 	cmp.w	lr, #1
 8006842:	d007      	beq.n	8006854 <USBH_Get_CfgDesc+0x202>
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8006844:	f1be 0f03 	cmp.w	lr, #3
 8006848:	d197      	bne.n	800677a <USBH_Get_CfgDesc+0x128>
        status = USBH_NOT_SUPPORTED;
 800684a:	f1b8 0f00 	cmp.w	r8, #0
 800684e:	bf08      	it	eq
 8006850:	4676      	moveq	r6, lr
 8006852:	e792      	b.n	800677a <USBH_Get_CfgDesc+0x128>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8006854:	f108 38ff 	add.w	r8, r8, #4294967295
 8006858:	fa5f f888 	uxtb.w	r8, r8
        status = USBH_NOT_SUPPORTED;
 800685c:	f1b8 0f10 	cmp.w	r8, #16
 8006860:	bf28      	it	cs
 8006862:	2603      	movcs	r6, #3
 8006864:	e789      	b.n	800677a <USBH_Get_CfgDesc+0x128>
        if (ep_ix < pif->bNumEndpoints)
 8006866:	4288      	cmp	r0, r1
 8006868:	d80d      	bhi.n	8006886 <USBH_Get_CfgDesc+0x234>
        if_ix++;
 800686a:	3201      	adds	r2, #1
 800686c:	f10b 0b1a 	add.w	fp, fp, #26
 8006870:	e733      	b.n	80066da <USBH_Get_CfgDesc+0x88>
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8006872:	f895 333c 	ldrb.w	r3, [r5, #828]	; 0x33c
 8006876:	2b02      	cmp	r3, #2
 8006878:	bf28      	it	cs
 800687a:	2302      	movcs	r3, #2
      return USBH_NOT_SUPPORTED;
 800687c:	42bb      	cmp	r3, r7
 800687e:	bf94      	ite	ls
 8006880:	4630      	movls	r0, r6
 8006882:	2003      	movhi	r0, #3
 8006884:	e6f4      	b.n	8006670 <USBH_Get_CfgDesc+0x1e>
          return USBH_NOT_SUPPORTED;
 8006886:	2003      	movs	r0, #3
 8006888:	e6f2      	b.n	8006670 <USBH_Get_CfgDesc+0x1e>

0800688a <USBH_Get_StringDesc>:
{
 800688a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800688c:	b083      	sub	sp, #12
 800688e:	4605      	mov	r5, r0
 8006890:	4614      	mov	r4, r2
 8006892:	461e      	mov	r6, r3
                              phost->device.Data, length);
 8006894:	f500 778e 	add.w	r7, r0, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8006898:	9300      	str	r3, [sp, #0]
 800689a:	463b      	mov	r3, r7
 800689c:	f441 7240 	orr.w	r2, r1, #768	; 0x300
 80068a0:	2100      	movs	r1, #0
 80068a2:	f7ff fe49 	bl	8006538 <USBH_GetDescriptor>
  if (status == USBH_OK)
 80068a6:	b108      	cbz	r0, 80068ac <USBH_Get_StringDesc+0x22>
}
 80068a8:	b003      	add	sp, #12
 80068aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (psrc[1] == USB_DESC_TYPE_STRING)
 80068ac:	f895 311d 	ldrb.w	r3, [r5, #285]	; 0x11d
 80068b0:	2b03      	cmp	r3, #3
 80068b2:	d1f9      	bne.n	80068a8 <USBH_Get_StringDesc+0x1e>
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80068b4:	f895 311c 	ldrb.w	r3, [r5, #284]	; 0x11c
 80068b8:	3b02      	subs	r3, #2
 80068ba:	429e      	cmp	r6, r3
 80068bc:	bf28      	it	cs
 80068be:	461e      	movcs	r6, r3
 80068c0:	b2b6      	uxth	r6, r6
    for (idx = 0U; idx < strlength; idx += 2U)
 80068c2:	b146      	cbz	r6, 80068d6 <USBH_Get_StringDesc+0x4c>
 80068c4:	2300      	movs	r3, #0
      *pdest =  psrc[idx];
 80068c6:	18fa      	adds	r2, r7, r3
 80068c8:	7892      	ldrb	r2, [r2, #2]
 80068ca:	f804 2b01 	strb.w	r2, [r4], #1
    for (idx = 0U; idx < strlength; idx += 2U)
 80068ce:	3302      	adds	r3, #2
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	429e      	cmp	r6, r3
 80068d4:	d8f7      	bhi.n	80068c6 <USBH_Get_StringDesc+0x3c>
    *pdest = 0U; /* mark end of string */
 80068d6:	2300      	movs	r3, #0
 80068d8:	7023      	strb	r3, [r4, #0]
 80068da:	e7e5      	b.n	80068a8 <USBH_Get_StringDesc+0x1e>

080068dc <USBH_SetAddress>:
{
 80068dc:	b508      	push	{r3, lr}
  if (phost->RequestState == CMD_SEND)
 80068de:	7883      	ldrb	r3, [r0, #2]
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d004      	beq.n	80068ee <USBH_SetAddress+0x12>
  return USBH_CtlReq(phost, NULL, 0U);
 80068e4:	2200      	movs	r2, #0
 80068e6:	4611      	mov	r1, r2
 80068e8:	f7ff fd4b 	bl	8006382 <USBH_CtlReq>
}
 80068ec:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80068ee:	2300      	movs	r3, #0
 80068f0:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80068f2:	2205      	movs	r2, #5
 80068f4:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80068f6:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80068f8:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80068fa:	82c3      	strh	r3, [r0, #22]
 80068fc:	e7f2      	b.n	80068e4 <USBH_SetAddress+0x8>

080068fe <USBH_SetCfg>:
{
 80068fe:	b508      	push	{r3, lr}
  if (phost->RequestState == CMD_SEND)
 8006900:	7883      	ldrb	r3, [r0, #2]
 8006902:	2b01      	cmp	r3, #1
 8006904:	d004      	beq.n	8006910 <USBH_SetCfg+0x12>
  return USBH_CtlReq(phost, NULL, 0U);
 8006906:	2200      	movs	r2, #0
 8006908:	4611      	mov	r1, r2
 800690a:	f7ff fd3a 	bl	8006382 <USBH_CtlReq>
}
 800690e:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006910:	2300      	movs	r3, #0
 8006912:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8006914:	2209      	movs	r2, #9
 8006916:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006918:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800691a:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800691c:	82c3      	strh	r3, [r0, #22]
 800691e:	e7f2      	b.n	8006906 <USBH_SetCfg+0x8>

08006920 <USBH_SetFeature>:
{
 8006920:	b508      	push	{r3, lr}
  if (phost->RequestState == CMD_SEND)
 8006922:	7883      	ldrb	r3, [r0, #2]
 8006924:	2b01      	cmp	r3, #1
 8006926:	d004      	beq.n	8006932 <USBH_SetFeature+0x12>
  return USBH_CtlReq(phost, NULL, 0U);
 8006928:	2200      	movs	r2, #0
 800692a:	4611      	mov	r1, r2
 800692c:	f7ff fd29 	bl	8006382 <USBH_CtlReq>
}
 8006930:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006932:	2300      	movs	r3, #0
 8006934:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006936:	2203      	movs	r2, #3
 8006938:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800693a:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800693c:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800693e:	82c3      	strh	r3, [r0, #22]
 8006940:	e7f2      	b.n	8006928 <USBH_SetFeature+0x8>

08006942 <USBH_ClrFeature>:
{
 8006942:	b508      	push	{r3, lr}
  if (phost->RequestState == CMD_SEND)
 8006944:	7883      	ldrb	r3, [r0, #2]
 8006946:	2b01      	cmp	r3, #1
 8006948:	d004      	beq.n	8006954 <USBH_ClrFeature+0x12>
  return USBH_CtlReq(phost, NULL, 0U);
 800694a:	2200      	movs	r2, #0
 800694c:	4611      	mov	r1, r2
 800694e:	f7ff fd18 	bl	8006382 <USBH_CtlReq>
}
 8006952:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006954:	2302      	movs	r3, #2
 8006956:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006958:	2301      	movs	r3, #1
 800695a:	7443      	strb	r3, [r0, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800695c:	2300      	movs	r3, #0
 800695e:	8243      	strh	r3, [r0, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006960:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006962:	82c3      	strh	r3, [r0, #22]
 8006964:	e7f1      	b.n	800694a <USBH_ClrFeature+0x8>

08006966 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8006966:	b510      	push	{r4, lr}
 8006968:	b084      	sub	sp, #16
 800696a:	460b      	mov	r3, r1
 800696c:	4611      	mov	r1, r2

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800696e:	2400      	movs	r4, #0
 8006970:	9403      	str	r4, [sp, #12]
 8006972:	2208      	movs	r2, #8
 8006974:	9202      	str	r2, [sp, #8]
 8006976:	9301      	str	r3, [sp, #4]
 8006978:	9400      	str	r4, [sp, #0]
 800697a:	4623      	mov	r3, r4
 800697c:	4622      	mov	r2, r4
 800697e:	f002 f94b 	bl	8008c18 <USBH_LL_SubmitURB>
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
}
 8006982:	4620      	mov	r0, r4
 8006984:	b004      	add	sp, #16
 8006986:	bd10      	pop	{r4, pc}

08006988 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8006988:	b510      	push	{r4, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	460c      	mov	r4, r1
 800698e:	4619      	mov	r1, r3
 8006990:	f89d 3018 	ldrb.w	r3, [sp, #24]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006994:	f890 c31d 	ldrb.w	ip, [r0, #797]	; 0x31d
  {
    do_ping = 0U;
 8006998:	f1bc 0f00 	cmp.w	ip, #0
 800699c:	bf18      	it	ne
 800699e:	2300      	movne	r3, #0
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80069a0:	9303      	str	r3, [sp, #12]
 80069a2:	9202      	str	r2, [sp, #8]
 80069a4:	9401      	str	r4, [sp, #4]
 80069a6:	2301      	movs	r3, #1
 80069a8:	9300      	str	r3, [sp, #0]
 80069aa:	2300      	movs	r3, #0
 80069ac:	461a      	mov	r2, r3
 80069ae:	f002 f933 	bl	8008c18 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
}
 80069b2:	2000      	movs	r0, #0
 80069b4:	b004      	add	sp, #16
 80069b6:	bd10      	pop	{r4, pc}

080069b8 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80069b8:	b530      	push	{r4, r5, lr}
 80069ba:	b085      	sub	sp, #20
 80069bc:	460d      	mov	r5, r1
 80069be:	4619      	mov	r1, r3
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80069c0:	2400      	movs	r4, #0
 80069c2:	9403      	str	r4, [sp, #12]
 80069c4:	9202      	str	r2, [sp, #8]
 80069c6:	9501      	str	r5, [sp, #4]
 80069c8:	2201      	movs	r2, #1
 80069ca:	9200      	str	r2, [sp, #0]
 80069cc:	4623      	mov	r3, r4
 80069ce:	f002 f923 	bl	8008c18 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;

}
 80069d2:	4620      	mov	r0, r4
 80069d4:	b005      	add	sp, #20
 80069d6:	bd30      	pop	{r4, r5, pc}

080069d8 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80069d8:	b510      	push	{r4, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	460c      	mov	r4, r1
 80069de:	4619      	mov	r1, r3
 80069e0:	f89d 3018 	ldrb.w	r3, [sp, #24]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80069e4:	f890 c31d 	ldrb.w	ip, [r0, #797]	; 0x31d
  {
    do_ping = 0U;
 80069e8:	f1bc 0f00 	cmp.w	ip, #0
 80069ec:	bf18      	it	ne
 80069ee:	2300      	movne	r3, #0
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80069f0:	9303      	str	r3, [sp, #12]
 80069f2:	9202      	str	r2, [sp, #8]
 80069f4:	9401      	str	r4, [sp, #4]
 80069f6:	2301      	movs	r3, #1
 80069f8:	9300      	str	r3, [sp, #0]
 80069fa:	2302      	movs	r3, #2
 80069fc:	2200      	movs	r2, #0
 80069fe:	f002 f90b 	bl	8008c18 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 8006a02:	2000      	movs	r0, #0
 8006a04:	b004      	add	sp, #16
 8006a06:	bd10      	pop	{r4, pc}

08006a08 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8006a08:	b530      	push	{r4, r5, lr}
 8006a0a:	b085      	sub	sp, #20
 8006a0c:	460d      	mov	r5, r1
 8006a0e:	4619      	mov	r1, r3
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006a10:	2400      	movs	r4, #0
 8006a12:	9403      	str	r4, [sp, #12]
 8006a14:	9202      	str	r2, [sp, #8]
 8006a16:	9501      	str	r5, [sp, #4]
 8006a18:	2201      	movs	r2, #1
 8006a1a:	9200      	str	r2, [sp, #0]
 8006a1c:	2302      	movs	r3, #2
 8006a1e:	f002 f8fb 	bl	8008c18 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
}
 8006a22:	4620      	mov	r0, r4
 8006a24:	b005      	add	sp, #20
 8006a26:	bd30      	pop	{r4, r5, pc}

08006a28 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006a28:	b510      	push	{r4, lr}
 8006a2a:	b084      	sub	sp, #16
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8006a2c:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8006a30:	9402      	str	r4, [sp, #8]
 8006a32:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8006a36:	9401      	str	r4, [sp, #4]
 8006a38:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8006a3c:	9400      	str	r4, [sp, #0]
 8006a3e:	f002 f8d0 	bl	8008be2 <USBH_LL_OpenPipe>

  return USBH_OK;
}
 8006a42:	2000      	movs	r0, #0
 8006a44:	b004      	add	sp, #16
 8006a46:	bd10      	pop	{r4, pc}

08006a48 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8006a48:	b508      	push	{r3, lr}
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8006a4a:	f002 f8dd 	bl	8008c08 <USBH_LL_ClosePipe>

  return USBH_OK;
}
 8006a4e:	2000      	movs	r0, #0
 8006a50:	bd08      	pop	{r3, pc}

08006a52 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8006a52:	b410      	push	{r4}
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
  uint8_t idx = 0U;

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8006a54:	f500 7260 	add.w	r2, r0, #896	; 0x380
{
 8006a58:	2300      	movs	r3, #0
 8006a5a:	fa5f fc83 	uxtb.w	ip, r3
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8006a5e:	f852 4f04 	ldr.w	r4, [r2, #4]!
 8006a62:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8006a66:	d005      	beq.n	8006a74 <USBH_AllocPipe+0x22>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8006a68:	3301      	adds	r3, #1
 8006a6a:	2b10      	cmp	r3, #16
 8006a6c:	d1f5      	bne.n	8006a5a <USBH_AllocPipe+0x8>
    {
      return (uint16_t)idx;
    }
  }

  return 0xFFFFU;
 8006a6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006a72:	e009      	b.n	8006a88 <USBH_AllocPipe+0x36>
      return (uint16_t)idx;
 8006a74:	fa1f f38c 	uxth.w	r3, ip
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8006a78:	f00c 0c0f 	and.w	ip, ip, #15
 8006a7c:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8006a80:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8006a84:	f8cc 1384 	str.w	r1, [ip, #900]	; 0x384
}
 8006a88:	b2d8      	uxtb	r0, r3
 8006a8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a8e:	4770      	bx	lr

08006a90 <USBH_FreePipe>:
  if (idx < USBH_MAX_PIPES_NBR)
 8006a90:	290f      	cmp	r1, #15
 8006a92:	d807      	bhi.n	8006aa4 <USBH_FreePipe+0x14>
    phost->Pipes[idx] &= 0x7FFFU;
 8006a94:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8006a98:	f8d0 3384 	ldr.w	r3, [r0, #900]	; 0x384
 8006a9c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006aa0:	f8c0 3384 	str.w	r3, [r0, #900]	; 0x384
}
 8006aa4:	2000      	movs	r0, #0
 8006aa6:	4770      	bx	lr

08006aa8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006aa8:	b508      	push	{r3, lr}
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006aaa:	4b04      	ldr	r3, [pc, #16]	; (8006abc <disk_status+0x14>)
 8006aac:	181a      	adds	r2, r3, r0
 8006aae:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	7a10      	ldrb	r0, [r2, #8]
 8006ab8:	4798      	blx	r3
  return stat;
}
 8006aba:	bd08      	pop	{r3, pc}
 8006abc:	20003018 	.word	0x20003018

08006ac0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006ac0:	b508      	push	{r3, lr}
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8006ac2:	4b08      	ldr	r3, [pc, #32]	; (8006ae4 <disk_initialize+0x24>)
 8006ac4:	5c1b      	ldrb	r3, [r3, r0]
 8006ac6:	b953      	cbnz	r3, 8006ade <disk_initialize+0x1e>
  {
    disk.is_initialized[pdrv] = 1;
 8006ac8:	4b06      	ldr	r3, [pc, #24]	; (8006ae4 <disk_initialize+0x24>)
 8006aca:	2201      	movs	r2, #1
 8006acc:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006ace:	181a      	adds	r2, r3, r0
 8006ad0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006ad4:	6843      	ldr	r3, [r0, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	7a10      	ldrb	r0, [r2, #8]
 8006ada:	4798      	blx	r3
  }
  return stat;
}
 8006adc:	bd08      	pop	{r3, pc}
  DSTATUS stat = RES_OK;
 8006ade:	2000      	movs	r0, #0
 8006ae0:	e7fc      	b.n	8006adc <disk_initialize+0x1c>
 8006ae2:	bf00      	nop
 8006ae4:	20003018 	.word	0x20003018

08006ae8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006ae8:	b510      	push	{r4, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006aea:	4c05      	ldr	r4, [pc, #20]	; (8006b00 <disk_read+0x18>)
 8006aec:	eb04 0c00 	add.w	ip, r4, r0
 8006af0:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8006af4:	6860      	ldr	r0, [r4, #4]
 8006af6:	6884      	ldr	r4, [r0, #8]
 8006af8:	f89c 0008 	ldrb.w	r0, [ip, #8]
 8006afc:	47a0      	blx	r4
  return res;
}
 8006afe:	bd10      	pop	{r4, pc}
 8006b00:	20003018 	.word	0x20003018

08006b04 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006b04:	b510      	push	{r4, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006b06:	4c05      	ldr	r4, [pc, #20]	; (8006b1c <disk_write+0x18>)
 8006b08:	eb04 0c00 	add.w	ip, r4, r0
 8006b0c:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8006b10:	6860      	ldr	r0, [r4, #4]
 8006b12:	68c4      	ldr	r4, [r0, #12]
 8006b14:	f89c 0008 	ldrb.w	r0, [ip, #8]
 8006b18:	47a0      	blx	r4
  return res;
}
 8006b1a:	bd10      	pop	{r4, pc}
 8006b1c:	20003018 	.word	0x20003018

08006b20 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006b20:	b508      	push	{r3, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006b22:	4b05      	ldr	r3, [pc, #20]	; (8006b38 <disk_ioctl+0x18>)
 8006b24:	eb03 0c00 	add.w	ip, r3, r0
 8006b28:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	691b      	ldr	r3, [r3, #16]
 8006b30:	f89c 0008 	ldrb.w	r0, [ip, #8]
 8006b34:	4798      	blx	r3
  return res;
}
 8006b36:	bd08      	pop	{r3, pc}
 8006b38:	20003018 	.word	0x20003018

08006b3c <ld_dword>:
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
 8006b3c:	78c2      	ldrb	r2, [r0, #3]
	rv = rv << 8 | ptr[2];
 8006b3e:	7883      	ldrb	r3, [r0, #2]
 8006b40:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
	rv = rv << 8 | ptr[1];
 8006b44:	7843      	ldrb	r3, [r0, #1]
 8006b46:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8006b4a:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 8006b4c:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8006b50:	4770      	bx	lr

08006b52 <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8006b52:	7001      	strb	r1, [r0, #0]
 8006b54:	0a0b      	lsrs	r3, r1, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8006b56:	7043      	strb	r3, [r0, #1]
 8006b58:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8006b5a:	7083      	strb	r3, [r0, #2]
 8006b5c:	0e09      	lsrs	r1, r1, #24
	*ptr++ = (BYTE)val;
 8006b5e:	70c1      	strb	r1, [r0, #3]
}
 8006b60:	4770      	bx	lr

08006b62 <mem_cpy>:
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt) {
 8006b62:	b13a      	cbz	r2, 8006b74 <mem_cpy+0x12>
 8006b64:	3801      	subs	r0, #1
 8006b66:	188a      	adds	r2, r1, r2
		do {
			*d++ = *s++;
 8006b68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b6c:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
 8006b70:	4291      	cmp	r1, r2
 8006b72:	d1f9      	bne.n	8006b68 <mem_cpy+0x6>
	}
}
 8006b74:	4770      	bx	lr

08006b76 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
 8006b76:	4402      	add	r2, r0

	do {
		*d++ = (BYTE)val;
 8006b78:	f800 1b01 	strb.w	r1, [r0], #1
	} while (--cnt);
 8006b7c:	4290      	cmp	r0, r2
 8006b7e:	d1fb      	bne.n	8006b78 <mem_set+0x2>
}
 8006b80:	4770      	bx	lr
	...

08006b84 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006b84:	b410      	push	{r4}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs) {	/* Existing entry */
 8006b86:	4b22      	ldr	r3, [pc, #136]	; (8006c10 <chk_lock+0x8c>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	b1f3      	cbz	r3, 8006bca <chk_lock+0x46>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006b8c:	6802      	ldr	r2, [r0, #0]
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d00d      	beq.n	8006bae <chk_lock+0x2a>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006b92:	2200      	movs	r2, #0
		if (Files[i].fs) {	/* Existing entry */
 8006b94:	4b1e      	ldr	r3, [pc, #120]	; (8006c10 <chk_lock+0x8c>)
 8006b96:	691b      	ldr	r3, [r3, #16]
 8006b98:	b32b      	cbz	r3, 8006be6 <chk_lock+0x62>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006b9a:	6804      	ldr	r4, [r0, #0]
 8006b9c:	42a3      	cmp	r3, r4
 8006b9e:	d016      	beq.n	8006bce <chk_lock+0x4a>
		} else {			/* Blank entry */
			be = 1;
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006ba0:	2a00      	cmp	r2, #0
 8006ba2:	d130      	bne.n	8006c06 <chk_lock+0x82>
 8006ba4:	2902      	cmp	r1, #2
 8006ba6:	bf0c      	ite	eq
 8006ba8:	2000      	moveq	r0, #0
 8006baa:	2012      	movne	r0, #18
 8006bac:	e028      	b.n	8006c00 <chk_lock+0x7c>
				Files[i].clu == dp->obj.sclust &&
 8006bae:	4b18      	ldr	r3, [pc, #96]	; (8006c10 <chk_lock+0x8c>)
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006bb0:	685a      	ldr	r2, [r3, #4]
 8006bb2:	6883      	ldr	r3, [r0, #8]
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d001      	beq.n	8006bbc <chk_lock+0x38>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006bb8:	2200      	movs	r2, #0
 8006bba:	e7eb      	b.n	8006b94 <chk_lock+0x10>
				Files[i].ofs == dp->dptr) break;
 8006bbc:	4b14      	ldr	r3, [pc, #80]	; (8006c10 <chk_lock+0x8c>)
				Files[i].clu == dp->obj.sclust &&
 8006bbe:	689a      	ldr	r2, [r3, #8]
 8006bc0:	6943      	ldr	r3, [r0, #20]
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d011      	beq.n	8006bea <chk_lock+0x66>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	e7e4      	b.n	8006b94 <chk_lock+0x10>
			be = 1;
 8006bca:	2201      	movs	r2, #1
 8006bcc:	e7e2      	b.n	8006b94 <chk_lock+0x10>
				Files[i].clu == dp->obj.sclust &&
 8006bce:	4b10      	ldr	r3, [pc, #64]	; (8006c10 <chk_lock+0x8c>)
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006bd0:	695c      	ldr	r4, [r3, #20]
 8006bd2:	6883      	ldr	r3, [r0, #8]
 8006bd4:	429c      	cmp	r4, r3
 8006bd6:	d1e3      	bne.n	8006ba0 <chk_lock+0x1c>
				Files[i].ofs == dp->dptr) break;
 8006bd8:	4b0d      	ldr	r3, [pc, #52]	; (8006c10 <chk_lock+0x8c>)
				Files[i].clu == dp->obj.sclust &&
 8006bda:	699c      	ldr	r4, [r3, #24]
 8006bdc:	6943      	ldr	r3, [r0, #20]
 8006bde:	429c      	cmp	r4, r3
 8006be0:	d1de      	bne.n	8006ba0 <chk_lock+0x1c>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006be2:	2201      	movs	r2, #1
 8006be4:	e002      	b.n	8006bec <chk_lock+0x68>
			be = 1;
 8006be6:	2201      	movs	r2, #1
 8006be8:	e7da      	b.n	8006ba0 <chk_lock+0x1c>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006bea:	2200      	movs	r2, #0
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006bec:	b969      	cbnz	r1, 8006c0a <chk_lock+0x86>
 8006bee:	4b08      	ldr	r3, [pc, #32]	; (8006c10 <chk_lock+0x8c>)
 8006bf0:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8006bf4:	899b      	ldrh	r3, [r3, #12]
 8006bf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bfa:	bf0c      	ite	eq
 8006bfc:	2010      	moveq	r0, #16
 8006bfe:	2000      	movne	r0, #0
}
 8006c00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c04:	4770      	bx	lr
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006c06:	2000      	movs	r0, #0
 8006c08:	e7fa      	b.n	8006c00 <chk_lock+0x7c>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006c0a:	2010      	movs	r0, #16
 8006c0c:	e7f8      	b.n	8006c00 <chk_lock+0x7c>
 8006c0e:	bf00      	nop
 8006c10:	20002ff4 	.word	0x20002ff4

08006c14 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006c14:	b430      	push	{r4, r5}
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 8006c16:	6802      	ldr	r2, [r0, #0]
 8006c18:	4b2b      	ldr	r3, [pc, #172]	; (8006cc8 <inc_lock+0xb4>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d00c      	beq.n	8006c3a <inc_lock+0x26>
 8006c20:	4c29      	ldr	r4, [pc, #164]	; (8006cc8 <inc_lock+0xb4>)
 8006c22:	6924      	ldr	r4, [r4, #16]
 8006c24:	4294      	cmp	r4, r2
 8006c26:	d024      	beq.n	8006c72 <inc_lock+0x5e>
			Files[i].clu == dp->obj.sclust &&
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006c28:	f04f 0c00 	mov.w	ip, #0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d02f      	beq.n	8006c90 <inc_lock+0x7c>
 8006c30:	4b25      	ldr	r3, [pc, #148]	; (8006cc8 <inc_lock+0xb4>)
 8006c32:	691b      	ldr	r3, [r3, #16]
 8006c34:	b353      	cbz	r3, 8006c8c <inc_lock+0x78>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006c36:	2000      	movs	r0, #0
 8006c38:	e019      	b.n	8006c6e <inc_lock+0x5a>
			Files[i].clu == dp->obj.sclust &&
 8006c3a:	4c23      	ldr	r4, [pc, #140]	; (8006cc8 <inc_lock+0xb4>)
		if (Files[i].fs == dp->obj.fs &&
 8006c3c:	6865      	ldr	r5, [r4, #4]
 8006c3e:	6884      	ldr	r4, [r0, #8]
 8006c40:	42a5      	cmp	r5, r4
 8006c42:	d1ed      	bne.n	8006c20 <inc_lock+0xc>
			Files[i].ofs == dp->dptr) break;
 8006c44:	4c20      	ldr	r4, [pc, #128]	; (8006cc8 <inc_lock+0xb4>)
			Files[i].clu == dp->obj.sclust &&
 8006c46:	68a5      	ldr	r5, [r4, #8]
 8006c48:	6944      	ldr	r4, [r0, #20]
 8006c4a:	42a5      	cmp	r5, r4
 8006c4c:	d1e8      	bne.n	8006c20 <inc_lock+0xc>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006c4e:	f04f 0c00 	mov.w	ip, #0
		Files[i].clu = dp->obj.sclust;
		Files[i].ofs = dp->dptr;
		Files[i].ctr = 0;
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006c52:	2900      	cmp	r1, #0
 8006c54:	d12d      	bne.n	8006cb2 <inc_lock+0x9e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006c56:	4b1c      	ldr	r3, [pc, #112]	; (8006cc8 <inc_lock+0xb4>)
 8006c58:	eb03 130c 	add.w	r3, r3, ip, lsl #4
 8006c5c:	899a      	ldrh	r2, [r3, #12]
 8006c5e:	3201      	adds	r2, #1
 8006c60:	b292      	uxth	r2, r2
 8006c62:	4b19      	ldr	r3, [pc, #100]	; (8006cc8 <inc_lock+0xb4>)
 8006c64:	eb03 130c 	add.w	r3, r3, ip, lsl #4
 8006c68:	819a      	strh	r2, [r3, #12]

	return i + 1;
 8006c6a:	f10c 0001 	add.w	r0, ip, #1
}
 8006c6e:	bc30      	pop	{r4, r5}
 8006c70:	4770      	bx	lr
			Files[i].clu == dp->obj.sclust &&
 8006c72:	4c15      	ldr	r4, [pc, #84]	; (8006cc8 <inc_lock+0xb4>)
		if (Files[i].fs == dp->obj.fs &&
 8006c74:	6965      	ldr	r5, [r4, #20]
 8006c76:	6884      	ldr	r4, [r0, #8]
 8006c78:	42a5      	cmp	r5, r4
 8006c7a:	d1d5      	bne.n	8006c28 <inc_lock+0x14>
			Files[i].ofs == dp->dptr) break;
 8006c7c:	4c12      	ldr	r4, [pc, #72]	; (8006cc8 <inc_lock+0xb4>)
			Files[i].clu == dp->obj.sclust &&
 8006c7e:	69a5      	ldr	r5, [r4, #24]
 8006c80:	6944      	ldr	r4, [r0, #20]
 8006c82:	42a5      	cmp	r5, r4
 8006c84:	d1d0      	bne.n	8006c28 <inc_lock+0x14>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006c86:	f04f 0c01 	mov.w	ip, #1
 8006c8a:	e7e2      	b.n	8006c52 <inc_lock+0x3e>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006c8c:	f04f 0c01 	mov.w	ip, #1
		Files[i].fs = dp->obj.fs;
 8006c90:	4d0d      	ldr	r5, [pc, #52]	; (8006cc8 <inc_lock+0xb4>)
 8006c92:	ea4f 140c 	mov.w	r4, ip, lsl #4
 8006c96:	eb05 130c 	add.w	r3, r5, ip, lsl #4
 8006c9a:	512a      	str	r2, [r5, r4]
		Files[i].clu = dp->obj.sclust;
 8006c9c:	6882      	ldr	r2, [r0, #8]
 8006c9e:	605a      	str	r2, [r3, #4]
		Files[i].ofs = dp->dptr;
 8006ca0:	6942      	ldr	r2, [r0, #20]
 8006ca2:	609a      	str	r2, [r3, #8]
		Files[i].ctr = 0;
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	819a      	strh	r2, [r3, #12]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006ca8:	2900      	cmp	r1, #0
 8006caa:	d0d4      	beq.n	8006c56 <inc_lock+0x42>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006cac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006cb0:	e7d7      	b.n	8006c62 <inc_lock+0x4e>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006cb2:	4b05      	ldr	r3, [pc, #20]	; (8006cc8 <inc_lock+0xb4>)
 8006cb4:	eb03 130c 	add.w	r3, r3, ip, lsl #4
 8006cb8:	899b      	ldrh	r3, [r3, #12]
 8006cba:	b913      	cbnz	r3, 8006cc2 <inc_lock+0xae>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006cbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006cc0:	e7cf      	b.n	8006c62 <inc_lock+0x4e>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006cc2:	2000      	movs	r0, #0
 8006cc4:	e7d3      	b.n	8006c6e <inc_lock+0x5a>
 8006cc6:	bf00      	nop
 8006cc8:	20002ff4 	.word	0x20002ff4

08006ccc <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006ccc:	3801      	subs	r0, #1
 8006cce:	2801      	cmp	r0, #1
 8006cd0:	d810      	bhi.n	8006cf4 <dec_lock+0x28>
		n = Files[i].ctr;
 8006cd2:	4b0e      	ldr	r3, [pc, #56]	; (8006d0c <dec_lock+0x40>)
 8006cd4:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8006cd8:	899b      	ldrh	r3, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
		if (n > 0) n--;				/* Decrement read mode open count */
 8006cda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006cde:	b292      	uxth	r2, r2
 8006ce0:	b152      	cbz	r2, 8006cf8 <dec_lock+0x2c>
 8006ce2:	3b01      	subs	r3, #1
 8006ce4:	b29b      	uxth	r3, r3
		Files[i].ctr = n;
 8006ce6:	4a09      	ldr	r2, [pc, #36]	; (8006d0c <dec_lock+0x40>)
 8006ce8:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 8006cec:	8193      	strh	r3, [r2, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006cee:	b143      	cbz	r3, 8006d02 <dec_lock+0x36>
		res = FR_OK;
 8006cf0:	2000      	movs	r0, #0
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
	}
	return res;
}
 8006cf2:	4770      	bx	lr
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006cf4:	2002      	movs	r0, #2
 8006cf6:	4770      	bx	lr
		Files[i].ctr = n;
 8006cf8:	4b04      	ldr	r3, [pc, #16]	; (8006d0c <dec_lock+0x40>)
 8006cfa:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8006cfe:	2200      	movs	r2, #0
 8006d00:	819a      	strh	r2, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006d02:	0103      	lsls	r3, r0, #4
 8006d04:	2000      	movs	r0, #0
 8006d06:	4a01      	ldr	r2, [pc, #4]	; (8006d0c <dec_lock+0x40>)
 8006d08:	50d0      	str	r0, [r2, r3]
 8006d0a:	4770      	bx	lr
 8006d0c:	20002ff4 	.word	0x20002ff4

08006d10 <clear_lock>:
)
{
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006d10:	4b08      	ldr	r3, [pc, #32]	; (8006d34 <clear_lock+0x24>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4298      	cmp	r0, r3
 8006d16:	d004      	beq.n	8006d22 <clear_lock+0x12>
 8006d18:	4b06      	ldr	r3, [pc, #24]	; (8006d34 <clear_lock+0x24>)
 8006d1a:	691b      	ldr	r3, [r3, #16]
 8006d1c:	4283      	cmp	r3, r0
 8006d1e:	d004      	beq.n	8006d2a <clear_lock+0x1a>
	}
}
 8006d20:	4770      	bx	lr
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006d22:	4b04      	ldr	r3, [pc, #16]	; (8006d34 <clear_lock+0x24>)
 8006d24:	2200      	movs	r2, #0
 8006d26:	601a      	str	r2, [r3, #0]
 8006d28:	e7f6      	b.n	8006d18 <clear_lock+0x8>
 8006d2a:	4b02      	ldr	r3, [pc, #8]	; (8006d34 <clear_lock+0x24>)
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	611a      	str	r2, [r3, #16]
}
 8006d30:	e7f6      	b.n	8006d20 <clear_lock+0x10>
 8006d32:	bf00      	nop
 8006d34:	20002ff4 	.word	0x20002ff4

08006d38 <clust2sect>:
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
 8006d38:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006d3a:	69c3      	ldr	r3, [r0, #28]
 8006d3c:	3b02      	subs	r3, #2
 8006d3e:	428b      	cmp	r3, r1
	return clst * fs->csize + fs->database;
 8006d40:	bf83      	ittte	hi
 8006d42:	8943      	ldrhhi	r3, [r0, #10]
 8006d44:	6b00      	ldrhi	r0, [r0, #48]	; 0x30
 8006d46:	fb01 0003 	mlahi	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006d4a:	2000      	movls	r0, #0
}
 8006d4c:	4770      	bx	lr

08006d4e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006d4e:	b410      	push	{r4}
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006d50:	6804      	ldr	r4, [r0, #0]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006d52:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8006d54:	1d13      	adds	r3, r2, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006d56:	89a0      	ldrh	r0, [r4, #12]
 8006d58:	fbb1 f1f0 	udiv	r1, r1, r0
 8006d5c:	8960      	ldrh	r0, [r4, #10]
 8006d5e:	fbb1 f1f0 	udiv	r1, r1, r0
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006d62:	6850      	ldr	r0, [r2, #4]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006d64:	b148      	cbz	r0, 8006d7a <clmt_clust+0x2c>
		if (cl < ncl) break;	/* In this fragment? */
 8006d66:	4281      	cmp	r1, r0
 8006d68:	d305      	bcc.n	8006d76 <clmt_clust+0x28>
		cl -= ncl; tbl++;		/* Next fragment */
 8006d6a:	1a09      	subs	r1, r1, r0
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006d6c:	f853 0f08 	ldr.w	r0, [r3, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006d70:	2800      	cmp	r0, #0
 8006d72:	d1f8      	bne.n	8006d66 <clmt_clust+0x18>
 8006d74:	e001      	b.n	8006d7a <clmt_clust+0x2c>
	}
	return cl + *tbl;	/* Return the cluster number */
 8006d76:	6858      	ldr	r0, [r3, #4]
 8006d78:	4408      	add	r0, r1
}
 8006d7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d7e:	4770      	bx	lr

08006d80 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006d80:	4602      	mov	r2, r0
	BYTE sum = 0;
	UINT n = 11;
 8006d82:	f100 010b 	add.w	r1, r0, #11
	BYTE sum = 0;
 8006d86:	2000      	movs	r0, #0

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8006d88:	01c3      	lsls	r3, r0, #7
 8006d8a:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
 8006d8e:	f812 0b01 	ldrb.w	r0, [r2], #1
 8006d92:	fa50 f383 	uxtab	r3, r0, r3
 8006d96:	b2d8      	uxtb	r0, r3
	} while (--n);
 8006d98:	428a      	cmp	r2, r1
 8006d9a:	d1f5      	bne.n	8006d88 <sum_sfn+0x8>
	return sum;
}
 8006d9c:	4770      	bx	lr

08006d9e <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006d9e:	6801      	ldr	r1, [r0, #0]
 8006da0:	b309      	cbz	r1, 8006de6 <get_ldnumber+0x48>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006da2:	f891 c000 	ldrb.w	ip, [r1]
 8006da6:	f1bc 0f1f 	cmp.w	ip, #31
 8006daa:	d909      	bls.n	8006dc0 <get_ldnumber+0x22>
 8006dac:	460a      	mov	r2, r1
 8006dae:	4663      	mov	r3, ip
 8006db0:	2b3a      	cmp	r3, #58	; 0x3a
 8006db2:	d00b      	beq.n	8006dcc <get_ldnumber+0x2e>
 8006db4:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8006db8:	2b1f      	cmp	r3, #31
 8006dba:	d8f9      	bhi.n	8006db0 <get_ldnumber+0x12>
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006dbc:	2000      	movs	r0, #0
 8006dbe:	4770      	bx	lr
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006dc0:	f1bc 0f3a 	cmp.w	ip, #58	; 0x3a
 8006dc4:	d001      	beq.n	8006dca <get_ldnumber+0x2c>
		vol = 0;		/* Drive 0 */
 8006dc6:	2000      	movs	r0, #0
 8006dc8:	4770      	bx	lr
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006dca:	460a      	mov	r2, r1
			i = *tp++ - '0';
 8006dcc:	3101      	adds	r1, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006dce:	428a      	cmp	r2, r1
 8006dd0:	d002      	beq.n	8006dd8 <get_ldnumber+0x3a>
	int vol = -1;
 8006dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8006dd6:	4770      	bx	lr
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006dd8:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8006ddc:	d106      	bne.n	8006dec <get_ldnumber+0x4e>
					*path = ++tt;
 8006dde:	3201      	adds	r2, #1
 8006de0:	6002      	str	r2, [r0, #0]
					vol = (int)i;
 8006de2:	2000      	movs	r0, #0
 8006de4:	4770      	bx	lr
	int vol = -1;
 8006de6:	f04f 30ff 	mov.w	r0, #4294967295
 8006dea:	4770      	bx	lr
 8006dec:	f04f 30ff 	mov.w	r0, #4294967295
#endif
	}
	return vol;
}
 8006df0:	4770      	bx	lr

08006df2 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006df2:	b538      	push	{r3, r4, r5, lr}
 8006df4:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006df6:	4604      	mov	r4, r0
 8006df8:	b198      	cbz	r0, 8006e22 <validate+0x30>
 8006dfa:	6803      	ldr	r3, [r0, #0]
 8006dfc:	b19b      	cbz	r3, 8006e26 <validate+0x34>
 8006dfe:	781a      	ldrb	r2, [r3, #0]
 8006e00:	b1a2      	cbz	r2, 8006e2c <validate+0x3a>
 8006e02:	8881      	ldrh	r1, [r0, #4]
 8006e04:	88da      	ldrh	r2, [r3, #6]
 8006e06:	4291      	cmp	r1, r2
 8006e08:	d003      	beq.n	8006e12 <validate+0x20>
	FRESULT res = FR_INVALID_OBJECT;
 8006e0a:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006e0c:	2400      	movs	r4, #0
 8006e0e:	602c      	str	r4, [r5, #0]
	return res;
}
 8006e10:	bd38      	pop	{r3, r4, r5, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006e12:	7858      	ldrb	r0, [r3, #1]
 8006e14:	f7ff fe48 	bl	8006aa8 <disk_status>
 8006e18:	f010 0001 	ands.w	r0, r0, #1
 8006e1c:	d109      	bne.n	8006e32 <validate+0x40>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006e1e:	6824      	ldr	r4, [r4, #0]
 8006e20:	e7f5      	b.n	8006e0e <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 8006e22:	2009      	movs	r0, #9
 8006e24:	e7f3      	b.n	8006e0e <validate+0x1c>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006e26:	461c      	mov	r4, r3
	FRESULT res = FR_INVALID_OBJECT;
 8006e28:	2009      	movs	r0, #9
 8006e2a:	e7f0      	b.n	8006e0e <validate+0x1c>
 8006e2c:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006e2e:	2400      	movs	r4, #0
 8006e30:	e7ed      	b.n	8006e0e <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 8006e32:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006e34:	2400      	movs	r4, #0
 8006e36:	e7ea      	b.n	8006e0e <validate+0x1c>

08006e38 <sync_window>:
{
 8006e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006e3c:	78c5      	ldrb	r5, [r0, #3]
 8006e3e:	b915      	cbnz	r5, 8006e46 <sync_window+0xe>
}
 8006e40:	4628      	mov	r0, r5
 8006e42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e46:	4604      	mov	r4, r0
		wsect = fs->winsect;	/* Current sector number */
 8006e48:	6b46      	ldr	r6, [r0, #52]	; 0x34
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006e4a:	f100 0838 	add.w	r8, r0, #56	; 0x38
 8006e4e:	2301      	movs	r3, #1
 8006e50:	4632      	mov	r2, r6
 8006e52:	4641      	mov	r1, r8
 8006e54:	7840      	ldrb	r0, [r0, #1]
 8006e56:	f7ff fe55 	bl	8006b04 <disk_write>
 8006e5a:	4605      	mov	r5, r0
 8006e5c:	b9b8      	cbnz	r0, 8006e8e <sync_window+0x56>
			fs->wflag = 0;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	70e3      	strb	r3, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006e62:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006e64:	1af3      	subs	r3, r6, r3
 8006e66:	6a22      	ldr	r2, [r4, #32]
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d2e9      	bcs.n	8006e40 <sync_window+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006e6c:	78a7      	ldrb	r7, [r4, #2]
 8006e6e:	2f01      	cmp	r7, #1
 8006e70:	d9e6      	bls.n	8006e40 <sync_window+0x8>
					disk_write(fs->drv, fs->win, wsect, 1);
 8006e72:	f04f 0901 	mov.w	r9, #1
					wsect += fs->fsize;
 8006e76:	6a23      	ldr	r3, [r4, #32]
 8006e78:	441e      	add	r6, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8006e7a:	464b      	mov	r3, r9
 8006e7c:	4632      	mov	r2, r6
 8006e7e:	4641      	mov	r1, r8
 8006e80:	7860      	ldrb	r0, [r4, #1]
 8006e82:	f7ff fe3f 	bl	8006b04 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006e86:	3f01      	subs	r7, #1
 8006e88:	2f01      	cmp	r7, #1
 8006e8a:	d1f4      	bne.n	8006e76 <sync_window+0x3e>
 8006e8c:	e7d8      	b.n	8006e40 <sync_window+0x8>
			res = FR_DISK_ERR;
 8006e8e:	2501      	movs	r5, #1
 8006e90:	e7d6      	b.n	8006e40 <sync_window+0x8>

08006e92 <move_window>:
{
 8006e92:	b538      	push	{r3, r4, r5, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006e94:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006e96:	428b      	cmp	r3, r1
 8006e98:	d101      	bne.n	8006e9e <move_window+0xc>
	FRESULT res = FR_OK;
 8006e9a:	2000      	movs	r0, #0
}
 8006e9c:	bd38      	pop	{r3, r4, r5, pc}
 8006e9e:	4604      	mov	r4, r0
 8006ea0:	460d      	mov	r5, r1
		res = sync_window(fs);		/* Write-back changes */
 8006ea2:	f7ff ffc9 	bl	8006e38 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006ea6:	2800      	cmp	r0, #0
 8006ea8:	d1f8      	bne.n	8006e9c <move_window+0xa>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006eaa:	2301      	movs	r3, #1
 8006eac:	462a      	mov	r2, r5
 8006eae:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8006eb2:	7860      	ldrb	r0, [r4, #1]
 8006eb4:	f7ff fe18 	bl	8006ae8 <disk_read>
				res = FR_DISK_ERR;
 8006eb8:	2800      	cmp	r0, #0
 8006eba:	bf1c      	itt	ne
 8006ebc:	2001      	movne	r0, #1
 8006ebe:	f04f 35ff 	movne.w	r5, #4294967295
			fs->winsect = sector;
 8006ec2:	6365      	str	r5, [r4, #52]	; 0x34
 8006ec4:	e7ea      	b.n	8006e9c <move_window+0xa>
	...

08006ec8 <sync_fs>:
{
 8006ec8:	b538      	push	{r3, r4, r5, lr}
 8006eca:	4604      	mov	r4, r0
	res = sync_window(fs);
 8006ecc:	f7ff ffb4 	bl	8006e38 <sync_window>
	if (res == FR_OK) {
 8006ed0:	b950      	cbnz	r0, 8006ee8 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006ed2:	7823      	ldrb	r3, [r4, #0]
 8006ed4:	2b03      	cmp	r3, #3
 8006ed6:	d008      	beq.n	8006eea <sync_fs+0x22>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006ed8:	2200      	movs	r2, #0
 8006eda:	4611      	mov	r1, r2
 8006edc:	7860      	ldrb	r0, [r4, #1]
 8006ede:	f7ff fe1f 	bl	8006b20 <disk_ioctl>
	res = sync_window(fs);
 8006ee2:	3800      	subs	r0, #0
 8006ee4:	bf18      	it	ne
 8006ee6:	2001      	movne	r0, #1
}
 8006ee8:	bd38      	pop	{r3, r4, r5, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006eea:	7923      	ldrb	r3, [r4, #4]
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d1f3      	bne.n	8006ed8 <sync_fs+0x10>
			mem_set(fs->win, 0, SS(fs));
 8006ef0:	f104 0538 	add.w	r5, r4, #56	; 0x38
 8006ef4:	89a2      	ldrh	r2, [r4, #12]
 8006ef6:	2100      	movs	r1, #0
 8006ef8:	4628      	mov	r0, r5
 8006efa:	f7ff fe3c 	bl	8006b76 <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 8006efe:	2355      	movs	r3, #85	; 0x55
 8006f00:	f884 3236 	strb.w	r3, [r4, #566]	; 0x236
	*ptr++ = (BYTE)val;
 8006f04:	23aa      	movs	r3, #170	; 0xaa
 8006f06:	f884 3237 	strb.w	r3, [r4, #567]	; 0x237
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006f0a:	490f      	ldr	r1, [pc, #60]	; (8006f48 <sync_fs+0x80>)
 8006f0c:	4628      	mov	r0, r5
 8006f0e:	f7ff fe20 	bl	8006b52 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006f12:	490e      	ldr	r1, [pc, #56]	; (8006f4c <sync_fs+0x84>)
 8006f14:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8006f18:	f7ff fe1b 	bl	8006b52 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006f1c:	69a1      	ldr	r1, [r4, #24]
 8006f1e:	f504 7008 	add.w	r0, r4, #544	; 0x220
 8006f22:	f7ff fe16 	bl	8006b52 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006f26:	6961      	ldr	r1, [r4, #20]
 8006f28:	f504 7009 	add.w	r0, r4, #548	; 0x224
 8006f2c:	f7ff fe11 	bl	8006b52 <st_dword>
			fs->winsect = fs->volbase + 1;
 8006f30:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006f32:	3201      	adds	r2, #1
 8006f34:	6362      	str	r2, [r4, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006f36:	2301      	movs	r3, #1
 8006f38:	4629      	mov	r1, r5
 8006f3a:	7860      	ldrb	r0, [r4, #1]
 8006f3c:	f7ff fde2 	bl	8006b04 <disk_write>
			fs->fsi_flag = 0;
 8006f40:	2300      	movs	r3, #0
 8006f42:	7123      	strb	r3, [r4, #4]
 8006f44:	e7c8      	b.n	8006ed8 <sync_fs+0x10>
 8006f46:	bf00      	nop
 8006f48:	41615252 	.word	0x41615252
 8006f4c:	61417272 	.word	0x61417272

08006f50 <put_fat>:
{
 8006f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006f54:	2901      	cmp	r1, #1
 8006f56:	f240 8095 	bls.w	8007084 <put_fat+0x134>
 8006f5a:	4607      	mov	r7, r0
 8006f5c:	460c      	mov	r4, r1
 8006f5e:	4616      	mov	r6, r2
 8006f60:	69c3      	ldr	r3, [r0, #28]
 8006f62:	428b      	cmp	r3, r1
 8006f64:	f240 8090 	bls.w	8007088 <put_fat+0x138>
		switch (fs->fs_type) {
 8006f68:	7803      	ldrb	r3, [r0, #0]
 8006f6a:	2b02      	cmp	r3, #2
 8006f6c:	d04d      	beq.n	800700a <put_fat+0xba>
 8006f6e:	2b03      	cmp	r3, #3
 8006f70:	d066      	beq.n	8007040 <put_fat+0xf0>
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d003      	beq.n	8006f7e <put_fat+0x2e>
 8006f76:	2502      	movs	r5, #2
}
 8006f78:	4628      	mov	r0, r5
 8006f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			bc = (UINT)clst; bc += bc / 2;
 8006f7e:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006f82:	8983      	ldrh	r3, [r0, #12]
 8006f84:	fbb8 f3f3 	udiv	r3, r8, r3
 8006f88:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8006f8a:	4419      	add	r1, r3
 8006f8c:	f7ff ff81 	bl	8006e92 <move_window>
			if (res != FR_OK) break;
 8006f90:	4605      	mov	r5, r0
 8006f92:	2800      	cmp	r0, #0
 8006f94:	d1f0      	bne.n	8006f78 <put_fat+0x28>
			p = fs->win + bc++ % SS(fs);
 8006f96:	f107 0a38 	add.w	sl, r7, #56	; 0x38
 8006f9a:	f108 0901 	add.w	r9, r8, #1
 8006f9e:	89bb      	ldrh	r3, [r7, #12]
 8006fa0:	fbb8 f2f3 	udiv	r2, r8, r3
 8006fa4:	fb03 8812 	mls	r8, r3, r2, r8
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006fa8:	f014 0401 	ands.w	r4, r4, #1
 8006fac:	d023      	beq.n	8006ff6 <put_fat+0xa6>
 8006fae:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8006fb2:	f003 020f 	and.w	r2, r3, #15
 8006fb6:	0133      	lsls	r3, r6, #4
 8006fb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	f80a 3008 	strb.w	r3, [sl, r8]
			fs->wflag = 1;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	70fb      	strb	r3, [r7, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006fc6:	89bb      	ldrh	r3, [r7, #12]
 8006fc8:	fbb9 f3f3 	udiv	r3, r9, r3
 8006fcc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006fce:	4419      	add	r1, r3
 8006fd0:	4638      	mov	r0, r7
 8006fd2:	f7ff ff5e 	bl	8006e92 <move_window>
			if (res != FR_OK) break;
 8006fd6:	4605      	mov	r5, r0
 8006fd8:	2800      	cmp	r0, #0
 8006fda:	d1cd      	bne.n	8006f78 <put_fat+0x28>
			p = fs->win + bc % SS(fs);
 8006fdc:	89bb      	ldrh	r3, [r7, #12]
 8006fde:	fbb9 f2f3 	udiv	r2, r9, r3
 8006fe2:	fb03 9912 	mls	r9, r3, r2, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006fe6:	b144      	cbz	r4, 8006ffa <put_fat+0xaa>
 8006fe8:	f3c6 1207 	ubfx	r2, r6, #4, #8
 8006fec:	f80a 2009 	strb.w	r2, [sl, r9]
			fs->wflag = 1;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	70fb      	strb	r3, [r7, #3]
			break;
 8006ff4:	e7c0      	b.n	8006f78 <put_fat+0x28>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006ff6:	b2f3      	uxtb	r3, r6
 8006ff8:	e7e1      	b.n	8006fbe <put_fat+0x6e>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006ffa:	f81a 3009 	ldrb.w	r3, [sl, r9]
 8006ffe:	f023 030f 	bic.w	r3, r3, #15
 8007002:	f3c6 2203 	ubfx	r2, r6, #8, #4
 8007006:	431a      	orrs	r2, r3
 8007008:	e7f0      	b.n	8006fec <put_fat+0x9c>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800700a:	8983      	ldrh	r3, [r0, #12]
 800700c:	085b      	lsrs	r3, r3, #1
 800700e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007012:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8007014:	4419      	add	r1, r3
 8007016:	f7ff ff3c 	bl	8006e92 <move_window>
			if (res != FR_OK) break;
 800701a:	4605      	mov	r5, r0
 800701c:	2800      	cmp	r0, #0
 800701e:	d1ab      	bne.n	8006f78 <put_fat+0x28>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007020:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007024:	0064      	lsls	r4, r4, #1
 8007026:	89ba      	ldrh	r2, [r7, #12]
 8007028:	fbb4 f1f2 	udiv	r1, r4, r2
 800702c:	fb02 4411 	mls	r4, r2, r1, r4
 8007030:	1919      	adds	r1, r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
 8007032:	551e      	strb	r6, [r3, r4]
 8007034:	f3c6 2207 	ubfx	r2, r6, #8, #8
	*ptr++ = (BYTE)val;
 8007038:	704a      	strb	r2, [r1, #1]
			fs->wflag = 1;
 800703a:	2301      	movs	r3, #1
 800703c:	70fb      	strb	r3, [r7, #3]
			break;
 800703e:	e79b      	b.n	8006f78 <put_fat+0x28>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007040:	8983      	ldrh	r3, [r0, #12]
 8007042:	089b      	lsrs	r3, r3, #2
 8007044:	fbb1 f3f3 	udiv	r3, r1, r3
 8007048:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800704a:	4419      	add	r1, r3
 800704c:	f7ff ff21 	bl	8006e92 <move_window>
			if (res != FR_OK) break;
 8007050:	4605      	mov	r5, r0
 8007052:	2800      	cmp	r0, #0
 8007054:	d190      	bne.n	8006f78 <put_fat+0x28>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007056:	f026 4670 	bic.w	r6, r6, #4026531840	; 0xf0000000
 800705a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800705e:	00a4      	lsls	r4, r4, #2
 8007060:	89ba      	ldrh	r2, [r7, #12]
 8007062:	fbb4 f1f2 	udiv	r1, r4, r2
 8007066:	fb02 4411 	mls	r4, r2, r1, r4
 800706a:	441c      	add	r4, r3
 800706c:	4620      	mov	r0, r4
 800706e:	f7ff fd65 	bl	8006b3c <ld_dword>
 8007072:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007076:	4331      	orrs	r1, r6
 8007078:	4620      	mov	r0, r4
 800707a:	f7ff fd6a 	bl	8006b52 <st_dword>
			fs->wflag = 1;
 800707e:	2301      	movs	r3, #1
 8007080:	70fb      	strb	r3, [r7, #3]
			break;
 8007082:	e779      	b.n	8006f78 <put_fat+0x28>
	FRESULT res = FR_INT_ERR;
 8007084:	2502      	movs	r5, #2
 8007086:	e777      	b.n	8006f78 <put_fat+0x28>
 8007088:	2502      	movs	r5, #2
 800708a:	e775      	b.n	8006f78 <put_fat+0x28>

0800708c <st_clust>:
	*ptr++ = (BYTE)val; val >>= 8;
 800708c:	768a      	strb	r2, [r1, #26]
 800708e:	f3c2 2307 	ubfx	r3, r2, #8, #8
	*ptr++ = (BYTE)val;
 8007092:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 8007094:	7803      	ldrb	r3, [r0, #0]
 8007096:	2b03      	cmp	r3, #3
 8007098:	d000      	beq.n	800709c <st_clust+0x10>
}
 800709a:	4770      	bx	lr
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800709c:	0c12      	lsrs	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800709e:	750a      	strb	r2, [r1, #20]
 80070a0:	0a12      	lsrs	r2, r2, #8
	*ptr++ = (BYTE)val;
 80070a2:	754a      	strb	r2, [r1, #21]
}
 80070a4:	e7f9      	b.n	800709a <st_clust+0xe>

080070a6 <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80070a6:	2901      	cmp	r1, #1
 80070a8:	d96f      	bls.n	800718a <get_fat+0xe4>
{
 80070aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ac:	460c      	mov	r4, r1
	FATFS *fs = obj->fs;
 80070ae:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80070b0:	69eb      	ldr	r3, [r5, #28]
 80070b2:	428b      	cmp	r3, r1
 80070b4:	d96b      	bls.n	800718e <get_fat+0xe8>
		switch (fs->fs_type) {
 80070b6:	782b      	ldrb	r3, [r5, #0]
 80070b8:	2b02      	cmp	r3, #2
 80070ba:	d036      	beq.n	800712a <get_fat+0x84>
 80070bc:	2b03      	cmp	r3, #3
 80070be:	d04c      	beq.n	800715a <get_fat+0xb4>
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d001      	beq.n	80070c8 <get_fat+0x22>
 80070c4:	2001      	movs	r0, #1
 80070c6:	e063      	b.n	8007190 <get_fat+0xea>
			bc = (UINT)clst; bc += bc / 2;
 80070c8:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80070cc:	89ab      	ldrh	r3, [r5, #12]
 80070ce:	fbb6 f3f3 	udiv	r3, r6, r3
 80070d2:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80070d4:	4419      	add	r1, r3
 80070d6:	4628      	mov	r0, r5
 80070d8:	f7ff fedb 	bl	8006e92 <move_window>
 80070dc:	b110      	cbz	r0, 80070e4 <get_fat+0x3e>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80070de:	f04f 30ff 	mov.w	r0, #4294967295
 80070e2:	e055      	b.n	8007190 <get_fat+0xea>
			wc = fs->win[bc++ % SS(fs)];
 80070e4:	1c77      	adds	r7, r6, #1
 80070e6:	89a9      	ldrh	r1, [r5, #12]
 80070e8:	fbb6 f3f1 	udiv	r3, r6, r1
 80070ec:	fb01 6613 	mls	r6, r1, r3, r6
 80070f0:	442e      	add	r6, r5
 80070f2:	f896 6038 	ldrb.w	r6, [r6, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80070f6:	fbb7 f1f1 	udiv	r1, r7, r1
 80070fa:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80070fc:	4419      	add	r1, r3
 80070fe:	4628      	mov	r0, r5
 8007100:	f7ff fec7 	bl	8006e92 <move_window>
 8007104:	2800      	cmp	r0, #0
 8007106:	d144      	bne.n	8007192 <get_fat+0xec>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007108:	89ab      	ldrh	r3, [r5, #12]
 800710a:	fbb7 f2f3 	udiv	r2, r7, r3
 800710e:	fb03 7712 	mls	r7, r3, r2, r7
 8007112:	443d      	add	r5, r7
 8007114:	f895 0038 	ldrb.w	r0, [r5, #56]	; 0x38
 8007118:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800711c:	f014 0f01 	tst.w	r4, #1
 8007120:	bf14      	ite	ne
 8007122:	0900      	lsrne	r0, r0, #4
 8007124:	f3c0 000b 	ubfxeq	r0, r0, #0, #12
 8007128:	e032      	b.n	8007190 <get_fat+0xea>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800712a:	89ab      	ldrh	r3, [r5, #12]
 800712c:	085b      	lsrs	r3, r3, #1
 800712e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007132:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8007134:	4419      	add	r1, r3
 8007136:	4628      	mov	r0, r5
 8007138:	f7ff feab 	bl	8006e92 <move_window>
 800713c:	bb60      	cbnz	r0, 8007198 <get_fat+0xf2>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800713e:	f105 0338 	add.w	r3, r5, #56	; 0x38
 8007142:	0064      	lsls	r4, r4, #1
 8007144:	89aa      	ldrh	r2, [r5, #12]
 8007146:	fbb4 f1f2 	udiv	r1, r4, r2
 800714a:	fb02 4411 	mls	r4, r2, r1, r4
 800714e:	191a      	adds	r2, r3, r4
	rv = rv << 8 | ptr[0];
 8007150:	7852      	ldrb	r2, [r2, #1]
 8007152:	5d18      	ldrb	r0, [r3, r4]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007154:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
			break;
 8007158:	e01a      	b.n	8007190 <get_fat+0xea>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800715a:	89ab      	ldrh	r3, [r5, #12]
 800715c:	089b      	lsrs	r3, r3, #2
 800715e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007162:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8007164:	4419      	add	r1, r3
 8007166:	4628      	mov	r0, r5
 8007168:	f7ff fe93 	bl	8006e92 <move_window>
 800716c:	b9b8      	cbnz	r0, 800719e <get_fat+0xf8>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800716e:	f105 0038 	add.w	r0, r5, #56	; 0x38
 8007172:	00a4      	lsls	r4, r4, #2
 8007174:	89ab      	ldrh	r3, [r5, #12]
 8007176:	fbb4 f2f3 	udiv	r2, r4, r3
 800717a:	fb03 4412 	mls	r4, r3, r2, r4
 800717e:	4420      	add	r0, r4
 8007180:	f7ff fcdc 	bl	8006b3c <ld_dword>
 8007184:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 8007188:	e002      	b.n	8007190 <get_fat+0xea>
		val = 1;	/* Internal error */
 800718a:	2001      	movs	r0, #1
}
 800718c:	4770      	bx	lr
		val = 1;	/* Internal error */
 800718e:	2001      	movs	r0, #1
}
 8007190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007192:	f04f 30ff 	mov.w	r0, #4294967295
 8007196:	e7fb      	b.n	8007190 <get_fat+0xea>
 8007198:	f04f 30ff 	mov.w	r0, #4294967295
 800719c:	e7f8      	b.n	8007190 <get_fat+0xea>
 800719e:	f04f 30ff 	mov.w	r0, #4294967295
	return val;
 80071a2:	e7f5      	b.n	8007190 <get_fat+0xea>

080071a4 <dir_sdi>:
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80071a4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80071a8:	d251      	bcs.n	800724e <dir_sdi+0xaa>
{
 80071aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071ae:	4607      	mov	r7, r0
 80071b0:	460e      	mov	r6, r1
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80071b2:	f011 0f1f 	tst.w	r1, #31
 80071b6:	d14c      	bne.n	8007252 <dir_sdi+0xae>
	FATFS *fs = dp->obj.fs;
 80071b8:	f8d0 8000 	ldr.w	r8, [r0]
	dp->dptr = ofs;				/* Set current offset */
 80071bc:	6141      	str	r1, [r0, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80071be:	6884      	ldr	r4, [r0, #8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80071c0:	bb34      	cbnz	r4, 8007210 <dir_sdi+0x6c>
 80071c2:	f898 3000 	ldrb.w	r3, [r8]
 80071c6:	2b02      	cmp	r3, #2
 80071c8:	d902      	bls.n	80071d0 <dir_sdi+0x2c>
		clst = fs->dirbase;
 80071ca:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80071ce:	b9f3      	cbnz	r3, 800720e <dir_sdi+0x6a>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80071d0:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 80071d4:	ebb3 1f56 	cmp.w	r3, r6, lsr #5
 80071d8:	d93d      	bls.n	8007256 <dir_sdi+0xb2>
		dp->sect = fs->dirbase;
 80071da:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 80071de:	61fb      	str	r3, [r7, #28]
	dp->clust = clst;					/* Current cluster# */
 80071e0:	61bc      	str	r4, [r7, #24]
	if (!dp->sect) return FR_INT_ERR;
 80071e2:	69fa      	ldr	r2, [r7, #28]
 80071e4:	2a00      	cmp	r2, #0
 80071e6:	d03e      	beq.n	8007266 <dir_sdi+0xc2>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80071e8:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80071ec:	fbb6 f3f3 	udiv	r3, r6, r3
 80071f0:	4413      	add	r3, r2
 80071f2:	61fb      	str	r3, [r7, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80071f4:	f108 0338 	add.w	r3, r8, #56	; 0x38
 80071f8:	f8b8 100c 	ldrh.w	r1, [r8, #12]
 80071fc:	fbb6 f2f1 	udiv	r2, r6, r1
 8007200:	fb01 6112 	mls	r1, r1, r2, r6
 8007204:	4419      	add	r1, r3
 8007206:	6239      	str	r1, [r7, #32]
	return FR_OK;
 8007208:	2000      	movs	r0, #0
}
 800720a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		clst = fs->dirbase;
 800720e:	461c      	mov	r4, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007210:	f8b8 500a 	ldrh.w	r5, [r8, #10]
 8007214:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8007218:	fb03 f505 	mul.w	r5, r3, r5
		while (ofs >= csz) {				/* Follow cluster chain */
 800721c:	42ae      	cmp	r6, r5
 800721e:	d310      	bcc.n	8007242 <dir_sdi+0x9e>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007220:	4621      	mov	r1, r4
 8007222:	4638      	mov	r0, r7
 8007224:	f7ff ff3f 	bl	80070a6 <get_fat>
 8007228:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800722a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800722e:	d014      	beq.n	800725a <dir_sdi+0xb6>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007230:	2801      	cmp	r0, #1
 8007232:	d914      	bls.n	800725e <dir_sdi+0xba>
 8007234:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8007238:	4283      	cmp	r3, r0
 800723a:	d912      	bls.n	8007262 <dir_sdi+0xbe>
			ofs -= csz;
 800723c:	1b76      	subs	r6, r6, r5
		while (ofs >= csz) {				/* Follow cluster chain */
 800723e:	42b5      	cmp	r5, r6
 8007240:	d9ee      	bls.n	8007220 <dir_sdi+0x7c>
		dp->sect = clust2sect(fs, clst);
 8007242:	4621      	mov	r1, r4
 8007244:	4640      	mov	r0, r8
 8007246:	f7ff fd77 	bl	8006d38 <clust2sect>
 800724a:	61f8      	str	r0, [r7, #28]
 800724c:	e7c8      	b.n	80071e0 <dir_sdi+0x3c>
		return FR_INT_ERR;
 800724e:	2002      	movs	r0, #2
}
 8007250:	4770      	bx	lr
		return FR_INT_ERR;
 8007252:	2002      	movs	r0, #2
 8007254:	e7d9      	b.n	800720a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007256:	2002      	movs	r0, #2
 8007258:	e7d7      	b.n	800720a <dir_sdi+0x66>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800725a:	2001      	movs	r0, #1
 800725c:	e7d5      	b.n	800720a <dir_sdi+0x66>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800725e:	2002      	movs	r0, #2
 8007260:	e7d3      	b.n	800720a <dir_sdi+0x66>
 8007262:	2002      	movs	r0, #2
 8007264:	e7d1      	b.n	800720a <dir_sdi+0x66>
	if (!dp->sect) return FR_INT_ERR;
 8007266:	2002      	movs	r0, #2
 8007268:	e7cf      	b.n	800720a <dir_sdi+0x66>

0800726a <create_chain>:
{
 800726a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800726e:	4606      	mov	r6, r0
	FATFS *fs = obj->fs;
 8007270:	6807      	ldr	r7, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 8007272:	4688      	mov	r8, r1
 8007274:	b939      	cbnz	r1, 8007286 <create_chain+0x1c>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007276:	697d      	ldr	r5, [r7, #20]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007278:	b195      	cbz	r5, 80072a0 <create_chain+0x36>
 800727a:	69fb      	ldr	r3, [r7, #28]
 800727c:	42ab      	cmp	r3, r5
 800727e:	bf98      	it	ls
 8007280:	2501      	movls	r5, #1
		ncl = scl;	/* Start cluster */
 8007282:	462c      	mov	r4, r5
 8007284:	e01b      	b.n	80072be <create_chain+0x54>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007286:	f7ff ff0e 	bl	80070a6 <get_fat>
 800728a:	4603      	mov	r3, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 800728c:	2801      	cmp	r0, #1
 800728e:	d946      	bls.n	800731e <create_chain+0xb4>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007290:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007294:	d048      	beq.n	8007328 <create_chain+0xbe>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007296:	69fa      	ldr	r2, [r7, #28]
 8007298:	4282      	cmp	r2, r0
 800729a:	d845      	bhi.n	8007328 <create_chain+0xbe>
		scl = clst;
 800729c:	4645      	mov	r5, r8
 800729e:	e7f0      	b.n	8007282 <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80072a0:	2501      	movs	r5, #1
 80072a2:	e7ee      	b.n	8007282 <create_chain+0x18>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80072a4:	4621      	mov	r1, r4
 80072a6:	4630      	mov	r0, r6
 80072a8:	f7ff fefd 	bl	80070a6 <get_fat>
			if (cs == 0) break;				/* Found a free cluster */
 80072ac:	4603      	mov	r3, r0
 80072ae:	b170      	cbz	r0, 80072ce <create_chain+0x64>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80072b0:	2801      	cmp	r0, #1
 80072b2:	d039      	beq.n	8007328 <create_chain+0xbe>
 80072b4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80072b8:	d036      	beq.n	8007328 <create_chain+0xbe>
			if (ncl == scl) return 0;		/* No free cluster */
 80072ba:	42ac      	cmp	r4, r5
 80072bc:	d033      	beq.n	8007326 <create_chain+0xbc>
			ncl++;							/* Next cluster */
 80072be:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80072c0:	69fb      	ldr	r3, [r7, #28]
 80072c2:	42a3      	cmp	r3, r4
 80072c4:	d8ee      	bhi.n	80072a4 <create_chain+0x3a>
				if (ncl > scl) return 0;	/* No free cluster */
 80072c6:	2d01      	cmp	r5, #1
 80072c8:	d92b      	bls.n	8007322 <create_chain+0xb8>
				ncl = 2;
 80072ca:	2402      	movs	r4, #2
 80072cc:	e7ea      	b.n	80072a4 <create_chain+0x3a>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80072ce:	f04f 32ff 	mov.w	r2, #4294967295
 80072d2:	4621      	mov	r1, r4
 80072d4:	4638      	mov	r0, r7
 80072d6:	f7ff fe3b 	bl	8006f50 <put_fat>
		if (res == FR_OK && clst != 0) {
 80072da:	4603      	mov	r3, r0
 80072dc:	b9c8      	cbnz	r0, 8007312 <create_chain+0xa8>
 80072de:	f1b8 0f00 	cmp.w	r8, #0
 80072e2:	d10e      	bne.n	8007302 <create_chain+0x98>
		fs->last_clst = ncl;
 80072e4:	617c      	str	r4, [r7, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80072e6:	69ba      	ldr	r2, [r7, #24]
 80072e8:	69fb      	ldr	r3, [r7, #28]
 80072ea:	3b02      	subs	r3, #2
 80072ec:	429a      	cmp	r2, r3
 80072ee:	bf9c      	itt	ls
 80072f0:	f102 32ff 	addls.w	r2, r2, #4294967295
 80072f4:	61ba      	strls	r2, [r7, #24]
		fs->fsi_flag |= 1;
 80072f6:	793b      	ldrb	r3, [r7, #4]
 80072f8:	f043 0301 	orr.w	r3, r3, #1
 80072fc:	713b      	strb	r3, [r7, #4]
 80072fe:	4623      	mov	r3, r4
 8007300:	e012      	b.n	8007328 <create_chain+0xbe>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007302:	4622      	mov	r2, r4
 8007304:	4641      	mov	r1, r8
 8007306:	4638      	mov	r0, r7
 8007308:	f7ff fe22 	bl	8006f50 <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800730c:	4603      	mov	r3, r0
 800730e:	2800      	cmp	r0, #0
 8007310:	d0e8      	beq.n	80072e4 <create_chain+0x7a>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007312:	2b01      	cmp	r3, #1
 8007314:	bf0c      	ite	eq
 8007316:	f04f 33ff 	moveq.w	r3, #4294967295
 800731a:	2301      	movne	r3, #1
 800731c:	e004      	b.n	8007328 <create_chain+0xbe>
		if (cs < 2) return 1;				/* Invalid FAT value */
 800731e:	2301      	movs	r3, #1
 8007320:	e002      	b.n	8007328 <create_chain+0xbe>
				if (ncl > scl) return 0;	/* No free cluster */
 8007322:	2300      	movs	r3, #0
 8007324:	e000      	b.n	8007328 <create_chain+0xbe>
			if (ncl == scl) return 0;		/* No free cluster */
 8007326:	2300      	movs	r3, #0
}
 8007328:	4618      	mov	r0, r3
 800732a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800732e <remove_chain>:
{
 800732e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007332:	460c      	mov	r4, r1
	FATFS *fs = obj->fs;
 8007334:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007336:	2901      	cmp	r1, #1
 8007338:	d931      	bls.n	800739e <remove_chain+0x70>
 800733a:	4606      	mov	r6, r0
 800733c:	4611      	mov	r1, r2
 800733e:	69eb      	ldr	r3, [r5, #28]
 8007340:	42a3      	cmp	r3, r4
 8007342:	d92f      	bls.n	80073a4 <remove_chain+0x76>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007344:	b90a      	cbnz	r2, 800734a <remove_chain+0x1c>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007346:	2700      	movs	r7, #0
 8007348:	e00a      	b.n	8007360 <remove_chain+0x32>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800734a:	f04f 32ff 	mov.w	r2, #4294967295
 800734e:	4628      	mov	r0, r5
 8007350:	f7ff fdfe 	bl	8006f50 <put_fat>
		if (res != FR_OK) return res;
 8007354:	4684      	mov	ip, r0
 8007356:	2800      	cmp	r0, #0
 8007358:	d0f5      	beq.n	8007346 <remove_chain+0x18>
 800735a:	e025      	b.n	80073a8 <remove_chain+0x7a>
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800735c:	42a2      	cmp	r2, r4
 800735e:	d923      	bls.n	80073a8 <remove_chain+0x7a>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007360:	46a0      	mov	r8, r4
 8007362:	4621      	mov	r1, r4
 8007364:	4630      	mov	r0, r6
 8007366:	f7ff fe9e 	bl	80070a6 <get_fat>
		if (nxt == 0) break;				/* Empty cluster? */
 800736a:	4604      	mov	r4, r0
 800736c:	b1f8      	cbz	r0, 80073ae <remove_chain+0x80>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800736e:	2801      	cmp	r0, #1
 8007370:	d020      	beq.n	80073b4 <remove_chain+0x86>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007372:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007376:	d020      	beq.n	80073ba <remove_chain+0x8c>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007378:	463a      	mov	r2, r7
 800737a:	4641      	mov	r1, r8
 800737c:	4628      	mov	r0, r5
 800737e:	f7ff fde7 	bl	8006f50 <put_fat>
			if (res != FR_OK) return res;
 8007382:	4684      	mov	ip, r0
 8007384:	b980      	cbnz	r0, 80073a8 <remove_chain+0x7a>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007386:	69ab      	ldr	r3, [r5, #24]
 8007388:	69ea      	ldr	r2, [r5, #28]
 800738a:	1e91      	subs	r1, r2, #2
 800738c:	428b      	cmp	r3, r1
 800738e:	d2e5      	bcs.n	800735c <remove_chain+0x2e>
			fs->free_clst++;
 8007390:	3301      	adds	r3, #1
 8007392:	61ab      	str	r3, [r5, #24]
			fs->fsi_flag |= 1;
 8007394:	792b      	ldrb	r3, [r5, #4]
 8007396:	f043 0301 	orr.w	r3, r3, #1
 800739a:	712b      	strb	r3, [r5, #4]
 800739c:	e7de      	b.n	800735c <remove_chain+0x2e>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800739e:	f04f 0c02 	mov.w	ip, #2
 80073a2:	e001      	b.n	80073a8 <remove_chain+0x7a>
 80073a4:	f04f 0c02 	mov.w	ip, #2
}
 80073a8:	4660      	mov	r0, ip
 80073aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return FR_OK;
 80073ae:	f04f 0c00 	mov.w	ip, #0
 80073b2:	e7f9      	b.n	80073a8 <remove_chain+0x7a>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80073b4:	f04f 0c02 	mov.w	ip, #2
 80073b8:	e7f6      	b.n	80073a8 <remove_chain+0x7a>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80073ba:	f04f 0c01 	mov.w	ip, #1
 80073be:	e7f3      	b.n	80073a8 <remove_chain+0x7a>

080073c0 <dir_next>:
{
 80073c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80073c4:	6944      	ldr	r4, [r0, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80073c6:	69c3      	ldr	r3, [r0, #28]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d076      	beq.n	80074ba <dir_next+0xfa>
 80073cc:	4605      	mov	r5, r0
 80073ce:	460e      	mov	r6, r1
 80073d0:	3420      	adds	r4, #32
 80073d2:	f5b4 1f00 	cmp.w	r4, #2097152	; 0x200000
 80073d6:	d272      	bcs.n	80074be <dir_next+0xfe>
	FATFS *fs = dp->obj.fs;
 80073d8:	6807      	ldr	r7, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80073da:	89b9      	ldrh	r1, [r7, #12]
 80073dc:	fbb4 f2f1 	udiv	r2, r4, r1
 80073e0:	fb01 4212 	mls	r2, r1, r2, r4
 80073e4:	b93a      	cbnz	r2, 80073f6 <dir_next+0x36>
		dp->sect++;				/* Next sector */
 80073e6:	3301      	adds	r3, #1
 80073e8:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 80073ea:	6981      	ldr	r1, [r0, #24]
 80073ec:	b9a1      	cbnz	r1, 8007418 <dir_next+0x58>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80073ee:	893b      	ldrh	r3, [r7, #8]
 80073f0:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
 80073f4:	d90c      	bls.n	8007410 <dir_next+0x50>
	dp->dptr = ofs;						/* Current entry */
 80073f6:	616c      	str	r4, [r5, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80073f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80073fc:	89ba      	ldrh	r2, [r7, #12]
 80073fe:	fbb4 f1f2 	udiv	r1, r4, r2
 8007402:	fb02 4411 	mls	r4, r2, r1, r4
 8007406:	441c      	add	r4, r3
 8007408:	622c      	str	r4, [r5, #32]
	return FR_OK;
 800740a:	2000      	movs	r0, #0
}
 800740c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				dp->sect = 0; return FR_NO_FILE;
 8007410:	2300      	movs	r3, #0
 8007412:	61c3      	str	r3, [r0, #28]
 8007414:	2004      	movs	r0, #4
 8007416:	e7f9      	b.n	800740c <dir_next+0x4c>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007418:	89ba      	ldrh	r2, [r7, #12]
 800741a:	fbb4 f2f2 	udiv	r2, r4, r2
 800741e:	897b      	ldrh	r3, [r7, #10]
 8007420:	3b01      	subs	r3, #1
 8007422:	ea12 0803 	ands.w	r8, r2, r3
 8007426:	d1e6      	bne.n	80073f6 <dir_next+0x36>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007428:	f7ff fe3d 	bl	80070a6 <get_fat>
 800742c:	4681      	mov	r9, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800742e:	2801      	cmp	r0, #1
 8007430:	d947      	bls.n	80074c2 <dir_next+0x102>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007432:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007436:	d046      	beq.n	80074c6 <dir_next+0x106>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007438:	69fb      	ldr	r3, [r7, #28]
 800743a:	4283      	cmp	r3, r0
 800743c:	d835      	bhi.n	80074aa <dir_next+0xea>
					if (!stretch) {								/* If no stretch, report EOT */
 800743e:	b18e      	cbz	r6, 8007464 <dir_next+0xa4>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007440:	69a9      	ldr	r1, [r5, #24]
 8007442:	4628      	mov	r0, r5
 8007444:	f7ff ff11 	bl	800726a <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007448:	4681      	mov	r9, r0
 800744a:	2800      	cmp	r0, #0
 800744c:	d03d      	beq.n	80074ca <dir_next+0x10a>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800744e:	2801      	cmp	r0, #1
 8007450:	d03d      	beq.n	80074ce <dir_next+0x10e>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007452:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007456:	d03c      	beq.n	80074d2 <dir_next+0x112>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007458:	4638      	mov	r0, r7
 800745a:	f7ff fced 	bl	8006e38 <sync_window>
 800745e:	b128      	cbz	r0, 800746c <dir_next+0xac>
 8007460:	2001      	movs	r0, #1
 8007462:	e7d3      	b.n	800740c <dir_next+0x4c>
						dp->sect = 0; return FR_NO_FILE;
 8007464:	2300      	movs	r3, #0
 8007466:	61eb      	str	r3, [r5, #28]
 8007468:	2004      	movs	r0, #4
 800746a:	e7cf      	b.n	800740c <dir_next+0x4c>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800746c:	89ba      	ldrh	r2, [r7, #12]
 800746e:	2100      	movs	r1, #0
 8007470:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8007474:	f7ff fb7f 	bl	8006b76 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007478:	4649      	mov	r1, r9
 800747a:	4638      	mov	r0, r7
 800747c:	f7ff fc5c 	bl	8006d38 <clust2sect>
 8007480:	6378      	str	r0, [r7, #52]	; 0x34
 8007482:	897b      	ldrh	r3, [r7, #10]
 8007484:	b16b      	cbz	r3, 80074a2 <dir_next+0xe2>
						fs->wflag = 1;
 8007486:	2601      	movs	r6, #1
 8007488:	70fe      	strb	r6, [r7, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800748a:	4638      	mov	r0, r7
 800748c:	f7ff fcd4 	bl	8006e38 <sync_window>
 8007490:	bb08      	cbnz	r0, 80074d6 <dir_next+0x116>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007492:	f108 0801 	add.w	r8, r8, #1
 8007496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007498:	3301      	adds	r3, #1
 800749a:	637b      	str	r3, [r7, #52]	; 0x34
 800749c:	897b      	ldrh	r3, [r7, #10]
 800749e:	4543      	cmp	r3, r8
 80074a0:	d8f2      	bhi.n	8007488 <dir_next+0xc8>
					fs->winsect -= n;							/* Restore window offset */
 80074a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074a4:	eba3 0308 	sub.w	r3, r3, r8
 80074a8:	637b      	str	r3, [r7, #52]	; 0x34
				dp->clust = clst;		/* Initialize data for new cluster */
 80074aa:	f8c5 9018 	str.w	r9, [r5, #24]
				dp->sect = clust2sect(fs, clst);
 80074ae:	4649      	mov	r1, r9
 80074b0:	4638      	mov	r0, r7
 80074b2:	f7ff fc41 	bl	8006d38 <clust2sect>
 80074b6:	61e8      	str	r0, [r5, #28]
 80074b8:	e79d      	b.n	80073f6 <dir_next+0x36>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80074ba:	2004      	movs	r0, #4
 80074bc:	e7a6      	b.n	800740c <dir_next+0x4c>
 80074be:	2004      	movs	r0, #4
 80074c0:	e7a4      	b.n	800740c <dir_next+0x4c>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80074c2:	2002      	movs	r0, #2
 80074c4:	e7a2      	b.n	800740c <dir_next+0x4c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80074c6:	2001      	movs	r0, #1
 80074c8:	e7a0      	b.n	800740c <dir_next+0x4c>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80074ca:	2007      	movs	r0, #7
 80074cc:	e79e      	b.n	800740c <dir_next+0x4c>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80074ce:	2002      	movs	r0, #2
 80074d0:	e79c      	b.n	800740c <dir_next+0x4c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80074d2:	2001      	movs	r0, #1
 80074d4:	e79a      	b.n	800740c <dir_next+0x4c>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80074d6:	2001      	movs	r0, #1
 80074d8:	e798      	b.n	800740c <dir_next+0x4c>
	...

080074dc <dir_find>:
{
 80074dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074e0:	b087      	sub	sp, #28
 80074e2:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 80074e4:	6807      	ldr	r7, [r0, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80074e6:	2100      	movs	r1, #0
 80074e8:	f7ff fe5c 	bl	80071a4 <dir_sdi>
	if (res != FR_OK) return res;
 80074ec:	4601      	mov	r1, r0
 80074ee:	2800      	cmp	r0, #0
 80074f0:	f040 80be 	bne.w	8007670 <dir_find+0x194>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80074f4:	f04f 33ff 	mov.w	r3, #4294967295
 80074f8:	6323      	str	r3, [r4, #48]	; 0x30
 80074fa:	f04f 09ff 	mov.w	r9, #255	; 0xff
 80074fe:	46ca      	mov	sl, r9
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007500:	4698      	mov	r8, r3
 8007502:	e00b      	b.n	800751c <dir_find+0x40>
 8007504:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
 8007508:	f04f 0aff 	mov.w	sl, #255	; 0xff
		res = dir_next(dp, 0);	/* Next entry */
 800750c:	2100      	movs	r1, #0
 800750e:	4620      	mov	r0, r4
 8007510:	f7ff ff56 	bl	80073c0 <dir_next>
	} while (res == FR_OK);
 8007514:	4601      	mov	r1, r0
 8007516:	2800      	cmp	r0, #0
 8007518:	f040 80aa 	bne.w	8007670 <dir_find+0x194>
		res = move_window(fs, dp->sect);
 800751c:	69e1      	ldr	r1, [r4, #28]
 800751e:	4638      	mov	r0, r7
 8007520:	f7ff fcb7 	bl	8006e92 <move_window>
		if (res != FR_OK) break;
 8007524:	4601      	mov	r1, r0
 8007526:	2800      	cmp	r0, #0
 8007528:	f040 80a2 	bne.w	8007670 <dir_find+0x194>
		c = dp->dir[DIR_Name];
 800752c:	6a25      	ldr	r5, [r4, #32]
 800752e:	782e      	ldrb	r6, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007530:	2e00      	cmp	r6, #0
 8007532:	f000 809c 	beq.w	800766e <dir_find+0x192>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8007536:	7aeb      	ldrb	r3, [r5, #11]
 8007538:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800753c:	71a2      	strb	r2, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800753e:	2ee5      	cmp	r6, #229	; 0xe5
 8007540:	d0e0      	beq.n	8007504 <dir_find+0x28>
 8007542:	f013 0f08 	tst.w	r3, #8
 8007546:	d015      	beq.n	8007574 <dir_find+0x98>
 8007548:	2a0f      	cmp	r2, #15
 800754a:	d1db      	bne.n	8007504 <dir_find+0x28>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800754c:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8007550:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007554:	d1da      	bne.n	800750c <dir_find+0x30>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8007556:	f016 0f40 	tst.w	r6, #64	; 0x40
 800755a:	d031      	beq.n	80075c0 <dir_find+0xe4>
						sum = dp->dir[LDIR_Chksum];
 800755c:	f895 900d 	ldrb.w	r9, [r5, #13]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8007560:	f006 06bf 	and.w	r6, r6, #191	; 0xbf
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8007564:	6963      	ldr	r3, [r4, #20]
 8007566:	6323      	str	r3, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8007568:	7b6b      	ldrb	r3, [r5, #13]
 800756a:	454b      	cmp	r3, r9
 800756c:	d02e      	beq.n	80075cc <dir_find+0xf0>
 800756e:	f04f 0aff 	mov.w	sl, #255	; 0xff
 8007572:	e7cb      	b.n	800750c <dir_find+0x30>
			if (a == AM_LFN) {			/* An LFN entry is found */
 8007574:	2a0f      	cmp	r2, #15
 8007576:	d0e9      	beq.n	800754c <dir_find+0x70>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007578:	f1ba 0f00 	cmp.w	sl, #0
 800757c:	d104      	bne.n	8007588 <dir_find+0xac>
 800757e:	4628      	mov	r0, r5
 8007580:	f7ff fbfe 	bl	8006d80 <sum_sfn>
 8007584:	4548      	cmp	r0, r9
 8007586:	d077      	beq.n	8007678 <dir_find+0x19c>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007588:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 800758c:	f011 0101 	ands.w	r1, r1, #1
 8007590:	d111      	bne.n	80075b6 <dir_find+0xda>
		r = *d++ - *s++;
 8007592:	1c6a      	adds	r2, r5, #1
 8007594:	f104 0025 	add.w	r0, r4, #37	; 0x25
 8007598:	f815 3b0b 	ldrb.w	r3, [r5], #11
 800759c:	f894 6024 	ldrb.w	r6, [r4, #36]	; 0x24
 80075a0:	1b9b      	subs	r3, r3, r6
	} while (--cnt && r == 0);
 80075a2:	b943      	cbnz	r3, 80075b6 <dir_find+0xda>
		r = *d++ - *s++;
 80075a4:	f812 3b01 	ldrb.w	r3, [r2], #1
 80075a8:	f810 6b01 	ldrb.w	r6, [r0], #1
 80075ac:	1b9b      	subs	r3, r3, r6
	} while (--cnt && r == 0);
 80075ae:	4295      	cmp	r5, r2
 80075b0:	d1f7      	bne.n	80075a2 <dir_find+0xc6>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d05c      	beq.n	8007670 <dir_find+0x194>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80075b6:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
 80075ba:	f04f 0aff 	mov.w	sl, #255	; 0xff
 80075be:	e7a5      	b.n	800750c <dir_find+0x30>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80075c0:	45b2      	cmp	sl, r6
 80075c2:	bf18      	it	ne
 80075c4:	f04f 0aff 	movne.w	sl, #255	; 0xff
 80075c8:	d1a0      	bne.n	800750c <dir_find+0x30>
 80075ca:	e7cd      	b.n	8007568 <dir_find+0x8c>
	rv = rv << 8 | ptr[0];
 80075cc:	7eea      	ldrb	r2, [r5, #27]
 80075ce:	7eab      	ldrb	r3, [r5, #26]
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80075d0:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 80075d4:	d156      	bne.n	8007684 <dir_find+0x1a8>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80075d6:	6938      	ldr	r0, [r7, #16]
 80075d8:	9004      	str	r0, [sp, #16]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80075da:	782b      	ldrb	r3, [r5, #0]
 80075dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075e0:	3b01      	subs	r3, #1
 80075e2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80075e6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80075ea:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 80076a4 <dir_find+0x1c8>
 80075ee:	2101      	movs	r1, #1
 80075f0:	f8cd 9004 	str.w	r9, [sp, #4]
 80075f4:	9702      	str	r7, [sp, #8]
 80075f6:	9605      	str	r6, [sp, #20]
 80075f8:	461f      	mov	r7, r3
 80075fa:	9403      	str	r4, [sp, #12]
 80075fc:	4604      	mov	r4, r0
 80075fe:	e006      	b.n	800760e <dir_find+0x132>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8007600:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007604:	429e      	cmp	r6, r3
 8007606:	d145      	bne.n	8007694 <dir_find+0x1b8>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007608:	4b25      	ldr	r3, [pc, #148]	; (80076a0 <dir_find+0x1c4>)
 800760a:	455b      	cmp	r3, fp
 800760c:	d019      	beq.n	8007642 <dir_find+0x166>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800760e:	f81b 3b01 	ldrb.w	r3, [fp], #1
 8007612:	18ea      	adds	r2, r5, r3
	rv = rv << 8 | ptr[0];
 8007614:	7852      	ldrb	r2, [r2, #1]
 8007616:	5cee      	ldrb	r6, [r5, r3]
 8007618:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
		if (wc) {
 800761c:	2900      	cmp	r1, #0
 800761e:	d0ef      	beq.n	8007600 <dir_find+0x124>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8007620:	2ffe      	cmp	r7, #254	; 0xfe
 8007622:	d82b      	bhi.n	800767c <dir_find+0x1a0>
 8007624:	4630      	mov	r0, r6
 8007626:	f001 f94b 	bl	80088c0 <ff_wtoupper>
 800762a:	4681      	mov	r9, r0
 800762c:	f107 0a01 	add.w	sl, r7, #1
 8007630:	f834 0017 	ldrh.w	r0, [r4, r7, lsl #1]
 8007634:	f001 f944 	bl	80088c0 <ff_wtoupper>
 8007638:	4581      	cmp	r9, r0
 800763a:	d126      	bne.n	800768a <dir_find+0x1ae>
			wc = uc;
 800763c:	4631      	mov	r1, r6
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800763e:	4657      	mov	r7, sl
 8007640:	e7e2      	b.n	8007608 <dir_find+0x12c>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8007642:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007646:	9e05      	ldr	r6, [sp, #20]
 8007648:	463a      	mov	r2, r7
 800764a:	9f02      	ldr	r7, [sp, #8]
 800764c:	9c03      	ldr	r4, [sp, #12]
 800764e:	782b      	ldrb	r3, [r5, #0]
 8007650:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007654:	d004      	beq.n	8007660 <dir_find+0x184>
 8007656:	b119      	cbz	r1, 8007660 <dir_find+0x184>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8007658:	9b04      	ldr	r3, [sp, #16]
 800765a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800765e:	b91b      	cbnz	r3, 8007668 <dir_find+0x18c>
 8007660:	3e01      	subs	r6, #1
 8007662:	fa5f fa86 	uxtb.w	sl, r6
 8007666:	e751      	b.n	800750c <dir_find+0x30>
 8007668:	f04f 0aff 	mov.w	sl, #255	; 0xff
 800766c:	e74e      	b.n	800750c <dir_find+0x30>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800766e:	2104      	movs	r1, #4
}
 8007670:	4608      	mov	r0, r1
 8007672:	b007      	add	sp, #28
 8007674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		res = move_window(fs, dp->sect);
 8007678:	4651      	mov	r1, sl
 800767a:	e7f9      	b.n	8007670 <dir_find+0x194>
 800767c:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007680:	9f02      	ldr	r7, [sp, #8]
 8007682:	9c03      	ldr	r4, [sp, #12]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8007684:	f04f 0aff 	mov.w	sl, #255	; 0xff
 8007688:	e740      	b.n	800750c <dir_find+0x30>
 800768a:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800768e:	9f02      	ldr	r7, [sp, #8]
 8007690:	9c03      	ldr	r4, [sp, #12]
 8007692:	e7f7      	b.n	8007684 <dir_find+0x1a8>
 8007694:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007698:	9f02      	ldr	r7, [sp, #8]
 800769a:	9c03      	ldr	r4, [sp, #12]
 800769c:	e7f2      	b.n	8007684 <dir_find+0x1a8>
 800769e:	bf00      	nop
 80076a0:	0800992d 	.word	0x0800992d
 80076a4:	08009920 	.word	0x08009920

080076a8 <dir_register>:
{
 80076a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076ac:	b08b      	sub	sp, #44	; 0x2c
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80076ae:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 80076b2:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 80076b6:	f040 8144 	bne.w	8007942 <dir_register+0x29a>
 80076ba:	4606      	mov	r6, r0
	FATFS *fs = dp->obj.fs;
 80076bc:	f8d0 a000 	ldr.w	sl, [r0]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80076c0:	f8da 3010 	ldr.w	r3, [sl, #16]
 80076c4:	881a      	ldrh	r2, [r3, #0]
 80076c6:	b342      	cbz	r2, 800771a <dir_register+0x72>
 80076c8:	f04f 0900 	mov.w	r9, #0
 80076cc:	f109 0901 	add.w	r9, r9, #1
 80076d0:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 80076d4:	2a00      	cmp	r2, #0
 80076d6:	d1f9      	bne.n	80076cc <dir_register+0x24>
	mem_cpy(sn, dp->fn, 12);
 80076d8:	f106 0324 	add.w	r3, r6, #36	; 0x24
 80076dc:	461c      	mov	r4, r3
 80076de:	9301      	str	r3, [sp, #4]
 80076e0:	220c      	movs	r2, #12
 80076e2:	4619      	mov	r1, r3
 80076e4:	a807      	add	r0, sp, #28
 80076e6:	f7ff fa3c 	bl	8006b62 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80076ea:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 80076ee:	f013 0f01 	tst.w	r3, #1
 80076f2:	f000 8082 	beq.w	80077fa <dir_register+0x152>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80076f6:	2340      	movs	r3, #64	; 0x40
 80076f8:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
	mem_cpy(dst, src, 11);
 80076fc:	220b      	movs	r2, #11
 80076fe:	a907      	add	r1, sp, #28
 8007700:	4620      	mov	r0, r4
 8007702:	f7ff fa2e 	bl	8006b62 <mem_cpy>
		for (n = 1; n < 100; n++) {
 8007706:	2701      	movs	r7, #1
 8007708:	463b      	mov	r3, r7
	ns[i] = '~';
 800770a:	f04f 0b7e 	mov.w	fp, #126	; 0x7e
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800770e:	f04f 0820 	mov.w	r8, #32
	} while (j < 8);
 8007712:	f06f 0523 	mvn.w	r5, #35	; 0x23
 8007716:	1bad      	subs	r5, r5, r6
 8007718:	e061      	b.n	80077de <dir_register+0x136>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800771a:	f04f 0900 	mov.w	r9, #0
 800771e:	e7db      	b.n	80076d8 <dir_register+0x30>
		for (n = 1; n < 100; n++) {
 8007720:	463b      	mov	r3, r7
 8007722:	e05c      	b.n	80077de <dir_register+0x136>
 8007724:	463b      	mov	r3, r7
 8007726:	e05a      	b.n	80077de <dir_register+0x136>
		seq /= 16;
 8007728:	460b      	mov	r3, r1
		c = (BYTE)((seq % 16) + '0');
 800772a:	f003 000f 	and.w	r0, r3, #15
 800772e:	f100 0130 	add.w	r1, r0, #48	; 0x30
		if (c > '9') c += 7;
 8007732:	2939      	cmp	r1, #57	; 0x39
 8007734:	bf88      	it	hi
 8007736:	f100 0137 	addhi.w	r1, r0, #55	; 0x37
		ns[i--] = c;
 800773a:	3a01      	subs	r2, #1
 800773c:	f804 1901 	strb.w	r1, [r4], #-1
		seq /= 16;
 8007740:	0919      	lsrs	r1, r3, #4
	} while (seq);
 8007742:	2b0f      	cmp	r3, #15
 8007744:	d8f0      	bhi.n	8007728 <dir_register+0x80>
	ns[i] = '~';
 8007746:	f102 0328 	add.w	r3, r2, #40	; 0x28
 800774a:	446b      	add	r3, sp
 800774c:	f803 bc14 	strb.w	fp, [r3, #-20]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8007750:	b162      	cbz	r2, 800776c <dir_register+0xc4>
 8007752:	f106 0123 	add.w	r1, r6, #35	; 0x23
 8007756:	2300      	movs	r3, #0
 8007758:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800775c:	2820      	cmp	r0, #32
 800775e:	d002      	beq.n	8007766 <dir_register+0xbe>
 8007760:	3301      	adds	r3, #1
 8007762:	429a      	cmp	r2, r3
 8007764:	d1f8      	bne.n	8007758 <dir_register+0xb0>
 8007766:	3324      	adds	r3, #36	; 0x24
 8007768:	4433      	add	r3, r6
 800776a:	e00c      	b.n	8007786 <dir_register+0xde>
 800776c:	4613      	mov	r3, r2
 800776e:	e7fa      	b.n	8007766 <dir_register+0xbe>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007770:	f102 0128 	add.w	r1, r2, #40	; 0x28
 8007774:	4469      	add	r1, sp
 8007776:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 800777a:	3201      	adds	r2, #1
 800777c:	f803 1b01 	strb.w	r1, [r3], #1
	} while (j < 8);
 8007780:	18e9      	adds	r1, r5, r3
 8007782:	2907      	cmp	r1, #7
 8007784:	d803      	bhi.n	800778e <dir_register+0xe6>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007786:	2a07      	cmp	r2, #7
 8007788:	d9f2      	bls.n	8007770 <dir_register+0xc8>
 800778a:	4641      	mov	r1, r8
 800778c:	e7f6      	b.n	800777c <dir_register+0xd4>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800778e:	4630      	mov	r0, r6
 8007790:	f7ff fea4 	bl	80074dc <dir_find>
			if (res != FR_OK) break;
 8007794:	4604      	mov	r4, r0
 8007796:	bb30      	cbnz	r0, 80077e6 <dir_register+0x13e>
		for (n = 1; n < 100; n++) {
 8007798:	3701      	adds	r7, #1
 800779a:	2f64      	cmp	r7, #100	; 0x64
 800779c:	d03a      	beq.n	8007814 <dir_register+0x16c>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800779e:	f8da 4010 	ldr.w	r4, [sl, #16]
	mem_cpy(dst, src, 11);
 80077a2:	220b      	movs	r2, #11
 80077a4:	a907      	add	r1, sp, #28
 80077a6:	9801      	ldr	r0, [sp, #4]
 80077a8:	f7ff f9db 	bl	8006b62 <mem_cpy>
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80077ac:	2f05      	cmp	r7, #5
 80077ae:	d9b7      	bls.n	8007720 <dir_register+0x78>
		while (*lfn) {	/* Create a CRC */
 80077b0:	8822      	ldrh	r2, [r4, #0]
 80077b2:	2a00      	cmp	r2, #0
 80077b4:	d0b6      	beq.n	8007724 <dir_register+0x7c>
		for (n = 1; n < 100; n++) {
 80077b6:	463b      	mov	r3, r7
 80077b8:	2110      	movs	r1, #16
				sr = (sr << 1) + (wc & 1);
 80077ba:	f002 0001 	and.w	r0, r2, #1
 80077be:	eb00 0343 	add.w	r3, r0, r3, lsl #1
				wc >>= 1;
 80077c2:	0852      	lsrs	r2, r2, #1
				if (sr & 0x10000) sr ^= 0x11021;
 80077c4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80077c8:	bf1c      	itt	ne
 80077ca:	f483 3388 	eorne.w	r3, r3, #69632	; 0x11000
 80077ce:	f083 0321 	eorne.w	r3, r3, #33	; 0x21
			for (i = 0; i < 16; i++) {
 80077d2:	3901      	subs	r1, #1
 80077d4:	d1f1      	bne.n	80077ba <dir_register+0x112>
		while (*lfn) {	/* Create a CRC */
 80077d6:	f834 2f02 	ldrh.w	r2, [r4, #2]!
 80077da:	2a00      	cmp	r2, #0
 80077dc:	d1ec      	bne.n	80077b8 <dir_register+0x110>
 80077de:	f10d 041b 	add.w	r4, sp, #27
		for (n = 1; n < 100; n++) {
 80077e2:	2207      	movs	r2, #7
 80077e4:	e7a1      	b.n	800772a <dir_register+0x82>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80077e6:	2f64      	cmp	r7, #100	; 0x64
 80077e8:	f000 80b0 	beq.w	800794c <dir_register+0x2a4>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80077ec:	2804      	cmp	r0, #4
 80077ee:	f040 80a9 	bne.w	8007944 <dir_register+0x29c>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80077f2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 80077f6:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80077fa:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 80077fe:	f013 0f02 	tst.w	r3, #2
 8007802:	d009      	beq.n	8007818 <dir_register+0x170>
 8007804:	f109 050c 	add.w	r5, r9, #12
 8007808:	4b60      	ldr	r3, [pc, #384]	; (800798c <dir_register+0x2e4>)
 800780a:	fba3 3505 	umull	r3, r5, r3, r5
 800780e:	08ad      	lsrs	r5, r5, #2
 8007810:	3501      	adds	r5, #1
 8007812:	e002      	b.n	800781a <dir_register+0x172>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8007814:	2407      	movs	r4, #7
 8007816:	e095      	b.n	8007944 <dir_register+0x29c>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8007818:	2501      	movs	r5, #1
	FATFS *fs = dp->obj.fs;
 800781a:	f8d6 8000 	ldr.w	r8, [r6]
	res = dir_sdi(dp, 0);
 800781e:	2100      	movs	r1, #0
 8007820:	4630      	mov	r0, r6
 8007822:	f7ff fcbf 	bl	80071a4 <dir_sdi>
	if (res == FR_OK) {
 8007826:	4604      	mov	r4, r0
 8007828:	b9d0      	cbnz	r0, 8007860 <dir_register+0x1b8>
		n = 0;
 800782a:	2700      	movs	r7, #0
			res = dir_next(dp, 1);
 800782c:	f04f 0901 	mov.w	r9, #1
 8007830:	e008      	b.n	8007844 <dir_register+0x19c>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007832:	3701      	adds	r7, #1
 8007834:	42bd      	cmp	r5, r7
 8007836:	d017      	beq.n	8007868 <dir_register+0x1c0>
			res = dir_next(dp, 1);
 8007838:	4649      	mov	r1, r9
 800783a:	4630      	mov	r0, r6
 800783c:	f7ff fdc0 	bl	80073c0 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007840:	4604      	mov	r4, r0
 8007842:	b968      	cbnz	r0, 8007860 <dir_register+0x1b8>
			res = move_window(fs, dp->sect);
 8007844:	69f1      	ldr	r1, [r6, #28]
 8007846:	4640      	mov	r0, r8
 8007848:	f7ff fb23 	bl	8006e92 <move_window>
			if (res != FR_OK) break;
 800784c:	4604      	mov	r4, r0
 800784e:	b938      	cbnz	r0, 8007860 <dir_register+0x1b8>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007850:	6a33      	ldr	r3, [r6, #32]
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	2be5      	cmp	r3, #229	; 0xe5
 8007856:	d0ec      	beq.n	8007832 <dir_register+0x18a>
 8007858:	2b00      	cmp	r3, #0
 800785a:	d0ea      	beq.n	8007832 <dir_register+0x18a>
				n = 0;					/* Not a blank entry. Restart to search */
 800785c:	2700      	movs	r7, #0
 800785e:	e7eb      	b.n	8007838 <dir_register+0x190>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007860:	2c04      	cmp	r4, #4
 8007862:	d075      	beq.n	8007950 <dir_register+0x2a8>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8007864:	2c00      	cmp	r4, #0
 8007866:	d16d      	bne.n	8007944 <dir_register+0x29c>
 8007868:	1e6b      	subs	r3, r5, #1
 800786a:	9302      	str	r3, [sp, #8]
 800786c:	d11a      	bne.n	80078a4 <dir_register+0x1fc>
		res = move_window(fs, dp->sect);
 800786e:	69f1      	ldr	r1, [r6, #28]
 8007870:	4650      	mov	r0, sl
 8007872:	f7ff fb0e 	bl	8006e92 <move_window>
		if (res == FR_OK) {
 8007876:	4604      	mov	r4, r0
 8007878:	2800      	cmp	r0, #0
 800787a:	d163      	bne.n	8007944 <dir_register+0x29c>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800787c:	2220      	movs	r2, #32
 800787e:	2100      	movs	r1, #0
 8007880:	6a30      	ldr	r0, [r6, #32]
 8007882:	f7ff f978 	bl	8006b76 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007886:	220b      	movs	r2, #11
 8007888:	9901      	ldr	r1, [sp, #4]
 800788a:	6a30      	ldr	r0, [r6, #32]
 800788c:	f7ff f969 	bl	8006b62 <mem_cpy>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8007890:	6a32      	ldr	r2, [r6, #32]
 8007892:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
 8007896:	f003 0318 	and.w	r3, r3, #24
 800789a:	7313      	strb	r3, [r2, #12]
			fs->wflag = 1;
 800789c:	2301      	movs	r3, #1
 800789e:	f88a 3003 	strb.w	r3, [sl, #3]
 80078a2:	e04f      	b.n	8007944 <dir_register+0x29c>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80078a4:	6971      	ldr	r1, [r6, #20]
 80078a6:	eba1 1143 	sub.w	r1, r1, r3, lsl #5
 80078aa:	4630      	mov	r0, r6
 80078ac:	f7ff fc7a 	bl	80071a4 <dir_sdi>
		if (res == FR_OK) {
 80078b0:	4604      	mov	r4, r0
 80078b2:	2800      	cmp	r0, #0
 80078b4:	d146      	bne.n	8007944 <dir_register+0x29c>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80078b6:	9801      	ldr	r0, [sp, #4]
 80078b8:	f7ff fa62 	bl	8006d80 <sum_sfn>
 80078bc:	9003      	str	r0, [sp, #12]
	dir[LDIR_Type] = 0;
 80078be:	f04f 0b00 	mov.w	fp, #0
 80078c2:	e019      	b.n	80078f8 <dir_register+0x250>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80078c4:	4628      	mov	r0, r5
 80078c6:	e04c      	b.n	8007962 <dir_register+0x2ba>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80078c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d002      	beq.n	80078d6 <dir_register+0x22e>
 80078d0:	f83c 3010 	ldrh.w	r3, [ip, r0, lsl #1]
 80078d4:	b90b      	cbnz	r3, 80078da <dir_register+0x232>
 80078d6:	f048 0840 	orr.w	r8, r8, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80078da:	f881 8000 	strb.w	r8, [r1]
				fs->wflag = 1;
 80078de:	2301      	movs	r3, #1
 80078e0:	f88a 3003 	strb.w	r3, [sl, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80078e4:	4659      	mov	r1, fp
 80078e6:	4630      	mov	r0, r6
 80078e8:	f7ff fd6a 	bl	80073c0 <dir_next>
			} while (res == FR_OK && --nent);
 80078ec:	4604      	mov	r4, r0
 80078ee:	bb48      	cbnz	r0, 8007944 <dir_register+0x29c>
 80078f0:	9b02      	ldr	r3, [sp, #8]
 80078f2:	3b01      	subs	r3, #1
 80078f4:	9302      	str	r3, [sp, #8]
 80078f6:	d0ba      	beq.n	800786e <dir_register+0x1c6>
				res = move_window(fs, dp->sect);
 80078f8:	69f1      	ldr	r1, [r6, #28]
 80078fa:	4650      	mov	r0, sl
 80078fc:	f7ff fac9 	bl	8006e92 <move_window>
				if (res != FR_OK) break;
 8007900:	4604      	mov	r4, r0
 8007902:	b9f8      	cbnz	r0, 8007944 <dir_register+0x29c>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8007904:	f8da c010 	ldr.w	ip, [sl, #16]
 8007908:	6a31      	ldr	r1, [r6, #32]
 800790a:	f89d 8008 	ldrb.w	r8, [sp, #8]
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800790e:	9b03      	ldr	r3, [sp, #12]
 8007910:	734b      	strb	r3, [r1, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8007912:	f04f 030f 	mov.w	r3, #15
 8007916:	72cb      	strb	r3, [r1, #11]
	dir[LDIR_Type] = 0;
 8007918:	f881 b00c 	strb.w	fp, [r1, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 800791c:	f881 b01a 	strb.w	fp, [r1, #26]
	*ptr++ = (BYTE)val;
 8007920:	f881 b01b 	strb.w	fp, [r1, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8007924:	f108 30ff 	add.w	r0, r8, #4294967295
 8007928:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 800792c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
	s = wc = 0;
 8007930:	4a17      	ldr	r2, [pc, #92]	; (8007990 <dir_register+0x2e8>)
 8007932:	f102 070d 	add.w	r7, r2, #13
 8007936:	465b      	mov	r3, fp
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8007938:	f64f 74ff 	movw	r4, #65535	; 0xffff
	*ptr++ = (BYTE)val; val >>= 8;
 800793c:	f04f 0eff 	mov.w	lr, #255	; 0xff
 8007940:	e012      	b.n	8007968 <dir_register+0x2c0>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8007942:	2406      	movs	r4, #6
}
 8007944:	4620      	mov	r0, r4
 8007946:	b00b      	add	sp, #44	; 0x2c
 8007948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800794c:	2407      	movs	r4, #7
 800794e:	e7f9      	b.n	8007944 <dir_register+0x29c>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007950:	2407      	movs	r4, #7
	if (res == FR_OK) {
 8007952:	e7f7      	b.n	8007944 <dir_register+0x29c>
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8007954:	7815      	ldrb	r5, [r2, #0]
 8007956:	eb01 0905 	add.w	r9, r1, r5
	*ptr++ = (BYTE)val; val >>= 8;
 800795a:	f801 e005 	strb.w	lr, [r1, r5]
	*ptr++ = (BYTE)val;
 800795e:	f889 e001 	strb.w	lr, [r9, #1]
	} while (++s < 13);
 8007962:	3201      	adds	r2, #1
 8007964:	42ba      	cmp	r2, r7
 8007966:	d0af      	beq.n	80078c8 <dir_register+0x220>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8007968:	42a3      	cmp	r3, r4
 800796a:	d0f3      	beq.n	8007954 <dir_register+0x2ac>
 800796c:	1c45      	adds	r5, r0, #1
 800796e:	f83c 3010 	ldrh.w	r3, [ip, r0, lsl #1]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8007972:	7810      	ldrb	r0, [r2, #0]
 8007974:	eb01 0900 	add.w	r9, r1, r0
	*ptr++ = (BYTE)val; val >>= 8;
 8007978:	540b      	strb	r3, [r1, r0]
 800797a:	0a18      	lsrs	r0, r3, #8
	*ptr++ = (BYTE)val;
 800797c:	f889 0001 	strb.w	r0, [r9, #1]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007980:	2b00      	cmp	r3, #0
 8007982:	d19f      	bne.n	80078c4 <dir_register+0x21c>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8007984:	4628      	mov	r0, r5
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007986:	4623      	mov	r3, r4
 8007988:	e7eb      	b.n	8007962 <dir_register+0x2ba>
 800798a:	bf00      	nop
 800798c:	4ec4ec4f 	.word	0x4ec4ec4f
 8007990:	08009920 	.word	0x08009920

08007994 <check_fs>:
{
 8007994:	b538      	push	{r3, r4, r5, lr}
 8007996:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007998:	2300      	movs	r3, #0
 800799a:	70c3      	strb	r3, [r0, #3]
 800799c:	f04f 33ff 	mov.w	r3, #4294967295
 80079a0:	6343      	str	r3, [r0, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80079a2:	f7ff fa76 	bl	8006e92 <move_window>
 80079a6:	bb40      	cbnz	r0, 80079fa <check_fs+0x66>
 80079a8:	4605      	mov	r5, r0
	rv = rv << 8 | ptr[0];
 80079aa:	f894 2237 	ldrb.w	r2, [r4, #567]	; 0x237
 80079ae:	f894 3236 	ldrb.w	r3, [r4, #566]	; 0x236
 80079b2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80079b6:	b21b      	sxth	r3, r3
 80079b8:	4a12      	ldr	r2, [pc, #72]	; (8007a04 <check_fs+0x70>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d11f      	bne.n	80079fe <check_fs+0x6a>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80079be:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80079c2:	2be9      	cmp	r3, #233	; 0xe9
 80079c4:	d007      	beq.n	80079d6 <check_fs+0x42>
 80079c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80079c8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80079cc:	4a0e      	ldr	r2, [pc, #56]	; (8007a08 <check_fs+0x74>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d001      	beq.n	80079d6 <check_fs+0x42>
	return 2;
 80079d2:	2502      	movs	r5, #2
 80079d4:	e014      	b.n	8007a00 <check_fs+0x6c>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80079d6:	f104 006e 	add.w	r0, r4, #110	; 0x6e
 80079da:	f7ff f8af 	bl	8006b3c <ld_dword>
 80079de:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80079e2:	4b0a      	ldr	r3, [pc, #40]	; (8007a0c <check_fs+0x78>)
 80079e4:	4298      	cmp	r0, r3
 80079e6:	d00b      	beq.n	8007a00 <check_fs+0x6c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80079e8:	f104 008a 	add.w	r0, r4, #138	; 0x8a
 80079ec:	f7ff f8a6 	bl	8006b3c <ld_dword>
	return 2;
 80079f0:	4b07      	ldr	r3, [pc, #28]	; (8007a10 <check_fs+0x7c>)
 80079f2:	4298      	cmp	r0, r3
 80079f4:	bf18      	it	ne
 80079f6:	2502      	movne	r5, #2
 80079f8:	e002      	b.n	8007a00 <check_fs+0x6c>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80079fa:	2504      	movs	r5, #4
 80079fc:	e000      	b.n	8007a00 <check_fs+0x6c>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80079fe:	2503      	movs	r5, #3
}
 8007a00:	4628      	mov	r0, r5
 8007a02:	bd38      	pop	{r3, r4, r5, pc}
 8007a04:	ffffaa55 	.word	0xffffaa55
 8007a08:	009000eb 	.word	0x009000eb
 8007a0c:	00544146 	.word	0x00544146
 8007a10:	33544146 	.word	0x33544146

08007a14 <find_volume>:
{
 8007a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a18:	b087      	sub	sp, #28
 8007a1a:	460e      	mov	r6, r1
 8007a1c:	4614      	mov	r4, r2
	*rfs = 0;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
 8007a22:	f7ff f9bc 	bl	8006d9e <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8007a26:	1e07      	subs	r7, r0, #0
 8007a28:	f2c0 8196 	blt.w	8007d58 <find_volume+0x344>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007a2c:	4bc5      	ldr	r3, [pc, #788]	; (8007d44 <find_volume+0x330>)
 8007a2e:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007a32:	2d00      	cmp	r5, #0
 8007a34:	f000 8195 	beq.w	8007d62 <find_volume+0x34e>
	*rfs = fs;							/* Return pointer to the file system object */
 8007a38:	6035      	str	r5, [r6, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007a3a:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007a3e:	782b      	ldrb	r3, [r5, #0]
 8007a40:	b16b      	cbz	r3, 8007a5e <find_volume+0x4a>
		stat = disk_status(fs->drv);
 8007a42:	7868      	ldrb	r0, [r5, #1]
 8007a44:	f7ff f830 	bl	8006aa8 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007a48:	f010 0f01 	tst.w	r0, #1
 8007a4c:	d107      	bne.n	8007a5e <find_volume+0x4a>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007a4e:	2c00      	cmp	r4, #0
 8007a50:	f000 8183 	beq.w	8007d5a <find_volume+0x346>
				return FR_WRITE_PROTECTED;
 8007a54:	f010 0404 	ands.w	r4, r0, #4
 8007a58:	bf18      	it	ne
 8007a5a:	240a      	movne	r4, #10
 8007a5c:	e17d      	b.n	8007d5a <find_volume+0x346>
	fs->fs_type = 0;					/* Clear the file system object */
 8007a5e:	2300      	movs	r3, #0
 8007a60:	702b      	strb	r3, [r5, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007a62:	b2f8      	uxtb	r0, r7
 8007a64:	7068      	strb	r0, [r5, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007a66:	f7ff f82b 	bl	8006ac0 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007a6a:	f010 0f01 	tst.w	r0, #1
 8007a6e:	f040 817a 	bne.w	8007d66 <find_volume+0x352>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007a72:	b11c      	cbz	r4, 8007a7c <find_volume+0x68>
 8007a74:	f010 0f04 	tst.w	r0, #4
 8007a78:	f040 8177 	bne.w	8007d6a <find_volume+0x356>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007a7c:	f105 020c 	add.w	r2, r5, #12
 8007a80:	2102      	movs	r1, #2
 8007a82:	7868      	ldrb	r0, [r5, #1]
 8007a84:	f7ff f84c 	bl	8006b20 <disk_ioctl>
 8007a88:	4604      	mov	r4, r0
 8007a8a:	2800      	cmp	r0, #0
 8007a8c:	f040 816f 	bne.w	8007d6e <find_volume+0x35a>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007a90:	89aa      	ldrh	r2, [r5, #12]
 8007a92:	f5a2 7300 	sub.w	r3, r2, #512	; 0x200
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8007a9c:	f200 8169 	bhi.w	8007d72 <find_volume+0x35e>
 8007aa0:	1e53      	subs	r3, r2, #1
 8007aa2:	4213      	tst	r3, r2
 8007aa4:	d001      	beq.n	8007aaa <find_volume+0x96>
 8007aa6:	2401      	movs	r4, #1
 8007aa8:	e157      	b.n	8007d5a <find_volume+0x346>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007aaa:	2100      	movs	r1, #0
 8007aac:	4628      	mov	r0, r5
 8007aae:	f7ff ff71 	bl	8007994 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007ab2:	2802      	cmp	r0, #2
 8007ab4:	f000 80ac 	beq.w	8007c10 <find_volume+0x1fc>
	bsect = 0;
 8007ab8:	2600      	movs	r6, #0
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007aba:	2804      	cmp	r0, #4
 8007abc:	f000 815b 	beq.w	8007d76 <find_volume+0x362>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007ac0:	2801      	cmp	r0, #1
 8007ac2:	f200 815a 	bhi.w	8007d7a <find_volume+0x366>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007ac6:	f8b5 a00c 	ldrh.w	sl, [r5, #12]
	rv = rv << 8 | ptr[0];
 8007aca:	f895 2044 	ldrb.w	r2, [r5, #68]	; 0x44
 8007ace:	f895 3043 	ldrb.w	r3, [r5, #67]	; 0x43
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007ad2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007ad6:	459a      	cmp	sl, r3
 8007ad8:	f040 8151 	bne.w	8007d7e <find_volume+0x36a>
	rv = rv << 8 | ptr[0];
 8007adc:	f895 004f 	ldrb.w	r0, [r5, #79]	; 0x4f
 8007ae0:	f895 704e 	ldrb.w	r7, [r5, #78]	; 0x4e
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007ae4:	ea57 2700 	orrs.w	r7, r7, r0, lsl #8
 8007ae8:	d104      	bne.n	8007af4 <find_volume+0xe0>
 8007aea:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8007aee:	f7ff f825 	bl	8006b3c <ld_dword>
 8007af2:	4607      	mov	r7, r0
		fs->fsize = fasize;
 8007af4:	622f      	str	r7, [r5, #32]
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007af6:	f895 9048 	ldrb.w	r9, [r5, #72]	; 0x48
 8007afa:	f885 9002 	strb.w	r9, [r5, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007afe:	f109 33ff 	add.w	r3, r9, #4294967295
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	f200 813c 	bhi.w	8007d82 <find_volume+0x36e>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007b0a:	f895 b045 	ldrb.w	fp, [r5, #69]	; 0x45
 8007b0e:	fa1f f38b 	uxth.w	r3, fp
 8007b12:	816b      	strh	r3, [r5, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	f000 8136 	beq.w	8007d86 <find_volume+0x372>
 8007b1a:	f10b 33ff 	add.w	r3, fp, #4294967295
 8007b1e:	ea13 0f0b 	tst.w	r3, fp
 8007b22:	f040 8132 	bne.w	8007d8a <find_volume+0x376>
	rv = rv << 8 | ptr[0];
 8007b26:	f895 304a 	ldrb.w	r3, [r5, #74]	; 0x4a
 8007b2a:	f895 8049 	ldrb.w	r8, [r5, #73]	; 0x49
 8007b2e:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
 8007b32:	fa0f f388 	sxth.w	r3, r8
 8007b36:	9301      	str	r3, [sp, #4]
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007b38:	f8a5 8008 	strh.w	r8, [r5, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007b3c:	ea4f 125a 	mov.w	r2, sl, lsr #5
 8007b40:	9200      	str	r2, [sp, #0]
 8007b42:	fbb8 f3f2 	udiv	r3, r8, r2
 8007b46:	fb02 8313 	mls	r3, r2, r3, r8
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	f040 811e 	bne.w	8007d8e <find_volume+0x37a>
	rv = rv << 8 | ptr[0];
 8007b52:	f895 304c 	ldrb.w	r3, [r5, #76]	; 0x4c
 8007b56:	f895 004b 	ldrb.w	r0, [r5, #75]	; 0x4b
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007b5a:	ea50 2003 	orrs.w	r0, r0, r3, lsl #8
 8007b5e:	d103      	bne.n	8007b68 <find_volume+0x154>
 8007b60:	f105 0058 	add.w	r0, r5, #88	; 0x58
 8007b64:	f7fe ffea 	bl	8006b3c <ld_dword>
	rv = rv << 8 | ptr[0];
 8007b68:	f895 3047 	ldrb.w	r3, [r5, #71]	; 0x47
 8007b6c:	f895 2046 	ldrb.w	r2, [r5, #70]	; 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007b70:	ea52 2203 	orrs.w	r2, r2, r3, lsl #8
 8007b74:	f000 810d 	beq.w	8007d92 <find_volume+0x37e>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007b78:	fb07 f109 	mul.w	r1, r7, r9
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007b7c:	9b00      	ldr	r3, [sp, #0]
 8007b7e:	fbb8 f3f3 	udiv	r3, r8, r3
 8007b82:	4413      	add	r3, r2
 8007b84:	440b      	add	r3, r1
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007b86:	4298      	cmp	r0, r3
 8007b88:	f0c0 8105 	bcc.w	8007d96 <find_volume+0x382>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007b8c:	1ac0      	subs	r0, r0, r3
 8007b8e:	fbb0 fcfb 	udiv	ip, r0, fp
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007b92:	4558      	cmp	r0, fp
 8007b94:	f0c0 8101 	bcc.w	8007d9a <find_volume+0x386>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007b98:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 8007b9c:	4584      	cmp	ip, r0
 8007b9e:	d863      	bhi.n	8007c68 <find_volume+0x254>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007ba0:	f640 70f5 	movw	r0, #4085	; 0xff5
 8007ba4:	4584      	cmp	ip, r0
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007ba6:	bf88      	it	hi
 8007ba8:	f04f 0902 	movhi.w	r9, #2
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007bac:	d85e      	bhi.n	8007c6c <find_volume+0x258>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007bae:	f10c 0b02 	add.w	fp, ip, #2
 8007bb2:	f8c5 b01c 	str.w	fp, [r5, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8007bb6:	626e      	str	r6, [r5, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007bb8:	4432      	add	r2, r6
 8007bba:	62aa      	str	r2, [r5, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8007bbc:	4433      	add	r3, r6
 8007bbe:	632b      	str	r3, [r5, #48]	; 0x30
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007bc0:	f1b8 0f00 	cmp.w	r8, #0
 8007bc4:	f000 80f3 	beq.w	8007dae <find_volume+0x39a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007bc8:	440a      	add	r2, r1
 8007bca:	62ea      	str	r2, [r5, #44]	; 0x2c
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007bcc:	f04f 0901 	mov.w	r9, #1
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007bd0:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 8007bd4:	f00b 0b01 	and.w	fp, fp, #1
 8007bd8:	eb0b 0b53 	add.w	fp, fp, r3, lsr #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007bdc:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007be0:	445b      	add	r3, fp
 8007be2:	fbb3 fafa 	udiv	sl, r3, sl
 8007be6:	45ba      	cmp	sl, r7
 8007be8:	f200 80df 	bhi.w	8007daa <find_volume+0x396>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007bec:	f04f 33ff 	mov.w	r3, #4294967295
 8007bf0:	61ab      	str	r3, [r5, #24]
 8007bf2:	616b      	str	r3, [r5, #20]
		fs->fsi_flag = 0x80;
 8007bf4:	2380      	movs	r3, #128	; 0x80
 8007bf6:	712b      	strb	r3, [r5, #4]
	fs->fs_type = fmt;		/* FAT sub-type */
 8007bf8:	f885 9000 	strb.w	r9, [r5]
	fs->id = ++Fsid;		/* File system mount ID */
 8007bfc:	4a52      	ldr	r2, [pc, #328]	; (8007d48 <find_volume+0x334>)
 8007bfe:	8813      	ldrh	r3, [r2, #0]
 8007c00:	3301      	adds	r3, #1
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	8013      	strh	r3, [r2, #0]
 8007c06:	80eb      	strh	r3, [r5, #6]
	clear_lock(fs);
 8007c08:	4628      	mov	r0, r5
 8007c0a:	f7ff f881 	bl	8006d10 <clear_lock>
	return FR_OK;
 8007c0e:	e0a4      	b.n	8007d5a <find_volume+0x346>
 8007c10:	af02      	add	r7, sp, #8
 8007c12:	f505 76ff 	add.w	r6, r5, #510	; 0x1fe
 8007c16:	f205 293e 	addw	r9, r5, #574	; 0x23e
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007c1a:	46b8      	mov	r8, r7
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007c1c:	f04f 0a00 	mov.w	sl, #0
 8007c20:	e005      	b.n	8007c2e <find_volume+0x21a>
 8007c22:	4650      	mov	r0, sl
 8007c24:	f848 0b04 	str.w	r0, [r8], #4
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007c28:	3610      	adds	r6, #16
 8007c2a:	454e      	cmp	r6, r9
 8007c2c:	d007      	beq.n	8007c3e <find_volume+0x22a>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007c2e:	f816 3c04 	ldrb.w	r3, [r6, #-4]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d0f5      	beq.n	8007c22 <find_volume+0x20e>
 8007c36:	4630      	mov	r0, r6
 8007c38:	f7fe ff80 	bl	8006b3c <ld_dword>
 8007c3c:	e7f2      	b.n	8007c24 <find_volume+0x210>
 8007c3e:	f107 0810 	add.w	r8, r7, #16
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007c42:	f04f 0903 	mov.w	r9, #3
 8007c46:	e009      	b.n	8007c5c <find_volume+0x248>
 8007c48:	4631      	mov	r1, r6
 8007c4a:	4628      	mov	r0, r5
 8007c4c:	f7ff fea2 	bl	8007994 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007c50:	2801      	cmp	r0, #1
 8007c52:	f67f af38 	bls.w	8007ac6 <find_volume+0xb2>
 8007c56:	45b8      	cmp	r8, r7
 8007c58:	f43f af2f 	beq.w	8007aba <find_volume+0xa6>
			bsect = br[i];
 8007c5c:	f857 6b04 	ldr.w	r6, [r7], #4
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007c60:	2e00      	cmp	r6, #0
 8007c62:	d1f1      	bne.n	8007c48 <find_volume+0x234>
 8007c64:	4648      	mov	r0, r9
 8007c66:	e7f6      	b.n	8007c56 <find_volume+0x242>
		fmt = FS_FAT32;
 8007c68:	f04f 0903 	mov.w	r9, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007c6c:	f10c 0b02 	add.w	fp, ip, #2
 8007c70:	f8c5 b01c 	str.w	fp, [r5, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8007c74:	626e      	str	r6, [r5, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007c76:	4432      	add	r2, r6
 8007c78:	62aa      	str	r2, [r5, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8007c7a:	4433      	add	r3, r6
 8007c7c:	632b      	str	r3, [r5, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8007c7e:	f1b9 0f03 	cmp.w	r9, #3
 8007c82:	d153      	bne.n	8007d2c <find_volume+0x318>
	rv = rv << 8 | ptr[0];
 8007c84:	f895 3063 	ldrb.w	r3, [r5, #99]	; 0x63
 8007c88:	f895 2062 	ldrb.w	r2, [r5, #98]	; 0x62
 8007c8c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007c90:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8007c94:	4313      	orrs	r3, r2
 8007c96:	f040 8082 	bne.w	8007d9e <find_volume+0x38a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007c9a:	f105 0064 	add.w	r0, r5, #100	; 0x64
 8007c9e:	f7fe ff4d 	bl	8006b3c <ld_dword>
 8007ca2:	62e8      	str	r0, [r5, #44]	; 0x2c
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007ca4:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007ca8:	eb03 0b8b 	add.w	fp, r3, fp, lsl #2
 8007cac:	fbbb fafa 	udiv	sl, fp, sl
 8007cb0:	4557      	cmp	r7, sl
 8007cb2:	d376      	bcc.n	8007da2 <find_volume+0x38e>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8007cb8:	61ab      	str	r3, [r5, #24]
 8007cba:	616b      	str	r3, [r5, #20]
		fs->fsi_flag = 0x80;
 8007cbc:	2380      	movs	r3, #128	; 0x80
 8007cbe:	712b      	strb	r3, [r5, #4]
	rv = rv << 8 | ptr[0];
 8007cc0:	f895 2069 	ldrb.w	r2, [r5, #105]	; 0x69
 8007cc4:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
 8007cc8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007ccc:	b21b      	sxth	r3, r3
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	d192      	bne.n	8007bf8 <find_volume+0x1e4>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007cd2:	1c71      	adds	r1, r6, #1
 8007cd4:	4628      	mov	r0, r5
 8007cd6:	f7ff f8dc 	bl	8006e92 <move_window>
 8007cda:	2800      	cmp	r0, #0
 8007cdc:	d18c      	bne.n	8007bf8 <find_volume+0x1e4>
			fs->fsi_flag = 0;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	712b      	strb	r3, [r5, #4]
	rv = rv << 8 | ptr[0];
 8007ce2:	f895 2237 	ldrb.w	r2, [r5, #567]	; 0x237
 8007ce6:	f895 3236 	ldrb.w	r3, [r5, #566]	; 0x236
 8007cea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007cee:	b21b      	sxth	r3, r3
 8007cf0:	4a16      	ldr	r2, [pc, #88]	; (8007d4c <find_volume+0x338>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d180      	bne.n	8007bf8 <find_volume+0x1e4>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007cf6:	f105 0038 	add.w	r0, r5, #56	; 0x38
 8007cfa:	f7fe ff1f 	bl	8006b3c <ld_dword>
 8007cfe:	4b14      	ldr	r3, [pc, #80]	; (8007d50 <find_volume+0x33c>)
 8007d00:	4298      	cmp	r0, r3
 8007d02:	f47f af79 	bne.w	8007bf8 <find_volume+0x1e4>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007d06:	f505 7007 	add.w	r0, r5, #540	; 0x21c
 8007d0a:	f7fe ff17 	bl	8006b3c <ld_dword>
 8007d0e:	4b11      	ldr	r3, [pc, #68]	; (8007d54 <find_volume+0x340>)
 8007d10:	4298      	cmp	r0, r3
 8007d12:	f47f af71 	bne.w	8007bf8 <find_volume+0x1e4>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007d16:	f505 7008 	add.w	r0, r5, #544	; 0x220
 8007d1a:	f7fe ff0f 	bl	8006b3c <ld_dword>
 8007d1e:	61a8      	str	r0, [r5, #24]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007d20:	f505 7009 	add.w	r0, r5, #548	; 0x224
 8007d24:	f7fe ff0a 	bl	8006b3c <ld_dword>
 8007d28:	6168      	str	r0, [r5, #20]
 8007d2a:	e765      	b.n	8007bf8 <find_volume+0x1e4>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007d2c:	f1b8 0f00 	cmp.w	r8, #0
 8007d30:	d039      	beq.n	8007da6 <find_volume+0x392>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007d32:	440a      	add	r2, r1
 8007d34:	62ea      	str	r2, [r5, #44]	; 0x2c
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007d36:	f1b9 0f02 	cmp.w	r9, #2
 8007d3a:	f47f af49 	bne.w	8007bd0 <find_volume+0x1bc>
 8007d3e:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8007d42:	e74b      	b.n	8007bdc <find_volume+0x1c8>
 8007d44:	20002ff0 	.word	0x20002ff0
 8007d48:	20003014 	.word	0x20003014
 8007d4c:	ffffaa55 	.word	0xffffaa55
 8007d50:	41615252 	.word	0x41615252
 8007d54:	61417272 	.word	0x61417272
	if (vol < 0) return FR_INVALID_DRIVE;
 8007d58:	240b      	movs	r4, #11
}
 8007d5a:	4620      	mov	r0, r4
 8007d5c:	b007      	add	sp, #28
 8007d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007d62:	240c      	movs	r4, #12
 8007d64:	e7f9      	b.n	8007d5a <find_volume+0x346>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007d66:	2403      	movs	r4, #3
 8007d68:	e7f7      	b.n	8007d5a <find_volume+0x346>
		return FR_WRITE_PROTECTED;
 8007d6a:	240a      	movs	r4, #10
 8007d6c:	e7f5      	b.n	8007d5a <find_volume+0x346>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007d6e:	2401      	movs	r4, #1
 8007d70:	e7f3      	b.n	8007d5a <find_volume+0x346>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007d72:	2401      	movs	r4, #1
 8007d74:	e7f1      	b.n	8007d5a <find_volume+0x346>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007d76:	2401      	movs	r4, #1
 8007d78:	e7ef      	b.n	8007d5a <find_volume+0x346>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007d7a:	240d      	movs	r4, #13
 8007d7c:	e7ed      	b.n	8007d5a <find_volume+0x346>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007d7e:	240d      	movs	r4, #13
 8007d80:	e7eb      	b.n	8007d5a <find_volume+0x346>
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007d82:	240d      	movs	r4, #13
 8007d84:	e7e9      	b.n	8007d5a <find_volume+0x346>
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007d86:	240d      	movs	r4, #13
 8007d88:	e7e7      	b.n	8007d5a <find_volume+0x346>
 8007d8a:	240d      	movs	r4, #13
 8007d8c:	e7e5      	b.n	8007d5a <find_volume+0x346>
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007d8e:	240d      	movs	r4, #13
 8007d90:	e7e3      	b.n	8007d5a <find_volume+0x346>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007d92:	240d      	movs	r4, #13
 8007d94:	e7e1      	b.n	8007d5a <find_volume+0x346>
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007d96:	240d      	movs	r4, #13
 8007d98:	e7df      	b.n	8007d5a <find_volume+0x346>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007d9a:	240d      	movs	r4, #13
 8007d9c:	e7dd      	b.n	8007d5a <find_volume+0x346>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007d9e:	240d      	movs	r4, #13
 8007da0:	e7db      	b.n	8007d5a <find_volume+0x346>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007da2:	240d      	movs	r4, #13
 8007da4:	e7d9      	b.n	8007d5a <find_volume+0x346>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007da6:	240d      	movs	r4, #13
 8007da8:	e7d7      	b.n	8007d5a <find_volume+0x346>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007daa:	240d      	movs	r4, #13
 8007dac:	e7d5      	b.n	8007d5a <find_volume+0x346>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007dae:	240d      	movs	r4, #13
 8007db0:	e7d3      	b.n	8007d5a <find_volume+0x346>
 8007db2:	bf00      	nop

08007db4 <ld_clust>:
	rv = rv << 8 | ptr[0];
 8007db4:	7eca      	ldrb	r2, [r1, #27]
 8007db6:	7e8b      	ldrb	r3, [r1, #26]
	cl = ld_word(dir + DIR_FstClusLO);
 8007db8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	if (fs->fs_type == FS_FAT32) {
 8007dbc:	7802      	ldrb	r2, [r0, #0]
 8007dbe:	2a03      	cmp	r2, #3
 8007dc0:	d001      	beq.n	8007dc6 <ld_clust+0x12>
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	4770      	bx	lr
	rv = rv << 8 | ptr[0];
 8007dc6:	7d48      	ldrb	r0, [r1, #21]
 8007dc8:	7d0a      	ldrb	r2, [r1, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007dca:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8007dce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	return cl;
 8007dd2:	e7f6      	b.n	8007dc2 <ld_clust+0xe>

08007dd4 <follow_path>:
{
 8007dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dd8:	b085      	sub	sp, #20
 8007dda:	4606      	mov	r6, r0
	FATFS *fs = obj->fs;
 8007ddc:	6803      	ldr	r3, [r0, #0]
 8007dde:	9302      	str	r3, [sp, #8]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007de0:	460a      	mov	r2, r1
 8007de2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007de6:	2b2f      	cmp	r3, #47	; 0x2f
 8007de8:	d0fa      	beq.n	8007de0 <follow_path+0xc>
 8007dea:	2b5c      	cmp	r3, #92	; 0x5c
 8007dec:	d0f8      	beq.n	8007de0 <follow_path+0xc>
		obj->sclust = 0;					/* Start from root directory */
 8007dee:	2300      	movs	r3, #0
 8007df0:	60b3      	str	r3, [r6, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007df2:	7813      	ldrb	r3, [r2, #0]
 8007df4:	2b1f      	cmp	r3, #31
 8007df6:	d901      	bls.n	8007dfc <follow_path+0x28>
 8007df8:	4692      	mov	sl, r2
 8007dfa:	e0fa      	b.n	8007ff2 <follow_path+0x21e>
		dp->fn[NSFLAG] = NS_NONAME;
 8007dfc:	2380      	movs	r3, #128	; 0x80
 8007dfe:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007e02:	2100      	movs	r1, #0
 8007e04:	4630      	mov	r0, r6
 8007e06:	f7ff f9cd 	bl	80071a4 <dir_sdi>
 8007e0a:	4602      	mov	r2, r0
}
 8007e0c:	4610      	mov	r0, r2
 8007e0e:	b005      	add	sp, #20
 8007e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e14:	eb0a 0304 	add.w	r3, sl, r4
 8007e18:	9a01      	ldr	r2, [sp, #4]
 8007e1a:	f1c2 0101 	rsb	r1, r2, #1
 8007e1e:	18c8      	adds	r0, r1, r3
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007e20:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8007e24:	2a2f      	cmp	r2, #47	; 0x2f
 8007e26:	d0fa      	beq.n	8007e1e <follow_path+0x4a>
 8007e28:	2a5c      	cmp	r2, #92	; 0x5c
 8007e2a:	d0f8      	beq.n	8007e1e <follow_path+0x4a>
	*path = &p[si];						/* Return pointer to the next segment */
 8007e2c:	4482      	add	sl, r0
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007e2e:	2700      	movs	r7, #0
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007e30:	2c00      	cmp	r4, #0
 8007e32:	f000 8146 	beq.w	80080c2 <follow_path+0x2ee>
 8007e36:	eb0b 0244 	add.w	r2, fp, r4, lsl #1
 8007e3a:	e02a      	b.n	8007e92 <follow_path+0xbe>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	f040 8143 	bne.w	80080c8 <follow_path+0x2f4>
		lfn[di++] = w;					/* Store the Unicode character */
 8007e42:	f828 2f02 	strh.w	r2, [r8, #2]!
		w = p[si++];					/* Get a character */
 8007e46:	1c6b      	adds	r3, r5, #1
 8007e48:	f817 0f01 	ldrb.w	r0, [r7, #1]!
		if (w < ' ') break;				/* Break if end of the path name */
 8007e4c:	281f      	cmp	r0, #31
 8007e4e:	f240 813f 	bls.w	80080d0 <follow_path+0x2fc>
		w = p[si++];					/* Get a character */
 8007e52:	461d      	mov	r5, r3
 8007e54:	1e6c      	subs	r4, r5, #1
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8007e56:	282f      	cmp	r0, #47	; 0x2f
 8007e58:	d0dc      	beq.n	8007e14 <follow_path+0x40>
 8007e5a:	285c      	cmp	r0, #92	; 0x5c
 8007e5c:	d0da      	beq.n	8007e14 <follow_path+0x40>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8007e5e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8007e62:	f000 8131 	beq.w	80080c8 <follow_path+0x2f4>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8007e66:	4649      	mov	r1, r9
 8007e68:	f000 fd0e 	bl	8008888 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	2800      	cmp	r0, #0
 8007e70:	f000 812a 	beq.w	80080c8 <follow_path+0x2f4>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8007e74:	287f      	cmp	r0, #127	; 0x7f
 8007e76:	d8e4      	bhi.n	8007e42 <follow_path+0x6e>
	while (*str && *str != chr) str++;
 8007e78:	2322      	movs	r3, #34	; 0x22
 8007e7a:	4997      	ldr	r1, [pc, #604]	; (80080d8 <follow_path+0x304>)
 8007e7c:	b298      	uxth	r0, r3
 8007e7e:	4282      	cmp	r2, r0
 8007e80:	d0dc      	beq.n	8007e3c <follow_path+0x68>
 8007e82:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d1f8      	bne.n	8007e7c <follow_path+0xa8>
 8007e8a:	e7da      	b.n	8007e42 <follow_path+0x6e>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007e8c:	3c01      	subs	r4, #1
 8007e8e:	f000 8118 	beq.w	80080c2 <follow_path+0x2ee>
		w = lfn[di - 1];
 8007e92:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
 8007e96:	2b20      	cmp	r3, #32
 8007e98:	d0f8      	beq.n	8007e8c <follow_path+0xb8>
 8007e9a:	2b2e      	cmp	r3, #46	; 0x2e
 8007e9c:	d0f6      	beq.n	8007e8c <follow_path+0xb8>
	lfn[di] = 0;						/* LFN is created */
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	f82b 3014 	strh.w	r3, [fp, r4, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8007ea4:	2c00      	cmp	r4, #0
 8007ea6:	f000 810f 	beq.w	80080c8 <follow_path+0x2f4>
	mem_set(dp->fn, ' ', 11);
 8007eaa:	220b      	movs	r2, #11
 8007eac:	2120      	movs	r1, #32
 8007eae:	f106 0024 	add.w	r0, r6, #36	; 0x24
 8007eb2:	f7fe fe60 	bl	8006b76 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8007eb6:	f1ab 0202 	sub.w	r2, fp, #2
 8007eba:	2500      	movs	r5, #0
 8007ebc:	e000      	b.n	8007ec0 <follow_path+0xec>
 8007ebe:	3501      	adds	r5, #1
 8007ec0:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 8007ec4:	2b20      	cmp	r3, #32
 8007ec6:	d0fa      	beq.n	8007ebe <follow_path+0xea>
 8007ec8:	2b2e      	cmp	r3, #46	; 0x2e
 8007eca:	d0f8      	beq.n	8007ebe <follow_path+0xea>
	if (si) cf |= NS_LOSS | NS_LFN;
 8007ecc:	b10d      	cbz	r5, 8007ed2 <follow_path+0xfe>
 8007ece:	f047 0703 	orr.w	r7, r7, #3
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007ed2:	eb0b 0244 	add.w	r2, fp, r4, lsl #1
 8007ed6:	f832 1d02 	ldrh.w	r1, [r2, #-2]!
 8007eda:	292e      	cmp	r1, #46	; 0x2e
 8007edc:	d001      	beq.n	8007ee2 <follow_path+0x10e>
 8007ede:	3c01      	subs	r4, #1
 8007ee0:	d1f9      	bne.n	8007ed6 <follow_path+0x102>
		w = lfn[si++];					/* Get an LFN character */
 8007ee2:	3501      	adds	r5, #1
		if (!w) break;					/* Break on end of the LFN */
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	f000 80de 	beq.w	80080a6 <follow_path+0x2d2>
 8007eea:	f04f 0900 	mov.w	r9, #0
 8007eee:	f04f 0808 	mov.w	r8, #8
			b <<= 2; continue;
 8007ef2:	9403      	str	r4, [sp, #12]
 8007ef4:	f8cd a004 	str.w	sl, [sp, #4]
 8007ef8:	46ca      	mov	sl, r9
 8007efa:	e018      	b.n	8007f2e <follow_path+0x15a>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007efc:	42ac      	cmp	r4, r5
 8007efe:	d10f      	bne.n	8007f20 <follow_path+0x14c>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007f00:	45c2      	cmp	sl, r8
 8007f02:	d22b      	bcs.n	8007f5c <follow_path+0x188>
			if (ni == 11) {				/* Long extension */
 8007f04:	f1b8 0f0b 	cmp.w	r8, #11
 8007f08:	f000 80d8 	beq.w	80080bc <follow_path+0x2e8>
			b <<= 2; continue;
 8007f0c:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8007f10:	fa5f f989 	uxtb.w	r9, r9
 8007f14:	9b03      	ldr	r3, [sp, #12]
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007f16:	f04f 080b 	mov.w	r8, #11
 8007f1a:	f04f 0a08 	mov.w	sl, #8
			b <<= 2; continue;
 8007f1e:	e002      	b.n	8007f26 <follow_path+0x152>
			cf |= NS_LOSS | NS_LFN; continue;
 8007f20:	f047 0703 	orr.w	r7, r7, #3
 8007f24:	462b      	mov	r3, r5
		w = lfn[si++];					/* Get an LFN character */
 8007f26:	1c5d      	adds	r5, r3, #1
 8007f28:	f83b 3013 	ldrh.w	r3, [fp, r3, lsl #1]
		if (!w) break;					/* Break on end of the LFN */
 8007f2c:	b1fb      	cbz	r3, 8007f6e <follow_path+0x19a>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007f2e:	2b20      	cmp	r3, #32
 8007f30:	d0f6      	beq.n	8007f20 <follow_path+0x14c>
 8007f32:	2b2e      	cmp	r3, #46	; 0x2e
 8007f34:	d0e2      	beq.n	8007efc <follow_path+0x128>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007f36:	45c2      	cmp	sl, r8
 8007f38:	d210      	bcs.n	8007f5c <follow_path+0x188>
 8007f3a:	42ac      	cmp	r4, r5
 8007f3c:	d0e2      	beq.n	8007f04 <follow_path+0x130>
		if (w >= 0x80) {				/* Non ASCII character */
 8007f3e:	2b7f      	cmp	r3, #127	; 0x7f
 8007f40:	d874      	bhi.n	800802c <follow_path+0x258>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d17f      	bne.n	8008046 <follow_path+0x272>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007f46:	f047 0703 	orr.w	r7, r7, #3
 8007f4a:	235f      	movs	r3, #95	; 0x5f
		dp->fn[i++] = (BYTE)w;
 8007f4c:	eb06 020a 	add.w	r2, r6, sl
 8007f50:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8007f54:	462b      	mov	r3, r5
 8007f56:	f10a 0a01 	add.w	sl, sl, #1
 8007f5a:	e7e4      	b.n	8007f26 <follow_path+0x152>
			if (ni == 11) {				/* Long extension */
 8007f5c:	f1b8 0f0b 	cmp.w	r8, #11
 8007f60:	d056      	beq.n	8008010 <follow_path+0x23c>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8007f62:	42ac      	cmp	r4, r5
 8007f64:	bf18      	it	ne
 8007f66:	f047 0703 	orrne.w	r7, r7, #3
			if (si > di) break;			/* No extension */
 8007f6a:	42ac      	cmp	r4, r5
 8007f6c:	d2ce      	bcs.n	8007f0c <follow_path+0x138>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007f6e:	f8dd a004 	ldr.w	sl, [sp, #4]
 8007f72:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
 8007f76:	2be5      	cmp	r3, #229	; 0xe5
 8007f78:	d054      	beq.n	8008024 <follow_path+0x250>
	if (ni == 8) b <<= 2;
 8007f7a:	f1b8 0f08 	cmp.w	r8, #8
 8007f7e:	f000 8098 	beq.w	80080b2 <follow_path+0x2de>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007f82:	f009 030c 	and.w	r3, r9, #12
 8007f86:	2b0c      	cmp	r3, #12
 8007f88:	d003      	beq.n	8007f92 <follow_path+0x1be>
 8007f8a:	f009 0203 	and.w	r2, r9, #3
 8007f8e:	2a03      	cmp	r2, #3
 8007f90:	d101      	bne.n	8007f96 <follow_path+0x1c2>
 8007f92:	f047 0702 	orr.w	r7, r7, #2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007f96:	f017 0f02 	tst.w	r7, #2
 8007f9a:	d10a      	bne.n	8007fb2 <follow_path+0x1de>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007f9c:	f009 0903 	and.w	r9, r9, #3
 8007fa0:	f1b9 0f01 	cmp.w	r9, #1
 8007fa4:	bf08      	it	eq
 8007fa6:	f047 0710 	orreq.w	r7, r7, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007faa:	2b04      	cmp	r3, #4
 8007fac:	bf08      	it	eq
 8007fae:	f047 0708 	orreq.w	r7, r7, #8
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007fb2:	f886 702f 	strb.w	r7, [r6, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 8007fb6:	4630      	mov	r0, r6
 8007fb8:	f7ff fa90 	bl	80074dc <dir_find>
			ns = dp->fn[NSFLAG];
 8007fbc:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 8007fc0:	4602      	mov	r2, r0
 8007fc2:	2800      	cmp	r0, #0
 8007fc4:	d164      	bne.n	8008090 <follow_path+0x2bc>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007fc6:	f013 0f04 	tst.w	r3, #4
 8007fca:	f47f af1f 	bne.w	8007e0c <follow_path+0x38>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007fce:	79b3      	ldrb	r3, [r6, #6]
 8007fd0:	f013 0f10 	tst.w	r3, #16
 8007fd4:	d065      	beq.n	80080a2 <follow_path+0x2ce>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007fd6:	9c02      	ldr	r4, [sp, #8]
 8007fd8:	f104 0338 	add.w	r3, r4, #56	; 0x38
 8007fdc:	89a2      	ldrh	r2, [r4, #12]
 8007fde:	6971      	ldr	r1, [r6, #20]
 8007fe0:	fbb1 f0f2 	udiv	r0, r1, r2
 8007fe4:	fb02 1110 	mls	r1, r2, r0, r1
 8007fe8:	4419      	add	r1, r3
 8007fea:	4620      	mov	r0, r4
 8007fec:	f7ff fee2 	bl	8007db4 <ld_clust>
 8007ff0:	60b0      	str	r0, [r6, #8]
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8007ff2:	6833      	ldr	r3, [r6, #0]
 8007ff4:	f8d3 b010 	ldr.w	fp, [r3, #16]
		w = p[si++];					/* Get a character */
 8007ff8:	f89a 0000 	ldrb.w	r0, [sl]
		if (w < ' ') break;				/* Break if end of the path name */
 8007ffc:	281f      	cmp	r0, #31
 8007ffe:	d965      	bls.n	80080cc <follow_path+0x2f8>
 8008000:	f1ab 0802 	sub.w	r8, fp, #2
 8008004:	f8cd a004 	str.w	sl, [sp, #4]
 8008008:	4657      	mov	r7, sl
		w = p[si++];					/* Get a character */
 800800a:	2501      	movs	r5, #1
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800800c:	46a9      	mov	r9, r5
 800800e:	e721      	b.n	8007e54 <follow_path+0x80>
 8008010:	f8dd a004 	ldr.w	sl, [sp, #4]
				cf |= NS_LOSS | NS_LFN; break;
 8008014:	f047 0703 	orr.w	r7, r7, #3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008018:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
 800801c:	2be5      	cmp	r3, #229	; 0xe5
 800801e:	d1b0      	bne.n	8007f82 <follow_path+0x1ae>
 8008020:	f04f 080b 	mov.w	r8, #11
 8008024:	2305      	movs	r3, #5
 8008026:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
 800802a:	e7a6      	b.n	8007f7a <follow_path+0x1a6>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800802c:	2100      	movs	r1, #0
 800802e:	4618      	mov	r0, r3
 8008030:	f000 fc2a 	bl	8008888 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8008034:	4603      	mov	r3, r0
 8008036:	b118      	cbz	r0, 8008040 <follow_path+0x26c>
 8008038:	4a28      	ldr	r2, [pc, #160]	; (80080dc <follow_path+0x308>)
 800803a:	4413      	add	r3, r2
 800803c:	f813 3c80 	ldrb.w	r3, [r3, #-128]
			cf |= NS_LFN;				/* Force create LFN entry */
 8008040:	f047 0702 	orr.w	r7, r7, #2
 8008044:	e77d      	b.n	8007f42 <follow_path+0x16e>
	while (*str && *str != chr) str++;
 8008046:	222b      	movs	r2, #43	; 0x2b
 8008048:	4825      	ldr	r0, [pc, #148]	; (80080e0 <follow_path+0x30c>)
 800804a:	b291      	uxth	r1, r2
 800804c:	428b      	cmp	r3, r1
 800804e:	d00b      	beq.n	8008068 <follow_path+0x294>
 8008050:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8008054:	2a00      	cmp	r2, #0
 8008056:	d1f8      	bne.n	800804a <follow_path+0x276>
				if (IsUpper(w)) {		/* ASCII large capital */
 8008058:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800805c:	b292      	uxth	r2, r2
 800805e:	2a19      	cmp	r2, #25
 8008060:	d806      	bhi.n	8008070 <follow_path+0x29c>
					b |= 2;
 8008062:	f049 0902 	orr.w	r9, r9, #2
 8008066:	e771      	b.n	8007f4c <follow_path+0x178>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8008068:	2a00      	cmp	r2, #0
 800806a:	f47f af6c 	bne.w	8007f46 <follow_path+0x172>
 800806e:	e7f3      	b.n	8008058 <follow_path+0x284>
					if (IsLower(w)) {	/* ASCII small capital */
 8008070:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008074:	b292      	uxth	r2, r2
 8008076:	2a19      	cmp	r2, #25
 8008078:	f63f af68 	bhi.w	8007f4c <follow_path+0x178>
						b |= 1; w -= 0x20;
 800807c:	f049 0901 	orr.w	r9, r9, #1
 8008080:	3b20      	subs	r3, #32
 8008082:	b29b      	uxth	r3, r3
 8008084:	e762      	b.n	8007f4c <follow_path+0x178>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008086:	f04f 0900 	mov.w	r9, #0
 800808a:	f04f 0808 	mov.w	r8, #8
 800808e:	e7c9      	b.n	8008024 <follow_path+0x250>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008090:	2804      	cmp	r0, #4
 8008092:	f47f aebb 	bne.w	8007e0c <follow_path+0x38>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008096:	f013 0f04 	tst.w	r3, #4
 800809a:	bf14      	ite	ne
 800809c:	4602      	movne	r2, r0
 800809e:	2205      	moveq	r2, #5
 80080a0:	e6b4      	b.n	8007e0c <follow_path+0x38>
				res = FR_NO_PATH; break;
 80080a2:	2205      	movs	r2, #5
 80080a4:	e6b2      	b.n	8007e0c <follow_path+0x38>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80080a6:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
 80080aa:	2be5      	cmp	r3, #229	; 0xe5
 80080ac:	d0eb      	beq.n	8008086 <follow_path+0x2b2>
 80080ae:	f04f 0900 	mov.w	r9, #0
	if (ni == 8) b <<= 2;
 80080b2:	ea4f 0989 	mov.w	r9, r9, lsl #2
 80080b6:	fa5f f989 	uxtb.w	r9, r9
 80080ba:	e762      	b.n	8007f82 <follow_path+0x1ae>
 80080bc:	f8dd a004 	ldr.w	sl, [sp, #4]
 80080c0:	e7a8      	b.n	8008014 <follow_path+0x240>
	lfn[di] = 0;						/* LFN is created */
 80080c2:	2300      	movs	r3, #0
 80080c4:	f8ab 3000 	strh.w	r3, [fp]
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80080c8:	2206      	movs	r2, #6
	return res;
 80080ca:	e69f      	b.n	8007e0c <follow_path+0x38>
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80080cc:	2500      	movs	r5, #0
		w = p[si++];					/* Get a character */
 80080ce:	2301      	movs	r3, #1
	*path = &p[si];						/* Return pointer to the next segment */
 80080d0:	449a      	add	sl, r3
 80080d2:	462c      	mov	r4, r5
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80080d4:	2704      	movs	r7, #4
 80080d6:	e6ab      	b.n	8007e30 <follow_path+0x5c>
 80080d8:	0800988c 	.word	0x0800988c
 80080dc:	080098a0 	.word	0x080098a0
 80080e0:	08009898 	.word	0x08009898

080080e4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80080e4:	b570      	push	{r4, r5, r6, lr}
 80080e6:	b084      	sub	sp, #16
 80080e8:	9001      	str	r0, [sp, #4]
 80080ea:	9100      	str	r1, [sp, #0]
 80080ec:	4616      	mov	r6, r2
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80080ee:	9103      	str	r1, [sp, #12]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80080f0:	a803      	add	r0, sp, #12
 80080f2:	f7fe fe54 	bl	8006d9e <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80080f6:	1e04      	subs	r4, r0, #0
 80080f8:	db1c      	blt.n	8008134 <f_mount+0x50>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80080fa:	4b13      	ldr	r3, [pc, #76]	; (8008148 <f_mount+0x64>)
 80080fc:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]

	if (cfs) {
 8008100:	b125      	cbz	r5, 800810c <f_mount+0x28>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008102:	4628      	mov	r0, r5
 8008104:	f7fe fe04 	bl	8006d10 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008108:	2300      	movs	r3, #0
 800810a:	702b      	strb	r3, [r5, #0]
	}

	if (fs) {
 800810c:	9b01      	ldr	r3, [sp, #4]
 800810e:	b1ab      	cbz	r3, 800813c <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 8008110:	2200      	movs	r2, #0
 8008112:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008114:	9b01      	ldr	r3, [sp, #4]
 8008116:	4a0c      	ldr	r2, [pc, #48]	; (8008148 <f_mount+0x64>)
 8008118:	f842 3024 	str.w	r3, [r2, r4, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800811c:	b163      	cbz	r3, 8008138 <f_mount+0x54>
 800811e:	2e01      	cmp	r6, #1
 8008120:	d002      	beq.n	8008128 <f_mount+0x44>
 8008122:	2000      	movs	r0, #0

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 8008124:	b004      	add	sp, #16
 8008126:	bd70      	pop	{r4, r5, r6, pc}
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008128:	2200      	movs	r2, #0
 800812a:	a901      	add	r1, sp, #4
 800812c:	4668      	mov	r0, sp
 800812e:	f7ff fc71 	bl	8007a14 <find_volume>
	LEAVE_FF(fs, res);
 8008132:	e7f7      	b.n	8008124 <f_mount+0x40>
	if (vol < 0) return FR_INVALID_DRIVE;
 8008134:	200b      	movs	r0, #11
 8008136:	e7f5      	b.n	8008124 <f_mount+0x40>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008138:	2000      	movs	r0, #0
 800813a:	e7f3      	b.n	8008124 <f_mount+0x40>
	FatFs[vol] = fs;					/* Register new fs object */
 800813c:	2000      	movs	r0, #0
 800813e:	4b02      	ldr	r3, [pc, #8]	; (8008148 <f_mount+0x64>)
 8008140:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008144:	e7ee      	b.n	8008124 <f_mount+0x40>
 8008146:	bf00      	nop
 8008148:	20002ff0 	.word	0x20002ff0

0800814c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800814c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008150:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 8008154:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008156:	2800      	cmp	r0, #0
 8008158:	f000 809e 	beq.w	8008298 <f_open+0x14c>
 800815c:	4614      	mov	r4, r2
 800815e:	4606      	mov	r6, r0

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008160:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 8008164:	462a      	mov	r2, r5
 8008166:	a982      	add	r1, sp, #520	; 0x208
 8008168:	a801      	add	r0, sp, #4
 800816a:	f7ff fc53 	bl	8007a14 <find_volume>
	if (res == FR_OK) {
 800816e:	4607      	mov	r7, r0
 8008170:	b130      	cbz	r0, 8008180 <f_open+0x34>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008172:	2300      	movs	r3, #0
 8008174:	6033      	str	r3, [r6, #0]

	LEAVE_FF(fs, res);
}
 8008176:	4638      	mov	r0, r7
 8008178:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 800817c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		dj.obj.fs = fs;
 8008180:	9b82      	ldr	r3, [sp, #520]	; 0x208
 8008182:	9383      	str	r3, [sp, #524]	; 0x20c
		INIT_NAMBUF(fs);
 8008184:	aa02      	add	r2, sp, #8
 8008186:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8008188:	9901      	ldr	r1, [sp, #4]
 800818a:	a883      	add	r0, sp, #524	; 0x20c
 800818c:	f7ff fe22 	bl	8007dd4 <follow_path>
		if (res == FR_OK) {
 8008190:	4603      	mov	r3, r0
 8008192:	2800      	cmp	r0, #0
 8008194:	f040 80a3 	bne.w	80082de <f_open+0x192>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008198:	f99d 323b 	ldrsb.w	r3, [sp, #571]	; 0x23b
 800819c:	2b00      	cmp	r3, #0
 800819e:	f2c0 808c 	blt.w	80082ba <f_open+0x16e>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80081a2:	f035 0301 	bics.w	r3, r5, #1
 80081a6:	bf14      	ite	ne
 80081a8:	2101      	movne	r1, #1
 80081aa:	2100      	moveq	r1, #0
 80081ac:	a883      	add	r0, sp, #524	; 0x20c
 80081ae:	f7fe fce9 	bl	8006b84 <chk_lock>
 80081b2:	4603      	mov	r3, r0
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80081b4:	f014 0f1c 	tst.w	r4, #28
 80081b8:	f000 8095 	beq.w	80082e6 <f_open+0x19a>
			if (res != FR_OK) {					/* No file, create new */
 80081bc:	b948      	cbnz	r0, 80081d2 <f_open+0x86>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80081be:	f89d 3212 	ldrb.w	r3, [sp, #530]	; 0x212
 80081c2:	f013 0f11 	tst.w	r3, #17
 80081c6:	d174      	bne.n	80082b2 <f_open+0x166>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80081c8:	f014 0f04 	tst.w	r4, #4
 80081cc:	d013      	beq.n	80081f6 <f_open+0xaa>
 80081ce:	2708      	movs	r7, #8
 80081d0:	e7cf      	b.n	8008172 <f_open+0x26>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80081d2:	2b04      	cmp	r3, #4
 80081d4:	f040 8081 	bne.w	80082da <f_open+0x18e>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80081d8:	4b75      	ldr	r3, [pc, #468]	; (80083b0 <f_open+0x264>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	b123      	cbz	r3, 80081e8 <f_open+0x9c>
 80081de:	4b74      	ldr	r3, [pc, #464]	; (80083b0 <f_open+0x264>)
 80081e0:	691b      	ldr	r3, [r3, #16]
 80081e2:	b10b      	cbz	r3, 80081e8 <f_open+0x9c>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80081e4:	2712      	movs	r7, #18
 80081e6:	e7c4      	b.n	8008172 <f_open+0x26>
 80081e8:	a883      	add	r0, sp, #524	; 0x20c
 80081ea:	f7ff fa5d 	bl	80076a8 <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80081ee:	2800      	cmp	r0, #0
 80081f0:	d15d      	bne.n	80082ae <f_open+0x162>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80081f2:	f045 0508 	orr.w	r5, r5, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80081f6:	f015 0f08 	tst.w	r5, #8
 80081fa:	f000 8086 	beq.w	800830a <f_open+0x1be>
				dw = GET_FATTIME();
 80081fe:	f7fc fe63 	bl	8004ec8 <get_fattime>
 8008202:	4604      	mov	r4, r0
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008204:	4601      	mov	r1, r0
 8008206:	988b      	ldr	r0, [sp, #556]	; 0x22c
 8008208:	300e      	adds	r0, #14
 800820a:	f7fe fca2 	bl	8006b52 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800820e:	4621      	mov	r1, r4
 8008210:	988b      	ldr	r0, [sp, #556]	; 0x22c
 8008212:	3016      	adds	r0, #22
 8008214:	f7fe fc9d 	bl	8006b52 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008218:	9b8b      	ldr	r3, [sp, #556]	; 0x22c
 800821a:	2220      	movs	r2, #32
 800821c:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800821e:	f8dd 8208 	ldr.w	r8, [sp, #520]	; 0x208
 8008222:	f8dd 922c 	ldr.w	r9, [sp, #556]	; 0x22c
 8008226:	4649      	mov	r1, r9
 8008228:	4640      	mov	r0, r8
 800822a:	f7ff fdc3 	bl	8007db4 <ld_clust>
 800822e:	4604      	mov	r4, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008230:	2200      	movs	r2, #0
 8008232:	4649      	mov	r1, r9
 8008234:	4640      	mov	r0, r8
 8008236:	f7fe ff29 	bl	800708c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800823a:	2100      	movs	r1, #0
 800823c:	988b      	ldr	r0, [sp, #556]	; 0x22c
 800823e:	301c      	adds	r0, #28
 8008240:	f7fe fc87 	bl	8006b52 <st_dword>
					fs->wflag = 1;
 8008244:	9b82      	ldr	r3, [sp, #520]	; 0x208
 8008246:	2201      	movs	r2, #1
 8008248:	70da      	strb	r2, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 800824a:	2c00      	cmp	r4, #0
 800824c:	d05b      	beq.n	8008306 <f_open+0x1ba>
						dw = fs->winsect;
 800824e:	9b82      	ldr	r3, [sp, #520]	; 0x208
 8008250:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
						res = remove_chain(&dj.obj, cl, 0);
 8008254:	2200      	movs	r2, #0
 8008256:	4621      	mov	r1, r4
 8008258:	a883      	add	r0, sp, #524	; 0x20c
 800825a:	f7ff f868 	bl	800732e <remove_chain>
						if (res == FR_OK) {
 800825e:	b108      	cbz	r0, 8008264 <f_open+0x118>
						res = remove_chain(&dj.obj, cl, 0);
 8008260:	4607      	mov	r7, r0
 8008262:	e786      	b.n	8008172 <f_open+0x26>
							res = move_window(fs, dw);
 8008264:	4641      	mov	r1, r8
 8008266:	9882      	ldr	r0, [sp, #520]	; 0x208
 8008268:	f7fe fe13 	bl	8006e92 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800826c:	3c01      	subs	r4, #1
 800826e:	9b82      	ldr	r3, [sp, #520]	; 0x208
 8008270:	615c      	str	r4, [r3, #20]
		if (res == FR_OK) {
 8008272:	2800      	cmp	r0, #0
 8008274:	d047      	beq.n	8008306 <f_open+0x1ba>
							res = move_window(fs, dw);
 8008276:	4607      	mov	r7, r0
 8008278:	e77b      	b.n	8008172 <f_open+0x26>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800827a:	fbb4 f2f5 	udiv	r2, r4, r5
 800827e:	4402      	add	r2, r0
 8008280:	6232      	str	r2, [r6, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008282:	2301      	movs	r3, #1
 8008284:	4641      	mov	r1, r8
 8008286:	f899 0001 	ldrb.w	r0, [r9, #1]
 800828a:	f7fe fc2d 	bl	8006ae8 <disk_read>
 800828e:	2800      	cmp	r0, #0
 8008290:	f43f af71 	beq.w	8008176 <f_open+0x2a>
 8008294:	2701      	movs	r7, #1
 8008296:	e76c      	b.n	8008172 <f_open+0x26>
	if (!fp) return FR_INVALID_OBJECT;
 8008298:	2709      	movs	r7, #9
 800829a:	e76c      	b.n	8008176 <f_open+0x2a>
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800829c:	2702      	movs	r7, #2
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800829e:	e768      	b.n	8008172 <f_open+0x26>
					if (clst <= 1) res = FR_INT_ERR;
 80082a0:	2702      	movs	r7, #2
				fp->clust = clst;
 80082a2:	61f1      	str	r1, [r6, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80082a4:	e765      	b.n	8008172 <f_open+0x26>
					res = FR_NO_FILE;
 80082a6:	2704      	movs	r7, #4
 80082a8:	e763      	b.n	8008172 <f_open+0x26>
						res = FR_DENIED;
 80082aa:	2707      	movs	r7, #7
		if (res == FR_OK) {
 80082ac:	e761      	b.n	8008172 <f_open+0x26>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80082ae:	4607      	mov	r7, r0
 80082b0:	e75f      	b.n	8008172 <f_open+0x26>
					res = FR_DENIED;
 80082b2:	2707      	movs	r7, #7
 80082b4:	e75d      	b.n	8008172 <f_open+0x26>
 80082b6:	461f      	mov	r7, r3
		if (res == FR_OK) {
 80082b8:	e75b      	b.n	8008172 <f_open+0x26>
				res = FR_INVALID_NAME;
 80082ba:	2706      	movs	r7, #6
 80082bc:	e759      	b.n	8008172 <f_open+0x26>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80082be:	1b64      	subs	r4, r4, r5
 80082c0:	42ac      	cmp	r4, r5
 80082c2:	d960      	bls.n	8008386 <f_open+0x23a>
					clst = get_fat(&fp->obj, clst);
 80082c4:	4630      	mov	r0, r6
 80082c6:	f7fe feee 	bl	80070a6 <get_fat>
 80082ca:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 80082cc:	2801      	cmp	r0, #1
 80082ce:	d9e7      	bls.n	80082a0 <f_open+0x154>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80082d0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80082d4:	d1f3      	bne.n	80082be <f_open+0x172>
 80082d6:	2701      	movs	r7, #1
 80082d8:	e7e3      	b.n	80082a2 <f_open+0x156>
 80082da:	461f      	mov	r7, r3
 80082dc:	e749      	b.n	8008172 <f_open+0x26>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80082de:	f014 0f1c 	tst.w	r4, #28
 80082e2:	f47f af76 	bne.w	80081d2 <f_open+0x86>
			if (res == FR_OK) {					/* Following succeeded */
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d1e5      	bne.n	80082b6 <f_open+0x16a>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80082ea:	f89d 3212 	ldrb.w	r3, [sp, #530]	; 0x212
 80082ee:	f013 0f10 	tst.w	r3, #16
 80082f2:	d1d8      	bne.n	80082a6 <f_open+0x15a>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80082f4:	f014 0f02 	tst.w	r4, #2
 80082f8:	d002      	beq.n	8008300 <f_open+0x1b4>
 80082fa:	f013 0f01 	tst.w	r3, #1
 80082fe:	d1d4      	bne.n	80082aa <f_open+0x15e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008300:	f014 0f08 	tst.w	r4, #8
 8008304:	d001      	beq.n	800830a <f_open+0x1be>
				mode |= FA_MODIFIED;
 8008306:	f045 0540 	orr.w	r5, r5, #64	; 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800830a:	9b82      	ldr	r3, [sp, #520]	; 0x208
 800830c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800830e:	6273      	str	r3, [r6, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008310:	9b8b      	ldr	r3, [sp, #556]	; 0x22c
 8008312:	62b3      	str	r3, [r6, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008314:	f035 0301 	bics.w	r3, r5, #1
 8008318:	bf14      	ite	ne
 800831a:	2101      	movne	r1, #1
 800831c:	2100      	moveq	r1, #0
 800831e:	a883      	add	r0, sp, #524	; 0x20c
 8008320:	f7fe fc78 	bl	8006c14 <inc_lock>
 8008324:	6130      	str	r0, [r6, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008326:	2800      	cmp	r0, #0
 8008328:	d0b8      	beq.n	800829c <f_open+0x150>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800832a:	9c82      	ldr	r4, [sp, #520]	; 0x208
 800832c:	f8dd 822c 	ldr.w	r8, [sp, #556]	; 0x22c
 8008330:	4641      	mov	r1, r8
 8008332:	4620      	mov	r0, r4
 8008334:	f7ff fd3e 	bl	8007db4 <ld_clust>
 8008338:	60b0      	str	r0, [r6, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800833a:	f108 001c 	add.w	r0, r8, #28
 800833e:	f7fe fbfd 	bl	8006b3c <ld_dword>
 8008342:	60f0      	str	r0, [r6, #12]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008344:	2100      	movs	r1, #0
 8008346:	62f1      	str	r1, [r6, #44]	; 0x2c
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008348:	6034      	str	r4, [r6, #0]
			fp->obj.id = fs->id;
 800834a:	88e3      	ldrh	r3, [r4, #6]
 800834c:	80b3      	strh	r3, [r6, #4]
			fp->flag = mode;		/* Set file access mode */
 800834e:	7535      	strb	r5, [r6, #20]
			fp->err = 0;			/* Clear error flag */
 8008350:	7571      	strb	r1, [r6, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008352:	6231      	str	r1, [r6, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008354:	61b1      	str	r1, [r6, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008356:	f106 0830 	add.w	r8, r6, #48	; 0x30
 800835a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800835e:	4640      	mov	r0, r8
 8008360:	f7fe fc09 	bl	8006b76 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008364:	f015 0f20 	tst.w	r5, #32
 8008368:	f43f af05 	beq.w	8008176 <f_open+0x2a>
 800836c:	68f4      	ldr	r4, [r6, #12]
 800836e:	2c00      	cmp	r4, #0
 8008370:	f43f af01 	beq.w	8008176 <f_open+0x2a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008374:	61b4      	str	r4, [r6, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008376:	9b82      	ldr	r3, [sp, #520]	; 0x208
 8008378:	895d      	ldrh	r5, [r3, #10]
 800837a:	899b      	ldrh	r3, [r3, #12]
 800837c:	fb03 f505 	mul.w	r5, r3, r5
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008380:	68b1      	ldr	r1, [r6, #8]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008382:	42ac      	cmp	r4, r5
 8008384:	d89e      	bhi.n	80082c4 <f_open+0x178>
				fp->clust = clst;
 8008386:	61f1      	str	r1, [r6, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008388:	f8dd 9208 	ldr.w	r9, [sp, #520]	; 0x208
 800838c:	f8b9 500c 	ldrh.w	r5, [r9, #12]
 8008390:	fbb4 f3f5 	udiv	r3, r4, r5
 8008394:	fb05 4313 	mls	r3, r5, r3, r4
 8008398:	2b00      	cmp	r3, #0
 800839a:	f43f aeec 	beq.w	8008176 <f_open+0x2a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800839e:	4648      	mov	r0, r9
 80083a0:	f7fe fcca 	bl	8006d38 <clust2sect>
 80083a4:	2800      	cmp	r0, #0
 80083a6:	f47f af68 	bne.w	800827a <f_open+0x12e>
						res = FR_INT_ERR;
 80083aa:	2702      	movs	r7, #2
 80083ac:	e6e1      	b.n	8008172 <f_open+0x26>
 80083ae:	bf00      	nop
 80083b0:	20002ff4 	.word	0x20002ff4

080083b4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80083b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083b8:	b087      	sub	sp, #28
 80083ba:	4604      	mov	r4, r0
 80083bc:	460f      	mov	r7, r1
 80083be:	4615      	mov	r5, r2
 80083c0:	4698      	mov	r8, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 80083c2:	2300      	movs	r3, #0
 80083c4:	f8c8 3000 	str.w	r3, [r8]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80083c8:	a905      	add	r1, sp, #20
 80083ca:	f7fe fd12 	bl	8006df2 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80083ce:	9001      	str	r0, [sp, #4]
 80083d0:	2800      	cmp	r0, #0
 80083d2:	f040 80b3 	bne.w	800853c <f_read+0x188>
 80083d6:	7d63      	ldrb	r3, [r4, #21]
 80083d8:	9301      	str	r3, [sp, #4]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	f040 80ae 	bne.w	800853c <f_read+0x188>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80083e0:	7d23      	ldrb	r3, [r4, #20]
 80083e2:	f013 0301 	ands.w	r3, r3, #1
 80083e6:	9303      	str	r3, [sp, #12]
 80083e8:	f000 80c2 	beq.w	8008570 <f_read+0x1bc>
	remain = fp->obj.objsize - fp->fptr;
 80083ec:	68e3      	ldr	r3, [r4, #12]
 80083ee:	69a2      	ldr	r2, [r4, #24]
 80083f0:	1a9b      	subs	r3, r3, r2
 80083f2:	429d      	cmp	r5, r3
 80083f4:	bf28      	it	cs
 80083f6:	461d      	movcs	r5, r3
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
 80083f8:	2d00      	cmp	r5, #0
 80083fa:	f000 809f 	beq.w	800853c <f_read+0x188>
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80083fe:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8008402:	9302      	str	r3, [sp, #8]
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008404:	46bb      	mov	fp, r7
 8008406:	e05c      	b.n	80084c2 <f_read+0x10e>
					if (fp->cltbl) {
 8008408:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800840a:	b11b      	cbz	r3, 8008414 <f_read+0x60>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800840c:	4620      	mov	r0, r4
 800840e:	f7fe fc9e 	bl	8006d4e <clmt_clust>
 8008412:	e068      	b.n	80084e6 <f_read+0x132>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8008414:	69e1      	ldr	r1, [r4, #28]
 8008416:	4620      	mov	r0, r4
 8008418:	f7fe fe45 	bl	80070a6 <get_fat>
 800841c:	e063      	b.n	80084e6 <f_read+0x132>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800841e:	2302      	movs	r3, #2
 8008420:	7563      	strb	r3, [r4, #21]
 8008422:	9301      	str	r3, [sp, #4]
 8008424:	e08a      	b.n	800853c <f_read+0x188>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008426:	2301      	movs	r3, #1
 8008428:	7563      	strb	r3, [r4, #21]
 800842a:	9b03      	ldr	r3, [sp, #12]
 800842c:	9301      	str	r3, [sp, #4]
 800842e:	e085      	b.n	800853c <f_read+0x188>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008430:	2302      	movs	r3, #2
 8008432:	7563      	strb	r3, [r4, #21]
 8008434:	9301      	str	r3, [sp, #4]
 8008436:	e081      	b.n	800853c <f_read+0x188>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8008438:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800843c:	2b00      	cmp	r3, #0
 800843e:	db04      	blt.n	800844a <f_read+0x96>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008440:	9b05      	ldr	r3, [sp, #20]
 8008442:	899b      	ldrh	r3, [r3, #12]
 8008444:	fb09 f903 	mul.w	r9, r9, r3
				continue;
 8008448:	e02f      	b.n	80084aa <f_read+0xf6>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800844a:	6a20      	ldr	r0, [r4, #32]
 800844c:	1bc0      	subs	r0, r0, r7
 800844e:	4548      	cmp	r0, r9
 8008450:	d2f6      	bcs.n	8008440 <f_read+0x8c>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008452:	9b05      	ldr	r3, [sp, #20]
 8008454:	899a      	ldrh	r2, [r3, #12]
 8008456:	9902      	ldr	r1, [sp, #8]
 8008458:	fb02 b000 	mla	r0, r2, r0, fp
 800845c:	f7fe fb81 	bl	8006b62 <mem_cpy>
 8008460:	e7ee      	b.n	8008440 <f_read+0x8c>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8008462:	6a22      	ldr	r2, [r4, #32]
 8008464:	42ba      	cmp	r2, r7
 8008466:	d00c      	beq.n	8008482 <f_read+0xce>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008468:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800846c:	2b00      	cmp	r3, #0
 800846e:	db69      	blt.n	8008544 <f_read+0x190>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008470:	2301      	movs	r3, #1
 8008472:	463a      	mov	r2, r7
 8008474:	9902      	ldr	r1, [sp, #8]
 8008476:	9805      	ldr	r0, [sp, #20]
 8008478:	7840      	ldrb	r0, [r0, #1]
 800847a:	f7fe fb35 	bl	8006ae8 <disk_read>
 800847e:	2800      	cmp	r0, #0
 8008480:	d171      	bne.n	8008566 <f_read+0x1b2>
			fp->sect = sect;
 8008482:	6227      	str	r7, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008484:	9b05      	ldr	r3, [sp, #20]
 8008486:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 800848a:	69a1      	ldr	r1, [r4, #24]
 800848c:	fbb1 f3f9 	udiv	r3, r1, r9
 8008490:	fb09 1113 	mls	r1, r9, r3, r1
 8008494:	eba9 0901 	sub.w	r9, r9, r1
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8008498:	45a9      	cmp	r9, r5
 800849a:	bf28      	it	cs
 800849c:	46a9      	movcs	r9, r5
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800849e:	464a      	mov	r2, r9
 80084a0:	9b02      	ldr	r3, [sp, #8]
 80084a2:	4419      	add	r1, r3
 80084a4:	4658      	mov	r0, fp
 80084a6:	f7fe fb5c 	bl	8006b62 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80084aa:	44cb      	add	fp, r9
 80084ac:	69a3      	ldr	r3, [r4, #24]
 80084ae:	444b      	add	r3, r9
 80084b0:	61a3      	str	r3, [r4, #24]
 80084b2:	f8d8 3000 	ldr.w	r3, [r8]
 80084b6:	444b      	add	r3, r9
 80084b8:	f8c8 3000 	str.w	r3, [r8]
	for ( ;  btr;								/* Repeat until all data read */
 80084bc:	ebb5 0509 	subs.w	r5, r5, r9
 80084c0:	d03c      	beq.n	800853c <f_read+0x188>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80084c2:	69a1      	ldr	r1, [r4, #24]
 80084c4:	9805      	ldr	r0, [sp, #20]
 80084c6:	8983      	ldrh	r3, [r0, #12]
 80084c8:	fbb1 f2f3 	udiv	r2, r1, r3
 80084cc:	fb03 1212 	mls	r2, r3, r2, r1
 80084d0:	2a00      	cmp	r2, #0
 80084d2:	d1d7      	bne.n	8008484 <f_read+0xd0>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80084d4:	8946      	ldrh	r6, [r0, #10]
 80084d6:	3e01      	subs	r6, #1
 80084d8:	fbb1 f3f3 	udiv	r3, r1, r3
			if (csect == 0) {					/* On the cluster boundary? */
 80084dc:	401e      	ands	r6, r3
 80084de:	d108      	bne.n	80084f2 <f_read+0x13e>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80084e0:	2900      	cmp	r1, #0
 80084e2:	d191      	bne.n	8008408 <f_read+0x54>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80084e4:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80084e6:	2801      	cmp	r0, #1
 80084e8:	d999      	bls.n	800841e <f_read+0x6a>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80084ea:	f1b0 3fff 	cmp.w	r0, #4294967295
 80084ee:	d09a      	beq.n	8008426 <f_read+0x72>
				fp->clust = clst;				/* Update current cluster */
 80084f0:	61e0      	str	r0, [r4, #28]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80084f2:	f8dd a014 	ldr.w	sl, [sp, #20]
 80084f6:	69e1      	ldr	r1, [r4, #28]
 80084f8:	4650      	mov	r0, sl
 80084fa:	f7fe fc1d 	bl	8006d38 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 80084fe:	4607      	mov	r7, r0
 8008500:	2800      	cmp	r0, #0
 8008502:	d095      	beq.n	8008430 <f_read+0x7c>
			sect += csect;
 8008504:	4437      	add	r7, r6
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8008506:	f8ba 900c 	ldrh.w	r9, [sl, #12]
			if (cc) {							/* Read maximum contiguous sectors directly */
 800850a:	45a9      	cmp	r9, r5
 800850c:	d8a9      	bhi.n	8008462 <f_read+0xae>
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800850e:	fbb5 f9f9 	udiv	r9, r5, r9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008512:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 8008516:	eb06 0209 	add.w	r2, r6, r9
 800851a:	429a      	cmp	r2, r3
					cc = fs->csize - csect;
 800851c:	bf88      	it	hi
 800851e:	eba3 0906 	subhi.w	r9, r3, r6
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008522:	464b      	mov	r3, r9
 8008524:	463a      	mov	r2, r7
 8008526:	4659      	mov	r1, fp
 8008528:	f89a 0001 	ldrb.w	r0, [sl, #1]
 800852c:	f7fe fadc 	bl	8006ae8 <disk_read>
 8008530:	2800      	cmp	r0, #0
 8008532:	d081      	beq.n	8008438 <f_read+0x84>
 8008534:	2301      	movs	r3, #1
 8008536:	7563      	strb	r3, [r4, #21]
 8008538:	9b03      	ldr	r3, [sp, #12]
 800853a:	9301      	str	r3, [sp, #4]
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 800853c:	9801      	ldr	r0, [sp, #4]
 800853e:	b007      	add	sp, #28
 8008540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008544:	2301      	movs	r3, #1
 8008546:	9902      	ldr	r1, [sp, #8]
 8008548:	f89a 0001 	ldrb.w	r0, [sl, #1]
 800854c:	f7fe fada 	bl	8006b04 <disk_write>
 8008550:	b920      	cbnz	r0, 800855c <f_read+0x1a8>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008552:	7d23      	ldrb	r3, [r4, #20]
 8008554:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008558:	7523      	strb	r3, [r4, #20]
 800855a:	e789      	b.n	8008470 <f_read+0xbc>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800855c:	2301      	movs	r3, #1
 800855e:	7563      	strb	r3, [r4, #21]
 8008560:	9b03      	ldr	r3, [sp, #12]
 8008562:	9301      	str	r3, [sp, #4]
 8008564:	e7ea      	b.n	800853c <f_read+0x188>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008566:	2301      	movs	r3, #1
 8008568:	7563      	strb	r3, [r4, #21]
 800856a:	9b03      	ldr	r3, [sp, #12]
 800856c:	9301      	str	r3, [sp, #4]
 800856e:	e7e5      	b.n	800853c <f_read+0x188>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8008570:	2307      	movs	r3, #7
 8008572:	9301      	str	r3, [sp, #4]
 8008574:	e7e2      	b.n	800853c <f_read+0x188>

08008576 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008576:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800857a:	b085      	sub	sp, #20
 800857c:	4604      	mov	r4, r0
 800857e:	460f      	mov	r7, r1
 8008580:	4615      	mov	r5, r2
 8008582:	4698      	mov	r8, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 8008584:	2300      	movs	r3, #0
 8008586:	f8c8 3000 	str.w	r3, [r8]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800858a:	a903      	add	r1, sp, #12
 800858c:	f7fe fc31 	bl	8006df2 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008590:	9000      	str	r0, [sp, #0]
 8008592:	2800      	cmp	r0, #0
 8008594:	d14d      	bne.n	8008632 <f_write+0xbc>
 8008596:	7d63      	ldrb	r3, [r4, #21]
 8008598:	9300      	str	r3, [sp, #0]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d149      	bne.n	8008632 <f_write+0xbc>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800859e:	7d23      	ldrb	r3, [r4, #20]
 80085a0:	f013 0f02 	tst.w	r3, #2
 80085a4:	f000 80dd 	beq.w	8008762 <f_write+0x1ec>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80085a8:	69a3      	ldr	r3, [r4, #24]
 80085aa:	42eb      	cmn	r3, r5
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80085ac:	bf28      	it	cs
 80085ae:	43dd      	mvncs	r5, r3
	}

	for ( ;  btw;							/* Repeat until all data written */
 80085b0:	2d00      	cmp	r5, #0
 80085b2:	f000 80d1 	beq.w	8008758 <f_write+0x1e2>
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80085b6:	f104 0330 	add.w	r3, r4, #48	; 0x30
 80085ba:	9301      	str	r3, [sp, #4]
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80085bc:	46bb      	mov	fp, r7
 80085be:	e0a3      	b.n	8008708 <f_write+0x192>
					if (fp->cltbl) {
 80085c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d039      	beq.n	800863a <f_write+0xc4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80085c6:	4620      	mov	r0, r4
 80085c8:	f7fe fbc1 	bl	8006d4e <clmt_clust>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80085cc:	2800      	cmp	r0, #0
 80085ce:	f000 80c3 	beq.w	8008758 <f_write+0x1e2>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80085d2:	2801      	cmp	r0, #1
 80085d4:	d036      	beq.n	8008644 <f_write+0xce>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80085d6:	f1b0 3fff 	cmp.w	r0, #4294967295
 80085da:	d037      	beq.n	800864c <f_write+0xd6>
				fp->clust = clst;			/* Update current cluster */
 80085dc:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80085de:	68a3      	ldr	r3, [r4, #8]
 80085e0:	b903      	cbnz	r3, 80085e4 <f_write+0x6e>
 80085e2:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80085e4:	f994 3014 	ldrsb.w	r3, [r4, #20]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	db33      	blt.n	8008654 <f_write+0xde>
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80085ec:	f8dd a00c 	ldr.w	sl, [sp, #12]
 80085f0:	69e1      	ldr	r1, [r4, #28]
 80085f2:	4650      	mov	r0, sl
 80085f4:	f7fe fba0 	bl	8006d38 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 80085f8:	4607      	mov	r7, r0
 80085fa:	2800      	cmp	r0, #0
 80085fc:	d03b      	beq.n	8008676 <f_write+0x100>
			sect += csect;
 80085fe:	4437      	add	r7, r6
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008600:	f8ba 900c 	ldrh.w	r9, [sl, #12]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008604:	45a9      	cmp	r9, r5
 8008606:	d84f      	bhi.n	80086a8 <f_write+0x132>
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008608:	fbb5 f9f9 	udiv	r9, r5, r9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800860c:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 8008610:	eb06 0209 	add.w	r2, r6, r9
 8008614:	429a      	cmp	r2, r3
					cc = fs->csize - csect;
 8008616:	bf88      	it	hi
 8008618:	eba3 0906 	subhi.w	r9, r3, r6
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800861c:	464b      	mov	r3, r9
 800861e:	463a      	mov	r2, r7
 8008620:	4659      	mov	r1, fp
 8008622:	f89a 0001 	ldrb.w	r0, [sl, #1]
 8008626:	f7fe fa6d 	bl	8006b04 <disk_write>
 800862a:	b340      	cbz	r0, 800867e <f_write+0x108>
 800862c:	2301      	movs	r3, #1
 800862e:	7563      	strb	r3, [r4, #21]
 8008630:	9300      	str	r3, [sp, #0]
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
 8008632:	9800      	ldr	r0, [sp, #0]
 8008634:	b005      	add	sp, #20
 8008636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800863a:	69e1      	ldr	r1, [r4, #28]
 800863c:	4620      	mov	r0, r4
 800863e:	f7fe fe14 	bl	800726a <create_chain>
 8008642:	e7c3      	b.n	80085cc <f_write+0x56>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008644:	2302      	movs	r3, #2
 8008646:	7563      	strb	r3, [r4, #21]
 8008648:	9300      	str	r3, [sp, #0]
 800864a:	e7f2      	b.n	8008632 <f_write+0xbc>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800864c:	2301      	movs	r3, #1
 800864e:	7563      	strb	r3, [r4, #21]
 8008650:	9300      	str	r3, [sp, #0]
 8008652:	e7ee      	b.n	8008632 <f_write+0xbc>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008654:	2301      	movs	r3, #1
 8008656:	6a22      	ldr	r2, [r4, #32]
 8008658:	9901      	ldr	r1, [sp, #4]
 800865a:	9803      	ldr	r0, [sp, #12]
 800865c:	7840      	ldrb	r0, [r0, #1]
 800865e:	f7fe fa51 	bl	8006b04 <disk_write>
 8008662:	b920      	cbnz	r0, 800866e <f_write+0xf8>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008664:	7d23      	ldrb	r3, [r4, #20]
 8008666:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800866a:	7523      	strb	r3, [r4, #20]
 800866c:	e7be      	b.n	80085ec <f_write+0x76>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800866e:	2301      	movs	r3, #1
 8008670:	7563      	strb	r3, [r4, #21]
 8008672:	9300      	str	r3, [sp, #0]
 8008674:	e7dd      	b.n	8008632 <f_write+0xbc>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008676:	2302      	movs	r3, #2
 8008678:	7563      	strb	r3, [r4, #21]
 800867a:	9300      	str	r3, [sp, #0]
 800867c:	e7d9      	b.n	8008632 <f_write+0xbc>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800867e:	6a21      	ldr	r1, [r4, #32]
 8008680:	1bc9      	subs	r1, r1, r7
 8008682:	4549      	cmp	r1, r9
 8008684:	d304      	bcc.n	8008690 <f_write+0x11a>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008686:	9b03      	ldr	r3, [sp, #12]
 8008688:	899b      	ldrh	r3, [r3, #12]
 800868a:	fb09 f903 	mul.w	r9, r9, r3
				continue;
 800868e:	e02a      	b.n	80086e6 <f_write+0x170>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008690:	9b03      	ldr	r3, [sp, #12]
 8008692:	899a      	ldrh	r2, [r3, #12]
 8008694:	fb02 b101 	mla	r1, r2, r1, fp
 8008698:	9801      	ldr	r0, [sp, #4]
 800869a:	f7fe fa62 	bl	8006b62 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800869e:	7d23      	ldrb	r3, [r4, #20]
 80086a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086a4:	7523      	strb	r3, [r4, #20]
 80086a6:	e7ee      	b.n	8008686 <f_write+0x110>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80086a8:	6a23      	ldr	r3, [r4, #32]
 80086aa:	42bb      	cmp	r3, r7
 80086ac:	d003      	beq.n	80086b6 <f_write+0x140>
 80086ae:	69a2      	ldr	r2, [r4, #24]
 80086b0:	68e3      	ldr	r3, [r4, #12]
 80086b2:	429a      	cmp	r2, r3
 80086b4:	d343      	bcc.n	800873e <f_write+0x1c8>
			fp->sect = sect;
 80086b6:	6227      	str	r7, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80086b8:	9b03      	ldr	r3, [sp, #12]
 80086ba:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 80086be:	69a0      	ldr	r0, [r4, #24]
 80086c0:	fbb0 f3f9 	udiv	r3, r0, r9
 80086c4:	fb09 0013 	mls	r0, r9, r3, r0
 80086c8:	eba9 0900 	sub.w	r9, r9, r0
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80086cc:	45a9      	cmp	r9, r5
 80086ce:	bf28      	it	cs
 80086d0:	46a9      	movcs	r9, r5
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80086d2:	464a      	mov	r2, r9
 80086d4:	4659      	mov	r1, fp
 80086d6:	9b01      	ldr	r3, [sp, #4]
 80086d8:	4418      	add	r0, r3
 80086da:	f7fe fa42 	bl	8006b62 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80086de:	7d23      	ldrb	r3, [r4, #20]
 80086e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80086e4:	7523      	strb	r3, [r4, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80086e6:	44cb      	add	fp, r9
 80086e8:	69a3      	ldr	r3, [r4, #24]
 80086ea:	444b      	add	r3, r9
 80086ec:	61a3      	str	r3, [r4, #24]
 80086ee:	68e2      	ldr	r2, [r4, #12]
 80086f0:	4293      	cmp	r3, r2
 80086f2:	bf38      	it	cc
 80086f4:	4613      	movcc	r3, r2
 80086f6:	60e3      	str	r3, [r4, #12]
 80086f8:	f8d8 3000 	ldr.w	r3, [r8]
 80086fc:	444b      	add	r3, r9
 80086fe:	f8c8 3000 	str.w	r3, [r8]
	for ( ;  btw;							/* Repeat until all data written */
 8008702:	ebb5 0509 	subs.w	r5, r5, r9
 8008706:	d027      	beq.n	8008758 <f_write+0x1e2>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008708:	69a1      	ldr	r1, [r4, #24]
 800870a:	9803      	ldr	r0, [sp, #12]
 800870c:	8983      	ldrh	r3, [r0, #12]
 800870e:	fbb1 f2f3 	udiv	r2, r1, r3
 8008712:	fb03 1212 	mls	r2, r3, r2, r1
 8008716:	2a00      	cmp	r2, #0
 8008718:	d1ce      	bne.n	80086b8 <f_write+0x142>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800871a:	8946      	ldrh	r6, [r0, #10]
 800871c:	3e01      	subs	r6, #1
 800871e:	fbb1 f3f3 	udiv	r3, r1, r3
			if (csect == 0) {				/* On the cluster boundary? */
 8008722:	401e      	ands	r6, r3
 8008724:	f47f af5e 	bne.w	80085e4 <f_write+0x6e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008728:	2900      	cmp	r1, #0
 800872a:	f47f af49 	bne.w	80085c0 <f_write+0x4a>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800872e:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 8008730:	2800      	cmp	r0, #0
 8008732:	f47f af4e 	bne.w	80085d2 <f_write+0x5c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008736:	4620      	mov	r0, r4
 8008738:	f7fe fd97 	bl	800726a <create_chain>
 800873c:	e746      	b.n	80085cc <f_write+0x56>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800873e:	2301      	movs	r3, #1
 8008740:	463a      	mov	r2, r7
 8008742:	9901      	ldr	r1, [sp, #4]
 8008744:	f89a 0001 	ldrb.w	r0, [sl, #1]
 8008748:	f7fe f9ce 	bl	8006ae8 <disk_read>
				fp->fptr < fp->obj.objsize &&
 800874c:	2800      	cmp	r0, #0
 800874e:	d0b2      	beq.n	80086b6 <f_write+0x140>
					ABORT(fs, FR_DISK_ERR);
 8008750:	2301      	movs	r3, #1
 8008752:	7563      	strb	r3, [r4, #21]
 8008754:	9300      	str	r3, [sp, #0]
 8008756:	e76c      	b.n	8008632 <f_write+0xbc>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008758:	7d23      	ldrb	r3, [r4, #20]
 800875a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800875e:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 8008760:	e767      	b.n	8008632 <f_write+0xbc>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008762:	2307      	movs	r3, #7
 8008764:	9300      	str	r3, [sp, #0]
 8008766:	e764      	b.n	8008632 <f_write+0xbc>

08008768 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008768:	b570      	push	{r4, r5, r6, lr}
 800876a:	b082      	sub	sp, #8
 800876c:	4604      	mov	r4, r0
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800876e:	a901      	add	r1, sp, #4
 8008770:	f7fe fb3f 	bl	8006df2 <validate>
	if (res == FR_OK) {
 8008774:	b970      	cbnz	r0, 8008794 <f_sync+0x2c>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008776:	7d23      	ldrb	r3, [r4, #20]
 8008778:	f013 0040 	ands.w	r0, r3, #64	; 0x40
 800877c:	d00a      	beq.n	8008794 <f_sync+0x2c>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800877e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008782:	d109      	bne.n	8008798 <f_sync+0x30>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008784:	f7fc fba0 	bl	8004ec8 <get_fattime>
 8008788:	4605      	mov	r5, r0
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800878a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800878c:	9801      	ldr	r0, [sp, #4]
 800878e:	f7fe fb80 	bl	8006e92 <move_window>
				if (res == FR_OK) {
 8008792:	b178      	cbz	r0, 80087b4 <f_sync+0x4c>
			}
		}
	}

	LEAVE_FF(fs, res);
}
 8008794:	b002      	add	sp, #8
 8008796:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008798:	2301      	movs	r3, #1
 800879a:	6a22      	ldr	r2, [r4, #32]
 800879c:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80087a0:	9801      	ldr	r0, [sp, #4]
 80087a2:	7840      	ldrb	r0, [r0, #1]
 80087a4:	f7fe f9ae 	bl	8006b04 <disk_write>
 80087a8:	bb30      	cbnz	r0, 80087f8 <f_sync+0x90>
				fp->flag &= (BYTE)~FA_DIRTY;
 80087aa:	7d23      	ldrb	r3, [r4, #20]
 80087ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087b0:	7523      	strb	r3, [r4, #20]
 80087b2:	e7e7      	b.n	8008784 <f_sync+0x1c>
					dir = fp->dir_ptr;
 80087b4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80087b6:	7af3      	ldrb	r3, [r6, #11]
 80087b8:	f043 0320 	orr.w	r3, r3, #32
 80087bc:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80087be:	68a2      	ldr	r2, [r4, #8]
 80087c0:	4631      	mov	r1, r6
 80087c2:	6820      	ldr	r0, [r4, #0]
 80087c4:	f7fe fc62 	bl	800708c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80087c8:	68e1      	ldr	r1, [r4, #12]
 80087ca:	f106 001c 	add.w	r0, r6, #28
 80087ce:	f7fe f9c0 	bl	8006b52 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80087d2:	4629      	mov	r1, r5
 80087d4:	f106 0016 	add.w	r0, r6, #22
 80087d8:	f7fe f9bb 	bl	8006b52 <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
 80087dc:	2300      	movs	r3, #0
 80087de:	74b3      	strb	r3, [r6, #18]
	*ptr++ = (BYTE)val;
 80087e0:	74f3      	strb	r3, [r6, #19]
					fs->wflag = 1;
 80087e2:	9b01      	ldr	r3, [sp, #4]
 80087e4:	2201      	movs	r2, #1
 80087e6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80087e8:	9801      	ldr	r0, [sp, #4]
 80087ea:	f7fe fb6d 	bl	8006ec8 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 80087ee:	7d23      	ldrb	r3, [r4, #20]
 80087f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087f4:	7523      	strb	r3, [r4, #20]
 80087f6:	e7cd      	b.n	8008794 <f_sync+0x2c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80087f8:	2001      	movs	r0, #1
 80087fa:	e7cb      	b.n	8008794 <f_sync+0x2c>

080087fc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80087fc:	b510      	push	{r4, lr}
 80087fe:	b082      	sub	sp, #8
 8008800:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008802:	f7ff ffb1 	bl	8008768 <f_sync>
	if (res == FR_OK)
 8008806:	b108      	cbz	r0, 800880c <f_close+0x10>
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 8008808:	b002      	add	sp, #8
 800880a:	bd10      	pop	{r4, pc}
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800880c:	a901      	add	r1, sp, #4
 800880e:	4620      	mov	r0, r4
 8008810:	f7fe faef 	bl	8006df2 <validate>
		if (res == FR_OK) {
 8008814:	2800      	cmp	r0, #0
 8008816:	d1f7      	bne.n	8008808 <f_close+0xc>
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008818:	6920      	ldr	r0, [r4, #16]
 800881a:	f7fe fa57 	bl	8006ccc <dec_lock>
			if (res == FR_OK)
 800881e:	2800      	cmp	r0, #0
 8008820:	d1f2      	bne.n	8008808 <f_close+0xc>
				fp->obj.fs = 0;			/* Invalidate file object */
 8008822:	6020      	str	r0, [r4, #0]
 8008824:	e7f0      	b.n	8008808 <f_close+0xc>
	...

08008828 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8008828:	4b13      	ldr	r3, [pc, #76]	; (8008878 <FATFS_LinkDriverEx+0x50>)
 800882a:	7a5b      	ldrb	r3, [r3, #9]
 800882c:	bb13      	cbnz	r3, 8008874 <FATFS_LinkDriverEx+0x4c>
{
 800882e:	b510      	push	{r4, lr}
 8008830:	4604      	mov	r4, r0
 8008832:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  {
    disk.is_initialized[disk.nbr] = 0;
 8008836:	4b10      	ldr	r3, [pc, #64]	; (8008878 <FATFS_LinkDriverEx+0x50>)
 8008838:	f893 c009 	ldrb.w	ip, [r3, #9]
 800883c:	fa5f fc8c 	uxtb.w	ip, ip
 8008840:	f04f 0e00 	mov.w	lr, #0
 8008844:	f803 e00c 	strb.w	lr, [r3, ip]
    disk.drv[disk.nbr] = drv;
 8008848:	f893 c009 	ldrb.w	ip, [r3, #9]
 800884c:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8008850:	f8cc 4004 	str.w	r4, [ip, #4]
    disk.lun[disk.nbr] = lun;
 8008854:	7a5c      	ldrb	r4, [r3, #9]
 8008856:	441c      	add	r4, r3
 8008858:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 800885a:	7a5a      	ldrb	r2, [r3, #9]
 800885c:	1c54      	adds	r4, r2, #1
 800885e:	b2e4      	uxtb	r4, r4
 8008860:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
 8008862:	3230      	adds	r2, #48	; 0x30
 8008864:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 8008866:	233a      	movs	r3, #58	; 0x3a
 8008868:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 800886a:	232f      	movs	r3, #47	; 0x2f
 800886c:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 800886e:	f881 e003 	strb.w	lr, [r1, #3]
    ret = 0;
  }

  return ret;
}
 8008872:	bd10      	pop	{r4, pc}
  uint8_t ret = 1;
 8008874:	2001      	movs	r0, #1
}
 8008876:	4770      	bx	lr
 8008878:	20003018 	.word	0x20003018

0800887c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800887c:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 800887e:	2200      	movs	r2, #0
 8008880:	f7ff ffd2 	bl	8008828 <FATFS_LinkDriverEx>
}
 8008884:	bd08      	pop	{r3, pc}
	...

08008888 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8008888:	287f      	cmp	r0, #127	; 0x7f
 800888a:	d916      	bls.n	80088ba <ff_convert+0x32>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 800888c:	b131      	cbz	r1, 800889c <ff_convert+0x14>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800888e:	28ff      	cmp	r0, #255	; 0xff
 8008890:	d812      	bhi.n	80088b8 <ff_convert+0x30>
 8008892:	3880      	subs	r0, #128	; 0x80
 8008894:	4b09      	ldr	r3, [pc, #36]	; (80088bc <ff_convert+0x34>)
 8008896:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800889a:	4770      	bx	lr
 800889c:	4a07      	ldr	r2, [pc, #28]	; (80088bc <ff_convert+0x34>)

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800889e:	2300      	movs	r3, #0
				if (chr == Tbl[c]) break;
 80088a0:	f832 1b02 	ldrh.w	r1, [r2], #2
 80088a4:	4281      	cmp	r1, r0
 80088a6:	d003      	beq.n	80088b0 <ff_convert+0x28>
			for (c = 0; c < 0x80; c++) {
 80088a8:	3301      	adds	r3, #1
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	2b80      	cmp	r3, #128	; 0x80
 80088ae:	d1f7      	bne.n	80088a0 <ff_convert+0x18>
			}
			c = (c + 0x80) & 0xFF;
 80088b0:	f103 0080 	add.w	r0, r3, #128	; 0x80
 80088b4:	b2c0      	uxtb	r0, r0
 80088b6:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80088b8:	2000      	movs	r0, #0
		}
	}

	return c;
}
 80088ba:	4770      	bx	lr
 80088bc:	08009930 	.word	0x08009930

080088c0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80088c0:	b530      	push	{r4, r5, lr}
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80088c2:	4a22      	ldr	r2, [pc, #136]	; (800894c <ff_wtoupper+0x8c>)
 80088c4:	4b22      	ldr	r3, [pc, #136]	; (8008950 <ff_wtoupper+0x90>)
 80088c6:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80088ca:	bf28      	it	cs
 80088cc:	461a      	movcs	r2, r3
	for (;;) {
		bc = *p++;								/* Get block base */
		if (!bc || chr < bc) break;
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
		if (chr < bc + nc) {	/* In the block? */
 80088ce:	4605      	mov	r5, r0
 80088d0:	3204      	adds	r2, #4
		bc = *p++;								/* Get block base */
 80088d2:	4694      	mov	ip, r2
 80088d4:	f832 1c04 	ldrh.w	r1, [r2, #-4]
		if (!bc || chr < bc) break;
 80088d8:	b1d9      	cbz	r1, 8008912 <ff_wtoupper+0x52>
 80088da:	4288      	cmp	r0, r1
 80088dc:	d319      	bcc.n	8008912 <ff_wtoupper+0x52>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80088de:	f832 3c02 	ldrh.w	r3, [r2, #-2]
 80088e2:	0a1c      	lsrs	r4, r3, #8
 80088e4:	b2db      	uxtb	r3, r3
		if (chr < bc + nc) {	/* In the block? */
 80088e6:	eb03 0e01 	add.w	lr, r3, r1
 80088ea:	4570      	cmp	r0, lr
 80088ec:	db05      	blt.n	80088fa <ff_wtoupper+0x3a>
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
 80088ee:	3204      	adds	r2, #4
 80088f0:	2c00      	cmp	r4, #0
 80088f2:	d1ee      	bne.n	80088d2 <ff_wtoupper+0x12>
 80088f4:	eb0c 0243 	add.w	r2, ip, r3, lsl #1
 80088f8:	e7ea      	b.n	80088d0 <ff_wtoupper+0x10>
			switch (cmd) {
 80088fa:	2c08      	cmp	r4, #8
 80088fc:	d809      	bhi.n	8008912 <ff_wtoupper+0x52>
 80088fe:	e8df f004 	tbb	[pc, r4]
 8008902:	0905      	.short	0x0905
 8008904:	1815120f 	.word	0x1815120f
 8008908:	1e1b      	.short	0x1e1b
 800890a:	21          	.byte	0x21
 800890b:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800890c:	1a69      	subs	r1, r5, r1
 800890e:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
	}

	return chr;
}
 8008912:	bd30      	pop	{r4, r5, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8008914:	1a43      	subs	r3, r0, r1
 8008916:	f003 0301 	and.w	r3, r3, #1
 800891a:	1ac0      	subs	r0, r0, r3
 800891c:	b280      	uxth	r0, r0
 800891e:	e7f8      	b.n	8008912 <ff_wtoupper+0x52>
			case 2: chr -= 16; break;				/* Shift -16 */
 8008920:	3810      	subs	r0, #16
 8008922:	b280      	uxth	r0, r0
 8008924:	e7f5      	b.n	8008912 <ff_wtoupper+0x52>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8008926:	3820      	subs	r0, #32
 8008928:	b280      	uxth	r0, r0
 800892a:	e7f2      	b.n	8008912 <ff_wtoupper+0x52>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800892c:	3830      	subs	r0, #48	; 0x30
 800892e:	b280      	uxth	r0, r0
 8008930:	e7ef      	b.n	8008912 <ff_wtoupper+0x52>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8008932:	381a      	subs	r0, #26
 8008934:	b280      	uxth	r0, r0
 8008936:	e7ec      	b.n	8008912 <ff_wtoupper+0x52>
			case 6:	chr += 8; break;				/* Shift +8 */
 8008938:	3008      	adds	r0, #8
 800893a:	b280      	uxth	r0, r0
 800893c:	e7e9      	b.n	8008912 <ff_wtoupper+0x52>
			case 7: chr -= 80; break;				/* Shift -80 */
 800893e:	3850      	subs	r0, #80	; 0x50
 8008940:	b280      	uxth	r0, r0
 8008942:	e7e6      	b.n	8008912 <ff_wtoupper+0x52>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8008944:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 8008948:	b280      	uxth	r0, r0
 800894a:	e7e2      	b.n	8008912 <ff_wtoupper+0x52>
 800894c:	08009a30 	.word	0x08009a30
 8008950:	08009c24 	.word	0x08009c24

08008954 <USBH_UserProcess>:
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008954:	2904      	cmp	r1, #4
 8008956:	d00c      	beq.n	8008972 <USBH_UserProcess+0x1e>
 8008958:	2905      	cmp	r1, #5
 800895a:	d002      	beq.n	8008962 <USBH_UserProcess+0xe>
 800895c:	2902      	cmp	r1, #2
 800895e:	d004      	beq.n	800896a <USBH_UserProcess+0x16>

  default:
  break;
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008960:	4770      	bx	lr
  Appli_state = APPLICATION_DISCONNECT;
 8008962:	4b06      	ldr	r3, [pc, #24]	; (800897c <USBH_UserProcess+0x28>)
 8008964:	2203      	movs	r2, #3
 8008966:	701a      	strb	r2, [r3, #0]
  break;
 8008968:	4770      	bx	lr
  Appli_state = APPLICATION_READY;
 800896a:	4b04      	ldr	r3, [pc, #16]	; (800897c <USBH_UserProcess+0x28>)
 800896c:	2202      	movs	r2, #2
 800896e:	701a      	strb	r2, [r3, #0]
  break;
 8008970:	4770      	bx	lr
  Appli_state = APPLICATION_START;
 8008972:	4b02      	ldr	r3, [pc, #8]	; (800897c <USBH_UserProcess+0x28>)
 8008974:	2201      	movs	r2, #1
 8008976:	701a      	strb	r2, [r3, #0]
}
 8008978:	e7f2      	b.n	8008960 <USBH_UserProcess+0xc>
 800897a:	bf00      	nop
 800897c:	20003024 	.word	0x20003024

08008980 <MX_USB_HOST_Init>:
{
 8008980:	b508      	push	{r3, lr}
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008982:	2201      	movs	r2, #1
 8008984:	490b      	ldr	r1, [pc, #44]	; (80089b4 <MX_USB_HOST_Init+0x34>)
 8008986:	480c      	ldr	r0, [pc, #48]	; (80089b8 <MX_USB_HOST_Init+0x38>)
 8008988:	f7fd f9f8 	bl	8005d7c <USBH_Init>
 800898c:	b948      	cbnz	r0, 80089a2 <MX_USB_HOST_Init+0x22>
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800898e:	490b      	ldr	r1, [pc, #44]	; (80089bc <MX_USB_HOST_Init+0x3c>)
 8008990:	4809      	ldr	r0, [pc, #36]	; (80089b8 <MX_USB_HOST_Init+0x38>)
 8008992:	f7fd fa12 	bl	8005dba <USBH_RegisterClass>
 8008996:	b938      	cbnz	r0, 80089a8 <MX_USB_HOST_Init+0x28>
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008998:	4807      	ldr	r0, [pc, #28]	; (80089b8 <MX_USB_HOST_Init+0x38>)
 800899a:	f7fd fa4a 	bl	8005e32 <USBH_Start>
 800899e:	b930      	cbnz	r0, 80089ae <MX_USB_HOST_Init+0x2e>
}
 80089a0:	bd08      	pop	{r3, pc}
    Error_Handler();
 80089a2:	f7f8 fbf7 	bl	8001194 <Error_Handler>
 80089a6:	e7f2      	b.n	800898e <MX_USB_HOST_Init+0xe>
    Error_Handler();
 80089a8:	f7f8 fbf4 	bl	8001194 <Error_Handler>
 80089ac:	e7f4      	b.n	8008998 <MX_USB_HOST_Init+0x18>
    Error_Handler();
 80089ae:	f7f8 fbf1 	bl	8001194 <Error_Handler>
}
 80089b2:	e7f5      	b.n	80089a0 <MX_USB_HOST_Init+0x20>
 80089b4:	08008955 	.word	0x08008955
 80089b8:	20003028 	.word	0x20003028
 80089bc:	20000014 	.word	0x20000014

080089c0 <MX_USB_HOST_Process>:
{
 80089c0:	b508      	push	{r3, lr}
  USBH_Process(&hUsbHostFS);
 80089c2:	4802      	ldr	r0, [pc, #8]	; (80089cc <MX_USB_HOST_Process+0xc>)
 80089c4:	f7fd fa3f 	bl	8005e46 <USBH_Process>
}
 80089c8:	bd08      	pop	{r3, pc}
 80089ca:	bf00      	nop
 80089cc:	20003028 	.word	0x20003028

080089d0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80089d0:	b570      	push	{r4, r5, r6, lr}
 80089d2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80089d4:	2300      	movs	r3, #0
 80089d6:	9303      	str	r3, [sp, #12]
 80089d8:	9304      	str	r3, [sp, #16]
 80089da:	9305      	str	r3, [sp, #20]
 80089dc:	9306      	str	r3, [sp, #24]
 80089de:	9307      	str	r3, [sp, #28]
  if(hcdHandle->Instance==USB_OTG_FS)
 80089e0:	6803      	ldr	r3, [r0, #0]
 80089e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80089e6:	d001      	beq.n	80089ec <HAL_HCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80089e8:	b008      	add	sp, #32
 80089ea:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80089ec:	2500      	movs	r5, #0
 80089ee:	9501      	str	r5, [sp, #4]
 80089f0:	4c1b      	ldr	r4, [pc, #108]	; (8008a60 <HAL_HCD_MspInit+0x90>)
 80089f2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80089f4:	f043 0301 	orr.w	r3, r3, #1
 80089f8:	6323      	str	r3, [r4, #48]	; 0x30
 80089fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80089fc:	f003 0301 	and.w	r3, r3, #1
 8008a00:	9301      	str	r3, [sp, #4]
 8008a02:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008a04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a08:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a0a:	4e16      	ldr	r6, [pc, #88]	; (8008a64 <HAL_HCD_MspInit+0x94>)
 8008a0c:	a903      	add	r1, sp, #12
 8008a0e:	4630      	mov	r0, r6
 8008a10:	f7f9 f8a2 	bl	8001b58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008a14:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008a18:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a1a:	2302      	movs	r3, #2
 8008a1c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a1e:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a20:	2303      	movs	r3, #3
 8008a22:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008a24:	230a      	movs	r3, #10
 8008a26:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a28:	a903      	add	r1, sp, #12
 8008a2a:	4630      	mov	r0, r6
 8008a2c:	f7f9 f894 	bl	8001b58 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008a30:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008a32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a36:	6363      	str	r3, [r4, #52]	; 0x34
 8008a38:	9502      	str	r5, [sp, #8]
 8008a3a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008a3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008a40:	6463      	str	r3, [r4, #68]	; 0x44
 8008a42:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008a44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a48:	9302      	str	r3, [sp, #8]
 8008a4a:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008a4c:	462a      	mov	r2, r5
 8008a4e:	4629      	mov	r1, r5
 8008a50:	2043      	movs	r0, #67	; 0x43
 8008a52:	f7f8 fe39 	bl	80016c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008a56:	2043      	movs	r0, #67	; 0x43
 8008a58:	f7f8 fe6c 	bl	8001734 <HAL_NVIC_EnableIRQ>
}
 8008a5c:	e7c4      	b.n	80089e8 <HAL_HCD_MspInit+0x18>
 8008a5e:	bf00      	nop
 8008a60:	40023800 	.word	0x40023800
 8008a64:	40020000 	.word	0x40020000

08008a68 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008a68:	b508      	push	{r3, lr}
  USBH_LL_IncTimer(hhcd->pData);
 8008a6a:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 8008a6e:	f7fd fc4e 	bl	800630e <USBH_LL_IncTimer>
}
 8008a72:	bd08      	pop	{r3, pc}

08008a74 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008a74:	b508      	push	{r3, lr}
  USBH_LL_Connect(hhcd->pData);
 8008a76:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 8008a7a:	f7fd fc62 	bl	8006342 <USBH_LL_Connect>
}
 8008a7e:	bd08      	pop	{r3, pc}

08008a80 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008a80:	b508      	push	{r3, lr}
  USBH_LL_Disconnect(hhcd->pData);
 8008a82:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 8008a86:	f7fd fc66 	bl	8006356 <USBH_LL_Disconnect>
}
 8008a8a:	bd08      	pop	{r3, pc}

08008a8c <HAL_HCD_HC_NotifyURBChange_Callback>:
{
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008a8c:	4770      	bx	lr

08008a8e <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008a8e:	b508      	push	{r3, lr}
  USBH_LL_PortEnabled(hhcd->pData);
 8008a90:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 8008a94:	f7fd fc4d 	bl	8006332 <USBH_LL_PortEnabled>
}
 8008a98:	bd08      	pop	{r3, pc}

08008a9a <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008a9a:	b508      	push	{r3, lr}
  USBH_LL_PortDisabled(hhcd->pData);
 8008a9c:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 8008aa0:	f7fd fc4b 	bl	800633a <USBH_LL_PortDisabled>
}
 8008aa4:	bd08      	pop	{r3, pc}
	...

08008aa8 <USBH_LL_Init>:
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008aa8:	f890 33cc 	ldrb.w	r3, [r0, #972]	; 0x3cc
 8008aac:	2b01      	cmp	r3, #1
 8008aae:	d001      	beq.n	8008ab4 <USBH_LL_Init+0xc>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
  }
  return USBH_OK;
}
 8008ab0:	2000      	movs	r0, #0
 8008ab2:	4770      	bx	lr
{
 8008ab4:	b510      	push	{r4, lr}
 8008ab6:	4604      	mov	r4, r0
  hhcd_USB_OTG_FS.pData = phost;
 8008ab8:	480f      	ldr	r0, [pc, #60]	; (8008af8 <USBH_LL_Init+0x50>)
 8008aba:	f8c0 4300 	str.w	r4, [r0, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008abe:	f8c4 03d0 	str.w	r0, [r4, #976]	; 0x3d0
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008ac2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8008ac6:	6003      	str	r3, [r0, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008ac8:	2308      	movs	r3, #8
 8008aca:	6083      	str	r3, [r0, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008acc:	2301      	movs	r3, #1
 8008ace:	60c3      	str	r3, [r0, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	6103      	str	r3, [r0, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008ad4:	2202      	movs	r2, #2
 8008ad6:	6182      	str	r2, [r0, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008ad8:	61c3      	str	r3, [r0, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008ada:	f7f9 fa3c 	bl	8001f56 <HAL_HCD_Init>
 8008ade:	b940      	cbnz	r0, 8008af2 <USBH_LL_Init+0x4a>
  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008ae0:	4805      	ldr	r0, [pc, #20]	; (8008af8 <USBH_LL_Init+0x50>)
 8008ae2:	f7f9 ff5b 	bl	800299c <HAL_HCD_GetCurrentFrame>
 8008ae6:	4601      	mov	r1, r0
 8008ae8:	4620      	mov	r0, r4
 8008aea:	f7fd fc0d 	bl	8006308 <USBH_LL_SetTimer>
}
 8008aee:	2000      	movs	r0, #0
 8008af0:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8008af2:	f7f8 fb4f 	bl	8001194 <Error_Handler>
 8008af6:	e7f3      	b.n	8008ae0 <USBH_LL_Init+0x38>
 8008af8:	20003400 	.word	0x20003400

08008afc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008afc:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008afe:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8008b02:	f7f9 ff50 	bl	80029a6 <HAL_HCD_GetCurrentSpeed>
 8008b06:	b120      	cbz	r0, 8008b12 <USBH_LL_GetSpeed+0x16>
  case 1 :
    speed = USBH_SPEED_FULL;
    break;

  case 2 :
    speed = USBH_SPEED_LOW;
 8008b08:	2802      	cmp	r0, #2
 8008b0a:	bf14      	ite	ne
 8008b0c:	2001      	movne	r0, #1
 8008b0e:	2002      	moveq	r0, #2
  default:
   speed = USBH_SPEED_FULL;
    break;
  }
  return  speed;
}
 8008b10:	bd08      	pop	{r3, pc}
    speed = USBH_SPEED_HIGH;
 8008b12:	2000      	movs	r0, #0
 8008b14:	e7fc      	b.n	8008b10 <USBH_LL_GetSpeed+0x14>

08008b16 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008b16:	b508      	push	{r3, lr}
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008b18:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8008b1c:	f7f9 ff39 	bl	8002992 <HAL_HCD_HC_GetXferCount>
}
 8008b20:	bd08      	pop	{r3, pc}

08008b22 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008b22:	b508      	push	{r3, lr}
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008b24:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8008b28:	f7f9 ff2d 	bl	8002986 <HAL_HCD_HC_GetURBState>
}
 8008b2c:	bd08      	pop	{r3, pc}

08008b2e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008b2e:	b508      	push	{r3, lr}
  if (phost->id == HOST_FS) {
 8008b30:	f890 33cc 	ldrb.w	r3, [r0, #972]	; 0x3cc
 8008b34:	2b01      	cmp	r3, #1
 8008b36:	d004      	beq.n	8008b42 <USBH_LL_DriverVBUS+0x14>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008b38:	20c8      	movs	r0, #200	; 0xc8
 8008b3a:	f7f8 fd9f 	bl	800167c <HAL_Delay>
  return USBH_OK;
}
 8008b3e:	2000      	movs	r0, #0
 8008b40:	bd08      	pop	{r3, pc}
    MX_DriverVbusFS(state);
 8008b42:	4608      	mov	r0, r1
 8008b44:	f000 f87e 	bl	8008c44 <MX_DriverVbusFS>
 8008b48:	e7f6      	b.n	8008b38 <USBH_LL_DriverVBUS+0xa>

08008b4a <USBH_LL_SetToggle>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008b4a:	f8d0 33d0 	ldr.w	r3, [r0, #976]	; 0x3d0

  if(pHandle->hc[pipe].ep_is_in)
 8008b4e:	202c      	movs	r0, #44	; 0x2c
 8008b50:	fb00 3001 	mla	r0, r0, r1, r3
 8008b54:	f890 003b 	ldrb.w	r0, [r0, #59]	; 0x3b
 8008b58:	b130      	cbz	r0, 8008b68 <USBH_LL_SetToggle+0x1e>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008b5a:	202c      	movs	r0, #44	; 0x2c
 8008b5c:	fb00 3301 	mla	r3, r0, r1, r3
 8008b60:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  {
    pHandle->hc[pipe].toggle_out = toggle;
  }

  return USBH_OK;
}
 8008b64:	2000      	movs	r0, #0
 8008b66:	4770      	bx	lr
    pHandle->hc[pipe].toggle_out = toggle;
 8008b68:	202c      	movs	r0, #44	; 0x2c
 8008b6a:	fb00 3301 	mla	r3, r0, r1, r3
 8008b6e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 8008b72:	e7f7      	b.n	8008b64 <USBH_LL_SetToggle+0x1a>

08008b74 <USBH_LL_GetToggle>:
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  uint8_t toggle = 0;
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008b74:	f8d0 33d0 	ldr.w	r3, [r0, #976]	; 0x3d0

  if(pHandle->hc[pipe].ep_is_in)
 8008b78:	222c      	movs	r2, #44	; 0x2c
 8008b7a:	fb02 3201 	mla	r2, r2, r1, r3
 8008b7e:	f892 203b 	ldrb.w	r2, [r2, #59]	; 0x3b
 8008b82:	b12a      	cbz	r2, 8008b90 <USBH_LL_GetToggle+0x1c>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 8008b84:	222c      	movs	r2, #44	; 0x2c
 8008b86:	fb02 3301 	mla	r3, r2, r1, r3
 8008b8a:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 8008b8e:	4770      	bx	lr
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8008b90:	222c      	movs	r2, #44	; 0x2c
 8008b92:	fb02 3301 	mla	r3, r2, r1, r3
 8008b96:	f893 0055 	ldrb.w	r0, [r3, #85]	; 0x55
  }
  return toggle;
}
 8008b9a:	4770      	bx	lr

08008b9c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008b9c:	b508      	push	{r3, lr}
  HAL_Delay(Delay);
 8008b9e:	f7f8 fd6d 	bl	800167c <HAL_Delay>
}
 8008ba2:	bd08      	pop	{r3, pc}

08008ba4 <USBH_Get_USB_Status>:
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBH_StatusTypeDef usb_status = USBH_OK;

  switch (hal_status)
 8008ba4:	b120      	cbz	r0, 8008bb0 <USBH_Get_USB_Status+0xc>
    break;
    case HAL_ERROR :
      usb_status = USBH_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008ba6:	2802      	cmp	r0, #2
 8008ba8:	bf14      	ite	ne
 8008baa:	2002      	movne	r0, #2
 8008bac:	2001      	moveq	r0, #1
 8008bae:	4770      	bx	lr
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 8008bb0:	4770      	bx	lr

08008bb2 <USBH_LL_Start>:
{
 8008bb2:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_Start(phost->pData);
 8008bb4:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8008bb8:	f7f9 feb9 	bl	800292e <HAL_HCD_Start>
  usb_status = USBH_Get_USB_Status(hal_status);
 8008bbc:	f7ff fff2 	bl	8008ba4 <USBH_Get_USB_Status>
}
 8008bc0:	bd08      	pop	{r3, pc}

08008bc2 <USBH_LL_Stop>:
{
 8008bc2:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_Stop(phost->pData);
 8008bc4:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8008bc8:	f7f9 fec6 	bl	8002958 <HAL_HCD_Stop>
  usb_status = USBH_Get_USB_Status(hal_status);
 8008bcc:	f7ff ffea 	bl	8008ba4 <USBH_Get_USB_Status>
}
 8008bd0:	bd08      	pop	{r3, pc}

08008bd2 <USBH_LL_ResetPort>:
{
 8008bd2:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008bd4:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8008bd8:	f7f9 fed0 	bl	800297c <HAL_HCD_ResetPort>
  usb_status = USBH_Get_USB_Status(hal_status);
 8008bdc:	f7ff ffe2 	bl	8008ba4 <USBH_Get_USB_Status>
}
 8008be0:	bd08      	pop	{r3, pc}

08008be2 <USBH_LL_OpenPipe>:
{
 8008be2:	b510      	push	{r4, lr}
 8008be4:	b084      	sub	sp, #16
  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008be6:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8008bea:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8008bee:	9402      	str	r4, [sp, #8]
 8008bf0:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8008bf4:	9401      	str	r4, [sp, #4]
 8008bf6:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8008bfa:	9400      	str	r4, [sp, #0]
 8008bfc:	f7f9 f964 	bl	8001ec8 <HAL_HCD_HC_Init>
  usb_status = USBH_Get_USB_Status(hal_status);
 8008c00:	f7ff ffd0 	bl	8008ba4 <USBH_Get_USB_Status>
}
 8008c04:	b004      	add	sp, #16
 8008c06:	bd10      	pop	{r4, pc}

08008c08 <USBH_LL_ClosePipe>:
{
 8008c08:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008c0a:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8008c0e:	f7f9 f990 	bl	8001f32 <HAL_HCD_HC_Halt>
  usb_status = USBH_Get_USB_Status(hal_status);
 8008c12:	f7ff ffc7 	bl	8008ba4 <USBH_Get_USB_Status>
}
 8008c16:	bd08      	pop	{r3, pc}

08008c18 <USBH_LL_SubmitURB>:
{
 8008c18:	b510      	push	{r4, lr}
 8008c1a:	b084      	sub	sp, #16
  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008c1c:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8008c20:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8008c24:	9403      	str	r4, [sp, #12]
 8008c26:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8008c2a:	9402      	str	r4, [sp, #8]
 8008c2c:	9c07      	ldr	r4, [sp, #28]
 8008c2e:	9401      	str	r4, [sp, #4]
 8008c30:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8008c34:	9400      	str	r4, [sp, #0]
 8008c36:	f7f9 f9e0 	bl	8001ffa <HAL_HCD_HC_SubmitRequest>
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008c3a:	f7ff ffb3 	bl	8008ba4 <USBH_Get_USB_Status>
}
 8008c3e:	b004      	add	sp, #16
 8008c40:	bd10      	pop	{r4, pc}
	...

08008c44 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008c44:	b508      	push	{r3, lr}
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,(GPIO_PinState)data);
 8008c46:	1e02      	subs	r2, r0, #0
 8008c48:	bf18      	it	ne
 8008c4a:	2201      	movne	r2, #1
 8008c4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008c50:	4801      	ldr	r0, [pc, #4]	; (8008c58 <MX_DriverVbusFS+0x14>)
 8008c52:	f7f9 f933 	bl	8001ebc <HAL_GPIO_WritePin>
}
 8008c56:	bd08      	pop	{r3, pc}
 8008c58:	40020800 	.word	0x40020800

08008c5c <Commander_Init>:

#include "commander.h"
#include <string.h>

void Commander_Init(Commander_HandleTypeDef *hcommander, UART_HandleTypeDef *huart, DMA_HandleTypeDef *hdma_uart_rx, void (*incoming_callback)(void)) {
	hcommander->huart = huart;
 8008c5c:	6001      	str	r1, [r0, #0]
	hcommander->hdma_uart_rx = hdma_uart_rx;
 8008c5e:	6042      	str	r2, [r0, #4]
	hcommander->tick_send = 0;
 8008c60:	2200      	movs	r2, #0
 8008c62:	f8c0 2418 	str.w	r2, [r0, #1048]	; 0x418
	hcommander->awaiting_response = 0;
 8008c66:	f880 241c 	strb.w	r2, [r0, #1052]	; 0x41c
	hcommander->command_to_process = 0;
 8008c6a:	f880 241d 	strb.w	r2, [r0, #1053]	; 0x41d
	hcommander->incoming_callback = incoming_callback;
 8008c6e:	f8c0 3420 	str.w	r3, [r0, #1056]	; 0x420
}
 8008c72:	4770      	bx	lr

08008c74 <Commander_Start>:

void Commander_Start(Commander_HandleTypeDef *hcommander) {
 8008c74:	b508      	push	{r3, lr}
	HAL_UART_Receive_DMA(hcommander->huart, hcommander->uart_rx_buffer, COMMAND_BYTESIZE * 2);
 8008c76:	4601      	mov	r1, r0
 8008c78:	f851 0b08 	ldr.w	r0, [r1], #8
 8008c7c:	f240 2206 	movw	r2, #518	; 0x206
 8008c80:	f7fb fcae 	bl	80045e0 <HAL_UART_Receive_DMA>
}
 8008c84:	bd08      	pop	{r3, pc}

08008c86 <Commander_Pause>:

void Commander_Pause(Commander_HandleTypeDef *hcommander) {
 8008c86:	b508      	push	{r3, lr}
	HAL_UART_DMAPause(hcommander->huart);
 8008c88:	6800      	ldr	r0, [r0, #0]
 8008c8a:	f7fb fb16 	bl	80042ba <HAL_UART_DMAPause>
}
 8008c8e:	bd08      	pop	{r3, pc}

08008c90 <Commander_Resume>:

void Commander_Resume(Commander_HandleTypeDef *hcommander) {
 8008c90:	b508      	push	{r3, lr}
	HAL_UART_DMAResume(hcommander->huart);
 8008c92:	6800      	ldr	r0, [r0, #0]
 8008c94:	f7fb fb65 	bl	8004362 <HAL_UART_DMAResume>
}
 8008c98:	bd08      	pop	{r3, pc}

08008c9a <Commander_Send>:
	hcommander->awaiting_response = 0;
	return 0; // transmission error

}

uint8_t Commander_Send(Commander_HandleTypeDef *hcommander) {
 8008c9a:	b508      	push	{r3, lr}

	HAL_StatusTypeDef status;


	status = HAL_UART_Transmit(hcommander->huart, (uint8_t *)&(hcommander->out_command), COMMAND_BYTESIZE, 1000);
 8008c9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008ca0:	f240 1203 	movw	r2, #259	; 0x103
 8008ca4:	f500 7145 	add.w	r1, r0, #788	; 0x314
 8008ca8:	6800      	ldr	r0, [r0, #0]
 8008caa:	f7fb fa94 	bl	80041d6 <HAL_UART_Transmit>
	} else {

		return 0; // transmission error
	}

}
 8008cae:	fab0 f080 	clz	r0, r0
 8008cb2:	0940      	lsrs	r0, r0, #5
 8008cb4:	bd08      	pop	{r3, pc}

08008cb6 <Commander_ProcessIncoming>:

void Commander_ProcessIncoming(Commander_HandleTypeDef *hcommander) {
 8008cb6:	b508      	push	{r3, lr}
	if (hcommander->command_to_process) {
 8008cb8:	f890 341d 	ldrb.w	r3, [r0, #1053]	; 0x41d
 8008cbc:	b12b      	cbz	r3, 8008cca <Commander_ProcessIncoming+0x14>
		hcommander->command_to_process = 0;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	f880 341d 	strb.w	r3, [r0, #1053]	; 0x41d
		hcommander->incoming_callback();
 8008cc4:	f8d0 3420 	ldr.w	r3, [r0, #1056]	; 0x420
 8008cc8:	4798      	blx	r3
	}
}
 8008cca:	bd08      	pop	{r3, pc}

08008ccc <bitcrusher_rs_pedal_process>:
}

void bitcrusher_rs_pedal_process(float *value, pedal_config_t *conf) {
    int16_t shift = conf->int_params[REDUCT_INTENSITY].value;
    int16_t _out = (int16_t)*value;
    _out = (_out >> shift);
 8008ccc:	f9b1 1018 	ldrsh.w	r1, [r1, #24]
    int16_t _out = (int16_t)*value;
 8008cd0:	edd0 7a00 	vldr	s15, [r0]
 8008cd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    _out = (_out >> shift);
 8008cd8:	ee17 3a90 	vmov	r3, s15
 8008cdc:	b21a      	sxth	r2, r3
    _out = (_out << shift);
    _out += (2 << (shift -2));
 8008cde:	f1a1 0c02 	sub.w	ip, r1, #2
 8008ce2:	2302      	movs	r3, #2
 8008ce4:	fa03 f30c 	lsl.w	r3, r3, ip
    _out = (_out << shift);
 8008ce8:	410a      	asrs	r2, r1
 8008cea:	408a      	lsls	r2, r1
    _out += (2 << (shift -2));
 8008cec:	4413      	add	r3, r2
    *value = _out;
 8008cee:	b21b      	sxth	r3, r3
 8008cf0:	ee07 3a90 	vmov	s15, r3
 8008cf4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008cf8:	edc0 7a00 	vstr	s15, [r0]
}
 8008cfc:	4770      	bx	lr

08008cfe <low_pass_filter_pedal_process>:
    conf->float_params[BALANCE_OUT] = (float_parameter_t){1.F, 0.F, 1.F};
    conf->float_params[PAST] = (float_parameter_t){0.F, 0.F, 0.F};
}

void low_pass_filter_pedal_process(float *value, pedal_config_t *conf) {
    float alpha = conf->float_params[SOFTENER].value;
 8008cfe:	ed91 7a12 	vldr	s14, [r1, #72]	; 0x48
    *value = conf->float_params[PAST].value * alpha + (1.F - alpha) * *value;
 8008d02:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008d06:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008d0a:	edd0 6a00 	vldr	s13, [r0]
 8008d0e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008d12:	edd1 6a21 	vldr	s13, [r1, #132]	; 0x84
 8008d16:	ee27 7a26 	vmul.f32	s14, s14, s13
 8008d1a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008d1e:	edc0 7a00 	vstr	s15, [r0]
    conf->float_params[PAST].value = *value;
 8008d22:	edc1 7a21 	vstr	s15, [r1, #132]	; 0x84
}
 8008d26:	4770      	bx	lr

08008d28 <noise_gate_pedal_process>:
	conf->float_params[BALANCE_IN] = (float_parameter_t){0.F, 0.F, 1.F};
	conf->float_params[BALANCE_OUT] = (float_parameter_t){1.F, 0.F, 1.F};
}

void noise_gate_pedal_process(float *value, pedal_config_t *conf) {
    if (*value < conf->float_params[THRESHOLD_HIGH].value) {
 8008d28:	ed90 7a00 	vldr	s14, [r0]
 8008d2c:	edd1 7a0c 	vldr	s15, [r1, #48]	; 0x30
 8008d30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	*value = 0;
 8008d38:	bf44      	itt	mi
 8008d3a:	2300      	movmi	r3, #0
 8008d3c:	6003      	strmi	r3, [r0, #0]
    }
}
 8008d3e:	4770      	bx	lr

08008d40 <Pedalboard_Init>:
		p_pb->pedals[i].pedal_formatted.type = BYPASS;
 8008d40:	2302      	movs	r3, #2
 8008d42:	7003      	strb	r3, [r0, #0]
 8008d44:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
 8008d48:	f880 3130 	strb.w	r3, [r0, #304]	; 0x130
 8008d4c:	f880 31c8 	strb.w	r3, [r0, #456]	; 0x1c8
 8008d50:	f880 3260 	strb.w	r3, [r0, #608]	; 0x260
 8008d54:	f880 32f8 	strb.w	r3, [r0, #760]	; 0x2f8
}
 8008d58:	4770      	bx	lr
	...

08008d5c <overdrive_pedal_init>:
void overdrive_pedal_init(pedal_config_t *conf) {
 8008d5c:	b410      	push	{r4}
 8008d5e:	4603      	mov	r3, r0
    conf->float_params[INTENSITY] = (float_parameter_t){100.F, 1.F, 10.F};
 8008d60:	4c16      	ldr	r4, [pc, #88]	; (8008dbc <overdrive_pedal_init+0x60>)
 8008d62:	f100 0c24 	add.w	ip, r0, #36	; 0x24
 8008d66:	f504 7290 	add.w	r2, r4, #288	; 0x120
 8008d6a:	ca07      	ldmia	r2, {r0, r1, r2}
 8008d6c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    conf->float_params[THRESHOLD_HIGH] = (float_parameter_t){32767.F, 0.F, 32767.F};
 8008d70:	f103 0c30 	add.w	ip, r3, #48	; 0x30
 8008d74:	f504 7296 	add.w	r2, r4, #300	; 0x12c
 8008d78:	ca07      	ldmia	r2, {r0, r1, r2}
 8008d7a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    conf->float_params[THRESHOLD_LOW] = (float_parameter_t){28000.F, 0.F, 32767.F};
 8008d7e:	f103 0c3c 	add.w	ip, r3, #60	; 0x3c
 8008d82:	f504 729c 	add.w	r2, r4, #312	; 0x138
 8008d86:	ca07      	ldmia	r2, {r0, r1, r2}
 8008d88:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    conf->float_params[SOFTENER] = (float_parameter_t){4.F, 1.F, 10.F};
 8008d8c:	f103 0c48 	add.w	ip, r3, #72	; 0x48
 8008d90:	f504 72a2 	add.w	r2, r4, #324	; 0x144
 8008d94:	ca07      	ldmia	r2, {r0, r1, r2}
 8008d96:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    conf->float_params[BALANCE_IN] = (float_parameter_t){0.F, 0.F, 1.F};
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	655a      	str	r2, [r3, #84]	; 0x54
 8008d9e:	659a      	str	r2, [r3, #88]	; 0x58
 8008da0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008da4:	65da      	str	r2, [r3, #92]	; 0x5c
    conf->float_params[BALANCE_OUT] = (float_parameter_t){1.F, 0.F, 1.F};
 8008da6:	3360      	adds	r3, #96	; 0x60
 8008da8:	f504 74a8 	add.w	r4, r4, #336	; 0x150
 8008dac:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8008db0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8008db4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008db8:	4770      	bx	lr
 8008dba:	bf00      	nop
 8008dbc:	08009678 	.word	0x08009678

08008dc0 <bitcrusher_rs_pedal_init>:
void bitcrusher_rs_pedal_init(pedal_config_t *conf) {
 8008dc0:	b510      	push	{r4, lr}
 8008dc2:	4603      	mov	r3, r0
    conf->int_params[REDUCT_INTENSITY] = (int_parameter_t){12, 1, 16};
 8008dc4:	4c09      	ldr	r4, [pc, #36]	; (8008dec <bitcrusher_rs_pedal_init+0x2c>)
 8008dc6:	f100 0c18 	add.w	ip, r0, #24
 8008dca:	f504 72ae 	add.w	r2, r4, #348	; 0x15c
 8008dce:	ca07      	ldmia	r2, {r0, r1, r2}
 8008dd0:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    conf->float_params[BALANCE_IN] = (float_parameter_t){0.5F, 0.F, 1.F};
 8008dd4:	f103 0e54 	add.w	lr, r3, #84	; 0x54
 8008dd8:	f504 7cb4 	add.w	ip, r4, #360	; 0x168
 8008ddc:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8008de0:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
    conf->float_params[BALANCE_OUT] = (float_parameter_t){0.5F, 0.F, 1.F};
 8008de4:	3360      	adds	r3, #96	; 0x60
 8008de6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8008dea:	bd10      	pop	{r4, pc}
 8008dec:	08009678 	.word	0x08009678

08008df0 <tremolo_pedal_init>:
void tremolo_pedal_init(pedal_config_t *conf) {
 8008df0:	b410      	push	{r4}
 8008df2:	4603      	mov	r3, r0
    conf->int_params[COUNTER] = (int_parameter_t){0, 1, 0};
 8008df4:	2200      	movs	r2, #0
 8008df6:	60c2      	str	r2, [r0, #12]
 8008df8:	2101      	movs	r1, #1
 8008dfa:	6101      	str	r1, [r0, #16]
 8008dfc:	6142      	str	r2, [r0, #20]
    conf->float_params[SPEED] = (float_parameter_t){2.F, 0.1F, 10.F};
 8008dfe:	4c0c      	ldr	r4, [pc, #48]	; (8008e30 <tremolo_pedal_init+0x40>)
 8008e00:	f100 0c78 	add.w	ip, r0, #120	; 0x78
 8008e04:	f504 72ba 	add.w	r2, r4, #372	; 0x174
 8008e08:	ca07      	ldmia	r2, {r0, r1, r2}
 8008e0a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    conf->float_params[BALANCE_IN] = (float_parameter_t){1.0F, 0.F, 1.F};
 8008e0e:	f103 0c54 	add.w	ip, r3, #84	; 0x54
 8008e12:	f504 72a8 	add.w	r2, r4, #336	; 0x150
 8008e16:	ca07      	ldmia	r2, {r0, r1, r2}
 8008e18:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    conf->float_params[BALANCE_OUT] = (float_parameter_t){0.0F, 0.F, 1.F};
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	661a      	str	r2, [r3, #96]	; 0x60
 8008e20:	665a      	str	r2, [r3, #100]	; 0x64
 8008e22:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008e26:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008e28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e2c:	4770      	bx	lr
 8008e2e:	bf00      	nop
 8008e30:	08009678 	.word	0x08009678

08008e34 <overdrive_sqrt_pedal_init>:
void overdrive_sqrt_pedal_init(pedal_config_t *conf) {
 8008e34:	b410      	push	{r4}
 8008e36:	4603      	mov	r3, r0
    conf->float_params[INTENSITY] = (float_parameter_t){500.F, 0.F, 2000.F};
 8008e38:	4c0f      	ldr	r4, [pc, #60]	; (8008e78 <overdrive_sqrt_pedal_init+0x44>)
 8008e3a:	f100 0c24 	add.w	ip, r0, #36	; 0x24
 8008e3e:	f504 72c0 	add.w	r2, r4, #384	; 0x180
 8008e42:	ca07      	ldmia	r2, {r0, r1, r2}
 8008e44:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    conf->float_params[THRESHOLD_HIGH] = (float_parameter_t){32767.F, 0.F, 32767.F};
 8008e48:	f103 0c30 	add.w	ip, r3, #48	; 0x30
 8008e4c:	f504 7296 	add.w	r2, r4, #300	; 0x12c
 8008e50:	ca07      	ldmia	r2, {r0, r1, r2}
 8008e52:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    conf->float_params[BALANCE_IN] = (float_parameter_t){0.75F, 0.F, 1.F};
 8008e56:	f103 0c54 	add.w	ip, r3, #84	; 0x54
 8008e5a:	f504 72c6 	add.w	r2, r4, #396	; 0x18c
 8008e5e:	ca07      	ldmia	r2, {r0, r1, r2}
 8008e60:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    conf->float_params[BALANCE_OUT] = (float_parameter_t){0.25F, 0.F, 1.F};
 8008e64:	3360      	adds	r3, #96	; 0x60
 8008e66:	f504 74cc 	add.w	r4, r4, #408	; 0x198
 8008e6a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8008e6e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8008e72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e76:	4770      	bx	lr
 8008e78:	08009678 	.word	0x08009678

08008e7c <amplifier_pedal_init>:
void amplifier_pedal_init(pedal_config_t *conf) {
 8008e7c:	b410      	push	{r4}
 8008e7e:	4603      	mov	r3, r0
    conf->float_params[INTENSITY] = (float_parameter_t){1.F, 0.1F, 10.F};
 8008e80:	4c0f      	ldr	r4, [pc, #60]	; (8008ec0 <amplifier_pedal_init+0x44>)
 8008e82:	f100 0c24 	add.w	ip, r0, #36	; 0x24
 8008e86:	f504 72d2 	add.w	r2, r4, #420	; 0x1a4
 8008e8a:	ca07      	ldmia	r2, {r0, r1, r2}
 8008e8c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    conf->float_params[THRESHOLD_HIGH] = (float_parameter_t){32767.F, 0.F, 32767.F};
 8008e90:	f103 0c30 	add.w	ip, r3, #48	; 0x30
 8008e94:	f504 7296 	add.w	r2, r4, #300	; 0x12c
 8008e98:	ca07      	ldmia	r2, {r0, r1, r2}
 8008e9a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    conf->float_params[BALANCE_IN] = (float_parameter_t){0.F, 0.F, 1.F};
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	655a      	str	r2, [r3, #84]	; 0x54
 8008ea2:	659a      	str	r2, [r3, #88]	; 0x58
 8008ea4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008ea8:	65da      	str	r2, [r3, #92]	; 0x5c
	conf->float_params[BALANCE_OUT] = (float_parameter_t){1.F, 0.F, 1.F};
 8008eaa:	3360      	adds	r3, #96	; 0x60
 8008eac:	f504 74a8 	add.w	r4, r4, #336	; 0x150
 8008eb0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8008eb4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8008eb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ebc:	4770      	bx	lr
 8008ebe:	bf00      	nop
 8008ec0:	08009678 	.word	0x08009678

08008ec4 <low_pass_filter_pedal_init>:
void low_pass_filter_pedal_init(pedal_config_t *conf) {
 8008ec4:	b510      	push	{r4, lr}
 8008ec6:	4603      	mov	r3, r0
    conf->float_params[SOFTENER] = (float_parameter_t){0.01F, 0.0F, 1.0F};
 8008ec8:	4c0f      	ldr	r4, [pc, #60]	; (8008f08 <low_pass_filter_pedal_init+0x44>)
 8008eca:	f100 0c48 	add.w	ip, r0, #72	; 0x48
 8008ece:	f504 72d8 	add.w	r2, r4, #432	; 0x1b0
 8008ed2:	ca07      	ldmia	r2, {r0, r1, r2}
 8008ed4:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    conf->float_params[BALANCE_IN] = (float_parameter_t){0.F, 0.F, 1.F};
 8008ed8:	f04f 0c00 	mov.w	ip, #0
 8008edc:	f8c3 c054 	str.w	ip, [r3, #84]	; 0x54
 8008ee0:	f8c3 c058 	str.w	ip, [r3, #88]	; 0x58
 8008ee4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008ee8:	65da      	str	r2, [r3, #92]	; 0x5c
    conf->float_params[BALANCE_OUT] = (float_parameter_t){1.F, 0.F, 1.F};
 8008eea:	f103 0e60 	add.w	lr, r3, #96	; 0x60
 8008eee:	f504 72a8 	add.w	r2, r4, #336	; 0x150
 8008ef2:	ca07      	ldmia	r2, {r0, r1, r2}
 8008ef4:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
    conf->float_params[PAST] = (float_parameter_t){0.F, 0.F, 0.F};
 8008ef8:	f8c3 c084 	str.w	ip, [r3, #132]	; 0x84
 8008efc:	f8c3 c088 	str.w	ip, [r3, #136]	; 0x88
 8008f00:	f8c3 c08c 	str.w	ip, [r3, #140]	; 0x8c
}
 8008f04:	bd10      	pop	{r4, pc}
 8008f06:	bf00      	nop
 8008f08:	08009678 	.word	0x08009678

08008f0c <fuzz_pedal_init>:
void fuzz_pedal_init(pedal_config_t *conf) {
 8008f0c:	b410      	push	{r4}
 8008f0e:	4603      	mov	r3, r0
    conf->int_params[COUNTER] = (int_parameter_t){0, 1, 0};
 8008f10:	2200      	movs	r2, #0
 8008f12:	60c2      	str	r2, [r0, #12]
 8008f14:	2101      	movs	r1, #1
 8008f16:	6101      	str	r1, [r0, #16]
 8008f18:	6142      	str	r2, [r0, #20]
    conf->float_params[INTENSITY] = (float_parameter_t){4.F, 1.F, 10.F};
 8008f1a:	4c16      	ldr	r4, [pc, #88]	; (8008f74 <fuzz_pedal_init+0x68>)
 8008f1c:	f100 0c24 	add.w	ip, r0, #36	; 0x24
 8008f20:	f504 72a2 	add.w	r2, r4, #324	; 0x144
 8008f24:	ca07      	ldmia	r2, {r0, r1, r2}
 8008f26:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    conf->float_params[THRESHOLD_HIGH] = (float_parameter_t){32767.F, 0.F, 32767.F};
 8008f2a:	f103 0c30 	add.w	ip, r3, #48	; 0x30
 8008f2e:	f504 7296 	add.w	r2, r4, #300	; 0x12c
 8008f32:	ca07      	ldmia	r2, {r0, r1, r2}
 8008f34:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    conf->float_params[HEIGHT] = (float_parameter_t){2048.F, 0.F, 8192.F};
 8008f38:	f103 0c6c 	add.w	ip, r3, #108	; 0x6c
 8008f3c:	f504 72de 	add.w	r2, r4, #444	; 0x1bc
 8008f40:	ca07      	ldmia	r2, {r0, r1, r2}
 8008f42:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    conf->float_params[SPEED] = (float_parameter_t){1.F, 0.1F, 10.F};
 8008f46:	f103 0c78 	add.w	ip, r3, #120	; 0x78
 8008f4a:	f504 72d2 	add.w	r2, r4, #420	; 0x1a4
 8008f4e:	ca07      	ldmia	r2, {r0, r1, r2}
 8008f50:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    conf->float_params[BALANCE_IN] = (float_parameter_t){0.F, 0.F, 1.F};
 8008f54:	2200      	movs	r2, #0
 8008f56:	655a      	str	r2, [r3, #84]	; 0x54
 8008f58:	659a      	str	r2, [r3, #88]	; 0x58
 8008f5a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008f5e:	65da      	str	r2, [r3, #92]	; 0x5c
    conf->float_params[BALANCE_OUT] = (float_parameter_t){1.F, 0.F, 1.F};
 8008f60:	3360      	adds	r3, #96	; 0x60
 8008f62:	f504 74a8 	add.w	r4, r4, #336	; 0x150
 8008f66:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8008f6a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8008f6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f72:	4770      	bx	lr
 8008f74:	08009678 	.word	0x08009678

08008f78 <noise_gate_pedal_init>:
void noise_gate_pedal_init(pedal_config_t *conf) {
 8008f78:	b410      	push	{r4}
 8008f7a:	4603      	mov	r3, r0
	conf->float_params[THRESHOLD_HIGH] = (float_parameter_t){50.F, 0.F, 32767.F};
 8008f7c:	4c0b      	ldr	r4, [pc, #44]	; (8008fac <noise_gate_pedal_init+0x34>)
 8008f7e:	f100 0c30 	add.w	ip, r0, #48	; 0x30
 8008f82:	f504 72e4 	add.w	r2, r4, #456	; 0x1c8
 8008f86:	ca07      	ldmia	r2, {r0, r1, r2}
 8008f88:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
	conf->float_params[BALANCE_IN] = (float_parameter_t){0.F, 0.F, 1.F};
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	655a      	str	r2, [r3, #84]	; 0x54
 8008f90:	659a      	str	r2, [r3, #88]	; 0x58
 8008f92:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008f96:	65da      	str	r2, [r3, #92]	; 0x5c
	conf->float_params[BALANCE_OUT] = (float_parameter_t){1.F, 0.F, 1.F};
 8008f98:	3360      	adds	r3, #96	; 0x60
 8008f9a:	f504 72a8 	add.w	r2, r4, #336	; 0x150
 8008f9e:	ca07      	ldmia	r2, {r0, r1, r2}
 8008fa0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8008fa4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fa8:	4770      	bx	lr
 8008faa:	bf00      	nop
 8008fac:	08009678 	.word	0x08009678

08008fb0 <Pedalboard_SetPedal>:
    if (i < MAX_PEDALS_COUNT) {
 8008fb0:	2a05      	cmp	r2, #5
 8008fb2:	f200 808f 	bhi.w	80090d4 <Pedalboard_SetPedal+0x124>
void Pedalboard_SetPedal(Pedalboard_Handler *p_pb, uint8_t type, uint8_t i, uint8_t action) {
 8008fb6:	b538      	push	{r3, r4, r5, lr}
 8008fb8:	4605      	mov	r5, r0
 8008fba:	4614      	mov	r4, r2
        p_pb->pedals[i].pedal_formatted.type = type;
 8008fbc:	2298      	movs	r2, #152	; 0x98
 8008fbe:	fb04 f202 	mul.w	r2, r4, r2
 8008fc2:	5481      	strb	r1, [r0, r2]
        if (type == AMPLIFIER)
 8008fc4:	b971      	cbnz	r1, 8008fe4 <Pedalboard_SetPedal+0x34>
        	if (action == INSERT) {
 8008fc6:	b133      	cbz	r3, 8008fd6 <Pedalboard_SetPedal+0x26>
            p_pb->pedals[i].pedal_formatted.pedal_process = amplifier_pedal_process;
 8008fc8:	2298      	movs	r2, #152	; 0x98
 8008fca:	fb02 5404 	mla	r4, r2, r4, r5
 8008fce:	4b42      	ldr	r3, [pc, #264]	; (80090d8 <Pedalboard_SetPedal+0x128>)
 8008fd0:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
 8008fd4:	bd38      	pop	{r3, r4, r5, pc}
        		amplifier_pedal_init(&(p_pb->pedals[i].pedal_formatted.config));
 8008fd6:	2098      	movs	r0, #152	; 0x98
 8008fd8:	fb00 5004 	mla	r0, r0, r4, r5
 8008fdc:	3004      	adds	r0, #4
 8008fde:	f7ff ff4d 	bl	8008e7c <amplifier_pedal_init>
 8008fe2:	e7f1      	b.n	8008fc8 <Pedalboard_SetPedal+0x18>
        else if (type == BITCRUSHER_RS)
 8008fe4:	2901      	cmp	r1, #1
 8008fe6:	d014      	beq.n	8009012 <Pedalboard_SetPedal+0x62>
        else if (type == FUZZ)
 8008fe8:	2903      	cmp	r1, #3
 8008fea:	d021      	beq.n	8009030 <Pedalboard_SetPedal+0x80>
        else if (type == LPF)
 8008fec:	2904      	cmp	r1, #4
 8008fee:	d02e      	beq.n	800904e <Pedalboard_SetPedal+0x9e>
        else if (type == OVERDRIVE)
 8008ff0:	2906      	cmp	r1, #6
 8008ff2:	d03b      	beq.n	800906c <Pedalboard_SetPedal+0xbc>
        else if (type == OVERDRIVE_SQRT)
 8008ff4:	2907      	cmp	r1, #7
 8008ff6:	d048      	beq.n	800908a <Pedalboard_SetPedal+0xda>
        else if (type == TREMOLO)
 8008ff8:	2908      	cmp	r1, #8
 8008ffa:	d055      	beq.n	80090a8 <Pedalboard_SetPedal+0xf8>
        else if (type == NOISE_GATE)
 8008ffc:	2905      	cmp	r1, #5
 8008ffe:	d1e9      	bne.n	8008fd4 <Pedalboard_SetPedal+0x24>
        	if (action == INSERT) {
 8009000:	2b00      	cmp	r3, #0
 8009002:	d060      	beq.n	80090c6 <Pedalboard_SetPedal+0x116>
			p_pb->pedals[i].pedal_formatted.pedal_process = noise_gate_pedal_process;
 8009004:	2398      	movs	r3, #152	; 0x98
 8009006:	fb03 5404 	mla	r4, r3, r4, r5
 800900a:	4b34      	ldr	r3, [pc, #208]	; (80090dc <Pedalboard_SetPedal+0x12c>)
 800900c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
 8009010:	e7e0      	b.n	8008fd4 <Pedalboard_SetPedal+0x24>
        	if (action == INSERT) {
 8009012:	b133      	cbz	r3, 8009022 <Pedalboard_SetPedal+0x72>
            p_pb->pedals[i].pedal_formatted.pedal_process = bitcrusher_rs_pedal_process;
 8009014:	2298      	movs	r2, #152	; 0x98
 8009016:	fb02 5404 	mla	r4, r2, r4, r5
 800901a:	4b31      	ldr	r3, [pc, #196]	; (80090e0 <Pedalboard_SetPedal+0x130>)
 800901c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8009020:	e7d8      	b.n	8008fd4 <Pedalboard_SetPedal+0x24>
        		bitcrusher_rs_pedal_init(&(p_pb->pedals[i].pedal_formatted.config));
 8009022:	2098      	movs	r0, #152	; 0x98
 8009024:	fb00 5004 	mla	r0, r0, r4, r5
 8009028:	3004      	adds	r0, #4
 800902a:	f7ff fec9 	bl	8008dc0 <bitcrusher_rs_pedal_init>
 800902e:	e7f1      	b.n	8009014 <Pedalboard_SetPedal+0x64>
        	if (action == INSERT) {
 8009030:	b133      	cbz	r3, 8009040 <Pedalboard_SetPedal+0x90>
            p_pb->pedals[i].pedal_formatted.pedal_process = fuzz_pedal_process;
 8009032:	2398      	movs	r3, #152	; 0x98
 8009034:	fb03 5404 	mla	r4, r3, r4, r5
 8009038:	4b2a      	ldr	r3, [pc, #168]	; (80090e4 <Pedalboard_SetPedal+0x134>)
 800903a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 800903e:	e7c9      	b.n	8008fd4 <Pedalboard_SetPedal+0x24>
        		fuzz_pedal_init(&(p_pb->pedals[i].pedal_formatted.config));
 8009040:	2098      	movs	r0, #152	; 0x98
 8009042:	fb00 5004 	mla	r0, r0, r4, r5
 8009046:	3004      	adds	r0, #4
 8009048:	f7ff ff60 	bl	8008f0c <fuzz_pedal_init>
 800904c:	e7f1      	b.n	8009032 <Pedalboard_SetPedal+0x82>
        	if (action == INSERT) {
 800904e:	b133      	cbz	r3, 800905e <Pedalboard_SetPedal+0xae>
            p_pb->pedals[i].pedal_formatted.pedal_process = low_pass_filter_pedal_process;
 8009050:	2398      	movs	r3, #152	; 0x98
 8009052:	fb03 5404 	mla	r4, r3, r4, r5
 8009056:	4b24      	ldr	r3, [pc, #144]	; (80090e8 <Pedalboard_SetPedal+0x138>)
 8009058:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 800905c:	e7ba      	b.n	8008fd4 <Pedalboard_SetPedal+0x24>
        		low_pass_filter_pedal_init(&(p_pb->pedals[i].pedal_formatted.config));
 800905e:	2098      	movs	r0, #152	; 0x98
 8009060:	fb00 5004 	mla	r0, r0, r4, r5
 8009064:	3004      	adds	r0, #4
 8009066:	f7ff ff2d 	bl	8008ec4 <low_pass_filter_pedal_init>
 800906a:	e7f1      	b.n	8009050 <Pedalboard_SetPedal+0xa0>
        	if (action == INSERT) {
 800906c:	b133      	cbz	r3, 800907c <Pedalboard_SetPedal+0xcc>
            p_pb->pedals[i].pedal_formatted.pedal_process = overdrive_pedal_process;
 800906e:	2398      	movs	r3, #152	; 0x98
 8009070:	fb03 5404 	mla	r4, r3, r4, r5
 8009074:	4b1d      	ldr	r3, [pc, #116]	; (80090ec <Pedalboard_SetPedal+0x13c>)
 8009076:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 800907a:	e7ab      	b.n	8008fd4 <Pedalboard_SetPedal+0x24>
        		overdrive_pedal_init(&(p_pb->pedals[i].pedal_formatted.config));
 800907c:	2098      	movs	r0, #152	; 0x98
 800907e:	fb00 5004 	mla	r0, r0, r4, r5
 8009082:	3004      	adds	r0, #4
 8009084:	f7ff fe6a 	bl	8008d5c <overdrive_pedal_init>
 8009088:	e7f1      	b.n	800906e <Pedalboard_SetPedal+0xbe>
        	if (action == INSERT) {
 800908a:	b133      	cbz	r3, 800909a <Pedalboard_SetPedal+0xea>
            p_pb->pedals[i].pedal_formatted.pedal_process = overdrive_sqrt_pedal_process;
 800908c:	2398      	movs	r3, #152	; 0x98
 800908e:	fb03 5404 	mla	r4, r3, r4, r5
 8009092:	4b17      	ldr	r3, [pc, #92]	; (80090f0 <Pedalboard_SetPedal+0x140>)
 8009094:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8009098:	e79c      	b.n	8008fd4 <Pedalboard_SetPedal+0x24>
        		overdrive_sqrt_pedal_init(&(p_pb->pedals[i].pedal_formatted.config));
 800909a:	2098      	movs	r0, #152	; 0x98
 800909c:	fb00 5004 	mla	r0, r0, r4, r5
 80090a0:	3004      	adds	r0, #4
 80090a2:	f7ff fec7 	bl	8008e34 <overdrive_sqrt_pedal_init>
 80090a6:	e7f1      	b.n	800908c <Pedalboard_SetPedal+0xdc>
        	if (action == INSERT) {
 80090a8:	b133      	cbz	r3, 80090b8 <Pedalboard_SetPedal+0x108>
            p_pb->pedals[i].pedal_formatted.pedal_process = tremolo_pedal_process;
 80090aa:	2398      	movs	r3, #152	; 0x98
 80090ac:	fb03 5404 	mla	r4, r3, r4, r5
 80090b0:	4b10      	ldr	r3, [pc, #64]	; (80090f4 <Pedalboard_SetPedal+0x144>)
 80090b2:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 80090b6:	e78d      	b.n	8008fd4 <Pedalboard_SetPedal+0x24>
        		tremolo_pedal_init(&(p_pb->pedals[i].pedal_formatted.config));
 80090b8:	2098      	movs	r0, #152	; 0x98
 80090ba:	fb00 5004 	mla	r0, r0, r4, r5
 80090be:	3004      	adds	r0, #4
 80090c0:	f7ff fe96 	bl	8008df0 <tremolo_pedal_init>
 80090c4:	e7f1      	b.n	80090aa <Pedalboard_SetPedal+0xfa>
        		noise_gate_pedal_init(&(p_pb->pedals[i].pedal_formatted.config));
 80090c6:	2098      	movs	r0, #152	; 0x98
 80090c8:	fb00 5004 	mla	r0, r0, r4, r5
 80090cc:	3004      	adds	r0, #4
 80090ce:	f7ff ff53 	bl	8008f78 <noise_gate_pedal_init>
 80090d2:	e797      	b.n	8009004 <Pedalboard_SetPedal+0x54>
 80090d4:	4770      	bx	lr
 80090d6:	bf00      	nop
 80090d8:	0800918b 	.word	0x0800918b
 80090dc:	08008d29 	.word	0x08008d29
 80090e0:	08008ccd 	.word	0x08008ccd
 80090e4:	0800930d 	.word	0x0800930d
 80090e8:	08008cff 	.word	0x08008cff
 80090ec:	080091eb 	.word	0x080091eb
 80090f0:	08009259 	.word	0x08009259
 80090f4:	080092e9 	.word	0x080092e9

080090f8 <mix>:
}*/

// DSP

void mix(float *raw_in, float *raw_out, float *proc_out, pedal_config_t *conf) {
	*proc_out = *raw_in * conf->float_params[BALANCE_IN].value + *raw_out * conf->float_params[BALANCE_OUT].value;
 80090f8:	edd0 7a00 	vldr	s15, [r0]
 80090fc:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8009100:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009104:	ed91 7a00 	vldr	s14, [r1]
 8009108:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 800910c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8009110:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009114:	edc2 7a00 	vstr	s15, [r2]
}
 8009118:	4770      	bx	lr

0800911a <Pedalboard_Process>:
void Pedalboard_Process(Pedalboard_Handler *p_pb, float *value) {
 800911a:	b570      	push	{r4, r5, r6, lr}
 800911c:	b082      	sub	sp, #8
 800911e:	460d      	mov	r5, r1
	for (uint8_t i = 0; i < MAX_PEDALS_COUNT; i++) {
 8009120:	1d04      	adds	r4, r0, #4
 8009122:	f500 7665 	add.w	r6, r0, #916	; 0x394
 8009126:	e002      	b.n	800912e <Pedalboard_Process+0x14>
 8009128:	3498      	adds	r4, #152	; 0x98
 800912a:	42b4      	cmp	r4, r6
 800912c:	d011      	beq.n	8009152 <Pedalboard_Process+0x38>
		if (p_pb->pedals[i].pedal_formatted.type != BYPASS) {
 800912e:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8009132:	2b02      	cmp	r3, #2
 8009134:	d0f8      	beq.n	8009128 <Pedalboard_Process+0xe>
			pre = *value;
 8009136:	682b      	ldr	r3, [r5, #0]
 8009138:	9301      	str	r3, [sp, #4]
			p_pb->pedals[i].pedal_formatted.pedal_process(value, &(p_pb->pedals[i].pedal_formatted.config));
 800913a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800913e:	4621      	mov	r1, r4
 8009140:	4628      	mov	r0, r5
 8009142:	4798      	blx	r3
			mix(&pre, value, value, &(p_pb->pedals[i].pedal_formatted.config));
 8009144:	4623      	mov	r3, r4
 8009146:	462a      	mov	r2, r5
 8009148:	4629      	mov	r1, r5
 800914a:	a801      	add	r0, sp, #4
 800914c:	f7ff ffd4 	bl	80090f8 <mix>
 8009150:	e7ea      	b.n	8009128 <Pedalboard_Process+0xe>
}
 8009152:	b002      	add	sp, #8
 8009154:	bd70      	pop	{r4, r5, r6, pc}

08009156 <hard_clip>:

void hard_clip(float *value, pedal_config_t *conf) {
	float thr = conf->float_params[THRESHOLD_HIGH].value;
 8009156:	edd1 7a0c 	vldr	s15, [r1, #48]	; 0x30
    if (*value > thr) {
 800915a:	ed90 7a00 	vldr	s14, [r0]
 800915e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009166:	dd02      	ble.n	800916e <hard_clip+0x18>
    	*value = thr;
 8009168:	edc0 7a00 	vstr	s15, [r0]
 800916c:	4770      	bx	lr
    } else if (*value < -thr) {
 800916e:	eef1 7a67 	vneg.f32	s15, s15
 8009172:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800917a:	d505      	bpl.n	8009188 <hard_clip+0x32>
    	*value = -thr - 1.;
 800917c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009180:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009184:	edc0 7a00 	vstr	s15, [r0]
    }
}
 8009188:	4770      	bx	lr

0800918a <amplifier_pedal_process>:
void amplifier_pedal_process(float *value, pedal_config_t *conf) {
 800918a:	b508      	push	{r3, lr}
    *value *= conf->float_params[INTENSITY].value;
 800918c:	edd0 7a00 	vldr	s15, [r0]
 8009190:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 8009194:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009198:	edc0 7a00 	vstr	s15, [r0]
    hard_clip(value, conf);
 800919c:	f7ff ffdb 	bl	8009156 <hard_clip>
}
 80091a0:	bd08      	pop	{r3, pc}

080091a2 <soft_clip>:

void soft_clip(float *value, pedal_config_t *conf) {
	float thr = conf->float_params[THRESHOLD_LOW].value;
 80091a2:	ed91 7a0f 	vldr	s14, [r1, #60]	; 0x3c
	float soft = conf->float_params[SOFTENER].value;
 80091a6:	ed91 6a12 	vldr	s12, [r1, #72]	; 0x48
    if (*value > thr) {
 80091aa:	edd0 7a00 	vldr	s15, [r0]
 80091ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80091b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091b6:	dd08      	ble.n	80091ca <soft_clip+0x28>
    	*value = thr + (*value - thr) / soft;
 80091b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80091bc:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80091c0:	ee36 7a87 	vadd.f32	s14, s13, s14
 80091c4:	ed80 7a00 	vstr	s14, [r0]
 80091c8:	4770      	bx	lr
    } else if (*value < -thr) {
 80091ca:	eef1 6a47 	vneg.f32	s13, s14
 80091ce:	eef4 7ae6 	vcmpe.f32	s15, s13
 80091d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091d6:	d507      	bpl.n	80091e8 <soft_clip+0x46>
    	*value = -thr + (*value + thr) / soft;
 80091d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80091dc:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80091e0:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80091e4:	ed80 7a00 	vstr	s14, [r0]
    }
}
 80091e8:	4770      	bx	lr

080091ea <overdrive_pedal_process>:
void overdrive_pedal_process(float *value, pedal_config_t *conf) {
 80091ea:	b538      	push	{r3, r4, r5, lr}
 80091ec:	4604      	mov	r4, r0
 80091ee:	460d      	mov	r5, r1
    *value *=  conf->float_params[INTENSITY].value;
 80091f0:	edd0 7a00 	vldr	s15, [r0]
 80091f4:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 80091f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80091fc:	edc0 7a00 	vstr	s15, [r0]
    soft_clip(value, conf);
 8009200:	f7ff ffcf 	bl	80091a2 <soft_clip>
    hard_clip(value, conf);
 8009204:	4629      	mov	r1, r5
 8009206:	4620      	mov	r0, r4
 8009208:	f7ff ffa5 	bl	8009156 <hard_clip>
}
 800920c:	bd38      	pop	{r3, r4, r5, pc}

0800920e <square_root>:

void square_root(float *value) {
	float multiplier = (*value < 0.F) ? -1.F : 1.F;
 800920e:	edd0 6a00 	vldr	s13, [r0]
 8009212:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8009216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800921a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800921e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8009222:	bf48      	it	mi
 8009224:	eef0 5a67 	vmovmi.f32	s11, s15
	*value *= multiplier;
 8009228:	ee66 6aa5 	vmul.f32	s13, s13, s11
	float original = *value;
    *value /= 2;
 800922c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8009230:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009234:	2308      	movs	r3, #8
    for (u_int8_t i = 0; i < 8; i++) {
    	*value = 0.5F * (*value + (original / *value));
 8009236:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800923a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800923e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009242:	ee67 7a86 	vmul.f32	s15, s15, s12
    for (u_int8_t i = 0; i < 8; i++) {
 8009246:	3b01      	subs	r3, #1
 8009248:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800924c:	d1f5      	bne.n	800923a <square_root+0x2c>
    }
    *value *= multiplier;
 800924e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8009252:	edc0 7a00 	vstr	s15, [r0]
}
 8009256:	4770      	bx	lr

08009258 <overdrive_sqrt_pedal_process>:
void overdrive_sqrt_pedal_process(float *value, pedal_config_t *conf) {
 8009258:	b538      	push	{r3, r4, r5, lr}
 800925a:	4604      	mov	r4, r0
 800925c:	460d      	mov	r5, r1
    square_root(value);
 800925e:	f7ff ffd6 	bl	800920e <square_root>
    *value *= conf->float_params[INTENSITY].value;
 8009262:	edd4 7a00 	vldr	s15, [r4]
 8009266:	ed95 7a09 	vldr	s14, [r5, #36]	; 0x24
 800926a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800926e:	edc4 7a00 	vstr	s15, [r4]
    hard_clip(value, conf);
 8009272:	4629      	mov	r1, r5
 8009274:	4620      	mov	r0, r4
 8009276:	f7ff ff6e 	bl	8009156 <hard_clip>
}
 800927a:	bd38      	pop	{r3, r4, r5, pc}

0800927c <wave_gen>:
float sin_table[128] = { 0.000000F, 0.024541F, 0.049068F, 0.073565F, 0.098017F, 0.122411F, 0.146730F, 0.170962F, 0.195090F, 0.219101F, 0.242980F, 0.266713F, 0.290284F, 0.313681F, 0.336890F, 0.359895F, 0.382683F, 0.405241F, 0.427555F, 0.449611F, 0.471396F, 0.492898F, 0.514102F, 0.534997F, 0.555570F, 0.575808F, 0.595699F, 0.615231F, 0.634393F, 0.653172F, 0.671559F, 0.689540F, 0.707106F, 0.724247F, 0.740951F, 0.757208F, 0.773010F, 0.788346F, 0.803207F, 0.817584F, 0.831469F, 0.844853F, 0.857728F, 0.870087F, 0.881921F, 0.893224F, 0.903989F, 0.914209F, 0.923879F, 0.932992F, 0.941544F, 0.949528F, 0.956940F, 0.963776F, 0.970031F, 0.975702F, 0.980785F, 0.985277F, 0.989176F, 0.992479F, 0.995185F, 0.997290F, 0.998795F, 0.999699F, 1.000000F, 0.999699F, 0.998796F, 0.997291F, 0.995185F, 0.992480F, 0.989177F, 0.985278F, 0.980786F, 0.975702F, 0.970032F, 0.963776F, 0.956941F, 0.949529F, 0.941545F, 0.932993F, 0.923880F, 0.914210F, 0.903990F, 0.893225F, 0.881922F, 0.870088F, 0.857729F, 0.844855F, 0.831471F, 0.817586F, 0.803209F, 0.788348F, 0.773012F, 0.757210F, 0.740952F, 0.724248F, 0.707108F, 0.689542F, 0.671560F, 0.653174F, 0.634395F, 0.615233F, 0.595701F, 0.575810F, 0.555572F, 0.534999F, 0.514105F, 0.492900F, 0.471399F, 0.449613F, 0.427557F, 0.405243F, 0.382685F, 0.359897F, 0.336892F, 0.313684F, 0.290287F, 0.266715F, 0.242982F, 0.219104F, 0.195093F, 0.170964F, 0.146733F, 0.122413F, 0.098019F, 0.073567F, 0.049070F, 0.024544F };

void wave_gen(float *out, char t, uint32_t i, float tone) {
    float period_f = 48000.F / tone;
    uint32_t period_i = period_f;
    uint32_t table_index = (i * 256 / period_i) % 256;
 800927c:	0212      	lsls	r2, r2, #8
    float period_f = 48000.F / tone;
 800927e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80092dc <wave_gen+0x60>
 8009282:	eec7 7a00 	vdiv.f32	s15, s14, s0
    uint32_t period_i = period_f;
 8009286:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    uint32_t table_index = (i * 256 / period_i) % 256;
 800928a:	ee17 3a90 	vmov	r3, s15
 800928e:	fbb2 f2f3 	udiv	r2, r2, r3

    if (t == 's') {
 8009292:	2973      	cmp	r1, #115	; 0x73
 8009294:	d002      	beq.n	800929c <wave_gen+0x20>
        if (table_index <= 127) {
        	*out = sin_table[table_index];
        } else {
            *out = -sin_table[table_index - 128];
        }
    } else if (t == 'q') {
 8009296:	2971      	cmp	r1, #113	; 0x71
 8009298:	d015      	beq.n	80092c6 <wave_gen+0x4a>
        	*out = -1.F;
        } else {
        	*out = 1.F;
        }
    }
}
 800929a:	4770      	bx	lr
    uint32_t table_index = (i * 256 / period_i) % 256;
 800929c:	b2d3      	uxtb	r3, r2
        if (table_index <= 127) {
 800929e:	f012 0f80 	tst.w	r2, #128	; 0x80
 80092a2:	d105      	bne.n	80092b0 <wave_gen+0x34>
        	*out = sin_table[table_index];
 80092a4:	4a0e      	ldr	r2, [pc, #56]	; (80092e0 <wave_gen+0x64>)
 80092a6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	6003      	str	r3, [r0, #0]
 80092ae:	4770      	bx	lr
            *out = -sin_table[table_index - 128];
 80092b0:	3b80      	subs	r3, #128	; 0x80
 80092b2:	4a0b      	ldr	r2, [pc, #44]	; (80092e0 <wave_gen+0x64>)
 80092b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80092b8:	edd3 7a00 	vldr	s15, [r3]
 80092bc:	eef1 7a67 	vneg.f32	s15, s15
 80092c0:	edc0 7a00 	vstr	s15, [r0]
 80092c4:	4770      	bx	lr
        if (table_index <= 127) {
 80092c6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80092ca:	d102      	bne.n	80092d2 <wave_gen+0x56>
        	*out = -1.F;
 80092cc:	4b05      	ldr	r3, [pc, #20]	; (80092e4 <wave_gen+0x68>)
 80092ce:	6003      	str	r3, [r0, #0]
 80092d0:	4770      	bx	lr
        	*out = 1.F;
 80092d2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80092d6:	6003      	str	r3, [r0, #0]
}
 80092d8:	e7df      	b.n	800929a <wave_gen+0x1e>
 80092da:	bf00      	nop
 80092dc:	473b8000 	.word	0x473b8000
 80092e0:	20000034 	.word	0x20000034
 80092e4:	bf800000 	.word	0xbf800000

080092e8 <tremolo_pedal_process>:
void tremolo_pedal_process(float *value, pedal_config_t *conf) {
 80092e8:	b510      	push	{r4, lr}
 80092ea:	460c      	mov	r4, r1
    wave_gen(value, 's', conf->int_params[COUNTER].value, tone * conf->float_params[SPEED].value);
 80092ec:	ed91 0a1e 	vldr	s0, [r1, #120]	; 0x78
 80092f0:	eddf 7a05 	vldr	s15, [pc, #20]	; 8009308 <tremolo_pedal_process+0x20>
 80092f4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80092f8:	68ca      	ldr	r2, [r1, #12]
 80092fa:	2173      	movs	r1, #115	; 0x73
 80092fc:	f7ff ffbe 	bl	800927c <wave_gen>
    conf->int_params[COUNTER].value++;
 8009300:	68e3      	ldr	r3, [r4, #12]
 8009302:	3301      	adds	r3, #1
 8009304:	60e3      	str	r3, [r4, #12]
}
 8009306:	bd10      	pop	{r4, pc}
 8009308:	43dc0000 	.word	0x43dc0000

0800930c <fuzz_pedal_process>:
void fuzz_pedal_process(float *value, pedal_config_t *conf) {
 800930c:	b530      	push	{r4, r5, lr}
 800930e:	b083      	sub	sp, #12
 8009310:	4604      	mov	r4, r0
 8009312:	460d      	mov	r5, r1
	*value *= conf->float_params[INTENSITY].value;
 8009314:	edd0 7a00 	vldr	s15, [r0]
 8009318:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 800931c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009320:	edc0 7a00 	vstr	s15, [r0]
	hard_clip(value, conf);
 8009324:	f7ff ff17 	bl	8009156 <hard_clip>
	if (*value == conf->float_params[THRESHOLD_HIGH].value) {
 8009328:	ed94 7a00 	vldr	s14, [r4]
 800932c:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8009330:	eeb4 7a66 	vcmp.f32	s14, s13
 8009334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009338:	d00a      	beq.n	8009350 <fuzz_pedal_process+0x44>
	} else if (*value == - conf->float_params[THRESHOLD_HIGH].value - 1.F) {
 800933a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800933e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009342:	eeb4 7a67 	vcmp.f32	s14, s15
 8009346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800934a:	d01d      	beq.n	8009388 <fuzz_pedal_process+0x7c>
}
 800934c:	b003      	add	sp, #12
 800934e:	bd30      	pop	{r4, r5, pc}
		wave_gen(&wave, 's', conf->int_params[COUNTER].value, tone * conf->float_params[SPEED].value);
 8009350:	ed95 0a1e 	vldr	s0, [r5, #120]	; 0x78
 8009354:	eddf 7a1a 	vldr	s15, [pc, #104]	; 80093c0 <fuzz_pedal_process+0xb4>
 8009358:	ee20 0a27 	vmul.f32	s0, s0, s15
 800935c:	68ea      	ldr	r2, [r5, #12]
 800935e:	2173      	movs	r1, #115	; 0x73
 8009360:	a801      	add	r0, sp, #4
 8009362:	f7ff ff8b 	bl	800927c <wave_gen>
		*value += (wave - 1) * conf->float_params[HEIGHT].value;
 8009366:	eddd 7a01 	vldr	s15, [sp, #4]
 800936a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800936e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009372:	ed95 7a1b 	vldr	s14, [r5, #108]	; 0x6c
 8009376:	ee67 7a87 	vmul.f32	s15, s15, s14
 800937a:	ed94 7a00 	vldr	s14, [r4]
 800937e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009382:	edc4 7a00 	vstr	s15, [r4]
 8009386:	e7e1      	b.n	800934c <fuzz_pedal_process+0x40>
		wave_gen(&wave, 's', conf->int_params[COUNTER].value, tone * conf->float_params[SPEED].value);
 8009388:	ed95 0a1e 	vldr	s0, [r5, #120]	; 0x78
 800938c:	eddf 7a0c 	vldr	s15, [pc, #48]	; 80093c0 <fuzz_pedal_process+0xb4>
 8009390:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009394:	68ea      	ldr	r2, [r5, #12]
 8009396:	2173      	movs	r1, #115	; 0x73
 8009398:	a801      	add	r0, sp, #4
 800939a:	f7ff ff6f 	bl	800927c <wave_gen>
		*value += (wave + 1) * conf->float_params[HEIGHT].value;
 800939e:	eddd 7a01 	vldr	s15, [sp, #4]
 80093a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80093a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80093aa:	ed95 7a1b 	vldr	s14, [r5, #108]	; 0x6c
 80093ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80093b2:	ed94 7a00 	vldr	s14, [r4]
 80093b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80093ba:	edc4 7a00 	vstr	s15, [r4]
}
 80093be:	e7c5      	b.n	800934c <fuzz_pedal_process+0x40>
 80093c0:	43dc0000 	.word	0x43dc0000

080093c4 <__errno>:
 80093c4:	4b01      	ldr	r3, [pc, #4]	; (80093cc <__errno+0x8>)
 80093c6:	6818      	ldr	r0, [r3, #0]
 80093c8:	4770      	bx	lr
 80093ca:	bf00      	nop
 80093cc:	20000234 	.word	0x20000234

080093d0 <__libc_init_array>:
 80093d0:	b570      	push	{r4, r5, r6, lr}
 80093d2:	4d0d      	ldr	r5, [pc, #52]	; (8009408 <__libc_init_array+0x38>)
 80093d4:	4c0d      	ldr	r4, [pc, #52]	; (800940c <__libc_init_array+0x3c>)
 80093d6:	1b64      	subs	r4, r4, r5
 80093d8:	10a4      	asrs	r4, r4, #2
 80093da:	2600      	movs	r6, #0
 80093dc:	42a6      	cmp	r6, r4
 80093de:	d109      	bne.n	80093f4 <__libc_init_array+0x24>
 80093e0:	4d0b      	ldr	r5, [pc, #44]	; (8009410 <__libc_init_array+0x40>)
 80093e2:	4c0c      	ldr	r4, [pc, #48]	; (8009414 <__libc_init_array+0x44>)
 80093e4:	f000 f93c 	bl	8009660 <_init>
 80093e8:	1b64      	subs	r4, r4, r5
 80093ea:	10a4      	asrs	r4, r4, #2
 80093ec:	2600      	movs	r6, #0
 80093ee:	42a6      	cmp	r6, r4
 80093f0:	d105      	bne.n	80093fe <__libc_init_array+0x2e>
 80093f2:	bd70      	pop	{r4, r5, r6, pc}
 80093f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80093f8:	4798      	blx	r3
 80093fa:	3601      	adds	r6, #1
 80093fc:	e7ee      	b.n	80093dc <__libc_init_array+0xc>
 80093fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8009402:	4798      	blx	r3
 8009404:	3601      	adds	r6, #1
 8009406:	e7f2      	b.n	80093ee <__libc_init_array+0x1e>
 8009408:	08009ce8 	.word	0x08009ce8
 800940c:	08009ce8 	.word	0x08009ce8
 8009410:	08009ce8 	.word	0x08009ce8
 8009414:	08009cec 	.word	0x08009cec

08009418 <malloc>:
 8009418:	4b02      	ldr	r3, [pc, #8]	; (8009424 <malloc+0xc>)
 800941a:	4601      	mov	r1, r0
 800941c:	6818      	ldr	r0, [r3, #0]
 800941e:	f000 b88d 	b.w	800953c <_malloc_r>
 8009422:	bf00      	nop
 8009424:	20000234 	.word	0x20000234

08009428 <free>:
 8009428:	4b02      	ldr	r3, [pc, #8]	; (8009434 <free+0xc>)
 800942a:	4601      	mov	r1, r0
 800942c:	6818      	ldr	r0, [r3, #0]
 800942e:	f000 b819 	b.w	8009464 <_free_r>
 8009432:	bf00      	nop
 8009434:	20000234 	.word	0x20000234

08009438 <memcpy>:
 8009438:	440a      	add	r2, r1
 800943a:	4291      	cmp	r1, r2
 800943c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009440:	d100      	bne.n	8009444 <memcpy+0xc>
 8009442:	4770      	bx	lr
 8009444:	b510      	push	{r4, lr}
 8009446:	f811 4b01 	ldrb.w	r4, [r1], #1
 800944a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800944e:	4291      	cmp	r1, r2
 8009450:	d1f9      	bne.n	8009446 <memcpy+0xe>
 8009452:	bd10      	pop	{r4, pc}

08009454 <memset>:
 8009454:	4402      	add	r2, r0
 8009456:	4603      	mov	r3, r0
 8009458:	4293      	cmp	r3, r2
 800945a:	d100      	bne.n	800945e <memset+0xa>
 800945c:	4770      	bx	lr
 800945e:	f803 1b01 	strb.w	r1, [r3], #1
 8009462:	e7f9      	b.n	8009458 <memset+0x4>

08009464 <_free_r>:
 8009464:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009466:	2900      	cmp	r1, #0
 8009468:	d044      	beq.n	80094f4 <_free_r+0x90>
 800946a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800946e:	9001      	str	r0, [sp, #4]
 8009470:	2b00      	cmp	r3, #0
 8009472:	f1a1 0404 	sub.w	r4, r1, #4
 8009476:	bfb8      	it	lt
 8009478:	18e4      	addlt	r4, r4, r3
 800947a:	f000 f8e3 	bl	8009644 <__malloc_lock>
 800947e:	4a1e      	ldr	r2, [pc, #120]	; (80094f8 <_free_r+0x94>)
 8009480:	9801      	ldr	r0, [sp, #4]
 8009482:	6813      	ldr	r3, [r2, #0]
 8009484:	b933      	cbnz	r3, 8009494 <_free_r+0x30>
 8009486:	6063      	str	r3, [r4, #4]
 8009488:	6014      	str	r4, [r2, #0]
 800948a:	b003      	add	sp, #12
 800948c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009490:	f000 b8de 	b.w	8009650 <__malloc_unlock>
 8009494:	42a3      	cmp	r3, r4
 8009496:	d908      	bls.n	80094aa <_free_r+0x46>
 8009498:	6825      	ldr	r5, [r4, #0]
 800949a:	1961      	adds	r1, r4, r5
 800949c:	428b      	cmp	r3, r1
 800949e:	bf01      	itttt	eq
 80094a0:	6819      	ldreq	r1, [r3, #0]
 80094a2:	685b      	ldreq	r3, [r3, #4]
 80094a4:	1949      	addeq	r1, r1, r5
 80094a6:	6021      	streq	r1, [r4, #0]
 80094a8:	e7ed      	b.n	8009486 <_free_r+0x22>
 80094aa:	461a      	mov	r2, r3
 80094ac:	685b      	ldr	r3, [r3, #4]
 80094ae:	b10b      	cbz	r3, 80094b4 <_free_r+0x50>
 80094b0:	42a3      	cmp	r3, r4
 80094b2:	d9fa      	bls.n	80094aa <_free_r+0x46>
 80094b4:	6811      	ldr	r1, [r2, #0]
 80094b6:	1855      	adds	r5, r2, r1
 80094b8:	42a5      	cmp	r5, r4
 80094ba:	d10b      	bne.n	80094d4 <_free_r+0x70>
 80094bc:	6824      	ldr	r4, [r4, #0]
 80094be:	4421      	add	r1, r4
 80094c0:	1854      	adds	r4, r2, r1
 80094c2:	42a3      	cmp	r3, r4
 80094c4:	6011      	str	r1, [r2, #0]
 80094c6:	d1e0      	bne.n	800948a <_free_r+0x26>
 80094c8:	681c      	ldr	r4, [r3, #0]
 80094ca:	685b      	ldr	r3, [r3, #4]
 80094cc:	6053      	str	r3, [r2, #4]
 80094ce:	4421      	add	r1, r4
 80094d0:	6011      	str	r1, [r2, #0]
 80094d2:	e7da      	b.n	800948a <_free_r+0x26>
 80094d4:	d902      	bls.n	80094dc <_free_r+0x78>
 80094d6:	230c      	movs	r3, #12
 80094d8:	6003      	str	r3, [r0, #0]
 80094da:	e7d6      	b.n	800948a <_free_r+0x26>
 80094dc:	6825      	ldr	r5, [r4, #0]
 80094de:	1961      	adds	r1, r4, r5
 80094e0:	428b      	cmp	r3, r1
 80094e2:	bf04      	itt	eq
 80094e4:	6819      	ldreq	r1, [r3, #0]
 80094e6:	685b      	ldreq	r3, [r3, #4]
 80094e8:	6063      	str	r3, [r4, #4]
 80094ea:	bf04      	itt	eq
 80094ec:	1949      	addeq	r1, r1, r5
 80094ee:	6021      	streq	r1, [r4, #0]
 80094f0:	6054      	str	r4, [r2, #4]
 80094f2:	e7ca      	b.n	800948a <_free_r+0x26>
 80094f4:	b003      	add	sp, #12
 80094f6:	bd30      	pop	{r4, r5, pc}
 80094f8:	20003704 	.word	0x20003704

080094fc <sbrk_aligned>:
 80094fc:	b570      	push	{r4, r5, r6, lr}
 80094fe:	4e0e      	ldr	r6, [pc, #56]	; (8009538 <sbrk_aligned+0x3c>)
 8009500:	460c      	mov	r4, r1
 8009502:	6831      	ldr	r1, [r6, #0]
 8009504:	4605      	mov	r5, r0
 8009506:	b911      	cbnz	r1, 800950e <sbrk_aligned+0x12>
 8009508:	f000 f88c 	bl	8009624 <_sbrk_r>
 800950c:	6030      	str	r0, [r6, #0]
 800950e:	4621      	mov	r1, r4
 8009510:	4628      	mov	r0, r5
 8009512:	f000 f887 	bl	8009624 <_sbrk_r>
 8009516:	1c43      	adds	r3, r0, #1
 8009518:	d00a      	beq.n	8009530 <sbrk_aligned+0x34>
 800951a:	1cc4      	adds	r4, r0, #3
 800951c:	f024 0403 	bic.w	r4, r4, #3
 8009520:	42a0      	cmp	r0, r4
 8009522:	d007      	beq.n	8009534 <sbrk_aligned+0x38>
 8009524:	1a21      	subs	r1, r4, r0
 8009526:	4628      	mov	r0, r5
 8009528:	f000 f87c 	bl	8009624 <_sbrk_r>
 800952c:	3001      	adds	r0, #1
 800952e:	d101      	bne.n	8009534 <sbrk_aligned+0x38>
 8009530:	f04f 34ff 	mov.w	r4, #4294967295
 8009534:	4620      	mov	r0, r4
 8009536:	bd70      	pop	{r4, r5, r6, pc}
 8009538:	20003708 	.word	0x20003708

0800953c <_malloc_r>:
 800953c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009540:	1ccd      	adds	r5, r1, #3
 8009542:	f025 0503 	bic.w	r5, r5, #3
 8009546:	3508      	adds	r5, #8
 8009548:	2d0c      	cmp	r5, #12
 800954a:	bf38      	it	cc
 800954c:	250c      	movcc	r5, #12
 800954e:	2d00      	cmp	r5, #0
 8009550:	4607      	mov	r7, r0
 8009552:	db01      	blt.n	8009558 <_malloc_r+0x1c>
 8009554:	42a9      	cmp	r1, r5
 8009556:	d905      	bls.n	8009564 <_malloc_r+0x28>
 8009558:	230c      	movs	r3, #12
 800955a:	603b      	str	r3, [r7, #0]
 800955c:	2600      	movs	r6, #0
 800955e:	4630      	mov	r0, r6
 8009560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009564:	4e2e      	ldr	r6, [pc, #184]	; (8009620 <_malloc_r+0xe4>)
 8009566:	f000 f86d 	bl	8009644 <__malloc_lock>
 800956a:	6833      	ldr	r3, [r6, #0]
 800956c:	461c      	mov	r4, r3
 800956e:	bb34      	cbnz	r4, 80095be <_malloc_r+0x82>
 8009570:	4629      	mov	r1, r5
 8009572:	4638      	mov	r0, r7
 8009574:	f7ff ffc2 	bl	80094fc <sbrk_aligned>
 8009578:	1c43      	adds	r3, r0, #1
 800957a:	4604      	mov	r4, r0
 800957c:	d14d      	bne.n	800961a <_malloc_r+0xde>
 800957e:	6834      	ldr	r4, [r6, #0]
 8009580:	4626      	mov	r6, r4
 8009582:	2e00      	cmp	r6, #0
 8009584:	d140      	bne.n	8009608 <_malloc_r+0xcc>
 8009586:	6823      	ldr	r3, [r4, #0]
 8009588:	4631      	mov	r1, r6
 800958a:	4638      	mov	r0, r7
 800958c:	eb04 0803 	add.w	r8, r4, r3
 8009590:	f000 f848 	bl	8009624 <_sbrk_r>
 8009594:	4580      	cmp	r8, r0
 8009596:	d13a      	bne.n	800960e <_malloc_r+0xd2>
 8009598:	6821      	ldr	r1, [r4, #0]
 800959a:	3503      	adds	r5, #3
 800959c:	1a6d      	subs	r5, r5, r1
 800959e:	f025 0503 	bic.w	r5, r5, #3
 80095a2:	3508      	adds	r5, #8
 80095a4:	2d0c      	cmp	r5, #12
 80095a6:	bf38      	it	cc
 80095a8:	250c      	movcc	r5, #12
 80095aa:	4629      	mov	r1, r5
 80095ac:	4638      	mov	r0, r7
 80095ae:	f7ff ffa5 	bl	80094fc <sbrk_aligned>
 80095b2:	3001      	adds	r0, #1
 80095b4:	d02b      	beq.n	800960e <_malloc_r+0xd2>
 80095b6:	6823      	ldr	r3, [r4, #0]
 80095b8:	442b      	add	r3, r5
 80095ba:	6023      	str	r3, [r4, #0]
 80095bc:	e00e      	b.n	80095dc <_malloc_r+0xa0>
 80095be:	6822      	ldr	r2, [r4, #0]
 80095c0:	1b52      	subs	r2, r2, r5
 80095c2:	d41e      	bmi.n	8009602 <_malloc_r+0xc6>
 80095c4:	2a0b      	cmp	r2, #11
 80095c6:	d916      	bls.n	80095f6 <_malloc_r+0xba>
 80095c8:	1961      	adds	r1, r4, r5
 80095ca:	42a3      	cmp	r3, r4
 80095cc:	6025      	str	r5, [r4, #0]
 80095ce:	bf18      	it	ne
 80095d0:	6059      	strne	r1, [r3, #4]
 80095d2:	6863      	ldr	r3, [r4, #4]
 80095d4:	bf08      	it	eq
 80095d6:	6031      	streq	r1, [r6, #0]
 80095d8:	5162      	str	r2, [r4, r5]
 80095da:	604b      	str	r3, [r1, #4]
 80095dc:	4638      	mov	r0, r7
 80095de:	f104 060b 	add.w	r6, r4, #11
 80095e2:	f000 f835 	bl	8009650 <__malloc_unlock>
 80095e6:	f026 0607 	bic.w	r6, r6, #7
 80095ea:	1d23      	adds	r3, r4, #4
 80095ec:	1af2      	subs	r2, r6, r3
 80095ee:	d0b6      	beq.n	800955e <_malloc_r+0x22>
 80095f0:	1b9b      	subs	r3, r3, r6
 80095f2:	50a3      	str	r3, [r4, r2]
 80095f4:	e7b3      	b.n	800955e <_malloc_r+0x22>
 80095f6:	6862      	ldr	r2, [r4, #4]
 80095f8:	42a3      	cmp	r3, r4
 80095fa:	bf0c      	ite	eq
 80095fc:	6032      	streq	r2, [r6, #0]
 80095fe:	605a      	strne	r2, [r3, #4]
 8009600:	e7ec      	b.n	80095dc <_malloc_r+0xa0>
 8009602:	4623      	mov	r3, r4
 8009604:	6864      	ldr	r4, [r4, #4]
 8009606:	e7b2      	b.n	800956e <_malloc_r+0x32>
 8009608:	4634      	mov	r4, r6
 800960a:	6876      	ldr	r6, [r6, #4]
 800960c:	e7b9      	b.n	8009582 <_malloc_r+0x46>
 800960e:	230c      	movs	r3, #12
 8009610:	603b      	str	r3, [r7, #0]
 8009612:	4638      	mov	r0, r7
 8009614:	f000 f81c 	bl	8009650 <__malloc_unlock>
 8009618:	e7a1      	b.n	800955e <_malloc_r+0x22>
 800961a:	6025      	str	r5, [r4, #0]
 800961c:	e7de      	b.n	80095dc <_malloc_r+0xa0>
 800961e:	bf00      	nop
 8009620:	20003704 	.word	0x20003704

08009624 <_sbrk_r>:
 8009624:	b538      	push	{r3, r4, r5, lr}
 8009626:	4d06      	ldr	r5, [pc, #24]	; (8009640 <_sbrk_r+0x1c>)
 8009628:	2300      	movs	r3, #0
 800962a:	4604      	mov	r4, r0
 800962c:	4608      	mov	r0, r1
 800962e:	602b      	str	r3, [r5, #0]
 8009630:	f7f7 ff7a 	bl	8001528 <_sbrk>
 8009634:	1c43      	adds	r3, r0, #1
 8009636:	d102      	bne.n	800963e <_sbrk_r+0x1a>
 8009638:	682b      	ldr	r3, [r5, #0]
 800963a:	b103      	cbz	r3, 800963e <_sbrk_r+0x1a>
 800963c:	6023      	str	r3, [r4, #0]
 800963e:	bd38      	pop	{r3, r4, r5, pc}
 8009640:	2000370c 	.word	0x2000370c

08009644 <__malloc_lock>:
 8009644:	4801      	ldr	r0, [pc, #4]	; (800964c <__malloc_lock+0x8>)
 8009646:	f000 b809 	b.w	800965c <__retarget_lock_acquire_recursive>
 800964a:	bf00      	nop
 800964c:	20003710 	.word	0x20003710

08009650 <__malloc_unlock>:
 8009650:	4801      	ldr	r0, [pc, #4]	; (8009658 <__malloc_unlock+0x8>)
 8009652:	f000 b804 	b.w	800965e <__retarget_lock_release_recursive>
 8009656:	bf00      	nop
 8009658:	20003710 	.word	0x20003710

0800965c <__retarget_lock_acquire_recursive>:
 800965c:	4770      	bx	lr

0800965e <__retarget_lock_release_recursive>:
 800965e:	4770      	bx	lr

08009660 <_init>:
 8009660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009662:	bf00      	nop
 8009664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009666:	bc08      	pop	{r3}
 8009668:	469e      	mov	lr, r3
 800966a:	4770      	bx	lr

0800966c <_fini>:
 800966c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800966e:	bf00      	nop
 8009670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009672:	bc08      	pop	{r3}
 8009674:	469e      	mov	lr, r3
 8009676:	4770      	bx	lr
